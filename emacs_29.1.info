This is emacs.info, produced by makeinfo version 7.0.3 from emacs.texi.

This is the ‘GNU Emacs Manual’, updated for Emacs version 29.1.

   Copyright © 1985–1987, 1993–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with the Invariant Sections being “The GNU Manifesto,”
     “Distribution” and “GNU GENERAL PUBLIC LICENSE,” with the
     Front-Cover Texts being “A GNU Manual,” and with the Back-Cover
     Texts as in (a) below.  A copy of the license is included in the
     section entitled “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom.”
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs: (emacs).               The extensible self-documenting text editor.
END-INFO-DIR-ENTRY


File: emacs.info,  Node: Top,  Next: Distrib,  Up: (dir)

# /. The Emacs Editor
********************

Emacs is the advanced, extensible, customizable, self-documenting
editor.  This manual describes how to edit with Emacs and some of the
ways to customize it; it corresponds to GNU Emacs version 29.1.

   If you are reading this in Emacs, type ‘h’ to read a basic
introduction to the Info documentation system.

   For information on extending Emacs, see *note Emacs Lisp: (elisp)Top.

   This is the ‘GNU Emacs Manual’, updated for Emacs version 29.1.

   Copyright © 1985–1987, 1993–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with the Invariant Sections being “The GNU Manifesto,”
     “Distribution” and “GNU GENERAL PUBLIC LICENSE,” with the
     Front-Cover Texts being “A GNU Manual,” and with the Back-Cover
     Texts as in (a) below.  A copy of the license is included in the
     section entitled “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom.”

* Menu:

* Distrib::             How to get the latest Emacs distribution.
* Intro::               An introduction to Emacs concepts.

Important General Concepts
* Screen::              How to interpret what you see on the screen.
* User Input::          Kinds of input events (characters, buttons,
                          function keys).
* Keys::                Key sequences: what you type to request one
                          editing action.
* Mouse Input::         Using the mouse and keypads.
* Commands::            Named functions run by key sequences to do editing.
* Entering Emacs::      Starting Emacs from the shell.
* Exiting::             Stopping or killing Emacs.

Fundamental Editing Commands
* Basic::               The most basic editing commands.
* Minibuffer::          Entering arguments that are prompted for.
* M-x::                 Invoking commands by their names.
* Help::                Commands for asking Emacs about its commands.

Important Text-Changing Commands
* Mark::                The mark: how to delimit a region of text.
* Killing::             Killing (cutting) and yanking (pasting) text.
* Registers::           Saving a text string or a location in the buffer.
* Display::             Controlling what text is displayed.
* Search::              Finding or replacing occurrences of a string.
* Fixit::               Commands especially useful for fixing typos.
* Keyboard Macros::     Recording a sequence of keystrokes to be replayed.

Major Structures of Emacs
* Files::               All about handling files.
* Buffers::             Multiple buffers; editing several files at once.
* Windows::             Viewing multiple pieces of text in one frame.
* Frames::              Using multiple windows on your display.
* International::       Using non-ASCII character sets.

Advanced Features
* Modes::               Major and minor modes alter Emacs’s basic behavior.
* Indentation::         Editing the white space at the beginnings of lines.
* Text::                Commands and modes for editing human languages.
* Programs::            Commands and modes for editing programs.
* Building::            Compiling, running and debugging programs.
* Maintaining::         Features for maintaining large programs.
* Abbrevs::             Defining text abbreviations to reduce typing.
* Dired::               Directory and file manager.
* Calendar/Diary::      Calendar and diary facilities.
* Sending Mail::        Sending mail in Emacs.
* Rmail::               Reading mail in Emacs.
* Gnus::                A flexible mail and news reader.
* Host Security::       Security issues on a single computer.
* Network Security::    Managing the network security.
* Document View::       Viewing PDF, PS and DVI files.
* Shell::               Executing shell commands from Emacs.
* Emacs Server::        Using Emacs as an editing server.
* Printing::            Printing hardcopies of buffers or regions.
* Sorting::             Sorting lines, paragraphs or pages within Emacs.
* Picture Mode::        Editing pictures made up of text characters.
* Editing Binary Files::  Editing binary files with Hexl mode.
* Saving Emacs Sessions:: Saving Emacs state from one session to the next.
* Recursive Edit::      Performing edits while within another command.
* Hyperlinking::        Following links in buffers.
* Amusements::          Various games and hacks.
* Packages::            Installing additional features.
* Customization::       Modifying the behavior of Emacs.

Recovery from Problems
* Quitting::            Quitting and aborting.
* Lossage::             What to do if Emacs is hung or malfunctioning.
* Bugs::                How and when to report a bug.
* Contributing::        How to contribute improvements to Emacs.
* Service::             How to get help for your own Emacs needs.

Appendices
* Copying::             The GNU General Public License gives you permission
                          to redistribute GNU Emacs on certain terms;
                          it also explains that there is no warranty.
* GNU Free Documentation License:: The license for this documentation.
* Emacs Invocation::    Hairy startup options.
* X Resources::         X resources for customizing Emacs.
* Antinews::            Information about Emacs version 28.
* Mac OS / GNUstep::     Using Emacs under macOS and GNUstep.
* Haiku::               Using Emacs on Haiku.
* Microsoft Windows::   Using Emacs on Microsoft Windows and MS-DOS.
* Manifesto::           What’s GNU?  Gnu’s Not Unix!

* Glossary::            Terms used in this manual.
* Acknowledgments::     Major contributors to GNU Emacs.

Indexes (each index contains a large menu)
* Key Index::           An item for each standard Emacs key sequence.
* Option Index::        An item for every command-line option.
* Command Index::       An item for each standard command name.
* Variable Index::      An item for each variable documented in this manual.
* Concept Index::       An item for concepts and other general subjects.


 — The Detailed Node Listing —
 ———————————

Here are some other nodes which are really subnodes of the ones
already listed, mentioned here so you can get to them in one step:

The Organization of the Screen

* Point::               The place in the text where editing commands operate.
* Echo Area::           Short messages appear at the bottom of the screen.
* Mode Line::           Interpreting the mode line.
* Menu Bar::            How to use the menu bar.

Basic Editing Commands

* Inserting Text::      Inserting text by simply typing it.
* Moving Point::        Moving the cursor to the place where you want to
                        change something.
* Erasing::             Deleting and killing text.
* Basic Undo::          Undoing recent changes in the text.
* Basic Files::         Visiting, creating, and saving files.
* Basic Help::          Asking what a character does.
* Blank Lines::         Making and deleting blank lines.
* Continuation Lines::  How Emacs displays lines too wide for the screen.
* Position Info::       What line, row, or column is point on?
* Arguments::           Numeric arguments for repeating a command N times.
* Repeating::           Repeating the previous command quickly.

The Minibuffer

* Basic Minibuffer::      Basic usage of the minibuffer.
* Minibuffer File::     Entering file names with the minibuffer.
* Minibuffer Edit::     How to edit in the minibuffer.
* Completion::          An abbreviation facility for minibuffer input.
* Minibuffer History::  Reusing recent minibuffer arguments.
* Repetition::          Re-executing commands that used the minibuffer.
* Passwords::           Entering passwords in the echo area.
* Yes or No Prompts::   Replying yes or no in the echo area.

Completion

* Completion Example::  Examples of using completion.
* Completion Commands:: A list of completion commands.
* Completion Exit::     Completion and minibuffer text submission.
* Completion Styles::   How completion matches are chosen.
* Completion Options::  Options for completion.

Help

* Help Summary::        Brief list of all Help commands.
* Key Help::            Asking what a key does in Emacs.
* Name Help::           Asking about a command, variable or function name.
* Apropos::             Asking what pertains to a given topic.
* Help Mode::           Special features of Help mode and Help buffers.
* Package Keywords::    Finding Lisp libraries by keywords (topics).
* Language Help::       Help relating to international language support.
* Misc Help::           Other help commands.
* Help Files::          Commands to display auxiliary help files.
* Help Echo::           Help on active text and tooltips.

The Mark and the Region

* Setting Mark::        Commands to set the mark.
* Marking Objects::     Commands to put region around textual units.
* Using Region::        Summary of ways to operate on contents of the region.
* Mark Ring::           Previous mark positions saved so you can go back there.
* Global Mark Ring::    Previous mark positions in various buffers.
* Shift Selection::     Using shifted cursor motion keys.
* Disabled Transient Mark:: Leaving regions unhighlighted by default.

Killing and Moving Text

* Deletion and Killing:: Commands that remove text.
* Yanking::             Commands that insert text.
* Cut and Paste::       Clipboard and selections on graphical displays.
* Accumulating Text::   Other methods to add text to the buffer.
* Rectangles::          Operating on text in rectangular areas.
* CUA Bindings::        Using ‘C-x’/‘C-c’/‘C-v’ to kill and yank.

Deletion and Killing

* Deletion::            Commands for deleting small amounts of text and
                          blank areas.
* Killing by Lines::    How to kill entire lines of text at one time.
* Other Kill Commands:: Commands to kill large regions of text and
                          syntactic units such as words and sentences.
* Kill Options::        Options that affect killing.

Yanking

* Kill Ring::           Where killed text is stored.
* Earlier Kills::       Yanking something killed some time ago.
* Appending Kills::     Several kills in a row all yank together.

Cut and Paste Operations on Graphical Displays

* Clipboard::           How Emacs uses the system clipboard.
* Primary Selection::   The temporarily selected text selection.
* Secondary Selection:: Cutting without altering point and mark.

Registers

* Position Registers::        Saving positions in registers.
* Text Registers::            Saving text in registers.
* Rectangle Registers::       Saving rectangles in registers.
* Configuration Registers::   Saving window/frame configurations in registers.
* Number Registers::          Numbers in registers.
* File and Buffer Registers:: File and buffer names in registers.
* Keyboard Macro Registers::  Keyboard macros in registers.
* Bookmarks::                 Bookmarks are like registers, but persistent.

Controlling the Display

* Scrolling::              Commands to move text up and down in a window.
* Recentering::            A scroll command that centers the current line.
* Auto Scrolling::         Redisplay scrolls text automatically when needed.
* Horizontal Scrolling::   Moving text left and right in a window.
* Narrowing::              Restricting display and editing to a portion
                             of the buffer.
* View Mode::              Viewing read-only buffers.
* Follow Mode::            Follow mode lets two windows scroll as one.
* Faces::                  How to change the display style using faces.
* Colors::                 Specifying colors for faces.
* Standard Faces::         The main predefined faces.
* Text Scale::             Increasing or decreasing text size in a buffer.
* Font Lock::              Minor mode for syntactic highlighting using faces.
* Highlight Interactively:: Tell Emacs what text to highlight.
* Fringes::                Enabling or disabling window fringes.
* Displaying Boundaries::  Displaying top and bottom of the buffer.
* Useless Whitespace::     Showing possibly spurious trailing whitespace.
* Selective Display::      Hiding lines with lots of indentation.
* Optional Mode Line::     Optional mode line display features.
* Text Display::           How text characters are normally displayed.
* Cursor Display::         Features for displaying the cursor.
* Line Truncation::        Truncating lines to fit the screen width instead
                             of continuing them to multiple screen lines.
* Visual Line Mode::       Word wrap and screen line-based editing.
* Display Custom::         Information on variables for customizing display.

Font Lock
* Traditional Font Lock::  Font Lock based on regexps and syntax tables.
* Parser-based Font Lock:: Font Lock based on external parser.

Searching and Replacement

* Incremental Search::     Search happens as you type the string.
* Nonincremental Search::  Specify entire string and then search.
* Word Search::            Search for sequence of words.
* Symbol Search::          Search for a source code symbol.
* Regexp Search::          Search for match for a regexp.
* Regexps::                Syntax of regular expressions.
* Regexp Backslash::       Regular expression constructs starting with ‘\’.
* Regexp Example::         A complex regular expression explained.
* Lax Search::                Search ignores some distinctions between
                                similar characters, like letter-case.
* Replace::                Search, and replace some or all matches.
* Other Repeating Search:: Operating on all matches for some regexp.
* Search Customizations::  Various search customizations.

Incremental Search

* Basic Isearch::        Basic incremental search commands.
* Repeat Isearch::       Searching for the same string again.
* Isearch Yank::         Commands that grab text into the search string
                           or else edit the search string.
* Error in Isearch::     When your string is not found.
* Special Isearch::      Special input in incremental search.
* Not Exiting Isearch::  Prefix argument and scrolling commands.
* Isearch Minibuffer::   Incremental search of the minibuffer history.

Replacement Commands

* Unconditional Replace::  Replacing all matches for a string.
* Regexp Replace::         Replacing all matches for a regexp.
* Replacement and Lax Matches::
                           Lax searching for text to replace.
* Query Replace::          How to use querying.

Commands for Fixing Typos

* Undo::                The Undo commands.
* Transpose::           Exchanging two characters, words, lines, lists...
* Fixing Case::         Correcting case of last word entered.
* Spelling::            Apply spelling checker to a word, or a whole file.

Keyboard Macros

* Basic Keyboard Macro::     Defining and running keyboard macros.
* Keyboard Macro Ring::      Where previous keyboard macros are saved.
* Keyboard Macro Counter::   Inserting incrementing numbers in macros.
* Keyboard Macro Query::     Making keyboard macros do different things each
                                time.
* Save Keyboard Macro::      Giving keyboard macros names; saving them in
                                files.
* Edit Keyboard Macro::      Editing keyboard macros.
* Keyboard Macro Step-Edit:: Interactively executing and editing a keyboard
                                macro.

File Handling

* File Names::          How to type and edit file-name arguments.
* Visiting::            Visiting a file prepares Emacs to edit the file.
* Saving::              Saving makes your changes permanent.
* Reverting::           Reverting cancels all the changes not saved.
* Auto Revert::         Keeping buffers automatically up-to-date.
* Auto Save::           Auto Save periodically protects against loss of data.
* File Aliases::        Handling multiple names for one file.
* Directories::         Creating, deleting, and listing file directories.
* Comparing Files::     Finding where two files differ.
* Diff Mode::           Mode for editing file differences.
* Copying and Naming::  Copying, naming and renaming files.
* Misc File Ops::       Other things you can do on files.
* Compressed Files::    Accessing compressed files.
* File Archives::       Operating on tar, zip, jar etc. archive files.
* Remote Files::        Accessing files on other machines.
* Quoted File Names::   Quoting special characters in file names.
* File Name Cache::     Completion against a list of files you often use.
* File Conveniences::   Convenience features for finding files.
* Image Mode::          Viewing image files.
* Filesets::            Handling sets of files.

Saving Files

* Save Commands::       Commands for saving files.
* Backup::              How Emacs saves the old version of your file.
* Customize Save::      Customizing the saving of files.
* Interlocking::        How Emacs protects against simultaneous editing
                          of one file by two users.
* File Shadowing::      Copying files to shadows automatically.
* Time Stamps::         Emacs can update time stamps on saved files.

Backup Files

* Backup Names::        How backup files are named.
* Backup Deletion::     Emacs deletes excess numbered backups.
* Backup Copying::      Backups can be made by copying or renaming.

Auto Reverting Non-File Buffers

* Auto Reverting the Buffer Menu:: Auto Revert of the Buffer Menu.
* Auto Reverting Dired::           Auto Revert of Dired buffers.

Auto-Saving: Protection Against Disasters

* Auto Save Files::     The file where auto-saved changes are
                          actually made until you save the file.
* Auto Save Control::   Controlling when and how often to auto-save.
* Recover::             Recovering text from auto-save files.

Using Multiple Buffers

* Select Buffer::       Creating a new buffer or reselecting an old one.
* List Buffers::        Getting a list of buffers that exist.
* Misc Buffer::         Renaming; changing read-only status; copying text.
* Kill Buffer::         Killing buffers you no longer need.
* Several Buffers::     How to go through the list of all buffers
                          and operate variously on several of them.
* Indirect Buffers::    An indirect buffer shares the text of another buffer.
* Buffer Convenience::  Convenience and customization features for
                          buffer handling.

Convenience Features and Customization of Buffer Handling

* Uniquify::            Making buffer names unique with directory parts.
* Icomplete::           Fast minibuffer selection.
* Buffer Menus::        Configurable buffer menu.

Multiple Windows

* Basic Window::        Introduction to Emacs windows.
* Split Window::        New windows are made by splitting existing windows.
* Other Window::        Moving to another window or doing something to it.
* Pop Up Window::       Finding a file or buffer in another window.
* Change Window::       Deleting windows and changing their sizes.
* Displaying Buffers::  How Emacs picks a window for displaying a buffer.
* Temporary Displays::  Displaying non-editable buffers.
* Window Convenience::  Convenience functions for window handling.
* Tab Line::            Window tab line.

Displaying a Buffer in a Window

* Window Choice::       How ‘display-buffer’ works.

Frames and Graphical Displays

* Mouse Commands::      Moving, cutting, and pasting, with the mouse.
* Word and Line Mouse:: Mouse commands for selecting whole words or lines.
* Mouse References::    Using the mouse to select an item from a list.
* Menu Mouse Clicks::   Mouse clicks that bring up menus.
* Mode Line Mouse::     Mouse clicks on the mode line.
* Creating Frames::     Creating additional Emacs frames with various contents.
* Frame Commands::      Iconifying, deleting, and switching frames.
* Fonts::               Changing the frame font.
* Speedbar::            How to make and use a speedbar frame.
* Multiple Displays::   How one Emacs instance can talk to several displays.
* Frame Parameters::    Changing the colors and other modes of frames.
* Scroll Bars::         How to enable and disable scroll bars; how to use them.
* Window Dividers::     Window separators that can be dragged with the mouse.
* Drag and Drop::       Using drag and drop to open files and insert text.
* Menu Bars::           Enabling and disabling the menu bar.
* Tool Bars::           Enabling and disabling the tool bar.
* Tab Bars::            Enabling and disabling the tab bar.
* Dialog Boxes::        Controlling use of dialog boxes.
* Tooltips::            Displaying information at the current mouse position.
* Mouse Avoidance::     Preventing the mouse pointer from obscuring text.
* Non-Window Terminals::  Multiple frames on terminals that show only one.
* Text-Only Mouse::     Using the mouse in text terminals.

International Character Set Support

* International Chars::     Basic concepts of multibyte characters.
* Language Environments::   Setting things up for the language you use.
* Input Methods::           Entering text characters not on your keyboard.
* Select Input Method::     Specifying your choice of input methods.
* Coding Systems::          Character set conversion when you read and
                              write files, and so on.
* Recognize Coding::        How Emacs figures out which conversion to use.
* Specify Coding::          Specifying a file’s coding system explicitly.
* Output Coding::           Choosing coding systems for output.
* Text Coding::             Choosing conversion to use for file text.
* Communication Coding::    Coding systems for interprocess communication.
* File Name Coding::        Coding systems for file _names_.
* Terminal Coding::         Specifying coding systems for converting
                              terminal input and output.
* Fontsets::                Fontsets are collections of fonts
                              that cover the whole spectrum of characters.
* Defining Fontsets::       Defining a new fontset.
* Modifying Fontsets::      Modifying an existing fontset.
* Undisplayable Characters::When characters don’t display.
* Unibyte Mode::            You can pick one European character set
                              to use without multibyte characters.
* Charsets::                How Emacs groups its internal character codes.
* Bidirectional Editing::   Support for right-to-left scripts.

Major and Minor Modes

* Major Modes::         Text mode vs. Lisp mode vs. C mode...
* Minor Modes::         Each minor mode is a feature you can turn on
                          independently of any others.
* Choosing Modes::      How modes are chosen when visiting files.

Indentation

* Indentation Commands::  More commands for performing indentation.
* Tab Stops::             Stop points for indentation in Text modes.
* Just Spaces::           Using only space characters for indentation.
* Indent Convenience::    Optional indentation features.

Commands for Human Languages

* Words::               Moving over and killing words.
* Sentences::           Moving over and killing sentences.
* Paragraphs::          Moving over paragraphs.
* Pages::               Moving over pages.
* Quotation Marks::     Inserting quotation marks.
* Filling::             Filling or justifying text.
* Case::                Changing the case of text.
* Text Mode::           The major modes for editing text files.
* Outline Mode::        Editing outlines.
* Org Mode::            The Emacs organizer.
* TeX Mode::            Editing TeX and LaTeX files.
* HTML Mode::           Editing HTML and SGML files.
* Nroff Mode::          Editing input to the nroff formatter.
* Enriched Text::       Editing text enriched with fonts, colors, etc.
* Text Based Tables::   Commands for editing text-based tables.
* Two-Column::          Splitting text columns into separate windows.

Filling Text

* Auto Fill::           Auto Fill mode breaks long lines automatically.
* Fill Commands::       Commands to refill paragraphs and center lines.
* Fill Prefix::         Filling paragraphs that are indented
                          or in a comment, etc.
* Adaptive Fill::       How Emacs can determine the fill prefix automatically.

Outline Mode

* Outline Format::      What the text of an outline looks like.
* Outline Motion::      Special commands for moving through outlines.
* Outline Visibility::  Commands to control what is visible.
* Outline Views::       Outlines and multiple views.
* Foldout::             Folding means zooming in on outlines.

Org Mode

* Org Organizer::       Managing TODO lists and agendas.
* Org Authoring::       Exporting Org buffers to various formats.

TeX Mode

* TeX Editing::         Special commands for editing in TeX mode.
* LaTeX Editing::       Additional commands for LaTeX input files.
* TeX Print::           Commands for printing part of a file with TeX.
* TeX Misc::            Customization of TeX mode, and related features.

Enriched Text

* Enriched Mode::           Entering and exiting Enriched mode.
* Hard and Soft Newlines::  There are two different kinds of newlines.
* Editing Format Info::     How to edit text properties.
* Enriched Faces::          Bold, italic, underline, etc.
* Enriched Indentation::    Changing the left and right margins.
* Enriched Justification::  Centering, setting text flush with the
                              left or right margin, etc.
* Enriched Properties::     The “Special text properties” submenu.


Editing Text-based Tables

* Table Definition::    What is a text based table.
* Table Creation::      How to create a table.
* Table Recognition::   How to activate and deactivate tables.
* Cell Commands::       Cell-oriented commands in a table.
* Cell Justification::  Justifying cell contents.
* Table Rows and Columns:: Inserting and deleting rows and columns.
* Table Conversion::    Converting between plain text and tables.
* Table Misc::          Table miscellany.

Editing Programs

* Program Modes::       Major modes for editing programs.
* Defuns::              Commands to operate on major top-level parts
                          of a program.
* Program Indent::      Adjusting indentation to show the nesting.
* Parentheses::         Commands that operate on parentheses.
* Comments::            Inserting, killing, and aligning comments.
* Documentation::       Getting documentation of functions you plan to call.
* Hideshow::            Displaying blocks selectively.
* Symbol Completion::   Completion on symbol names of your program or language.
* MixedCase Words::     Dealing with identifiersLikeThis.
* Semantic::            Suite of editing tools based on source code parsing.
* Misc for Programs::   Other Emacs features useful for editing programs.
* C Modes::             Special commands of C, C++, Objective-C,
                          Java, IDL, Pike and AWK modes.
* Asm Mode::            Asm mode and its special features.
* Fortran::             Fortran mode and its special features.

Top-Level Definitions, or Defuns

* Left Margin Paren::   An open-paren or similar opening delimiter
                          starts a defun if it is at the left margin.
* Moving by Defuns::    Commands to move over or mark a major definition.
* Imenu::               Making buffer indexes as menus.
* Which Function::      Which Function mode shows which function you are in.

Indentation for Programs

* Basic Indent::        Indenting a single line.
* Multi-line Indent::   Commands to reindent many lines at once.
* Lisp Indent::         Specifying how each Lisp function should be indented.
* C Indent::            Extra features for indenting C and related modes.
* Custom C Indent::     Controlling indentation style for C and related modes.

Commands for Editing with Parentheses

* Expressions::         Expressions with balanced parentheses.
* Moving by Parens::    Commands for moving up, down and across
                          in the structure of parentheses.
* Matching::            Insertion of a close-delimiter flashes matching open.

Manipulating Comments

* Comment Commands::    Inserting, killing, and aligning comments.
* Multi-Line Comments:: Commands for adding and editing multi-line comments.
* Options for Comments::Customizing the comment features.

Documentation Lookup

* Info Lookup::        Looking up library functions and commands in Info files.
* Man Page::           Looking up man pages of library functions and commands.
* Programming Language Doc:: Looking up program functions, variables, etc.

C and Related Modes

* Motion in C::         Commands to move by C statements, etc.
* Electric C::          Colon and other chars can automatically reindent.
* Hungry Delete::       A more powerful DEL command.
* Other C Commands::    Filling comments, viewing expansion of macros,
                          and other neat features.

Fortran Mode

* Fortran Motion::      Moving point by statements or subprograms.
* Fortran Indent::      Indentation commands for Fortran.
* Fortran Comments::    Inserting and aligning comments.
* Fortran Autofill::    Auto fill support for Fortran.
* Fortran Columns::     Measuring columns for valid Fortran.
* Fortran Abbrev::      Built-in abbrevs for Fortran keywords.

Fortran Indentation

* ForIndent Commands::  Commands for indenting and filling Fortran.
* ForIndent Cont::      How continuation lines indent.
* ForIndent Num::       How line numbers auto-indent.
* ForIndent Conv::      Conventions you must obey to avoid trouble.
* ForIndent Vars::      Variables controlling Fortran indent style.

Compiling and Testing Programs

* Compilation::         Compiling programs in languages other
                          than Lisp (C, Pascal, etc.).
* Compilation Mode::    The mode for visiting compiler errors.
* Compilation Shell::   Customizing your shell properly
                          for use in the compilation buffer.
* Grep Searching::      Searching with grep.
* Flymake::             Finding syntax errors on the fly.
* Debuggers::           Running symbolic debuggers for non-Lisp programs.
* Executing Lisp::      Various modes for editing Lisp programs,
                          with different facilities for running
                          the Lisp programs.
* Lisp Libraries::      How Lisp programs are loaded into Emacs.
* Lisp Eval::           Executing a single Lisp expression in Emacs.
* Lisp Interaction::    Executing Lisp in an Emacs buffer.
* External Lisp::       Communicating through Emacs with a separate Lisp.

Running Debuggers Under Emacs

* Starting GUD::        How to start a debugger subprocess.
* Debugger Operation::  Connection between the debugger and source buffers.
* Commands of GUD::     Key bindings for common commands.
* GUD Customization::   Defining your own commands for GUD.
* GDB Graphical Interface::  An enhanced mode that uses GDB features to
                          implement a graphical debugging environment.

GDB Graphical Interface

* GDB User Interface Layout::   Control the number of displayed buffers.
* Source Buffers::              Use the mouse in the fringe/margin to
                                control your program.
* Breakpoints Buffer::          A breakpoint control panel.
* Threads Buffer::              Displays your threads.
* Stack Buffer::                Select a frame from the call stack.
* Other GDB Buffers::           Other buffers for controlling the GDB state.
* Watch Expressions::           Monitor variable values in the speedbar.
* Multithreaded Debugging::     Debugging programs with several threads.

Maintaining Large Programs

* Version Control::     Using version control systems.
* Projects::            Commands for handling source files in a project.
* Change Log::          Maintaining a change history for your program.
* Xref::                Find definitions and references of any function,
                          method, struct, macro, ... in your program.
* EDE::                 An integrated development environment for Emacs.
* Emerge::              A convenient way of merging two versions of a program.
* Bug Reference::       Highlighting references to bug reports and browsing
                          them in their issue trackers.

Version Control

* Introduction to VC::  How version control works in general.
* VC Mode Line::        How the mode line shows version control status.
* Basic VC Editing::    How to edit a file under version control.
* Log Buffer::          Features available in log entry buffers.
* Registering::         Putting a file under version control.
* Old Revisions::       Examining and comparing old versions.
* VC Change Log::       Viewing the VC Change Log.
* VC Undo::             Canceling changes before or after committing.
* VC Ignore::           Ignore files under version control system.
* VC Directory Mode::   Listing files managed by version control.
* Branches::            Multiple lines of development.
* Miscellaneous VC::    Various other commands and features of VC.
* Customizing VC::      Variables that change VC’s behavior.

Introduction to Version Control

* Why Version Control?::    Understanding the problems it addresses.
* Version Control Systems:: Supported version control back-end systems.
* VCS Concepts::            Words and concepts related to version control.
* VCS Merging::             How file conflicts are handled.
* VCS Changesets::          How changes are grouped.
* VCS Repositories::        Where version control repositories are stored.
* Types of Log File::       The VCS log in contrast to the ChangeLog.

Basic Editing under Version Control

* VC With A Merging VCS::  Without locking: default mode for CVS.
* VC With A Locking VCS::  RCS in its default mode, SCCS, and optionally CVS.
* Advanced C-x v v::       Advanced features available with a prefix argument.

VC Directory Mode

* VC Directory Buffer::   What the buffer looks like and means.
* VC Directory Commands:: Commands to use in a VC directory buffer.

Version Control Branches

* Switching Branches::    How to get to another existing branch.
* Pulling / Pushing::     Receiving/sending changes from/to elsewhere.
* Merging::               Transferring changes between branches.
* Creating Branches::     How to start a new branch.

Miscellaneous Commands and Features of VC

* Change Logs and VC::    Generating a change log file from log entries.
* VC Delete/Rename::      Deleting and renaming version-controlled files.
* Revision Tags::         Symbolic names for revisions.
* Version Headers::       Inserting version control headers into working files.
* Editing VC Commands:: Editing the VC shell commands that Emacs will run.

Customizing VC

* General VC Options::    Options that apply to multiple back ends.
* RCS and SCCS::          Options for RCS and SCCS.
* CVS Options::           Options for CVS.

Projects

* Project File Commands::   Commands for handling project files.
* Project Buffer Commands:: Commands for handling project buffers.
* Switching Projects::      Switching between projects.
* Managing Projects::       Managing the project list file.

Change Logs

* Change Log Commands:: Commands for editing change log files.
* Format of ChangeLog:: What the change log file looks like.

Xref

* Find Identifiers::    Commands to find where an identifier is defined
                          or referenced, to list identifiers, etc.
* Tags Tables::         Tags table records which file defines a symbol.
* Select Tags Table::   How to visit a specific tags table.

Find Identifiers

* Looking Up Identifiers:: Commands to find the definition of a specific tag.
* Xref Commands::          Commands in the ‘*xref*’ buffer.
* Identifier Search::      Searching and replacing identifiers.
* List Identifiers::       Listing identifiers and completing on them.

Tags Tables

* Tag Syntax::          Tag syntax for various types of code and text files.
* Create Tags Table::   Creating a tags table with ‘etags’.
* Etags Regexps::       Create arbitrary tags using regular expressions.

Merging Files with Emerge

* Overview of Emerge::  How to start Emerge.  Basic concepts.
* Submodes of Emerge::  Fast mode vs. Edit mode.
                          Skip Prefers mode and Auto Advance mode.
* State of Difference:: You do the merge by specifying state A or B
                          for each difference.
* Merge Commands::      Commands for selecting a difference,
                          changing states of differences, etc.
* Exiting Emerge::      What to do when you’ve finished the merge.
* Combining in Emerge::     How to keep both alternatives for a difference.
* Fine Points of Emerge::   Miscellaneous issues.

Abbrevs

* Abbrev Concepts::     Fundamentals of defined abbrevs.
* Defining Abbrevs::    Defining an abbrev, so it will expand when typed.
* Expanding Abbrevs::   Controlling expansion: prefixes, canceling expansion.
* Abbrevs Suggestions:: Get automatic suggestions about defined abbrevs.
* Editing Abbrevs::     Viewing or editing the entire list of defined abbrevs.
* Saving Abbrevs::      Saving the entire list of abbrevs for another session.
* Dynamic Abbrevs::     Abbreviations for words already in the buffer.
* Dabbrev Customization:: What is a word, for dynamic abbrevs.  Case handling.

Editing Pictures

* Basic Picture::         Basic concepts and simple commands of Picture Mode.
* Insert in Picture::     Controlling direction of cursor motion
                            after self-inserting characters.
* Tabs in Picture::       Various features for tab stops and indentation.
* Rectangles in Picture:: Clearing and superimposing rectangles.

Dired, the Directory Editor

* Dired Enter::              How to invoke Dired.
* Dired Navigation::         Special motion commands in the Dired buffer.
* Dired Deletion::           Deleting files with Dired.
* Flagging Many Files::      Flagging files based on their names.
* Dired Visiting::           Other file operations through Dired.
* Marks vs Flags::           Flagging for deletion vs marking.
* Operating on Files::       How to copy, rename, print, compress, etc.
                               either one file or several files.
* Shell Commands in Dired::  Running a shell command on the marked files.
* Transforming File Names::  Using patterns to rename multiple files.
* Comparison in Dired::      Running ‘diff’ by way of Dired.
* Subdirectories in Dired::  Adding subdirectories to the Dired buffer.
* Subdir Switches::          Subdirectory switches in Dired.
* Subdirectory Motion::      Moving across subdirectories, and up and down.
* Hiding Subdirectories::    Making subdirectories visible or invisible.
* Dired Updating::           Discarding lines for files of no interest.
* Dired and Find::           Using ‘find’ to choose the files for Dired.
* Wdired::                   Operating on files by editing the Dired buffer.
* Image-Dired::              Viewing image thumbnails in Dired.
* Misc Dired Features::      Various other features.

The Calendar and the Diary

* Calendar Motion::     Moving through the calendar; selecting a date.
* Scroll Calendar::     Bringing earlier or later months onto the screen.
* Counting Days::       How many days are there between two dates?
* General Calendar::    Exiting or recomputing the calendar.
* Writing Calendar Files:: Writing calendars to files of various formats.
* Holidays::            Displaying dates of holidays.
* Sunrise/Sunset::      Displaying local times of sunrise and sunset.
* Lunar Phases::        Displaying phases of the moon.
* Other Calendars::     Converting dates to other calendar systems.
* Diary::               Displaying events from your diary.
* Daylight Saving::     How to specify when daylight saving time is active.
* Time Intervals::      Keeping track of time intervals.
* Advanced Calendar/Diary Usage:: Advanced Calendar/Diary customization.

Movement in the Calendar

* Calendar Unit Motion::      Moving by days, weeks, months, and years.
* Move to Beginning or End::  Moving to start/end of weeks, months, and years.
* Specified Dates::           Moving to the current date or another
                                specific date.

Conversion To and From Other Calendars

* Calendar Systems::       The calendars Emacs understands
                             (aside from Gregorian).
* To Other Calendar::      Converting the selected date to various calendars.
* From Other Calendar::    Moving to a date specified in another calendar.

The Diary

* Format of Diary File::   Entering events in your diary.
* Displaying the Diary::   Viewing diary entries and associated calendar dates.
* Date Formats::           Various ways you can specify dates.
* Adding to Diary::        Commands to create diary entries.
* Special Diary Entries::  Anniversaries, blocks of dates, cyclic entries, etc.
* Appointments::           Reminders when it’s time to do something.
* Importing Diary::        Converting diary events to/from other formats.

More advanced features of the Calendar and Diary

* Calendar Customizing::   Calendar layout and hooks.
* Holiday Customizing::    Defining your own holidays.
* Mayan Calendar::         Moving to a date specified in a Mayan calendar.
* Date Display Format::    Changing the format.
* Time Display Format::    Changing the format.
* Diary Customizing::      Defaults you can set.
* Non-Gregorian Diary::    Diary entries based on other calendars.
* Diary Display::          A choice of ways to display the diary.
* Fancy Diary Display::    Sorting diary entries, using included diary files.
* Sexp Diary Entries::     More flexible diary entries.

Sending Mail

* Mail Format::         Format of a mail message.
* Mail Headers::        Details of some standard mail header fields.
* Mail Aliases::        Abbreviating and grouping mail addresses.
* Mail Commands::       Special commands for editing mail being composed.
* Mail Signature::      Adding a signature to every message.
* Mail Amusements::     Distracting the NSA; adding fortune messages.
* Mail Methods::        Using alternative mail-composition methods.

Mail Commands

* Mail Sending::        Commands to send the message.
* Header Editing::      Commands to move to header fields and edit them.
* Citing Mail::         Quoting a message you are replying to.
* Mail Misc::           Attachments, spell checking, etc.

Reading Mail with Rmail

* Rmail Basics::        Basic concepts of Rmail, and simple use.
* Rmail Scrolling::     Scrolling through a message.
* Rmail Motion::        Moving to another message.
* Rmail Deletion::      Deleting and expunging messages.
* Rmail Inbox::         How mail gets into the Rmail file.
* Rmail Files::         Using multiple Rmail files.
* Rmail Output::        Copying message out to files.
* Rmail Labels::        Classifying messages by labeling them.
* Rmail Attributes::    Certain standard labels, called attributes.
* Rmail Reply::         Sending replies to messages you are viewing.
* Rmail Summary::       Summaries show brief info on many messages.
* Rmail Sorting::       Sorting messages in Rmail.
* Rmail Display::       How Rmail displays a message; customization.
* Rmail Coding::        How Rmail handles decoding character sets.
* Rmail Editing::       Editing message text and headers in Rmail.
* Rmail Digest::        Extracting the messages from a digest message.
* Rmail Rot13::         Reading messages encoded in the rot13 code.
* Movemail::            More details of fetching new mail.
* Remote Mailboxes::    Retrieving mail from remote mailboxes.
* Other Mailbox Formats:: Retrieving mail from local mailboxes in
                          various formats.

Rmail Summaries

* Rmail Make Summary::  Making various sorts of summaries.
* Rmail Summary Edit::  Manipulating messages from the summary.

Gnus

* Buffers of Gnus::     The group, summary, and article buffers.
* Gnus Startup::        What you should know about starting Gnus.
* Gnus Group Buffer::   A short description of Gnus group commands.
* Gnus Summary Buffer:: A short description of Gnus summary commands.

Document Viewing

* DocView Navigation::  Navigating DocView buffers.
* DocView Searching::   Searching inside documents.
* DocView Slicing::     Specifying which part of a page is displayed.
* DocView Conversion::  Influencing and triggering conversion.

Running Shell Commands from Emacs

* Single Shell::        How to run one shell command and return.
* Interactive Shell::   Permanent shell taking input via Emacs.
* Shell Mode::          Special Emacs commands used with permanent shell.
* Shell Prompts::       Two ways to recognize shell prompts.
* Shell History::       Repeating previous commands in a shell buffer.
* Directory Tracking::  Keeping track when the subshell changes directory.
* Shell Options::       Options for customizing Shell mode.
* Terminal emulator::   An Emacs window as a terminal emulator.
* Term Mode::           Special Emacs commands used in Term mode.
* Remote Host::         Connecting to another computer.
* Serial Terminal::     Connecting to a serial port.

Shell Command History

* Shell Ring::           Fetching commands from the history list.
* Shell History Copying::Moving to a command and then copying it.
* History References::   Expanding ‘!’-style history references.

Using Emacs as a Server

* TCP Emacs server::     Listening to a TCP socket.
* Invoking emacsclient:: Connecting to the Emacs server.
* emacsclient Options::  Emacs client startup options.

Printing Hard Copies

* PostScript::           Printing buffers or regions as PostScript.
* PostScript Variables:: Customizing the PostScript printing commands.
* Printing Package::     An optional advanced printing interface.

Hyperlinking and Navigation Features

* EWW::                 A web browser in Emacs.
* Embedded WebKit Widgets:: Embedding browser widgets in Emacs buffers.
* Browse-URL::          Following URLs.
* Goto Address mode::   Activating URLs.
* FFAP::                Finding files etc. at point.

Emacs Lisp Packages

* Package Menu::         Buffer for viewing and managing packages.
* Package Statuses::     Which statuses a package can have.
* Package Installation:: Options for package installation.
* Package Files::        Where packages are installed.

Customization

* Easy Customization::  Convenient way to browse and change settings.
* Variables::           Many Emacs commands examine Emacs variables
                          to decide what to do; by setting variables,
                          you can control their functioning.
* Key Bindings::        The keymaps say what command each key runs.
                          By changing them, you can redefine keys.
* Init File::           How to write common customizations in the
                          initialization file.
* Authentication::      Keeping persistent authentication information.

Easy Customization Interface

* Customization Groups::     How settings are classified.
* Browsing Custom::          Browsing and searching for settings.
* Changing a Variable::      How to edit an option’s value and set the option.
* Saving Customizations::    Saving customizations for future Emacs sessions.
* Face Customization::       How to edit the attributes of a face.
* Specific Customization::   Customizing specific settings or groups.
* Custom Themes::            Collections of customization settings.
* Creating Custom Themes::   How to create a new custom theme.

Variables

* Examining::           Examining or setting one variable’s value.
* Hooks::               Hook variables let you specify programs for parts
                          of Emacs to run on particular occasions.
* Locals::              Per-buffer values of variables.
* File Variables::      How files can specify variable values.
* Directory Variables:: How variable values can be specified by directory.
* Connection Variables:: Variables which are valid for buffers with a
                           remote default directory.

Local Variables in Files

* Specifying File Variables:: Specifying file local variables.
* Safe File Variables::       Making sure file local variables are safe.

Customizing Key Bindings

* Keymaps::             Generalities.  The global keymap.
* Prefix Keymaps::      Keymaps for prefix keys.
* Local Keymaps::       Major and minor modes have their own keymaps.
* Minibuffer Maps::     The minibuffer uses its own local keymaps.
* Rebinding::           How to redefine one key’s meaning conveniently.
* Init Rebinding::      Rebinding keys with your initialization file.
* Modifier Keys::       Using modifier keys in key bindings.
* Function Keys::       Rebinding terminal function keys.
* Named ASCII Chars::   Distinguishing <TAB> from ‘C-i’, and so on.
* Mouse Buttons::       Rebinding mouse buttons in Emacs.
* Disabling::           Disabling a command means confirmation is required
                          before it can be executed.  This is done to protect
                          beginners from surprises.

The Emacs Initialization File

* Init Syntax::         Syntax of constants in Emacs Lisp.
* Init Examples::       How to do some things with an init file.
* Terminal Init::       Each terminal type can have an init file.
* Find Init::           How Emacs finds the init file.
* Init Non-ASCII::      Using non-ASCII characters in an init file.
* Early Init File::     Another init file, which is read early on.

Dealing with Emacs Trouble

* Stuck Recursive::     ’[...]’ in mode line around the parentheses.
* Screen Garbled::      Garbage on the screen.
* Text Garbled::        Garbage in the text.
* Memory Full::         How to cope when you run out of memory.
* Crashing::            What Emacs does when it crashes.
* After a Crash::       Recovering editing in an Emacs session that crashed.
* Emergency Escape::    What to do if Emacs stops responding.
* DEL Does Not Delete:: What to do if <DEL> doesn’t delete.

Reporting Bugs

* Known Problems::      How to read about known problems and bugs.
* Bug Criteria::        Have you really found a bug?
* Understanding Bug Reporting:: How to report a bug effectively.
* Checklist::           Steps to follow for a good bug report.
* Sending Patches::     How to send a patch for GNU Emacs.

Contributing to Emacs Development

* Coding Standards::     GNU Emacs coding standards.
* Copyright Assignment:: Assigning copyright to the FSF.

Command Line Arguments for Emacs Invocation

* Action Arguments::    Arguments to visit files, load libraries,
                          and call functions.
* Initial Options::     Arguments that take effect while starting Emacs.
* Command Example::     Examples of using command line arguments.
* Environment::         Environment variables that Emacs uses.
* Display X::           Changing the default display and using remote login.
* Font X::              Choosing a font for text, under X.
* Colors X::            Choosing display colors.
* Window Size X::       Start-up window size, under X.
* Borders X::           Internal and outer borders, under X.
* Title X::             Specifying the initial frame’s title.
* Icons X::             Choosing what sort of icon to use, under X.
* Misc X::              Other display options.

Environment Variables

* General Variables::   Environment variables that all versions of Emacs use.
* Misc Variables::      Certain system-specific variables.
* MS-Windows Registry:: An alternative to the environment on MS-Windows.

X Options and Resources

* Resources::           Using X resources with Emacs (in general).
* Table of Resources::  Table of specific X resources that affect Emacs.
* Lucid Resources::     X resources for Lucid menus.
* Motif Resources::     X resources for Motif and LessTif menus.
* GTK resources::       Resources for GTK widgets.

GTK resources

* GTK Resource Basics::   Basic usage of GTK+ resources.
* GTK Widget Names::      How GTK+ widgets are named.
* GTK Names in Emacs::    GTK+ widgets used by Emacs.
* GTK styles::            What can be customized in a GTK+ widget.

Emacs and macOS / GNUstep

* Mac / GNUstep Basics::        Basic Emacs usage under GNUstep or macOS.
* Mac / GNUstep Customization:: Customizations under GNUstep or macOS.
* Mac / GNUstep Events::        How window system events are handled.
* GNUstep Support::             Details on status of GNUstep support.

Emacs and Haiku

* Haiku Basics::        Basic Emacs usage and installation under Haiku.
* Haiku Fonts::         The various options for displaying fonts on Haiku.

Emacs and Microsoft Windows/MS-DOS

* Windows Startup::     How to start Emacs on Windows.
* Text and Binary::     Text files use CRLF to terminate lines.
* Windows Files::       File-name conventions on Windows.
* ls in Lisp::          Emulation of ‘ls’ for Dired.
* Windows HOME::        Where Emacs looks for your ‘.emacs’ and
                          where it starts up.
* Windows Keyboard::    Windows-specific keyboard features.
* Windows Mouse::       Windows-specific mouse features.
* Windows Processes::   Running subprocesses on Windows.
* Windows Printing::    How to specify the printer on MS-Windows.
* Windows Fonts::       Specifying fonts on MS-Windows.
* Windows Misc::        Miscellaneous Windows features.
* MS-DOS::              Using Emacs on MS-DOS.

Emacs and MS-DOS

* MS-DOS Keyboard::     Keyboard conventions on MS-DOS.
* MS-DOS Mouse::        Mouse conventions on MS-DOS.
* MS-DOS Display::      Fonts, frames and display size on MS-DOS.
* MS-DOS File Names::   File name conventions on MS-DOS.
* MS-DOS Printing::     Printing specifics on MS-DOS.
* MS-DOS and MULE::     Support for internationalization on MS-DOS.
* MS-DOS Processes::    Running subprocesses on MS-DOS.



File: emacs.info,  Node: Distrib,  Next: Intro,  Prev: Top,  Up: Top

# /. Distribution
****************

GNU Emacs is “free software”; this means that everyone is free to use it
and free to redistribute it under certain conditions.  GNU Emacs is not
in the public domain; it is copyrighted and there are restrictions on
its distribution, but these restrictions are designed to permit
everything that a good cooperating citizen would want to do.  What is
not allowed is to try to prevent others from further sharing any version
of GNU Emacs that they might get from you.  The precise conditions are
found in the GNU General Public License that comes with Emacs and also
appears in this manual(1).  *Note Copying::.

   One way to get a copy of GNU Emacs is from someone else who has it.
You need not ask for our permission to do so, or tell anyone else; just
copy it.  If you have access to the Internet, you can get the latest
distribution version of GNU Emacs by anonymous FTP; see
<https://www.gnu.org/software/emacs> on our website for more
information.

   You may also receive GNU Emacs when you buy a computer.  Computer
manufacturers are free to distribute copies on the same terms that apply
to everyone else.  These terms require them to give you the full
sources, including whatever changes they may have made, and to permit
you to redistribute the GNU Emacs received from them under the usual
terms of the General Public License.  In other words, the program must
be free for you when you get it, not just free for the manufacturer.

   If you find GNU Emacs useful, please *send a donation* to the Free
Software Foundation to support our work.  Donations to the Free Software
Foundation are tax-deductible in the US.  If you use GNU Emacs at your
workplace, please suggest that the company make a donation.  To donate,
see <https://my.fsf.org/donate/>.  For other ways in which you can help,
see <https://www.gnu.org/help/help.html>.

   We also sell hardcopy versions of this manual and ‘An Introduction to
Programming in Emacs Lisp’, by Robert J. Chassell.  You can visit our
online store at <https://shop.fsf.org/>.  The income from sales goes to
support the foundation’s purpose: the development of new free software,
and improvements to our existing programs including GNU Emacs.

   If you need to contact the Free Software Foundation, see
<https://www.fsf.org/about/contact/>, or write to

     Free Software Foundation
     51 Franklin Street, Fifth Floor
     Boston, MA 02110-1301
     USA

   ---------- Footnotes ----------

   (1) This manual is itself covered by the GNU Free Documentation
License.  This license is similar in spirit to the General Public
License, but is more suitable for documentation.  *Note GNU Free
Documentation License::.


File: emacs.info,  Node: Intro,  Next: Screen,  Prev: Distrib,  Up: Top

# /. Introduction
****************

You are reading about GNU Emacs, the GNU incarnation of the advanced,
self-documenting, customizable, extensible editor Emacs.  (The ‘G’ in
GNU (GNU’s Not Unix) is not silent.)

   We call Emacs “advanced” because it can do much more than simple
insertion and deletion of text.  It can control subprocesses, indent
programs automatically, show multiple files at once, edit remote files
like they were local files, and more.  Emacs editing commands operate in
terms of characters, words, lines, sentences, paragraphs, and pages, as
well as expressions and comments in various programming languages.

   “Self-documenting” means that at any time you can use special
commands, known as “help commands”, to find out what your options are,
or to find out what any command does, or to find all the commands that
pertain to a given topic.  *Note Help::.

   “Customizable” means that you can easily alter the behavior of Emacs
commands in simple ways.  For instance, if you use a programming
language in which comments start with ‘<**’ and end with ‘**>’, you can
tell the Emacs comment manipulation commands to use those strings (*note
Comments::).  To take another example, you can rebind the basic cursor
motion commands (up, down, left and right) to any keys on the keyboard
that you find comfortable.  *Note Customization::.

   “Extensible” means that you can go beyond simple customization and
create entirely new commands.  New commands are simply programs written
in the Lisp language, which are run by Emacs’s own Lisp interpreter.
Existing commands can even be redefined in the middle of an editing
session, without having to restart Emacs.  Most of the editing commands
in Emacs are written in Lisp; the few exceptions could have been written
in Lisp but use C instead for efficiency.  Writing an extension is
programming, but non-programmers can use it afterwards.  *Note Emacs
Lisp Intro: (eintr)Top, if you want to learn Emacs Lisp programming.


File: emacs.info,  Node: Screen,  Next: User Input,  Prev: Intro,  Up: Top

# /. 1 The Organization of the Screen
************************************

On a graphical display, such as on GNU/Linux using the X Window System,
Emacs occupies a graphical window.  On a text terminal, Emacs occupies
the entire terminal screen.  We will use the term “frame” to mean a
graphical window or terminal screen occupied by Emacs.  Emacs behaves
very similarly on both kinds of frames.  It normally starts out with
just one frame, but you can create additional frames if you wish (*note
Frames::).

   Each frame consists of several distinct regions.  At the top of the
frame is a “menu bar”, which allows you to access commands via a series
of menus.  On a graphical display, directly below the menu bar is a
“tool bar”, a row of icons that perform editing commands when you click
on them.  At the very bottom of the frame is an “echo area”, where
informative messages are displayed and where you enter information when
Emacs asks for it.

   The main area of the frame, below the tool bar (if one exists) and
above the echo area, is called “the window”.  Henceforth in this manual,
we will use the word “window” in this sense.  Graphical display systems
commonly use the word “window” with a different meaning; but, as stated
above, we refer to those graphical windows as “frames”.

   An Emacs window is where the “buffer”—the text or other graphics you
are editing or viewing—is displayed.  On a graphical display, the window
possesses a “scroll bar” on one side, which can be used to scroll
through the buffer.  The last line of the window is a “mode line”.  This
displays various information about what is going on in the buffer, such
as whether there are unsaved changes, the editing modes that are in use,
the current line number, and so forth.

   When you start Emacs, there is normally only one window in the frame.
However, you can subdivide this window horizontally or vertically to
create multiple windows, each of which can independently display a
buffer (*note Windows::).

   At any time, one window is the “selected window”.  On a graphical
display, the selected window shows a more prominent cursor (usually
solid and blinking); other windows show a less prominent cursor (usually
a hollow box).  On a text terminal, there is only one cursor, which is
shown in the selected window.  The buffer displayed in the selected
window is called the “current buffer”, and it is where editing happens.
Most Emacs commands implicitly apply to the current buffer; the text
displayed in unselected windows is mostly visible for reference.  If you
use multiple frames on a graphical display, selecting a particular frame
selects a window in that frame.

* Menu:

* Point::             The place in the text where editing commands operate.
* Echo Area::         Short messages appear at the bottom of the screen.
* Mode Line::         Interpreting the mode line.
* Menu Bar::          How to use the menu bar.


File: emacs.info,  Node: Point,  Next: Echo Area,  Up: Screen

1.1 Point
=========

The cursor in the selected window shows the location where most editing
commands take effect, which is called “point”(1).  Many Emacs commands
move point to different places in the buffer; for example, you can place
point by clicking mouse button 1 (normally the left button) at the
desired location.

   By default, the cursor in the selected window is drawn as a solid
block and appears to be _on_ a character, but you should think of point
as _between_ two characters; it is situated _before_ the character under
the cursor.  For example, if your text looks like ‘frob’ with the cursor
over the ‘b’, then point is between the ‘o’ and the ‘b’.  If you insert
the character ‘!’ at that position, the result is ‘fro!b’, with point
between the ‘!’ and the ‘b’.  Thus, the cursor remains over the ‘b’, as
before.

   If you are editing several files in Emacs, each in its own buffer,
each buffer has its own value of point.  A buffer that is not currently
displayed remembers its value of point if you later display it again.
Furthermore, if a buffer is displayed in multiple windows, each of those
windows has its own value of point.

   *Note Cursor Display::, for options that control how Emacs displays
the cursor.

   ---------- Footnotes ----------

   (1) The term “point” comes from the character ‘.’, which was the
command in TECO (the language in which the original Emacs was written)
for accessing the editing position.


File: emacs.info,  Node: Echo Area,  Next: Mode Line,  Prev: Point,  Up: Screen

1.2 The Echo Area
=================

The line at the very bottom of the frame is the “echo area”.  It is used
to display small amounts of text for various purposes.

   The echo area is so-named because one of the things it is used for is
“echoing”, which means displaying the characters of a multi-character
command as you type.  Single-character commands are not echoed.
Multi-character commands (*note Keys::) are echoed if you pause for more
than a second in the middle of a command.  Emacs then echoes all the
characters of the command so far, to prompt you for the rest.  Once
echoing has started, the rest of the command echoes immediately as you
type it.  This behavior is designed to give confident users fast
response, while giving hesitant users maximum feedback.

   The echo area is also used to display an “error message” when a
command cannot do its job.  Error messages may be accompanied by beeping
or by flashing the screen.

   Some commands display informative messages in the echo area to tell
you what the command has done, or to provide you with some specific
information.  These “informative” messages, unlike error messages, are
not accompanied with a beep or flash.  For example, ‘C-x =’ (hold down
<Ctrl> and type ‘x’, then let go of <Ctrl> and type ‘=’) displays a
message describing the character at point, its position in the buffer,
and its current column in the window.  Commands that take a long time
often display messages ending in ‘...’ while they are working (sometimes
also indicating how much progress has been made, as a percentage), and
add ‘done’ when they are finished.

   Informative echo area messages are saved in a special buffer named
‘*Messages*’.  (We have not explained buffers yet; see *note Buffers::,
for more information about them.)  If you miss a message that appeared
briefly on the screen, you can switch to the ‘*Messages*’ buffer to see
it again.  The ‘*Messages*’ buffer is limited to a certain number of
lines, specified by the variable ‘message-log-max’.  (We have not
explained variables either; see *note Variables::, for more information
about them.)  Beyond this limit, one line is deleted from the beginning
whenever a new message line is added at the end.

   *Note Display Custom::, for options that control how Emacs uses the
echo area.

   The echo area is also used to display the “minibuffer”, a special
window where you can input arguments to commands, such as the name of a
file to be edited.  When the minibuffer is in use, the text displayed in
the echo area begins with a “prompt string”, and the active cursor
appears within the minibuffer, which is temporarily considered the
selected window.  You can always get out of the minibuffer by typing
‘C-g’.  *Note Minibuffer::.


File: emacs.info,  Node: Mode Line,  Next: Menu Bar,  Prev: Echo Area,  Up: Screen

1.3 The Mode Line
=================

At the bottom of each window is a “mode line”, which describes what is
going on in the current buffer.  When there is only one window, the mode
line appears right above the echo area; it is the next-to-last line in
the frame.  On a graphical display, the mode line is drawn with a 3D box
appearance.  Emacs also usually draws the mode line of the selected
window with a different color from that of unselected windows, in order
to make it stand out.

   The text displayed in the mode line has the following format:

      CS:CH-FR  BUF      POS LINE   (MAJOR MINOR)

On a text terminal, this text is followed by a series of dashes
extending to the right edge of the window.  These dashes are omitted on
a graphical display.

   The CS string and the colon character after it describe the character
set and newline convention used for the current buffer.  Normally, Emacs
automatically handles these settings for you, but it is sometimes useful
to have this information.

   CS describes the character set of the text in the buffer (*note
Coding Systems::).  If it is a dash (‘-’), that indicates no special
character set handling (with the possible exception of end-of-line
conventions, described in the next paragraph).  ‘=’ means no conversion
whatsoever, and is usually used for files containing non-textual data.
Other characters represent various “coding systems”—for example, ‘1’
represents ISO Latin-1.

   On a text terminal, CS is preceded by two additional characters that
describe the coding systems for keyboard input and terminal output.
Furthermore, if you are using an input method, CS is preceded by a
string that identifies the input method (*note Input Methods::).

   The character after CS is usually a colon.  If a different string is
displayed, that indicates a nontrivial end-of-line convention for
encoding a file.  Usually, lines of text are separated by “newline
characters” in a file, but two other conventions are sometimes used.
The MS-DOS convention uses a carriage return character followed by a
linefeed character; when editing such files, the colon changes to either
a backslash (‘\’) or ‘(DOS)’, depending on the operating system.
Another convention, employed by older Macintosh systems, uses a carriage
return character instead of a newline; when editing such files, the
colon changes to either a forward slash (‘/’) or ‘(Mac)’.  On some
systems, Emacs displays ‘(Unix)’ instead of the colon for files that use
newline as the line separator.

   On frames created for ‘emacsclient’ (*note Invoking emacsclient::),
the next character is ‘@’.  This indication is typical for frames of an
Emacs process running as a daemon (*note Emacs Server::).

   The next element on the mode line is the string indicated by CH.
This shows two dashes (‘--’) if the buffer displayed in the window has
the same contents as the corresponding file on the disk; i.e., if the
buffer is unmodified.  If the buffer is modified, it shows two stars
(‘**’).  For a read-only buffer, it shows ‘%*’ if the buffer is
modified, and ‘%%’ otherwise.

   The character after CH is normally a dash (‘-’).  However, if
‘default-directory’ (*note File Names::) for the current buffer is on a
remote machine, ‘@’ is displayed instead.

   FR gives the selected frame name (*note Frames::).  It appears only
on text terminals.  The initial frame’s name is ‘F1’.

   BUF is the name of the buffer displayed in the window.  Usually, this
is the same as the name of a file you are editing.  *Note Buffers::.

   POS tells you whether there is additional text above the top of the
window, or below the bottom.  If your buffer is small and all of it is
visible in the window, POS is ‘All’.  Otherwise, it is ‘Top’ if you are
looking at the beginning of the buffer, ‘Bot’ if you are looking at the
end of the buffer, or ‘NN%’, where NN is the percentage of the buffer
above the top of the window.  With Size Indication mode, you can display
the size of the buffer as well.  *Note Optional Mode Line::.

   LINE is the character ‘L’ followed by the line number at point.  (You
can display the current column number too, by turning on Column Number
mode.  *Note Optional Mode Line::.)

   MAJOR is the name of the “major mode” used in the buffer.  A major
mode is a principal editing mode for the buffer, such as Text mode, Lisp
mode, C mode, and so forth.  *Note Major Modes::.  Some major modes
display additional information after the major mode name.  For example,
Compilation buffers and Shell buffers display the status of the
subprocess.

   MINOR is a list of some of the enabled “minor modes”, which are
optional editing modes that provide additional features on top of the
major mode.  *Note Minor Modes::.

   Some features are listed together with the minor modes whenever they
are turned on, even though they are not really minor modes.  ‘Narrow’
means that the buffer being displayed has editing restricted to only a
portion of its text (*note Narrowing::).  ‘Def’ means that a keyboard
macro is currently being defined (*note Keyboard Macros::).

   In addition, if Emacs is inside a recursive editing level, square
brackets (‘[...]’) appear around the parentheses that surround the
modes.  If Emacs is in one recursive editing level within another,
double square brackets appear, and so on.  Since recursive editing
levels affect Emacs globally, such square brackets appear in the mode
line of every window.  *Note Recursive Edit::.

   You can change the appearance of the mode line as well as the format
of its contents.  *Note Optional Mode Line::.  In addition, the mode
line is mouse-sensitive; clicking on different parts of the mode line
performs various commands.  *Note Mode Line Mouse::.  Also, hovering the
mouse pointer above mouse-sensitive portions of the mode line shows
tooltips (*note Tooltips::) with information about commands you can
invoke by clicking on the mode line.


File: emacs.info,  Node: Menu Bar,  Prev: Mode Line,  Up: Screen

1.4 The Menu Bar
================

Each Emacs frame normally has a “menu bar” at the top which you can use
to perform common operations.  There’s no need to list them here, as you
can more easily see them yourself.

   On a display that supports a mouse, you can use the mouse to choose a
command from the menu bar.  An arrow on the right edge of a menu item
means it leads to a subsidiary menu, or “submenu”.  A ‘...’ at the end
of a menu item means that the command will prompt you for further input
before it actually does anything.

   Some of the commands in the menu bar have ordinary key bindings as
well; if so, a key binding is shown after the item itself.  To view the
full command name and documentation for a menu item, type ‘C-h k’, and
then select the menu bar with the mouse in the usual way (*note Key
Help::).

   Instead of using the mouse, you can also invoke the first menu bar
item by pressing <F10> (to run the command ‘menu-bar-open’).  You can
then navigate the menus with the arrow keys or with ‘C-b’, ‘C-f’
(left/right), ‘C-p’, and ‘C-n’ (up/down).  To activate a selected menu
item, press <RET>; to cancel menu navigation, press ‘C-g’ or ‘<ESC>
<ESC> <ESC>’.  (However, note that when Emacs was built with a GUI
toolkit, the menus are drawn and controlled by the toolkit, and the key
sequences to cancel menu navigation might be different from the above
description.)

   On a text terminal, you can optionally access the menu-bar menus in
the echo area.  To this end, customize the variable
‘tty-menu-open-use-tmm’ to a non-‘nil’ value.  Then typing <F10> will
run the command ‘tmm-menubar’ instead of dropping down the menu.  (You
can also type ‘M-`’, which always invokes ‘tmm-menubar’.)  ‘tmm-menubar’
lets you select a menu item with the keyboard.  A provisional choice
appears in the echo area.  You can use the up and down arrow keys to
move through the menu to different items, and then you can type <RET> to
select the item.  Each menu item is also designated by a letter or digit
(usually the initial of some word in the item’s name).  This letter or
digit is separated from the item name by ‘==>’.  You can type the item’s
letter or digit to select the item.


File: emacs.info,  Node: User Input,  Next: Keys,  Prev: Screen,  Up: Top

# /. 2 Kinds of User Input
*************************

GNU Emacs is primarily designed for use with the keyboard.  While it is
possible to use the mouse to issue editing commands through the menu bar
and tool bar, that is usually not as efficient as using the keyboard.

   Keyboard input into Emacs is based on a heavily-extended version of
ASCII.  Simple characters, like ‘a’, ‘B’, ‘3’, ‘=’, and the space
character (denoted as <SPC>), are entered by typing the corresponding
key.  “Control characters”, such as <RET>, <TAB>, <DEL>, <ESC>, <F1>,
<Home>, and <LEFT>, are also entered this way, as are certain characters
found on non-English keyboards (*note International::).

   Emacs also recognizes control characters that are entered using
“modifier keys”.  Two commonly-used modifier keys are <Control> (usually
labeled <Ctrl>), and <Meta> (usually labeled <Alt>)(1).  For example,
‘Control-a’ is entered by holding down the <Ctrl> key while pressing
‘a’; we will refer to this as ‘C-a’ for short.  Similarly, ‘<Meta>-a’,
or ‘M-a’ for short, is entered by holding down the <Alt> key and
pressing ‘a’.  Modifier keys can also be applied to non-alphanumerical
characters, e.g., ‘C-<F1>’ or ‘M-<LEFT>’.

   You can also type Meta characters using two-character sequences
starting with <ESC>.  Thus, you can enter ‘M-a’ by typing ‘<ESC> a’.
You can enter ‘C-M-a’ (holding down both <Ctrl> and <Alt>, then pressing
‘a’) by typing ‘<ESC> C-a’.  Unlike <Meta>, <ESC> is entered as a
separate character.  You don’t hold down <ESC> while typing the next
character; instead, press <ESC> and release it, then enter the next
character.  This feature is useful on certain text terminals where the
<Meta> key does not function reliably.

   Emacs supports 3 additional modifier keys, see *note Modifier Keys::.

   Emacs has extensive support for using mouse buttons, mouse wheels and
other pointing devices like touchpads and touch screens.  *Note Mouse
Input::, for details.

   On graphical displays, the window manager might block some keyboard
inputs, including ‘M-<TAB>’, ‘M-<SPC>’, ‘C-M-d’ and ‘C-M-l’.  If you
have this problem, you can either customize your window manager to not
block those keys, or rebind the affected Emacs commands (*note
Customization::).

   Simple characters and control characters, as well as certain
non-keyboard inputs such as mouse clicks, are collectively referred to
as “input events”.  For details about how Emacs internally handles input
events, see *note (elisp)Input Events::.

   ---------- Footnotes ----------

   (1) We refer to <Alt> as <Meta> for historical reasons.


File: emacs.info,  Node: Keys,  Next: Mouse Input,  Prev: User Input,  Up: Top

# /. 3 Keys
**********

Some Emacs commands are invoked by just one input event; for example,
‘C-f’ moves forward one character in the buffer.  Other commands take
two or more input events to invoke, such as ‘C-x C-f’ and ‘C-x 4 C-f’.

   A “key sequence”, or “key” for short, is a sequence of one or more
input events that is meaningful as a unit.  If a key sequence invokes a
command, we call it a “complete key”; for example, ‘C-f’, ‘C-x C-f’ and
‘C-x 4 C-f’ are all complete keys.  If a key sequence isn’t long enough
to invoke a command, we call it a “prefix key”; from the preceding
example, we see that ‘C-x’ and ‘C-x 4’ are prefix keys.  Every key
sequence is either a complete key or a prefix key.

   A prefix key combines with the following input event to make a longer
key sequence.  For example, ‘C-x’ is a prefix key, so typing ‘C-x’ alone
does not invoke a command; instead, Emacs waits for further input (if
you pause for longer than a second, it echoes the ‘C-x’ key to prompt
for that input; *note Echo Area::).  ‘C-x’ combines with the next input
event to make a two-event key sequence, which could itself be a prefix
key (such as ‘C-x 4’), or a complete key (such as ‘C-x C-f’).  There is
no limit to the length of key sequences, but in practice they are seldom
longer than three or four input events.

   You can’t add input events onto a complete key.  For example, because
‘C-f’ is a complete key, the two-event sequence ‘C-f C-k’ is two key
sequences, not one.

   By default, the prefix keys in Emacs are ‘C-c’, ‘C-h’, ‘C-x’, ‘C-x
<RET>’, ‘C-x @’, ‘C-x a’, ‘C-x n’, ‘C-x r’, ‘C-x t’, ‘C-x v’, ‘C-x 4’,
‘C-x 5’, ‘C-x 6’, <ESC>, and ‘M-g’.  (<F1> and <F2> are aliases for
‘C-h’ and ‘C-x 6’.)  This list is not cast in stone; if you customize
Emacs, you can make new prefix keys.  You could even eliminate some of
the standard ones, though this is not recommended for most users; for
example, if you remove the prefix definition of ‘C-x 4’, then ‘C-x 4
C-f’ becomes an invalid key sequence.  *Note Key Bindings::.

   Typing the help character (‘C-h’ or <F1>) after a prefix key displays
a list of the commands starting with that prefix.  The sole exception to
this rule is <ESC>: ‘<ESC> C-h’ is equivalent to ‘C-M-h’, which does
something else entirely.  You can, however, use <F1> to display a list
of commands starting with <ESC>.


File: emacs.info,  Node: Mouse Input,  Next: Commands,  Prev: Keys,  Up: Top

# /. 4 Mouse Input
*****************

By default, Emacs supports all the normal mouse actions like setting the
cursor by clicking on the left mouse button, and selecting an area by
dragging the mouse pointer.  All mouse actions can be used to bind
commands in the same way you bind them to keyboard events (*note
Keys::).  This section provides a general overview of using the mouse in
Emacs; *note Mouse Commands::, and the sections that follow it, for more
details about mouse commands in Emacs.

   When you click the left mouse button, Emacs receives a ‘mouse-1’
event.  To see what command is bound to that event, you can type ‘C-h c’
and then press the left mouse button.  Similarly, the middle mouse
button is ‘mouse-2’ and the right mouse button is ‘mouse-3’.  If you
have a mouse with a wheel, the wheel events are commonly bound to either
‘wheel-down’ or ‘wheel-up’, or ‘mouse-4’ and ‘mouse-5’, but that depends
on the operating system configuration.

   In general, legacy X systems and terminals (*note Text-Only Mouse::)
will report ‘mouse-4’ and ‘mouse-5’, while all other systems will report
‘wheel-down’ and ‘wheel-up’.

   Some mice also have a horizontal scroll wheel, and touchpads usually
support scrolling horizontally as well.  These events are reported as
‘wheel-left’ and ‘wheel-right’ on all systems other than terminals and
legacy X systems, where they are ‘mouse-6’ and ‘mouse-7’.

   You can also combine keyboard modifiers with mouse events, so you can
bind a special command that triggers when you, for instance, holds down
the Meta key and then uses the middle mouse button.  In that case, the
event name will be ‘M-mouse-2’.

   On some systems, you can also bind commands for handling touch screen
events.  In that case, the events are called ‘touchscreen-update’ and
‘touchscreen-end’.


File: emacs.info,  Node: Commands,  Next: Entering Emacs,  Prev: Mouse Input,  Up: Top

# /. 5 Keys and Commands
***********************

This manual is full of passages that tell you what particular keys do.
But Emacs does not assign meanings to keys directly.  Instead, Emacs
assigns meanings to named “commands”, and then gives keys their meanings
by “binding” them to commands.

   Every command has a name chosen by a programmer.  The name is usually
made of a few English words separated by dashes; for example,
‘next-line’ or ‘forward-word’.  Internally, each command is a special
type of Lisp “function”, and the actions associated with the command are
performed by running the function.  *Note What Is a Function:
(elisp)What Is a Function.

   The bindings between keys and commands are recorded in tables called
“keymaps”.  *Note Keymaps::.

   When we say that “‘C-n’ moves down vertically one line” we are
glossing over a subtle distinction that is irrelevant in ordinary use,
but vital for Emacs customization.  The command ‘next-line’ does a
vertical move downward.  ‘C-n’ has this effect _because_ it is bound to
‘next-line’.  If you rebind ‘C-n’ to the command ‘forward-word’, ‘C-n’
will move forward one word instead.

   In this manual, we will often speak of keys like ‘C-n’ as commands,
even though strictly speaking the key is bound to a command.  Usually,
we state the name of the command which really does the work in
parentheses after mentioning the key that runs it.  For example, we will
say that “The command ‘C-n’ (‘next-line’) moves point vertically down”,
meaning that the command ‘next-line’ moves vertically down, and the key
‘C-n’ is normally bound to it.

   Since we are discussing customization, we should tell you about
“variables”.  Often the description of a command will say, “To change
this, set the variable ‘mumble-foo’.” A variable is a name used to store
a value.  Most of the variables documented in this manual are meant for
customization: some command or other part of Emacs examines the variable
and behaves differently according to the value that you set.  You can
ignore the information about variables until you are interested in
customizing them.  Then read the basic information on variables (*note
Variables::) and the information about specific variables will make
sense.


File: emacs.info,  Node: Entering Emacs,  Next: Exiting,  Prev: Commands,  Up: Top

# /. 6 Entering Emacs
********************

The usual way to invoke Emacs is with the shell command ‘emacs’.  From a
terminal window running a Unix shell on a GUI terminal, you can run
Emacs in the background with ‘emacs &’; this way, Emacs won’t tie up the
terminal window, so you can use it to run other shell commands.  (For
comparable methods of starting Emacs on MS-Windows, see *note Windows
Startup::.)

   When Emacs starts up, the initial frame displays a special buffer
named ‘*GNU Emacs*’.  This “startup screen” contains information about
Emacs and “links” to common tasks that are useful for beginning users.
For instance, activating the ‘Emacs Tutorial’ link opens the Emacs
tutorial; this does the same thing as the command ‘C-h t’
(‘help-with-tutorial’).  To activate a link, either move point onto it
and type ‘<RET>’, or click on it with ‘mouse-1’ (the left mouse button).

   Using a command line argument, you can tell Emacs to visit one or
more files as soon as it starts up.  For example, ‘emacs foo.txt’ starts
Emacs with a buffer displaying the contents of the file ‘foo.txt’.  This
feature exists mainly for compatibility with other editors, which are
designed to be launched from the shell for short editing sessions.  If
you call Emacs this way, the initial frame is split into two windows—one
showing the specified file, and the other showing the startup screen.
*Note Windows::.

   Generally, it is unnecessary and wasteful to start Emacs afresh each
time you want to edit a file.  The recommended way to use Emacs is to
start it just once, just after you log in, and do all your editing in
the same Emacs session.  *Note Files::, for information on visiting more
than one file.  If you use Emacs this way, the Emacs session accumulates
valuable context, such as the kill ring, registers, undo history, and
mark ring data, which together make editing more convenient.  These
features are described later in the manual.

   To edit a file from another program while Emacs is running, you can
use the ‘emacsclient’ helper program to open a file in the existing
Emacs session.  *Note Emacs Server::.

   Emacs accepts other command line arguments that tell it to load
certain Lisp files, where to put the initial frame, and so forth.  *Note
Emacs Invocation::.

   If the variable ‘inhibit-startup-screen’ is non-‘nil’, Emacs does not
display the startup screen.  In that case, if one or more files were
specified on the command line, Emacs simply displays those files;
otherwise, it displays a buffer named ‘*scratch*’, which can be used to
evaluate Emacs Lisp expressions interactively.  *Note Lisp
Interaction::.  You can set the variable ‘inhibit-startup-screen’ using
the Customize facility (*note Easy Customization::), or by editing your
initialization file (*note Init File::).(1)

   You can also force Emacs to display a file or directory at startup by
setting the variable ‘initial-buffer-choice’ to a string naming that
file or directory.  The value of ‘initial-buffer-choice’ may also be a
function (of no arguments) that should return a buffer which is then
displayed.  If ‘initial-buffer-choice’ is non-‘nil’, then if you specify
any files on the command line, Emacs still visits them, but does not
display them initially.

   ---------- Footnotes ----------

   (1) Setting ‘inhibit-startup-screen’ in ‘site-start.el’ doesn’t work,
because the startup screen is set up before reading ‘site-start.el’.
*Note Init File::, for information about ‘site-start.el’.


File: emacs.info,  Node: Exiting,  Next: Basic,  Prev: Entering Emacs,  Up: Top

# /. 7 Exiting Emacs
*******************

‘C-x C-c’
     Kill Emacs (‘save-buffers-kill-terminal’).
‘C-z’
     On a text terminal, suspend Emacs; on a graphical display, iconify
     (or “minimize”) the selected frame (‘suspend-frame’).

   “Killing” Emacs means terminating the Emacs program.  To do this,
type ‘C-x C-c’ (‘save-buffers-kill-terminal’).  A two-character key
sequence is used to make it harder to type by accident.  If there are
any modified file-visiting buffers when you type ‘C-x C-c’, Emacs first
offers to save these buffers.  If you do not save them all, it asks for
confirmation again, since the unsaved changes will be lost.  Emacs also
asks for confirmation if any subprocesses are still running, since
killing Emacs will also kill the subprocesses (*note Shell::).

   ‘C-x C-c’ behaves specially if you are using Emacs as a server.  If
you type it from a client frame, it closes the client connection.  *Note
Emacs Server::.

   Emacs can, optionally, record certain session information when you
kill it, such as the files you were visiting at the time.  This
information is then available the next time you start Emacs.  *Note
Saving Emacs Sessions::.

   If the value of the variable ‘confirm-kill-emacs’ is non-‘nil’, ‘C-x
C-c’ assumes that its value is a predicate function, and calls that
function.  If the result of the function call is non-‘nil’, the session
is killed, otherwise Emacs continues to run.  One convenient function to
use as the value of ‘confirm-kill-emacs’ is the function ‘yes-or-no-p’.
The default value of ‘confirm-kill-emacs’ is ‘nil’.

   If the value of the variable ‘confirm-kill-processes’ is ‘nil’, ‘C-x
C-c’ does not ask for confirmation before killing subprocesses started
by Emacs.  The value is ‘t’ by default.

   To further customize what happens when Emacs is exiting, see *note
(elisp)Killing Emacs::.

   To kill Emacs without being prompted about saving, type ‘M-x
kill-emacs’.

   ‘C-z’ runs the command ‘suspend-frame’.  On a graphical display, this
command “minimizes” (or “iconifies”) the selected Emacs frame, hiding it
in a way that lets you bring it back later (exactly how this hiding
occurs depends on the window system).  On a text terminal, the ‘C-z’
command “suspends” Emacs, stopping the program temporarily and returning
control to the parent process (usually a shell); in most shells, you can
resume Emacs after suspending it with the shell command ‘%emacs’.

   Text terminals usually listen for certain special characters whose
meaning is to kill or suspend the program you are running.  This
terminal feature is turned off while you are in Emacs.  The meanings of
‘C-z’ and ‘C-x C-c’ as keys in Emacs were inspired by the use of ‘C-z’
and ‘C-c’ on several operating systems as the characters for stopping or
killing a program, but that is their only relationship with the
operating system.  You can customize these keys to run any commands of
your choice (*note Keymaps::).


File: emacs.info,  Node: Basic,  Next: Minibuffer,  Prev: Exiting,  Up: Top

# /. 8 Basic Editing Commands
****************************

Here we explain the basics of how to enter text, make corrections, and
save the text in a file.  If this material is new to you, we suggest you
first run the Emacs learn-by-doing tutorial, by typing ‘C-h t’
(‘help-with-tutorial’).

* Menu:


* Inserting Text::      Inserting text by simply typing it.
* Moving Point::        Moving the cursor to the place where you want to
                          change something.
* Erasing::             Deleting and killing text.
* Basic Undo::          Undoing recent changes in the text.
* Files: Basic Files.   Visiting, creating, and saving files.
* Help: Basic Help.     Asking what a character does.
* Blank Lines::         Making and deleting blank lines.
* Continuation Lines::  How Emacs displays lines too wide for the screen.
* Position Info::       What line, row, or column is point on?
* Arguments::           Numeric arguments for repeating a command N times.
* Repeating::           Repeating the previous command quickly.


File: emacs.info,  Node: Inserting Text,  Next: Moving Point,  Up: Basic

8.1 Inserting Text
==================

You can insert an ordinary “graphic character” (e.g., ‘a’, ‘B’, ‘3’, and
‘=’) by typing the associated key.  This adds the character to the
buffer at point.  Insertion moves point forward, so that point remains
just after the inserted text.  *Note Point::.

   To end a line and start a new one, type <RET> (‘newline’).  (The
<RET> key may be labeled <Return>, or <Enter>, or with a funny-looking
left-pointing arrow on your keyboard, but we refer to it as <RET> in
this manual.)  This command inserts a newline character into the buffer,
then indents (*note Indentation::) according to the major mode.  If
point is at the end of the line, the effect is to create a new blank
line after it and indent the new line; if point is in the middle of a
line, the line is split at that position.  To turn off the
auto-indentation, you can either disable Electric Indent mode (*note
Indent Convenience::) or type ‘C-j’, which inserts just a newline,
without any auto-indentation.

   As we explain later in this manual, you can change the way Emacs
handles text insertion by turning on “minor modes”.  For instance, the
minor mode called Auto Fill mode splits lines automatically when they
get too long (*note Filling::).  The minor mode called Overwrite mode
causes inserted characters to replace (overwrite) existing text, instead
of shoving it to the right.  *Note Minor Modes::.

   Only graphic characters can be inserted by typing the associated key;
other keys act as editing commands and do not insert themselves.  For
instance, <DEL> runs the command ‘delete-backward-char’ by default (some
modes bind it to a different command); it does not insert a literal
‘DEL’ character (ASCII character code 127).

   To insert a non-graphic character, or a character that your keyboard
does not support, first “quote” it by typing ‘C-q’ (‘quoted-insert’).
There are two ways to use ‘C-q’:

   • ‘C-q’ followed by any non-graphic character (even ‘C-g’) inserts
     that character.  For instance, ‘C-q <DEL>’ inserts a literal ‘DEL’
     character.

   • ‘C-q’ followed by a sequence of octal digits inserts the character
     with the specified octal character code.  You can use any number of
     octal digits; any non-digit terminates the sequence.  If the
     terminating character is <RET>, that <RET> serves only to terminate
     the sequence.  Any other non-digit terminates the sequence and then
     acts as normal input—thus, ‘C-q 1 0 1 B’ inserts ‘AB’.

     The use of octal sequences is disabled in ordinary non-binary
     Overwrite mode, to give you a convenient way to insert a digit
     instead of overwriting with it.

To use decimal or hexadecimal instead of octal, set the variable
‘read-quoted-char-radix’ to 10 or 16.  If the radix is 16, the letters
‘a’ to ‘f’ serve as part of a character code, just like digits.  Case is
ignored.

   A few common Unicode characters can be inserted via a command
starting with ‘C-x 8’.  For example, ‘C-x 8 [’ inserts ‘ which is
Unicode code-point U+2018 LEFT SINGLE QUOTATION MARK, sometimes called a
left single “curved quote” or “curly quote”.  Similarly, ‘C-x 8 ]’, ‘C-x
8 {’ and ‘C-x 8 }’ insert the curved quotes ’, “ and ”, respectively.
Also, a working <Alt> key acts like ‘C-x 8’ (unless followed by <RET>);
e.g., ‘A-[’ acts like ‘C-x 8 [’ and inserts ‘.  To see which characters
have ‘C-x 8’ shorthands, type ‘C-x 8 C-h’.

   Alternatively, you can use the command ‘C-x 8 <RET>’ (‘insert-char’).
This prompts for the Unicode name or code-point of a character, using
the minibuffer.  If you enter a name, the command provides completion
(*note Completion::).  If you enter a code-point, it should be as a
hexadecimal number (the convention for Unicode), or a number with a
specified radix, e.g., ‘#o23072’ (octal); *Note (elisp)Integer Basics::.
The command then inserts the corresponding character into the buffer.

   For example, the following all insert the same character:

     C-x 8 <RET> left single quotation mark <RET>
     C-x 8 <RET> left sin <TAB> <RET>
     C-x 8 <RET> 2018 <RET>
     C-x 8 [
     A-[  (if the Alt key works)
     `    (in Electric Quote mode)

   A numeric argument to ‘C-q’ or ‘C-x 8 ...’ specifies how many copies
of the character to insert (*note Arguments::).

   As an alternative to ‘C-x 8’, you can select the corresponding
transient input method by typing ‘C-u C-x \ iso-transl <RET>’, then
temporarily activating this transient input method by typing ‘C-x \ [’
will insert the same character ‘ (*note transient input method::).

   In addition, in some contexts, if you type a quotation using grave
accent and apostrophe ‘`like this'’, it is converted to a form ‘like
this’ using single quotation marks, even without ‘C-x 8’ commands.
Similarly, typing a quotation ‘``like this''’ using double grave accent
and apostrophe converts it to a form “like this” using double quotation
marks.  *Note Quotation Marks::.


File: emacs.info,  Node: Moving Point,  Next: Erasing,  Prev: Inserting Text,  Up: Basic

8.2 Changing the Location of Point
==================================

To do more than insert characters, you have to know how to move point
(*note Point::).  The keyboard commands ‘C-f’, ‘C-b’, ‘C-n’, and ‘C-p’
move point to the right, left, down, and up, respectively.  You can also
move point using the “arrow keys” present on most keyboards: <RIGHT>,
<LEFT>, <DOWN>, and <UP>; however, many Emacs users find that it is
slower to use the arrow keys than the control keys, because you need to
move your hand to the area of the keyboard where those keys are located.

   You can also click the left mouse button to move point to the
position clicked.  Emacs also provides a variety of additional keyboard
commands that move point in more sophisticated ways.

‘C-f’
     Move forward one character (‘forward-char’).

‘<RIGHT>’
     This command (‘right-char’) behaves like ‘C-f’, except when point
     is in a right-to-left paragraph (*note Bidirectional Editing::).

‘C-b’
     Move backward one character (‘backward-char’).

‘<LEFT>’
     This command (‘left-char’) behaves like ‘C-b’, except if the
     current paragraph is right-to-left (*note Bidirectional Editing::).

‘C-n’
‘<DOWN>’
     Move down one screen line (‘next-line’).  This command attempts to
     keep the horizontal position unchanged, so if you start in the
     middle of one line, you move to the middle of the next.

‘C-p’
‘<UP>’
     Move up one screen line (‘previous-line’).  This command preserves
     position within the line, like ‘C-n’.

‘C-a’
‘<Home>’
     Move to the beginning of the line (‘move-beginning-of-line’).

‘C-e’
‘<End>’
     Move to the end of the line (‘move-end-of-line’).

‘M-f’
     Move forward one word (‘forward-word’).  *Note Words::.

‘C-<RIGHT>’
‘M-<RIGHT>’
     This command (‘right-word’) behaves like ‘M-f’, except it moves
     _backward_ by one word if the current paragraph is right-to-left.
     *Note Bidirectional Editing::.

‘M-b’
     Move backward one word (‘backward-word’).  *Note Words::.

‘C-<LEFT>’
‘M-<LEFT>’
     This command (‘left-word’) behaves like ‘M-b’, except it moves
     _forward_ by one word if the current paragraph is right-to-left.
     *Note Bidirectional Editing::.

‘M-r’
     Without moving the text on the screen, reposition point on the left
     margin of the center-most text line of the window; on subsequent
     consecutive invocations, move point to the left margin of the
     top-most line, the bottom-most line, and so forth, in cyclic order
     (‘move-to-window-line-top-bottom’).

     A numeric argument says which screen line to place point on,
     counting downward from the top of the window (zero means the top
     line).  A negative argument counts lines up from the bottom (−1
     means the bottom line).  *Note Arguments::, for more information on
     numeric arguments.

‘M-<’
     Move to the top of the buffer (‘beginning-of-buffer’).  With
     numeric argument N, move to N/10 of the way from the top.  On
     graphical displays, ‘C-<HOME>’ does the same.

‘M->’
     Move to the end of the buffer (‘end-of-buffer’).  On graphical
     displays, ‘C-<END>’ does the same.

‘C-v’
‘<PageDown>’
‘<next>’
     Scroll the display one screen forward, and move point onscreen if
     necessary (‘scroll-up-command’).  *Note Scrolling::.

‘M-v’
‘<PageUp>’
‘<prior>’
     Scroll one screen backward, and move point onscreen if necessary
     (‘scroll-down-command’).  *Note Scrolling::.

‘M-g c’
     Read a number N and move point to buffer position N.  Position 1 is
     the beginning of the buffer.  If point is on or just after a number
     in the buffer, that is the default for N.  Just type <RET> in the
     minibuffer to use it.  You can also specify N by giving ‘M-g c’ a
     numeric prefix argument.

‘M-g M-g’
‘M-g g’
     Read a number N and move point to the beginning of line number N
     (‘goto-line’).  Line 1 is the beginning of the buffer.  If point is
     on or just after a number in the buffer, that is the default for N.
     Just type <RET> in the minibuffer to use it.  You can also specify
     N by giving ‘M-g M-g’ a numeric prefix argument.  *Note Select
     Buffer::, for the behavior of ‘M-g M-g’ when you give it a plain
     prefix argument.  Alternatively, you can use the command
     ‘goto-line-relative’ to move point to the line relative to the
     accessible portion of the narrowed buffer.

     ‘goto-line’ has its own history list (*note Minibuffer History::).
     You can have either a single list shared between all buffers (the
     default) or a separate list for each buffer, by customizing the
     user option ‘goto-line-history-local’.

‘M-g <TAB>’
     Read a number N and move to column N in the current line.  Column 0
     is the leftmost column.  If called with a prefix argument, move to
     the column number specified by the argument’s numeric value.

‘C-x C-n’
     Use the current column of point as the “semipermanent goal column”
     (‘set-goal-column’) in the current buffer.  When a semipermanent
     goal column is in effect, ‘C-n’, ‘C-p’, ‘<prior>’ and ‘<next>’
     always try to move to this column, or as close as possible to it,
     after moving vertically.  The goal column remains in effect until
     canceled.

‘C-u C-x C-n’
     Cancel the goal column.  Henceforth, ‘C-n’ and ‘C-p’ try to
     preserve the horizontal position, as usual.

   When a line of text in the buffer is longer than the width of the
window, Emacs usually displays it on two or more “screen lines”.  For
convenience, ‘C-n’ and ‘C-p’ move point by screen lines, as do the
equivalent keys ‘<down>’ and ‘<up>’.  You can force these commands to
move according to “logical lines” (i.e., according to the text lines in
the buffer) by setting the variable ‘line-move-visual’ to ‘nil’; if a
logical line occupies multiple screen lines, the cursor then skips over
the additional screen lines.  For details, see *note Continuation
Lines::.  *Note Variables::, for how to set variables such as
‘line-move-visual’.

   Unlike ‘C-n’ and ‘C-p’, most of the Emacs commands that work on lines
work on _logical_ lines.  For instance, ‘C-a’ (‘move-beginning-of-line’)
and ‘C-e’ (‘move-end-of-line’) respectively move to the beginning and
end of the logical line.  Whenever we encounter commands that work on
screen lines, such as ‘C-n’ and ‘C-p’, we will point these out.

   When ‘line-move-visual’ is ‘nil’, you can also set the variable
‘track-eol’ to a non-‘nil’ value.  Then ‘C-n’ and ‘C-p’, when starting
at the end of the logical line, move to the end of the next logical
line.  Normally, ‘track-eol’ is ‘nil’.

   ‘C-n’ normally stops at the end of the buffer when you use it on the
last line in the buffer.  However, if you set the variable
‘next-line-add-newlines’ to a non-‘nil’ value, ‘C-n’ on the last line of
a buffer creates an additional line at the end and moves down into it.


File: emacs.info,  Node: Erasing,  Next: Basic Undo,  Prev: Moving Point,  Up: Basic

8.3 Erasing Text
================

‘<DEL>’
‘<BACKSPACE>’
     Delete the character before point, or the region if it is active
     (‘delete-backward-char’).

‘<Delete>’
     Delete the character after point, or the region if it is active
     (‘delete-forward-char’).

‘C-d’
     Delete the character after point (‘delete-char’).

‘C-k’
     Kill to the end of the line (‘kill-line’).

‘M-d’
     Kill forward to the end of the next word (‘kill-word’).

‘M-<DEL>’
‘M-<BACKSPACE>’
     Kill back to the beginning of the previous word
     (‘backward-kill-word’).

   The ‘<DEL>’ (‘delete-backward-char’) command removes the character
before point, moving the cursor and the characters after it backwards.
If point was at the beginning of a line, this deletes the preceding
newline, joining this line to the previous one.

   If, however, the region is active, ‘<DEL>’ instead deletes the text
in the region.  *Note Mark::, for a description of the region.

   On most keyboards, <DEL> is labeled <BACKSPACE>, but we refer to it
as <DEL> in this manual.  (Do not confuse <DEL> with the <Delete> key;
we will discuss <Delete> momentarily.)  On some text terminals, Emacs
may not recognize the <DEL> key properly.  *Note DEL Does Not Delete::,
if you encounter this problem.

   The <Delete> (‘delete-forward-char’) command deletes in the opposite
direction: it deletes the character after point, i.e., the character
under the cursor.  If point was at the end of a line, this joins the
following line onto this one.  Like ‘<DEL>’, it deletes the text in the
region if the region is active (*note Mark::).

   ‘C-d’ (‘delete-char’) deletes the character after point, similar to
<Delete>, but regardless of whether the region is active.

   *Note Deletion::, for more detailed information about the above
deletion commands.

   ‘C-k’ (‘kill-line’) erases (kills) a line at a time.  If you type
‘C-k’ at the beginning or middle of a line, it kills all the text up to
the end of the line.  If you type ‘C-k’ at the end of a line, it joins
that line with the following line.

   *Note Killing::, for more information about ‘C-k’ and related
commands.


File: emacs.info,  Node: Basic Undo,  Next: Basic Files,  Prev: Erasing,  Up: Basic

8.4 Undoing Changes
===================

‘C-/’
‘C-x u’
‘C-_’
     Undo one entry of the undo records—usually, one command worth
     (‘undo’).  (The first key might be unavailable on text-mode
     displays.)

   Emacs records a list of changes made in the buffer text, so you can
undo recent changes.  This is done using the ‘undo’ command, which is
bound to ‘C-/’ (as well as ‘C-x u’ and ‘C-_’).  Normally, this command
undoes the last change, moving point back to where it was before the
change.  The undo command applies only to changes in the buffer; you
can’t use it to undo cursor motion.

   On a terminal that supports the <Control> modifier on all other keys,
the easiest way to invoke ‘undo’ is with ‘C-/’, since that doesn’t need
the <Shift> modifier.  On terminals which allow only the ASCII control
characters, ‘C-/’ does not exist, but for many of them ‘C-/’ still works
because it actually sends ‘C-_’ to Emacs, while many others allow you to
omit the <Shift> modifier when you type ‘C-_’ (in effect pressing
‘C--’), making that the most convenient way to invoke ‘undo’.

   Although each editing command usually makes a separate entry in the
undo records, very simple commands may be grouped together.  Sometimes,
an entry may cover just part of a complex command.

   If you repeat ‘C-/’ (or its aliases), each repetition undoes another,
earlier change, back to the limit of the undo information available.  If
all recorded changes have already been undone, the undo command displays
an error message and does nothing.

   To learn more about the ‘undo’ command, see *note Undo::.


File: emacs.info,  Node: Basic Files,  Next: Basic Help,  Prev: Basic Undo,  Up: Basic

8.5 Files
=========

Text that you insert in an Emacs buffer lasts only as long as the Emacs
session.  To keep any text permanently, you must put it in a “file”.

   Suppose there is a file named ‘test.emacs’ in your home directory.
To begin editing this file in Emacs, type

     C-x C-f test.emacs <RET>

Here the file name is given as an “argument” to the command ‘C-x C-f’
(‘find-file’).  That command uses the “minibuffer” to read the argument,
and you type <RET> to terminate the argument (*note Minibuffer::).

   Emacs obeys this command by “visiting” the file: it creates a buffer,
copies the contents of the file into the buffer, and then displays the
buffer for editing.  If you alter the text, you can “save” the new text
in the file by typing ‘C-x C-s’ (‘save-buffer’).  This copies the
altered buffer contents back into the file ‘test.emacs’, making them
permanent.  Until you save, the changed text exists only inside Emacs,
and the file ‘test.emacs’ is unaltered.

   To create a file, just visit it with ‘C-x C-f’ as if it already
existed.  This creates an empty buffer, in which you can insert the text
you want to put in the file.  Emacs actually creates the file the first
time you save this buffer with ‘C-x C-s’.

   To learn more about using files in Emacs, see *note Files::.


File: emacs.info,  Node: Basic Help,  Next: Blank Lines,  Prev: Basic Files,  Up: Basic

8.6 Help
========

If you forget what a key does, you can find out by typing ‘C-h k’
(‘describe-key’), followed by the key of interest; for example, ‘C-h k
C-n’ tells you what ‘C-n’ does.

   The prefix key ‘C-h’ stands for “help”.  The key <F1> serves as an
alias for ‘C-h’.  Apart from ‘C-h k’, there are many other help commands
providing different kinds of help.

   *Note Help::, for details.


File: emacs.info,  Node: Blank Lines,  Next: Continuation Lines,  Prev: Basic Help,  Up: Basic

8.7 Blank Lines
===============

Here are special commands and techniques for inserting and deleting
blank lines.

‘C-o’
     Insert a blank line after the cursor (‘open-line’).
‘C-x C-o’
     Delete all but one of many consecutive blank lines
     (‘delete-blank-lines’).

   We have seen how ‘<RET>’ (‘newline’) starts a new line of text.
However, it may be easier to see what you are doing if you first make a
blank line and then insert the desired text into it.  This is easy to do
using the key ‘C-o’ (‘open-line’), which inserts a newline after point
but leaves point in front of the newline.  After ‘C-o’, type the text
for the new line.

   You can make several blank lines by typing ‘C-o’ several times, or by
giving it a numeric argument specifying how many blank lines to make.
*Note Arguments::, for how.  If you have a fill prefix, the ‘C-o’
command inserts the fill prefix on the new line, if typed at the
beginning of a line.  *Note Fill Prefix::.

   The easy way to get rid of extra blank lines is with the command ‘C-x
C-o’ (‘delete-blank-lines’).  If point lies within a run of several
blank lines, ‘C-x C-o’ deletes all but one of them.  If point is on a
single blank line, ‘C-x C-o’ deletes it.  If point is on a nonblank
line, ‘C-x C-o’ deletes all following blank lines, if any exists.


File: emacs.info,  Node: Continuation Lines,  Next: Position Info,  Prev: Blank Lines,  Up: Basic

8.8 Continuation Lines
======================

Sometimes, a line of text in the buffer—a “logical line”—is too long to
fit in the window, and Emacs displays it as two or more “screen lines”.
This is called “line wrapping” or “continuation”, and the long logical
line is called a “continued line”.  On a graphical display, Emacs
indicates line wrapping with small bent arrows in the left and right
window fringes.  On a text terminal, Emacs indicates line wrapping by
displaying a ‘\’ character at the right margin.

   Most commands that act on lines act on logical lines, not screen
lines.  For instance, ‘C-k’ kills a logical line.  As described earlier,
‘C-n’ (‘next-line’) and ‘C-p’ (‘previous-line’) are special exceptions:
they move point down and up, respectively, by one screen line (*note
Moving Point::).

   Emacs can optionally “truncate” long logical lines instead of
continuing them.  This means that every logical line occupies a single
screen line; if it is longer than the width of the window, the rest of
the line is not displayed.  On a graphical display, a truncated line is
indicated by a small straight arrow in the right fringe; on a text
terminal, it is indicated by a ‘$’ character in the right margin.  *Note
Line Truncation::.

   By default, continued lines are wrapped at the right window edge.
Since the wrapping may occur in the middle of a word, continued lines
can be difficult to read.  The usual solution is to break your lines
before they get too long, by inserting newlines.  If you prefer, you can
make Emacs insert a newline automatically when a line gets too long, by
using Auto Fill mode.  *Note Filling::.

   Sometimes, you may need to edit files containing many long logical
lines, and it may not be practical to break them all up by adding
newlines.  In that case, you can use Visual Line mode, which enables
“word wrapping”: instead of wrapping long lines exactly at the right
window edge, Emacs wraps them at the word boundaries (i.e., space or tab
characters) nearest to the right window edge.  Visual Line mode also
redefines editing commands such as ‘C-a’, ‘C-n’, and ‘C-k’ to operate on
screen lines rather than logical lines.  *Note Visual Line Mode::.


File: emacs.info,  Node: Position Info,  Next: Arguments,  Prev: Continuation Lines,  Up: Basic

8.9 Cursor Position Information
===============================

Here are commands to get information about the size and position of
parts of the buffer, and to count words and lines.

‘M-x what-line’
     Display the line number of point.
‘M-x line-number-mode’
‘M-x column-number-mode’
     Toggle automatic display of the current line number or column
     number.  *Note Optional Mode Line::.  If you want to have a line
     number displayed before each line, see *note Display Custom::.

‘M-=’
     Display the number of lines, sentences, words, and characters that
     are present in the region (‘count-words-region’).  *Note Mark::,
     for information about the region.

‘M-x count-words’
     Display the number of lines, sentences, words, and characters that
     are present in the buffer.  If the region is active (*note Mark::),
     display the numbers for the region instead.

‘C-x =’
     Display the character code of character after point, character
     position of point, and column of point (‘what-cursor-position’).
‘M-x hl-line-mode’
     Enable or disable highlighting of the current line.  *Note Cursor
     Display::.
‘M-x size-indication-mode’
     Toggle automatic display of the size of the buffer.  *Note Optional
     Mode Line::.

   ‘M-x what-line’ displays the current line number in the echo area.
This command is usually redundant because the current line number is
shown in the mode line (*note Mode Line::).  However, if you narrow the
buffer, the mode line shows the line number relative to the accessible
portion (*note Narrowing::).  By contrast, ‘what-line’ displays both the
line number relative to the narrowed region and the line number relative
to the whole buffer.

   ‘M-=’ (‘count-words-region’) displays a message reporting the number
of lines, sentences, words, and characters in the region (*note Mark::,
for an explanation of the region).  With a prefix argument, ‘C-u M-=’,
the command displays a count for the entire buffer.

   The command ‘M-x count-words’ does the same job, but with a different
calling convention.  It displays a count for the region if the region is
active, and for the buffer otherwise.

   The command ‘C-x =’ (‘what-cursor-position’) shows information about
the current cursor position and the buffer contents at that position.
It displays a line in the echo area that looks like this:

     Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53

   After ‘Char:’, this shows the character in the buffer at point.  The
text inside the parenthesis shows the corresponding decimal, octal and
hex character codes; for more information about how ‘C-x =’ displays
character information, see *note International Chars::.  After ‘point=’
is the position of point as a character count (the first character in
the buffer is position 1, the second character is position 2, and so
on).  The number after that is the total number of characters in the
buffer, and the number in parenthesis expresses the position as a
percentage of the total.  After ‘column=’ is the horizontal position of
point, in columns counting from the left edge of the window.

   If the user option ‘what-cursor-show-names’ is non-‘nil’, the name of
the character, as defined by the Unicode Character Database, is shown as
well.  The part in parentheses would then become:

     (99, #o143, #x63, LATIN SMALL LETTER C)

   If the buffer has been narrowed, making some of the text at the
beginning and the end temporarily inaccessible, ‘C-x =’ displays
additional text describing the currently accessible range.  For example,
it might display this:

     Char: C (67, #o103, #x43) point=252 of 889 (28%) <231-599> column=0

where the two extra numbers give the smallest and largest character
position that point is allowed to assume.  The characters between those
two positions are the accessible ones.  *Note Narrowing::.

   Related, but different feature is ‘display-line-numbers-mode’ (*note
Display Custom::).


File: emacs.info,  Node: Arguments,  Next: Repeating,  Prev: Position Info,  Up: Basic

8.10 Numeric Arguments
======================

In the terminology of mathematics and computing, “argument” means “data
provided to a function or operation”.  You can give any Emacs command a
“numeric argument” (also called a “prefix argument”).  Some commands
interpret the argument as a repetition count.  For example, giving ‘C-f’
an argument of ten causes it to move point forward by ten characters
instead of one.  With these commands, no argument is equivalent to an
argument of one, and negative arguments cause them to move or act in the
opposite direction.

   The easiest way to specify a numeric argument is to type a digit
and/or a minus sign while holding down the <Meta> key.  For example,

     M-5 C-n

moves down five lines.  The keys ‘M-1’, ‘M-2’, and so on, as well as
‘M--’, are bound to commands (‘digit-argument’ and ‘negative-argument’)
that set up an argument for the next command.  ‘M--’ without digits
normally means −1.

   If you enter more than one digit, you need not hold down the <Meta>
key for the second and subsequent digits.  Thus, to move down fifty
lines, type

     M-5 0 C-n

Note that this _does not_ insert five copies of ‘0’ and move down one
line, as you might expect—the ‘0’ is treated as part of the prefix
argument.

   (What if you do want to insert five copies of ‘0’?  Type ‘M-5 C-u 0’.
Here, ‘C-u’ terminates the prefix argument, so that the next keystroke
begins the command that you want to execute.  Note that this meaning of
‘C-u’ applies only to this case.  For the usual role of ‘C-u’, see
below.)

   Instead of typing ‘M-1’, ‘M-2’, and so on, another way to specify a
numeric argument is to type ‘C-u’ (‘universal-argument’) followed by
some digits, or (for a negative argument) a minus sign followed by
digits.  A minus sign without digits normally means −1.

   ‘C-u’ alone has the special meaning of “four times”: it multiplies
the argument for the next command by four.  ‘C-u C-u’ multiplies it by
sixteen.  Thus, ‘C-u C-u C-f’ moves forward sixteen characters.  Other
useful combinations are ‘C-u C-n’, ‘C-u C-u C-n’ (move down a good
fraction of a screen), ‘C-u C-u C-o’ (make sixteen blank lines), and
‘C-u C-k’ (kill four lines).

   You can use a numeric argument before a self-inserting character to
insert multiple copies of it.  This is straightforward when the
character is not a digit; for example, ‘C-u 6 4 a’ inserts 64 copies of
the character ‘a’.  But this does not work for inserting digits;
‘C-u 6 4 1’ specifies an argument of 641.  You can separate the argument
from the digit to insert with another ‘C-u’; for example,
‘C-u 6 4 C-u 1’ does insert 64 copies of the character ‘1’.

   Some commands care whether there is an argument, but ignore its
value.  For example, the command ‘M-q’ (‘fill-paragraph’) fills text;
with an argument, it justifies the text as well.  (*Note Filling::, for
more information on ‘M-q’.)  For these commands, it is enough to specify
the argument with a single ‘C-u’.

   Some commands use the value of the argument as a repeat count but do
something special when there is no argument.  For example, the command
‘C-k’ (‘kill-line’) with argument N kills N lines, including their
terminating newlines.  But ‘C-k’ with no argument is special: it kills
the text up to the next newline, or, if point is right at the end of the
line, it kills the newline itself.  Thus, two ‘C-k’ commands with no
arguments can kill a nonblank line, just like ‘C-k’ with an argument of
one.  (*Note Killing::, for more information on ‘C-k’.)

   A few commands treat a plain ‘C-u’ differently from an ordinary
argument.  A few others may treat an argument of just a minus sign
differently from an argument of −1.  These unusual cases are described
when they come up; they exist to make an individual command more
convenient, and they are documented in that command’s documentation
string.

   We use the term “prefix argument” to emphasize that you type such
arguments _before_ the command, and to distinguish them from minibuffer
arguments (*note Minibuffer::), which are entered _after_ invoking the
command.

   On graphical displays, ‘C-0’, ‘C-1’, etc. act the same as ‘M-0’,
‘M-1’, etc.


File: emacs.info,  Node: Repeating,  Prev: Arguments,  Up: Basic

8.11 Repeating a Command
========================

Many simple commands, such as those invoked with a single key or with
‘M-x COMMAND-NAME <RET>’, can be repeated by invoking them with a
numeric argument that serves as a repeat count (*note Arguments::).
However, if the command you want to repeat prompts for input, or uses a
numeric argument in another way, that method won’t work.

   The command ‘C-x z’ (‘repeat’) provides another way to repeat an
Emacs command many times.  This command repeats the previous Emacs
command, whatever that was.  Repeating a command uses the same arguments
that were used before; it does not read new arguments each time.

   To repeat the command more than once, type additional ‘z’’s: each ‘z’
repeats the command one more time.  Repetition ends when you type a
character other than ‘z’ or press a mouse button.

   For example, suppose you type ‘C-u 2 0 C-d’ to delete 20 characters.
You can repeat that command (including its argument) three additional
times, to delete a total of 80 characters, by typing ‘C-x z z z’.  The
first ‘C-x z’ repeats the command once, and each subsequent ‘z’ repeats
it once again.

   You can also activate ‘repeat-mode’ which allows repeating commands
bound to sequences of two or more keys by typing a single character.
For example, after typing ‘C-x u’ (‘undo’, *note Undo::) to undo the
most recent edits, you can undo many more edits by typing ‘u u u...’.
Similarly, type ‘C-x o o o...’ instead of ‘C-x o C-x o C-x o...’ to
switch to the window several windows away.  This works by entering a
transient repeating mode after you type the full key sequence that
invokes the command; the single-key shortcuts are shown in the echo
area.

   Only some commands support repetition in ‘repeat-mode’; type
‘M-x describe-repeat-maps <RET>’ to see which ones.

   The single-character shortcuts enabled by the transient repeating
mode do not need to be identical: for example, after typing ‘C-x {’,
either ‘{’ or ‘}’ or ‘^’ or ‘v’, or any series that mixes these
characters in any order, will resize the selected window in respective
ways.  Similarly, after ‘M-g n’ or ‘M-g p’, typing any sequence of ‘n’
and/or ‘p’ in any mix will repeat ‘next-error’ and ‘previous-error’ to
navigate in a ‘*compilation*’ or ‘*grep*’ buffer (*note Compilation
Mode::).

   Typing any key other than those defined to repeat the previous
command exits the transient repeating mode, and then the key you typed
is executed normally.  You can also define a key which will exit the
transient repeating mode _without_ executing the key which caused the
exit.  To this end, customize the user option ‘repeat-exit-key’ to name
a key; one natural value is <RET>.  Finally, it’s possible to break the
repetition chain automatically after some amount of idle time: customize
the user option ‘repeat-exit-timeout’ to specify the idle time in
seconds after which this transient repetition mode will be turned off
automatically.


File: emacs.info,  Node: Minibuffer,  Next: M-x,  Prev: Basic,  Up: Top

# /. 9 The Minibuffer
********************

The “minibuffer” is where Emacs commands read complicated arguments,
such as file names, buffer names, Emacs command names, or Lisp
expressions.  We call it the “minibuffer” because it’s a special-purpose
buffer with a small amount of screen space.  You can use the usual Emacs
editing commands in the minibuffer to edit the argument text.

* Menu:

* Basic Minibuffer::      Basic usage of the minibuffer.
* Minibuffer File::       Entering file names with the minibuffer.
* Minibuffer Edit::       How to edit in the minibuffer.
* Completion::            An abbreviation facility for minibuffer input.
* Minibuffer History::    Reusing recent minibuffer arguments.
* Repetition::            Re-executing commands that used the minibuffer.
* Passwords::             Entering passwords in the echo area.
* Yes or No Prompts::     Replying yes or no in the echo area.


File: emacs.info,  Node: Basic Minibuffer,  Next: Minibuffer File,  Up: Minibuffer

9.1 Using the Minibuffer
========================

When the minibuffer is in use, it appears in the echo area, with a
cursor.  The minibuffer starts with a “prompt”, usually ending with a
colon.  The prompt states what kind of input is expected, and how it
will be used.  The prompt is highlighted using the ‘minibuffer-prompt’
face (*note Faces::).

   The simplest way to enter a minibuffer argument is to type the text,
then <RET> to submit the argument and exit the minibuffer.
Alternatively, you can type ‘C-g’ to exit the minibuffer by canceling
the command asking for the argument (*note Quitting::).

   Sometimes, the prompt shows a “default argument”, inside parentheses
before the colon.  This default will be used as the argument if you just
type <RET>.  For example, commands that read buffer names usually show a
buffer name as the default; you can type <RET> to operate on that
default buffer.  You can customize how the default argument is shown
with the user option ‘minibuffer-default-prompt-format’.

   If you enable Minibuffer Electric Default mode, a global minor mode,
Emacs hides the default argument as soon as you modify the contents of
the minibuffer (since typing <RET> would no longer submit that default).
If you ever bring back the original minibuffer text, the prompt again
shows the default.  To enable this minor mode, type ‘M-x
minibuffer-electric-default-mode’.

   Since the minibuffer appears in the echo area, it can conflict with
other uses of the echo area.  If an error message or an informative
message is emitted while the minibuffer is active, the message is
displayed in brackets after the minibuffer text for a few seconds, or
until you type something; then the message disappears.  While the
minibuffer is in use, Emacs does not echo keystrokes.

   While using the minibuffer, you can switch to a different frame,
perhaps to note text you need to enter (*note Frame Commands::).  By
default, the active minibuffer moves to this new frame.  If you set the
user option ‘minibuffer-follows-selected-frame’ to ‘nil’, then the
minibuffer stays in the frame where you opened it, and you must switch
back to that frame in order to complete (or abort) the current command.
If you set that option to a value which is neither ‘nil’ nor ‘t’, the
minibuffer moves frame only after a recursive minibuffer has been opened
in the current command (*note (elisp)Recursive Mini::).  This option is
mainly to retain (approximately) the behavior prior to Emacs 28.1.  Note
that the effect of the command, when you finally finish using the
minibuffer, always takes place in the frame where you first opened it.
The sole exception is that when that frame no longer exists, the action
takes place in the currently selected frame.


File: emacs.info,  Node: Minibuffer File,  Next: Minibuffer Edit,  Prev: Basic Minibuffer,  Up: Minibuffer

9.2 Minibuffers for File Names
==============================

Commands such as ‘C-x C-f’ (‘find-file’) use the minibuffer to read a
file name argument (*note Basic Files::).  When the minibuffer is used
to read a file name, it typically starts out with some initial text
ending in a slash.  This is the “default directory”.  For example, it
may start out like this:

     Find file: /u2/emacs/src/

Here, ‘Find file: ’ is the prompt and ‘/u2/emacs/src/’ is the default
directory.  If you now type ‘buffer.c’ as input, that specifies the file
‘/u2/emacs/src/buffer.c’.  *Note File Names::, for information about the
default directory.

   Alternative defaults for the file name you may want are available by
typing ‘M-n’, see *note Minibuffer History::.

   You can specify a file in the parent directory with ‘..’:
‘/a/b/../foo.el’ is equivalent to ‘/a/foo.el’.  Alternatively, you can
use ‘M-<DEL>’ to kill directory names backwards (*note Words::).

   To specify a file in a completely different directory, you can kill
the entire default with ‘C-a C-k’ (*note Minibuffer Edit::).
Alternatively, you can ignore the default, and enter an absolute file
name starting with a slash or a tilde after the default directory.  For
example, you can specify ‘/etc/termcap’ as follows:

     Find file: /u2/emacs/src//etc/termcap

A double slash causes Emacs to ignore everything before the second slash
in the pair.  In the example above, ‘/u2/emacs/src/’ is ignored, so the
argument you supplied is ‘/etc/termcap’.  The ignored part of the file
name is dimmed if the terminal allows it.  (To disable this dimming,
turn off File Name Shadow mode with the command
‘M-x file-name-shadow-mode’.)

   When completing remote file names (*note Remote Files::), a double
slash behaves slightly differently: it causes Emacs to ignore only the
file-name part, leaving the rest (method, host and username, etc.)
intact.  Typing three slashes in a row ignores everything in remote file
names.  *Note (tramp)File name completion::.

   Emacs interprets ‘~/’ as your home directory.  Thus, ‘~/foo/bar.txt’
specifies a file named ‘bar.txt’, inside a directory named ‘foo’, which
is in turn located in your home directory.  In addition, ‘~USER-ID/’
means the home directory of a user whose login name is USER-ID.  Any
leading directory name in front of the ‘~’ is ignored: thus,
‘/u2/emacs/~/foo/bar.txt’ is equivalent to ‘~/foo/bar.txt’.

   On MS-Windows and MS-DOS systems, where a user doesn’t always have a
home directory, Emacs uses several alternatives.  For MS-Windows, see
*note Windows HOME::; for MS-DOS, see *note MS-DOS File Names::.  On
these systems, the ‘~USER-ID/’ construct is supported only for the
current user, i.e., only if USER-ID is the current user’s login name.

   To prevent Emacs from inserting the default directory when reading
file names, change the variable ‘insert-default-directory’ to ‘nil’.  In
that case, the minibuffer starts out empty.  Nonetheless, relative file
name arguments are still interpreted based on the same default
directory.

   You can also enter remote file names in the minibuffer.  *Note Remote
Files::.


File: emacs.info,  Node: Minibuffer Edit,  Next: Completion,  Prev: Minibuffer File,  Up: Minibuffer

9.3 Editing in the Minibuffer
=============================

The minibuffer is an Emacs buffer, albeit a peculiar one, and the usual
Emacs commands are available for editing the argument text.  (The
prompt, however, is “read-only”, and cannot be changed.)

   Since <RET> in the minibuffer submits the argument, you can’t use it
to insert a newline.  You can do that with ‘C-q C-j’, which inserts a
‘C-j’ control character, which is formally equivalent to a newline
character (*note Inserting Text::).  Alternatively, you can use the
‘C-o’ (‘open-line’) command (*note Blank Lines::).

   Inside a minibuffer, the keys <TAB>, <SPC>, and ‘?’ are often bound
to “completion commands”, which allow you to easily fill in the desired
text without typing all of it.  *Note Completion::.  As with <RET>, you
can use ‘C-q’ to insert a <TAB>, <SPC>, or ‘?’ character.  If you want
to make <SPC> and <?> insert normally instead of starting completion,
you can put the following in your init file:

     (keymap-unset minibuffer-local-completion-map "SPC")
     (keymap-unset minibuffer-local-completion-map "?")

   For convenience, ‘C-a’ (‘move-beginning-of-line’) in a minibuffer
moves point to the beginning of the argument text, not the beginning of
the prompt.  For example, this allows you to erase the entire argument
with ‘C-a C-k’.

   When the minibuffer is active, the echo area is treated much like an
ordinary Emacs window.  For instance, you can switch to another window
(with ‘C-x o’), edit text there, then return to the minibuffer window to
finish the argument.  You can even kill text in another window, return
to the minibuffer window, and yank the text into the argument.  There
are some restrictions on the minibuffer window, however: for instance,
you cannot split it.  *Note Windows::.

   Normally, the minibuffer window occupies a single screen line.
However, if you add two or more lines’ worth of text into the
minibuffer, it expands automatically to accommodate the text.  The
variable ‘resize-mini-windows’ controls the resizing of the minibuffer.
The default value is ‘grow-only’, which means the behavior we have just
described.  If the value is ‘t’, the minibuffer window will also shrink
automatically if you remove some lines of text from the minibuffer, down
to a minimum of one screen line.  If the value is ‘nil’, the minibuffer
window never changes size automatically, but you can use the usual
window-resizing commands on it (*note Windows::).

   The variable ‘max-mini-window-height’ controls the maximum height for
resizing the minibuffer window.  A floating-point number specifies a
fraction of the frame’s height; an integer specifies the maximum number
of lines; ‘nil’ means do not resize the minibuffer window automatically.
The default value is 0.25.

   The ‘C-M-v’ command in the minibuffer scrolls the help text from
commands that display help text of any sort in another window.  You can
also scroll the help text with ‘M-<PageUp>’ and ‘M-<PageDown>’ (or,
equivalently, ‘M-<prior>’ and ‘M-<next>’).  This is especially useful
with long lists of possible completions.  *Note Other Window::.

   Emacs normally disallows most commands that use the minibuffer while
the minibuffer is active.  To allow such commands in the minibuffer, set
the variable ‘enable-recursive-minibuffers’ to ‘t’.  You might need also
to enable ‘minibuffer-depth-indicate-mode’ to show the current recursion
depth in the minibuffer prompt on recursive use of the minibuffer.

   When active, the minibuffer is usually in ‘minibuffer-mode’.  This is
an internal Emacs mode without any special features.

   When not active, the minibuffer is in ‘minibuffer-inactive-mode’, and
clicking ‘mouse-1’ there shows the ‘*Messages*’ buffer.  If you use a
dedicated frame for minibuffers, Emacs also recognizes certain keys
there, for example, ‘n’ to make a new frame.


File: emacs.info,  Node: Completion,  Next: Minibuffer History,  Prev: Minibuffer Edit,  Up: Minibuffer

9.4 Completion
==============

You can often use a feature called “completion” to help enter arguments.
This means that after you type part of the argument, Emacs can fill in
the rest, or some of it, based on what was typed so far.

   When completion is available, certain keys (usually <TAB>, <RET>, and
<SPC>) are rebound in the minibuffer to special completion commands
(*note Completion Commands::).  These commands attempt to complete the
text in the minibuffer, based on a set of “completion alternatives”
provided by the command that requested the argument.  You can usually
type ‘?’ to see a list of completion alternatives.

   Although completion is usually done in the minibuffer, the feature is
sometimes available in ordinary buffers too.  *Note Symbol Completion::.

* Menu:

* Completion Example::       Examples of using completion.
* Completion Commands::      A list of completion commands.
* Completion Exit::          Completion and minibuffer text submission.
* Completion Styles::        How completion matches are chosen.
* Completion Options::       Options for completion.


File: emacs.info,  Node: Completion Example,  Next: Completion Commands,  Up: Completion

9.4.1 Completion Example
------------------------

A simple example may help here.  ‘M-x’ uses the minibuffer to read the
name of a command, so completion works by matching the minibuffer text
against the names of existing Emacs commands.  Suppose you wish to run
the command ‘auto-fill-mode’.  You can do that by typing ‘M-x
auto-fill-mode <RET>’, but it is easier to use completion.

   If you type ‘M-x a u <TAB>’, the <TAB> looks for completion
alternatives (in this case, command names) that start with ‘au’.  There
are several, including ‘auto-fill-mode’ and ‘autoconf-mode’, but they
all begin with ‘auto’, so the ‘au’ in the minibuffer completes to
‘auto’.  (More commands may be defined in your Emacs session.  For
example, if a command called ‘authorize-me’ was defined, Emacs could
only complete as far as ‘aut’.)

   If you type ‘<TAB>’ again immediately, it cannot determine the next
character; it could be ‘-’, ‘a’, or ‘c’.  So it does not add any
characters; instead, <TAB> displays a list of all possible completions
in another window.

   Next, type ‘-f’.  The minibuffer now contains ‘auto-f’, and the only
command name that starts with this is ‘auto-fill-mode’.  If you now type
‘<TAB>’, completion fills in the rest of the argument ‘auto-fill-mode’
into the minibuffer.

   Hence, typing just ‘a u <TAB> - f <TAB>’ allows you to enter
‘auto-fill-mode’.

   <TAB> also works while point is not at the end of the minibuffer.  In
that case, it will fill in text both at point and at the end of the
minibuffer.  If you type ‘M-x autocm’, then press ‘C-b’ to move point
before the ‘m’, you can type ‘<TAB>’ to insert the text ‘onf-’ at point
and ‘ode’ at the end of the minibuffer, so that the minibuffer contains
‘autoconf-mode’.


File: emacs.info,  Node: Completion Commands,  Next: Completion Exit,  Prev: Completion Example,  Up: Completion

9.4.2 Completion Commands
-------------------------

Here is a list of the completion commands defined in the minibuffer when
completion is allowed.

‘<TAB>’
     Complete the text in the minibuffer as much as possible; if unable
     to complete, display a list of possible completions
     (‘minibuffer-complete’).
‘<SPC>’
     Complete up to one word from the minibuffer text before point
     (‘minibuffer-complete-word’).  This command is not available for
     arguments that often include spaces, such as file names.
‘<RET>’
     Submit the text in the minibuffer as the argument, possibly
     completing first (‘minibuffer-complete-and-exit’).  *Note
     Completion Exit::.
‘?’
     Display a list of completions (‘minibuffer-completion-help’).

   <TAB> (‘minibuffer-complete’) is the most fundamental completion
command.  It searches for all possible completions that match the
existing minibuffer text, and attempts to complete as much as it can.
*Note Completion Styles::, for how completion alternatives are chosen.

   <SPC> (‘minibuffer-complete-word’) completes like <TAB>, but only up
to the next hyphen or space.  If you have ‘auto-f’ in the minibuffer and
type <SPC>, it finds that the completion is ‘auto-fill-mode’, but it
only inserts ‘ill-’, giving ‘auto-fill-’.  Another <SPC> at this point
completes all the way to ‘auto-fill-mode’.

   If <TAB> or <SPC> is unable to complete, it displays a list of
matching completion alternatives (if there are any) in another window.
You can display the same list with ‘?’ (‘minibuffer-completion-help’).
The following commands can be used with the completion list:

‘M-<DOWN>’
‘M-<UP>’
     While in the minibuffer, ‘M-<DOWN>’ (‘minibuffer-next-completion’
     and ‘M-<UP>’ (‘minibuffer-previous-completion’) navigate through
     the completions and displayed in the completions buffer.  When
     ‘minibuffer-completion-auto-choose’ is non-‘nil’ (which is the
     default), using these commands also inserts the current completion
     candidate into the minibuffer.  If
     ‘minibuffer-completion-auto-choose’ is ‘nil’, you can use the
     ‘M-<RET>’ command (‘minibuffer-choose-completion’) to insert the
     completion candidates into the minibuffer.  By default, that exits
     the minibuffer, but with a prefix argument, ‘C-u M-<RET>’ inserts
     the currently active candidate without exiting the minibuffer.

‘M-v’
‘<PageUp>’
‘<prior>’
     Typing ‘M-v’, while in the minibuffer, selects the window showing
     the completion list (‘switch-to-completions’).  This paves the way
     for using the commands below.  <PageUp>, <prior> and ‘M-g M-c’ does
     the same.  You can also select the window in other ways (*note
     Windows::).

‘<RET>’
‘mouse-1’
‘mouse-2’
     While in the completion list buffer, this chooses the completion at
     point (‘choose-completion’).  With a prefix argument, ‘C-u <RET>’
     inserts the completion at point into the minibuffer, but doesn’t
     exit the minibuffer—thus, you can change your mind and choose
     another candidate.

‘<TAB>’
‘<RIGHT>’
‘<n>’
     While in the completion list buffer, these keys move point to the
     following completion alternative (‘next-completion’).

‘<S-TAB>’
‘<LEFT>’
‘<p>’
     While in the completion list buffer, these keys move point to the
     previous completion alternative (‘previous-completion’).

‘q’
     While in the completion list buffer, this quits the window showing
     it and selects the window showing the minibuffer (‘quit-window’).

‘z’
     While in the completion list buffer, kill it and delete the window
     showing it (‘kill-current-buffer’).


File: emacs.info,  Node: Completion Exit,  Next: Completion Styles,  Prev: Completion Commands,  Up: Completion

9.4.3 Completion Exit
---------------------

When a command reads an argument using the minibuffer with completion,
it also controls what happens when you type <RET>
(‘minibuffer-complete-and-exit’) to submit the argument.  There are four
types of behavior:

   • “Strict completion” accepts only exact completion matches.  Typing
     <RET> exits the minibuffer only if the minibuffer text is an exact
     match, or completes to one.  Otherwise, Emacs refuses to exit the
     minibuffer; instead it tries to complete, and if no completion can
     be done it momentarily displays ‘[No match]’ after the minibuffer
     text.  (You can still leave the minibuffer by typing ‘C-g’ to
     cancel the command.)

     An example of a command that uses this behavior is ‘M-x’, since it
     is meaningless for it to accept a non-existent command name.

   • “Cautious completion” is like strict completion, except <RET> exits
     only if the text is already an exact match.  If the text completes
     to an exact match, <RET> performs that completion but does not exit
     yet; you must type a second <RET> to exit.

     Cautious completion is used for reading file names for files that
     must already exist, for example.

   • “Permissive completion” allows any input; the completion candidates
     are just suggestions.  Typing <RET> does not complete, it just
     submits the argument as you have entered it.

   • “Permissive completion with confirmation” is like permissive
     completion, with an exception: if you typed <TAB> and this
     completed the text up to some intermediate state (i.e., one that is
     not yet an exact completion match), typing <RET> right afterward
     does not submit the argument.  Instead, Emacs asks for confirmation
     by momentarily displaying ‘[Confirm]’ after the text; type <RET>
     again to confirm and submit the text.  This catches a common
     mistake, in which one types <RET> before realizing that <TAB> did
     not complete as far as desired.

     You can tweak the confirmation behavior by customizing the variable
     ‘confirm-nonexistent-file-or-buffer’.  The default value,
     ‘after-completion’, gives the behavior we have just described.  If
     you change it to ‘nil’, Emacs does not ask for confirmation,
     falling back on permissive completion.  If you change it to any
     other non-‘nil’ value, Emacs asks for confirmation whether or not
     the preceding command was <TAB>.

     This behavior is used by most commands that read file names, like
     ‘C-x C-f’, and commands that read buffer names, like ‘C-x b’.


File: emacs.info,  Node: Completion Styles,  Next: Completion Options,  Prev: Completion Exit,  Up: Completion

9.4.4 How Completion Alternatives Are Chosen
--------------------------------------------

Completion commands work by narrowing a large list of possible
completion alternatives to a smaller subset that matches what you have
typed in the minibuffer.  In *note Completion Example::, we gave a
simple example of such matching.  The procedure of determining what
constitutes a match is quite intricate.  Emacs attempts to offer
plausible completions under most circumstances.

   Emacs performs completion using one or more “completion styles”—sets
of criteria for matching minibuffer text to completion alternatives.
During completion, Emacs tries each completion style in turn.  If a
style yields one or more matches, that is used as the list of completion
alternatives.  If a style produces no matches, Emacs falls back on the
next style.

   The list variable ‘completion-styles’ specifies the completion styles
to use.  Each list element is the name of a completion style (a Lisp
symbol).  The available style symbols are stored in the variable
‘completion-styles-alist’ (*note (elisp)Completion Variables::).  The
default completion styles are (in order):

‘basic’
     A matching completion alternative must have the same beginning as
     the text in the minibuffer before point.  Furthermore, if there is
     any text in the minibuffer after point, the rest of the completion
     alternative must contain that text as a substring.

‘partial-completion’
     This aggressive completion style divides the minibuffer text into
     words separated by hyphens or spaces, and completes each word
     separately.  (For example, when completing command names, ‘em-l-m’
     completes to ‘emacs-lisp-mode’.)

     Furthermore, a ‘*’ in the minibuffer text is treated as a
     “wildcard”—it matches any string of characters at the corresponding
     position in the completion alternative.

‘emacs22’
     This completion style is similar to ‘basic’, except that it ignores
     the text in the minibuffer after point.  It is so-named because it
     corresponds to the completion behavior in Emacs 22.

The following additional completion styles are also defined, and you can
add them to ‘completion-styles’ if you wish (*note Customization::):

‘substring’
     A matching completion alternative must contain the text in the
     minibuffer before point, and the text in the minibuffer after
     point, as substrings (in that same order).

     Thus, if the text in the minibuffer is ‘foobar’, with point between
     ‘foo’ and ‘bar’, that matches ‘AfooBbarC’, where A, B, and C can be
     any string including the empty string.

‘flex’
     This aggressive completion style, also known as ‘flx’ or ‘fuzzy’ or
     ‘scatter’ completion, attempts to complete using in-order
     substrings.  For example, it can consider ‘foo’ to match ‘frodo’ or
     ‘fbarbazoo’.

‘initials’
     This very aggressive completion style attempts to complete acronyms
     and initialisms.  For example, when completing command names, it
     matches ‘lch’ to ‘list-command-history’.

There is also a very simple completion style called ‘emacs21’.  In this
style, if the text in the minibuffer is ‘foobar’, only matches starting
with ‘foobar’ are considered.

   You can use different completion styles in different situations, by
setting the variable ‘completion-category-overrides’.  For example, the
default setting says to use only ‘basic’ and ‘substring’ completion for
buffer names.


File: emacs.info,  Node: Completion Options,  Prev: Completion Styles,  Up: Completion

9.4.5 Completion Options
------------------------

Case is significant when completing case-sensitive arguments, such as
command names.  For example, when completing command names, ‘AU’ does
not complete to ‘auto-fill-mode’.  Case differences are ignored when
completing arguments in which case does not matter.

   When completing file names, case differences are ignored if the
variable ‘read-file-name-completion-ignore-case’ is non-‘nil’.  The
default value is ‘nil’ on systems that have case-sensitive file-names,
such as GNU/Linux; it is non-‘nil’ on systems that have case-insensitive
file-names, such as Microsoft Windows.  When completing buffer names,
case differences are ignored if the variable
‘read-buffer-completion-ignore-case’ is non-‘nil’; the default is ‘nil’.

   When completing file names, Emacs usually omits certain alternatives
that are considered unlikely to be chosen, as determined by the list
variable ‘completion-ignored-extensions’.  Each element in the list
should be a string; any file name ending in such a string is ignored as
a completion alternative.  Any element ending in a slash (‘/’)
represents a subdirectory name.  The standard value of
‘completion-ignored-extensions’ has several elements including ‘".o"’,
‘".elc"’, and ‘"~"’.  For example, if a directory contains ‘foo.c’ and
‘foo.elc’, ‘foo’ completes to ‘foo.c’.  However, if _all_ possible
completions end in otherwise-ignored strings, they are not ignored: in
the previous example, ‘foo.e’ completes to ‘foo.elc’.  Emacs disregards
‘completion-ignored-extensions’ when showing completion alternatives in
the completion list.

   Shell completion is an extended version of filename completion, *note
Shell Options::.

   If ‘completion-auto-help’ is set to ‘nil’, the completion commands
never display the completion list buffer; you must type ‘?’ to display
the list.  If the value is ‘lazy’, Emacs only shows the completion list
buffer on the second attempt to complete.  In other words, if there is
nothing to complete, the first <TAB> echoes ‘Next char not unique’; the
second <TAB> shows the completion list buffer.  If the value is
‘always’, the completion list buffer is always shown when completion is
attempted.

   The display of the completion list buffer after it is shown for the
first time is also controlled by ‘completion-auto-help’.  If the value
is ‘t’ or ‘lazy’, the window showing the completions pops down when
Emacs is able to complete (and may pop up again if Emacs is again unable
to complete after you type some more text); if the value is ‘always’,
the window pops down only when you exit the completion.  The value
‘visible’ is a hybrid: it behaves like ‘t’ when it decides whether to
pop up the window showing the completion list buffer, and like ‘always’
when it decides whether to pop it down.

   Emacs can optionally select the window showing the completions when
it shows that window.  To enable this behavior, customize the user
option ‘completion-auto-select’ to ‘t’, which changes the behavior of
<TAB> when Emacs pops up the completions: pressing ‘<TAB>’ will switch
to the completion list buffer, and you can then move to a candidate by
cursor motion commands and select it with ‘<RET>’.  If the value of
‘completion-auto-select’ is ‘second-tab’, then the first ‘<TAB>’ will
pop up the completions list buffer, and the second one will switch to
it.

   If ‘completion-cycle-threshold’ is non-‘nil’, completion commands can
cycle through completion alternatives.  Normally, if there is more than
one completion alternative for the text in the minibuffer, a completion
command completes up to the longest common substring.  If you change
‘completion-cycle-threshold’ to ‘t’, the completion command instead
completes to the first of those completion alternatives; each subsequent
invocation of the completion command replaces that with the next
completion alternative, in a cyclic manner.  If you give
‘completion-cycle-threshold’ a numeric value N, completion commands
switch to this cycling behavior only when there are N or fewer
alternatives.

   When displaying completions, Emacs will normally pop up a new buffer
to display the completions.  The completions will by default be sorted
horizontally, using as many columns as will fit in the window-width, but
this can be changed by customizing the ‘completions-format’ user option.
If its value is ‘vertical’, Emacs will sort the completions vertically
instead, and if it’s ‘one-column’, Emacs will use just one column.

   The ‘completions-sort’ user option controls the order in which the
completions are sorted in the ‘*Completions*’ buffer.  The default is
‘alphabetical’, which sorts in alphabetical order.  The value ‘nil’
disables sorting.  The value can also be a function, which will be
called with the list of completions, and should return the list in the
desired order.

   When ‘completions-max-height’ is non-‘nil’, it limits the size of the
completions window.  It is specified in lines and include mode, header
line and a bottom divider, if any.  For a more complex control of the
Completion window display properties, you can use ‘display-buffer-alist’
(*note Action Alists for Buffer Display: (elisp)Buffer Display Action
Alists.).

   The variable ‘completions-header-format’ is a format spec string to
control the informative line shown before the completions list of
candidates.  If it contains a ‘%s’ construct, that get replaced by the
number of completions shown in the completion list buffer.  To suppress
the display of the heading line, customize this variable to ‘nil’.  The
string that is the value of this variable can have text properties to
change the visual appearance of the heading line; some useful properties
‘face’ or ‘cursor-intangible’ (*note Properties with Special Meanings:
(elisp)Special Properties.).

   When ‘completions-highlight-face’ names a face, the current
completion candidate, the one that will be selected by typing ‘<RET>’ or
clicking the mouse, will be highlighted using that face.  The default
value of this variable is ‘completions-highlight’; the value is ‘nil’
disables this highlighting.  This feature uses the special text property
‘cursor-face’.


File: emacs.info,  Node: Minibuffer History,  Next: Repetition,  Prev: Completion,  Up: Minibuffer

9.5 Minibuffer History
======================

Everything you type in the minibuffer is saved in a “minibuffer history
list” so you can easily use it again later.  This includes completion
candidates (such as file names, buffer names, command names, etc.) and
any other kind of minibuffer input.  You can use the following commands
to quickly fetch an earlier or alternative response into the minibuffer:

‘M-p’
     Move to the previous item in the minibuffer history, an earlier
     argument (‘previous-history-element’).
‘M-n’
     Move to the next item in the minibuffer history
     (‘next-history-element’).
‘<UP>’
‘<DOWN>’
     Like ‘M-p’ and ‘M-n’, but move to the previous or next line of a
     multi-line item before going to the previous history item
     (‘previous-line-or-history-element’ and
     ‘next-line-or-history-element’) .
‘M-r REGEXP <RET>’
     Move to an earlier item in the minibuffer history that matches
     REGEXP (‘previous-matching-history-element’).
‘M-s REGEXP <RET>’
     Move to a later item in the minibuffer history that matches REGEXP
     (‘next-matching-history-element’).

   While in the minibuffer, ‘M-p’ (‘previous-history-element’) moves
through the minibuffer history list, one item at a time.  Each ‘M-p’
fetches an earlier item from the history list into the minibuffer,
replacing its existing contents.  Typing ‘M-n’ (‘next-history-element’)
moves through the minibuffer history list in the opposite direction,
fetching later entries into the minibuffer.

   If you type ‘M-n’ in the minibuffer when there are no later entries
in the minibuffer history (e.g., if you haven’t previously typed ‘M-p’),
Emacs tries fetching from a list of default arguments: values that you
are likely to enter.  You can think of this as moving through the
“future history”.

   The “future history” for file names includes several possible
alternatives you may find useful, such as the file name or the URL at
point in the current buffer.  The defaults put into the “future history”
in this case are controlled by the functions mentioned in the value of
the option ‘file-name-at-point-functions’.  By default, its value
invokes the ‘ffap’ package (*note FFAP::), which tries to guess the
default file or URL from the text around point.  To disable this
guessing, customize the option to a ‘nil’ value, then the “future
history” of file names will include only the file, if any, visited by
the current buffer, and the default directory.

   The arrow keys ‘<UP>’ and ‘<DOWN>’ work like ‘M-p’ and ‘M-n’, but if
the current history item is longer than a single line, they allow you to
move to the previous or next line of the current history item before
going to the previous or next history item.

   If you edit the text inserted by the ‘M-p’ or ‘M-n’ minibuffer
history commands, this does not change its entry in the history list.
However, the edited argument does go at the end of the history list when
you submit it.

   You can use ‘M-r’ (‘previous-matching-history-element’) to search
through older elements in the history list, and ‘M-s’
(‘next-matching-history-element’) to search through newer entries.  Each
of these commands asks for a “regular expression” as an argument, and
fetches the first matching entry into the minibuffer.  *Note Regexps::,
for an explanation of regular expressions.  A numeric prefix argument N
means to fetch the Nth matching entry.  These commands are unusual, in
that they use the minibuffer to read the regular expression argument,
even though they are invoked from the minibuffer.  An upper-case letter
in the regular expression makes the search case-sensitive (*note Lax
Search::).

   You can also search through the history using an incremental search.
*Note Isearch Minibuffer::.

   Emacs keeps separate history lists for several different kinds of
arguments.  For example, there is a list for file names, used by all the
commands that read file names.  Other history lists include buffer
names, command names (used by ‘M-x’), and command arguments (used by
commands like ‘query-replace’).

   The variable ‘history-length’ specifies the maximum length of a
minibuffer history list; adding a new element deletes the oldest element
if the list gets too long.  If the value is ‘t’, there is no maximum
length.

   The variable ‘history-delete-duplicates’ specifies whether to delete
duplicates in history.  If it is non-‘nil’, adding a new element deletes
from the list all other elements that are equal to it.  The default is
‘nil’.


File: emacs.info,  Node: Repetition,  Next: Passwords,  Prev: Minibuffer History,  Up: Minibuffer

9.6 Repeating Minibuffer Commands
=================================

Every command that uses the minibuffer once is recorded on a special
history list, the “command history”, together with the values of its
arguments, so that you can repeat the entire command.  In particular,
every use of ‘M-x’ is recorded there, since ‘M-x’ uses the minibuffer to
read the command name.

‘C-x <ESC> <ESC>’
     Re-execute a recent minibuffer command from the command history
     (‘repeat-complex-command’).
‘M-x list-command-history’
     Display the entire command history, showing all the commands ‘C-x
     <ESC> <ESC>’ can repeat, most recent first.

   ‘C-x <ESC> <ESC>’ re-executes a recent command that used the
minibuffer.  With no argument, it repeats the last such command.  A
numeric argument specifies which command to repeat; 1 means the last
one, 2 the previous, and so on.

   ‘C-x <ESC> <ESC>’ works by turning the previous command into a Lisp
expression and then entering a minibuffer initialized with the text for
that expression.  Even if you don’t know Lisp, it will probably be
obvious which command is displayed for repetition.  If you type just
<RET>, that repeats the command unchanged.  You can also change the
command by editing the Lisp expression before you execute it.  The
executed command is added to the front of the command history unless it
is identical to the most recent item.

   Once inside the minibuffer for ‘C-x <ESC> <ESC>’, you can use the
usual minibuffer history commands (*note Minibuffer History::) to move
through the history list.  After finding the desired previous command,
you can edit its expression as usual and then execute it by typing
<RET>.

   Incremental search does not, strictly speaking, use the minibuffer.
Therefore, although it behaves like a complex command, it normally does
not appear in the history list for ‘C-x <ESC> <ESC>’.  You can make
incremental search commands appear in the history by setting
‘isearch-resume-in-command-history’ to a non-‘nil’ value.  *Note
Incremental Search::.

   The list of previous minibuffer-using commands is stored as a Lisp
list in the variable ‘command-history’.  Each element is a Lisp
expression that describes one command and its arguments.  Lisp programs
can re-execute a command by calling ‘eval’ with the ‘command-history’
element.


File: emacs.info,  Node: Passwords,  Next: Yes or No Prompts,  Prev: Repetition,  Up: Minibuffer

9.7 Entering passwords
======================

Sometimes, you may need to enter a password into Emacs.  For instance,
when you tell Emacs to visit a file on another machine via a network
protocol such as FTP, you often need to supply a password to gain access
to the machine (*note Remote Files::).

   Entering a password is similar to using a minibuffer.  Emacs displays
a prompt in the echo area (such as ‘Password: ’); after you type the
required password, press <RET> to submit it.  To prevent others from
seeing your password, every character you type is displayed as an
asterisk (‘*’) instead of its usual form.

   Most of the features and commands associated with the minibuffer
_cannot_ be used when entering a password.  There is no history or
completion, and you cannot change windows or perform any other action
with Emacs until you have submitted the password.

   While you are typing the password, you may press <DEL> to delete
backwards, removing the last character entered.  ‘C-u’ deletes
everything you have typed so far.  ‘C-g’ quits the password prompt
(*note Quitting::).  ‘C-y’ inserts the current kill into the password
(*note Killing::).  You may type either <RET> or <ESC> to submit the
password.  Any other self-inserting character key inserts the associated
character into the password, and all other input is ignored.


File: emacs.info,  Node: Yes or No Prompts,  Prev: Passwords,  Up: Minibuffer

9.8 Yes or No Prompts
=====================

An Emacs command may require you to answer a yes-or-no question during
the course of its execution.  Such queries come in two main varieties.

   For the first type of yes-or-no query, the prompt ends with
‘(y or n)’.  You answer the query by typing a single key, either ‘y’ or
‘n’, which immediately exits the minibuffer and delivers the response.
For example, if you type ‘C-x C-w’ (‘write-file’) to save a buffer, and
enter the name of an existing file, Emacs issues a prompt like this:

     File ‘foo.el’ exists; overwrite? (y or n)

   The second type of yes-or-no query is typically employed if giving
the wrong answer would have serious consequences; it thus features a
longer prompt ending with ‘(yes or no)’.  For example, if you invoke
‘C-x k’ (‘kill-buffer’) on a file-visiting buffer with unsaved changes,
Emacs activates the minibuffer with a prompt like this:

     Buffer foo.el modified; kill anyway? (yes or no)

To answer, you must type ‘yes’ or ‘no’ into the minibuffer, followed by
<RET>.

   With both types of yes-or-no query the minibuffer behaves as
described in the previous sections; you can recenter the selected window
with ‘C-l’, scroll that window (‘C-v’ or ‘PageDown’ scrolls forward,
‘M-v’ or ‘PageUp’ scrolls backward), switch to another window with ‘C-x
o’, use the history commands ‘M-p’ and ‘M-n’, etc.  Type ‘C-g’ to
dismiss the query, and quit the minibuffer and the querying command
(*note Quitting::).


File: emacs.info,  Node: M-x,  Next: Help,  Prev: Minibuffer,  Up: Top

# /. 10 Running Commands by Name
*******************************

Every Emacs command has a name that you can use to run it.  For
convenience, many commands also have key bindings.  You can run those
commands by typing the keys, or run them by name.  Most Emacs commands
have no key bindings, so the only way to run them is by name.  (*Note
Key Bindings::, for how to set up key bindings.)

   By convention, a command name consists of one or more words,
separated by hyphens; for example, ‘auto-fill-mode’ or ‘manual-entry’.
Command names mostly use complete English words to make them easier to
remember.

   To run a command by name, start with ‘M-x’, type the command name,
then terminate it with <RET>.  ‘M-x’ uses the minibuffer to read the
command name.  The string ‘M-x’ appears at the beginning of the
minibuffer as a “prompt” to remind you to enter a command name to be
run.  <RET> exits the minibuffer and runs the command.  *Note
Minibuffer::, for more information on the minibuffer.

   You can use completion to enter the command name.  For example, to
invoke the command ‘forward-char’, you can type

     M-x forward-char <RET>

or

     M-x forw <TAB> c <RET>

Note that ‘forward-char’ is the same command that you invoke with the
key ‘C-f’.  The existence of a key binding does not stop you from
running the command by name.

   When ‘M-x’ completes on commands, it ignores the commands that were
declared “obsolete” in any previous major version of Emacs; for these,
you will have to type their full name.  Commands that were marked
obsolete in the current version of Emacs are listed.  (Obsolete commands
are those for which newer, better alternatives exist, and which are
slated for removal in some future Emacs release.)

   In addition, ‘M-x’ completion can exclude commands that are not
relevant to, and generally cannot work with, the current buffer’s major
mode (*note Major Modes::) and minor modes (*note Minor Modes::).  By
default, no commands are excluded, but you can customize the option
‘read-extended-command-predicate’ to exclude those irrelevant commands
from completion results.

   Conversely, Emacs can exclude all commands except those that are
particularly relevant to the current buffer.  The ‘M-S-x’ (that’s “meta
shift x”) command works just like ‘M-x’, but instead of listing all (or
most) of the commands Emacs knows about, it will only list the commands
that have been marked as “belonging” to the current major mode, or any
enabled minor modes.

   To cancel the ‘M-x’ and not run a command, type ‘C-g’ instead of
entering the command name.  This takes you back to command level.

   To pass a numeric argument to the command you are invoking with
‘M-x’, specify the numeric argument before ‘M-x’.  The argument value
appears in the prompt while the command name is being read, and finally
‘M-x’ passes the argument to that command.  For example, to pass the
numeric argument of 42 to the command ‘forward-char’ you can type ‘C-u
42 M-x forward-char <RET>’.

   When the command you run with ‘M-x’ has a key binding, Emacs mentions
this in the echo area after running the command.  For example, if you
type ‘M-x forward-word’, the message says that you can run the same
command by typing ‘M-f’.  You can turn off these messages by setting the
variable ‘suggest-key-bindings’ to ‘nil’.  The value of
‘suggest-key-bindings’ can also be a number, in which case Emacs will
show the binding for that many seconds before removing it from display.
The default behavior is to display the binding for 2 seconds.

   Additionally, when ‘suggest-key-bindings’ is non-‘nil’, the
completion list of ‘M-x’ shows equivalent key bindings for all commands
that have them.

   Commands that don’t have key bindings, can still be invoked after
typing less than their full name at the ‘M-x’ prompt.  Emacs mentions
such shorthands in the echo area if they are significantly shorter than
the full command name, and ‘extended-command-suggest-shorter’ is
non-‘nil’.  The setting of ‘suggest-key-bindings’ affects these hints as
well.

   In this manual, when we speak of running a command by name, we often
omit the <RET> that terminates the name.  Thus we might say ‘M-x
auto-fill-mode’ rather than ‘M-x auto-fill-mode <RET>’.  We mention the
<RET> only for emphasis, such as when the command is followed by
arguments.

   ‘M-x’ works by running the command ‘execute-extended-command’, which
is responsible for reading the name of another command and invoking it.


File: emacs.info,  Node: Help,  Next: Mark,  Prev: M-x,  Up: Top

# /. 11 Help
***********

Emacs provides a wide variety of help commands, all accessible through
the prefix key ‘C-h’ (or, equivalently, the function key <F1>).  These
help commands are described in the following sections.  You can also
type ‘C-h C-h’ to view a list of help commands (‘help-for-help’).  You
can scroll the list with <SPC> and <DEL>, then type the help command you
want.  To cancel, type ‘C-g’.

   Many help commands display their information in a special “help
buffer”.  In this buffer, you can type <SPC> and <DEL> to scroll and
type <RET> to follow hyperlinks.  *Note Help Mode::.

   By default, help commands display the help buffer in a separate
window without selecting that window.  The variable ‘help-window-select’
controls this: its default value is ‘nil’; if it’s customized to the
value ‘t’, the help window is unconditionally selected by help commands,
and if its value is ‘other’, the help window is selected only if there
are more than two windows on the selected frame.

   Conversely, many commands in the ‘*Help*’ buffer will pop up a new
window to display the results.  For instance, clicking on the link to
show the source code, or using the <i> command to display the manual
entry, will (by default) pop up a new window.  If
‘help-window-keep-selected’ is changed to non-‘nil’, the window
displaying the ‘*Help*’ buffer will be reused instead.

   If you are looking for a certain feature, but don’t know what it is
called or where to look, we recommend three methods.  First, try an
apropos command, then try searching the manual index, then look in the
FAQ and the package keywords, and finally try listing external packages.

‘C-h a TOPICS <RET>’
     This searches for commands whose names match the argument TOPICS.
     The argument can be a keyword, a list of keywords, or a regular
     expression (*note Regexps::).  *Note Apropos::.

‘C-h i d m emacs <RET> i TOPIC <RET>’
     This searches for TOPIC in the indices of the Emacs Info manual,
     displaying the first match found.  Press ‘,’ to see subsequent
     matches.  You can use a regular expression as TOPIC.

‘C-h i d m emacs <RET> s TOPIC <RET>’
     Similar, but searches the _text_ of the manual rather than the
     indices.

‘C-h C-f’
     This displays the Emacs FAQ, using Info.

‘C-h p’
     This displays the available Emacs packages based on keywords.
     *Note Package Keywords::.

‘M-x list-packages’
     This displays a list of external packages.  *Note Packages::.

   ‘C-h’ or <F1> mean “help” in various other contexts as well.  For
instance, you can type them after a prefix key to view a list of the
keys that can follow the prefix key.  (You can also use ‘?’ in this
context.  A few prefix keys don’t support ‘C-h’ or ‘?’ in this way,
because they define other meanings for those inputs, but they all
support <F1>.)

* Menu:

* Help Summary::        Brief list of all Help commands.
* Key Help::            Asking what a key does in Emacs.
* Name Help::           Asking about a command, variable or function name.
* Apropos::             Asking what pertains to a given topic.
* Help Mode::           Special features of Help mode and Help buffers.
* Package Keywords::    Finding Lisp libraries by keywords (topics).
* Language Help::       Help relating to international language support.
* Misc Help::           Other help commands.
* Help Files::          Commands to display auxiliary help files.
* Help Echo::           Help on active text and tooltips (“balloon help”).


File: emacs.info,  Node: Help Summary,  Next: Key Help,  Up: Help

11.1 Help Summary
=================

Here is a summary of help commands for accessing the built-in
documentation.  Most of these are described in more detail in the
following sections.

‘C-h a TOPICS <RET>’
     Display a list of commands whose names match TOPICS
     (‘apropos-command’).  *Note Apropos::.
‘C-h b’
     Display all active key bindings; minor mode bindings first, then
     those of the major mode, then global bindings
     (‘describe-bindings’).  *Note Misc Help::.
‘C-h c KEY’
     Show the name of the command that the key sequence KEY is bound to
     (‘describe-key-briefly’).  Here ‘c’ stands for “character”.  For
     more extensive information on KEY, use ‘C-h k’.  *Note Key Help::.
‘C-h d TOPICS <RET>’
     Display the commands and variables whose documentation matches
     TOPICS (‘apropos-documentation’).  *Note Apropos::.
‘C-h e’
     Display the ‘*Messages*’ buffer (‘view-echo-area-messages’).  *Note
     Misc Help::.
‘C-h f FUNCTION <RET>’
     Display documentation on the Lisp function named FUNCTION
     (‘describe-function’).  Since commands are Lisp functions, this
     works for commands too, but you can also use ‘C-h x’.  *Note Name
     Help::.
‘C-h h’
     Display the ‘HELLO’ file, which shows examples of various character
     sets.
‘C-h i’
     Run Info, the GNU documentation browser (‘info’).  The Emacs manual
     is available in Info.  *Note Misc Help::.
‘C-h k KEY’
     Display the name and documentation of the command that KEY runs
     (‘describe-key’).  *Note Key Help::.
‘C-h l’
     Display a description of your last 300 keystrokes (‘view-lossage’).
     *Note Misc Help::.
‘C-h m’
     Display documentation of the current major mode and minor modes
     (‘describe-mode’).  *Note Misc Help::.
‘C-h n’
     Display news of recent Emacs changes (‘view-emacs-news’).  *Note
     Help Files::.
‘C-h o SYMBOL’
     Display documentation of the Lisp symbol named SYMBOL
     (‘describe-symbol’).  This will show the documentation of all kinds
     of symbols: functions, variables, and faces.  *Note Name Help::.
‘C-h p’
     Find packages by topic keyword (‘finder-by-keyword’).  *Note
     Package Keywords::.  This lists packages using a package menu
     buffer.  *Note Packages::.
‘C-h P PACKAGE <RET>’
     Display documentation about the specified package
     (‘describe-package’).  *Note Package Keywords::.
‘C-h r’
     Display the Emacs manual in Info (‘info-emacs-manual’).
‘C-h s’
     Display the contents of the current “syntax table”
     (‘describe-syntax’).  *Note Misc Help::.  The syntax table says
     which characters are opening delimiters, which are parts of words,
     and so on.  *Note Syntax Tables: (elisp)Syntax Tables, for details.
‘C-h t’
     Enter the Emacs interactive tutorial (‘help-with-tutorial’).
‘C-h v VAR <RET>’
     Display the documentation of the Lisp variable VAR
     (‘describe-variable’).  *Note Name Help::.
‘C-h w COMMAND <RET>’
     Show which keys run the command named COMMAND (‘where-is’).  *Note
     Key Help::.
‘C-h x COMMAND <RET>’
     Display documentation on the named COMMAND (‘describe-command’).
     *Note Name Help::.
‘C-h C CODING <RET>’
     Describe the coding system CODING (‘describe-coding-system’).
     *Note Coding Systems::.
‘C-h C <RET>’
     Describe the coding systems currently in use.
‘C-h F COMMAND <RET>’
     Enter Info and go to the node that documents the Emacs command
     COMMAND (‘Info-goto-emacs-command-node’).  *Note Name Help::.
‘C-h I METHOD <RET>’
     Describe the input method METHOD (‘describe-input-method’).  *Note
     Select Input Method::.
‘C-h K KEY’
     Enter Info and go to the node that documents the key sequence KEY
     (‘Info-goto-emacs-key-command-node’).  *Note Key Help::.
‘C-h L LANGUAGE-ENV <RET>’
     Display information on the character sets, coding systems, and
     input methods used in language environment LANGUAGE-ENV
     (‘describe-language-environment’).  *Note Language Environments::.
‘C-h S SYMBOL <RET>’
     Display the Info documentation on symbol SYMBOL according to the
     programming language you are editing (‘info-lookup-symbol’).  *Note
     Misc Help::.
‘C-h .’
     Display the help message for a special text area, if point is in
     one (‘display-local-help’).  (These include, for example, links in
     ‘*Help*’ buffers.)  *Note Help Echo::.  If you invoke this command
     with a prefix argument, ‘C-u C-h .’, and point is on a button or a
     widget, this command will pop a new buffer that describes that
     button/widget.


File: emacs.info,  Node: Key Help,  Next: Name Help,  Prev: Help Summary,  Up: Help

11.2 Documentation for a Key
============================

The help commands to get information about a key sequence are ‘C-h c’
(‘describe-key-briefly’) and ‘C-h k’ (‘describe-key’).

   ‘C-h c KEY’ displays in the echo area the name of the command that
KEY is bound to.  For example, ‘C-h c C-f’ displays ‘forward-char’.

   ‘C-h k KEY’ is similar but gives more information: it displays a help
buffer containing the command’s “documentation string”, which describes
exactly what the command does.

   ‘C-h K KEY’ displays the section of the Emacs manual that describes
the command corresponding to KEY.

   ‘C-h c’, ‘C-h k’ and ‘C-h K’ work for any sort of key sequences,
including function keys, menus, and mouse events (except that ‘C-h c’
ignores mouse movement events).  For instance, after ‘C-h k’ you can
select a menu item from the menu bar, to view the documentation string
of the command it runs.

   ‘C-h w COMMAND <RET>’ lists the keys that are bound to COMMAND.  It
displays the list in the echo area.  If it says the command is not on
any key, that means you must use ‘M-x’ to run it.  ‘C-h w’ runs the
command ‘where-is’.

   Some modes in Emacs use various buttons (*note (elisp)Buttons::) and
widgets (*note (widget)Introduction::) that can be clicked to perform
some action.  To find out what function is ultimately invoked by these
buttons, Emacs provides the ‘button-describe’ and ‘widget-describe’
commands, that should be run with point over the button.


File: emacs.info,  Node: Name Help,  Next: Apropos,  Prev: Key Help,  Up: Help

11.3 Help by Command or Variable Name
=====================================

‘C-h x COMMAND <RET>’ (‘describe-command’) displays the documentation of
the named COMMAND, in a window.  For example,

     C-h x auto-fill-mode <RET>

displays the documentation of ‘auto-fill-mode’.  This is how you would
get the documentation of a command that is not bound to any key (one
which you would normally run using ‘M-x’).

   ‘C-h f FUNCTION <RET>’ (‘describe-function’) displays the
documentation of Lisp FUNCTION.  This command is intended for Lisp
functions that you use in a Lisp program.  For example, if you have just
written the expression ‘(make-vector len)’ and want to check that you
are using ‘make-vector’ properly, type ‘C-h f make-vector <RET>’.
Additionally, since all commands are Lisp functions, you can also use
this command to view the documentation of any command.

   If you type ‘C-h f <RET>’, it describes the function called by the
innermost Lisp expression in the buffer around point, _provided_ that
function name is a valid, defined Lisp function.  (That name appears as
the default while you enter the argument.)  For example, if point is
located following the text ‘(make-vector (car x)’, the innermost list
containing point is the one that starts with ‘(make-vector’, so
‘C-h f <RET>’ describes the function ‘make-vector’.

   ‘C-h f’ is also useful just to verify that you spelled a function
name correctly.  If the minibuffer prompt for ‘C-h f’ shows the function
name from the buffer as the default, it means that name is defined as a
Lisp function.  Type ‘C-g’ to cancel the ‘C-h f’ command if you don’t
really want to view the documentation.

   If you request help for an autoloaded function whose ‘autoload’ form
(*note (elisp)Autoload::) doesn’t provide a doc string, the ‘*Help*’
buffer won’t have any doc string to display.  In that case, if
‘help-enable-symbol-autoload’ is non-‘nil’, Emacs will try to load the
file in which the function is defined to see whether there’s a doc
string there.

   You can get an overview of functions relevant for a particular topic
by using the ‘M-x shortdoc’ command.  This will prompt you for an area
of interest, e.g., ‘string’, and pop you to a buffer where many of the
functions relevant for handling strings are listed.

   ‘C-h v’ (‘describe-variable’) is like ‘C-h f’ but describes Lisp
variables instead of Lisp functions.  Its default is the Lisp symbol
around or before point, if that is the name of a defined Lisp variable.
*Note Variables::.

   Help buffers that describe Emacs variables and functions normally
have hyperlinks to the corresponding source code, if you have the source
files installed (*note Hyperlinking::).

   To find a command’s documentation in a manual, use ‘C-h F’
(‘Info-goto-emacs-command-node’).  This knows about various manuals, not
just the Emacs manual, and finds the right one.

   ‘C-h o’ (‘describe-symbol’) is like ‘C-h f’ and ‘C-h v’, but it
describes any symbol, be it a function, a variable, or a face.  If the
symbol has more than one definition, like it has both definition as a
function and as a variable, this command will show the documentation of
all of them, one after the other.

   If the ‘completions-detailed’ user option is non-‘nil’, some commands
provide details about the possible values when displaying completions.
For instance, ‘C-h o TAB’ will then include the first line of the doc
string, and will also say whether each symbol is a function or a
variable (and so on).  Which details are included varies depending on
the command used.


File: emacs.info,  Node: Apropos,  Next: Help Mode,  Prev: Name Help,  Up: Help

11.4 Apropos
============

The “apropos” commands answer questions like, “What are the commands for
working with files?” More precisely, you specify your query as an
“apropos pattern”, which is either a word, a list of words, or a regular
expression.

   Each of the following apropos commands reads an apropos pattern in
the minibuffer, searches for items that match the pattern, and displays
the results in a different window.

‘C-h a’
     Search for commands (‘apropos-command’).  With a prefix argument,
     search for noninteractive functions too.

‘M-x apropos’
     Search for functions and variables.  Both interactive functions
     (commands) and noninteractive functions can be found by this.

‘M-x apropos-user-option’
     Search for user-customizable variables.  With a prefix argument,
     search for non-customizable variables too.

‘M-x apropos-variable’
     Search for variables.  With a prefix argument, search for
     customizable variables only.

‘M-x apropos-local-variable’
     Search for buffer-local variables.

‘M-x apropos-value’
     Search for variables whose values match the specified pattern.
     With a prefix argument, search also for functions with definitions
     matching the pattern, and Lisp symbols with properties matching the
     pattern.

‘M-x apropos-local-value’
     Search for buffer-local variables whose values match the specified
     pattern.

‘C-h d’
     Search for functions and variables whose documentation strings
     match the specified pattern (‘apropos-documentation’).

   The simplest kind of apropos pattern is one word.  Anything
containing that word matches the pattern.  Thus, to find commands that
work on files, type ‘C-h a file <RET>’.  This displays a list of all
command names that contain ‘file’, including ‘copy-file’, ‘find-file’,
and so on.  Each command name comes with a brief description and a list
of keys you can currently invoke it with.  In our example, it would say
that you can invoke ‘find-file’ by typing ‘C-x C-f’.

   By default, the window showing the apropos buffer with the results of
the query is not selected, but you can cause it to be selected by
customizing the variable ‘help-window-select’ to any non-‘nil’ value.

   For more information about a function definition, variable or symbol
property listed in an apropos buffer, you can click on it with ‘mouse-1’
or ‘mouse-2’, or move there and type <RET>.

   When you specify more than one word in the apropos pattern, a name
must contain at least two of the words in order to match.  Thus, if you
are looking for commands to kill a chunk of text before point, you could
try ‘C-h a kill back backward behind before <RET>’.  The real command
name ‘kill-backward’ will match that; if there were a command
‘kill-text-before’, it would also match, since it contains two of the
specified words.

   For even greater flexibility, you can specify a regular expression
(*note Regexps::).  An apropos pattern is interpreted as a regular
expression if it contains any of the regular expression special
characters, ‘^$*+?.\[’.

   Following the conventions for naming Emacs commands, here are some
words that you’ll find useful in apropos patterns.  By using them in
‘C-h a’, you will also get a feel for the naming conventions.

     char, line, word, sentence, paragraph, region, page, sexp, list,
     defun, rect, buffer, frame, window, face, file, dir, register,
     mode, beginning, end, forward, backward, next, previous, up, down,
     search, goto, kill, delete, mark, insert, yank, fill, indent, case,
     change, set, what, list, find, view, describe, default.

   If the variable ‘apropos-do-all’ is non-‘nil’, most apropos commands
behave as if they had been given a prefix argument.  There is one
exception: ‘apropos-variable’ without a prefix argument will always
search for all variables, no matter what the value of ‘apropos-do-all’
is.

   By default, all apropos commands except ‘apropos-documentation’ list
their results in alphabetical order.  If the variable
‘apropos-sort-by-scores’ is non-‘nil’, these commands instead try to
guess the relevance of each result, and display the most relevant ones
first.  The ‘apropos-documentation’ command lists its results in order
of relevance by default; to list them in alphabetical order, change the
variable ‘apropos-documentation-sort-by-scores’ to ‘nil’.


File: emacs.info,  Node: Help Mode,  Next: Package Keywords,  Prev: Apropos,  Up: Help

11.5 Help Mode Commands
=======================

Help buffers have Help mode as their major mode.  Help mode provides the
same commands as View mode (*note View Mode::); for instance, <SPC>
scrolls forward, and <DEL> or ‘S-<SPC>’ scrolls backward.  It also
provides a few special commands:

‘<RET>’
     Follow a cross reference at point (‘help-follow’).
‘<TAB>’
     Move point forward to the next hyperlink (‘forward-button’).
‘S-<TAB>’
     Move point back to the previous hyperlink (‘backward-button’).
‘mouse-1’
‘mouse-2’
     Follow a hyperlink that you click on.
‘n’
‘p’
     Move forward and back between pages in the Help buffer.
‘C-c C-c’
     Show all documentation about the symbol at point
     (‘help-follow-symbol’).
‘C-c C-f’
‘r’
     Go forward in history of help commands (‘help-go-forward’).
‘C-c C-b’
‘l’
     Go back in history of help commands (‘help-go-back’).
‘s’
     View the source of the current help topic (if any)
     (‘help-view-source’).
‘i’
     Look up the current topic in the manual(s) (‘help-goto-info’).
‘I’
     Look up the current topic in the Emacs Lisp manual
     (‘help-goto-lispref-info’).
‘c’
     Customize the variable or the face (‘help-customize’).

   When a function name, variable name, or face name (*note Faces::)
appears in the documentation in the help buffer, it is normally an
underlined “hyperlink”.  To view the associated documentation, move
point there and type <RET> (‘help-follow’), or click on the hyperlink
with ‘mouse-1’ or ‘mouse-2’.  Doing so replaces the contents of the help
buffer; to retrace your steps, type ‘C-c C-b’ or ‘l’ (‘help-go-back’).
While retracing your steps, you can go forward by using ‘C-c C-f’ or ‘r’
(‘help-go-forward’).

   To move between hyperlinks in a help buffer, use <TAB>
(‘forward-button’) to move forward to the next hyperlink and ‘S-<TAB>’
(‘backward-button’) to move back to the previous hyperlink.  These
commands act cyclically; for instance, typing <TAB> at the last
hyperlink moves back to the first hyperlink.

   By default, many links in the help buffer are displayed surrounded by
quote characters.  If the ‘help-clean-buttons’ user option is non-‘nil’,
these quote characters are removed from the buffer.

   Help buffers produced by some Help commands (like ‘C-h b’, which
shows a long list of key bindings) are divided into pages by the ‘^L’
character.  In such buffers, the ‘n’ (‘help-goto-next-page’) command
will take you to the next start of page, and the ‘p’
(‘help-goto-previous-page’) command will take you to the previous start
of page.  This way you can quickly navigate between the different kinds
of documentation in a help buffer.

   A help buffer can also contain hyperlinks to Info manuals, source
code definitions, and URLs (web pages).  The first two are opened in
Emacs, and the third using a web browser via the ‘browse-url’ command
(*note Browse-URL::).

   To view all documentation about any symbol in the text, move point to
the symbol and type ‘C-c C-c’ (‘help-follow-symbol’).  This shows the
documentation for all the meanings of the symbol—as a variable, as a
function, and/or as a face.


File: emacs.info,  Node: Package Keywords,  Next: Language Help,  Prev: Help Mode,  Up: Help

11.6 Keyword Search for Packages
================================

Most optional features in Emacs are grouped into “packages”.  Emacs
contains several hundred built-in packages, and more can be installed
over the network (*note Packages::).

   To make it easier to find packages related to a topic, most packages
are associated with one or more “keywords” based on what they do.  Type
‘C-h p’ (‘finder-by-keyword’) to bring up a list of package keywords,
together with a description of what the keywords mean.  To view a list
of packages for a given keyword, type <RET> on that line; this displays
the list of packages in a Package Menu buffer (*note Package Menu::).

   ‘C-h P’ (‘describe-package’) prompts for the name of a package (*note
Packages::), and displays a help buffer describing the attributes of the
package and the features that it implements.  The buffer lists the
keywords that relate to the package in the form of buttons.  Click on a
button with ‘mouse-1’ or ‘mouse-2’ to see the list of other packages
related to that keyword.


File: emacs.info,  Node: Language Help,  Next: Misc Help,  Prev: Package Keywords,  Up: Help

11.7 Help for International Language Support
============================================

For information on a specific language environment (*note Language
Environments::), type ‘C-h L’ (‘describe-language-environment’).  This
displays a help buffer describing the languages supported by the
language environment, and listing the associated character sets, coding
systems, and input methods, as well as some sample text for that
language environment.

   The command ‘C-h h’ (‘view-hello-file’) displays the file
‘etc/HELLO’, which demonstrates various character sets by showing how to
say “hello” in many languages.

   The command ‘C-h I’ (‘describe-input-method’) describes an input
method—either a specified input method, or by default the input method
currently in use.  *Note Input Methods::.

   The command ‘C-h C’ (‘describe-coding-system’) describes coding
systems—either a specified coding system, or the ones currently in use.
*Note Coding Systems::.


File: emacs.info,  Node: Misc Help,  Next: Help Files,  Prev: Language Help,  Up: Help

11.8 Other Help Commands
========================

‘C-h i’ (‘info’) runs the Info program, which browses structured
documentation files.  ‘C-h 4 i’ (‘info-other-window’) does the same, but
shows the Info buffer in another window.  The entire Emacs manual is
available within Info, along with many other manuals for the GNU system.
Type ‘h’ after entering Info to run a tutorial on using Info.

   With a numeric argument N, ‘C-h i’ selects the Info buffer
‘*info*<N>’.  This is useful if you want to browse multiple Info manuals
simultaneously.  If you specify just ‘C-u’ as the prefix argument, ‘C-h
i’ prompts for the name of a documentation file, so you can browse a
file which doesn’t have an entry in the top-level Info menu.

   The help commands ‘C-h F FUNCTION <RET>’ and ‘C-h K KEY’, described
above, enter Info and go straight to the documentation of FUNCTION or
KEY.

   When editing a program, if you have an Info version of the manual for
the programming language, you can use ‘C-h S’ (‘info-lookup-symbol’) to
find an entry for a symbol (keyword, function or variable) in the proper
manual.  The details of how this command works depend on the major mode.

   If something surprising happens, and you are not sure what you typed,
use ‘C-h l’ (‘view-lossage’).  ‘C-h l’ displays your last input
keystrokes and the commands they invoked.  By default, Emacs stores the
last 300 keystrokes; if you wish, you can change this number with the
command ‘lossage-size’.  If you see commands that you are not familiar
with, you can use ‘C-h k’ or ‘C-h f’ to find out what they do.

   To review recent echo area messages, use ‘C-h e’
(‘view-echo-area-messages’).  This displays the buffer ‘*Messages*’,
where those messages are kept.

   Each Emacs major mode typically redefines a few keys and makes other
changes in how editing works.  ‘C-h m’ (‘describe-mode’) displays
documentation on the current major mode, which normally describes the
commands and features that are changed in this mode, and also its key
bindings.

   ‘C-h b’ (‘describe-bindings’) and ‘C-h s’ (‘describe-syntax’) show
other information about the current environment within Emacs.  ‘C-h b’
displays a list of all the key bindings now in effect: first the local
bindings of the current minor modes, then the local bindings defined by
the current major mode, and finally the global bindings (*note Key
Bindings::).  ‘C-h s’ displays the contents of the syntax table, with
explanations of each character’s syntax (*note Syntax Tables:
(elisp)Syntax Tables.).

   You can get a list of subcommands for a particular prefix key by
typing ‘C-h’, ‘?’, or <F1> (‘describe-prefix-bindings’) after the prefix
key.  (There are a few prefix keys for which not all of these keys
work—those that provide their own bindings for that key.  One of these
prefix keys is <ESC>, because ‘<ESC> C-h’ and ‘<ESC> ?’ are actually
‘C-M-h’ (‘mark-defun’) and ‘M-?’ (‘xref-find-references’), respectively.
However, ‘<ESC> <F1>’ works fine.)

   Finally, ‘M-x describe-keymap’ prompts for the name of a keymap, with
completion, and displays a listing of all key bindings in that keymap.


File: emacs.info,  Node: Help Files,  Next: Help Echo,  Prev: Misc Help,  Up: Help

11.9 Help Files
===============

Apart from the built-in documentation and manuals, Emacs contains
several other files describing topics like copying conditions, release
notes, instructions for debugging and reporting bugs, and so forth.  You
can use the following commands to view these files.  Apart from ‘C-h g’,
they all have the form ‘C-h C-CHAR’.

‘C-h C-c’
     Display the rules under which you can copy and redistribute Emacs
     (‘describe-copying’).
‘C-h C-d’
     Display help for debugging Emacs (‘view-emacs-debugging’).
‘C-h C-e’
     Display information about where to get external packages
     (‘view-external-packages’).
‘C-h C-f’
     Display the Emacs frequently-answered-questions list
     (‘view-emacs-FAQ’).
‘C-h g’
     Visit the page (https://www.gnu.org) with information about the GNU
     Project (‘describe-gnu-project’).
‘C-h C-m’
     Display information about ordering printed copies of Emacs manuals
     (‘view-order-manuals’).
‘C-h C-n’
     Display the news, which lists the new features in this version of
     Emacs (‘view-emacs-news’).
‘C-h C-o’
     Display how to order or download the latest version of Emacs and
     other GNU software (‘describe-distribution’).
‘C-h C-p’
     Display the list of known Emacs problems, sometimes with suggested
     workarounds (‘view-emacs-problems’).
‘C-h C-t’
     Display the Emacs to-do list (‘view-emacs-todo’).
‘C-h C-w’
     Display the full details on the complete absence of warranty for
     GNU Emacs (‘describe-no-warranty’).


File: emacs.info,  Node: Help Echo,  Prev: Help Files,  Up: Help

11.10 Help on Active Text and Tooltips
======================================

In Emacs, stretches of “active text” (text that does something special
in response to mouse clicks or <RET>) often have associated help text.
This includes hyperlinks in Emacs buffers, as well as parts of the mode
line.  On graphical displays, as well as some text terminals which
support mouse tracking, moving the mouse over the active text displays
the help text as a “tooltip”.  *Note Tooltips::.

   On terminals that don’t support mouse-tracking, you can display the
help text for active buffer text at point by typing ‘C-h .’
(‘display-local-help’).  This shows the help text in the echo area.  To
display help text automatically whenever it is available at point, set
the variable ‘help-at-pt-display-when-idle’ to ‘t’.


File: emacs.info,  Node: Mark,  Next: Killing,  Prev: Help,  Up: Top

# /. 12 The Mark and the Region
******************************

Emacs, like many other applications, lets you select some arbitrary part
of the buffer text and invoke commands that operate on such “selected
text”.  In Emacs, we call the selected text “the region”; its handling
is very similar to that of selected text in other programs, but there
are also important differences.

   The region is the portion of the buffer between “the mark” and the
current “point”.  You define a region by setting the mark somewhere
(with, for instance, the ‘C-SPC’ command), and then moving point to
where you want the region to end.  (Or you can use the mouse to define a
region.)

   The region always extends between point and the mark, no matter which
of them comes earlier in the text; each time you move point, the region
changes.

   Setting the mark at a position in the text “activates” it.  When the
mark is active, we say also that the region is active; Emacs indicates
its extent by highlighting the text within it, using the ‘region’ face
(*note Face Customization::).

   After certain non-motion commands, including any command that changes
the text in the buffer, Emacs automatically “deactivates” the mark; this
turns off the highlighting.  You can also explicitly deactivate the mark
at any time, by typing ‘C-g’ (*note Quitting::).

   Many commands limit the text on which they operate to the active
region.  For instance, the ‘M-%’ command (which replaces matching text)
normally works on the entire accessible portion of the buffer, but if
you have an active region, it’ll work only on that region instead.

   The mark is useful even if it is not active.  For example, you can
move to previous mark locations using the mark ring.  *Note Mark Ring::.
Additionally, some commands will have an effect even on an inactive
region (for example “upcase-region”).  You can also reactivate the
region with commands like ‘C-x C-x’.

   The above behavior, which is the default in interactive sessions, is
known as Transient Mark mode.  Disabling Transient Mark mode switches
Emacs to an alternative behavior, in which the region is usually not
highlighted.  *Note Disabled Transient Mark::.

   Setting the mark in one buffer has no effect on the marks in other
buffers.  When you return to a buffer with an active mark, the mark is
at the same place as before.  When multiple windows show the same
buffer, they can have different values of point, and thus different
regions, but they all share one common mark position.  *Note Windows::.
Ordinarily, only the selected window highlights its region; however, if
the variable ‘highlight-nonselected-windows’ is non-‘nil’, each window
highlights its own region.

   There is another kind of region: the rectangular region.  *Note
Rectangles::.

* Menu:

* Setting Mark::            Commands to set the mark.
* Marking Objects::         Commands to put region around textual units.
* Using Region::            Summary of ways to operate on contents of the region.
* Mark Ring::               Previous mark positions saved so you can go back there.
* Global Mark Ring::        Previous mark positions in various buffers.
* Shift Selection::         Using shifted cursor motion keys.
* Disabled Transient Mark:: Leaving regions unhighlighted by default.


File: emacs.info,  Node: Setting Mark,  Next: Marking Objects,  Up: Mark

12.1 Setting the Mark
=====================

Here are some commands for setting the mark:

‘C-<SPC>’
     Set the mark at point, and activate it (‘set-mark-command’).
‘C-@’
     The same.
‘C-x C-x’
     Set the mark at point, and activate it; then move point where the
     mark used to be (‘exchange-point-and-mark’).
‘Drag-mouse-1’
     Set point and the mark around the text you drag across.
‘mouse-3’
     Set the mark at point, then move point to where you click
     (‘mouse-save-then-kill’).
‘Shifted cursor motion keys’
     Set the mark at point if the mark is inactive, then move point.
     *Note Shift Selection::.

   The most common way to set the mark is with ‘C-<SPC>’
(‘set-mark-command’)(1).  This sets the mark where point is, and
activates it.  You can then move point away, leaving the mark behind.

   For example, suppose you wish to convert part of the buffer to upper
case.  To accomplish this, go to one end of the desired text, type
‘C-<SPC>’, and move point until the desired portion of text is
highlighted.  Now type ‘C-x C-u’ (‘upcase-region’).  This converts the
text in the region to upper case, and then deactivates the mark.

   Whenever the mark is active, you can deactivate it by typing ‘C-g’
(*note Quitting::).  Most commands that operate on the region also
automatically deactivate the mark, like ‘C-x C-u’ in the above example.

   Instead of setting the mark in order to operate on a region, you can
also use it to remember a position in the buffer (by typing ‘C-<SPC>
C-<SPC>’), and later jump back there (by typing ‘C-u C-<SPC>’).  *Note
Mark Ring::, for details.

   The command ‘C-x C-x’ (‘exchange-point-and-mark’) exchanges the
positions of point and the mark.  ‘C-x C-x’ is useful when you are
satisfied with the position of point but want to move the other end of
the region (where the mark is).  Using ‘C-x C-x’ a second time, if
necessary, puts the mark at the new position with point back at its
original position.  Normally, if the mark is inactive, this command
first reactivates the mark wherever it was last set, to ensure that the
region is left highlighted.  However, if you call it with a prefix
argument, it leaves the mark inactive and the region unhighlighted; you
can use this to jump to the mark in a manner similar to ‘C-u C-<SPC>’.

   You can also set the mark with the mouse.  If you press the left
mouse button (‘down-mouse-1’) and drag the mouse across a range of text,
this sets the mark where you first pressed the mouse button and puts
point where you release it.  Alternatively, clicking the right mouse
button (‘mouse-3’) sets the mark at point and then moves point to where
you clicked.  *Note Mouse Commands::, for a more detailed description of
these mouse commands.

   Finally, you can set the mark by holding down the shift key while
typing certain cursor motion commands (such as ‘S-<RIGHT>’, ‘S-C-f’,
‘S-C-n’, etc.).  This is called “shift-selection”.  It sets the mark at
point before moving point, but only if there is no active mark set via a
previous shift-selection or mouse commands.  The mark set by mouse
commands and by shift-selection behaves slightly differently from the
usual mark: any subsequent unshifted cursor motion command deactivates
it automatically.  For details, see *note Shift Selection::.

   Many commands that insert text, such as ‘C-y’ (‘yank’), set the mark
at the other end of the inserted text, without activating it.  This lets
you easily return to that position (*note Mark Ring::).  You can tell
that a command does this when it shows ‘Mark set’ in the echo area.

   Under X, every time the active region changes, Emacs saves the text
in the region to the “primary selection”.  This lets you insert that
text into other X applications with ‘mouse-2’ clicks.  *Note Primary
Selection::.

   ---------- Footnotes ----------

   (1) There is no ‘C-<SPC>’ character in ASCII; usually, typing
‘C-<SPC>’ on a text terminal gives the character ‘C-@’.  This key is
also bound to ‘set-mark-command’, so unless you are unlucky enough to
have a text terminal that behaves differently, you might as well think
of ‘C-@’ as ‘C-<SPC>’.


File: emacs.info,  Node: Marking Objects,  Next: Using Region,  Prev: Setting Mark,  Up: Mark

12.2 Commands to Mark Textual Objects
=====================================

Here are commands for placing point and the mark around a textual object
such as a word, list, paragraph or page:

‘M-@’
     Set mark at the end of the next word (‘mark-word’).  This does not
     move point.
‘C-M-@’
     Set mark after end of following balanced expression (‘mark-sexp’).
     This does not move point.
‘M-h’
     Move point to the beginning of the current paragraph, and set mark
     at the end (‘mark-paragraph’).
‘C-M-h’
     Move point to the beginning of the current defun, and set mark at
     the end (‘mark-defun’).
‘C-x C-p’
     Move point to the beginning of the current page, and set mark at
     the end (‘mark-page’).
‘C-x h’
     Move point to the beginning of the buffer, and set mark at the end
     (‘mark-whole-buffer’).

   ‘M-@’ (‘mark-word’) sets the mark at the end of the next word (*note
Words::, for information about words).  Repeated invocations of this
command extend the region by advancing the mark one word at a time.  As
an exception, if the mark is active and located before point, ‘M-@’
moves the mark backwards from its current position one word at a time.

   This command also accepts a numeric argument N, which tells it to
advance the mark by N words.  A negative argument −N moves the mark back
by N words.

   Similarly, ‘C-M-@’ (‘mark-sexp’) puts the mark at the end of the next
balanced expression (*note Expressions::).  Repeated invocations extend
the region to subsequent expressions, while positive or negative numeric
arguments move the mark forward or backward by the specified number of
expressions.

   The other commands in the above list set both point and mark, so as
to delimit an object in the buffer.  ‘M-h’ (‘mark-paragraph’) marks
paragraphs (*note Paragraphs::), ‘C-M-h’ (‘mark-defun’) marks top-level
definitions (*note Moving by Defuns::), and ‘C-x C-p’ (‘mark-page’)
marks pages (*note Pages::).  Repeated invocations again play the same
role, extending the region to consecutive objects; similarly, numeric
arguments specify how many objects to move the mark by.

   ‘C-x h’ (‘mark-whole-buffer’) sets up the entire buffer as the
region, by putting point at the beginning and the mark at the end.


File: emacs.info,  Node: Using Region,  Next: Mark Ring,  Prev: Marking Objects,  Up: Mark

12.3 Operating on the Region
============================

Once you have a region, here are some of the ways you can operate on it:

   • Kill it with ‘C-w’ (*note Killing::).
   • Copy it to the kill ring with ‘M-w’ (*note Yanking::).
   • Convert case with ‘C-x C-l’ or ‘C-x C-u’ (*note Case::).
   • Undo changes within it using ‘C-u C-/’ (*note Undo::).
   • Replace text within it using ‘M-%’ (*note Query Replace::).
   • Indent it with ‘C-x <TAB>’ or ‘C-M-\’ (*note Indentation::).
   • Fill it as text with ‘M-x fill-region’ (*note Filling::).
   • Check the spelling of words within it with ‘M-$’ (*note
     Spelling::).
   • Evaluate it as Lisp code with ‘M-x eval-region’ (*note Lisp
     Eval::).
   • Save it in a register with ‘C-x r s’ (*note Registers::).
   • Save it in a buffer or a file (*note Accumulating Text::).

   Some commands have a default behavior when the mark is inactive, but
operate on the region if the mark is active.  For example, ‘M-$’
(‘ispell-word’) normally checks the spelling of the word at point, but
it checks the text in the region if the mark is active (*note
Spelling::).  Normally, such commands use their default behavior if the
region is empty (i.e., if mark and point are at the same position).  If
you want them to operate on the empty region, change the variable
‘use-empty-active-region’ to ‘t’.

   As described in *note Erasing::, the <DEL> (‘backward-delete-char’)
and <Delete> (‘delete-forward-char’) commands also act this way.  If the
mark is active, they delete the text in the region.  (As an exception,
if you supply a numeric argument N, where N is not one, these commands
delete N characters regardless of whether the mark is active).  If you
change the variable ‘delete-active-region’ to ‘nil’, then these commands
don’t act differently when the mark is active.  If you change the value
to ‘kill’, these commands “kill” the region instead of deleting it
(*note Killing::).

   Other commands always operate on the region, and have no default
behavior.  Such commands usually have the word ‘region’ in their names,
like ‘C-w’ (‘kill-region’) and ‘C-x C-u’ (‘upcase-region’).  If the mark
is inactive, they operate on the “inactive region”—that is, on the text
between point and the position at which the mark was last set (*note
Mark Ring::).  To disable this behavior, change the variable
‘mark-even-if-inactive’ to ‘nil’.  Then these commands will instead
signal an error if the mark is inactive.

   By default, text insertion occurs normally even if the mark is
active—for example, typing ‘a’ inserts the character ‘a’, then
deactivates the mark.  Delete Selection mode, a minor mode, modifies
this behavior: if you enable that mode, then inserting text while the
mark is active causes the text in the region to be deleted first.
However, you can tune this behavior by customizing the
‘delete-selection-temporary-region’ option.  Its default value is ‘nil’,
but you can set it to ‘t’, in which case only temporarily-active regions
will be replaced: those which are set by dragging the mouse (*note
Setting Mark::) or by shift-selection (*note Shift Selection::), as well
as by ‘C-u C-x C-x’ when Transient Mark Mode is disabled.  You can
further tune the behavior by setting ‘delete-selection-temporary-region’
to ‘selection’: then temporary regions by ‘C-u C-x C-x’ won’t be
replaced, only the ones activated by dragging the mouse or
shift-selection.  To toggle Delete Selection mode on or off, type ‘M-x
delete-selection-mode’.


File: emacs.info,  Node: Mark Ring,  Next: Global Mark Ring,  Prev: Using Region,  Up: Mark

12.4 The Mark Ring
==================

Each buffer remembers previous locations of the mark, in the “mark
ring”.  Commands that set the mark also push the old mark onto this
ring.  One of the uses of the mark ring is to remember spots that you
may want to go back to.

‘C-<SPC> C-<SPC>’
     Set the mark, pushing it onto the mark ring, without activating it.
‘C-u C-<SPC>’
     Move point to where the mark was, and restore the mark from the
     ring of former marks.

   The command ‘C-<SPC> C-<SPC>’ is handy when you want to use the mark
to remember a position to which you may wish to return.  It pushes the
current point onto the mark ring, without activating the mark (which
would cause Emacs to highlight the region).  This is actually two
consecutive invocations of ‘C-<SPC>’ (‘set-mark-command’); the first
‘C-<SPC>’ sets the mark, and the second ‘C-<SPC>’ deactivates it.  (When
Transient Mark mode is off, ‘C-<SPC> C-<SPC>’ instead activates
Transient Mark mode temporarily; *note Disabled Transient Mark::.)

   To return to a marked position, use ‘set-mark-command’ with a prefix
argument: ‘C-u C-<SPC>’.  This moves point to where the mark was, and
deactivates the mark if it was active.  Each subsequent ‘C-u C-<SPC>’
jumps to a prior position stored in the mark ring.  The positions you
move through in this way are not lost; they go to the end of the ring.

   If you set ‘set-mark-command-repeat-pop’ to non-‘nil’, then
immediately after you type ‘C-u C-<SPC>’, you can type ‘C-<SPC>’ instead
of ‘C-u C-<SPC>’ to cycle through the mark ring.  By default,
‘set-mark-command-repeat-pop’ is ‘nil’.

   Each buffer has its own mark ring.  All editing commands use the
current buffer’s mark ring.  In particular, ‘C-u C-<SPC>’ always stays
in the same buffer.

   The variable ‘mark-ring-max’ specifies the maximum number of entries
to keep in the mark ring.  This defaults to 16 entries.  If that many
entries exist and another one is pushed, the earliest one in the list is
discarded.  Repeating ‘C-u C-<SPC>’ cycles through the positions
currently in the ring.

   If you want to move back to the same place over and over, the mark
ring may not be convenient enough.  If so, you can record the position
in a register for later retrieval (*note Saving Positions in Registers:
Position Registers.).


File: emacs.info,  Node: Global Mark Ring,  Next: Shift Selection,  Prev: Mark Ring,  Up: Mark

12.5 The Global Mark Ring
=========================

In addition to the ordinary mark ring that belongs to each buffer, Emacs
has a single “global mark ring”.  Each time you set a mark, this is
recorded in the global mark ring in addition to the current buffer’s own
mark ring, if you have switched buffers since the previous mark setting.
Hence, the global mark ring records a sequence of buffers that you have
been in, and, for each buffer, a place where you set the mark.  The
length of the global mark ring is controlled by ‘global-mark-ring-max’,
and is 16 by default.

   The command ‘C-x C-<SPC>’ (‘pop-global-mark’) jumps to the buffer and
position of the latest entry in the global ring.  It also rotates the
ring, so that successive uses of ‘C-x C-<SPC>’ take you to earlier
buffers and mark positions.


File: emacs.info,  Node: Shift Selection,  Next: Disabled Transient Mark,  Prev: Global Mark Ring,  Up: Mark

12.6 Shift Selection
====================

If you hold down the shift key while typing a cursor motion command,
this sets the mark before moving point, so that the region extends from
the original position of point to its new position.  This feature is
referred to as “shift-selection”.  It is similar to the way text is
selected in other editors.

   The mark set via shift-selection behaves a little differently from
what we have described above.  Firstly, in addition to the usual ways of
deactivating the mark (such as changing the buffer text or typing
‘C-g’), the mark is deactivated by any _unshifted_ cursor motion
command.  Secondly, any subsequent _shifted_ cursor motion command
avoids setting the mark anew.  Therefore, a series of shifted cursor
motion commands will continuously adjust the region.

   Shift-selection only works if the shifted cursor motion key is not
already bound to a separate command (*note Customization::).  For
example, if you bind ‘S-C-f’ to another command, typing ‘S-C-f’ runs
that command instead of performing a shift-selected version of ‘C-f’
(‘forward-char’).

   A mark set via mouse commands behaves the same as a mark set via
shift-selection (*note Setting Mark::).  For example, if you specify a
region by dragging the mouse, you can continue to extend the region
using shifted cursor motion commands.  In either case, any unshifted
cursor motion command deactivates the mark.

   To turn off shift-selection, set ‘shift-select-mode’ to ‘nil’.  Doing
so does not disable setting the mark via mouse commands.  If you set
‘shift-select-mode’ to the value ‘permanent’, cursor motion keys that
were not shift-translated will not deactivate the mark, so, for example,
the region set by prior commands can be extended by shift-selection, and
unshifted cursor motion keys will extend the region set by
shift-selection.


File: emacs.info,  Node: Disabled Transient Mark,  Prev: Shift Selection,  Up: Mark

12.7 Disabling Transient Mark Mode
==================================

The default behavior of the mark and region, in which setting the mark
activates it and highlights the region, is called Transient Mark mode.
This is a minor mode that is enabled by default in interactive sessions.
It can be toggled with ‘M-x transient-mark-mode’, or with the ‘Highlight
Active Region’ menu item in the ‘Options’ menu.  Turning it off switches
Emacs to an alternative mode of operation:

   • Setting the mark, with commands like ‘C-<SPC>’ or ‘C-x C-x’, does
     not highlight the region.  Therefore, you can’t tell by looking
     where the mark is located; you have to remember.

     The usual solution to this problem is to set the mark and then use
     it soon, before you forget where it is.  You can also check where
     the mark is by using ‘C-x C-x’, which exchanges the positions of
     the point and the mark (*note Setting Mark::).

   • Some commands, which ordinarily act on the region when the mark is
     active, no longer do so.  For example, normally ‘M-%’
     (‘query-replace’) performs replacements within the region, if the
     mark is active.  When Transient Mark mode is off, it always
     operates from point to the end of the buffer.  Commands that act
     this way are identified in their own documentation.

   While Transient Mark mode is off, you can activate it temporarily
using ‘C-<SPC> C-<SPC>’ or ‘C-u C-x C-x’.

‘C-<SPC> C-<SPC>’
     Set the mark at point (like plain ‘C-<SPC>’) and enable Transient
     Mark mode just once, until the mark is deactivated.  (This is not
     really a separate command; you are using the ‘C-<SPC>’ command
     twice.)

‘C-u C-x C-x’
     Exchange point and mark, activate the mark and enable Transient
     Mark mode temporarily, until the mark is next deactivated.  (This
     is the ‘C-x C-x’ command, ‘exchange-point-and-mark’, with a prefix
     argument.)

   These commands set or activate the mark, and enable Transient Mark
mode only until the mark is deactivated.  One reason you may want to use
them is that some commands operate on the entire buffer instead of the
region when Transient Mark mode is off.  Enabling Transient Mark mode
momentarily gives you a way to use these commands on the region.

   When you specify a region with the mouse (*note Setting Mark::), or
with shift-selection (*note Shift Selection::), this likewise activates
Transient Mark mode temporarily and highlights the region.


File: emacs.info,  Node: Killing,  Next: Registers,  Prev: Mark,  Up: Top

# /. 13 Killing and Moving Text
******************************

In Emacs, “killing” means erasing text and copying it into the “kill
ring”.  “Yanking” means bringing text from the kill ring back into the
buffer.  (Some applications use the terms “cutting” and “pasting” for
similar operations.)  The kill ring is so-named because it can be
visualized as a set of blocks of text arranged in a ring, which you can
access in cyclic order.  *Note Kill Ring::.

   Killing and yanking are the most common way to move or copy text
within Emacs.  It is very versatile, because there are commands for
killing many different types of syntactic units.

* Menu:

* Deletion and Killing:: Commands that remove text.
* Yanking::              Commands that insert text.
* Cut and Paste::        Clipboard and selections on graphical displays.
* Accumulating Text::    Other methods to add text to the buffer.
* Rectangles::           Operating on text in rectangular areas.
* CUA Bindings::         Using ‘C-x’/‘C-c’/‘C-v’ to kill and yank.


File: emacs.info,  Node: Deletion and Killing,  Next: Yanking,  Up: Killing

13.1 Deletion and Killing
=========================

Most commands which erase text from the buffer save it in the kill ring
(*note Kill Ring::).  These are known as “kill” commands, and their
names normally contain the word ‘kill’ (e.g., ‘kill-line’).  The kill
ring stores several recent kills, not just the last one, so killing is a
very safe operation: you don’t have to worry much about losing text that
you previously killed.  The kill ring is shared by all buffers, so text
that is killed in one buffer can be yanked into another buffer.

   When you use ‘C-/’ (‘undo’) to undo a kill command (*note Undo::),
that brings the killed text back into the buffer, but does not remove it
from the kill ring.

   On graphical displays, killing text also copies it to the system
clipboard.  *Note Cut and Paste::.

   Commands that erase text but do not save it in the kill ring are
known as “delete” commands; their names usually contain the word
‘delete’.  These include ‘C-d’ (‘delete-char’) and <DEL>
(‘delete-backward-char’), which delete only one character at a time, and
those commands that delete only spaces or newlines.  Commands that can
erase significant amounts of nontrivial data generally do a kill
operation instead.

   You can also use the mouse to kill and yank.  *Note Cut and Paste::.

* Menu:

* Deletion::            Commands for deleting small amounts of text and
                          blank areas.
* Killing by Lines::    How to kill entire lines of text at one time.
* Other Kill Commands:: Commands to kill large regions of text and
                          syntactic units such as words and sentences.
* Kill Options::        Options that affect killing.


File: emacs.info,  Node: Deletion,  Next: Killing by Lines,  Up: Deletion and Killing

13.1.1 Deletion
---------------

Deletion means erasing text and not saving it in the kill ring.  For the
most part, the Emacs commands that delete text are those that erase just
one character or only whitespace.

‘<DEL>’
‘<BACKSPACE>’
     Delete the previous character, or the text in the region if it is
     active (‘delete-backward-char’).

‘<Delete>’
     Delete the next character, or the text in the region if it is
     active (‘delete-forward-char’).

‘C-d’
     Delete the next character (‘delete-char’).

‘M-\’
     Delete spaces and tabs around point (‘delete-horizontal-space’).
‘M-<SPC>’
     Delete spaces and tabs around point, leaving one space
     (‘just-one-space’).
‘C-x C-o’
     Delete blank lines around the current line (‘delete-blank-lines’).
‘M-^’
     Join two lines by deleting the intervening newline, along with any
     indentation following it (‘delete-indentation’).

   We have already described the basic deletion commands <DEL>
(‘delete-backward-char’), <delete> (‘delete-forward-char’), and ‘C-d’
(‘delete-char’).  *Note Erasing::.  With a numeric argument, they delete
the specified number of characters.  If the numeric argument is omitted
or one, <DEL> and <delete> delete all the text in the region if it is
active (*note Using Region::).

   The other delete commands are those that delete only whitespace
characters: spaces, tabs and newlines.  ‘M-\’
(‘delete-horizontal-space’) deletes all the spaces and tab characters
before and after point.  With a prefix argument, this only deletes
spaces and tab characters before point.

   ‘just-one-space’ does likewise but leaves a single space before
point, regardless of the number of spaces that existed previously (even
if there were none before).  With a numeric argument N, it leaves N
spaces before point if N is positive; if N is negative, it deletes
newlines in addition to spaces and tabs, leaving −N spaces before point.

   The command ‘cycle-spacing’ (‘M-<SPC>’) acts like a more flexible
version of ‘just-one-space’.  It performs different space cleanup
actions defined by ‘cycle-spacing-actions’, in a cyclic manner, if you
call it repeatedly in succession.

   ‘C-x C-o’ (‘delete-blank-lines’) deletes all blank lines after the
current line.  If the current line is blank, it deletes all blank lines
preceding the current line as well (leaving one blank line, the current
line).  On a solitary blank line, it deletes that line.

   ‘M-^’ (‘delete-indentation’) joins the current line and the previous
line, by deleting a newline and all surrounding spaces, usually leaving
a single space.  *Note M-^: Indentation.

   The command ‘delete-duplicate-lines’ searches the region for
identical lines, and removes all but one copy of each.  Normally it
keeps the first instance of each repeated line, but with a ‘C-u’ prefix
argument it keeps the last.  With a ‘C-u C-u’ prefix argument, it only
searches for adjacent identical lines.  This is a more efficient mode of
operation, useful when the lines have already been sorted.  With a ‘C-u
C-u C-u’ prefix argument, it retains repeated blank lines.


File: emacs.info,  Node: Killing by Lines,  Next: Other Kill Commands,  Prev: Deletion,  Up: Deletion and Killing

13.1.2 Killing by Lines
-----------------------

‘C-k’
     Kill rest of line or one or more lines (‘kill-line’).
‘C-S-backspace’
     Kill an entire line at once (‘kill-whole-line’)

   The simplest kill command is ‘C-k’ (‘kill-line’).  If used at the end
of a line, it kills the line-ending newline character, merging the next
line into the current one (thus, a blank line is entirely removed).
Otherwise, ‘C-k’ kills all the text from point up to the end of the
line; if point was originally at the beginning of the line, this leaves
the line blank.

   Spaces and tabs at the end of the line are ignored when deciding
which case applies.  As long as point is after the last non-whitespace
character in the line, you can be sure that ‘C-k’ will kill the newline.
To kill an entire non-blank line, go to the beginning and type ‘C-k’
twice.

   In this context, “line” means a logical text line, not a screen line
(*note Continuation Lines::).

   When ‘C-k’ is given a positive argument N, it kills N lines and the
newlines that follow them (text on the current line before point is not
killed).  With a negative argument −N, it kills N lines preceding the
current line, together with the text on the current line before point.
‘C-k’ with an argument of zero kills the text before point on the
current line.

   If the variable ‘kill-whole-line’ is non-‘nil’, ‘C-k’ at the very
beginning of a line kills the entire line including the following
newline.  This variable is normally ‘nil’.

   ‘C-S-backspace’ (‘kill-whole-line’) kills a whole line including its
newline, regardless of the position of point within the line.  Note that
many text terminals will prevent you from typing the key sequence
‘C-S-backspace’.


File: emacs.info,  Node: Other Kill Commands,  Next: Kill Options,  Prev: Killing by Lines,  Up: Deletion and Killing

13.1.3 Other Kill Commands
--------------------------

‘C-w’
     Kill the region (‘kill-region’).
‘M-w’
     Copy the region into the kill ring (‘kill-ring-save’).
‘M-d’
     Kill the next word (‘kill-word’).  *Note Words::.
‘M-<DEL>’
     Kill one word backwards (‘backward-kill-word’).
‘C-x <DEL>’
     Kill back to beginning of sentence (‘backward-kill-sentence’).
     *Note Sentences::.
‘M-k’
     Kill to the end of the sentence (‘kill-sentence’).
‘C-M-k’
     Kill the following balanced expression (‘kill-sexp’).  *Note
     Expressions::.
‘M-z CHAR’
     Kill through the next occurrence of CHAR (‘zap-to-char’).
‘M-x zap-up-to-char CHAR’
     Kill up to, but not including, the next occurrence of CHAR.

   One of the commonly-used kill commands is ‘C-w’ (‘kill-region’),
which kills the text in the region (*note Mark::).  Similarly, ‘M-w’
(‘kill-ring-save’) copies the text in the region into the kill ring
without removing it from the buffer.  If the mark is inactive when you
type ‘C-w’ or ‘M-w’, the command acts on the text between point and
where you last set the mark (*note Using Region::).

   Emacs also provides commands to kill specific syntactic units: words,
with ‘M-<DEL>’ and ‘M-d’ (*note Words::); balanced expressions, with
‘C-M-k’ (*note Expressions::); and sentences, with ‘C-x <DEL>’ and ‘M-k’
(*note Sentences::).

   The command ‘M-z’ (‘zap-to-char’) combines killing with searching: it
reads a character and kills from point up to (and including) the next
occurrence of that character in the buffer.  A numeric argument acts as
a repeat count; a negative argument means to search backward and kill
text before point.  A history of previously used characters is
maintained and can be accessed via the ‘M-p’/‘M-n’ keystrokes.  This is
mainly useful if the character to be used has to be entered via a
complicated input method.  A similar command ‘zap-up-to-char’ kills from
point up to, but not including the next occurrence of a character, with
numeric argument acting as a repeat count.


File: emacs.info,  Node: Kill Options,  Prev: Other Kill Commands,  Up: Deletion and Killing

13.1.4 Options for Killing
--------------------------

Some specialized buffers contain “read-only text”, which cannot be
modified and therefore cannot be killed.  The kill commands work
specially in a read-only buffer: they move over text and copy it to the
kill ring, without actually deleting it from the buffer.  Normally, they
also beep and display an error message when this happens.  But if you
set the variable ‘kill-read-only-ok’ to a non-‘nil’ value, they just
print a message in the echo area to explain why the text has not been
erased.

   Before saving the kill to the kill ring, you can transform the string
using ‘kill-transform-function’.  It’s called with the string to be
killed, and it should return the string you want to be saved.  It can
also return ‘nil’, in which case the string won’t be saved to the kill
ring.  For instance, if you never want to save a pure white space string
to the kill ring, you can say:

     (setq kill-transform-function
           (lambda (string)
             (and (not (string-blank-p string))
                  string)))

   If you change the variable ‘kill-do-not-save-duplicates’ to a
non-‘nil’ value, identical subsequent kills yield a single kill-ring
entry, without duplication.


File: emacs.info,  Node: Yanking,  Next: Cut and Paste,  Prev: Deletion and Killing,  Up: Killing

13.2 Yanking
============

“Yanking” means reinserting text previously killed.  The usual way to
move or copy text is to kill it and then yank it elsewhere.

‘C-y’
     Yank the last kill into the buffer, at point (‘yank’).
‘M-y’
     Either replace the text just yanked with an earlier batch of killed
     text (‘yank-pop’), or allow to select from the list of
     previously-killed batches of text.  *Note Earlier Kills::.
‘C-M-w’
     Cause the following command, if it is a kill command, to append to
     the previous kill (‘append-next-kill’).  *Note Appending Kills::.

   The basic yanking command is ‘C-y’ (‘yank’).  It inserts the most
recent kill, leaving the cursor at the end of the inserted text.  It
also sets the mark at the beginning of the inserted text, without
activating the mark; this lets you jump easily to that position, if you
wish, with ‘C-u C-<SPC>’ (*note Mark Ring::).

   With a plain prefix argument (‘C-u C-y’), the command instead leaves
the cursor in front of the inserted text, and sets the mark at the end.
Using any other prefix argument specifies an earlier kill; e.g., ‘C-u 4
C-y’ reinserts the fourth most recent kill.  *Note Earlier Kills::.

   On graphical displays and on capable text-mode displays, ‘C-y’ first
checks if another application has placed any text in the system
clipboard more recently than the last Emacs kill.  If so, it inserts the
clipboard’s text instead.  Thus, Emacs effectively treats “cut” or
“copy” clipboard operations performed in other applications like Emacs
kills, except that they are not recorded in the kill ring.  *Note Cut
and Paste::, for details.

* Menu:

* Kill Ring::           Where killed text is stored.
* Earlier Kills::       Yanking something killed some time ago.
* Appending Kills::     Several kills in a row all yank together.


File: emacs.info,  Node: Kill Ring,  Next: Earlier Kills,  Up: Yanking

13.2.1 The Kill Ring
--------------------

The “kill ring” is a list of blocks of text that were previously killed.
There is only one kill ring, shared by all buffers, so you can kill text
in one buffer and yank it in another buffer.  This is the usual way to
move text from one buffer to another.  (There are several other methods:
for instance, you could store the text in a register; see *note
Registers::.  *Note Accumulating Text::, for some other ways to move
text around.)

   The maximum number of entries in the kill ring is controlled by the
variable ‘kill-ring-max’.  The default is 120.  If you make a new kill
when this limit has been reached, Emacs makes room by deleting the
oldest entry in the kill ring.

   The actual contents of the kill ring are stored in a variable named
‘kill-ring’; you can view the entire contents of the kill ring with ‘C-h
v kill-ring’.


File: emacs.info,  Node: Earlier Kills,  Next: Appending Kills,  Prev: Kill Ring,  Up: Yanking

13.2.2 Yanking Earlier Kills
----------------------------

As explained in *note Yanking::, you can use a numeric argument to ‘C-y’
to yank text that is no longer the most recent kill.  This is useful if
you remember which kill ring entry you want.  If you don’t, you can use
the ‘M-y’ (‘yank-pop’) command to cycle through the possibilities or to
select one of the earlier kills.

   If the previous command was a yank command, ‘M-y’ takes the text that
was yanked and replaces it with the text from an earlier kill.  So, to
recover the text of the next-to-the-last kill, first use ‘C-y’ to yank
the last kill, and then use ‘M-y’ to replace it with the previous kill.
This works only after a ‘C-y’ or another ‘M-y’.  (If ‘M-y’ is invoked
after some other command, it works differently, see below.)

   You can understand this operation mode of ‘M-y’ in terms of a
last-yank pointer which points at an entry in the kill ring.  Each time
you kill, the last-yank pointer moves to the newly made entry at the
front of the ring.  ‘C-y’ yanks the entry which the last-yank pointer
points to.  ‘M-y’ after a ‘C-y’ or another ‘M-y’ moves the last-yank
pointer to the previous entry, and the text in the buffer changes to
match.  Enough ‘M-y’ commands one after another can move the pointer to
any entry in the ring, so you can get any entry into the buffer.
Eventually the pointer reaches the end of the ring; the next ‘M-y’ loops
back around to the first entry again.

   ‘M-y’ moves the last-yank pointer around the ring, but it does not
change the order of the entries in the ring, which always runs from the
most recent kill at the front to the oldest one still remembered.

   When used after ‘C-y’ or ‘M-y’, ‘M-y’ can take a numeric argument,
which tells it how many entries to advance the last-yank pointer by.  A
negative argument moves the pointer toward the front of the ring; from
the front of the ring, it moves around to the last entry and continues
forward from there.

   Once the text you are looking for is brought into the buffer, you can
stop doing ‘M-y’ commands and the last yanked text will stay there.
It’s just a copy of the kill ring entry, so editing it in the buffer
does not change what’s in the ring.  As long as no new killing is done,
the last-yank pointer remains at the same place in the kill ring, so
repeating ‘C-y’ will yank another copy of the same previous kill.

   When you call ‘C-y’ with a numeric argument, that also sets the
last-yank pointer to the entry that it yanks.

   You can also invoke ‘M-y’ after a command that is not a yank command.
In that case, ‘M-y’ prompts you in the minibuffer for one of the
previous kills.  You can use the minibuffer history commands (*note
Minibuffer History::) to navigate or search through the entries in the
kill ring until you find the one you want to reinsert.  Or you can use
completion commands (*note Completion Commands::) to complete on an
entry from the list of entries in the kill ring or pop up the
‘*Completions*’ buffer with the candidate entries from which you can
choose.  After selecting the kill-ring entry, you can optionally edit it
in the minibuffer.  Finally, type ‘RET’ to exit the minibuffer and
insert the text of the selected kill-ring entry.  Like in case of ‘M-y’
after another yank command, the last-yank pointer is left pointing at
the text you just yanked, whether it is one of the previous kills or an
entry from the kill-ring that you edited before inserting it.  (In the
latter case, the edited entry is added to the front of the kill-ring.)
So here, too, typing ‘C-y’ will yank another copy of the text just
inserted.

   When invoked with a plain prefix argument (‘C-u M-y’) after a command
that is not a yank command, ‘M-y’ leaves the cursor in front of the
inserted text, and sets the mark at the end, like ‘C-y’ does.


File: emacs.info,  Node: Appending Kills,  Prev: Earlier Kills,  Up: Yanking

13.2.3 Appending Kills
----------------------

Normally, each kill command pushes a new entry onto the kill ring.
However, two or more kill commands in a row combine their text into a
single entry, so that a single ‘C-y’ yanks all the text as a unit, just
as it was before it was killed.

   Thus, if you want to yank text as a unit, you need not kill all of it
with one command; you can keep killing line after line, or word after
word, until you have killed it all, and you can still get it all back at
once.

   Commands that kill forward from point add onto the end of the
previous killed text.  Commands that kill backward from point add text
onto the beginning.  This way, any sequence of mixed forward and
backward kill commands puts all the killed text into one entry without
rearrangement.  Numeric arguments do not break the sequence of appending
kills.  For example, suppose the buffer contains this text:

     This is a line ★of sample text.

with point shown by ★.  If you type ‘M-d M-<DEL> M-d M-<DEL>’, killing
alternately forward and backward, you end up with ‘a line of sample’ as
one entry in the kill ring, and ‘This is  text.’ in the buffer.  (Note
the double space between ‘is’ and ‘text’, which you can clean up with
‘M-<SPC>’ or ‘M-q’.)

   Another way to kill the same text is to move back two words with ‘M-b
M-b’, then kill all four words forward with ‘C-u M-d’.  This produces
exactly the same results in the buffer and in the kill ring.  ‘M-f M-f
C-u M-<DEL>’ kills the same text, all going backward; once again, the
result is the same.  The text in the kill ring entry always has the same
order that it had in the buffer before you killed it.

   If a kill command is separated from the last kill command by other
commands (not just numeric arguments), it starts a new entry on the kill
ring.  But you can force it to combine with the last killed text, by
typing ‘C-M-w’ (‘append-next-kill’) right beforehand.  The ‘C-M-w’ tells
its following command, if it is a kill command, to treat the kill as
part of the sequence of previous kills.  As usual, the kill is appended
to the previous killed text if the command kills forward, and prepended
if the command kills backward.  In this way, you can kill several
separated pieces of text and accumulate them to be yanked back in one
place.

   A kill command following ‘M-w’ (‘kill-ring-save’) does not append to
the text that ‘M-w’ copied into the kill ring.


File: emacs.info,  Node: Cut and Paste,  Next: Accumulating Text,  Prev: Yanking,  Up: Killing

13.3 “Cut and Paste” Operations on Graphical Displays
=====================================================

In most graphical desktop environments, you can transfer data (usually
text) between different applications using a system facility called the
“clipboard”.  On X, two other similar facilities are available: the
primary selection and the secondary selection.  When Emacs is run on a
graphical display, its kill and yank commands integrate with these
facilities, so that you can easily transfer text between Emacs and other
graphical applications.

   By default, Emacs uses UTF-8 as the coding system for inter-program
text transfers.  If you find that the pasted text is not what you
expected, you can specify another coding system by typing ‘C-x <RET> x’
or ‘C-x <RET> X’.  You can also request a different data type by
customizing ‘x-select-request-type’.  *Note Communication Coding::.

* Menu:

* Clipboard::           How Emacs uses the system clipboard.
* Primary Selection::   The temporarily selected text selection.
* Secondary Selection:: Cutting without altering point and mark.


File: emacs.info,  Node: Clipboard,  Next: Primary Selection,  Up: Cut and Paste

13.3.1 Using the Clipboard
--------------------------

The “clipboard” is the facility that most graphical applications use for
“cutting and pasting”.  When the clipboard exists, the kill and yank
commands in Emacs make use of it.

   When you kill some text with a command such as ‘C-w’ (‘kill-region’),
or copy it to the kill ring with a command such as ‘M-w’
(‘kill-ring-save’), that text is also put in the clipboard.

   When an Emacs kill command puts text in the clipboard, the existing
clipboard contents are normally lost.  Optionally, Emacs can save the
existing clipboard contents to the kill ring, preventing you from losing
the old clipboard data.  If ‘save-interprogram-paste-before-kill’ has
been set to a number, then the data is copied over if it’s smaller (in
characters) than this number.  If this variable is any other non-‘nil’
value, the data is always copied over—at the risk of high memory
consumption if that data turns out to be large.

   Yank commands, such as ‘C-y’ (‘yank’), also use the clipboard.  If
another application “owns” the clipboard—i.e., if you cut or copied text
there more recently than your last kill command in Emacs—then Emacs
yanks from the clipboard instead of the kill ring.

   Normally, rotating the kill ring with ‘M-y’ (‘yank-pop’) does not
alter the clipboard.  However, if you change ‘yank-pop-change-selection’
to ‘t’, then ‘M-y’ saves the new yank to the clipboard.

   To prevent kill and yank commands from accessing the clipboard,
change the variable ‘select-enable-clipboard’ to ‘nil’.

   Programs can put other things than plain text on the clipboard.  For
instance, a web browser will usually let you choose “Copy Image” on
images, and this image will be put on the clipboard.  On capable
platforms, Emacs can yank these objects with the ‘yank-media’
command—but only in modes that have support for it (*note (elisp)Yanking
Media::).

   Many X desktop environments support a feature called the “clipboard
manager”.  If you exit Emacs while it is the current “owner” of the
clipboard data, and there is a clipboard manager running, Emacs
transfers the clipboard data to the clipboard manager so that it is not
lost.  In some circumstances, this may cause a delay when exiting Emacs;
if you wish to prevent Emacs from transferring data to the clipboard
manager, change the variable ‘x-select-enable-clipboard-manager’ to
‘nil’.

   Since strings containing NUL bytes are usually truncated when passed
through the clipboard, Emacs replaces such characters with “\0” before
transferring them to the system’s clipboard.

   Prior to Emacs 24, the kill and yank commands used the primary
selection (*note Primary Selection::), not the clipboard.  If you prefer
this behavior, change ‘select-enable-clipboard’ to ‘nil’,
‘select-enable-primary’ to ‘t’, and ‘mouse-drag-copy-region’ to ‘t’.  In
this case, you can use the following commands to act explicitly on the
clipboard: ‘clipboard-kill-region’ kills the region and saves it to the
clipboard; ‘clipboard-kill-ring-save’ copies the region to the kill ring
and saves it to the clipboard; and ‘clipboard-yank’ yanks the contents
of the clipboard at point.


File: emacs.info,  Node: Primary Selection,  Next: Secondary Selection,  Prev: Clipboard,  Up: Cut and Paste

13.3.2 Cut and Paste with Other Window Applications
---------------------------------------------------

Under the X Window System, PGTK and Haiku, there exists a “primary
selection” containing the last stretch of text selected in an X
application (usually by dragging the mouse).  Typically, this text can
be inserted into other X applications by ‘mouse-2’ clicks.  The primary
selection is separate from the clipboard.  Its contents are more
fragile; they are overwritten each time you select text with the mouse,
whereas the clipboard is only overwritten by explicit cut or copy
commands.

   Under X, whenever the region is active (*note Mark::), the text in
the region is saved in the primary selection.  This applies regardless
of whether the region was made by dragging or clicking the mouse (*note
Mouse Commands::), or by keyboard commands (e.g., by typing ‘C-<SPC>’
and moving point; *note Setting Mark::).

   If you change the variable ‘select-active-regions’ to ‘only’, Emacs
saves only temporarily active regions to the primary selection, i.e.,
those made with the mouse or with shift selection (*note Shift
Selection::).  If you change ‘select-active-regions’ to ‘nil’, Emacs
avoids saving active regions to the primary selection entirely.

   To insert the primary selection into an Emacs buffer, click ‘mouse-2’
(‘mouse-yank-primary’) where you want to insert it.  *Note Mouse
Commands::.  You can also use the normal Emacs yank command (‘C-y’) to
insert this text if ‘select-enable-primary’ is set (*note Clipboard::).

   By default, Emacs keeps the region active even after text is selected
in another program; this is contrary to typical X behavior.  To make
Emacs deactivate the region after another program places data in the
primary selection, enable the global minor mode ‘lost-selection-mode’.

   MS-Windows provides no primary selection, but Emacs emulates it
within a single Emacs session by storing the selected text internally.
Therefore, all the features and commands related to the primary
selection work on Windows as they do on X, for cutting and pasting
within the same session, but not across Emacs sessions or with other
applications.


File: emacs.info,  Node: Secondary Selection,  Prev: Primary Selection,  Up: Cut and Paste

13.3.3 Secondary Selection
--------------------------

In addition to the primary selection, the X Window System provides a
second similar facility known as the “secondary selection”.  Nowadays,
few X applications make use of the secondary selection, but you can
access it using the following Emacs commands:

‘M-Drag-mouse-1’
     Set the secondary selection, with one end at the place where you
     press down the button, and the other end at the place where you
     release it (‘mouse-set-secondary’).  The selected text is
     highlighted, using the ‘secondary-selection’ face, as you drag.
     The window scrolls automatically if you drag the mouse off the top
     or bottom of the window, just like ‘mouse-set-region’ (*note Mouse
     Commands::).

     This command does not alter the kill ring.

‘M-mouse-1’
     Set one endpoint for the “secondary selection”
     (‘mouse-start-secondary’); use ‘M-mouse-3’ to set the other end and
     complete the selection.  This command cancels any existing
     secondary selection, when it starts a new one.

‘M-mouse-3’
     Set the secondary selection (‘mouse-secondary-save-then-kill’),
     with one end at the position you click ‘M-mouse-3’, and the other
     at the position specified previously with ‘M-mouse-1’.  This also
     puts the selected text in the kill ring.  A second ‘M-mouse-3’ at
     the same place kills the text selected by the secondary selection
     just made.

‘M-mouse-2’
     Insert the secondary selection where you click, placing point at
     the end of the yanked text (‘mouse-yank-secondary’).

   Double or triple clicking of ‘M-mouse-1’ operates on words and lines,
much like ‘mouse-1’.

   If ‘mouse-yank-at-point’ is non-‘nil’, ‘M-mouse-2’ yanks at point.
Then it does not matter precisely where you click, or even which of the
frame’s windows you click on.  *Note Mouse Commands::.  This user option
also effects interactive search: if it is non-‘nil’, yanking with the
mouse anywhere in the frame will add the text to the search string.


File: emacs.info,  Node: Accumulating Text,  Next: Rectangles,  Prev: Cut and Paste,  Up: Killing

13.4 Accumulating Text
======================

Usually we copy or move text by killing it and yanking it, but there are
other convenient methods for copying one block of text in many places,
or for copying many scattered blocks of text into one place.  Here we
describe the commands to accumulate scattered pieces of text into a
buffer or into a file.

‘M-x append-to-buffer’
     Append region to the contents of a specified buffer.
‘M-x prepend-to-buffer’
     Prepend region to the contents of a specified buffer.
‘M-x copy-to-buffer’
     Copy region into a specified buffer, deleting that buffer’s old
     contents.
‘M-x insert-buffer’
     Insert the contents of a specified buffer into current buffer at
     point.
‘M-x append-to-file’
     Append region to the contents of a specified file, at the end.

   To accumulate text into a buffer, use ‘M-x append-to-buffer’.  This
reads a buffer name, then inserts a copy of the region into the buffer
specified.  If you specify a nonexistent buffer, ‘append-to-buffer’
creates the buffer.  The text is inserted wherever point is in that
buffer.  If you have been using the buffer for editing, the copied text
goes into the middle of the text of the buffer, starting from wherever
point happens to be at that moment.

   Point in that buffer is left at the end of the copied text, so
successive uses of ‘append-to-buffer’ accumulate the text in the
specified buffer in the same order as they were copied.  Strictly
speaking, ‘append-to-buffer’ does not always append to the text already
in the buffer—it appends only if point in that buffer is at the end.
However, if ‘append-to-buffer’ is the only command you use to alter a
buffer, then point is always at the end.

   ‘M-x prepend-to-buffer’ is just like ‘append-to-buffer’ except that
point in the other buffer is left before the copied text, so successive
uses of this command add text in reverse order.  ‘M-x copy-to-buffer’ is
similar, except that any existing text in the other buffer is deleted,
so the buffer is left containing just the text newly copied into it.

   The command ‘C-x x i’ (‘insert-buffer’) can be used to retrieve the
accumulated text from another buffer.  This prompts for the name of a
buffer, and inserts a copy of all the text in that buffer into the
current buffer at point, leaving point at the beginning of the inserted
text.  It also adds the position of the end of the inserted text to the
mark ring, without activating the mark.  *Note Buffers::, for background
information on buffers.

   Instead of accumulating text in a buffer, you can append text
directly into a file with ‘M-x append-to-file’.  This prompts for a
filename, and adds the text of the region to the end of the specified
file.  The file is changed immediately on disk.

   You should use ‘append-to-file’ only with files that are _not_ being
visited in Emacs.  Using it on a file that you are editing in Emacs
would change the file behind Emacs’s back, which can lead to losing some
of your editing.

   Another way to move text around is to store it in a register.  *Note
Registers::.


File: emacs.info,  Node: Rectangles,  Next: CUA Bindings,  Prev: Accumulating Text,  Up: Killing

13.5 Rectangles
===============

“Rectangle” commands operate on rectangular areas of the text: all the
characters between a certain pair of columns, in a certain range of
lines.  Emacs has commands to kill rectangles, yank killed rectangles,
clear them out, fill them with blanks or text, or delete them.
Rectangle commands are useful with text in multicolumn formats, and for
changing text into or out of such formats.

   To specify a rectangle for a command to work on, set the mark at one
corner and point at the opposite corner.  The rectangle thus specified
is called the “region-rectangle”.  If point and the mark are in the same
column, the region-rectangle is empty.  If they are in the same line,
the region-rectangle is one line high.

   The region-rectangle is controlled in much the same way as the region
is controlled.  But remember that a given combination of point and mark
values can be interpreted either as a region or as a rectangle,
depending on the command that uses them.

   A rectangular region can also be marked using the mouse: click and
drag ‘C-M-mouse-1’ from one corner of the rectangle to the opposite.

‘C-x r k’
     Kill the text of the region-rectangle, saving its contents as the
     last killed rectangle (‘kill-rectangle’).
‘C-x r M-w’
     Save the text of the region-rectangle as the last killed rectangle
     (‘copy-rectangle-as-kill’).
‘C-x r d’
     Delete the text of the region-rectangle (‘delete-rectangle’).
‘C-x r y’
     Yank the last killed rectangle with its upper left corner at point
     (‘yank-rectangle’).
‘C-x r o’
     Insert blank space to fill the space of the region-rectangle
     (‘open-rectangle’).  This pushes the previous contents of the
     region-rectangle to the right.
‘C-x r N’
     Insert line numbers along the left edge of the region-rectangle
     (‘rectangle-number-lines’).  This pushes the previous contents of
     the region-rectangle to the right.
‘C-x r c’
     Clear the region-rectangle by replacing all of its contents with
     spaces (‘clear-rectangle’).
‘M-x delete-whitespace-rectangle’
     Delete whitespace in each of the lines on the specified rectangle,
     starting from the left edge column of the rectangle.
‘C-x r t STRING <RET>’
     Replace rectangle contents with STRING on each line
     (‘string-rectangle’).
‘M-x string-insert-rectangle <RET> STRING <RET>’
     Insert STRING on each line of the rectangle.
‘C-x <SPC>’
     Toggle Rectangle Mark mode (‘rectangle-mark-mode’).  When this mode
     is active, the region-rectangle is highlighted and can be
     shrunk/grown, and the standard kill and yank commands operate on
     it.

   The rectangle operations fall into two classes: commands to erase or
insert rectangles, and commands to make blank rectangles.

   There are two ways to erase the text in a rectangle: ‘C-x r d’
(‘delete-rectangle’) to delete the text outright, or ‘C-x r k’
(‘kill-rectangle’) to remove the text and save it as the “last killed
rectangle”.  In both cases, erasing the region-rectangle is like erasing
the specified text on each line of the rectangle; if there is any
following text on the line, it moves backwards to fill the gap.

   Killing a rectangle is not killing in the usual sense; the rectangle
is not stored in the kill ring, but in a special place that only records
the most recent rectangle killed.  This is because yanking a rectangle
is so different from yanking linear text that different yank commands
have to be used.  Yank-popping is not defined for rectangles.

   ‘C-x r M-w’ (‘copy-rectangle-as-kill’) is the equivalent of ‘M-w’ for
rectangles: it records the rectangle as the last killed rectangle,
without deleting the text from the buffer.

   To yank the last killed rectangle, type ‘C-x r y’ (‘yank-rectangle’).
The rectangle’s first line is inserted at point, the rectangle’s second
line is inserted at the same horizontal position one line vertically
below, and so on.  The number of lines affected is determined by the
height of the saved rectangle.

   For example, you can convert two single-column lists into a
double-column list by killing one of the single-column lists as a
rectangle, and then yanking it beside the other list.

   You can also copy rectangles into and out of registers with ‘C-x r r
R’ and ‘C-x r i R’.  *Note Rectangle Registers::.

   There are two commands you can use for making blank rectangles: ‘C-x
r c’ (‘clear-rectangle’) blanks out existing text in the
region-rectangle, and ‘C-x r o’ (‘open-rectangle’) inserts a blank
rectangle.

   ‘M-x delete-whitespace-rectangle’ deletes horizontal whitespace
starting from a particular column.  This applies to each of the lines in
the rectangle, and the column is specified by the left edge of the
rectangle.  The right edge of the rectangle does not make any difference
to this command.

   The command ‘C-x r N’ (‘rectangle-number-lines’) inserts line numbers
along the left edge of the region-rectangle.  Normally, the numbering
begins from 1 (for the first line of the rectangle).  With a prefix
argument, the command prompts for a number to begin from, and for a
format string with which to print the numbers (*note (elisp)Formatting
Strings::).

   The command ‘C-x r t’ (‘string-rectangle’) replaces the contents of a
region-rectangle with a string on each line.  The string’s width need
not be the same as the width of the rectangle.  If the string’s width is
less, the text after the rectangle shifts left; if the string is wider
than the rectangle, the text after the rectangle shifts right.

   The command ‘M-x string-insert-rectangle’ is similar to
‘string-rectangle’, but inserts the string on each line, shifting the
original text to the right.

   The command ‘C-x <SPC>’ (‘rectangle-mark-mode’) toggles whether the
region-rectangle or the standard region is highlighted (first activating
the region if necessary).  When this mode is enabled, commands that
resize the region (‘C-f’, ‘C-n’ etc.) do so in a rectangular fashion,
and killing and yanking operate on the rectangle.  *Note Killing::.  The
mode persists only as long as the region is active.

   The region-rectangle works only when the mark is active.  In
particular, when Transient Mark mode is off (*note Disabled Transient
Mark::), in addition to typing ‘C-x <SPC>’ you will need to activate the
mark.

   Unlike the standard region, the region-rectangle can have its corners
extended past the end of buffer, or inside stretches of white space that
point normally cannot enter, like in the middle of a TAB character.

   When the region is active (*note Mark::) and in rectangle-mark-mode,
‘C-x C-x’ runs the command ‘rectangle-exchange-point-and-mark’, which
cycles between the four corners of the region-rectangle.  This comes in
handy if you want to modify the dimensions of the region-rectangle
before invoking an operation on the marked text.


File: emacs.info,  Node: CUA Bindings,  Prev: Rectangles,  Up: Killing

13.6 CUA Bindings
=================

The command ‘M-x cua-mode’ sets up key bindings that are compatible with
the Common User Access (CUA) system used in many other applications.

   When CUA mode is enabled, the keys ‘C-x’, ‘C-c’, ‘C-v’, and ‘C-z’
invoke commands that cut (kill), copy, paste (yank), and undo
respectively.  The ‘C-x’ and ‘C-c’ keys perform cut and copy only if the
region is active.  Otherwise, they still act as prefix keys, so that
standard Emacs commands like ‘C-x C-c’ still work.  Note that this means
the variable ‘mark-even-if-inactive’ has no effect for ‘C-x’ and ‘C-c’
(*note Using Region::).

   To enter an Emacs command like ‘C-x C-f’ while the mark is active,
use one of the following methods: either hold ‘Shift’ together with the
prefix key, e.g., ‘S-C-x C-f’, or quickly type the prefix key twice,
e.g., ‘C-x C-x C-f’.

   To disable the overriding of standard Emacs binding by CUA mode,
while retaining the other features of CUA mode described below, set the
variable ‘cua-enable-cua-keys’ to ‘nil’.

   CUA mode by default activates Delete-Selection mode (*note Mouse
Commands::) so that typed text replaces the active region.  To use CUA
without this behavior, set the variable ‘cua-delete-selection’ to ‘nil’.

   CUA mode provides enhanced rectangle support with visible rectangle
highlighting.  Use ‘C-<RET>’ to start a rectangle, extend it using the
movement commands, and cut or copy it using ‘C-x’ or ‘C-c’.  <RET> moves
the cursor to the next (clockwise) corner of the rectangle, so you can
easily expand it in any direction.  Normal text you type is inserted to
the left or right of each line in the rectangle (on the same side as the
cursor).

   You can use this rectangle support without activating CUA by calling
the ‘cua-rectangle-mark-mode’ command.  There’s also the standard
command ‘rectangle-mark-mode’, see *note Rectangles::.

   With CUA you can easily copy text and rectangles into and out of
registers by providing a one-digit numeric prefix to the kill, copy, and
yank commands, e.g., ‘C-1 C-c’ copies the region into register ‘1’, and
‘C-2 C-v’ yanks the contents of register ‘2’.

   CUA mode also has a global mark feature which allows easy moving and
copying of text between buffers.  Use ‘C-S-<SPC>’ to toggle the global
mark on and off.  When the global mark is on, all text that you kill or
copy is automatically inserted at the global mark, and text you type is
inserted at the global mark rather than at the current position.

   For example, to copy words from various buffers into a word list in a
given buffer, set the global mark in the target buffer, then navigate to
each of the words you want in the list, mark it (e.g., with ‘S-M-f’),
copy it to the list with ‘C-c’ or ‘M-w’, and insert a newline after the
word in the target list by pressing <RET>.


File: emacs.info,  Node: Registers,  Next: Display,  Prev: Killing,  Up: Top

# /. 14 Registers
****************

Emacs “registers” are compartments where you can save text, rectangles,
positions, and other things for later use.  Once you save text or a
rectangle in a register, you can copy it into the buffer once or many
times; once you save a position in a register, you can jump back to that
position once or many times.

   Each register has a name that consists of a single character, which
we will denote by R; R can be a letter (such as ‘a’) or a number (such
as ‘1’); case matters, so register ‘a’ is not the same as register ‘A’.
You can also set a register in non-alphanumeric characters, for instance
‘*’ or ‘C-d’.  Note, it’s not possible to set a register in ‘C-g’ or
‘ESC’, because these keys are reserved for quitting (*note Quitting::).

   A register can store a position, a piece of text, a rectangle, a
number, a window or frame configuration, a buffer name, or a file name,
but only one thing at any given time.  Whatever you store in a register
remains there until you store something else in that register.  To see
what register R contains, use ‘M-x view-register’:

‘M-x view-register <RET> R’
     Display a description of what register R contains.

   All of the commands that prompt for a register will display a preview
window that lists the existing registers (if there are any) after a
short delay.  To change the length of the delay, customize
‘register-preview-delay’.  To prevent this display, set that option to
‘nil’.  You can explicitly request a preview window by pressing ‘C-h’ or
<F1>.

   “Bookmarks” record files and positions in them, so you can return to
those positions when you look at the file again.  Bookmarks are similar
in spirit to registers, so they are also documented in this chapter.

* Menu:

* Position Registers::        Saving positions in registers.
* Text Registers::            Saving text in registers.
* Rectangle Registers::       Saving rectangles in registers.
* Configuration Registers::   Saving window/frame configurations in registers.
* Number Registers::          Numbers in registers.
* File and Buffer Registers:: File and buffer names in registers.
* Keyboard Macro Registers::  Keyboard macros in registers.
* Bookmarks::                 Bookmarks are like registers, but persistent.


File: emacs.info,  Node: Position Registers,  Next: Text Registers,  Up: Registers

14.1 Saving Positions in Registers
==================================

‘C-x r <SPC> R’
     Record the position of point and the current buffer in register R
     (‘point-to-register’).
‘C-x r j R’
     Jump to the position and buffer saved in register R
     (‘jump-to-register’).

   Typing ‘C-x r <SPC>’ (‘point-to-register’), followed by a character
‘R’, saves both the position of point and the current buffer in register
R.  The register retains this information until you store something else
in it.

   The command ‘C-x r j R’ switches to the buffer recorded in register
R, pushes a mark, and moves point to the recorded position.  (The mark
is not pushed if point was already at the recorded position, or in
successive calls to the command.)  The contents of the register are not
changed, so you can jump to the saved position any number of times.

   If you use ‘C-x r j’ to go to a saved position, but the buffer it was
saved from has been killed, ‘C-x r j’ tries to create the buffer again
by visiting the same file.  Of course, this works only for buffers that
were visiting files.


File: emacs.info,  Node: Text Registers,  Next: Rectangle Registers,  Prev: Position Registers,  Up: Registers

14.2 Saving Text in Registers
=============================

When you want to insert a copy of the same piece of text several times,
it may be inconvenient to yank it from the kill ring, since each
subsequent kill moves that entry further down the ring.  An alternative
is to store the text in a register and later retrieve it.

‘C-x r s R’
     Copy region into register R (‘copy-to-register’).
‘C-x r i R’
     Insert text from register R (‘insert-register’).
‘M-x append-to-register <RET> R’
     Append region to text in register R.

     When register R contains text, you can use ‘C-x r +’
     (‘increment-register’) to append to that register.  Note that
     command ‘C-x r +’ behaves differently if R contains a number.
     *Note Number Registers::.

‘M-x prepend-to-register <RET> R’
     Prepend region to text in register R.

   ‘C-x r s R’ stores a copy of the text of the region into the register
named R.  If the mark is inactive, Emacs first reactivates the mark
where it was last set.  The mark is deactivated at the end of this
command.  *Note Mark::.  ‘C-u C-x r s R’, the same command with a prefix
argument, copies the text into register R and deletes the text from the
buffer as well; you can think of this as moving the region text into the
register.

   ‘M-x append-to-register <RET> R’ appends the copy of the text in the
region to the text already stored in the register named R.  If invoked
with a prefix argument, it deletes the region after appending it to the
register.  The command ‘prepend-to-register’ is similar, except that it
_prepends_ the region text to the text in the register instead of
_appending_ it.

   When you are collecting text using ‘append-to-register’ and
‘prepend-to-register’, you may want to separate individual collected
pieces using a separator.  In that case, configure a
‘register-separator’ and store the separator text in to that register.
For example, to get double newlines as text separator during the
collection process, you can use the following setting.

     (setq register-separator ?+)
     (set-register register-separator "\n\n")

   ‘C-x r i R’ inserts in the buffer the text from register R.  Normally
it leaves point after the text and sets the mark before, without
activating it.  With a prefix argument, it instead puts point before the
text and the mark after.


File: emacs.info,  Node: Rectangle Registers,  Next: Configuration Registers,  Prev: Text Registers,  Up: Registers

14.3 Saving Rectangles in Registers
===================================

A register can contain a rectangle instead of linear text.  *Note
Rectangles::, for basic information on how to specify a rectangle in the
buffer.

‘C-x r r R’
     Copy the region-rectangle into register R
     (‘copy-rectangle-to-register’).  With prefix argument, delete it as
     well.
‘C-x r i R’
     Insert the rectangle stored in register R (if it contains a
     rectangle) (‘insert-register’).

   The ‘C-x r i R’ (‘insert-register’) command, previously documented in
*note Text Registers::, inserts a rectangle rather than a text string,
if the register contains a rectangle.


File: emacs.info,  Node: Configuration Registers,  Next: Number Registers,  Prev: Rectangle Registers,  Up: Registers

14.4 Saving Window and Frame Configurations in Registers
========================================================

You can save the window configuration of the selected frame in a
register, or even the configuration of all windows in all frames, and
restore the configuration later.  *Note Window Convenience::, for
information about window configurations.

‘C-x r w R’
     Save the state of the selected frame’s windows in register R
     (‘window-configuration-to-register’).
‘C-x r f R’
     Save the state of all frames, including all their windows (a.k.a.
     “frameset”), in register R (‘frameset-to-register’).

   Use ‘C-x r j R’ to restore a window or frame configuration.  This is
the same command used to restore a cursor position.  When you restore a
frame configuration, any existing frames not included in the
configuration become invisible.  If you wish to delete these frames
instead, use ‘C-u C-x r j R’.


File: emacs.info,  Node: Number Registers,  Next: File and Buffer Registers,  Prev: Configuration Registers,  Up: Registers

14.5 Keeping Numbers in Registers
=================================

There are commands to store a number in a register, to insert the number
in the buffer in decimal, and to increment it.  These commands can be
useful in keyboard macros (*note Keyboard Macros::).

‘C-u NUMBER C-x r n R’
     Store NUMBER into register R (‘number-to-register’).
‘C-u NUMBER C-x r + R’
     If R contains a number, increment the number in that register by
     NUMBER.  Note that command ‘C-x r +’ (‘increment-register’) behaves
     differently if R contains text.  *Note Text Registers::.
‘C-x r i R’
     Insert the number from register R into the buffer.

   ‘C-x r i’ is the same command used to insert any other sort of
register contents into the buffer.  ‘C-x r +’ with no numeric argument
increments the register value by 1; ‘C-x r n’ with no numeric argument
stores zero in the register.


File: emacs.info,  Node: File and Buffer Registers,  Next: Keyboard Macro Registers,  Prev: Number Registers,  Up: Registers

14.6 Keeping File and Buffer Names in Registers
===============================================

If you visit certain file names frequently, you can visit them more
conveniently if you put their names in registers.  Here’s the Lisp code
used to put a file NAME into register R:

     (set-register R '(file . NAME))

For example,

     (set-register ?z '(file . "/gd/gnu/emacs/19.0/src/ChangeLog"))

puts the file name shown in register ‘z’.

   To visit the file whose name is in register R, type ‘C-x r j R’.
(This is the same command used to jump to a position or restore a frame
configuration.)

   Similarly, if there are certain buffers you visit frequently, you can
put their names in registers.  For instance, if you visit the
‘*Messages*’ buffer often, you can use the following snippet to put that
buffer into the ‘m’ register:

     (set-register ?m '(buffer . "*Messages*"))

   To switch to the buffer whose name is in register R, type ‘C-x r j
R’.


File: emacs.info,  Node: Keyboard Macro Registers,  Next: Bookmarks,  Prev: File and Buffer Registers,  Up: Registers

14.7 Keyboard Macro Registers
=============================

If you need to execute a keyboard macro (*note Keyboard Macros::)
frequently, it is more convenient to put it in a register or save it
(*note Save Keyboard Macro::).  ‘C-x C-k x R’ (‘kmacro-to-register’)
stores the last keyboard macro in register R.

   To execute the keyboard macro in register R, type ‘C-x r j R’.  (This
is the same command used to jump to a position or restore a frameset.)


File: emacs.info,  Node: Bookmarks,  Prev: Keyboard Macro Registers,  Up: Registers

14.8 Bookmarks
==============

“Bookmarks” are somewhat like registers in that they record positions
you can jump to.  Unlike registers, they have long names, and they
persist automatically from one Emacs session to the next.  The
prototypical use of bookmarks is to record where you were reading in
various files.

‘C-x r m <RET>’
     Set the bookmark for the visited file, at point.

‘C-x r m BOOKMARK <RET>’
     Set the bookmark named BOOKMARK at point (‘bookmark-set’).

‘C-x r M BOOKMARK <RET>’
     Like ‘C-x r m’, but don’t overwrite an existing bookmark.

‘C-x r b BOOKMARK <RET>’
     Jump to the bookmark named BOOKMARK (‘bookmark-jump’).

‘C-x r l’
     List all bookmarks (‘list-bookmarks’).

‘M-x bookmark-save’
     Save all the current bookmark values in the default bookmark file.

   To record the current position in the visited file, use the command
‘C-x r m’, which sets a bookmark using the visited file name as the
default for the bookmark name.  If you name each bookmark after the file
it points to, then you can conveniently revisit any of those files with
‘C-x r b’, and move to the position of the bookmark at the same time.

   The command ‘C-x r M’ (‘bookmark-set-no-overwrite’) works like
‘C-x r m’, but it signals an error if the specified bookmark already
exists, instead of overwriting it.

   To display a list of all your bookmarks in a separate buffer, type
‘C-x r l’ (‘list-bookmarks’).  If you switch to that buffer, you can use
it to edit your bookmark definitions or annotate the bookmarks.  Type
‘C-h m’ in the bookmark buffer for more information about its special
editing commands.

   When you kill Emacs, Emacs saves your bookmarks, if you have changed
any bookmark values.  You can also save the bookmarks at any time with
the ‘M-x bookmark-save’ command.  Bookmarks are saved to the file
‘~/.emacs.d/bookmarks’ (for compatibility with older versions of Emacs,
if you have a file named ‘~/.emacs.bmk’, that is used instead).  The
bookmark commands load your default bookmark file automatically.  This
saving and loading is how bookmarks persist from one Emacs session to
the next.

   If you set the variable ‘bookmark-save-flag’ to 1, each command that
sets a bookmark will also save your bookmarks; this way, you don’t lose
any bookmark values even if Emacs crashes.  The value, if a number, says
how many bookmark modifications should go by between saving.  If you set
this variable to ‘nil’, Emacs only saves bookmarks if you explicitly use
‘M-x bookmark-save’.

   The variable ‘bookmark-default-file’ specifies the file in which to
save bookmarks by default.

   If you set the variable ‘bookmark-use-annotations’ to ‘t’, setting a
bookmark will query for an annotation.  If a bookmark has an annotation,
it is automatically shown in a separate window when you jump to the
bookmark.

   Bookmark position values are saved with surrounding context, so that
‘bookmark-jump’ can find the proper position even if the file is
modified slightly.  The variable ‘bookmark-search-size’ says how many
characters of context to record on each side of the bookmark’s position.
(In buffers that are visiting encrypted files, no context is saved in
the bookmarks file no matter the value of this variable.)

   Here are some additional commands for working with bookmarks:

‘M-x bookmark-load <RET> FILENAME <RET>’
     Load a file named FILENAME that contains a list of bookmark values.
     You can use this command, as well as ‘bookmark-write’, to work with
     other files of bookmark values in addition to your default bookmark
     file.

‘M-x bookmark-write <RET> FILENAME <RET>’
     Save all the current bookmark values in the file FILENAME.

‘M-x bookmark-delete <RET> BOOKMARK <RET>’
     Delete the bookmark named BOOKMARK.

‘M-x bookmark-insert-location <RET> BOOKMARK <RET>’
     Insert in the buffer the name of the file that bookmark BOOKMARK
     points to.

‘M-x bookmark-insert <RET> BOOKMARK <RET>’
     Insert in the buffer the _contents_ of the file that bookmark
     BOOKMARK points to.


File: emacs.info,  Node: Display,  Next: Search,  Prev: Registers,  Up: Top

# /. 15 Controlling the Display
******************************

Since only part of a large buffer fits in the window, Emacs has to show
only a part of it.  This chapter describes commands and variables that
let you specify which part of the text you want to see, and how the text
is displayed.

* Menu:

* Scrolling::              Commands to move text up and down in a window.
* Recentering::            A scroll command that centers the current line.
* Auto Scrolling::         Redisplay scrolls text automatically when needed.
* Horizontal Scrolling::   Moving text left and right in a window.
* Narrowing::              Restricting display and editing to a portion
                             of the buffer.
* View Mode::              Viewing read-only buffers.
* Follow Mode::            Follow mode lets two windows scroll as one.
* Faces::                  How to change the display style using faces.
* Colors::                 Specifying colors for faces.
* Standard Faces::         The main predefined faces.
* Icons::                  How to change how icons look.
* Text Scale::             Increasing or decreasing text size in a buffer.
* Font Lock::              Minor mode for syntactic highlighting using faces.
* Highlight Interactively:: Tell Emacs what text to highlight.
* Fringes::                Enabling or disabling window fringes.
* Displaying Boundaries::  Displaying top and bottom of the buffer.
* Useless Whitespace::     Showing possibly spurious trailing whitespace.
* Selective Display::      Hiding lines with lots of indentation.
* Optional Mode Line::     Optional mode line display features.
* Text Display::           How text characters are normally displayed.
* Cursor Display::         Features for displaying the cursor.
* Line Truncation::        Truncating lines to fit the screen width instead
                             of continuing them to multiple screen lines.
* Visual Line Mode::       Word wrap and screen line-based editing.
* Display Custom::         Information on variables for customizing display.


File: emacs.info,  Node: Scrolling,  Next: Recentering,  Up: Display

15.1 Scrolling
==============

If a window is too small to display all the text in its buffer, it
displays only a portion of it.  “Scrolling” commands change which
portion of the buffer is displayed.

   Scrolling forward or up advances the portion of the buffer displayed
in the window; equivalently, it moves the buffer text upwards relative
to the window.  Scrolling backward or down displays an earlier portion
of the buffer, and moves the text downwards relative to the window.

   In Emacs, scrolling up or down refers to the direction that the text
moves in the window, _not_ the direction that the window moves relative
to the text.  This terminology was adopted by Emacs before the modern
meaning of “scrolling up” and “scrolling down” became widespread.
Hence, the strange result that <PageDown> scrolls up in the Emacs sense.

   The portion of a buffer displayed in a window always contains point.
If you move point past the bottom or top of the window, scrolling occurs
automatically to bring it back onscreen (*note Auto Scrolling::).  You
can also scroll explicitly with these commands:

‘C-v’
‘<PageDown>’
‘<next>’
     Scroll forward by nearly a full window (‘scroll-up-command’).
‘M-v’
‘<PageUp>’
‘<prior>’
     Scroll backward (‘scroll-down-command’).

   ‘C-v’ (‘scroll-up-command’) scrolls forward by nearly the whole
window height.  The effect is to take the two lines at the bottom of the
window and put them at the top, followed by lines that were not
previously visible.  If point was in the text that scrolled off the top,
it ends up on the window’s new topmost line.  The <PageDown> (or <next>)
key is equivalent to ‘C-v’.

   ‘M-v’ (‘scroll-down-command’) scrolls backward in a similar way.  The
<PageUp> (or <prior>) key is equivalent to ‘M-v’.

   The number of lines of overlap left by these scroll commands is
controlled by the variable ‘next-screen-context-lines’, whose default
value is 2.  You can supply the commands with a numeric prefix argument,
N, to scroll by N lines; Emacs attempts to leave point unchanged, so
that the text and point move up or down together.  ‘C-v’ with a negative
argument is like ‘M-v’ and vice versa.

   By default, these commands signal an error (by beeping or flashing
the screen) if no more scrolling is possible, because the window has
reached the beginning or end of the buffer.  If you change the variable
‘scroll-error-top-bottom’ to ‘t’, these commands move point to the
farthest possible position.  If point is already there, the commands
signal an error.

   Some users like scroll commands to keep point at the same screen
position, so that scrolling back to the same screen conveniently returns
point to its original position.  You can enable this behavior via the
variable ‘scroll-preserve-screen-position’.  If the value is ‘t’, Emacs
adjusts point to keep the cursor at the same screen position whenever a
scroll command moves it off-window, rather than moving it to the topmost
or bottommost line.  With any other non-‘nil’ value, Emacs adjusts point
this way even if the scroll command leaves point in the window.  This
variable affects all the scroll commands documented in this section, as
well as scrolling with the mouse wheel (*note Mouse Commands::); in
general, it affects any command that has a non-‘nil’ ‘scroll-command’
property.  *Note (elisp)Property Lists::.  The same property also causes
Emacs not to exit incremental search when one of these commands is
invoked and ‘isearch-allow-scroll’ is non-‘nil’ (*note Not Exiting
Isearch::).

   Sometimes, particularly when you hold down keys such as ‘C-v’ and
‘M-v’, activating keyboard auto-repeat, Emacs fails to keep up with the
rapid rate of scrolling requested; the display doesn’t update and Emacs
can become unresponsive to input for quite a long time.  You can counter
this sluggishness by setting the variable ‘fast-but-imprecise-scrolling’
to a non-‘nil’ value.  This instructs the scrolling commands not to
fontify (*note Font Lock::) any unfontified text they scroll over,
instead to assume it has the default face.  This can cause Emacs to
scroll to somewhat wrong buffer positions when the faces in use are not
all the same size, even with single (i.e., without auto-repeat)
scrolling operations.

   As an alternative to setting ‘fast-but-imprecise-scrolling’ you might
prefer to enable jit-lock deferred fontification (*note Font Lock::).
To do this, customize ‘jit-lock-defer-time’ to a small positive number
such as 0.25, or even 0.1 if you type quickly.  This gives you less
jerky scrolling when you hold down ‘C-v’, but the window contents after
any action which scrolls into a fresh portion of the buffer will be
momentarily unfontified.

   Finally, a third alternative to these variables is
‘redisplay-skip-fontification-on-input’.  If this variable is non-‘nil’,
skip some fontifications if there’s input pending.  This usually does
not affect the display because redisplay is completely skipped anyway if
input was pending, but it can make scrolling smoother by avoiding
unnecessary fontification.

   The commands ‘M-x scroll-up’ and ‘M-x scroll-down’ behave similarly
to ‘scroll-up-command’ and ‘scroll-down-command’, except they do not
obey ‘scroll-error-top-bottom’.  Prior to Emacs 24, these were the
default commands for scrolling up and down.  The commands ‘M-x
scroll-up-line’ and ‘M-x scroll-down-line’ scroll the current window by
one line at a time.  If you intend to use any of these commands, you
might want to give them key bindings (*note Init Rebinding::).


File: emacs.info,  Node: Recentering,  Next: Auto Scrolling,  Prev: Scrolling,  Up: Display

15.2 Recentering
================

‘C-l’
     Scroll the selected window so the current line is the center-most
     text line; on subsequent consecutive invocations, make the current
     line the top line, the bottom line, and so on in cyclic order.
     Possibly redisplay the screen too (‘recenter-top-bottom’).

‘C-M-S-l’
     Scroll the other window; this is equivalent to ‘C-l’ acting on the
     other window.

‘M-x recenter’
     Scroll the selected window so the current line is the center-most
     text line.  Possibly redisplay the screen too.

‘C-M-l’
     Scroll heuristically to bring useful information onto the screen
     (‘reposition-window’).

   The ‘C-l’ (‘recenter-top-bottom’) command “recenters” the selected
window, scrolling it so that the current screen line is exactly in the
center of the window, or as close to the center as possible.

   Typing ‘C-l’ twice in a row (‘C-l C-l’) scrolls the window so that
point is on the topmost screen line.  Typing a third ‘C-l’ scrolls the
window so that point is on the bottom-most screen line.  Each successive
‘C-l’ cycles through these three positions.

   You can change the cycling order by customizing the list variable
‘recenter-positions’.  Each list element should be the symbol ‘top’,
‘middle’, or ‘bottom’, or a number; an integer means to move the line to
the specified screen line, while a floating-point number between 0.0 and
1.0 specifies a percentage of the screen space from the top of the
window.  The default, ‘(middle top bottom)’, is the cycling order
described above.  Furthermore, if you change the variable
‘scroll-margin’ to a non-zero value N, ‘C-l’ always leaves at least N
screen lines between point and the top or bottom of the window (*note
Auto Scrolling::).

   You can also give ‘C-l’ a prefix argument.  A plain prefix argument,
‘C-u C-l’, simply recenters the line showing point.  A positive argument
N moves line showing point N lines down from the top of the window.  An
argument of zero moves point’s line to the top of the window.  A
negative argument −N moves point’s line N lines from the bottom of the
window.  When given an argument, ‘C-l’ does not clear the screen or
cycle through different screen positions.

   If the variable ‘recenter-redisplay’ has a non-‘nil’ value, each
invocation of ‘C-l’ also clears and redisplays the screen; the special
value ‘tty’ (the default) says to do this on text-terminal frames only.
Redisplaying is useful in case the screen becomes garbled for any reason
(*note Screen Garbled::).

   The more primitive command ‘M-x recenter’ behaves like
‘recenter-top-bottom’, but does not cycle among screen positions.

   ‘C-M-l’ (‘reposition-window’) scrolls the current window
heuristically in a way designed to get useful information onto the
screen.  For example, in a Lisp file, this command tries to get the
entire current defun onto the screen if possible.


File: emacs.info,  Node: Auto Scrolling,  Next: Horizontal Scrolling,  Prev: Recentering,  Up: Display

15.3 Automatic Scrolling
========================

Emacs performs “automatic scrolling” when point moves out of the visible
portion of the text.  Normally, automatic scrolling centers point
vertically in the window, but there are several ways to alter this
behavior.

   If you set ‘scroll-conservatively’ to a small number N, then moving
point just a little off the screen (no more than N lines) causes Emacs
to scroll just enough to bring point back on screen; if doing so fails
to make point visible, Emacs scrolls just far enough to center point in
the window.  If you set ‘scroll-conservatively’ to a large number
(larger than 100), automatic scrolling never centers point, no matter
how far point moves; Emacs always scrolls text just enough to bring
point into view, either at the top or bottom of the window depending on
the scroll direction.  By default, ‘scroll-conservatively’ is 0, which
means to always center point in the window.  This said, in minibuffer
windows, scrolling is always conservative by default because
‘scroll-minibuffer-conservatively’ is non-‘nil’, which takes precedence
over ‘scroll-conservatively’.

   Another way to control automatic scrolling is to customize the
variable ‘scroll-step’.  Its value determines the number of lines by
which to automatically scroll, when point moves off the screen.  If
scrolling by that number of lines fails to bring point back into view,
point is centered instead.  The default value is zero, which (by
default) causes point to always be centered after scrolling.

   A third way to control automatic scrolling is to customize the
variables ‘scroll-up-aggressively’ and ‘scroll-down-aggressively’, which
directly specify the vertical position of point after scrolling.  The
value of ‘scroll-up-aggressively’ should be either ‘nil’ (the default),
or a floating point number F between 0 and 1.  The latter means that
when point goes below the bottom window edge (i.e., scrolling forward),
Emacs scrolls the window so that point is F parts of the window height
from the bottom window edge.  Thus, larger F means more aggressive
scrolling: more new text is brought into view.  The default value,
‘nil’, is equivalent to 0.5.

   Likewise, ‘scroll-down-aggressively’ is used when point goes above
the top window edge (i.e., scrolling backward).  The value specifies how
far point should be from the top margin of the window after scrolling.
Thus, as with ‘scroll-up-aggressively’, a larger value is more
aggressive.

   Note that the variables ‘scroll-conservatively’, ‘scroll-step’, and
‘scroll-up-aggressively’ / ‘scroll-down-aggressively’ control automatic
scrolling in contradictory ways.  Therefore, you should pick no more
than one of these methods to customize automatic scrolling.  In case you
customize multiple variables, the order of priority is:
‘scroll-conservatively’, then ‘scroll-step’, and finally
‘scroll-up-aggressively’ / ‘scroll-down-aggressively’.

   The variable ‘scroll-margin’ restricts how close point can come to
the top or bottom of a window (even if aggressive scrolling specifies a
fraction F that is larger than the window portion between the top and
the bottom margins).  Its value is a number of screen lines; if point
comes within that many lines of the top or bottom of the window, Emacs
performs automatic scrolling.  By default, ‘scroll-margin’ is 0.  The
effective margin size is limited to a quarter of the window height by
default, but this limit can be increased up to half (or decreased down
to zero) by customizing ‘maximum-scroll-margin’.


File: emacs.info,  Node: Horizontal Scrolling,  Next: Narrowing,  Prev: Auto Scrolling,  Up: Display

15.4 Horizontal Scrolling
=========================

“Horizontal scrolling” means shifting all the lines sideways within a
window, so that some of the text near the left margin is not displayed.
When the text in a window is scrolled horizontally, text lines are
truncated rather than continued (*note Line Truncation::).  If a window
shows truncated lines, Emacs performs automatic horizontal scrolling
whenever point moves off the left or right edge of the screen.  By
default, all the lines in the window are scrolled horizontally together,
but if you set the variable ‘auto-hscroll-mode’ to the special value of
‘current-line’, only the line showing the cursor will be scrolled.  To
disable automatic horizontal scrolling entirely, set the variable
‘auto-hscroll-mode’ to ‘nil’.  Note that when the automatic horizontal
scrolling is turned off, if point moves off the edge of the screen, the
cursor disappears to indicate that.  (On text terminals, the cursor is
left at the edge instead.)

   The variable ‘hscroll-margin’ controls how close point can get to the
window’s left and right edges before automatic scrolling occurs.  It is
measured in columns.  For example, if the value is 5, then moving point
within 5 columns of an edge causes horizontal scrolling away from that
edge.

   The variable ‘hscroll-step’ determines how many columns to scroll the
window when point gets too close to the edge.  Zero, the default value,
means to center point horizontally within the window.  A positive
integer value specifies the number of columns to scroll by.  A
floating-point number (whose value should be between 0 and 1) specifies
the fraction of the window’s width to scroll by.

   You can also perform explicit horizontal scrolling with the following
commands:

‘C-x <’
     Scroll text in current window to the left (‘scroll-left’).
‘C-x >’
     Scroll to the right (‘scroll-right’).

   ‘C-x <’ (‘scroll-left’) scrolls text in the selected window to the
left by the full width of the window, less two columns.  (In other
words, the text in the window moves left relative to the window.)  With
a numeric argument N, it scrolls by N columns.

   If the text is scrolled to the left, and point moves off the left
edge of the window, the cursor will freeze at the left edge of the
window, until point moves back to the displayed portion of the text.
This is independent of the current setting of ‘auto-hscroll-mode’,
which, for text scrolled to the left, only affects the behavior at the
right edge of the window.

   ‘C-x >’ (‘scroll-right’) scrolls similarly to the right.  The window
cannot be scrolled any farther to the right once it is displayed
normally, with each line starting at the window’s left margin;
attempting to do so has no effect.  This means that you don’t have to
calculate the argument precisely for ‘C-x >’; any sufficiently large
argument will restore the normal display.

   If you use those commands to scroll a window horizontally, that sets
a lower bound for automatic horizontal scrolling.  Automatic scrolling
will continue to scroll the window, but never farther to the right than
the amount you previously set by ‘scroll-left’.  When
‘auto-hscroll-mode’ is set to ‘current-line’, all the lines other than
the one showing the cursor will be scrolled by that minimal amount.


File: emacs.info,  Node: Narrowing,  Next: View Mode,  Prev: Horizontal Scrolling,  Up: Display

15.5 Narrowing
==============

“Narrowing” means focusing in on some portion of the buffer, making the
rest temporarily inaccessible.  The portion which you can still get to
is called the “accessible portion”.  Canceling the narrowing, which
makes the entire buffer once again accessible, is called “widening”.
The bounds of narrowing in effect in a buffer are called the buffer’s
“restriction”.

   Narrowing can make it easier to concentrate on a single subroutine or
paragraph by eliminating clutter.  It can also be used to limit the
range of operation of a replace command or repeating keyboard macro.

‘C-x n n’
     Narrow down to between point and mark (‘narrow-to-region’).
‘C-x n w’
     Widen to make the entire buffer accessible again (‘widen’).
‘C-x n p’
     Narrow down to the current page (‘narrow-to-page’).
‘C-x n d’
     Narrow down to the current defun (‘narrow-to-defun’).

   When you have narrowed down to a part of the buffer, that part
appears to be all there is.  You can’t see the rest, you can’t move into
it (motion commands won’t go outside the accessible part), you can’t
change it in any way.  However, it is not gone, and if you save the file
all the inaccessible text will be saved.  The word ‘Narrow’ appears in
the mode line whenever narrowing is in effect.

   The primary narrowing command is ‘C-x n n’ (‘narrow-to-region’).  It
sets the current buffer’s restrictions so that the text in the current
region remains accessible, but all text before the region or after the
region is inaccessible.  Point and mark do not change.

   Alternatively, use ‘C-x n p’ (‘narrow-to-page’) to narrow down to the
current page.  *Note Pages::, for the definition of a page.  ‘C-x n d’
(‘narrow-to-defun’) narrows down to the defun containing point (*note
Defuns::).

   The way to cancel narrowing is to widen with ‘C-x n w’ (‘widen’).
This makes all text in the buffer accessible again.

   You can get information on what part of the buffer you are narrowed
down to using the ‘C-x =’ command.  *Note Position Info::.

   Because narrowing can easily confuse users who do not understand it,
‘narrow-to-region’ is normally a disabled command.  Attempting to use
this command asks for confirmation and gives you the option of enabling
it; if you enable the command, confirmation will no longer be required
for it.  *Note Disabling::.


File: emacs.info,  Node: View Mode,  Next: Follow Mode,  Prev: Narrowing,  Up: Display

15.6 View Mode
==============

View mode is a minor mode that lets you scan a buffer by sequential
screenfuls.  It provides commands for scrolling through the buffer
conveniently but not for changing it.  Apart from the usual Emacs cursor
motion commands, you can type <SPC> to scroll forward one windowful,
‘S-<SPC>’ or <DEL> to scroll backward, and ‘s’ to start an incremental
search.

   Typing ‘q’ (‘View-quit’) disables View mode, and switches back to the
buffer and position before View mode was enabled.  Typing ‘e’
(‘View-exit’) disables View mode, keeping the current buffer and
position.

   ‘M-x view-buffer’ prompts for an existing Emacs buffer, switches to
it, and enables View mode.  ‘M-x view-file’ prompts for a file and
visits it with View mode enabled.


File: emacs.info,  Node: Follow Mode,  Next: Faces,  Prev: View Mode,  Up: Display

15.7 Follow Mode
================

“Follow mode” is a minor mode that makes two windows, both showing the
same buffer, scroll as a single tall virtual window.  To use Follow
mode, go to a frame with just one window, split it into two side-by-side
windows using ‘C-x 3’, and then type ‘M-x follow-mode’.  From then on,
you can edit the buffer in either of the two windows, or scroll either
one; the other window follows it.

   In Follow mode, if you move point outside the portion visible in one
window and into the portion visible in the other window, that selects
the other window—again, treating the two as if they were parts of one
large window.

   To turn off Follow mode, type ‘M-x follow-mode’ a second time.


File: emacs.info,  Node: Faces,  Next: Colors,  Prev: Follow Mode,  Up: Display

15.8 Text Faces
===============

Emacs can display text in several different styles, called “faces”.
Each face can specify various “face attributes”, such as the font,
height, weight, slant, foreground and background color, and underlining
or overlining.  Most major modes assign faces to the text automatically,
via Font Lock mode.  *Note Font Lock::, for more information about how
these faces are assigned.

   To see what faces are currently defined, and what they look like,
type ‘M-x list-faces-display’.  With a prefix argument, this prompts for
a regular expression, and displays only faces with names matching that
regular expression (*note Regexps::).

   It’s possible for a given face to look different in different frames.
For instance, some text terminals do not support all face attributes,
particularly font, height, and width, and some support a limited range
of colors.  In addition, most Emacs faces are defined so that their
attributes are different on light and dark frame backgrounds, for
reasons of legibility.  By default, Emacs automatically chooses which
set of face attributes to display on each frame, based on the frame’s
current background color.  However, you can override this by giving the
variable ‘frame-background-mode’ a non-‘nil’ value.  A value of ‘dark’
makes Emacs treat all frames as if they have a dark background, whereas
a value of ‘light’ makes it treat all frames as if they have a light
background.

   You can customize a face to alter its attributes, and save those
customizations for future Emacs sessions.  *Note Face Customization::,
for details.

   The ‘default’ face is the default for displaying text, and all of its
attributes are specified.  Its background color is also used as the
frame’s background color.  *Note Colors::.

   Another special face is the ‘cursor’ face.  On graphical displays,
the background color of this face is used to draw the text cursor.  None
of the other attributes of this face have any effect; the foreground
color for text under the cursor is taken from the background color of
the underlying text.  On text terminals, the appearance of the text
cursor is determined by the terminal, not by the ‘cursor’ face.

   You can also use X resources to specify attributes of any particular
face.  *Note Resources::.

   Emacs can display variable-width fonts, but some Emacs commands,
particularly indentation commands, do not account for variable character
display widths.  Therefore, we recommend not using variable-width fonts
for most faces, particularly those assigned by Font Lock mode.


File: emacs.info,  Node: Colors,  Next: Standard Faces,  Prev: Faces,  Up: Display

15.9 Colors for Faces
=====================

Faces can have various foreground and background colors.  When you
specify a color for a face—for instance, when customizing the face
(*note Face Customization::)—you can use either a “color name” or an
“RGB triplet”.

15.9.1 Color Names
------------------

A color name is a pre-defined name, such as ‘dark orange’ or ‘medium sea
green’.  To view a list of color names, type ‘M-x list-colors-display’.
To control the order in which colors are shown, customize
‘list-colors-sort’.  If you run this command on a graphical display, it
shows the full range of color names known to Emacs (these are the
standard X11 color names, defined in X’s ‘rgb.txt’ file).  If you run
the command on a text terminal, it shows only a small subset of colors
that can be safely displayed on such terminals.  However, Emacs
understands X11 color names even on text terminals; if a face is given a
color specified by an X11 color name, it is displayed using the
closest-matching terminal color.

15.9.2 RGB Triplets
-------------------

An RGB triplet is a string of the form ‘#RRGGBB’.  Each of the primary
color components is represented by a hexadecimal number between ‘00’
(intensity 0) and ‘FF’ (the maximum intensity).  It is also possible to
use one, three, or four hex digits for each component, so ‘red’ can be
represented as ‘#F00’, ‘#fff000000’, or ‘#ffff00000000’.  The components
must have the same number of digits.  For hexadecimal values A to F,
either upper or lower case are acceptable.

   The ‘M-x list-colors-display’ command also shows the equivalent RGB
triplet for each named color.  For instance, ‘medium sea green’ is
equivalent to ‘#3CB371’.

   You can change the foreground and background colors of a face with
‘M-x set-face-foreground’ and ‘M-x set-face-background’.  These commands
prompt in the minibuffer for a face name and a color, with completion,
and then set that face to use the specified color.  They affect the face
colors on all frames, but their effects do not persist for future Emacs
sessions, unlike using the customization buffer or X resources.  You can
also use frame parameters to set foreground and background colors for a
specific frame; *Note Frame Parameters::.


File: emacs.info,  Node: Standard Faces,  Next: Icons,  Prev: Colors,  Up: Display

15.10 Standard Faces
====================

Here are the standard faces for specifying text appearance.  You can
apply them to specific text when you want the effects they produce.

‘default’
     This face is used for ordinary text that doesn’t specify any face.
     Its background color is used as the frame’s background color.

‘bold’
     This face uses a bold variant of the default font.

‘italic’
     This face uses an italic variant of the default font.

‘bold-italic’
     This face uses a bold italic variant of the default font.

‘underline’
     This face underlines text.

‘fixed-pitch’
     This face forces use of a fixed-width font.  It’s reasonable to
     customize this face to use a different fixed-width font, if you
     like, but you should not make it a variable-width font.

‘fixed-pitch-serif’
     This face is like ‘fixed-pitch’, except the font has serifs and
     looks more like traditional typewriting.

‘variable-pitch’
     This face forces use of a variable-width (i.e., proportional) font.
     The font size picked for this face matches the font picked for the
     default (usually fixed-width) font.

‘variable-pitch-text’
     This is like the ‘variable-pitch’ face (from which it inherits),
     but is slightly larger.  A proportional font of the same height as
     a monospace font usually appears visually smaller, and can
     therefore be harder to read.  When displaying longer texts, this
     face can be a good choice over the (slightly smaller)
     ‘variable-pitch’ face.

‘shadow’
     This face is used for making the text less noticeable than the
     surrounding ordinary text.  Usually this can be achieved by using
     shades of gray in contrast with either black or white default
     foreground color.

   Here’s an incomplete list of faces used to highlight parts of the
text temporarily for specific purposes.  (Many other modes define their
own faces for this purpose.)

‘highlight’
     This face is used for text highlighting in various contexts, such
     as when the mouse cursor is moved over a hyperlink.
‘isearch’
     This face is used to highlight the current Isearch match (*note
     Incremental Search::).
‘query-replace’
     This face is used to highlight the current Query Replace match
     (*note Replace::).
‘lazy-highlight’
     This face is used to highlight lazy matches for Isearch and Query
     Replace (matches other than the current one).
‘region’
     This face is used for displaying an active region (*note Mark::).
     When Emacs is built with GTK+ support, its colors are taken from
     the current GTK+ theme.
‘secondary-selection’
     This face is used for displaying a secondary X selection (*note
     Secondary Selection::).
‘trailing-whitespace’
     The face for highlighting excess spaces and tabs at the end of a
     line when ‘show-trailing-whitespace’ is non-‘nil’ (*note Useless
     Whitespace::).
‘escape-glyph’
     The face for displaying control characters and escape sequences
     (*note Text Display::).
‘homoglyph’
     The face for displaying lookalike characters, i.e., characters that
     look like but are not the characters being represented (*note Text
     Display::).
‘nobreak-space’
     The face for displaying no-break space characters (*note Text
     Display::).
‘nobreak-hyphen’
     The face for displaying no-break hyphen characters (*note Text
     Display::).

   The following faces control the appearance of parts of the Emacs
frame:

‘mode-line’
     This is the base face used for the mode lines, as well as header
     lines and for menu bars when toolkit menus are not used.  By
     default, it’s drawn with shadows for a raised effect on graphical
     displays, and drawn as the inverse of the default face on
     non-windowed terminals.

     The ‘mode-line-active’ and ‘mode-line-inactive’ faces (which are
     the ones used on the mode lines) inherit from this face.

‘mode-line-active’
     Like ‘mode-line’, but used for the mode line of the currently
     selected window.  This face inherits from ‘mode-line’, so changes
     in that face affect mode lines in all windows.

‘mode-line-inactive’
     Like ‘mode-line’, but used for mode lines of the windows other than
     the selected one (if ‘mode-line-in-non-selected-windows’ is
     non-‘nil’).  This face inherits from ‘mode-line’, so changes in
     that face affect mode lines in all windows.

‘mode-line-highlight’
     Like ‘highlight’, but used for mouse-sensitive portions of text on
     mode lines.  Such portions of text typically pop up tooltips (*note
     Tooltips::) when the mouse pointer hovers above them.

‘mode-line-buffer-id’
     This face is used for buffer identification parts in the mode line.

‘header-line’
     Similar to ‘mode-line’ for a window’s header line, which appears at
     the top of a window just as the mode line appears at the bottom.
     Most windows do not have a header line—only some special modes,
     such Info mode, create one.

‘header-line-highlight’
     Similar to ‘highlight’ and ‘mode-line-highlight’, but used for
     mouse-sensitive portions of text on header lines.  This is a
     separate face because the ‘header-line’ face might be customized in
     a way that does not interact well with ‘highlight’.

‘tab-line’
     Similar to ‘mode-line’ for a window’s tab line, which appears at
     the top of a window with tabs representing window buffers.  *Note
     Tab Line::.

‘vertical-border’
     This face is used for the vertical divider between windows on text
     terminals.

‘minibuffer-prompt’
     This face is used for the prompt strings displayed in the
     minibuffer.  By default, Emacs automatically adds this face to the
     value of ‘minibuffer-prompt-properties’, which is a list of text
     properties (*note (elisp)Text Properties::) used to display the
     prompt text.  (This variable takes effect when you enter the
     minibuffer.)

‘fringe’
     The face for the fringes to the left and right of windows on
     graphic displays.  (The fringes are the narrow portions of the
     Emacs frame between the text area and the window’s right and left
     borders.)  *Note Fringes::.

‘cursor’
     The ‘:background’ attribute of this face specifies the color of the
     text cursor.  *Note Cursor Display::.

‘tooltip’
     This face is used for tooltip text.  By default, if Emacs is built
     with GTK+ support, tooltips are drawn via GTK+ and this face has no
     effect.  *Note Tooltips::.

‘mouse’
     This face determines the color of the mouse pointer.

   The following faces likewise control the appearance of parts of the
Emacs frame, but only on text terminals, or when Emacs is built on X
with no toolkit support.  (For all other cases, the appearance of the
respective frame elements is determined by system-wide settings.)

‘scroll-bar’
     This face determines the visual appearance of the scroll bar.
     *Note Scroll Bars::.
‘tool-bar’
     This face determines the color of tool bar icons.  *Note Tool
     Bars::.
‘tab-bar’
     This face determines the color of tab bar icons.  *Note Tab Bars::.
‘menu’
     This face determines the colors and font of Emacs’s menus.  *Note
     Menu Bars::.
‘tty-menu-enabled-face’
     This face is used to display enabled menu items on text-mode
     terminals.
‘tty-menu-disabled-face’
     This face is used to display disabled menu items on text-mode
     terminals.
‘tty-menu-selected-face’
     This face is used to display on text-mode terminals the menu item
     that would be selected if you click a mouse or press <RET>.


File: emacs.info,  Node: Icons,  Next: Text Scale,  Prev: Standard Faces,  Up: Display

15.11 Icons
===========

Emacs sometimes displays clickable buttons (or other informative icons),
and you can customize how these look on display.

   The main customization point here is the ‘icon-preference’ user
option.  By using this, you can tell Emacs your overall preferences for
icons.  This is a list of icon types, and the first icon type that’s
supported will be used.  The supported types are:

‘image’
     Use an image for the icon.

‘emoji’
     Use a colorful emoji for the icon.

‘symbol’
     Use a monochrome symbol for the icon.

‘text’
     Use a simple text for the icon.

   In addition, each individual icon can be customized with ‘M-x
customize-icon’, and themes can further alter the looks of the icons.

   To get a quick description of an icon, use the ‘M-x describe-icon’
command.


File: emacs.info,  Node: Text Scale,  Next: Font Lock,  Prev: Icons,  Up: Display

15.12 Text Scale
================

To increase the font size of the ‘default’ face in the current buffer,
type ‘C-x C-+’ or ‘C-x C-=’.  To decrease it, type ‘C-x C--’.  To
restore the default (global) font size, type ‘C-x C-0’.  These keys are
all bound to the same command, ‘text-scale-adjust’, which looks at the
last key typed to determine which action to take and adjusts the font
size accordingly by changing the height of the default face.

   Most faces don’t have an explicit setting of the ‘:height’ attribute,
and thus inherit the height from the ‘default’ face.  Those faces are
also scaled by the above commands.

   Faces other than ‘default’ that have an explicit setting of the
‘:height’ attribute are not affected by these font size changes.  The
‘header-line’ face is an exception: it will be scaled even if it has an
explicit setting of the ‘:height’ attribute.

   Similarly, scrolling the mouse wheel with the ‘Ctrl’ modifier
pressed, when the mouse pointer is above buffer text, will increase or
decrease the font size of the affected faces, depending on the direction
of the scrolling.

   The final key of these commands may be repeated without the leading
‘C-x’ and without the modifiers.  For instance, ‘C-x C-= C-= C-=’ and
‘C-x C-= = =’ increase the face height by three steps.  Each step scales
the text height by a factor of 1.2; to change this factor, customize the
variable ‘text-scale-mode-step’.  A numeric argument of 0 to the
‘text-scale-adjust’ command restores the default height, the same as
typing ‘C-x C-0’.

   Similarly, to change the sizes of the fonts globally, type ‘C-x
C-M-+’, ‘C-x C-M-=’, ‘C-x C-M--’ or ‘C-x C-M-0’, or scroll the mouse
wheel with both the ‘Ctrl’ and ‘Meta’ modifiers pressed.  To enable
frame resizing when the font size is changed globally, customize the
variable ‘global-text-scale-adjust-resizes-frames’ (*note Easy
Customization::).

   The commands ‘text-scale-increase’ and ‘text-scale-decrease’ increase
or decrease the size of the font in the current buffer, just like ‘C-x
C-+’ and ‘C-x C--’ respectively.  You may find it convenient to bind to
these commands, rather than ‘text-scale-adjust’.

   The command ‘text-scale-set’ scales the size of the font in the
current buffer to an absolute level specified by its prefix argument.

   The above commands automatically enable the minor mode
‘text-scale-mode’ if the current font scaling is other than 1, and
disable it otherwise.

   The command ‘text-scale-pinch’ increases or decreases the text scale
based on the distance between fingers on a touchpad when a pinch gesture
is performed by placing two fingers on a touchpad and moving them
towards or apart from each other.  This is only available on some
systems with supported hardware.

   The command ‘mouse-wheel-text-scale’ also changes the text scale.
Normally, it is run when you press <Ctrl> while moving the mouse wheel.
The text scale is increased when the wheel is moved downwards, and it is
decreased when the wheel is moved upwards.


File: emacs.info,  Node: Font Lock,  Next: Highlight Interactively,  Prev: Text Scale,  Up: Display

15.13 Font Lock mode
====================

Font Lock mode is a minor mode, always local to a particular buffer,
which assigns faces to (or “fontifies”) the text in the buffer.  Each
buffer’s major mode tells Font Lock mode which text to fontify; for
instance, programming language modes fontify syntactically relevant
constructs like comments, strings, and function names.

   Font Lock mode is enabled by default in major modes that support it.
To toggle it in the current buffer, type ‘M-x font-lock-mode’.  A
positive numeric argument unconditionally enables Font Lock mode, and a
negative or zero argument disables it.

   Type ‘M-x global-font-lock-mode’ to toggle Font Lock mode in all
buffers.  To impose this setting for future Emacs sessions, customize
the variable ‘global-font-lock-mode’ (*note Easy Customization::), or
add the following line to your init file:

     (global-font-lock-mode 0)

If you have disabled Global Font Lock mode, you can still enable Font
Lock for specific major modes by adding the function ‘font-lock-mode’ to
the mode hooks (*note Hooks::).  For example, to enable Font Lock mode
for editing C files, you can do this:

     (add-hook 'c-mode-hook 'font-lock-mode)

   Font Lock mode uses several specifically named faces to do its job,
including ‘font-lock-string-face’, ‘font-lock-comment-face’, and others.
The easiest way to find them all is to use ‘M-x customize-group <RET>
font-lock-faces <RET>’.  You can then use that customization buffer to
customize the appearance of these faces.  *Note Face Customization::.

   Fontifying very large buffers can take a long time.  To avoid large
delays when a file is visited, Emacs initially fontifies only the
visible portion of a buffer.  As you scroll through the buffer, each
portion that becomes visible is fontified as soon as it is displayed;
this type of Font Lock is called “Just-In-Time” (or “JIT”) Lock.  You
can control how JIT Lock behaves, including telling it to perform
fontification while idle, by customizing variables in the customization
group ‘jit-lock’.  *Note Specific Customization::.

   The information that major modes use for determining which parts of
buffer text to fontify and what faces to use can be based on several
different ways of analyzing the text:

   • Search for keywords and other textual patterns based on regular
     expressions (*note Regular Expression Search: Regexp Search.).

   • Find syntactically distinct parts of text based on built-in syntax
     tables (*note (elisp)Syntax Tables::).

   • Use syntax tree produced by a full-blown parser, via a
     special-purpose library, such as the tree-sitter library (*note
     (elisp)Parsing Program Source::), or an external program.

* Menu:

* Traditional Font Lock::  Font Lock based on regexps and syntax tables.
* Parser-based Font Lock:: Font Lock based on external parser.


File: emacs.info,  Node: Traditional Font Lock,  Next: Parser-based Font Lock,  Up: Font Lock

15.13.1 Traditional Font Lock
-----------------------------

“Traditional” methods of providing font-lock information are based on
regular-expression search and on syntactic analysis using syntax tables
built into Emacs.  This subsection describes the use and customization
of font-lock for major modes which use these traditional methods.

   You can control the amount of fontification applied by Font Lock mode
by customizing the variable ‘font-lock-maximum-decoration’, for major
modes that support this feature.  The value of this variable should be a
number (with 1 representing a minimal amount of fontification; some
modes support levels as high as 3); or ‘t’, meaning “as high as
possible” (the default).  To be effective for a given file buffer, the
customization of ‘font-lock-maximum-decoration’ should be done _before_
the file is visited; if you already have the file visited in a buffer
when you customize this variable, kill the buffer and visit the file
again after the customization.

   You can also specify different numbers for particular major modes;
for example, to use level 1 for C/C++ modes, and the default level
otherwise, use the value

     '((c-mode . 1) (c++-mode . 1)))

   Comment and string fontification (or “syntactic” fontification)
relies on analysis of the syntactic structure of the buffer text.  For
the sake of speed, some modes, including Lisp mode, rely on a special
convention: an open-parenthesis or open-brace in the leftmost column
always defines the beginning of a defun, and is thus always outside any
string or comment.  Therefore, you should avoid placing an
open-parenthesis or open-brace in the leftmost column, if it is inside a
string or comment.  *Note Left Margin Paren::, for details.

   Font Lock highlighting patterns already exist for most modes, but you
may want to fontify additional patterns.  You can use the function
‘font-lock-add-keywords’, to add your own highlighting patterns for a
particular mode.  For example, to highlight ‘FIXME:’ words in C
comments, use this:

     (add-hook 'c-mode-hook
               (lambda ()
                (font-lock-add-keywords nil
                 '(("\\<\\(FIXME\\):" 1
                    font-lock-warning-face t)))))

To remove keywords from the font-lock highlighting patterns, use the
function ‘font-lock-remove-keywords’.  *Note (elisp)Search-based
Fontification::.  Alternatively, you can selectively disable
highlighting due to some keywords by customizing the ‘font-lock-ignore’
option, *note (elisp)Customizing Keywords::.


File: emacs.info,  Node: Parser-based Font Lock,  Prev: Traditional Font Lock,  Up: Font Lock

15.13.2 Parser-based Font Lock
------------------------------

If your Emacs was built with the tree-sitter library, it can use the
results of parsing the buffer text by that library for the purposes of
fontification.  This is usually faster and more accurate than the
“traditional” methods described in the previous subsection, since the
tree-sitter library provides full-blown parsers for programming
languages and other kinds of formatted text which it supports.  Major
modes which utilize the tree-sitter library are named ‘FOO-ts-mode’,
with the ‘-ts-’ part indicating the use of the library.  This subsection
documents the Font Lock support based on the tree-sitter library.

   You can control the amount of fontification applied by Font Lock mode
of major modes based on tree-sitter by customizing the variable
‘treesit-font-lock-level’.  Its value is a number between 1 and 4:

Level 1
     This level usually fontifies only comments and function names in
     function definitions.
Level 2
     This level adds fontification of keywords, strings, and data types.
Level 3
     This is the default level; it adds fontification of assignments,
     numbers, etc.
Level 4
     This level adds everything else that can be fontified: operators,
     delimiters, brackets, other punctuation, function names in function
     calls, property look ups, variables, etc.

What exactly constitutes each of the syntactical categories mentioned
above depends on the major mode and the parser grammar used by
tree-sitter for the major-mode’s language.  However, in general the
categories follow the conventions of the programming language or the
file format supported by the major mode.  The buffer-local value of the
variable ‘treesit-font-lock-feature-list’ holds the fontification
features supported by a tree-sitter based major mode, where each
sub-list shows the features provided by the corresponding fontification
level.

   Once you change the value of ‘treesit-font-lock-level’ via
‘M-x customize-variable’ (*note Specific Customization::), it takes
effect immediately in all the existing buffers and for files you visit
in the future in the same session.


File: emacs.info,  Node: Highlight Interactively,  Next: Fringes,  Prev: Font Lock,  Up: Display

15.14 Interactive Highlighting
==============================

Highlight Changes mode is a minor mode that “highlights” the parts of
the buffer that were changed most recently, by giving that text a
different face.  To enable or disable Highlight Changes mode, use ‘M-x
highlight-changes-mode’.

   Hi Lock mode is a minor mode that highlights text that matches
regular expressions you specify.  For example, you can use it to
highlight all the references to a certain variable in a program source
file, highlight certain parts in a voluminous output of some program, or
highlight certain names in an article.  To enable or disable Hi Lock
mode, use the command ‘M-x hi-lock-mode’.  To enable Hi Lock mode for
all buffers, use ‘M-x global-hi-lock-mode’ or place
‘(global-hi-lock-mode 1)’ in your ‘.emacs’ file.

   Hi Lock mode works like Font Lock mode (*note Font Lock::), except
that you specify explicitly the regular expressions to highlight.  You
can control them with the following commands.  (The key bindings below
that begin with ‘C-x w’ are deprecated in favor of the global ‘M-s h’
bindings, and will be removed in some future Emacs version.)

‘M-s h r REGEXP <RET> FACE <RET>’
‘C-x w h REGEXP <RET> FACE <RET>’
     Highlight text that matches REGEXP using face FACE
     (‘highlight-regexp’).  The highlighting will remain as long as the
     buffer is loaded.  For example, to highlight all occurrences of the
     word “whim” using the default face (a yellow background), type ‘M-s
     h r whim <RET> <RET>’.  Any face can be used for highlighting, Hi
     Lock provides several of its own and these are pre-loaded into a
     list of default values.  While being prompted for a face use ‘M-n’
     and ‘M-p’ to cycle through them.  A prefix numeric argument limits
     the highlighting to the corresponding subexpression.

     Setting the option ‘hi-lock-auto-select-face’ to a non-‘nil’ value
     causes this command (and other Hi Lock commands that read faces) to
     automatically choose the next face from the default list without
     prompting.

     You can use this command multiple times, specifying various regular
     expressions to highlight in different ways.

‘M-s h u REGEXP <RET>’
‘C-x w r REGEXP <RET>’
     Unhighlight REGEXP (‘unhighlight-regexp’).  If you invoke this from
     the menu, you select the expression to unhighlight from a list.  If
     you invoke this from the keyboard, you use the minibuffer.  It will
     show the most recently added regular expression; use ‘M-n’ to show
     the next older expression and ‘M-p’ to select the next newer
     expression.  (You can also type the expression by hand, with
     completion.)  When the expression you want to unhighlight appears
     in the minibuffer, press ‘<RET>’ to exit the minibuffer and
     unhighlight it.

‘M-s h l REGEXP <RET> FACE <RET>’
‘C-x w l REGEXP <RET> FACE <RET>’
     Highlight entire lines containing a match for REGEXP, using face
     FACE (‘highlight-lines-matching-regexp’).

‘M-s h p PHRASE <RET> FACE <RET>’
‘C-x w p PHRASE <RET> FACE <RET>’
     Highlight matches of PHRASE, using face FACE (‘highlight-phrase’).
     PHRASE can be any regexp, but spaces will be replaced by matches to
     whitespace and initial lower-case letters will become case
     insensitive.

‘M-s h .’
‘C-x w .’
     Highlight the symbol found near point, using the next available
     face (‘highlight-symbol-at-point’).

‘M-s h w’
‘C-x w b’
     Insert all the current highlighting regexp/face pairs into the
     buffer at point, with comment delimiters to prevent them from
     changing your program.  (This key binding runs the
     ‘hi-lock-write-interactive-patterns’ command.)

     These patterns are extracted from the comments, if appropriate, if
     you invoke ‘M-x hi-lock-find-patterns’, or if you visit the file
     while Hi Lock mode is enabled (since that runs
     ‘hi-lock-find-patterns’).

‘M-s h f’
‘C-x w i’
     Extract regexp/face pairs from comments in the current buffer
     (‘hi-lock-find-patterns’).  Thus, you can enter patterns
     interactively with ‘highlight-regexp’, store them into the file
     with ‘hi-lock-write-interactive-patterns’, edit them (perhaps
     including different faces for different parenthesized parts of the
     match), and finally use this command (‘hi-lock-find-patterns’) to
     have Hi Lock highlight the edited patterns.

     The variable ‘hi-lock-file-patterns-policy’ controls whether Hi
     Lock mode should automatically extract and highlight patterns found
     in a file when it is visited.  Its value can be ‘nil’ (never
     highlight), ‘ask’ (query the user), or a function.  If it is a
     function, ‘hi-lock-find-patterns’ calls it with the patterns as
     argument; if the function returns non-‘nil’, the patterns are used.
     The default is ‘ask’.  Note that patterns are always highlighted if
     you call ‘hi-lock-find-patterns’ directly, regardless of the value
     of this variable.

     Also, ‘hi-lock-find-patterns’ does nothing if the current major
     mode’s symbol is a member of the list ‘hi-lock-exclude-modes’.


File: emacs.info,  Node: Fringes,  Next: Displaying Boundaries,  Prev: Highlight Interactively,  Up: Display

15.15 Window Fringes
====================

On graphical displays, each Emacs window normally has narrow “fringes”
on the left and right edges.  The fringes are used to display symbols
that provide information about the text in the window.  You can type
‘M-x fringe-mode’ to toggle display of the fringes or to modify their
width.  This command affects fringes in all frames; to modify fringes on
the selected frame only, use ‘M-x set-fringe-style’.  You can make your
changes to the fringes permanent by customizing the variable
‘fringe-mode’.

   The most common use of the fringes is to indicate a continuation line
(*note Continuation Lines::).  When one line of text is split into
multiple screen lines, the left fringe shows a curving arrow for each
screen line except the first, indicating that this is not the real
beginning.  The right fringe shows a curving arrow for each screen line
except the last, indicating that this is not the real end.  If the
line’s direction is right-to-left (*note Bidirectional Editing::), the
meanings of the curving arrows in the fringes are swapped.

   The fringes indicate line truncation (*note Line Truncation::) with
short horizontal arrows meaning there’s more text on this line which is
scrolled horizontally out of view.  Clicking the mouse on one of the
arrows scrolls the display horizontally in the direction of the arrow.

   The fringes can also indicate other things, such as buffer boundaries
(*note Displaying Boundaries::), unused lines near the end of the window
(*note indicate-empty-lines::), and where a program you are debugging is
executing (*note Debuggers::).

   The fringe is also used for drawing the cursor, if the current line
is exactly as wide as the window and point is at the end of the line.
To disable this, change the variable ‘overflow-newline-into-fringe’ to
‘nil’; this causes Emacs to continue or truncate lines that are exactly
as wide as the window.

   If you customize ‘fringe-mode’ to remove the fringes on one or both
sides of the window display, the features that display on the fringe are
not available.  Indicators of line continuation and truncation are an
exception: when fringes are not available, Emacs uses the leftmost and
rightmost character cells to indicate continuation and truncation with
special ASCII characters, see *note Continuation Lines::, and *note Line
Truncation::.  This reduces the width available for displaying text on
each line, because the character cells used for truncation and
continuation indicators are reserved for that purpose.  Since buffer
text can include bidirectional text, and thus both left-to-right and
right-to-left paragraphs (*note Bidirectional Editing::), removing only
one of the fringes still reserves two character cells, one on each side
of the window, for truncation and continuation indicators, because these
indicators are displayed on opposite sides of the window in
right-to-left paragraphs.


File: emacs.info,  Node: Displaying Boundaries,  Next: Useless Whitespace,  Prev: Fringes,  Up: Display

15.16 Displaying Boundaries
===========================

Emacs can display an indication of the ‘fill-column’ position (*note
Fill Commands::).  The fill-column indicator is a useful functionality
especially in ‘prog-mode’ and its descendants (*note Major Modes::) to
indicate the position of a specific column that has some special meaning
for formatting the source code of a program.  This assumes the buffer
uses a fixed-pitch font, where all the characters (with the possible
exception of double-width characters) have the same width on display.
If the buffer uses variable-pitch fonts, the fill-column indicators on
different lines might appear unaligned.

   To activate the fill-column indication display, use the minor modes
‘display-fill-column-indicator-mode’ and
‘global-display-fill-column-indicator-mode’, which enable the indicator
locally or globally, respectively.

   Alternatively, you can set the two buffer-local variables
‘display-fill-column-indicator’ and
‘display-fill-column-indicator-character’ to activate the indicator and
control the character used for the indication.  Note that both variables
must be non-‘nil’ for the indication to be displayed.  (Turning on the
minor mode sets both these variables.)

   There are 2 buffer local variables and a face to customize this mode:

‘display-fill-column-indicator-column’
     Specifies the column number where the indicator should be set.  It
     can take positive numerical values for the column, or the special
     value ‘t’, which means that the value of the variable ‘fill-column’
     will be used.

     Any other value disables the indicator.  The default value is ‘t’.

‘display-fill-column-indicator-character’
     Specifies the character used for the indicator.  This character can
     be any valid character including Unicode ones if the font supports
     them.  The value ‘nil’ disables the indicator.  When the mode is
     enabled through the functions ‘display-fill-column-indicator-mode’
     or ‘global-display-fill-column-indicator-mode’, they will use the
     character specified by this variable, if it is non-‘nil’; otherwise
     Emacs will use the character U+2502 BOX DRAWINGS LIGHT VERTICAL,
     falling back to ‘|’ if U+2502 cannot be displayed.

‘fill-column-indicator’
     Specifies the face used to display the indicator.  It inherits its
     default values from the face ‘shadow’, but without background
     color.  To change the indicator color, you need only set the
     foreground color of this face.

   On graphical displays, Emacs can indicate the buffer boundaries in
the fringes.  If you enable this feature, the first line and the last
line are marked with angle images in the fringes.  This can be combined
with up and down arrow images which say whether it is possible to scroll
the window.

   The buffer-local variable ‘indicate-buffer-boundaries’ controls how
the buffer boundaries and window scrolling is indicated in the fringes.
If the value is ‘left’ or ‘right’, both angle and arrow bitmaps are
displayed in the left or right fringe, respectively.

   If value is an alist (*note (elisp)Association Lists::), each element
‘(INDICATOR . POSITION)’ specifies the position of one of the
indicators.  The INDICATOR must be one of ‘top’, ‘bottom’, ‘up’, ‘down’,
or ‘t’ which specifies the default position for the indicators not
present in the alist.  The POSITION is one of ‘left’, ‘right’, or ‘nil’
which specifies not to show this indicator.

   For example, ‘((top . left) (t . right))’ places the top angle bitmap
in left fringe, the bottom angle bitmap in right fringe, and both arrow
bitmaps in right fringe.  To show just the angle bitmaps in the left
fringe, but no arrow bitmaps, use ‘((top . left) (bottom . left))’.


File: emacs.info,  Node: Useless Whitespace,  Next: Selective Display,  Prev: Displaying Boundaries,  Up: Display

15.17 Useless Whitespace
========================

It is easy to leave unnecessary spaces at the end of a line, or empty
lines at the end of a buffer, without realizing it.  In most cases, this
“trailing whitespace” has no effect, but sometimes it can be a nuisance.

   You can make trailing whitespace at the end of a line visible by
setting the buffer-local variable ‘show-trailing-whitespace’ to ‘t’.
Then Emacs displays trailing whitespace, using the face
‘trailing-whitespace’.

   This feature does not apply when point is at the end of the line
containing the whitespace.  Strictly speaking, that is trailing
whitespace nonetheless, but displaying it specially in that case looks
ugly while you are typing in new text.  In this special case, the
location of point is enough to show you that the spaces are present.

   Type ‘M-x delete-trailing-whitespace’ to delete all trailing
whitespace.  This command deletes all extra spaces at the end of each
line in the buffer, and all empty lines at the end of the buffer; to
ignore the latter, change the variable ‘delete-trailing-lines’ to ‘nil’.
If the region is active, the command instead deletes extra spaces at the
end of each line in the region.

   On graphical displays, Emacs can indicate unused lines at the end of
the window with a small image in the left fringe (*note Fringes::).  The
image appears for screen lines that do not correspond to any buffer
text, so blank lines at the end of the buffer stand out because they
lack this image.  To enable this feature, set the buffer-local variable
‘indicate-empty-lines’ to a non-‘nil’ value.  You can enable or disable
this feature for all new buffers by setting the default value of this
variable, e.g., ‘(setq-default indicate-empty-lines t)’.

   Whitespace mode is a buffer-local minor mode that lets you visualize
many kinds of whitespace in the buffer, by either drawing the whitespace
characters with a special face or displaying them as special glyphs.  To
toggle this mode, type ‘M-x whitespace-mode’.  The kinds of whitespace
visualized are determined by the list variable ‘whitespace-style’.
Individual elements in that list can be toggled on or off in the current
buffer by typing ‘M-x whitespace-toggle-options’.  Here is a partial
list of possible elements (see the variable’s documentation for the full
list):

‘face’
     Enable all visualizations which use special faces.  This element
     has a special meaning: if it is absent from the list, none of the
     other visualizations take effect except ‘space-mark’, ‘tab-mark’,
     and ‘newline-mark’.

‘trailing’
     Highlight trailing whitespace.

‘tabs’
     Highlight tab characters.

‘spaces’
     Highlight space and non-breaking space characters.

‘lines’
     Highlight lines longer than 80 columns.  To change the column
     limit, customize the variable ‘whitespace-line-column’.

‘newline’
     Highlight newlines.

‘missing-newline-at-eof’
     Highlight the final character if the buffer doesn’t end with a
     newline character.

‘empty’
     Highlight empty lines at the beginning and/or end of the buffer.

‘big-indent’
     Highlight too-deep indentation.  By default any sequence of at
     least 4 consecutive tab characters or 32 consecutive space
     characters is highlighted.  To change that, customize the regular
     expression ‘whitespace-big-indent-regexp’.

‘space-mark’
     Draw space and non-breaking characters with a special glyph.

‘tab-mark’
     Draw tab characters with a special glyph.

‘newline-mark’
     Draw newline characters with a special glyph.

   Global Whitespace mode is a global minor mode that lets you visualize
whitespace in all buffers.  To toggle individual features, use ‘M-x
global-whitespace-toggle-options’.


File: emacs.info,  Node: Selective Display,  Next: Optional Mode Line,  Prev: Useless Whitespace,  Up: Display

15.18 Selective Display
=======================

Emacs has the ability to hide lines indented more than a given number of
columns.  You can use this to get an overview of a part of a program.

   To hide lines in the current buffer, type ‘C-x $’
(‘set-selective-display’) with a numeric argument N.  Then lines with at
least N columns of indentation disappear from the screen.  The only
indication of their presence is that three dots (‘...’) appear at the
end of each visible line that is followed by one or more hidden ones.

   The commands ‘C-n’ and ‘C-p’ move across the hidden lines as if they
were not there.

   The hidden lines are still present in the buffer, and most editing
commands see them as usual, so you may find point in the middle of the
hidden text.  When this happens, the cursor appears at the end of the
previous line, after the three dots.  If point is at the end of the
visible line, before the newline that ends it, the cursor appears before
the three dots.

   To make all lines visible again, type ‘C-x $’ with no argument.

   If you set the variable ‘selective-display-ellipses’ to ‘nil’, the
three dots do not appear at the end of a line that precedes hidden
lines.  Then there is no visible indication of the hidden lines.  This
variable becomes local automatically when set.

   See also *note Outline Mode:: for another way to hide part of the
text in a buffer.


File: emacs.info,  Node: Optional Mode Line,  Next: Text Display,  Prev: Selective Display,  Up: Display

15.19 Optional Mode Line Features
=================================

The buffer percentage POS indicates the percentage of the buffer above
the top of the window.  You can additionally display the size of the
buffer by typing ‘M-x size-indication-mode’ to turn on Size Indication
mode.  The size will be displayed immediately following the buffer
percentage like this:

     POS of SIZE

Here SIZE is the human readable representation of the number of
characters in the buffer, which means that ‘k’ for 10^3, ‘M’ for 10^6,
‘G’ for 10^9, etc., are used to abbreviate.

   The current line number of point appears in the mode line when Line
Number mode is enabled.  Use the command ‘M-x line-number-mode’ to turn
this mode on and off; normally it is on.  The line number appears after
the buffer percentage POS, with the letter ‘L’ to indicate what it is.

   Similarly, you can display the current column number by turning on
Column Number mode with ‘M-x column-number-mode’.  The column number is
indicated by the letter ‘C’.  However, when both of these modes are
enabled, the line and column numbers are displayed in parentheses, the
line number first, rather than with ‘L’ and ‘C’.  For example:
‘(561,2)’.  *Note Minor Modes::, for more information about minor modes
and about how to use these commands.

   In Column Number mode, the displayed column number counts from zero
starting at the left margin of the window.  If you would prefer for the
displayed column number to count from one, you may set
‘column-number-indicator-zero-based’ to ‘nil’.

   If you have narrowed the buffer (*note Narrowing::), the displayed
line number is relative to the accessible portion of the buffer.  Thus,
it isn’t suitable as an argument to ‘goto-line’.  (The command
‘what-line’ shows the line number relative to the whole file.)  You can
use ‘goto-line-relative’ command to move point to the line relative to
the accessible portion of the narrowed buffer.

   If the buffer is very large (larger than the value of
‘line-number-display-limit’), Emacs won’t compute the line number,
because that would be too slow; therefore, the line number won’t appear
on the mode-line.  To remove this limit, set ‘line-number-display-limit’
to ‘nil’.

   Line-number computation can also be slow if the lines in the buffer
are too long.  For this reason, Emacs doesn’t display line numbers if
the average width, in characters, of lines near point is larger than the
value of ‘line-number-display-limit-width’.  The default value is 200
characters.

   Emacs can optionally display the time and system load in all mode
lines.  To enable this feature, type ‘M-x display-time’ or customize the
option ‘display-time-mode’.  The information added to the mode line
looks like this:

     HH:MMPM L.LL

Here HH and MM are the hour and minute, followed always by ‘AM’ or ‘PM’.
L.LL is the average number, collected for the last few minutes, of
processes in the whole system that were either running or ready to run
(i.e., were waiting for an available processor).  (Some fields may be
missing if your operating system cannot support them.)  If you prefer
time display in 24-hour format, set the variable
‘display-time-24hr-format’ to ‘t’.

   The word ‘Mail’ appears after the load level if there is mail for you
that you have not read yet.  On graphical displays, you can use an icon
instead of ‘Mail’ by customizing ‘display-time-use-mail-icon’; this may
save some space on the mode line.  You can customize
‘display-time-mail-face’ to make the mail indicator prominent.  Use
‘display-time-mail-file’ to specify the mail file to check, or set
‘display-time-mail-directory’ to specify the directory to check for
incoming mail (any nonempty regular file in the directory is considered
to be newly arrived mail).

   When running Emacs on a laptop computer, you can display the battery
charge on the mode-line, by using the command ‘display-battery-mode’ or
customizing the variable ‘display-battery-mode’.  The variable
‘battery-mode-line-format’ determines the way the battery charge is
displayed; the exact mode-line message depends on the operating system,
and it usually shows the current battery charge as a percentage of the
total charge.  The functions in ‘battery-update-functions’ are run after
updating the mode line, and can be used to trigger actions based on the
battery status.

   On graphical displays, the mode line is drawn as a 3D box.  If you
don’t like this effect, you can disable it by customizing the
‘mode-line’ face and setting its ‘box’ attribute to ‘nil’.  *Note Face
Customization::.

   By default, the mode line of nonselected windows is displayed in a
different face, called ‘mode-line-inactive’.  Only the selected window
is displayed in the ‘mode-line’ face.  This helps show which window is
selected.  When the minibuffer is selected, since it has no mode line,
the window from which you activated the minibuffer has its mode line
displayed using ‘mode-line’; as a result, ordinary entry to the
minibuffer does not change any mode lines.

   You can disable use of ‘mode-line-inactive’ by setting variable
‘mode-line-in-non-selected-windows’ to ‘nil’; then all mode lines are
displayed in the ‘mode-line’ face.

   You can customize the mode line display for each of the end-of-line
formats by setting each of the variables ‘eol-mnemonic-unix’,
‘eol-mnemonic-dos’, ‘eol-mnemonic-mac’, and ‘eol-mnemonic-undecided’ to
the strings you prefer.


File: emacs.info,  Node: Text Display,  Next: Cursor Display,  Prev: Optional Mode Line,  Up: Display

15.20 How Text Is Displayed
===========================

Most characters are “printing characters”: when they appear in a buffer,
they are displayed literally on the screen.  Printing characters include
ASCII numbers, letters, and punctuation characters, as well as many
non-ASCII characters.

   The ASCII character set contains non-printing “control characters”.
Two of these are displayed specially: the newline character (Unicode
code point U+000A) is displayed by starting a new line, while the tab
character (U+0009) is displayed as a space that extends to the next tab
stop column (normally every 8 columns).  The number of spaces per tab is
controlled by the buffer-local variable ‘tab-width’, which must have an
integer value between 1 and 1000, inclusive.  Note that the way the tab
character in the buffer is displayed has nothing to do with the
definition of <TAB> as a command.

   Other ASCII control characters, whose codes are below U+0020 (octal
40, decimal 32), are displayed as a caret (‘^’) followed by the
non-control version of the character, with the ‘escape-glyph’ face.  For
instance, the ‘control-A’ character, U+0001, is displayed as ‘^A’.

   The raw bytes with codes U+0080 (octal 200) through U+009F (octal
237) are displayed as “octal escape sequences”, with the ‘escape-glyph’
face.  For instance, character code U+0098 (octal 230) is displayed as
‘\230’.  If you change the buffer-local variable ‘ctl-arrow’ to ‘nil’,
the ASCII control characters are also displayed as octal escape
sequences instead of caret escape sequences.  (You can also request that
raw bytes be shown in hex, *note display-raw-bytes-as-hex: Display
Custom.)

   Some non-ASCII characters have the same appearance as an ASCII space
or hyphen (minus) character.  Such characters can cause problems if they
are entered into a buffer without your realization, e.g., by yanking;
for instance, source code compilers typically do not treat non-ASCII
spaces as whitespace characters.  To deal with this problem, Emacs
displays such characters specially: it displays U+00A0 NO-BREAK SPACE
and other characters from the Unicode horizontal space class with the
‘nobreak-space’ face, and it displays U+00AD SOFT HYPHEN, U+2010 HYPHEN,
and U+2011 NON-BREAKING HYPHEN with the ‘nobreak-hyphen’ face.  To
disable this, change the variable ‘nobreak-char-display’ to ‘nil’.  If
you give this variable a non-‘nil’ and non-‘t’ value, Emacs instead
displays such characters as a highlighted backslash followed by a space
or hyphen.

   You can customize the way any particular character code is displayed
by means of a display table.  *Note Display Tables: (elisp)Display
Tables.

   On graphical displays, some characters may have no glyphs in any of
the fonts available to Emacs.  These “glyphless characters” are normally
displayed as boxes containing the hexadecimal character code.
Similarly, on text terminals, characters that cannot be displayed using
the terminal encoding (*note Terminal Coding::) are normally displayed
as question signs.  You can control the display method by customizing
the variable ‘glyphless-char-display-control’.  You can also customize
the ‘glyphless-char’ face to make these characters more prominent on
display.  *Note Glyphless Character Display: (elisp)Glyphless Chars, for
details.

   The ‘glyphless-display-mode’ minor mode can be used to toggle the
display of glyphless characters in the current buffer.  The glyphless
characters will be displayed as boxes with acronyms of their names
inside.

   Emacs tries to determine if the curved quotes ‘ and ’ can be
displayed on the current display.  By default, if this seems to be so,
then Emacs will translate the ASCII quotes (‘`’ and ‘'’), when they
appear in messages and help texts, to these curved quotes.  You can
influence or inhibit this translation by customizing the user option
‘text-quoting-style’ (*note (elisp)Keys in Documentation::).

   If the curved quotes ‘, ’, “, and ” are known to look just like ASCII
characters, they are shown with the ‘homoglyph’ face.  Curved quotes
that are known not to be displayable are shown as their ASCII
approximations ‘`’, ‘'’, and ‘"’ with the ‘homoglyph’ face.


File: emacs.info,  Node: Cursor Display,  Next: Line Truncation,  Prev: Text Display,  Up: Display

15.21 Displaying the Cursor
===========================

On a text terminal, the cursor’s appearance is controlled by the
terminal, largely out of the control of Emacs.  Some terminals offer two
different cursors: a visible static cursor, and a very visible blinking
cursor.  By default, Emacs uses the very visible cursor, and switches to
it when you start or resume Emacs.  If the variable ‘visible-cursor’ is
‘nil’ when Emacs starts or resumes, it uses the normal cursor.

   On a graphical display, many more properties of the text cursor can
be altered.  To customize its color, change the ‘:background’ attribute
of the face named ‘cursor’ (*note Face Customization::).  (The other
attributes of this face have no effect; the text shown under the cursor
is drawn using the frame’s background color.)  To change its shape,
customize the buffer-local variable ‘cursor-type’; possible values are
‘box’ (the default), ‘(box . SIZE)’ (box cursor becoming a hollow box
under masked images larger than SIZE pixels in either dimension),
‘hollow’ (a hollow box), ‘bar’ (a vertical bar), ‘(bar . N)’ (a vertical
bar N pixels wide), ‘hbar’ (a horizontal bar), ‘(hbar . N)’ (a
horizontal bar N pixels tall), or ‘nil’ (no cursor at all).

   By default, the cursor stops blinking after 10 blinks, if Emacs does
not get any input during that time; any input event restarts the count.
You can customize the variable ‘blink-cursor-blinks’ to control that:
its value says how many times to blink without input before stopping.
Setting that variable to a zero or negative value will make the cursor
blink forever.  To disable cursor blinking altogether, change the
variable ‘blink-cursor-mode’ to ‘nil’ (*note Easy Customization::), or
add the line

       (blink-cursor-mode 0)

to your init file.  Alternatively, you can change how the cursor looks
when it blinks off by customizing the list variable
‘blink-cursor-alist’.  Each element in the list should have the form
‘(ON-TYPE . OFF-TYPE)’; this means that if the cursor is displayed as
ON-TYPE when it blinks on (where ON-TYPE is one of the cursor types
described above), then it is displayed as OFF-TYPE when it blinks off.

   Some characters, such as tab characters, are extra wide.  When the
cursor is positioned over such a character, it is normally drawn with
the default character width.  You can make the cursor stretch to cover
wide characters, by changing the variable ‘x-stretch-cursor’ to a
non-‘nil’ value.

   The cursor normally appears in non-selected windows as a non-blinking
hollow box.  (For a bar cursor, it instead appears as a thinner bar.)
To turn off cursors in non-selected windows, change the variable
‘cursor-in-non-selected-windows’ to ‘nil’.

   To make the cursor even more visible, you can use HL Line mode, a
minor mode that highlights the line containing point.  Use ‘M-x
hl-line-mode’ to enable or disable it in the current buffer.  ‘M-x
global-hl-line-mode’ enables or disables the same mode globally.


File: emacs.info,  Node: Line Truncation,  Next: Visual Line Mode,  Prev: Cursor Display,  Up: Display

15.22 Line Truncation
=====================

As an alternative to continuation (*note Continuation Lines::), Emacs
can display long lines by “truncation”.  This means that all the
characters that do not fit in the width of the screen or window do not
appear at all.  On graphical displays, a small straight arrow in the
fringe indicates truncation at either end of the line.  On text
terminals, this is indicated with ‘$’ signs in the rightmost and/or
leftmost columns.

   Horizontal scrolling automatically causes line truncation (*note
Horizontal Scrolling::).  You can explicitly enable line truncation for
a particular buffer with the command ‘C-x x t’
(‘toggle-truncate-lines’).  This works by locally changing the variable
‘truncate-lines’.  If that variable is non-‘nil’, long lines are
truncated; if it is ‘nil’, they are continued onto multiple screen
lines.  Setting the variable ‘truncate-lines’ in any way makes it local
to the current buffer; until that time, the default value, which is
normally ‘nil’, is in effect.

   Since line truncation and word wrap (described in the next section)
are contradictory, ‘toggle-truncate-lines’ disables word wrap when it
turns on line truncation.

   If a split window becomes too narrow, Emacs may automatically enable
line truncation.  *Note Split Window::, for the variable
‘truncate-partial-width-windows’ which controls this.


File: emacs.info,  Node: Visual Line Mode,  Next: Display Custom,  Prev: Line Truncation,  Up: Display

15.23 Visual Line Mode
======================

Another alternative to ordinary line continuation is to use “word wrap”.
Here, each long logical line is divided into two or more screen lines,
like in ordinary line continuation.  However, Emacs attempts to wrap the
line at word boundaries near the right window edge.  (If the line’s
direction is right-to-left, it is wrapped at the left window edge
instead.)  This makes the text easier to read, as wrapping does not
occur in the middle of words.

   Word wrap is enabled by Visual Line mode, an optional minor mode.  To
turn on Visual Line mode in the current buffer, type ‘M-x
visual-line-mode’; repeating this command turns it off.  You can also
turn on Visual Line mode using the menu bar: in the Options menu, select
the ‘Line Wrapping in this Buffer’ submenu, followed by the ‘Word Wrap
(Visual Line mode)’ menu item.  While Visual Line mode is enabled, the
mode line shows the string ‘wrap’ in the mode display.  The command ‘M-x
global-visual-line-mode’ toggles Visual Line mode in all buffers.

   Since word wrap and line truncation (described in the previous
section) are contradictory, turning on ‘visual-line-mode’ disables line
truncation.

   In Visual Line mode, some editing commands work on screen lines
instead of logical lines: ‘C-a’ (‘beginning-of-visual-line’) moves to
the beginning of the screen line, ‘C-e’ (‘end-of-visual-line’) moves to
the end of the screen line, and ‘C-k’ (‘kill-visual-line’) kills text to
the end of the screen line.

   To move by logical lines, use the commands ‘M-x next-logical-line’
and ‘M-x previous-logical-line’.  These move point to the next logical
line and the previous logical line respectively, regardless of whether
Visual Line mode is enabled.  If you use these commands frequently, it
may be convenient to assign key bindings to them.  *Note Init
Rebinding::.

   By default, word-wrapped lines do not display fringe indicators.
Visual Line mode is often used to edit files that contain many long
logical lines, so having a fringe indicator for each wrapped line would
be visually distracting.  You can change this by customizing the
variable ‘visual-line-fringe-indicators’.

   By default, Emacs only breaks lines after whitespace characters like
<SPC> and <TAB>, but does not break after whitespace characters like <EN
QUAD>.  Emacs provides a minor mode called ‘word-wrap-whitespace-mode’
that switches on word wrapping in the current mode, and sets up which
characters to wrap lines on based on the
‘word-wrap-whitespace-characters’ user option.  There’s also a
globalized version of that mode called
‘global-word-wrap-whitespace-mode’.

   Only breaking after whitespace character produces incorrect results
when CJK and Latin text are mixed together (because CJK characters don’t
use whitespace to separate words).  You can customize the option
‘word-wrap-by-category’ to allow Emacs to break lines after any
character with ‘|’ category (*note (elisp)Categories::), which provides
better support for CJK characters.  Also, if this variable is set using
Customize, Emacs automatically loads ‘kinsoku.el’.  When ‘kinsoku.el’ is
loaded, Emacs respects kinsoku rules when breaking lines.  That means
characters with the ‘>’ category don’t appear at the beginning of a line
(e.g., U+FF0C FULLWIDTH COMMA), and characters with the ‘<’ category
don’t appear at the end of a line (e.g., U+300A LEFT DOUBLE ANGLE
BRACKET).  You can view the category set of a character using the
commands ‘char-category-set’ and ‘category-set-mnemonics’, or by typing
‘C-u C-x =’ with point on the character and looking at the “category”
section in the report.  You can add categories to a character using the
command ‘modify-category-entry’.


File: emacs.info,  Node: Display Custom,  Prev: Visual Line Mode,  Up: Display

15.24 Customization of Display
==============================

This section describes variables that control miscellaneous aspects of
the appearance of the Emacs screen.  Beginning users can skip it.

   If you want to have Emacs display line numbers for every line in the
buffer, customize the buffer-local variable ‘display-line-numbers’; it
is ‘nil’ by default.  This variable can have several different values to
support various modes of line-number display:

‘t’
     Display (an absolute) line number before each non-continuation
     screen line that displays buffer text.  If the line is a
     continuation line, or if the entire screen line displays a display
     or an overlay string, that line will not be numbered.

‘relative’
     Display relative line numbers before non-continuation lines which
     show buffer text.  The line numbers are relative to the line
     showing point, so the numbers grow both up and down as lines become
     farther from the current line.

‘visual’
     This value causes Emacs to count lines visually: only lines
     actually shown on the display will be counted (disregarding any
     lines in invisible parts of text), and lines which wrap to consume
     more than one screen line will be numbered that many times.  The
     displayed numbers are relative, as with ‘relative’ value above.
     This is handy in modes that fold text, such as Outline mode (*note
     Outline Mode::), and when you need to move by exact number of
     screen lines.

anything else
     Any other non-‘nil’ value is treated as ‘t’.

   The command ‘M-x display-line-numbers-mode’ provides a convenient way
to turn on display of line numbers.  This mode has a globalized variant,
‘global-display-line-numbers-mode’.  The user option
‘display-line-numbers-type’ controls which sub-mode of line-number
display, described above, these modes will activate.

Note that line numbers are not displayed in the minibuffer and in the
tooltips, even if you turn on ‘display-line-numbers-mode’ globally.

   When Emacs displays relative line numbers, you can control the number
displayed before the current line, the line showing point.  By default,
Emacs displays the absolute number of the current line there, even
though all the other line numbers are relative.  If you customize the
variable ‘display-line-numbers-current-absolute’ to a ‘nil’ value, the
number displayed for the current line will be zero.  This is handy if
you don’t care about the number of the current line, and want to leave
more horizontal space for text in large buffers.

   In a narrowed buffer (*note Narrowing::) lines are normally numbered
starting at the beginning of the narrowing.  However, if you customize
the variable ‘display-line-numbers-widen’ to a non-‘nil’ value, line
numbers will disregard any narrowing and will start at the first
character of the buffer.

   If the value of ‘display-line-numbers-offset’ is non-zero, it is
added to each absolute line number, and lines are counted from the
beginning of the buffer, as if ‘display-line-numbers-widen’ were
non-‘nil’.  It has no effect when set to zero, or when line numbers are
not absolute.

   In selective display mode (*note Selective Display::), and other
modes that hide many lines from display (such as Outline and Org modes),
you may wish to customize the variables
‘display-line-numbers-width-start’ and ‘display-line-numbers-grow-only’,
or set ‘display-line-numbers-width’ to a large enough value, to avoid
occasional miscalculations of space reserved for the line numbers.

   The line numbers are displayed in a special face ‘line-number’.  The
current line number is displayed in a different face,
‘line-number-current-line’, so you can make the current line’s number
have a distinct appearance, which will help locating the line showing
point.  Additional faces ‘line-number-major-tick’ and
‘line-number-minor-tick’ can be used to highlight the line numbers of
lines which are a multiple of certain numbers.  Customize
‘display-line-numbers-major-tick’ and ‘display-line-numbers-minor-tick’
respectively to set those numbers.

   If the variable ‘visible-bell’ is non-‘nil’, Emacs attempts to make
the whole screen blink when it would normally make an audible bell
sound.  This variable has no effect if your terminal does not have a way
to make the screen blink.

   The variable ‘echo-keystrokes’ controls the echoing of
multi-character keys; its value is the number of seconds of pause
required to cause echoing to start, or zero, meaning don’t echo at all.
The value takes effect when there is something to echo.  *Note Echo
Area::.

   On graphical displays, Emacs displays the mouse pointer as an
hourglass if Emacs is busy.  To disable this feature, set the variable
‘display-hourglass’ to ‘nil’.  The variable ‘hourglass-delay’ determines
the number of seconds of busy time before the hourglass is shown; the
default is 1.

   If the mouse pointer lies inside an Emacs frame, Emacs makes it
invisible each time you type a character to insert text, to prevent it
from obscuring the text.  (To be precise, the hiding occurs when you
type a self-inserting character.  *Note Inserting Text::.)  Moving the
mouse pointer makes it visible again.  To disable this feature, set the
variable ‘make-pointer-invisible’ to ‘nil’.

   On graphical displays, the variable ‘underline-minimum-offset’
determines the minimum distance between the baseline and underline, in
pixels, for underlined text.  By default, the value is 1; increasing it
may improve the legibility of underlined text for certain fonts.
(However, Emacs will never draw the underline below the current line
area.)  The variable ‘x-underline-at-descent-line’ determines how to
draw underlined text.  The default is ‘nil’, which means to draw it at
the baseline level of the font; if you change it to ‘t’, Emacs draws the
underline at the same height as the font’s descent line.  (If
non-default line spacing was specified for the underlined text, see
*note (elisp)Line Height::, Emacs draws the underline below the
additional spacing.)

   The variable ‘overline-margin’ specifies the vertical position of an
overline above the text, including the height of the overline itself, in
pixels; the default is 2.

   On some text terminals, bold face and inverse video together result
in text that is hard to read.  Call the function
‘tty-suppress-bold-inverse-default-colors’ with a non-‘nil’ argument to
suppress the effect of bold-face in this case.

   Raw bytes are displayed in octal format by default, for example a
byte with a decimal value of 128 is displayed as ‘\200’.  To change
display to the hexadecimal format of ‘\x80’, set the variable
‘display-raw-bytes-as-hex’ to ‘t’.  Care may be needed when interpreting
a raw byte when copying text from a terminal containing an Emacs
session, or when a terminal’s ‘escape-glyph’ face looks like the default
face.  For example, by default Emacs displays the four characters ‘\’,
‘2’, ‘0’, ‘0’ with the same characters it displays a byte with decimal
value 128.  The problem can be worse with hex displays, where the raw
byte 128 followed by the character ‘7’ is displayed as ‘\x807’, which
Emacs Lisp reads as the single character U+0807 SAMARITAN LETTER IT;
this confusion does not occur with the corresponding octal display
‘\2007’ because octal escapes contain at most three digits.


File: emacs.info,  Node: Search,  Next: Fixit,  Prev: Display,  Up: Top

# /. 16 Searching and Replacement
********************************

Like other editors, Emacs has commands to search for occurrences of a
string.  Emacs also has commands to replace occurrences of a string with
a different string.  There are also commands that do the same thing, but
search for patterns instead of fixed strings.

   You can also search multiple files under the control of ‘xref’ (*note
Identifier Search::) or through the Dired ‘A’ command (*note Operating
on Files::), or ask the ‘grep’ program to do it (*note Grep
Searching::).

* Menu:

* Incremental Search::        Search happens as you type the string.
* Nonincremental Search::     Specify entire string and then search.
* Word Search::               Search for sequence of words.
* Symbol Search::             Search for a source code symbol.
* Regexp Search::             Search for match for a regexp.
* Regexps::                   Syntax of regular expressions.
* Regexp Backslash::          Regular expression constructs starting with ‘\’.
* Regexp Example::            A complex regular expression explained.
* Lax Search::                Search ignores some distinctions among
                                similar characters, like letter-case.
* Replace::                   Search, and replace some or all matches.
* Other Repeating Search::    Operating on all matches for some regexp.
* Search Customizations::     Various search customizations.


File: emacs.info,  Node: Incremental Search,  Next: Nonincremental Search,  Up: Search

16.1 Incremental Search
=======================

The principal search command in Emacs is “incremental”: it begins
searching as soon as you type the first character of the search string.
As you type in the search string, Emacs shows you where the string (as
you have typed it so far) would be found.  When you have typed enough
characters to identify the place you want, you can stop.  Depending on
what you plan to do next, you may or may not need to terminate the
search explicitly with <RET>.

‘C-s’
     Incremental search forward (‘isearch-forward’).
‘C-r’
     Incremental search backward (‘isearch-backward’).

   You can also invoke incremental search from the menu bar’s
‘Edit->Search’ menu.

* Menu:

* Basic Isearch::        Basic incremental search commands.
* Repeat Isearch::       Searching for the same string again.
* Isearch Yank::         Commands that grab text into the search string
                           or else edit the search string.
* Error in Isearch::     When your string is not found.
* Special Isearch::      Special input in incremental search.
* Not Exiting Isearch::  Prefix argument and scrolling commands.
* Isearch Minibuffer::   Incremental search of the minibuffer history.


File: emacs.info,  Node: Basic Isearch,  Next: Repeat Isearch,  Up: Incremental Search

16.1.1 Basics of Incremental Search
-----------------------------------

‘C-s’
     Begin incremental search (‘isearch-forward’).
‘C-r’
     Begin reverse incremental search (‘isearch-backward’).

   ‘C-s’ (‘isearch-forward’) starts a forward incremental search.  It
reads characters from the keyboard, and moves point just past the end of
the next occurrence of those characters in the buffer.

   For instance, if you type ‘C-s’ and then ‘F’, that puts the cursor
after the first ‘F’ that occurs in the buffer after the starting point.
If you then type ‘O’, the cursor moves to just after the first ‘FO’; the
‘F’ in that ‘FO’ might not be the first ‘F’ previously found.  After
another ‘O’, the cursor moves to just after the first ‘FOO’.

   At each step, Emacs highlights the “current match”—the buffer text
that matches the search string—using the ‘isearch’ face (*note Faces::).
*Note Search Customizations::, for various options that customize this
highlighting.  The current search string is also displayed in the echo
area.

   If you make a mistake typing the search string, type <DEL>
(‘isearch-delete-char’).  Each <DEL> cancels the last input item entered
during the search.  Emacs records a new “input item” whenever you type a
command that changes the search string, the position of point, the
success or failure of the search, the direction of the search, the
position of the other end of the current search result, or the
“wrappedness” of the search.  *Note Error in Isearch::, for more about
dealing with unsuccessful search.

   When you are satisfied with the place you have reached, type <RET>
(‘isearch-exit’).  This stops searching, leaving the cursor where the
search brought it.  Also, any command not specially meaningful in
searches stops the searching and is then executed.  Thus, typing ‘C-a’
exits the search and then moves to the beginning of the line; typing one
of the arrow keys exits the search and performs the respective movement
command; etc.  <RET> is necessary only if the next command you want to
type is a printing character, <DEL>, <RET>, or another character that is
special within searches (‘C-q’, ‘C-w’, ‘C-r’, ‘C-s’, ‘C-y’, ‘M-y’,
‘M-r’, ‘M-c’, ‘M-e’, and some others described below).  You can
fine-tune the commands that exit the search; see *note Not Exiting
Isearch::.

   As a special exception, entering <RET> when the search string is
empty launches nonincremental search (*note Nonincremental Search::).
(This can be customized; see *note Search Customizations::.)

   To abandon the search and return to the place where you started, type
‘<ESC> <ESC> <ESC>’ (‘isearch-cancel’) or ‘C-g C-g’ (‘isearch-abort’).

   When you exit the incremental search, it adds the original value of
point to the mark ring, without activating the mark; you can thus use
‘C-u C-<SPC>’ or ‘C-x C-x’ to return to where you were before beginning
the search.  *Note Mark Ring::.  (Emacs only does this if the mark was
not already active; if the mark was active when you started the search,
both ‘C-u C-<SPC>’ and ‘C-x C-x’ will go to the mark.)

   To search backwards, use ‘C-r’ (‘isearch-backward’) instead of ‘C-s’
to start the search.  A backward search finds matches that end before
the starting point, just as a forward search finds matches that begin
after it.


File: emacs.info,  Node: Repeat Isearch,  Next: Isearch Yank,  Prev: Basic Isearch,  Up: Incremental Search

16.1.2 Repeating Incremental Search
-----------------------------------

Suppose you search forward for ‘FOO’ and find a match, but not the one
you expected to find: the ‘FOO’ you were aiming for occurs later in the
buffer.  In this event, type another ‘C-s’ (‘isearch-repeat-forward’) to
move to the next occurrence of the search string, or ‘C-r’
(‘isearch-repeat-backward’) to move to the previous occurrence.  You can
repeat these commands any number of times.  Alternatively, you can
supply a numeric prefix argument of N to ‘C-s’ and ‘C-r’ to find the Nth
next or previous occurrence.  If you overshoot, you can cancel some
‘C-s’ commands with <DEL>.  Similarly, each ‘C-r’
(‘isearch-repeat-backward’) in a backward incremental search repeats the
backward search.

   If you pause for a little while during incremental search, Emacs
highlights all the other possible matches for the search string that are
present on the screen.  This helps you anticipate where you can get to
by typing ‘C-s’ or ‘C-r’ to repeat the search.  The other matches are
highlighted differently from the current match, using the customizable
face ‘lazy-highlight’ (*note Faces::).  If you don’t like this feature,
you can disable it by setting ‘isearch-lazy-highlight’ to ‘nil’.  For
other customizations related to highlighting matches, see *note Search
Customizations::.

   After exiting a search, you can search for the same string again by
typing just ‘C-s C-s’.  The first ‘C-s’ is the key that invokes
incremental search, and the second ‘C-s’ means to search again for the
last search string.  Similarly, ‘C-r C-r’ searches backward for the last
search string.  In determining the last search string, it doesn’t matter
whether that string was searched for with ‘C-s’ or ‘C-r’.

   If you are searching forward but you realize you were looking for
something before the starting point, type ‘C-r’ to switch to a backward
search, leaving the search string unchanged.  Similarly, ‘C-s’ in a
backward search switches to a forward search.

   When you change the direction of a search, the first command you type
will, by default, remain on the same match, and the cursor will move to
the other end of the match.  To move to another match immediately,
customize the variable ‘isearch-repeat-on-direction-change’ to ‘t’.

   If a search is failing and you ask to repeat it by typing another
‘C-s’, it starts again from the beginning of the buffer.  Repeating a
failing reverse search with ‘C-r’ starts again from the end.  This is
called “wrapping around”, and ‘Wrapped’ appears in the search prompt
once this has happened.  If you keep on going past the original starting
point of the search, it changes to ‘Overwrapped’, which means that you
are revisiting matches that you have already seen.

   You can control what happens when there are no more matches by
customizing the ‘isearch-wrap-pause’ user option.  If it is ‘t’ (the
default), signal an error.  (Repeating the search will wrap around.)  If
‘no’, issue a ‘ding’ and wrap immediately after reaching the last match.
If ‘no-ding’, wrap immediately, but don’t ‘ding’.  With the values ‘no’
and ‘no-ding’ the search will try to wrap around also on typing a
character.  Finally, if ‘nil’, never wrap, but just stop at the last
match.

   To reuse earlier search strings, use the “search ring”.  The commands
‘M-p’ (‘isearch-ring-retreat’) and ‘M-n’ (‘isearch-ring-advance’) move
through the ring to pick a search string to reuse.  These commands leave
the selected search ring element in the minibuffer, where you can edit
it.  Type ‘C-s’/‘C-r’ or <RET> to accept the string and start searching
for it.  The number of most recently used search strings saved in the
search ring is specified by the variable ‘search-ring-max’, 16 by
default.

   To edit the current search string in the minibuffer without replacing
it with items from the search ring, type ‘M-e’ (‘isearch-edit-string’)
or click ‘mouse-1’ in the minibuffer.  Type <RET>, ‘C-s’ or ‘C-r’ to
finish editing the string and search for it.  Type ‘C-f’ or ‘<RIGHT>’ to
add to the search string characters following point from the buffer from
which you started the search.


File: emacs.info,  Node: Isearch Yank,  Next: Error in Isearch,  Prev: Repeat Isearch,  Up: Incremental Search

16.1.3 Isearch Yanking
----------------------

In many cases, you will want to use text at or near point as your search
string.  The commands described in this subsection let you do that
conveniently.

   ‘C-w’ (‘isearch-yank-word-or-char’) appends the next character or
word at point to the search string.  This is an easy way to search for
another occurrence of the text at point.  (The decision of whether to
copy a character or a word is heuristic.)  With a prefix numeric
argument of N, append the next N characters or words.

   ‘C-M-w’ (‘isearch-yank-symbol-or-char’) appends the next character or
symbol at point to the search string.  This is an easy way to search for
another occurrence of the symbol at point.  (The decision of whether to
copy a character or a symbol is heuristic.)  With a prefix numeric
argument of N, append the next N characters or symbols.

   ‘M-s C-e’ (‘isearch-yank-line’) appends the rest of the current line
to the search string.  If point is already at the end of a line, it
appends the next line.  With a prefix argument N, it appends the next N
lines.

   Similarly, ‘C-M-z’ (‘isearch-yank-until-char’) appends to the search
string everything from point until the next occurrence of a specified
character (not including that character).  This is especially useful for
keyboard macros, for example in programming languages or markup
languages in which that character marks a token boundary.  With a prefix
numeric argument of N, the command appends everything from point to the
Nth occurrence of the specified character.

   Within incremental search, ‘C-y’ (‘isearch-yank-kill’) appends the
current kill to the search string.  ‘M-y’ (‘isearch-yank-pop’), if
called after ‘C-y’ during incremental search, replaces that appended
text with an earlier kill, similar to the usual ‘M-y’ (‘yank-pop’)
command.  Clicking ‘mouse-2’ in the echo area appends the current X
selection (*note Primary Selection::) to the search string
(‘isearch-yank-x-selection’).

   ‘C-M-d’ (‘isearch-del-char’) deletes the last character from the
search string, and ‘C-M-y’ (‘isearch-yank-char’) appends the character
after point to the search string.  An alternative method to add the
character after point is to enter the minibuffer with ‘M-e’ (*note
Repeat Isearch::) and type ‘C-f’ or ‘<RIGHT>’ at the end of the search
string in the minibuffer.  Each ‘C-f’ or ‘<RIGHT>’ you type adds another
character following point to the search string.

   Normally, when the search is case-insensitive, text yanked into the
search string is converted to lower case, so that the search remains
case-insensitive (*note case folding: Lax Search.).  However, if the
value of the variable ‘search-upper-case’ (*note search-upper-case: Lax
Search.) is other than ‘not-yanks’, that disables this down-casing.

   To begin a new incremental search with the text near point yanked
into the initial search string, type ‘M-s M-.’ that runs the command
‘isearch-forward-thing-at-point’.  If the region was active, then it
yanks the text from the region into the search string.  Otherwise, it
tries to yank a URL, a symbol or an expression found near point.  What
to yank is defined by the user option ‘isearch-forward-thing-at-point’.


File: emacs.info,  Node: Error in Isearch,  Next: Special Isearch,  Prev: Isearch Yank,  Up: Incremental Search

16.1.4 Errors in Incremental Search
-----------------------------------

If your string is not found at all, the echo area says ‘Failing
I-Search’, and the cursor moves past the place where Emacs found as much
of your string as it could.  Thus, if you search for ‘FOOT’, and there
is no ‘FOOT’, you might see the cursor after the ‘FOO’ in ‘FOOL’.  In
the echo area, the part of the search string that failed to match is
highlighted using the face ‘isearch-fail’.

   At this point, there are several things you can do.  If your string
was mistyped, use <DEL> to cancel a previous input item (*note Basic
Isearch::), ‘C-M-d’ to erase one character at a time, or ‘M-e’ to edit
it.  If you like the place you have found, you can type <RET> to remain
there.  Or you can type ‘C-g’, which removes from the search string the
characters that could not be found (the ‘T’ in ‘FOOT’), leaving those
that were found (the ‘FOO’ in ‘FOOT’).  A second ‘C-g’ at that point
cancels the search entirely, returning point to where it was when the
search started.

   The quit command, ‘C-g’, does special things during searches; just
what it does depends on the status of the search.  If the search has
found what you specified and is waiting for input, ‘C-g’ cancels the
entire search, moving the cursor back to where you started the search.
If ‘C-g’ is typed when there are characters in the search string that
have not been found—because Emacs is still searching for them, or
because it has failed to find them—then the search string characters
which have not been found are discarded from the search string.  With
them gone, the search is now successful and waiting for more input, so a
second ‘C-g’ will cancel the entire search.


File: emacs.info,  Node: Special Isearch,  Next: Not Exiting Isearch,  Prev: Error in Isearch,  Up: Incremental Search

16.1.5 Special Input for Incremental Search
-------------------------------------------

In addition to characters described in the previous subsections, some of
the other characters you type during incremental search have special
effects.  They are described here.

   To toggle lax space matching (*note lax space matching: Lax Search.),
type ‘M-s <SPC>’.

   To toggle case sensitivity of the search, type ‘M-c’ or ‘M-s c’.
*Note case folding: Lax Search.  If the search string includes
upper-case letters, the search is case-sensitive by default.

   To toggle whether or not the search will consider similar and
equivalent characters as a match, type ‘M-s '’.  *Note character
folding: Lax Search.  If the search string includes accented characters,
that disables character folding during that search.

   To toggle whether or not invisible text is searched, type ‘M-s i’
(‘isearch-toggle-invisible’).  *Note Outline Search::.

   To toggle between non-regexp and regexp incremental search, type
‘M-r’ or ‘M-s r’ (‘isearch-toggle-regexp’).  *Note Regexp Search::.

   To toggle symbol mode, type ‘M-s _’.  *Note Symbol Search::.

   To search for a newline character, type ‘C-j’ as part of the search
string.

   To search for non-ASCII characters, use one of the following methods
during incremental search:

   • Type ‘C-q’ (‘isearch-quote-char’), followed by a non-graphic
     character or a sequence of octal digits.  This adds a character to
     the search string, similar to inserting into a buffer using ‘C-q’
     (*note Inserting Text::).  For example, ‘C-q C-s’ during
     incremental search adds the ‘control-S’ character to the search
     string.

   • Use an input method (*note Input Methods::).  If an input method is
     enabled in the current buffer when you start the search, the same
     method will be active in the minibuffer when you type the search
     string.  While typing the search string, you can toggle the input
     method with ‘C-\’ (‘isearch-toggle-input-method’).  You can also
     turn on a non-default input method with ‘C-^’
     (‘isearch-toggle-specified-input-method’), which prompts for the
     name of the input method.  When an input method is active during
     incremental search, the search prompt includes the input method
     mnemonic, like this:

          I-search [IM]:

     where IM is the mnemonic of the active input method.  Any input
     method you enable during incremental search remains enabled in the
     current buffer afterwards.  Finally, you can temporarily enable a
     transient input method (*note transient input method::) with ‘C-x
     \’ (‘isearch-transient-input-method’) to insert a single character
     to the search string using an input method, and automatically
     disable the input method afterwards.

   • Type ‘C-x 8 <RET>’ (‘isearch-char-by-name’), followed by a Unicode
     name or code-point in hex.  This adds the specified character into
     the search string, similar to the usual ‘insert-char’ command
     (*note Inserting Text::).

   You can also include Emoji sequences in the search string.  Type
‘C-x 8 e <RET>’ (‘isearch-emoji-by-name’), followed by the Unicode name
of an Emoji (for example, ‘smiling face’ or ‘heart with arrow’).  This
adds the specified Emoji to the search string.  If you don’t know the
name of the Emoji you want to search for, you can use ‘C-x 8 e l’
(‘emoji-list’) and ‘C-x 8 e d’ (‘emoji-describe’) (*note Input
Methods::).

   Typing ‘M-s o’ in incremental search invokes ‘isearch-occur’, which
runs ‘occur’ with the current search string.  *Note occur: Other
Repeating Search.

   Typing ‘M-%’ (‘isearch-query-replace’) in incremental search invokes
‘query-replace’ or ‘query-replace-regexp’ (depending on search mode)
with the current search string used as the string to replace.  A
negative prefix argument means to replace backward.  *Note Query
Replace::.  Typing ‘C-M-%’ (‘isearch-query-replace-regexp’) invokes
‘query-replace-regexp’ with the current search string used as the regexp
to replace.

   Typing ‘M-<TAB>’ in incremental search invokes ‘isearch-complete’,
which attempts to complete the search string using the search ring (the
previous search strings you used) as a list of completion alternatives.
*Note Completion::.  In many operating systems, the ‘M-<TAB>’ key
sequence is captured by the window manager; you then need to rebind
‘isearch-complete’ to another key sequence if you want to use it (*note
Rebinding::).

   You can exit the search while leaving the matches highlighted by
typing ‘M-s h r’ (‘isearch-highlight-regexp’).  This runs
‘highlight-regexp’ (*note Highlight Interactively::), passing it the
regexp derived from the search string and prompting you for the face to
use for highlighting.  To highlight _whole lines_ containing matches
(rather than _just_ the matches), type ‘M-s h l’
(‘isearch-highlight-lines-matching-regexp’).  In either case, to remove
the highlighting, type ‘M-s h u’ (‘unhighlight-regexp’).

   When incremental search is active, you can type ‘C-h C-h’
(‘isearch-help-map’) to access interactive help options, including a
list of special key bindings.  These key bindings are part of the keymap
‘isearch-mode-map’ (*note Keymaps::).

   When incremental search is active, typing ‘M-s M->’ will go to the
last occurrence of the search string, and ‘M-s M-<’ will go to the first
occurrence.  With a prefix numeric argument of N, these commands will go
to the Nth occurrence of the search string counting from the beginning
or end of the buffer, respectively.


File: emacs.info,  Node: Not Exiting Isearch,  Next: Isearch Minibuffer,  Prev: Special Isearch,  Up: Incremental Search

16.1.6 Not Exiting Incremental Search
-------------------------------------

This subsection describes how to control whether typing a command not
specifically meaningful in searches exits the search before executing
the command.  It also describes three categories of commands which you
can type without exiting the current incremental search, even though
they are not themselves part of incremental search.

   Normally, typing a command that is not bound by the incremental
search exits the search before executing the command.  Thus, the command
operates on the buffer from which you invoked the search.  However, if
you customize the variable ‘search-exit-option’ to ‘append’, the
characters which you type that are not interpreted by the incremental
search are simply appended to the search string.  This is so you could
include in the search string control characters, such as ‘C-a’, that
would normally exit the search and invoke the command bound to them on
the buffer.

Prefix Arguments
     In incremental search, when you type a command that specifies a
     prefix argument (*note Arguments::), by default it will apply
     either to the next action in the search or to the command that
     exits the search.  In other words, entering a prefix argument will
     not by itself terminate the search.

     In previous versions of Emacs, entering a prefix argument always
     terminated the search.  You can revert to this behavior by setting
     the variable ‘isearch-allow-prefix’ to ‘nil’.

     When ‘isearch-allow-scroll’ is non-‘nil’ (see below), prefix
     arguments always have the default behavior described above, i.e.,
     they don’t terminate the search, even if ‘isearch-allow-prefix’ is
     ‘nil’.

Scrolling Commands
     Normally, scrolling commands exit incremental search.  But if you
     change the variable ‘isearch-allow-scroll’ to a non-‘nil’ value,
     that enables the use of the scroll-bar, as well as keyboard
     scrolling commands like ‘C-v’, ‘M-v’, and ‘C-l’ (*note
     Scrolling::), which have a non-‘nil’ ‘scroll-command’ property,
     without exiting the search.  This applies only to calling these
     commands via their bound key sequences—typing ‘M-x’ will still exit
     the search.  You can give prefix arguments to these commands in the
     usual way.  This feature normally won’t let you scroll the current
     match out of visibility; but if you customize
     ‘isearch-allow-scroll’ to the special value ‘unlimited’, that
     restriction is lifted.

     The ‘isearch-allow-scroll’ feature also affects some other
     commands, such as ‘C-x 2’ (‘split-window-below’) and ‘C-x ^’
     (‘enlarge-window’), which don’t exactly scroll but do affect where
     the text appears on the screen.  In fact, it affects any command
     that has a non-‘nil’ ‘isearch-scroll’ property.  So you can control
     which commands are affected by changing these properties.

     For example, to make ‘C-h l’ usable within an incremental search in
     all future Emacs sessions, use ‘C-h c’ to find what command it runs
     (*note Key Help::), which is ‘view-lossage’.  Then you can put the
     following line in your init file (*note Init File::):

          (put 'view-lossage 'isearch-scroll t)

     This feature can be applied to any command that doesn’t permanently
     change point, the buffer contents, the match data, the current
     buffer, or the selected window and frame.  The command must not
     itself attempt an incremental search.  This feature is disabled if
     ‘isearch-allow-scroll’ is ‘nil’ (which it is by default).

     Likewise, if you change the variable ‘isearch-allow-motion’ to a
     non-‘nil’ value, this enables the use of the keyboard motion
     commands ‘M-<’, ‘M->’, ‘C-v’ and ‘M-v’, to move respectively to the
     first occurrence of the current search string in the buffer, the
     last one, the first one after the current window, and the last one
     before the current window.  The search direction does not change
     when these motion commands are used, unless you change the variable
     ‘isearch-motion-changes-direction’ to a non-‘nil’ value, in which
     case the search direction is forward after ‘M-<’ and ‘C-v’, and
     backward after ‘M->’ and ‘M-v’.

Motion Commands
     When ‘isearch-yank-on-move’ is customized to ‘shift’, you can
     extend the search string by holding down the shift key while typing
     cursor motion commands.  It will yank text that ends at the new
     position after moving point in the current buffer.

     When ‘isearch-yank-on-move’ is ‘t’, you can extend the search
     string without using the shift key for cursor motion commands, but
     it applies only for certain motion command that have the
     ‘isearch-move’ property on their symbols.


File: emacs.info,  Node: Isearch Minibuffer,  Prev: Not Exiting Isearch,  Up: Incremental Search

16.1.7 Searching the Minibuffer
-------------------------------

If you start an incremental search while the minibuffer is active, Emacs
searches the contents of the minibuffer.  Unlike searching an ordinary
buffer, the search string is not shown in the echo area, because that is
used to display the minibuffer.

   If an incremental search fails in the minibuffer, it tries searching
the minibuffer history.  *Note Minibuffer History::.  You can visualize
the minibuffer and its history as a series of pages, with the earliest
history element on the first page and the current minibuffer on the last
page.  A forward search, ‘C-s’, searches forward to later pages; a
reverse search, ‘C-r’, searches backwards to earlier pages.  Like in
ordinary buffer search, a failing search can wrap around, going from the
last page to the first page or vice versa.

   When the current match is on a history element, that history element
is pulled into the minibuffer.  If you exit the incremental search
normally (e.g., by typing <RET>), it remains in the minibuffer
afterwards.  Canceling the search, with ‘C-g’, restores the contents of
the minibuffer when you began the search.


File: emacs.info,  Node: Nonincremental Search,  Next: Word Search,  Prev: Incremental Search,  Up: Search

16.2 Nonincremental Search
==========================

Emacs also has conventional nonincremental search commands, which
require you to type the entire search string before searching begins.

‘C-s <RET> STRING <RET>’
     Search for STRING.
‘C-r <RET> STRING <RET>’
     Search backward for STRING.

   To start a nonincremental search, first type ‘C-s <RET>’.  This
enters the minibuffer to read the search string; terminate the string
with <RET>, and then the search takes place.  If the string is not
found, the search command signals an error.

   When you type ‘C-s <RET>’, the ‘C-s’ invokes incremental search as
usual.  That command is specially programmed to invoke the command for
nonincremental search, if the string you specify is empty.  (Such an
empty argument would otherwise be useless.)  ‘C-r <RET>’ does likewise,
invoking the nonincremental backward-searching command.

   Nonincremental search can also be invoked from the menu bar’s
‘Edit->Search’ menu.

   You can also use two simpler commands, ‘M-x search-forward’ and ‘M-x
search-backward’.  These commands look for the literal strings you
specify, and don’t support any of the lax-search features (*note Lax
Search::) except case folding.


File: emacs.info,  Node: Word Search,  Next: Symbol Search,  Prev: Nonincremental Search,  Up: Search

16.3 Word Search
================

A “word search” finds a sequence of words without regard to the type of
punctuation between them.  For instance, if you enter a search string
that consists of two words separated by a single space, the search
matches any sequence of those two words separated by one or more spaces,
newlines, or other punctuation characters.  This is particularly useful
for searching text documents, because you don’t have to worry whether
the words you are looking for are separated by newlines or spaces.  Note
that major modes for programming languages or other specialized modes
can modify the definition of a word to suit their syntactic needs.

‘M-s w’
     If incremental search is active, toggle word search mode
     (‘isearch-toggle-word’); otherwise, begin an incremental forward
     word search (‘isearch-forward-word’).
‘M-s w <RET> WORDS <RET>’
     Search for WORDS, using a forward nonincremental word search.
‘M-s w C-r <RET> WORDS <RET>’
     Search backward for WORDS, using a nonincremental word search.
‘M-s M-w’
     Search the Web for the text in region.

   To begin a forward incremental word search, type ‘M-s w’.  If
incremental search is not already active, this runs the command
‘isearch-forward-word’.  If incremental search is already active
(whether a forward or backward search), ‘M-s w’ runs the command
‘isearch-toggle-word’, which switches to a word search while keeping the
direction of the search and the current search string unchanged.  You
can toggle word search back off by typing ‘M-s w’ again.

   To begin a nonincremental word search, type ‘M-s w <RET>’ for a
forward search, or ‘M-s w C-r <RET>’ for a backward search.  These run
the commands ‘word-search-forward’ and ‘word-search-backward’
respectively.

   Incremental and nonincremental word searches differ slightly in the
way they find a match.  In a nonincremental word search, each word in
the search string must exactly match a whole word.  In an incremental
word search, the matching is more lax: while you are typing the search
string, its first and last words need not match whole words.  This is so
that the matching can proceed incrementally as you type.  This
additional laxity does not apply to the lazy highlight (*note
Incremental Search::), which always matches whole words.  While you are
typing the search string, ‘Pending’ appears in the search prompt until
you use a search repeating key like ‘C-s’.

   The word search commands don’t perform character folding, and
toggling lax whitespace matching (*note lax space matching: Lax Search.)
has no effect on them.

   To search the Web for the text in region, type ‘M-s M-w’.  This
command performs an Internet search for the words in region using the
search engine whose URL is specified by the variable ‘eww-search-prefix’
(*note EWW: (eww)Basics.).  If the region is not active, or doesn’t
contain any words, this command prompts the user for a URL or keywords
to search.


File: emacs.info,  Node: Symbol Search,  Next: Regexp Search,  Prev: Word Search,  Up: Search

16.4 Symbol Search
==================

A “symbol search” is much like an ordinary search, except that the
boundaries of the search must match the boundaries of a symbol.  The
meaning of “symbol” in this context depends on the major mode, and
usually refers to a source code token, such as a Lisp symbol in Emacs
Lisp mode.  For instance, if you perform an incremental symbol search
for the Lisp symbol ‘forward-word’, it would not match
‘isearch-forward-word’.  This feature is thus mainly useful for
searching source code.

‘M-s _’
     If incremental search is active, toggle symbol search mode
     (‘isearch-toggle-symbol’); otherwise, begin an incremental forward
     symbol search (‘isearch-forward-symbol’).
‘M-s .’
     Start a symbol incremental search forward with the symbol found
     near point added to the search string initially.
‘M-s _ <RET> SYMBOL <RET>’
     Search forward for SYMBOL, nonincrementally.
‘M-s _ C-r <RET> SYMBOL <RET>’
     Search backward for SYMBOL, nonincrementally.

   To begin a forward incremental symbol search, type ‘M-s _’ (or ‘M-s
.’ if the symbol to search is near point).  If incremental search is not
already active, ‘M-s _’ runs the command ‘isearch-forward-symbol’ and
‘M-s .’ runs the command ‘isearch-forward-symbol-at-point’.  With a
numeric prefix argument of N, ‘M-s .’ will search for the Nthe next
occurrence of the symbol at point; negative values of N search
backwards.  If incremental search is already active, ‘M-s _’ switches to
a symbol search, preserving the direction of the search and the current
search string; you can disable symbol search by typing ‘M-s _’ again.
In incremental symbol search, while you are typing the search string,
only the beginning of the search string is required to match the
beginning of a symbol, and ‘Pending’ appears in the search prompt until
you use a search repeating key like ‘C-s’.

   To begin a nonincremental symbol search, type ‘M-s _ <RET>’ for a
forward search, or ‘M-s _ C-r <RET>’ or a backward search.  In
nonincremental symbol searches, the beginning and end of the search
string are required to match the beginning and end of a symbol,
respectively.

   The symbol search commands don’t perform character folding, and
toggling lax whitespace matching (*note lax space matching: Lax Search.)
has no effect on them.


File: emacs.info,  Node: Regexp Search,  Next: Regexps,  Prev: Symbol Search,  Up: Search

16.5 Regular Expression Search
==============================

A “regular expression” (or “regexp” for short) is a pattern that denotes
a class of alternative strings to match.  Emacs provides both
incremental and nonincremental ways to search for a match for a regexp.
The syntax of regular expressions is explained in the next section.

‘C-M-s’
     Begin incremental regexp search (‘isearch-forward-regexp’).
‘C-M-r’
     Begin reverse incremental regexp search
     (‘isearch-backward-regexp’).

   Incremental search for a regexp is done by typing ‘C-M-s’
(‘isearch-forward-regexp’), by invoking ‘C-s’ with a prefix argument
(whose value does not matter), or by typing ‘M-r’ within a forward
incremental search.  This command reads a search string incrementally
just like ‘C-s’, but it treats the search string as a regexp rather than
looking for an exact match against the text in the buffer.  Each time
you add text to the search string, you make the regexp longer, and the
new regexp is searched for.  To search backward for a regexp, use
‘C-M-r’ (‘isearch-backward-regexp’), ‘C-r’ with a prefix argument, or
‘M-r’ within a backward incremental search.

   All of the special key sequences in an ordinary incremental search
(*note Special Isearch::) do similar things in an incremental regexp
search.  For instance, typing ‘C-s’ immediately after starting the
search retrieves the last incremental search regexp used and searches
forward for it.  Incremental regexp and non-regexp searches have
independent defaults.  They also have separate search rings, which you
can access with ‘M-p’ and ‘M-n’.  The maximum number of search regexps
saved in the search ring is determined by the value of
‘regexp-search-ring-max’, 16 by default.

   Unlike ordinary incremental search, incremental regexp search does
not use lax space matching by default.  To toggle this feature use ‘M-s
<SPC>’ (‘isearch-toggle-lax-whitespace’).  Then any <SPC> typed in
incremental regexp search will match any sequence of one or more
whitespace characters.  The variable ‘search-whitespace-regexp’
specifies the regexp for the lax space matching.  *Note Special
Isearch::.

   Also unlike ordinary incremental search, incremental regexp search
cannot use character folding (*note Lax Search::).  (If you toggle
character folding during incremental regexp search with ‘M-s '’, the
search becomes a non-regexp search and the search pattern you typed is
interpreted as a literal string.)

   In some cases, adding characters to the regexp in an incremental
regexp search can make the cursor move back and start again.  For
example, if you have searched for ‘foo’ and you add ‘\|bar’, the cursor
backs up in case the first ‘bar’ precedes the first ‘foo’.  (The prompt
will change to say “Pending” to notify the user that this recalculation
has happened.)  *Note Regexps::.

   Forward and backward regexp search are not symmetrical, because
regexp matching in Emacs always operates forward, starting with the
beginning of the regexp.  Thus, forward regexp search scans forward,
trying a forward match at each possible starting position.  Backward
regexp search scans backward, trying a forward match at each possible
starting position.  These search methods are not mirror images.

   Nonincremental search for a regexp is done with the commands
‘re-search-forward’ and ‘re-search-backward’.  You can invoke these with
‘M-x’, or by way of incremental regexp search with ‘C-M-s <RET>’ and
‘C-M-r <RET>’.  When you invoke these commands with ‘M-x’, they search
for the exact regexp you specify, and thus don’t support any lax-search
features (*note Lax Search::) except case folding.

   If you use the incremental regexp search commands with a prefix
argument, they perform ordinary string search, like ‘isearch-forward’
and ‘isearch-backward’.  *Note Incremental Search::.


File: emacs.info,  Node: Regexps,  Next: Regexp Backslash,  Prev: Regexp Search,  Up: Search

16.6 Syntax of Regular Expressions
==================================

This section (and this manual in general) describes regular expression
features that users typically use.  *Note (elisp)Regular Expressions::,
for additional features used mainly in Lisp programs.

   Regular expressions have a syntax in which a few characters are
“special constructs” and the rest are “ordinary”.  An ordinary character
matches that same character and nothing else.  The special characters
are ‘$^.*+?[\’.  The character ‘]’ is special if it ends a character
alternative (see below).  The character ‘-’ is special inside a
character alternative.  Any other character appearing in a regular
expression is ordinary, unless a ‘\’ precedes it.  (When you use regular
expressions in a Lisp program, each ‘\’ must be doubled, see the example
near the end of this section.)

   For example, ‘f’ is not a special character, so it is ordinary, and
therefore ‘f’ is a regular expression that matches the string ‘f’ and no
other string.  (It does _not_ match the string ‘ff’.)  Likewise, ‘o’ is
a regular expression that matches only ‘o’.  (When case distinctions are
being ignored, these regexps also match ‘F’ and ‘O’, but we consider
this a generalization of “the same string”, rather than an exception.)

   Any two regular expressions A and B can be concatenated.  The result
is a regular expression which matches a string if A matches some amount
of the beginning of that string and B matches the rest of the string.
As a trivial example, concatenating the regular expressions ‘f’ and ‘o’
gives the regular expression ‘fo’, which matches only the string ‘fo’.
To do something less trivial, you need to use one of the special
characters.  Here is a list of them.

‘.’ (Period)
     is a special character that matches any single character except a
     newline.  For example, the regular expressions ‘a.b’ matches any
     three-character string that begins with ‘a’ and ends with ‘b’.

‘*’
     is not a construct by itself; it is a postfix operator that means
     to match the preceding regular expression repetitively any number
     of times, as many times as possible.  Thus, ‘o*’ matches any number
     of ‘o’s, including no ‘o’s.

     ‘*’ always applies to the _smallest_ possible preceding expression.
     Thus, ‘fo*’ has a repeating ‘o’, not a repeating ‘fo’.  It matches
     ‘f’, ‘fo’, ‘foo’, and so on.

     The matcher processes a ‘*’ construct by matching, immediately, as
     many repetitions as can be found.  Then it continues with the rest
     of the pattern.  If that fails, backtracking occurs, discarding
     some of the matches of the ‘*’-modified construct in case that
     makes it possible to match the rest of the pattern.  For example,
     in matching ‘ca*ar’ against the string ‘caaar’, the ‘a*’ first
     tries to match all three ‘a’s; but the rest of the pattern is ‘ar’
     and there is only ‘r’ left to match, so this try fails.  The next
     alternative is for ‘a*’ to match only two ‘a’s.  With this choice,
     the rest of the regexp matches successfully.

‘+’
     is a postfix operator, similar to ‘*’ except that it must match the
     preceding expression at least once.  Thus, ‘ca+r’ matches the
     strings ‘car’ and ‘caaaar’ but not the string ‘cr’, whereas ‘ca*r’
     matches all three strings.

‘?’
     is a postfix operator, similar to ‘*’ except that it can match the
     preceding expression either once or not at all.  Thus, ‘ca?r’
     matches ‘car’ or ‘cr’, and nothing else.

‘*?’, ‘+?’, ‘??’
     are non-“greedy” variants of the operators above.  The normal
     operators ‘*’, ‘+’, ‘?’ match as much as they can, as long as the
     overall regexp can still match.  With a following ‘?’, they will
     match as little as possible.

     Thus, both ‘ab*’ and ‘ab*?’ can match the string ‘a’ and the string
     ‘abbbb’; but if you try to match them both against the text ‘abbb’,
     ‘ab*’ will match it all (the longest valid match), while ‘ab*?’
     will match just ‘a’ (the shortest valid match).

     Non-greedy operators match the shortest possible string starting at
     a given starting point; in a forward search, though, the earliest
     possible starting point for match is always the one chosen.  Thus,
     if you search for ‘a.*?$’ against the text ‘abbab’ followed by a
     newline, it matches the whole string.  Since it _can_ match
     starting at the first ‘a’, it does.

‘[ ... ]’
     is a “set of alternative characters”, or a “character set”,
     beginning with ‘[’ and terminated by ‘]’.

     In the simplest case, the characters between the two brackets are
     what this set can match.  Thus, ‘[ad]’ matches either one ‘a’ or
     one ‘d’, and ‘[ad]*’ matches any string composed of just ‘a’s and
     ‘d’s (including the empty string).  It follows that ‘c[ad]*r’
     matches ‘cr’, ‘car’, ‘cdr’, ‘caddaar’, etc.

     You can also include character ranges in a character set, by
     writing the starting and ending characters with a ‘-’ between them.
     Thus, ‘[a-z]’ matches any lower-case ASCII letter.  Ranges may be
     intermixed freely with individual characters, as in ‘[a-z$%.]’,
     which matches any lower-case ASCII letter or ‘$’, ‘%’ or period.
     As another example, ‘[α-ωί]’ matches all lower-case Greek letters.

     You can also include certain special “character classes” in a
     character set.  A ‘[:’ and balancing ‘:]’ enclose a character class
     inside a set of alternative characters.  For instance,
     ‘[[:alnum:]]’ matches any letter or digit.  *Note (elisp)Char
     Classes::, for a list of character classes.

     To include a ‘]’ in a character set, you must make it the first
     character.  For example, ‘[]a]’ matches ‘]’ or ‘a’.  To include a
     ‘-’, write ‘-’ as the last character of the set, tho you can also
     put it first or after a range.  Thus, ‘[]-]’ matches both ‘]’ and
     ‘-’.

     To include ‘^’ in a set, put it anywhere but at the beginning of
     the set.  (At the beginning, it complements the set—see below.)

     When you use a range in case-insensitive search, you should write
     both ends of the range in upper case, or both in lower case, or
     both should be non-letters.  The behavior of a mixed-case range
     such as ‘A-z’ is somewhat ill-defined, and it may change in future
     Emacs versions.

‘[^ ... ]’
     ‘[^’ begins a “complemented character set”, which matches any
     character except the ones specified.  Thus, ‘[^a-z0-9A-Z]’ matches
     all characters _except_ ASCII letters and digits.

     ‘^’ is not special in a character set unless it is the first
     character.  The character following the ‘^’ is treated as if it
     were first (in other words, ‘-’ and ‘]’ are not special there).

     A complemented character set can match a newline, unless newline is
     mentioned as one of the characters not to match.  This is in
     contrast to the handling of regexps in programs such as ‘grep’.

‘^’
     is a special character that matches the empty string, but only at
     the beginning of a line in the text being matched.  Otherwise it
     fails to match anything.  Thus, ‘^foo’ matches a ‘foo’ that occurs
     at the beginning of a line.

     For historical compatibility reasons, ‘^’ can be used with this
     meaning only at the beginning of the regular expression, or after
     ‘\(’ or ‘\|’.

‘$’
     is similar to ‘^’ but matches only at the end of a line.  Thus,
     ‘x+$’ matches a string of one ‘x’ or more at the end of a line.

     For historical compatibility reasons, ‘$’ can be used with this
     meaning only at the end of the regular expression, or before ‘\)’
     or ‘\|’.

‘\’
     has two functions: it quotes the special characters (including
     ‘\’), and it introduces additional special constructs.

     Because ‘\’ quotes special characters, ‘\$’ is a regular expression
     that matches only ‘$’, and ‘\[’ is a regular expression that
     matches only ‘[’, and so on.

     See the following section for the special constructs that begin
     with ‘\’.

   Note: for historical compatibility, special characters are treated as
ordinary ones if they are in contexts where their special meanings make
no sense.  For example, ‘*foo’ treats ‘*’ as ordinary since there is no
preceding expression on which the ‘*’ can act.  It is poor practice to
depend on this behavior; it is better to quote the special character
anyway, regardless of where it appears.

   As a ‘\’ is not special inside a set of alternative characters, it
can never remove the special meaning of ‘-’, ‘^’ or ‘]’.  You should not
quote these characters when they have no special meaning.  This would
not clarify anything, since backslashes can legitimately precede these
characters where they _have_ special meaning, as in ‘[^\]’ (‘"[^\\]"’
for Lisp string syntax), which matches any single character except a
backslash.


File: emacs.info,  Node: Regexp Backslash,  Next: Regexp Example,  Prev: Regexps,  Up: Search

16.7 Backslash in Regular Expressions
=====================================

For the most part, ‘\’ followed by any character matches only that
character.  However, there are several exceptions: two-character
sequences starting with ‘\’ that have special meanings.  The second
character in the sequence is always an ordinary character when used on
its own.  Here is a table of ‘\’ constructs.

‘\|’
     specifies an alternative.  Two regular expressions A and B with
     ‘\|’ in between form an expression that matches some text if either
     A matches it or B matches it.  It works by trying to match A, and
     if that fails, by trying to match B.

     Thus, ‘foo\|bar’ matches either ‘foo’ or ‘bar’ but no other string.

     ‘\|’ applies to the largest possible surrounding expressions.  Only
     a surrounding ‘\( ... \)’ grouping can limit the grouping power of
     ‘\|’.

     Full backtracking capability exists to handle multiple uses of
     ‘\|’.

‘\( ... \)’
     is a grouping construct that serves three purposes:

       1. To enclose a set of ‘\|’ alternatives for other operations.
          Thus, ‘\(foo\|bar\)x’ matches either ‘foox’ or ‘barx’.

       2. To enclose a complicated expression for the postfix operators
          ‘*’, ‘+’ and ‘?’ to operate on.  Thus, ‘ba\(na\)*’ matches
          ‘bananana’, etc., with any (zero or more) number of ‘na’
          strings.

       3. To record a matched substring for future reference.

     This last application is not a consequence of the idea of a
     parenthetical grouping; it is a separate feature that is assigned
     as a second meaning to the same ‘\( ... \)’ construct.  In practice
     there is usually no conflict between the two meanings; when there
     is a conflict, you can use a shy group, described below.

‘\(?: ... \)’
     specifies a “shy group” that does not record the matched substring;
     you can’t refer back to it with ‘\D’ (see below).  This is useful
     in mechanically combining regular expressions, so that you can add
     groups for syntactic purposes without interfering with the
     numbering of the groups that are meant to be referred to.

‘\D’
     matches the same text that matched the Dth occurrence of a ‘\( ...
     \)’ construct.  This is called a “back reference”.

     After the end of a ‘\( ... \)’ construct, the matcher remembers the
     beginning and end of the text matched by that construct.  Then,
     later on in the regular expression, you can use ‘\’ followed by the
     digit D to mean “match the same text matched the Dth ‘\( ... \)’
     construct”.

     The strings matching the first nine ‘\( ... \)’ constructs
     appearing in a regular expression are assigned numbers 1 through 9
     in the order that the open-parentheses appear in the regular
     expression.  So you can use ‘\1’ through ‘\9’ to refer to the text
     matched by the corresponding ‘\( ... \)’ constructs.

     For example, ‘\(.*\)\1’ matches any newline-free string that is
     composed of two identical halves.  The ‘\(.*\)’ matches the first
     half, which may be anything, but the ‘\1’ that follows must match
     the same exact text.

     If a particular ‘\( ... \)’ construct matches more than once (which
     can easily happen if it is followed by ‘*’), only the last match is
     recorded.

‘\{M\}’
     is a postfix operator specifying M repetitions—that is, the
     preceding regular expression must match exactly M times in a row.
     For example, ‘x\{4\}’ matches the string ‘xxxx’ and nothing else.

‘\{M,N\}’
     is a postfix operator specifying between M and N repetitions—that
     is, the preceding regular expression must match at least M times,
     but no more than N times.  If N is omitted, then there is no upper
     limit, but the preceding regular expression must match at least M
     times.
     ‘\{0,1\}’ is equivalent to ‘?’.
     ‘\{0,\}’ is equivalent to ‘*’.
     ‘\{1,\}’ is equivalent to ‘+’.

‘\`’
     matches the empty string, but only at the beginning of the string
     or buffer (or its accessible portion) being matched against.

‘\'’
     matches the empty string, but only at the end of the string or
     buffer (or its accessible portion) being matched against.

‘\=’
     matches the empty string, but only at point.

‘\b’
     matches the empty string, but only at the beginning or end of a
     word.  Thus, ‘\bfoo\b’ matches any occurrence of ‘foo’ as a
     separate word.  ‘\bballs?\b’ matches ‘ball’ or ‘balls’ as a
     separate word.

     ‘\b’ matches at the beginning or end of the buffer regardless of
     what text appears next to it.

‘\B’
     matches the empty string, but _not_ at the beginning or end of a
     word.

‘\<’
     matches the empty string, but only at the beginning of a word.
     ‘\<’ matches at the beginning of the buffer only if a
     word-constituent character follows.

‘\>’
     matches the empty string, but only at the end of a word.  ‘\>’
     matches at the end of the buffer only if the contents end with a
     word-constituent character.

‘\w’
     matches any word-constituent character.  The syntax table
     determines which characters these are.  *Note Syntax Tables:
     (elisp)Syntax Tables.

‘\W’
     matches any character that is not a word-constituent.

‘\_<’
     matches the empty string, but only at the beginning of a symbol.  A
     symbol is a sequence of one or more symbol-constituent characters.
     A symbol-constituent character is a character whose syntax is
     either ‘w’ or ‘_’.  ‘\_<’ matches at the beginning of the buffer
     only if a symbol-constituent character follows.  As with words, the
     syntax table determines which characters are symbol-constituent.

‘\_>’
     matches the empty string, but only at the end of a symbol.  ‘\_>’
     matches at the end of the buffer only if the contents end with a
     symbol-constituent character.

‘\sC’
     matches any character whose syntax is C.  Here C is a character
     that designates a particular syntax class: thus, ‘w’ for word
     constituent, ‘-’ or ‘ ’ for whitespace, ‘.’ for ordinary
     punctuation, etc.  *Note Syntax Class Table: (elisp)Syntax Class
     Table.

‘\SC’
     matches any character whose syntax is not C.

‘\cC’
     matches any character that belongs to the category C.  For example,
     ‘\cc’ matches Chinese characters, ‘\cg’ matches Greek characters,
     etc.  For the description of the known categories, type ‘M-x
     describe-categories <RET>’.

‘\CC’
     matches any character that does _not_ belong to category C.

   The constructs that pertain to words and syntax are controlled by the
setting of the syntax table.  *Note Syntax Tables: (elisp)Syntax Tables.


File: emacs.info,  Node: Regexp Example,  Next: Lax Search,  Prev: Regexp Backslash,  Up: Search

16.8 Regular Expression Example
===============================

Here is an example of a regexp—similar to the regexp that Emacs uses, by
default, to recognize the end of a sentence, not including the following
space (i.e., the variable ‘sentence-end-base’):

     [.?!][]\"')}]*

This contains two parts in succession: a character set matching period,
‘?’, or ‘!’, and a character set matching close-brackets, quotes, or
parentheses, repeated zero or more times.


File: emacs.info,  Node: Lax Search,  Next: Replace,  Prev: Regexp Example,  Up: Search

16.9 Lax Matching During Searching
==================================

Normally, you’d want search commands to disregard certain minor
differences between the search string you type and the text being
searched.  For example, sequences of whitespace characters of different
length are usually perceived as equivalent; letter-case differences
usually don’t matter; etc.  This is known as “character equivalence”.

   This section describes the Emacs lax search features, and how to
tailor them to your needs.

   By default, search commands perform “lax space matching”: each space,
or sequence of spaces, matches any sequence of one or more whitespace
characters in the text.  More precisely, Emacs matches each sequence of
space characters in the search string to a regular expression specified
by the user option ‘search-whitespace-regexp’.  The default value of
this option considers any sequence of spaces and tab characters as
whitespace.  Hence, ‘foo bar’ matches ‘foo bar’, ‘foo  bar’,
‘foo   bar’, and so on (but not ‘foobar’).  If you want to make spaces
match sequences of newlines as well as spaces and tabs, customize the
option to make its value be the regular expression ‘[ \t\n]+’.  (The
default behavior of the incremental regexp search is different; see
*note Regexp Search::.)

   If you want whitespace characters to match exactly, you can turn lax
space matching off by typing ‘M-s <SPC>’
(‘isearch-toggle-lax-whitespace’) within an incremental search.  Another
‘M-s <SPC>’ turns lax space matching back on.  To disable lax whitespace
matching for all searches, change ‘search-whitespace-regexp’ to ‘nil’;
then each space in the search string matches exactly one space.

   Searches in Emacs by default ignore the case of the text they are
searching through, if you specify the search string in lower case.
Thus, if you specify searching for ‘foo’, then ‘Foo’ and ‘fOO’ also
match.  Regexps, and in particular character sets, behave likewise:
‘[ab]’ matches ‘a’ or ‘A’ or ‘b’ or ‘B’.  This feature is known as “case
folding”, and it is supported in both incremental and non-incremental
search modes.

   An upper-case letter anywhere in the search string makes the search
case-sensitive.  Thus, searching for ‘Foo’ does not find ‘foo’ or ‘FOO’.
This applies to regular expression search as well as to literal string
search.  The effect ceases if you delete the upper-case letter from the
search string.  The variable ‘search-upper-case’ controls this: if it is
non-‘nil’, an upper-case character in the search string makes the search
case-sensitive; setting it to ‘nil’ disables this effect of upper-case
characters.  The default value of this variable is ‘not-yanks’, which
makes search case-sensitive if there are upper-case letters in the
search string, and also causes text yanked into the search string (*note
Isearch Yank::) to be down-cased, so that such searches are
case-insensitive by default.

   If you set the variable ‘case-fold-search’ to ‘nil’, then all letters
must match exactly, including case.  This is a per-buffer variable;
altering the variable normally affects only the current buffer, unless
you change its default value.  *Note Locals::.  This variable applies to
nonincremental searches also, including those performed by the replace
commands (*note Replace::) and the minibuffer history matching commands
(*note Minibuffer History::).

   Typing ‘M-c’ or ‘M-s c’ (‘isearch-toggle-case-fold’) within an
incremental search toggles the case sensitivity of that search.  The
effect does not extend beyond the current incremental search, but it
does override the effect of adding or removing an upper-case letter in
the current search.

   Several related variables control case-sensitivity of searching and
matching for specific commands or activities.  For instance,
‘tags-case-fold-search’ controls case sensitivity for ‘find-tag’.  To
find these variables, do ‘M-x apropos-variable <RET> case-fold-search
<RET>’.

   Case folding disregards case distinctions among characters, making
upper-case characters match lower-case variants, and vice versa.  A
generalization of case folding is “character folding”, which disregards
wider classes of distinctions among similar characters.  For instance,
under character folding the letter ‘a’ matches all of its accented
cousins like ‘ä’ and ‘á’, i.e., the match disregards the diacritics that
distinguish these variants.  In addition, ‘a’ matches other characters
that resemble it, or have it as part of their graphical representation,
such as U+00AA FEMININE ORDINAL INDICATOR and U+24D0 CIRCLED LATIN SMALL
LETTER A (which looks like a small ‘a’ inside a circle).  Similarly, the
ASCII double-quote character ‘"’ matches all the other variants of
double quotes defined by the Unicode standard.  Finally, character
folding can make a sequence of one or more characters match another
sequence of a different length: for example, the sequence of two
characters ‘ff’ matches U+FB00 LATIN SMALL LIGATURE FF and the sequence
‘(a)’ matches U+249C PARENTHESIZED LATIN SMALL LETTER A.  Character
sequences that are not identical, but match under character folding are
known as “equivalent character sequences”.

   Generally, search commands in Emacs do not by default perform
character folding in order to match equivalent character sequences.  You
can enable this behavior by customizing the variable
‘search-default-mode’ to ‘char-fold-to-regexp’.  *Note Search
Customizations::.  Within an incremental search, typing ‘M-s '’
(‘isearch-toggle-char-fold’) toggles character folding, but only for
that search.  (Replace commands have a different default, controlled by
a separate option; see *note Replacement and Lax Matches::.)

   By default, typing an explicit variant of a character, such as ‘ä’,
as part of the search string doesn’t match its base character, such as
‘a’.  But if you customize the variable ‘char-fold-symmetric’ to ‘t’,
then search commands treat equivalent characters the same and use of any
of a set of equivalent characters in a search string finds any of them
in the text being searched, so typing an accented character ‘ä’ matches
the letter ‘a’ as well as all the other variants like ‘á’.

   You can add new foldings using the customizable variable
‘char-fold-include’, or remove the existing ones using the customizable
variable ‘char-fold-exclude’.  You can also customize
‘char-fold-override’ to ‘t’ to disable all the character equivalences
except those you add yourself using ‘char-fold-include’.


File: emacs.info,  Node: Replace,  Next: Other Repeating Search,  Prev: Lax Search,  Up: Search

16.10 Replacement Commands
==========================

Emacs provides several commands for performing search-and-replace
operations.  In addition to the simple ‘M-x replace-string’ command,
there is ‘M-%’ (‘query-replace’), which presents each occurrence of the
search pattern and asks you whether to replace it.

   The replace commands normally operate on the text from point to the
end of the buffer.  When the region is active, they operate on it
instead (*note Mark::).  The basic replace commands replace one “search
string” (or regexp) with one “replacement string”.  It is possible to
perform several replacements in parallel, using the command
‘expand-region-abbrevs’ (*note Expanding Abbrevs::).

* Menu:

* Unconditional Replace::   Replacing all matches for a string.
* Regexp Replace::          Replacing all matches for a regexp.
* Replacement and Lax Matches::
                            Lax searching for text to replace.
* Query Replace::           How to use querying.


File: emacs.info,  Node: Unconditional Replace,  Next: Regexp Replace,  Up: Replace

16.10.1 Unconditional Replacement
---------------------------------

‘M-x replace-string <RET> STRING <RET> NEWSTRING <RET>’
     Replace every occurrence of STRING with NEWSTRING.

   To replace every instance of ‘foo’ after point with ‘bar’, use the
command ‘M-x replace-string’ with the two arguments ‘foo’ and ‘bar’.
Replacement happens only in the text after point, so if you want to
cover the whole buffer you must go to the beginning first.  All
occurrences up to the end of the buffer are replaced; to limit
replacement to part of the buffer, activate the region around that part.
When the region is active, replacement is limited to the region (*note
Mark::).

   When ‘replace-string’ exits, it leaves point at the last occurrence
replaced.  It adds the prior position of point (where the
‘replace-string’ command was issued) to the mark ring, without
activating the mark; use ‘C-u C-<SPC>’ to move back there.  *Note Mark
Ring::.

   A prefix argument restricts replacement to matches that are
surrounded by word boundaries.

   *Note Replacement and Lax Matches::, for details about
case-sensitivity and character folding in replace commands.


File: emacs.info,  Node: Regexp Replace,  Next: Replacement and Lax Matches,  Prev: Unconditional Replace,  Up: Replace

16.10.2 Regexp Replacement
--------------------------

The ‘M-x replace-string’ command replaces exact matches for a single
string.  The similar command ‘M-x replace-regexp’ replaces any match for
a specified regular expression pattern (*note Regexps::).

‘M-x replace-regexp <RET> REGEXP <RET> NEWSTRING <RET>’
     Replace every match for REGEXP with NEWSTRING.

   In ‘replace-regexp’, the NEWSTRING need not be constant: it can refer
to all or part of what is matched by the REGEXP.  ‘\&’ in NEWSTRING
stands for the entire match being replaced.  ‘\D’ in NEWSTRING, where D
is a digit starting from 1, stands for whatever matched the Dth
parenthesized grouping in REGEXP.  (This is called a “back reference”.)
‘\#’ refers to the count of replacements already made in this command,
as a decimal number.  In the first replacement, ‘\#’ stands for ‘0’; in
the second, for ‘1’; and so on.  For example,

     M-x replace-regexp <RET> c[ad]+r <RET> \&-safe <RET>

replaces (for example) ‘cadr’ with ‘cadr-safe’ and ‘cddr’ with
‘cddr-safe’.

     M-x replace-regexp <RET> \(c[ad]+r\)-safe <RET> \1 <RET>

performs the inverse transformation.  To include a ‘\’ in the text to
replace with, you must enter ‘\\’.

   If you want to enter part of the replacement string by hand each
time, use ‘\?’ in the replacement string.  Each replacement will ask you
to edit the replacement string in the minibuffer, putting point where
the ‘\?’ was.

   The remainder of this subsection is intended for specialized tasks
and requires knowledge of Lisp.  Most readers can skip it.

   You can use Lisp expressions to calculate parts of the replacement
string.  To do this, write ‘\,’ followed by the expression in the
replacement string.  Each replacement calculates the value of the
expression and converts it to text without quoting (if it’s a string,
this means using the string’s contents), and uses it in the replacement
string in place of the expression itself.  If the expression is a
symbol, one space in the replacement string after the symbol name goes
with the symbol name, so the value replaces them both.

   Inside such an expression, you can use some special sequences.  ‘\&’
and ‘\D’ refer here, as usual, to the entire match as a string, and to a
submatch as a string.  D may be multiple digits, and the value of ‘\D’
is ‘nil’ if the D’th parenthesized grouping did not match.  You can also
use ‘\#&’ and ‘\#D’ to refer to those matches as numbers (this is valid
when the match or submatch has the form of a numeral).  ‘\#’ here too
stands for the number of already-completed replacements.

   For example, we can exchange ‘x’ and ‘y’ this way:

     M-x replace-regexp <RET> \(x\)\|y <RET>
     \,(if \1 "y" "x") <RET>

   For computing replacement strings for ‘\,’, the ‘format’ function is
often useful (*note (elisp)Formatting Strings::).  For example, to add
consecutively numbered strings like ‘ABC00042’ to columns 73 to 80
(unless they are already occupied), you can use

     M-x replace-regexp <RET> ^.\{0,72\}$ <RET>
     \,(format "%-72sABC%05d" \& \#) <RET>


File: emacs.info,  Node: Replacement and Lax Matches,  Next: Query Replace,  Prev: Regexp Replace,  Up: Replace

16.10.3 Replace Commands and Lax Matches
----------------------------------------

This subsection describes the behavior of replace commands with respect
to lax matches (*note Lax Search::) and how to customize it.  In
general, replace commands mostly default to stricter matching than their
search counterparts.

   Unlike incremental search, the replacement commands do not use lax
space matching (*note lax space matching: Lax Search.) by default.  To
enable lax space matching for replacement, change the variable
‘replace-lax-whitespace’ to non-‘nil’.  (This only affects how Emacs
finds the text to replace, not the replacement text.)

   A companion variable ‘replace-regexp-lax-whitespace’ controls whether
‘query-replace-regexp’ uses lax whitespace matching when searching for
patterns.

   If the first argument of a replace command is all lower case, the
command ignores case while searching for occurrences to replace—provided
‘case-fold-search’ is non-‘nil’ and ‘search-upper-case’ is also
non-‘nil’.  If ‘search-upper-case’ (*note search-upper-case: Lax
Search.) is ‘nil’, whether searching ignores case is determined by
‘case-fold-search’ alone, regardless of letter-case of the command’s
first argument.  If ‘case-fold-search’ is set to ‘nil’, case is always
significant in all searches.

   In addition, when the second argument of a replace command is all or
partly lower case, replacement commands try to preserve the case pattern
of each occurrence.  Thus, the command

     M-x replace-string <RET> foo <RET> bar <RET>

replaces a lower case ‘foo’ with a lower case ‘bar’, an all-caps ‘FOO’
with ‘BAR’, and a capitalized ‘Foo’ with ‘Bar’.  (These three
alternatives—lower case, all caps, and capitalized, are the only ones
that ‘replace-string’ can distinguish.)

   If upper-case letters are used in the replacement string, they remain
upper case every time that text is inserted.  If upper-case letters are
used in the first argument, the second argument is always substituted
exactly as given, with no case conversion.  Likewise, if either
‘case-replace’ or ‘case-fold-search’ is set to ‘nil’, replacement is
done without case conversion.

   The replacement commands by default do not use character folding
(*note character folding: Lax Search.) when looking for the text to
replace.  To enable character folding for matching in ‘query-replace’
and ‘replace-string’, set the variable ‘replace-char-fold’ to a
non-‘nil’ value.  (This setting does not affect the replacement text,
only how Emacs finds the text to replace.  It also doesn’t affect
‘replace-regexp’.)


File: emacs.info,  Node: Query Replace,  Prev: Replacement and Lax Matches,  Up: Replace

16.10.4 Query Replace
---------------------

‘M-% STRING <RET> NEWSTRING <RET>’
     Replace some occurrences of STRING with NEWSTRING.
‘C-M-% REGEXP <RET> NEWSTRING <RET>’
     Replace some matches for REGEXP with NEWSTRING.

   If you want to change only some of the occurrences of ‘foo’ to ‘bar’,
not all of them, use ‘M-%’ (‘query-replace’).  This command finds
occurrences of ‘foo’ one by one, displays each occurrence and asks you
whether to replace it.  Aside from querying, ‘query-replace’ works just
like ‘replace-string’ (*note Unconditional Replace::).  In particular,
it preserves case provided ‘case-replace’ is non-‘nil’, as it normally
is (*note Replacement and Lax Matches::).  A numeric argument means to
consider only occurrences that are bounded by word-delimiter characters.
A negative prefix argument replaces backward.

   ‘C-M-%’ performs regexp search and replace (‘query-replace-regexp’).
It works like ‘replace-regexp’ except that it queries like
‘query-replace’.

   You can reuse earlier replacements with these commands.  When
‘query-replace’ or ‘query-replace-regexp’ prompts for the search string,
use ‘M-p’ and ‘M-n’ to show previous replacements in the form ‘FROM ->
TO’, where FROM is the search pattern, TO is its replacement, and the
separator between them is determined by the value of the variable
‘query-replace-from-to-separator’.  Type <RET> to select the desired
replacement.  If the value of this variable is ‘nil’, replacements are
not added to the command history, and cannot be reused.

   These commands highlight the current match using the face
‘query-replace’.  You can disable this highlight by setting the variable
‘query-replace-highlight’ to ‘nil’.  They highlight other matches using
‘lazy-highlight’ just like incremental search (*note Incremental
Search::); this can be disabled by setting
‘query-replace-lazy-highlight’ to ‘nil’.  By default,
‘query-replace-regexp’ will show the substituted replacement string for
the current match in the minibuffer.  If you want to keep special
sequences ‘\&’ and ‘\N’ unexpanded, customize
‘query-replace-show-replacement’ variable.  Like
‘search-highlight-submatches’ highlights subexpressions in incremental
search (*note Search Customizations::), the variable
‘query-replace-highlight-submatches’ defines whether to highlight
subexpressions in the regexp replacement commands.

   The variable ‘query-replace-skip-read-only’, if set non-‘nil’, will
cause replacement commands to ignore matches in read-only text.  The
default is not to ignore them.

   The characters you can type when you are shown a match for the string
or regexp are:

‘<SPC>’
‘y’
     to replace the occurrence with NEWSTRING.

‘<DEL>’
‘<Delete>’
‘<BACKSPACE>’
‘n’
     to skip to the next occurrence without replacing this one.

‘, (Comma)’
     to replace this occurrence and display the result.  You are then
     asked for another input character to say what to do next.  Since
     the replacement has already been made, <DEL> and <SPC> are
     equivalent in this situation; both move to the next occurrence.

     You can type ‘C-r’ at this point (see below) to alter the replaced
     text.  You can also undo the replacement with the ‘undo’ command
     (e.g., type ‘C-x u’; *note Undo::); this exits the ‘query-replace’,
     so if you want to do further replacement you must use ‘C-x <ESC>
     <ESC> <RET>’ to restart (*note Repetition::).

‘<RET>’
‘q’
     to exit without doing any more replacements.

‘. (Period)’
     to replace this occurrence and then exit without searching for more
     occurrences.

‘!’
     to replace all remaining occurrences without asking again.

‘^’
     to go back to the position of the previous occurrence (or what used
     to be an occurrence), in case you changed it by mistake or want to
     reexamine it.

‘u’
     to undo the last replacement and go back to where that replacement
     was made.

‘U’
     to undo all the replacements and go back to where the first
     replacement was made.

‘C-r’
     to enter a recursive editing level, in case the occurrence needs to
     be edited rather than just replaced with NEWSTRING.  When you are
     done, exit the recursive editing level with ‘C-M-c’ to proceed to
     the next occurrence.  *Note Recursive Edit::.

‘C-w’
     to delete the occurrence, and then enter a recursive editing level
     as in ‘C-r’.  Use the recursive edit to insert text to replace the
     deleted occurrence of STRING.  When done, exit the recursive
     editing level with ‘C-M-c’ to proceed to the next occurrence.

‘e’
     to edit the replacement string in the minibuffer.  When you exit
     the minibuffer by typing <RET>, the minibuffer contents replace the
     current occurrence of the pattern.  They also become the new
     replacement string for any further occurrences.

‘E’
     is like ‘e’, but the next replacement will be done with exact case.
     I.e., if you have a ‘query-replace’ from ‘foo’ to ‘bar’, a text
     like ‘Foo’ will be normally be replaced with ‘Bar’.  Use this
     command to do the current replacement with exact case.

‘C-l’
     to redisplay the screen.  Then you must type another character to
     specify what to do with this occurrence.

‘Y (Upper-case)’
     to replace all remaining occurrences in all remaining buffers in
     multi-buffer replacements (like the Dired ‘Q’ command that performs
     query replace on selected files).  It answers this question and all
     subsequent questions in the series with “yes”, without further user
     interaction.

‘N (Upper-case)’
     to skip to the next buffer in multi-buffer replacements without
     replacing remaining occurrences in the current buffer.  It answers
     this question “no”, gives up on the questions for the current
     buffer, and continues to the next buffer in the sequence.

‘C-h’
‘?’
‘<F1>’
     to display a message summarizing these options.  Then you must type
     another character to specify what to do with this occurrence.

   Aside from this, any other character exits the ‘query-replace’, and
is then reread as part of a key sequence.  Thus, if you type ‘C-k’, it
exits the ‘query-replace’ and then kills to end of line.  In particular,
‘C-g’ simply exits the ‘query-replace’.

   To restart a ‘query-replace’ once it is exited, use ‘C-x <ESC>
<ESC>’, which repeats the ‘query-replace’ because it used the minibuffer
to read its arguments.  *Note C-x <ESC> <ESC>: Repetition.

   The option ‘search-invisible’ determines how ‘query-replace’ treats
invisible text.  *Note Outline Search::.

   *Note Operating on Files::, for the Dired ‘Q’ command which performs
query replace on selected files.  See also *note Transforming File
Names::, for Dired commands to rename, copy, or link files by replacing
regexp matches in file names.


File: emacs.info,  Node: Other Repeating Search,  Next: Search Customizations,  Prev: Replace,  Up: Search

16.11 Other Search-and-Loop Commands
====================================

Here are some other commands that find matches for regular expressions.
They all ignore case in matching, if the pattern contains no upper-case
letters and ‘case-fold-search’ is non-‘nil’.  Aside from ‘multi-occur’
and ‘multi-occur-in-matching-buffers’, which always search the whole
buffer, all of the commands operate on the text from point to the end of
the buffer, or on the region if it is active.

‘M-x multi-isearch-buffers’
     Prompt for one or more buffer names, ending with <RET>; then, begin
     a multi-buffer incremental search in those buffers.  (If the search
     fails in one buffer, the next ‘C-s’ tries searching the next
     specified buffer, and so forth.)  With a prefix argument, prompt
     for a regexp and begin a multi-buffer incremental search in buffers
     matching that regexp.

‘M-x multi-isearch-buffers-regexp’
     This command is just like ‘multi-isearch-buffers’, except it
     performs an incremental regexp search.

‘M-x multi-isearch-files’
     Prompt for one or more file names, ending with <RET>; then, begin a
     multi-file incremental search in those files.  (If the search fails
     in one file, the next ‘C-s’ tries searching the next specified
     file, and so forth.)  With a prefix argument, prompt for a regexp
     and begin a multi-file incremental search in files matching that
     regexp.

‘M-x multi-isearch-files-regexp’
     This command is just like ‘multi-isearch-files’, except it performs
     an incremental regexp search.

     In some modes that set the buffer-local variable
     ‘multi-isearch-next-buffer-function’ (e.g., in Change Log mode) a
     multi-file incremental search is activated automatically.

‘M-x occur’
‘M-s o’
     Prompt for a regexp, and display a list showing each line in the
     buffer that contains a match for it.  If you type ‘M-n’ at the
     prompt, you can reuse search strings from previous incremental
     searches.  The text that matched is highlighted using the ‘match’
     face.  A numeric argument N specifies that N lines of context are
     to be displayed before and after each matching line.

     The default number of context lines is specified by the variable
     ‘list-matching-lines-default-context-lines’.  When
     ‘list-matching-lines-jump-to-current-line’ is non-‘nil’ the current
     line is shown highlighted with face
     ‘list-matching-lines-current-line-face’ and the point is set at the
     first match after such line.

     You can also run ‘M-s o’ when an incremental search is active; this
     uses the current search string.

     Note that matches for the regexp you type are extended to include
     complete lines, and a match that starts before the previous match
     ends is not considered a match.

     The ‘*Occur*’ buffer uses the Occur mode as its major mode.  You
     can use the ‘n’ and ‘p’ keys to move to the next or previous match;
     with prefix numeric argument, these commands move that many
     matches.  Digit keys are bound to ‘digit-argument’, so ‘5 n’ moves
     to the fifth next match (you don’t have to type ‘C-u’).  <SPC> and
     <DEL> scroll the ‘*Occur*’ buffer up and down.  Clicking on a match
     or moving point there and typing <RET> visits the corresponding
     position in the original buffer that was searched.  ‘o’ and ‘C-o’
     display the match in another window; ‘C-o’ does not select that
     window.  Alternatively, you can use the ‘M-g M-n’ (‘next-error’)
     command to visit the occurrences one by one (*note Compilation
     Mode::).  Finally, ‘q’ quits the window showing the ‘*Occur*’
     buffer and buries the buffer.

     Typing ‘e’ in the ‘*Occur*’ buffer makes the buffer writable and
     enters the Occur Edit mode, in which you can edit the matching
     lines and have those edits reflected in the text in the originating
     buffer.  Type ‘C-c C-c’ to leave the Occur Edit mode and return to
     the Occur mode.

     The command ‘M-x list-matching-lines’ is a synonym for ‘M-x occur’.

‘M-x multi-occur’
     This command is just like ‘occur’, except it is able to search
     through multiple buffers.  It asks you to specify the buffer names
     one by one.

‘M-x multi-occur-in-matching-buffers’
     This command is similar to ‘multi-occur’, except the buffers to
     search are specified by a regular expression that matches visited
     file names.  With a prefix argument, it uses the regular expression
     to match buffer names instead.

‘M-x how-many’
     Prompt for a regexp, and print the number of matches for it in the
     buffer after point.  If the region is active, this operates on the
     region instead.

‘M-x flush-lines’
     Prompt for a regexp, and delete each line that contains a match for
     it, operating on the text after point.  When the command finishes,
     it prints the number of deleted matching lines.

     This command deletes the current line if it contains a match
     starting after point.  If the region is active, it operates on the
     region instead; if a line partially contained in the region
     contains a match entirely contained in the region, it is deleted.

     If a match is split across lines, ‘flush-lines’ deletes all those
     lines.  It deletes the lines before starting to look for the next
     match; hence, it ignores a match starting on the same line at which
     another match ended.

‘M-x keep-lines’
     Prompt for a regexp, and delete each line that _does not_ contain a
     match for it, operating on the text after point.  If point is not
     at the beginning of a line, this command always keeps the current
     line.  If the region is active, the command operates on the region
     instead; it never deletes lines that are only partially contained
     in the region (a newline that ends a line counts as part of that
     line).

     If a match is split across lines, this command keeps all those
     lines.

‘M-x kill-matching-lines’
     Like ‘flush-lines’, but also add the matching lines to the kill
     ring.  The command adds the matching lines to the kill ring as a
     single string, including the newlines that separated the lines.

‘M-x copy-matching-lines’
     Like ‘kill-matching-lines’, but the matching lines are not removed
     from the buffer.


File: emacs.info,  Node: Search Customizations,  Prev: Other Repeating Search,  Up: Search

16.12 Tailoring Search to Your Needs
====================================

This section describes miscellaneous search-related customizations not
described elsewhere.

   The default search mode for the incremental search is specified by
the variable ‘search-default-mode’.  It can be ‘nil’, ‘t’, or a
function.  If it is ‘nil’, the default mode is to do literal searches
without character folding, but with case folding and lax-whitespace
matches as determined by ‘case-fold-search’ and
‘search-whitespace-regexp’, respectively (*note Lax Search::).  If the
value is ‘t’, incremental search defaults to regexp searches.  The
default value specifies a function that only performs case folding and
lax-whitespace matching.

   The current match of an on-going incremental search is highlighted
using the ‘isearch’ face.  This highlighting can be disabled by setting
the variable ‘search-highlight’ to ‘nil’.

   When searching for regular expressions (with ‘C-M-s’, for instance),
subexpressions receive special highlighting depending on the
‘search-highlight-submatches’ variable.  If this variable’s value is
‘nil’, no special highlighting is done, but if the value is non-‘nil’,
text that matches ‘\( ... \)’ constructs (a.k.a. “subexpressions”) in
the regular expression will be highlighted with distinct faces.  By
default, two distinct faces are defined, named ‘isearch-group-1’ and
‘isearch-group-2’.  With these two faces, odd-numbered subexpressions
will be highlighted using the ‘isearch-group-1’ face and even-numbered
subexpressions will be highlighted using the ‘isearch-group-2’ face.
For instance, when searching for ‘foo-\([0-9]+\)\([a-z]+\)’, the part
matched by ‘[0-9]+’ will be highlighted with the ‘isearch-group-1’ face,
and the part matched by ‘[a-z]+’ will be highlighted using
‘isearch-group-2’.  If you define additional faces using the same
numbering scheme, i.e. ‘isearch-group-3’, ‘isearch-group-4’, ..., then
the face ‘isearch-group-M’ will be used to highlight the M’th, ‘N+M’’th,
‘2N+M’’th, ... subexpressions, where N is the total number of faces of
the form ‘isearch-group-M’.

   The other matches for the search string that are visible on display
are highlighted using the ‘lazy-highlight’ face.  Setting the variable
‘isearch-lazy-highlight’ to ‘nil’ disables this highlighting.  Here are
some other variables that customize the lazy highlighting:

‘lazy-highlight-initial-delay’
     Time in seconds to wait before highlighting visible matches.
     Applies only if the search string is less than
     ‘lazy-highlight-no-delay-length’ characters long.

‘lazy-highlight-no-delay-length’
     For search strings at least as long as the value of this variable,
     lazy highlighting of matches starts immediately.

‘lazy-highlight-interval’
     Time in seconds between highlighting successive matches.

‘lazy-highlight-max-at-a-time’
     The maximum number of matches to highlight before checking for
     input.  A large number can take some time to highlight, so if you
     want to continue searching and type ‘C-s’ or ‘C-r’ during that
     time, Emacs will not respond until it finishes highlighting all
     those matches.  Thus, smaller values make Emacs more responsive.

‘isearch-lazy-count’
     Show the current match number and the total number of matches in
     the search prompt.

‘lazy-count-prefix-format’
‘lazy-count-suffix-format’
     These two variables determine the format of showing the current and
     the total number of matches for ‘isearch-lazy-count’.

   Normally, entering <RET> within incremental search when the search
string is empty launches a nonincremental search.  (Actually, it lets
you edit the search string, and the next <RET> does the search.)
However, if you customize the variable ‘search-nonincremental-instead’
to ‘nil’, typing <RET> will always exit the incremental search, even if
the search string is empty.

   By default, incremental search and query-replace commands match
invisible text, but hide any such matches as soon as the current match
moves off the invisible text.  If you customize the variable
‘isearch-hide-immediately’ to ‘nil’, any invisible text where matches
were found stays on display until the search or the replace command
exits.

   Searching incrementally on slow terminals, such as displays connected
to remote machines over slow connection, could be annoying due to the
need to redraw large portions of the display as the search proceeds.
Emacs provides a special display mode for slow terminals, whereby search
pops up a separate small window and displays the text surrounding the
match in that window.  Small windows display faster, so the annoying
effect of slow speed is alleviated.  The variable ‘search-slow-speed’
determines the baud rate threshold below which Emacs will use this
display mode.  The variable ‘search-slow-window-lines’ controls the
number of lines in the window Emacs pops up for displaying the search
results; the default is 1 line.  Normally, this window will pop up at
the bottom of the window that displays the buffer where you start
searching, but if the value of ‘search-slow-window-lines’ is negative,
that means to put the window at the top and give it the number of lines
that is the absolute value of ‘search-slow-window-lines’.


File: emacs.info,  Node: Fixit,  Next: Keyboard Macros,  Prev: Search,  Up: Top

# /. 17 Commands for Fixing Typos
********************************

In this chapter we describe commands that are useful when you catch a
mistake while editing.  The most fundamental of these commands is the
undo command ‘C-/’ (also bound to ‘C-x u’ and ‘C-_’).  This undoes a
single command, or a part of a command (as in the case of
‘query-replace’), or several consecutive character insertions.
Consecutive repetitions of ‘C-/’ undo earlier and earlier changes, back
to the limit of the undo information available.

   Aside from the commands described here, you can erase text using
deletion commands such as <DEL> (‘delete-backward-char’).  These were
described earlier in this manual.  *Note Erasing::.

* Menu:

* Undo::        The Undo commands.
* Transpose::   Exchanging two characters, words, lines, lists...
* Fixing Case:: Correcting case of last word entered.
* Spelling::    Apply spelling checker to a word, or a whole file.


File: emacs.info,  Node: Undo,  Next: Transpose,  Up: Fixit

17.1 Undo
=========

The “undo” command reverses recent changes in the buffer’s text.  Each
buffer records changes individually, and the undo command always applies
to the current buffer.  You can undo all the changes in a buffer for as
far back as the buffer’s records go.  Usually, each editing command
makes a separate entry in the undo records, but some commands such as
‘query-replace’ divide their changes into multiple entries for
flexibility in undoing.  Consecutive character insertion commands are
usually grouped together into a single undo record, to make undoing less
tedious.

‘C-/’
‘C-x u’
‘C-_’
     Undo one entry in the current buffer’s undo records (‘undo’).

   To begin to undo, type ‘C-/’ (or its aliases, ‘C-_’ or ‘C-x u’)(1).
This undoes the most recent change in the buffer, and moves point back
to where it was before that change.  Consecutive repetitions of ‘C-/’
(or its aliases) undo earlier and earlier changes in the current buffer.
If all the recorded changes have already been undone, the undo command
signals an error.

   Any command other than an undo command breaks the sequence of undo
commands.  Starting from that moment, the entire sequence of undo
commands that you have just performed are themselves placed into the
undo record.  Therefore, to re-apply changes you have undone, type ‘C-f’
or any other command that harmlessly breaks the sequence of undoing;
then type ‘C-/’ one or more times to undo some of the undo commands.

   Alternatively, if you want to resume undoing, without redoing
previous undo commands, use ‘M-x undo-only’.  This is like ‘undo’, but
will not redo changes you have just undone.  To complement it, ‘M-x
undo-redo’ will undo previous undo commands (and will not record itself
as an undoable command).

   If you notice that a buffer has been modified accidentally, the
easiest way to recover is to type ‘C-/’ repeatedly until the stars
disappear from the front of the mode line (*note Mode Line::).  Whenever
an undo command makes the stars disappear from the mode line, it means
that the buffer contents are the same as they were when the file was
last read in or saved.  If you do not remember whether you changed the
buffer deliberately, type ‘C-/’ once.  When you see the last change you
made undone, you will see whether it was an intentional change.  If it
was an accident, leave it undone.  If it was deliberate, redo the change
as described above.

   Alternatively, you can discard all the changes since the buffer was
last visited or saved with ‘M-x revert-buffer’ (*note Reverting::).

   When there is an active region, any use of ‘undo’ performs “selective
undo”: it undoes the most recent change within the region, instead of
the entire buffer.  However, when Transient Mark mode is off (*note
Disabled Transient Mark::), ‘C-/’ always operates on the entire buffer,
ignoring the region.  In this case, you can perform selective undo by
supplying a prefix argument to the ‘undo’ command: ‘C-u C-/’.  To undo
further changes in the same region, repeat the ‘undo’ command (no prefix
argument is needed).

   Some specialized buffers do not make undo records.  Buffers whose
names start with spaces never do; these buffers are used internally by
Emacs to hold text that users don’t normally look at or edit.

   When the undo information for a buffer becomes too large, Emacs
discards the oldest records from time to time (during “garbage
collection”).  You can specify how much undo information to keep by
setting the variables ‘undo-limit’, ‘undo-strong-limit’, and
‘undo-outer-limit’.  Their values are expressed in bytes.

   The variable ‘undo-limit’ sets a soft limit: Emacs keeps undo data
for enough commands to reach this size, and perhaps exceed it, but does
not keep data for any earlier commands beyond that.  Its default value
is 160000.  The variable ‘undo-strong-limit’ sets a stricter limit: any
previous command (though not the most recent one) that pushes the size
past this amount is forgotten.  The default value of ‘undo-strong-limit’
is 240000.

   Regardless of the values of those variables, the most recent change
is never discarded unless it gets bigger than ‘undo-outer-limit’
(normally 24,000,000).  At that point, Emacs discards the undo data and
warns you about it.  This is the only situation in which you cannot undo
the last command.  If this happens, you can increase the value of
‘undo-outer-limit’ to make it even less likely to happen in the future.
But if you didn’t expect the command to create such large undo data,
then it is probably a bug and you should report it.  *Note Reporting
Bugs: Bugs.

   ---------- Footnotes ----------

   (1) Aside from ‘C-/’, the ‘undo’ command is also bound to ‘C-x u’
because that is more straightforward for beginners to remember: ‘u’
stands for “undo”.  It is also bound to ‘C-_’ because typing ‘C-/’ on
some text terminals actually enters ‘C-_’.


File: emacs.info,  Node: Transpose,  Next: Fixing Case,  Prev: Undo,  Up: Fixit

17.2 Transposing Text
=====================

‘C-t’
     Transpose two characters (‘transpose-chars’).
‘M-t’
     Transpose two words (‘transpose-words’).
‘C-M-t’
     Transpose two balanced expressions (‘transpose-sexps’).
‘C-x C-t’
     Transpose two lines (‘transpose-lines’).
‘M-x transpose-sentences’
     Transpose two sentences (‘transpose-sentences’).
‘M-x transpose-paragraphs’
     Transpose two paragraphs (‘transpose-paragraphs’).
‘M-x transpose-regions’
     Transpose two regions.

   The common error of transposing two characters can be fixed, when
they are adjacent, with the ‘C-t’ command (‘transpose-chars’).
Normally, ‘C-t’ transposes the two characters on either side of point.
When given at the end of a line, rather than transposing the last
character of the line with the newline, which would be useless, ‘C-t’
transposes the last two characters on the line.  So, if you catch your
transposition error right away, you can fix it with just a ‘C-t’.  If
you don’t catch it so fast, you must move the cursor back between the
two transposed characters before you type ‘C-t’.  If you transposed a
space with the last character of the word before it, the word motion
commands (‘M-f’, ‘M-b’, etc.)  are a good way of getting there.
Otherwise, a reverse search (‘C-r’) is often the best way.  *Note
Search::.

   ‘M-t’ transposes the word before point with the word after point
(‘transpose-words’).  It moves point forward over a word, dragging the
word preceding or containing point forward as well.  The punctuation
characters between the words do not move.  For example, ‘FOO, BAR’
transposes into ‘BAR, FOO’ rather than ‘BAR FOO,’.  When point is at the
end of the line, it will transpose the word before point with the first
word on the next line.

   ‘C-M-t’ (‘transpose-sexps’) is a similar command for transposing two
expressions (*note Expressions::), and ‘C-x C-t’ (‘transpose-lines’)
exchanges lines.  ‘M-x transpose-sentences’ and ‘M-x
transpose-paragraphs’ transpose sentences and paragraphs, respectively.
These commands work like ‘M-t’ except as regards the units of text they
transpose.

   A numeric argument to a transpose command serves as a repeat count:
it tells the transpose command to move the character (or word or
expression or line) before or containing point across several other
characters (or words or expressions or lines).  For example, ‘C-u 3 C-t’
moves the character before point forward across three other characters.
It would change ‘f★oobar’ into ‘oobf★ar’.  This is equivalent to
repeating ‘C-t’ three times.  ‘C-u - 4 M-t’ moves the word before point
backward across four words.  ‘C-u - C-M-t’ would cancel the effect of
plain ‘C-M-t’.

   A numeric argument of zero is assigned a special meaning (because
otherwise a command with a repeat count of zero would do nothing): to
transpose the character (or word or expression or line) ending after
point with the one ending after the mark.

   ‘M-x transpose-regions’ transposes the text between point and mark
with the text between the last two marks pushed to the mark ring (*note
Setting Mark::).  With a numeric prefix argument, it transposes the text
between point and mark with the text between two successive marks that
many entries back in the mark ring.  This command is best used for
transposing multiple characters (or words or sentences or paragraphs) in
one go.


File: emacs.info,  Node: Fixing Case,  Next: Spelling,  Prev: Transpose,  Up: Fixit

17.3 Case Conversion
====================

‘M-- M-l’
     Convert last word to lower case.  Note ‘Meta--’ is Meta-minus.
‘M-- M-u’
     Convert last word to all upper case.
‘M-- M-c’
     Convert last word to lower case with capital initial.

   A very common error is to type words in the wrong case.  Because of
this, the word case-conversion commands ‘M-l’, ‘M-u’, and ‘M-c’ have a
special feature when used with a negative argument: they do not move the
cursor.  As soon as you see you have mistyped the last word, you can
simply case-convert it and go on typing.  *Note Case::.


File: emacs.info,  Node: Spelling,  Prev: Fixing Case,  Up: Fixit

17.4 Checking and Correcting Spelling
=====================================

This section describes the commands to check the spelling of a single
word or of a portion of a buffer.  These commands only work if a
spelling checker program, one of Hunspell, Aspell, Ispell or Enchant, is
installed.  These programs are not part of Emacs, but one of them is
usually installed on GNU/Linux and other free operating systems.  *Note
Aspell: (aspell)Top.

   If you have only one of the spelling checker programs installed,
Emacs will find it when you invoke for the first time one of the
commands described here.  If you have more than one of them installed,
you can control which one is used by customizing the variable
‘ispell-program-name’.

‘M-$’
     Check and correct spelling of the word at point (‘ispell-word’).
     If the region is active, do it for all words in the region instead.
‘M-x ispell’
     Check and correct spelling of all words in the buffer.  If the
     region is active, do it for all words in the region instead.
‘M-x ispell-buffer’
     Check and correct spelling in the buffer.
‘M-x ispell-region’
     Check and correct spelling in the region.
‘M-x ispell-message’
     Check and correct spelling in a draft mail message, excluding cited
     material.
‘M-x ispell-comments-and-strings’
     Check and correct spelling of comments and strings in the buffer or
     region.
‘M-x ispell-comment-or-string-at-point’
     Check the comment or string at point.
‘M-x ispell-change-dictionary <RET> DICT <RET>’
     Restart the spell-checker process, using DICT as the dictionary.
‘M-x ispell-kill-ispell’
     Kill the spell-checker subprocess.
‘M-<TAB>’
‘<ESC> <TAB>’
‘C-M-i’
     Complete the word before point based on the spelling dictionary
     (‘ispell-complete-word’).
‘M-x flyspell-mode’
     Enable Flyspell mode, which highlights all misspelled words.
‘M-x flyspell-prog-mode’
     Enable Flyspell mode for comments and strings only.

   To check the spelling of the word around or before point, and
optionally correct it as well, type ‘M-$’ (‘ispell-word’).  If a region
is active, ‘M-$’ checks the spelling of all words within the region.
*Note Mark::.  (When Transient Mark mode is off, ‘M-$’ always acts on
the word around or before point, ignoring the region; *note Disabled
Transient Mark::.)

   Similarly, the command ‘M-x ispell’ performs spell-checking in the
region if one is active, or in the entire buffer otherwise.  The
commands ‘M-x ispell-buffer’ and ‘M-x ispell-region’ explicitly perform
spell-checking on the entire buffer or the region respectively.  To
check spelling in an email message you are writing, use
‘M-x ispell-message’; that command checks the whole buffer, except for
material that is indented or appears to be cited from other messages.
*Note Sending Mail::.  When dealing with source code, you can use ‘M-x
ispell-comments-and-strings’ or ‘M-x ispell-comment-or-string-at-point’
to check only comments or string literals.

   When one of these commands encounters what appears to be an incorrect
word, it asks you what to do.  It usually displays a list of numbered
“near-misses”—words that are close to the incorrect word.  Then you must
type a single-character response.  Here are the valid responses:

‘DIGIT’
     Replace the word, just this time, with one of the displayed
     near-misses.  Each near-miss is listed with a digit; type that
     digit to select it.

‘<SPC>’
     Skip this word—continue to consider it incorrect, but don’t change
     it here.

‘r NEW <RET>’
     Replace the word, just this time, with NEW.  (The replacement
     string will be rescanned for more spelling errors.)

‘R NEW <RET>’
     Replace the word with NEW, and do a ‘query-replace’ so you can
     replace it elsewhere in the buffer if you wish.  (The replacements
     will be rescanned for more spelling errors.)

‘a’
     Accept the incorrect word—treat it as correct, but only in this
     editing session.

‘A’
     Accept the incorrect word—treat it as correct, but only in this
     editing session and for this buffer.

‘i’
     Insert this word in your private dictionary file so that it will be
     considered correct from now on, even in future sessions.

‘m’
     Like ‘i’, but you can also specify dictionary completion
     information.

‘u’
     Insert the lower-case version of this word in your private
     dictionary file.

‘l WORD <RET>’
     Look in the dictionary for words that match WORD.  These words
     become the new list of near-misses; you can select one of them as
     the replacement by typing a digit.  You can use ‘*’ in WORD as a
     wildcard.

‘C-g’
‘X’
     Quit interactive spell-checking, leaving point at the word that was
     being checked.  You can restart checking again afterward with
     ‘C-u M-$’.

‘x’
     Quit interactive spell-checking and move point back to where it was
     when you started spell-checking.

‘q’
     Quit interactive spell-checking and kill the spell-checker
     subprocess.

‘?’
     Show the list of options.

   In Text mode and related modes, ‘M-<TAB>’ (‘ispell-complete-word’)
performs in-buffer completion based on spelling correction.  Insert the
beginning of a word, and then type ‘M-<TAB>’; this shows a list of
completions.  (If your window manager intercepts ‘M-<TAB>’, type
‘<ESC> <TAB>’ or ‘C-M-i’.)  Each completion is listed with a digit or
character; type that digit or character to choose it.

   Once started, the spell-checker subprocess continues to run, waiting
for something to do, so that subsequent spell-checking commands complete
more quickly.  If you want to get rid of the process, use
‘M-x ispell-kill-ispell’.  This is not usually necessary, since the
process uses no processor time except when you do spelling correction.

   Spell-checkers look up spelling in two dictionaries: the standard
dictionary and your personal dictionary.  The standard dictionary is
specified by the variable ‘ispell-local-dictionary’ or, if that is
‘nil’, by the variable ‘ispell-dictionary’.  If both are ‘nil’, the
spelling program’s default dictionary is used.  The command
‘M-x ispell-change-dictionary’ sets the standard dictionary for the
buffer and then restarts the subprocess, so that it will use a different
standard dictionary.  Your personal dictionary is specified by the
variable ‘ispell-personal-dictionary’.  If that is ‘nil’, the spelling
program looks for a personal dictionary in a default location, which is
specific to each spell-checker.

   A separate dictionary is used for word completion.  The variable
‘ispell-complete-word-dict’ specifies the file name of this dictionary.
The completion dictionary must be different because it cannot use the
information about roots and affixes of the words, which spell-checking
uses to detect variations of words.  For some languages, there is a
spell-checking dictionary but no word completion dictionary.

   Flyspell mode is a minor mode that performs automatic spell-checking
of the text you type as you type it.  When it finds a word that it does
not recognize, it highlights that word.  Type ‘M-x flyspell-mode’ to
toggle Flyspell mode in the current buffer.  To enable Flyspell mode in
all text mode buffers, add ‘flyspell-mode’ to ‘text-mode-hook’.  *Note
Hooks::.  Note that, as Flyspell mode needs to check each word across
which you move, it will slow down cursor motion and scrolling commands.
It also doesn’t automatically check the text you didn’t type or move
across; use ‘flyspell-region’ or ‘flyspell-buffer’ for that.

   When Flyspell mode highlights a word as misspelled, you can click on
it with ‘mouse-2’ (‘flyspell-correct-word’) to display a menu of
possible corrections and actions.  If you want this menu on ‘mouse-3’
instead, enable ‘context-menu-mode’.  In addition, ‘C-.’ or ‘<ESC>
<TAB>’ (‘flyspell-auto-correct-word’) will propose various successive
corrections for the word at point, and ‘C-c $’
(‘flyspell-correct-word-before-point’) will pop up a menu of possible
corrections.  Of course, you can always correct the misspelled word by
editing it manually in any way you like.

   Flyspell Prog mode works just like ordinary Flyspell mode, except
that it only checks words in comments and string constants.  This
feature is useful for editing programs.  Type ‘M-x flyspell-prog-mode’
to enable or disable this mode in the current buffer.  To enable this
mode in all programming mode buffers, add ‘flyspell-prog-mode’ to
‘prog-mode-hook’ (*note Hooks::).


File: emacs.info,  Node: Keyboard Macros,  Next: Files,  Prev: Fixit,  Up: Top

# /. 18 Keyboard Macros
**********************

In this chapter we describe how to record a sequence of editing commands
so you can repeat it conveniently later.

   A “keyboard macro” is a command defined by an Emacs user to stand for
another sequence of keys.  For example, if you discover that you are
about to type ‘C-n M-d C-d’ forty times, you can speed your work by
defining a keyboard macro to do ‘C-n M-d C-d’, and then executing it 39
more times.

   You define a keyboard macro by executing and recording the commands
which are its definition.  Put differently, as you define a keyboard
macro, the definition is being executed for the first time.  This way,
you can see the effects of your commands, so that you don’t have to
figure them out in your head.  When you close the definition, the
keyboard macro is defined and also has been, in effect, executed once.
You can then do the whole thing over again by invoking the macro.

   Keyboard macros differ from ordinary Emacs commands in that they are
written in the Emacs command language rather than in Lisp.  This makes
it easier for the novice to write them, and makes them more convenient
as temporary hacks.  However, the Emacs command language is not powerful
enough as a programming language to be useful for writing anything
intelligent or general.  For such things, Lisp must be used.

* Menu:

* Basic Keyboard Macro::     Defining and running keyboard macros.
* Keyboard Macro Ring::      Where previous keyboard macros are saved.
* Keyboard Macro Counter::   Inserting incrementing numbers in macros.
* Keyboard Macro Query::     Making keyboard macros do different things each
                               time.
* Save Keyboard Macro::      Giving keyboard macros names; saving them in
                               files.
* Edit Keyboard Macro::      Editing keyboard macros.
* Keyboard Macro Step-Edit:: Interactively executing and editing a keyboard
                               macro.


File: emacs.info,  Node: Basic Keyboard Macro,  Next: Keyboard Macro Ring,  Up: Keyboard Macros

18.1 Basic Use
==============

‘<F3>’
     Start defining a keyboard macro
     (‘kmacro-start-macro-or-insert-counter’).
‘<F4>’
     If a keyboard macro is being defined, end the definition;
     otherwise, execute the most recent keyboard macro
     (‘kmacro-end-or-call-macro’).
‘C-u <F3>’
     Re-execute last keyboard macro, then append keys to its definition.
‘C-u C-u <F3>’
     Append keys to the last keyboard macro without re-executing it.
‘C-x C-k r’
     Run the last keyboard macro on each line that begins in the region
     (‘apply-macro-to-region-lines’).
‘C-x (’
     Start defining a keyboard macro (old style) (‘kmacro-start-macro’);
     with a prefix argument, append keys to the last macro.
‘C-x )’
     End a macro definition (old style) (‘kmacro-end-macro’); prefix
     argument serves as the repeat count for executing the macro.
‘C-x e’
     Execute the most recently defined keyboard macro
     (‘kmacro-end-and-call-macro’); prefix argument serves as repeat
     count.

   To start defining a keyboard macro, type <F3>.  From then on, your
keys continue to be executed, but also become part of the definition of
the macro.  ‘Def’ appears in the mode line to remind you of what is
going on.  When you are finished, type <F4> (‘kmacro-end-or-call-macro’)
to terminate the definition.  For example,

     <F3> M-f foo <F4>

defines a macro to move forward a word and then insert ‘foo’.  Note that
<F3> and <F4> do not become part of the macro.

   After defining the macro, you can call it with <F4>.  For the above
example, this has the same effect as typing ‘M-f foo’ again.  (Note the
two roles of the <F4> command: it ends the macro if you are in the
process of defining one, or calls the last macro otherwise.)  You can
also supply <F4> with a numeric prefix argument ‘n’, which means to
invoke the macro ‘n’ times.  An argument of zero repeats the macro
indefinitely, until it gets an error or you type ‘C-g’ (or, on MS-DOS,
‘C-<Break>’).

   The above example demonstrates a handy trick that you can employ with
keyboard macros: if you wish to repeat an operation at regularly spaced
places in the text, include a motion command as part of the macro.  In
this case, repeating the macro inserts the string ‘foo’ after each
successive word.

   After terminating the definition of a keyboard macro, you can append
more keystrokes to its definition by typing ‘C-u <F3>’.  This is
equivalent to plain <F3> followed by retyping the whole definition so
far.  As a consequence, it re-executes the macro as previously defined.
If you change the variable ‘kmacro-execute-before-append’ to ‘nil’, the
existing macro will not be re-executed before appending to it (the
default is ‘t’).  You can also add to the end of the definition of the
last keyboard macro without re-executing it by typing ‘C-u C-u <F3>’.

   When a command reads an argument with the minibuffer, your minibuffer
input becomes part of the macro along with the command.  So when you
replay the macro, the command gets the same argument as when you entered
the macro.  For example,

     <F3> C-a C-k C-x b foo <RET> C-y C-x b <RET> <F4>

defines a macro that kills the current line, yanks it into the buffer
‘foo’, then returns to the original buffer.

   Most keyboard commands work as usual in a keyboard macro definition,
with some exceptions.  Typing ‘C-g’ (‘keyboard-quit’) quits the keyboard
macro definition.  Typing ‘C-M-c’ (‘exit-recursive-edit’) can be
unreliable: it works as you’d expect if exiting a recursive edit that
started within the macro, but if it exits a recursive edit that started
before you invoked the keyboard macro, it also necessarily exits the
keyboard macro too.  Mouse events are also unreliable, even though you
can use them in a keyboard macro: when the macro replays the mouse
event, it uses the original mouse position of that event, the position
that the mouse had while you were defining the macro.  The effect of
this may be hard to predict.

   The command ‘C-x C-k r’ (‘apply-macro-to-region-lines’) repeats the
last defined keyboard macro on each line that begins in the region.  It
does this line by line, by moving point to the beginning of the line and
then executing the macro.

   In addition to the <F3> and <F4> commands described above, Emacs also
supports an older set of key bindings for defining and executing
keyboard macros.  To begin a macro definition, type ‘C-x (’
(‘kmacro-start-macro’); as with <F3>, a prefix argument appends this
definition to the last keyboard macro.  To end a macro definition, type
‘C-x )’ (‘kmacro-end-macro’).  To execute the most recent macro, type
‘C-x e’ (‘kmacro-end-and-call-macro’).  If you enter ‘C-x e’ while
defining a macro, the macro is terminated and executed immediately.
Immediately after typing ‘C-x e’, you can type ‘e’ repeatedly to
immediately repeat the macro one or more times.  You can also give ‘C-x
e’ a repeat argument, just like <F4> (when it is used to execute a
macro).

   ‘C-x )’ can be given a repeat count as an argument.  This means to
repeat the macro right after defining it.  The macro definition itself
counts as the first repetition, since it is executed as you define it,
so ‘C-u 4 C-x )’ executes the macro immediately 3 additional times.

   While executing a long-running keyboard macro, it can sometimes be
useful to trigger a redisplay (to show how far we’ve gotten).  The ‘C-x
C-k d’ command can be used for this.  As a not very useful example, ‘C-x
( M-f C-x C-k d C-x )’ will create a macro that will redisplay once per
iteration when saying ‘C-u 42 C-x e’.


File: emacs.info,  Node: Keyboard Macro Ring,  Next: Keyboard Macro Counter,  Prev: Basic Keyboard Macro,  Up: Keyboard Macros

18.2 The Keyboard Macro Ring
============================

All defined keyboard macros are recorded in the “keyboard macro ring”.
There is only one keyboard macro ring, shared by all buffers.

‘C-x C-k C-k’
     Execute the keyboard macro at the head of the ring
     (‘kmacro-end-or-call-macro-repeat’).
‘C-x C-k C-n’
     Rotate the keyboard macro ring to the next macro (defined earlier)
     (‘kmacro-cycle-ring-next’).
‘C-x C-k C-p’
     Rotate the keyboard macro ring to the previous macro (defined
     later) (‘kmacro-cycle-ring-previous’).

   All commands which operate on the keyboard macro ring use the same
‘C-x C-k’ prefix.  Most of these commands can be executed and repeated
immediately after each other without repeating the ‘C-x C-k’ prefix.
For example,

     C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d

will rotate the keyboard macro ring to the second-previous macro,
execute the resulting head macro three times, rotate back to the
original head macro, execute that once, rotate to the previous macro,
execute that, and finally delete it from the macro ring.

   The command ‘C-x C-k C-k’ (‘kmacro-end-or-call-macro-repeat’)
executes the keyboard macro at the head of the macro ring.  You can
repeat the macro immediately by typing another ‘C-k’, or you can rotate
the macro ring immediately by typing ‘C-n’ or ‘C-p’.

   When a keyboard macro is being defined, ‘C-x C-k C-k’ behaves like
<F4> except that, immediately afterward, you can use most key bindings
of this section without the ‘C-x C-k’ prefix.  For instance, another
‘C-k’ will re-execute the macro.

   The commands ‘C-x C-k C-n’ (‘kmacro-cycle-ring-next’) and ‘C-x C-k
C-p’ (‘kmacro-cycle-ring-previous’) rotate the macro ring, bringing the
next or previous keyboard macro to the head of the macro ring.  The
definition of the new head macro is displayed in the echo area.  You can
continue to rotate the macro ring immediately by repeating just ‘C-n’
and ‘C-p’ until the desired macro is at the head of the ring.  To
execute the new macro ring head immediately, just type ‘C-k’.

   Note that Emacs treats the head of the macro ring as the last defined
keyboard macro.  For instance, <F4> will execute that macro, and ‘C-x
C-k n’ will give it a name.

   The maximum number of macros stored in the keyboard macro ring is
determined by the customizable variable ‘kmacro-ring-max’.


File: emacs.info,  Node: Keyboard Macro Counter,  Next: Keyboard Macro Query,  Prev: Keyboard Macro Ring,  Up: Keyboard Macros

18.3 The Keyboard Macro Counter
===============================

Each keyboard macro has an associated counter, which is initialized to 0
when you start defining the macro.  This “current counter” allows you to
insert a number into the buffer that depends on the number of times the
macro has been called.  The counter is normally incremented each time
its value is inserted into the buffer.

   In addition to the current counter, keyboard macros also maintain the
“previous counter”, which records the value the current counter had last
time it was incremented or set.  Note that incrementing the current
counter by zero, e.g., with ‘C-u 0 C-x C-k C-i’, also records the value
of the current counter as the previous counter value.

‘<F3>’
     In a keyboard macro definition, insert the keyboard macro counter
     value in the buffer (‘kmacro-start-macro-or-insert-counter’).
‘C-x C-k C-i’
     Insert the keyboard macro counter value in the buffer
     (‘kmacro-insert-counter’).
‘C-x C-k C-c’
     Set the keyboard macro counter (‘kmacro-set-counter’).
‘C-x C-k C-a’
     Add the prefix arg to the keyboard macro counter
     (‘kmacro-add-counter’).
‘C-x C-k C-f’
     Specify the format for inserting the keyboard macro counter
     (‘kmacro-set-format’).

   When you are defining a keyboard macro, the command <F3>
(‘kmacro-start-macro-or-insert-counter’) inserts the current value of
the keyboard macro’s counter into the buffer, and increments the counter
by 1.  (If you are not defining a macro, <F3> begins a macro definition
instead.  *Note Basic Keyboard Macro::.)  You can use a numeric prefix
argument to specify a different increment.  If you just specify a ‘C-u’
prefix, that inserts the previous counter value, and doesn’t change the
current value.

   As an example, let us show how the keyboard macro counter can be used
to build a numbered list.  Consider the following key sequence:

     <F3> C-a <F3> . <SPC> <F4>

As part of this keyboard macro definition, the string ‘0. ’ was inserted
into the beginning of the current line.  If you now move somewhere else
in the buffer and type <F4> to invoke the macro, the string ‘1. ’ is
inserted at the beginning of that line.  Subsequent invocations insert
‘2. ’, ‘3. ’, and so forth.

   The command ‘C-x C-k C-i’ (‘kmacro-insert-counter’) does the same
thing as <F3>, but it can be used outside a keyboard macro definition.
When no keyboard macro is being defined or executed, it inserts and
increments the counter of the macro at the head of the keyboard macro
ring.

   The command ‘C-x C-k C-c’ (‘kmacro-set-counter’) sets the current
macro counter to the value of the numeric argument.  If you use it
inside the macro, it operates on each repetition of the macro.  If you
specify just ‘C-u’ as the prefix, while executing the macro, that resets
the counter to the value it had at the beginning of the current
repetition of the macro (undoing any increments so far in this
repetition).

   The command ‘C-x C-k C-a’ (‘kmacro-add-counter’) adds the prefix
argument to the current macro counter.  With just ‘C-u’ as argument, it
resets the counter to the last value inserted by any keyboard macro.
(Normally, when you use this, the last insertion will be in the same
macro and it will be the same counter.)

   The command ‘C-x C-k C-f’ (‘kmacro-set-format’) prompts for the
format to use when inserting the macro counter.  The default format is
‘%d’, which means to insert the number in decimal without any padding.
You can exit with empty minibuffer to reset the format to this default.
You can specify any format string that the ‘format’ function accepts and
that makes sense with a single integer extra argument (*note
(elisp)Formatting Strings::).  Do not put the format string inside
double quotes when you insert it in the minibuffer.

   If you use this command while no keyboard macro is being defined or
executed, the new format affects all subsequent macro definitions.
Existing macros continue to use the format in effect when they were
defined.  If you set the format while defining a keyboard macro, this
affects the macro being defined from that point on, but it does not
affect subsequent macros.  Execution of the macro will, at each step,
use the format in effect at that step during its definition.  Changes to
the macro format during execution of a macro, like the corresponding
changes during its definition, have no effect on subsequent macros.

   The format set by ‘C-x C-k C-f’ does not affect insertion of numbers
stored in registers.

   If you use a register as a counter, incrementing it on each
repetition of the macro, that accomplishes the same thing as a keyboard
macro counter.  *Note Number Registers::.  For most purposes, it is
simpler to use a keyboard macro counter.


File: emacs.info,  Node: Keyboard Macro Query,  Next: Save Keyboard Macro,  Prev: Keyboard Macro Counter,  Up: Keyboard Macros

18.4 Executing Macros with Variations
=====================================

In a keyboard macro, you can create an effect similar to that of
‘query-replace’, in that the macro asks you each time around whether to
make a change.

‘C-x q’
     When this point is reached during macro execution, ask for
     confirmation (‘kbd-macro-query’).

   While defining the macro, type ‘C-x q’ at the point where you want
the query to occur.  During macro definition, the ‘C-x q’ does nothing,
but when you run the macro later, ‘C-x q’ asks you interactively whether
to continue.

   The valid responses when ‘C-x q’ asks are:

<SPC> (or ‘y’)
     Continue executing the keyboard macro.

<DEL> (or ‘n’)
     Skip the remainder of this repetition of the macro, and start right
     away with the next repetition.

<RET> (or ‘q’)
     Skip the remainder of this repetition and cancel further
     repetitions.

‘C-r’
     Enter a recursive editing level, in which you can perform editing
     which is not part of the macro.  When you exit the recursive edit
     using ‘C-M-c’, you are asked again how to continue with the
     keyboard macro.  If you type a <SPC> at this time, the rest of the
     macro definition is executed.  It is up to you to leave point and
     the text in a state such that the rest of the macro will do what
     you want.

   ‘C-u C-x q’, which is ‘C-x q’ with a prefix argument, performs a
completely different function.  It enters a recursive edit reading input
from the keyboard, both when you type it during the definition of the
macro, and when it is executed from the macro.  During definition, the
editing you do inside the recursive edit does not become part of the
macro.  During macro execution, the recursive edit gives you a chance to
do some particularized editing on each repetition.  *Note Recursive
Edit::.


File: emacs.info,  Node: Save Keyboard Macro,  Next: Edit Keyboard Macro,  Prev: Keyboard Macro Query,  Up: Keyboard Macros

18.5 Naming and Saving Keyboard Macros
======================================

‘C-x C-k n’
     Give a command name (for the duration of the Emacs session) to the
     most recently defined keyboard macro (‘kmacro-name-last-macro’).
‘C-x C-k b’
     Bind the most recently defined keyboard macro to a key sequence
     (for the duration of the session) (‘kmacro-bind-to-key’).
‘M-x insert-kbd-macro’
     Insert in the buffer a keyboard macro’s definition, as Lisp code.

   If you wish to save a keyboard macro for later use, you can give it a
name using ‘C-x C-k n’ (‘kmacro-name-last-macro’).  This reads a name as
an argument using the minibuffer and defines that name to execute the
last keyboard macro, in its current form.  (If you later add to the
definition of this macro, that does not alter the name’s definition as a
macro.)  The macro name is a Lisp symbol, and defining it in this way
makes it a valid command name for calling with ‘M-x’ or for binding a
key to with ‘keymap-global-set’ (*note Keymaps::).  If you specify a
name that has a prior definition other than a keyboard macro, an error
message is shown and nothing is changed.

   You can also bind the last keyboard macro (in its current form) to a
key, using ‘C-x C-k b’ (‘kmacro-bind-to-key’) followed by the key
sequence you want to bind.  You can bind to any key sequence in the
global keymap, but since most key sequences already have other bindings,
you should select the key sequence carefully.  If you try to bind to a
key sequence with an existing binding (in any keymap), this command asks
you for confirmation before replacing the existing binding.

   To avoid problems caused by overriding existing bindings, the key
sequences ‘C-x C-k 0’ through ‘C-x C-k 9’ and ‘C-x C-k A’ through ‘C-x
C-k Z’ are reserved for your own keyboard macro bindings.  In fact, to
bind to one of these key sequences, you only need to type the digit or
letter rather than the whole key sequences.  For example,

     C-x C-k b 4

will bind the last keyboard macro to the key sequence ‘C-x C-k 4’.

   Once a macro has a command name, you can save its definition in a
file.  Then it can be used in another editing session.  First, visit the
file you want to save the definition in.  Then use this command:

     M-x insert-kbd-macro <RET> MACRONAME <RET>

This inserts some Lisp code that, when executed later, will define the
same macro with the same definition it has now.  (You don’t need to
understand Lisp code to do this, because ‘insert-kbd-macro’ writes the
Lisp code for you.)  Then save the file.  You can load the file later
with ‘load-file’ (*note Lisp Libraries::).  If the file you save in is
your init file ‘~/.emacs’ (*note Init File::) then the macro will be
defined each time you run Emacs.

   If you give ‘insert-kbd-macro’ a prefix argument, it makes additional
Lisp code to record the keys (if any) that you have bound to MACRONAME,
so that the macro will be reassigned the same keys when you load the
file.


File: emacs.info,  Node: Edit Keyboard Macro,  Next: Keyboard Macro Step-Edit,  Prev: Save Keyboard Macro,  Up: Keyboard Macros

18.6 Editing a Keyboard Macro
=============================

‘C-x C-k C-e’
     Edit the last defined keyboard macro (‘kmacro-edit-macro’).
‘C-x C-k e NAME <RET>’
     Edit a previously defined keyboard macro NAME (‘edit-kbd-macro’).
‘C-x C-k l’
     Edit the last 300 keystrokes as a keyboard macro
     (‘kmacro-edit-lossage’).

   You can edit the last keyboard macro by typing ‘C-x C-k C-e’ or ‘C-x
C-k <RET>’ (‘kmacro-edit-macro’).  This formats the macro definition in
a buffer and enters a specialized major mode for editing it.  Type ‘C-h
m’ once in that buffer to display details of how to edit the macro.
When you are finished editing, type ‘C-c C-c’.

   You can edit a named keyboard macro or a macro bound to a key by
typing ‘C-x C-k e’ (‘edit-kbd-macro’).  Follow that with the keyboard
input that you would use to invoke the macro—‘C-x e’ or ‘M-x NAME’ or
some other key sequence.

   You can edit the last 300 keystrokes as a macro by typing ‘C-x C-k l’
(‘kmacro-edit-lossage’).


File: emacs.info,  Node: Keyboard Macro Step-Edit,  Prev: Edit Keyboard Macro,  Up: Keyboard Macros

18.7 Stepwise Editing a Keyboard Macro
======================================

You can interactively replay and edit the last keyboard macro, one
command at a time, by typing ‘C-x C-k <SPC>’ (‘kmacro-step-edit-macro’).
Unless you quit the macro using ‘q’ or ‘C-g’, the edited macro replaces
the last macro on the macro ring.

   This macro editing feature shows the last macro in the minibuffer
together with the first (or next) command to be executed, and prompts
you for an action.  You can enter ‘?’ to get a summary of your options.
These actions are available:

   • <SPC> and ‘y’ execute the current command, and advance to the next
     command in the keyboard macro.
   • ‘n’, ‘d’, and <DEL> skip and delete the current command.
   • ‘f’ skips the current command in this execution of the keyboard
     macro, but doesn’t delete it from the macro.
   • <TAB> executes the current command, as well as all similar commands
     immediately following the current command; for example, <TAB> may
     be used to insert a sequence of characters (corresponding to a
     sequence of ‘self-insert-command’ commands).
   • ‘c’ continues execution (without further editing) until the end of
     the keyboard macro.  If execution terminates normally, the edited
     macro replaces the original keyboard macro.
   • ‘C-k’ skips and deletes the rest of the keyboard macro, terminates
     step-editing, and replaces the original keyboard macro with the
     edited macro.
   • ‘q’ and ‘C-g’ cancels the step-editing of the keyboard macro;
     discarding any changes made to the keyboard macro.
   • ‘i KEY... C-j’ reads and executes a series of key sequences (not
     including the final ‘C-j’), and inserts them before the current
     command in the keyboard macro, without advancing over the current
     command.
   • ‘I KEY...’ reads one key sequence, executes it, and inserts it
     before the current command in the keyboard macro, without advancing
     over the current command.
   • ‘r KEY... C-j’ reads and executes a series of key sequences (not
     including the final ‘C-j’), and replaces the current command in the
     keyboard macro with them, advancing over the inserted key
     sequences.
   • ‘R KEY...’ reads one key sequence, executes it, and replaces the
     current command in the keyboard macro with that key sequence,
     advancing over the inserted key sequence.
   • ‘a KEY... C-j’ executes the current command, then reads and
     executes a series of key sequences (not including the final ‘C-j’),
     and inserts them after the current command in the keyboard macro;
     it then advances over the current command and the inserted key
     sequences.
   • ‘A KEY... C-j’ executes the rest of the commands in the keyboard
     macro, then reads and executes a series of key sequences (not
     including the final ‘C-j’), and appends them at the end of the
     keyboard macro; it then terminates the step-editing and replaces
     the original keyboard macro with the edited macro.


File: emacs.info,  Node: Files,  Next: Buffers,  Prev: Keyboard Macros,  Up: Top

# /. 19 File Handling
********************

The operating system stores data permanently in named “files”, so most
of the text you edit with Emacs comes from a file and is ultimately
stored in a file.

   To edit a file, you must tell Emacs to read the file and prepare a
buffer containing a copy of the file’s text.  This is called “visiting”
the file.  Editing commands apply directly to text in the buffer; that
is, to the copy inside Emacs.  Your changes appear in the file itself
only when you “save” the buffer back into the file.

   In addition to visiting and saving files, Emacs can delete, copy,
rename, and append to files, keep multiple versions of them, and operate
on file directories.

* Menu:

* File Names::          How to type and edit file-name arguments.
* Visiting::            Visiting a file prepares Emacs to edit the file.
* Saving::              Saving makes your changes permanent.
* Reverting::           Reverting cancels all the changes not saved.
* Auto Revert::         Keeping buffers automatically up-to-date.
* Auto Save::           Auto Save periodically protects against loss of data.
* File Aliases::        Handling multiple names for one file.
* Directories::         Creating, deleting, and listing file directories.
* Comparing Files::     Finding where two files differ.
* Diff Mode::           Mode for editing file differences.
* Copying and Naming::  Copying, naming and renaming files.
* Misc File Ops::       Other things you can do on files.
* Compressed Files::    Accessing compressed files.
* File Archives::       Operating on tar, zip, jar etc. archive files.
* Remote Files::        Accessing files on other machines.
* Quoted File Names::   Quoting special characters in file names.
* File Name Cache::     Completion against a list of files you often use.
* File Conveniences::   Convenience features for finding files.
* Image Mode::          Viewing image files.
* Filesets::            Handling sets of files.


File: emacs.info,  Node: File Names,  Next: Visiting,  Up: Files

19.1 File Names
===============

Many Emacs commands that operate on a file require you to specify the
file name, using the minibuffer (*note Minibuffer File::).

   While in the minibuffer, you can use the usual completion and history
commands (*note Minibuffer::).  Note that file name completion ignores
file names whose extensions appear in the variable
‘completion-ignored-extensions’ (*note Completion Options::).  Note also
that most commands use permissive completion with confirmation for
reading file names: you are allowed to submit a nonexistent file name,
but if you type <RET> immediately after completing up to a nonexistent
file name, Emacs prints ‘[Confirm]’ and you must type a second <RET> to
confirm.  *Note Completion Exit::, for details.

   Minibuffer history commands offer some special features for reading
file names, see *note Minibuffer History::.

   Each buffer has a “default directory”, stored in the buffer-local
variable ‘default-directory’.  Whenever Emacs reads a file name using
the minibuffer, it usually inserts the default directory into the
minibuffer as the initial contents.  You can inhibit this insertion by
changing the variable ‘insert-default-directory’ to ‘nil’ (*note
Minibuffer File::).  Regardless, Emacs always assumes that any relative
file name is relative to the default directory, e.g., entering a file
name without a directory specifies a file in the default directory.

   When you visit a file, Emacs sets ‘default-directory’ in the visiting
buffer to the directory of its file.  When you create a new buffer that
is not visiting a file, via a command like ‘C-x b’, its default
directory is usually copied from the buffer that was current at the time
(*note Select Buffer::).  You can use the command ‘M-x pwd’ to see the
value of ‘default-directory’ in the current buffer.  The command ‘M-x
cd’ prompts for a directory’s name, and sets the buffer’s
‘default-directory’ to that directory (doing this does not change the
buffer’s file name, if any).

   As an example, when you visit the file ‘/u/rms/gnu/gnu.tasks’, the
default directory is set to ‘/u/rms/gnu/’.  If you invoke a command that
reads a file name, entering just ‘foo’ in the minibuffer, with a
directory omitted, specifies the file ‘/u/rms/gnu/foo’; entering
‘../.login’ specifies ‘/u/rms/.login’; and entering ‘new/foo’ specifies
‘/u/rms/gnu/new/foo’.

   When typing a file name into the minibuffer, you can make use of a
couple of shortcuts: a double slash ignores everything before the second
slash in the pair, and ‘~/’ is your home directory.  *Note Minibuffer
File::.

   The character ‘$’ is used to substitute an environment variable into
a file name.  The name of the environment variable consists of all the
alphanumeric characters after the ‘$’; alternatively, it can be enclosed
in braces after the ‘$’.  For example, if you have used the shell
command ‘export FOO=rms/hacks’ to set up an environment variable named
‘FOO’, then both ‘/u/$FOO/test.c’ and ‘/u/${FOO}/test.c’ are
abbreviations for ‘/u/rms/hacks/test.c’.  If the environment variable is
not defined, no substitution occurs, so that the character ‘$’ stands
for itself.  Note that environment variables set outside Emacs affect
Emacs only if they are applied before Emacs is started.

   To access a file with ‘$’ in its name, if the ‘$’ causes expansion,
type ‘$$’.  This pair is converted to a single ‘$’ at the same time that
variable substitution is performed for a single ‘$’.  Alternatively,
quote the whole file name with ‘/:’ (*note Quoted File Names::).  File
names which begin with a literal ‘~’ should also be quoted with ‘/:’.

   You can include non-ASCII characters in file names.  *Note File Name
Coding::.


File: emacs.info,  Node: Visiting,  Next: Saving,  Prev: File Names,  Up: Files

19.2 Visiting Files
===================

‘C-x C-f’
     Visit a file (‘find-file’).
‘C-x C-r’
     Visit a file for viewing, without allowing changes to it
     (‘find-file-read-only’).
‘C-x C-v’
     Visit a different file instead of the one visited last
     (‘find-alternate-file’).
‘C-x 4 f’
     Visit a file, in another window (‘find-file-other-window’).  Don’t
     alter what is displayed in the selected window.
‘C-x 5 f’
     Visit a file, in a new frame (‘find-file-other-frame’).  Don’t
     alter what is displayed in the selected frame.
‘M-x find-file-literally’
     Visit a file with no conversion of the contents.

   “Visiting” a file means reading its contents into an Emacs buffer so
you can edit them.  Emacs makes a new buffer for each file that you
visit.

   To visit a file, type ‘C-x C-f’ (‘find-file’) and use the minibuffer
to enter the name of the desired file.  While in the minibuffer, you can
abort the command by typing ‘C-g’.  *Note File Names::, for details
about entering file names into minibuffers.

   If the specified file exists but the system does not allow you to
read it, an error message is displayed in the echo area (on GNU and Unix
systems you might be able to visit such a file using the ‘su’ or ‘sudo’
methods; *note Remote Files::).  Otherwise, you can tell that ‘C-x C-f’
has completed successfully by the appearance of new text on the screen,
and by the buffer name shown in the mode line (*note Mode Line::).
Emacs normally constructs the buffer name from the file name, omitting
the directory name.  For example, a file named ‘/usr/rms/emacs.tex’ is
visited in a buffer named ‘emacs.tex’.  If there is already a buffer
with that name, Emacs constructs a unique name; the normal method is to
add a suffix based on the directory name (e.g., ‘<rms>’, ‘<tmp>’, and so
on), but you can select other methods.  *Note Uniquify::.

   To create a new file, just visit it using the same command, ‘C-x
C-f’.  Emacs displays ‘(New file)’ in the echo area, but in other
respects behaves as if you had visited an existing empty file.

   After visiting a file, the changes you make with editing commands are
made in the Emacs buffer.  They do not take effect in the visited file,
until you “save” the buffer (*note Saving::).  If a buffer contains
changes that have not been saved, we say the buffer is “modified”.  This
implies that some changes will be lost if the buffer is not saved.  The
mode line displays two stars near the left margin to indicate that the
buffer is modified.

   If you visit a file that is already in Emacs, ‘C-x C-f’ switches to
the existing buffer instead of making another copy.  Before doing so, it
checks whether the file has changed since you last visited or saved it.
If the file has changed, Emacs offers to reread it.

   If you try to visit a file larger than ‘large-file-warning-threshold’
(the default is 10000000, which is about 10 megabytes), Emacs asks you
for confirmation first.  You can answer ‘y’ to proceed with visiting the
file or ‘l’ to visit the file literally (see below).  Visiting large
files literally speeds up navigation and editing of such files, because
various potentially-expensive features are turned off.  Note, however,
that Emacs cannot visit files that are larger than the maximum Emacs
buffer size, which is limited by the amount of memory Emacs can allocate
and by the integers that Emacs can represent (*note Buffers::).  If you
try, Emacs displays an error message saying that the maximum buffer size
has been exceeded.

   If you try to visit a file whose major mode (*note Major Modes::)
uses the tree-sitter parsing library, Emacs will display a warning if
the file’s size in bytes is larger than the value of the variable
‘treesit-max-buffer-size’.  The default value is 40 megabytes for 64-bit
Emacs and 15 megabytes for 32-bit Emacs.  This avoids the danger of
having Emacs run out of memory by preventing the activation of major
modes based on tree-sitter in such large buffers, because a typical
tree-sitter parser needs about 10 times as much memory as the text it
parses.

   If the file name you specify contains shell-style wildcard
characters, Emacs visits all the files that match it.  (On
case-insensitive filesystems, Emacs matches the wildcards disregarding
the letter case.)  Wildcards include ‘?’, ‘*’, and ‘[...]’ sequences.
To enter the wild card ‘?’ in a file name in the minibuffer, you need to
type ‘C-q ?’.  *Note Quoted File Names::, for information on how to
visit a file whose name actually contains wildcard characters.  You can
disable the wildcard feature by customizing ‘find-file-wildcards’.

   If you’re asking to visit a file that’s already visited in a buffer,
but the file has changed externally, Emacs normally asks you whether you
want to re-read the file from disk.  But if you set
‘query-about-changed-file’ to ‘nil’, Emacs won’t query you, but will
instead just display the buffer’s contents before the changes, and show
an echo-area message telling you how to revert the buffer from the file.

   If you visit the wrong file unintentionally by typing its name
incorrectly, type ‘C-x C-v’ (‘find-alternate-file’) to visit the file
you really wanted.  ‘C-x C-v’ is similar to ‘C-x C-f’, but it kills the
current buffer (after first offering to save it if it is modified).
When ‘C-x C-v’ reads the file name to visit, it inserts the entire
default file name in the buffer, with point just after the directory
part; this is convenient if you made a slight error in typing the name.

   If you visit a file that is actually a directory, Emacs invokes
Dired, the Emacs directory browser.  *Note Dired::.  You can disable
this behavior by setting the variable ‘find-file-run-dired’ to ‘nil’; in
that case, it is an error to try to visit a directory.

   Files which are actually collections of other files, or “file
archives”, are visited in special modes which invoke a Dired-like
environment to allow operations on archive members.  *Note File
Archives::, for more about these features.

   If you visit a file that the operating system won’t let you modify,
or that is marked read-only, Emacs makes the buffer read-only too, so
that you won’t go ahead and make changes that you’ll have trouble saving
afterward.  You can make the buffer writable with ‘C-x C-q’
(‘read-only-mode’).  *Note Misc Buffer::.

   If you want to visit a file as read-only in order to protect yourself
from entering changes accidentally, visit it with the command ‘C-x C-r’
(‘find-file-read-only’) instead of ‘C-x C-f’.

   ‘C-x 4 f’ (‘find-file-other-window’) is like ‘C-x C-f’ except that
the buffer containing the specified file is selected in another window.
The window that was selected before ‘C-x 4 f’ continues to show the same
buffer it was already showing.  If this command is used when only one
window is being displayed, that window is split in two, with one window
showing the same buffer as before, and the other one showing the newly
requested file.  *Note Windows::.

   ‘C-x 5 f’ (‘find-file-other-frame’) is similar, but opens a new
frame, or selects any existing frame showing the specified file.  *Note
Frames::.

   On graphical displays, there are two additional methods for visiting
files.  Firstly, when Emacs is built with a suitable GUI toolkit,
commands invoked with the mouse (by clicking on the menu bar or tool
bar) use the toolkit’s standard file selection dialog instead of
prompting for the file name in the minibuffer.  On GNU/Linux and Unix
platforms, Emacs does this when built with GTK+, LessTif, and Motif
toolkits; on MS-Windows and Mac, the GUI version does that by default.
For information on how to customize this, see *note Dialog Boxes::.

   Secondly, Emacs supports drag and drop: dropping a file into an
ordinary Emacs window visits the file using that window.  As an
exception, dropping a file into a window displaying a Dired buffer moves
or copies the file into the displayed directory.  For details, see *note
Drag and Drop::, and *note Misc Dired Features::.

   On text-mode terminals and on graphical displays when Emacs was built
without a GUI toolkit, you can visit files via the menu-bar ‘File’ menu,
which has the ‘Visit New File’ and the ‘Open File’ items.

   Each time you visit a file, Emacs automatically scans its contents to
detect what character encoding and end-of-line convention it uses, and
converts these to Emacs’s internal encoding and end-of-line convention
within the buffer.  When you save the buffer, Emacs performs the inverse
conversion, writing the file to disk with its original encoding and
end-of-line convention.  *Note Coding Systems::.

   If you wish to edit a file as a sequence of ASCII characters with no
special encoding or conversion, use the ‘M-x find-file-literally’
command.  This visits a file, like ‘C-x C-f’, but does not do format
conversion (*note Format Conversion: (elisp)Format Conversion.),
character code conversion (*note Coding Systems::), or automatic
uncompression (*note Compressed Files::), and does not add a final
newline because of ‘require-final-newline’ (*note Customize Save::).  If
you have already visited the same file in the usual (non-literal)
manner, this command asks you whether to visit it literally instead.

   Files are sometimes (loosely) tied to other files, and you could call
these files “sibling files”.  For instance, when editing C files, if you
have a file called ‘"foo.c"’, you often also have a file called
‘"foo.h"’, and that could be its sibling file.  Or you may have
different versions of a file, for instance
‘"src/emacs/emacs-27/lisp/allout.el"’ and
‘"src/emacs/emacs-28/lisp/allout.el"’ might be considered siblings.
Emacs provides the ‘find-sibling-file’ command to jump between sibling
files, but it’s impossible to guess at which files a user might want to
be considered siblings, so Emacs lets you configure this freely by
altering the ‘find-sibling-rules’ user option.  This is a list of
match/expansion elements.

   For instance, to do the ‘".c"’ to ‘".h"’ mapping, you could say:

     (setq find-sibling-rules
           '(("\\([^/]+\\)\\.c\\'" "\\1.h")))

   (‘ff-find-related-file’ offers similar functionality especially
geared towards C files, *note Other C Commands::.)

   Or, if you want to consider all files under
‘"src/emacs/DIR/file-name"’ to be siblings of other DIRs, you could say:

     (setq find-sibling-rules
           '(("src/emacs/[^/]+/\\(.*\\)\\'" "src/emacs/.*/\\1")))

   As you can see, this is a list of (MATCH EXPANSION...) elements.  The
MATCH is a regular expression that matches the visited file name, and
each EXPANSION may refer to match groups by using ‘\\1’ and so on.  The
resulting expansion string is then applied to the file system to see if
any files match this expansion (interpreted as a regexp).

   Two special hook variables allow extensions to modify the operation
of visiting files.  Visiting a file that does not exist runs the
functions in ‘find-file-not-found-functions’; this variable holds a list
of functions, which are called one by one (with no arguments) until one
of them returns non-‘nil’.  This is not a normal hook, and the name ends
in ‘-functions’ rather than ‘-hook’ to indicate that fact.

   Successful visiting of any file, whether existing or not, calls the
functions in ‘find-file-hook’, with no arguments.  This variable is a
normal hook.  In the case of a nonexistent file, the
‘find-file-not-found-functions’ are run first.  *Note Hooks::.

   There are several ways to specify automatically the major mode for
editing the file (*note Choosing Modes::), and to specify local
variables defined for that file (*note File Variables::).


File: emacs.info,  Node: Saving,  Next: Reverting,  Prev: Visiting,  Up: Files

19.3 Saving Files
=================

“Saving” a buffer in Emacs means writing its contents back into the file
that was visited in the buffer.

* Menu:

* Save Commands::       Commands for saving files.
* Backup::              How Emacs saves the old version of your file.
* Customize Save::      Customizing the saving of files.
* Interlocking::        How Emacs protects against simultaneous editing
                          of one file by two users.
* Shadowing: File Shadowing.  Copying files to “shadows” automatically.
* Time Stamps::         Emacs can update time stamps on saved files.


File: emacs.info,  Node: Save Commands,  Next: Backup,  Up: Saving

19.3.1 Commands for Saving Files
--------------------------------

These are the commands that relate to saving and writing files.

‘C-x C-s’
     Save the current buffer to its file (‘save-buffer’).
‘C-x s’
     Save any or all buffers to their files (‘save-some-buffers’).
‘M-~’
     Forget that the current buffer has been changed (‘not-modified’).
     With prefix argument (‘C-u’), mark the current buffer as changed.
‘C-x C-w’
     Save the current buffer with a specified file name (‘write-file’).
‘M-x set-visited-file-name’
     Change the file name under which the current buffer will be saved.
‘M-x rename-visited-file’
     The same as ‘M-x set-visited-file-name’, but also rename the file
     the buffer is visiting (if any).

   When you wish to save the file and make your changes permanent, type
‘C-x C-s’ (‘save-buffer’).  After saving is finished, ‘C-x C-s’ displays
a message like this:

     Wrote /u/rms/gnu/gnu.tasks

If the current buffer is not modified (no changes have been made in it
since the buffer was created or last saved), saving is not really done,
because it would have no effect.  Instead, ‘C-x C-s’ displays a message
like this in the echo area:

     (No changes need to be saved)

   With a prefix argument, ‘C-u C-x C-s’, Emacs also marks the buffer to
be backed up when the next save is done.  *Note Backup::.

   The command ‘C-x s’ (‘save-some-buffers’) offers to save any or all
modified buffers.  It asks you what to do with each buffer.  The
possible responses are analogous to those of ‘query-replace’:

‘y’
‘<SPC>’
     Save this buffer and ask about the rest of the buffers.
‘n’
‘<DEL>’
     Don’t save this buffer, but ask about the rest of the buffers.
‘!’
     Save this buffer and all the rest with no more questions.
‘q’
‘<RET>’
     Terminate ‘save-some-buffers’ without any more saving.
‘.’
     Save this buffer, then exit ‘save-some-buffers’ without even asking
     about other buffers.
‘C-r’
     View the buffer that you are currently being asked about.  When you
     exit View mode, you get back to ‘save-some-buffers’, which asks the
     question again.
‘C-f’
     Exit ‘save-some-buffers’ and visit the buffer that you are
     currently being asked about.
‘d’
     Diff the buffer against its corresponding file, so you can see what
     changes you would be saving.  This calls the command
     ‘diff-buffer-with-file’ (*note Comparing Files::).
‘C-h’
     Display a help message about these options.

You can customize the value of ‘save-some-buffers-default-predicate’ to
control which buffers Emacs will ask about.

   ‘C-x C-c’, the key sequence to exit Emacs, invokes
‘save-some-buffers’ and therefore asks the same questions.

   If you have changed a buffer but do not wish to save the changes, you
should take some action to prevent it.  Otherwise, each time you use
‘C-x s’ or ‘C-x C-c’, you are liable to save this buffer by mistake.
One thing you can do is type ‘M-~’ (‘not-modified’), which clears out
the indication that the buffer is modified.  If you do this, none of the
save commands will believe that the buffer needs to be saved.  (‘~’ is
often used as a mathematical symbol for “not”; thus ‘M-~’ is “not”,
metafied.)  Alternatively, you can cancel all the changes made since the
file was visited or saved, by reading the text from the file again.
This is called “reverting”.  *Note Reverting::.  (You could also undo
all the changes by repeating the undo command ‘C-x u’ until you have
undone all the changes; but reverting is easier.)

   ‘M-x set-visited-file-name’ alters the name of the file that the
current buffer is visiting.  It reads the new file name using the
minibuffer.  Then it marks the buffer as visiting that file name, and
changes the buffer name correspondingly.  ‘set-visited-file-name’ does
not save the buffer in the newly visited file; it just alters the
records inside Emacs in case you do save later.  It also marks the
buffer as modified so that ‘C-x C-s’ in that buffer _will_ save.

   If you wish to mark the buffer as visiting a different file and save
it right away, use ‘C-x C-w’ (‘write-file’).  This is equivalent to
‘set-visited-file-name’ followed by ‘C-x C-s’, except that ‘C-x C-w’
asks for confirmation if the file exists.  ‘C-x C-s’ used on a buffer
that is not visiting a file has the same effect as ‘C-x C-w’; that is,
it reads a file name, marks the buffer as visiting that file, and saves
it there.  The default file name in a buffer that is not visiting a file
is made by combining the buffer name with the buffer’s default directory
(*note File Names::).

   If the new file name implies a major mode, then ‘C-x C-w’ switches to
that major mode, in most cases.  The command ‘set-visited-file-name’
also does this.  *Note Choosing Modes::.

   If Emacs is about to save a file and sees that the date of the latest
version on disk does not match what Emacs last read or wrote, Emacs
notifies you of this fact, because it probably indicates a problem
caused by simultaneous editing and requires your immediate attention.
*Note Simultaneous Editing: Interlocking.


File: emacs.info,  Node: Backup,  Next: Customize Save,  Prev: Save Commands,  Up: Saving

19.3.2 Backup Files
-------------------

On most operating systems, rewriting a file automatically destroys all
record of what the file used to contain.  Thus, saving a file from Emacs
throws away the old contents of the file—or it would, except that Emacs
carefully copies the old contents to another file, called the “backup”
file, before actually saving.

   Emacs makes a backup for a file only the first time the file is saved
from a buffer.  No matter how many times you subsequently save the file,
its backup remains unchanged.  However, if you kill the buffer and then
visit the file again, a new backup file will be made.

   For most files, the variable ‘make-backup-files’ determines whether
to make backup files.  On most operating systems, its default value is
‘t’, so that Emacs does write backup files.

   For files managed by a version control system (*note Version
Control::), the variable ‘vc-make-backup-files’ determines whether to
make backup files.  By default it is ‘nil’, since backup files are
redundant when you store all the previous versions in a version control
system.  *Note General VC Options::.

   At your option, Emacs can keep either a single backup for each file,
or make a series of numbered backup files for each file that you edit.
*Note Backup Names::.

   The default value of the ‘backup-enable-predicate’ variable prevents
backup files being written for files in the directories used for
temporary files, specified by ‘temporary-file-directory’ or
‘small-temporary-file-directory’.

   You can explicitly tell Emacs to make another backup file from a
buffer, even though that buffer has been saved before.  If you save the
buffer with ‘C-u C-x C-s’, the version thus saved will be made into a
backup file if you save the buffer again.  ‘C-u C-u C-x C-s’ saves the
buffer, but first makes the previous file contents into a new backup
file.  ‘C-u C-u C-u C-x C-s’ does both things: it makes a backup from
the previous contents, and arranges to make another from the newly saved
contents if you save again.

   You can customize the variable ‘backup-directory-alist’ to specify
that files matching certain patterns should be backed up in specific
directories.  A typical use is to add an element ‘("." . DIR)’ to make
all backups in the directory with absolute name DIR.  Emacs modifies the
backup file names to avoid clashes between files with the same names
originating in different directories.  Alternatively, adding, ‘("." .
".~")’ would make backups in the invisible subdirectory ‘.~’ of the
original file’s directory.  Emacs creates the directory, if necessary,
to make the backup.

* Menu:

* Names: Backup Names.          How backup files are named.
* Deletion: Backup Deletion.    Emacs deletes excess numbered backups.
* Copying: Backup Copying.      Backups can be made by copying or renaming.


File: emacs.info,  Node: Backup Names,  Next: Backup Deletion,  Up: Backup

19.3.2.1 Single or Numbered Backups
...................................

When Emacs makes a backup file, its name is normally constructed by
appending ‘~’ to the file name being edited; thus, the backup file for
‘eval.c’ would be ‘eval.c~’.

   If access control stops Emacs from writing backup files under the
usual names, it writes the backup file as ‘~/.emacs.d/%backup%~’.  Only
one such file can exist, so only the most recently made such backup is
available.

   Emacs can also make “numbered backup files”.  Numbered backup file
names contain ‘.~’, the number, and another ‘~’ after the original file
name.  Thus, the backup files of ‘eval.c’ would be called ‘eval.c.~1~’,
‘eval.c.~2~’, and so on, all the way through names like ‘eval.c.~259~’
and beyond.

   The variable ‘version-control’ determines whether to make single
backup files or multiple numbered backup files.  Its possible values
are:

‘nil’
     Make numbered backups for files that have numbered backups already.
     Otherwise, make single backups.  This is the default.
‘t’
     Make numbered backups.
‘never’
     Never make numbered backups; always make single backups.

The usual way to set this variable is globally, through your init file
or the customization buffer.  However, you can set ‘version-control’
locally in an individual buffer to control the making of backups for
that buffer’s file (*note Locals::).  Some modes, such as Rmail mode,
set this variable.  You can also have Emacs set ‘version-control’
locally whenever you visit a given file (*note File Variables::).

   If you set the environment variable ‘VERSION_CONTROL’, to tell
various GNU utilities what to do with backup files, Emacs also obeys the
environment variable by setting the Lisp variable ‘version-control’
accordingly at startup.  If the environment variable’s value is ‘t’ or
‘numbered’, then ‘version-control’ becomes ‘t’; if the value is ‘nil’ or
‘existing’, then ‘version-control’ becomes ‘nil’; if it is ‘never’ or
‘simple’, then ‘version-control’ becomes ‘never’.

   If you set the variable ‘make-backup-file-name-function’ to a
suitable Lisp function, you can override the usual way Emacs constructs
backup file names.


File: emacs.info,  Node: Backup Deletion,  Next: Backup Copying,  Prev: Backup Names,  Up: Backup

19.3.2.2 Automatic Deletion of Backups
......................................

To prevent excessive consumption of disk space, Emacs can delete
numbered backup versions automatically.  Generally Emacs keeps the first
few backups and the latest few backups, deleting any in between.  This
happens every time a new backup is made.

   The two variables ‘kept-old-versions’ and ‘kept-new-versions’ control
this deletion.  Their values are, respectively, the number of oldest
(lowest-numbered) backups to keep and the number of newest
(highest-numbered) ones to keep, each time a new backup is made.  The
backups in the middle (excluding those oldest and newest) are the excess
middle versions—those backups are deleted.  These variables’ values are
used when it is time to delete excess versions, just after a new backup
version is made; the newly made backup is included in the count in
‘kept-new-versions’.  By default, both variables are 2.

   If ‘delete-old-versions’ is ‘t’, Emacs deletes the excess backup
files silently.  If it is ‘nil’, the default, Emacs asks you whether it
should delete the excess backup versions.  If it has any other value,
then Emacs never automatically deletes backups.

   Dired’s ‘.’ (Period) command can also be used to delete old versions.
*Note Flagging Many Files::.


File: emacs.info,  Node: Backup Copying,  Prev: Backup Deletion,  Up: Backup

19.3.2.3 Copying vs. Renaming
.............................

Backup files can be made by copying the old file or by renaming it.
This makes a difference when the old file has multiple names (hard
links).  If the old file is renamed into the backup file, then the
alternate names become names for the backup file.  If the old file is
copied instead, then the alternate names remain names for the file that
you are editing, and the contents accessed by those names will be the
new contents.

   The method of making a backup file may also affect the file’s owner
and group.  If copying is used, these do not change.  If renaming is
used, you become the file’s owner, and the file’s group becomes the
default (different operating systems have different defaults for the
group).

   The choice of renaming or copying is made as follows:

   • If the variable ‘backup-by-copying’ is non-‘nil’ (the default is
     ‘nil’), use copying.

   • Otherwise, if the variable ‘backup-by-copying-when-linked’ is
     non-‘nil’ (the default is ‘nil’), and the file has multiple names,
     use copying.

   • Otherwise, if the variable ‘backup-by-copying-when-mismatch’ is
     non-‘nil’ (the default is ‘t’), and renaming would change the
     file’s owner or group, use copying.

     If you change ‘backup-by-copying-when-mismatch’ to ‘nil’, Emacs
     checks the numeric user-id of the file’s owner and the numeric
     group-id of the file’s group.  If either is no greater than
     ‘backup-by-copying-when-privileged-mismatch’, then it behaves as
     though ‘backup-by-copying-when-mismatch’ is non-‘nil’ anyway.

   • Otherwise, renaming is the default choice.

   When a file is managed with a version control system (*note Version
Control::), Emacs does not normally make backups in the usual way for
that file.  But “committing” (a.k.a. “checking in”, *note VCS
Concepts::) new versions of files is similar in some ways to making
backups.  One unfortunate similarity is that these operations typically
break hard links, disconnecting the file name you visited from any
alternate names for the same file.  This has nothing to do with
Emacs—the version control system does it.


File: emacs.info,  Node: Customize Save,  Next: Interlocking,  Prev: Backup,  Up: Saving

19.3.3 Customizing Saving of Files
----------------------------------

If the value of the variable ‘require-final-newline’ is ‘t’, saving or
writing a file silently puts a newline at the end if there isn’t already
one there.  If the value is ‘visit’, Emacs adds a newline at the end of
any file that doesn’t have one, just after it visits the file.  (This
marks the buffer as modified, and you can undo it.)  If the value is
‘visit-save’, Emacs adds such newlines both on visiting and on saving.
If the value is ‘nil’, Emacs leaves the end of the file unchanged; any
other non-‘nil’ value means Emacs asks you whether to add a newline.
The default is ‘nil’.

   Some major modes are designed for specific kinds of files that are
always supposed to end in newlines.  Such major modes set the variable
‘require-final-newline’ to the value of ‘mode-require-final-newline’,
which defaults to ‘t’.  By setting the latter variable, you can control
how these modes handle final newlines.

   If this option is non-‘nil’ and you’re visiting a file via a symbolic
link, Emacs will break the symbolic link upon saving the buffer, and
will write the buffer to a file with the same name as the symbolic link,
if the value of ‘file-precious-flag’ is non-‘nil’ (*note
file-precious-flag: (elisp)Saving Buffers.).  If you want Emacs to save
the buffer to the file the symbolic link points to (thereby preserving
the link) in these cases, customize the variable
‘file-preserve-symlinks-on-save’ to ‘t’.

   Normally, when a program writes a file, the operating system briefly
caches the file’s data in main memory before committing the data to
disk.  This can greatly improve performance; for example, when running
on laptops, it can avoid a disk spin-up each time a file is written.
However, it risks data loss if the operating system crashes before
committing the cache to disk.

   To lessen this risk, Emacs can invoke the ‘fsync’ system call after
saving a file.  Using ‘fsync’ does not eliminate the risk of data loss,
partly because many systems do not implement ‘fsync’ properly, and
partly because Emacs’s file-saving procedure typically relies also on
directory updates that might not survive a crash even if ‘fsync’ works
properly.

   The ‘write-region-inhibit-fsync’ variable controls whether Emacs
invokes ‘fsync’ after saving a file.  The variable’s default value is
‘nil’ when Emacs is interactive, and ‘t’ when Emacs runs in batch mode
(*note Batch Mode: Initial Options.).

   Emacs never uses ‘fsync’ when writing auto-save files, as these files
might lose data anyway.


File: emacs.info,  Node: Interlocking,  Next: File Shadowing,  Prev: Customize Save,  Up: Saving

19.3.4 Protection against Simultaneous Editing
----------------------------------------------

Simultaneous editing occurs when two users visit the same file, both
make changes, and then both save them.  If nobody is informed that this
is happening, whichever user saves first would later find that their
changes were lost.

   On some systems, Emacs notices immediately when the second user
starts to change the file, and issues an immediate warning.  On all
systems, Emacs checks when you save the file, and warns if you are about
to overwrite another user’s changes.  You can prevent loss of the other
user’s work by taking the proper corrective action instead of saving the
file.

   When you make the first modification in an Emacs buffer that is
visiting a file, Emacs records that the file is “locked” by you.  (It
does this by creating a specially-named symbolic link(1) with special
contents in the same directory.  *Note (elisp)File Locks::, for more
details.)  Emacs removes the lock when you save the changes.  The idea
is that the file is locked whenever an Emacs buffer visiting it has
unsaved changes.

   You can prevent the creation of lock files by setting the variable
‘create-lockfiles’ to ‘nil’.  *Caution:* by doing so you will lose the
benefits that this feature provides.  You can also control where lock
files are written by using the ‘lock-file-name-transforms’ variable.

   If you begin to modify the buffer while the visited file is locked by
someone else, this constitutes a “collision”.  When Emacs detects a
collision, it asks you what to do, by calling the Lisp function
‘ask-user-about-lock’.  You can redefine this function for the sake of
customization.  The standard definition of this function asks you a
question and accepts three possible answers:

‘s’
     Steal the lock.  Whoever was already changing the file loses the
     lock, and you gain the lock.
‘p’
     Proceed.  Go ahead and edit the file despite its being locked by
     someone else.
‘q’
     Quit.  This causes an error (‘file-locked’), and the buffer
     contents remain unchanged—the modification you were trying to make
     does not actually take place.

   If Emacs or the operating system crashes, this may leave behind lock
files which are stale, so you may occasionally get warnings about
spurious collisions.  When you determine that the collision is spurious,
just use ‘p’ to tell Emacs to go ahead anyway.

   Note that locking works on the basis of a file name; if a file has
multiple names, Emacs does not prevent two users from editing it
simultaneously under different names.

   A lock file cannot be written in some circumstances, e.g., if Emacs
lacks the system permissions or cannot create lock files for some other
reason.  In these cases, Emacs can still detect the collision when you
try to save a file, by checking the file’s last-modification date.  If
the file has changed since the last time Emacs visited or saved it, that
implies that changes have been made in some other way, and will be lost
if Emacs proceeds with saving.  Emacs then displays a warning message
and asks for confirmation before saving; answer ‘yes’ to save, and ‘no’
or ‘C-g’ cancel the save.

   If you are notified that simultaneous editing has already taken
place, one way to compare the buffer to its file is the ‘M-x
diff-buffer-with-file’ command.  *Note Comparing Files::.

   You can prevent the creation of remote lock files by setting the
variable ‘remote-file-name-inhibit-locks’ to ‘t’.

   The minor mode ‘lock-file-mode’, called interactively, toggles the
local value of ‘create-lockfiles’ in the current buffer.

   ---------- Footnotes ----------

   (1) If your file system does not support symbolic links, a regular
file is used.


File: emacs.info,  Node: File Shadowing,  Next: Time Stamps,  Prev: Interlocking,  Up: Saving

19.3.5 Shadowing Files
----------------------

You can arrange to keep identical “shadow” copies of certain files in
more than one place—possibly on different machines.  To do this, first
you must set up a “shadow file group”, which is a set of
identically-named files shared between a list of sites.  The file group
is permanent and applies to further Emacs sessions as well as the
current one.  Once the group is set up, every time you exit Emacs, it
will copy the file you edited to the other files in its group.  You can
also do the copying without exiting Emacs, by typing
‘M-x shadow-copy-files’.

   A “shadow cluster” is a group of hosts that share directories, so
that copying to or from one of them is sufficient to update the file on
all of them.  Each shadow cluster has a name, and specifies the network
address of a primary host (the one we copy files to), and a regular
expression that matches the host names of all the other hosts in the
cluster.  You can define a shadow cluster with
‘M-x shadow-define-cluster’.

‘M-x shadow-initialize’
     Set up file shadowing.
‘M-x shadow-define-literal-group’
     Declare a single file to be shared between sites.
‘M-x shadow-define-regexp-group’
     Make all files that match each of a group of files be shared
     between hosts.
‘M-x shadow-define-cluster <RET> NAME <RET>’
     Define a shadow file cluster NAME.
‘M-x shadow-copy-files’
     Copy all pending shadow files.
‘M-x shadow-cancel’
     Cancel the instruction to shadow some files.

   To set up a shadow file group, use ‘M-x shadow-define-literal-group’
or ‘M-x shadow-define-regexp-group’.  See their documentation strings
for further information.

   Before copying a file to its shadows, Emacs asks for confirmation.
You can answer “no” to bypass copying of this file, this time.  If you
want to cancel the shadowing permanently for a certain file, use
‘M-x shadow-cancel’ to eliminate or change the shadow file group.

   File Shadowing is not available on MS Windows.


File: emacs.info,  Node: Time Stamps,  Prev: File Shadowing,  Up: Saving

19.3.6 Updating Time Stamps Automatically
-----------------------------------------

You can arrange to put a time stamp in a file, so that it is updated
automatically each time you edit and save the file.  The time stamp must
be in the first eight lines of the file, and you should insert it like
this:

     Time-stamp: <>

or like this:

     Time-stamp: " "

   Then add the function ‘time-stamp’ to the hook ‘before-save-hook’
(*note Hooks::).  When you save the file, this function then
automatically updates the time stamp with the current date and time.
You can also use the command ‘M-x time-stamp’ to update the time stamp
manually.  By default the time stamp is formatted according to your
locale setting (*note Environment::) and time zone (*note (elisp)Time of
Day::).  For customizations, see the Custom group ‘time-stamp’.


File: emacs.info,  Node: Reverting,  Next: Auto Revert,  Prev: Saving,  Up: Files

19.4 Reverting a Buffer
=======================

If you have made extensive changes to a file-visiting buffer and then
change your mind, you can “revert” the changes and go back to the saved
version of the file.  To do this, type ‘C-x x g’.  Since reverting
unintentionally could lose a lot of work, Emacs asks for confirmation
first if the buffer is modified.

   The ‘revert-buffer’ command tries to position point in such a way
that, if the file was edited only slightly, you will be at approximately
the same part of the text as before.  But if you have made major
changes, point may end up in a totally different location.

   Reverting marks the buffer as not modified.  However, it adds the
reverted changes as a single modification to the buffer’s undo history
(*note Undo::).  Thus, after reverting, you can type ‘C-/’ or its
aliases to bring the reverted changes back, if you happen to change your
mind.

   To revert a buffer more conservatively, you can use the command
‘revert-buffer-with-fine-grain’.  This command acts like
‘revert-buffer’, but it tries to be as non-destructive as possible,
making an effort to preserve all markers, properties and overlays in the
buffer.  Since reverting this way can be very slow when you have made a
large number of changes, you can modify the variable
‘revert-buffer-with-fine-grain-max-seconds’ to specify a maximum amount
of seconds that replacing the buffer contents this way should take.
Note that it is not ensured that the whole execution of
‘revert-buffer-with-fine-grain’ won’t take longer than this.

   Some kinds of buffers that are not associated with files, such as
Dired buffers, can also be reverted.  For them, reverting means
recalculating their contents.  Buffers created explicitly with ‘C-x b’
cannot be reverted; ‘revert-buffer’ reports an error if you try.

   When you edit a file that changes automatically and frequently—for
example, a log of output from a process that continues to run—it may be
useful for Emacs to revert the file without querying you.  To request
this behavior, set the variable ‘revert-without-query’ to a list of
regular expressions.  When a file name matches one of these regular
expressions, ‘find-file’ and ‘revert-buffer’ will revert it
automatically if it has changed—provided the buffer itself is not
modified.  (If you have edited the text, it would be wrong to discard
your changes.)

   The ‘C-x x g’ keystroke is bound to the ‘revert-buffer-quick’
command.  This is like the ‘revert-buffer’ command, but prompts less.
Unlike ‘revert-buffer’, it will not prompt if the current buffer visits
a file, and the buffer is not modified.  It also respects the
‘revert-buffer-quick-short-answers’ user option.  If this option is
non-‘nil’, use a shorter ‘y/n’ query instead of a longer ‘yes/no’ query.

   You can also tell Emacs to revert buffers automatically when their
visited files change on disk; *note Auto Revert::.


File: emacs.info,  Node: Auto Revert,  Next: Auto Save,  Prev: Reverting,  Up: Files

19.5 Auto Revert: Keeping buffers automatically up-to-date
==========================================================

A buffer can get out of sync with respect to its visited file on disk if
that file is changed by another program.  To keep it up to date, you can
enable Auto Revert mode by typing ‘M-x auto-revert-mode’.  This
automatically reverts the buffer when its visited file changes on disk.
To do the same for all file buffers, type ‘M-x global-auto-revert-mode’
to enable Global Auto Revert mode.

   Auto Revert will not revert a buffer if it has unsaved changes, or if
its file on disk is deleted or renamed.

   One use of Auto Revert mode is to “tail” a file such as a system log,
so that changes made to that file by other programs are continuously
displayed.  To do this, just move the point to the end of the buffer,
and it will stay there as the file contents change.  However, if you are
sure that the file will only change by growing at the end, use Auto
Revert Tail mode instead (‘auto-revert-tail-mode’).  It is more
efficient for this.  Auto Revert Tail mode also works for remote files.

   When a buffer is auto-reverted, a message is generated.  This can be
suppressed by setting ‘auto-revert-verbose’ to ‘nil’.

   The Auto Revert modes do not check or revert remote files, because
that is usually too slow.  This behavior can be changed by setting the
variable ‘auto-revert-remote-files’ to non-‘nil’.

   By default, Auto Revert mode works using “file notifications”,
whereby changes in the filesystem are reported to Emacs by the OS.  You
can disable use of file notifications by customizing the variable
‘auto-revert-use-notify’ to a ‘nil’ value, then Emacs will check for
file changes by polling every five seconds.  You can change the polling
interval through the variable ‘auto-revert-interval’.

   Not all systems support file notifications; where they are not
supported, ‘auto-revert-use-notify’ will be ‘nil’ by default.

   By default, Auto Revert mode will poll files for changes periodically
even when file notifications are used.  Polling is unnecessary in many
cases, and turning it off may save power by relying on notifications
only.  To do so, set the variable ‘auto-revert-avoid-polling’ to
non-‘nil’.  However, notification is ineffective on certain file
systems; mainly network file system on Unix-like machines, where files
can be altered from other machines.  For such file systems, polling may
be necessary.  To force polling when ‘auto-revert-avoid-polling’ is
non-‘nil’, set ‘auto-revert-notify-exclude-dir-regexp’ to match files
that should be excluded from using notification.

   In Dired buffers (*note Dired::), Auto Revert mode refreshes the
buffer when a file is created or deleted in the buffer’s directory.

   *Note VC Undo::, for commands to revert to earlier versions of files
under version control.  *Note VC Mode Line::, for Auto Revert
peculiarities when visiting files under version control.

* Menu:

* Non-File Buffers::    Auto Reverting Non-File Buffers.


File: emacs.info,  Node: Non-File Buffers,  Up: Auto Revert

19.5.1 Auto Reverting Non-File Buffers
--------------------------------------

Global Auto Revert Mode normally only reverts file buffers.  There are
two ways to auto-revert certain non-file buffers: by enabling Auto
Revert Mode in those buffers (using ‘M-x auto-revert-mode’); and by
setting ‘global-auto-revert-non-file-buffers’ to a non-‘nil’ value.  The
latter enables Auto Reverting for all types of buffers for which it is
implemented (listed in the menu below).

   Like file buffers, non-file buffers should normally not revert while
you are working on them, or while they contain information that might
get lost after reverting.  Therefore, they do not revert if they are
modified.  This can get tricky, because deciding when a non-file buffer
should be marked modified is usually more difficult than for file
buffers.

   Another tricky detail is that, for efficiency reasons, Auto Revert
often does not try to detect all possible changes in the buffer, only
changes that are major or easy to detect.  Hence, enabling
auto-reverting for a non-file buffer does not always guarantee that all
information in the buffer is up-to-date, and does not necessarily make
manual reverts useless.

   At the other extreme, certain buffers automatically revert every
‘auto-revert-interval’ seconds.  (This currently only applies to the
Buffer Menu.)  In this case, Auto Revert does not print any messages
while reverting, even when ‘auto-revert-verbose’ is non-‘nil’.

   Some non-file buffers can be updated reliably by file notification on
their default directory; Dired buffers is an example.  The major mode
can indicate this by setting ‘buffer-auto-revert-by-notification’ to a
non-‘nil’ value in that buffer, allowing Auto Revert to avoid periodic
polling.  Such notification does not include changes to files in that
directory, only to the directory itself.

   The details depend on the particular types of buffers and are
explained in the corresponding sections.

* Menu:

* Auto Reverting the Buffer Menu:: Auto Revert of the Buffer Menu.
* Auto Reverting Dired::           Auto Revert of Dired buffers.


File: emacs.info,  Node: Auto Reverting the Buffer Menu,  Next: Auto Reverting Dired,  Up: Non-File Buffers

19.5.1.1 Auto Reverting the Buffer Menu
.......................................

If auto-reverting of non-file buffers is enabled, the Buffer Menu (*note
Several Buffers::) automatically reverts every ‘auto-revert-interval’
seconds, whether there is a need for it or not.  (It would probably take
longer to check whether there is a need than to actually revert.)

   If the Buffer Menu inappropriately gets marked modified, just revert
it manually using ‘g’ and auto-reverting will resume.  However, if you
marked certain buffers to get deleted or to be displayed, you have to be
careful, because reverting erases all marks.  The fact that adding marks
sets the buffer’s modified flag prevents Auto Revert from automatically
erasing the marks.


File: emacs.info,  Node: Auto Reverting Dired,  Prev: Auto Reverting the Buffer Menu,  Up: Non-File Buffers

19.5.1.2 Auto Reverting Dired buffers
.....................................

Dired buffers only auto-revert when the file list of the buffer’s main
directory changes (e.g., when a new file is added or deleted).  They do
not auto-revert when information about a particular file changes (e.g.,
when the size changes) or when inserted subdirectories change.  To be
sure that _all_ listed information is up to date, you have to manually
revert using ‘g’, _even_ if auto-reverting is enabled in the Dired
buffer.  Sometimes, you might get the impression that modifying or
saving files listed in the main directory actually does cause
auto-reverting.  This is because making changes to a file, or saving it,
very often causes changes in the directory itself; for instance, through
backup files or auto-save files.  However, this is not guaranteed.

   If the Dired buffer is marked modified and there are no changes you
want to protect, then most of the time you can make auto-reverting
resume by manually reverting the buffer using ‘g’.  There is one
exception.  If you flag or mark files, you can safely revert the buffer.
This will not erase the flags or marks (unless the marked file has been
deleted, of course).  However, the buffer will stay modified, even after
reverting, and auto-reverting will not resume.  This is because, if you
flag or mark files, you may be working on the buffer and you might not
want the buffer to change without warning.  If you want auto-reverting
to resume in the presence of marks and flags, mark the buffer
non-modified using ‘M-~’.  However, adding, deleting or changing marks
or flags will mark it modified again.

   Remote Dired buffers are currently not auto-reverted.  Neither are
Dired buffers for which you used shell wildcards or file arguments to
list only some of the files.  ‘*Find*’ and ‘*Locate*’ buffers do not
auto-revert either.

   Note that auto-reverting Dired buffers may not work satisfactorily on
some systems.


File: emacs.info,  Node: Auto Save,  Next: File Aliases,  Prev: Auto Revert,  Up: Files

19.6 Auto-Saving: Protection Against Disasters
==============================================

From time to time, Emacs automatically saves each visited file in a
separate file, without altering the file you actually use.  This is
called “auto-saving”.  It prevents you from losing more than a limited
amount of work if the system crashes.

   When Emacs determines that it is time for auto-saving, it considers
each buffer, and each is auto-saved if auto-saving is enabled for it and
it has been changed since the last time it was auto-saved.  When the
‘auto-save-no-message’ variable is set to ‘nil’ (the default), the
message ‘Auto-saving...’ is displayed in the echo area during
auto-saving, if any files are actually auto-saved; to disable these
messages, customize the variable to a non-‘nil’ value.  Errors occurring
during auto-saving are caught so that they do not interfere with the
execution of commands you have been typing.

* Menu:

* Files: Auto Save Files.       The file where auto-saved changes are
                                  actually made until you save the file.
* Control: Auto Save Control.   Controlling when and how often to auto-save.
* Recover::                     Recovering text from auto-save files.


File: emacs.info,  Node: Auto Save Files,  Next: Auto Save Control,  Up: Auto Save

19.6.1 Auto-Save Files
----------------------

Auto-saving does not normally save in the files that you visited,
because it can be very undesirable to save a change that you did not
want to make permanent.  Instead, auto-saving is done in a different
file called the “auto-save file”, and the visited file is changed only
when you request saving explicitly (such as with ‘C-x C-s’).

   Normally, the auto-save file name is made by appending ‘#’ to the
front and rear of the visited file name.  Thus, a buffer visiting file
‘foo.c’ is auto-saved in a file ‘#foo.c#’.  Most buffers that are not
visiting files are auto-saved only if you request it explicitly; when
they are auto-saved, the auto-save file name is made by appending ‘#’ to
the front and rear of buffer name, then adding digits and letters at the
end for uniqueness.  For example, the ‘*mail*’ buffer in which you
compose messages to be sent might be auto-saved in a file named
‘#*mail*#704juu’.  Auto-save file names are made this way unless you
reprogram parts of Emacs to do something different (the functions
‘make-auto-save-file-name’ and ‘auto-save-file-name-p’).  The file name
to be used for auto-saving in a buffer is calculated when auto-saving is
turned on in that buffer.

   The variable ‘auto-save-file-name-transforms’ allows a degree of
control over the auto-save file name.  It lets you specify a series of
regular expressions and replacements to transform the auto save file
name.  The default value puts the auto-save files for remote files
(*note Remote Files::) into the temporary file directory on the local
machine.

   When you delete a substantial part of the text in a large buffer,
auto save turns off temporarily in that buffer.  This is because if you
deleted the text unintentionally, you might find the auto-save file more
useful if it contains the deleted text.  To reenable auto-saving after
this happens, save the buffer with ‘C-x C-s’, or use ‘C-u 1 M-x
auto-save-mode’.

   If you want auto-saving to be done in the visited file rather than in
a separate auto-save file, enable the global minor mode
‘auto-save-visited-mode’.  In this mode, auto-saving is identical to
explicit saving.  Note that this mode is orthogonal to the ‘auto-save’
mode described above; you can enable both at the same time.  However, if
‘auto-save’ mode is active in some buffer and the obsolete
‘auto-save-visited-file-name’ variable is set to a non-‘nil’ value, that
buffer won’t be affected by ‘auto-save-visited-mode’.

   You can use the variable ‘auto-save-visited-interval’ to customize
the interval between auto-save operations in ‘auto-save-visited-mode’;
by default it’s five seconds.  ‘auto-save-interval’ and
‘auto-save-timeout’ have no effect on ‘auto-save-visited-mode’.  *Note
Auto Save Control::, for details on these variables.

   A buffer’s auto-save file is deleted when you save the buffer in its
visited file.  (You can inhibit this by setting the variable
‘delete-auto-save-files’ to ‘nil’.)  Changing the visited file name with
‘C-x C-w’ or ‘set-visited-file-name’ renames any auto-save file to go
with the new visited name.

   Killing a buffer, by default, doesn’t remove the buffer’s auto-save
file.  If ‘kill-buffer-delete-auto-save-files’ is non-‘nil’, killing a
buffer that has an auto-save file will make Emacs prompt the user for
whether the auto-save file should be deleted.  (This is inhibited if
‘delete-auto-save-files’ is ‘nil’.)


File: emacs.info,  Node: Auto Save Control,  Next: Recover,  Prev: Auto Save Files,  Up: Auto Save

19.6.2 Controlling Auto-Saving
------------------------------

Each time you visit a file, auto-saving is turned on for that file’s
buffer if the variable ‘auto-save-default’ is non-‘nil’ (but not in
batch mode; *note Initial Options::).  The default for this variable is
‘t’, so auto-saving is the usual practice for file-visiting buffers.  To
toggle auto-saving in the current buffer, type ‘M-x auto-save-mode’.
Auto Save mode acts as a buffer-local minor mode (*note Minor Modes::).

   Emacs auto-saves periodically based on how many characters you have
typed since the last auto-save.  The variable ‘auto-save-interval’
specifies how many characters there are between auto-saves.  By default,
it is 300.  Emacs doesn’t accept values that are too small: if you
customize ‘auto-save-interval’ to a value less than 20, Emacs will
behave as if the value is 20.

   Auto-saving also takes place when you stop typing for a while.  By
default, it does this after 30 seconds of idleness (at this time, Emacs
may also perform garbage collection; *note (elisp)Garbage Collection::).
To change this interval, customize the variable ‘auto-save-timeout’.
The actual time period is longer if the current buffer is long; this is
a heuristic which aims to keep out of your way when you are editing long
buffers, in which auto-save takes an appreciable amount of time.
Auto-saving during idle periods accomplishes two things: first, it makes
sure all your work is saved if you go away from the terminal for a
while; second, it may avoid some auto-saving while you are actually
typing.

   When ‘auto-save-visited-mode’ is enabled, Emacs will auto-save
file-visiting buffers after five seconds of idle time.  You can
customize the variable ‘auto-save-visited-interval’ to change the idle
time interval.

   Emacs also does auto-saving whenever it gets a fatal error.  This
includes killing the Emacs job with a shell command such as ‘kill
%emacs’, or disconnecting a phone line or network connection.

   You can perform an auto-save explicitly with the command ‘M-x
do-auto-save’.


File: emacs.info,  Node: Recover,  Prev: Auto Save Control,  Up: Auto Save

19.6.3 Recovering Data from Auto-Saves
--------------------------------------

You can use the contents of an auto-save file to recover from a loss of
data with the command ‘M-x recover-file <RET> FILE <RET>’.  This visits
FILE and then (after your confirmation) restores the contents from its
auto-save file ‘#FILE#’.  You can then save with ‘C-x C-s’ to put the
recovered text into FILE itself.  For example, to recover file ‘foo.c’
from its auto-save file ‘#foo.c#’, do:

     M-x recover-file <RET> foo.c <RET>
     yes <RET>
     C-x C-s

   Before asking for confirmation, ‘M-x recover-file’ displays a
directory listing describing the specified file and the auto-save file,
so you can compare their sizes and dates.  If the auto-save file is
older, ‘M-x recover-file’ does not offer to read it.

   If Emacs or the computer crashes, you can recover all the files you
were editing from their auto save files with the command ‘M-x
recover-session’.  This first shows you a list of recorded interrupted
sessions.  Move point to the one you choose, and type ‘C-c C-c’.

   Then ‘recover-session’ asks about each of the files that were being
edited during that session, asking whether to recover that file.  If you
answer ‘y’, it calls ‘recover-file’, which works in its normal fashion.
It shows the dates of the original file and its auto-save file, and asks
once again whether to recover that file.

   When ‘recover-session’ is done, the files you’ve chosen to recover
are present in Emacs buffers.  You should then save them.  Only
this—saving them—updates the files themselves.

   Emacs records information about interrupted sessions in files named
‘.saves-PID-HOSTNAME~’ in the directory ‘~/.emacs.d/auto-save-list/’.
This directory is determined by the variable
‘auto-save-list-file-prefix’.  If you set ‘auto-save-list-file-prefix’
to ‘nil’, sessions are not recorded for recovery.


File: emacs.info,  Node: File Aliases,  Next: Directories,  Prev: Auto Save,  Up: Files

19.7 File Name Aliases
======================

Symbolic links and hard links both make it possible for several file
names to refer to the same file.  Hard links are alternate names that
refer directly to the file; all the names are equally valid, and no one
of them is preferred.  By contrast, a symbolic link is a kind of defined
alias: when ‘foo’ is a symbolic link to ‘bar’, you can use either name
to refer to the file, but ‘bar’ is the real name, while ‘foo’ is just an
alias.  More complex cases occur when symbolic links point to
directories.

   Normally, if you visit a file which Emacs is already visiting under a
different name, Emacs displays a message in the echo area and uses the
existing buffer visiting that file.  This can happen on systems that
support hard or symbolic links, or if you use a long file name on a
system that truncates long file names, or on a case-insensitive file
system.  You can suppress the message by setting the variable
‘find-file-suppress-same-file-warnings’ to a non-‘nil’ value.  You can
disable this feature entirely by setting the variable
‘find-file-existing-other-name’ to ‘nil’: then if you visit the same
file under two different names, you get a separate buffer for each file
name.

   If the variable ‘find-file-visit-truename’ is non-‘nil’, then the
file name recorded for a buffer is the file’s “truename” (made by
replacing all symbolic links with their target names), rather than the
name you specify.  Setting ‘find-file-visit-truename’ also implies the
effect of ‘find-file-existing-other-name’.

   Sometimes, a directory is ordinarily accessed through a symbolic
link, and you may want Emacs to preferentially show its linked name.  To
do this, customize ‘directory-abbrev-alist’.  Each element in this list
should have the form ‘(FROM . TO)’, which means to replace FROM with TO
whenever FROM appears in a directory name.  The FROM string is a regular
expression (*note Regexps::).  It is matched against directory names
anchored at the first character, and should start with ‘\`’ (to support
directory names with embedded newlines, which would defeat ‘^’).  The TO
string should be an ordinary absolute directory name pointing to the
same directory.  Do not use ‘~’ to stand for a home directory in the TO
string; Emacs performs these substitutions separately.  Here’s an
example, from a system on which ‘/home/fsf’ is normally accessed through
a symbolic link named ‘/fsf’:

     (("\\`/home/fsf" . "/fsf"))


File: emacs.info,  Node: Directories,  Next: Comparing Files,  Prev: File Aliases,  Up: Files

19.8 File Directories
=====================

The file system groups files into “directories”.  A “directory listing”
is a list of all the files in a directory.  Emacs provides commands to
create and delete directories, and to make directory listings in brief
format (file names only) and verbose format (sizes, dates, and other
attributes included).  Emacs also includes a directory browser feature
called Dired, which you can invoke with ‘C-x d’; see *note Dired::.

‘C-x C-d DIR-OR-PATTERN <RET>’
     Display a brief directory listing (‘list-directory’).
‘C-u C-x C-d DIR-OR-PATTERN <RET>’
     Display a verbose directory listing.
‘M-x make-directory <RET> DIRNAME <RET>’
     Create a new directory named DIRNAME.
‘M-x delete-directory <RET> DIRNAME <RET>’
     Delete the directory named DIRNAME.  If it isn’t empty, you will be
     asked whether you want to delete it recursively.

   The command to display a directory listing is ‘C-x C-d’
(‘list-directory’).  It reads using the minibuffer a file name which is
either a directory to be listed or a wildcard-containing pattern for the
files to be listed.  For example,

     C-x C-d /u2/emacs/etc <RET>

lists all the files in directory ‘/u2/emacs/etc’.  Here is an example of
specifying a file name pattern:

     C-x C-d /u2/emacs/src/*.c <RET>

   Normally, ‘C-x C-d’ displays a brief directory listing containing
just file names.  A numeric argument (regardless of value) tells it to
make a verbose listing including sizes, dates, and owners (like ‘ls
-l’).

   The text of a directory listing is mostly obtained by running ‘ls’ in
an inferior process.  Two Emacs variables control the switches passed to
‘ls’: ‘list-directory-brief-switches’ is a string giving the switches to
use in brief listings (‘"-CF"’ by default), and
‘list-directory-verbose-switches’ is a string giving the switches to use
in a verbose listing (‘"-l"’ by default).

   In verbose directory listings, Emacs adds information about the
amount of free space on the disk that contains the directory.

   The command ‘M-x delete-directory’ prompts for a directory’s name
using the minibuffer, and deletes the directory if it is empty.  If the
directory is not empty, you will be asked whether you want to delete it
recursively.  On systems that have a “Trash” (or “Recycle Bin”) feature,
you can make this command move the specified directory to the Trash
instead of deleting it outright, by changing the variable
‘delete-by-moving-to-trash’ to ‘t’.  *Note Misc File Ops::, for more
information about using the Trash.


File: emacs.info,  Node: Comparing Files,  Next: Diff Mode,  Prev: Directories,  Up: Files

19.9 Comparing Files
====================

The command ‘M-x diff’ prompts for two file names, using the minibuffer,
and displays the differences between the two files in a buffer named
‘*diff*’.  This works by running the ‘diff’ program, using options taken
from the variable ‘diff-switches’.  The value of ‘diff-switches’ should
be a string; the default is ‘"-u"’ to specify a unified context diff.
*Note Diff: (diffutils)Top, for more information about the ‘diff’
program.

   The output of the ‘diff’ command is shown using a major mode called
Diff mode.  *Note Diff Mode::.

   A (much more sophisticated) alternative is ‘M-x ediff’ (*note Ediff:
(ediff)Top.).

   The command ‘M-x diff-backup’ compares a specified file with its most
recent backup.  If you specify the name of a backup file, ‘diff-backup’
compares it with the source file that it is a backup of.  In all other
respects, this behaves like ‘M-x diff’.

   The command ‘M-x diff-buffer-with-file’ compares a specified buffer
with its corresponding file.  This shows you what changes you would make
to the file if you save the buffer.

   The command ‘M-x diff-buffers’ compares the contents of two specified
buffers.

   The command ‘M-x compare-windows’ compares the text in the current
window with that in the window that was the selected window before you
selected the current one.  (For more information about windows in Emacs,
*note Windows::.)  Comparison starts at point in each window, after
pushing each initial point value on the mark ring (*note Mark Ring::) in
its respective buffer.  Then it moves point forward in each window, one
character at a time, until it reaches characters that don’t match.  Then
the command exits.

   If point in the two windows is followed by non-matching text when the
command starts, ‘M-x compare-windows’ tries heuristically to advance up
to matching text in the two windows, and then exits.  So if you use ‘M-x
compare-windows’ repeatedly (*note Repeating::), each time it either
skips one matching range or finds the start of another.

   With a numeric argument, ‘compare-windows’ ignores changes in
whitespace.  If the variable ‘compare-ignore-case’ is non-‘nil’, the
comparison ignores differences in case as well.  If the variable
‘compare-ignore-whitespace’ is non-‘nil’, ‘compare-windows’ by default
ignores changes in whitespace, but a prefix argument turns that off for
that single invocation of the command.

   You can use ‘M-x smerge-mode’ to turn on Smerge mode, a minor mode
for editing output from the ‘diff3’ program.  This is typically the
result of a failed merge from a version control system update outside
VC, due to conflicting changes to a file.  Smerge mode provides commands
to resolve conflicts by selecting specific changes.

   *Note Emerge::, for the Emerge facility, which provides a powerful
interface for merging files.


File: emacs.info,  Node: Diff Mode,  Next: Copying and Naming,  Prev: Comparing Files,  Up: Files

19.10 Diff Mode
===============

Diff mode is a major mode used for the output of ‘M-x diff’ and other
similar commands.  This kind of output is called a “patch”, because it
can be passed to the ‘patch’ command to automatically apply the
specified changes.  To select Diff mode manually, type ‘M-x diff-mode’.

   The changes specified in a patch are grouped into “hunks”, which are
contiguous chunks of text that contain one or more changed lines.  Hunks
usually also include unchanged lines to provide context for the changes.
Each hunk is preceded by a “hunk header”, which specifies the old and
new line numbers where the hunk’s changes occur.  Diff mode highlights
each hunk header, to distinguish it from the actual contents of the
hunk.

   The first hunk in a patch is preceded by a file header, which shows
the names of the new and the old versions of the file, and their time
stamps.  If a patch shows changes for more than one file, each file has
such a header before the first hunk of that file’s changes.

   You can edit a Diff mode buffer like any other buffer.  (If it is
read-only, you need to make it writable first; see *note Misc Buffer::.)
Whenever you edit a hunk, Diff mode attempts to automatically correct
the line numbers in the hunk headers, to ensure that the patch remains
correct, and could still be applied by ‘patch’.  To disable automatic
line number correction, change the variable ‘diff-update-on-the-fly’ to
‘nil’.

   Diff mode arranges for hunks to be treated as compiler error messages
by ‘M-g M-n’ and other commands that handle error messages (*note
Compilation Mode::).  Thus, you can use the compilation-mode commands to
visit the corresponding source locations.

   In addition, Diff mode provides the following commands to navigate,
manipulate and apply parts of patches:

‘M-n’
     Move to the next hunk-start (‘diff-hunk-next’).  With prefix
     argument N, move forward to the Nth next hunk.

     By default, Diff mode “refines” hunks as Emacs displays them,
     highlighting their changes with better granularity.  Alternatively,
     if you set ‘diff-refine’ to the symbol ‘navigation’, Diff mode only
     refines the hunk you move to with this command or with
     ‘diff-hunk-prev’.

‘M-p’
     Move to the previous hunk-start (‘diff-hunk-prev’).  With prefix
     argument N, move back to the Nth previous hunk.  Like ‘M-n’, this
     command refines the hunk you move to if you set ‘diff-refine’ to
     the symbol ‘navigation’.

‘M-}’
     Move to the next file-start, in a multi-file patch
     (‘diff-file-next’).  With prefix argument N, move forward to the
     start of the Nth next file.

‘M-{’
     Move to the previous file-start, in a multi-file patch
     (‘diff-file-prev’).  With prefix argument N, move back to the start
     of the Nth previous file.

‘M-k’
     Kill the hunk at point (‘diff-hunk-kill’).

‘M-K’
     In a multi-file patch, kill the current file part.
     (‘diff-file-kill’).

‘C-c C-a’
     Apply this hunk to its target file (‘diff-apply-hunk’).  With a
     prefix argument of ‘C-u’, revert this hunk, i.e. apply the reverse
     of the hunk, which changes the “new” version into the “old”
     version.  If ‘diff-jump-to-old-file’ is non-‘nil’, apply the hunk
     to the “old” version of the file instead.

‘C-c C-b’
     Highlight the changes of the hunk at point with a finer granularity
     (‘diff-refine-hunk’).  This allows you to see exactly which parts
     of each changed line were actually changed.

     By default, Diff mode refines hunks as Emacs displays them, so you
     may find this command useful if you customize ‘diff-refine’ to a
     non-default value.

‘C-c C-c’
     Go to the source file and line corresponding to this hunk
     (‘diff-goto-source’).  By default, this jumps to the “new” version
     of the file, the one shown first on the file header.  With a prefix
     argument, jump to the “old” version instead.  If
     ‘diff-jump-to-old-file’ is non-‘nil’, this command by default jumps
     to the “old” file, and the meaning of the prefix argument is
     reversed.  If the prefix argument is a number greater than 8 (e.g.,
     if you type ‘C-u C-u C-c C-c’), then this command also sets
     ‘diff-jump-to-old-file’ for the next invocation.  If the source
     file is under version control (*note Version Control::), this jumps
     to the work file by default.  With a prefix argument, jump to the
     “old” revision of the file (*note Old Revisions::), when point is
     on the old line, or otherwise jump to the “new” revision.

‘C-c C-e’
     Start an Ediff session with the patch (‘diff-ediff-patch’).  *Note
     Ediff: (ediff)Top.

‘C-c C-n’
     Restrict the view to the current hunk (‘diff-restrict-view’).
     *Note Narrowing::.  With a prefix argument, restrict the view to
     the current file of a multiple-file patch.  To widen again, use
     ‘C-x n w’ (‘widen’).

‘C-c C-r’
     Reverse the direction of comparison for the entire buffer
     (‘diff-reverse-direction’).  With a prefix argument, reverse the
     direction only inside the current region (*note Mark::).  Reversing
     the direction means changing the hunks and the file-start headers
     to produce a patch that would change the “new” version into the
     “old” one.

‘C-c C-s’
     Split the hunk at point (‘diff-split-hunk’) into two separate
     hunks.  This inserts a hunk header and modifies the header of the
     current hunk.  This command is useful for manually editing patches,
     and only works with the “unified diff format” produced by the ‘-u’
     or ‘--unified’ options to the ‘diff’ program.  If you need to split
     a hunk in the “context diff format” produced by the ‘-c’ or
     ‘--context’ options to ‘diff’, first convert the buffer to the
     unified diff format with ‘C-c C-u’.

‘C-c C-d’
     Convert the entire buffer to the “context diff format”
     (‘diff-unified->context’).  With a prefix argument, convert only
     the hunks within the region.

‘C-c C-u’
     Convert the entire buffer to unified diff format
     (‘diff-context->unified’).  With a prefix argument, convert unified
     format to context format.  When the mark is active, convert only
     the hunks within the region.

‘C-c C-l’
     Re-generate the current hunk (‘diff-refresh-hunk’).

‘C-c C-w’
     Re-generate the current hunk, disregarding changes in whitespace
     (‘diff-ignore-whitespace-hunk’).

‘C-x 4 A’
     Generate a ChangeLog entry, like ‘C-x 4 a’ does (*note Change
     Log::), for each one of the hunks
     (‘diff-add-change-log-entries-other-window’).  This creates a
     skeleton of the log of changes that you can later fill with the
     actual descriptions of the changes.  ‘C-x 4 a’ itself in Diff mode
     operates on behalf of the current hunk’s file, but gets the
     function name from the patch itself.  This is useful for making log
     entries for functions that are deleted by the patch.

   Patches sometimes include trailing whitespace on modified lines, as
an unintentional and undesired change.  There are two ways to deal with
this problem.  Firstly, if you enable Whitespace mode in a Diff buffer
(*note Useless Whitespace::), it automatically highlights trailing
whitespace in modified lines.  Secondly, you can use the command ‘M-x
diff-delete-trailing-whitespace’, which searches for trailing whitespace
in the lines modified by the patch, and removes that whitespace in both
the patch and the patched source file(s).  This command does not save
the modifications that it makes, so you can decide whether to save the
changes (the list of modified files is displayed in the echo area).
With a prefix argument, it tries to modify the original (“old”) source
files rather than the patched (“new”) source files.

   If ‘diff-font-lock-syntax’ is non-‘nil’, fragments of source in hunks
are highlighted according to the appropriate major mode.


File: emacs.info,  Node: Copying and Naming,  Next: Misc File Ops,  Prev: Diff Mode,  Up: Files

19.11 Copying, Naming and Renaming Files
========================================

Emacs has several commands for copying, naming, and renaming files.  All
of them read two file names, OLD (or TARGET) and NEW, using the
minibuffer, and then copy or adjust a file’s name accordingly; they do
not accept wildcard file names.

   In all these commands, if the argument NEW is just a directory name
(*note (elisp)Directory Names::), the real new name is in that
directory, with the same non-directory component as OLD.  For example,
the command ‘M-x rename-file <RET> ~/foo <RET> /tmp/ <RET>’ renames
‘~/foo’ to ‘/tmp/foo’.  On GNU and other POSIX-like systems, directory
names end in ‘/’.

   All these commands ask for confirmation when the new file name
already exists.

   ‘M-x copy-file’ copies the contents of the file OLD to the file NEW.

   ‘M-x copy-directory’ copies directories, similar to the ‘cp -r’ shell
command.  If NEW is a directory name, it creates a copy of the OLD
directory and puts it in NEW.  Otherwise it copies all the contents of
OLD into a new directory named NEW.  If ‘copy-directory-create-symlink’
is non-‘nil’ and OLD is a symbolic link, this command will copy the
symbolic link.  If ‘nil’, this command will follow the link and copy the
contents instead.  (This is the default.)

   ‘M-x rename-file’ renames file OLD as NEW.  If the file name NEW
already exists, you must confirm with ‘yes’ or renaming is not done;
this is because renaming causes the old meaning of the name NEW to be
lost.  If OLD and NEW are on different file systems, the file OLD is
copied and deleted.

   If a file is under version control (*note Version Control::), you
should rename it using ‘M-x vc-rename-file’ instead of
‘M-x rename-file’.  *Note VC Delete/Rename::.

   ‘M-x add-name-to-file’ adds an additional name to an existing file
without removing the old name.  The new name is created as a hard link
to the existing file.  The new name must belong on the same file system
that the file is on.  On MS-Windows, this command works only if the file
resides in an NTFS file system.  On MS-DOS, and some remote system
types, it works by copying the file.

   ‘M-x make-symbolic-link’ creates a symbolic link named NEW, which
points at TARGET.  The effect is that future attempts to open file NEW
will refer to whatever file is named TARGET at the time the opening is
done, or will get an error if the name TARGET is nonexistent at that
time.  This command does not expand the argument TARGET, so that it
allows you to specify a relative name as the target of the link.
However, this command does expand leading ‘~’ in TARGET so that you can
easily specify home directories, and strips leading ‘/:’ so that you can
specify relative names beginning with literal ‘~’ or ‘/:’.  *Note Quoted
File Names::.  On MS-Windows, this command works only on MS Windows
Vista and later.  When NEW is remote, it works depending on the system
type.


File: emacs.info,  Node: Misc File Ops,  Next: Compressed Files,  Prev: Copying and Naming,  Up: Files

19.12 Miscellaneous File Operations
===================================

Emacs has commands for performing many other operations on files.  All
operate on one file; they do not accept wildcard file names.

   ‘M-x delete-file’ prompts for a file and deletes it.  If you are
deleting many files in one directory, it may be more convenient to use
Dired rather than ‘delete-file’.  *Note Dired Deletion::.

   ‘M-x move-file-to-trash’ moves a file into the system “Trash” (or
“Recycle Bin”).  This is a facility available on most operating systems;
files that are moved into the Trash can be brought back later if you
change your mind.  (The way to restore trashed files is
system-dependent.)

   By default, Emacs deletion commands do _not_ use the Trash.  To use
the Trash (when it is available) for common deletion commands, change
the variable ‘delete-by-moving-to-trash’ to ‘t’.  This affects the
commands ‘M-x delete-file’ and ‘M-x delete-directory’ (*note
Directories::), as well as the deletion commands in Dired (*note Dired
Deletion::).  Supplying a prefix argument to ‘M-x delete-file’ or ‘M-x
delete-directory’ makes them delete outright, instead of using the
Trash, regardless of ‘delete-by-moving-to-trash’.

   If you have ‘delete-by-moving-to-trash’ set, and you want to delete
files manually in Emacs from the Trash directory, using commands like
‘D’ (‘dired-do-delete’) doesn’t work well in the Trash directory (it’ll
just give the file a new name, but won’t delete anything).  If you want
to be able to do this, you should create a ‘.dir-locals.el’ file
containing something like the following in the Trash directory:

     ((dired-mode . ((delete-by-moving-to-trash . nil))))

   Note, however, if you use the system “empty trash” command, it’s
liable to also delete this ‘.dir-locals.el’ file, so this should only be
done if you delete files from the Trash directory manually.

   If a file is under version control (*note Version Control::), you
should delete it using ‘M-x vc-delete-file’ instead of ‘M-x
delete-file’.  *Note VC Delete/Rename::.

   ‘M-x insert-file’ (also ‘C-x i’) inserts a copy of the contents of
the specified file into the current buffer at point, leaving point
unchanged before the contents.  The position after the inserted contents
is added to the mark ring, without activating the mark (*note Mark
Ring::).

   ‘M-x insert-file-literally’ is like ‘M-x insert-file’, except the
file is inserted literally: it is treated as a sequence of ASCII
characters with no special encoding or conversion, similar to the ‘M-x
find-file-literally’ command (*note Visiting::).

   ‘M-x write-region’ is the inverse of ‘M-x insert-file’; it copies the
contents of the region into the specified file.  ‘M-x append-to-file’
adds the text of the region to the end of the specified file.  *Note
Accumulating Text::.  The variable ‘write-region-inhibit-fsync’ applies
to these commands, as well as saving files; see *note Customize Save::.

   ‘M-x set-file-modes’ reads a file name followed by a “file mode”, and
applies that file mode to the specified file.  File modes, also called
“file permissions”, determine whether a file can be read, written to, or
executed, and by whom.  This command reads file modes using the same
symbolic or octal format accepted by the ‘chmod’ command; for instance,
‘u+x’ means to add execution permission for the user who owns the file.
It has no effect on operating systems that do not support file modes.
‘chmod’ is a convenience alias for this function.


File: emacs.info,  Node: Compressed Files,  Next: File Archives,  Prev: Misc File Ops,  Up: Files

19.13 Accessing Compressed Files
================================

Emacs automatically uncompresses compressed files when you visit them,
and automatically recompresses them if you alter them and save them.
Emacs recognizes compressed files by their file names.  File names
ending in ‘.gz’ indicate a file compressed with ‘gzip’.  Other endings
indicate other compression programs.

   Automatic uncompression and compression apply to all the operations
in which Emacs uses the contents of a file.  This includes visiting it,
saving it, inserting its contents into a buffer, loading it, and byte
compiling it.

   To disable this feature, type the command ‘M-x
auto-compression-mode’.  You can disable it permanently by customizing
the variable ‘auto-compression-mode’.


File: emacs.info,  Node: File Archives,  Next: Remote Files,  Prev: Compressed Files,  Up: Files

19.14 File Archives
===================

A file whose name ends in ‘.tar’ is normally an “archive” made by the
‘tar’ program.  Emacs views these files in a special mode called Tar
mode which provides a Dired-like list of the contents (*note Dired::).
You can move around through the list just as you would in Dired, and
visit the subfiles contained in the archive.  However, not all Dired
commands are available in Tar mode.

   If Auto Compression mode is enabled (*note Compressed Files::), then
Tar mode is used also for compressed archives—files with extensions
‘.tgz’, ‘.tar.Z’ and ‘.tar.gz’.

   The keys ‘e’, ‘f’ and <RET> all extract a component file into its own
buffer.  You can edit it there, and if you save the buffer, the edited
version will replace the version in the Tar buffer.  Clicking with the
mouse on the file name in the Tar buffer does likewise.  ‘v’ extracts a
file into a buffer in View mode (*note View Mode::).  ‘o’ extracts the
file and displays it in another window, so you could edit the file and
operate on the archive simultaneously.

   The ‘I’ key adds a new (regular) file to the archive.  The file is
initially empty, but can readily be edited using the commands above.
The command inserts the new file before the current one, so that using
it on the topmost line of the Tar buffer makes the new file the first
one in the archive, and using it at the end of the buffer makes it the
last one.

   ‘d’ marks a file for deletion when you later use ‘x’, and ‘u’ unmarks
a file, as in Dired.  ‘C’ copies a file from the archive to disk and ‘R’
renames a file within the archive.  ‘g’ reverts the buffer from the
archive on disk.  The keys ‘M’, ‘G’, and ‘O’ change the file’s
permission bits, group, and owner, respectively.

   Saving the Tar buffer writes a new version of the archive to disk
with the changes you made to the components.

   You don’t need the ‘tar’ program to use Tar mode—Emacs reads the
archives directly.  However, accessing compressed archives requires the
appropriate uncompression program.

   A separate but similar Archive mode is used for ‘arc’, ‘jar’, ‘lzh’,
‘zip’, ‘rar’, ‘7z’, and ‘zoo’ archives, as well as ‘exe’ files that are
self-extracting executables.

   The key bindings of Archive mode are similar to those in Tar mode,
with the addition of the ‘m’ key which marks a file for subsequent
operations, and ‘M-<DEL>’ which unmarks all the marked files.  Also, the
‘a’ key toggles the display of detailed file information, for those
archive types where it won’t fit in a single line.  Operations such as
renaming a subfile, or changing its mode or owner, are supported only
for some of the archive formats.

   Unlike Tar mode, Archive mode runs the archiving programs to unpack
and repack archives.  However, you don’t need these programs to look at
the archive table of contents, only to extract or manipulate the
subfiles in the archive.  Details of the program names and their options
can be set in the ‘Archive’ Customize group (*note Customization
Groups::).


File: emacs.info,  Node: Remote Files,  Next: Quoted File Names,  Prev: File Archives,  Up: Files

19.15 Remote Files
==================

You can refer to files on other machines using a special file name
syntax:

     /METHOD:HOST:FILENAME
     /METHOD:USER@HOST:FILENAME
     /METHOD:USER@HOST#PORT:FILENAME

To carry out this request, Emacs uses a remote-login program such as
‘ssh’.  You must always specify in the file name which method to use—for
example, ‘/ssh:USER@HOST:FILENAME’ uses ‘ssh’.  When you specify the
pseudo method ‘-’ in the file name, Emacs chooses the method as follows:

  1. If the host name starts with ‘ftp.’ (with dot), Emacs uses FTP.
  2. If the user name is ‘ftp’ or ‘anonymous’, Emacs uses FTP.
  3. If the variable ‘tramp-default-method’ is set to ‘ftp’, Emacs uses
     FTP.
  4. If ‘ssh-agent’ is running, Emacs uses ‘scp’.
  5. Otherwise, Emacs uses ‘ssh’.

You can entirely turn off the remote file name feature by setting the
variable ‘tramp-mode’ to ‘nil’.  You can turn off the feature in
individual cases by quoting the file name with ‘/:’ (*note Quoted File
Names::).

   Remote file access through FTP is handled by the Ange-FTP package,
which is documented in the following.  Remote file access through the
other methods is handled by the Tramp package, which has its own manual.
*Note The Tramp Manual: (tramp)Top.

   When the Ange-FTP package is used, Emacs logs in through FTP using
the name USER, if that is specified in the remote file name.  If USER is
unspecified, Emacs logs in using your user name on the local system; but
if you set the variable ‘ange-ftp-default-user’ to a string, that string
is used instead.  When logging in, Emacs may also ask for a password.

   For performance reasons, Emacs does not make backup files for files
accessed via FTP by default.  To make it do so, change the variable
‘ange-ftp-make-backup-files’ to a non-‘nil’ value.

   By default, auto-save files for remote files are made in the
temporary file directory on the local machine, as specified by the
variable ‘auto-save-file-name-transforms’.  *Note Auto Save Files::.

   To visit files accessible by anonymous FTP, you use special user
names ‘anonymous’ or ‘ftp’.  Passwords for these user names are handled
specially.  The variable ‘ange-ftp-generate-anonymous-password’ controls
what happens: if the value of this variable is a string, then that
string is used as the password; if non-‘nil’ (the default), then the
value of ‘user-mail-address’ is used; if ‘nil’, then Emacs prompts you
for a password as usual (*note Passwords::).

   Sometimes you may be unable to access files on a remote machine
because a “firewall” in between blocks the connection for security
reasons.  If you can log in on a “gateway” machine from which the target
files _are_ accessible, and whose FTP server supports gatewaying
features, you can still use remote file names; all you have to do is
specify the name of the gateway machine by setting the variable
‘ange-ftp-gateway-host’, and set ‘ange-ftp-smart-gateway’ to ‘t’.
Otherwise you may be able to make remote file names work, but the
procedure is complex.  You can read the instructions by typing ‘M-x
finder-commentary <RET> ange-ftp <RET>’.


File: emacs.info,  Node: Quoted File Names,  Next: File Name Cache,  Prev: Remote Files,  Up: Files

19.16 Quoted File Names
=======================

You can “quote” an absolute file name to prevent special characters and
syntax in it from having their special effects.  The way to do this is
to add ‘/:’ at the beginning.

   For example, you can quote a local file name which appears remote, to
prevent it from being treated as a remote file name.  Thus, if you have
a directory named ‘/foo:’ and a file named ‘bar’ in it, you can refer to
that file in Emacs as ‘/:/foo:/bar’.

   If you want to quote only special characters in the local part of a
remote file name, you can quote just the local part.
‘/ssh:baz:/:/foo:/bar’ refers to the file ‘bar’ of directory ‘/foo:’ on
the host ‘baz’.

   ‘/:’ can also prevent ‘~’ from being treated as a special character
for a user’s home directory.  For example, ‘/:/tmp/~hack’ refers to a
file whose name is ‘~hack’ in directory ‘/tmp’.

   Quoting with ‘/:’ is also a way to enter in the minibuffer a file
name that contains ‘$’.  In order for this to work, the ‘/:’ must be at
the beginning of the minibuffer contents.  (You can also double each
‘$’; see *note File Names with $::.)

   You can also quote wildcard characters with ‘/:’, for visiting.  For
example, ‘/:/tmp/foo*bar’ visits the file ‘/tmp/foo*bar’.

   Another method of getting the same result is to enter
‘/tmp/foo[*]bar’, which is a wildcard specification that matches only
‘/tmp/foo*bar’.  However, in many cases there is no need to quote the
wildcard characters because even unquoted they give the right result.
For example, if the only file name in ‘/tmp’ that starts with ‘foo’ and
ends with ‘bar’ is ‘foo*bar’, then specifying ‘/tmp/foo*bar’ will visit
only ‘/tmp/foo*bar’.


File: emacs.info,  Node: File Name Cache,  Next: File Conveniences,  Prev: Quoted File Names,  Up: Files

19.17 File Name Cache
=====================

You can use the “file name cache” to make it easy to locate a file by
name, without having to remember exactly where it is located.  When
typing a file name in the minibuffer, ‘C-<TAB>’
(‘file-cache-minibuffer-complete’) completes it using the file name
cache.  If you repeat ‘C-<TAB>’, that cycles through the possible
completions of what you had originally typed.  (However, note that the
‘C-<TAB>’ character cannot be typed on most text terminals.)

   The file name cache does not fill up automatically.  Instead, you
load file names into the cache using these commands:

‘M-x file-cache-add-directory <RET> DIRECTORY <RET>’
     Add each file name in DIRECTORY to the file name cache.
‘M-x file-cache-add-directory-using-find <RET> DIRECTORY <RET>’
     Add each file name in DIRECTORY and all of its nested
     subdirectories to the file name cache.
‘M-x file-cache-add-directory-using-locate <RET> DIRECTORY <RET>’
     Add each file name in DIRECTORY and all of its nested
     subdirectories to the file name cache, using ‘locate’ to find them
     all.
‘M-x file-cache-add-directory-list <RET> VARIABLE <RET>’
     Add each file name in each directory listed in VARIABLE to the file
     name cache.  VARIABLE should be a Lisp variable whose value is a
     list of directories, like ‘load-path’.
‘M-x file-cache-clear-cache <RET>’
     Clear the cache; that is, remove all file names from it.

   The file name cache is not persistent: it is kept and maintained only
for the duration of the Emacs session.  You can view the contents of the
cache with the ‘file-cache-display’ command.


File: emacs.info,  Node: File Conveniences,  Next: Image Mode,  Prev: File Name Cache,  Up: Files

19.18 Convenience Features for Finding Files
============================================

In this section, we introduce some convenient facilities for finding
recently-opened files, reading file names from a buffer.

   If you enable Recentf mode, with ‘M-x recentf-mode’, Emacs maintains
a list of recently opened files.  To open a file from this list, use the
‘M-x recentf-open’ command.  When this mode is enabled, the ‘File’ menu
will include a submenu that you can use to visit one of these files.
‘M-x recentf-save-list’ saves the current ‘recentf-list’ to a file, and
‘M-x recentf-edit-list’ edits it.

   The ‘M-x ffap’ command generalizes ‘find-file’ with more powerful
heuristic defaults (*note FFAP::), often based on the text at point.
Partial Completion mode offers other features extending ‘find-file’,
which can be used with ‘ffap’.  *Note Completion Options::.


File: emacs.info,  Node: Image Mode,  Next: Filesets,  Prev: File Conveniences,  Up: Files

19.19 Viewing Image Files
=========================

Visiting image files automatically selects Image mode.  In this major
mode, you can type ‘C-c C-c’ (‘image-toggle-display’) to toggle between
displaying the file as an image in the Emacs buffer, and displaying its
underlying text (or raw byte) representation.  Additionally you can type
‘C-c C-x’ (‘image-toggle-hex-display’) to toggle between displaying the
file as an image in the Emacs buffer, and displaying it in hex
representation.  Displaying the file as an image works only if Emacs is
compiled with support for displaying such images.

   If the displayed image is wider or taller than the window in which it
is displayed, the usual point motion keys (‘C-f’, ‘C-p’, and so forth)
cause different parts of the image to be displayed.  However, by default
images are resized automatically to fit the window, so this is only
necessary if you customize the default behavior by using the options
‘image-auto-resize’ and ‘image-auto-resize-on-window-resize’.

   To resize the image manually you can use the command
‘image-transform-fit-to-window’ bound to ‘s w’ that fits the image to
both the window height and width.  To scale the image to a percentage of
its original size, use the command ‘image-transform-set-percent’ bound
to ‘s p’.  To scale the image specifying a scale factor, use the command
‘image-transform-set-scale’ bound to ‘s s’.  To reset all
transformations to the initial state, use
‘image-transform-reset-to-initial’ bound to ‘s 0’, or
‘image-transform-reset-to-original’ bound to ‘s o’.

   You can press ‘n’ (‘image-next-file’) and ‘p’ (‘image-previous-file’)
to visit the next image file and the previous image file in the same
directory, respectively.  These commands will consult the “parent” dired
buffer to determine what the next/previous image file is.  These
commands also work when opening a file from archive files (like zip or
tar files), and will then instead consult the archive mode buffer.  If
neither an archive nor a dired “parent” buffer can be found, a dired
buffer is opened.

   When looking through images, it’s sometimes convenient to be able to
mark the files for later processing (for instance, if you want to select
a group of images to copy somewhere else).  The ‘m’
(‘image-mode-mark-file’) command will mark the current file in any Dired
buffer(s) that display the current file’s directory.  If no such buffer
is open, the directory is opened in a new buffer.  To unmark files, use
the ‘u’ (‘image-mode-mark-file’) command.  Finally, if you just want to
copy the current buffers file name to the kill ring, you can use the ‘w’
(‘image-mode-copy-file-name-as-kill’) command.

   If the image can be animated, the command <RET>
(‘image-toggle-animation’) starts or stops the animation.  Animation
plays once, unless the option ‘image-animate-loop’ is non-‘nil’.  With
‘f’ (‘image-next-frame’) and ‘b’ (‘image-previous-frame’) you can step
through the individual frames.  Both commands accept a numeric prefix to
step through several frames at once.  You can go to a specific frame
with ‘F’ (‘image-goto-frame’).  Frames are indexed from 1.  Typing ‘a +’
(‘image-increase-speed’) increases the speed of the animation, ‘a -’
(‘image-decrease-speed’) decreases it, and ‘a r’ (‘image-reverse-speed’)
reverses it.  The command ‘a 0’ (‘image-reset-speed’) resets the speed
to the original value.

   In addition to the above key bindings, which are specific to Image
mode, images shown in any Emacs buffer have special key bindings when
point is at or inside the image:

‘i +’
     Increase the image size (‘image-increase-size’) by 20%.  Prefix
     numeric argument controls the increment; the value of N means to
     multiply the size by the factor of ‘1 + N / 10’, so ‘C-u 5 i +’
     means to increase the size by 50%.

‘i -’
     Decrease the image size (‘image-increase-size’) by 20%.  Prefix
     numeric argument controls the decrement; the value of N means to
     multiply the size by the factor of ‘1 - N / 10’, so ‘C-u 3 i -’
     means to decrease the size by 30%.

‘i r’
     Rotate the image by 90 degrees clockwise (‘image-rotate’).  With
     the prefix argument, rotate by 90 degrees counter-clockwise
     instead.  Note that this command is not available for sliced
     images.

‘i h’
     Flip the image horizontally (‘image-flip-horizontally’).  This
     presents the image as if reflected in a vertical mirror.  Note that
     this command is not available for sliced images.

‘i v’
     Flip the image vertically (‘image-flip-vertically’).  This presents
     the image as if reflected in a horizontal mirror.  Note that this
     command is not available for sliced images.

‘i o’
     Save the image to a file (‘image-save’).  This command prompts you
     for the name of the file to save the image.

‘i c’
     Crop the image (‘image-crop’).  This command is available only if
     your system has an external program installed that can be used for
     cropping and cutting of images; the user option
     ‘image-crop-crop-command’ determines what program to use, and
     defaults to the ImageMagick’s ‘convert’ program.  The command
     displays the image with a rectangular frame superimposed on it, and
     lets you use the mouse to move and resize the frame.  Type ‘m’ to
     cause mouse movements to move the frame instead of resizing it;
     type ‘s’ to move a square frame instead.  When you are satisfied
     with the position and size of the cropping frame, type ‘<RET>’ to
     actually crop the part under the frame; or type ‘q’ to exit without
     cropping.  You can then save the cropped image using ‘i o’ or
     ‘M-x image-save’.

‘i x’
     Cut a rectangle from the image (‘image-cut’).  This works the same
     as ‘image-crop’ (and also requires an external program, defined by
     the variable ‘image-crop-cut-command’, to perform the image cut),
     but instead of cropping the image, it removes the part inside the
     frame and fills that part with the color specified by
     ‘image-cut-color’.  With prefix argument, the command prompts for
     the color to use.

   The size and rotation commands are “repeating”, which means that you
can continue adjusting the image without using the ‘i’ prefix.

   If Emacs was compiled with support for the ImageMagick library, it
can use ImageMagick to render a wide variety of images.  The variable
‘imagemagick-enabled-types’ lists the image types that Emacs may render
using ImageMagick; each element in the list should be an internal
ImageMagick name for an image type, as a symbol or an equivalent string
(e.g., ‘BMP’ for ‘.bmp’ images).  To enable ImageMagick for all possible
image types, change ‘imagemagick-enabled-types’ to ‘t’.  The variable
‘imagemagick-types-inhibit’ lists the image types which should never be
rendered using ImageMagick, regardless of the value of
‘imagemagick-enabled-types’ (the default list includes types like ‘C’
and ‘HTML’, which ImageMagick can render as an image but Emacs should
not).  To disable ImageMagick entirely, change
‘imagemagick-types-inhibit’ to ‘t’.

   If Emacs doesn’t have native support for the image format in
question, and ‘image-use-external-converter’ is non-‘nil’, Emacs will
try to determine whether there are external utilities that can be used
to transform the image in question to PNG before displaying.
GraphicsMagick, ImageMagick and ‘ffmpeg’ are currently supported for
image conversions.

   In addition, you may wish to add special handlers for certain image
formats.  These can be added with the ‘image-converter-add-handler’
function.  For instance, to allow viewing Krita files as simple images,
you could say something like:

     (image-converter-add-handler
      "kra"
      (lambda (file data-p)
        (if data-p
            (error "Can't decode non-files")
          (call-process "unzip" nil t nil
                        "-qq" "-c" "-x" file "mergedimage.png"))))

   The function takes two parameters, where the first is a file name
suffix, and the second is a function to do the “conversion”.  This
function takes two parameters, where the first is the file name or a
string with the data, and the second says whether the first parameter is
data or not, and should output an image in ‘image-convert-to-format’
format in the current buffer.

   The Image-Dired package can also be used to view images as
thumbnails.  *Note Image-Dired::.


File: emacs.info,  Node: Filesets,  Prev: Image Mode,  Up: Files

19.20 Filesets
==============

If you regularly edit a certain group of files, you can define them as a
“fileset”.  This lets you perform certain operations, such as visiting,
‘query-replace’, and shell commands on all the files at once.  To make
use of filesets, you must first add the expression ‘(filesets-init)’ to
your init file (*note Init File::).  This adds a ‘Filesets’ sub-menu to
the menu bar’s ‘File’ menu.

   The simplest way to define a fileset is by adding files to it one at
a time.  To add a file to fileset NAME, visit the file and type ‘M-x
filesets-add-buffer <RET> NAME <RET>’.  If there is no fileset NAME,
this creates a new one, which initially contains only the current file.
The command ‘M-x filesets-remove-buffer’ removes the current file from a
fileset.

   You can also edit the list of filesets directly, with ‘M-x
filesets-edit’ (or by choosing ‘Edit Filesets’ from the ‘Filesets’
menu).  The editing is performed in a Customize buffer (*note Easy
Customization::).  Normally, a fileset is a simple list of files, but
you can also define a fileset as a regular expression matching file
names.  Some examples of these more complicated filesets are shown in
the Customize buffer.  Remember to select ‘Save for future sessions’ if
you want to use the same filesets in future Emacs sessions.

   You can use the command ‘M-x filesets-open’ to visit all the files in
a fileset, and ‘M-x filesets-close’ to close them.  Use ‘M-x
filesets-run-cmd’ to run a shell command on all the files in a fileset.
These commands are also available from the ‘Filesets’ menu, where each
existing fileset is represented by a submenu.

   *Note Version Control::, for a different concept of filesets: groups
of files bundled together for version control operations.  Filesets of
that type are unnamed, and do not persist across Emacs sessions.


File: emacs.info,  Node: Buffers,  Next: Windows,  Prev: Files,  Up: Top

# /. 20 Using Multiple Buffers
*****************************

The text you are editing in Emacs resides in an object called a
“buffer”.  Each time you visit a file, a buffer is used to hold the
file’s text.  Each time you invoke Dired, a buffer is used to hold the
directory listing.  If you send a message with ‘C-x m’, a buffer is used
to hold the text of the message.  When you ask for a command’s
documentation, that appears in a buffer named ‘*Help*’.

   Buffers exist as long as they are in use, and are deleted (“killed”)
when no longer needed, either by you (*note Kill Buffer::) or by Emacs
(e.g., when you exit Emacs, *note Exiting::).

   Each buffer has a unique name, which can be of any length.  When a
buffer is displayed in a window, its name is shown in the mode line
(*note Mode Line::).  The distinction between upper and lower case
matters in buffer names.  Most buffers are made by visiting files, and
their names are derived from the files’ names; however, you can also
create an empty buffer with any name you want.  A newly started Emacs
has several buffers, including one named ‘*scratch*’, which can be used
for evaluating Lisp expressions and is not associated with any file
(*note Lisp Interaction::).

   At any time, one and only one buffer is “selected”; we call it the
“current buffer”.  We sometimes say that a command operates on “the
buffer”; this really means that it operates on the current buffer.  When
there is only one Emacs window, the buffer displayed in that window is
current.  When there are multiple windows, the buffer displayed in the
“selected window” is current.  *Note Windows::.

   A buffer’s “contents” consist of a series of characters, each of
which optionally carries a set of text properties (*note Text
properties: International Chars.) that can specify more information
about that character.

   Aside from its textual contents, each buffer records several pieces
of information, such as what file it is visiting (if any), whether it is
modified, and what major mode and minor modes are in effect (*note
Modes::).  These are stored in “buffer-local variables”—variables that
can have a different value in each buffer.  *Note Locals::.

   A buffer’s size cannot be larger than some maximum, which is defined
by the largest buffer position representable by “Emacs integers”.  This
is because Emacs tracks buffer positions using that data type.  For
typical 64-bit machines, this maximum buffer size is 2^{61} - 2 bytes,
or about 2 EiB.  For typical 32-bit machines, the maximum is usually
2^{29} - 2 bytes, or about 512 MiB.  Buffer sizes are also limited by
the amount of memory in the system.

* Menu:

* Select Buffer::       Creating a new buffer or reselecting an old one.
* List Buffers::        Getting a list of buffers that exist.
* Misc Buffer::         Renaming; changing read-only status; copying text.
* Kill Buffer::         Killing buffers you no longer need.
* Several Buffers::     How to go through the list of all buffers
                          and operate variously on several of them.
* Indirect Buffers::    An indirect buffer shares the text of another buffer.
* Buffer Convenience::  Convenience and customization features for
                          buffer handling.


File: emacs.info,  Node: Select Buffer,  Next: List Buffers,  Up: Buffers

20.1 Creating and Selecting Buffers
===================================

‘C-x b BUFFER <RET>’
     Select or create a buffer named BUFFER (‘switch-to-buffer’).
‘C-x 4 b BUFFER <RET>’
     Similar, but select BUFFER in another window
     (‘switch-to-buffer-other-window’).
‘C-x 5 b BUFFER <RET>’
     Similar, but select BUFFER in a separate frame
     (‘switch-to-buffer-other-frame’).
‘C-x <LEFT>’
     Select the previous buffer in the buffer list (‘previous-buffer’).
‘C-x <RIGHT>’
     Select the next buffer in the buffer list (‘next-buffer’).
‘C-u M-g M-g’
‘C-u M-g g’
     Read a number N and move to line N in the most recently selected
     buffer other than the current buffer, in another window.

   The ‘C-x b’ (‘switch-to-buffer’) command reads a buffer name using
the minibuffer.  Then it makes that buffer current, and displays it in
the currently-selected window.  An empty input specifies the buffer that
was current most recently among those not now displayed in any window.

   While entering the buffer name, you can use the usual completion and
history commands (*note Minibuffer::).  Note that ‘C-x b’, and related
commands, use “permissive completion with confirmation” for minibuffer
completion: if you type <RET> when the minibuffer text names a
nonexistent buffer, Emacs prints ‘[Confirm]’ and you must type a second
<RET> to submit that buffer name.  *Note Completion Exit::, for details.
For other completion options and features, see *note Completion
Options::.

   If you specify a buffer that does not exist, ‘C-x b’ creates a new,
empty buffer that is not visiting any file, and selects it for editing.
The default value of the variable ‘major-mode’ determines the new
buffer’s major mode; the default value is Fundamental mode.  *Note Major
Modes::.  One reason to create a new buffer is to use it for making
temporary notes.  If you try to save it, Emacs asks for the file name to
use, and the buffer’s major mode is re-established taking that file name
into account (*note Choosing Modes::).

   For conveniently switching between a few buffers, use the commands
‘C-x <LEFT>’ and ‘C-x <RIGHT>’.  ‘C-x <LEFT>’ (‘previous-buffer’)
selects the previous buffer (following the order of most recent
selection in the current frame), while ‘C-x <RIGHT>’ (‘next-buffer’)
moves through buffers in the reverse direction.  Both commands support a
numeric prefix argument that serves as a repeat count.

   To select a buffer in a window other than the current one (*note
Windows::), type ‘C-x 4 b’ (‘switch-to-buffer-other-window’).  This
prompts for a buffer name using the minibuffer, displays that buffer in
another window, and selects that window.

   Similarly, ‘C-x 5 b’ (‘switch-to-buffer-other-frame’) prompts for a
buffer name, displays that buffer in another frame (*note Frames::), and
selects that frame.  If the buffer is already being shown in a window on
another frame, Emacs selects that window and frame instead of creating a
new frame.

   *Note Displaying Buffers::, for how the ‘C-x 4 b’ and ‘C-x 5 b’
commands get the window and/or frame to display in.

   In addition, ‘C-x C-f’, and any other command for visiting a file,
can also be used to switch to an existing file-visiting buffer.  *Note
Visiting::.

   ‘C-u M-g M-g’, that is ‘goto-line’ with a plain prefix argument,
reads a number N using the minibuffer, selects the most recently
selected buffer other than the current buffer in another window, and
then moves point to the beginning of line number N in that buffer.  This
is mainly useful in a buffer that refers to line numbers in another
buffer: if point is on or just after a number, ‘goto-line’ uses that
number as the default for N.  Note that prefix arguments other than just
‘C-u’ behave differently.  ‘C-u 4 M-g M-g’ goes to line 4 in the
_current_ buffer, without reading a number from the minibuffer.
(Remember that ‘M-g M-g’ without prefix argument reads a number N and
then moves to line number N in the current buffer.  *Note Moving
Point::.)

   Emacs uses buffer names that start with a space for internal
purposes.  It treats these buffers specially in minor ways—for example,
by default they do not record undo information.  It is best to avoid
using such buffer names yourself.


File: emacs.info,  Node: List Buffers,  Next: Misc Buffer,  Prev: Select Buffer,  Up: Buffers

20.2 Listing Existing Buffers
=============================

‘C-x C-b’
     List the existing buffers (‘list-buffers’).

   To display a list of existing buffers, type ‘C-x C-b’.  This pops up
a buffer menu in a buffer named ‘*Buffer List*’.  Each line in the list
shows one buffer’s name, size, major mode and visited file.  The buffers
are listed in the order that they were current; the buffers that were
current most recently come first.  This section describes how the list
of buffers is displayed and how to interpret the various indications in
the list; see *note Several Buffers::, for description of the special
mode in the ‘*Buffer List*’ buffer and the commands available there.

   ‘.’ in the first field of a line indicates that the buffer is
current.  ‘%’ indicates a read-only buffer.  ‘*’ indicates that the
buffer is modified.  If several buffers are modified, it may be time to
save some with ‘C-x s’ (*note Save Commands::).  Here is an example of a
buffer list:

     CRM Buffer                Size  Mode              File
     . * .emacs                3294  Emacs-Lisp        ~/.emacs
      %  *Help*                 101  Help
         search.c             86055  C                 ~/cvs/emacs/src/search.c
      %  src                  20959  Dired by name     ~/cvs/emacs/src/
       * *mail*                  42  Mail
      %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
      %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
         *scratch*              191  Lisp Interaction
       * *Messages*            1554  Messages

The buffer ‘*Help*’ was made by a help request (*note Help::); it is not
visiting any file.  The buffer ‘src’ was made by Dired on the directory
‘~/cvs/emacs/src/’.  You can list only buffers that are visiting files
by giving the command a prefix argument, as in ‘C-u C-x C-b’.

   ‘list-buffers’ omits buffers whose names begin with a space, unless
they visit files: such buffers are used internally by Emacs.


File: emacs.info,  Node: Misc Buffer,  Next: Kill Buffer,  Prev: List Buffers,  Up: Buffers

20.3 Miscellaneous Buffer Operations
====================================

‘C-x C-q’
     Toggle read-only status of buffer (‘read-only-mode’).
‘C-x x r <RET> BUFFER <RET>’
     Change the name of the current buffer.
‘C-x x u’
     Rename the current buffer by adding ‘<NUMBER>’ to the end.
‘M-x view-buffer <RET> BUFFER <RET>’
     Scroll through buffer BUFFER.  *Note View Mode::.

   A buffer can be “read-only”, which means that commands to insert or
delete its text are not allowed.  (However, other commands, like ‘C-x
<RET> f’, can still mark it as modified, *note Text Coding::).  The mode
line indicates read-only buffers with ‘%%’ or ‘%*’ near the left margin.
*Note Mode Line::.  Read-only buffers are usually made by subsystems
such as Dired and Rmail that have special commands to operate on the
text.  Visiting a file whose access control says you cannot write it
also makes the buffer read-only.

   The command ‘C-x C-q’ (‘read-only-mode’) makes a read-only buffer
writable, and makes a writable buffer read-only.  This works by setting
the variable ‘buffer-read-only’, which has a local value in each buffer
and makes the buffer read-only if its value is non-‘nil’.  If you change
the option ‘view-read-only’ to a non-‘nil’ value, making the buffer
read-only with ‘C-x C-q’ also enables View mode in the buffer (*note
View Mode::).

   ‘C-x x r’ (‘rename-buffer’ changes the name of the current buffer.
You specify the new name as a minibuffer argument; there is no default.
If you specify a name that is in use for some other buffer, an error
happens and no renaming is done.

   ‘C-x x u’ (‘rename-uniquely’) renames the current buffer to a similar
name with a numeric suffix added to make it both different and unique.
This command does not need an argument.  It is useful for creating
multiple shell buffers: if you rename the ‘*shell*’ buffer, then do ‘M-x
shell’ again, it makes a new shell buffer named ‘*shell*’; meanwhile,
the old shell buffer continues to exist under its new name.  This method
is also good for mail buffers, compilation buffers, and most Emacs
features that create special buffers with particular names.  (With some
of these features, such as ‘M-x compile’, ‘M-x grep’, you need to switch
to some other buffer before using the command again, otherwise it will
reuse the current buffer despite the name change.)

   The commands ‘M-x append-to-buffer’ and ‘C-x x i’ (‘insert-buffer’)
can also be used to copy text from one buffer to another.  *Note
Accumulating Text::.


File: emacs.info,  Node: Kill Buffer,  Next: Several Buffers,  Prev: Misc Buffer,  Up: Buffers

20.4 Killing Buffers
====================

If you continue an Emacs session for a while, you may accumulate a large
number of buffers.  You may then find it convenient to “kill” the
buffers you no longer need.  (Some other editors call this operation
“close”, and talk about “closing the buffer” or “closing the file”
visited in the buffer.)  On most operating systems, killing a buffer
releases the memory Emacs used for the buffer back to the operating
system so that other programs can use it.  Here are some commands for
killing buffers:

‘C-x k BUFFER <RET>’
     Kill buffer BUFFER (‘kill-buffer’).
‘M-x kill-some-buffers’
     Offer to kill each buffer, one by one.
‘M-x kill-matching-buffers’
     Offer to kill all buffers matching a regular expression.

   ‘C-x k’ (‘kill-buffer’) kills one buffer, whose name you specify in
the minibuffer.  The default, used if you type just <RET> in the
minibuffer, is to kill the current buffer.  If you kill the current
buffer, another buffer becomes current: one that was current in the
recent past but is not displayed in any window now.  If you ask to kill
a file-visiting buffer that is modified, then you must confirm with
‘yes’ before the buffer is killed.

   The command ‘M-x kill-some-buffers’ asks about each buffer, one by
one.  An answer of ‘yes’ means to kill the buffer, just like
‘kill-buffer’.  This command ignores buffers whose names begin with a
space, which are used internally by Emacs.

   The command ‘M-x kill-matching-buffers’ prompts for a regular
expression and kills all buffers whose names match that expression.
*Note Regexps::.  Like ‘kill-some-buffers’, it asks for confirmation
before each kill.  This command normally ignores buffers whose names
begin with a space, which are used internally by Emacs.  To kill
internal buffers as well, call ‘kill-matching-buffers’ with a prefix
argument.

   The Buffer Menu feature is also convenient for killing various
buffers.  *Note Several Buffers::.

   If you want to do something special every time a buffer is killed,
you can add hook functions to the hook ‘kill-buffer-hook’ (*note
Hooks::).

   If you run one Emacs session for a period of days, as many people do,
it can fill up with buffers that you used several days ago.  The command
‘M-x clean-buffer-list’ is a convenient way to purge them; it kills all
the unmodified buffers that you have not used for a long time.  An
ordinary buffer is killed if it has not been displayed for three days;
however, you can specify certain buffers that should never be killed
automatically, and others that should be killed if they have been unused
for a mere hour.  These defaults, and other aspects of this command’s
behavior, can be controlled by customizing several options described in
the doc string of ‘clean-buffer-list’.

   You can also have this buffer purging done for you, once a day, by
enabling Midnight mode.  Midnight mode operates each day at midnight; at
that time, it runs ‘clean-buffer-list’, or whichever functions you have
placed in the normal hook ‘midnight-hook’ (*note Hooks::).  To enable
Midnight mode, use the Customization buffer to set the variable
‘midnight-mode’ to ‘t’.  *Note Easy Customization::.


File: emacs.info,  Node: Several Buffers,  Next: Indirect Buffers,  Prev: Kill Buffer,  Up: Buffers

20.5 Operating on Several Buffers
=================================

‘M-x buffer-menu’
     Begin editing a buffer listing all Emacs buffers.
‘M-x buffer-menu-other-window’
     Similar, but do it in another window.

   The “Buffer Menu” opened by ‘C-x C-b’ (*note List Buffers::) does not
merely list buffers.  It also allows you to perform various operations
on buffers, through an interface similar to Dired (*note Dired::).  You
can save buffers, kill them (here called “deleting” them, for
consistency with Dired), or display them.

   To use the Buffer Menu, type ‘C-x C-b’ and switch to the window
displaying the ‘*Buffer List*’ buffer.  You can also type ‘M-x
buffer-menu’ to open the Buffer Menu in the selected window.
Alternatively, the command ‘M-x buffer-menu-other-window’ opens the
Buffer Menu in another window, and selects that window.

   The Buffer Menu is a read-only buffer, and can be changed only
through the special commands described in this section.  The usual
cursor motion commands can be used in this buffer.  The following
commands apply to the buffer described on the current line:

‘d’
     Flag the buffer for deletion (killing), then move point to the next
     line (‘Buffer-menu-delete’).  The deletion flag is indicated by the
     character ‘D’ on the line, before the buffer name.  The deletion
     occurs only when you type the ‘x’ command (see below).

‘C-d’
     Like ‘d’, but move point up instead of down
     (‘Buffer-menu-delete-backwards’).

‘s’
     Flag the buffer for saving (‘Buffer-menu-save’).  The save flag is
     indicated by the character ‘S’ on the line, before the buffer name.
     The saving occurs only when you type ‘x’.  You may request both
     saving and deletion for the same buffer.

‘x’
     Perform all flagged deletions and saves (‘Buffer-menu-execute’).

‘u’
     Remove all flags from the current line, and move down
     (‘Buffer-menu-unmark’).  With a prefix argument, moves up after
     removing the flags.

‘<DEL>’
     Move to the previous line and remove all flags on that line
     (‘Buffer-menu-backup-unmark’).

‘M-<DEL>’
     Remove a particular flag from all lines
     (‘Buffer-menu-unmark-all-buffers’).  This asks for a single
     character, and unmarks buffers marked with that character; typing
     <RET> removes all marks.

‘U’
     Remove all flags from all the lines (‘Buffer-menu-unmark-all’).

The commands for removing flags, ‘d’ and ‘C-d’, accept a numeric
argument as a repeat count.

   The following commands operate immediately on the buffer listed on
the current line.  They also accept a numeric argument as a repeat
count.

‘~’
     Mark the buffer as unmodified (‘Buffer-menu-not-modified’).  *Note
     Save Commands::.

‘%’
     Toggle the buffer’s read-only status
     (‘Buffer-menu-toggle-read-only’).  *Note Misc Buffer::.

‘t’
     Visit the buffer as a tags table (‘Buffer-menu-visit-tags-table’).
     *Note Select Tags Table::.

   The following commands are used to select another buffer or buffers:

‘q’
     Quit the Buffer Menu (‘quit-window’).  The most recent formerly
     visible buffer is displayed in its place.

‘<RET>’
‘f’
     Select this line’s buffer, replacing the ‘*Buffer List*’ buffer in
     its window (‘Buffer-menu-this-window’).

‘o’
     Select this line’s buffer in another window, as if by ‘C-x 4 b’,
     leaving ‘*Buffer List*’ visible (‘Buffer-menu-other-window’).

‘C-o’
     Display this line’s buffer in another window, without selecting it
     (‘Buffer-menu-switch-other-window’).

‘1’
     Select this line’s buffer in a full-frame window
     (‘Buffer-menu-1-window’).

‘2’
     Set up two windows on the current frame, with this line’s buffer
     selected in one, and a previously current buffer (aside from
     ‘*Buffer List*’) in the other (‘Buffer-menu-2-window’).

‘b’
     Bury this line’s buffer (‘Buffer-menu-bury’) (i.e., move it to the
     end of the buffer list).

‘m’
     Mark this line’s buffer to be displayed in another window if you
     exit with the ‘v’ command (‘Buffer-menu-mark’).  The display flag
     is indicated by the character ‘>’ at the beginning of the line.  (A
     single buffer may not have both deletion and display flags.)

‘v’
     Select this line’s buffer, and also display in other windows any
     buffers flagged with the ‘m’ command (‘Buffer-menu-select’).  If
     you have not flagged any buffers, this command is equivalent to
     ‘1’.

   The following commands affect the entire buffer list:

‘S’
     Sort the Buffer Menu entries according to their values in the
     column at point.  With a numeric prefix argument N, sort according
     to the N-th column (‘tabulated-list-sort’).

‘}’
     Widen the current column width by N (the prefix numeric argument)
     characters.

‘{’
     Narrow the current column width by N (the prefix numeric argument)
     characters.

‘T’
     Delete, or reinsert, lines for non-file buffers
     (‘Buffer-menu-toggle-files-only’).  This command toggles the
     inclusion of such buffers in the buffer list.

   Normally, the buffer ‘*Buffer List*’ is not updated automatically
when buffers are created and killed; its contents are just text.  If you
have created, deleted or renamed buffers, the way to update ‘*Buffer
List*’ to show what you have done is to type ‘g’ (‘revert-buffer’).  You
can make this happen regularly every ‘auto-revert-interval’ seconds if
you enable Auto Revert mode in this buffer, as long as it is not marked
modified.  Global Auto Revert mode applies to the ‘*Buffer List*’ buffer
only if ‘global-auto-revert-non-file-buffers’ is non-‘nil’.  *Note
global-auto-revert-non-file-buffers: Auto Reverting the Buffer Menu, for
details.


File: emacs.info,  Node: Indirect Buffers,  Next: Buffer Convenience,  Prev: Several Buffers,  Up: Buffers

20.6 Indirect Buffers
=====================

An “indirect buffer” shares the text of some other buffer, which is
called the “base buffer” of the indirect buffer.  In some ways it is a
buffer analogue of a symbolic link between files.

‘M-x make-indirect-buffer <RET> BASE-BUFFER <RET> INDIRECT-NAME <RET>’
     Create an indirect buffer named INDIRECT-NAME with base buffer
     BASE-BUFFER.
‘M-x clone-indirect-buffer <RET>’
     Create an indirect buffer that is a twin copy of the current
     buffer.
‘C-x 4 c’
     Create an indirect buffer that is a twin copy of the current
     buffer, and select it in another window
     (‘clone-indirect-buffer-other-window’).

   The text of the indirect buffer is always identical to the text of
its base buffer; changes made by editing either one are visible
immediately in the other.  “Text” here includes both the characters and
their text properties.  But in all other respects, the indirect buffer
and its base buffer are completely separate.  They can have different
names, different values of point, different narrowing, different
markers, different overlays, different major modes, and different local
variables.

   An indirect buffer cannot visit a file, but its base buffer can.  If
you try to save the indirect buffer, that actually works by saving the
base buffer.  Killing the base buffer effectively kills the indirect
buffer, but killing an indirect buffer has no effect on its base buffer.

   One way to use indirect buffers is to display multiple views of an
outline.  *Note Outline Views::.

   A quick and handy way to make an indirect buffer is with the command
‘C-x 4 c’ (‘clone-indirect-buffer-other-window’).  It creates and
selects an indirect buffer whose base buffer is the current buffer.
With a numeric argument, it prompts for the name of the indirect buffer;
otherwise it uses the name of the current buffer, with a ‘<N>’ suffix
added.

   The more general way to make an indirect buffer is with the command
‘M-x make-indirect-buffer’.  It creates an indirect buffer named
INDIRECT-NAME from a buffer BASE-BUFFER, prompting for both using the
minibuffer.

   The functions that create indirect buffers run the hook
‘clone-indirect-buffer-hook’ after creating the indirect buffer.  When
this hook runs, the newly created indirect buffer is the current buffer.

   Note: When a modification is made to the text of a buffer, the
modification hooks are run only in the base buffer, because most of the
functions on those hooks are not prepared to work correctly in indirect
buffers.  So if you need a modification hook function in an indirect
buffer, you need to manually add that function to the hook _in the base
buffer_ and then make the function operate in the desired indirect
buffer.


File: emacs.info,  Node: Buffer Convenience,  Prev: Indirect Buffers,  Up: Buffers

20.7 Convenience Features and Customization of Buffer Handling
==============================================================

This section describes several modes and features that make it more
convenient to switch between buffers.

* Menu:

* Uniquify::               Making buffer names unique with directory parts.
* Icomplete::              Fast minibuffer selection.
* Buffer Menus::           Configurable buffer menu.


File: emacs.info,  Node: Uniquify,  Next: Icomplete,  Up: Buffer Convenience

20.7.1 Making Buffer Names Unique
---------------------------------

When several buffers visit identically-named files, Emacs must give the
buffers distinct names.  The default method adds a suffix based on the
names of the directories that contain the files.  For example, if you
visit files ‘/foo/bar/mumble/name’ and ‘/baz/quux/mumble/name’ at the
same time, their buffers will be named ‘name<bar/mumble>’ and
‘name<quux/mumble>’, respectively.  Emacs adds as many directory parts
as are needed to make a unique name.

   You can choose from several different styles for constructing unique
buffer names, by customizing the option ‘uniquify-buffer-name-style’.

   The ‘forward’ naming method includes part of the file’s directory
name at the beginning of the buffer name; using this method, buffers
visiting the files ‘/u/rms/tmp/Makefile’ and
‘/usr/projects/zaphod/Makefile’ would be named ‘tmp/Makefile’ and
‘zaphod/Makefile’.

   In contrast, the ‘post-forward’ naming method would call the buffers
‘Makefile|tmp’ and ‘Makefile|zaphod’.  The default method
‘post-forward-angle-brackets’ is like ‘post-forward’, except that it
encloses the unique path in angle brackets.  The ‘reverse’ naming method
would call them ‘Makefile\tmp’ and ‘Makefile\zaphod’.  The nontrivial
difference between ‘post-forward’ and ‘reverse’ occurs when just one
directory name is not enough to distinguish two files; then ‘reverse’
puts the directory names in reverse order, so that ‘/top/middle/file’
becomes ‘file\middle\top’, while ‘post-forward’ puts them in forward
order after the file name, as in ‘file|top/middle’.  If
‘uniquify-buffer-name-style’ is set to ‘nil’, the buffer names simply
get ‘<2>’, ‘<3>’, etc. appended.

   The value of ‘uniquify-buffer-name-style’ can be set to a customized
function with two arguments BASE and EXTRA-STRINGS where BASE is a
string and EXTRA-STRINGS is a list of strings.  For example the current
implementation for ‘post-forward-angle-brackets’ could be:

     (defun my-post-forward-angle-brackets (base extra-string)
       (concat base \"<\" (mapconcat #'identity extra-string \"/\") \">\"))

   Which rule to follow for putting the directory names in the buffer
name is not very important if you are going to _look_ at the buffer
names before you type one.  But as an experienced user, if you know the
rule, you won’t have to look.  And then you may find that one rule or
another is easier for you to remember and apply quickly.


File: emacs.info,  Node: Icomplete,  Next: Buffer Menus,  Prev: Uniquify,  Up: Buffer Convenience

20.7.2 Fast minibuffer selection
--------------------------------

Icomplete global minor mode provides a convenient way to quickly select
an element among the possible completions in a minibuffer.  When
enabled, typing in the minibuffer continuously displays a list of
possible completions that match the string you have typed.

   At any time, you can type ‘C-j’ to select the first completion in the
list.  So the way to select a particular completion is to make it the
first in the list.  There are two ways to do this.  You can type more of
the completion name and thus narrow down the list, excluding unwanted
completions above the desired one.  Alternatively, you can use ‘C-.’ and
‘C-,’ to rotate the list until the desired buffer is first.

   ‘M-<TAB>’ will select the first completion in the list, like ‘C-j’
but without exiting the minibuffer, so you can edit it further.  This is
typically used when entering a file name, where ‘M-<TAB>’ can be used a
few times to descend in the hierarchy of directories.

   To enable Icomplete mode, type ‘M-x icomplete-mode’, or customize the
variable ‘icomplete-mode’ to ‘t’ (*note Easy Customization::).

   An alternative to Icomplete mode is Fido mode.  This is very similar
to Icomplete mode, but retains some functionality from a popular
extension called Ido mode (in fact the name is derived from “Fake Ido”).
Among other things, in Fido mode, ‘C-s’ and ‘C-r’ are also used to
rotate the completions list, ‘C-k’ can be used to delete files and kill
buffers in-list.  Another noteworthy aspect is that ‘flex’ is used as
the default completion style (*note Completion Styles::).  To change
this, add the following to your initialization file (*note Init File::):

     (defun my-icomplete-styles ()
       (setq-local completion-styles '(initials flex)))
     (add-hook 'icomplete-minibuffer-setup-hook 'my-icomplete-styles)

   To enable Fido mode, type ‘M-x fido-mode’, or customize the variable
‘fido-mode’ to ‘t’ (*note Easy Customization::).

   Icomplete mode and Fido mode display the possible completions on the
same line as the prompt by default.  To display the completion
candidates vertically under the prompt, type ‘M-x
icomplete-vertical-mode’, or customize the variable
‘icomplete-vertical-mode’ to ‘t’ (*note Easy Customization::).


File: emacs.info,  Node: Buffer Menus,  Prev: Icomplete,  Up: Buffer Convenience

20.7.3 Customizing Buffer Menus
-------------------------------

‘M-x bs-show’
     Make a list of buffers similarly to ‘M-x list-buffers’ but
     customizable.
‘M-x ibuffer’
     Make a list of buffers and operate on them in Dired-like fashion.

   ‘M-x bs-show’ pops up a buffer list similar to the one normally
displayed by ‘C-x C-b’, but whose display you can customize in a more
flexible fashion.  For example, you can specify the list of buffer
attributes to show, the minimum and maximum width of buffer name column,
a regexp for names of buffers that will never be shown and those which
will always be shown, etc.  If you prefer this to the usual buffer list,
you can bind this command to ‘C-x C-b’.  To customize this buffer list,
use the ‘bs’ Custom group (*note Easy Customization::), or invoke
‘bs-customize’.

   MSB global minor mode (“MSB” stands for “mouse select buffer”)
provides a different and customizable mouse buffer menu which you may
prefer.  It replaces the ‘mouse-buffer-menu’ commands, normally bound to
‘C-Down-mouse-1’ and ‘C-<F10>’, with its own commands, and also modifies
the menu-bar buffer menu.  You can customize the menu in the ‘msb’
Custom group.

   IBuffer is a major mode for viewing a list of buffers and operating
on them in a way analogous to that of Dired (*note Dired::), including
filtering, marking, sorting in various ways, and acting on buffers.


File: emacs.info,  Node: Windows,  Next: Frames,  Prev: Buffers,  Up: Top

# /. 21 Multiple Windows
***********************

Emacs can split a frame into two or many windows.  Multiple windows can
display parts of different buffers, or different parts of one buffer.
Multiple frames always imply multiple windows, because each frame has
its own set of windows.  Each window belongs to one and only one frame.

* Menu:

* Basic Window::        Introduction to Emacs windows.
* Split Window::        New windows are made by splitting existing windows.
* Other Window::        Moving to another window or doing something to it.
* Pop Up Window::       Finding a file or buffer in another window.
* Change Window::       Deleting windows and changing their sizes.
* Displaying Buffers::  How Emacs picks a window for displaying a buffer.
* Window Convenience::  Convenience functions for window handling.
* Tab Line::            Window tab line.


File: emacs.info,  Node: Basic Window,  Next: Split Window,  Up: Windows

21.1 Concepts of Emacs Windows
==============================

Each Emacs window displays one Emacs buffer at any time.  A single
buffer may appear in more than one window; if it does, any changes in
its text are displayed in all the windows where it appears.  But these
windows can show different parts of the buffer, because each window has
its own value of point.

   At any time, one Emacs window is the “selected window”; the buffer
this window is displaying is the current buffer.  On graphical displays,
the point is indicated by a solid blinking cursor in the selected
window, and by a hollow box in non-selected windows.  On text terminals,
the cursor is drawn only in the selected window.  *Note Cursor
Display::.

   Commands to move point affect the value of point for the selected
Emacs window only.  They do not change the value of point in other Emacs
windows, even those showing the same buffer.  The same is true for
buffer-switching commands such as ‘C-x b’; they do not affect other
windows at all.  However, there are other commands such as ‘C-x 4 b’
that select a different window and switch buffers in it.  Also, all
commands that display information in a window, including (for example)
‘C-h f’ (‘describe-function’) and ‘C-x C-b’ (‘list-buffers’), usually
work by displaying buffers in a nonselected window without affecting the
selected window.

   When multiple windows show the same buffer, they can have different
regions, because they can have different values of point.  However, they
all have the same value for the mark, because each buffer has only one
mark position.

   Each window has its own mode line, which displays the buffer name,
modification status and major and minor modes of the buffer that is
displayed in the window.  The selected window’s mode line appears in a
different color.  *Note Mode Line::, for details.


File: emacs.info,  Node: Split Window,  Next: Other Window,  Prev: Basic Window,  Up: Windows

21.2 Splitting Windows
======================

‘C-x 2’
     Split the selected window into two windows, one above the other
     (‘split-window-below’).
‘C-x 3’
     Split the selected window into two windows, positioned side by side
     (‘split-window-right’).
‘C-mouse-2’
     In the mode line of a window, split that window.

   ‘C-x 2’ (‘split-window-below’) splits the selected window into two
windows, one above the other.  After splitting, the selected window is
the upper one, and the newly split-off window is below.  Both windows
have the same value of point as before, and display the same portion of
the buffer (or as close to it as possible).  If necessary, the windows
are scrolled to keep point on-screen.  By default, the two windows each
get half the height of the original window.  A positive numeric argument
specifies how many lines to give to the top window; a negative numeric
argument specifies how many lines to give to the bottom window.

   If you change the variable ‘split-window-keep-point’ to ‘nil’, ‘C-x
2’ instead adjusts the portion of the buffer displayed by the two
windows, as well as the value of point in each window, in order to keep
the text on the screen as close as possible to what it was before;
furthermore, if point was in the lower half of the original window, the
bottom window is selected instead of the upper one.

   ‘C-x 3’ (‘split-window-right’) splits the selected window into two
side-by-side windows.  The left window is the selected one; the right
window displays the same portion of the same buffer, and has the same
value of point.  A positive numeric argument specifies how many columns
to give the left window; a negative numeric argument specifies how many
columns to give the right window.

   When you split a window with ‘C-x 3’, each resulting window occupies
less than the full width of the frame.  If it becomes too narrow, the
buffer may be difficult to read if continuation lines are in use (*note
Continuation Lines::).  Therefore, Emacs automatically switches to line
truncation if the window width becomes narrower than 50 columns.  This
truncation occurs regardless of the value of the variable
‘truncate-lines’ (*note Line Truncation::); it is instead controlled by
the variable ‘truncate-partial-width-windows’.  If the value of this
variable is a positive integer (the default is 50), that specifies the
minimum total width for a partial-width window before automatic line
truncation occurs; if the value is ‘nil’, automatic line truncation is
disabled; and for any other non-‘nil’ value, Emacs truncates lines in
every partial-width window regardless of its width.  The total width of
a window is in column units as reported by ‘window-total-width’ (*note
(elisp)Window Sizes::), it includes the fringes, the continuation and
truncation glyphs, the margins, and the scroll bar.

   On text terminals, side-by-side windows are separated by a vertical
divider which is drawn using the ‘vertical-border’ face.

   If you click ‘C-mouse-2’ in the mode line of a window, that splits
the window, putting a vertical divider where you click.  Depending on
how Emacs is compiled, you can also split a window by clicking
‘C-mouse-2’ in the scroll bar, which puts a horizontal divider where you
click (this feature does not work when Emacs uses GTK+ scroll bars).

   By default, when you split a window, Emacs gives each of the
resulting windows dimensions that are an integral multiple of the
default font size of the frame.  That might subdivide the screen estate
unevenly between the resulting windows.  If you set the variable
‘window-resize-pixelwise’ to a non-‘nil’ value, Emacs will give each
window the same number of pixels (give or take one pixel if the initial
dimension was an odd number of pixels).  Note that when a frame’s pixel
size is not a multiple of the frame’s character size, at least one
window may get resized pixelwise even if this option is ‘nil’.


File: emacs.info,  Node: Other Window,  Next: Pop Up Window,  Prev: Split Window,  Up: Windows

21.3 Using Other Windows
========================

‘C-x o’
     Select another window (‘other-window’).
‘C-M-v’
     Scroll the next window upward (‘scroll-other-window’).
‘C-M-S-v’
     Scroll the next window downward (‘scroll-other-window-down’).
‘C-M-S-l’
     Recenter the next window (‘recenter-other-window’).
‘mouse-1’
     ‘mouse-1’, in the text area of a window, selects the window and
     moves point to the position clicked.  Clicking in the mode line
     selects the window without moving point in it.

   With the keyboard, you can switch windows by typing ‘C-x o’
(‘other-window’).  That is an ‘o’, for “other”, not a zero.  When there
are more than two windows, this command moves through all the windows in
a cyclic order, generally top to bottom and left to right.  After the
rightmost and bottommost window, it goes back to the one at the upper
left corner.  A numeric argument means to move several steps in the
cyclic order of windows.  A negative argument moves around the cycle in
the opposite order.  When the minibuffer is active, the minibuffer
window is the last window in the cycle; you can switch from the
minibuffer window to one of the other windows, and later switch back and
finish supplying the minibuffer argument that is requested.  *Note
Minibuffer Edit::.

   The ‘other-window’ command will normally only switch to the next
window in the current frame (unless otherwise configured).  If you work
in a multi-frame environment and you want windows in all frames to be
part of the cycle, you can rebind ‘C-x o’ to the ‘next-window-any-frame’
command.  (*Note Rebinding::, for how to rebind a command.)

   The usual scrolling commands (*note Display::) apply to the selected
window only, but there are also commands to scroll the next window.
‘C-M-v’ (‘scroll-other-window’) scrolls the window that ‘C-x o’ would
select.  In other respects, the command behaves like ‘C-v’; both move
the buffer text upward relative to the window, and take positive and
negative arguments.  (In the minibuffer, ‘C-M-v’ scrolls the help window
associated with the minibuffer, if any, rather than the next window in
the standard cyclic order; *note Minibuffer Edit::.)  ‘C-M-S-v’
(‘scroll-other-window-down’) scrolls the next window downward in a
similar way.  Likewise, ‘C-M-S-l’ (‘recenter-other-window’) behaves like
‘C-l’ (‘recenter-top-bottom’) in the next window.

   If you set ‘mouse-autoselect-window’ to a non-‘nil’ value, moving the
mouse over a different window selects that window.  This feature is off
by default.


File: emacs.info,  Node: Pop Up Window,  Next: Change Window,  Prev: Other Window,  Up: Windows

21.4 Displaying in Another Window
=================================

‘C-x 4’ is a prefix key for a variety of commands that switch to a
buffer in a different window—either another existing window, or a new
window created by splitting the selected window.  *Note Window Choice::,
for how Emacs picks or creates the window to use.

‘C-x 4 b BUFNAME <RET>’
     Select buffer BUFNAME in another window
     (‘switch-to-buffer-other-window’).  *Note Select Buffer::.

‘C-x 4 C-o BUFNAME <RET>’
     Display buffer BUFNAME in some window, without trying to select it
     (‘display-buffer’).  *Note Displaying Buffers::, for details about
     how the window is chosen.

‘C-x 4 f FILENAME <RET>’
     Visit file FILENAME and select its buffer in another window
     (‘find-file-other-window’).  *Note Visiting::.

‘C-x 4 d DIRECTORY <RET>’
     Select a Dired buffer for directory DIRECTORY in another window
     (‘dired-other-window’).  *Note Dired::.

‘C-x 4 m’
     Start composing a mail message, similar to ‘C-x m’ (*note Sending
     Mail::), but in another window (‘compose-mail-other-window’).

‘C-x 4 .’
     Find the definition of an identifier, similar to ‘M-.’ (*note
     Xref::), but in another window
     (‘xref-find-definitions-other-window’).

‘C-x 4 r FILENAME <RET>’
     Visit file FILENAME read-only, and select its buffer in another
     window (‘find-file-read-only-other-window’).  *Note Visiting::.

‘C-x 4 4’
     A more general prefix command affects the buffer displayed by the
     next command invoked immediately after this prefix command.  It
     requests the buffer of the next command to be displayed in another
     window.

‘C-x 4 1’
     This general prefix command requests the buffer of the next command
     to be displayed in the same window.


File: emacs.info,  Node: Change Window,  Next: Displaying Buffers,  Prev: Pop Up Window,  Up: Windows

21.5 Deleting and Resizing Windows
==================================

‘C-x 0’
     Delete the selected window (‘delete-window’).
‘C-x 1’
     Delete all windows in the selected frame except the selected window
     (‘delete-other-windows’).
‘C-x 4 0’
     Delete the selected window and kill the buffer that was showing in
     it (‘kill-buffer-and-window’).  The last character in this key
     sequence is a zero.
‘M-x delete-windows-on <RET> BUFFER <RET>’
     Delete windows showing the specified BUFFER.
‘C-x ^’
     Make selected window taller (‘enlarge-window’).
‘C-x }’
     Make selected window wider (‘enlarge-window-horizontally’).
‘C-x {’
     Make selected window narrower (‘shrink-window-horizontally’).
‘C-x -’
     Shrink this window if its buffer doesn’t need so many lines
     (‘shrink-window-if-larger-than-buffer’).
‘C-x +’
     Make all windows the same height (‘balance-windows’).

   To delete the selected window, type ‘C-x 0’ (‘delete-window’).  (That
is a zero.)  Once a window is deleted, the space that it occupied is
given to an adjacent window (but not the minibuffer window, even if that
is active at the time).  Deleting the window has no effect on the buffer
it used to display; the buffer continues to exist, and you can still
switch to it with ‘C-x b’.  The option ‘delete-window-choose-selected’
controls which window is chosen as the new selected window instead
(*note (elisp)Deleting Windows::).

   ‘C-x 4 0’ (‘kill-buffer-and-window’) is a stronger command than ‘C-x
0’; it kills the current buffer and then deletes the selected window.

   ‘C-x 1’ (‘delete-other-windows’) deletes all the windows, _except_
the selected one; the selected window expands to use the whole frame.
(This command cannot be used while the minibuffer window is active;
attempting to do so signals an error.)

   ‘M-x delete-windows-on’ deletes windows that show a specific buffer.
It prompts for the buffer, defaulting to the current buffer.  With
prefix argument of zero, ‘C-u 0’, this command deletes windows only on
the current display’s frames.

   The command ‘C-x ^’ (‘enlarge-window’) makes the selected window one
line taller, taking space from a vertically adjacent window without
changing the height of the frame.  With a positive numeric argument,
this command increases the window height by that many lines; with a
negative argument, it reduces the height by that many lines.  If there
are no vertically adjacent windows (i.e., the window is at the full
frame height), that signals an error.  The command also signals an error
if you attempt to reduce the height of any window below a certain
minimum number of lines, specified by the variable ‘window-min-height’
(the default is 4).

   Similarly, ‘C-x }’ (‘enlarge-window-horizontally’) makes the selected
window wider, and ‘C-x {’ (‘shrink-window-horizontally’) makes it
narrower.  These commands signal an error if you attempt to reduce the
width of any window below a certain minimum number of columns, specified
by the variable ‘window-min-width’ (the default is 10).

   Mouse clicks on the mode line (*note Mode Line Mouse::) or on window
dividers (*note Window Dividers::) provide another way to change window
heights and to split or delete windows.

   ‘C-x -’ (‘shrink-window-if-larger-than-buffer’) reduces the height of
the selected window, if it is taller than necessary to show the whole
text of the buffer it is displaying.  It gives the extra lines to other
windows in the frame.

   You can also use ‘C-x +’ (‘balance-windows’) to even out the heights
of all the windows in the selected frame.


File: emacs.info,  Node: Displaying Buffers,  Next: Window Convenience,  Prev: Change Window,  Up: Windows

21.6 Displaying a Buffer in a Window
====================================

It is a common Emacs operation to display or pop up some buffer in
response to a user command.  There are several different ways in which
commands do this.

   Many commands, like ‘C-x C-f’ (‘find-file’), by default display the
buffer by “taking over” the selected window, expecting that the user’s
attention will be diverted to that buffer.

   Some commands try to display intelligently, trying not to take over
the selected window, e.g., by splitting off a new window and displaying
the desired buffer there.  Such commands, which include the various help
commands (*note Help::), work by calling ‘display-buffer’ internally.
*Note Window Choice::, for details.

   Other commands do the same as ‘display-buffer’, and additionally
select the displaying window so that you can begin editing its buffer.
The command ‘M-g M-n’ (‘next-error’) is one example (*note Compilation
Mode::).  Such commands work by calling the function ‘pop-to-buffer’
internally.  *Note Switching to a Buffer in a Window: (elisp)Switching
Buffers.

   Commands with names ending in ‘-other-window’ behave like
‘display-buffer’, except that they never display in the selected window.
Several of these commands are bound in the ‘C-x 4’ prefix key (*note Pop
Up Window::).

   Commands with names ending in ‘-other-frame’ behave like
‘display-buffer’, except that they (i) never display in the selected
window and (ii) prefer to either create a new frame or use a window on
some other frame to display the desired buffer.  Several of these
commands are bound in the ‘C-x 5’ prefix key.

* Menu:

* Window Choice::   How ‘display-buffer’ works.
* Temporary Displays::   Displaying non-editable buffers.


File: emacs.info,  Node: Window Choice,  Next: Temporary Displays,  Up: Displaying Buffers

21.6.1 How ‘display-buffer’ works
---------------------------------

The ‘display-buffer’ command (as well as commands that call it
internally) chooses a window to display by following the steps given
below.  *Note Choosing a Window for Displaying a Buffer: (elisp)Choosing
Window, for details about how to alter this sequence of steps.

   • If the buffer should be displayed in the selected window regardless
     of other considerations, reuse the selected window.  By default,
     this step is skipped, but you can tell Emacs not to skip it by
     adding a regular expression matching the buffer’s name together
     with a reference to the ‘display-buffer-same-window’ action
     function (*note Action Functions for Buffer Display: (elisp)Buffer
     Display Action Functions.) to the option ‘display-buffer-alist’
     (*note Choosing a Window for Displaying a Buffer: (elisp)Choosing
     Window.).  For example, to display the buffer ‘*scratch*’
     preferably in the selected window write:

          (setopt
           display-buffer-alist
           '(("\\*scratch\\*" (display-buffer-same-window))))

     By default, ‘display-buffer-alist’ is ‘nil’.

   • Otherwise, if the buffer is already displayed in an existing
     window, reuse that window.  Normally, only windows on the selected
     frame are considered, but windows on other frames are also reusable
     if you use the corresponding ‘reusable-frames’ action alist entry
     (*note Action Alists for Buffer Display: (elisp)Buffer Display
     Action Alists.).  See the next step for an example of how to do
     that.

   • Otherwise, optionally create a new frame and display the buffer
     there.  By default, this step is skipped.  To enable it, change the
     value of the option ‘display-buffer-base-action’ (*note Choosing a
     Window for Displaying a Buffer: (elisp)Choosing Window.) as
     follows:

          (setopt
           display-buffer-base-action
           '((display-buffer-reuse-window display-buffer-pop-up-frame)
             (reusable-frames . 0)))

     This customization will also try to make the preceding step search
     for a reusable window on all visible or iconified frames.

   • Otherwise, try to create a new window by splitting a window on the
     selected frame, and display the buffer in that new window.

     The split can be either vertical or horizontal, depending on the
     variables ‘split-height-threshold’ and ‘split-width-threshold’.
     These variables should have integer values.  If
     ‘split-height-threshold’ is smaller than the chosen window’s
     height, the split puts the new window below.  Otherwise, if
     ‘split-width-threshold’ is smaller than the window’s width, the
     split puts the new window on the right.  If neither condition
     holds, Emacs tries to split so that the new window is below—but
     only if the window was not split before (to avoid excessive
     splitting).

   • Otherwise, display the buffer in a window previously showing it.
     Normally, only windows on the selected frame are considered, but
     with a suitable ‘reusable-frames’ action alist entry (see above)
     the window may be also on another frame.

   • Otherwise, display the buffer in an existing window on the selected
     frame.

   • If all the above methods fail for whatever reason, create a new
     frame and display the buffer there.


File: emacs.info,  Node: Temporary Displays,  Prev: Window Choice,  Up: Displaying Buffers

21.6.2 Displaying non-editable buffers.
---------------------------------------

Some buffers are shown in windows for perusal rather than for editing.
Help commands (*note Help::) typically use a buffer called ‘*Help*’ for
that purpose, minibuffer completion (*note Completion::) uses a buffer
called ‘*Completions*’, etc.  Such buffers are usually displayed only
for a short period of time.

   Normally, Emacs chooses the window for such temporary displays via
‘display-buffer’, as described in the previous subsection.  The
‘*Completions*’ buffer, on the other hand, is normally displayed in a
window at the bottom of the selected frame, regardless of the number of
windows already shown on that frame.

   If you prefer Emacs to display a temporary buffer in a different
fashion, customize the variable ‘display-buffer-alist’ (*note Choosing a
Window for Displaying a Buffer: (elisp)Choosing Window.) appropriately.
For example, to display ‘*Completions*’ always below the selected
window, use the following form in your initialization file (*note Init
File::):

     (setopt
      display-buffer-alist
      '(("\\*Completions\\*" display-buffer-below-selected)))

   The ‘*Completions*’ buffer is also special in the sense that Emacs
usually tries to make its window just as large as necessary to display
all of its contents.  To resize windows showing other temporary
displays, like, for example, the ‘*Help*’ buffer, turn on the minor mode
(*note Minor Modes::) ‘temp-buffer-resize-mode’ (*note Temporary
Displays: (elisp)Temporary Displays.).

   The maximum size of windows resized by ‘temp-buffer-resize-mode’ can
be controlled by customizing the options ‘temp-buffer-max-height’ and
‘temp-buffer-max-width’ (*note Temporary Displays: (elisp)Temporary
Displays.), and cannot exceed the size of the containing frame.


File: emacs.info,  Node: Window Convenience,  Next: Tab Line,  Prev: Displaying Buffers,  Up: Windows

21.7 Convenience Features for Window Handling
=============================================

Winner mode is a global minor mode that records the changes in the
window configuration (i.e., how the frames are partitioned into
windows), so that you can undo them.  You can toggle Winner mode with
‘M-x winner-mode’, or by customizing the variable ‘winner-mode’.  When
the mode is enabled, ‘C-c left’ (‘winner-undo’) undoes the last window
configuration change.  If you change your mind while undoing, you can
redo the changes you had undone using ‘C-c right’ (‘M-x winner-redo’).
To prevent Winner mode from binding ‘C-c left’ and ‘C-c right’, you can
customize the variable ‘winner-dont-bind-my-keys’ to a non-‘nil’ value.
By default, Winner mode stores a maximum of 200 window configurations
per frame, but you can change that by modifying the variable
‘winner-ring-size’.  If there are some buffers whose windows you
wouldn’t want Winner mode to restore, add their names to the list
variable ‘winner-boring-buffers’ or to the regexp
‘winner-boring-buffers-regexp’.

   Follow mode (‘M-x follow-mode’) synchronizes several windows on the
same buffer so that they always display adjacent sections of that
buffer.  *Note Follow Mode::.

   The Windmove package defines commands for moving directionally
between neighboring windows in a frame.  ‘M-x windmove-right’ selects
the window immediately to the right of the currently selected one, and
similarly for the left, up, and down counterparts.
‘windmove-default-keybindings’ binds these commands to ‘S-right’ etc.;
doing so disables shift selection for those keys (*note Shift
Selection::).  In the same way as key bindings can be defined for
commands that select windows directionally, you can use
‘windmove-display-default-keybindings’ to define keybindings for
commands that specify in what direction to display the window for the
buffer that the next command is going to display.  Also there is
‘windmove-delete-default-keybindings’ to define keybindings for commands
that delete windows directionally, and
‘windmove-swap-states-default-keybindings’ that defines key bindings for
commands that swap the window contents of the selected window with the
window in the specified direction.

   The command ‘M-x compare-windows’ lets you compare the text shown in
different windows.  *Note Comparing Files::.

   Scroll All mode (‘M-x scroll-all-mode’) is a global minor mode that
causes scrolling commands and point motion commands to apply to every
single window.


File: emacs.info,  Node: Tab Line,  Prev: Window Convenience,  Up: Windows

21.8 Window Tab Line
====================

The command ‘global-tab-line-mode’ toggles the display of a “tab line”
on the top screen line of each window.  The Tab Line shows special
buttons (“tabs”) for each buffer that was displayed in a window, and
allows switching to any of these buffers by clicking the corresponding
button.  Clicking on the ‘+’ icon adds a new buffer to the window-local
tab line of buffers, and clicking on the ‘x’ icon of a tab deletes it.
The mouse wheel on the tab line scrolls the tabs horizontally.

   Selecting the previous window-local tab is the same as typing ‘C-x
<LEFT>’ (‘previous-buffer’), selecting the next tab is the same as ‘C-x
<RIGHT>’ (‘next-buffer’).  Both commands support a numeric prefix
argument as a repeat count.

   You can customize the variable ‘tab-line-tabs-function’ to define the
preferred contents of the tab line.  By default, it displays all buffers
previously visited in the window, as described above.  But you can also
set it to display a list of buffers with the same major mode as the
current buffer, or to display buffers grouped by their major mode, where
clicking on the mode name in the first tab displays a list of all major
modes where you can select another group of buffers.

   Note that the Tab Line is different from the Tab Bar (*note Tab
Bars::).  Whereas tabs on the Tab Bar at the top of each frame are used
to switch between window configurations containing several windows with
buffers, tabs on the Tab Line at the top of each window are used to
switch between buffers in the window.


File: emacs.info,  Node: Frames,  Next: International,  Prev: Windows,  Up: Top

# /. 22 Frames and Graphical Displays
************************************

When Emacs is started on a graphical display, e.g., on the X Window
System, it occupies a graphical system-level display region.  In this
manual, we call this a “frame”, reserving the word “window” for the part
of the frame used for displaying a buffer.  A frame initially contains
one window, but it can be subdivided into multiple windows (*note
Windows::).  A frame normally also contains a menu bar, tool bar, and
echo area.

   You can also create additional frames (*note Creating Frames::).  All
frames created in the same Emacs session have access to the same
underlying buffers and other data.  For instance, if a buffer is being
shown in more than one frame, any changes made to it in one frame show
up immediately in the other frames too.

   Typing ‘C-x C-c’ closes all the frames on the current display, and
ends the Emacs session if it has no frames open on any other displays
(*note Exiting::).  To close just the selected frame, type ‘C-x 5 0’
(that is zero, not ‘o’).

   This chapter describes Emacs features specific to graphical displays
(particularly mouse commands), and features for managing multiple
frames.  On text terminals, many of these features are unavailable.
However, it is still possible to create multiple frames on text
terminals; such frames are displayed one at a time, filling the entire
terminal screen (*note Non-Window Terminals::).  It is also possible to
use the mouse on some text terminals (*note Text-Only Mouse::, for doing
so on GNU and Unix systems; and *note MS-DOS Mouse::, for doing so on
MS-DOS). Menus are supported on all text terminals.

* Menu:

* Mouse Commands::      Moving, cutting, and pasting, with the mouse.
* Word and Line Mouse:: Mouse commands for selecting whole words or lines.
* Mouse References::    Using the mouse to select an item from a list.
* Menu Mouse Clicks::   Mouse clicks that bring up menus.
* Mode Line Mouse::     Mouse clicks on the mode line.
* Creating Frames::     Creating additional Emacs frames with various contents.
* Frame Commands::      Iconifying, deleting, and switching frames.
* Fonts::               Changing the frame font.
* Speedbar::            How to make and use a speedbar frame.
* Multiple Displays::   How one Emacs instance can talk to several displays.
* Frame Parameters::    Changing the colors and other modes of frames.
* Scroll Bars::         How to enable and disable scroll bars; how to use them.
* Window Dividers::     Window separators that can be dragged with the mouse.
* Drag and Drop::       Using drag and drop to open files and insert text.
* Menu Bars::           Enabling and disabling the menu bar.
* Tool Bars::           Enabling and disabling the tool bar.
* Tab Bars::            Enabling and disabling the tab bar.
* Dialog Boxes::        Controlling use of dialog boxes.
* Tooltips::            Displaying information at the current mouse position.
* Mouse Avoidance::     Preventing the mouse pointer from obscuring text.
* Non-Window Terminals::  Multiple frames on terminals that show only one.
* Text-Only Mouse::     Using the mouse in text terminals.


File: emacs.info,  Node: Mouse Commands,  Next: Word and Line Mouse,  Up: Frames

22.1 Mouse Commands for Editing
===============================

‘mouse-1’
     Move point to where you click (‘mouse-set-point’).

‘Drag-mouse-1’
     Activate the region around the text selected by dragging, and put
     the text in the primary selection (‘mouse-set-region’).

‘mouse-2’
     Move point to where you click, and insert the contents of the
     primary selection there (‘mouse-yank-primary’).

‘mouse-3’
     If the region is active, move the nearer end of the region to the
     click position; otherwise, set mark at the current value of point
     and point at the click position.  Save the resulting region in the
     kill ring; on a second click, kill it (‘mouse-save-then-kill’).

‘C-M-mouse-1’
     Activate a rectangular region around the text selected by dragging.
     *Note Rectangles::.

   The most basic mouse command is ‘mouse-set-point’, which is invoked
by clicking with the left mouse button, ‘mouse-1’, in the text area of a
window.  This moves point to the position where you clicked.  If that
window was not the selected window, it becomes the selected window.  You
can also activate a region by double-clicking ‘mouse-1’ (*note Word and
Line Mouse::).

   Normally, if the frame you clicked in was not the selected frame, it
is made the selected frame, in addition to selecting the window and
setting the cursor.  On the X Window System, you can change this by
setting the variable ‘x-mouse-click-focus-ignore-position’ to ‘t’.  In
that case, the initial click on an unselected frame just selects the
frame, without doing anything else; clicking again selects the window
and sets the cursor position.

   Holding down ‘mouse-1’ and dragging the mouse over a stretch of text
activates the region around that text (‘mouse-set-region’), placing the
mark where you started holding down the mouse button, and point where
you release it (*note Mark::).  In addition, the text in the region
becomes the primary selection (*note Primary Selection::).

   If you change the variable ‘mouse-drag-copy-region’ to a non-‘nil’
value, dragging the mouse over a stretch of text also adds the text to
the kill ring.  The default is ‘nil’.

   If this variable is ‘non-empty’, only copy to the kill ring if the
region is non-empty.  For instance, if you mouse drag an area that is
less than a half a character, you’d normally get the empty string in
your kill ring, but with ‘non-empty’, this short mouse drag won’t affect
the kill ring.

   If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can select regions that don’t fit
entirely on the screen.  The number of lines scrolled per step depends
on how far away from the window edge the mouse has gone; the variable
‘mouse-scroll-min-lines’ specifies a minimum step size.

   If you enable the option ‘mouse-drag-mode-line-buffer’ and dragging
files is supported by the window system, then dragging the mouse on the
buffer name portion of the mode line will drag that buffer’s file to
another program or frame.

   Clicking with the middle mouse button, ‘mouse-2’, moves point to the
position where you clicked and inserts the contents of the primary
selection (‘mouse-yank-primary’).  *Note Primary Selection::.  This
behavior is consistent with other X applications.  Alternatively, you
can rebind ‘mouse-2’ to ‘mouse-yank-at-click’, which performs a yank at
the position you click.

   If you change the variable ‘mouse-yank-at-point’ to a non-‘nil’
value, ‘mouse-2’ does not move point; it inserts the text at point,
regardless of where you clicked or even which of the frame’s windows you
clicked on.  This variable affects both ‘mouse-yank-primary’ and
‘mouse-yank-at-click’.

   Clicking with the right mouse button, ‘mouse-3’, runs the command
‘mouse-save-then-kill’.  This performs several actions depending on
where you click and the status of the region:

   • If no region is active, clicking ‘mouse-3’ activates the region,
     placing the mark where point was and point at the clicked position.

   • If a region is active, clicking ‘mouse-3’ adjusts the nearer end of
     the region by moving it to the clicked position.  The adjusted
     region’s text is copied to the kill ring; if the text in the
     original region was already on the kill ring, it replaces it there.

   • If you originally specified the region using a double or triple
     ‘mouse-1’, so that the region is defined to consist of entire words
     or lines (*note Word and Line Mouse::), then adjusting the region
     with ‘mouse-3’ also proceeds by entire words or lines.

   • If you use ‘mouse-3’ a second time consecutively, at the same
     place, that kills the region already selected.  Thus, the simplest
     way to kill text with the mouse is to click ‘mouse-1’ at one end,
     then click ‘mouse-3’ twice at the other end.  To copy the text into
     the kill ring without deleting it from the buffer, press ‘mouse-3’
     just once—or just drag across the text with ‘mouse-1’.  Then you
     can copy it elsewhere by yanking it.

   The ‘mouse-save-then-kill’ command also obeys the variable
‘mouse-drag-copy-region’ (described above).  If the value is non-‘nil’,
then whenever the command sets or adjusts the active region, the text in
the region is also added to the kill ring.  If the latest kill ring
entry had been added the same way, that entry is replaced rather than
making a new entry.

   Whenever you set the region using any of the mouse commands described
above, the mark will be deactivated by any subsequent unshifted cursor
motion command, in addition to the usual ways of deactivating the mark.
*Note Shift Selection::.

   Some mice have a “wheel” which can be used for scrolling.  Emacs
supports scrolling windows with the mouse wheel, by default, on most
graphical displays.  To toggle this feature, use ‘M-x mouse-wheel-mode’.
The variables ‘mouse-wheel-follow-mouse’ and ‘mouse-wheel-scroll-amount’
determine where and by how much buffers are scrolled.  The variable
‘mouse-wheel-progressive-speed’ determines whether the scroll speed is
linked to how fast you move the wheel.  This mode also supports
increasing or decreasing the font size, by default bound to scrolling
with the <Ctrl> modifier.  When this mode is enabled, mouse wheel
produces special events like ‘wheel-up’ and ‘wheel-down’.  (Some older
systems report them as ‘mouse-4’ and ‘mouse-5’.)  If the mouse has a
horizontal scroll wheel, it produces ‘wheel-left’ and ‘wheel-right’
events as well.

   Emacs also supports horizontal scrolling with the <Shift> modifier.
Typing a numeric prefix arg (e.g., ‘M-5’) before starting horizontal
scrolling changes its step value defined by the user option
‘mouse-wheel-scroll-amount-horizontal’.

   If your mouse’s wheel can be tilted, or if your touchpad supports it,
then you can also enable horizontal scrolling by customizing the
variable ‘mouse-wheel-tilt-scroll’ to a non-‘nil’ value.  By default,
tilting the mouse wheel scrolls the window’s view horizontally in the
direction of the tilt: e.g., tilting to the right scrolls the window to
the right, so that the text displayed in the window moves horizontally
to the left.  If you’d like to reverse the direction of horizontal
scrolling, customize the variable ‘mouse-wheel-flip-direction’ to a
non-‘nil’ value.

   When the mouse pointer is over an image in Image mode, *note Image
Mode::, scrolling the mouse wheel with the <Ctrl> modifier scales the
image under the mouse pointer, and scrolling the mouse wheel with the
<Shift> modifier scrolls the image horizontally.


File: emacs.info,  Node: Word and Line Mouse,  Next: Mouse References,  Prev: Mouse Commands,  Up: Frames

22.2 Mouse Commands for Words and Lines
=======================================

These variants of ‘mouse-1’ select entire words or lines at a time.
Emacs activates the region around the selected text, which is also
copied to the kill ring.

‘Double-mouse-1’
     Select the text around the word or character which you click on.

     Double-clicking on a character with symbol syntax (such as
     underscore, in C mode) selects the symbol surrounding that
     character.  Double-clicking on a character with open- or
     close-parenthesis syntax selects the parenthetical grouping which
     that character starts or ends.  Double-clicking on a character with
     string-delimiter syntax (such as a single-quote or double-quote in
     C) selects the string constant (Emacs uses heuristics to figure out
     whether that character is the beginning or the end of it).

     Double-clicking on the beginning of a parenthetical grouping or
     beginning string-delimiter moves point to the end of the region,
     scrolling the buffer display forward if necessary to show the new
     location of point.  Double-clicking on the end of a parenthetical
     grouping or end string-delimiter keeps point at the end of the
     region by default, so the beginning of the region will not be
     visible if it is above the top of the window; setting the user
     option ‘mouse-select-region-move-to-beginning’ to non-‘nil’ changes
     this to move point to the beginning of the region, scrolling the
     display backward if necessary.

‘Double-Drag-mouse-1’
     Select the text you drag across, in units of whole words.

‘Triple-mouse-1’
     Select the line you click on.

‘Triple-Drag-mouse-1’
     Select the text you drag across, in units of whole lines.


File: emacs.info,  Node: Mouse References,  Next: Menu Mouse Clicks,  Prev: Word and Line Mouse,  Up: Frames

22.3 Following References with the Mouse
========================================

Some Emacs buffers include “buttons”, or “hyperlinks”: pieces of text
that perform some action (e.g., following a reference) when activated
(e.g., by clicking on them).  Usually, a button’s text is visually
highlighted: it is underlined, or a box is drawn around it.  If you move
the mouse over a button, the shape of the mouse cursor changes and the
button lights up.  If you change the variable ‘mouse-highlight’ to
‘nil’, Emacs disables this highlighting.

   You can activate a button by moving point to it and typing <RET>, or
by clicking either ‘mouse-1’ or ‘mouse-2’ on the button.  For example,
in a Dired buffer, each file name is a button; activating it causes
Emacs to visit that file (*note Dired::).  In a ‘*Compilation*’ buffer,
each error message is a button, and activating it visits the source code
for that error (*note Compilation::).

   Although clicking ‘mouse-1’ on a button usually activates the button,
if you hold the mouse button down for a period of time before releasing
it (specifically, for more than 450 milliseconds), then Emacs moves
point where you clicked, without activating the button.  In this way,
you can use the mouse to move point over a button without activating it.
Dragging the mouse over or onto a button has its usual behavior of
setting the region, and does not activate the button.

   You can change how ‘mouse-1’ applies to buttons by customizing the
variable ‘mouse-1-click-follows-link’.  If the value is a positive
integer, that determines how long you need to hold the mouse button down
for, in milliseconds, to cancel button activation; the default is 450,
as described in the previous paragraph.  If the value is ‘nil’,
‘mouse-1’ just sets point where you clicked, and does not activate
buttons.  If the value is ‘double’, double clicks activate buttons but
single clicks just set point.

   Normally, ‘mouse-1’ on a button activates the button even if it is in
a non-selected window.  If you change the variable
‘mouse-1-click-in-non-selected-windows’ to ‘nil’, ‘mouse-1’ on a button
in an unselected window moves point to the clicked position and selects
that window, without activating the button.


File: emacs.info,  Node: Menu Mouse Clicks,  Next: Mode Line Mouse,  Prev: Mouse References,  Up: Frames

22.4 Mouse Clicks for Menus
===========================

Several mouse clicks with the <Ctrl> and <SHIFT> modifiers bring up
menus.

‘C-mouse-1’
     This menu is for selecting a buffer.

     The MSB (“mouse select buffer”) global minor mode makes this menu
     smarter and more customizable.  *Note Buffer Menus::.

‘C-mouse-2’
     This menu contains entries for examining faces and other text
     properties, and well as for setting them (the latter is mainly
     useful when editing enriched text; *note Enriched Text::).

‘C-mouse-3’
     This menu is mode-specific.  For most modes if Menu-bar mode is on,
     this menu has the same items as all the mode-specific menu-bar
     menus put together.  Some modes may specify a different menu for
     this button.  If Menu Bar mode is off, this menu contains all the
     items which would be present in the menu bar—not just the
     mode-specific ones—so that you can access them without having to
     display the menu bar.

‘S-mouse-1’
     This menu is for changing the default face within the window’s
     buffer.  *Note Text Scale::.

   Many GUI applications use ‘mouse-3’ to display “context menus”: menus
that provide access to various pertinent settings and actions for the
location and context of the mouse click.  If you prefer this in Emacs
over the default function of ‘mouse-3’, which is bound to the
‘mouse-save-then-kill’ command (*note Mouse Commands::), you can enable
the minor mode ‘context-menu-mode’.  Then Emacs will show context menus
when you click ‘mouse-3’.  The exact contents of these context menus
depends on the current major mode and the buffer contents around the
place where you click the mouse.  To customize the contents of the
context menu, you can use the variable ‘context-menu-functions’ (*note
(elisp)Major Mode Conventions::).  You can also invoke the context menu
by pressing ‘S-<F10>’.


File: emacs.info,  Node: Mode Line Mouse,  Next: Creating Frames,  Prev: Menu Mouse Clicks,  Up: Frames

22.5 Mode Line Mouse Commands
=============================

You can use mouse clicks on window mode lines to select and manipulate
windows.

   Some areas of the mode line, such as the buffer name, and major and
minor mode names, have their own special mouse bindings.  These areas
are highlighted when you hold the mouse over them, and information about
the special bindings will be displayed (*note Tooltips::).  This
section’s commands do not apply in those areas.

‘mouse-1’
     ‘mouse-1’ on a mode line selects the window it belongs to.  By
     dragging ‘mouse-1’ on the mode line, you can move it, thus changing
     the height of the windows above and below.  Changing heights with
     the mouse in this way never deletes windows, it just refuses to
     make any window smaller than the minimum height.

‘mouse-2’
     ‘mouse-2’ on a mode line expands that window to fill its frame.

‘mouse-3’
     ‘mouse-3’ on a mode line deletes the window it belongs to.  If the
     frame has only one window, it does nothing.

‘C-mouse-2’
     ‘C-mouse-2’ on a mode line splits that window, producing two
     side-by-side windows with the boundary running through the click
     position (*note Split Window::).

   Furthermore, by clicking and dragging ‘mouse-1’ on the divider
between two side-by-side mode lines, you can move the vertical boundary
to the left or right.

   Note that resizing windows is affected by the value of
‘window-resize-pixelwise’, see *note Split Window::.


File: emacs.info,  Node: Creating Frames,  Next: Frame Commands,  Prev: Mode Line Mouse,  Up: Frames

22.6 Creating Frames
====================

The prefix key ‘C-x 5’ is analogous to ‘C-x 4’.  Whereas each ‘C-x 4’
command pops up a buffer in a different window in the selected frame
(*note Pop Up Window::), the ‘C-x 5’ commands use a different frame.  If
an existing visible or iconified (a.k.a. “minimized”, *note
(elisp)Visibility of Frames::) frame already displays the requested
buffer, that frame is raised and deiconified (“un-minimized”);
otherwise, a new frame is created on the current display terminal.

   The various ‘C-x 5’ commands differ in how they find or create the
buffer to select:

‘C-x 5 2’
     Create a new frame using the default frame parameters
     (‘make-frame-command’).

‘C-x 5 c’
     Create a new frame using the window configuration and frame
     parameters of the current frame (‘clone-frame’).

‘C-x 5 b BUFNAME <RET>’
     Select buffer BUFNAME in another frame.  This runs
     ‘switch-to-buffer-other-frame’.

‘C-x 5 f FILENAME <RET>’
     Visit file FILENAME and select its buffer in another frame.  This
     runs ‘find-file-other-frame’.  *Note Visiting::.

‘C-x 5 d DIRECTORY <RET>’
     Select a Dired buffer for directory DIRECTORY in another frame.
     This runs ‘dired-other-frame’.  *Note Dired::.

‘C-x 5 m’
     Start composing a mail message in another frame.  This runs
     ‘compose-mail-other-frame’.  It is the other-frame variant of ‘C-x
     m’.  *Note Sending Mail::.

‘C-x 5 .’
     Find the definition of an identifier in another frame.  This runs
     ‘xref-find-definitions-other-frame’, the multiple-frame variant of
     ‘M-.’.  *Note Xref::.

‘C-x 5 r FILENAME <RET>’
     Visit file FILENAME read-only, and select its buffer in another
     frame.  This runs ‘find-file-read-only-other-frame’.  *Note
     Visiting::.

‘C-x 5 5’
     A more general prefix command that affects the buffer displayed by
     the next command invoked immediately after this prefix command
     (‘other-frame-prefix’).  It requests the buffer of the next command
     to be displayed in another frame.

   You can control the appearance and behavior of the newly-created
frames by specifying “frame parameters”.  *Note Frame Parameters::.


File: emacs.info,  Node: Frame Commands,  Next: Fonts,  Prev: Creating Frames,  Up: Frames

22.7 Frame Commands
===================

The following commands are used to delete and operate on frames:

‘C-x 5 0’
     Delete the selected frame (‘delete-frame’).  This signals an error
     if there is only one frame.

‘C-x 5 u’
     When ‘undelete-frame-mode’ is enabled, undelete one of the 16 most
     recently deleted frames.  Without a prefix argument, undelete the
     most recently deleted frame.  With a numerical prefix argument
     between 1 and 16, where 1 is the most recently deleted frame,
     undelete the corresponding deleted frame.

‘C-z’
     Minimize (or iconify) the selected Emacs frame (‘suspend-frame’).
     *Note Exiting::.

‘C-x 5 o’
     Select another frame, and raise it.  If you repeat this command, it
     cycles through all the frames on your terminal.

‘C-x 5 1’
     Delete all frames on the current terminal, except the selected one.

‘M-<F10>’
     Toggle the maximization state of the current frame.  When a frame
     is maximized, it fills the screen.

‘<F11>’
     Toggle full-screen mode for the current frame.  (The difference
     between full-screen and maximized is normally that the former hides
     window manager decorations, giving slightly more screen space to
     Emacs itself.)

   Note that with some window managers you may have to customize the
variable ‘frame-resize-pixelwise’ to a non-‘nil’ value in order to make
a frame truly maximized or full-screen.  This variable, when set to a
non-‘nil’ value, in general allows resizing frames at pixel resolution,
rather than in integral multiples of lines and columns.

   The ‘C-x 5 0’ (‘delete-frame’) command deletes the selected frame.
However, it will refuse to delete the last frame in an Emacs session, to
prevent you from losing the ability to interact with the Emacs session.
Note that when Emacs is run as a daemon (*note Emacs Server::), there is
always a virtual frame that remains after all the ordinary, interactive
frames are deleted.  In this case, ‘C-x 5 0’ can delete the last
interactive frame; you can use ‘emacsclient’ to reconnect to the Emacs
session.

   The ‘C-x 5 1’ (‘delete-other-frames’) command deletes all other
frames on the current terminal (this terminal refers to either a
graphical display, or a text terminal; *note Non-Window Terminals::).
If the Emacs session has frames open on other graphical displays or text
terminals, those are not deleted.

   The ‘C-x 5 o’ (‘other-frame’) command selects the next frame on the
current terminal.  If you are using Emacs on the X Window System with a
window manager that selects (or “gives focus to”) whatever frame the
mouse cursor is over, you have to change the variable
‘focus-follows-mouse’ to ‘t’ in order for this command to work properly.
Then invoking ‘C-x 5 o’ will also warp the mouse cursor to the chosen
frame.


File: emacs.info,  Node: Fonts,  Next: Speedbar,  Prev: Frame Commands,  Up: Frames

22.8 Fonts
==========

By default, Emacs displays text on graphical displays using a 10-point
monospace font, and the font size can be changed interactively (*note
Text Scale::).

   There are several different ways to specify a different font:

   • Click on ‘Set Default Font’ in the ‘Options’ menu.  This makes the
     selected font the default on all existing graphical frames.  To
     save this for future sessions, click on ‘Save Options’ in the
     ‘Options’ menu.

   • Add a line to your init file, modifying the variable
     ‘default-frame-alist’ to specify the ‘font’ parameter (*note Frame
     Parameters::), like this:

          (add-to-list 'default-frame-alist
                       '(font . "DejaVu Sans Mono-10"))

     This makes the font the default on all graphical frames created
     after restarting Emacs with that init file.

   • Add an ‘emacs.font’ X resource setting to your X resource file,
     like this:

          emacs.font: DejaVu Sans Mono-12

     You must restart X, or use the ‘xrdb’ command, for the X resources
     file to take effect.  *Note Resources::.  Do not quote font names
     in X resource files.

   • If you are running Emacs on the GNOME desktop or Haiku, you can
     tell Emacs to adjust the frame’s default font along with changes to
     the default system font by setting the variable
     ‘font-use-system-font’ to ‘t’ (the default is ‘nil’).  For this to
     work, Emacs must have been compiled with support for Gsettings (or
     the older Gconf).  (To be specific, the Gsettings configuration
     names used are ‘org.gnome.desktop.interface monospace-font-name’
     and ‘org.gnome.desktop.interface font-name’.)

   • Use the command line option ‘-fn’ (or ‘--font’).  *Note Font X::.

   To check what font you’re currently using, the ‘C-u C-x =’ command
can be helpful.  It describes the character at point, and names the font
that it’s rendered in.

   There are four different ways to express a font name.  The first is
to use a “Fontconfig pattern”.  Fontconfig patterns have the following
form:

     FONTNAME[-FONTSIZE][:NAME1=VALUES1][:NAME2=VALUES2]...

Within this format, any of the elements in brackets may be omitted.
Here, FONTNAME is the “family name” of the font, such as ‘Monospace’ or
‘DejaVu Sans Mono’; FONTSIZE is the “point size” of the font (one
“printer’s point” is about 1/72 of an inch); and the ‘NAME=VALUES’
entries specify settings such as the slant and weight of the font.  Each
VALUES may be a single value, or a list of values separated by commas.
In addition, some property values are valid with only one kind of
property name, in which case the ‘NAME=’ part may be omitted.

   Here is a list of common font properties:

‘slant’
     One of ‘italic’, ‘oblique’, or ‘roman’.

‘weight’
     One of ‘light’, ‘medium’, ‘demibold’, ‘bold’ or ‘black’.

‘style’
     Some fonts define special styles which are a combination of slant
     and weight.  For instance, ‘Dejavu Sans’ defines the ‘book’ style,
     which overrides the slant and weight properties.

‘width’
     One of ‘condensed’, ‘normal’, or ‘expanded’.

‘spacing’
     One of ‘monospace’, ‘proportional’, ‘dual-width’, or ‘charcell’.

Here are some examples of Fontconfig patterns:

     Monospace
     Monospace-12
     Monospace-12:bold
     DejaVu Sans Mono:bold:italic
     Monospace-12:weight=bold:slant=italic

   For a more detailed description of Fontconfig patterns, see the
Fontconfig manual, which is distributed with Fontconfig and available
online at <https://fontconfig.org/fontconfig-user.html>.

   On MS-Windows, only the subset of the form FONTNAME[-FONTSIZE] is
supported for all fonts; the full Fontconfig pattern might not work for
all of them.

   The second way to specify a font is to use a “GTK font pattern”.
These have the syntax

     FONTNAME [PROPERTIES] [FONTSIZE]

where FONTNAME is the family name, PROPERTIES is a list of property
values separated by spaces, and FONTSIZE is the point size.  The
properties that you may specify for GTK font patterns are as follows:

   • Slant properties: ‘Italic’ or ‘Oblique’.  If omitted, the default
     (roman) slant is implied.
   • Weight properties: ‘Bold’, ‘Book’, ‘Light’, ‘Medium’, ‘Semi-bold’,
     or ‘Ultra-light’.  If omitted, ‘Medium’ weight is implied.
   • Width properties: ‘Semi-Condensed’ or ‘Condensed’.  If omitted, a
     default width is used.

Here are some examples of GTK font patterns:

     Monospace 12
     Monospace Bold Italic 12

   On MS-Windows, only the subset FONTNAME is supported.

   The third way to specify a font is to use an “XLFD” (“X Logical Font
Description”).  This is the traditional method for specifying fonts
under X, and is also supported on MS-Windows.  Each XLFD consists of
fourteen words or numbers, separated by dashes, like this:

     -misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1

A wildcard character (‘*’) in an XLFD matches any sequence of characters
(including none), and ‘?’ matches any single character.  However,
matching is implementation-dependent, and can be inaccurate when
wildcards match dashes in a long name.  For reliable results, supply all
14 dashes and use wildcards only within a field.  Case is insignificant
in an XLFD.  The syntax for an XLFD is as follows:

     -MAKER-FAMILY-WEIGHT-SLANT-WIDTHTYPE-STYLE...
     ...-PIXELS-HEIGHT-HORIZ-VERT-SPACING-WIDTH-REGISTRY-ENCODING

The entries have the following meanings:

MAKER
     The name of the font manufacturer.
FAMILY
     The name of the font family (e.g., ‘courier’).
WEIGHT
     The font weight—normally either ‘bold’, ‘medium’ or ‘light’.  Some
     font names support other values.
SLANT
     The font slant—normally ‘r’ (roman), ‘i’ (italic), ‘o’ (oblique),
     ‘ri’ (reverse italic), or ‘ot’ (other).  Some font names support
     other values.
WIDTHTYPE
     The font width—normally ‘normal’, ‘condensed’, ‘semicondensed’, or
     ‘extended’.  Some font names support other values.
STYLE
     An optional additional style name.  Usually it is empty—most XLFDs
     have two hyphens in a row at this point.  The style name can also
     specify a two-letter ISO-639 language name, like ‘ja’ or ‘ko’; some
     fonts that support CJK scripts have that spelled out in the style
     name part.
PIXELS
     The font height, in pixels.
HEIGHT
     The font height on the screen, measured in tenths of a printer’s
     point.  This is the point size of the font, times ten.  For a given
     vertical resolution, HEIGHT and PIXELS are proportional; therefore,
     it is common to specify just one of them and use ‘*’ for the other.
HORIZ
     The horizontal resolution, in pixels per inch, of the screen for
     which the font is intended.
VERT
     The vertical resolution, in pixels per inch, of the screen for
     which the font is intended.  Normally the resolution of the fonts
     on your system is the right value for your screen; therefore, you
     normally specify ‘*’ for this and HORIZ.
SPACING
     This is ‘m’ (monospace), ‘p’ (proportional) or ‘c’ (character
     cell).
WIDTH
     The average character width, in pixels, multiplied by ten.
REGISTRY
ENCODING
     The X font character set that the font depicts.  (X font character
     sets are not the same as Emacs character sets, but they are
     similar.)  You can use the ‘xfontsel’ program to check which
     choices you have.  Normally you should use ‘iso8859’ for REGISTRY
     and ‘1’ for ENCODING.

   The fourth and final method of specifying a font is to use a font
nickname.  Certain fonts have shorter nicknames, which you can use
instead of a normal font specification.  For instance, ‘6x13’ is
equivalent to

     -misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1

   This form is not supported on MS-Windows.

   On X, Emacs recognizes two types of fonts: “client-side” fonts, which
are provided by the Xft and Fontconfig libraries, and “server-side”
fonts, which are provided by the X server itself.  Most client-side
fonts support advanced font features such as antialiasing and subpixel
hinting, while server-side fonts do not.  Fontconfig and GTK patterns
match only client-side fonts.

   You will probably want to use a fixed-width default font—that is, a
font in which all characters have the same width.  For Xft and
Fontconfig fonts, you can use the ‘fc-list’ command to list the
available fixed-width fonts, like this:

     fc-list :spacing=mono
     fc-list :spacing=charcell

For server-side X fonts, you can use the ‘xlsfonts’ program to list the
available fixed-width fonts, like this:

     xlsfonts -fn '*x*' | grep -E '^[0-9]+x[0-9]+'
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'

Any font with ‘m’ or ‘c’ in the SPACING field of the XLFD is a
fixed-width font.  To see what a particular font looks like, use the
‘xfd’ command.  For example:

     xfd -fn 6x13

displays the entire font ‘6x13’.

   While running Emacs, you can also set the font of a specific kind of
text (*note Faces::), or a particular frame (*note Frame Parameters::).


File: emacs.info,  Node: Speedbar,  Next: Multiple Displays,  Prev: Fonts,  Up: Frames

22.9 Speedbar Frames
====================

The “speedbar” is a special frame for conveniently navigating in or
operating on another frame.  The speedbar, when it exists, is always
associated with a specific frame, called its “attached frame”; all
speedbar operations act on that frame.

   Type ‘M-x speedbar’ to create the speedbar and associate it with the
current frame.  To dismiss the speedbar, type ‘M-x speedbar’ again, or
select the speedbar and type ‘q’.  (You can also delete the speedbar
frame like any other Emacs frame.)  If you wish to associate the
speedbar with a different frame, dismiss it and call ‘M-x speedbar’ from
that frame.

   The speedbar can operate in various modes.  Its default mode is “File
Display” mode, which shows the files in the current directory of the
selected window of the attached frame, one file per line.  Clicking on a
non-directory visits that file in the selected window of the attached
frame, and clicking on a directory shows that directory in the speedbar
(*note Mouse References::).  Each line also has a box, ‘[+]’ or ‘<+>’,
that you can click on to “expand” the contents of that item.  Expanding
a directory adds the contents of that directory to the speedbar display,
underneath the directory’s own line.  Expanding an ordinary file adds a
list of the tags in that file to the speedbar display; you can click on
a tag name to jump to that tag in the selected window of the attached
frame.  When a file or directory is expanded, the ‘[+]’ changes to
‘[-]’; you can click on that box to “contract” the item, hiding its
contents.

   You navigate through the speedbar using the keyboard, too.  Typing
<RET> while point is on a line in the speedbar is equivalent to clicking
the item on the current line, and <SPC> expands or contracts the item.
‘U’ displays the parent directory of the current directory.  To copy,
delete, or rename the file on the current line, type ‘C’, ‘D’, and ‘R’
respectively.  To create a new directory, type ‘M’.

   Another general-purpose speedbar mode is “Buffer Display” mode; in
this mode, the speedbar displays a list of Emacs buffers.  To switch to
this mode, type ‘b’ in the speedbar.  To return to File Display mode,
type ‘f’.  You can also change the display mode by clicking ‘mouse-3’
anywhere in the speedbar window (or ‘mouse-1’ on the mode-line) and
selecting ‘Displays’ in the pop-up menu.

   Some major modes, including Rmail mode, Info, and GUD, have
specialized ways of putting useful items into the speedbar for you to
select.  For example, in Rmail mode, the speedbar shows a list of Rmail
files, and lets you move the current message to another Rmail file by
clicking on its ‘<M>’ box.

   For more details on using and programming the speedbar, *Note
Speedbar: (speedbar)Top.


File: emacs.info,  Node: Multiple Displays,  Next: Frame Parameters,  Prev: Speedbar,  Up: Frames

22.10 Multiple Displays
=======================

A single Emacs can talk to more than one X display.  Initially, Emacs
uses just one display—the one specified with the ‘DISPLAY’ environment
variable or with the ‘--display’ option (*note Initial Options::).  To
connect to another display, use the command ‘make-frame-on-display’:

‘M-x make-frame-on-display <RET> DISPLAY <RET>’
     Create a new frame on display DISPLAY.

   A single X server can handle more than one screen.  When you open
frames on two screens belonging to one server, Emacs knows they share a
single keyboard, and it treats all the commands arriving from these
screens as a single stream of input.

   When you open frames on different X servers, Emacs makes a separate
input stream for each server.  Each server also has its own selected
frame.  The commands you enter with a particular X server apply to that
server’s selected frame.

   On multi-monitor displays it is possible to use the command
‘make-frame-on-monitor’:

‘M-x make-frame-on-monitor <RET> MONITOR <RET>’
     Create a new frame on monitor MONITOR whose screen area is a part
     of the current display.


File: emacs.info,  Node: Frame Parameters,  Next: Scroll Bars,  Prev: Multiple Displays,  Up: Frames

22.11 Frame Parameters
======================

You can control the default appearance and behavior of all frames by
specifying a default list of “frame parameters” in the variable
‘default-frame-alist’.  Its value should be a list of entries, each
specifying a parameter name and a value for that parameter.  These
entries take effect whenever Emacs creates a new frame, including the
initial frame.

   For example, you can add the following lines to your init file (*note
Init File::) to set the default frame width to 90 character columns, the
default frame height to 40 character rows, and the default font to
‘Monospace-10’:

     (add-to-list 'default-frame-alist '(width  . 90))
     (add-to-list 'default-frame-alist '(height . 40))
     (add-to-list 'default-frame-alist '(font . "Monospace-10"))

   For a list of frame parameters and their effects, see *note
(elisp)Frame Parameters::.

   You can also specify a list of frame parameters which apply to just
the initial frame, by customizing the variable ‘initial-frame-alist’.

   If Emacs is compiled to use an X toolkit, frame parameters that
specify colors and fonts don’t affect menus and the menu bar, since
those are drawn by the toolkit and not directly by Emacs.

   Frame appearance and behavior can also be customized through X
resources (*note X Resources::); these override the parameters of the
initial frame specified in your init file.

   Note that if you are using the desktop library to save and restore
your sessions, the frames to be restored are recorded in the desktop
file, together with their parameters.  When these frames are restored,
the recorded parameters take precedence over the frame parameters
specified by ‘default-frame-alist’ and ‘initial-frame-alist’ in your
init file.  *Note Saving Emacs Sessions::, for how to avoid that.


File: emacs.info,  Node: Scroll Bars,  Next: Window Dividers,  Prev: Frame Parameters,  Up: Frames

22.12 Scroll Bars
=================

On graphical displays, there is a “vertical scroll bar” on the side of
each Emacs window.  Clicking ‘mouse-1’ on the scroll bar’s up and down
buttons scrolls the window by one line at a time (but some toolkits
allow you to customize the scroll bars to not have those buttons).
Clicking ‘mouse-1’ above or below the scroll bar’s inner box scrolls the
window by nearly the entire height of the window, like ‘M-v’ and ‘C-v’
respectively (*note Moving Point::).  (This, too, can behave differently
with some toolkits.)  Dragging the inner box scrolls continuously.

   If Emacs is compiled on the X Window System without X toolkit
support, the scroll bar behaves differently.  Clicking ‘mouse-1’
anywhere on the scroll bar scrolls forward like ‘C-v’, while ‘mouse-3’
scrolls backward like ‘M-v’.  Clicking ‘mouse-2’ in the scroll bar lets
you drag the inner box up and down.

   To toggle the use of vertical scroll bars, type ‘M-x
scroll-bar-mode’.  This command applies to all frames, including frames
yet to be created.  To toggle vertical scroll bars for just the selected
frame, use the command ‘M-x toggle-scroll-bar’.

   To control the use of vertical scroll bars at startup, customize the
variable ‘scroll-bar-mode’ (*note Customization::).  Its value should be
either ‘right’ (put scroll bars on the right side of windows), ‘left’
(put them on the left), or ‘nil’ (disable vertical scroll bars).  By
default, Emacs puts scroll bars on the right if it was compiled with
GTK+ support on the X Window System, and on MS-Windows or macOS; Emacs
puts scroll bars on the left if compiled on the X Window System without
GTK+ support (following the old convention for X applications).

   You can also use the X resource ‘verticalScrollBars’ to enable or
disable the scroll bars (*note Resources::).  To control the scroll bar
width, change the ‘scroll-bar-width’ frame parameter (*note (elisp)Frame
Parameters::).

   If you’re using Emacs on X (with GTK+ or Motif), you can customize
the variable ‘scroll-bar-adjust-thumb-portion’ to control
“overscrolling” of the scroll bar, i.e., dragging the thumb down even
when the end of the buffer is visible.  If its value is non-‘nil’, the
scroll bar can be dragged downwards even if the end of the buffer is
shown; if ‘nil’, the thumb will be at the bottom when the end of the
buffer is shown.  You cannot over-scroll when the entire buffer is
visible.

   The visual appearance of the scroll bars is controlled by the
‘scroll-bar’ face.  (Some toolkits, such as GTK+ and MS-Windows, ignore
this face; the scroll-bar appearance there can only be customized
system-wide, for GTK+ *note GTK resources::).

   On graphical frames, vertical scroll bars implicitly serve to
separate side-by-side windows visually.  When vertical scroll bars are
disabled, Emacs by default separates such windows with the help of a
one-pixel wide “vertical border”.  That border occupies the first pixel
column of the window on the right and may thus overdraw the leftmost
pixels of any glyph displayed there.  If these pixels convey important
information, you can make them visible by enabling window dividers, see
*note Window Dividers::.  To replicate the look of vertical borders, set
the ‘right-divider-width’ parameter of frames to one and have the
‘window-divider’ face inherit from that of ‘vertical-border’, *note
Window Dividers: (elisp)Window Dividers.

   On graphical displays with toolkit support, Emacs may also supply a
“horizontal scroll bar” on the bottom of each window.  Clicking
‘mouse-1’ on that scroll bar’s left and right buttons scrolls the window
horizontally by one column at a time.  (Note that some toolkits allow
customizations of the scroll bar that cause these buttons not to be
shown.)  Clicking ‘mouse-1’ on the left or right of the scroll bar’s
inner box scrolls the window by four columns.  Dragging the inner box
scrolls the window continuously.

   Note that such horizontal scrolling can make the window’s position of
point disappear on the left or the right.  Typing a character to insert
text or moving point with a keyboard command will usually bring it back
into view.

   To toggle the use of horizontal scroll bars, type ‘M-x
horizontal-scroll-bar-mode’.  This command applies to all frames,
including frames yet to be created.  To toggle horizontal scroll bars
for just the selected frame, use the command ‘M-x
toggle-horizontal-scroll-bar’.

   To control the use of horizontal scroll bars at startup, customize
the variable ‘horizontal-scroll-bar-mode’.

   You can also use the X resource ‘horizontalScrollBars’ to enable or
disable horizontal scroll bars (*note Resources::).  To control the
scroll bar height, change the ‘scroll-bar-height’ frame parameter (*note
(elisp)Frame Parameters::).


File: emacs.info,  Node: Window Dividers,  Next: Drag and Drop,  Prev: Scroll Bars,  Up: Frames

22.13 Window Dividers
=====================

On graphical displays, you can use “window dividers” in order to
separate windows visually.  Window dividers are bars that can be dragged
with the mouse, thus allowing you to easily resize adjacent windows.

   To toggle the display of window dividers, use the command ‘M-x
window-divider-mode’.

   To customize where dividers should appear, use the option
‘window-divider-default-places’.  Its value should be either
‘bottom-only’ (to show dividers only on the bottom of windows),
‘right-only’ (to show dividers only on the right of windows), or ‘t’ (to
show them on the bottom and on the right).

   To adjust the width of window dividers displayed by this mode
customize the options ‘window-divider-default-bottom-width’ and
‘window-divider-default-right-width’.

   When vertical scroll bars are disabled, dividers can be also useful
to make the first pixel column of a window visible, which would be
otherwise covered by the vertical border used to separate side-by-side
windows (*note Scroll Bars::).

   For more details about window dividers see *note Window Dividers:
(elisp)Window Dividers.


File: emacs.info,  Node: Drag and Drop,  Next: Menu Bars,  Prev: Window Dividers,  Up: Frames

22.14 Drag and Drop
===================

In most graphical desktop environments, Emacs has basic support for
“drag and drop” operations.  For instance, dropping text onto an Emacs
frame inserts the text where it is dropped.  Dropping a file onto an
Emacs frame visits that file.  As a special case, dropping the file on a
Dired buffer moves or copies the file (according to the conventions of
the application it came from) into the directory displayed in that
buffer.

   Dropping a file normally visits it in the window you drop it on.  If
you prefer to visit the file in a new window in such cases, customize
the variable ‘dnd-open-file-other-window’.

   The XDND and Motif drag and drop protocols, and the old KDE 1.x
protocol, are currently supported.

   It can be difficult to scroll a window or determine where dropped
text will be inserted while dragging text onto an Emacs window.  Setting
the option ‘dnd-indicate-insertion-point’ to a non-‘nil’ value makes
point move to the location any dropped text will be inserted when the
mouse moves in a window during drag, and setting ‘dnd-scroll-margin’ to
an integer value causes a window to be scrolled if the mouse moves
within that many lines of the top or bottom of the window during drag.

   Emacs can also optionally drag the region with the mouse into another
portion of this or another buffer.  To enable that, customize the
variable ‘mouse-drag-and-drop-region’ to a non-‘nil’ value.  Normally,
the text is moved, i.e.  cut and pasted, when the destination is the
same buffer as the origin; dropping the region on another buffer copies
the text instead.  If the value of this variable names a modifier key,
such as ‘shift’, ‘control’ or ‘alt’, then pressing that modifier key
when dropping the text will copy it instead of cutting it, even if you
drop on the same buffer as the one from which the text came.

   In order to cut text even when source and destination buffers differ,
set the option ‘mouse-drag-and-drop-region-cut-when-buffers-differ’ to a
non-‘nil’ value.  By default, on a graphic display the selected text is
shown in a tooltip and point moves together with the mouse cursor during
dragging.  To suppress such behavior, set the options
‘mouse-drag-and-drop-region-show-tooltip’ and/or
‘mouse-drag-and-drop-region-show-cursor’ to ‘nil’.

   To drag text from Emacs to other programs, set the option
‘mouse-drag-and-drop-region-cross-program’ to a non-‘nil’ value.

   On the X window system, some programs can drop files on Emacs,
expecting Emacs to save them.  Normally, Emacs will prompt for a file
name under which the file will be saved, and then open the file, but
that behavior can be changed by changing the variable
‘x-dnd-direct-save-function’.  *Note (elisp)Drag and Drop::.


File: emacs.info,  Node: Menu Bars,  Next: Tool Bars,  Prev: Drag and Drop,  Up: Frames

22.15 Menu Bars
===============

You can toggle the use of menu bars with ‘M-x menu-bar-mode’.  With no
argument, this command toggles Menu Bar mode, a global minor mode.  With
an argument, the command turns Menu Bar mode on if the argument is
positive, off if the argument is not positive.  To control the use of
menu bars at startup, customize the variable ‘menu-bar-mode’.

   Expert users often turn off the menu bar, especially on text
terminals, where this makes one additional line available for text.  If
the menu bar is off, you can still pop up a menu of its contents with
‘C-mouse-3’ on a display which supports pop-up menus.  Or you can enable
‘context-menu-mode’ and customize the variable ‘context-menu-functions’
to pop up a context menu with ‘mouse-3’.  *Note Menu Mouse Clicks::.

   *Note Menu Bar::, for information on how to invoke commands with the
menu bar.  *Note X Resources::, for how to customize the menu bar menus’
visual appearance.


File: emacs.info,  Node: Tool Bars,  Next: Tab Bars,  Prev: Menu Bars,  Up: Frames

22.16 Tool Bars
===============

On graphical displays, Emacs puts a “tool bar” at the top of each frame,
just below the menu bar.  This is a row of icons which you can click on
with the mouse to invoke various commands.

   The global (default) tool bar contains general commands.  Some major
modes define their own tool bars; whenever a buffer with such a major
mode is current, the mode’s tool bar replaces the global tool bar.

   To toggle the use of tool bars, type ‘M-x tool-bar-mode’.  This
command applies to all frames, including frames yet to be created.  To
control the use of tool bars at startup, customize the variable
‘tool-bar-mode’.

   When Emacs is compiled with GTK+ support, each tool bar item can
consist of an image, or a text label, or both.  By default, Emacs
follows the Gnome desktop’s tool bar style setting; if none is defined,
it displays tool bar items as just images.  To impose a specific tool
bar style, customize the variable ‘tool-bar-style’.

   You can also control the placement of the tool bar for the GTK+ tool
bar with the frame parameter ‘tool-bar-position’.  *Note (elisp)Frame
Parameters::.

   NS builds consider the tool bar to be a window decoration, and
therefore do not display it when a window is undecorated.  *Note
(elisp)Frame Parameters::.  On macOS the tool bar is hidden when the
frame is put into fullscreen, but can be displayed by moving the mouse
pointer to the top of the screen.


File: emacs.info,  Node: Tab Bars,  Next: Dialog Boxes,  Prev: Tool Bars,  Up: Frames

22.17 Tab Bars
==============

On graphical displays and on text terminals, Emacs can optionally
display a “Tab Bar” at the top of each frame, just below the menu bar
(*note Menu Bars::) and above or below the tool bar (*note Tool Bars::)
depending on the variable ‘tab-bar-position’.  The Tab Bar is a row of
“tabs”—buttons that you can click to switch between window
configurations.

   Each tab on the Tab Bar represents a named persistent window
configuration of its frame, i.e., how that frame is partitioned into
windows and which buffer is displayed in each window.  The tab’s name is
composed from the list of names of buffers shown in windows of that
window configuration.  Clicking on the tab switches to the window
configuration recorded by the tab; it is a configuration of windows and
buffers which was previously used in the frame when that tab was the
current tab.

   If you are using the desktop library to save and restore your
sessions (*note Saving Emacs Sessions::), the tabs from the Tab Bar are
recorded in the desktop file, together with their associated window
configurations, and will be available after restoring the session.

   Note that the Tab Bar is different from the Tab Line (*note Tab
Line::).  Whereas tabs on the Tab Line at the top of each window are
used to switch between buffers in the window, tabs on the Tab Bar at the
top of each frame are used to switch between window configurations
containing several windows showing one or more buffers.

   To toggle the use of Tab Bars, type ‘M-x tab-bar-mode’.  This command
applies to all frames, including frames yet to be created.  To control
the use of tab bars at startup, customize the variable ‘tab-bar-mode’
and save your customization.

   The variable ‘tab-bar-show’ controls whether the Tab Bar mode is
turned on automatically.  If the value is ‘t’, then ‘tab-bar-mode’ is
enabled when using the commands that create new tabs.  The value ‘1’
hides the tab bar when it has only one tab, and shows it again when more
tabs are created.  More generally, a value that is a non-negative
integer causes the Tab Bar to be displayed only if the number of tabs is
greater than that integer.  The value ‘nil’ always keeps the Tab Bar
hidden; in this case it’s still possible to switch between named window
configurations without displaying the Tab Bar by using ‘M-x tab-next’,
‘M-x tab-switcher’, and other commands that provide completion on tab
names.  Also it’s possible to create and close tabs without the Tab Bar
by using commands ‘M-x tab-new’, ‘M-x tab-close’, etc.

   Note that a numerical value of ‘tab-bar-show’ can cause the Tab Bar
to be displayed on some frames, but not on others, depending on the
number of tabs created on each frame.

   To toggle the use of the Tab Bar only on the selected frame, type
‘M-x toggle-frame-tab-bar’.  This command allows to enable the display
of the Tab Bar on some frames and disable it on others, regardless of
the values of ‘tab-bar-mode’ and ‘tab-bar-show’.

   The prefix key ‘C-x t’ is analogous to ‘C-x 5’.  Whereas each ‘C-x 5’
command pops up a buffer in a different frame (*note Creating Frames::),
the ‘C-x t’ commands use a different tab with a different window
configuration in the selected frame.

   The various ‘C-x t’ commands differ in how they find or create the
buffer to select.  The following commands can be used to select a buffer
in a new tab:

‘C-x t 2’
     Add a new tab (‘tab-new’).  You can control the choice of the
     buffer displayed in a new tab by customizing the variable
     ‘tab-bar-new-tab-choice’.  You can control the names given by
     default to new tabs by customizing the variable
     ‘tab-bar-tab-name-function’.

‘C-x t b BUFNAME <RET>’
     Select buffer BUFNAME in another tab.  This runs
     ‘switch-to-buffer-other-tab’.

‘C-x t f FILENAME <RET>’
     Visit the file FILENAME (*note Visiting::) and select its buffer in
     another tab.  This runs ‘find-file-other-tab’.

‘C-x t d DIRECTORY <RET>’
     Edit the specified DIRECTORY (*note Dired::) in another tab.  This
     runs ‘dired-other-tab’.

‘C-x t t’
     This is a prefix command (‘other-tab-prefix’) that affects the next
     command invoked immediately after this prefix command.  It requests
     the buffer displayed by the next command to be shown in another
     tab.

   By default, a new tab starts with the buffer that was current before
calling the command that adds a new tab.  To start a new tab with other
buffers, customize the variable ‘tab-bar-new-tab-choice’.

   The variable ‘tab-bar-new-tab-to’ defines where to place a new tab.
By default, a new tab is added on the right side of the current tab.

   The following commands can be used to delete tabs:

‘C-x t 0’
     Close the selected tab (‘tab-close’).  This has no effect if there
     is only one tab, unless the variable
     ‘tab-bar-close-last-tab-choice’ is customized to a non-default
     value.

‘C-x t 1’
     Close all tabs, except the selected tab, on the selected frame.

   The variable ‘tab-bar-close-tab-select’ defines what tab to select
after closing the current tab.  By default, it selects a recently used
tab.

   The command ‘tab-undo’ restores the last closed tab.

   The following commands can be used to switch between tabs:

‘C-x t o’
‘C-<TAB>’
     Switch to the next tab (‘tab-next’).  If you repeat this command,
     it cycles through all the tabs on the selected frame.  With a
     positive numeric argument N, it switches to the Nth next tab; with
     a negative argument −N, it switches back to the Nth previous tab.

‘S-C-<TAB>’
     Switch to the previous tab (‘tab-previous’).  With a positive
     numeric argument N, it switches to the Nth previous tab; with a
     negative argument −N, it switches to the Nth next tab.

‘C-x t <RET> TABNAME <RET>’
     Switch to the tab by its name (‘tab-switch’), with completion on
     all tab names.  The default value and the “future history” of tab
     names is sorted by recency, so you can use ‘M-n’
     (‘next-history-element’) to get the name of the last visited tab,
     the second last, and so on.

‘MODIFIER-TAB-NUMBER’
     Switch to the tab by its number TAB-NUMBER (‘tab-select’).  After
     customizing the variable ‘tab-bar-select-tab-modifiers’ to specify
     one or more MODIFIER keys, you can select a tab by its ordinal
     number using one of the specified modifiers in combination with the
     tab number to select.  The number 9 can be used to select the last
     tab.  You can select any modifiers supported by Emacs, *note
     Modifier Keys::.  To display the tab number alongside the tab name,
     you can customize another variable ‘tab-bar-tab-hints’.  This will
     help you decide which numerical key to press to select the tab by
     its number.

‘MODIFIER-9’
     Switch to the last tab (‘tab-last’).  The key combination is the
     modifier key defined by ‘tab-bar-select-tab-modifiers’ and the key
     ‘9’.  With a numeric argument N, switch to the Nth last tab.

‘MODIFIER-0’
     Switch to the recent tab (‘tab-recent’).  The key combination is
     the modifier key defined by ‘tab-bar-select-tab-modifiers’ and the
     key ‘0’.  With a numeric argument N, switch to the Nth recent tab.

   The following commands can be used to operate on tabs:

‘C-x t r TABNAME <RET>’
     Rename the current tab to TABNAME (‘tab-rename’).

‘C-x t m’
     Move the current tab one position to the right (‘tab-move’).  With
     a positive numeric argument N, move it that many positions to the
     right; with a negative argument −N, move it N positions to the
     left.

   You can use the mouse to operate on tabs.  Clicking ‘mouse-2’ closes
the tab.  Clicking ‘mouse-3’ pops up the context menu with the items
that operate on the clicked tab.  Dragging the tab with ‘mouse-1’ moves
it to another position on the tab bar.  Mouse wheel scrolling switches
to the next or previous tab.  Holding down the <SHIFT> key during
scrolling moves the tab to the left or right.

   You can enable ‘tab-bar-history-mode’ to remember window
configurations used in every tab, and later restore them.

‘M-x tab-bar-history-back’
     Restore a previous window configuration used in the current tab.
     This navigates back in the history of window configurations.

‘M-x tab-bar-history-forward’
     Cancel restoration of the previous window configuration.  This
     moves forward in the history of window configurations.

   It’s possible to customize the items displayed on the tab bar by the
user option ‘tab-bar-format’.


File: emacs.info,  Node: Dialog Boxes,  Next: Tooltips,  Prev: Tab Bars,  Up: Frames

22.18 Using Dialog Boxes
========================

A dialog box is a special kind of menu for asking you a yes-or-no
question or some other special question.  Many Emacs commands use a
dialog box to ask a yes-or-no question, if you used the mouse to invoke
the command that led to the question.

   To disable the use of dialog boxes, change the variable
‘use-dialog-box’ to ‘nil’.  In that case, Emacs always performs
yes-or-no prompts using the echo area and keyboard input.  This variable
also controls whether to use file selection windows (but those are not
supported on all platforms).

   A file selection window is a special kind of dialog box for asking
for file names.  You can customize the variable ‘use-file-dialog’ to
suppress the use of file selection windows, even if you still want other
kinds of dialogs.  This variable has no effect if you have suppressed
all dialog boxes with the variable ‘use-dialog-box’.

   When Emacs is compiled with GTK+ support, it uses the GTK+ file
chooser dialog.  Emacs adds an additional toggle button to this dialog,
which you can use to enable or disable the display of hidden files
(files starting with a dot) in that dialog.  If you want this toggle to
be activated by default, change the variable ‘x-gtk-show-hidden-files’
to ‘t’.  In addition, Emacs adds help text to the GTK+ file chooser
dialog; to disable this help text, change the variable
‘x-gtk-file-dialog-help-text’ to ‘nil’.


File: emacs.info,  Node: Tooltips,  Next: Mouse Avoidance,  Prev: Dialog Boxes,  Up: Frames

22.19 Tooltips
==============

“Tooltips” are small special frames that display text information at the
current mouse position.  They activate when there is a pause in mouse
movement over some significant piece of text in a window, or the mode
line, or some other part of the Emacs frame such as a tool bar button or
menu item.

   You can toggle the use of tooltips with the command ‘M-x
tooltip-mode’.  When Tooltip mode is disabled, the help text is
displayed in the echo area instead.  To control the use of tooltips at
startup, customize the variable ‘tooltip-mode’.

   The following variables provide customization options for tooltip
display:

‘tooltip-delay’
     This variable specifies how long Emacs should wait before
     displaying the first tooltip.  The value is in seconds.

‘tooltip-short-delay’
     This variable specifies how long Emacs should wait before
     displaying subsequent tooltips on different items, having already
     displayed the first tooltip.  The value is in seconds.

‘tooltip-hide-delay’
     The number of seconds since displaying a tooltip to hide it, if the
     mouse doesn’t move.

‘tooltip-x-offset’
‘tooltip-y-offset’
     The X and Y offsets, in pixels, of the left top corner of the
     tooltip from the mouse pointer position.  Note that these are
     ignored if ‘tooltip-frame-parameters’ was customized to include,
     respectively, the ‘left’ and ‘top’ parameters.  The values of the
     offsets should be chosen so that the tooltip doesn’t cover the
     mouse pointer’s hot spot, or it might interfere with clicking the
     mouse.

‘tooltip-frame-parameters’
     The frame parameters used for displaying tooltips.  *Note
     (elisp)Frame Parameters::, and also *note (elisp)Tooltips::.

   For additional customization options for displaying tooltips, use
‘M-x customize-group <RET> tooltip <RET>’.

   If Emacs is built with the GTK+ toolkit, Nextstep windowing, or Haiku
windowing support, it displays tooltips via the toolkit, using the
default appearance of the toolkit’s tooltips.(1)  To disable this,
change the variable ‘use-system-tooltips’ to ‘nil’.  If you do this, or
if Emacs is built without the appropriate windowing support, most
attributes of the tooltip text are specified by the ‘tooltip’ face, and
by X resources (*note X Resources::).

   “GUD tooltips” are special tooltips that show the values of variables
when debugging a program with GUD.  *Note Debugger Operation::.

   ---------- Footnotes ----------

   (1) The foreground and background colors of toolkit-created tooltips
on Nextstep can also be customized by setting the ‘foreground’ and
‘background’ frame parameters that are part of
‘tooltip-frame-parameters’.


File: emacs.info,  Node: Mouse Avoidance,  Next: Non-Window Terminals,  Prev: Tooltips,  Up: Frames

22.20 Mouse Avoidance
=====================

On graphical terminals, the mouse pointer may obscure the text in the
Emacs frame.  Emacs provides two methods to avoid this problem.

   Firstly, Emacs hides the mouse pointer each time you type a
self-inserting character, if the pointer lies inside an Emacs frame;
moving the mouse pointer makes it visible again.  To disable this
feature, set the variable ‘make-pointer-invisible’ to ‘nil’.  *Note
Display Custom::.

   Secondly, you can use Mouse Avoidance mode, a minor mode, to keep the
mouse pointer away from point.  To use Mouse Avoidance mode, customize
the variable ‘mouse-avoidance-mode’.  You can set this to various values
to move the mouse in several ways:

‘banish’
     Move the pointer to a corner of the frame on any key-press.  You
     can customize the variable ‘mouse-avoidance-banish-position’ to
     specify where the pointer goes when it is banished.
‘exile’
     Banish the pointer only if the cursor gets too close, and allow it
     to return once the cursor is out of the way.
‘jump’
     If the cursor gets too close to the pointer, displace the pointer
     by a random distance and direction.
‘animate’
     As ‘jump’, but shows steps along the way for illusion of motion.
‘cat-and-mouse’
     The same as ‘animate’.
‘proteus’
     As ‘animate’, but changes the shape of the mouse pointer too.

   You can also use the command ‘M-x mouse-avoidance-mode’ to enable the
mode.  Whenever Mouse Avoidance mode moves the mouse, it also raises the
frame.


File: emacs.info,  Node: Non-Window Terminals,  Next: Text-Only Mouse,  Prev: Mouse Avoidance,  Up: Frames

22.21 Non-Window Terminals
==========================

On a text terminal, Emacs can display only one Emacs frame at a time.
However, you can still create multiple Emacs frames, and switch between
them.  Switching frames on these terminals is much like switching
between different window configurations.

   Use ‘C-x 5 2’ to create a new frame and switch to it; use ‘C-x 5 o’
to cycle through the existing frames; use ‘C-x 5 0’ to delete the
current frame.

   Each frame has a number to distinguish it.  If your terminal can
display only one frame at a time, the selected frame’s number N appears
near the beginning of the mode line, in the form ‘FN’.

   ‘FN’ is in fact the frame’s initial name.  You can give frames more
meaningful names if you wish, and you can select a frame by its name.
Use the command ‘M-x set-frame-name <RET> NAME <RET>’ to specify a new
name for the selected frame, and use ‘M-x select-frame-by-name <RET>
NAME <RET>’ to select a frame according to its name.  The name you
specify appears in the mode line when the frame is selected.


File: emacs.info,  Node: Text-Only Mouse,  Prev: Non-Window Terminals,  Up: Frames

22.22 Using a Mouse in Text Terminals
=====================================

Some text terminals support mouse clicks in the terminal window.

   In a terminal emulator which is compatible with ‘xterm’, you can use
‘M-x xterm-mouse-mode’ to give Emacs control over simple uses of the
mouse—basically, only non-modified single clicks are supported.  Newer
versions of ‘xterm’ also support mouse-tracking.  The normal ‘xterm’
mouse functionality for such clicks is still available by holding down
the <SHIFT> key when you press the mouse button.  Xterm Mouse mode is a
global minor mode (*note Minor Modes::).  Repeating the command turns
the mode off again.

   In the console on GNU/Linux, you can use ‘M-x gpm-mouse-mode’ to
enable mouse support.  You must have the gpm server installed and
running on your system in order for this to work.  Note that when this
mode is enabled, you cannot use the mouse to transfer text between Emacs
and other programs which use GPM.  This is due to limitations in GPM and
the Linux kernel.

   *Note MS-DOS Mouse::, for information about mouse support on MS-DOS.


File: emacs.info,  Node: International,  Next: Modes,  Prev: Frames,  Up: Top

# /. 23 International Character Set Support
******************************************

Emacs supports a wide variety of international character sets, including
European and Vietnamese variants of the Latin alphabet, as well as
Arabic scripts, Brahmic scripts (for languages such as Bengali, Hindi,
and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han (for Chinese and
Japanese), Hangul (for Korean), Hebrew and IPA.  Emacs also supports
various encodings of these characters that are used by other
internationalized software, such as word processors and mailers.

   Emacs allows editing text with international characters by supporting
all the related activities:

   • You can visit files with non-ASCII characters, save non-ASCII text,
     and pass non-ASCII text between Emacs and programs it invokes (such
     as compilers, spell-checkers, and mailers).  Setting your language
     environment (*note Language Environments::) takes care of setting
     up the coding systems and other options for a specific language or
     culture.  Alternatively, you can specify how Emacs should encode or
     decode text for each command; see *note Text Coding::.

   • You can display non-ASCII characters encoded by the various
     scripts.  This works by using appropriate fonts on graphics
     displays (*note Defining Fontsets::), and by sending special codes
     to text displays (*note Terminal Coding::).  If some characters are
     displayed incorrectly, refer to *note Undisplayable Characters::,
     which describes possible problems and explains how to solve them.

   • Characters from scripts whose natural ordering of text is from
     right to left are reordered for display (*note Bidirectional
     Editing::).  These scripts include Arabic, Hebrew, Syriac, Thaana,
     and a few others.

   • You can insert non-ASCII characters or search for them.  To do
     that, you can specify an Emacs input method (*note Select Input
     Method::) suitable for your language, or use the default input
     method set up when you choose your language environment.  If your
     keyboard can produce non-ASCII characters, you can select an
     appropriate keyboard coding system (*note Terminal Coding::), and
     Emacs will accept those characters.  On graphical displays, modern
     systems typically provide their native input methods, and Latin-1
     characters can also be input by using the ‘C-x 8’ prefix, see *note
     Unibyte Mode::.

     With the X Window System, your locale should be set to an
     appropriate value to make sure Emacs interprets keyboard input
     correctly; see *note locales: Language Environments, and *note X
     Coding::.

   The rest of this chapter describes these issues in detail.

* Menu:

* International Chars::     Basic concepts of multibyte characters.
* Language Environments::   Setting things up for the language you use.
* Input Methods::           Entering text characters not on your keyboard.
* Select Input Method::     Specifying your choice of input methods.
* Coding Systems::          Character set conversion when you read and
                              write files, and so on.
* Recognize Coding::        How Emacs figures out which conversion to use.
* Specify Coding::          Specifying a file’s coding system explicitly.
* Output Coding::           Choosing coding systems for output.
* Text Coding::             Choosing conversion to use for file text.
* Communication Coding::    Coding systems for interprocess communication.
* File Name Coding::        Coding systems for file _names_.
* X Coding::                Coding systems for X input methods.
* Terminal Coding::         Specifying coding systems for converting
                              terminal input and output.
* Fontsets::                Fontsets are collections of fonts
                              that cover the whole spectrum of characters.
* Defining Fontsets::       Defining a new fontset.
* Modifying Fontsets::      Modifying an existing fontset.
* Undisplayable Characters:: When characters don’t display.
* Unibyte Mode::            You can pick one European character set
                              to use without multibyte characters.
* Charsets::                How Emacs groups its internal character codes.
* Bidirectional Editing::   Support for right-to-left scripts.


File: emacs.info,  Node: International Chars,  Next: Language Environments,  Up: International

23.1 Introduction to International Character Sets
=================================================

The users of international character sets and scripts have established
many more-or-less standard coding systems for storing files.  These
coding systems are typically “multibyte”, meaning that sequences of two
or more bytes are used to represent individual non-ASCII characters.

   Internally, Emacs uses its own multibyte character encoding, which is
a superset of the “Unicode” standard.  This internal encoding allows
characters from almost every known script to be intermixed in a single
buffer or string.  Emacs translates between the multibyte character
encoding and various other coding systems when reading and writing
files, and when exchanging data with subprocesses.

   The command ‘C-h h’ (‘view-hello-file’) displays the file
‘etc/HELLO’, which illustrates various scripts by showing how to say
“hello” in many languages.  If some characters can’t be displayed on
your terminal, they appear as ‘?’ or as hollow boxes (*note
Undisplayable Characters::).

   Keyboards, even in the countries where these character sets are used,
generally don’t have keys for all the characters in them.  You can
insert characters that your keyboard does not support, using ‘C-x 8
<RET>’ (‘insert-char’).  *Note Inserting Text::.  Shorthands are
available for some common characters; for example, you can insert a left
single quotation mark ‘ by typing ‘C-x 8 [’, or in Electric Quote mode,
usually by simply typing ‘`’.  *Note Quotation Marks::.  Emacs also
supports various “input methods”, typically one for each script or
language, which make it easier to type characters in the script.  *Note
Input Methods::.

   The prefix key ‘C-x <RET>’ is used for commands that pertain to
multibyte characters, coding systems, and input methods.

   The command ‘C-x =’ (‘what-cursor-position’) shows information about
the character at point.  In addition to the character position, which
was described in *note Position Info::, this command displays how the
character is encoded.  For instance, it displays the following line in
the echo area for the character ‘c’:

     Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53

   The four values after ‘Char:’ describe the character that follows
point, first by showing it and then by giving its character code in
decimal, octal and hex.  For a non-ASCII multibyte character, these are
followed by ‘file’ and the character’s representation, in hex, in the
buffer’s coding system, if that coding system encodes the character
safely and with a single byte (*note Coding Systems::).  If the
character’s encoding is longer than one byte, Emacs shows ‘file ...’.

   On rare occasions, Emacs encounters “raw bytes”: single bytes whose
values are in the range 128 (0200 octal) through 255 (0377 octal), which
Emacs cannot interpret as part of a known encoding of some non-ASCII
character.  Such raw bytes are treated as if they belonged to a special
character set ‘eight-bit’; Emacs displays them as escaped octal codes
(this can be customized; *note Display Custom::).  In this case, ‘C-x =’
shows ‘raw-byte’ instead of ‘file’.  In addition, ‘C-x =’ shows the
character codes of raw bytes as if they were in the range
‘#x3FFF80..#x3FFFFF’, which is where Emacs maps them to distinguish them
from Unicode characters in the range ‘#x0080..#x00FF’.

   With a prefix argument (‘C-u C-x =’), this command additionally calls
the command ‘describe-char’, which displays a detailed description of
the character:

   • The character set name, and the codes that identify the character
     within that character set; ASCII characters are identified as
     belonging to the ‘ascii’ character set.

   • The character’s script, syntax and categories.

   • What keys to type to input the character in the current input
     method (if it supports the character).

   • The character’s encodings, both internally in the buffer, and
     externally if you were to save the buffer to a file.

   • If you are running Emacs on a graphical display, the font name and
     glyph code for the character.  If you are running Emacs on a text
     terminal, the code(s) sent to the terminal.

   • If the character was composed on display with any following
     characters to form one or more grapheme clusters, the composition
     information: the font glyphs if the frame is on a graphical
     display, and the characters that were composed.

   • The character’s text properties (*note (elisp)Text Properties::),
     including any non-default faces used to display the character, and
     any overlays containing it (*note (elisp)Overlays::).

   Here’s an example, with some lines folded to fit into this manual:

                  position: 1 of 1 (0%), column: 0
                 character: ê (displayed as ê) (codepoint 234, #o352, #xea)
         preferred charset: unicode (Unicode (ISO10646))
     code point in charset: 0xEA
                    script: latin
                    syntax: w        which means: word
                  category: .:Base, L:Left-to-right (strong), c:Chinese,
                            j:Japanese, l:Latin, v:Viet
                  to input: type "C-x 8 RET ea" or
                            "C-x 8 RET LATIN SMALL LETTER E WITH CIRCUMFLEX"
               buffer code: #xC3 #xAA
                 file code: #xC3 #xAA (encoded by coding system utf-8-unix)
                   display: by this font (glyph code)
         xft:-PfEd-DejaVu Sans Mono-normal-normal-
             normal-*-15-*-*-*-m-0-iso10646-1 (#xAC)

     Character code properties: customize what to show
       name: LATIN SMALL LETTER E WITH CIRCUMFLEX
       old-name: LATIN SMALL LETTER E CIRCUMFLEX
       general-category: Ll (Letter, Lowercase)
       decomposition: (101 770) ('e' '^')


File: emacs.info,  Node: Language Environments,  Next: Input Methods,  Prev: International Chars,  Up: International

23.2 Language Environments
==========================

All supported character sets are supported in Emacs buffers whenever
multibyte characters are enabled; there is no need to select a
particular language in order to display its characters.  However, it is
important to select a “language environment” in order to set various
defaults.  Roughly speaking, the language environment represents a
choice of preferred script rather than a choice of language.

   The language environment controls which coding systems to recognize
when reading text (*note Recognize Coding::).  This applies to files,
incoming mail, and any other text you read into Emacs.  It may also
specify the default coding system to use when you create a file.  Each
language environment also specifies a default input method.

   To select a language environment, customize
‘current-language-environment’ or use the command ‘M-x
set-language-environment’.  It makes no difference which buffer is
current when you use this command, because the effects apply globally to
the Emacs session.  See the variable ‘language-info-alist’ for the list
of supported language environments, and use the command ‘C-h L LANG-ENV
<RET>’ (‘describe-language-environment’) for more information about the
language environment LANG-ENV.  Supported language environments include:

     ASCII, Arabic, Belarusian, Bengali, Brazilian Portuguese,
     Bulgarian, Burmese, Cham, Chinese-BIG5, Chinese-CNS,
     Chinese-EUC-TW, Chinese-GB, Chinese-GB18030, Chinese-GBK, Croatian,
     Cyrillic-ALT, Cyrillic-ISO, Cyrillic-KOI8, Czech, Devanagari,
     Dutch, English, Esperanto, Ethiopic, French, Georgian, German,
     Greek, Gujarati, Hebrew, IPA, Italian, Japanese, Kannada, Khmer,
     Korean, Lao, Latin-1, Latin-2, Latin-3, Latin-4, Latin-5, Latin-6,
     Latin-7, Latin-8, Latin-9, Latvian, Lithuanian, Malayalam, Oriya,
     Persian, Polish, Punjabi, Romanian, Russian, Sinhala, Slovak,
     Slovenian, Spanish, Swedish, TaiViet, Tajik, Tamil, Telugu, Thai,
     Tibetan, Turkish, UTF-8, Ukrainian, Vietnamese, Welsh, and
     Windows-1255.

   To display the script(s) used by your language environment on a
graphical display, you need to have suitable fonts.  *Note Fontsets::,
for more details about setting up your fonts.

   Some operating systems let you specify the character-set locale you
are using by setting the locale environment variables ‘LC_ALL’,
‘LC_CTYPE’, or ‘LANG’.  (If more than one of these is set, the first one
that is nonempty specifies your locale for this purpose.)  During
startup, Emacs looks up your character-set locale’s name in the system
locale alias table, matches its canonical name against entries in the
value of the variables ‘locale-charset-language-names’ and
‘locale-language-names’ (the former overrides the latter), and selects
the corresponding language environment if a match is found.  It also
adjusts the display table and terminal coding system, the locale coding
system, the preferred coding system as needed for the locale, and—last
but not least—the way Emacs decodes non-ASCII characters sent by your
keyboard.

   If you modify the ‘LC_ALL’, ‘LC_CTYPE’, or ‘LANG’ environment
variables while running Emacs (by using ‘M-x setenv’), you may want to
invoke the ‘set-locale-environment’ command afterwards to readjust the
language environment from the new locale.

   The ‘set-locale-environment’ function normally uses the preferred
coding system established by the language environment to decode system
messages.  But if your locale matches an entry in the variable
‘locale-preferred-coding-systems’, Emacs uses the corresponding coding
system instead.  For example, if the locale ‘ja_JP.PCK’ matches
‘japanese-shift-jis’ in ‘locale-preferred-coding-systems’, Emacs uses
that encoding even though it might normally use ‘utf-8’.

   You can override the language environment chosen at startup with
explicit use of the command ‘set-language-environment’, or with
customization of ‘current-language-environment’ in your init file.

   To display information about the effects of a certain language
environment LANG-ENV, use the command ‘C-h L LANG-ENV <RET>’
(‘describe-language-environment’).  This tells you which languages this
language environment is useful for, and lists the character sets, coding
systems, and input methods that go with it.  It also shows some sample
text to illustrate scripts used in this language environment.  If you
give an empty input for LANG-ENV, this command describes the chosen
language environment.

   You can customize any language environment with the normal hook
‘set-language-environment-hook’.  The command ‘set-language-environment’
runs that hook after setting up the new language environment.  The hook
functions can test for a specific language environment by checking the
variable ‘current-language-environment’.  This hook is where you should
put non-default settings for specific language environments, such as
coding systems for keyboard input and terminal output, the default input
method, etc.

   Before it starts to set up the new language environment,
‘set-language-environment’ first runs the hook
‘exit-language-environment-hook’.  This hook is useful for undoing
customizations that were made with ‘set-language-environment-hook’.  For
instance, if you set up a special key binding in a specific language
environment using ‘set-language-environment-hook’, you should set up
‘exit-language-environment-hook’ to restore the normal binding for that
key.


File: emacs.info,  Node: Input Methods,  Next: Select Input Method,  Prev: Language Environments,  Up: International

23.3 Input Methods
==================

An “input method” is a kind of character conversion designed
specifically for interactive input.  This section describes input
methods that come with Emacs; for native input methods provided by the
underlying OS, *note Unibyte Mode::.

   In Emacs, typically each language has its own input method; sometimes
several languages that use the same characters can share one input
method.  A few languages support several input methods.

   The simplest kind of input method works by mapping ASCII letters into
another alphabet; this allows you to use one other alphabet instead of
ASCII.  The Greek and Russian input methods work this way.

   A more powerful technique is composition: converting sequences of
characters into one letter.  Many European input methods use composition
to produce a single non-ASCII letter from a sequence that consists of a
letter followed by accent characters (or vice versa).  For example, some
methods convert the sequence ‘o ^’ into a single accented letter.  These
input methods have no special commands of their own; all they do is
compose sequences of printing characters.

   The input methods for syllabic scripts typically use mapping followed
by composition.  The input methods for Thai and Korean work this way.
First, letters are mapped into symbols for particular sounds or tone
marks; then, sequences of these that make up a whole syllable are mapped
into one syllable sign.

   Chinese and Japanese require more complex methods.  In Chinese input
methods, first you enter the phonetic spelling of a Chinese word (in
input method ‘chinese-py’, among others), or a sequence of portions of
the character (input methods ‘chinese-4corner’ and ‘chinese-sw’, and
others).  One input sequence typically corresponds to many possible
Chinese characters.  You select the one you mean using keys such as
‘C-f’, ‘C-b’, ‘C-n’, ‘C-p’ (or the arrow keys), and digits, which have
special meanings in this situation.

   The possible characters are conceptually arranged in several rows,
with each row holding up to 10 alternatives.  Normally, Emacs displays
just one row at a time, in the echo area; ‘(I/J)’ appears at the
beginning, to indicate that this is the Ith row out of a total of J
rows.  Type ‘C-n’ or ‘C-p’ to display the next row or the previous row.

   Type ‘C-f’ and ‘C-b’ to move forward and backward among the
alternatives in the current row.  As you do this, Emacs highlights the
current alternative with a special color; type ‘C-<SPC>’ to select the
current alternative and use it as input.  The alternatives in the row
are also numbered; the number appears before the alternative.  Typing a
number selects the associated alternative of the current row and uses it
as input.

   <TAB> in these Chinese input methods displays a buffer showing all
the possible characters at once; then clicking ‘mouse-2’ on one of them
selects that alternative.  The keys ‘C-f’, ‘C-b’, ‘C-n’, ‘C-p’, and
digits continue to work as usual, but they do the highlighting in the
buffer showing the possible characters, rather than in the echo area.

   To enter characters according to the “pīnyīn” transliteration method
instead, use the ‘chinese-sisheng’ input method.  This is a composition
based method, where e.g.  ‘pi1’ results in ‘pī’.

   In Japanese input methods, first you input a whole word using
phonetic spelling; then, after the word is in the buffer, Emacs converts
it into one or more characters using a large dictionary.  One phonetic
spelling corresponds to a number of different Japanese words; to select
one of them, use ‘C-n’ and ‘C-p’ to cycle through the alternatives.

   Sometimes it is useful to cut off input method processing so that the
characters you have just entered will not combine with subsequent
characters.  For example, in input method ‘latin-1-postfix’, the
sequence ‘o ^’ combines to form an ‘o’ with an accent.  What if you want
to enter them as separate characters?

   One way is to type the accent twice; this is a special feature for
entering the separate letter and accent.  For example, ‘o ^ ^’ gives you
the two characters ‘o^’.  Another way is to type another letter after
the ‘o’—something that won’t combine with that—and immediately delete
it.  For example, you could type ‘o o <DEL> ^’ to get separate ‘o’ and
‘^’.  Another method, more general but not quite as easy to type, is to
use ‘C-\ C-\’ between two characters to stop them from combining.  This
is the command ‘C-\’ (‘toggle-input-method’) used twice.  *Note Select
Input Method::.

   ‘C-\ C-\’ is especially useful inside an incremental search, because
it stops waiting for more characters to combine, and starts searching
for what you have already entered.

   To find out how to input the character after point using the current
input method, type ‘C-u C-x =’.  *Note Position Info::.

   The variables ‘input-method-highlight-flag’ and
‘input-method-verbose-flag’ control how input methods explain what is
happening.  If ‘input-method-highlight-flag’ is non-‘nil’, the partial
sequence is highlighted in the buffer (for most input methods—some
disable this feature).  If ‘input-method-verbose-flag’ is non-‘nil’, the
list of possible characters to type next is displayed in the echo area
(but not when you are in the minibuffer).

   You can modify how an input method works by making your changes in a
function that you add to the hook variable ‘quail-activate-hook’.  *Note
Hooks::.  For example, you can redefine some of the input method’s keys
by defining key bindings in the keymap returned by the function
‘quail-translation-keymap’, using ‘define-key’.  *Note Init Rebinding::.

   Input methods are inhibited when the text in the buffer is read-only
for some reason.  This is so single-character key bindings work in modes
that make buffer text or parts of it read-only, such as ‘read-only-mode’
and ‘image-mode’, even when an input method is active.

   Another facility for typing characters not on your keyboard is by
using ‘C-x 8 <RET>’ (‘insert-char’) to insert a single character based
on its Unicode name or code-point; see *note Inserting Text::.

   There are specialized commands for inserting Emoji, and these can be
found on the ‘C-x 8 e’ keymap.  ‘C-x 8 e e’ (‘emoji-insert’) will let
you navigate through different Emoji categories and then choose one.
‘C-x 8 e l’ (‘emoji-list’) will pop up a new buffer and list all the
Emoji; clicking (or using ‘RET’) on an emoji character will insert it in
the current buffer.  Finally, ‘C-x 8 e s’ (‘emoji-search’) will allow
you to search for Emoji based on their names.

   ‘describe-char’ displays a lot of information about the
character/glyphs under point (including emojis).  It’s sometimes useful
to get a quick description of the name, and you can use the ‘C-x 8 e d’
(‘emoji-describe’) command to do that.  It’s meant primarily to help
distinguish between different Emoji variants (which can look very
similar), but it will also tell you the names of non-Emoji characters.


File: emacs.info,  Node: Select Input Method,  Next: Coding Systems,  Prev: Input Methods,  Up: International

23.4 Selecting an Input Method
==============================

‘C-\’
     Enable or disable use of the selected input method
     (‘toggle-input-method’).

‘C-x <RET> C-\ METHOD <RET>’
     Select a new input method for the current buffer
     (‘set-input-method’).

‘C-x \ METHOD <RET>’
     Temporarily enable the selected transient input method ; it will be
     automatically disabled after inserting a single character
     (‘activate-transient-input-method’).

‘C-h I METHOD <RET>’
‘C-h C-\ METHOD <RET>’
     Describe the input method METHOD (‘describe-input-method’).  By
     default, it describes the current input method (if any).  This
     description should give you the full details of how to use any
     particular input method.

‘M-x list-input-methods’
     Display a list of all the supported input methods.

   To choose an input method for the current buffer, use ‘C-x <RET> C-\’
(‘set-input-method’).  This command reads the input method name from the
minibuffer; the name normally starts with the language environment that
it is meant to be used with.  The variable ‘current-input-method’
records which input method is selected.

   Input methods use various sequences of ASCII characters to stand for
non-ASCII characters.  Sometimes it is useful to turn off the input
method temporarily.  To do this, type ‘C-\’ (‘toggle-input-method’).  To
reenable the input method, type ‘C-\’ again.

   If you type ‘C-\’ and you have not yet selected an input method, it
prompts you to specify one.  This has the same effect as using ‘C-x
<RET> C-\’ to specify an input method.

   When invoked with a numeric argument, as in ‘C-u C-\’,
‘toggle-input-method’ always prompts you for an input method, suggesting
the most recently selected one as the default.

   Selecting a language environment specifies a default input method for
use in various buffers.  When you have a default input method, you can
select it in the current buffer by typing ‘C-\’.  The variable
‘default-input-method’ specifies the default input method (‘nil’ means
there is none).

   In some language environments, which support several different input
methods, you might want to use an input method different from the
default chosen by ‘set-language-environment’.  You can instruct Emacs to
select a different default input method for a certain language
environment, if you wish, by using ‘set-language-environment-hook’
(*note set-language-environment-hook: Language Environments.).  For
example:

     (defun my-chinese-setup ()
       "Set up my private Chinese environment."
       (if (equal current-language-environment "Chinese-GB")
           (setq default-input-method "chinese-tonepy")))
     (add-hook 'set-language-environment-hook 'my-chinese-setup)

This sets the default input method to be ‘chinese-tonepy’ whenever you
choose a Chinese-GB language environment.

   You can instruct Emacs to activate a certain input method
automatically.  For example:

     (add-hook 'text-mode-hook
       (lambda () (set-input-method "german-prefix")))

This automatically activates the input method ‘german-prefix’ in Text
mode.

   Some input methods for alphabetic scripts work by (in effect)
remapping the keyboard to emulate various keyboard layouts commonly used
for those scripts.  How to do this remapping properly depends on your
actual keyboard layout.  To specify which layout your keyboard has, use
the command ‘M-x quail-set-keyboard-layout’.

   You can use the command ‘M-x quail-show-key’ to show what key (or key
sequence) to type in order to input the character following point, using
the selected keyboard layout.  The command ‘C-u C-x =’ also shows that
information, in addition to other information about the character.

   ‘M-x list-input-methods’ displays a list of all the supported input
methods.  The list gives information about each input method, including
the string that stands for it in the mode line.

   Sometimes it can be convenient to enable an input method
“transiently”, for inserting only a single character.  Typing ‘C-x \’
(‘activate-transient-input-method’) will temporarily enable an input
method, let you insert a single character using the input method rules,
and then automatically disable the input method.  If no transient input
method was selected yet, ‘C-x \’ will prompt you for an input method;
subsequent invocations of this command will enable the selected
transient input method.  To select a different transient input method,
type ‘C-u C-x \’.  You can select a transient method that is different
from the input method which you selected using ‘C-u C-\’.


File: emacs.info,  Node: Coding Systems,  Next: Recognize Coding,  Prev: Select Input Method,  Up: International

23.5 Coding Systems
===================

Users of various languages have established many more-or-less standard
coding systems for representing them.  Emacs does not use these coding
systems internally; instead, it converts from various coding systems to
its own system when reading data, and converts the internal coding
system to other coding systems when writing data.  Conversion is
possible in reading or writing files, in sending or receiving from the
terminal, and in exchanging data with subprocesses.

   Emacs assigns a name to each coding system.  Most coding systems are
used for one language, and the name of the coding system starts with the
language name.  Some coding systems are used for several languages;
their names usually start with ‘iso’.  There are also special coding
systems, such as ‘no-conversion’, ‘raw-text’, and ‘emacs-internal’.

   A special class of coding systems, collectively known as “codepages”,
is designed to support text encoded by MS-Windows and MS-DOS software.
The names of these coding systems are ‘cpNNNN’, where NNNN is a 3- or
4-digit number of the codepage.  You can use these encodings just like
any other coding system; for example, to visit a file encoded in
codepage 850, type ‘C-x <RET> c cp850 <RET> C-x C-f FILENAME <RET>’.

   In addition to converting various representations of non-ASCII
characters, a coding system can perform end-of-line conversion.  Emacs
handles three different conventions for how to separate lines in a file:
newline (Unix), carriage return followed by linefeed (DOS), and just
carriage return (Mac).

‘C-h C CODING <RET>’
     Describe coding system CODING (‘describe-coding-system’).

‘C-h C <RET>’
     Describe the coding systems currently in use
     (‘describe-coding-system’).

‘M-x list-coding-systems’
     Display a list of all the supported coding systems.

   The command ‘C-h C’ (‘describe-coding-system’) displays information
about particular coding systems, including the end-of-line conversion
specified by those coding systems.  You can specify a coding system name
as the argument; alternatively, with an empty argument, it describes the
coding systems currently selected for various purposes, both in the
current buffer and as the defaults, and the priority list for
recognizing coding systems (*note Recognize Coding::).

   To display a list of all the supported coding systems, type ‘M-x
list-coding-systems’.  The list gives information about each coding
system, including the letter that stands for it in the mode line (*note
Mode Line::).

   Each of the coding systems that appear in this list—except for
‘no-conversion’, which means no conversion of any kind—specifies how and
whether to convert printing characters, but leaves the choice of
end-of-line conversion to be decided based on the contents of each file.
For example, if the file appears to use the sequence carriage return and
linefeed to separate lines, DOS end-of-line conversion will be used.

   Each of the listed coding systems has three variants, which specify
exactly what to do for end-of-line conversion:

‘...-unix’
     Don’t do any end-of-line conversion; assume the file uses newline
     to separate lines.  (This is the convention normally used on Unix
     and GNU systems, and macOS.)

‘...-dos’
     Assume the file uses carriage return followed by linefeed to
     separate lines, and do the appropriate conversion.  (This is the
     convention normally used on Microsoft systems.(1))

‘...-mac’
     Assume the file uses carriage return to separate lines, and do the
     appropriate conversion.  (This was the convention used in Classic
     Mac OS.)

   These variant coding systems are omitted from the
‘list-coding-systems’ display for brevity, since they are entirely
predictable.  For example, the coding system ‘iso-latin-1’ has variants
‘iso-latin-1-unix’, ‘iso-latin-1-dos’ and ‘iso-latin-1-mac’.

   The coding systems ‘unix’, ‘dos’, and ‘mac’ are aliases for
‘undecided-unix’, ‘undecided-dos’, and ‘undecided-mac’, respectively.
These coding systems specify only the end-of-line conversion, and leave
the character code conversion to be deduced from the text itself.

   The coding system ‘raw-text’ is good for a file which is mainly ASCII
text, but may contain byte values above 127 that are not meant to encode
non-ASCII characters.  With ‘raw-text’, Emacs copies those byte values
unchanged, and sets ‘enable-multibyte-characters’ to ‘nil’ in the
current buffer so that they will be interpreted properly.  ‘raw-text’
handles end-of-line conversion in the usual way, based on the data
encountered, and has the usual three variants to specify the kind of
end-of-line conversion to use.

   In contrast, the coding system ‘no-conversion’ specifies no character
code conversion at all—none for non-ASCII byte values and none for end
of line.  This is useful for reading or writing binary files, tar files,
and other files that must be examined verbatim.  It, too, sets
‘enable-multibyte-characters’ to ‘nil’.

   The easiest way to edit a file with no conversion of any kind is with
the ‘M-x find-file-literally’ command.  This uses ‘no-conversion’, and
also suppresses other Emacs features that might convert the file
contents before you see them.  *Note Visiting::.

   The coding system ‘emacs-internal’ (or ‘utf-8-emacs’, which is
equivalent) means that the file contains non-ASCII characters stored
with the internal Emacs encoding.  This coding system handles
end-of-line conversion based on the data encountered, and has the usual
three variants to specify the kind of end-of-line conversion.

   ---------- Footnotes ----------

   (1) It is also specified for MIME ‘text/*’ bodies and in other
network transport contexts.  It is different from the SGML reference
syntax record-start/record-end format, which Emacs doesn’t support
directly.


File: emacs.info,  Node: Recognize Coding,  Next: Specify Coding,  Prev: Coding Systems,  Up: International

23.6 Recognizing Coding Systems
===============================

Whenever Emacs reads a given piece of text, it tries to recognize which
coding system to use.  This applies to files being read, output from
subprocesses, text from X selections, etc.  Emacs can select the right
coding system automatically most of the time—once you have specified
your preferences.

   Some coding systems can be recognized or distinguished by which byte
sequences appear in the data.  However, there are coding systems that
cannot be distinguished, not even potentially.  For example, there is no
way to distinguish between Latin-1 and Latin-2; they use the same byte
values with different meanings.

   Emacs handles this situation by means of a priority list of coding
systems.  Whenever Emacs reads a file, if you do not specify the coding
system to use, Emacs checks the data against each coding system,
starting with the first in priority and working down the list, until it
finds a coding system that fits the data.  Then it converts the file
contents assuming that they are represented in this coding system.

   The priority list of coding systems depends on the selected language
environment (*note Language Environments::).  For example, if you use
French, you probably want Emacs to prefer Latin-1 to Latin-2; if you use
Czech, you probably want Latin-2 to be preferred.  This is one of the
reasons to specify a language environment.

   However, you can alter the coding system priority list in detail with
the command ‘M-x prefer-coding-system’.  This command reads the name of
a coding system from the minibuffer, and adds it to the front of the
priority list, so that it is preferred to all others.  If you use this
command several times, each use adds one element to the front of the
priority list.

   If you use a coding system that specifies the end-of-line conversion
type, such as ‘iso-8859-1-dos’, what this means is that Emacs should
attempt to recognize ‘iso-8859-1’ with priority, and should use DOS
end-of-line conversion when it does recognize ‘iso-8859-1’.

   Sometimes a file name indicates which coding system to use for the
file.  The variable ‘file-coding-system-alist’ specifies this
correspondence.  There is a special function
‘modify-coding-system-alist’ for adding elements to this list.  For
example, to read and write all ‘.txt’ files using the coding system
‘chinese-iso-8bit’, you can execute this Lisp expression:

     (modify-coding-system-alist 'file "\\.txt\\'" 'chinese-iso-8bit)

The first argument should be ‘file’, the second argument should be a
regular expression that determines which files this applies to, and the
third argument says which coding system to use for these files.

   Emacs recognizes which kind of end-of-line conversion to use based on
the contents of the file: if it sees only carriage returns, or only
carriage return followed by linefeed sequences, then it chooses the
end-of-line conversion accordingly.  You can inhibit the automatic use
of end-of-line conversion by setting the variable
‘inhibit-eol-conversion’ to non-‘nil’.  If you do that, DOS-style files
will be displayed with the ‘^M’ characters visible in the buffer; some
people prefer this to the more subtle ‘(DOS)’ end-of-line type
indication near the left edge of the mode line (*note eol-mnemonic: Mode
Line.).

   By default, the automatic detection of the coding system is sensitive
to escape sequences.  If Emacs sees a sequence of characters that begin
with an escape character, and the sequence is valid as an ISO-2022 code,
that tells Emacs to use one of the ISO-2022 encodings to decode the
file.

   However, there may be cases that you want to read escape sequences in
a file as is.  In such a case, you can set the variable
‘inhibit-iso-escape-detection’ to non-‘nil’.  Then the code detection
ignores any escape sequences, and never uses an ISO-2022 encoding.  The
result is that all escape sequences become visible in the buffer.

   The default value of ‘inhibit-iso-escape-detection’ is ‘nil’.  We
recommend that you not change it permanently, only for one specific
operation.  That’s because some Emacs Lisp source files in the Emacs
distribution contain non-ASCII characters encoded in the coding system
‘iso-2022-7bit’, and they won’t be decoded correctly when you visit
those files if you suppress the escape sequence detection.

   The variables ‘auto-coding-alist’ and ‘auto-coding-regexp-alist’ are
the strongest way to specify the coding system for certain patterns of
file names, or for files containing certain patterns, respectively.
These variables even override ‘-*-coding:-*-’ tags in the file itself
(*note Specify Coding::).  For example, Emacs uses ‘auto-coding-alist’
for tar and archive files, to prevent it from being confused by a
‘-*-coding:-*-’ tag in a member of the archive and thinking it applies
to the archive file as a whole.

   Another way to specify a coding system is with the variable
‘auto-coding-functions’.  For example, one of the builtin
‘auto-coding-functions’ detects the encoding for XML files.  Unlike the
previous two, this variable does not override any ‘-*-coding:-*-’ tag.


File: emacs.info,  Node: Specify Coding,  Next: Output Coding,  Prev: Recognize Coding,  Up: International

23.7 Specifying a File’s Coding System
======================================

If Emacs recognizes the encoding of a file incorrectly, you can reread
the file using the correct coding system with ‘C-x <RET> r’
(‘revert-buffer-with-coding-system’).  This command prompts for the
coding system to use.  To see what coding system Emacs actually used to
decode the file, look at the coding system mnemonic letter near the left
edge of the mode line (*note Mode Line::), or type ‘C-h C’
(‘describe-coding-system’).

   You can specify the coding system for a particular file in the file
itself, using the ‘-*-...-*-’ construct at the beginning, or a local
variables list at the end (*note File Variables::).  You do this by
defining a value for the “variable” named ‘coding’.  Emacs does not
really have a variable ‘coding’; instead of setting a variable, this
uses the specified coding system for the file.  For example,
‘-*-mode: C; coding: latin-1; -*-’ specifies use of the Latin-1 coding
system, as well as C mode.  When you specify the coding explicitly in
the file, that overrides ‘file-coding-system-alist’.


File: emacs.info,  Node: Output Coding,  Next: Text Coding,  Prev: Specify Coding,  Up: International

23.8 Choosing Coding Systems for Output
=======================================

Once Emacs has chosen a coding system for a buffer, it stores that
coding system in ‘buffer-file-coding-system’.  That makes it the default
for operations that write from this buffer into a file, such as
‘save-buffer’ and ‘write-region’.  You can specify a different coding
system for further file output from the buffer using
‘set-buffer-file-coding-system’ (*note Text Coding::).

   You can insert any character Emacs supports into any Emacs buffer,
but most coding systems can only handle a subset of these characters.
Therefore, it’s possible that the characters you insert cannot be
encoded with the coding system that will be used to save the buffer.
For example, you could visit a text file in Polish, encoded in
‘iso-8859-2’, and add some Russian words to it.  When you save that
buffer, Emacs cannot use the current value of
‘buffer-file-coding-system’, because the characters you added cannot be
encoded by that coding system.

   When that happens, Emacs tries the most-preferred coding system (set
by ‘M-x prefer-coding-system’ or ‘M-x set-language-environment’).  If
that coding system can safely encode all of the characters in the
buffer, Emacs uses it, and stores its value in
‘buffer-file-coding-system’.  Otherwise, Emacs displays a list of coding
systems suitable for encoding the buffer’s contents, and asks you to
choose one of those coding systems.

   If you insert the unsuitable characters in a mail message, Emacs
behaves a bit differently.  It additionally checks whether the
most-preferred coding system is recommended for use in MIME messages; if
not, it informs you of this fact and prompts you for another coding
system.  This is so you won’t inadvertently send a message encoded in a
way that your recipient’s mail software will have difficulty decoding.
(You can still use an unsuitable coding system if you enter its name at
the prompt.)

   When you send a mail message (*note Sending Mail::), Emacs has four
different ways to determine the coding system to use for encoding the
message text.  It first tries the buffer’s own value of
‘buffer-file-coding-system’, if that is non-‘nil’.  Otherwise, it uses
the value of ‘sendmail-coding-system’, if that is non-‘nil’.  Thirdly,
it uses the value of ‘default-sendmail-coding-system’.  If all of these
three values are ‘nil’, Emacs encodes outgoing mail using the default
coding system for new files (i.e., the default value of
‘buffer-file-coding-system’), which is controlled by your choice of
language environment.


File: emacs.info,  Node: Text Coding,  Next: Communication Coding,  Prev: Output Coding,  Up: International

23.9 Specifying a Coding System for File Text
=============================================

In cases where Emacs does not automatically choose the right coding
system for a file’s contents, you can use these commands to specify one:

‘C-x <RET> f CODING <RET>’
     Use coding system CODING to save or revisit the file in the current
     buffer (‘set-buffer-file-coding-system’).

‘C-x <RET> c CODING <RET>’
     Specify coding system CODING for the immediately following command
     (‘universal-coding-system-argument’).

‘C-x <RET> r CODING <RET>’
     Revisit the current file using the coding system CODING
     (‘revert-buffer-with-coding-system’).

‘M-x recode-region <RET> RIGHT <RET> WRONG <RET>’
     Convert a region that was decoded using coding system WRONG,
     decoding it using coding system RIGHT instead.

   The command ‘C-x <RET> f’ (‘set-buffer-file-coding-system’) sets the
file coding system for the current buffer (i.e., the coding system to
use when saving or reverting the file).  You specify which coding system
using the minibuffer.  You can also invoke this command by clicking with
‘mouse-3’ on the coding system indicator in the mode line (*note Mode
Line::).

   If you specify a coding system that cannot handle all the characters
in the buffer, Emacs will warn you about the troublesome characters, and
ask you to choose another coding system, when you try to save the buffer
(*note Output Coding::).

   You can also use this command to specify the end-of-line conversion
(*note end-of-line conversion: Coding Systems.) for encoding the current
buffer.  For example, ‘C-x <RET> f dos <RET>’ will cause Emacs to save
the current buffer’s text with DOS-style carriage return followed by
linefeed line endings.

   Another way to specify the coding system for a file is when you visit
the file.  First use the command ‘C-x <RET> c’
(‘universal-coding-system-argument’); this command uses the minibuffer
to read a coding system name.  After you exit the minibuffer, the
specified coding system is used for _the immediately following command_.

   So if the immediately following command is ‘C-x C-f’, for example, it
reads the file using that coding system (and records the coding system
for when you later save the file).  Or if the immediately following
command is ‘C-x C-w’, it writes the file using that coding system.  When
you specify the coding system for saving in this way, instead of with
‘C-x <RET> f’, there is no warning if the buffer contains characters
that the coding system cannot handle.

   Other file commands affected by a specified coding system include
‘C-x i’ and ‘C-x C-v’, as well as the other-window variants of ‘C-x
C-f’.  ‘C-x <RET> c’ also affects commands that start subprocesses,
including ‘M-x shell’ (*note Shell::).  If the immediately following
command does not use the coding system, then ‘C-x <RET> c’ ultimately
has no effect.

   An easy way to visit a file with no conversion is with the ‘M-x
find-file-literally’ command.  *Note Visiting::.

   The default value of the variable ‘buffer-file-coding-system’
specifies the choice of coding system to use when you create a new file.
It applies when you find a new file, and when you create a buffer and
then save it in a file.  Selecting a language environment typically sets
this variable to a good choice of default coding system for that
language environment.

   If you visit a file with a wrong coding system, you can correct this
with ‘C-x <RET> r’ (‘revert-buffer-with-coding-system’).  This visits
the current file again, using a coding system you specify.

   If a piece of text has already been inserted into a buffer using the
wrong coding system, you can redo the decoding of it using ‘M-x
recode-region’.  This prompts you for the proper coding system, then for
the wrong coding system that was actually used, and does the conversion.
It first encodes the region using the wrong coding system, then decodes
it again using the proper coding system.


File: emacs.info,  Node: Communication Coding,  Next: File Name Coding,  Prev: Text Coding,  Up: International

23.10 Coding Systems for Interprocess Communication
===================================================

This section explains how to specify coding systems for use in
communication with other processes.

‘C-x <RET> x CODING <RET>’
     Use coding system CODING for transferring selections to and from
     other graphical applications (‘set-selection-coding-system’).

‘C-x <RET> X CODING <RET>’
     Use coding system CODING for transferring _one_ selection—the next
     one—to or from another graphical application
     (‘set-next-selection-coding-system’).

‘C-x <RET> p INPUT-CODING <RET> OUTPUT-CODING <RET>’
     Use coding systems INPUT-CODING and OUTPUT-CODING for subprocess
     input and output in the current buffer
     (‘set-buffer-process-coding-system’).

   The command ‘C-x <RET> x’ (‘set-selection-coding-system’) specifies
the coding system for sending selected text to other windowing
applications, and for receiving the text of selections made in other
applications.  This command applies to all subsequent selections, until
you override it by using the command again.  The command ‘C-x <RET> X’
(‘set-next-selection-coding-system’) specifies the coding system for the
next selection made in Emacs or read by Emacs.

   The variable ‘x-select-request-type’ specifies the data type to
request from the X Window System for receiving text selections from
other applications.  If the value is ‘nil’ (the default), Emacs tries
‘UTF8_STRING’ and ‘COMPOUND_TEXT’, in this order, and uses various
heuristics to choose the more appropriate of the two results; if none of
these succeed, Emacs falls back on ‘STRING’.  If the value of
‘x-select-request-type’ is one of the symbols ‘COMPOUND_TEXT’,
‘UTF8_STRING’, ‘STRING’, or ‘TEXT’, Emacs uses only that request type.
If the value is a list of some of these symbols, Emacs tries only the
request types in the list, in order, until one of them succeeds, or
until the list is exhausted.

   The command ‘C-x <RET> p’ (‘set-buffer-process-coding-system’)
specifies the coding system for input and output to a subprocess.  This
command applies to the current buffer; normally, each subprocess has its
own buffer, and thus you can use this command to specify translation to
and from a particular subprocess by giving the command in the
corresponding buffer.

   You can also use ‘C-x <RET> c’ (‘universal-coding-system-argument’)
just before the command that runs or starts a subprocess, to specify the
coding system for communicating with that subprocess.  *Note Text
Coding::.

   The default for translation of process input and output depends on
the current language environment.

   The variable ‘locale-coding-system’ specifies a coding system to use
when encoding and decoding system strings such as system error messages
and ‘format-time-string’ formats and time stamps.  That coding system
might also be used for decoding non-ASCII keyboard input on the X Window
System and will also be used to encode text sent to the standard output
and error streams in batch mode.  You should choose a coding system that
is compatible with the underlying system’s text representation, which is
normally specified by one of the environment variables ‘LC_ALL’,
‘LC_CTYPE’, and ‘LANG’.  (The first one, in the order specified above,
whose value is nonempty is the one that determines the text
representation.)


File: emacs.info,  Node: File Name Coding,  Next: X Coding,  Prev: Communication Coding,  Up: International

23.11 Coding Systems for File Names
===================================

‘C-x <RET> F CODING <RET>’
     Use coding system CODING for encoding and decoding file names
     (‘set-file-name-coding-system’).

   The command ‘C-x <RET> F’ (‘set-file-name-coding-system’) specifies a
coding system to use for encoding file _names_.  It has no effect on
reading and writing the _contents_ of files.

   In fact, all this command does is set the value of the variable
‘file-name-coding-system’.  If you set the variable to a coding system
name (as a Lisp symbol or a string), Emacs encodes file names using that
coding system for all file operations.  This makes it possible to use
non-ASCII characters in file names—or, at least, those non-ASCII
characters that the specified coding system can encode.

   If ‘file-name-coding-system’ is ‘nil’, Emacs uses a default coding
system determined by the selected language environment, and stored in
the ‘default-file-name-coding-system’ variable (normally UTF-8).

   When Emacs runs on MS-Windows versions that are descendants of the NT
family (Windows 2000, XP, and all the later versions), the value of
‘file-name-coding-system’ is largely ignored, as Emacs by default uses
APIs that allow passing Unicode file names directly.  By contrast, on
Windows 9X, file names are encoded using ‘file-name-coding-system’,
which should be set to the codepage (*note codepage: Coding Systems.)
pertinent for the current system locale.  The value of the variable
‘w32-unicode-filenames’ controls whether Emacs uses the Unicode APIs
when it calls OS functions that accept file names.  This variable is set
by the startup code to ‘nil’ on Windows 9X, and to ‘t’ on newer versions
of MS-Windows.

   *Warning:* if you change ‘file-name-coding-system’ (or the language
environment) in the middle of an Emacs session, problems can result if
you have already visited files whose names were encoded using the
earlier coding system and cannot be encoded (or are encoded differently)
under the new coding system.  If you try to save one of these buffers
under the visited file name, saving may use the wrong file name, or it
may encounter an error.  If such a problem happens, use ‘C-x C-w’ to
specify a new file name for that buffer.

   If a mistake occurs when encoding a file name, use the command ‘M-x
recode-file-name’ to change the file name’s coding system.  This prompts
for an existing file name, its old coding system, and the coding system
to which you wish to convert.


File: emacs.info,  Node: X Coding,  Next: Terminal Coding,  Prev: File Name Coding,  Up: International

23.12 Coding Systems for X Keyboard Input
=========================================

Input methods under the X Window System specify their own coding systems
that must be used to decode keyboard input.  By default, Emacs
determines the coding system used for each input method automatically
upon establishing the connection to the input method server, and uses
that specific coding system to decode keyboard input.  However, that
determination can sometimes fail; in that situation, the locale coding
system (*note Communication Coding::) is used instead.

   If the input method does not correctly announce the coding system it
uses to encode text, then the coding system used by Emacs to decode text
from input methods must be manually specified.  The value of the
variable ‘x-input-coding-system’, when set to a symbol, is
unconditionally used as the coding system used to decode keyboard input
from input methods.


File: emacs.info,  Node: Terminal Coding,  Next: Fontsets,  Prev: X Coding,  Up: International

23.13 Coding Systems for Terminal I/O
=====================================

‘C-x <RET> t CODING <RET>’
     Use coding system CODING for terminal output
     (‘set-terminal-coding-system’).

‘C-x <RET> k CODING <RET>’
     Use coding system CODING for keyboard input
     (‘set-keyboard-coding-system’).

   The command ‘C-x <RET> t’ (‘set-terminal-coding-system’) specifies
the coding system for terminal output.  If you specify a character code
for terminal output, all characters output to the terminal are
translated into that coding system.

   This feature is useful for certain character-only terminals built to
support specific languages or character sets—for example, European
terminals that support one of the ISO Latin character sets.  You need to
specify the terminal coding system when using multibyte text, so that
Emacs knows which characters the terminal can actually handle.

   By default, output to the terminal is not translated at all, unless
Emacs can deduce the proper coding system from your terminal type or
your locale specification (*note Language Environments::).

   The command ‘C-x <RET> k’ (‘set-keyboard-coding-system’), or the
variable ‘keyboard-coding-system’, specifies the coding system for
keyboard input.  Character-code translation of keyboard input is useful
for terminals with keys that send non-ASCII graphic characters—for
example, some terminals designed for ISO Latin-1 or subsets of it.

   By default, keyboard input is translated based on your system locale
setting.  If your terminal does not really support the encoding implied
by your locale (for example, if you find it inserts a non-ASCII
character if you type ‘M-i’), you will need to set
‘keyboard-coding-system’ to ‘nil’ to turn off encoding.  You can do this
by putting

     (set-keyboard-coding-system nil)

in your init file.

   Setting ‘keyboard-coding-system’ has no effect on MS-Windows, except
on old Windows 9X systems, in which case the encoding must match the
current codepage of the MS-Windows console, which can be changed by
calling ‘w32-set-console-codepage’.

   There is a similarity between using a coding system translation for
keyboard input, and using an input method: both define sequences of
keyboard input that translate into single characters.  However, input
methods are designed to be convenient for interactive use by humans, and
the sequences that are translated are typically sequences of ASCII
printing characters.  Coding systems typically translate sequences of
non-graphic characters.


File: emacs.info,  Node: Fontsets,  Next: Defining Fontsets,  Prev: Terminal Coding,  Up: International

23.14 Fontsets
==============

A font typically defines shapes for a single alphabet or script.
Therefore, displaying the entire range of scripts that Emacs supports
requires a collection of many fonts.  In Emacs, such a collection is
called a “fontset”.  A fontset is defined by a list of font
specifications, each assigned to handle a range of character codes, and
may fall back on another fontset for characters that are not covered by
the fonts it specifies.

   Each fontset has a name, like a font.  However, while fonts are
stored in the system and the available font names are defined by the
system, fontsets are defined within Emacs itself.  Once you have defined
a fontset, you can use it within Emacs by specifying its name, anywhere
that you could use a single font.  Of course, Emacs fontsets can use
only the fonts that your system supports.  If some characters appear on
the screen as empty boxes or hex codes, this means that the fontset in
use for them has no font for those characters.  In this case, or if the
characters are shown, but not as well as you would like, you may need to
install extra fonts or modify the fontset to use specific fonts already
installed on your system (see below).  Your operating system may have
optional fonts that you can install; or you can install the GNU
Intlfonts package, which includes fonts for most supported scripts.(1)

   Emacs creates three fontsets automatically: the “standard fontset”,
the “startup fontset” and the “default fontset”.  The default fontset is
most likely to have fonts for a wide variety of non-ASCII characters,
and is the default fallback for the other two fontsets, and if you set a
default font rather than fontset.  However, it does not specify font
family names, so results can be somewhat random if you use it directly.
You can specify a particular fontset by starting Emacs with the ‘-fn’
option.  For example,

     emacs -fn fontset-standard

You can also specify a fontset with the ‘Font’ resource (*note X
Resources::).

   If no fontset is specified for use, then Emacs uses an ASCII font,
with ‘fontset-default’ as a fallback for characters the font does not
cover.  The standard fontset is only used if explicitly requested,
despite its name.

   To show the information about a specific fontset, use the
‘M-x describe-fontset’ command.  It prompts for a fontset name,
defaulting to the one used by the current frame, and then displays all
the subranges of characters and the fonts assigned to them in that
fontset.  To see which fonts Emacs is using in a session started without
a specific fontset (which is what happens normally), type
‘fontset-default <RET>’ at the prompt, or just ‘<RET>’ to describe the
fontset used by the current frame.

   A fontset does not necessarily specify a font for every character
code.  If a fontset specifies no font for a certain character, or if it
specifies a font that does not exist on your system, then it cannot
display that character properly.  It will display that character as a
hex code or thin space or an empty box instead.  (*Note glyphless
characters: Text Display, for details.)  Or a fontset might specify a
font for some range of characters, but you may not like their visual
appearance.  If this happens, you may wish to modify your fontset; see
*note Modifying Fontsets::, for how to do that.

   ---------- Footnotes ----------

   (1) If you run Emacs on X, you may need to inform the X server about
the location of the newly installed fonts with commands such as:

      xset fp+ /usr/local/share/emacs/fonts
      xset fp rehash


File: emacs.info,  Node: Defining Fontsets,  Next: Modifying Fontsets,  Prev: Fontsets,  Up: International

23.15 Defining Fontsets
=======================

When running on X, Emacs creates a standard fontset automatically
according to the value of ‘standard-fontset-spec’.  This fontset’s name
is

     -*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard

or just ‘fontset-standard’ for short.

   On GNUstep and macOS, the standard fontset is created using the value
of ‘ns-standard-fontset-spec’, and on MS Windows it is created using the
value of ‘w32-standard-fontset-spec’.

   Bold, italic, and bold-italic variants of the standard fontset are
created automatically.  Their names have ‘bold’ instead of ‘medium’, or
‘i’ instead of ‘r’, or both.

   Emacs generates a fontset automatically, based on any default ASCII
font that you specify with the ‘Font’ resource or the ‘-fn’ argument, or
the default font that Emacs found when it started.  This is the “startup
fontset” and its name is ‘fontset-startup’.  Emacs generates this
fontset by replacing the CHARSET_REGISTRY field with ‘fontset’, and
replacing the CHARSET_ENCODING field with ‘startup’, then using the
resulting string to specify a fontset.

   For instance, if you start Emacs with a font of this form,

     emacs -fn "*courier-medium-r-normal--14-140-*-iso8859-1"

Emacs generates the following fontset and uses it for the initial X
window frame:

     -*-courier-medium-r-normal-*-14-140-*-*-*-*-fontset-startup

   The startup fontset will use the font that you specify, or a variant
with a different registry and encoding, for all the characters that are
supported by that font, and fallback on ‘fontset-default’ for other
characters.

   With the X resource ‘Emacs.Font’, you can specify a fontset name just
like an actual font name.  But be careful not to specify a fontset name
in a wildcard resource like ‘Emacs*Font’—that wildcard specification
matches various other resources, such as for menus, and menus cannot
handle fontsets.  *Note X Resources::.

   You can specify additional fontsets using X resources named
‘Fontset-N’, where N is an integer starting from 0.  The resource value
should have this form:

     FONTPATTERN, [CHARSET:FONT]...

where FONTPATTERN should have the form of a standard X font name (see
the previous fontset-startup example), except for the last two fields.
They should have the form ‘fontset-ALIAS’.

   Each fontset has two names, one long and one short.  The long name is
FONTPATTERN.  The short name is ‘fontset-ALIAS’, the last 2 fields of
the long name (e.g., ‘fontset-startup’ for the fontset automatically
created at startup).  You can refer to the fontset by either name.

   The construct ‘CHARSET:FONT’ specifies which font to use (in this
fontset) for one particular character set.  Here, CHARSET is the name of
a character set, and FONT is the font to use for that character set.
You can use this construct any number of times in defining one fontset.

   For the other character sets, Emacs chooses a font based on
FONTPATTERN.  It replaces ‘fontset-ALIAS’ with values that describe the
character set.  For the ASCII character font, ‘fontset-ALIAS’ is
replaced with ‘ISO8859-1’.

   In addition, when several consecutive fields are wildcards, Emacs
collapses them into a single wildcard.  This is to prevent use of
auto-scaled fonts.  Fonts made by scaling larger fonts are not usable
for editing, and scaling a smaller font is also not useful, because it
is better to use the smaller font in its own size, which is what Emacs
does.

   Thus if FONTPATTERN is this,

     -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24

the font specification for ASCII characters would be this:

     -*-fixed-medium-r-normal-*-24-*-ISO8859-1

and the font specification for Chinese GB2312 characters would be this:

     -*-fixed-medium-r-normal-*-24-*-gb2312*-*

   You may not have any Chinese font matching the above font
specification.  Most X distributions include only Chinese fonts that
have ‘song ti’ or ‘fangsong ti’ in the FAMILY field.  In such a case,
‘Fontset-N’ can be specified as:

     Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
             chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*

Then, the font specifications for all but Chinese GB2312 characters have
‘fixed’ in the FAMILY field, and the font specification for Chinese
GB2312 characters has a wild card ‘*’ in the FAMILY field.

   The function that processes the fontset resource value to create the
fontset is called ‘create-fontset-from-fontset-spec’.  You can also call
this function explicitly to create a fontset.

   *Note Fonts::, for more information about font naming.


File: emacs.info,  Node: Modifying Fontsets,  Next: Undisplayable Characters,  Prev: Defining Fontsets,  Up: International

23.16 Modifying Fontsets
========================

Fontsets do not always have to be created from scratch.  If only minor
changes are required it may be easier to modify an existing fontset,
usually ‘fontset-default’.  Modifying ‘fontset-default’ will also affect
other fontsets that use it as a fallback, so can be an effective way of
fixing problems with the fonts that Emacs chooses for a particular
script.

   Fontsets can be modified using the function ‘set-fontset-font’,
specifying a character, a charset, a script, or a range of characters to
modify the font for, and a font specification for the font to be used.
Some examples are:

     ;; Prefer a big5 font for han characters.
     (set-fontset-font "fontset-default"
                       'han (font-spec :registry "big5")
                       nil 'prepend)

     ;; Use MyPrivateFont for the Unicode private use area.
     (set-fontset-font "fontset-default"  '(#xe000 . #xf8ff)
                       "MyPrivateFont")

     ;; Use Liberation Mono for latin-3 charset.
     (set-fontset-font "fontset-default" 'iso-8859-3
                       "Liberation Mono")

     ;; Use DejaVu Sans Mono as a fallback in fontset-startup
     ;; before resorting to fontset-default.
     (set-fontset-font "fontset-startup" nil "DejaVu Sans Mono"
                       nil 'append)

*Note (elisp)Fontsets::, for more details about using the
‘set-fontset-font’ function.

   If you don’t know the character’s codepoint or the script to which it
belongs, you can ask Emacs.  With point at the character, type
‘C-u C-x =’ (‘what-cursor-position’), and this information, together
with much more, will be displayed in the ‘*Help*’ buffer that Emacs pops
up.  *Note Position Info::.  For example, Japanese characters belong to
the ‘kana’ script, but Japanese text also mixes them with Chinese
characters so the following uses the ‘han’ script to set up Emacs to use
the ‘Kochi Gothic’ font for Japanese text:

     (set-fontset-font "fontset-default" 'han "Kochi Gothic")

(For convenience, the ‘han’ script in Emacs is set up to support all of
the Chinese, Japanese, and Korean, a.k.a. CJK, characters, not just
Chinese characters.)

   For the list of known scripts, see the variable
‘script-representative-chars’.

   Fontset settings like those above only affect characters that the
default font doesn’t support, so if the ‘Kochi Gothic’ font covers Latin
characters, it will not be used for displaying Latin scripts, since the
default font used by Emacs usually covers Basic Latin.

   Some fonts installed on your system might be broken, or produce
unpleasant results for characters for which they are used, and you may
wish to instruct Emacs to completely ignore them while searching for a
suitable font required to display a character.  You can do that by
adding the offending fonts to the value of the variable
‘face-ignored-fonts’, which is a list.  Here’s an example to put in your
‘~/.emacs’:

     (add-to-list 'face-ignored-fonts "Some Bad Font")


File: emacs.info,  Node: Undisplayable Characters,  Next: Unibyte Mode,  Prev: Modifying Fontsets,  Up: International

23.17 Undisplayable Characters
==============================

There may be some non-ASCII characters that your terminal cannot
display.  Most text terminals support just a single character set (use
the variable ‘default-terminal-coding-system’ to tell Emacs which one,
*note Terminal Coding::); characters that can’t be encoded in that
coding system are displayed as ‘?’ by default.

   Graphical displays can display a broader range of characters, but you
may not have fonts installed for all of them; characters that have no
font appear as a hollow box.

   If you use Latin-1 characters but your terminal can’t display
Latin-1, you can arrange to display mnemonic ASCII sequences instead,
e.g., ‘"o’ for o-umlaut.  Load the library ‘iso-ascii’ to do this.

   If your terminal can display Latin-1, you can display characters from
other European character sets using a mixture of equivalent Latin-1
characters and ASCII mnemonics.  Customize the variable ‘latin1-display’
to enable this.  The mnemonic ASCII sequences mostly correspond to those
of the prefix input methods.


File: emacs.info,  Node: Unibyte Mode,  Next: Charsets,  Prev: Undisplayable Characters,  Up: International

23.18 Unibyte Editing Mode
==========================

The ISO 8859 Latin-N character sets define character codes in the range
0240 to 0377 octal (160 to 255 decimal) to handle the accented letters
and punctuation needed by various European languages (and some
non-European ones).  Note that Emacs considers bytes with codes in this
range as raw bytes, not as characters, even in a unibyte buffer, i.e.,
if you disable multibyte characters.  However, Emacs can still handle
these character codes as if they belonged to _one_ of the single-byte
character sets at a time.  To specify _which_ of these codes to use,
invoke ‘M-x set-language-environment’ and specify a suitable language
environment such as ‘Latin-N’.  *Note Disabling Multibyte Characters:
(elisp)Disabling Multibyte.

   Emacs can also display bytes in the range 160 to 255 as readable
characters, provided the terminal or font in use supports them.  This
works automatically.  On a graphical display, Emacs can also display
single-byte characters through fontsets, in effect by displaying the
equivalent multibyte characters according to the current language
environment.  To request this, set the variable
‘unibyte-display-via-language-environment’ to a non-‘nil’ value.  Note
that setting this only affects how these bytes are displayed, but does
not change the fundamental fact that Emacs treats them as raw bytes, not
as characters.

   If your terminal does not support display of the Latin-1 character
set, Emacs can display these characters as ASCII sequences which at
least give you a clear idea of what the characters are.  To do this,
load the library ‘iso-ascii’.  Similar libraries for other Latin-N
character sets could be implemented, but have not been so far.

   Normally non-ISO-8859 characters (decimal codes between 128 and 159
inclusive) are displayed as octal escapes.  You can change this for
non-standard extended versions of ISO-8859 character sets by using the
function ‘standard-display-8bit’ in the ‘disp-table’ library.

   There are two ways to input single-byte non-ASCII characters:

   • You can use an input method for the selected language environment.
     *Note Input Methods::.  When you use an input method in a unibyte
     buffer, the non-ASCII character you specify with it is converted to
     unibyte.

   • If your keyboard can generate character codes 128 (decimal) and up,
     representing non-ASCII characters, you can type those character
     codes directly.

     On a graphical display, you should not need to do anything special
     to use these keys; they should simply work.  On a text terminal,
     you should use the command ‘M-x set-keyboard-coding-system’ or
     customize the variable ‘keyboard-coding-system’ to specify which
     coding system your keyboard uses (*note Terminal Coding::).
     Enabling this feature will probably require you to use <ESC> to
     type Meta characters; however, on a console terminal or a terminal
     emulator such as ‘xterm’, you can arrange for Meta to be converted
     to <ESC> and still be able to type 8-bit characters present
     directly on the keyboard or using <Compose> or <AltGr> keys.  *Note
     User Input::.

     Many modern systems provide “native input methods” for many
     languages whose characters don’t have keyboard keys assigned to
     them.  If Emacs was built with support for these native input
     methods, you can activate such an input method and type the
     characters they support.  How to activate and use these input
     methods depends on the system and the input method, and will not be
     described here; see your system documentation.  Here we describe
     some Emacs facilities to control the use of the native input
     methods.

     In Emacs built with the GTK toolkit, the variable
     ‘x-gtk-use-native-input’ controls whether Emacs should receive
     characters produced by GTK input methods.  If the value is ‘nil’,
     the default, Emacs uses the X input methods (XIM), otherwise it
     uses the GTK input methods.  The ‘useXIM’ X resource controls
     whether to use XIM, and ‘inputStyle’ X resource controls the
     display on X of preview text generated by the native input methods;
     *note Table of Resources::.

     On MS-Windows, Emacs supports native inputs methods provided by
     IMM, the Input Method Manager, but that can be turned off if
     needed; *note Windows Keyboard::.

   • You can use the key ‘C-x 8’ as a compose-character prefix for entry
     of non-ASCII Latin-1 and other printing characters.  ‘C-x 8’ is
     good for insertion (in the minibuffer as well as other buffers),
     for searching, and in any other context where a key sequence is
     allowed.

     ‘C-x 8’ works by loading the ‘iso-transl’ library.  Once that
     library is loaded, the <Alt> modifier key, if the keyboard has one,
     serves the same purpose as ‘C-x 8’: use <Alt> together with an
     accent character to modify the following letter.  In addition, if
     the keyboard has keys for the Latin-1 dead accent characters, they
     too are defined to compose with the following character, once
     ‘iso-transl’ is loaded.

     Use ‘C-x 8 C-h’ to list all the available ‘C-x 8’ translations.


File: emacs.info,  Node: Charsets,  Next: Bidirectional Editing,  Prev: Unibyte Mode,  Up: International

23.19 Charsets
==============

In Emacs, “charset” is short for “character set”.  Emacs supports most
popular charsets (such as ‘ascii’, ‘iso-8859-1’, ‘cp1250’, ‘big5’, and
‘unicode’), in addition to some charsets of its own (such as ‘emacs’,
‘unicode-bmp’, and ‘eight-bit’).  All supported characters belong to one
or more charsets.

   Emacs normally does the right thing with respect to charsets, so that
you don’t have to worry about them.  However, it is sometimes helpful to
know some of the underlying details about charsets.

   One example is font selection (*note Fonts::).  Each language
environment (*note Language Environments::) defines a priority list for
the various charsets.  When searching for a font, Emacs initially
attempts to find one that can display the highest-priority charsets.
For instance, in the Japanese language environment, the charset
‘japanese-jisx0208’ has the highest priority, so Emacs tries to use a
font whose ‘registry’ property is ‘JISX0208.1983-0’.

   There are two commands that can be used to obtain information about
charsets.  The command ‘M-x list-charset-chars’ prompts for a charset
name, and displays all the characters in that character set.  The
command ‘M-x describe-character-set’ prompts for a charset name, and
displays information about that charset, including its internal
representation within Emacs.

   ‘M-x list-character-sets’ displays a list of all supported charsets.
The list gives the names of charsets and additional information to
identity each charset; for more details, see the ISO International
Register of Coded Character Sets to be Used with Escape Sequences
(ISO-IR) (https://www.itscj.ipsj.or.jp/itscj_english/iso-ir/ISO-IR.pdf)
maintained by the Information Processing Society of Japan/Information
Technology Standards Commission of Japan (IPSJ/ITSCJ)
(https://www.itscj.ipsj.or.jp/itscj_english/).  In this list, charsets
are divided into two categories: “normal charsets” are listed first,
followed by “supplementary charsets”.  A supplementary charset is one
that is used to define another charset (as a parent or a subset), or to
provide backward-compatibility for older Emacs versions.

   To find out which charset a character in the buffer belongs to, put
point before it and type ‘C-u C-x =’ (*note International Chars::).


File: emacs.info,  Node: Bidirectional Editing,  Prev: Charsets,  Up: International

23.20 Bidirectional Editing
===========================

Emacs supports editing text written in scripts, such as Arabic, Farsi,
and Hebrew, whose natural ordering of horizontal text for display is
from right to left.  However, digits and Latin text embedded in these
scripts are still displayed left to right.  It is also not uncommon to
have small portions of text in Arabic or Hebrew embedded in an otherwise
Latin document; e.g., as comments and strings in a program source file.
For these reasons, text that uses these scripts is actually
“bidirectional”: a mixture of runs of left-to-right and right-to-left
characters.

   This section describes the facilities and options provided by Emacs
for editing bidirectional text.

   Emacs stores right-to-left and bidirectional text in the so-called
“logical” (or “reading”) order: the buffer or string position of the
first character you read precedes that of the next character.
Reordering of bidirectional text into the “visual” order happens at
display time.  As a result, character positions no longer increase
monotonically with their positions on display.  Emacs implements the
Unicode Bidirectional Algorithm (UBA) described in the Unicode Standard
Annex #9 (https://unicode.org/reports/tr9/), for reordering of
bidirectional text for display.  It deviates from the UBA only in how
continuation lines are displayed when text direction is opposite to the
base paragraph direction, e.g., when a long line of English text appears
in a right-to-left paragraph.

   The buffer-local variable ‘bidi-display-reordering’ controls whether
text in the buffer is reordered for display.  If its value is non-‘nil’,
Emacs reorders characters that have right-to-left directionality when
they are displayed.  The default value is ‘t’.

   Each paragraph of bidirectional text can have its own “base
direction”, either right-to-left or left-to-right.  Text in
left-to-right paragraphs begins on the screen at the left margin of the
window and is truncated or continued when it reaches the right margin.
By contrast, text in right-to-left paragraphs is displayed starting at
the right margin and is continued or truncated at the left margin.  By
default, paragraph boundaries are empty lines, i.e., lines consisting
entirely of whitespace characters.  To change that, you can customize
the two variables ‘bidi-paragraph-start-re’ and
‘bidi-paragraph-separate-re’, whose values should be regular expressions
(strings); e.g., to have a single newline start a new paragraph, set
both of these variables to ‘"^"’.  These two variables are buffer-local
(*note Locals::).

   Emacs determines the base direction of each paragraph dynamically,
based on the text at the beginning of the paragraph.  However, sometimes
a buffer may need to force a certain base direction for its paragraphs.
The variable ‘bidi-paragraph-direction’, if non-‘nil’, disables the
dynamic determination of the base direction, and instead forces all
paragraphs in the buffer to have the direction specified by its
buffer-local value.  The value can be either ‘right-to-left’ or
‘left-to-right’.  Any other value is interpreted as ‘nil’.

   Alternatively, you can control the base direction of a paragraph by
inserting special formatting characters in front of the paragraph.  The
special character ‘RIGHT-TO-LEFT MARK’, or RLM, forces the right-to-left
direction on the following paragraph, while ‘LEFT-TO-RIGHT MARK’, or LRM
forces the left-to-right direction.  (You can use ‘C-x 8 <RET>’ to
insert these characters.)  In a GUI session, the LRM and RLM characters
display as very thin blank characters; on text terminals they display as
blanks.

   Because characters are reordered for display, Emacs commands that
operate in the logical order or on stretches of buffer positions may
produce unusual effects.  For example, the commands ‘C-f’ and ‘C-b’ move
point in the logical order, so the cursor will sometimes jump when point
traverses reordered bidirectional text.  Similarly, a highlighted region
covering a contiguous range of character positions may look
discontinuous if the region spans reordered text.  This is normal and
similar to the behavior of other programs that support bidirectional
text.

   Cursor motion commands bound to arrow keys, such as <LEFT> and
‘C-<RIGHT>’, are sensitive to the base direction of the current
paragraph.  In a left-to-right paragraph, commands bound to <RIGHT> with
or without modifiers move _forward_ through buffer text, but in a
right-to-left paragraph they move _backward_ instead.  This reflects the
fact that in a right-to-left paragraph buffer positions predominantly
increase when moving to the left on display.

   When you move out of a paragraph, the meaning of the arrow keys might
change if the base direction of the preceding or the following paragraph
is different from the paragraph out of which you moved.  When that
happens, you need to adjust the arrow key you press to the new base
direction.

   By default, <LEFT> and <RIGHT> move in the logical order, but if
‘visual-order-cursor-movement’ is non-‘nil’, these commands move to the
character that is, correspondingly, to the left or right of the current
screen position, moving to the next or previous screen line as
appropriate.  Note that this might potentially move point many buffer
positions away, depending on the surrounding bidirectional context.

   Bidirectional text sometimes uses special formatting characters to
affect the reordering of text for display.  The LRM and RLM characters,
mentioned above, are two such characters, but there are more of them.
They are by default displayed as thin space glyphs on GUI frames, and as
simple spaces on text-mode frames.  If you want to be aware of these
special control characters, so that their effect on display does not
come as a surprise, you can turn on the ‘glyphless-display-mode’ (*note
Text Display::).  This minor mode will cause these formatting characters
to be displayed as acronyms inside a small box, so that they stand out
on display, and make their effect easier to understand.


File: emacs.info,  Node: Modes,  Next: Indentation,  Prev: International,  Up: Top

# /. 24 Major and Minor Modes
****************************

Emacs contains many “editing modes” that alter its basic behavior in
useful ways.  These are divided into “major modes” and “minor modes”.

   Major modes provide specialized facilities for working on a
particular file type, such as a C source file (*note Programs::), or a
particular type of non-file buffer, such as a shell buffer (*note
Shell::).  Major modes are mutually exclusive; each buffer has one and
only one major mode at any time.

   Minor modes are optional features which you can turn on or off, not
necessarily specific to a type of file or buffer.  For example, Auto
Fill mode is a minor mode in which <SPC> breaks lines between words as
you type (*note Auto Fill::).  Minor modes are independent of one
another, and of the selected major mode.

* Menu:

* Major Modes::         Text mode vs. Lisp mode vs. C mode...
* Minor Modes::         Each minor mode is a feature you can turn on
                          independently of any others.
* Choosing Modes::      How modes are chosen when visiting files.


File: emacs.info,  Node: Major Modes,  Next: Minor Modes,  Up: Modes

24.1 Major Modes
================

Every buffer possesses a major mode, which determines the editing
behavior of Emacs while that buffer is current.  The mode line normally
shows the name of the current major mode, in parentheses (*note Mode
Line::).

   The least specialized major mode is called “Fundamental mode”.  This
mode has no mode-specific redefinitions or variable settings, so that
each Emacs command behaves in its most general manner, and each user
option variable is in its default state.

   For editing text of a specific type that Emacs knows about, such as
Lisp code or English text, you typically use a more specialized major
mode, such as Lisp mode or Text mode.  Most major modes fall into three
major groups.  The first group contains modes for normal text, either
plain or with mark-up.  It includes Text mode, HTML mode, SGML mode, TeX
mode and Outline mode.  The second group contains modes for specific
programming languages.  These include Lisp mode (which has several
variants), C mode, Fortran mode, and others.  The third group consists
of major modes that are not associated directly with files; they are
used in buffers created for specific purposes by Emacs.  Examples
include Dired mode for buffers made by Dired (*note Dired::), Message
mode for buffers made by ‘C-x m’ (*note Sending Mail::), and Shell mode
for buffers used to communicate with an inferior shell process (*note
Interactive Shell::).

   Usually, the major mode is automatically set by Emacs, when you first
visit a file or create a buffer (*note Choosing Modes::).  You can
explicitly select a new major mode by using an ‘M-x’ command.  Take the
name of the mode and add ‘-mode’ to get the name of the command to
select that mode (e.g., ‘M-x lisp-mode’ enters Lisp mode).  Since every
buffer has exactly one major mode, there is no way to “turn off” a major
mode; instead you must switch to a different one.

   The value of the buffer-local variable ‘major-mode’ is a symbol with
the same name as the major mode command (e.g., ‘lisp-mode’).  This
variable is set automatically; you should not change it yourself.

   The default value of ‘major-mode’ determines the major mode to use
for files that do not specify a major mode, and for new buffers created
with ‘C-x b’.  Normally, this default value is the symbol
‘fundamental-mode’, which specifies Fundamental mode.  You can change
this default value via the Customization interface (*note Easy
Customization::), or by adding a line like this to your init file (*note
Init File::):

     (setq-default major-mode 'text-mode)

If the default value of ‘major-mode’ is ‘nil’, the major mode is taken
from the previously current buffer.

   Specialized major modes often change the meanings of certain keys to
do something more suitable for the mode.  For instance, programming
language modes bind <TAB> to indent the current line according to the
rules of the language (*note Indentation::).  The keys that are commonly
changed are <TAB>, <DEL>, and ‘C-j’.  Many modes also define special
commands of their own, usually bound to key sequences whose prefix key
is ‘C-c’ (*note Keys::).  Major modes can also alter user options and
variables; for instance, programming language modes typically set a
buffer-local value for the variable ‘comment-start’, which determines
how source code comments are delimited (*note Comments::).

   To view the documentation for the current major mode, including a
list of its key bindings, type ‘C-h m’ (‘describe-mode’).  *Note Misc
Help::.

   Every major mode, apart from Fundamental mode, defines a “mode hook”,
a customizable list of Lisp functions to run each time the mode is
enabled in a buffer.  *Note Hooks::, for more information about hooks.
Each mode hook is named after its major mode, e.g., Fortran mode has
‘fortran-mode-hook’.  Furthermore, all text-based major modes run
‘text-mode-hook’, and many programming language modes (1) (including all
those distributed with Emacs) run ‘prog-mode-hook’, prior to running
their own mode hooks.  Hook functions can look at the value of the
variable ‘major-mode’ to see which mode is actually being entered.

   Mode hooks are commonly used to enable minor modes (*note Minor
Modes::).  For example, you can put the following lines in your init
file to enable Flyspell minor mode in all text-based major modes (*note
Spelling::), and ElDoc minor mode in Emacs Lisp mode (*note Programming
Language Doc::):

     (add-hook 'text-mode-hook 'flyspell-mode)
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)

   ---------- Footnotes ----------

   (1) More specifically, the modes which are “derived” from ‘prog-mode’
(*note (elisp)Derived Modes::).


File: emacs.info,  Node: Minor Modes,  Next: Choosing Modes,  Prev: Major Modes,  Up: Modes

24.2 Minor Modes
================

A minor mode is an optional editing mode that alters the behavior of
Emacs in some well-defined way.  Unlike major modes, any number of minor
modes can be in effect at any time.  Some minor modes are
“buffer-local”, and can be turned on (enabled) in certain buffers and
off (disabled) in others.  Other minor modes are “global”: while
enabled, they affect everything you do in the Emacs session, in all
buffers.  Most minor modes are disabled by default, but a few are
enabled by default.

   Most buffer-local minor modes say in the mode line when they are
enabled, just after the major mode indicator.  For example, ‘Fill’ in
the mode line means that Auto Fill mode is enabled.  *Note Mode Line::.

   Like major modes, each minor mode is associated with a “mode
command”, whose name consists of the mode name followed by ‘-mode’.  For
instance, the mode command for Auto Fill mode is ‘auto-fill-mode’.  But
unlike a major mode command, which simply enables the mode, the mode
command for a minor mode can either enable or disable it:

   • If you invoke the mode command directly with no prefix argument
     (either via ‘M-x’, or by binding it to a key and typing that key;
     *note Key Bindings::), that “toggles” the minor mode.  The minor
     mode is turned on if it was off, and turned off if it was on.

   • If you invoke the mode command with a prefix argument, the minor
     mode is unconditionally turned off if that argument is zero or
     negative; otherwise, it is unconditionally turned on.

   • If the mode command is called via Lisp, the minor mode is
     unconditionally turned on if the argument is omitted or ‘nil’.
     This makes it easy to turn on a minor mode from a major mode’s mode
     hook (*note Major Modes::).  A non-‘nil’ argument is handled like
     an interactive prefix argument, as described above.

   Most minor modes also have a “mode variable”, with the same name as
the mode command.  Its value is non-‘nil’ if the mode is enabled, and
‘nil’ if it is disabled.  In general, you should not try to enable or
disable the mode by changing the value of the mode variable directly in
Lisp; you should run the mode command instead.  However, setting the
mode variable through the Customize interface (*note Easy
Customization::) will always properly enable or disable the mode, since
Customize automatically runs the mode command for you.

   The following is a list of some buffer-local minor modes:

   • Abbrev mode automatically expands text based on pre-defined
     abbreviation definitions.  *Note Abbrevs::.

   • Auto Fill mode inserts newlines as you type to prevent lines from
     becoming too long.  *Note Filling::.

   • Auto Save mode saves the buffer contents periodically to reduce the
     amount of work you can lose in case of a crash.  *Note Auto Save::.

   • Electric Quote mode automatically converts quotation marks.  For
     example, it requotes text typed ‘`like this'’ to text ‘like this’.
     You can control what kind of text it operates in, and you can
     disable it entirely in individual buffers.  *Note Quotation
     Marks::.

   • Enriched mode enables editing and saving of formatted text.  *Note
     Enriched Text::.

   • Flyspell mode automatically highlights misspelled words.  *Note
     Spelling::.

   • Font-Lock mode automatically highlights certain textual units found
     in programs.  It is enabled globally by default, but you can
     disable it in individual buffers.  *Note Faces::.

   • Display Line Numbers mode is a convenience wrapper around
     ‘display-line-numbers’, setting it using the value of
     ‘display-line-numbers-type’.  *Note Display Custom::.

   • Outline minor mode provides similar facilities to the major mode
     called Outline mode.  *Note Outline Mode::.

   • Overwrite mode causes ordinary printing characters to replace
     existing text instead of shoving it to the right.  For example, if
     point is in front of the ‘B’ in ‘FOOBAR’, then in Overwrite mode
     typing a ‘G’ changes it to ‘FOOGAR’, instead of producing ‘FOOGBAR’
     as usual.  In Overwrite mode, the command ‘C-q’ inserts the next
     character whatever it may be, even if it is a digit—this gives you
     a way to insert a character instead of replacing an existing
     character.  The mode command, ‘overwrite-mode’, is bound to the
     <Insert> key.

   • Binary Overwrite mode is a variant of Overwrite mode for editing
     binary files; it treats newlines and tabs like other characters, so
     that they overwrite other characters and can be overwritten by
     them.  In Binary Overwrite mode, digits after ‘C-q’ specify an
     octal character code, as usual.

   • Visual Line mode performs word wrapping, causing long lines to be
     wrapped at word boundaries.  *Note Visual Line Mode::.

And here are some useful global minor modes:

   • Column Number mode enables display of the current column number in
     the mode line.  *Note Mode Line::.

   • Delete Selection mode causes text insertion to first delete the
     text in the region, if the region is active.  *Note Using Region::.

   • Icomplete mode displays an indication of available completions when
     you are in the minibuffer and completion is active.  *Note
     Icomplete::.

   • Line Number mode enables display of the current line number in the
     mode line.  It is enabled by default.  *Note Mode Line::.

   • Menu Bar mode gives each frame a menu bar.  It is enabled by
     default.  *Note Menu Bars::.

   • Scroll Bar mode gives each window a scroll bar.  It is enabled by
     default, but the scroll bar is only displayed on graphical
     terminals.  *Note Scroll Bars::.

   • Tool Bar mode gives each frame a tool bar.  It is enabled by
     default, but the tool bar is only displayed on graphical terminals.
     *Note Tool Bars::.

   • Tab Bar mode gives each frame a tab bar.  *Note Tab Bars::.

   • Tab Line mode gives each window a tab line.  *Note Tab Line::.

   • Transient Mark mode highlights the region, and makes many Emacs
     commands operate on the region when the mark is active.  It is
     enabled by default.  *Note Mark::.


File: emacs.info,  Node: Choosing Modes,  Prev: Minor Modes,  Up: Modes

24.3 Choosing File Modes
========================

When you visit a file, Emacs chooses a major mode automatically.
Normally, it makes the choice based on the file name—for example, files
whose names end in ‘.c’ are normally edited in C mode—but sometimes it
chooses the major mode based on special text in the file.  This special
text can also be used to enable buffer-local minor modes.

   Here is the exact procedure:

   First, Emacs checks whether the file contains file-local mode
variables.  *Note File Variables::.  If there is a file-local variable
that specifies a major mode, then Emacs uses that major mode, ignoring
all other criteria.  There are several methods to specify a major mode
using a file-local variable; the simplest is to put the mode name in the
first nonblank line, preceded and followed by ‘-*-’.  Other text may
appear on the line as well.  For example,

     ; -*-Lisp-*-

tells Emacs to use Lisp mode.  Note how the semicolon is used to make
Lisp treat this line as a comment.  You could equivalently write

     ; -*- mode: Lisp;-*-

You can also use file-local variables to specify buffer-local minor
modes, by using ‘eval’ specifications.  For example, this first nonblank
line puts the buffer in Lisp mode and enables Auto-Fill mode:

     ; -*- mode: Lisp; eval: (auto-fill-mode 1); -*-

Note, however, that it is usually inappropriate to enable minor modes
this way, since most minor modes represent individual user preferences.
If you personally want to use a minor mode for a particular file type,
it is better to enable the minor mode via a major mode hook (*note Major
Modes::).

   Second, Emacs checks whether the file’s extension matches an entry in
any directory-local ‘auto-mode-alist’.  These are found using the
‘.dir-locals.el’ facility (*note Directory Variables::).

   Third, if there is no file variable specifying a major mode, Emacs
checks whether the file’s contents begin with ‘#!’.  If so, that
indicates that the file can serve as an executable shell command, which
works by running an interpreter named on the file’s first line (the rest
of the file is used as input to the interpreter).  Therefore, Emacs
tries to use the interpreter name to choose a mode.  For instance, a
file that begins with ‘#!/usr/bin/perl’ is opened in Perl mode.  The
variable ‘interpreter-mode-alist’ specifies the correspondence between
interpreter program names and major modes.

   When the first line starts with ‘#!’, you usually cannot use the
‘-*-’ feature on the first line, because the system would get confused
when running the interpreter.  So Emacs looks for ‘-*-’ on the second
line in such files as well as on the first line.  The same is true for
man pages which start with the magic string ‘'\"’ to specify a list of
troff preprocessors.

   Fourth, Emacs tries to determine the major mode by looking at the
text at the start of the buffer, based on the variable
‘magic-mode-alist’.  By default, this variable is ‘nil’ (an empty list),
so Emacs skips this step; however, you can customize it in your init
file (*note Init File::).  The value should be a list of elements of the
form

     (REGEXP . MODE-FUNCTION)

where REGEXP is a regular expression (*note Regexps::), and
MODE-FUNCTION is a major mode command.  If the text at the beginning of
the file matches REGEXP, Emacs chooses the major mode specified by
MODE-FUNCTION.

   Alternatively, an element of ‘magic-mode-alist’ may have the form

     (MATCH-FUNCTION . MODE-FUNCTION)

where MATCH-FUNCTION is a Lisp function that is called at the beginning
of the buffer; if the function returns non-‘nil’, Emacs set the major
mode with MODE-FUNCTION.

   Fifth—if Emacs still hasn’t found a suitable major mode—it looks at
the file’s name.  The correspondence between file names and major modes
is controlled by the variable ‘auto-mode-alist’.  Its value is a list in
which each element has this form,

     (REGEXP . MODE-FUNCTION)

or this form,

     (REGEXP MODE-FUNCTION FLAG)

For example, one element normally found in the list has the form
‘("\\.c\\'" . c-mode)’, and it is responsible for selecting C mode for
files whose names end in ‘.c’.  (Note that ‘\\’ is needed in Lisp syntax
to include a ‘\’ in the string, which must be used to suppress the
special meaning of ‘.’ in regexps.)

   If the element has the form ‘(REGEXP MODE-FUNCTION FLAG)’ and FLAG is
non-‘nil’, then after calling MODE-FUNCTION (if it is non-‘nil’), Emacs
discards the suffix that matched REGEXP and searches the list again for
another match.  This “recursive extension stripping” is used for files
which have multiple extensions, and the “outer” extension hides the
“inner” one that actually specifies the right mode.  For example, backup
files and GPG-encrypted files with ‘.gpg’ extension use this feature.

   On GNU/Linux and other systems with case-sensitive file names, Emacs
performs a case-sensitive search through ‘auto-mode-alist’; if this
search fails, it performs a second case-insensitive search through the
alist.  To suppress the second search, change the variable
‘auto-mode-case-fold’ to ‘nil’.  On systems with case-insensitive file
names, such as Microsoft Windows, Emacs performs a single
case-insensitive search through ‘auto-mode-alist’.

   Finally, if Emacs _still_ hasn’t found a major mode to use, it
compares the text at the start of the buffer to the variable
‘magic-fallback-mode-alist’.  This variable works like
‘magic-mode-alist’, described above, except that it is consulted only
_after_ ‘auto-mode-alist’.  By default, ‘magic-fallback-mode-alist’
contains forms that check for image files, HTML/XML/SGML files,
PostScript files, and Unix style Conf files.

   Once a major mode is found, Emacs does a final check to see if the
mode has been remapped by ‘major-mode-remap-alist’, in which case it
uses the remapped mode instead.  This is used when several different
major modes can be used for the same file type, so you can specify which
mode you prefer.

   If you have changed the major mode of a buffer, you can return to the
major mode Emacs would have chosen automatically, by typing ‘M-x
normal-mode’.  This is the same function that ‘find-file’ calls to
choose the major mode.  If the buffer is visiting a file, this command
also processes the file’s ‘-*-’ line and file-local variables list (if
any).  *Note File Variables::.  If the buffer doesn’t visit a file, the
command processes only the major mode specification, if any, in the
‘-*-’ line and in the file-local variables list.

   The commands ‘C-x C-w’ and ‘set-visited-file-name’ change to a new
major mode if the new file name implies a mode (*note Saving::).  (‘C-x
C-s’ does this too, if the buffer wasn’t visiting a file.)  However,
this does not happen if the buffer contents specify a major mode, and
certain special major modes do not allow the mode to change.  You can
turn off this mode-changing feature by setting
‘change-major-mode-with-file-name’ to ‘nil’.


File: emacs.info,  Node: Indentation,  Next: Text,  Prev: Modes,  Up: Top

# /. 25 Indentation
******************

“Indentation” refers to inserting or adjusting “whitespace characters”
(space and/or tab characters) at the beginning of a line of text.  This
chapter documents indentation commands and options which are common to
Text mode and related modes, as well as programming language modes.
*Note Program Indent::, for additional documentation about indenting in
programming modes.

   The simplest way to perform indentation is the <TAB> key.  In most
major modes, this runs the command ‘indent-for-tab-command’.  (In C and
related modes, <TAB> runs the command ‘c-indent-line-or-region’, which
behaves similarly, *note C Indent::).

<TAB>
     Insert whitespace, or indent the current line, in a
     mode-appropriate way (‘indent-for-tab-command’).  If the region is
     active, indent all the lines within it.

   The exact behavior of <TAB> depends on the major mode.  In Text mode
and related major modes, <TAB> normally inserts some combination of
space and tab characters to advance point to the next tab stop (*note
Tab Stops::).  For this purpose, the position of the first
non-whitespace character on the preceding line is treated as an
additional tab stop, so you can use <TAB> to align point with the
preceding line.  If the region is active (*note Using Region::), <TAB>
acts specially: it indents each line in the region so that its first
non-whitespace character is aligned with the preceding line.

   In programming modes, <TAB> indents the current line of code in a way
that makes sense given the code in the preceding lines.  If the region
is active, all the lines in the region are indented this way.  If point
was initially within the current line’s indentation, it is repositioned
to the first non-whitespace character on the line.

   If you just want to insert a tab character in the buffer, type ‘C-q
<TAB>’ (*note Inserting Text::).

* Menu:

* Indentation Commands::  More commands for performing indentation.
* Tab Stops::             Stop points for indentation in Text modes.
* Just Spaces::           Using only space characters for indentation.
* Indent Convenience::    Optional indentation features.


File: emacs.info,  Node: Indentation Commands,  Next: Tab Stops,  Up: Indentation

25.1 Indentation Commands
=========================

Apart from the ‘<TAB>’ (‘indent-for-tab-command’) command, Emacs
provides a variety of commands to perform indentation in other ways.

‘C-M-o’
     Split the current line at point (‘split-line’).  The text on the
     line after point becomes a new line, indented to the same column
     where point is located.  This command first moves point forward
     over any spaces and tabs.  Afterward, point is positioned before
     the inserted newline.

‘M-m’
     Move (forward or back) to the first non-whitespace character on the
     current line (‘back-to-indentation’).  If there are no
     non-whitespace characters on the line, move to the end of the line.

‘M-i’
     Indent whitespace at point, up to the next tab stop
     (‘tab-to-tab-stop’).  *Note Tab Stops::.

‘M-x indent-relative’
     Insert whitespace at point, until point is aligned with the first
     non-whitespace character on the previous line (actually, the last
     non-blank line).  If point is already farther right than that, run
     ‘tab-to-tab-stop’ instead—unless called with a numeric argument, in
     which case do nothing.

‘M-^’
     Merge the previous and the current line (‘delete-indentation’).
     This joins the two lines cleanly, by replacing any indentation at
     the front of the current line, together with the line boundary,
     with a single space.

     As a special case (useful for Lisp code), the single space is
     omitted if the characters to be joined are consecutive opening and
     closing parentheses, or if the junction follows another newline.

     If there is a fill prefix, ‘M-^’ deletes the fill prefix if it
     appears after the newline that is deleted.  *Note Fill Prefix::.

     With a prefix argument, join the current line to the following
     line.  If the region is active, and no prefix argument is given,
     join all lines in the region instead.

‘C-M-\’
     Indent all the lines in the region, as though you had typed ‘<TAB>’
     at the beginning of each line (‘indent-region’).

     If a numeric argument is supplied, indent every line in the region
     to that column number.

‘C-x <TAB>’
     Indent all lines that begin in the region, moving the affected
     lines as a rigid unit (‘indent-rigidly’).

     If called with no argument, this command activates a transient mode
     for adjusting the indentation of the affected lines interactively.
     While this transient mode is active, typing ‘<LEFT>’ or ‘<RIGHT>’
     indents leftward and rightward, respectively, by one space.  You
     can also type ‘S-<LEFT>’ or ‘S-<RIGHT>’ to indent leftward or
     rightward to the next tab stop (*note Tab Stops::).  Typing any
     other key disables the transient mode, and this key is then acted
     upon as normally.

     If called with a prefix argument N, this command indents the lines
     forward by N spaces (without enabling the transient mode).
     Negative values of N indent backward, so you can remove all
     indentation from the lines in the region using a large negative
     argument, like this:

          C-u -999 C-x <TAB>


File: emacs.info,  Node: Tab Stops,  Next: Just Spaces,  Prev: Indentation Commands,  Up: Indentation

25.2 Tab Stops
==============

Emacs defines certain column numbers to be “tab stops”.  These are used
as stopping points by <TAB> when inserting whitespace in Text mode and
related modes (*note Indentation::), and by commands like ‘M-i’ (*note
Indentation Commands::).  The variable ‘tab-stop-list’ controls these
positions.  The default value is ‘nil’, which means a tab stop every 8
columns.  The value can also be a list of zero-based column numbers (in
increasing order) at which to place tab stops.  Emacs extends the list
forever by repeating the difference between the last and next-to-last
elements.

   Instead of customizing the variable ‘tab-stop-list’ directly, a
convenient way to view and set tab stops is via the command ‘M-x
edit-tab-stops’.  This switches to a buffer containing a description of
the tab stop settings, which looks like this:

             :       :       :       :       :       :
     0         1         2         3         4
     0123456789012345678901234567890123456789012345678
     To install changes, type C-c C-c

The first line contains a colon at each tab stop.  The numbers on the
next two lines are present just to indicate where the colons are.  If
the value of ‘tab-stop-list’ is ‘nil’, as it is by default, no colons
are displayed initially.

   You can edit this buffer to specify different tab stops by placing
colons on the desired columns.  The buffer uses Overwrite mode (*note
Minor Modes::).  Remember that Emacs will extend the list of tab stops
forever by repeating the difference between the last two explicit stops
that you place.  When you are done, type ‘C-c C-c’ to make the new tab
stops take effect.  Normally, the new tab stop settings apply to all
buffers.  However, if you have made the ‘tab-stop-list’ variable local
to the buffer where you called ‘M-x edit-tab-stops’ (*note Locals::),
then the new tab stop settings apply only to that buffer.  To save the
tab stop settings for future Emacs sessions, use the Customize interface
to save the value of ‘tab-stop-list’ (*note Easy Customization::).

   Note that the tab stops discussed in this section have nothing to do
with how tab characters are displayed in the buffer.  Tab characters are
always displayed as empty spaces extending to the next “display tab
stop”.  *Note Text Display::.


File: emacs.info,  Node: Just Spaces,  Next: Indent Convenience,  Prev: Tab Stops,  Up: Indentation

25.3 Tabs vs. Spaces
====================

Normally, indentation commands insert (or remove) the shortest possible
series of tab and space characters so as to align to the desired column.
Tab characters are displayed as a stretch of empty space extending to
the next “display tab stop”.  By default, there is one display tab stop
every ‘tab-width’ columns (the default is 8).  *Note Text Display::.

   If you prefer, all indentation can be made from spaces only.  To
request this, set the buffer-local variable ‘indent-tabs-mode’ to ‘nil’.
*Note Locals::, for information about setting buffer-local variables.
Note, however, that ‘C-q <TAB>’ always inserts a tab character,
regardless of the value of ‘indent-tabs-mode’.

   One reason to set ‘indent-tabs-mode’ to ‘nil’ is that not all editors
display tab characters in the same way.  Emacs users, too, may have
different customized values of ‘tab-width’.  By using spaces only, you
can make sure that your file always looks the same.  If you only care
about how it looks within Emacs, another way to tackle this problem is
to set the ‘tab-width’ variable in a file-local variable (*note File
Variables::).

   There are also commands to convert tabs to spaces or vice versa,
always preserving the columns of all non-whitespace text.  ‘M-x tabify’
scans the region for sequences of spaces, and converts sequences of at
least two spaces to tabs if that can be done without changing
indentation.  ‘M-x untabify’ changes all tabs in the region to
appropriate numbers of spaces.


File: emacs.info,  Node: Indent Convenience,  Prev: Just Spaces,  Up: Indentation

25.4 Convenience Features for Indentation
=========================================

The variable ‘tab-always-indent’ tweaks the behavior of the <TAB>
(‘indent-for-tab-command’) command.  The default value, ‘t’, gives the
behavior described in *note Indentation::.  If you change the value to
the symbol ‘complete’, then <TAB> first tries to indent the current
line, and if the line was already indented, it tries to complete the
text at point (*note Symbol Completion::).  If the value is ‘nil’, then
<TAB> indents the current line only if point is at the left margin or in
the line’s indentation; otherwise, it inserts a tab character.

   If ‘tab-always-indent’ is ‘complete’, whether to expand or indent can
be further customized via the ‘tab-first-completion’ variable.  For
instance, if that variable is ‘eol’, only complete if point is at the
end of a line.  *Note (elisp)Mode-Specific Indent::, for further
details.

   Electric Indent mode is a global minor mode that automatically
indents the line after every <RET> you type.  This mode is enabled by
default.  To toggle this minor mode, type ‘M-x electric-indent-mode’.
To toggle the mode in a single buffer, use ‘M-x
electric-indent-local-mode’.


File: emacs.info,  Node: Text,  Next: Programs,  Prev: Indentation,  Up: Top

# /. 26 Commands for Human Languages
***********************************

This chapter describes Emacs commands that act on “text”, by which we
mean sequences of characters in a human language (as opposed to, say, a
computer programming language).  These commands act in ways that take
into account the syntactic and stylistic conventions of human languages:
conventions involving words, sentences, paragraphs, and capital letters.
There are also commands for “filling”, which means rearranging the lines
of a paragraph to be approximately equal in length.  These commands,
while intended primarily for editing text, are also often useful for
editing programs.

   Emacs has several major modes for editing human-language text.  If
the file contains ordinary text, use Text mode, which customizes Emacs
in small ways for the syntactic conventions of text.  Outline mode
provides special commands for operating on text with an outline
structure.  *Note Outline Mode::.

   Org mode extends Outline mode and turns Emacs into a full-fledged
organizer: you can manage TODO lists, store notes and publish them in
many formats.  *Note The Org Manual: (org)Top.

   Emacs has other major modes for text which contains embedded
commands, such as TeX and LaTeX (*note TeX Mode::); HTML and SGML (*note
HTML Mode::); XML (*note The nXML Mode Manual: (nxml-mode)Top.); and
Groff and Nroff (*note Nroff Mode::).

   If you need to edit ASCII art pictures made out of text characters,
use Picture mode, a special major mode for editing such pictures.  *Note
Picture Mode::.

   The automatic typing features may be useful when writing text.  *Note
Autotyping: (autotype)Top.

* Menu:

* Words::               Moving over and killing words.
* Sentences::           Moving over and killing sentences.
* Paragraphs::          Moving over paragraphs.
* Pages::               Moving over pages.
* Quotation Marks::     Inserting quotation marks.
* Filling::             Filling or justifying text.
* Case::                Changing the case of text.
* Text Mode::           The major modes for editing text files.
* Outline Mode::        Editing outlines.
* Org Mode::            The Emacs organizer.
* TeX Mode::            Editing TeX and LaTeX files.
* HTML Mode::           Editing HTML and SGML files.
* Nroff Mode::          Editing input to the nroff formatter.
* Enriched Text::       Editing text enriched with fonts, colors, etc.
* Text Based Tables::   Commands for editing text-based tables.
* Two-Column::          Splitting text columns into separate windows.


File: emacs.info,  Node: Words,  Next: Sentences,  Up: Text

26.1 Words
==========

Emacs defines several commands for moving over or operating on words:

‘M-f’
     Move forward over a word (‘forward-word’).
‘M-b’
     Move backward over a word (‘backward-word’).
‘M-d’
     Kill up to the end of a word (‘kill-word’).
‘M-<DEL>’
     Kill back to the beginning of a word (‘backward-kill-word’).
‘M-@’
     Set mark at the end of the next word (‘mark-word’).
‘M-t’
     Transpose two words or drag a word across others
     (‘transpose-words’).

   Notice how these keys form a series that parallels the
character-based ‘C-f’, ‘C-b’, ‘C-d’, <DEL> and ‘C-t’.  ‘M-@’ is cognate
to ‘C-@’, which is an alias for ‘C-<SPC>’.

   The commands ‘M-f’ (‘forward-word’) and ‘M-b’ (‘backward-word’) move
forward and backward over words.  These <Meta>-based key sequences are
analogous to the key sequences ‘C-f’ and ‘C-b’, which move over single
characters.  The analogy extends to numeric arguments, which serve as
repeat counts.  ‘M-f’ with a negative argument moves backward, and ‘M-b’
with a negative argument moves forward.  Forward motion stops right
after the last letter of the word, while backward motion stops right
before the first letter.

   ‘M-d’ (‘kill-word’) kills the word after point.  To be precise, it
kills everything from point to the place ‘M-f’ would move to.  Thus, if
point is in the middle of a word, ‘M-d’ kills just the part after point.
If some punctuation comes between point and the next word, it is killed
along with the word.  (If you wish to kill only the next word but not
the punctuation before it, simply do ‘M-f’ to get the end, and kill the
word backwards with ‘M-<DEL>’.)  ‘M-d’ takes arguments just like ‘M-f’.

   ‘M-<DEL>’ (‘backward-kill-word’) kills the word before point.  It
kills everything from point back to where ‘M-b’ would move to.  For
instance, if point is after the space in ‘FOO, BAR’, it kills ‘FOO, ’.
If you wish to kill just ‘FOO’, and not the comma and the space, use
‘M-b M-d’ instead of ‘M-<DEL>’.

   ‘M-t’ (‘transpose-words’) exchanges the word before or containing
point with the following word.  The delimiter characters between the
words do not move.  For example, ‘FOO, BAR’ transposes into ‘BAR, FOO’
rather than ‘BAR FOO,’.  *Note Transpose::, for more on transposition.

   To operate on words with an operation which acts on the region, use
the command ‘M-@’ (‘mark-word’).  This command sets the mark where ‘M-f’
would move to.  *Note Marking Objects::, for more information about this
command.

   The word commands’ understanding of word boundaries is controlled by
the syntax table.  Any character can, for example, be declared to be a
word delimiter.  *Note Syntax Tables: (elisp)Syntax Tables.

   In addition, see *note Position Info:: for the ‘M-=’
(‘count-words-region’) and ‘M-x count-words’ commands, which count and
report the number of words in the region or buffer.


File: emacs.info,  Node: Sentences,  Next: Paragraphs,  Prev: Words,  Up: Text

26.2 Sentences
==============

The Emacs commands for manipulating sentences and paragraphs are mostly
on Meta keys, like the word-handling commands.

‘M-a’
     Move back to the beginning of the sentence (‘backward-sentence’).
‘M-e’
     Move forward to the end of the sentence (‘forward-sentence’).
‘M-k’
     Kill forward to the end of the sentence (‘kill-sentence’).
‘C-x <DEL>’
     Kill back to the beginning of the sentence
     (‘backward-kill-sentence’).

   The commands ‘M-a’ (‘backward-sentence’) and ‘M-e’
(‘forward-sentence’) move to the beginning and end of the current
sentence, respectively.  Their bindings were chosen to resemble ‘C-a’
and ‘C-e’, which move to the beginning and end of a line.  Unlike them,
‘M-a’ and ‘M-e’ move over successive sentences if repeated.

   Moving backward over a sentence places point just before the first
character of the sentence; moving forward places point right after the
punctuation that ends the sentence.  Neither one moves over the
whitespace at the sentence boundary.

   Just as ‘C-a’ and ‘C-e’ have a kill command, ‘C-k’, to go with them,
‘M-a’ and ‘M-e’ have a corresponding kill command: ‘M-k’
(‘kill-sentence’) kills from point to the end of the sentence.  With a
positive numeric argument N, it kills the next N sentences; with a
negative argument −N, it kills back to the beginning of the Nth
preceding sentence.

   The ‘C-x <DEL>’ (‘backward-kill-sentence’) kills back to the
beginning of a sentence.

   The sentence commands assume that you follow the American typist’s
convention of putting two spaces at the end of a sentence.  That is, a
sentence ends wherever there is a ‘.’, ‘?’ or ‘!’ followed by the end of
a line or two spaces, with any number of ‘)’, ‘]’, ‘'’, or ‘"’
characters allowed in between.  A sentence also begins or ends wherever
a paragraph begins or ends.  It is useful to follow this convention,
because it allows the Emacs sentence commands to distinguish between
periods that end a sentence and periods that indicate abbreviations.

   If you want to use just one space between sentences, you can set the
variable ‘sentence-end-double-space’ to ‘nil’ to make the sentence
commands stop for single spaces.  However, this has a drawback: there is
no way to distinguish between periods that end sentences and those that
indicate abbreviations.  For convenient and reliable editing, we
therefore recommend you follow the two-space convention.  The variable
‘sentence-end-double-space’ also affects filling (*note Fill
Commands::).

   The variable ‘sentence-end’ controls how to recognize the end of a
sentence.  If non-‘nil’, its value should be a regular expression, which
is used to match the last few characters of a sentence, together with
the whitespace following the sentence (*note Regexps::).  If the value
is ‘nil’, the default, then Emacs computes sentence ends according to
various criteria such as the value of ‘sentence-end-double-space’.

   Some languages, such as Thai, do not use periods to indicate the end
of a sentence.  Set the variable ‘sentence-end-without-period’ to ‘t’ in
such cases.


File: emacs.info,  Node: Paragraphs,  Next: Pages,  Prev: Sentences,  Up: Text

26.3 Paragraphs
===============

The Emacs commands for manipulating paragraphs are also on Meta keys.

‘M-{’
     Move back to previous paragraph beginning (‘backward-paragraph’).
‘M-}’
     Move forward to next paragraph end (‘forward-paragraph’).
‘M-h’
     Put point and mark around this or next paragraph
     (‘mark-paragraph’).

   ‘M-{’ (‘backward-paragraph’) moves to the beginning of the current or
previous paragraph, depending on where point is when the command is
invoked (see below for the definition of a paragraph).  ‘M-}’
(‘forward-paragraph’) similarly moves to the end of the current or next
paragraph.  If there is a blank line before the paragraph, ‘M-{’ moves
to the blank line.

   When you wish to operate on a paragraph, type ‘M-h’
(‘mark-paragraph’) to set the region around it.  For example, ‘M-h C-w’
kills the paragraph around or after point.  ‘M-h’ puts point at the
beginning and mark at the end of the paragraph point was in.  If point
is between paragraphs (in a run of blank lines, or at a boundary), ‘M-h’
sets the region around the paragraph following point.  If there are
blank lines preceding the first line of the paragraph, one of these
blank lines is included in the region.  If the region is already active,
the command sets the mark without changing point, and each subsequent
‘M-h’ further advances the mark by one paragraph.

   The definition of a paragraph depends on the major mode.  In
Fundamental mode, as well as Text mode and related modes, a paragraph is
separated from neighboring paragraphs by one or more “blank lines”—lines
that are either empty, or consist solely of space, tab and/or formfeed
characters.  In programming language modes, paragraphs are usually
defined in a similar way, so that you can use the paragraph commands
even though there are no paragraphs as such in a program.

   Note that an indented line is _not_ itself a paragraph break in Text
mode.  If you want indented lines to separate paragraphs, use
Paragraph-Indent Text mode instead.  *Note Text Mode::.

   If you set a fill prefix, then paragraphs are delimited by all lines
which don’t start with the fill prefix.  *Note Filling::.

   The precise definition of a paragraph boundary is controlled by the
variables ‘paragraph-separate’ and ‘paragraph-start’.  The value of
‘paragraph-start’ is a regular expression that should match lines that
either start or separate paragraphs (*note Regexps::).  The value of
‘paragraph-separate’ is another regular expression that should match
lines that separate paragraphs without being part of any paragraph (for
example, blank lines).  Lines that start a new paragraph and are
contained in it must match only ‘paragraph-start’, not
‘paragraph-separate’.  For example, in Fundamental mode,
‘paragraph-start’ is ‘"\f\\|[ \t]*$"’, and ‘paragraph-separate’ is
‘"[ \t\f]*$"’.

   Note that ‘paragraph-start’ and ‘paragraph-separate’ are matched
against the text at the left margin, which is not necessarily the
beginning of the line, so these regexps should not use ‘^’ as an anchor,
to ensure that the paragraph functions will work equally within a region
of text indented by a margin setting.


File: emacs.info,  Node: Pages,  Next: Quotation Marks,  Prev: Paragraphs,  Up: Text

26.4 Pages
==========

Within some text files, text is divided into “pages” delimited by the
“formfeed character” (ASCII code 12, also denoted as ‘control-L’), which
is displayed in Emacs as the escape sequence ‘^L’ (*note Text
Display::).  Traditionally, when such text files are printed to
hardcopy, each formfeed character forces a page break.  Most Emacs
commands treat it just like any other character, so you can insert it
with ‘C-q C-l’, delete it with <DEL>, etc.  In addition, Emacs provides
commands to move over pages and operate on them.

‘M-x what-page’
     Display the page number of point, and the line number within that
     page.
‘C-x [’
     Move point to previous page boundary (‘backward-page’).
‘C-x ]’
     Move point to next page boundary (‘forward-page’).
‘C-x C-p’
     Put point and mark around this page (or another page)
     (‘mark-page’).
‘C-x l’
     Count the lines in this page (‘count-lines-page’).

   ‘M-x what-page’ counts pages from the beginning of the file, and
counts lines within the page, showing both numbers in the echo area.

   The ‘C-x [’ (‘backward-page’) command moves point to immediately
after the previous page delimiter.  If point is already right after a
page delimiter, it skips that one and stops at the previous one.  A
numeric argument serves as a repeat count.  The ‘C-x ]’ (‘forward-page’)
command moves forward past the next page delimiter.

   The ‘C-x C-p’ command (‘mark-page’) puts point at the beginning of
the current page (after that page delimiter at the front), and the mark
at the end of the page (after the page delimiter at the end).

   ‘C-x C-p C-w’ is a handy way to kill a page to move it elsewhere.  If
you move to another page delimiter with ‘C-x [’ and ‘C-x ]’, then yank
the killed page, all the pages will be properly delimited once again.
Making sure this works as expected is the reason ‘C-x C-p’ includes only
the following page delimiter in the region.

   A numeric argument to ‘C-x C-p’ specifies which page to go to,
relative to the current one.  Zero means the current page, one means the
next page, and −1 means the previous one.

   The ‘C-x l’ command (‘count-lines-page’) is good for deciding where
to break a page in two.  It displays in the echo area the total number
of lines in the current page, and then divides it up into those
preceding the current line and those following, as in

     Page has 96 (72+25) lines

Notice that the sum is off by one; this is correct if point is not at
the beginning of a line.

   The variable ‘page-delimiter’ controls where pages begin.  Its value
is a regular expression that matches the beginning of a line that
separates pages (*note Regexps::).  The normal value of this variable is
‘"^\f"’, which matches a formfeed character at the beginning of a line.


File: emacs.info,  Node: Quotation Marks,  Next: Filling,  Prev: Pages,  Up: Text

26.5 Quotation Marks
====================

One common way to quote is the typewriter convention, which quotes using
straight apostrophes ‘'like this'’ or double-quotes ‘"like this"’.
Another common way is the curved quote convention, which uses left and
right single or double quotation marks ‘like this’ or “like this”(1).
In text files, typewriter quotes are simple and portable; curved quotes
are less ambiguous and typically look nicer.

   Electric Quote mode makes it easier to type curved quotes.  As you
type characters it optionally converts ‘`’ to ‘, ‘'’ to ’, ‘``’ to “,
and ‘''’ to ”.  It’s possible to change the default quotes listed above,
by customizing the variable ‘electric-quote-chars’, a list of four
characters, where the items correspond to the left single quote, the
right single quote, the left double quote and the right double quote,
respectively, whose default value is ‘'(?‘ ?’ ?“ ?”)’.

   You can customize the behavior of Electric Quote mode by customizing
variables that control where it is active.  It is active in text
paragraphs if ‘electric-quote-paragraph’ is non-‘nil’, in
programming-language comments if ‘electric-quote-comment’ is non-‘nil’,
and in programming-language strings if ‘electric-quote-string’ is
non-‘nil’.  The default is ‘nil’ for ‘electric-quote-string’ and ‘t’ for
the other variables.

   You can also set the option ‘electric-quote-replace-double’ to a
non-‘nil’ value.  Then, typing ‘"’ inserts an appropriate curved double
quote depending on context: “ at the beginning of the buffer or after a
line break, whitespace, opening parenthesis, or quote character, and ”
otherwise.

   Electric Quote mode is disabled by default.  To toggle it in a single
buffer, use ‘M-x electric-quote-local-mode’.  To toggle it globally,
type ‘M-x electric-quote-mode’.  To suppress it for a single use, type
‘C-q `’ or ‘C-q '’ instead of ‘`’ or ‘'’.  To insert a curved quote even
when Electric Quote is disabled or inactive, you can type ‘C-x 8 [’ for
‘, ‘C-x 8 ]’ for ’, ‘C-x 8 {’ for “, and ‘C-x 8 }’ for ”.  *Note
Inserting Text::.  Note that the value of ‘electric-quote-chars’ does
not affect these key bindings, they are not key bindings of
‘electric-quote-mode’ but bound in ‘global-map’.

   ---------- Footnotes ----------

   (1) The curved single quote characters are U+2018 LEFT SINGLE
QUOTATION MARK and U+2019 RIGHT SINGLE QUOTATION MARK; the curved double
quotes are U+201C LEFT DOUBLE QUOTATION MARK and U+201D RIGHT DOUBLE
QUOTATION MARK.  On text terminals which cannot display these
characters, the Info reader might show them as the typewriter ASCII
quote characters.


File: emacs.info,  Node: Filling,  Next: Case,  Prev: Quotation Marks,  Up: Text

26.6 Filling Text
=================

“Filling” text means breaking it up into lines that fit a specified
width.  Emacs does filling in two ways.  In Auto Fill mode, inserting
text with self-inserting characters also automatically fills it.  There
are also explicit fill commands that you can use when editing text.

* Menu:

* Auto Fill::      Auto Fill mode breaks long lines automatically.
* Fill Commands::  Commands to refill paragraphs and center lines.
* Fill Prefix::    Filling paragraphs that are indented or in a comment, etc.
* Adaptive Fill::  How Emacs can determine the fill prefix automatically.


File: emacs.info,  Node: Auto Fill,  Next: Fill Commands,  Up: Filling

26.6.1 Auto Fill Mode
---------------------

“Auto Fill” mode is a buffer-local minor mode (*note Minor Modes::) in
which lines are broken automatically when the line becomes too wide and
you type ‘<SPC>’ or ‘<RET>’.

‘M-x auto-fill-mode’
     Enable or disable Auto Fill mode.
‘<SPC>’
‘<RET>’
     In Auto Fill mode, break lines when appropriate.

   The mode command ‘M-x auto-fill-mode’ toggles Auto Fill mode in the
current buffer.  Like any other minor mode, with a positive numeric
argument, it enables Auto Fill mode, and with a negative argument it
disables it.  To enable Auto Fill mode automatically in certain major
modes, add ‘auto-fill-mode’ to the mode hooks (*note Major Modes::).
When Auto Fill mode is enabled, the mode indicator ‘Fill’ appears in the
mode line (*note Mode Line::).

   Auto Fill mode breaks lines automatically at the appropriate places
whenever lines get longer than the desired width.  This line breaking
occurs only when you type ‘<SPC>’ or ‘<RET>’.  If you wish to insert a
space or newline without permitting line-breaking, type ‘C-q <SPC>’ or
‘C-q C-j’ respectively.  Also, ‘C-o’ inserts a newline without line
breaking.

   The place where Auto Fill breaks a line depends on the line’s
characters.  For characters from ASCII, Latin, and most other scripts
Emacs breaks a line on space characters, to keep the words intact.  But
for CJK scripts, a line can be broken between any two characters.  (If
you load the ‘kinsoku’ library, Emacs will avoid breaking a line between
certain pairs of CJK characters, where special rules prohibit that.)

   When Auto Fill mode breaks a line, it tries to obey the “adaptive
fill prefix”: if a fill prefix can be deduced from the first and/or
second line of the current paragraph, it is inserted into the new line
(*note Adaptive Fill::).  Otherwise the new line is indented, as though
you had typed <TAB> on it (*note Indentation::).  In a programming
language mode, if a line is broken in the middle of a comment, the
comment is split by inserting new comment delimiters as appropriate.

   Auto Fill mode does not refill entire paragraphs; it breaks lines but
does not merge lines.  Therefore, editing in the middle of a paragraph
can result in a paragraph that is not correctly filled.  To fill it,
call the explicit fill commands (*note Fill Commands::).

   A similar feature that wraps long lines automatically at display time
is Visual Line Mode (*note Visual Line Mode::).


File: emacs.info,  Node: Fill Commands,  Next: Fill Prefix,  Prev: Auto Fill,  Up: Filling

26.6.2 Explicit Fill Commands
-----------------------------

‘M-q’
     Fill current paragraph (‘fill-paragraph’).
‘C-x f’
     Set the fill column (‘set-fill-column’).
‘M-x fill-region’
     Fill each paragraph in the region (‘fill-region’).
‘M-x fill-region-as-paragraph’
     Fill the region, considering it as one paragraph.
‘M-x center-line’
     Center a line.

   The command ‘M-q’ (‘fill-paragraph’) “fills” the current paragraph.
It redistributes the line breaks within the paragraph, and deletes any
excess space and tab characters occurring within the paragraph, in such
a way that the lines end up fitting within a certain maximum width.
Like Auto Fill mode, this and other filling commands usually break lines
at space characters, but for CJK characters these commands can break a
line between almost any two characters, and they can also obey the
kinsoku rules.  *Note Auto Fill::.

   Normally, ‘M-q’ acts on the paragraph where point is, but if point is
between paragraphs, it acts on the paragraph after point.  If the region
is active, it acts instead on the text in the region.  You can also call
‘M-x fill-region’ to specifically fill the text in the region.

   ‘M-q’ and ‘fill-region’ use the usual Emacs criteria for finding
paragraph boundaries (*note Paragraphs::).  For more control, you can
use ‘M-x fill-region-as-paragraph’, which refills everything between
point and mark as a single paragraph.  This command deletes any blank
lines within the region, so separate blocks of text end up combined into
one block.

   A numeric argument to ‘M-q’ tells it to “justify” the text as well as
filling it.  This means that extra spaces are inserted to make the right
margin line up exactly at the fill column.  To remove the extra spaces,
use ‘M-q’ with no argument.  (Likewise for ‘fill-region’.)

   The maximum line width for filling is specified by the buffer-local
variable ‘fill-column’.  The default value (*note Locals::) is 70.  The
easiest way to set ‘fill-column’ in the current buffer is to use the
command ‘C-x f’ (‘set-fill-column’).  With a numeric argument, it uses
that as the new fill column.  With just ‘C-u’ as argument, it sets
‘fill-column’ to the current horizontal position of point.  Note that,
by its very nature, ‘fill-column’ is measured in column units; the
actual position of that column on a graphical display depends on the
font being used.  In particular, using variable-pitch fonts will cause
the ‘fill-column’ occupy different horizontal positions on display in
different lines.

   The command ‘M-x center-line’ centers the current line within the
current fill column.  With an argument N, it centers N lines
individually and moves past them.  This binding is made by Text mode and
is available only in that and related modes (*note Text Mode::).

   By default, Emacs considers a period followed by two spaces or by a
newline as the end of a sentence; a period followed by just one space
indicates an abbreviation, not the end of a sentence.  Accordingly, the
fill commands will not break a line after a period followed by just one
space.  If you set the variable ‘sentence-end-double-space’ to ‘nil’,
the fill commands will break a line after a period followed by one
space, and put just one space after each period.  *Note Sentences::, for
other effects and possible drawbacks of this.

   If the variable ‘colon-double-space’ is non-‘nil’, the fill commands
put two spaces after a colon.

   To specify additional conditions where line-breaking is not allowed,
customize the abnormal hook variable ‘fill-nobreak-predicate’ (*note
Hooks::).  Each function in this hook is called with no arguments, with
point positioned where Emacs is considering breaking a line.  If a
function returns a non-‘nil’ value, Emacs will not break the line there.
Functions you can use there include: ‘fill-single-word-nobreak-p’ (don’t
break after the first word of a sentence or before the last);
‘fill-single-char-nobreak-p’ (don’t break after a one-letter word
preceded by a whitespace character); ‘fill-french-nobreak-p’ (don’t
break after ‘(’ or before ‘)’, ‘:’ or ‘?’); and ‘fill-polish-nobreak-p’
(don’t break after a one letter word, even if preceded by a
non-whitespace character).

   Emacs can display an indicator in the ‘fill-column’ position using
the Display fill column indicator mode (*note
display-fill-column-indicator: Displaying Boundaries.).


File: emacs.info,  Node: Fill Prefix,  Next: Adaptive Fill,  Prev: Fill Commands,  Up: Filling

26.6.3 The Fill Prefix
----------------------

The “fill prefix” feature allows paragraphs to be filled so that each
line starts with a special string of characters (such as a sequence of
spaces, giving an indented paragraph).  You can specify a fill prefix
explicitly; otherwise, Emacs tries to deduce one automatically (*note
Adaptive Fill::).

‘C-x .’
     Set the fill prefix (‘set-fill-prefix’).
‘M-q’
     Fill a paragraph using current fill prefix (‘fill-paragraph’).
‘M-x fill-individual-paragraphs’
     Fill the region, considering each change of indentation as starting
     a new paragraph.
‘M-x fill-nonuniform-paragraphs’
     Fill the region, considering only paragraph-separator lines as
     starting a new paragraph.

   To specify a fill prefix for the current buffer, move to a line that
starts with the desired prefix, put point at the end of the prefix, and
type ‘C-x .’ (‘set-fill-prefix’).  (That’s a period after the ‘C-x’.)
To turn off the fill prefix, specify an empty prefix: type ‘C-x .’ with
point at the beginning of a line.

   When a fill prefix is in effect, the fill commands remove the fill
prefix from each line of the paragraph before filling, and insert it on
each line after filling.  (The beginning of the first line of the
paragraph is left unchanged, since often that is intentionally
different.)  Auto Fill mode also inserts the fill prefix automatically
when it makes a new line (*note Auto Fill::).  The ‘C-o’ command inserts
the fill prefix on new lines it creates, when you use it at the
beginning of a line (*note Blank Lines::).  Conversely, the command
‘M-^’ deletes the prefix (if it occurs) after the newline that it
deletes (*note Indentation::).

   For example, if ‘fill-column’ is 40 and you set the fill prefix to
‘;; ’, then ‘M-q’ in the following text

     ;; This is an
     ;; example of a paragraph
     ;; inside a Lisp-style comment.

produces this:

     ;; This is an example of a paragraph
     ;; inside a Lisp-style comment.

   Lines that do not start with the fill prefix are considered to start
paragraphs, both in ‘M-q’ and the paragraph commands; this gives good
results for paragraphs with hanging indentation (every line indented
except the first one).  Lines which are blank or indented once the
prefix is removed also separate or start paragraphs; this is what you
want if you are writing multi-paragraph comments with a comment
delimiter on each line.

   You can use ‘M-x fill-individual-paragraphs’ to set the fill prefix
for each paragraph automatically.  This command divides the region into
paragraphs, treating every change in the amount of indentation as the
start of a new paragraph, and fills each of these paragraphs.  Thus, all
the lines in one paragraph have the same amount of indentation.  That
indentation serves as the fill prefix for that paragraph.

   ‘M-x fill-nonuniform-paragraphs’ is a similar command that divides
the region into paragraphs in a different way.  It considers only
paragraph-separating lines (as defined by ‘paragraph-separate’) as
starting a new paragraph.  Since this means that the lines of one
paragraph may have different amounts of indentation, the fill prefix
used is the smallest amount of indentation of any of the lines of the
paragraph.  This gives good results with styles that indent a
paragraph’s first line more or less that the rest of the paragraph.

   The fill prefix is stored in the variable ‘fill-prefix’.  Its value
is a string, or ‘nil’ when there is no fill prefix.  This is a
per-buffer variable; altering the variable affects only the current
buffer, but there is a default value which you can change as well.
*Note Locals::.

   The ‘indentation’ text property provides another way to control the
amount of indentation paragraphs receive.  *Note Enriched Indentation::.


File: emacs.info,  Node: Adaptive Fill,  Prev: Fill Prefix,  Up: Filling

26.6.4 Adaptive Filling
-----------------------

The fill commands can deduce the proper fill prefix for a paragraph
automatically in certain cases: either whitespace or certain punctuation
characters at the beginning of a line are propagated to all lines of the
paragraph.

   If the paragraph has two or more lines, the fill prefix is taken from
the paragraph’s second line, but only if it appears on the first line as
well.

   If a paragraph has just one line, fill commands _may_ take a prefix
from that line.  The decision is complicated because there are three
reasonable things to do in such a case:

   • Use the first line’s prefix on all the lines of the paragraph.

   • Indent subsequent lines with whitespace, so that they line up under
     the text that follows the prefix on the first line, but don’t
     actually copy the prefix from the first line.

   • Don’t do anything special with the second and following lines.

   All three of these styles of formatting are commonly used.  So the
fill commands try to determine what you would like, based on the prefix
that appears and on the major mode.  Here is how.

   If the prefix found on the first line matches
‘adaptive-fill-first-line-regexp’, or if it appears to be a
comment-starting sequence (this depends on the major mode), then the
prefix found is used for filling the paragraph, provided it would not
act as a paragraph starter on subsequent lines.

   Otherwise, the prefix found is converted to an equivalent number of
spaces, and those spaces are used as the fill prefix for the rest of the
lines, provided they would not act as a paragraph starter on subsequent
lines.

   In Text mode, and other modes where only blank lines and page
delimiters separate paragraphs, the prefix chosen by adaptive filling
never acts as a paragraph starter, so it can always be used for filling.

   The variable ‘adaptive-fill-regexp’ determines what kinds of line
beginnings can serve as a fill prefix: any characters at the start of
the line that match this regular expression are used.  If you set the
variable ‘adaptive-fill-mode’ to ‘nil’, the fill prefix is never chosen
automatically.

   You can specify more complex ways of choosing a fill prefix
automatically by setting the variable ‘adaptive-fill-function’ to a
function.  This function is called with point after the left margin of a
line, and it should return the appropriate fill prefix based on that
line.  If it returns ‘nil’, ‘adaptive-fill-regexp’ gets a chance to find
a prefix.


File: emacs.info,  Node: Case,  Next: Text Mode,  Prev: Filling,  Up: Text

26.7 Case Conversion Commands
=============================

Emacs has commands for converting either a single word or any arbitrary
range of text to upper case or to lower case.

‘M-l’
     Convert following word to lower case (‘downcase-word’).
‘M-u’
     Convert following word to upper case (‘upcase-word’).
‘M-c’
     Capitalize the following word (‘capitalize-word’).
‘C-x C-l’
     Convert region to lower case (‘downcase-region’).
‘C-x C-u’
     Convert region to upper case (‘upcase-region’).

   ‘M-l’ (‘downcase-word’) converts the word after point to lower case,
moving past it.  Thus, repeating ‘M-l’ converts successive words.  ‘M-u’
(‘upcase-word’) converts to all capitals instead, while ‘M-c’
(‘capitalize-word’) puts the first letter of the word into upper case
and the rest into lower case.  All these commands convert several words
at once if given an argument.  They are especially convenient for
converting a large amount of text from all upper case to mixed case,
because you can move through the text using ‘M-l’, ‘M-u’ or ‘M-c’ on
each word as appropriate, occasionally using ‘M-f’ instead to skip a
word.

   When given a negative argument, the word case conversion commands
apply to the appropriate number of words before point, but do not move
point.  This is convenient when you have just typed a word in the wrong
case: you can give the case conversion command and continue typing.

   If a word case conversion command is given in the middle of a word,
it applies only to the part of the word which follows point.  (This is
comparable to what ‘M-d’ (‘kill-word’) does.)  With a negative argument,
case conversion applies only to the part of the word before point.

   The other case conversion commands are ‘C-x C-u’ (‘upcase-region’)
and ‘C-x C-l’ (‘downcase-region’), which convert everything between
point and mark to the specified case.  Point and mark do not move.

   The region case conversion commands ‘upcase-region’ and
‘downcase-region’ are normally disabled.  This means that they ask for
confirmation if you try to use them.  When you confirm, you may enable
the command, which means it will not ask for confirmation again.  *Note
Disabling::.


File: emacs.info,  Node: Text Mode,  Next: Outline Mode,  Prev: Case,  Up: Text

26.8 Text Mode
==============

Text mode is a major mode for editing files of text in a human language.
Files which have names ending in the extension ‘.txt’ are usually opened
in Text mode (*note Choosing Modes::).  To explicitly switch to Text
mode, type ‘M-x text-mode’.

   In Text mode, only blank lines and page delimiters separate
paragraphs.  As a result, paragraphs can be indented, and adaptive
filling determines what indentation to use when filling a paragraph.
*Note Adaptive Fill::.

   In Text mode, the <TAB> (‘indent-for-tab-command’) command usually
inserts whitespace up to the next tab stop, instead of indenting the
current line.  *Note Indentation::, for details.

   Text mode turns off the features concerned with comments except when
you explicitly invoke them.  It changes the syntax table so that
apostrophes are considered part of words (e.g., ‘don't’ is considered
one word).  However, if a word starts with an apostrophe, it is treated
as a prefix for the purposes of capitalization (e.g., ‘M-c’ converts
‘'hello'’ into ‘'Hello'’, as expected).

   If you indent the first lines of paragraphs, then you should use
Paragraph-Indent Text mode (‘M-x paragraph-indent-text-mode’) rather
than Text mode.  In that mode, you do not need to have blank lines
between paragraphs, because the first-line indentation is sufficient to
start a paragraph; however paragraphs in which every line is indented
are not supported.  Use ‘M-x paragraph-indent-minor-mode’ to enable an
equivalent minor mode for situations where you shouldn’t change the
major mode—in mail composition, for instance.

   Text mode binds ‘M-<TAB>’ to ‘ispell-complete-word’.  This command
performs completion of the partial word in the buffer before point,
using the spelling dictionary as the space of possible words.  *Note
Spelling::.  If your window manager defines ‘M-<TAB>’ to switch windows,
you can type ‘<ESC> <TAB>’ or ‘C-M-i’ instead.

   Entering Text mode runs the mode hook ‘text-mode-hook’ (*note Major
Modes::).

   The following sections describe several major modes that are
“derived” from Text mode.  These derivatives share most of the features
of Text mode described above.  In particular, derivatives of Text mode
run ‘text-mode-hook’ prior to running their own mode hooks.


File: emacs.info,  Node: Outline Mode,  Next: Org Mode,  Prev: Text Mode,  Up: Text

26.9 Outline Mode
=================

Outline mode is a major mode derived from Text mode, which is
specialized for editing outlines.  It provides commands to navigate
between entries in the outline structure, and commands to make parts of
a buffer temporarily invisible, so that the outline structure may be
more easily viewed.  Type ‘M-x outline-mode’ to switch to Outline mode.
Entering Outline mode runs the hook ‘text-mode-hook’ followed by the
hook ‘outline-mode-hook’ (*note Hooks::).

   When you use an Outline mode command to make a line invisible (*note
Outline Visibility::), the line disappears from the screen.  An ellipsis
(three periods in a row) is displayed at the end of the previous visible
line, to indicate the hidden text.  Multiple consecutive invisible lines
produce just one ellipsis.

   Editing commands that operate on lines, such as ‘C-n’ and ‘C-p’,
treat the text of the invisible line as part of the previous visible
line.  Killing the ellipsis at the end of a visible line really kills
all the following invisible text associated with the ellipsis.

* Menu:

* Outline Minor Mode::  Outline mode to use with other major modes.
* Outline Format::      What the text of an outline looks like.
* Outline Motion::      Special commands for moving through outlines.
* Outline Visibility::  Commands to control what is visible.
* Outline Views::       Outlines and multiple views.
* Foldout::             Folding means zooming in on outlines.


File: emacs.info,  Node: Outline Minor Mode,  Next: Outline Format,  Up: Outline Mode

26.9.1 Outline Minor Mode
-------------------------

Outline minor mode is a buffer-local minor mode which provides the same
commands as the major mode, Outline mode, but can be used in conjunction
with other major modes.  You can type ‘M-x outline-minor-mode’ to toggle
Outline minor mode in the current buffer, or use a file-local variable
setting to enable it in a specific file (*note File Variables::).

   The major mode, Outline mode, provides special key bindings on the
‘C-c’ prefix.  Outline minor mode provides similar bindings with ‘C-c @’
as the prefix; this is to reduce the conflicts with the major mode’s
special commands.  (The variable ‘outline-minor-mode-prefix’ controls
the prefix used.)

   If ‘outline-minor-mode-use-buttons’ is non-‘nil’, Outline minor mode
will use buttons at the beginning of the heading lines, in addition to
ellipsis, to show that a section is hidden.  Clicking the mouse on the
button toggles display of the section.  If the value of this variable is
‘insert’, the buttons are inserted directly into the buffer text, so
<RET> on the button will also toggle display of the section, like a
mouse click does.  If the value is ‘in-margins’, Outline minor mode will
use the window margins to indicate that a section is hidden.  The
buttons are customizable as icons (*note Icons::).

   If the ‘outline-minor-mode-cycle’ user option is non-‘nil’, the ‘TAB’
and ‘S-<TAB>’ keys that cycle the visibility are enabled on the outline
heading lines (*note outline-cycle: Outline Visibility.).  ‘TAB’ cycles
hiding, showing the sub-heading, and showing all for the current
section.  ‘S-<TAB>’ does the same for the entire buffer.


File: emacs.info,  Node: Outline Format,  Next: Outline Motion,  Prev: Outline Minor Mode,  Up: Outline Mode

26.9.2 Format of Outlines
-------------------------

Outline mode assumes that the lines in the buffer are of two types:
“heading lines” and “body lines”.  A heading line represents a topic in
the outline.  Heading lines start with one or more asterisk (‘*’)
characters; the number of asterisks determines the depth of the heading
in the outline structure.  Thus, a heading line with one ‘*’ is a major
topic; all the heading lines with two ‘*’s between it and the next
one-‘*’ heading are its subtopics; and so on.  Any line that is not a
heading line is a body line.  Body lines belong with the preceding
heading line.  Here is an example:

     * Food
     This is the body,
     which says something about the topic of food.

     ** Delicious Food
     This is the body of the second-level header.

     ** Distasteful Food
     This could have
     a body too, with
     several lines.

     *** Dormitory Food

     * Shelter
     Another first-level topic with its header line.

   A heading line together with all following body lines is called
collectively an “entry”.  A heading line together with all following
deeper heading lines and their body lines is called a “subtree”.

   You can customize the criterion for distinguishing heading lines by
setting the variable ‘outline-regexp’.  (The recommended ways to do this
are in a major mode function or with a file local variable.)  Any line
whose beginning has a match for this regexp is considered a heading
line.  Matches that start within a line (not at the left margin) do not
count.

   The length of the matching text determines the level of the heading;
longer matches make a more deeply nested level.  Thus, for example, if a
text formatter has commands ‘@chapter’, ‘@section’ and ‘@subsection’ to
divide the document into chapters and sections, you could make those
lines count as heading lines by setting ‘outline-regexp’ to
‘"@chap\\|@\\(sub\\)*section"’.  Note the trick: the two words ‘chapter’
and ‘section’ are equally long, but by defining the regexp to match only
‘chap’ we ensure that the length of the text matched on a chapter
heading is shorter, so that Outline mode will know that sections are
contained in chapters.  This works as long as no other command starts
with ‘@chap’.

   You can explicitly specify a rule for calculating the level of a
heading line by setting the variable ‘outline-level’.  The value of
‘outline-level’ should be a function that takes no arguments and returns
the level of the current heading.  The recommended ways to set this
variable are in a major mode command or with a file local variable.


File: emacs.info,  Node: Outline Motion,  Next: Outline Visibility,  Prev: Outline Format,  Up: Outline Mode

26.9.3 Outline Motion Commands
------------------------------

Outline mode provides special motion commands that move backward and
forward to heading lines.

‘C-c C-n’
     Move point to the next visible heading line
     (‘outline-next-visible-heading’).
‘C-c C-p’
     Move point to the previous visible heading line
     (‘outline-previous-visible-heading’).
‘C-c C-f’
     Move point to the next visible heading line at the same level as
     the one point is on (‘outline-forward-same-level’).
‘C-c C-b’
     Move point to the previous visible heading line at the same level
     (‘outline-backward-same-level’).
‘C-c C-u’
     Move point up to a lower-level (more inclusive) visible heading
     line (‘outline-up-heading’).

   All of the above commands accept numeric arguments as repeat counts.
For example, ‘C-c C-f’, when given an argument, moves forward that many
visible heading lines on the same level, and ‘C-c C-u’ with an argument
moves out of that many nested levels.


File: emacs.info,  Node: Outline Visibility,  Next: Outline Views,  Prev: Outline Motion,  Up: Outline Mode

26.9.4 Outline Visibility Commands
----------------------------------

Outline mode provides several commands for temporarily hiding or
revealing parts of the buffer, based on the outline structure.  These
commands are not undoable; their effects are simply not recorded by the
undo mechanism, so you can undo right past them (*note Undo::).

   Many of these commands act on the current heading line.  If point is
on a heading line, that is the current heading line; if point is on a
body line, the current heading line is the nearest preceding header
line.

‘C-c C-c’
     Make the current heading line’s body invisible
     (‘outline-hide-entry’).
‘C-c C-e’
     Make the current heading line’s body visible
     (‘outline-show-entry’).
‘C-c C-d’
     Make everything under the current heading invisible, not including
     the heading itself (‘outline-hide-subtree’).
‘C-c C-s’
     Make everything under the current heading visible, including body,
     subheadings, and their bodies (‘outline-show-subtree’).
‘C-c C-l’
     Make the body of the current heading line, and of all its
     subheadings, invisible (‘outline-hide-leaves’).
‘C-c C-k’
     Make all subheadings of the current heading line, at all levels,
     visible (‘outline-show-branches’).
‘C-c C-i’
     Make immediate subheadings (one level down) of the current heading
     line visible (‘outline-show-children’).
‘C-c C-t’
     Make all body lines in the buffer invisible (‘outline-hide-body’).
‘C-c C-a’
     Make all lines in the buffer visible (‘outline-show-all’).
‘C-c C-q’
     Hide everything except the top N levels of heading lines
     (‘outline-hide-sublevels’).
‘C-c C-o’
     Hide everything except for the heading or body that point is in,
     plus the headings leading up from there to the top level of the
     outline (‘outline-hide-other’).

   The simplest of these commands are ‘C-c C-c’ (‘outline-hide-entry’),
which hides the body lines directly following the current heading line,
and ‘C-c C-e’ (‘outline-show-entry’), which reveals them.  Subheadings
and their bodies are not affected.

   The commands ‘C-c C-d’ (‘outline-hide-subtree’) and ‘C-c C-s’
(‘outline-show-subtree’) are more powerful.  They apply to the current
heading line’s “subtree”: its body, all of its subheadings, both direct
and indirect, and all of their bodies.

   The command ‘C-c C-l’ (‘outline-hide-leaves’) hides the body of the
current heading line as well as all the bodies in its subtree; the
subheadings themselves are left visible.  The command ‘C-c C-k’
(‘outline-show-branches’) reveals the subheadings, if they had
previously been hidden (e.g., by ‘C-c C-d’).  The command ‘C-c C-i’
(‘outline-show-children’) is a weaker version of this; it reveals just
the direct subheadings, i.e., those one level down.

   The command ‘C-c C-o’ (‘outline-hide-other’) hides everything except
the entry that point is in, plus its parents (the headers leading up
from there to top level in the outline) and the top level headings.  It
also reveals body lines preceding the first heading in the buffer.

   The remaining commands affect the whole buffer.  ‘C-c C-t’
(‘outline-hide-body’) makes all body lines invisible, so that you see
just the outline structure (as a special exception, it will not hide
lines at the top of the file, preceding the first header line, even
though these are technically body lines).  ‘C-c C-a’
(‘outline-show-all’) makes all lines visible.  ‘C-c C-q’
(‘outline-hide-sublevels’) hides all but the top level headings at and
above the level of the current heading line (defaulting to 1 if point is
not on a heading); with a numeric argument N, it hides everything except
the top N levels of heading lines.  Note that it completely reveals all
the N top levels and the body lines before the first heading.

   Outline also provides two convenience commands to cycle the
visibility of each section and the whole buffer.  Typing ‘<TAB>’
(‘outline-cycle’) on a heading cycles the current section between “hide
all”, “subheadings”, and “show all” states.  Typing ‘S-<TAB>’
(‘outline-cycle-buffer’) cycles the whole buffer between “only top-level
headings”, “all headings and subheadings”, and “show all” states.

   When incremental search finds text that is hidden by Outline mode, it
makes that part of the buffer visible.  If you exit the search at that
position, the text remains visible.  To toggle whether or not an active
incremental search can match hidden text, type ‘M-s i’.  To change the
default for future searches, customize the option ‘search-invisible’.
(This option also affects how ‘query-replace’ and related functions
treat hidden text, *note Query Replace::.)  You can also automatically
make text visible as you navigate in it by using Reveal mode (‘M-x
reveal-mode’), a buffer-local minor mode.

   The ‘outline-default-state’ variable controls what headings will be
visible after Outline mode is turned on.  If non-‘nil’, some headings
are initially outlined.  If equal to a number, show only headings up to
and including the corresponding level.  If equal to ‘outline-show-all’,
all text of buffer is shown.  If equal to ‘outline-show-only-headings’,
show only headings, whatever their level is.  If equal to a lambda
function or function name, this function is expected to toggle headings
visibility, and will be called without arguments after the mode is
enabled.


File: emacs.info,  Node: Outline Views,  Next: Foldout,  Prev: Outline Visibility,  Up: Outline Mode

26.9.5 Viewing One Outline in Multiple Views
--------------------------------------------

You can display two views of a single outline at the same time, in
different windows.  To do this, you must create an indirect buffer using
‘M-x make-indirect-buffer’.  The first argument of this command is the
existing outline buffer name, and its second argument is the name to use
for the new indirect buffer.  *Note Indirect Buffers::.

   Once the indirect buffer exists, you can display it in a window in
the normal fashion, with ‘C-x 4 b’ or other Emacs commands.  The Outline
mode commands to show and hide parts of the text operate on each buffer
independently; as a result, each buffer can have its own view.  If you
want more than two views on the same outline, create additional indirect
buffers.


File: emacs.info,  Node: Foldout,  Prev: Outline Views,  Up: Outline Mode

26.9.6 Folding Editing
----------------------

The Foldout package extends Outline mode and Outline minor mode with
folding commands.  The idea of folding is that you zoom in on a nested
portion of the outline, while hiding its relatives at higher levels.

   Consider an Outline mode buffer with all the text and subheadings
under level-1 headings hidden.  To look at what is hidden under one of
these headings, you could use ‘C-c C-e’ (‘M-x outline-show-entry’) to
expose the body, or ‘C-c C-i’ to expose the child (level-2) headings.

   With Foldout, you use ‘C-c C-z’ (‘M-x foldout-zoom-subtree’).  This
exposes the body and child subheadings, and narrows the buffer so that
only the level-1 heading, the body and the level-2 headings are visible.
Now to look under one of the level-2 headings, position the cursor on it
and use ‘C-c C-z’ again.  This exposes the level-2 body and its level-3
child subheadings and narrows the buffer again.  Zooming in on
successive subheadings can be done as much as you like.  A string in the
mode line shows how deep you’ve gone.

   When zooming in on a heading, to see only the child subheadings
specify a numeric argument: ‘C-u C-c C-z’.  The number of levels of
children can be specified too (compare ‘M-x outline-show-children’),
e.g., ‘M-2 C-c C-z’ exposes two levels of child subheadings.
Alternatively, the body can be specified with a negative argument:
‘M-- C-c C-z’.  The whole subtree can be expanded, similarly to ‘C-c
C-s’ (‘M-x outline-show-subtree’), by specifying a zero argument:
‘M-0 C-c C-z’.

   While you’re zoomed in, you can still use Outline mode’s exposure and
hiding functions without disturbing Foldout.  Also, since the buffer is
narrowed, global editing actions will only affect text under the
zoomed-in heading.  This is useful for restricting changes to a
particular chapter or section of your document.

   To unzoom (exit) a fold, use ‘C-c C-x’ (‘M-x foldout-exit-fold’).
This hides all the text and subheadings under the top-level heading and
returns you to the previous view of the buffer.  Specifying a numeric
argument exits that many levels of folds.  Specifying a zero argument
exits all folds.

   To cancel the narrowing of a fold without hiding the text and
subheadings, specify a negative argument.  For example, ‘M--2 C-c C-x’
exits two folds and leaves the text and subheadings exposed.

   Foldout mode also provides mouse commands for entering and exiting
folds, and for showing and hiding text:

‘C-M-mouse-1’ zooms in on the heading clicked on
          single click: expose body.
          double click: expose subheadings.
          triple click: expose body and subheadings.
          quad click: expose entire subtree.
‘C-M-mouse-2’ exposes text under the heading clicked on
          single click: expose body.
          double click: expose subheadings.
          triple click: expose body and subheadings.
          quad click: expose entire subtree.
‘C-M-mouse-3’ hides text under the heading clicked on or exits fold
          single click: hide subtree.
          double click: exit fold and hide text.
          triple click: exit fold without hiding text.
          quad click: exit all folds and hide text.

   You can specify different modifier keys (instead of ‘<Ctrl>-<Meta>-’)
by setting ‘foldout-mouse-modifiers’; but if you have already loaded the
‘foldout.el’ library, you must reload it in order for this to take
effect.

   To use the Foldout package, you can type ‘M-x load-library <RET>
foldout <RET>’; or you can arrange for to do that automatically by
putting the following in your init file:

     (with-eval-after-load "outline"
       (require 'foldout))


File: emacs.info,  Node: Org Mode,  Next: TeX Mode,  Prev: Outline Mode,  Up: Text

26.10 Org Mode
==============

Org mode is a variant of Outline mode for using Emacs as an organizer
and/or authoring system.  Files with names ending in the extension
‘.org’ are opened in Org mode (*note Choosing Modes::).  To explicitly
switch to Org mode, type ‘M-x org-mode’.

   In Org mode, as in Outline mode, each entry has a heading line that
starts with one or more ‘*’ characters.  *Note Outline Format::.  In
addition, any line that begins with the ‘#’ character is treated as a
comment.

   Org mode provides commands for easily viewing and manipulating the
outline structure.  The simplest of these commands is <TAB>
(‘org-cycle’).  If invoked on a heading line, it cycles through the
different visibility states of the subtree: (i) showing only that
heading line, (ii) showing only the heading line and the heading lines
of its direct children, if any, and (iii) showing the entire subtree.
If invoked in a body line, the global binding for <TAB> is executed.

   Typing ‘S-<TAB>’ (‘org-shifttab’) anywhere in an Org mode buffer
cycles the visibility of the entire outline structure, between (i)
showing only top-level heading lines, (ii) showing all heading lines but
no body lines, and (iii) showing everything.

   You can move an entire entry up or down in the buffer, including its
body lines and subtree (if any), by typing ‘M-<UP>’ (‘org-metaup’) or
‘M-<DOWN>’ (‘org-metadown’) on the heading line.  Similarly, you can
promote or demote a heading line with ‘M-<LEFT>’ (‘org-metaleft’) and
‘M-<RIGHT>’ (‘org-metaright’).  These commands execute their global
bindings if invoked on a body line.

   The following subsections give basic instructions for using Org mode
as an organizer and as an authoring system.  For details, *note The Org
Mode Manual: (org)Top.

* Menu:

* Org Organizer::   Managing TODO lists and agendas.
* Org Authoring::   Exporting Org buffers to various formats.


File: emacs.info,  Node: Org Organizer,  Next: Org Authoring,  Up: Org Mode

26.10.1 Org as an organizer
---------------------------

You can tag an Org entry as a “TODO” item by typing ‘C-c C-t’
(‘org-todo’) anywhere in the entry.  This adds the keyword ‘TODO’ to the
heading line.  Typing ‘C-c C-t’ again switches the keyword to ‘DONE’;
another ‘C-c C-t’ removes the keyword entirely, and so forth.  You can
customize the keywords used by ‘C-c C-t’ via the variable
‘org-todo-keywords’.

   Apart from marking an entry as TODO, you can attach a date to it, by
typing ‘C-c C-s’ (‘org-schedule’) in the entry.  This prompts for a date
by popping up the Emacs Calendar (*note Calendar/Diary::), and then adds
the tag ‘SCHEDULED’, together with the selected date, beneath the
heading line.  The command ‘C-c C-d’ (‘org-deadline’) has the same
effect, except that it uses the tag ‘DEADLINE’.

   Once you have some TODO items planned in an Org file, you can add
that file to the list of “agenda files” by typing ‘C-c [’
(‘org-agenda-file-to-front’).  Org mode is designed to let you easily
maintain multiple agenda files, e.g., for organizing different aspects
of your life.  The list of agenda files is stored in the variable
‘org-agenda-files’.

   To view items coming from your agenda files, type ‘M-x org-agenda’.
This command prompts for what you want to see: a list of things to do
this week, a list of TODO items with specific keywords, etc.  *Note
(org)Agenda Views::, for details.


File: emacs.info,  Node: Org Authoring,  Prev: Org Organizer,  Up: Org Mode

26.10.2 Org as an authoring system
----------------------------------

You may want to format your Org notes nicely and to prepare them for
export and publication.  To export the current buffer, type ‘C-c C-e’
(‘org-export-dispatch’) anywhere in an Org buffer.  This command prompts
for an export format; currently supported formats include HTML, LaTeX,
Texinfo, OpenDocument (‘.odt’), iCalendar, Markdown, man-page, and PDF.
Some formats, such as PDF, require certain system tools to be installed.

   To export several files at once to a specific directory, either
locally or over the network, you must define a list of projects through
the variable ‘org-publish-project-alist’.  See its documentation for
details.

   Org supports a simple markup scheme for applying text formatting to
exported documents:

     - This text is /emphasized/
     - This text is *in bold*
     - This text is _underlined_
     - This text uses =a teletype font=

     #+begin_quote
     ``This is a quote.''
     #+end_quote

     #+begin_example
     This is an example.
     #+end_example

   For further details, *note (org)Exporting::, and *note
(org)Publishing::.


File: emacs.info,  Node: TeX Mode,  Next: HTML Mode,  Prev: Org Mode,  Up: Text

26.11 TeX Mode
==============

TeX is a powerful text formatter written by Donald Knuth; like GNU
Emacs, it is free software.  The TeX format has several variants,
including LaTeX, a simplified input format for TeX; DocTeX, a special
file format in which the LaTeX sources are written, combining sources
with documentation; and SliTeX, an obsolete special form of LaTeX(1).

   Emacs provides a TeX major mode for each of these variants: Plain TeX
mode, LaTeX mode, DocTeX mode, and SliTeX mode.  Emacs selects the
appropriate mode by looking at the contents of the buffer.  (This is
done by invoking the ‘tex-mode’ command, which is normally called
automatically when you visit a TeX-like file.  *Note Choosing Modes::.)
If the contents are insufficient to determine this, Emacs chooses the
mode specified by the variable ‘tex-default-mode’; its default value is
‘latex-mode’.  If Emacs does not guess right, you can select the correct
variant of TeX mode using the commands ‘plain-tex-mode’, ‘latex-mode’,
‘slitex-mode’, or ‘doctex-mode’.

   The following sections document the features of TeX mode and its
variants.  There are several other TeX-related Emacs packages, which are
not documented in this manual:

   • BibTeX mode is a major mode for BibTeX files, which are commonly
     used for keeping bibliographic references for LaTeX documents.  For
     more information, see the documentation string for the command
     ‘bibtex-mode’.

   • The RefTeX package provides a minor mode which can be used with
     LaTeX mode to manage bibliographic references.  *Note The RefTeX
     Manual: (reftex)Top.

   • The AUCTeX package provides more advanced features for editing TeX
     and its related formats, including the ability to preview TeX
     equations within Emacs buffers.  Unlike BibTeX mode and the RefTeX
     package, AUCTeX is not distributed with Emacs by default.  It can
     be downloaded via the Package Menu (*note Packages::); once
     installed, see *note The AUCTeX Manual: (auctex)Top.

* Menu:

* TeX Editing::   Special commands for editing in TeX mode.
* LaTeX Editing:: Additional commands for LaTeX input files.
* TeX Print::     Commands for printing part of a file with TeX.
* TeX Misc::      Customization of TeX mode, and related features.

   ---------- Footnotes ----------

   (1) It has been replaced by the ‘slides’ document class, which comes
with LaTeX.


File: emacs.info,  Node: TeX Editing,  Next: LaTeX Editing,  Up: TeX Mode

26.11.1 TeX Editing Commands
----------------------------

‘"’
     Insert, according to context, either ‘``’ or ‘"’ or ‘''’
     (‘tex-insert-quote’).
‘C-j’
     Insert a paragraph break (two newlines) and check the previous
     paragraph for unbalanced braces or dollar signs
     (‘tex-terminate-paragraph’).
‘M-x tex-validate-region’
     Check each paragraph in the region for unbalanced braces or dollar
     signs.
‘C-c {’
     Insert ‘{}’ and position point between them (‘tex-insert-braces’).
‘C-c }’
     Move forward past the next unmatched close brace (‘up-list’).

   In TeX, the character ‘"’ is not normally used; instead, quotations
begin with ‘``’ and end with ‘''’.  TeX mode therefore binds the ‘"’ key
to the ‘tex-insert-quote’ command.  This inserts ‘``’ after whitespace
or an open brace, ‘"’ after a backslash, and ‘''’ after any other
character.

   As a special exception, if you type ‘"’ when the text before point is
either ‘``’ or ‘''’, Emacs replaces that preceding text with a single
‘"’ character.  You can therefore type ‘""’ to insert ‘"’, should you
ever need to do so.  (You can also use ‘C-q "’ to insert this
character.)

   In TeX mode, ‘$’ has a special syntax code which attempts to
understand the way TeX math mode delimiters match.  When you insert a
‘$’ that is meant to exit math mode, the position of the matching ‘$’
that entered math mode is displayed for a second.  This is the same
feature that displays the open brace that matches a close brace that is
inserted.  However, there is no way to tell whether a ‘$’ enters math
mode or leaves it; so when you insert a ‘$’ that enters math mode, the
previous ‘$’ position is shown as if it were a match, even though they
are actually unrelated.

   TeX uses braces as delimiters that must match.  Some users prefer to
keep braces balanced at all times, rather than inserting them singly.
Use ‘C-c {’ (‘tex-insert-braces’) to insert a pair of braces.  It leaves
point between the two braces so you can insert the text that belongs
inside.  Afterward, use the command ‘C-c }’ (‘up-list’) to move forward
past the close brace.  You can also invoke ‘C-c {’ after marking some
text: then the command encloses the marked text in braces.

   There are two commands for checking the matching of braces.  ‘C-j’
(‘tex-terminate-paragraph’) checks the paragraph before point, and
inserts two newlines to start a new paragraph.  It outputs a message in
the echo area if any mismatch is found.  ‘M-x tex-validate-region’
checks a region, paragraph by paragraph.  The errors are listed in an
‘*Occur*’ buffer; you can use the usual Occur mode commands in that
buffer, such as ‘C-c C-c’, to visit a particular mismatch (*note Other
Repeating Search::).

   Note that Emacs commands count square brackets and parentheses in TeX
mode, not just braces.  This is not strictly correct for the purpose of
checking TeX syntax.  However, parentheses and square brackets are
likely to be used in text as matching delimiters, and it is useful for
the various motion commands and automatic match display to work with
them.


File: emacs.info,  Node: LaTeX Editing,  Next: TeX Print,  Prev: TeX Editing,  Up: TeX Mode

26.11.2 LaTeX Editing Commands
------------------------------

LaTeX mode provides a few extra features not applicable to plain TeX:

‘C-c C-o’
     Insert ‘\begin’ and ‘\end’ for LaTeX block and position point on a
     line between them (‘latex-insert-block’).
‘C-c C-e’
     Close the innermost LaTeX block not yet closed
     (‘latex-close-block’).

   In LaTeX input, ‘\begin’ and ‘\end’ tags are used to group blocks of
text.  To insert a block, type ‘C-c C-o’ (‘latex-insert-block’).  This
prompts for a block type, and inserts the appropriate matching ‘\begin’
and ‘\end’ tags, leaving a blank line between the two and moving point
there.

   When entering the block type argument to ‘C-c C-o’, you can use the
usual completion commands (*note Completion::).  The default completion
list contains the standard LaTeX block types.  If you want additional
block types for completion, customize the list variable
‘latex-block-names’.

   In LaTeX input, ‘\begin’ and ‘\end’ tags must balance.  You can use
‘C-c C-e’ (‘latex-close-block’) to insert an ‘\end’ tag which matches
the last unmatched ‘\begin’.  It also indents the ‘\end’ to match the
corresponding ‘\begin’, and inserts a newline after the ‘\end’ tag if
point is at the beginning of a line.  The minor mode
‘latex-electric-env-pair-mode’ automatically inserts an ‘\end’ or
‘\begin’ tag for you when you type the corresponding one.


File: emacs.info,  Node: TeX Print,  Next: TeX Misc,  Prev: LaTeX Editing,  Up: TeX Mode

26.11.3 TeX Printing Commands
-----------------------------

You can invoke TeX as a subprocess of Emacs, supplying either the entire
contents of the buffer or just part of it (e.g., one chapter of a larger
document).

‘C-c C-b’
     Invoke TeX on the entire current buffer (‘tex-buffer’).

‘C-c C-r’
     Invoke TeX on the current region, together with the buffer’s header
     (‘tex-region’).

‘C-c C-f’
     Invoke TeX on the current file (‘tex-file’).

‘C-c C-v’
     Preview the output from the last ‘C-c C-b’, ‘C-c C-r’, or ‘C-c C-f’
     command (‘tex-view’).

‘C-c C-p’
     Print the output from the last ‘C-c C-b’, ‘C-c C-r’, or ‘C-c C-f’
     command (‘tex-print’).

‘C-c <TAB>’
     Invoke BibTeX on the current file (‘tex-bibtex-file’).
‘C-c C-l’
     Recenter the window showing output from TeX so that the last line
     can be seen (‘tex-recenter-output-buffer’).
‘C-c C-k’
     Kill the TeX subprocess (‘tex-kill-job’).
‘C-c C-c’
     Invoke some other compilation command on the entire current buffer
     (‘tex-compile’).

   To pass the current buffer through TeX, type ‘C-c C-b’
(‘tex-buffer’).  The formatted output goes in a temporary file, normally
a ‘.dvi’ file.  Afterwards, you can type ‘C-c C-v’ (‘tex-view’) to
launch an external program, such as ‘xdvi’, to view this output file.
You can also type ‘C-c C-p’ (‘tex-print’) to print a hardcopy of the
output file.

   By default, ‘C-c C-b’ runs TeX in the current directory.  The output
of TeX is also created in this directory.  To run TeX in a different
directory, change the variable ‘tex-directory’ to the desired directory.
If your environment variable ‘TEXINPUTS’ contains relative names, or if
your files contain ‘\input’ commands with relative file names, then
‘tex-directory’ _must_ be ‘"."’ or you will get the wrong results.
Otherwise, it is safe to specify some other directory, such as ‘"/tmp"’.

   The buffer’s TeX variant determines what shell command ‘C-c C-b’
actually runs.  In Plain TeX mode, it is specified by the variable
‘tex-run-command’, which defaults to ‘"tex"’.  In LaTeX mode, it is
specified by ‘latex-run-command’, which defaults to ‘"latex"’.  The
shell command that ‘C-c C-v’ runs to view the ‘.dvi’ output is
determined by the variable ‘tex-dvi-view-command’, regardless of the TeX
variant.  The shell command that ‘C-c C-p’ runs to print the output is
determined by the variable ‘tex-dvi-print-command’.  The variable
‘tex-print-file-extension’ can be set to the required file extension for
viewing and printing TeX-compiled files.  For example, you can set it to
‘.pdf’, and update ‘tex-dvi-view-command’ and ‘tex-dvi-print-command’
accordingly, as well as ‘latex-run-command’ or ‘tex-run-command’.

   Normally, Emacs automatically appends the output file name to the
shell command strings described in the preceding paragraph.  For
example, if ‘tex-dvi-view-command’ is ‘"xdvi"’, ‘C-c C-v’ runs ‘xdvi
OUTPUT-FILE-NAME’.  In some cases, however, the file name needs to be
embedded in the command, e.g., if you need to provide the file name as
an argument to one command whose output is piped to another.  You can
specify where to put the file name with ‘*’ in the command string.  For
example,

     (setq tex-dvi-print-command "dvips -f * | lpr")

   The terminal output from TeX, including any error messages, appears
in a buffer called ‘*tex-shell*’.  If TeX gets an error, you can switch
to this buffer and feed it input (this works as in Shell mode; *note
Interactive Shell::).  Without switching to this buffer you can scroll
it so that its last line is visible by typing ‘C-c C-l’.

   Type ‘C-c C-k’ (‘tex-kill-job’) to kill the TeX process if you see
that its output is no longer useful.  Using ‘C-c C-b’ or ‘C-c C-r’ also
kills any TeX process still running.

   You can also pass an arbitrary region through TeX by typing ‘C-c C-r’
(‘tex-region’).  This is tricky, however, because most files of TeX
input contain commands at the beginning to set parameters and define
macros, without which no later part of the file will format correctly.
To solve this problem, ‘C-c C-r’ allows you to designate a part of the
file as containing essential commands; it is included before the
specified region as part of the input to TeX.  The designated part of
the file is called the “header”.

   To indicate the bounds of the header in Plain TeX mode, you insert
two special strings in the file.  Insert ‘%**start of header’ before the
header, and ‘%**end of header’ after it.  Each string must appear
entirely on one line, but there may be other text on the line before or
after.  The lines containing the two strings are included in the header.
If ‘%**start of header’ does not appear within the first 100 lines of
the buffer, ‘C-c C-r’ assumes that there is no header.

   In LaTeX mode, the header begins with ‘\documentclass’ or
‘\documentstyle’ and ends with ‘\begin{document}’.  These are commands
that LaTeX requires you to use in any case, so nothing special needs to
be done to identify the header.

   The commands (‘tex-buffer’) and (‘tex-region’) do all of their work
in a temporary directory, and do not have available any of the auxiliary
files needed by TeX for cross-references; these commands are generally
not suitable for running the final copy in which all of the
cross-references need to be correct.

   When you want the auxiliary files for cross references, use ‘C-c C-f’
(‘tex-file’) which runs TeX on the current buffer’s file, in that file’s
directory.  Before running TeX, it offers to save any modified buffers.
Generally, you need to use (‘tex-file’) twice to get the
cross-references right.

   The value of the variable ‘tex-start-options’ specifies options for
the TeX run.

   The value of the variable ‘tex-start-commands’ specifies TeX commands
for starting TeX.  The default value causes TeX to run in nonstop mode.
To run TeX interactively, set the variable to ‘""’.

   Large TeX documents are often split into several files—one main file,
plus subfiles.  Running TeX on a subfile typically does not work; you
have to run it on the main file.  In order to make ‘tex-file’ useful
when you are editing a subfile, you can set the variable ‘tex-main-file’
to the name of the main file.  Then ‘tex-file’ runs TeX on that file.

   The most convenient way to use ‘tex-main-file’ is to specify it in a
local variable list in each of the subfiles.  *Note File Variables::.

   For LaTeX files, you can use BibTeX to process the auxiliary file for
the current buffer’s file.  BibTeX looks up bibliographic citations in a
data base and prepares the cited references for the bibliography
section.  The command ‘C-c <TAB>’ (‘tex-bibtex-file’) runs the shell
command (‘tex-bibtex-command’) to produce a ‘.bbl’ file for the current
buffer’s file.  Generally, you need to do ‘C-c C-f’ (‘tex-file’) once to
generate the ‘.aux’ file, then do ‘C-c <TAB>’ (‘tex-bibtex-file’), and
then repeat ‘C-c C-f’ (‘tex-file’) twice more to get the
cross-references correct.

   To invoke some other compilation program on the current TeX buffer,
type ‘C-c C-c’ (‘tex-compile’).  This command knows how to pass
arguments to many common programs, including ‘pdflatex’, ‘yap’, ‘xdvi’,
and ‘dvips’.  You can select your desired compilation program using the
standard completion keys (*note Completion::).


File: emacs.info,  Node: TeX Misc,  Prev: TeX Print,  Up: TeX Mode

26.11.4 TeX Mode Miscellany
---------------------------

Entering any variant of TeX mode runs the hooks ‘text-mode-hook’ and
‘tex-mode-hook’.  Then it runs either ‘plain-tex-mode-hook’,
‘doctex-mode-hook’, ‘latex-mode-hook’, or ‘slitex-mode-hook’, whichever
is appropriate.  Starting the TeX shell runs the hook ‘tex-shell-hook’.
*Note Hooks::.

   The commands ‘M-x iso-iso2tex’, ‘M-x iso-tex2iso’, ‘M-x iso-iso2gtex’
and ‘M-x iso-gtex2iso’ can be used to convert between Latin-1 encoded
files and TeX-encoded equivalents.


File: emacs.info,  Node: HTML Mode,  Next: Nroff Mode,  Prev: TeX Mode,  Up: Text

26.12 SGML and HTML Modes
=========================

The major modes for SGML and HTML provide indentation support and
commands for operating on tags.

   HTML consists of two modes—one, a basic mode called ‘html-mode’ is a
slightly customized variant of SGML mode.  The other, which is used by
default for HTML files, is called ‘mhtml-mode’, and attempts to properly
handle Javascript enclosed in a ‘\<script>’ element and CSS embedded in a
‘\<style>’ element.

‘C-c C-n’
     Interactively specify a special character and insert the SGML
     ‘&’-command for that character (‘sgml-name-char’).

‘C-c C-t’
     Interactively specify a tag and its attributes (‘sgml-tag’).  This
     command asks you for a tag name and for the attribute values, then
     inserts both the opening tag and the closing tag, leaving point
     between them.

     With a prefix argument N, the command puts the tag around the N
     words already present in the buffer after point.  Whenever a region
     is active, it puts the tag around the region (when Transient Mark
     mode is off, it does this when a numeric argument of −1 is
     supplied.)

‘C-c C-a’
     Interactively insert attribute values for the current tag
     (‘sgml-attributes’).

‘C-c C-f’
     Skip across a balanced tag group (which extends from an opening tag
     through its corresponding closing tag) (‘sgml-skip-tag-forward’).
     A numeric argument acts as a repeat count.

‘C-c C-b’
     Skip backward across a balanced tag group (which extends from an
     opening tag through its corresponding closing tag)
     (‘sgml-skip-tag-backward’).  A numeric argument acts as a repeat
     count.

‘C-c C-d’
     Delete the tag at or after point, and delete the matching tag too
     (‘sgml-delete-tag’).  If the tag at or after point is an opening
     tag, delete the closing tag too; if it is a closing tag, delete the
     opening tag too.

‘C-c ? TAG <RET>’
     Display a description of the meaning of tag TAG (‘sgml-tag-help’).
     If the argument TAG is empty, describe the tag at point.

‘C-c /’
     Insert a close tag for the innermost unterminated tag
     (‘sgml-close-tag’).  If called within a tag or a comment, close it
     instead of inserting a close tag.

‘C-c 8’
     Toggle a minor mode in which Latin-1 characters insert the
     corresponding SGML commands that stand for them, instead of the
     characters themselves (‘sgml-name-8bit-mode’).

‘C-c C-v’
     Run a shell command (which you must specify) to validate the
     current buffer as SGML (‘sgml-validate’).  (In HTML mode this key
     sequence runs a different command.)

‘C-c <TAB>’
     Toggle the visibility of existing tags in the buffer.  This can be
     used as a cheap preview (‘sgml-tags-invisible’).

   The major mode for editing XML documents is called nXML mode.  This
is a powerful major mode that can recognize many existing XML schemas
and use them to provide completion of XML elements via ‘M-<TAB>’, as
well as on-the-fly XML validation with error highlighting.  To enable
nXML mode in an existing buffer, type ‘M-x nxml-mode’, or, equivalently,
‘M-x xml-mode’.  Emacs uses nXML mode for files which have the extension
‘.xml’.  For XHTML files, which have the extension ‘.xhtml’, Emacs uses
HTML mode by default; you can make it use nXML mode by customizing the
variable ‘auto-mode-alist’ (*note Choosing Modes::).  nXML mode is
described in its own manual: *Note nXML Mode: (nxml-mode)Top.

   You may choose to use the less powerful SGML mode for editing XML,
since XML is a strict subset of SGML.  To enable SGML mode in an
existing buffer, type ‘M-x sgml-mode’.  On enabling SGML mode, Emacs
examines the buffer to determine whether it is XML; if so, it sets the
variable ‘sgml-xml-mode’ to a non-‘nil’ value.  This causes SGML mode’s
tag insertion commands, described above, to always insert explicit
closing tags as well.


File: emacs.info,  Node: Nroff Mode,  Next: Enriched Text,  Prev: HTML Mode,  Up: Text

26.13 Nroff Mode
================

Nroff mode, a major mode derived from Text mode, is specialized for
editing nroff files (e.g., Unix man pages).  Type ‘M-x nroff-mode’ to
enter this mode.  Entering Nroff mode runs the hook ‘text-mode-hook’,
then ‘nroff-mode-hook’ (*note Hooks::).

   In Nroff mode, nroff command lines are treated as paragraph
separators, pages are separated by ‘.bp’ commands, and comments start
with backslash-doublequote.  It also defines these commands:

‘M-n’
     Move to the beginning of the next line that isn’t an nroff command
     (‘nroff-forward-text-line’).  An argument is a repeat count.
‘M-p’
     Like ‘M-n’ but move up (‘nroff-backward-text-line’).
‘M-?’
     Displays in the echo area the number of text lines (lines that are
     not nroff commands) in the region (‘nroff-count-text-lines’).

   Electric Nroff mode is a buffer-local minor mode that can be used
with Nroff mode.  To toggle this minor mode, type ‘M-x
nroff-electric-mode’ (*note Minor Modes::).  When the mode is on, each
time you type <RET> to end a line containing an nroff command that opens
a kind of grouping, the nroff command to close that grouping is
automatically inserted on the following line.

   If you use Outline minor mode with Nroff mode (*note Outline Mode::),
heading lines are lines of the form ‘.H’ followed by a number (the
header level).


File: emacs.info,  Node: Enriched Text,  Next: Text Based Tables,  Prev: Nroff Mode,  Up: Text

26.14 Enriched Text
===================

Enriched mode is a minor mode for editing formatted text files in a
WYSIWYG (What You See Is What You Get) fashion.  When Enriched mode is
enabled, you can apply various formatting properties to the text in the
buffer, such as fonts and colors; upon saving the buffer, those
properties are saved together with the text, using the MIME
‘text/enriched’ file format.

   Enriched mode is typically used with Text mode (*note Text Mode::).
It is _not_ compatible with Font Lock mode, which is used by many major
modes, including most programming language modes, for syntax
highlighting (*note Font Lock::).  Unlike Enriched mode, Font Lock mode
assigns text properties automatically, based on the current buffer
contents; those properties are not saved to disk.

   The file ‘enriched.txt’ in Emacs’s ‘data-directory’ serves as an
example of the features of Enriched mode.

* Menu:

* Enriched Mode::           Entering and exiting Enriched mode.
* Hard and Soft Newlines::  There are two different kinds of newlines.
* Editing Format Info::     How to edit text properties.
* Enriched Faces::          Bold, italic, underline, etc.
* Enriched Indentation::    Changing the left and right margins.
* Enriched Justification::  Centering, setting text flush with the
                              left or right margin, etc.
* Enriched Properties::     The “special text properties” submenu.


File: emacs.info,  Node: Enriched Mode,  Next: Hard and Soft Newlines,  Up: Enriched Text

26.14.1 Enriched Mode
---------------------

Enriched mode is a buffer-local minor mode (*note Minor Modes::).  When
you visit a file that has been saved in the ‘text/enriched’ format,
Emacs automatically enables Enriched mode, and applies the formatting
information in the file to the buffer text.  When you save a buffer with
Enriched mode enabled, it is saved using the ‘text/enriched’ format,
including the formatting information.

   To create a new file of formatted text, visit the nonexistent file
and type ‘M-x enriched-mode’.  This command actually toggles Enriched
mode.  With a prefix argument, it enables Enriched mode if the argument
is positive, and disables Enriched mode otherwise.  If you disable
Enriched mode, Emacs no longer saves the buffer using the
‘text/enriched’ format; any formatting properties that have been added
to the buffer remain in the buffer, but they are not saved to disk.

   Enriched mode does not save all Emacs text properties, only those
specified in the variable ‘enriched-translations’.  These include
properties for fonts, colors, indentation, and justification.

   If you visit a file and Emacs fails to recognize that it is in the
‘text/enriched’ format, type ‘M-x format-decode-buffer’.  This command
prompts for a file format, and re-reads the file in that format.
Specifying the ‘text/enriched’ format automatically enables Enriched
mode.

   To view a ‘text/enriched’ file in raw form (as plain text with markup
tags rather than formatted text), use ‘M-x find-file-literally’ (*note
Visiting::).

   *Note Format Conversion: (elisp)Format Conversion, for details of how
Emacs recognizes and converts file formats like ‘text/enriched’.  *Note
(elisp)Text Properties::, for more information about text properties.


File: emacs.info,  Node: Hard and Soft Newlines,  Next: Editing Format Info,  Prev: Enriched Mode,  Up: Enriched Text

26.14.2 Hard and Soft Newlines
------------------------------

In Enriched mode, Emacs distinguishes between two different kinds of
newlines, “hard” newlines and “soft” newlines.  You can also enable or
disable this feature in other buffers, by typing ‘M-x
use-hard-newlines’.

   Hard newlines are used to separate paragraphs, or anywhere there
needs to be a line break regardless of how the text is filled; soft
newlines are used for filling.  The <RET> (‘newline’) and ‘C-o’
(‘open-line’) commands insert hard newlines.  The fill commands,
including Auto Fill (*note Auto Fill::), insert only soft newlines and
delete only soft newlines, leaving hard newlines alone.

   Thus, when editing with Enriched mode, you should not use <RET> or
‘C-o’ to break lines in the middle of filled paragraphs.  Use Auto Fill
mode or explicit fill commands (*note Fill Commands::) instead.  Use
<RET> or ‘C-o’ where line breaks should always remain, such as in tables
and lists.  For such lines, you may also want to set the justification
style to ‘unfilled’ (*note Enriched Justification::).


File: emacs.info,  Node: Editing Format Info,  Next: Enriched Faces,  Prev: Hard and Soft Newlines,  Up: Enriched Text

26.14.3 Editing Format Information
----------------------------------

The easiest way to alter properties is with the ‘Text Properties’ menu.
You can get to this menu from the ‘Edit’ menu in the menu bar (*note
Menu Bar::), or with ‘C-mouse-2’ (*note Menu Mouse Clicks::).  Some of
the commands in the ‘Text Properties’ menu are listed below (you can
also invoke them with ‘M-x’):

‘Remove Face Properties’
     Remove face properties from the region
     (‘facemenu-remove-face-props’).

‘Remove Text Properties’
     Remove all text properties from the region, including face
     properties (‘facemenu-remove-all’).

‘Describe Properties’
     List all text properties and other information about the character
     following point (‘describe-text-properties’).

‘Display Faces’
     Display a list of defined faces (‘list-faces-display’).  *Note
     Faces::.

‘Display Colors’
     Display a list of defined colors (‘list-colors-display’).  *Note
     Colors::.

The other menu entries are described in the following sections.


File: emacs.info,  Node: Enriched Faces,  Next: Enriched Indentation,  Prev: Editing Format Info,  Up: Enriched Text

26.14.4 Faces in Enriched Text
------------------------------

The following commands can be used to add or remove faces (*note
Faces::).  Each applies to the text in the region if the mark is active,
and to the next self-inserting character if the mark is inactive.  With
a prefix argument, each command applies to the next self-inserting
character even if the region is active.

‘M-o d’
     Remove all ‘face’ properties (‘facemenu-set-default’).

‘M-o b’
     Apply the ‘bold’ face (‘facemenu-set-bold’).

‘M-o i’
     Apply the ‘italic’ face (‘facemenu-set-italic’).

‘M-o l’
     Apply the ‘bold-italic’ face (‘facemenu-set-bold-italic’).

‘M-o u’
     Apply the ‘underline’ face (‘facemenu-set-underline’).

‘M-o o FACE <RET>’
     Apply the face FACE (‘facemenu-set-face’).

‘M-x facemenu-set-foreground’
     Prompt for a color (*note Colors::), and apply it as a foreground
     color.

‘M-x facemenu-set-background’
     Prompt for a color, and apply it as a background color.

These commands are also available via the Text Properties menu.

   A self-inserting character normally inherits the face properties (and
most other text properties) from the preceding character in the buffer.
If you use one of the above commands to specify the face for the next
self-inserting character, that character will not inherit the faces
properties from the preceding character, but it will still inherit other
text properties.

   Enriched mode defines two additional faces: ‘excerpt’ and ‘fixed’.
These correspond to codes used in the text/enriched file format.  The
‘excerpt’ face is intended for quotations; by default, it appears the
same as ‘italic’.  The ‘fixed’ face specifies fixed-width text; by
default, it appears the same as ‘bold’.


File: emacs.info,  Node: Enriched Indentation,  Next: Enriched Justification,  Prev: Enriched Faces,  Up: Enriched Text

26.14.5 Indentation in Enriched Text
------------------------------------

In Enriched mode, you can specify different amounts of indentation for
the right or left margin of a paragraph or a part of a paragraph.  These
margins also affect fill commands such as ‘M-q’ (*note Filling::).

   The Indentation submenu of Text Properties offers commands for
specifying indentation:

‘Indent More’
     Indent the region by 4 columns (‘increase-left-margin’).  In
     Enriched mode, this command is also available on ‘C-x <TAB>’; if
     you supply a numeric argument, that says how many columns to add to
     the margin (a negative argument reduces the number of columns).

‘Indent Less’
     Remove 4 columns of indentation from the region.

‘Indent Right More’
     Make the text narrower by indenting 4 columns at the right margin.

‘Indent Right Less’
     Remove 4 columns of indentation from the right margin.

   The variable ‘standard-indent’ specifies how many columns these
commands should add to or subtract from the indentation.  The default
value is 4.  The default right margin for Enriched mode is controlled by
the variable ‘fill-column’, as usual.

   You can also type ‘C-c [’ (‘set-left-margin’) and ‘C-c ]’
(‘set-right-margin’) to set the left and right margins.  You can specify
the margin width with a numeric argument; otherwise these commands
prompt for a value via the minibuffer.

   The fill prefix, if any, works in addition to the specified paragraph
indentation: ‘C-x .’ does not include the specified indentation’s
whitespace in the new value for the fill prefix, and the fill commands
look for the fill prefix after the indentation on each line.  *Note Fill
Prefix::.


File: emacs.info,  Node: Enriched Justification,  Next: Enriched Properties,  Prev: Enriched Indentation,  Up: Enriched Text

26.14.6 Justification in Enriched Text
--------------------------------------

In Enriched mode, you can use the following commands to specify various
“justification styles” for filling.  These commands apply to the
paragraph containing point, or, if the region is active, to all
paragraphs overlapping the region.

‘M-j l’
     Align lines to the left margin (‘set-justification-left’).

‘M-j r’
     Align lines to the right margin (‘set-justification-right’).

‘M-j b’
     Align lines to both margins, inserting spaces in the middle of the
     line to achieve this (‘set-justification-full’).

‘M-j c’
‘M-S’
     Center lines between the margins (‘set-justification-center’).

‘M-j u’
     Turn off filling entirely (‘set-justification-none’).  The fill
     commands do nothing on text with this setting.  You can, however,
     still indent the left margin.

   You can also specify justification styles using the Justification
submenu in the Text Properties menu.  The default justification style is
specified by the per-buffer variable ‘default-justification’.  Its value
should be one of the symbols ‘left’, ‘right’, ‘full’, ‘center’, or
‘none’; their meanings correspond to the commands above.


File: emacs.info,  Node: Enriched Properties,  Prev: Enriched Justification,  Up: Enriched Text

26.14.7 Setting Other Text Properties
-------------------------------------

The Special Properties submenu of Text Properties has entries for adding
or removing four other text properties: ‘read-only’, (which disallows
alteration of the text), ‘invisible’ (which hides text), ‘intangible’
(which disallows moving point within the text), and ‘charset’ (which is
important for selecting a proper font to display a character).  The
‘Remove Special’ menu item removes all of these special properties from
the text in the region.

   The ‘invisible’ and ‘intangible’ properties are not saved.

   Enriched mode also supports saving and restoring ‘display’ properties
(*note (elisp)Display Property::), which affect how text is displayed on
the screen, and also allow displaying images and strings that come from
sources other than buffer text.  The ‘display’ properties also support
execution of arbitrary Lisp forms as part of processing the property for
display, thus providing a means to dynamically tailor the display to
some conditions that can only be known at display time.  Since execution
of arbitrary Lisp opens Emacs to potential attacks, especially when the
source of enriched text is outside of Emacs or even outside of your
system (e.g., if it was received in an email message), such execution is
by default disabled in Enriched mode.  You can enable it by customizing
the variable ‘enriched-allow-eval-in-display-props’ to a non-‘nil’
value.


File: emacs.info,  Node: Text Based Tables,  Next: Two-Column,  Prev: Enriched Text,  Up: Text

26.15 Editing Text-based Tables
===============================

The ‘table’ package provides commands to easily edit text-based tables.
Here is an example of what such a table looks like:

     +-----------------+--------------------------------+-----------------+
     |     Command     |          Description           |   Key Binding   |
     +-----------------+--------------------------------+-----------------+
     |  forward-char   |Move point right N characters   |       C-f       |
     |                 |(left if N is negative).        |                 |
     |                 |                                |                 |
     +-----------------+--------------------------------+-----------------+
     |  backward-char  |Move point left N characters    |       C-b       |
     |                 |(right if N is negative).       |                 |
     |                 |                                |                 |
     +-----------------+--------------------------------+-----------------+

   When Emacs recognizes such a stretch of text as a table (*note Table
Recognition::), editing the contents of each table cell will
automatically resize the table, whenever the contents become too large
to fit in the cell.  You can use the commands defined in the following
sections for navigating and editing the table layout.

   Type ‘M-x table-fixed-width-mode’ to toggle the automatic table
resizing feature.

* Menu:

* Table Definition::          What is a text based table.
* Table Creation::            How to create a table.
* Table Recognition::         How to activate and deactivate tables.
* Cell Commands::             Cell-oriented commands in a table.
* Cell Justification::        Justifying cell contents.
* Table Rows and Columns::    Inserting and deleting rows and columns.
* Table Conversion::          Converting between plain text and tables.
* Table Misc::                Table miscellany.


File: emacs.info,  Node: Table Definition,  Next: Table Creation,  Up: Text Based Tables

26.15.1 What is a Text-based Table?
-----------------------------------

A “table” consists of a rectangular text area which is divided into
“cells”.  Each cell must be at least one character wide and one
character high, not counting its border lines.  A cell can be subdivided
into more cells, but they cannot overlap.

   Cell border lines are drawn with three special characters, specified
by the following variables:

‘table-cell-vertical-char’
     The character used for vertical lines.  The default is ‘|’.

‘table-cell-horizontal-chars’
     The characters used for horizontal lines.  The default is ‘"-="’.

‘table-cell-intersection-char’
     The character used for the intersection of horizontal and vertical
     lines.  The default is ‘+’.

The following are examples of _invalid_ tables:

        +-----+       +--+    +-++--+
        |     |       |  |    | ||  |
        |     |       |  |    | ||  |
        +--+  |    +--+--+    +-++--+
        |  |  |    |  |  |    +-++--+
        |  |  |    |  |  |    | ||  |
        +--+--+    +--+--+    +-++--+
           a          b          c

From left to right:

  a. Overlapped cells or non-rectangular cells are not allowed.
  b. The border must be rectangular.
  c. Cells must have a minimum width/height of one character.


File: emacs.info,  Node: Table Creation,  Next: Table Recognition,  Prev: Table Definition,  Up: Text Based Tables

26.15.2 Creating a Table
------------------------

To create a text-based table from scratch, type ‘M-x table-insert’.
This command prompts for the number of table columns, the number of
table rows, cell width and cell height.  The cell width and cell height
do not include the cell borders; each can be specified as a single
integer (which means each cell is given the same width/height), or as a
sequence of integers separated by spaces or commas (which specify the
width/height of the individual table columns/rows, counting from left to
right for table columns and from top to bottom for table rows).  The
specified table is then inserted at point.

   The table inserted by ‘M-x table-insert’ contains special text
properties, which tell Emacs to treat it specially as a text-based
table.  If you save the buffer to a file and visit it again later, those
properties are lost, and the table appears to Emacs as an ordinary piece
of text.  See the next section, for how to convert it back into a table.


File: emacs.info,  Node: Table Recognition,  Next: Cell Commands,  Prev: Table Creation,  Up: Text Based Tables

26.15.3 Table Recognition
-------------------------

Existing text-based tables in a buffer, which lack the special text
properties applied by ‘M-x table-insert’, are not treated specially as
tables.  To apply those text properties, type ‘M-x table-recognize’.
This command scans the current buffer, “recognizes” valid table cells,
and applies the relevant text properties.  Conversely, type ‘M-x
table-unrecognize’ to “unrecognize” all tables in the current buffer,
removing the special text properties and converting tables back to plain
text.

   You can also use the following commands to selectively recognize or
unrecognize tables:

‘M-x table-recognize-region’
     Recognize tables within the current region.

‘M-x table-unrecognize-region’
     Unrecognize tables within the current region.

‘M-x table-recognize-table’
     Recognize the table at point and activate it.

‘M-x table-unrecognize-table’
     Deactivate the table at point.

‘M-x table-recognize-cell’
     Recognize the cell at point and activate it.

‘M-x table-unrecognize-cell’
     Deactivate the cell at point.

   *Note Table Conversion::, for another way to recognize a table.


File: emacs.info,  Node: Cell Commands,  Next: Cell Justification,  Prev: Table Recognition,  Up: Text Based Tables

26.15.4 Commands for Table Cells
--------------------------------

The commands ‘M-x table-forward-cell’ and ‘M-x table-backward-cell’ move
point from the current cell to an adjacent cell.  The order is cyclic:
when point is in the last cell of a table, ‘M-x table-forward-cell’
moves to the first cell.  Likewise, when point is on the first cell,
‘M-x table-backward-cell’ moves to the last cell.

   ‘M-x table-span-cell’ prompts for a direction—right, left, above, or
below—and merges the current cell with the adjacent cell in that
direction.  This command signals an error if the merge would result in
an illegitimate cell layout.

   ‘M-x table-split-cell’ splits the current cell vertically or
horizontally, prompting for the direction with the minibuffer.  To split
in a specific direction, use ‘M-x table-split-cell-vertically’ and ‘M-x
table-split-cell-horizontally’.  When splitting vertically, the old cell
contents are automatically split between the two new cells.  When
splitting horizontally, you are prompted for how to divide the cell
contents, if the cell is non-empty; the options are ‘split’ (divide the
contents at point), ‘left’ (put all the contents in the left cell), and
‘right’ (put all the contents in the right cell).

   The following commands enlarge or shrink a cell.  By default, they
resize by one row or column; if a numeric argument is supplied, that
specifies the number of rows or columns to resize by.

‘M-x table-heighten-cell’
     Enlarge the current cell vertically.

‘M-x table-shorten-cell’
     Shrink the current cell vertically.

‘M-x table-widen-cell’
     Enlarge the current cell horizontally.

‘M-x table-narrow-cell’
     Shrink the current cell horizontally.


File: emacs.info,  Node: Cell Justification,  Next: Table Rows and Columns,  Prev: Cell Commands,  Up: Text Based Tables

26.15.5 Cell Justification
--------------------------

The command ‘M-x table-justify’ imposes “justification” on one or more
cells in a text-based table.  Justification determines how the text in
the cell is aligned, relative to the edges of the cell.  Each cell in a
table can be separately justified.

   ‘M-x table-justify’ first prompts for what to justify; the options
are ‘cell’ (just the current cell), ‘column’ (all cells in the current
table column) and ‘row’ (all cells in the current table row).  The
command then prompts for the justification style; the options are
‘left’, ‘center’, ‘right’, ‘top’, ‘middle’, ‘bottom’, or ‘none’ (meaning
no vertical justification).

   Horizontal and vertical justification styles are specified
independently, and both types can be in effect simultaneously; for
instance, you can call ‘M-x table-justify’ twice, once to specify
‘right’ justification and once to specify ‘bottom’ justification, to
align the contents of a cell to the bottom right.

   The justification style is stored in the buffer as a text property,
and is lost when you kill the buffer or exit Emacs.  However, the table
recognition commands, such as ‘M-x table-recognize’ (*note Table
Recognition::), attempt to determine and re-apply each cell’s
justification style, by examining its contents.  To disable this
feature, change the variable ‘table-detect-cell-alignment’ to ‘nil’.


File: emacs.info,  Node: Table Rows and Columns,  Next: Table Conversion,  Prev: Cell Justification,  Up: Text Based Tables

26.15.6 Table Rows and Columns
------------------------------

‘M-x table-insert-row’ inserts a row of cells before the current table
row.  The current row, together with point, is pushed down past the new
row.  To insert a row after the last row at the bottom of a table,
invoke this command with point below the table, just below the bottom
edge.  You can insert more than one row at a time by using a numeric
prefix argument.

   Similarly, ‘M-x table-insert-column’ inserts a column of cells to the
left of the current table column.  To insert a column to the right side
of the rightmost column, invoke this command with point to the right of
the rightmost column, outside the table.  A numeric prefix argument
specifies the number of columns to insert.

   ‘M-x table-delete-column’ deletes the column of cells at point.
Similarly, ‘M-x table-delete-row’ deletes the row of cells at point.  A
numeric prefix argument to either command specifies the number of
columns or rows to delete.


File: emacs.info,  Node: Table Conversion,  Next: Table Misc,  Prev: Table Rows and Columns,  Up: Text Based Tables

26.15.7 Converting Between Plain Text and Tables
------------------------------------------------

The command ‘M-x table-capture’ captures plain text in a region and
turns it into a table.  Unlike ‘M-x table-recognize’ (*note Table
Recognition::), the original text does not need to have a table
appearance; it only needs to have a logical table-like structure.

   For example, suppose we have the following numbers, which are divided
into three lines and separated horizontally by commas:

     1, 2, 3, 4
     5, 6, 7, 8
     , 9, 10

Invoking ‘M-x table-capture’ on that text produces this table:

     +-----+-----+-----+-----+
     |1    |2    |3    |4    |
     +-----+-----+-----+-----+
     |5    |6    |7    |8    |
     +-----+-----+-----+-----+
     |     |9    |10   |     |
     +-----+-----+-----+-----+

   ‘M-x table-release’ does the opposite: it converts a table back to
plain text, removing its cell borders.

   One application of this pair of commands is to edit a text in layout.
Look at the following three paragraphs:

     table-capture is a powerful command.
     Here are some things it can do:

     Parse Cell Items   Using row and column delimiter regexps,
                        it parses the specified text area and
                        extracts cell items into a table.

Applying ‘table-capture’ to a region containing the above text, with
empty strings for the column and row delimiter regexps, creates a table
with a single cell like the following one.

     +----------------------------------------------------------+
     |table-capture is a powerful command.                      |
     |Here are some things it can do:                           |
     |                                                          |
     |Parse Cell Items   Using row and column delimiter regexps,|
     |                   it parses the specified text area and  |
     |                   extracts cell items into a table.      |
     +----------------------------------------------------------+

We can then use the cell splitting commands (*note Cell Commands::) to
subdivide the table so that each paragraph occupies a cell:

     +----------------------------------------------------------+
     |table-capture is a powerful command.                      |
     |Here are some things it can do:                           |
     +-----------------+----------------------------------------+
     |Parse Cell Items | Using row and column delimiter regexps,|
     |                 | it parses the specified text area and  |
     |                 | extracts cell items into a table.      |
     +-----------------+----------------------------------------+

Each cell can now be edited independently without affecting the layout
of other cells.  When finished, we can invoke ‘M-x table-release’ to
convert the table back to plain text.


File: emacs.info,  Node: Table Misc,  Prev: Table Conversion,  Up: Text Based Tables

26.15.8 Table Miscellany
------------------------

The command ‘table-query-dimension’ reports the layout of the table and
table cell at point.  Here is an example of its output:

     Cell: (21w, 6h), Table: (67w, 16h), Dim: (2c, 3r), Total Cells: 5

This indicates that the current cell is 21 characters wide and 6 lines
high, the table is 67 characters wide and 16 lines high with 2 columns
and 3 rows, and a total of 5 cells.

   ‘M-x table-insert-sequence’ traverses the cells of a table inserting
a sequence of text strings into each cell as it goes.  It asks for the
base string of the sequence, and then produces the sequence by
“incrementing” the base string, either numerically (if the base string
ends in numerical characters) or in the ASCII order.  In addition to the
base string, the command prompts for the number of elements in the
sequence, the increment, the cell interval, and the justification of the
text in each cell.

   ‘M-x table-generate-source’ generates a table formatted for a
specific markup language.  It asks for a language (which must be one of
‘html’, ‘latex’, ‘cals’, ‘wiki’ or ‘mediawiki’), a destination buffer in
which to put the result, and a table caption, and then inserts the
generated table into the specified buffer.  The default destination
buffer is ‘table.LANG’, where LANG is the language you specified.


File: emacs.info,  Node: Two-Column,  Prev: Text Based Tables,  Up: Text

26.16 Two-Column Editing
========================

Two-column mode lets you conveniently edit two side-by-side columns of
text.  It uses two side-by-side windows, each showing its own buffer.
There are three ways to enter two-column mode:

‘<F2> 2’ or ‘C-x 6 2’
     Enter two-column mode with the current buffer on the left, and on
     the right, a buffer whose name is based on the current buffer’s
     name (‘2C-two-columns’).  If the right-hand buffer doesn’t already
     exist, it starts out empty; the current buffer’s contents are not
     changed.

     This command is appropriate when the current buffer is empty or
     contains just one column and you want to add another column.

‘<F2> s’ or ‘C-x 6 s’
     Split the current buffer, which contains two-column text, into two
     buffers, and display them side by side (‘2C-split’).  The current
     buffer becomes the left-hand buffer, but the text in the right-hand
     column is moved into the right-hand buffer.  The current column
     specifies the split point.  Splitting starts with the current line
     and continues to the end of the buffer.

     This command is appropriate when you have a buffer that already
     contains two-column text, and you wish to separate the columns
     temporarily.

‘<F2> b BUFFER <RET>’
‘C-x 6 b BUFFER <RET>’
     Enter two-column mode using the current buffer as the left-hand
     buffer, and using buffer BUFFER as the right-hand buffer
     (‘2C-associate-buffer’).

   ‘<F2> s’ or ‘C-x 6 s’ looks for a column separator, which is a string
that appears on each line between the two columns.  You can specify the
width of the separator with a numeric argument to ‘<F2> s’; that many
characters, before point, constitute the separator string.  By default,
the width is 1, so the column separator is the character before point.

   When a line has the separator at the proper place, ‘<F2> s’ puts the
text after the separator into the right-hand buffer, and deletes the
separator.  Lines that don’t have the column separator at the proper
place remain unsplit; they stay in the left-hand buffer, and the
right-hand buffer gets an empty line to correspond.  (This is the way to
write a line that spans both columns while in two-column mode: write it
in the left-hand buffer, and put an empty line in the right-hand
buffer.)

   The command ‘<F2> <RET>’ or ‘C-x 6 <RET>’ (‘2C-newline’) inserts a
newline in each of the two buffers at corresponding positions.  This is
the easiest way to add a new line to the two-column text while editing
it in split buffers.

   When you have edited both buffers as you wish, merge them with ‘<F2>
1’ or ‘C-x 6 1’ (‘2C-merge’).  This copies the text from the right-hand
buffer as a second column in the other buffer.  To go back to two-column
editing, use ‘<F2> s’.

   Use ‘<F2> d’ or ‘C-x 6 d’ to dissociate the two buffers, leaving each
as it stands (‘2C-dissociate’).  If the other buffer, the one not
current when you type ‘<F2> d’, is empty, ‘<F2> d’ kills it.


File: emacs.info,  Node: Programs,  Next: Building,  Prev: Text,  Up: Top

# /. 27 Editing Programs
***********************

This chapter describes Emacs features for facilitating editing programs.
Some of the things these features can do are:

   • Find or move over top-level definitions (*note Defuns::).
   • Apply the usual indentation conventions of the language (*note
     Program Indent::).
   • Balance parentheses (*note Parentheses::).
   • Insert, kill or align comments (*note Comments::).
   • Highlight program syntax (*note Font Lock::).

* Menu:

* Program Modes::       Major modes for editing programs.
* Defuns::              Commands to operate on major top-level parts
                          of a program.
* Program Indent::      Adjusting indentation to show the nesting.
* Parentheses::         Commands that operate on parentheses.
* Comments::            Inserting, killing, and aligning comments.
* Documentation::       Getting documentation of functions you plan to call.
* Hideshow::            Displaying blocks selectively.
* Symbol Completion::   Completion on symbol names of your program or language.
* MixedCase Words::     Dealing with identifiersLikeThis.
* Semantic::            Suite of editing tools based on source code parsing.
* Misc for Programs::   Other Emacs features useful for editing programs.
* C Modes::             Special commands of C, C++, Objective-C, Java,
                          IDL, Pike and AWK modes.
* Asm Mode::            Asm mode and its special features.
* Fortran::             Fortran mode and its special features.


File: emacs.info,  Node: Program Modes,  Next: Defuns,  Up: Programs

27.1 Major Modes for Programming Languages
==========================================

Emacs has specialized major modes (*note Major Modes::) for many
programming languages.  A programming language mode typically specifies
the syntax of expressions, the customary rules for indentation, how to
do syntax highlighting for the language, and how to find the beginning
or end of a function definition.  It often has features for compiling
and debugging programs as well.  The major mode for each language is
named after the language; for instance, the major mode for the C
programming language is ‘c-mode’.

   Emacs has programming language modes for Lisp, Scheme, the
Scheme-based DSSSL expression language, Ada, ASM, AWK, C, C++, C#,
Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles,
Metafont (TeX’s companion for font creation), Modula2, Object Pascal,
Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python,
Ruby, Simula, SQL, Tcl, TypeScript, Verilog, and VHDL.  An alternative
mode for Perl is called CPerl mode.  Modes are also available for the
scripting languages of the common GNU and Unix shells, and
MS-DOS/MS-Windows ‘BAT’ files, JSON, DNS master files, CSS (Cascading
Style Sheets), Dockerfiles, CMake files, and various sorts of
configuration files.

   Ideally, Emacs should have a major mode for each programming language
that you might want to edit.  If it doesn’t have a mode for your
favorite language, the mode might be implemented in a package not
distributed with Emacs (*note Packages::); or you can contribute one.

   If Emacs has been compiled with the ‘tree-sitter’ library, it offers
several optional editing modes based on that library, which utilize the
incremental parsing capabilities provided by ‘tree-sitter’.  These modes
have ‘-ts-’ in their names; for example ‘c-ts-mode’, ‘python-ts-mode’,
etc.

   In most programming languages, indentation should vary from line to
line to illustrate the structure of the program.  Therefore, in most
programming language modes, typing ‘<TAB>’ updates the indentation of
the current line (*note Program Indent::).  Furthermore, ‘<DEL>’ is
usually bound to ‘backward-delete-char-untabify’, which deletes backward
treating each tab as if it were the equivalent number of spaces, so that
you can delete one column of indentation without worrying whether the
whitespace consists of spaces or tabs.

   Entering a programming language mode runs the custom Lisp functions
specified in the hook variable ‘prog-mode-hook’, followed by those
specified in the mode’s own mode hook (*note Major Modes::).  For
instance, entering C mode runs the hooks ‘prog-mode-hook’ and
‘c-mode-hook’.  *Note Hooks::, for information about hooks.

   Separate manuals are available for the modes for Ada (*note Ada Mode:
(ada-mode)Top.), C/C++/Objective C/Java/Corba IDL/Pike/AWK (*note CC
Mode: (ccmode)Top.), Octave, VHDL, and IDLWAVE (*note IDLWAVE:
(idlwave)Top.).


File: emacs.info,  Node: Defuns,  Next: Program Indent,  Prev: Program Modes,  Up: Programs

27.2 Top-Level Definitions, or Defuns
=====================================

In Emacs, a major definition at the top level in the buffer, such as a
function, is called a “defun”.  The name comes from Lisp, but in Emacs
we use it for all languages.

* Menu:

* Left Margin Paren::   An open-paren or similar opening delimiter
                          starts a defun if it is at the left margin.
* Moving by Defuns::    Commands to move over or mark a major definition.
* Imenu::               Making buffer indexes as menus.
* Which Function::      Which Function mode shows which function you are in.


File: emacs.info,  Node: Left Margin Paren,  Next: Moving by Defuns,  Up: Defuns

27.2.1 Left Margin Convention
-----------------------------

Many programming-language modes have traditionally assumed that any
opening parenthesis or brace found at the left margin is the start of a
top-level definition, or defun.  So, by default, commands which seek the
beginning of a defun accept such a delimiter as signifying that
position.

   If you want to override this convention, you can do so by setting the
user option ‘open-paren-in-column-0-is-defun-start’ to ‘nil’.  If this
option is set to ‘t’ (the default), commands seeking the start of a
defun will stop at opening parentheses or braces at column zero which
aren’t in a comment or string.  When it is ‘nil’, defuns are found by
searching for parens or braces at the outermost level.  Since low-level
Emacs routines no longer depend on this convention, you usually won’t
need to change ‘open-paren-in-column-0-is-defun-start’ from its default.


File: emacs.info,  Node: Moving by Defuns,  Next: Imenu,  Prev: Left Margin Paren,  Up: Defuns

27.2.2 Moving by Defuns
-----------------------

These commands move point or set up the region based on top-level major
definitions, also called “defuns”.

‘C-M-a’
     Move to beginning of current or preceding defun
     (‘beginning-of-defun’).
‘C-M-e’
     Move to end of current or following defun (‘end-of-defun’).
‘C-M-h’
     Put region around whole current or following defun (‘mark-defun’).

   The commands to move to the beginning and end of the current defun
are ‘C-M-a’ (‘beginning-of-defun’) and ‘C-M-e’ (‘end-of-defun’).  If you
repeat one of these commands, or use a positive numeric argument, each
repetition moves to the next defun in the direction of motion.

   ‘C-M-a’ with a negative argument −N moves forward N times to the next
beginning of a defun.  This is not exactly the same place that ‘C-M-e’
with argument N would move to; the end of this defun is not usually
exactly the same place as the beginning of the following defun.
(Whitespace, comments, and perhaps declarations can separate them.)
Likewise, ‘C-M-e’ with a negative argument moves back to an end of a
defun, which is not quite the same as ‘C-M-a’ with a positive argument.

   To operate on the current defun, use ‘C-M-h’ (‘mark-defun’), which
sets the mark at the end of the current defun and puts point at its
beginning.  *Note Marking Objects::.  This is the easiest way to get
ready to kill the defun in order to move it to a different place in the
file.  If the defun is directly preceded by comments (with no
intervening blank lines), they are marked, too.  If you use the command
while point is between defuns, it uses the following defun.  If you use
the command while the mark is already active, it extends the end of the
region to include one more defun.  With a prefix argument, it marks that
many defuns or extends the region by the appropriate number of defuns.
With negative prefix argument it marks defuns in the opposite direction
and also changes the direction of selecting for subsequent uses of
‘mark-defun’.

   In C mode, ‘C-M-h’ runs the function ‘c-mark-function’, which is
almost the same as ‘mark-defun’; the difference is that it backs up over
the argument declarations, function name and returned data type so that
the entire C function is inside the region.  This is an example of how
major modes adjust the standard key bindings so that they do their
standard jobs in a way better fitting a particular language.  Other
major modes may replace any or all of these key bindings for that
purpose.

   Some programming languages supported “nested defuns”, whereby a defun
(such as a function or a method or a class) can be defined inside (i.e.,
as part of the body) of another defun.  The commands described above by
default find the beginning and the end of the _innermost_ defun around
point.  Major modes based on the tree-sitter library provide control of
this behavior: if the variable ‘treesit-defun-tactic’ is set to the
value ‘top-level’, the defun commands will find the _outermost_ defuns
instead.


File: emacs.info,  Node: Imenu,  Next: Which Function,  Prev: Moving by Defuns,  Up: Defuns

27.2.3 Imenu
------------

The Imenu facility offers a way to find the major definitions in a file
by name.  It is also useful in text formatter major modes, where it
treats each chapter, section, etc., as a definition.  (*Note Xref::, for
a more powerful feature that handles multiple files together.)

   If you type ‘M-g i’ (‘imenu’), it reads the name of a definition
using the minibuffer, then moves point to that definition.  You can use
completion to specify the name; the command always displays the whole
list of valid names.

   Alternatively, you can bind the command ‘imenu’ to a mouse click.
Then it displays mouse menus for you to select a definition name.  You
can also add the buffer’s index to the menu bar by calling
‘imenu-add-menubar-index’.  If you want to have this menu bar item
available for all buffers in a certain major mode, you can do this by
adding ‘imenu-add-menubar-index’ to its mode hook.  But if you have done
that, you will have to wait a little while each time you visit a file in
that mode, while Emacs finds all the definitions in that buffer.

   When you change the contents of a buffer, if you add or delete
definitions, you can update the buffer’s index based on the new contents
by invoking the ‘*Rescan*’ item in the menu.  Rescanning happens
automatically if you set ‘imenu-auto-rescan’ to a non-‘nil’ value.
There is no need to rescan because of small changes in the text.

   ‘imenu-auto-rescan’ will be disabled in buffers that are larger than
‘imenu-auto-rescan-maxout’ in bytes, and scanning is stopped if it takes
more than ‘imenu-max-index-time’ seconds.

   You can customize the way the menus are sorted by setting the
variable ‘imenu-sort-function’.  By default, names are ordered as they
occur in the buffer; if you want alphabetic sorting, use the symbol
‘imenu--sort-by-name’ as the value.  You can also define your own
comparison function by writing Lisp code.

   If Eglot is activated for the current buffer’s project (*note
Projects::) and the current buffer’s major mode, Eglot provides its own
facility for producing the buffer’s index based on the analysis of the
program source by the language-server which manages the current buffer.
*Note (eglot)Eglot Features::.

   Imenu provides the information to guide Which Function mode (*note
Which Function::).  The Speedbar can also use it (*note Speedbar::).


File: emacs.info,  Node: Which Function,  Prev: Imenu,  Up: Defuns

27.2.4 Which Function Mode
--------------------------

Which Function mode is a global minor mode (*note Minor Modes::) which
displays the current function name in the mode line, updating it as you
move around in a buffer.

   To either enable or disable Which Function mode, use the command ‘M-x
which-function-mode’.  Which Function mode is a global minor mode.  By
default, it takes effect in all major modes that know how to support it
(i.e., all the major modes that support Imenu).  You can restrict it to
a specific list of major modes by changing the value of the variable
‘which-func-modes’ from ‘t’ (which means to support all available major
modes) to a list of major mode names.


File: emacs.info,  Node: Program Indent,  Next: Parentheses,  Prev: Defuns,  Up: Programs

27.3 Indentation for Programs
=============================

The best way to keep a program properly indented is to use Emacs to
reindent it as you change it.  Emacs has commands to indent either a
single line, a specified number of lines, or all of the lines inside a
single parenthetical grouping.

   *Note Indentation::, for general information about indentation.  This
section describes indentation features specific to programming language
modes.

* Menu:

* Basic Indent::        Indenting a single line.
* Multi-line Indent::   Commands to reindent many lines at once.
* Lisp Indent::         Specifying how each Lisp function should be indented.
* C Indent::            Extra features for indenting C and related modes.
* Custom C Indent::     Controlling indentation style for C and related modes.

   Emacs also provides a Lisp pretty-printer in the ‘pp’ package, which
reformats Lisp objects with nice-looking indentation.  *Note pp:
(elisp)Output Functions.


File: emacs.info,  Node: Basic Indent,  Next: Multi-line Indent,  Up: Program Indent

27.3.1 Basic Program Indentation Commands
-----------------------------------------

‘<TAB>’
     Adjust indentation of current line (‘indent-for-tab-command’).
‘<RET>’
     Insert a newline, then adjust indentation of following line
     (‘newline’).

   The basic indentation command is ‘<TAB>’ (‘indent-for-tab-command’),
which was documented in *note Indentation::.  In programming language
modes, ‘<TAB>’ indents the current line, based on the indentation and
syntactic content of the preceding lines; if the region is active,
‘<TAB>’ indents each line within the region, not just the current line.

   The command ‘<RET>’ (‘newline’), which was documented in *note
Inserting Text::, does the same as ‘C-j’ followed by ‘<TAB>’: it inserts
a new line, then adjusts the line’s indentation.

   When indenting a line that starts within a parenthetical grouping,
Emacs usually places the start of the line under the preceding line
within the group, or under the text after the parenthesis.  If you
manually give one of these lines a nonstandard indentation (e.g., for
aesthetic purposes), the lines below will follow it.

   The indentation commands for most programming language modes assume
that an open-parenthesis, open-brace or other opening delimiter at the
left margin is the start of a function.  If the code you are editing
violates this assumption—even if the delimiters occur in strings or
comments—you must set ‘open-paren-in-column-0-is-defun-start’ to ‘nil’
for indentation to work properly.  *Note Left Margin Paren::.


File: emacs.info,  Node: Multi-line Indent,  Next: Lisp Indent,  Prev: Basic Indent,  Up: Program Indent

27.3.2 Indenting Several Lines
------------------------------

Sometimes, you may want to reindent several lines of code at a time.
One way to do this is to use the mark; when the mark is active and the
region is non-empty, ‘<TAB>’ indents every line in the region.
Alternatively, the command ‘C-M-\’ (‘indent-region’) indents every line
in the region, whether or not the mark is active (*note Indentation
Commands::).

   In addition, Emacs provides the following commands for indenting
large chunks of code:

‘C-M-q’
     Reindent all the lines within one parenthetical grouping.
‘C-u <TAB>’
     Shift an entire parenthetical grouping rigidly sideways so that its
     first line is properly indented.
‘M-x indent-code-rigidly’
     Shift all the lines in the region rigidly sideways, but do not
     alter lines that start inside comments and strings.

   To reindent the contents of a single parenthetical grouping, position
point before the beginning of the grouping and type ‘C-M-q’.  This
changes the relative indentation within the grouping, without affecting
its overall indentation (i.e., the indentation of the line where the
grouping starts).  The function that ‘C-M-q’ runs depends on the major
mode; it is ‘indent-pp-sexp’ in Lisp mode, ‘c-indent-exp’ in C mode,
etc.  To correct the overall indentation as well, type ‘<TAB>’ first.

   If you like the relative indentation within a grouping but not the
indentation of its first line, move point to that first line and type
‘C-u <TAB>’.  In Lisp, C, and some other major modes, ‘<TAB>’ with a
numeric argument reindents the current line as usual, then reindents by
the same amount all the lines in the parenthetical grouping starting on
the current line.  It is clever, though, and does not alter lines that
start inside strings.  Neither does it alter C preprocessor lines when
in C mode, but it does reindent any continuation lines that may be
attached to them.

   The command ‘M-x indent-code-rigidly’ rigidly shifts all the lines in
the region sideways, like ‘indent-rigidly’ does (*note Indentation
Commands::).  It doesn’t alter the indentation of lines that start
inside a string, unless the region also starts inside that string.  The
prefix arg specifies the number of columns to indent.


File: emacs.info,  Node: Lisp Indent,  Next: C Indent,  Prev: Multi-line Indent,  Up: Program Indent

27.3.3 Customizing Lisp Indentation
-----------------------------------

The indentation pattern for a Lisp expression can depend on the function
called by the expression.  For each Lisp function, you can choose among
several predefined patterns of indentation, or define an arbitrary one
with a Lisp program.

   The standard pattern of indentation is as follows: the second line of
the expression is indented under the first argument, if that is on the
same line as the beginning of the expression; otherwise, the second line
is indented underneath the function name.  Each following line is
indented under the previous line whose nesting depth is the same.

   If the variable ‘lisp-indent-offset’ is non-‘nil’, it overrides the
usual indentation pattern for the second line of an expression, so that
such lines are always indented ‘lisp-indent-offset’ more columns than
the containing list.

   Certain functions override the standard pattern.  Functions whose
names start with ‘def’ treat the second lines as the start of a “body”,
by indenting the second line ‘lisp-body-indent’ additional columns
beyond the open-parenthesis that starts the expression.

   You can override the standard pattern in various ways for individual
functions, according to the ‘lisp-indent-function’ property of the
function name.  This is normally done for macro definitions, using the
‘declare’ construct.  *Note (elisp)Defining Macros::.

   In Emacs Lisp, lists are usually indented as if they are
function-like forms:

     (setq foo '(bar zot
                     gazonk))

   However, if you add a space after the opening parenthesis, this tells
Emacs that it’s a data list instead of a piece of code, and Emacs will
then indent it like this:

     (setq foo '( bar zot
                  gazonk))


File: emacs.info,  Node: C Indent,  Next: Custom C Indent,  Prev: Lisp Indent,  Up: Program Indent

27.3.4 Commands for C Indentation
---------------------------------

Here are special features for indentation in C mode and related modes:

‘C-c C-q’
     Reindent the current top-level function definition or aggregate
     type declaration (‘c-indent-defun’ in CC mode,
     ‘c-ts-mode-indent-defun’ in ‘c-ts-mode’ based on tree-sitter).

‘C-M-q’
     Reindent each line in the balanced expression (*note
     Expressions::), also known as “sexp”, that follows point.  In CC
     mode, this invokes ‘c-indent-exp’; in tree-sitter based ‘c-ts-mode’
     this invokes a more general ‘prog-indent-sexp’.  A prefix argument
     inhibits warning messages about invalid syntax.

‘<TAB>’
     Reindent the current line, active region, or block starting on this
     line (‘c-indent-line-or-region’).  With prefix argument, rigidly
     reindent the balanced expression which starts on the current line,
     if the current line needs reindentation.

     If ‘c-tab-always-indent’ is ‘t’, this command always reindents the
     current line and does nothing else.  This is the default.

     If that variable is ‘nil’, this command reindents the current line
     only if point is at the left margin or in the line’s indentation;
     otherwise, it inserts a tab (or the equivalent number of spaces, if
     ‘indent-tabs-mode’ is ‘nil’).

     Any other value (not ‘nil’ or ‘t’) means always reindent the line,
     and also insert a tab if within a comment or a string.

   To reindent the whole current buffer, type ‘C-x h C-M-\’.  This first
selects the whole buffer as the region, then reindents that region.

   To reindent the current block, use ‘C-M-u C-M-q’.  This moves to the
front of the block and then reindents it all.


File: emacs.info,  Node: Custom C Indent,  Prev: C Indent,  Up: Program Indent

27.3.5 Customizing C Indentation
--------------------------------

C mode and related modes use a flexible mechanism for customizing
indentation.  C mode indents a source line in two steps: first it
classifies the line syntactically according to its contents and context;
second, it determines the indentation offset associated by your selected
“style” with the syntactic construct and adds this onto the indentation
of the “anchor statement”.

‘C-c . STYLE <RET>’
     Select a predefined style STYLE (‘c-set-style’ in CC mode,
     ‘c-ts-mode-set-style’ in ‘c-ts-mode’ based on tree-sitter).

   A “style” is a named collection of customizations that can be used in
C mode and the related modes.  *note (ccmode)Styles::, for a complete
description.  Emacs comes with several predefined styles, including
‘gnu’, ‘k&r’, ‘bsd’, ‘stroustrup’, ‘linux’, ‘python’, ‘java’,
‘whitesmith’, ‘ellemtel’, and ‘awk’.  Some of these styles are primarily
intended for one language, but any of them can be used with any of the
languages supported by these modes.  To find out what a style looks
like, select it and reindent some code, e.g., by typing ‘C-M-q’ at the
start of a function definition.

   To choose a style for the current buffer, use the command ‘C-c .’.
Specify a style name as an argument (case is not significant).  This
command affects the current buffer only, and it affects only future
invocations of the indentation commands; it does not reindent the code
already in the buffer.  To reindent the whole buffer in the new style,
you can type ‘C-x h C-M-\’.

   When using CC mode, you can also set the variable ‘c-default-style’
to specify the default style for various major modes.  Its value should
be either the style’s name (a string) or an alist, in which each element
specifies one major mode and which indentation style to use for it.  For
example,

     (setq c-default-style
           '((java-mode . "java")
             (awk-mode . "awk")
             (other . "gnu")))

specifies explicit choices for Java and AWK modes, and the default ‘gnu’
style for the other C-like modes.  (These settings are actually the
defaults.)  This variable takes effect when you select one of the C-like
major modes; thus, if you specify a new default style for Java mode, you
can make it take effect in an existing Java mode buffer by typing ‘M-x
java-mode’ there.

   When using the tree-sitter based ‘c-ts-mode’, you can set the default
indentation style by customizing the variable ‘c-ts-mode-indent-style’.

   The ‘gnu’ style specifies the formatting recommended by the GNU
Project for C; it is the default, so as to encourage use of our
recommended style.

   *Note (ccmode)Indentation Engine Basics::, and *note
(ccmode)Customizing Indentation::, for more information on customizing
indentation for C and related modes, including how to override parts of
an existing style and how to define your own styles.

   As an alternative to specifying a style, you can tell Emacs to guess
a style by typing ‘M-x c-guess’ in a sample code buffer.  You can then
apply the guessed style to other buffers with ‘M-x c-guess-install’.
*Note (ccmode)Guessing the Style::, for details.


File: emacs.info,  Node: Parentheses,  Next: Comments,  Prev: Program Indent,  Up: Programs

27.4 Commands for Editing with Parentheses
==========================================

This section describes the commands and features that take advantage of
the parenthesis structure in a program, or help you keep it balanced.

   When talking about these facilities, the term “parenthesis” also
includes braces, brackets, or whatever delimiters are defined to match
in pairs.  The major mode controls which delimiters are significant,
through the syntax table (*note Syntax Tables: (elisp)Syntax Tables.).
In Lisp, only parentheses count; in C, these commands apply to braces
and brackets too.

   You can use ‘M-x check-parens’ to find any unbalanced parentheses and
unbalanced string quotes in the buffer.

* Menu:

* Expressions::         Expressions with balanced parentheses.
* Moving by Parens::    Commands for moving up, down and across
                          in the structure of parentheses.
* Matching::            Insertion of a close-delimiter flashes matching open.


File: emacs.info,  Node: Expressions,  Next: Moving by Parens,  Up: Parentheses

27.4.1 Expressions with Balanced Parentheses
--------------------------------------------

Each programming language mode has its own definition of a “balanced
expression”.  Balanced expressions typically include individual symbols,
numbers, and string constants, as well as pieces of code enclosed in a
matching pair of delimiters.  The following commands deal with balanced
expressions (in Emacs, such expressions are referred to internally as
“sexps”(1)).

‘C-M-f’
     Move forward over a balanced expression (‘forward-sexp’).
‘C-M-b’
     Move backward over a balanced expression (‘backward-sexp’).
‘C-M-k’
     Kill balanced expression forward (‘kill-sexp’).
‘C-M-t’
     Transpose expressions (‘transpose-sexps’).
‘C-M-@’
‘C-M-<SPC>’
     Put mark after following expression (‘mark-sexp’).

   To move forward over a balanced expression, use ‘C-M-f’
(‘forward-sexp’).  If the first significant character after point is an
opening delimiter (e.g., ‘(’, ‘[’ or ‘{’ in C), this command moves past
the matching closing delimiter.  If the character begins a symbol,
string, or number, the command moves over that.

   The command ‘C-M-b’ (‘backward-sexp’) moves backward over a balanced
expression—like ‘C-M-f’, but in the reverse direction.  If the
expression is preceded by any prefix characters (single-quote, backquote
and comma, in Lisp), the command moves back over them as well.

   ‘C-M-f’ or ‘C-M-b’ with an argument repeats that operation the
specified number of times; with a negative argument means to move in the
opposite direction.  In most modes, these two commands move across
comments as if they were whitespace.  Note that their keys, ‘C-M-f’ and
‘C-M-b’, are analogous to ‘C-f’ and ‘C-b’, which move by characters
(*note Moving Point::), and ‘M-f’ and ‘M-b’, which move by words (*note
Words::).

   To kill a whole balanced expression, type ‘C-M-k’ (‘kill-sexp’).
This kills the text that ‘C-M-f’ would move over.

   ‘C-M-t’ (‘transpose-sexps’) switches the positions of the previous
balanced expression and the next one.  It is analogous to the ‘C-t’
command, which transposes characters (*note Transpose::).  An argument
to ‘C-M-t’ serves as a repeat count, moving the previous expression over
that many following ones.  A negative argument moves the previous
balanced expression backwards across those before it.  An argument of
zero, rather than doing nothing, transposes the balanced expressions
ending at or after point and the mark.

   To operate on balanced expressions with a command which acts on the
region, type ‘C-M-<SPC>’ (‘mark-sexp’).  This sets the mark where
‘C-M-f’ would move to.  While the mark is active, each successive call
to this command extends the region by shifting the mark by one
expression.  Positive or negative numeric arguments move the mark
forward or backward by the specified number of expressions.  The alias
‘C-M-@’ is equivalent to ‘C-M-<SPC>’.  *Note Marking Objects::, for more
information about this and related commands.

   In languages that use infix operators, such as C, it is not possible
to recognize all balanced expressions because there can be multiple
possibilities at a given position.  For example, C mode does not treat
‘foo + bar’ as a single expression, even though it _is_ one C
expression; instead, it recognizes ‘foo’ as one expression and ‘bar’ as
another, with the ‘+’ as punctuation between them.  However, C mode
recognizes ‘(foo + bar)’ as a single expression, because of the
parentheses.

   ---------- Footnotes ----------

   (1) The word “sexp” is used to refer to an expression in Lisp.


File: emacs.info,  Node: Moving by Parens,  Next: Matching,  Prev: Expressions,  Up: Parentheses

27.4.2 Moving in the Parenthesis Structure
------------------------------------------

The following commands move over groupings delimited by parentheses (or
whatever else serves as delimiters in the language you are working
with).  They ignore strings and comments, including any parentheses
within them, and also ignore parentheses that are quoted with an escape
character.  These commands are mainly intended for editing programs, but
can be useful for editing any text containing parentheses.  They are
referred to internally as “list commands” because in Lisp these
groupings are lists.

   These commands assume that the starting point is not inside a string
or a comment.  If you invoke them from inside a string or comment, the
results are unreliable.

‘C-M-n’
     Move forward over a parenthetical group (‘forward-list’).
‘C-M-p’
     Move backward over a parenthetical group (‘backward-list’).
‘C-M-u’
     Move up in parenthesis structure (‘backward-up-list’).
‘C-M-d’
     Move down in parenthesis structure (‘down-list’).

   The list commands ‘C-M-n’ (‘forward-list’) and ‘C-M-p’
(‘backward-list’) move forward or backward over one (or N) parenthetical
groupings.

   ‘C-M-n’ and ‘C-M-p’ try to stay at the same level in the parenthesis
structure.  To move _up_ one (or N) levels, use ‘C-M-u’
(‘backward-up-list’).  ‘C-M-u’ moves backward up past one unmatched
opening delimiter.  A positive argument serves as a repeat count; a
negative argument reverses the direction of motion, so that the command
moves forward and up one or more levels.

   To move _down_ in the parenthesis structure, use ‘C-M-d’
(‘down-list’).  In Lisp mode, where ‘(’ is the only opening delimiter,
this is nearly the same as searching for a ‘(’.  An argument specifies
the number of levels to go down.


File: emacs.info,  Node: Matching,  Prev: Moving by Parens,  Up: Parentheses

27.4.3 Matching Parentheses
---------------------------

Emacs has a number of “parenthesis matching” features, which make it
easy to see how and whether parentheses (or other delimiters) match up.

   Whenever you type a self-inserting character that is a closing
delimiter, Emacs briefly indicates the location of the matching opening
delimiter, provided that is on the screen.  If it is not on the screen,
Emacs displays some of the text near it in the echo area.  Either way,
you can tell which grouping you are closing off.  If the opening
delimiter and closing delimiter are mismatched—such as in ‘[x)’—a
warning message is displayed in the echo area.

   Three variables control the display of matching parentheses:

   • ‘blink-matching-paren’ turns the feature on or off: ‘nil’ disables
     it, but the default is ‘t’ to enable it.  Set it to ‘jump’ to make
     indication work by momentarily moving the cursor to the matching
     opening delimiter.  Set it to ‘jump-offscreen’ to make the cursor
     jump, even if the opening delimiter is off screen.

   • ‘blink-matching-delay’ says how many seconds to keep indicating the
     matching opening delimiter.  This may be an integer or
     floating-point number; the default is 1.

   • ‘blink-matching-paren-distance’ specifies how many characters back
     to search to find the matching opening delimiter.  If the match is
     not found in that distance, Emacs stops scanning and nothing is
     displayed.  The default is 102400.

   Show Paren mode is a minor mode that provides a more powerful kind of
automatic matching.  Whenever point is before an opening delimiter or
after a closing delimiter, the delimiter, its matching delimiter, and
optionally the text between them are highlighted.  To toggle Show Paren
mode globally, type ‘M-x show-paren-mode’.  To toggle it only in the
current buffer, type ‘M-x show-paren-local-mode’.

   By default, this mode is switched on in all buffers that are meant
for editing, but is not enabled in buffers that show data.  This is
controlled by the ‘show-paren-predicate’ user option.

   To customize the mode, type
‘M-x customize-group <RET> paren-showing’.  The customizable options
which control the operation of this mode include:

   • ‘show-paren-highlight-openparen’ controls whether to highlight an
     open paren when point is just before it, and hence its position is
     marked by the cursor anyway.  The default is non-‘nil’ (yes).

   • ‘show-paren-style’ controls whether just the two parens, or also
     the text between them get highlighted.  The valid options here are
     ‘parenthesis’ (show the matching paren), ‘expression’ (highlight
     the entire expression enclosed by the parens), and ‘mixed’
     (highlight the matching paren if it is visible in the window, the
     expression otherwise).

   • ‘show-paren-when-point-inside-paren’, when non-‘nil’, causes
     highlighting also when point is inside of the parentheses.  The
     default is ‘nil’.

   • ‘show-paren-when-point-in-periphery’, when non-‘nil’, causes
     highlighting also when point is in whitespace at the beginning of a
     line and there is a paren at the first or last non-whitespace
     position on the line, or when point is at the end of a line and
     there is a paren at the last non-whitespace position on the line.

   • ‘show-paren-context-when-offscreen’, when non-‘nil’, shows some
     context in the echo area when point is in a closing delimiter and
     the opening delimiter is offscreen.  The context is usually the
     line that contains the opening delimiter, except if the opening
     delimiter is on its own line, in which case the context includes
     the previous nonblank line.

   Electric Pair mode, a global minor mode, provides a way to easily
insert matching delimiters: parentheses, braces, brackets, etc.
Whenever you insert an opening delimiter, the matching closing delimiter
is automatically inserted as well, leaving point between the two.
Conversely, when you insert a closing delimiter over an existing one, no
insertion takes places, and that position is simply skipped over.  If
the region is active (*note Mark::), insertion of a delimiter operates
on the region: the characters in the region are enclosed in a pair of
matching delimiters, leaving point after the delimiter you typed.

   These variables control additional features of Electric Pair mode:

   • ‘electric-pair-preserve-balance’, when non-‘nil’, makes the default
     pairing logic balance out the number of opening and closing
     delimiters.

   • ‘electric-pair-delete-adjacent-pairs’, when non-‘nil’, makes
     backspacing between two adjacent delimiters also automatically
     delete the closing delimiter.

   • ‘electric-pair-open-newline-between-pairs’, when non-‘nil’, makes
     inserting a newline between two adjacent pairs also automatically
     open an extra newline after point.

   • ‘electric-pair-skip-whitespace’, when non-‘nil’, causes the minor
     mode to skip whitespace forward before deciding whether to skip
     over the closing delimiter.

   To toggle Electric Pair mode, type ‘M-x electric-pair-mode’.  To
toggle the mode in a single buffer, use ‘M-x electric-pair-local-mode’.


File: emacs.info,  Node: Comments,  Next: Documentation,  Prev: Parentheses,  Up: Programs

27.5 Manipulating Comments
==========================

Because comments are such an important part of programming, Emacs
provides special commands for editing and inserting comments.  It can
also do spell checking on comments with Flyspell Prog mode (*note
Spelling::).

   Some major modes have special rules for indenting different kinds of
comments.  For example, in Lisp code, comments starting with two
semicolons are indented as if they were lines of code, while those
starting with three semicolons are supposed to be aligned to the left
margin and are often used for sectioning purposes.  Emacs understands
these conventions; for instance, typing ‘<TAB>’ on a comment line will
indent the comment to the appropriate position.

     ;; This function is just an example.
     ;;; Here either two or three semicolons are appropriate.
     (defun foo (x)
     ;;;  And now, the first part of the function:
       ;; The following line adds one.
       (1+ x))           ; This line adds one.

* Menu:

* Comment Commands::    Inserting, killing, and aligning comments.
* Multi-Line Comments:: Commands for adding and editing multi-line comments.
* Options for Comments::Customizing the comment features.


File: emacs.info,  Node: Comment Commands,  Next: Multi-Line Comments,  Up: Comments

27.5.1 Comment Commands
-----------------------

The following commands operate on comments:

‘M-;’
     Insert or realign comment on current line; if the region is active,
     comment or uncomment the region instead (‘comment-dwim’).
‘C-x C-;’
     Comment or uncomment the current line (‘comment-line’).  If the
     region is active, comment or uncomment the lines in the region
     instead.
‘C-u M-;’
     Kill comment on current line (‘comment-kill’).
‘C-x ;’
     Set comment column (‘comment-set-column’).
‘C-M-j’
‘M-j’
     Like ‘<RET>’ followed by inserting and aligning a comment
     (‘default-indent-new-line’).  *Note Multi-Line Comments::.
‘M-x comment-region’
‘C-c C-c’ (in C-like modes)
     Add comment delimiters to all the lines in the region.

   The command to create or align a comment is ‘M-;’ (‘comment-dwim’).
The word “dwim” is an acronym for “Do What I Mean”; it indicates that
this command can be used for many different jobs relating to comments,
depending on the situation where you use it.

   When a region is active (*note Mark::), ‘M-;’ either adds comment
delimiters to the region, or removes them.  If every line in the region
is already a comment, it uncomments each of those lines by removing
their comment delimiters.  Otherwise, it adds comment delimiters to
enclose the text in the region.

   If you supply a prefix argument to ‘M-;’ when a region is active,
that specifies the number of comment delimiters to add or delete.  A
positive argument N adds N delimiters, while a negative argument −N
removes N delimiters.

   If the region is not active, and there is no existing comment on the
current line, ‘M-;’ adds a new comment to the current line.  If the line
is blank (i.e., empty or containing only whitespace characters), the
comment is indented to the same position where ‘<TAB>’ would indent to
(*note Basic Indent::).  If the line is non-blank, the comment is placed
after the last non-whitespace character on the line.  Emacs tries to fit
the comment between the columns specified by the variables
‘comment-column’ and ‘comment-fill-column’ (*note Options for
Comments::), if possible.  Otherwise, it will choose some other suitable
position, usually separated from the non-comment text by at least one
space.  In each case, Emacs places point after the comment’s starting
delimiter, so that you can start typing the comment text right away.

   You can also use ‘M-;’ to align an existing comment.  If a line
already contains the comment-start string, ‘M-;’ realigns it to the
conventional alignment and moves point after the comment’s starting
delimiter.  As an exception, comments starting in column 0 are not
moved.  Even when an existing comment is properly aligned, ‘M-;’ is
still useful for moving directly to the start of the comment text.

   ‘C-x C-;’ (‘comment-line’) comments or uncomments complete lines.
When a region is active (*note Mark::), ‘C-x C-;’ either comments or
uncomments the lines in the region.  If the region is not active, this
command comments or uncomments the line point is on.  With a positive
prefix argument N, it operates on N lines starting with the current one;
with a negative argument −N, it affects N preceding lines.  After
invoking this command with a negative argument, successive invocations
with a positive argument will operate on preceding lines as if the
argument were negated.

   ‘C-u M-;’ (‘comment-dwim’ with a prefix argument) when the region is
not active kills any comment on the current line, along with the
whitespace before it.  Since the comment is saved to the kill ring, you
can reinsert it on another line by moving to the end of that line, doing
‘C-y’, and then ‘M-;’ to realign the comment.  You can achieve the same
effect as ‘C-u M-;’ by typing ‘M-x comment-kill’ (‘comment-dwim’
actually calls ‘comment-kill’ as a subroutine when it is given a prefix
argument).  Invoking ‘comment-dwim’ with a prefix numeric argument, as
in ‘C-u N M-;’, when there’s no active region, tells ‘comment-kill’ to
kill comments on N lines.

   The command ‘M-x comment-region’ is equivalent to calling ‘M-;’ on an
active region, except that it always acts on the region, even if the
mark is inactive.  In C mode and related modes, this command is bound to
‘C-c C-c’.  The command ‘M-x uncomment-region’ uncomments each line in
the region; a numeric prefix argument specifies the number of comment
delimiters to remove (negative arguments specify the number of comment
delimiters to add).

   For C-like modes, you can configure the exact effect of ‘M-;’ by
setting the variables ‘c-indent-comment-alist’ and
‘c-indent-comments-syntactically-p’.  For example, on a line ending in a
closing brace, ‘M-;’ puts the comment one space after the brace rather
than at ‘comment-column’.  For full details see *note (ccmode)Comment
Commands::.


File: emacs.info,  Node: Multi-Line Comments,  Next: Options for Comments,  Prev: Comment Commands,  Up: Comments

27.5.2 Multiple Lines of Comments
---------------------------------

If you are typing a comment and wish to continue it to another line,
type ‘M-j’ or ‘C-M-j’ (‘default-indent-new-line’).  This breaks the
current line, and inserts the necessary comment delimiters and
indentation to continue the comment.

   For languages with closing comment delimiters (e.g., ‘*/’ in C), the
exact behavior of ‘M-j’ depends on the value of the variable
‘comment-multi-line’.  If the value is ‘nil’, the command closes the
comment on the old line and starts a new comment on the new line.
Otherwise, it opens a new line within the current comment delimiters.

   When Auto Fill mode is on, going past the fill column while typing a
comment also continues the comment, in the same way as an explicit
invocation of ‘M-j’.

   To turn existing lines into comment lines, use ‘M-;’ with the region
active, or use ‘M-x comment-region’ (*note Comment Commands::).

   You can configure C Mode such that when you type a ‘/’ at the start
of a line in a multi-line block comment, this closes the comment.
Enable the ‘comment-close-slash’ clean-up for this.  *Note
(ccmode)Clean-ups::.


File: emacs.info,  Node: Options for Comments,  Prev: Multi-Line Comments,  Up: Comments

27.5.3 Options Controlling Comments
-----------------------------------

As mentioned in *note Comment Commands::, when the ‘M-j’ command adds a
comment to a line, it tries to place the comment between the columns
specified by the buffer-local variables ‘comment-column’ and
‘comment-fill-column’ (or if that is ‘nil’, then the value of
‘fill-column’, *note Fill Commands::).  You can set either the local
value or the default value of these buffer-local variables in the usual
way (*note Locals::).  Alternatively, you can type ‘C-x ;’
(‘comment-set-column’) to set the value of ‘comment-column’ in the
current buffer to the column where point is currently located.  ‘C-u C-x
;’ sets the comment column to match the last comment before point in the
buffer, and then does a ‘M-;’ to align the current line’s comment under
the previous one.

   The comment commands recognize comments based on the regular
expression that is the value of the variable ‘comment-start-skip’.  Make
sure this regexp does not match the null string.  It may match more than
the comment starting delimiter in the strictest sense of the word; for
example, in C mode the value of the variable could be
‘"/\\*+[ \t]*\\|//+[ \t]*"’, which matches extra stars and spaces after
the ‘/*’ itself, and accepts C++ style (‘//’) comments also.  (Note that
‘\\’ is needed in Lisp syntax to include a ‘\’ in the string, which is
needed to deny the first star its special meaning in regexp syntax.
*Note Regexp Backslash::.)

   When a comment command makes a new comment, it inserts the value of
‘comment-start’ as an opening comment delimiter.  It also inserts the
value of ‘comment-end’ after point, as a closing comment delimiter.  For
example, in Lisp mode, ‘comment-start’ is ‘";"’ and ‘comment-end’ is
‘""’ (the empty string).  In C mode, ‘comment-start’ is ‘"/* "’ and
‘comment-end’ is ‘" */"’.

   The variable ‘comment-padding’ specifies a string that the commenting
commands should insert between the comment delimiter(s) and the comment
text.  The default, ‘" "’, specifies a single space.  Alternatively, the
value can be a number, which specifies that number of spaces, or ‘nil’,
which means no spaces at all.

   The variable ‘comment-multi-line’ controls how ‘M-j’ and Auto Fill
mode continue comments over multiple lines.  *Note Multi-Line
Comments::.

   The variable ‘comment-indent-function’ should contain a function that
will be called to compute the alignment for a newly inserted comment or
for aligning an existing comment.  It is set differently by various
major modes.  The function is called with no arguments, but with point
at the beginning of the comment, or at the end of a line if a new
comment is to be inserted.  It should return the column in which the
comment ought to start.  For example, the default function bases its
decision on how many comment characters begin an existing comment.

   Emacs also tries to align comments on adjacent lines.  To override
this, the function may return a cons of two (possibly equal) integers to
indicate an acceptable range of indentation.


File: emacs.info,  Node: Documentation,  Next: Hideshow,  Prev: Comments,  Up: Programs

27.6 Documentation Lookup
=========================

Emacs provides several features you can use to look up the documentation
of functions, variables and commands that you plan to use in your
program.

* Menu:

* Info Lookup::         Looking up library functions and commands in Info files.
* Man Page::            Looking up man pages of library functions and commands.
* Programming Language Doc:: Looking up program functions, variables, etc.


File: emacs.info,  Node: Info Lookup,  Next: Man Page,  Up: Documentation

27.6.1 Info Documentation Lookup
--------------------------------

For major modes that apply to languages which have documentation in
Info, you can use ‘C-h S’ (‘info-lookup-symbol’) to view the Info
documentation for a symbol used in the program.  You specify the symbol
with the minibuffer; the default is the symbol appearing in the buffer
at point.  For example, in C mode this looks for the symbol in the C
Library Manual.  The command only works if the appropriate manual’s Info
files are installed.

   Emacs determines where to look for documentation for the symbol—which
Info files to look in, and which indices to search—based on the major
mode.  You can also use ‘M-x info-lookup-file’ to look for documentation
for a file name.

   If you use ‘C-h S’ in a major mode that does not support it, it asks
you to specify the symbol help mode.  You should enter a command such as
‘c-mode’ that would select a major mode which ‘C-h S’ does support.


File: emacs.info,  Node: Man Page,  Next: Programming Language Doc,  Prev: Info Lookup,  Up: Documentation

27.6.2 Man Page Lookup
----------------------

On Unix, the main form of on-line documentation was the “manual page” or
“man page”.  In the GNU operating system, we aim to replace man pages
with better-organized manuals that you can browse with Info (*note Misc
Help::).  This process is not finished, so it is still useful to read
manual pages.

   You can read the man page for an operating system command, library
function, or system call, with the ‘M-x man’ command.  This prompts for
a topic, with completion (*note Completion::), and runs the ‘man’
program to format the corresponding man page.  If the system permits, it
runs ‘man’ asynchronously, so that you can keep on editing while the
page is being formatted.  The result goes in a buffer named ‘*Man
TOPIC*’.  These buffers use a special major mode, Man mode, that
facilitates scrolling and jumping to other manual pages.  For details,
type ‘C-h m’ while in a Man mode buffer.

   Each man page belongs to one of ten or more “sections”, each named by
a digit or by a digit and a letter.  Sometimes there are man pages with
the same name in different sections.  To read a man page from a specific
section, type ‘TOPIC(SECTION)’ or ‘SECTION TOPIC’ when ‘M-x man’ prompts
for the topic.  For example, the man page for the C library function
‘chmod’ is in section 2, but there is a shell command of the same name,
whose man page is in section 1; to view the former, type
‘M-x man <RET> chmod(2) <RET>’.

   If you do not specify a section, ‘M-x man’ normally displays only the
first man page found.  On some systems, the ‘man’ program accepts a ‘-a’
command-line option, which tells it to display all the man pages for the
specified topic.  To make use of this, change the value of the variable
‘Man-switches’ to ‘"-a"’.  Then, in the Man mode buffer, you can type
‘M-n’ and ‘M-p’ to switch between man pages in different sections.  The
mode line shows how many manual pages are available.

   An alternative way of reading manual pages is the ‘M-x woman’
command.  Unlike ‘M-x man’, it does not run any external programs to
format and display the man pages; the formatting is done by Emacs, so it
works on systems such as MS-Windows where the ‘man’ program may be
unavailable.  It prompts for a man page, and displays it in a buffer
named ‘*WoMan SECTION TOPIC’.

   ‘M-x woman’ computes the completion list for manpages the first time
you invoke the command.  With a numeric argument, it recomputes this
list; this is useful if you add or delete manual pages.

   If you type a name of a manual page and ‘M-x woman’ finds that
several manual pages by the same name exist in different sections, it
pops up a window with possible candidates asking you to choose one of
them.

   Note that ‘M-x woman’ doesn’t yet support the latest features of
modern man pages, so we recommend using ‘M-x man’ if that is available
on your system.

   For more information about setting up and using ‘M-x woman’, see
*note WoMan: (woman)Top.


File: emacs.info,  Node: Programming Language Doc,  Prev: Man Page,  Up: Documentation

27.6.3 Programming Language Documentation Lookup
------------------------------------------------

When editing Emacs Lisp code, you can use the commands ‘C-h f’
(‘describe-function’) and ‘C-h v’ (‘describe-variable’) to view the
built-in documentation for the Lisp functions and variables that you
want to use.  *Note Name Help::.

   ElDoc(1) is a buffer-local minor mode that helps with looking up
documentation of symbols (functions, methods, classes, variables, etc.)
in your program.  When this mode is enabled, the echo area displays
useful information whenever there is a documented symbol at point.  For
example, in buffers under the Emacs Lisp mode, it shows the argument
list of a function at point, and for a Lisp variable it shows the first
line of the variable’s documentation string.

   To toggle ElDoc mode, type ‘M-x eldoc-mode’.  There’s also a Global
ElDoc mode, which is turned on by default, and turns on the ElDoc mode
in buffers whose major mode sets the variables described below.  Use
‘M-x global-eldoc-mode’ to turn it off globally.

   Various major modes configure the Global ElDoc mode to use their
documentation functions.  Examples include Emacs Lisp mode, Python mode,
and Cfengine mode.  In addition, Emacs features that provide support for
several major modes configure ElDoc to use their facilities for
retrieving the documentation.  Examples include Eglot (*note
(eglot)Eglot Features::), which provides documentation based on
information from language servers; Semantic’s Idle Summary mode (*note
(semantic)Idle Summary Mode::); and Flymake, which uses ElDoc to show
diagnostics at point (*note (flymake)Finding diagnostics::).

   The ElDoc mode works by scheduling the display of the available
documentation for the symbol at point after Emacs has been idle for some
short time.  This avoids annoying flickering of documentation messages
in the echo area or the mode line when you type quickly and without
delay.

   You can also trigger the display of documentation for a symbol at
point by using the command ‘M-x eldoc-print-current-symbol-info’.

   The following variables can be used to configure ElDoc mode:

‘eldoc-idle-delay’
     The value of this user option controls the amount of idle time
     before the at-point documentation is displayed.  It should be set
     to the number of seconds to wait; the value of zero means to
     display without any delay.  The default is 0.5 sec.

‘eldoc-print-after-edit’
     If this user option is non-‘nil’, ElDoc will show documentation
     only after some editing command, like inserting or deleting some
     text.  This comes in handy if you want Emacs to display
     documentation only about symbols that you type, but not about
     symbols that are already in the buffer (so just reading the source
     code will not show documentation).  The default value is ‘nil’.  If
     you change the value, you need to toggle ‘eldoc-mode’ off and on
     again.

‘eldoc-echo-area-use-multiline-p’
     This user option controls whether and how to truncate documentation
     text if it is longer than the echo-area can display as a single
     screen line.  If the value is a positive number, it specifies the
     number of screen lines that ElDoc is allowed to display in the echo
     area without truncating the documentation.  A positive integer
     specifies the absolute maximum number of screen lines to use; a
     floating-point number specifies the number of screen lines as a
     fraction of the frame’s height.  The value of ‘t’ means never
     truncate the documentation (the echo-area will be resized up to the
     height allowed by ‘max-mini-window-height’, *note Minibuffer
     Edit::), whereas the value of ‘nil’ means truncate if the
     documentation is longer than a single screen line.  Finally, the
     special value ‘truncate-sym-name-if-fit’ (the default) means to
     truncate the part of the documentation that represents a symbol’s
     name if doing that will allow the documentation to fit on a single
     screen line.

‘eldoc-echo-area-display-truncation-message’
     If non-‘nil’ (the default), and documentation shown in the echo
     area is truncated because it’s too long, follow the documentation
     by instructions about how to view the complete documentation text.
     If ‘nil’, just indicate with ‘...’ that the documentation was
     truncated.

‘eldoc-echo-area-prefer-doc-buffer’
     If the value of this user option is ‘t’, ElDoc will not show the
     documentation in the echo area if the ElDoc buffer with the
     documentation is already displayed in some window.  (You can use
     the command ‘M-x eldoc-doc-buffer’ any time to show the ElDoc
     buffer.)  If the value of this option is the symbol ‘maybe’, the
     documentation will not be displayed in the echo area if the ElDoc
     buffer is shown in some window, and the documentation text has to
     be truncated if displayed in the echo area.  Finally, the value of
     ‘nil’ (the default) means always show the documentation in the echo
     area.

‘eldoc-documentation-strategy’
     This customizable variable’s value is the function which is used to
     retrieve and display documentation for the symbol at point.  The
     documentation is produced by the functions in the hook
     ‘eldoc-documentation-functions’.  The default value of
     ‘eldoc-documentation-strategy’ specifies that ElDoc should display
     the first documentation text produced by functions in the
     ‘eldoc-documentation-functions’ hook, but you can customize
     ‘eldoc-documentation-strategy’ to work in other ways, such as
     displaying all of the documentation texts concatenated together.

‘eldoc-documentation-functions’
     This abnormal hook’s value is a list of functions that can produce
     documentation for the symbol at point as appropriate for the
     current buffer’s major-mode.  These functions act as a collection
     of backends for ElDoc.  Major modes register their documentation
     lookup functions with ElDoc by adding their functions to the
     buffer-local value of this variable.

   ---------- Footnotes ----------

   (1) The name “ElDoc” is a historical accident: this mode started by
supporting Emacs Lisp buffers.


File: emacs.info,  Node: Hideshow,  Next: Symbol Completion,  Prev: Documentation,  Up: Programs

27.7 Hideshow minor mode
========================

Hideshow mode is a buffer-local minor mode that allows you to
selectively display portions of a program, which are referred to as
“blocks”.  Type ‘M-x hs-minor-mode’ to toggle this minor mode (*note
Minor Modes::).

   When you use Hideshow mode to hide a block, the block disappears from
the screen, to be replaced by an ellipsis (three periods in a row).
Just what constitutes a block depends on the major mode.  In C mode and
related modes, blocks are delimited by braces, while in Lisp mode they
are delimited by parentheses.  Multi-line comments also count as blocks.

   Hideshow mode provides the following commands:

‘C-c @ C-h’
‘C-c @ C-d’
     Hide the current block (‘hs-hide-block’).
‘C-c @ C-s’
     Show the current block (‘hs-show-block’).
‘C-c @ C-c’
‘C-c @ C-e’
‘S-mouse-2’
     Either hide or show the current block (‘hs-toggle-hiding’).
‘C-c @ C-M-h’
‘C-c @ C-t’
     Hide all top-level blocks (‘hs-hide-all’).
‘C-c @ C-M-s’
‘C-c @ C-a’
     Show all blocks in the buffer (‘hs-show-all’).
‘C-u N C-c @ C-l’
     Hide all blocks N levels below this block (‘hs-hide-level’).

   These variables can be used to customize Hideshow mode:

‘hs-hide-comments-when-hiding-all’
     If non-‘nil’, ‘C-c @ C-M-h’ (‘hs-hide-all’) hides comments too.

‘hs-isearch-open’
     This variable specifies the conditions under which incremental
     search should unhide a hidden block when matching text occurs
     within the block.  Its value should be either ‘code’ (unhide only
     code blocks), ‘comment’ (unhide only comments), ‘t’ (unhide both
     code blocks and comments), or ‘nil’ (unhide neither code blocks nor
     comments).  The default value is ‘code’.


File: emacs.info,  Node: Symbol Completion,  Next: MixedCase Words,  Prev: Hideshow,  Up: Programs

27.8 Completion for Symbol Names
================================

Completion is normally done in the minibuffer (*note Completion::), but
you can also complete symbol names in ordinary Emacs buffers.

   In most programming language modes, ‘C-M-i’ (or ‘M-<TAB>’(1)) invokes
the command ‘completion-at-point’, which generates the list of possible
completions for the symbol at point.  This command uses the available
support facilities to come up with the completion candidates:

   • If Eglot is activated for the current buffer’s project (*note
     Projects::) and the current buffer’s major mode, the command tries
     to use the corresponding language server for producing the list of
     completion candidates.  *Note (eglot)Eglot Features::.

   • If Semantic mode is enabled (*note Semantic::), the command tries
     to use the Semantic parser data for completion.

   • If Semantic mode is not enabled or fails at performing completion,
     the command tries to complete using the selected tags table (*note
     Tags Tables::); you need to visit the tags table with
     ‘M-x visit-tags-table’ for that to work.

   • In Emacs Lisp mode, the command performs completion using the
     function, variable, or property names defined in the current Emacs
     session.

   In all other respects, in-buffer symbol completion behaves like
minibuffer completion.  For instance, if Emacs cannot complete to a
unique symbol, it displays a list of completion alternatives in another
window.  Then you can use the keys ‘M-<DOWN>’ and ‘M-<UP>’ to navigate
through the completions displayed in the completions buffer without
leaving the original buffer, and the key ‘M-<RET>’ to insert the
currently highlighted completion to the buffer.  *Note Completion::.

   In Text mode and related modes, ‘M-<TAB>’ completes words based on
the spell-checker’s dictionary.  *Note Spelling::.

   ---------- Footnotes ----------

   (1) On graphical displays, the ‘M-<TAB>’ key is usually reserved by
the window manager for switching graphical windows, so you should type
‘C-M-i’ or ‘<ESC> <TAB>’ instead.


File: emacs.info,  Node: MixedCase Words,  Next: Semantic,  Prev: Symbol Completion,  Up: Programs

27.9 MixedCase Words
====================

Some programming styles make use of mixed-case (or “CamelCase”) symbols
like ‘unReadableSymbol’.  (In the GNU project, we recommend using
underscores to separate words within an identifier, rather than using
case distinctions.)  Emacs has various features to make it easier to
deal with such symbols.

   Glasses mode is a buffer-local minor mode that makes it easier to
read such symbols, by altering how they are displayed.  By default, it
displays extra underscores between each lower-case letter and the
following capital letter.  This does not alter the buffer text, only how
it is displayed.

   To toggle Glasses mode, type ‘M-x glasses-mode’ (*note Minor
Modes::).  When Glasses mode is enabled, the minor mode indicator ‘o^o’
appears in the mode line.  For more information about Glasses mode, type
‘C-h P glasses <RET>’.

   Subword mode is another buffer-local minor mode.  In subword mode,
Emacs’s word commands recognize upper case letters in
‘StudlyCapsIdentifiers’ as word boundaries.  When Subword mode is
enabled, the minor mode indicator ‘,’ appears in the mode line.  See
also the similar ‘superword-mode’ (*note Misc for Programs::).


File: emacs.info,  Node: Semantic,  Next: Misc for Programs,  Prev: MixedCase Words,  Up: Programs

27.10 Semantic
==============

Semantic is a package that provides language-aware editing commands
based on ‘source code parsers’.  This section provides a brief
description of Semantic; for full details, see *note Semantic:
(semantic)Top.

   Most of the language-aware features in Emacs, such as Font Lock mode
(*note Font Lock::), rely on rules of thumb(1) that usually give good
results but are never completely exact.  In contrast, the parsers used
by Semantic have an exact understanding of programming language syntax.
This allows Semantic to provide search, navigation, and completion
commands that are powerful and precise.

   To begin using Semantic, type ‘M-x semantic-mode’ or click on the
menu item named ‘Source Code Parsers (Semantic)’ in the ‘Tools’ menu.
This enables Semantic mode, a global minor mode.

   When Semantic mode is enabled, Emacs automatically attempts to parse
each file you visit.  Currently, Semantic understands C, C++, HTML,
Java, Javascript, Make, Python, Scheme, SRecode, and Texinfo.  Within
each parsed buffer, the following commands are available:

‘C-c , j’
     Prompt for the name of a function defined in the current file, and
     move point there (‘semantic-complete-jump-local’).

‘C-c , J’
     Prompt for the name of a function defined in any file Emacs has
     parsed, and move point there (‘semantic-complete-jump’).

‘C-c , <SPC>’
     Display a list of possible completions for the symbol at point
     (‘semantic-complete-analyze-inline’).  This also activates a set of
     special key bindings for choosing a completion: ‘<RET>’ accepts the
     current completion, ‘M-n’ and ‘M-p’ cycle through possible
     completions, ‘<TAB>’ completes as far as possible and then cycles,
     and ‘C-g’ or any other key aborts completion.

‘C-c , l’
     Display a list of the possible completions of the symbol at point,
     in another window (‘semantic-analyze-possible-completions’).

In addition to the above commands, the Semantic package provides a
variety of other ways to make use of parser information.  For instance,
you can use it to display a list of completions when Emacs is idle.
*Note Semantic: (semantic)Top, for details.

   ---------- Footnotes ----------

   (1) Regular expressions and syntax tables.


File: emacs.info,  Node: Misc for Programs,  Next: C Modes,  Prev: Semantic,  Up: Programs

27.11 Other Features Useful for Editing Programs
================================================

Some Emacs commands that aren’t designed specifically for editing
programs are useful for that nonetheless.

   The Emacs commands that operate on words, sentences and paragraphs
are useful for editing code.  Most symbol names contain words (*note
Words::), while sentences can be found in strings and comments (*note
Sentences::).  As for paragraphs, they are defined in most programming
language modes to begin and end at blank lines (*note Paragraphs::).
Therefore, judicious use of blank lines to make the program clearer will
also provide useful chunks of text for the paragraph commands to work
on.  Auto Fill mode, if enabled in a programming language major mode,
indents the new lines which it creates.

   Superword mode is a buffer-local minor mode that causes editing and
motion commands to treat symbols (e.g., ‘this_is_a_symbol’) as words.
When Superword mode is enabled, the minor mode indicator ‘²’ appears in
the mode line.  See also the similar ‘subword-mode’ (*note MixedCase
Words::).

   Electric Layout mode (‘M-x electric-layout-mode’) is a global minor
mode that automatically inserts newlines when you type certain
characters; for example, ‘{’, ‘}’ and ‘;’ in Javascript mode.

   Apart from Hideshow mode (*note Hideshow::), another way to
selectively display parts of a program is to use the selective display
feature (*note Selective Display::).  Programming modes often also
support Outline minor mode (*note Outline Mode::), which can be used
with the Foldout package (*note Foldout::).

   The automatic typing features may be useful for writing programs.
*Note Autotyping: (autotype)Top.

   Prettify Symbols mode is a buffer-local minor mode that replaces
certain strings with more attractive versions for display purposes.  For
example, in Emacs Lisp mode, it replaces the string ‘lambda’ with the
Greek lambda character ‘λ’.  In a TeX buffer, it will replace ‘\alpha’
... ‘\omega’ and other math macros with their Unicode characters.  You
may wish to use this in non-programming modes as well.  You can
customize the mode by adding more entries to ‘prettify-symbols-alist’.
More elaborate customization is available via customizing
‘prettify-symbols-compose-predicate’ if its default value
‘prettify-symbols-default-compose-p’ is not appropriate.  There is also
a global version, ‘global-prettify-symbols-mode’, which enables the mode
in all buffers that support it.

   The symbol at point can be shown in its original form.  This is
controlled by the variable ‘prettify-symbols-unprettify-at-point’: if
non-‘nil’, the original form of symbol at point will be restored for as
long as point is at it.


File: emacs.info,  Node: C Modes,  Next: Asm Mode,  Prev: Misc for Programs,  Up: Programs

27.12 C and Related Modes
=========================

This section gives a brief description of the special features available
in C, C++, Objective-C, Java, CORBA IDL, Pike and AWK modes.  (These are
called “C mode and related modes”.)  *Note CC Mode: (ccmode)Top, for
more details.

* Menu:

* Motion in C::                 Commands to move by C statements, etc.
* Electric C::                  Colon and other chars can automatically reindent.
* Hungry Delete::               A more powerful DEL command.
* Other C Commands::            Filling comments, viewing expansion of macros,
                                and other neat features.


File: emacs.info,  Node: Motion in C,  Next: Electric C,  Up: C Modes

27.12.1 C Mode Motion Commands
------------------------------

This section describes commands for moving point, in C mode and related
modes.

‘C-M-a’
‘C-M-e’
     Move point to the beginning or end of the current function or
     top-level definition.  In languages with enclosing scopes (such as
     C++’s classes) the “current function” is the immediate one,
     possibly inside a scope.  Otherwise it is the one defined by the
     least enclosing braces.  (By contrast, ‘beginning-of-defun’ and
     ‘end-of-defun’ search for braces in column zero.)  *Note Moving by
     Defuns::.

‘C-c C-u’
     Move point back to the containing preprocessor conditional, leaving
     the mark behind.  A prefix argument acts as a repeat count.  With a
     negative argument, move point forward to the end of the containing
     preprocessor conditional.

     ‘#elif’ is equivalent to ‘#else’ followed by ‘#if’, so the function
     will stop at a ‘#elif’ when going backward, but not when going
     forward.

‘C-c C-p’
     Move point back over a preprocessor conditional, leaving the mark
     behind.  A prefix argument acts as a repeat count.  With a negative
     argument, move forward.

‘C-c C-n’
     Move point forward across a preprocessor conditional, leaving the
     mark behind.  A prefix argument acts as a repeat count.  With a
     negative argument, move backward.

‘M-a’
     Move point to the beginning of the innermost C statement
     (‘c-beginning-of-statement’).  If point is already at the beginning
     of a statement, move to the beginning of the preceding statement.
     With prefix argument N, move back N − 1 statements.

     In comments or in strings which span more than one line, this
     command moves by sentences instead of statements.

‘M-e’
     Move point to the end of the innermost C statement or sentence;
     like ‘M-a’ except that it moves in the other direction
     (‘c-end-of-statement’).


File: emacs.info,  Node: Electric C,  Next: Hungry Delete,  Prev: Motion in C,  Up: C Modes

27.12.2 Electric C Characters
-----------------------------

In C mode and related modes, certain printing characters are
“electric”—in addition to inserting themselves, they also reindent the
current line, and optionally also insert newlines.  The electric
characters are ‘{’, ‘}’, ‘:’, ‘#’, ‘;’, ‘,’, ‘<’, ‘>’, ‘/’, ‘*’, ‘(’,
and ‘)’.

   You might find electric indentation inconvenient if you are editing
chaotically indented code.  If you are new to CC Mode, you might find it
disconcerting.  You can toggle electric action with the command ‘C-c
C-l’; when it is enabled, ‘/Cl’ appears in the mode line after the mode
name (where C, if present, is ‘*’ or ‘/’, depending on whether the
comment style is block or line).  *Note (ccmode)Minor Modes::, for more
about mode-line indicators in CC Mode.

‘C-c C-l’
     Toggle electric action (‘c-toggle-electric-state’).  With a
     positive prefix argument, this command enables electric action,
     with a negative one it disables it.

   Electric characters insert newlines only when, in addition to the
electric state, the “auto-newline” feature is enabled (indicated by
‘/Cla’ in the mode line after the mode name).  You can turn this feature
on or off with the command ‘C-c C-a’:

‘C-c C-a’
     Toggle the auto-newline feature (‘c-toggle-auto-newline’).  With a
     prefix argument, this command turns the auto-newline feature on if
     the argument is positive, and off if it is negative.

   Usually the CC Mode style configures the exact circumstances in which
Emacs inserts auto-newlines.  You can also configure this directly.
*Note (ccmode)Custom Auto-newlines::.


File: emacs.info,  Node: Hungry Delete,  Next: Other C Commands,  Prev: Electric C,  Up: C Modes

27.12.3 Hungry Delete Feature in C
----------------------------------

If you want to delete an entire block of whitespace at point, you can
use “hungry deletion”.  This deletes all the contiguous whitespace
either before point or after point in a single operation.  “Whitespace”
here includes tabs and newlines, but not comments or preprocessor
commands.

‘C-c C-<DEL>’
‘C-c <DEL>’
     Delete the entire block of whitespace preceding point
     (‘c-hungry-delete-backwards’).

‘C-c C-d’
‘C-c C-<Delete>’
‘C-c <Delete>’
     Delete the entire block of whitespace after point
     (‘c-hungry-delete-forward’).

   As an alternative to the above commands, you can enable “hungry
delete mode”.  When this feature is enabled (indicated by ‘h’ after a
‘/’ in the mode line after the mode name), a single ‘<DEL>’ deletes all
preceding whitespace, not just one space, and a single ‘C-d’ (but _not_
plain ‘<Delete>’) deletes all following whitespace.

‘M-x c-toggle-hungry-state’
     Toggle the hungry-delete feature (‘c-toggle-hungry-state’).  With a
     prefix argument, this command turns the hungry-delete feature on if
     the argument is positive, and off if it is negative.

   The variable ‘c-hungry-delete-key’ controls whether the hungry-delete
feature is enabled.


File: emacs.info,  Node: Other C Commands,  Prev: Hungry Delete,  Up: C Modes

27.12.4 Other Commands for C Mode
---------------------------------

‘M-x c-context-line-break’
     This command inserts a line break and indents the new line in a
     manner appropriate to the context.  In normal code, it does the
     work of ‘<RET>’ (‘newline’), in a C preprocessor line it
     additionally inserts a ‘\’ at the line break, and within comments
     it’s like ‘M-j’ (‘c-indent-new-comment-line’).

     ‘c-context-line-break’ isn’t bound to a key by default, but it
     needs a binding to be useful.  The following code will bind it to
     ‘<RET>’.  We use ‘c-initialization-hook’ here to make sure the
     keymap is loaded before we try to change it.

          (defun my-bind-clb ()
            (keymap-set c-mode-base-map "RET"
                        'c-context-line-break))
          (add-hook 'c-initialization-hook 'my-bind-clb)

‘C-M-h’
     Put mark at the end of a function definition, and put point at the
     beginning (‘c-mark-function’).

‘M-q’
     Fill a paragraph, handling C and C++ comments (‘c-fill-paragraph’).
     If any part of the current line is a comment or within a comment,
     this command fills the comment or the paragraph of it that point is
     in, preserving the comment indentation and comment delimiters.

‘C-c C-e’
     Run the C preprocessor on the text in the region, and show the
     result, which includes the expansion of all the macro calls
     (‘c-macro-expand’).  The buffer text before the region is also
     included in preprocessing, for the sake of macros defined there,
     but the output from this part isn’t shown.

     When you are debugging C code that uses macros, sometimes it is
     hard to figure out precisely how the macros expand.  With this
     command, you don’t have to figure it out; you can see the
     expansions.

‘C-c C-\’
     Insert or align ‘\’ characters at the ends of the lines of the
     region (‘c-backslash-region’).  This is useful after writing or
     editing a C macro definition.

     If a line already ends in ‘\’, this command adjusts the amount of
     whitespace before it.  Otherwise, it inserts a new ‘\’.  However,
     the last line in the region is treated specially; no ‘\’ is
     inserted on that line, and any ‘\’ there is deleted.

‘M-x cpp-highlight-buffer’
     Highlight parts of the text according to its preprocessor
     conditionals.  This command displays another buffer named ‘*CPP
     Edit*’, which serves as a graphic menu for selecting how to display
     particular kinds of conditionals and their contents.  After
     changing various settings, click on ‘[A]pply these settings’ (or go
     to that buffer and type ‘a’) to rehighlight the C mode buffer
     accordingly.

‘C-c C-s’
     Display the syntactic information about the current source line
     (‘c-show-syntactic-information’).  This information directs how the
     line is indented.

‘M-x cwarn-mode’
‘M-x global-cwarn-mode’
     CWarn minor mode highlights certain suspicious C and C++
     constructions:

        • Assignments inside expressions.
        • Semicolon following immediately after ‘if’, ‘for’, and ‘while’
          (except after a ‘do ... while’ statement);
        • C++ functions with reference parameters.

     You can enable the mode for one buffer with the command ‘M-x
     cwarn-mode’, or for all suitable buffers with the command ‘M-x
     global-cwarn-mode’ or by customizing the variable
     ‘global-cwarn-mode’.  You must also enable Font Lock mode to make
     it work.

‘M-x hide-ifdef-mode’
     Hide-ifdef minor mode hides selected code within ‘#if’ and ‘#ifdef’
     preprocessor blocks.  If you change the variable
     ‘hide-ifdef-shadow’ to ‘t’, Hide-ifdef minor mode shadows
     preprocessor blocks by displaying them with a less prominent face,
     instead of hiding them entirely.  See the documentation string of
     ‘hide-ifdef-mode’ for more information.

‘M-x ff-find-related-file’
     Find a file related in a special way to the file visited by the
     current buffer.  Typically this will be the header file
     corresponding to a C/C++ source file, or vice versa.  The variable
     ‘ff-related-file-alist’ specifies how to compute related file
     names.


File: emacs.info,  Node: Asm Mode,  Next: Fortran,  Prev: C Modes,  Up: Programs

27.13 Asm Mode
==============

Asm mode is a major mode for editing files of assembler code.  It
defines these commands:

‘<TAB>’
     ‘tab-to-tab-stop’.

‘C-j’
     Insert a newline and then indent using ‘tab-to-tab-stop’.

‘:’
     Insert a colon and then remove the indentation from before the
     label preceding colon.  Then do ‘tab-to-tab-stop’.

‘;’
     Insert or align a comment.

   The variable ‘asm-comment-char’ specifies which character starts
comments in assembler syntax.


File: emacs.info,  Node: Fortran,  Prev: Asm Mode,  Up: Programs

27.14 Fortran Mode
==================

Fortran mode is meant for editing fixed form (and also tab format)
source code (normally Fortran 77).  For editing more modern free-form
source code (Fortran 90, 95, 2003, 2008), use F90 mode (‘f90-mode’).
Emacs normally uses Fortran mode for files with extension ‘.f’, ‘.F’ or
‘.for’, and F90 mode for the extensions ‘.f90’, ‘.f95’, ‘.f03’ and
‘.f08’.  Customize ‘auto-mode-alist’ to add more extensions.  GNU
Fortran supports both free and fixed form.  This manual mainly documents
Fortran mode, but the corresponding F90 mode features are mentioned when
relevant.

   Fortran mode provides special motion commands for Fortran statements
and subprograms, and indentation commands that understand Fortran
conventions of nesting, line numbers and continuation statements.
Fortran mode has support for Auto Fill mode that breaks long lines into
proper Fortran continuation lines.  Fortran mode also supports Hideshow
minor mode (*note Hideshow::), and Imenu (*note Imenu::).

   Special commands for comments are provided because Fortran comments
are unlike those of other languages.  Built-in abbrevs optionally save
typing when you insert Fortran keywords.

   Use ‘M-x fortran-mode’ to switch to this major mode.  This command
runs the hook ‘fortran-mode-hook’.  *Note Hooks::.

* Menu:

* Motion: Fortran Motion.        Moving point by statements or subprograms.
* Indent: Fortran Indent.        Indentation commands for Fortran.
* Comments: Fortran Comments.    Inserting and aligning comments.
* Autofill: Fortran Autofill.    Auto fill support for Fortran.
* Columns: Fortran Columns.      Measuring columns for valid Fortran.
* Abbrev: Fortran Abbrev.        Built-in abbrevs for Fortran keywords.


File: emacs.info,  Node: Fortran Motion,  Next: Fortran Indent,  Up: Fortran

27.14.1 Motion Commands
-----------------------

In addition to the normal commands for moving by and operating on defuns
(Fortran subprograms—functions and subroutines, as well as modules for
F90 mode, using the commands ‘fortran-end-of-subprogram’ and
‘fortran-beginning-of-subprogram’), Fortran mode provides special
commands to move by statements and other program units.

‘C-c C-n’
     Move to the beginning of the next statement
     (‘fortran-next-statement’/‘f90-next-statement’).

‘C-c C-p’
     Move to the beginning of the previous statement
     (‘fortran-previous-statement’/‘f90-previous-statement’).  If there
     is no previous statement (i.e., if called from the first statement
     in the buffer), move to the start of the buffer.

‘C-c C-e’
     Move point forward to the start of the next code block, or the end
     of the current one, whichever comes first (‘f90-next-block’).  A
     code block is a subroutine, ‘if’–‘endif’ statement, and so forth.
     This command exists for F90 mode only, not Fortran mode.  With a
     numeric argument, it moves forward that many blocks.

‘C-c C-a’
     Move point backward to the previous block (‘f90-previous-block’).
     This is like ‘f90-next-block’, but moves backwards.

‘C-M-n’
     Move to the end of the current code block
     (‘fortran-end-of-block’/‘f90-end-of-block’).  With a numeric
     argument, move forward that number of blocks.  The mark is set
     before moving point.  The F90 mode version of this command checks
     for consistency of block types and labels (if present), but it does
     not check the outermost block since that may be incomplete.

‘C-M-p’
     Move to the start of the current code block
     (‘fortran-beginning-of-block’/‘f90-beginning-of-block’).  This is
     like ‘fortran-end-of-block’, but moves backwards.

   The commands ‘fortran-beginning-of-subprogram’ and
‘fortran-end-of-subprogram’ move to the start or end of the current
subprogram, respectively.  The commands ‘fortran-mark-do’ and
‘fortran-mark-if’ mark the end of the current ‘do’ or ‘if’ block, and
move point to the start.


File: emacs.info,  Node: Fortran Indent,  Next: Fortran Comments,  Prev: Fortran Motion,  Up: Fortran

27.14.2 Fortran Indentation
---------------------------

Special commands and features are needed for indenting fixed (or tab)
form Fortran code in order to make sure various syntactic entities (line
numbers, comment line indicators and continuation line flags) appear in
the required columns.

* Menu:

* Commands: ForIndent Commands.  Commands for indenting and filling Fortran.
* Contline: ForIndent Cont.      How continuation lines indent.
* Numbers:  ForIndent Num.       How line numbers auto-indent.
* Conv:     ForIndent Conv.      Conventions you must obey to avoid trouble.
* Vars:     ForIndent Vars.      Variables controlling Fortran indent style.


File: emacs.info,  Node: ForIndent Commands,  Next: ForIndent Cont,  Up: Fortran Indent

27.14.2.1 Fortran Indentation and Filling Commands
..................................................

‘C-M-j’
     Break the current line at point and set up a continuation line
     (‘fortran-split-line’).

‘M-^’
     Join this line to the previous line (‘fortran-join-line’).

‘C-M-q’
     Indent all the lines of the subprogram that point is in
     (‘fortran-indent-subprogram’).

‘M-q’
     Fill a comment block or statement (using ‘fortran-fill-paragraph’
     or ‘fortran-fill-statement’).

   The key ‘C-M-q’ runs ‘fortran-indent-subprogram’, a command to
reindent all the lines of the Fortran subprogram (function or
subroutine) containing point.

   The key ‘C-M-j’ runs ‘fortran-split-line’, which splits a line in the
appropriate fashion for Fortran.  In a non-comment line, the second half
becomes a continuation line and is indented accordingly.  In a comment
line, both halves become separate comment lines.

   ‘M-^’ or ‘C-c C-d’ run the command ‘fortran-join-line’, which joins a
continuation line back to the previous line, roughly as the inverse of
‘fortran-split-line’.  The point must be on a continuation line when
this command is invoked.

   ‘M-q’ in Fortran mode fills the comment block or statement that point
is in.  This removes any excess statement continuations.


File: emacs.info,  Node: ForIndent Cont,  Next: ForIndent Num,  Prev: ForIndent Commands,  Up: Fortran Indent

27.14.2.2 Continuation Lines
............................

Most Fortran 77 compilers allow two ways of writing continuation lines.
If the first non-space character on a line is in column 5, then that
line is a continuation of the previous line.  We call this “fixed form”.
(In GNU Emacs we always count columns from 0; but note that the Fortran
standard counts from 1.  You can customize the variable
‘column-number-indicator-zero-based’ to make the column display
Fortran-like; *note Optional Mode Line::.)  The variable
‘fortran-continuation-string’ specifies what character to put in column
5.  A line that starts with a tab character followed by any digit except
‘0’ is also a continuation line.  We call this style of continuation
“tab format”.  (Fortran 90 introduced free-form continuation lines.)

   Fortran mode can use either style of continuation line.  When you
enter Fortran mode, it tries to deduce the proper continuation style
automatically from the buffer contents.  It does this by scanning up to
‘fortran-analyze-depth’ (default 100) lines from the start of the
buffer.  The first line that begins with either a tab character or six
spaces determines the choice.  If the scan fails (for example, if the
buffer is new and therefore empty), the value of
‘fortran-tab-mode-default’ (‘nil’ for fixed form, and non-‘nil’ for tab
format) is used.  ‘/t’ (‘fortran-tab-mode-string’) in the mode line
indicates tab format is selected.  Fortran mode sets the value of
‘indent-tabs-mode’ accordingly.

   If the text on a line starts with the Fortran continuation marker
‘$’, or if it begins with any non-whitespace character in column 5,
Fortran mode treats it as a continuation line.  When you indent a
continuation line with ‘<TAB>’, it converts the line to the current
continuation style.  When you split a Fortran statement with ‘C-M-j’,
the continuation marker on the newline is created according to the
continuation style.

   The setting of continuation style affects several other aspects of
editing in Fortran mode.  In fixed form mode, the minimum column number
for the body of a statement is 6.  Lines inside of Fortran blocks that
are indented to larger column numbers must use only the space character
for whitespace.  In tab format mode, the minimum column number for the
statement body is 8, and the whitespace before column 8 must consist of
one tab character.


File: emacs.info,  Node: ForIndent Num,  Next: ForIndent Conv,  Prev: ForIndent Cont,  Up: Fortran Indent

27.14.2.3 Line Numbers
......................

If a number is the first non-whitespace in the line, Fortran indentation
assumes it is a line number and moves it to columns 0 through 4.
(Columns always count from 0 in Emacs, but setting
‘column-number-indicator-zero-based’ to ‘nil’ can change that, *note
Optional Mode Line::.)

   Line numbers of four digits or less are normally indented one space.
The variable ‘fortran-line-number-indent’ controls this; it specifies
the maximum indentation a line number can have.  The default value of
the variable is 1.  Fortran mode tries to prevent line number digits
passing column 4, reducing the indentation below the specified maximum
if necessary.  If ‘fortran-line-number-indent’ has the value 5, line
numbers are right-justified to end in column 4.

   Simply inserting a line number is enough to indent it according to
these rules.  As each digit is inserted, the indentation is recomputed.
To turn off this feature, set the variable
‘fortran-electric-line-number’ to ‘nil’.


File: emacs.info,  Node: ForIndent Conv,  Next: ForIndent Vars,  Prev: ForIndent Num,  Up: Fortran Indent

27.14.2.4 Syntactic Conventions
...............................

Fortran mode assumes that you follow certain conventions that simplify
the task of understanding a Fortran program well enough to indent it
properly:

   • Two nested ‘do’ loops never share a ‘continue’ statement.

   • Fortran keywords such as ‘if’, ‘else’, ‘then’, ‘do’ and others are
     written without embedded whitespace or line breaks.

     Fortran compilers generally ignore whitespace outside of string
     constants, but Fortran mode does not recognize these keywords if
     they are not contiguous.  Constructs such as ‘else if’ or ‘end do’
     are acceptable, but the second word should be on the same line as
     the first and not on a continuation line.

If you fail to follow these conventions, the indentation commands may
indent some lines unaesthetically.  However, a correct Fortran program
retains its meaning when reindented even if the conventions are not
followed.


File: emacs.info,  Node: ForIndent Vars,  Prev: ForIndent Conv,  Up: Fortran Indent

27.14.2.5 Variables for Fortran Indentation
...........................................

Several additional variables control how Fortran indentation works:

‘fortran-do-indent’
     Extra indentation within each level of ‘do’ statement (default 3).

‘fortran-if-indent’
     Extra indentation within each level of ‘if’, ‘select case’, or
     ‘where’ statements (default 3).

‘fortran-structure-indent’
     Extra indentation within each level of ‘structure’, ‘union’, ‘map’,
     or ‘interface’ statements (default 3).

‘fortran-continuation-indent’
     Extra indentation for bodies of continuation lines (default 5).

‘fortran-check-all-num-for-matching-do’
     In Fortran 77, a numbered ‘do’ statement is terminated by any
     statement with a matching line number.  It is common (but not
     compulsory) to use a ‘continue’ statement for this purpose.  If
     this variable has a non-‘nil’ value, indenting any numbered
     statement must check for a ‘do’ that ends there.  If you always end
     ‘do’ statements with a ‘continue’ line (or if you use the more
     modern ‘enddo’), then you can speed up indentation by setting this
     variable to ‘nil’ (the default).

‘fortran-blink-matching-if’
     If this is ‘t’, indenting an ‘endif’ (or ‘enddo’) statement moves
     the cursor momentarily to the matching ‘if’ (or ‘do’) statement to
     show where it is.  The default is ‘nil’.

‘fortran-minimum-statement-indent-fixed’
     Minimum indentation for Fortran statements when using fixed form
     continuation line style.  Statement bodies are never indented by
     less than this.  The default is 6.

‘fortran-minimum-statement-indent-tab’
     Minimum indentation for Fortran statements for tab format
     continuation line style.  Statement bodies are never indented by
     less than this.  The default is 8.

   The following section describes the variables controlling the
indentation of comments.


File: emacs.info,  Node: Fortran Comments,  Next: Fortran Autofill,  Prev: Fortran Indent,  Up: Fortran

27.14.3 Fortran Comments
------------------------

The usual Emacs comment commands assume that a comment can follow a line
of code.  In Fortran 77, the standard comment syntax requires an entire
line to be just a comment.  Therefore, Fortran mode replaces the
standard Emacs comment commands and defines some new variables.

   Fortran mode can also handle the Fortran 90 comment syntax where
comments start with ‘!’ and can follow other text.  Because only some
Fortran 77 compilers accept this syntax, Fortran mode will not insert
such comments unless you have said in advance to do so.  To do this, set
the variable ‘fortran-comment-line-start’ to ‘"!"’.  If you use an
unusual value, you may need to change ‘fortran-comment-line-start-skip’.

‘M-;’
     Align comment or insert new comment (‘comment-dwim’).

‘C-x ;’
     Applies to nonstandard ‘!’ comments only (‘comment-set-column’).

‘C-c ;’
     Turn all lines of the region into comments, or (with argument) turn
     them back into real code (‘fortran-comment-region’).

   ‘M-;’ in Fortran mode runs the standard ‘comment-dwim’.  This
recognizes any kind of existing comment and aligns its text
appropriately; if there is no existing comment, a comment is inserted
and aligned.  Inserting and aligning comments are not the same in
Fortran mode as in other modes.

   When a new comment must be inserted, if the current line is blank, a
full-line comment is inserted.  On a non-blank line, a nonstandard ‘!’
comment is inserted if you have said you want to use them.  Otherwise, a
full-line comment is inserted on a new line before the current line.

   Nonstandard ‘!’ comments are aligned like comments in other
languages, but full-line comments are different.  In a standard
full-line comment, the comment delimiter itself must always appear in
column zero.  What can be aligned is the text within the comment.  You
can choose from three styles of alignment by setting the variable
‘fortran-comment-indent-style’ to one of these values:

‘fixed’
     Align the text at a fixed column, which is the sum of
     ‘fortran-comment-line-extra-indent’ and the minimum statement
     indentation.  This is the default.

     The minimum indentation is ‘fortran-minimum-statement-indent-tab’
     for tab format continuation line style and
     ‘fortran-minimum-statement-indent-fixed’ for fixed form style.

‘relative’
     Align the text as if it were a line of code, but with an additional
     ‘fortran-comment-line-extra-indent’ columns of indentation.

‘nil’
     Don’t move text in full-line comments automatically.

   In addition, you can specify the character to be used to indent
within full-line comments by setting the variable
‘fortran-comment-indent-char’ to the single-character string you want to
use.

   Compiler directive lines, or preprocessor lines, have much the same
appearance as comment lines.  It is important, though, that such lines
never be indented at all, no matter what the value of
‘fortran-comment-indent-style’.  The variable ‘fortran-directive-re’ is
a regular expression that specifies which lines are directives.
Matching lines are never indented, and receive distinctive font-locking.

   The normal Emacs comment command ‘C-x ;’ (‘comment-set-column’) has
not been redefined.  If you use ‘!’ comments, this command can be used
with them.  Otherwise, it is useless in Fortran mode.

   The command ‘C-c ;’ (‘fortran-comment-region’) turns all the lines of
the region into comments by inserting the string ‘c$$$’ at the front of
each one.  With a numeric argument, it turns the region back into live
code by deleting ‘c$$$’ from the front of each line in it.  The string
used for these comments can be controlled by setting the variable
‘fortran-comment-region’.  Note that here we have an example of a
command and a variable with the same name; these two uses of the name
never conflict because in Lisp and in Emacs it is always clear from the
context which one is meant.


File: emacs.info,  Node: Fortran Autofill,  Next: Fortran Columns,  Prev: Fortran Comments,  Up: Fortran

27.14.4 Auto Fill in Fortran Mode
---------------------------------

Fortran mode has specialized support for Auto Fill mode, which is a
minor mode that automatically splits statements as you insert them when
they become too wide.  Splitting a statement involves making
continuation lines using ‘fortran-continuation-string’ (*note ForIndent
Cont::).  This splitting happens when you type ‘<SPC>’, ‘<RET>’, or
‘<TAB>’, and also in the Fortran indentation commands.  You activate
Auto Fill in Fortran mode in the normal way.  *Note Auto Fill::.

   Auto Fill breaks lines at spaces or delimiters when the lines get
longer than the desired width (the value of ‘fill-column’).  The
delimiters (besides whitespace) that Auto Fill can break at are ‘+’,
‘-’, ‘/’, ‘*’, ‘=’, ‘<’, ‘>’, and ‘,’.  The line break comes after the
delimiter if the variable ‘fortran-break-before-delimiters’ is ‘nil’.
Otherwise (and by default), the break comes before the delimiter.

   To enable Auto Fill in all Fortran buffers, add ‘auto-fill-mode’ to
‘fortran-mode-hook’.  *Note Hooks::.


File: emacs.info,  Node: Fortran Columns,  Next: Fortran Abbrev,  Prev: Fortran Autofill,  Up: Fortran

27.14.5 Checking Columns in Fortran
-----------------------------------

In standard Fortran 77, anything beyond column 72 is ignored.  Most
compilers provide an option to change this (for example,
‘-ffixed-line-length-N’ in gfortran).  Customize the variable
‘fortran-line-length’ to change the line length in Fortran mode.
Anything beyond this point is font-locked as a comment.  (Unless it is
inside a string: strings that extend beyond ‘fortran-line-length’ will
confuse font-lock.)

‘C-c C-r’
     Display a column ruler momentarily above the current line
     (‘fortran-column-ruler’).

‘C-c C-w’
     Split the current window horizontally temporarily so that it is
     ‘fortran-line-length’ columns wide
     (‘fortran-window-create-momentarily’).  This may help you avoid
     making lines longer than the limit imposed by your Fortran
     compiler.

‘C-u C-c C-w’
     Split the current window horizontally so that it is
     ‘fortran-line-length’ columns wide (‘fortran-window-create’).  You
     can then continue editing.

‘M-x fortran-strip-sequence-nos’
     Delete all text in column ‘fortran-line-length’ and beyond.

   The command ‘C-c C-r’ (‘fortran-column-ruler’) shows a column ruler
momentarily above the current line.  The comment ruler is two lines of
text that show you the locations of columns with special significance in
Fortran programs.  Square brackets show the limits of the columns for
line numbers, and curly brackets show the limits of the columns for the
statement body.  Column numbers appear above them.

   Note that the column numbers count from zero, as always in GNU Emacs
(but customizing ‘column-number-indicator-zero-based’ can change column
display to match that of Fortran; *note Optional Mode Line::.)  As a
result, the numbers may be one less than those you are familiar with;
but the positions they indicate in the line are standard for Fortran.

   The text used to display the column ruler depends on the value of the
variable ‘indent-tabs-mode’.  If ‘indent-tabs-mode’ is ‘nil’, then the
value of the variable ‘fortran-column-ruler-fixed’ is used as the column
ruler.  Otherwise, the value of the variable ‘fortran-column-ruler-tab’
is displayed.  By changing these variables, you can change the column
ruler display.

   ‘C-c C-w’ (‘fortran-window-create-momentarily’) temporarily splits
the current window horizontally, making a window ‘fortran-line-length’
columns wide, so you can see any lines that are too long.  Type a space
to restore the normal width.

   You can also split the window horizontally and continue editing with
the split in place.  To do this, use ‘C-u C-c C-w’ (‘M-x
fortran-window-create’).  By editing in this window you can immediately
see when you make a line too wide to be correct Fortran.

   The command ‘M-x fortran-strip-sequence-nos’ deletes all text in
column ‘fortran-line-length’ and beyond, on all lines in the current
buffer.  This is the easiest way to get rid of old sequence numbers.


File: emacs.info,  Node: Fortran Abbrev,  Prev: Fortran Columns,  Up: Fortran

27.14.6 Fortran Keyword Abbrevs
-------------------------------

Fortran mode provides many built-in abbrevs for common keywords and
declarations.  These are the same sort of abbrev that you can define
yourself.  To use them, you must turn on Abbrev mode.  *Note Abbrevs::.

   The built-in abbrevs are unusual in one way: they all start with a
semicolon.  For example, one built-in Fortran abbrev is ‘;c’ for
‘continue’.  If you insert ‘;c’ and then insert a punctuation character
such as a space or a newline, the ‘;c’ expands automatically to
‘continue’, provided Abbrev mode is enabled.

   Type ‘;?’ or ‘;C-h’ to display a list of all the built-in Fortran
abbrevs and what they stand for.


File: emacs.info,  Node: Building,  Next: Maintaining,  Prev: Programs,  Up: Top

# /. 28 Compiling and Testing Programs
*************************************

The previous chapter discusses the Emacs commands that are useful for
making changes in programs.  This chapter deals with commands that
assist in the process of compiling and testing programs.

* Menu:

* Compilation::         Compiling programs in languages other
                          than Lisp (C, Pascal, etc.).
* Compilation Mode::    The mode for visiting compiler errors.
* Compilation Shell::   Customizing your shell properly
                          for use in the compilation buffer.
* Grep Searching::      Searching with grep.
* Flymake::             Finding syntax errors on the fly.
* Debuggers::           Running symbolic debuggers for non-Lisp programs.
* Executing Lisp::      Various modes for editing Lisp programs,
                          with different facilities for running
                          the Lisp programs.
* Libraries: Lisp Libraries.      How Lisp programs are loaded into Emacs.
* Eval: Lisp Eval.      Executing a single Lisp expression in Emacs.
* Interaction: Lisp Interaction.  Executing Lisp in an Emacs buffer.
* External Lisp::       Communicating through Emacs with a separate Lisp.


File: emacs.info,  Node: Compilation,  Next: Compilation Mode,  Up: Building

28.1 Running Compilations under Emacs
=====================================

Emacs can run compilers for languages such as C and Fortran, feeding the
compilation log into an Emacs buffer.  It can also parse the error
messages and show you where the errors occurred.

‘M-x compile’
     Run a compiler asynchronously under Emacs, with error messages
     going to the ‘*compilation*’ buffer.

‘M-x recompile’
‘g (Compilation mode)’
     Invoke a compiler with the same command as in the last invocation
     of ‘M-x compile’.

‘M-x kill-compilation’
     Kill the running compilation subprocess.

   To run ‘make’ or another compilation command, type ‘M-x compile’.
This reads a shell command line using the minibuffer, and then executes
the command by running a shell as a subprocess (or “inferior process”)
of Emacs.  The output is inserted in a buffer named ‘*compilation*’.
The current buffer’s default directory is used as the working directory
for the execution of the command, so by default compilation takes place
in that directory.

   The default compilation command is ‘make -k’, which is usually
correct for programs compiled using the ‘make’ utility (the ‘-k’ flag
tells ‘make’ to continue compiling as much as possible after an error).
*Note Make: (make)Top.  If you have done ‘M-x compile’ before, the
command that you specified is automatically stored in the variable
‘compile-command’; this is used as the default the next time you type
‘M-x compile’.  A file can also specify a file-local value for
‘compile-command’ (*note File Variables::).

   Starting a compilation displays the ‘*compilation*’ buffer in another
window but does not select it.  While the compilation is running, the
word ‘run’ is shown in the major mode indicator for the ‘*compilation*’
buffer, and the word ‘Compiling’ appears in all mode lines.  You do not
have to keep the ‘*compilation*’ buffer visible while compilation is
running; it continues in any case.  When the compilation ends, for
whatever reason, the mode line of the ‘*compilation*’ buffer changes to
say ‘exit’ (followed by the exit code: ‘[0]’ for a normal exit), or
‘signal’ (if a signal terminated the process).

   If you want to watch the compilation transcript as it appears, switch
to the ‘*compilation*’ buffer and move point to the end of the buffer.
When point is at the end, new compilation output is inserted above
point, which remains at the end.  Otherwise, point remains fixed while
compilation output is added at the end of the buffer.

   While compilation proceeds, the mode line shows the number of errors,
warnings, and informational messages emitted by the compiler so far.

   If you change the variable ‘compilation-scroll-output’ to a non-‘nil’
value, the ‘*compilation*’ buffer scrolls automatically to follow the
output.  If the value is ‘first-error’, scrolling stops when the first
error appears, leaving point at that error.  For any other non-‘nil’
value, scrolling continues until there is no more output.

   To rerun the last compilation with the same command, type ‘M-x
recompile’.  This reuses the compilation command from the last
invocation of ‘M-x compile’.  It also reuses the ‘*compilation*’ buffer
and starts the compilation in its default directory, which is the
directory in which the previous compilation was started.  In
‘*compilation*’ buffers this command is bound to ‘g’.

   Starting a new compilation also kills any compilation already running
in ‘*compilation*’, as the buffer can only handle one compilation at any
time.  However, ‘M-x compile’ and ‘M-x recompile’ ask for confirmation
before actually killing a compilation that is running; to always
automatically kill the compilation without asking, change the variable
‘compilation-always-kill’ to ‘t’.  You can also kill a compilation
process with the command ‘M-x kill-compilation’.

   To run two compilations at once, start the first one, then rename the
‘*compilation*’ buffer (perhaps using ‘rename-uniquely’; *note Misc
Buffer::), then switch buffers and start the other compilation.  This
will create a new ‘*compilation*’ buffer.

   You can control the environment passed to the compilation command
with the variable ‘compilation-environment’.  Its value is a list of
environment variable settings; each element should be a string of the
form ‘"ENVVARNAME=VALUE"’.  These environment variable settings override
the usual ones.

   Displaying extremely long lines in compilation output can slow Emacs
down.  Lines that are longer than ‘compilation-max-output-line-length’
will have the portion that’s exceeds that limit hidden behind a button
that can be clicked on to reveal the hidden portion.  Set this variable
to ‘nil’ to never hide anything.


File: emacs.info,  Node: Compilation Mode,  Next: Compilation Shell,  Prev: Compilation,  Up: Building

28.2 Compilation Mode
=====================

The ‘*compilation*’ buffer uses a major mode called Compilation mode.
Compilation mode turns each error message in the buffer into a
hyperlink; you can move point to it and type <RET>, or click on it with
the mouse (*note Mouse References::), to visit the “locus” of the error
message in a separate window.  The locus is the specific position in a
file where that error occurred.

   The appearance of the ‘*compilation*’ buffer can be controlled by
customizing the faces which are used to highlight parts of the
‘*compilation*’ buffer, e.g., ‘compilation-error’ or
‘compilation-warning’, for error and warning messages respectively.
Note that since those faces inherit from the ‘error’ and ‘warning’
faces, it is also possible to customize the parent face directly
instead.

   Use ‘M-x customize-group RET compilation’ to see the entire list of
customization variables and faces.

   If you change the variable ‘compilation-auto-jump-to-first-error’ to
a non-‘nil’ value, Emacs automatically visits the locus of the first
error message that appears in the ‘*compilation*’ buffer.  (This
variable can also have the values ‘if-location-known’ and ‘first-known’,
which modify the conditions for automatically visiting the error locus.)

   Compilation mode provides the following additional commands.  These
commands can also be used in ‘*grep*’ buffers, where the hyperlinks are
search matches rather than error messages (*note Grep Searching::).

‘M-g M-n’
‘M-g n’
‘C-x `’
     Visit the locus of the next error message or match (‘next-error’).
‘M-g M-p’
‘M-g p’
     Visit the locus of the previous error message or match
     (‘previous-error’).
‘M-n’
     Move point to the next error message or match, without visiting its
     locus (‘compilation-next-error’).
‘M-p’
     Move point to the previous error message or match, without visiting
     its locus (‘compilation-previous-error’).
‘M-}’
     Move point to the next error message or match occurring in a
     different file (‘compilation-next-file’).
‘M-{’
     Move point to the previous error message or match occurring in a
     different file (‘compilation-previous-file’).
‘C-c C-f’
     Toggle Next Error Follow minor mode, which makes cursor motion in
     the compilation buffer produce automatic source display.
‘g’
     Re-run the last command whose output is shown in the
     ‘*compilation*’ buffer.
‘M-x next-error-select-buffer’
     Select a buffer to be used by next invocation of ‘next-error’ and
     ‘previous-error’.

   To visit errors sequentially, type ‘C-x `’ (‘next-error’), or
equivalently ‘M-g M-n’ or ‘M-g n’.  This command can be invoked from any
buffer, not just a Compilation mode buffer.  The first time you invoke
it after a compilation, it visits the locus of the first error message.
Each subsequent ‘M-g M-n’ visits the next error, in a similar fashion.
If you visit a specific error with <RET> or a mouse click in the
‘*compilation*’ buffer, subsequent ‘M-g M-n’ commands advance from
there.  When ‘M-g M-n’ finds no more error messages to visit, it signals
an error.  ‘C-u M-g M-n’ starts again from the beginning of the
compilation buffer, and visits the first locus.

   ‘M-g M-p’ or ‘M-g p’ (‘previous-error’) iterates through errors in
the opposite direction.

   The ‘next-error’ and ‘previous-error’ commands don’t just act on the
errors or matches listed in ‘*compilation*’ and ‘*grep*’ buffers; they
also know how to iterate through error or match lists produced by other
commands, such as ‘M-x occur’ (*note Other Repeating Search::).  If the
current buffer contains error messages or matches, these commands will
iterate through them; otherwise, Emacs looks for a buffer containing
error messages or matches amongst the windows of the selected frame (if
the variable ‘next-error-find-buffer-function’ is customized to the
value ‘next-error-buffer-on-selected-frame’), then for a buffer used
previously by ‘next-error’ or ‘previous-error’, and finally all other
buffers.  Any buffer these commands iterate through that is not
currently displayed in a window will be displayed.  You can use the
‘next-error-select-buffer’ command to switch to a different buffer to be
used by the subsequent invocation of ‘next-error’.

   By default, the ‘next-error’ and ‘previous-error’ commands skip less
important messages.  The variable ‘compilation-skip-threshold’ controls
this.  The default value, 1, means to skip anything less important than
a warning.  A value of 2 means to skip anything less important than an
error, while 0 means not to skip any messages.

   When Emacs visits the locus of an error message, it momentarily
highlights the relevant source line.  The duration of this highlight is
determined by the variable ‘next-error-highlight’ for the locus in the
selected buffer, and ‘next-error-highlight-no-select’ for the locus in
non-selected buffers.  Also you can customize the variable
‘next-error-message-highlight’ that defines how to highlight the current
error message in the buffer that contains messages.

   If the ‘*compilation*’ buffer is shown in a window with a left fringe
(*note Fringes::), the locus-visiting commands put an arrow in the
fringe, pointing to the current error message.  If the window has no
left fringe, such as on a text terminal, these commands scroll the
window so that the current message is at the top of the window.  If you
change the variable ‘compilation-context-lines’ to ‘t’, a visible arrow
is inserted before column zero instead.  If you change the variable to
an integer value N, these commands scroll the window so that the current
error message is N lines from the top, whether or not there is a fringe;
the default value, ‘nil’, gives the behavior described above.

   Compilation output can sometimes be very verbose, and much of it
isn’t of particular interest to a user.  The ‘compilation-hidden-output’
user option should either be a regexp or a list of regexps, and output
that matches will be made invisible.  For instance, to hide the verbose
output from recursive makefiles, you can say something like:

     (setq compilation-hidden-output
           '("^make[^\n]+\n"))

   To parse messages from the compiler, Compilation mode uses the
variable ‘compilation-error-regexp-alist’ which lists various error
message formats and tells Emacs how to extract the locus from each.  A
similar variable, ‘grep-regexp-alist’, tells Emacs how to parse output
from a ‘grep’ command (*note Grep Searching::).

   Compilation mode also defines the keys <SPC> and <DEL> to scroll by
screenfuls; ‘M-n’ (‘compilation-next-error’) and ‘M-p’
(‘compilation-previous-error’) to move to the next or previous error
message; and ‘M-{’ (‘compilation-next-file’) and ‘M-}’
(‘compilation-previous-file’) to move to the next or previous error
message for a different source file.

   You can type ‘C-c C-f’ to toggle Next Error Follow mode.  In this
minor mode, ordinary cursor motion in the compilation buffer
automatically updates the source buffer, i.e., moving the cursor over an
error message causes the locus of that error to be displayed.

   The features of Compilation mode are also available in a minor mode
called Compilation Minor mode.  This lets you parse error messages in
any buffer, not just a normal compilation output buffer.  Type ‘M-x
compilation-minor-mode’ to enable the minor mode.  For instance, in an
Rlogin buffer (*note Remote Host::), Compilation minor mode
automatically accesses remote source files by FTP (*note File Names::).


File: emacs.info,  Node: Compilation Shell,  Next: Grep Searching,  Prev: Compilation Mode,  Up: Building

28.3 Subshells for Compilation
==============================

This section includes various techniques and advice for using a shell
and its features in compilation buffers.  This material is specific to
local compilations, and will most probably not work in (or be irrelevant
to) compilation buffers whose default directory is on remote hosts.

   The ‘M-x compile’ command uses a shell to run the compilation
command, but specifies the option for a noninteractive shell.  This
means, in particular, that the shell should start with no prompt.  If
you find your usual shell prompt making an unsightly appearance in the
‘*compilation*’ buffer, it means you have made a mistake in your shell’s
init file by setting the prompt unconditionally.  (This init file may be
named ‘.bashrc’, ‘.profile’, ‘.cshrc’, ‘.shrc’, etc., depending on what
shell you use.)  The shell init file should set the prompt only if there
already is a prompt.  Here’s how to do it in bash:

     if [ "${PS1+set}" = set ]
     then PS1=...
     fi

And here’s how to do it in csh:

     if ($?prompt) set prompt = ...

   If you want to customize the value of the ‘TERM’ environment variable
passed to the compilation subshell, customize the variable
‘comint-terminfo-terminal’ (*note Shell Options::).

   Emacs does not expect a compiler process to launch asynchronous
subprocesses; if it does, and they keep running after the main compiler
process has terminated, Emacs may kill them or their output may not
arrive in Emacs.  To avoid this problem, make the main compilation
process wait for its subprocesses to finish.  In a shell script, you can
do this using ‘$!’ and ‘wait’, like this:

     (sleep 10; echo 2nd)& pid=$!  # Record pid of subprocess
     echo first message
     wait $pid                     # Wait for subprocess

If the background process does not output to the compilation buffer, so
you only need to prevent it from being killed when the main compilation
process terminates, this is sufficient:

     nohup COMMAND; sleep 1

   On MS-DOS, asynchronous subprocesses are not supported, so ‘M-x
compile’ runs the compilation command synchronously (i.e., you must wait
until the command finishes before you can do anything else in Emacs).
*Note MS-DOS::.


File: emacs.info,  Node: Grep Searching,  Next: Flymake,  Prev: Compilation Shell,  Up: Building

28.4 Searching with Grep under Emacs
====================================

Just as you can run a compiler from Emacs and then visit the lines with
compilation errors, you can also run ‘grep’ and then visit the lines on
which matches were found.  This works by treating the matches reported
by ‘grep’ as if they were errors.  The output buffer uses Grep mode,
which is a variant of Compilation mode (*note Compilation Mode::).

‘M-x grep’
‘M-x lgrep’
     Run ‘grep’ asynchronously under Emacs, listing matching lines in
     the buffer named ‘*grep*’.
‘M-x grep-find’
‘M-x find-grep’
‘M-x rgrep’
     Run ‘grep’ via ‘find’, and collect output in the ‘*grep*’ buffer.
‘M-x zrgrep’
     Run ‘zgrep’ and collect output in the ‘*grep*’ buffer.
‘M-x kill-grep’
     Kill the running ‘grep’ subprocess.

   To run ‘grep’, type ‘M-x grep’, then enter a command line that
specifies how to run ‘grep’.  Use the same arguments you would give
‘grep’ when running it normally: a ‘grep’-style regexp (usually in
single-quotes to quote the shell’s special characters) followed by file
names, which may use wildcards.  If you specify a prefix argument for
‘M-x grep’, it finds the identifier (*note Xref::) in the buffer around
point, and puts that into the default ‘grep’ command.

   Your command need not simply run ‘grep’; you can use any shell
command that produces output in the same format.  For instance, you can
chain ‘grep’ commands, like this:

     grep -nH -e foo *.el | grep bar | grep toto

   The output from ‘grep’ goes in the ‘*grep*’ buffer.  You can find the
corresponding lines in the original files using ‘M-g M-n’, <RET>, and so
forth, just like compilation errors.  *Note Compilation Mode::, for
detailed description of commands and key bindings available in the
‘*grep*’ buffer.

   Some grep programs accept a ‘--color’ option to output special
markers around matches for the purpose of highlighting.  You can make
use of this feature by setting ‘grep-highlight-matches’ to ‘t’.  When
displaying a match in the source buffer, the exact match will be
highlighted, instead of the entire source line.  Highlighting is
provided via matching the ANSI escape sequences emitted by ‘grep’.  The
matching of the sequences is controlled by ‘grep-match-regexp’, which
can be customized to accommodate different ‘grep’ programs.

   As with compilation commands (*note Compilation::), while the grep
command runs, the mode line shows the running number of matches found
and highlighted so far.

   The ‘grep’ commands will offer to save buffers before running.  This
is controlled by the ‘grep-save-buffers’ variable.  The possible values
are either ‘nil’ (don’t save), ‘ask’ (ask before saving), or a function
which will be used as a predicate (and is called with the file name as
the parameter and should return non-‘nil’ if the buffer is to be saved).
Any other non-‘nil’ value means that all buffers should be saved without
asking.  The default is ‘ask’.

   The command ‘M-x grep-find’ (also available as ‘M-x find-grep’) is
similar to ‘M-x grep’, but it supplies a different initial default for
the command—one that runs both ‘find’ and ‘grep’, so as to search every
file in a directory tree.  See also the ‘find-grep-dired’ command, in
*note Dired and Find::.

   The commands ‘M-x lgrep’ (local grep) and ‘M-x rgrep’ (recursive
grep) are more user-friendly versions of ‘grep’ and ‘grep-find’, which
prompt separately for the regular expression to match, the files to
search, and the base directory for the search.  Case sensitivity of the
search is controlled by the current value of ‘case-fold-search’.  The
command ‘M-x zrgrep’ is similar to ‘M-x rgrep’, but it calls ‘zgrep’
instead of ‘grep’ to search the contents of gzipped files.

   These commands build the shell commands based on the variables
‘grep-template’ (for ‘lgrep’) and ‘grep-find-template’ (for ‘rgrep’).
The files to search can use aliases defined in the variable
‘grep-files-aliases’.

   Directories listed in the variable ‘grep-find-ignored-directories’
are automatically skipped by ‘M-x rgrep’.  The default value includes
the data directories used by various version control systems.

   By default, the shell commands constructed for ‘lgrep’, ‘rgrep’, and
‘zgrep’ are abbreviated for display by concealing the part that contains
a long list of files and directories to ignore.  You can reveal the
concealed part by clicking on the button with ellipsis, which represents
them.  You can also interactively toggle viewing the concealed part by
typing ‘M-x grep-find-toggle-abbreviation’.  To disable this
abbreviation of the shell commands, customize the option
‘grep-find-abbreviate’ to a ‘nil’ value.


File: emacs.info,  Node: Flymake,  Next: Debuggers,  Prev: Grep Searching,  Up: Building

28.5 Finding Syntax Errors On The Fly
=====================================

Flymake mode is a minor mode that performs on-the-fly syntax checking
for many programming and markup languages, including C, C++, Perl, HTML,
and TeX/LaTeX.  It is somewhat analogous to Flyspell mode, which
performs spell checking for ordinary human languages in a similar
fashion (*note Spelling::).  As you edit a file, Flymake mode runs an
appropriate syntax checking tool in the background, using a temporary
copy of the buffer.  It then parses the error and warning messages, and
highlights the erroneous lines in the buffer.  The syntax checking tool
used depends on the language; for example, for C/C++ files this is
usually the C compiler.  Flymake can also use build tools such as ‘make’
for checking complicated projects.

   To enable Flymake mode, type ‘M-x flymake-mode’.  You can jump to the
errors that it finds by using ‘M-x flymake-goto-next-error’ and
‘M-x flymake-goto-prev-error’.  To display a detailed overview of the
diagnostics for the current buffer, use the command
‘M-x flymake-show-buffer-diagnostics’; to display a similar overview of
diagnostics for the entire project (*note Projects::), use
‘M-x flymake-show-project-diagnostics’.

   For more details about using Flymake, see *note Flymake:
(flymake)Top.


File: emacs.info,  Node: Debuggers,  Next: Executing Lisp,  Prev: Flymake,  Up: Building

28.6 Running Debuggers Under Emacs
==================================

The GUD (Grand Unified Debugger) library provides an Emacs interface to
a wide variety of symbolic debuggers.  It can run the GNU Debugger
(GDB), as well as DBX, SDB, XDB, Guile REPL debug commands, Perl’s
debugging mode, the Python debugger PDB, and the Java Debugger JDB.

   Emacs provides a special interface to GDB, which uses extra Emacs
windows to display the state of the debugged program.  *Note GDB
Graphical Interface::.

   Emacs also has a built-in debugger for Emacs Lisp programs.  *Note
The Lisp Debugger: (elisp)Debugging.

* Menu:

* Starting GUD::        How to start a debugger subprocess.
* Debugger Operation::  Connection between the debugger and source buffers.
* Commands of GUD::     Key bindings for common commands.
* GUD Customization::   Defining your own commands for GUD.
* GDB Graphical Interface::  An enhanced mode that uses GDB features to
                        implement a graphical debugging environment.


File: emacs.info,  Node: Starting GUD,  Next: Debugger Operation,  Up: Debuggers

28.6.1 Starting GUD
-------------------

There are several commands for starting a debugger subprocess, each
corresponding to a particular debugger program.

‘M-x gdb’
     Run GDB as a subprocess, and interact with it via an IDE-like Emacs
     interface.  *Note GDB Graphical Interface::, for more information
     about this command.

‘M-x gud-gdb’
     Run GDB, using a GUD interaction buffer for input and output to the
     GDB subprocess (*note Debugger Operation::).  If such a buffer
     already exists, switch to it; otherwise, create the buffer and
     switch to it.

     The other commands in this list do the same, for other debugger
     programs.

‘M-x perldb’
     Run the Perl interpreter in debug mode.

‘M-x jdb’
     Run the Java debugger.

‘M-x pdb’
     Run the Python debugger.

‘M-x guiler’
     Run Guile REPL for debugging Guile Scheme programs.

‘M-x dbx’
     Run the DBX debugger.

‘M-x xdb’
     Run the XDB debugger.

‘M-x sdb’
     Run the SDB debugger.

   Each of these commands reads a command line to invoke the debugger,
using the minibuffer.  The minibuffer’s initial contents contain the
standard executable name and options for the debugger, and sometimes
also a guess for the name of the executable file you want to debug.
Shell wildcards and variables are not allowed in this command line.
Emacs assumes that the first command argument which does not start with
a ‘-’ is the executable file name.

   Tramp provides a facility for remote debugging, whereby both the
debugger and the program being debugged are on the same remote host.
*Note (tramp)Running a debugger on a remote host::, for details.  This
is separate from GDB’s remote debugging feature, where the program and
the debugger run on different machines (*note Debugging Remote Programs:
(gdb)Remote Debugging.).


File: emacs.info,  Node: Debugger Operation,  Next: Commands of GUD,  Prev: Starting GUD,  Up: Debuggers

28.6.2 Debugger Operation
-------------------------

The “GUD interaction buffer” is an Emacs buffer which is used to send
text commands to a debugger subprocess, and record its output.  This is
the basic interface for interacting with a debugger, used by ‘M-x
gud-gdb’ and other commands listed in *note Starting GUD::.  The ‘M-x
gdb’ command extends this interface with additional specialized buffers
for controlling breakpoints, stack frames, and other aspects of the
debugger state (*note GDB Graphical Interface::).

   The GUD interaction buffer uses a variant of Shell mode, so the Emacs
commands defined by Shell mode are available (*note Shell Mode::).
Completion is available for most debugger commands (*note Completion::),
and you can use the usual Shell mode history commands to repeat them.
*Note Commands of GUD::, for special commands that can be used in the
GUD interaction buffer.

   As you debug a program, Emacs displays the relevant source files by
visiting them in Emacs buffers, with an arrow in the left fringe
indicating the current execution line.  (On a text terminal, the arrow
appears as ‘=>’, overlaid on the first two text columns.)  Moving point
in such a buffer does not move the arrow.  You are free to edit these
source files, but note that inserting or deleting lines will throw off
the arrow’s positioning, as Emacs has no way to figure out which edited
source line corresponds to the line reported by the debugger subprocess.
To update this information, you typically have to recompile and restart
the program.

   GUD Tooltip mode is a global minor mode that adds tooltip support to
GUD.  To toggle this mode, type ‘M-x gud-tooltip-mode’.  It is disabled
by default.  If enabled, you can move the mouse pointer over a variable,
a function, or a macro (collectively called “identifiers”) to show their
values in tooltips (*note Tooltips::).  If just placing the mouse
pointer over an expression doesn’t show the value of the expression you
had in mind, you can tell Emacs more explicitly what expression to
evaluate by dragging the mouse over the expression, then leaving the
mouse inside the marked area.  The GUD Tooltip mode takes effect in the
GUD interaction buffer, and in all source buffers with major modes
listed in the variable ‘gud-tooltip-modes’.  If the variable
‘gud-tooltip-echo-area’ is non-‘nil’, or if you turned off the tooltip
mode, values are shown in the echo area instead of a tooltip.

   When using GUD Tooltip mode with ‘M-x gud-gdb’, displaying an
expression’s value in GDB can sometimes expand a macro, potentially
causing side effects in the debugged program.  For that reason, using
tooltips in ‘gud-gdb’ is disabled.  If you use the ‘M-x gdb’ interface,
this problem does not occur, as there is special code to avoid
side-effects; furthermore, you can display macro definitions associated
with an identifier when the program is not executing.


File: emacs.info,  Node: Commands of GUD,  Next: GUD Customization,  Prev: Debugger Operation,  Up: Debuggers

28.6.3 Commands of GUD
----------------------

GUD provides commands for setting and clearing breakpoints, selecting
stack frames, and stepping through the program.

‘C-x C-a C-b’
     Set a breakpoint on the source line that point is on.

   ‘C-x C-a C-b’ (‘gud-break’), when called in a source buffer, sets a
debugger breakpoint on the current source line.  This command is
available only after starting GUD.  If you call it in a buffer that is
not associated with any debugger subprocess, it signals an error.

   The following commands are available both in the GUD interaction
buffer and globally, but with different key bindings.  The keys starting
with ‘C-c’ are available only in the GUD interaction buffer, while those
starting with ‘C-x C-a’ are available globally.  Some of these commands
are also available via the tool bar; some are not supported by certain
debuggers.

‘C-c C-l’
‘C-x C-a C-l’
     Display, in another window, the last source line referred to in the
     GUD interaction buffer (‘gud-refresh’).

‘C-c C-s’
‘C-x C-a C-s’
     Execute the next single line of code (‘gud-step’).  If the line
     contains a function call, execution stops after entering the called
     function.

‘C-c C-n’
‘C-x C-a C-n’
     Execute the next single line of code, stepping across function
     calls without stopping inside the functions (‘gud-next’).

‘C-c C-i’
‘C-x C-a C-i’
     Execute a single machine instruction (‘gud-stepi’).

‘C-c C-p’
‘C-x C-a C-p’
     Evaluate the expression at point (‘gud-print’).  If Emacs does not
     print the exact expression that you want, mark it as a region
     first.

‘C-c C-r’
‘C-x C-a C-r’
     Continue execution without specifying any stopping point.  The
     program will run until it hits a breakpoint, terminates, or gets a
     signal that the debugger is checking for (‘gud-cont’).

‘C-c C-d’
‘C-x C-a C-d’
     Delete the breakpoint(s) on the current source line, if any
     (‘gud-remove’).  If you use this command in the GUD interaction
     buffer, it applies to the line where the program last stopped.

‘C-c C-t’
‘C-x C-a C-t’
     Set a temporary breakpoint on the current source line, if any
     (‘gud-tbreak’).  If you use this command in the GUD interaction
     buffer, it applies to the line where the program last stopped.

‘C-c <’
‘C-x C-a <’
     Select the next enclosing stack frame (‘gud-up’).  This is
     equivalent to the GDB command ‘up’.

‘C-c >’
‘C-x C-a >’
     Select the next inner stack frame (‘gud-down’).  This is equivalent
     to the GDB command ‘down’.

‘C-c C-u’
‘C-x C-a C-u’
     Continue execution to the current line (‘gud-until’).  The program
     will run until it hits a breakpoint, terminates, gets a signal that
     the debugger is checking for, or reaches the line on which the
     cursor currently sits.

‘C-c C-f’
‘C-x C-a C-f’
     Run the program until the selected stack frame returns or stops for
     some other reason (‘gud-finish’).

   If you are using GDB, these additional key bindings are available:

‘C-x C-a C-j’
     Only useful in a source buffer, ‘gud-jump’ transfers the program’s
     execution point to the current line.  In other words, the next line
     that the program executes will be the one where you gave the
     command.  If the new execution line is in a different function from
     the previously one, GDB prompts for confirmation since the results
     may be bizarre.  See the GDB manual entry regarding ‘jump’ for
     details.

‘<TAB>’
     With GDB, complete a symbol name (‘gud-gdb-complete-command’).
     This key is available only in the GUD interaction buffer.

   These commands interpret a numeric argument as a repeat count, when
that makes sense.

   Because <TAB> serves as a completion command, you can’t use it to
enter a tab as input to the program you are debugging with GDB.
Instead, type ‘C-q <TAB>’ to enter a tab.


File: emacs.info,  Node: GUD Customization,  Next: GDB Graphical Interface,  Prev: Commands of GUD,  Up: Debuggers

28.6.4 GUD Customization
------------------------

On startup, GUD runs one of the following hooks: ‘gdb-mode-hook’, if you
are using GDB; ‘dbx-mode-hook’, if you are using DBX; ‘sdb-mode-hook’,
if you are using SDB; ‘xdb-mode-hook’, if you are using XDB;
‘guiler-mode-hook’ for Guile REPL debugging; ‘perldb-mode-hook’, for
Perl debugging mode; ‘pdb-mode-hook’, for PDB; ‘jdb-mode-hook’, for JDB.
*Note Hooks::.

   The ‘gud-def’ Lisp macro (*note (elisp)Defining Macros::) provides a
convenient way to define an Emacs command that sends a particular
command string to the debugger, and set up a key binding for in the GUD
interaction buffer:

     (gud-def FUNCTION CMDSTRING BINDING DOCSTRING)

   This defines a command named FUNCTION which sends CMDSTRING to the
debugger process, and gives it the documentation string DOCSTRING.  You
can then use the command FUNCTION in any buffer.  If BINDING is
non-‘nil’, ‘gud-def’ also binds the command to ‘C-c BINDING’ in the GUD
buffer’s mode and to ‘C-x C-a BINDING’ generally.

   The command string CMDSTRING may contain certain ‘%’-sequences that
stand for data to be filled in at the time FUNCTION is called:

‘%f’
     The name of the current source file.  If the current buffer is the
     GUD buffer, then the current source file is the file that the
     program stopped in.

‘%l’
     The number of the current source line.  If the current buffer is
     the GUD buffer, then the current source line is the line that the
     program stopped in.

‘%e’
     In transient-mark-mode the text in the region, if it is active.
     Otherwise the text of the C lvalue or function-call expression at
     or adjacent to point.

‘%a’
     The text of the hexadecimal address at or adjacent to point.

‘%p’
     The numeric argument of the called function, as a decimal number.
     If the command is used without a numeric argument, ‘%p’ stands for
     the empty string.

     If you don’t use ‘%p’ in the command string, the command you define
     ignores any numeric argument.

‘%d’
     The name of the directory of the current source file.

‘%c’
     Fully qualified class name derived from the expression surrounding
     point (jdb only).


File: emacs.info,  Node: GDB Graphical Interface,  Prev: GUD Customization,  Up: Debuggers

28.6.5 GDB Graphical Interface
------------------------------

The command ‘M-x gdb’ starts GDB in an IDE-like interface, with
specialized buffers for controlling breakpoints, stack frames, and other
aspects of the debugger state.  It also provides additional ways to
control the debugging session with the mouse, such as clicking in the
fringe of a source buffer to set a breakpoint there.

   To run GDB using just the GUD interaction buffer interface, without
these additional features, use ‘M-x gud-gdb’ (*note Starting GUD::).

   Internally, ‘M-x gdb’ informs GDB that its screen size is unlimited;
for correct operation, you must not change GDB’s screen height and width
values during the debugging session.

* Menu:

* GDB User Interface Layout::   Control the number of displayed buffers.
* Source Buffers::              Use the mouse in the fringe/margin to
                                control your program.
* Breakpoints Buffer::          A breakpoint control panel.
* Threads Buffer::              Displays your threads.
* Stack Buffer::                Select a frame from the call stack.
* Other GDB Buffers::           Other buffers for controlling the GDB state.
* Watch Expressions::           Monitor variable values in the speedbar.
* Multithreaded Debugging::     Debugging programs with several threads.


File: emacs.info,  Node: GDB User Interface Layout,  Next: Source Buffers,  Up: GDB Graphical Interface

28.6.5.1 GDB User Interface Layout
..................................

If the variable ‘gdb-many-windows’ is ‘nil’ (the default), ‘M-x gdb’
normally displays only the GUD interaction buffer.  However, if the
variable ‘gdb-show-main’ is also non-‘nil’, it starts with two windows:
one displaying the GUD interaction buffer, and the other showing the
source for the ‘main’ function of the program you are debugging.

   If ‘gdb-many-windows’ is non-‘nil’, then ‘M-x gdb’ displays the
following frame layout:

     +--------------------------------+--------------------------------+
     |   GUD interaction buffer       |   Locals/Registers buffer      |
     |--------------------------------+--------------------------------+
     |   Primary Source buffer        |   I/O buffer for debugged pgm  |
     |--------------------------------+--------------------------------+
     |   Stack buffer                 |   Breakpoints/Threads buffer   |
     +--------------------------------+--------------------------------+

   You can customize the window layout based on the one above and save
that layout to a file using ‘gdb-save-window-configuration’.  Then you
can later load this layout back using ‘gdb-load-window-configuration’.
(Internally, Emacs uses the term window configuration instead of window
layout.)  You can set your custom layout as the default one used by
‘gdb-many-windows’ by customizing
‘gdb-default-window-configuration-file’.  If it is not an absolute file
name, GDB looks under ‘gdb-window-configuration-directory’ for the file.
‘gdb-window-configuration-directory’ defaults to ‘user-emacs-directory’
(*note Find Init::).

   If you ever change the window layout, you can restore the default
layout by typing ‘M-x gdb-restore-windows’.  To toggle between the many
windows layout and a simple layout with just the GUD interaction buffer
and a source file, type ‘M-x gdb-many-windows’.

   If you have an elaborate window setup, and don’t want
‘gdb-many-windows’ to disrupt that, it is better to invoke ‘M-x gdb’ in
a separate frame to begin with, then the arrangement of windows on your
original frame will not be affected.  A separate frame for GDB sessions
can come in especially handy if you work on a text-mode terminal, where
the screen estate for windows could be at a premium.  If you choose to
start GDB in the same frame, consider setting
‘gdb-restore-window-configuration-after-quit’ to a non-‘nil’ value.
Your original layout will then be restored after GDB quits.  Use ‘t’ to
always restore; use ‘if-gdb-many-windows’ to restore only when
‘gdb-many-windows’ is non-‘nil’; use ‘if-gdb-show-main’ to restore only
when ‘gdb-show-main’ is non-‘nil’.

   You may also specify additional GDB-related buffers to display,
either in the same frame or a different one.  Select the buffers you
want by typing ‘M-x gdb-display-BUFFERTYPE-buffer’ or ‘M-x
gdb-frame-BUFFERTYPE-buffer’, where BUFFERTYPE is the relevant buffer
type, such as ‘breakpoints’ or ‘io’.  You can do the same from the menu
bar, with the ‘GDB-Windows’ and ‘GDB-Frames’ sub-menus of the ‘GUD’
menu.

   By default, GDB uses at most one window to display the source file.
You can make it use more windows by customizing
‘gdb-max-source-window-count’.  You can also customize
‘gdb-display-source-buffer-action’ to control how GDB displays source
files.

   When you finish debugging, kill the GUD interaction buffer with ‘C-x
k’, which will also kill all the buffers associated with the session.
However you need not do this if, after editing and re-compiling your
source code within Emacs, you wish to continue debugging.  When you
restart execution, GDB automatically finds the new executable.  Keeping
the GUD interaction buffer has the advantage of keeping the shell
history as well as GDB’s breakpoints.  You do need to check that the
breakpoints in recently edited source files are still in the right
places.


File: emacs.info,  Node: Source Buffers,  Next: Breakpoints Buffer,  Prev: GDB User Interface Layout,  Up: GDB Graphical Interface

28.6.5.2 Source Buffers
.......................

‘mouse-1’ (in fringe)
     Set or clear a breakpoint on that line
     (‘gdb-mouse-set-clear-breakpoint’).

‘C-mouse-1’ (in fringe)
     Enable or disable a breakpoint on that line
     (‘gdb-mouse-toggle-breakpoint-margin’).

‘mouse-3’ (in fringe)
     Continue execution to that line (‘gdb-mouse-until’).

‘C-mouse-3’ (in fringe)
     Jump to that line (‘gdb-mouse-jump’).

   On a graphical display, you can click ‘mouse-1’ in the fringe of a
source buffer, to set a breakpoint on that line (*note Fringes::).  A
red dot appears in the fringe, where you clicked.  If a breakpoint
already exists there, the click removes it.  A ‘C-mouse-1’ click enables
or disables an existing breakpoint; a breakpoint that is disabled, but
not unset, is indicated by a gray dot.

   On a text terminal, or when fringes are disabled, enabled breakpoints
are indicated with a ‘B’ character in the left margin of the window.
Disabled breakpoints are indicated with ‘b’.  (The margin is only
displayed if a breakpoint is present.)

   A solid arrow in the left fringe of a source buffer indicates the
line of the innermost frame where the debugged program has stopped.  A
hollow arrow indicates the current execution line of a higher-level
frame.  If you drag the arrow in the fringe with ‘mouse-1’, that causes
execution to advance to the line where you release the button.
Alternatively, you can click ‘mouse-3’ in the fringe to advance to that
line.  You can click ‘C-mouse-3’ in the fringe to jump to that line
without executing the intermediate lines.  This command allows you to go
backwards, which can be useful for running through code that has already
executed, in order to examine its execution in more detail.

   By default, source file names and non-ASCII strings in the program
being debugged are decoded using the default coding-system.  If you
prefer a different decoding, perhaps because the program being debugged
uses a different character encoding, set the variable
‘gdb-mi-decode-strings’ to the appropriate coding-system, or to ‘nil’ to
leave non-ASCII characters as undecoded octal escapes.


File: emacs.info,  Node: Breakpoints Buffer,  Next: Threads Buffer,  Prev: Source Buffers,  Up: GDB Graphical Interface

28.6.5.3 Breakpoints Buffer
...........................

The GDB Breakpoints buffer shows the breakpoints, watchpoints and
catchpoints in the debugger session.  *Note (gdb)Breakpoints::.  It
provides the following commands, which mostly apply to the “current
breakpoint” (the breakpoint which point is on):

‘<SPC>’
     Enable/disable current breakpoint (‘gdb-toggle-breakpoint’).  On a
     graphical display, this changes the color of the dot in the fringe
     of the source buffer at that line.  The dot is red when the
     breakpoint is enabled, and gray when it is disabled.

‘D’
     Delete the current breakpoint (‘gdb-delete-breakpoint’).

‘<RET>’
     Visit the source line for the current breakpoint
     (‘gdb-goto-breakpoint’).

‘mouse-2’
     Visit the source line for the breakpoint you click on
     (‘gdb-goto-breakpoint’).

   When ‘gdb-many-windows’ is non-‘nil’, the GDB Breakpoints buffer
shares its window with the GDB Threads buffer.  To switch from one to
the other click with ‘mouse-1’ on the relevant button in the header
line.  If ‘gdb-show-threads-by-default’ is non-‘nil’, the GDB Threads
buffer is the one shown by default.


File: emacs.info,  Node: Threads Buffer,  Next: Stack Buffer,  Prev: Breakpoints Buffer,  Up: GDB Graphical Interface

28.6.5.4 Threads Buffer
.......................

The GDB Threads buffer displays a summary of the threads in the debugged
program.  *Note Threads: (gdb)Threads.  To select a thread, move point
there and press <RET> (‘gdb-select-thread’), or click on it with
‘mouse-2’.  This also displays the associated source buffer, and updates
the contents of the other GDB buffers.

   You can customize variables in the ‘gdb-buffers’ group to select
fields included in GDB Threads buffer.

‘gdb-thread-buffer-verbose-names’
     Show long thread names like ‘Thread 0x4e2ab70 (LWP 1983)’.

‘gdb-thread-buffer-arguments’
     Show arguments of thread top frames.

‘gdb-thread-buffer-locations’
     Show file information or library names.

‘gdb-thread-buffer-addresses’
     Show addresses for thread frames in threads buffer.

   To view information for several threads simultaneously, use the
following commands from the GDB Threads buffer.

‘d’
     Display disassembly buffer for the thread at current line
     (‘gdb-display-disassembly-for-thread’).

‘f’
     Display the GDB Stack buffer for the thread at current line
     (‘gdb-display-stack-for-thread’).

‘l’
     Display the GDB Locals buffer for the thread at current line
     (‘gdb-display-locals-for-thread’).

‘r’
     Display the GDB Registers buffer for the thread at current line
     (‘gdb-display-registers-for-thread’).

Their upper-case counterparts, ‘D’, ‘F’ ,‘L’ and ‘R’, display the
corresponding buffer in a new frame.

   When you create a buffer showing information about some specific
thread, it becomes bound to that thread and keeps showing actual
information while you debug your program.  The mode indicator for each
GDB buffer shows the number of the thread whose information that buffer
displays.  The thread number is also included in the name of each bound
buffer.

   Further commands are available in the GDB Threads buffer which depend
on the mode of GDB that is used for controlling execution of your
program.  *Note Multithreaded Debugging::.


File: emacs.info,  Node: Stack Buffer,  Next: Other GDB Buffers,  Prev: Threads Buffer,  Up: GDB Graphical Interface

28.6.5.5 Stack Buffer
.....................

The GDB Stack buffer displays a “call stack”, with one line for each of
the nested subroutine calls (“stack frames”) in the debugger session.
*Note Backtraces: (gdb)Backtrace.

   On graphical displays, the selected stack frame is indicated by an
arrow in the fringe.  On text terminals, or when fringes are disabled,
the selected stack frame is displayed in reverse contrast.  To select a
stack frame, move point in its line and type <RET>
(‘gdb-frames-select’), or click ‘mouse-2’ on it.  Doing so also updates
the Locals buffer (*note Other GDB Buffers::).

   If you want the frame address to be shown each stack frame, customize
the variable ‘gdb-stack-buffer-addresses’ to a non-‘nil’ value.


File: emacs.info,  Node: Other GDB Buffers,  Next: Watch Expressions,  Prev: Stack Buffer,  Up: GDB Graphical Interface

28.6.5.6 Other GDB Buffers
..........................

Other buffers provided by ‘M-x gdb’ whose display you can optionally
request include:

Locals Buffer
     This buffer displays the values of local variables of the current
     stack frame for simple data types (*note Frame Info: (gdb)Frame
     Info.).  Press <RET> or click ‘mouse-2’ on the value if you want to
     edit it.

     Arrays and structures display their type only.  With GDB 6.4 or
     later, you can examine the value of the local variable at point by
     typing <RET>, or with a ‘mouse-2’ click.  With earlier versions of
     GDB, use <RET> or ‘mouse-2’ on the type description
     (‘[struct/union]’ or ‘[array]’).  *Note Watch Expressions::.

     To display the Locals buffer, type ‘M-x gdb-display-locals-buffer’.

I/O Buffer
     If the program you are debugging uses standard input and output
     streams for interaction with the user, or emits a significant
     amount of output to its standard output, you may wish to separate
     its I/O from interaction with GDB. Use the command
     ‘M-x gdb-display-io-buffer’ to show a window with a buffer to which
     Emacs redirects the input and output from the program you are
     debugging.

Registers Buffer
     This buffer displays the values held by the registers (*note
     (gdb)Registers::).  Request the display of this buffer with the
     command ‘M-x gdb-display-registers-buffer’.  Press <RET> or click
     ‘mouse-2’ on a register if you want to edit its value.  With GDB
     6.4 or later, recently changed register values display with
     ‘font-lock-warning-face’.

Assembler Buffer
     The assembler buffer displays the current frame as machine code.
     An arrow points to the current instruction, and you can set and
     remove breakpoints as in a source buffer.  Breakpoint icons also
     appear in the fringe or margin.  To request the display of this
     buffer, use ‘M-x gdb-display-disassembly-buffer’.

Memory Buffer
     The memory buffer lets you examine sections of program memory
     (*note Memory: (gdb)Memory.).  Click ‘mouse-1’ on the appropriate
     part of the header line to change the starting address or number of
     data items that the buffer displays.  Alternatively, use ‘S’ or ‘N’
     respectively.  Click ‘mouse-3’ on the header line to select the
     display format or unit size for these data items.  Use
     ‘M-x gdb-display-memory-buffer’ to request display of this buffer.

   When ‘gdb-many-windows’ is non-‘nil’, the locals buffer shares its
window with the registers buffer, just like breakpoints and threads
buffers.  To switch from one to the other, click with ‘mouse-1’ on the
relevant button in the header line.


File: emacs.info,  Node: Watch Expressions,  Next: Multithreaded Debugging,  Prev: Other GDB Buffers,  Up: GDB Graphical Interface

28.6.5.7 Watch Expressions
..........................

If you want to see how a variable changes each time your program stops,
move point into the variable name and click on the watch icon in the
tool bar (‘gud-watch’) or type ‘C-x C-a C-w’.  If you specify a prefix
argument, you can enter the variable name in the minibuffer.

   Each watch expression is displayed in the speedbar (*note
Speedbar::).  Complex data types, such as arrays, structures and unions
are represented in a tree format.  Leaves and simple data types show the
name of the expression and its value and, when the speedbar frame is
selected, display the type as a tooltip.  Higher levels show the name,
type and address value for pointers and just the name and type
otherwise.  Root expressions also display the frame address as a tooltip
to help identify the frame in which they were defined.

   To expand or contract a complex data type, click ‘mouse-2’ or press
<SPC> on the tag to the left of the expression.  Emacs asks for
confirmation before expanding the expression if its number of immediate
children exceeds the value of the variable ‘gdb-max-children’.

   To delete a complex watch expression, move point to the root
expression in the speedbar and type ‘D’ (‘gdb-var-delete’).

   To edit a variable with a simple data type, or a simple element of a
complex data type, move point there in the speedbar and type <RET>
(‘gdb-edit-value’).  Or you can click ‘mouse-2’ on a value to edit it.
Either way, this reads the new value using the minibuffer.

   If you set the variable ‘gdb-show-changed-values’ to non-‘nil’ (the
default value), Emacs uses ‘font-lock-warning-face’ to highlight values
that have recently changed and ‘shadow’ face to make variables which
have gone out of scope less noticeable.  When a variable goes out of
scope you can’t edit its value.

   If the variable ‘gdb-delete-out-of-scope’ is non-‘nil’ (the default
value), Emacs automatically deletes watch expressions which go out of
scope.  Sometimes, when your program re-enters the same function many
times, it may be useful to set this value to ‘nil’ so that you don’t
need to recreate the watch expression.

   If the variable ‘gdb-use-colon-colon-notation’ is non-‘nil’, Emacs
uses the ‘FUNCTION::VARIABLE’ format.  This allows the user to display
watch expressions which share the same variable name.  The default value
is ‘nil’.

   To automatically raise the speedbar every time the display of watch
expressions updates, set ‘gdb-speedbar-auto-raise’ to non-‘nil’.  This
can be useful if you are debugging with a full screen Emacs frame.


File: emacs.info,  Node: Multithreaded Debugging,  Prev: Watch Expressions,  Up: GDB Graphical Interface

28.6.5.8 Multithreaded Debugging
................................

In GDB’s “all-stop mode”, whenever your program stops, all execution
threads stop.  Likewise, whenever you restart the program, all threads
start executing.  *Note All-Stop Mode: (gdb)All-Stop Mode.  For some
multi-threaded targets, GDB supports a further mode of operation, called
“non-stop mode”, in which you can examine stopped program threads in the
debugger while other threads continue to execute freely.  *Note Non-Stop
Mode: (gdb)Non-Stop Mode.  Versions of GDB prior to 7.0 do not support
non-stop mode, and it does not work on all targets.

   The variable ‘gdb-non-stop-setting’ determines whether Emacs runs GDB
in all-stop mode or non-stop mode.  The default is ‘t’, which means it
tries to use non-stop mode if that is available.  If you change the
value to ‘nil’, or if non-stop mode is unavailable, Emacs runs GDB in
all-stop mode.  The variable takes effect when Emacs begins a debugging
session; if you change its value, you should restart any active
debugging session.

   When a thread stops in non-stop mode, Emacs usually switches to that
thread.  If you don’t want Emacs to do this switch if another stopped
thread is already selected, change the variable
‘gdb-switch-when-another-stopped’ to ‘nil’.

   Emacs can decide whether or not to switch to the stopped thread
depending on the reason which caused the stop.  Customize the variable
‘gdb-switch-reasons’ to select the stop reasons which will cause a
thread switch.

   The variable ‘gdb-stopped-functions’ allows you to execute your
functions whenever some thread stops.

   In non-stop mode, you can switch between different modes for GUD
execution control commands.

“Non-stop/A”

     When ‘gdb-gud-control-all-threads’ is ‘t’ (the default value),
     interruption and continuation commands apply to all threads, so you
     can halt or continue all your threads with one command using
     ‘gud-stop-subjob’ and ‘gud-cont’, respectively.  The ‘Go’ button is
     shown on the tool bar when at least one thread is stopped, whereas
     ‘Stop’ button is shown when at least one thread is running.

“Non-stop/T”

     When ‘gdb-gud-control-all-threads’ is ‘nil’, only the current
     thread is stopped/continued.  ‘Go’ and ‘Stop’ buttons on the GUD
     tool bar are shown depending on the state of current thread.

   You can change the current value of ‘gdb-gud-control-all-threads’
from the tool bar or from ‘GUD->GDB-MI’ menu.

   Stepping commands always apply to the current thread.

   In non-stop mode, you can interrupt/continue your threads without
selecting them.  Hitting ‘i’ in threads buffer interrupts thread under
point, ‘c’ continues it, ‘s’ steps through.  More such commands may be
added in the future.

   Note that when you interrupt a thread, it stops with the ‘signal
received’ reason.  If that reason is included in your
‘gdb-switch-reasons’ (it is by default), Emacs will switch to that
thread.


File: emacs.info,  Node: Executing Lisp,  Next: Lisp Libraries,  Prev: Debuggers,  Up: Building

28.7 Executing Lisp Expressions
===============================

Emacs has major modes for several variants of Lisp.  They use the same
editing commands as other programming language modes (*note Programs::).
In addition, they provide special commands for executing Lisp
expressions.

Emacs Lisp mode
     The mode for editing Emacs Lisp source files.  It defines ‘C-M-x’
     to evaluate the current top-level Lisp expression.  *Note Lisp
     Eval::.

Lisp Interaction mode
     The mode for an interactive Emacs Lisp session.  It defines ‘C-j’
     to evaluate the expression before point and insert its value in the
     buffer.  *Note Lisp Interaction::.

Lisp mode
     The mode for editing source files of programs that run in Lisps
     other than Emacs Lisp.  It defines ‘C-M-x’ to evaluate the current
     top-level expression in an external Lisp.  *Note External Lisp::.

Inferior Lisp mode
     The mode for an interactive session with an external Lisp which is
     being run as a subprocess (or “inferior process”) of Emacs.  *Note
     External Lisp::.

Scheme mode
     Like Lisp mode, but for Scheme programs.

Inferior Scheme mode
     Like Inferior Lisp mode, but for Scheme.


File: emacs.info,  Node: Lisp Libraries,  Next: Lisp Eval,  Prev: Executing Lisp,  Up: Building

28.8 Libraries of Lisp Code for Emacs
=====================================

Emacs Lisp code is stored in files whose names conventionally end in
‘.el’.  Such files are automatically visited in Emacs Lisp mode.

   Emacs Lisp code can be compiled into byte-code, which loads faster,
takes up less space, and executes faster.  By convention, compiled Emacs
Lisp code goes in a separate file whose name ends in ‘.elc’.  For
example, the compiled code for ‘foo.el’ goes in ‘foo.elc’.  *Note Byte
Compilation: (elisp)Byte Compilation.

   Emacs Lisp code can also be compiled into “native code”: machine code
not unlike the one produced by a C or Fortran compiler.  Native code
runs even faster than byte-code.  Natively-compiled Emacs Lisp code is
stored in files whose names end in ‘.eln’.  *Note Native Compilation:
(elisp)Native Compilation.

   To “load” an Emacs Lisp file, type ‘M-x load-file’.  This command
reads a file name using the minibuffer, and executes the contents of
that file as Emacs Lisp code.  It is not necessary to visit the file
first; this command reads the file directly from disk, not from an
existing Emacs buffer.

   If an Emacs Lisp file is installed in the Emacs Lisp “load path”
(defined below), you can load it by typing ‘M-x load-library’, instead
of using ‘M-x load-file’.  The ‘M-x load-library’ command prompts for a
“library name” rather than a file name; it searches through each
directory in the Emacs Lisp load path, trying to find a file matching
that library name.  If the library name is ‘FOO’, it tries looking for
files named ‘FOO.elc’, ‘FOO.el’, and ‘FOO’.  (If Emacs was built with
native compilation enabled, ‘load-library’ looks for a ‘.eln’ file that
corresponds to ‘FOO.el’ and loads it instead of ‘FOO.elc’.)  The default
behavior is to load the first file found.  This command prefers ‘.eln’
files over ‘.elc’ files, and prefers ‘.elc’ files over ‘.el’ files,
because compiled files load and run faster.  If it finds that ‘LIB.el’
is newer than ‘LIB.elc’, it issues a warning, in case someone made
changes to the ‘.el’ file and forgot to recompile it, but loads the
‘.elc’ file anyway.  (Due to this behavior, you can save unfinished
edits to Emacs Lisp source files, and not recompile until your changes
are ready for use.)  If you set the option ‘load-prefer-newer’ to a
non-‘nil’ value, however, then rather than the procedure described
above, Emacs loads whichever version of the file is newest.  If Emacs
was built with native compilation, and it cannot find the ‘.eln’ file
corresponding to ‘LIB.el’, it will load a ‘LIB.elc’ and start native
compilation of ‘LIB.el’ in the background, then load the ‘.eln’ file
when it finishes compilation.

   Emacs Lisp programs usually load Emacs Lisp files using the ‘load’
function.  This is similar to ‘load-library’, but is lower-level and
accepts additional arguments.  *Note (elisp)How Programs Do Loading::.

   The Emacs Lisp load path is specified by the variable ‘load-path’.
Its value should be a list of directories (strings).  These directories
are searched, in the specified order, by the ‘M-x load-library’ command,
the lower-level ‘load’ function, and other Emacs functions that find
Emacs Lisp libraries.  An entry in ‘load-path’ can also have the special
value ‘nil’, which stands for the current default directory, but it is
almost always a bad idea to use this, because its meaning will depend on
the buffer that is current when ‘load-path’ is used by Emacs.  (If you
find yourself wishing that ‘nil’ were in the list, most likely what you
really want is to use ‘M-x load-file’.)

   The default value of ‘load-path’ is a list of directories where the
Lisp code for Emacs itself is stored.  If you have libraries of your own
in another directory, you can add that directory to the load path.
Unlike most other variables described in this manual, ‘load-path’ cannot
be changed via the Customize interface (*note Easy Customization::), but
you can add a directory to it by putting a line like this in your init
file (*note Init File::):

     (add-to-list 'load-path "/path/to/my/lisp/library")

   It is customary to put locally installed libraries in the ‘site-lisp’
directory that is already in the default value of ‘load-path’, or in
some subdirectory of ‘site-lisp’.  This way, you don’t need to modify
the default value of ‘load-path’.

   Similarly to ‘load-path’, the list of directories where Emacs looks
for ‘*.eln’ files with natively-compiled Lisp code is specified by the
variable ‘native-comp-eln-load-path’.

   Some commands are “autoloaded”; when you run them, Emacs
automatically loads the associated library first.  For instance, the
‘M-x compile’ command (*note Compilation::) is autoloaded; if you call
it, Emacs automatically loads the ‘compile’ library first.  In contrast,
the command ‘M-x recompile’ is not autoloaded, so it is unavailable
until you load the ‘compile’ library.

   Automatic loading can also occur when you look up the documentation
of an autoloaded command (*note Name Help::), if the documentation
refers to other functions and variables in its library (loading the
library lets Emacs properly set up the hyperlinks in the ‘*Help*’
buffer).  To disable this feature, change the variable
‘help-enable-autoload’ to ‘nil’.

   Automatic loading also occurs when completing names for
‘describe-variable’ and ‘describe-function’, based on the prefix being
completed.  To disable this feature, change the variable
‘help-enable-completion-autoload’ to ‘nil’.

   Once you put your library in a directory where Emacs can find and
load it, you may wish to make it available at startup.  This is useful
when the library defines features that should be available automatically
on demand, and manually loading the library is thus inconvenient.  In
these cases, make sure the library will be loaded by adding suitable
forms to your init file: either ‘load’ or ‘require’ (if you always need
to load the library at startup), or ‘autoload’ if you need Emacs to load
the library when some command or function is invoked.  For example:

      ;; Loads my-shining-package.elc unconditionally.
      (require 'my-shining-package)
      ;; Will load my-shining-package.elc when my-func is invoked.
      (autoload 'my-func "my-shining-package")

   Note that installing a package using ‘package-install’ (*note Package
Installation::) takes care of placing the package’s Lisp files in a
directory where Emacs will find it, and also writes the necessary
initialization code into your init files, making the above manual
customizations unnecessary.


File: emacs.info,  Node: Lisp Eval,  Next: Lisp Interaction,  Prev: Lisp Libraries,  Up: Building

28.9 Evaluating Emacs Lisp Expressions
======================================

Emacs Lisp mode is the major mode for editing Emacs Lisp.  Its mode
command is ‘M-x emacs-lisp-mode’.

   Emacs provides several commands for evaluating Emacs Lisp
expressions.  You can use these commands in Emacs Lisp mode, to test
your Emacs Lisp code as it is being written.  For example, after
re-writing a function, you can evaluate the function definition to make
it take effect for subsequent function calls.  These commands are also
available globally, and can be used outside Emacs Lisp mode.

‘M-:’
     Read a single Emacs Lisp expression in the minibuffer, evaluate it,
     and print the value in the echo area (‘eval-expression’).
‘C-x C-e’
     Evaluate the Emacs Lisp expression before point, and print the
     value in the echo area (‘eval-last-sexp’).
‘C-M-x’ (in Emacs Lisp mode)
‘M-x eval-defun’
     Evaluate the defun containing or after point, and print the value
     in the echo area (‘eval-defun’).
‘M-x eval-region’
     Evaluate all the Emacs Lisp expressions in the region.
‘M-x eval-buffer’
     Evaluate all the Emacs Lisp expressions in the buffer.

   ‘M-:’ (‘eval-expression’) reads an expression using the minibuffer,
and evaluates it.  (Before evaluating the expression, the current buffer
switches back to the buffer that was current when you typed ‘M-:’, not
the minibuffer into which you typed the expression.)

   The command ‘C-x C-e’ (‘eval-last-sexp’) evaluates the Emacs Lisp
expression preceding point in the buffer, and displays the value in the
echo area.  When the result of an evaluation is an integer, it is
displayed together with the value in other formats (octal, hexadecimal,
and character if ‘eval-expression-print-maximum-character’, described
below, allows it).

   If ‘M-:’ or ‘C-x C-e’ is given a prefix argument, it inserts the
value into the current buffer at point, rather than displaying it in the
echo area.  If the prefix argument is zero, any integer output is
inserted together with its value in other formats (octal, hexadecimal,
and character).  Such a prefix argument also prevents abbreviation of
the output according to the variables ‘eval-expression-print-level’ and
‘eval-expression-print-length’ (see below).  Similarly, a prefix
argument of ‘-1’ overrides the effect of ‘eval-expression-print-length’.

   ‘C-x C-e’ (‘eval-last-sexp’) treats ‘defvar’ expressions specially.
Normally, evaluating a ‘defvar’ expression does nothing if the variable
it defines already has a value.  But this command unconditionally resets
the variable to the initial value specified by the ‘defvar’; this is
convenient for debugging Emacs Lisp programs.  ‘defcustom’ and ‘defface’
expressions are treated similarly.  Note the other commands documented
in this section, except ‘eval-defun’, do not have this special feature.

   The ‘eval-defun’ command is bound to ‘C-M-x’ in Emacs Lisp mode.  It
evaluates the top-level Lisp expression containing or following point,
and prints the value in the echo area.  In this context, a top-level
expression is referred to as a “defun”, but it need not be an actual
‘defun’ (function definition).

   This command handles ‘defvar’/‘defcustom’/‘defface’ forms the same
way that ‘eval-last-sexp’ does.

   With a prefix argument, ‘C-M-x’ instruments the function definition
for Edebug, the Emacs Lisp Debugger.  *Note Instrumenting for Edebug:
(elisp)Instrumenting.

   The command ‘M-x eval-region’ parses the text of the region as one or
more Lisp expressions, evaluating them one by one.  ‘M-x eval-buffer’ is
similar but evaluates the entire buffer.

   The options ‘eval-expression-print-level’ and
‘eval-expression-print-length’ control the maximum depth and length of
lists to print in the result of the evaluation commands before
abbreviating them.  Supplying a zero prefix argument to
‘eval-expression’ or ‘eval-last-sexp’ causes lists to be printed in
full.  ‘eval-expression-debug-on-error’ controls whether evaluation
errors invoke the debugger when these commands are used; its default is
‘t’.  ‘eval-expression-print-maximum-character’ prevents integers which
are larger than it from being displayed as characters.


File: emacs.info,  Node: Lisp Interaction,  Next: External Lisp,  Prev: Lisp Eval,  Up: Building

28.10 Lisp Interaction Buffers
==============================

When Emacs starts up, it contains a buffer named ‘*scratch*’, which is
provided for evaluating Emacs Lisp expressions interactively.  Its major
mode is Lisp Interaction mode.  You can also enable Lisp Interaction
mode by typing ‘M-x lisp-interaction-mode’.

   If you kill the ‘*scratch*’ buffer, you can recreate it with the ‘M-x
scratch-buffer’ command.

   In the ‘*scratch*’ buffer, and other Lisp Interaction mode buffers,
‘C-j’ (‘eval-print-last-sexp’) evaluates the Lisp expression before
point, and inserts the value at point.  Thus, as you type expressions
into the buffer followed by ‘C-j’ after each expression, the buffer
records a transcript of the evaluated expressions and their values.  All
other commands in Lisp Interaction mode are the same as in Emacs Lisp
mode.

   At startup, the ‘*scratch*’ buffer contains a short message, in the
form of a Lisp comment, that explains what it is for.  This message is
controlled by the variable ‘initial-scratch-message’, which should be
either a documentation string, or ‘nil’ (which means to suppress the
message).

   An alternative way of evaluating Emacs Lisp expressions interactively
is to use Inferior Emacs Lisp mode, which provides an interface rather
like Shell mode (*note Shell Mode::) for evaluating Emacs Lisp
expressions.  Type ‘M-x ielm’ to create an ‘*ielm*’ buffer which uses
this mode.  For more information, see that command’s documentation.


File: emacs.info,  Node: External Lisp,  Prev: Lisp Interaction,  Up: Building

28.11 Running an External Lisp
==============================

Lisp mode is the major mode for editing programs written in
general-purpose Lisp dialects, such as Common Lisp.  Its mode command is
‘M-x lisp-mode’.  Emacs uses Lisp mode automatically for files whose
names end in ‘.l’, ‘.lsp’, or ‘.lisp’.

   You can run an external Lisp session as a subprocess or “inferior
process” of Emacs, and pass expressions to it to be evaluated.  To begin
an external Lisp session, type ‘M-x run-lisp’.  This runs the program
named ‘lisp’, and sets it up so that both input and output go through an
Emacs buffer named ‘*inferior-lisp*’.  To change the name of the Lisp
program run by ‘M-x run-lisp’, change the variable
‘inferior-lisp-program’.

   The major mode for the ‘*lisp*’ buffer is Inferior Lisp mode, which
combines the characteristics of Lisp mode and Shell mode (*note Shell
Mode::).  To send input to the Lisp session, go to the end of the
‘*lisp*’ buffer and type the input, followed by <RET>.  Terminal output
from the Lisp session is automatically inserted in the buffer.

   When you edit a Lisp program in Lisp mode, you can type ‘C-M-x’
(‘lisp-eval-defun’) to send an expression from the Lisp mode buffer to a
Lisp session that you had started with ‘M-x run-lisp’.  The expression
sent is the top-level Lisp expression at or following point.  The
resulting value goes as usual into the ‘*inferior-lisp*’ buffer.  Note
that the effect of ‘C-M-x’ in Lisp mode is thus very similar to its
effect in Emacs Lisp mode (*note Lisp Eval::), except that the
expression is sent to a different Lisp environment instead of being
evaluated in Emacs.

   The facilities for editing Scheme code, and for sending expressions
to a Scheme subprocess, are very similar.  Scheme source files are
edited in Scheme mode, which can be explicitly enabled with ‘M-x
scheme-mode’.  You can initiate a Scheme session by typing ‘M-x
run-scheme’ (the buffer for interacting with Scheme is named
‘*scheme*’), and send expressions to it by typing ‘C-M-x’.


File: emacs.info,  Node: Maintaining,  Next: Abbrevs,  Prev: Building,  Up: Top

# /. 29 Maintaining Large Programs
*********************************

This chapter describes Emacs features for maintaining medium- to
large-size programs and packages.  These features include:

   − Unified interface to Support for Version Control Systems (VCS) that
     record the history of changes to source files.

   − Commands for handling programming projects.

   − A specialized mode for maintaining ‘ChangeLog’ files that provide a
     chronological log of program changes.

   − Xref, a set of commands for displaying definitions of symbols
     (a.k.a. “identifiers”) and their references.

   − EDE, the Emacs’s own IDE.

   − A mode for merging changes to program sources made on separate
     branches of development.

   − A minor-mode for highlighting bug references and visiting the
     referenced bug reports in their issue tracker.

   If you are maintaining a large Lisp program, then in addition to the
features described here, you may find the Emacs Lisp Regression Testing
(ERT) library useful (*note ERT: (ert)Top.).

* Menu:

* Version Control::     Using version control systems.
* Projects::            Commands for handling source files in a project.
* Change Log::          Maintaining a change history for your program.
* Xref::                Find definitions and references of any function,
                          method, struct, macro, ... in your program.
* EDE::                 An integrated development environment for Emacs.
* Emerge::              A convenient way of merging two versions of a program.
* Bug Reference::       Highlighting references to bug reports and browsing
                          them in their issue trackers.


File: emacs.info,  Node: Version Control,  Next: Projects,  Up: Maintaining

29.1 Version Control
====================

A “version control system” is a program that can record multiple
versions of a source file, storing information such as the creation time
of each version, who made it, and a description of what was changed.

   The Emacs version control interface is called “VC”.  VC commands work
with several different version control systems; currently, it supports
Bazaar, CVS, Git, Mercurial, Monotone, RCS, SRC, SCCS/CSSC, and
Subversion.  Of these, the GNU project distributes CVS, RCS, and Bazaar.

   VC is enabled automatically whenever you visit a file governed by a
version control system.  To disable VC entirely, set the customizable
variable ‘vc-handled-backends’ to ‘nil’ (*note Customizing VC::).

   To update the VC state information for the file visited in the
current buffer, use the command ‘vc-refresh-state’.  This command is
useful when you perform version control commands outside Emacs (e.g.,
from the shell prompt), or if you put the buffer’s file under a
different version control system, or remove it from version control
entirely.

   VC is also enabled automatically in Dired buffers (*note Dired::)
showing directories whose files are controlled by a VCS.  All VC
commands described in this section can be invoked from any Dired buffer
showing a directory with VC-controlled files; any files that are marked
in a Dired buffer (*note Marks vs Flags::) are considered to belong to
the current fileset, and VC commands operate on the files in this
fileset.  This allows you to construct VC filesets including any files
you want, regardless of their VC state.  (If no files are marked when a
VC command is invoked from a Dired buffer, the file shown on the current
line in the buffer is considered the only file in the fileset.)

* Menu:

* Introduction to VC::  How version control works in general.
* VC Mode Line::        How the mode line shows version control status.
* Basic VC Editing::    How to edit a file under version control.
* Log Buffer::          Features available in log entry buffers.
* Registering::         Putting a file under version control.
* Old Revisions::       Examining and comparing old versions.
* VC Change Log::       Viewing the VC Change Log.
* VC Undo::             Canceling changes before or after committing.
* VC Ignore::           Ignore files under version control system.
* VC Directory Mode::   Listing files managed by version control.
* Branches::            Multiple lines of development.
* Miscellaneous VC::    Various other commands and features of VC.
* Customizing VC::      Variables that change VC’s behavior.


File: emacs.info,  Node: Introduction to VC,  Next: VC Mode Line,  Up: Version Control

29.1.1 Introduction to Version Control
--------------------------------------

VC allows you to use a version control system from within Emacs,
integrating the version control operations smoothly with editing.  It
provides a uniform interface for common operations in many version
control operations.

   Some uncommon or intricate version control operations, such as
altering repository settings, are not supported in VC.  You should
perform such tasks outside VC, e.g., via the command line.

   This section provides a general overview of version control, and
describes the version control systems that VC supports.  You can skip
this section if you are already familiar with the version control system
you want to use.

* Menu:

* Why Version Control?::    Understanding the problems it addresses.
* Version Control Systems:: Supported version control back-end systems.
* VCS Concepts::            Words and concepts related to version control.
* VCS Merging::             How file conflicts are handled.
* VCS Changesets::          How changes are grouped.
* VCS Repositories::        Where version control repositories are stored.
* Types of Log File::       The VCS log in contrast to the ChangeLog.


File: emacs.info,  Node: Why Version Control?,  Next: Version Control Systems,  Up: Introduction to VC

29.1.1.1 Understanding the Problems it Addresses
................................................

Version control systems provide you with three important capabilities:

   • “Reversibility”: the ability to back up to a previous state if you
     discover that some modification you did was a mistake or a bad
     idea.

   • “Concurrency”: the ability to have many people modifying the same
     collection of files knowing that conflicting modifications can be
     detected and resolved.

   • “History”: the ability to attach historical data to your data, such
     as explanatory comments about the intention behind each change.
     Even for a programmer working solo, change histories are an
     important aid to memory; for a multi-person project, they are a
     vitally important form of communication among developers.


File: emacs.info,  Node: Version Control Systems,  Next: VCS Concepts,  Prev: Why Version Control?,  Up: Introduction to VC

29.1.1.2 Supported Version Control Systems
..........................................

VC currently works with many different version control systems, which it
refers to as “back ends”:

   • Git is a decentralized version control system originally invented
     by Linus Torvalds to support development of Linux (his kernel).  VC
     supports many common Git operations, but others, such as repository
     syncing, must be done from the command line.

   • CVS is the free version control system that was, until circa 2008,
     used by the majority of free software projects.  Since then, it has
     been superseded by newer systems.  CVS allows concurrent multi-user
     development either locally or over the network.  Unlike newer
     systems, it lacks support for atomic commits and file
     moving/renaming.  VC supports all basic editing operations under
     CVS.

   • Subversion (svn) is a free version control system designed to be
     similar to CVS but without its problems (e.g., it supports atomic
     commits of filesets, and versioning of directories, symbolic links,
     meta-data, renames, copies, and deletes).

   • SCCS was the first version control system ever built, and was long
     ago superseded by more advanced ones.  VC compensates for certain
     features missing in SCCS (e.g., tag names for releases) by
     implementing them itself.  Other VC features, such as multiple
     branches, are simply unavailable.  Since SCCS is non-free, we
     recommend avoiding it.

   • CSSC is a free replacement for SCCS.  You should use CSSC only if,
     for some reason, you cannot use a more recent and better-designed
     version control system.

   • RCS is the free version control system around which VC was
     initially built.  It is relatively primitive: it cannot be used
     over the network, and works at the level of individual files.
     Almost everything you can do with RCS can be done through VC.

   • Mercurial (hg) is a decentralized version control system broadly
     resembling Git.  VC supports most Mercurial commands, with the
     exception of repository sync operations.

   • Bazaar (bzr) is a decentralized version control system that
     supports both repository-based and decentralized versioning.  VC
     supports most basic editing operations under Bazaar.

   • SRC (src) is RCS, reloaded—a specialized version-control system
     designed for single-file projects worked on by only one person.  It
     allows multiple files with independent version-control histories to
     exist in one directory, and is thus particularly well suited for
     maintaining small documents, scripts, and dotfiles.  While it uses
     RCS for revision storage, it presents a modern user interface
     featuring lockless operation and integer sequential version
     numbers.  VC supports almost all SRC operations.


File: emacs.info,  Node: VCS Concepts,  Next: VCS Merging,  Prev: Version Control Systems,  Up: Introduction to VC

29.1.1.3 Concepts of Version Control
....................................

When a file is under version control, we say that it is “registered” in
the version control system.  The system has a “repository” which stores
both the file’s present state and its change history—enough to
reconstruct the current version or any earlier version.  The repository
also contains other information, such as “log entries” that describe the
changes made to each file.

   The copy of a version-controlled file that you actually edit is
called the “work file”.  You can change each work file as you would an
ordinary file.  After you are done with a set of changes, you may
“commit” (or “check in”) the changes; this records the changes in the
repository, along with a descriptive log entry.

   A directory tree of work files is called a “working tree”.

   Each commit creates a new “revision” in the repository.  The version
control system keeps track of all past revisions and the changes that
were made in each revision.  Each revision is named by a “revision ID”,
whose format depends on the version control system; in the simplest
case, it is just an integer.

   To go beyond these basic concepts, you will need to understand three
aspects in which version control systems differ.  As explained in the
next three sections, they can be lock-based or merge-based; file-based
or changeset-based; and centralized or decentralized.  VC handles all
these modes of operation, but it cannot hide the differences.


File: emacs.info,  Node: VCS Merging,  Next: VCS Changesets,  Prev: VCS Concepts,  Up: Introduction to VC

29.1.1.4 Merge-based vs Lock-based Version Control
..................................................

A version control system typically has some mechanism to coordinate
between users who want to change the same file.  There are two ways to
do this: merging and locking.

   In a version control system that uses merging, each user may modify a
work file at any time.  The system lets you “merge” your work file,
which may contain changes that have not been committed, with the latest
changes that others have committed.

   Older version control systems use a “locking” scheme instead.  Here,
work files are normally read-only.  To edit a file, you ask the version
control system to make it writable for you by “locking” it; only one
user can lock a given file at any given time.  This procedure is
analogous to, but different from, the locking that Emacs uses to detect
simultaneous editing of ordinary files (*note Interlocking::).  When you
commit your changes, that unlocks the file, and the work file becomes
read-only again.  Other users may then lock the file to make their own
changes.

   Both locking and merging systems can have problems when multiple
users try to modify the same file at the same time.  Locking systems
have “lock conflicts”; a user may try to check a file out and be unable
to because it is locked.  In merging systems, “merge conflicts” happen
when you commit a change to a file that conflicts with a change
committed by someone else after your checkout.  Both kinds of conflict
have to be resolved by human judgment and communication.  Experience has
shown that merging is superior to locking, both in convenience to
developers and in minimizing the number and severity of conflicts that
actually occur.

   SCCS always uses locking.  RCS is lock-based by default but can be
told to operate in a merging style.  CVS and Subversion are merge-based
by default but can be told to operate in a locking mode.  Decentralized
version control systems, such as Git and Mercurial, are exclusively
merging-based.

   VC mode supports both locking and merging version control.  The terms
“commit” and “update” are used in newer version control systems; older
lock-based systems use the terms “check in” and “check out”.  VC hides
the differences between them as much as possible.


File: emacs.info,  Node: VCS Changesets,  Next: VCS Repositories,  Prev: VCS Merging,  Up: Introduction to VC

29.1.1.5 Changeset-based vs File-based Version Control
......................................................

On SCCS, RCS, CVS, and other early version control systems (and also in
SRC), version control operations are “file-based”: each file has its own
comment and revision history separate from that of all other files.
Newer systems, beginning with Subversion, are “changeset-based”: a
commit may include changes to several files, and the entire set of
changes is handled as a unit.  Any comment associated with the change
does not belong to a single file, but to the changeset itself.

   Changeset-based version control is more flexible and powerful than
file-based version control; usually, when a change to multiple files has
to be reversed, it’s good to be able to easily identify and remove all
of it.


File: emacs.info,  Node: VCS Repositories,  Next: Types of Log File,  Prev: VCS Changesets,  Up: Introduction to VC

29.1.1.6 Decentralized vs Centralized Repositories
..................................................

Early version control systems were designed around a “centralized” model
in which each project has only one repository used by all developers.
SCCS, RCS, CVS, Subversion, and SRC share this kind of model.  One of
its drawbacks is that the repository is a choke point for reliability
and efficiency.

   GNU Arch pioneered the concept of “distributed” or “decentralized”
version control, later implemented in Git, Mercurial, and Bazaar.  A
project may have several different repositories, and these systems
support a sort of super-merge between repositories that tries to
reconcile their change histories.  In effect, there is one repository
for each developer, and repository merges take the place of commit
operations.

   VC helps you manage the traffic between your personal workfiles and a
repository.  Whether the repository is a single master, or one of a
network of peer repositories, is not something VC has to care about.


File: emacs.info,  Node: Types of Log File,  Prev: VCS Repositories,  Up: Introduction to VC

29.1.1.7 Types of Log File
..........................

Projects that use a version control system can have two types of log for
changes.  One is the log maintained by the version control system: each
time you commit a change, you fill out a “log entry” for the change
(*note Log Buffer::).  This is called the “version control log”.

   The other kind of log is the file ‘ChangeLog’ (*note Change Log::).
It provides a chronological record of all changes to a large portion of
a program—typically one directory and its subdirectories.  A small
program would use one ‘ChangeLog’ file; a large program may have a
‘ChangeLog’ file in each major directory.  *Note Change Log::.
Programmers have used change logs since long before version control
systems.

   Changeset-based version systems typically maintain a changeset-based
modification log for the entire system, which makes change log files
somewhat redundant.  One advantage that they retain is that it is
sometimes useful to be able to view the transaction history of a single
directory separately from those of other directories.  Another advantage
is that commit logs can’t be fixed in many version control systems.

   A project maintained with version control can use just the version
control log, or it can use both kinds of logs.  It can handle some files
one way and some files the other way.  Each project has its policy,
which you should follow.

   When the policy is to use both, you typically want to write an entry
for each change just once, then put it into both logs.  You can write
the entry in ‘ChangeLog’, then copy it to the log buffer with ‘C-c C-a’
when committing the change (*note Log Buffer::).  Or you can write the
entry in the log buffer while committing the change (with the help of
‘C-c C-w’), and later use the ‘C-x v a’ command to copy it to
‘ChangeLog’ (*note Change Logs and VC::).


File: emacs.info,  Node: VC Mode Line,  Next: Basic VC Editing,  Prev: Introduction to VC,  Up: Version Control

29.1.2 Version Control and the Mode Line
----------------------------------------

When you visit a file that is under version control, Emacs indicates
this on the mode line.  For example, ‘Bzr-1223’ says that Bazaar is used
for that file, and the current revision ID is 1223.

   The character between the back-end name and the revision ID indicates
the “version control status” of the work file.  In a merge-based version
control system, a ‘-’ character indicates that the work file is
unmodified, and ‘:’ indicates that it has been modified.  ‘!’ indicates
that the file contains conflicts as result of a recent merge operation
(*note Merging::), or that the file was removed from the version
control.  Finally, ‘?’ means that the file is under version control, but
is missing from the working tree.

   In a lock-based system, ‘-’ indicates an unlocked file, and ‘:’ a
locked file; if the file is locked by another user (for instance,
‘jim’), that is displayed as ‘RCS:jim:1.3’.  ‘@’ means that the file was
locally added, but not yet committed to the master repository.

   On a graphical display, you can move the mouse over this mode line
indicator to pop up a tool-tip, which displays a more verbose
description of the version control status.  Pressing ‘mouse-1’ over the
indicator pops up a menu of VC commands, identical to ‘Tools / Version
Control’ on the menu bar.

   When Auto Revert mode (*note Reverting::) reverts a buffer that is
under version control, it updates the version control information in the
mode line.  However, Auto Revert mode may not properly update this
information if the version control status changes without changes to the
work file, from outside the current Emacs session.  If you set
‘auto-revert-check-vc-info’ to ‘t’, Auto Revert mode updates the version
control status information every ‘auto-revert-interval’ seconds, even if
the work file itself is unchanged.  The resulting CPU usage depends on
the version control system, but is usually not excessive.


File: emacs.info,  Node: Basic VC Editing,  Next: Log Buffer,  Prev: VC Mode Line,  Up: Version Control

29.1.3 Basic Editing under Version Control
------------------------------------------

Most VC commands operate on “VC filesets”.  A VC fileset is a collection
of one or more files that a VC operation acts on.  When you type VC
commands in a buffer visiting a version-controlled file, the VC fileset
is simply that one file.  When you type them in a VC Directory buffer,
and some files in it are marked, the VC fileset consists of the marked
files (*note VC Directory Mode::).  Likewise, when you invoke a VC
command from a Dired buffer, the VC fileset consists of the marked files
(*note Marks vs Flags::), defaulting to the file shown on the current
line if no files are marked.

   On modern changeset-based version control systems (*note VCS
Changesets::), VC commands handle multi-file VC filesets as a group.
For example, committing a multi-file VC fileset generates a single
revision, containing the changes to all those files.  On older
file-based version control systems like CVS, each file in a multi-file
VC fileset is handled individually; for example, a commit generates one
revision for each changed file.

‘C-x v v’
     Perform the next appropriate version control operation on the
     current VC fileset.

   The principal VC command is a multi-purpose command, ‘C-x v v’
(‘vc-next-action’), which performs the most appropriate action on the
current VC fileset: either registering it with a version control system,
or committing it, or unlocking it, or merging changes into it.  The
precise actions are described in detail in the following subsections.
You can use ‘C-x v v’ either in a file-visiting buffer, in a Dired
buffer, or in a VC Directory buffer; in the latter two cases the command
operates on the fileset consisting of the marked files.

   Note that VC filesets are distinct from the named filesets used for
viewing and visiting files in functional groups (*note Filesets::).
Unlike named filesets, VC filesets are not named and don’t persist
across sessions.

* Menu:

* VC With A Merging VCS::  Without locking: default mode for CVS.
* VC With A Locking VCS::  RCS in its default mode, SCCS, and optionally CVS.
* Advanced C-x v v::       Advanced features available with a prefix argument.


File: emacs.info,  Node: VC With A Merging VCS,  Next: VC With A Locking VCS,  Up: Basic VC Editing

29.1.3.1 Basic Version Control with Merging
...........................................

On a merging-based version control system (i.e., most modern ones; *note
VCS Merging::), ‘C-x v v’ does the following:

   • If there is more than one file in the VC fileset and the files have
     inconsistent version control statuses, signal an error.  (Note,
     however, that a fileset is allowed to include both newly-added
     files and modified files; *note Registering::.)

   • If none of the files in the VC fileset are registered with a
     version control system, register the VC fileset, i.e., place it
     under version control.  *Note Registering::.  If Emacs cannot find
     a system to register under, it prompts for a repository type,
     creates a new repository, and registers the VC fileset with it.

   • If every work file in the VC fileset is unchanged, do nothing.

   • If every work file in the VC fileset has been modified, commit the
     changes.  To do this, Emacs pops up a ‘*vc-log*’ buffer; type the
     desired log entry for the new revision, followed by ‘C-c C-c’ to
     commit.  *Note Log Buffer::.

     If committing to a shared repository, the commit may fail if the
     repository has been changed since your last update.  In that case,
     you must perform an update before trying again.  On a decentralized
     version control system, use ‘C-x v +’ (*note Pulling / Pushing::)
     or ‘C-x v m’ (*note Merging::).  On a centralized version control
     system, type ‘C-x v v’ again to merge in the repository changes.

   • Finally, if you are using a centralized version control system,
     check if each work file in the VC fileset is up-to-date.  If any
     file has been changed in the repository, offer to update it.

   These rules also apply when you use RCS in its non-locking mode,
except that changes are not automatically merged from the repository.
Nothing informs you if another user has committed changes in the same
file since you began editing it; when you commit your revision, that
other user’s changes are removed (however, they remain in the repository
and are thus not irrevocably lost).  Therefore, you must verify that the
current revision is unchanged before committing your changes.  In
addition, locking is possible with RCS even in this mode: ‘C-x v v’ with
an unmodified file locks the file, just as it does with RCS in its
normal locking mode (*note VC With A Locking VCS::).


File: emacs.info,  Node: VC With A Locking VCS,  Next: Advanced C-x v v,  Prev: VC With A Merging VCS,  Up: Basic VC Editing

29.1.3.2 Basic Version Control with Locking
...........................................

On a locking-based version control system (such as SCCS, and RCS in its
default mode), ‘C-x v v’ does the following:

   • If there is more than one file in the VC fileset and the files have
     inconsistent version control statuses, signal an error.

   • If each file in the VC fileset is not registered with a version
     control system, register the VC fileset.  *Note Registering::.  If
     Emacs cannot find a system to register under, it prompts for a
     repository type, creates a new repository, and registers the VC
     fileset with it.

   • If each file is registered and unlocked, lock it and make it
     writable, so that you can begin to edit it.

   • If each file is locked by you and contains changes, commit the
     changes.  To do this, Emacs pops up a ‘*vc-log*’ buffer; type the
     desired log entry for the new revision, followed by ‘C-c C-c’ to
     commit (*note Log Buffer::).

   • If each file is locked by you, but you have not changed it, release
     the lock and make the file read-only again.

   • If each file is locked by another user, ask whether you want to
     steal the lock.  If you say yes, the file becomes locked by you,
     and a warning message is sent to the user who had formerly locked
     the file.

   These rules also apply when you use CVS in locking mode, except that
CVS does not support stealing locks.


File: emacs.info,  Node: Advanced C-x v v,  Prev: VC With A Locking VCS,  Up: Basic VC Editing

29.1.3.3 Advanced Control in ‘C-x v v’
......................................

When you give a prefix argument to ‘vc-next-action’ (‘C-u C-x v v’), it
still performs the next logical version control operation, but accepts
additional arguments to specify precisely how to do the operation.

   • You can specify the name of a version control system.  This is
     useful if the fileset can be managed by more than one version
     control system, and Emacs fails to detect the correct one.

   • Otherwise, if using CVS, RCS or SRC, you can specify a revision ID.

     If the fileset is modified (or locked), this makes Emacs commit
     with that revision ID.  You can create a new branch by supplying an
     appropriate revision ID (*note Branches::).

     If the fileset is unmodified (and unlocked), this checks the
     specified revision into the working tree.  You can also specify a
     revision on another branch by giving its revision or branch ID
     (*note Switching Branches::).  An empty argument (i.e., ‘C-u C-x v
     v <RET>’) checks out the latest (head) revision on the current
     branch.

     This is silently ignored on a decentralized version control system.
     Those systems do not let you specify your own revision IDs, nor do
     they use the concept of checking out individual files.


File: emacs.info,  Node: Log Buffer,  Next: Registering,  Prev: Basic VC Editing,  Up: Version Control

29.1.4 Features of the Log Entry Buffer
---------------------------------------

When you tell VC to commit a change, it pops up a buffer named
‘*vc-log*’.  In this buffer, you should write a “log entry” describing
the changes you have made (*note Why Version Control?::).  After you are
done, type ‘C-c C-c’ (‘log-edit-done’) to exit the buffer and commit the
change, together with your log entry.

   The major mode for the ‘*vc-log*’ buffer is Log Edit mode, a variant
of Text mode (*note Text Mode::).  On entering Log Edit mode, Emacs runs
the hooks ‘text-mode-hook’ and ‘vc-log-mode-hook’ (*note Hooks::).

   In the ‘*vc-log*’ buffer, you can write one or more “header lines”,
specifying additional information to be supplied to the version control
system.  Each header line must occupy a single line at the top of the
buffer; the first line that is not a header line is treated as the start
of the log entry.  For example, the following header line states that
the present change was not written by you, but by another developer:

     Author: J. R. Hacker <jrh@example.com>

Apart from the ‘Author’ header, Emacs recognizes the headers ‘Summary’
(a one-line summary of the changeset), ‘Date’ (a manually-specified
commit time), and ‘Fixes’ (a reference to a bug fixed by the change).
Not all version control systems recognize all headers.  If you specify a
header for a system that does not support it, the header is treated as
part of the log entry.

   While in the ‘*vc-log*’ buffer, the current VC fileset is considered
to be the fileset that will be committed if you type ‘C-c C-c’.  To view
a list of the files in the VC fileset, type ‘C-c C-f’
(‘log-edit-show-files’).  To view a diff of changes between the VC
fileset and the version from which you started editing (*note Old
Revisions::), type ‘C-c C-d’ (‘log-edit-show-diff’).

   To help generate ChangeLog entries, type ‘C-c C-w’
(‘log-edit-generate-changelog-from-diff’), to generate skeleton
ChangeLog entries, listing all changed file and function names based on
the diff of the VC fileset.  Consecutive entries left empty will be
combined by ‘M-q’ (‘fill-paragraph’).  By default the skeleton will just
include the file name, without any leading directories.  If you wish to
prepend the leading directories up to the VC root, customize
‘diff-add-log-use-relative-names’.

   If the VC fileset includes one or more ‘ChangeLog’ files (*note
Change Log::), type ‘C-c C-a’ (‘log-edit-insert-changelog’) to pull the
relevant entries into the ‘*vc-log*’ buffer.  If the topmost item in
each ‘ChangeLog’ was made under your user name on the current date, this
command searches that item for entries matching the file(s) to be
committed, and inserts them.  If you are using CVS or RCS, see *note
Change Logs and VC::, for the opposite way of working—generating
ChangeLog entries from the Log Edit buffer.

   To abort a commit, just _don’t_ type ‘C-c C-c’ in that buffer.  You
can switch buffers and do other editing.  As long as you don’t try to
make another commit, the entry you were editing remains in the
‘*vc-log*’ buffer, and you can go back to that buffer at any time to
complete the commit.

   You can also browse the history of previous log entries to duplicate
a commit comment.  This can be useful when you want to make several
commits with similar comments.  The commands ‘M-n’, ‘M-p’, ‘M-s’ and
‘M-r’ for doing this work just like the minibuffer history commands
(*note Minibuffer History::), except that they are used outside the
minibuffer.


File: emacs.info,  Node: Registering,  Next: Old Revisions,  Prev: Log Buffer,  Up: Version Control

29.1.5 Registering a File for Version Control
---------------------------------------------

‘C-x v i’
     Register the visited file for version control.

   The command ‘C-x v i’ (‘vc-register’) “registers” each file in the
current VC fileset, placing it under version control.  This is
essentially equivalent to the action of ‘C-x v v’ on an unregistered VC
fileset (*note Basic VC Editing::), except that if the VC fileset is
already registered, ‘C-x v i’ signals an error whereas ‘C-x v v’
performs some other action.

   To register a file, Emacs must choose a version control system.  For
a multi-file VC fileset, the VC Directory buffer specifies the system to
use (*note VC Directory Mode::).  For a single-file VC fileset, if the
file’s directory already contains files registered in a version control
system, or if the directory is part of a directory tree controlled by a
version control system, Emacs chooses that system.  In the event that
more than one version control system is applicable, Emacs uses the one
that appears first in the variable ‘vc-handled-backends’ (*note
Customizing VC::).  If Emacs cannot find a version control system to
register the file under, it prompts for a repository type, creates a new
repository, and registers the file into that repository.

   On most version control systems, registering a file with ‘C-x v i’ or
‘C-x v v’ adds it to the working tree but not to the repository.  Such
files are labeled as ‘added’ in the VC Directory buffer, and show a
revision ID of ‘@@’ in the mode line.  To make the registration take
effect in the repository, you must perform a commit (*note Basic VC
Editing::).  Note that a single commit can include both file additions
and edits to existing files.

   On a locking-based version control system (*note VCS Merging::),
registering a file leaves it unlocked and read-only.  Type ‘C-x v v’ to
start editing it.


File: emacs.info,  Node: Old Revisions,  Next: VC Change Log,  Prev: Registering,  Up: Version Control

29.1.6 Examining And Comparing Old Revisions
--------------------------------------------

‘C-x v =’
     Compare the work files in the current VC fileset with the versions
     you started from (‘vc-diff’).  With a prefix argument, prompt for
     two revisions of the current VC fileset and compare them.  You can
     also call this command from a Dired buffer (*note Dired::).

‘M-x vc-ediff’
     Like ‘C-x v =’, but using Ediff.  *Note Ediff: (ediff)Top.

‘C-x v D’
     Compare the entire working tree to the revision you started from
     (‘vc-root-diff’).  With a prefix argument, prompt for two revisions
     and compare their trees.

‘C-x v ~’
     Prompt for a revision of the current file, and visit it in a
     separate buffer (‘vc-revision-other-window’).

‘C-x v g’
     Display an annotated version of the current file: for each line,
     show the latest revision in which it was modified (‘vc-annotate’).

   ‘C-x v =’ (‘vc-diff’) displays a “diff” which compares each work file
in the current VC fileset to the version(s) from which you started
editing.  The diff is displayed in another window, in a Diff mode buffer
(*note Diff Mode::) named ‘*vc-diff*’.  The usual Diff mode commands are
available in this buffer.  In particular, the ‘g’ (‘revert-buffer’)
command performs the file comparison again, generating a new diff.

   To compare two arbitrary revisions of the current VC fileset, call
‘vc-diff’ with a prefix argument: ‘C-u C-x v =’.  This prompts for two
revision IDs (*note VCS Concepts::), and displays a diff between those
versions of the fileset.  This will not work reliably for multi-file VC
filesets, if the version control system is file-based rather than
changeset-based (e.g., CVS), since then revision IDs for different files
would not be related in any meaningful way.

   Instead of the revision ID, some version control systems let you
specify revisions in other formats.  For instance, under Bazaar you can
enter ‘date:yesterday’ for the argument to ‘C-u C-x v =’ (and related
commands) to specify the first revision committed after yesterday.  See
the documentation of the version control system for details.

   If you invoke ‘C-x v =’ or ‘C-u C-x v =’ from a Dired buffer (*note
Dired::), the file listed on the current line is treated as the current
VC fileset.  The VC fileset can also include several marked files.

   ‘M-x vc-ediff’ works like ‘C-x v =’, except that it uses an Ediff
session.  *Note Ediff: (ediff)Top.

   ‘C-x v D’ (‘vc-root-diff’) is similar to ‘C-x v =’, but it displays
the changes in the entire current working tree (i.e., the working tree
containing the current VC fileset).  If you invoke this command from a
Dired buffer, it applies to the working tree containing the directory.

   To compare two arbitrary revisions of the whole trees, call
‘vc-root-diff’ with a prefix argument: ‘C-u C-x v D’.  This prompts for
two revision IDs (*note VCS Concepts::), and displays a diff between
those versions of the entire version-controlled directory trees (RCS,
SCCS, CVS, and SRC do not support this feature).

   You can customize the ‘diff’ options that ‘C-x v =’ and ‘C-x v D’ use
for generating diffs.  The options used are taken from the first
non-‘nil’ value amongst the variables ‘vc-BACKEND-diff-switches’,
‘vc-diff-switches’, and ‘diff-switches’ (*note Comparing Files::), in
that order.  Here, BACKEND stands for the relevant version control
system, e.g., ‘bzr’ for Bazaar.  Since ‘nil’ means to check the next
variable in the sequence, either of the first two may use the value ‘t’
to mean no switches at all.  Most of the ‘vc-BACKEND-diff-switches’
variables default to ‘nil’, but some default to ‘t’; these are for
version control systems whose ‘diff’ implementations do not accept
common diff options, such as Subversion.

   To directly examine an older version of a file, visit the work file
and type ‘C-x v ~ REVISION <RET>’ (‘vc-revision-other-window’).  This
retrieves the file version corresponding to REVISION, saves it to
‘FILENAME.~REVISION~’, and visits it in a separate window.

   Many version control systems allow you to view files “annotated” with
per-line revision information, by typing ‘C-x v g’ (‘vc-annotate’).
This creates a new “annotate” buffer displaying the file’s text, with
each line colored to show how old it is.  Red text is new, blue is old,
and intermediate colors indicate intermediate ages.  By default, the
color is scaled over the full range of ages, such that the oldest
changes are blue, and the newest changes are red.  If the variable
‘vc-annotate-background-mode’ is non-‘nil’, the colors expressing the
age of each line are applied to the background color, leaving the
foreground at its default color.

   You can customize the ‘annotate’ options that ‘C-x v g’ uses by
customizing ‘vc-BACKEND-annotate-switches’ and ‘vc-annotate-switches’.
They function similarly to ‘vc-BACKEND-diff-switches’ and
‘vc-diff-switches’, described above.

   When you give a prefix argument to ‘C-x v g’, Emacs reads two
arguments using the minibuffer: the revision to display and annotate
(instead of the current file contents), and the time span in days the
color range should cover.

   From the “annotate” buffer, these and other color scaling options are
available from the ‘VC-Annotate’ menu.  In this buffer, you can also use
the following keys to browse the annotations of past revisions, view
diffs, or view log entries:

‘p’
     Annotate the previous revision, i.e., the revision before the one
     currently annotated.  A numeric prefix argument is a repeat count,
     so ‘C-u 10 p’ would take you back 10 revisions.

‘n’
     Annotate the next revision, i.e., the revision after the one
     currently annotated.  A numeric prefix argument is a repeat count.

‘j’
     Annotate the revision indicated by the current line.

‘a’
     Annotate the revision before the one indicated by the current line.
     This is useful to see the state the file was in before the change
     on the current line was made.

‘f’
     Show in a buffer the file revision indicated by the current line.

‘d’
     Display the diff between the current line’s revision and the
     previous revision.  This is useful to see what the current line’s
     revision actually changed in the file.

‘D’
     Display the diff between the current line’s revision and the
     previous revision for all files in the changeset (for VC systems
     that support changesets).  This is useful to see what the current
     line’s revision actually changed in the tree.

‘l’
     Show the log of the current line’s revision.  This is useful to see
     the author’s description of the changes in the revision on the
     current line.

‘w’
     Annotate the working revision—the one you are editing.  If you used
     ‘p’ and ‘n’ to browse to other revisions, use this key to return to
     your working revision.

‘v’
     Toggle the annotation visibility.  This is useful for looking just
     at the file contents without distraction from the annotations.


File: emacs.info,  Node: VC Change Log,  Next: VC Undo,  Prev: Old Revisions,  Up: Version Control

29.1.7 VC Change Log
--------------------

‘C-x v l’
     Display the change history for the current fileset
     (‘vc-print-log’).

‘C-x v L’
     Display the change history for the current repository
     (‘vc-print-root-log’).

‘C-x v b l’
     Display the change history for another branch
     (‘vc-print-branch-log’).

‘C-x v I’
     Display the changes that a “pull” operation will retrieve
     (‘vc-log-incoming’).

‘C-x v O’
     Display the changes that will be sent by the next “push” operation
     (‘vc-log-outgoing’).

‘C-x v h’
     Display the history of changes made in the region of file visited
     by the current buffer (‘vc-region-history’).

‘M-x vc-log-search <RET>’
     Search the change history for a specified pattern.

   ‘C-x v l’ (‘vc-print-log’) displays a buffer named ‘*vc-change-log*’,
showing the history of changes made to the current fileset in the long
form, including who made the changes, the dates, and the log entry for
each change (these are the same log entries you would enter via the
‘*vc-log*’ buffer; *note Log Buffer::).  When invoked from a buffer
visiting a file, the current fileset consists of that single file, and
point in the displayed ‘*vc-change-log*’ buffer is centered at the
revision of that file.  When invoked from a VC Directory buffer (*note
VC Directory Mode::) or from a Dired buffer (*note Dired::), the fileset
consists of all the marked files, defaulting to the file shown on the
current line in the directory buffer if no file is marked.

   If the fileset includes one or more directories, the resulting
‘*vc-change-log*’ buffer shows a short log of changes (one line for each
change), if the VC backend supports that; otherwise it shows the log in
the long form.

   With a prefix argument, the command prompts for the revision to
center on in the ‘*vc-change-log*’ buffer and for the maximum number of
revisions to display.

   ‘C-x v L’ (‘vc-print-root-log’) displays a ‘*vc-change-log*’ buffer
showing the history of the entire version-controlled directory tree
(RCS, SCCS, CVS, and SRC do not support this feature).  With a prefix
argument, the command prompts for the maximum number of revisions to
display.  A numeric prefix argument specifies the maximum number of
revisions without prompting.  When the numeric prefix argument is 1, as
in ‘C-1 C-x v L’ or ‘C-u 1 C-x v L’, the command prompts for the
revision ID, and displays the log entry of that revision together with
the changes (diffs) it introduced.  (Some less capable version control
systems, such as RCS and CVS, don’t have commands to show a revision log
with its diffs; for them the command displays only the log entry, and
you can request to show the diffs by typing ‘d’ or ‘D’, see below.)

   The ‘C-x v L’ history is shown in a compact form, usually showing
only the first line of each log entry.  However, you can type <RET>
(‘log-view-toggle-entry-display’) in the ‘*vc-change-log*’ buffer to
reveal the entire log entry for the revision at point.  A second <RET>
hides it again.

   ‘C-x v b l BRANCH-NAME <RET>’ (‘vc-print-branch-log’) displays a
‘*vc-change-log*’ buffer showing the history of the version-controlled
directory tree, like ‘vc-print-root-log’ does, but it shows the history
of a branch other than the current one; it prompts for the branch whose
history to display.

   On a decentralized version control system, the ‘C-x v I’
(‘vc-log-incoming’) command displays a log buffer showing the changes
that will be applied, the next time you run the version control system’s
pull command to get new revisions from another remote location (*note
Pulling / Pushing::).  This other remote location is the default one
from which changes are pulled, as defined by the version control system;
with a prefix argument, ‘vc-log-incoming’ prompts for a specific remote
location.  Similarly, ‘C-x v O’ (‘vc-log-outgoing’) shows the changes
that will be sent to another remote location, the next time you run the
push command; with a prefix argument, it prompts for a specific
destination that in case of some version control system can be a branch
name.

   In the ‘*vc-change-log*’ buffer, you can use the following keys to
move between the logs of revisions and of files, and to examine and
compare past revisions (*note Old Revisions::):

‘p’
     Move to the previous revision entry.  (Revision entries in the log
     buffer are usually in reverse-chronological order, so the previous
     revision-item usually corresponds to a newer revision.)  A numeric
     prefix argument is a repeat count.

‘n’
     Move to the next revision entry.  A numeric prefix argument is a
     repeat count.

‘a’
     Annotate the revision on the current line (*note Old Revisions::).

‘e’
     Modify the change comment displayed at point.  Note that not all VC
     systems support modifying change comments.

‘f’
     Visit the revision indicated at the current line.

‘d’
     Display a diff between the revision at point and the next earlier
     revision, for the specific file.

‘D’
     Display the changeset diff between the revision at point and the
     next earlier revision.  This shows the changes to all files made in
     that revision.

‘<RET>’
     In a compact-style log buffer (e.g., the one created by ‘C-x v L’),
     toggle between showing and hiding the full log entry for the
     revision at point.

   Because fetching many log entries can be slow, the ‘*vc-change-log*’
buffer displays no more than 2000 revisions by default.  The variable
‘vc-log-show-limit’ specifies this limit; if you set the value to zero,
that removes the limit.  You can also increase the number of revisions
shown in an existing ‘*vc-change-log*’ buffer by clicking on the ‘Show
2X entries’ or ‘Show unlimited entries’ buttons at the end of the
buffer.  However, RCS, SCCS, CVS, and SRC do not support this feature.

   A useful variant of examining history of changes is provided by the
command ‘vc-region-history’ (by default bound to ‘C-x v h’), which shows
a ‘*VC-history*’ buffer with the history of changes made in the region
of the current buffer’s file between point and the mark (*note Mark::).
The history of changes includes the commit log messages and also the
changes themselves in the Diff format.

   Invoke this command after marking in the current buffer the region in
whose changes you are interested.  In the ‘*VC-history*’ buffer it pops
up, you can use all of the commands available in the ‘*vc-change-log*’
buffer described above, and also the commands defined by Diff mode
(*note Diff Mode::).

   This command is currently available only with Git and Mercurial (hg).

   The command ‘vc-log-search’ allows searching for a pattern in the log
of changes.  It prompts for a pattern (a regular expression), and
displays all entries in the change history whose log messages match the
pattern.  When invoked with a prefix argument, the command will also
prompt for a specific VCS shell command to run for this purpose.


File: emacs.info,  Node: VC Undo,  Next: VC Ignore,  Prev: VC Change Log,  Up: Version Control

29.1.8 Undoing Version Control Actions
--------------------------------------

‘C-x v u’
     Revert the work file(s) in the current VC fileset to the last
     revision (‘vc-revert’).

   If you want to discard all the changes you have made to the current
VC fileset, type ‘C-x v u’ (‘vc-revert’).  This will ask you for
confirmation before discarding the changes.  If you agree, the fileset
is reverted.

   If ‘vc-revert-show-diff’ is non-‘nil’, this command will show you a
diff between the work file(s) and the revision from which you started
editing.  Afterwards, the diff buffer will either be killed (if this
variable is ‘kill’), or the buffer will be buried (any other non-‘nil’
value).  If you don’t want ‘C-x v u’ to show a diff, set this variable
to ‘nil’ (you can still view the diff directly with ‘C-x v =’; *note Old
Revisions::).

   On locking-based version control systems, ‘C-x v u’ leaves files
unlocked; you must lock again to resume editing.  You can also use ‘C-x
v u’ to unlock a file if you lock it and then decide not to change it.


File: emacs.info,  Node: VC Ignore,  Next: VC Directory Mode,  Prev: VC Undo,  Up: Version Control

29.1.9 Ignore Version Control Files
-----------------------------------

‘C-x v G’
     Ignore a file under current version control system.  (‘vc-ignore’).

   Many source trees contain some files that do not need to be
versioned, such as editor backups, object or bytecode files, and built
programs.  You can simply not add them, but then they’ll always crop up
as unknown files.  You can also tell the version control system to
ignore these files by adding them to the ignore file at the top of the
tree.  ‘C-x v G’ (‘vc-ignore’) can help you do this.  When called with a
prefix argument, you can remove a file from the ignored file list.


File: emacs.info,  Node: VC Directory Mode,  Next: Branches,  Prev: VC Ignore,  Up: Version Control

29.1.10 VC Directory Mode
-------------------------

The “VC Directory buffer” is a specialized buffer for viewing the
version control statuses of the files in a directory tree, and
performing version control operations on those files.  In particular, it
is used to specify multi-file VC filesets for commands like ‘C-x v v’ to
act on (*note VC Directory Commands::).

   To use the VC Directory buffer, type ‘C-x v d’ (‘vc-dir’).  This
reads a directory’s name using the minibuffer, and switches to a VC
Directory buffer for that directory.  By default, the buffer is named
‘*vc-dir*’.  Its contents are described in *note VC Directory Buffer::.

   The ‘vc-dir’ command automatically detects the version control system
to be used in the specified directory.  In the event that more than one
system is being used in the directory, you should invoke the command
with a prefix argument, ‘C-u C-x v d’; this prompts for the version
control system which the VC Directory buffer should use.

   In addition to the VC Directory buffer, Emacs has a similar facility
called PCL-CVS which is specialized for CVS.  *Note About PCL-CVS:
(pcl-cvs)Top.

   You can also invoke VC commands from Dired buffers (*note Dired::).
In that case, any VC command you invoke considers the marked files as
the current fileset (*note Basic VC Editing::), defaulting to the file
on the current line if no files are marked.

* Menu:

* Buffer: VC Directory Buffer.      What the buffer looks like and means.
* Commands: VC Directory Commands.  Commands to use in a VC directory buffer.


File: emacs.info,  Node: VC Directory Buffer,  Next: VC Directory Commands,  Up: VC Directory Mode

29.1.10.1 The VC Directory Buffer
.................................

The VC Directory buffer contains a list of version-controlled files and
their version control statuses.  It lists files in the current directory
(the one specified when you called ‘C-x v d’) and its subdirectories,
but only those with a noteworthy status.  Files that are up-to-date
(i.e., the same as in the repository) are omitted.  If all the files in
a subdirectory are up-to-date, the subdirectory is not listed either.
As an exception, if a file has become up-to-date as a direct result of a
VC command, it is listed.

   Here is an example of a VC Directory buffer listing:

                          ./
         edited           configure.ac
     *   added            README
         unregistered     temp.txt
                          src/
     *   edited           src/main.c

Two work files have been modified but not committed: ‘configure.ac’ in
the current directory, and ‘main.c’ in the ‘src/’ subdirectory.  The
file named ‘README’ has been added but is not yet committed, while
‘temp.txt’ is not under version control (*note Registering::).

   The ‘*’ characters next to the entries for ‘README’ and ‘src/main.c’
indicate that the user has marked these files as the current VC fileset
(*note VC Directory Commands::).

   The above example is typical for a decentralized version control
system like Bazaar, Git, or Mercurial.  Other systems can show other
statuses.  For instance, CVS shows the ‘needs-update’ status if the
repository has changes that have not been applied to the work file.  RCS
and SCCS show the name of the user locking a file as its status.

   On CVS, the ‘vc-dir’ command normally contacts the repository, which
may be on a remote machine, to check for updates.  If you change the
variable ‘vc-cvs-stay-local’ to ‘nil’ (*note CVS Options::), then Emacs
avoids contacting a remote repository when generating the VC Directory
buffer (it will still contact it when necessary, e.g., when doing a
commit).  This may be desirable if you are working offline or the
network is slow.

   The VC Directory buffer omits subdirectories listed in the variable
‘vc-directory-exclusion-list’.  Its default value contains directories
that are used internally by version control systems.


File: emacs.info,  Node: VC Directory Commands,  Prev: VC Directory Buffer,  Up: VC Directory Mode

29.1.10.2 VC Directory Commands
...............................

Emacs provides several commands for navigating the VC Directory buffer,
and for marking files as belonging to the current VC fileset.

‘n’
‘<SPC>’
     Move point to the next entry (‘vc-dir-next-line’).

‘p’
     Move point to the previous entry (‘vc-dir-previous-line’).

‘<TAB>’
     Move to the next directory entry (‘vc-dir-next-directory’).

‘S-<TAB>’
     Move to the previous directory entry (‘vc-dir-previous-directory’).

‘<RET>’
‘f’
     Visit the file or directory listed on the current line
     (‘vc-dir-find-file’).

‘o’
     Visit the file or directory on the current line, in a separate
     window (‘vc-dir-find-file-other-window’).

‘m’
     Mark the file or directory on the current line (‘vc-dir-mark’),
     putting it in the current VC fileset.  If the region is active,
     mark all files in the region.

     A file cannot be marked with this command if it is already in a
     marked directory, or one of its subdirectories.  Similarly, a
     directory cannot be marked with this command if any file in its
     tree is marked.

‘M’
     If point is on a file entry, mark all files with the same status;
     if point is on a directory entry, mark all files in that directory
     tree (‘vc-dir-mark-all-files’).  With a prefix argument, mark all
     listed files and directories.

‘% m’
‘* %’
     You can use this command to mark files by regexp
     (‘vc-dir-mark-by-regexp’).  If given a prefix, unmark files
     instead.

‘* r’
     You can use this command to mark files that are in one of
     registered states, including edited, added or removed.
     (‘vc-dir-mark-registered-files’).

‘G’
     Add the file under point to the list of files that the VC should
     ignore (‘vc-dir-ignore’).  For instance, if the VC is Git, it will
     append this file to the ‘.gitignore’ file.  If given a prefix, do
     this with all the marked files.

‘q’
     Quit the VC Directory buffer, and bury it (‘quit-window’).

‘u’
     Unmark the file or directory on the current line.  If the region is
     active, unmark all the files in the region (‘vc-dir-unmark’).

‘U’
     If point is on a file entry, unmark all files with the same status;
     if point is on a directory entry, unmark all files in that
     directory tree (‘vc-dir-unmark-all-files’).  With a prefix
     argument, unmark all files and directories.

‘x’
     Hide files with ‘up-to-date’ or ‘ignored’ status
     (‘vc-dir-hide-up-to-date’).  With a prefix argument, hide items
     whose state is that of the item at point.

   While in the VC Directory buffer, all the files that you mark with
‘m’ (‘vc-dir-mark’) or ‘M’ (‘vc-dir-mark-all-files’) are in the current
VC fileset.  If you mark a directory entry with ‘m’, all the listed
files in that directory tree are in the current VC fileset.  The files
and directories that belong to the current VC fileset are indicated with
a ‘*’ character in the VC Directory buffer, next to their VC status.  In
this way, you can set up a multi-file VC fileset to be acted on by VC
commands like ‘C-x v v’ (*note Basic VC Editing::), ‘C-x v =’ (*note Old
Revisions::), and ‘C-x v u’ (*note VC Undo::).

   The VC Directory buffer also defines some single-key shortcuts for VC
commands with the ‘C-x v’ prefix: ‘=’, ‘+’, ‘l’, ‘i’, ‘D’, ‘L’, ‘G’,
‘I’, ‘O’, and ‘v’.

   For example, you can commit a set of edited files by opening a VC
Directory buffer, where the files are listed with the ‘edited’ status;
marking the files; and typing ‘v’ or ‘C-x v v’ (‘vc-next-action’).  If
the version control system is changeset-based, Emacs will commit the
files in a single revision.

   While in the VC Directory buffer, you can also perform search and
replace on the current VC fileset, with the following commands:

‘S’
     Search the fileset (‘vc-dir-search’).

‘Q’
     Do a regular expression query replace on the fileset
     (‘vc-dir-query-replace-regexp’).

‘M-s a C-s’
     Do an incremental search on the fileset (‘vc-dir-isearch’).

‘M-s a C-M-s’
     Do an incremental regular expression search on the fileset
     (‘vc-dir-isearch-regexp’).

Apart from acting on multiple files, these commands behave much like
their single-buffer counterparts (*note Search::).

   The VC Directory buffer additionally defines some branch-related
commands starting with the prefix ‘b’:

‘b c’
     Create a new branch (‘vc-create-branch’).  *Note Creating
     Branches::.

‘b l’
     Prompt for the name of a branch and display the change history of
     that branch (‘vc-print-branch-log’).

‘b s’
     Switch to a branch (‘vc-switch-branch’).  *Note Switching
     Branches::.

‘d’
     Delete the marked files, or the current file if no marks
     (‘vc-dir-clean-delete)’.  The files will not be marked as deleted
     in the version control system, so this function is mostly useful
     for unregistered files.

   The above commands are also available via the menu bar, and via a
context menu invoked by ‘mouse-2’.  Furthermore, some VC backends use
the menu to provide extra backend-specific commands.  For example, Git
and Bazaar allow you to manipulate “stashes” and “shelves” (which are a
way to temporarily put aside uncommitted changes, and bring them back at
a later time).


File: emacs.info,  Node: Branches,  Next: Miscellaneous VC,  Prev: VC Directory Mode,  Up: Version Control

29.1.11 Version Control Branches
--------------------------------

One use of version control is to support multiple independent lines of
development, which are called “branches”.  Amongst other things,
branches can be used for maintaining separate stable and development
versions of a program, and for developing unrelated features in
isolation from one another.

   VC’s support for branch operations is currently fairly limited.  For
decentralized version control systems, it provides commands for
“updating” one branch with the contents of another, and for “merging”
the changes made to two different branches (*note Merging::).  For
centralized version control systems, it supports checking out different
branches and committing into new or different branches.

* Menu:

* Switching Branches::    How to get to another existing branch.
* Pulling / Pushing::     Receiving/sending changes from/to elsewhere.
* Merging::               Transferring changes between branches.
* Creating Branches::     How to start a new branch.


File: emacs.info,  Node: Switching Branches,  Next: Pulling / Pushing,  Up: Branches

29.1.11.1 Switching between Branches
....................................

The various version control systems differ in how branches are
implemented, and these differences cannot be entirely concealed by VC.

   On some decentralized version control systems, including Bazaar and
Mercurial in its normal mode of operation, each branch has its own
working directory tree, so switching between branches just involves
switching directories.  On Git, branches are normally “co-located” in
the same directory, and switching between branches is done using the
‘git checkout’ command, which changes the contents of the working tree
to match the branch you switch to.  Bazaar also supports co-located
branches, in which case the ‘bzr switch’ command will switch branches in
the current directory.  With Subversion, you switch to another branch
using the ‘svn switch’ command.  With Mercurial, command ‘hg update’ is
used to switch to another branch.

   The VC command to switch to another branch in the current directory
is ‘C-x v b s BRANCH-NAME <RET>’ (‘vc-switch-branch’).

   On centralized version control systems, you can also switch between
branches by typing ‘C-u C-x v v’ in an up-to-date work file (*note
Advanced C-x v v::), and entering the revision ID for a revision on
another branch.  On CVS, for instance, revisions on the “trunk” (the
main line of development) normally have IDs of the form 1.1, 1.2, 1.3,
..., while the first branch created from (say) revision 1.2 has revision
IDs 1.2.1.1, 1.2.1.2, ..., the second branch created from revision 1.2
has revision IDs 1.2.2.1, 1.2.2.2, ..., and so forth.  You can also
specify the “branch ID”, which is a branch revision ID omitting its
final component (e.g., 1.2.1), to switch to the latest revision on that
branch.

   On a locking-based system, switching to a different branch also
unlocks (write-protects) the working tree.

   Once you have switched to a branch, VC commands will apply to that
branch until you switch away; for instance, any VC filesets that you
commit will be committed to that specific branch.


File: emacs.info,  Node: Pulling / Pushing,  Next: Merging,  Prev: Switching Branches,  Up: Branches

29.1.11.2 Pulling/Pushing Changes into/from a Branch
....................................................

‘C-x v P’
     On a decentralized version control system, update another location
     with changes from the current branch (a.k.a.  “push” changes).
     This concept does not exist for centralized version control systems

‘C-x v +’
     On a decentralized version control system, update the current
     branch by “pulling in” changes from another location.

     On a centralized version control system, update the current VC
     fileset.

   On a decentralized version control system, the command ‘C-x v P’
(‘vc-push’) updates another location with changes from the current
branch.  With a prefix argument, it prompts for the exact version
control command to run, which lets you specify where to push changes;
the default is ‘bzr push’ with Bazaar, ‘git push’ with Git, and ‘hg
push’ with Mercurial.  The default commands always push to a default
location determined by the version control system from your branch
configuration.

   Prior to pushing, you can use ‘C-x v O’ (‘vc-log-outgoing’) to view a
log buffer of the changes to be sent.  *Note VC Change Log::.

   This command is currently supported only by Bazaar, Git, and
Mercurial.  The concept of “pushing” does not exist for centralized
version control systems, where this operation is a part of committing a
changeset, so invoking this command on a centralized VCS signals an
error.  This command also signals an error when attempted in a Bazaar
“bound branch”, where committing a changeset automatically pushes the
changes to the remote repository to which the local branch is bound.

   On a decentralized version control system, the command ‘C-x v +’
(‘vc-pull’) updates the current branch and working tree.  It is
typically used to update a copy of a remote branch.  If you supply a
prefix argument, the command prompts for the exact version control
command to use, which lets you specify where to pull changes from.
Otherwise, it pulls from a default location determined by the version
control system.

   Amongst decentralized version control systems, ‘C-x v +’ is currently
supported only by Bazaar, Git, and Mercurial.  With Bazaar, it calls
‘bzr pull’ for ordinary branches (to pull from a master branch into a
mirroring branch), and ‘bzr update’ for a bound branch (to pull from a
central repository).  With Git, it calls ‘git pull’ to fetch changes
from a remote repository and merge it into the current branch.  With
Mercurial, it calls ‘hg pull -u’ to fetch changesets from the default
remote repository and update the working directory.

   Prior to pulling, you can use ‘C-x v I’ (‘vc-log-incoming’) to view a
log buffer of the changes to be applied.  *Note VC Change Log::.

   On a centralized version control system like CVS, ‘C-x v +’ updates
the current VC fileset from the repository.


File: emacs.info,  Node: Merging,  Next: Creating Branches,  Prev: Pulling / Pushing,  Up: Branches

29.1.11.3 Merging Branches
..........................

‘C-x v m’
     On a decentralized version control system, merge changes from
     another branch into the current one.

     On a centralized version control system, merge changes from another
     branch into the current VC fileset.

   While developing a branch, you may sometimes need to “merge” in
changes that have already been made in another branch.  This is not a
trivial operation, as overlapping changes may have been made to the two
branches.

   On a decentralized version control system, merging is done with the
command ‘C-x v m’ (‘vc-merge’).  On Bazaar, this prompts for the exact
arguments to pass to ‘bzr merge’, offering a sensible default if
possible.  On Git, this prompts for the name of a branch to merge from,
with completion (based on the branch names known to the current
repository).  With Mercurial, this prompts for argument to pass to ‘hg
merge’.  The output from running the merge command is shown in a
separate buffer.

   On a centralized version control system like CVS, ‘C-x v m’ prompts
for a branch ID, or a pair of revision IDs (*note Switching Branches::);
then it finds the changes from that branch, or the changes between the
two revisions you specified, and merges those changes into the current
VC fileset.  If you just type ‘<RET>’, Emacs simply merges any changes
that were made on the same branch since you checked the file out.

   Immediately after performing a merge, only the working tree is
modified, and you can review the changes produced by the merge with ‘C-x
v D’ and related commands (*note Old Revisions::).  If the two branches
contained overlapping changes, merging produces a “conflict”; a warning
appears in the output of the merge command, and “conflict markers” are
inserted into each affected work file, surrounding the two sets of
conflicting changes.  You must then resolve the conflict by editing the
conflicted files.  Once you are done, the modified files must be
committed in the usual way for the merge to take effect (*note Basic VC
Editing::).


File: emacs.info,  Node: Creating Branches,  Prev: Merging,  Up: Branches

29.1.11.4 Creating New Branches
...............................

On centralized version control systems like CVS, Emacs supports creating
new branches as part of a commit operation.  When committing a modified
VC fileset, type ‘C-u C-x v v’ (‘vc-next-action’ with a prefix argument;
*note Advanced C-x v v::).  Then Emacs prompts for a revision ID for the
new revision.  You should specify a suitable branch ID for a branch
starting at the current revision.  For example, if the current revision
is 2.5, the branch ID should be 2.5.1, 2.5.2, and so on, depending on
the number of existing branches at that point.

   This procedure will not work for distributed version control systems
like git or Mercurial.  For those systems you should use the command
‘vc-create-branch’ (‘C-x v b c BRANCH-NAME <RET>’) instead.

   To create a new branch at an older revision (one that is no longer
the head of a branch), first select that revision (*note Switching
Branches::).  Your procedure will then differ depending on whether you
are using a locking or merging-based VCS.

   On a locking VCS, you will need to lock the old revision branch with
‘C-x v v’.  You’ll be asked to confirm, when you lock the old revision,
that you really mean to create a new branch—if you say no, you’ll be
offered a chance to lock the latest revision instead.  On a
merging-based VCS you will skip this step.

   Then make your changes and type ‘C-x v v’ again to commit a new
revision.  This creates a new branch starting from the selected
revision.

   After the branch is created, subsequent commits create new revisions
on that branch.  To leave the branch, you must explicitly select a
different revision with ‘C-u C-x v v’.


File: emacs.info,  Node: Miscellaneous VC,  Next: Customizing VC,  Prev: Branches,  Up: Version Control

29.1.12 Miscellaneous Commands and Features of VC
-------------------------------------------------

This section explains the less-frequently-used features of VC.

* Menu:

* Change Logs and VC::  Generating a change log file from log entries.
* VC Delete/Rename::    Deleting and renaming version-controlled files.
* Revision Tags::       Symbolic names for revisions.
* Version Headers::     Inserting version control headers into working files.
* Editing VC Commands:: Editing the VC shell commands that Emacs will run.
* Preparing Patches::   Preparing and Composing patches from within VC


File: emacs.info,  Node: Change Logs and VC,  Next: VC Delete/Rename,  Up: Miscellaneous VC

29.1.12.1 Change Logs and VC
............................

If you use RCS or CVS for a program with a ‘ChangeLog’ file (*note
Change Log::), you can generate change log entries from the version
control log entries of previous commits.

   Note that this only works with RCS or CVS.  This procedure would be
particularly incorrect on a modern changeset-based version control
system, where changes to the ‘ChangeLog’ file would normally be
committed as part of a changeset.  In that case, you should write the
change log entries first, then pull them into the ‘*vc-log*’ buffer when
you commit (*note Log Buffer::).

‘C-x v a’
     Visit the current directory’s ‘ChangeLog’ file and, for registered
     files in that directory, create new entries for versions committed
     since the most recent change log entry (‘vc-update-change-log’).

‘C-u C-x v a’
     As above, but only find entries for the current buffer’s file.

   For example, suppose the first line of ‘ChangeLog’ is dated
1999-04-10, and that the only check-in since then was by Nathaniel
Bowditch to ‘rcs2log’ on 1999-05-22 with log entry ‘Ignore log messages
that start with '#'.’.  Then ‘C-x v a’ inserts this ‘ChangeLog’ entry:

     1999-05-22  Nathaniel Bowditch  <nat@apn.org>

             * rcs2log: Ignore log messages that start with '#'.

If the version control log entry specifies a function name (in
parenthesis at the beginning of a line), that is reflected in the
‘ChangeLog’ entry.  For example, if a log entry for ‘vc.el’ is
‘(vc-do-command): Check call-process status.’, the ‘ChangeLog’ entry is:

     1999-05-06  Nathaniel Bowditch  <nat@apn.org>

             * vc.el (vc-do-command): Check call-process status.

   When ‘C-x v a’ adds several change log entries at once, it groups
related log entries together if they all are checked in by the same
author at nearly the same time.  If the log entries for several such
files all have the same text, it coalesces them into a single entry.


File: emacs.info,  Node: VC Delete/Rename,  Next: Revision Tags,  Prev: Change Logs and VC,  Up: Miscellaneous VC

29.1.12.2 Deleting and Renaming Version-Controlled Files
........................................................

‘M-x vc-delete-file’
     Prompt for a file name, delete the file from the working tree, and
     schedule the deletion for committing.

‘M-x vc-rename-file’
     Prompt for two file names, OLD and NEW, rename them in the working
     tree, and schedule the renaming for committing.  The OLD file
     defaults to the current buffer’s file name if it is under VC.

   If you wish to delete a version-controlled file, use the command ‘M-x
vc-delete-file’.  This prompts for the file name, and deletes it via the
version control system.  The file is removed from the working tree, and
in the VC Directory buffer (*note VC Directory Mode::), it is displayed
with the ‘removed’ status.  When you commit it, the deletion takes
effect in the repository.

   To rename a version-controlled file, type ‘M-x vc-rename-file’.  This
prompts for two arguments: the name of the file you wish to rename, and
the new name; then it performs the renaming via the version control
system.  The renaming takes effect immediately in the working tree, and
takes effect in the repository when you commit the renamed file.

   On modern version control systems that have built-in support for
renaming, the renamed file retains the full change history of the
original file.  On CVS and older version control systems, the
‘vc-rename-file’ command actually works by creating a copy of the old
file under the new name, registering it, and deleting the old file.  In
this case, the change history is not preserved.


File: emacs.info,  Node: Revision Tags,  Next: Version Headers,  Prev: VC Delete/Rename,  Up: Miscellaneous VC

29.1.12.3 Revision Tags
.......................

Most version control systems allow you to apply a “revision tag” to a
specific version of a version-controlled tree.  On modern
changeset-based version control systems, a revision tag is simply a
symbolic name for a particular revision.  On older file-based systems
like CVS, each tag is added to the entire set of version-controlled
files, allowing them to be handled as a unit.  Revision tags are
commonly used to identify releases that are distributed to users.

   There are two basic commands for tags; one makes a tag with a given
name, the other retrieves a named tag.

‘C-x v s NAME <RET>’
     Define the working revision of every registered file in or under
     the current directory as a tag named NAME (‘vc-create-tag’).

‘C-x v r NAME <RET>’
     For all registered files at or below the current directory level,
     retrieve the tagged revision NAME.  This command will switch to a
     branch if NAME is a branch name and your VCS distinguishes branches
     from tags.  (‘vc-retrieve-tag’).

     This command reports an error if any files are locked at or below
     the current directory, without changing anything; this is to avoid
     overwriting work in progress.

   You can give a tag or branch name as an argument to ‘C-x v =’ or ‘C-x
v ~’ (*note Old Revisions::).  Thus, you can use it to compare a tagged
version against the current files, or two tagged versions against each
other.

   On SCCS, VC implements tags itself; these tags are visible only
through VC.  Most later systems (including CVS, Subversion, bzr, git,
and hg) have a native tag facility, and VC uses it where available;
those tags will be visible even when you bypass VC.

   In file-based version control systems, when you rename a registered
file you need to rename its master along with it; the command
‘vc-rename-file’ will do this automatically (*note VC Delete/Rename::).
If you are using SCCS, you must also update the records of the tag, to
mention the file by its new name (‘vc-rename-file’ does this, too).  An
old tag that refers to a master file that no longer exists under the
recorded name is invalid; VC can no longer retrieve it.  It would be
beyond the scope of this manual to explain enough about RCS and SCCS to
explain how to update the tags by hand.  Using ‘vc-rename-file’ makes
the tag remain valid for retrieval, but it does not solve all problems.
For example, some of the files in your program probably refer to others
by name.  At the very least, the makefile probably mentions the file
that you renamed.  If you retrieve an old tag, the renamed file is
retrieved under its new name, which is not the name that the makefile
expects.  So the program won’t really work as retrieved.


File: emacs.info,  Node: Version Headers,  Next: Editing VC Commands,  Prev: Revision Tags,  Up: Miscellaneous VC

29.1.12.4 Inserting Version Control Headers
...........................................

On Subversion, CVS, RCS, and SCCS, you can put certain special strings
called “version headers” into a work file.  When the file is committed,
the version control system automatically puts the revision number, the
name of the user who made the commit, and other relevant information
into the version header.

   VC does not normally use the information in the version headers.  As
an exception, when using RCS, Emacs uses the version header, if there is
one, to determine the file version, since it is often more reliable than
the RCS master file.  To inhibit using the version header this way,
change the variable ‘vc-consult-headers’ to ‘nil’.  VC then always uses
the file permissions (if it is supposed to trust them), or else checks
the master file.

   To insert a suitable header string into the current buffer, use the
command ‘M-x vc-insert-headers’.  This command works only on Subversion,
CVS, RCS, and SCCS.  The variable ‘vc-BACKEND-header’ contains the list
of keywords to insert into the version header; for instance, CVS uses
‘vc-cvs-header’, whose default value is ‘'("\$Id\$")’.  (The extra
backslashes prevent the string constant from being interpreted as a
header, if the Emacs Lisp file defining it is maintained with version
control.)  The ‘vc-insert-headers’ command inserts each keyword in the
list on a new line at point, surrounded by tabs, and inside comment
delimiters if necessary.

   The variable ‘vc-static-header-alist’ specifies further strings to
add based on the name of the buffer.  Its value should be a list of
elements of the form ‘(REGEXP . FORMAT)’.  Whenever REGEXP matches the
buffer name, FORMAT is also inserted as part of the version header.  A
‘%s’ in FORMAT is replaced with the file’s version control type.


File: emacs.info,  Node: Editing VC Commands,  Next: Preparing Patches,  Prev: Version Headers,  Up: Miscellaneous VC

29.1.12.5 Editing VC Commands
.............................

You can use the ‘C-x v !’ (‘vc-edit-next-command’) prefix command to
edit the shell command line that VC is about to run.  This is primarily
intended to make it possible to add optional command-line arguments to
VCS commands without unnecessary complications of the VC command set and
its interfaces with the backend.

   For example, Git can produce logs of more than one branch, but ‘C-x v
b l’ (‘vc-print-branch-log’) prompts for the name of just one branch.
To obtain a log of more than one branch, you can type
‘C-x v ! C-x v b l’ and then append the names of additional branches to
the end of the ‘git log’ command that VC is about to run.


File: emacs.info,  Node: Preparing Patches,  Prev: Editing VC Commands,  Up: Miscellaneous VC

29.1.12.6 Preparing Patches
...........................

When collaborating on projects it is common to send patches via email,
to share changes.  You can do this using VC with the ‘vc-prepare-patch’
command.  This will prompt you for the revisions you wish to share, and
which destination email address(es) to use.  Separate the revisions
using the value of CRM-SEPARATOR, commas by default.  The command will
then prepare those revisions using your MUA (Mail User Agent) for you to
review and send.

   When invoked interactively in a Log View buffer with marked
revisions, those marked revisions will be used.

   Depending on the value of the user option
‘vc-prepare-patches-separately’, ‘vc-prepare-patch’ will generate one or
more messages.  The default value ‘t’ means prepare and display a
message for each revision, one after another.  A value of ‘nil’ means to
generate a single message with all patches attached in the body.

   If you expect to contribute patches on a regular basis, you can set
the user option ‘vc-default-patch-addressee’ to the address(es) you wish
to use.  This will be used as the default value when invoking
‘vc-prepare-patch’.  Project maintainers may consider setting this as a
directory local variable (*note Directory Variables::).


File: emacs.info,  Node: Customizing VC,  Prev: Miscellaneous VC,  Up: Version Control

29.1.13 Customizing VC
----------------------

The variable ‘vc-handled-backends’ determines which version control
systems VC should handle.  The default value is ‘(RCS CVS SVN SCCS SRC
Bzr Git Hg)’, so it contains all the version systems that are currently
supported.  If you want VC to ignore one or more of these systems,
exclude its name from the list.  To disable VC entirely, set this
variable to ‘nil’.

   The order of systems in the list is significant: when you visit a
file registered in more than one system, VC uses the system that comes
first in ‘vc-handled-backends’ by default.  The order is also
significant when you register a file for the first time (*note
Registering::).

* Menu:

* General VC Options::  Options that apply to multiple back ends.
* RCS and SCCS::        Options for RCS and SCCS.
* CVS Options::         Options for CVS.


File: emacs.info,  Node: General VC Options,  Next: RCS and SCCS,  Up: Customizing VC

29.1.13.1 General Options
.........................

Emacs normally does not save backup files for source files that are
maintained with version control.  If you want to make backup files even
for files that use version control, set the variable
‘vc-make-backup-files’ to a non-‘nil’ value.

   Editing a version-controlled file through a symbolic link may cause
unexpected results, if you are unaware that the underlying file is
version-controlled.  The variable ‘vc-follow-symlinks’ controls what
Emacs does if you try to visit a symbolic link pointing to a
version-controlled file.  If the value is ‘ask’ (the default), Emacs
asks for confirmation.  If it is ‘nil’, Emacs just displays a warning
message.  If it is ‘t’, Emacs automatically follows the link and visits
the real file instead.

   If ‘vc-suppress-confirm’ is non-‘nil’, then ‘C-x v v’ and ‘C-x v i’
can save the current buffer without asking, and ‘C-x v u’ also operates
without asking for confirmation.

   VC mode does much of its work by running the shell commands for the
appropriate version control system.  If ‘vc-command-messages’ is
non-‘nil’, VC displays messages to indicate which shell commands it
runs, and additional messages when the commands finish.


File: emacs.info,  Node: RCS and SCCS,  Next: CVS Options,  Prev: General VC Options,  Up: Customizing VC

29.1.13.2 Options for RCS and SCCS
..................................

By default, RCS uses locking to coordinate the activities of several
users, but there is a mode called “non-strict locking” in which you can
check-in changes without locking the file first.  Use ‘rcs -U’ to switch
to non-strict locking for a particular file, see the ‘rcs’ manual page
for details.

   When deducing the version control state of an RCS file, VC first
looks for an RCS version header string in the file (*note Version
Headers::).  If there is no header string, VC normally looks at the file
permissions of the work file; this is fast.  But there might be
situations when the file permissions cannot be trusted.  In this case
the master file has to be consulted, which is rather expensive.  Also
the master file can only tell you _if_ there’s any lock on the file, but
not whether your work file really contains that locked version.

   You can tell VC not to use version headers to determine the file
status by setting ‘vc-consult-headers’ to ‘nil’.  VC then always uses
the file permissions (if it is supposed to trust them), or else checks
the master file.

   VC determines the version control state of files under SCCS much as
with RCS.  It does not consider SCCS version headers, though.  Thus, the
variable ‘vc-consult-headers’ does not affect SCCS use.


File: emacs.info,  Node: CVS Options,  Prev: RCS and SCCS,  Up: Customizing VC

29.1.13.3 Options specific for CVS
..................................

You can specify additional command line options to pass to all CVS
operations in the variable ‘vc-cvs-global-switches’.  These switches are
inserted immediately after the ‘cvs’ command, before the name of the
operation to invoke.

   When using a CVS repository on a remote machine, VC can try keeping
network interactions to a minimum.  This is controlled by the variable
‘vc-cvs-stay-local’.  If ‘vc-cvs-stay-local’ is ‘only-file’ (the
default), VC determines the version control status of each file using
only the entry in the local CVS subdirectory and the information
returned by previous CVS commands.  As a consequence, if you have
modified a file and somebody else has checked in other changes, you will
not be notified of the conflict until you try to commit.

   If you change ‘vc-cvs-stay-local’ to ‘nil’, VC queries the remote
repository _before_ it decides what to do in ‘vc-next-action’ (‘C-x v
v’), just as it does for local repositories.

   You can also set ‘vc-cvs-stay-local’ to a regular expression that is
matched against the repository host name; VC then stays local only for
repositories from hosts that match the pattern.

   When using a remote repository, Emacs normally makes “automatic
version backups” of the original versions of each edited file.  These
local backups are made whenever you save the first changes to a file,
and they are removed after you commit your changes to the repository.
(Note that these are not the same as ordinary Emacs backup files; *note
Backup::.)  Commands like ‘C-x v =’ and ‘C-x v u’ make use of automatic
version backups, if possible, to avoid having to access the network.

   Setting ‘vc-cvs-stay-local’ to ‘nil’ disables the making of automatic
version backups.

   Automatic version backups have names of the form ‘FILE.~VERSION.~’.
This is similar to the name that ‘C-x v ~’ saves old versions to (*note
Old Revisions::), except for the additional dot (‘.’) after the version.
The relevant VC commands can use both kinds of version backups.  The
main difference is that the manual version backups made by ‘C-x v ~’ are
not deleted automatically when you commit.

   CVS does not use locking by default, but there are ways to enable
locking-like behavior using its ‘CVSREAD’ or “watch” feature; see the
CVS documentation for details.  If that case, you can use ‘C-x v v’ in
Emacs to toggle locking, as you would for a locking-based version
control system (*note VC With A Locking VCS::).


File: emacs.info,  Node: Projects,  Next: Change Log,  Prev: Version Control,  Up: Maintaining

29.2 Working with Projects
==========================

A “project” is a collection of files used for producing one or more
programs.  Files that belong to a project are typically stored in a
hierarchy of directories; the top-level directory of the hierarchy is
known as the “project root”.

   Whether a given directory is a root of some project is determined by
the project-specific infrastructure, known as “project back-end”.  Emacs
currently supports two such back-ends: VC-aware (*note Version
Control::), whereby a VCS repository is considered a project; and EDE
(*note EDE::).  This is expected to be extended in the future to support
additional types of projects.

   Which files do or don’t belong to a project is also determined by the
project back-end.  For example, the VC-aware back-end doesn’t consider
“ignored” files (*note VC Ignore::) to be part of the project.  Also,
the VC-aware Project back-end considers “untracked” files by default.
That behavior is controllable with the variable
‘project-vc-include-untracked’.

* Menu:

* Project File Commands::   Commands for handling project files.
* Project Buffer Commands:: Commands for handling project buffers.
* Switching Projects::      Switching between projects.
* Managing Projects::       Managing the project list file.


File: emacs.info,  Node: Project File Commands,  Next: Project Buffer Commands,  Up: Projects

29.2.1 Project Commands That Operate on Files
---------------------------------------------

‘C-x p f’
     Visit a file that belongs to the current project
     (‘project-find-file’).
‘C-x p g’
     Find matches for a regexp in all files that belong to the current
     project (‘project-find-regexp’).
‘M-x project-search’
     Interactively search for regexp matches in all files that belong to
     the current project.
‘C-x p r’
     Perform query-replace for a regexp in all files that belong to the
     current project (‘project-query-replace-regexp’).
‘C-x p d’
     Run Dired in the current project’s root directory
     (‘project-dired’).
‘C-x p v’
     Run ‘vc-dir’ in the current project’s root directory
     (‘project-vc-dir’).
‘C-x p s’
     Start an inferior shell in the current project’s root directory
     (‘project-shell’).
‘C-x p e’
     Start Eshell in the current project’s root directory
     (‘project-eshell’).
‘C-x p c’
     Run compilation in the current project’s root directory
     (‘project-compile’).
‘C-x p !’
     Run shell command in the current project’s root directory
     (‘project-shell-command’).
‘C-x p &’
     Run shell command asynchronously in the current project’s root
     directory (‘project-async-shell-command’).

   Emacs provides commands for handling project files conveniently.
This subsection describes these commands.

   All of the commands described here share the notion of the “current
project”.  The current project is determined by the ‘default-directory’
(*note File Names::) of the buffer that is the current buffer when the
command is invoked.  If that directory doesn’t seem to belong to a
recognizable project, these commands prompt you for the project
directory.

   The command ‘C-x p f’ (‘project-find-file’) is a convenient way of
visiting files (*note Visiting::) that belong to the current project.
Unlike ‘C-x C-f’, this command doesn’t require to type the full file
name of the file to visit, you can type only the file’s base name (i.e.,
omit the leading directories).  In addition, the completion candidates
considered by the command include only the files belonging to the
current project, and nothing else.  If there’s a file name at point,
this command offers that file as the first element of the “future
history”.  If given a prefix, include all files under the project root,
except for VCS directories listed in ‘vc-directory-exclusion-list’.

   The command ‘C-x p g’ (‘project-find-regexp’) is similar to ‘rgrep’
(*note Grep Searching::), but it searches only the files that belong to
the current project.  The command prompts for the regular expression to
search, and pops up an Xref mode buffer with the search results, where
you can select a match using the Xref mode commands (*note Xref
Commands::).  When invoked with a prefix argument, this command
additionally prompts for the base directory from which to start the
search; this allows, for example, to limit the search only to project
files under a certain subdirectory of the project root.  The way this
command displays the matches is affected by the value of
‘xref-auto-jump-to-first-xref’ (*note Identifier Search::).

   ‘M-x project-search’ is a sequential variant of
‘project-find-regexp’.  It prompts for a regular expression to search in
the current project’s files, but instead of finding all the matches and
displaying them, it stops when it finds a match and visits the matched
file at the locus of the match, allowing you to edit the matched file.
To find the rest of the matches, type ‘M-x fileloop-continue <RET>’.

   ‘C-x p r’ (‘project-query-replace-regexp’) is similar to
‘project-search’, but it prompts you for whether to replace each match
it finds, like ‘query-replace’ does (*note Query Replace::), and
continues to the next match after you respond.  If your response causes
Emacs to exit the query-replace loop, you can later continue with
‘M-x fileloop-continue <RET>’.

   The command ‘C-x p d’ (‘project-find-dir’) prompts you to choose a
directory inside the current project, with completion.  And opens a
Dired buffer (*note Dired::) listing the files in it.

   The command ‘C-x p D’ (‘project-dired’) opens a Dired buffer (*note
Dired::) listing the files in the current project’s root directory.

   The command ‘C-x p v’ (‘project-vc-dir’) opens a VC Directory buffer
(*note VC Directory Mode::) listing the version control statuses of the
files in a directory tree under the current project’s root directory.

   The command ‘C-x p s’ (‘project-shell’) starts a shell session (*note
Shell::) in a new buffer with the current project’s root as the working
directory.

   The command ‘C-x p e’ (‘project-eshell’) starts an Eshell session in
a new buffer with the current project’s root as the working directory.
*Note Eshell: (eshell)Top.

   The command ‘C-x p c’ (‘project-compile’) runs compilation (*note
Compilation::) in the current project’s root directory.

   The command ‘C-x p !’ (‘project-shell-command’) runs ‘shell-command’
in the current project’s root directory.

   The command ‘C-x p &’ (‘project-async-shell-command’) runs
‘async-shell-command’ in the current project’s root directory.


File: emacs.info,  Node: Project Buffer Commands,  Next: Switching Projects,  Prev: Project File Commands,  Up: Projects

29.2.2 Project Commands That Operate on Buffers
-----------------------------------------------

‘C-x p b’
     Switch to another buffer belonging to the current project
     (‘project-switch-to-buffer’).
‘C-x p C-b’
     List the project buffers (‘project-list-buffers’).
‘C-x p k’
     Kill all live buffers that belong to the current project
     (‘project-kill-buffers’).

   Working on a project could potentially involve having many buffers
visiting files that belong to the project, and also buffers that belong
to the project, but don’t visit any files (like the ‘*compilation*’
buffer created by ‘project-compile’).  The command ‘C-x p b’
(‘project-switch-to-buffer’) helps you switch between buffers that
belong to the current project by prompting for a buffer to switch and
considering only the current project’s buffers as candidates for
completion.

   Like the command ‘list-buffers’ (*note List Buffers::), the command
‘C-x p C-b’ (‘project-list-buffers’) displays a list of existing
buffers, but only belonging to the current project.

   When you finish working on the project, you may wish to kill all the
buffers that belong to the project, to keep your Emacs session smaller.
The command ‘C-x p k’ (‘project-kill-buffers’) accomplishes that: it
kills all the buffers that belong to the current project that satisfy
any of ‘project-kill-buffer-conditions’.  If
‘project-kill-buffers-display-buffer-list’ is non-‘nil’, the buffers to
be killed will be displayed first.


File: emacs.info,  Node: Switching Projects,  Next: Managing Projects,  Prev: Project Buffer Commands,  Up: Projects

29.2.3 Switching Projects
-------------------------

‘C-x p p’
     Run an Emacs command for another project
     (‘project-switch-project’).

   Commands that operate on project files (*note Project File
Commands::) will conveniently prompt you for a project directory when no
project is current.  When you are inside some project, but you want to
operate on a different project, use the ‘C-x p p’ command
(‘project-switch-project’).  This command prompts you to choose a
directory among known project roots, and then displays the menu of
available commands to operate on the project you choose.  The variable
‘project-switch-commands’ controls which commands are available in the
menu, and which key invokes each command.

   The variable ‘project-list-file’ names the file in which Emacs
records the list of known projects.  It defaults to the file ‘projects’
in ‘user-emacs-directory’ (*note Find Init::).


File: emacs.info,  Node: Managing Projects,  Prev: Switching Projects,  Up: Projects

29.2.4 Managing the Project List File
-------------------------------------

‘M-x project-forget-project’
     Remove a known project from the ‘project-list-file’.

   Normally Emacs automatically adds and removes projects to and from
the ‘project-list-file’, but sometimes you may want to manually edit the
available projects.  ‘M-x project-forget-project’ prompts you to choose
one of the available projects, and then removes it from the file.


File: emacs.info,  Node: Change Log,  Next: Xref,  Prev: Projects,  Up: Maintaining

29.3 Change Logs
================

Many software projects keep a “change log”.  This is a file, normally
named ‘ChangeLog’, containing a chronological record of when and how the
program was changed.  Sometimes, these files are automatically generated
from the change log entries stored in version control systems, or are
used to generate these change log entries.  Sometimes, there are several
change log files, each recording the changes in one directory or
directory tree.

* Menu:

* Change Log Commands:: Commands for editing change log files.
* Format of ChangeLog:: What the change log file looks like.


File: emacs.info,  Node: Change Log Commands,  Next: Format of ChangeLog,  Up: Change Log

29.3.1 Change Log Commands
--------------------------

The Emacs command ‘C-x 4 a’ adds a new entry to the change log file for
the file you are editing (‘add-change-log-entry-other-window’).  If that
file is actually a backup file, it makes an entry appropriate for the
file’s parent—that is useful for making log entries for functions that
have been deleted in the current version.

   ‘C-x 4 a’ visits the change log file and creates a new entry unless
the most recent entry is for today’s date and your name.  It also
creates a new item for the current file.  For many languages, it can
even guess the name of the function or other object that was changed.

   To find the change log file, Emacs searches up the directory tree
from the file you are editing.  By default, it stops if it finds a
directory that seems to be the root of a version-control repository.  To
change this, customize ‘change-log-directory-files’.

   When the variable ‘add-log-keep-changes-together’ is non-‘nil’, ‘C-x
4 a’ adds to any existing item for the file, rather than starting a new
item.

   You can combine multiple changes of the same nature.  If you don’t
enter any text after the initial ‘C-x 4 a’, any subsequent ‘C-x 4 a’
adds another symbol to the change log entry.

   If ‘add-log-always-start-new-record’ is non-‘nil’, ‘C-x 4 a’ always
makes a new entry, even if the last entry was made by you and on the
same date.

   If the value of the variable ‘change-log-version-info-enabled’ is
non-‘nil’, ‘C-x 4 a’ adds the file’s version number to the change log
entry.  It finds the version number by searching the first ten percent
of the file, using regular expressions from the variable
‘change-log-version-number-regexp-list’.

   The change log file is visited in Change Log mode.  In this major
mode, each bunch of grouped items counts as one paragraph, and each
entry is considered a page.  This facilitates editing the entries.
‘C-j’ and auto-fill indent each new line like the previous line; this is
convenient for entering the contents of an entry.

   You can use the command ‘change-log-goto-source’ (by default bound to
‘C-c C-c’) to go to the source location of the change log entry near
point, when Change Log mode is on.  Then subsequent invocations of the
‘next-error’ command (by default bound to ‘M-g M-n’ and ‘C-x `’) will
move between entries in the change log.  You will jump to the actual
site in the file that was changed, not just to the next change log
entry.  You can also use ‘previous-error’ to move back through the
change log entries.

   You can use the command ‘M-x change-log-merge’ to merge other log
files into a buffer in Change Log Mode, preserving the date ordering of
entries.

   Version control systems are another way to keep track of changes in
your program and keep a change log.  Many projects that use a VCS don’t
keep a separate versioned change log file nowadays, so you may wish to
avoid having such a file in the repository.  If the value of
‘add-log-dont-create-changelog-file’ is non-‘nil’, commands like ‘C-x 4
a’ (‘add-change-log-entry-other-window’) will record changes in a
suitably named temporary buffer instead of a file, if such a file does
not already exist.

   Whether you have a change log file or use a temporary buffer for
change logs, you can type ‘C-c C-a’ (‘log-edit-insert-changelog’) in the
VC Log buffer to insert the relevant change log entries, if they exist.
*Note Log Buffer::.


File: emacs.info,  Node: Format of ChangeLog,  Prev: Change Log Commands,  Up: Change Log

29.3.2 Format of ChangeLog
--------------------------

A change log entry starts with a header line that contains the current
date, your name (taken from the variable ‘add-log-full-name’), and your
email address (taken from the variable ‘add-log-mailing-address’).
Aside from these header lines, every line in the change log starts with
a space or a tab.  The bulk of the entry consists of “items”, each of
which starts with a line starting with whitespace and a star.  Here are
two entries, both dated in May 1993, with two items and one item
respectively.

     1993-05-25  Richard Stallman  <rms@gnu.org>

             * man.el: Rename symbols 'man-*' to 'Man-*'.
             (manual-entry): Make prompt string clearer.

             * simple.el (blink-matching-paren-distance):
             Change default to 12,000.

     1993-05-24  Richard Stallman  <rms@gnu.org>

             * vc.el (minor-mode-map-alist): Don't use it if it's void.
             (vc-cancel-version): Doc fix.

   One entry can describe several changes; each change should have its
own item, or its own line in an item.  Normally there should be a blank
line between items.  When items are related (parts of the same change,
in different places), group them by leaving no blank line between them.

   You should put a copyright notice and permission notice at the end of
the change log file.  Here is an example:

     Copyright 1997, 1998 Free Software Foundation, Inc.
     Copying and distribution of this file, with or without modification, are
     permitted provided the copyright notice and this notice are preserved.

Of course, you should substitute the proper years and copyright holder.


File: emacs.info,  Node: Xref,  Next: EDE,  Prev: Change Log,  Up: Maintaining

29.4 Find Identifier References
===============================

An “identifier” is a name of a syntactical subunit of the program: a
function, a subroutine, a method, a class, a data type, a macro, etc.
In a programming language, each identifier is a symbol in the language’s
syntax.  Identifiers are also known as “tags”.

   Program development and maintenance requires capabilities to quickly
find where each identifier was defined and referenced, to rename
identifiers across the entire project, etc.  These capabilities are also
useful for finding references in major modes other than those defined to
support programming languages.  For example, chapters, sections,
appendices, etc. of a text or a TeX document can be treated as subunits
as well, and their names can be used as identifiers.  In this chapter,
we use the term “identifiers” to collectively refer to the names of any
kind of subunits, in program source and in other kinds of text alike.

   Emacs provides a unified interface to these capabilities, called
‘xref’.

   To do its job, ‘xref’ needs to make use of information and to employ
methods specific to the major mode.  What files to search for
identifiers, how to find references to identifiers, how to complete on
identifiers—all this and more is mode-specific knowledge.  ‘xref’
delegates the mode-specific parts of its job to a “backend” provided by
the mode; it also includes defaults for some of its commands, for those
modes that don’t provide their own.

   A backend can implement its capabilities in a variety of ways.  Here
are a few examples:

  a. Some major modes provide built-in means for looking up the language
     symbols.  For example, Emacs Lisp symbols can be identified by
     searching the package load history, maintained by the Emacs Lisp
     interpreter, and by consulting the built-in documentation strings;
     the Emacs Lisp mode uses these facilities in its backend to allow
     finding definitions of symbols.  (One disadvantage of this kind of
     backend is that it only knows about subunits that were loaded into
     the interpreter.)

  b. If Eglot is activated for the current buffer’s project (*note
     Projects::) and the current buffer’s major mode, Eglot consults an
     external language server program and provides the data supplied by
     the server regarding the definitions of the identifiers in the
     project.  *Note (eglot)Eglot Features::.

  c. An external program can extract references by scanning the relevant
     files, and build a database of these references.  A backend can
     then access this database whenever it needs to list or look up
     references.  The Emacs distribution includes ‘etags’, a command for
     tagging identifier definitions in programs, which supports many
     programming languages and other major modes, such as HTML, by
     extracting references into “tags tables”.  *Note Create Tags
     Table::.  Major modes for languages supported by ‘etags’ can use
     tags tables as basis for their backend.  (One disadvantage of this
     kind of backend is that tags tables need to be kept reasonably up
     to date, by rebuilding them from time to time.)

* Menu:

* Find Identifiers::    Commands to find where an identifier is defined
                          or referenced, to list identifiers, etc.
* Tags Tables::         Tags table records which file defines a symbol.
* Select Tags Table::   How to visit a specific tags table.


File: emacs.info,  Node: Find Identifiers,  Next: Tags Tables,  Up: Xref

29.4.1 Find Identifiers
-----------------------

This subsection describes the commands that find references to
identifiers and perform various queries about identifiers.  Each such
reference could _define_ an identifier, e.g., provide the implementation
of a program subunit or the text of a document section; or it could
_use_ the identifier, e.g., call a function or a method, assign a value
to a variable, mention a chapter in a cross-reference, etc.

* Menu:

* Looking Up Identifiers:: Commands to find the definition of an identifier.
* Xref Commands::          Commands in the ‘*xref*’ buffer.
* Identifier Search::      Searching and replacing identifiers.
* List Identifiers::       Listing identifiers and completing on them.


File: emacs.info,  Node: Looking Up Identifiers,  Next: Xref Commands,  Up: Find Identifiers

29.4.1.1 Looking Up Identifiers
...............................

The most important thing that ‘xref’ enables you to do is to find the
definition of a specific identifier.

‘M-.’
     Find definitions of an identifier (‘xref-find-definitions’).
‘C-M-. PATTERN <RET>’
     Find all identifiers whose name matches PATTERN
     (‘xref-find-apropos’).
‘C-x 4 . <RET>’
     Find definitions of identifier, but display it in another window
     (‘xref-find-definitions-other-window’).
‘C-x 5 . <RET>’
     Find definition of identifier, and display it in a new frame
     (‘xref-find-definitions-other-frame’).
‘M-x xref-find-definitions-at-mouse’
     Find definition of identifier at mouse click.
‘M-,’
     Go back to where you previously invoked ‘M-.’ and friends
     (‘xref-go-back’).
‘C-M-,’
     Go forward to where you previously invoked ‘M-,’
     (‘xref-go-forward’).
‘M-x xref-etags-mode’
     Switch ‘xref’ to use the ‘etags’ backend.

   ‘M-.’ (‘xref-find-definitions’) shows the definition of the
identifier at point.  With a prefix argument, or if there’s no
identifier at point, it prompts for the identifier.  (If you want it to
always prompt, customize ‘xref-prompt-for-identifier’ to ‘t’.)

   When entering the identifier argument to ‘M-.’, you can use the usual
minibuffer completion commands (*note Completion::), with the known
identifier names being the completion candidates.

   Like most commands that can switch buffers, ‘xref-find-definitions’
has a variant that displays the new buffer in another window, and one
that makes a new frame for it.  The former is ‘C-x 4 .’
(‘xref-find-definitions-other-window’), and the latter is ‘C-x 5 .’
(‘xref-find-definitions-other-frame’).

   The command ‘xref-find-definitions-at-mouse’ works like
‘xref-find-definitions’, but it looks for the identifier name at or
around the place of a mouse event.  This command is intended to be bound
to a mouse event, such as ‘C-M-mouse-1’, for example.

   The command ‘C-M-.’ (‘xref-find-apropos’) is like ‘apropos’ for tags
(*note Apropos::).  It displays a list of identifiers in the selected
tags table whose names match the specified REGEXP.  This is just like
‘M-.’, except that it does regexp matching of identifiers instead of
matching symbol names as fixed strings.  By default, the command pops up
the ‘*xref*’ buffer, like ‘M-.’, but you can display additional output
by customizing the variable ‘tags-apropos-additional-actions’; see its
documentation for details.

   If any of the above commands finds more than one matching definition,
it by default pops up the ‘*xref*’ buffer showing the matching
candidates.  (‘C-M-.’ _always_ pops up the ‘*xref*’ buffer if it finds
at least one match.)  The candidates are normally shown in that buffer
as the name of a file and the matching identifier(s) in that file.  In
that buffer, you can select any of the candidates for display, and you
have several additional commands, described in *note Xref Commands::.
However, if the value of the variable
‘xref-auto-jump-to-first-definition’ is ‘move’, the first of these
candidates is automatically selected in the ‘*xref*’ buffer, and if it’s
‘t’ or ‘show’, the first candidate is automatically shown in its own
window; ‘t’ also selects the window showing the first candidate.  The
default value is ‘nil’, which just shows the candidates in the ‘*xref*’
buffer, but doesn’t select any of them.

   To go back to places _from where_ you’ve displayed the definition,
use ‘M-,’ (‘xref-go-back’).  It jumps back to the point of the last
invocation of ‘M-.’.  Thus you can find and examine the definition of
something with ‘M-.’ and then return to where you were with ‘M-,’.
‘M-,’ allows you to retrace the steps you made forward in the history of
places, all the way to the first place in history, where you first
invoked ‘M-.’, or to any place in-between.

   If you previously went back too far with ‘M-,’, or want to re-examine
a place from which you went back, you can use ‘C-M-,’
(‘xref-go-forward’) to go forward again.  This is similar to using
‘M-.’, except that you don’t need on each step to move point to the
identifier whose definition you want to look up.  ‘C-M-,’ allows you to
retrace all the steps you made back in the history of places, all the
way to the last place in history, where you invoked ‘M-,’, or to any
place in-between.

   Some major modes install ‘xref’ support facilities that might
sometimes fail to find certain identifiers.  For example, in Emacs Lisp
mode (*note Lisp Eval::) ‘M-.’ will by default find only functions and
variables from Lisp packages which are loaded into the current Emacs
session or are auto-loaded (*note (elisp)Autoload::).  If ‘M-.’ fails to
find some identifiers, you can try forcing ‘xref’ to use the ‘etags’
backend (*note Xref::).  To this end, turn on the Xref Etags minor mode
with ‘M-x xref-etags-mode’, then invoke ‘M-.’ again.  (For this to work,
be sure to run ‘etags’ to create the tags table in the directory tree of
the source files, see *note Create Tags Table::.)


File: emacs.info,  Node: Xref Commands,  Next: Identifier Search,  Prev: Looking Up Identifiers,  Up: Find Identifiers

29.4.1.2 Commands Available in the ‘*xref*’ Buffer
..................................................

The following commands are provided in the ‘*xref*’ buffer by the
special XREF mode:

‘<RET>’
‘mouse-1’
     Display the reference on the current line (‘xref-goto-xref’).  With
     prefix argument, also bury the ‘*xref*’ buffer.

‘mouse-2’
     The same as ‘mouse-1’, but make the window displaying the ‘*xref*’
     buffer the selected window (‘xref-select-and-show-xref’).

‘n’
‘.’
     Move to the next reference and display it in the other window
     (‘xref-next-line’).

‘N’
     Move to the first reference of the next reference group and display
     it in the other window (‘xref-next-group’).

‘p’
‘,’
     Move to the previous reference and display it in the other window
     (‘xref-prev-line’).

‘P’
     Move to the first reference of the previous reference group and
     display it in the other window (‘xref-prev-group’).

‘C-o’
     Display the reference on the current line in the other window
     (‘xref-show-location-at-point’).

‘r PATTERN <RET> REPLACEMENT <RET>’
     Perform interactive query-replace on references that match PATTERN
     (‘xref-query-replace-in-results’), replacing the match with
     REPLACEMENT.  This command can only be used in ‘*xref*’ buffers
     that show all the matches for an identifier in all the relevant
     files.  *Note Identifier Search::.

‘g’
     Refresh the contents of the ‘*xref*’ buffer (‘xref-revert-buffer’).

‘M-,’
     Quit the window showing the ‘*xref*’ buffer, and then jump to the
     previous Xref stack location (‘xref-quit-and-pop-marker-stack’).

‘q’
     Quit the window showing the ‘*xref*’ buffer (‘xref-quit’).

   In addition, the usual navigation commands, such as the arrow keys,
‘C-n’, and ‘C-p’ are available for moving around the buffer without
displaying the references.


File: emacs.info,  Node: Identifier Search,  Next: List Identifiers,  Prev: Xref Commands,  Up: Find Identifiers

29.4.1.3 Searching and Replacing with Identifiers
.................................................

The commands in this section perform various search and replace
operations either on identifiers themselves or on files that reference
them.

‘M-?’
     Find all the references for the identifier at point.

‘r’
‘M-x xref-query-replace-in-results <RET> REPLACEMENT <RET>’
‘C-u M-x xref-query-replace-in-results <RET> REGEXP <RET> REPLACEMENT <RET>’
     Interactively replace REGEXP with REPLACEMENT in the names of all
     the identifiers shown in the ‘*xref*’ buffer.

‘M-x xref-find-references-and-replace <RET> FROM <RET> TO <RET>’
     Interactively rename all instances of the identifier FROM to the
     new name TO.

‘M-x tags-search <RET> REGEXP <RET>’
     Search for REGEXP through the files in the selected tags table.

‘M-x tags-query-replace <RET> REGEXP <RET> REPLACEMENT <RET>’
     Perform a ‘query-replace-regexp’ on each file in the selected tags
     table.

‘M-x fileloop-continue’
     Restart one of the last 2 commands above, from the current location
     of point.

   ‘M-?’ finds all the references for the identifier at point, prompting
for the identifier as needed, with completion.  Depending on the current
backend (*note Xref::), the command may prompt even if it finds a valid
identifier at point.  When invoked with a prefix argument, it always
prompts for the identifier.  (If you want it to prompt always, customize
the value of the variable ‘xref-prompt-for-identifier’ to ‘t’; or set it
to ‘nil’ to prompt only if there’s no usable identifier at point.)  The
command then presents the ‘*xref*’ buffer with all the references to the
identifier, showing the file name and the line where the identifier is
referenced.  The XREF mode commands are available in this buffer, see
*note Xref Commands::.

   If the value of the variable ‘xref-auto-jump-to-first-xref’ is ‘t’,
‘xref-find-references’ automatically jumps to the first result and
selects the window where it is displayed.  If the value is ‘show’, the
first result is shown, but the window showing the ‘*xref*’ buffer is
left selected.  If the value is ‘move’, the first result is selected in
the ‘*xref*’ buffer, but is not shown.  The default value is ‘nil’,
which just shows the results in the ‘*xref*’ buffer, but doesn’t select
any of them.

   ‘r’ (‘xref-query-replace-in-results’) reads a REPLACEMENT string,
just like ordinary ‘M-x query-replace-regexp’.  It then renames the
identifiers shown in the ‘*xref*’ buffer in all the places in all the
files where these identifiers are referenced, such that their new name
is REPLACEMENT.  This is useful when you rename your identifiers as part
of refactoring.  This command should be invoked in the ‘*xref*’ buffer
generated by ‘M-?’.  By default, the command replaces the entire name of
each identifier with REPLACEMENT, but if invoked with a prefix argument,
the command prompts for a regexp to match identifier names, and replaces
only the matches of that regexp in the names of the identifiers with
REPLACEMENT.

   ‘M-x xref-find-references-and-replace’ works similarly to
‘xref-query-replace-in-results’, but is more convenient when you want to
rename a single identifier specified by its name FROM.

   ‘M-x tags-search’ reads a regexp using the minibuffer, then searches
for matches in all the files in the selected tags table, one file at a
time.  It displays the name of the file being searched so you can follow
its progress.  As soon as it finds an occurrence, ‘tags-search’ returns.
This command requires tags tables to be available (*note Tags Tables::).

   Having found one match with ‘tags-search’, you probably want to find
all the rest.  ‘M-x fileloop-continue’ resumes the ‘tags-search’,
finding one more match.  This searches the rest of the current buffer,
followed by the remaining files of the tags table.

   ‘M-x tags-query-replace’ performs a single ‘query-replace-regexp’
through all the files in the tags table.  It reads a regexp to search
for and a string to replace with, just like ordinary ‘M-x
query-replace-regexp’.  It searches much like ‘M-x tags-search’, but
repeatedly, processing matches according to your input.  *Note Query
Replace::, for more information on query replace.

   You can control the case-sensitivity of tags search commands by
customizing the value of the variable ‘tags-case-fold-search’.  The
default is to use the same setting as the value of ‘case-fold-search’
(*note Lax Search::).

   It is possible to get through all the files in the tags table with a
single invocation of ‘M-x tags-query-replace’.  But often it is useful
to exit temporarily, which you can do with any input event that has no
special query replace meaning.  You can resume the query replace
subsequently by typing ‘M-x fileloop-continue’; this command resumes the
last tags search or replace command that you did.  For instance, to skip
the rest of the current file, you can type ‘M-> M-x fileloop-continue’.

   Note that the commands described above carry out much broader
searches than the ‘xref-find-definitions’ family.  The
‘xref-find-definitions’ commands search only for definitions of
identifiers that match your string or regexp.  The commands
‘xref-find-references’, ‘tags-search’, and ‘tags-query-replace’ find
every occurrence of the identifier or regexp, as ordinary search
commands and replace commands do in the current buffer.

   As an alternative to ‘xref-find-references’ and ‘tags-search’, you
can run ‘grep’ as a subprocess and have Emacs show you the matching
lines one by one.  *Note Grep Searching::.


File: emacs.info,  Node: List Identifiers,  Prev: Identifier Search,  Up: Find Identifiers

29.4.1.4 Identifier Inquiries
.............................

‘C-M-i’
‘M-<TAB>’
     Perform completion on the text around point, possibly using the
     selected tags table if one is loaded (‘completion-at-point’).

‘M-x list-tags <RET> FILE <RET>’
     Display a list of the identifiers defined in the program file FILE.

‘C-M-. REGEXP <RET>’
     Display a list of all identifiers matching REGEXP
     (‘xref-find-apropos’).  *Note Looking Up Identifiers::.

‘M-x tags-next-file’
     Visit files recorded in the selected tags table.

   In most programming language modes, you can type ‘C-M-i’ or ‘M-<TAB>’
(‘completion-at-point’) to complete the symbol at point.  Some modes
provide specialized completion for this command tailored to the mode;
for those that don’t, if there is a tags table loaded, this command can
use it to generate completion candidates.  *Note Symbol Completion::.

   ‘M-x list-tags’ reads the name of one of the files covered by the
selected tags table, and displays a list of tags defined in that file.
Do not include a directory as part of the file name unless the file name
recorded in the tags table includes a directory.  This command works
only with the etags backend, and requires a tags table for the project
to be available.  *Note Tags Tables::.  If used interactively, the
default tag is file name of the current buffer if used interactively.

   ‘M-x tags-next-file’ visits files covered by the selected tags table.
The first time it is called, it visits the first file covered by the
table.  Each subsequent call visits the next covered file, unless a
prefix argument is supplied, in which case it returns to the first file.
This command requires a tags table to be selected.


File: emacs.info,  Node: Tags Tables,  Next: Select Tags Table,  Prev: Find Identifiers,  Up: Xref

29.4.2 Tags Tables
------------------

A “tags table” records the tags(1) extracted by scanning the source code
of a certain program or a certain document.  Tags extracted from
generated files reference the original files, rather than the generated
files that were scanned during tag extraction.  Examples of generated
files include C files generated from Cweb source files, from a Yacc
parser, or from Lex scanner definitions; ‘.i’ preprocessed C files; and
Fortran files produced by preprocessing ‘.fpp’ source files.

   To produce a tags table, you run the ‘etags’ shell command on a
document or the source code file.  The ‘etags’ program writes the tags
to a “tags table file”, or “tags file” in short.  The conventional name
for a tags file is ‘TAGS’.  *Note Create Tags Table::.  (It is also
possible to create a tags table by using one of the commands from other
packages that can produce such tables in the same format.)

   Emacs uses the tags tables via the ‘etags’ package as one of the
supported backends for ‘xref’.  Because tags tables are produced by the
‘etags’ command that is part of an Emacs distribution, we describe tags
tables in more detail here.

   The Ebrowse facility is similar to ‘etags’ but specifically tailored
for C++.  *Note Ebrowse: (ebrowse)Top.  The Semantic package provides
another way to generate and use tags, separate from the ‘etags’
facility.  *Note Semantic::.

* Menu:

* Tag Syntax::          Tag syntax for various types of code and text files.
* Create Tags Table::   Creating a tags table with ‘etags’.
* Etags Regexps::       Create arbitrary tags using regular expressions.

   ---------- Footnotes ----------

   (1) A “tag” is a synonym for identifier reference.  Commands and
features based on the ‘etags’ package traditionally use “tag” with this
meaning, and this subsection follows that tradition.


File: emacs.info,  Node: Tag Syntax,  Next: Create Tags Table,  Up: Tags Tables

29.4.2.1 Source File Tag Syntax
...............................

Here is how tag syntax is defined for the most popular languages:

   • In C code, any C function or typedef is a tag, and so are
     definitions of ‘struct’, ‘union’ and ‘enum’.  ‘#define’ macro
     definitions, ‘#undef’ and ‘enum’ constants are also tags, unless
     you specify ‘--no-defines’ when making the tags table.  Similarly,
     global variables are tags, unless you specify ‘--no-globals’, and
     so are struct members, unless you specify ‘--no-members’.  Use of
     ‘--no-globals’, ‘--no-defines’ and ‘--no-members’ can make the tags
     table file much smaller.

     You can tag function declarations and external variables in
     addition to function definitions by giving the ‘--declarations’
     option to ‘etags’.

   • In C++ code, in addition to all the tag constructs of C code,
     member functions are also recognized; member variables are also
     recognized, unless you use the ‘--no-members’ option.  ‘operator’
     definitions have tag names like ‘operator+’.  If you specify the
     ‘--class-qualify’ option, tags for variables and functions in
     classes are named ‘CLASS::VARIABLE’ and ‘CLASS::FUNCTION’.  By
     default, class methods and members are not class-qualified, which
     allows to identify their names in the sources more accurately.

   • In Java code, tags include all the constructs recognized in C++,
     plus the ‘interface’, ‘extends’ and ‘implements’ constructs.  Tags
     for variables and functions in classes are named ‘CLASS.VARIABLE’
     and ‘CLASS.FUNCTION’.

   • In LaTeX documents, the arguments for ‘\chapter’, ‘\section’,
     ‘\subsection’, ‘\subsubsection’, ‘\eqno’, ‘\label’, ‘\ref’,
     ‘\cite’, ‘\bibitem’, ‘\part’, ‘\appendix’, ‘\entry’, ‘\index’,
     ‘\def’, ‘\newcommand’, ‘\renewcommand’, ‘\newenvironment’ and
     ‘\renewenvironment’ are tags.

     Other commands can make tags as well, if you specify them in the
     environment variable ‘TEXTAGS’ before invoking ‘etags’.  The value
     of this environment variable should be a colon-separated list of
     command names.  For example,

          TEXTAGS="mycommand:myothercommand"
          export TEXTAGS

     specifies (using Bourne shell syntax) that the commands
     ‘\mycommand’ and ‘\myothercommand’ also define tags.

   • In Lisp code, any function defined with ‘defun’, any variable
     defined with ‘defvar’ or ‘defconst’, and in general the first
     argument of any expression that starts with ‘(def’ in column zero
     is a tag.  As an exception, expressions of the form ‘(defvar FOO)’
     are treated as declarations, and are only tagged if the
     ‘--declarations’ option is given.

   • In Scheme code, tags include anything defined with ‘def’ or with a
     construct whose name starts with ‘def’.  They also include
     variables set with ‘set!’ at top level in the file.

   Several other languages are also supported:

   • In Ada code, functions, procedures, packages, tasks and types are
     tags.  Use the ‘--packages-only’ option to create tags for packages
     only.

     In Ada, the same name can be used for different kinds of entity
     (e.g., for a procedure and for a function).  Also, for things like
     packages, procedures and functions, there is the spec (i.e., the
     interface) and the body (i.e., the implementation).  To make it
     easier to pick the definition you want, Ada tag names have suffixes
     indicating the type of entity:

     ‘/b’
          package body.
     ‘/f’
          function.
     ‘/k’
          task.
     ‘/p’
          procedure.
     ‘/s’
          package spec.
     ‘/t’
          type.

     Thus, ‘M-x find-tag <RET> bidule/b <RET>’ will go directly to the
     body of the package ‘bidule’, while ‘M-x find-tag <RET> bidule
     <RET>’ will just search for any tag ‘bidule’.

   • In assembler code, labels appearing at the start of a line,
     followed by a colon, are tags.

   • In Bison or Yacc input files, each rule defines as a tag the
     nonterminal it constructs.  The portions of the file that contain C
     code are parsed as C code.

   • In Cobol code, tags are paragraph names; that is, any word starting
     in column 8 and followed by a period.

   • In Erlang code, the tags are the functions, records and macros
     defined in the file.

   • In Fortran code, functions, subroutines and block data are tags.

   • In Go code, packages, functions, and types are tags.

   • In HTML input files, the tags are the ‘title’ and the ‘h1’, ‘h2’,
     ‘h3’ headers.  Also, tags are ‘name=’ in anchors and all
     occurrences of ‘id=’.

   • In Lua input files, all functions are tags.

   • In makefiles, targets are tags; additionally, variables are tags
     unless you specify ‘--no-globals’.

   • In Objective C code, tags include Objective C definitions for
     classes, class categories, methods and protocols.  Tags for
     variables and functions in classes are named ‘CLASS::VARIABLE’ and
     ‘CLASS::FUNCTION’.

   • In Pascal code, the tags are the functions and procedures defined
     in the file.

   • In Perl code, the tags are the packages, subroutines and variables
     defined by the ‘package’, ‘sub’, ‘use constant’, ‘my’, and ‘local’
     keywords.  Use ‘--globals’ if you want to tag global variables.
     Tags for subroutines are named ‘PACKAGE::SUB’.  The name for
     subroutines defined in the default package is ‘main::SUB’.

   • In PHP code, tags are functions, classes and defines.  Vars are
     tags too, unless you use the ‘--no-members’ option.

   • In PostScript code, the tags are the functions.

   • In Prolog code, tags are predicates and rules at the beginning of
     line.

   • In Python code, ‘def’ or ‘class’ at the beginning of a line
     generate a tag.

   • In Ruby code, ‘def’ or ‘class’ or ‘module’ at the beginning of a
     line generate a tag.  Constants also generate tags.

   • In Rust code, tags anything defined with ‘fn’, ‘enum’, ‘struct’ or
     ‘macro_rules!’.

   You can also generate tags based on regexp matching (*note Etags
Regexps::) to handle other formats and languages.


File: emacs.info,  Node: Create Tags Table,  Next: Etags Regexps,  Prev: Tag Syntax,  Up: Tags Tables

29.4.2.2 Creating Tags Tables
.............................

The ‘etags’ program is used to create a tags table file.  It knows the
syntax of several languages, as described in *note Tag Syntax::.  Here
is how to run ‘etags’:

     etags INPUTFILES...

The ‘etags’ program reads the specified files, and writes a tags table
named ‘TAGS’ in the current working directory.  You can optionally
specify a different file name for the tags table by using the
‘--output=FILE’ option; specifying ‘-’ as a file name prints the tags
table to standard output.  You can also append the newly created tags
table to an existing file by using the ‘--append’ option.

   If the specified files don’t exist, ‘etags’ looks for compressed
versions of them and uncompresses them to read them.  Under MS-DOS,
‘etags’ also looks for file names like ‘mycode.cgz’ if it is given
‘mycode.c’ on the command line and ‘mycode.c’ does not exist.

   If the tags table becomes outdated due to changes in the files
described in it, you can update it by running the ‘etags’ program again.
If the tags table does not record a tag, or records it for the wrong
file, then Emacs will not be able to find that definition until you
update the tags table.  But if the position recorded in the tags table
becomes a little bit wrong (due to other editing), Emacs will still be
able to find the right position, with a slight delay.

   Thus, there is no need to update the tags table after each edit.  You
should update a tags table when you define new tags that you want to
have listed, or when you move tag definitions from one file to another,
or when changes become substantial.

   You can make a tags table “include” another tags table, by passing
the ‘--include=FILE’ option to ‘etags’.  It then covers all the files
covered by the included tags file, as well as its own.

   If you specify the source files with relative file names when you run
‘etags’, the tags file will contain file names relative to the directory
where the tags file was initially written.  This way, you can move an
entire directory tree containing both the tags file and the source
files, and the tags file will still refer correctly to the source files.
If the tags file is ‘-’ or is in the ‘/dev’ directory, however, the file
names are made relative to the current working directory.  This is
useful, for example, when writing the tags to the standard output.

   When using a relative file name, it should not be a symbolic link
pointing to a tags file in a different directory, because this would
generally render the file names invalid.

   If you specify absolute file names as arguments to ‘etags’, then the
tags file will contain absolute file names.  This way, the tags file
will still refer to the same files even if you move it, as long as the
source files remain in the same place.  Absolute file names start with
‘/’, or with ‘DEVICE:/’ on MS-DOS and MS-Windows.

   When you want to make a tags table from a great number of files, you
may have problems listing them on the command line, because some systems
have a limit on its length.  You can circumvent this limit by telling
‘etags’ to read the file names from its standard input, by typing a dash
in place of the file names, like this:

     find . -name "*.[chCH]" -print | etags -

   ‘etags’ recognizes the language used in an input file based on its
file name and contents.  It first tries to match the file’s name and
extension to the ones commonly used with certain languages.  Some
languages have interpreters with known names (e.g., ‘perl’ for Perl or
‘pl’ for Prolog), so ‘etags’ next looks for an interpreter specification
of the form ‘#!INTERP’ on the first line of an input file, and matches
that against known interpreters.  If none of that works, or if you want
to override the automatic detection of the language, you can specify the
language explicitly with the ‘--language=NAME’ option.  You can intermix
these options with file names; each one applies to the file names that
follow it.  Specify ‘--language=auto’ to tell ‘etags’ to resume guessing
the language from the file names and file contents.  Specify
‘--language=none’ to turn off language-specific processing entirely;
then ‘etags’ recognizes tags by regexp matching alone (*note Etags
Regexps::).  This comes in handy when an input file uses a language not
yet supported by ‘etags’, and you want to avoid having ‘etags’ fall back
on Fortran and C as the default languages.

   The option ‘--parse-stdin=FILE’ is mostly useful when calling ‘etags’
from programs.  It can be used (only once) in place of a file name on
the command line.  ‘etags’ will read from standard input and mark the
produced tags as belonging to the file FILE.

   For C and C++, if the source files don’t observe the GNU Coding
Standards’ convention if having braces (‘{’ and ‘}’) in column zero only
for top-level definitions, like functions and ‘struct’ definitions, we
advise that you use the ‘--ignore-indentation’ option, to prevent
‘etags’ from incorrectly interpreting closing braces in column zero.

   ‘etags --help’ outputs the list of the languages ‘etags’ knows, and
the file name rules for guessing the language.  It also prints a list of
all the available ‘etags’ options, together with a short explanation.
If followed by one or more ‘--language=LANG’ options, it outputs
detailed information about how tags are generated for LANG.


File: emacs.info,  Node: Etags Regexps,  Prev: Create Tags Table,  Up: Tags Tables

29.4.2.3 Etags Regexps
......................

The ‘--regex’ option to ‘etags’ allows tags to be recognized by regular
expression matching.  You can intermix this option with file names; each
one applies to the source files that follow it.  If you specify multiple
‘--regex’ options, all of them are used in parallel.  The syntax is:

     --regex=[{LANGUAGE}]/TAGREGEXP/[NAMEREGEXP/]MODIFIERS

The essential part of the option value is TAGREGEXP, the regexp for
matching tags.  It is always used anchored, that is, it only matches at
the beginning of a line.  If you want to allow indented tags, use a
regexp that matches initial whitespace; start it with ‘[ \t]*’.

   In these regular expressions, ‘\’ quotes the next character, and all
the C character escape sequences are supported: ‘\a’ for bell, ‘\b’ for
back space, ‘\e’ for escape, ‘\f’ for formfeed, ‘\n’ for newline, ‘\r’
for carriage return, ‘\t’ for tab, and ‘\v’ for vertical tab.  In
addition, ‘\d’ stands for the ‘DEL’ character.

   Ideally, TAGREGEXP should not match more characters than are needed
to recognize what you want to tag.  If the syntax requires you to write
TAGREGEXP so it matches more characters beyond the tag itself, you
should add a NAMEREGEXP, to pick out just the tag.  This will enable
Emacs to find tags more accurately and to do completion on tag names
more reliably.  In NAMEREGEXP, it is frequently convenient to use “back
references” (*note Regexp Backslash::) to parenthesized groupings
‘\( ... \)’ in TAGREGEXP.  For example, ‘\1’ refers to the first such
parenthesized grouping.  You can find some examples of this below.

   The MODIFIERS are a sequence of zero or more characters that modify
the way ‘etags’ does the matching.  A regexp with no modifiers is
applied sequentially to each line of the input file, in a case-sensitive
way.  The modifiers and their meanings are:

‘i’
     Ignore case when matching this regexp.
‘m’
     Match this regular expression against the whole file, so that
     multi-line matches are possible.
‘s’
     Match this regular expression against the whole file, and allow ‘.’
     in TAGREGEXP to match newlines.

   The ‘-R’ option cancels all the regexps defined by preceding
‘--regex’ options.  It too applies to the file names following it.
Here’s an example:

     etags --regex=/REG1/i voo.doo --regex=/REG2/m \
         bar.ber -R --lang=lisp los.er

Here ‘etags’ chooses the parsing language for ‘voo.doo’ and ‘bar.ber’
according to their contents.  ‘etags’ also uses REG1 to recognize
additional tags in ‘voo.doo’, and both REG1 and REG2 to recognize
additional tags in ‘bar.ber’.  REG1 is checked against each line of
‘voo.doo’ and ‘bar.ber’, in a case-insensitive way, while REG2 is
checked against the whole ‘bar.ber’ file, permitting multi-line matches,
in a case-sensitive way.  ‘etags’ uses only the Lisp tags rules, with no
user-specified regexp matching, to recognize tags in ‘los.er’.

   You can restrict a ‘--regex’ option to match only files of a given
language by using the optional prefix {LANGUAGE}.  (‘etags --help’
prints the list of languages recognized by ‘etags’.)  This is
particularly useful when storing many predefined regular expressions for
‘etags’ in a file.  The following example tags the ‘DEFVAR’ macros in
the Emacs source files, for the C language only:

     --regex='{c}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/\1/'

When you have complex regular expressions, you can store the list of
them in a file.  The following option syntax instructs ‘etags’ to read
two files of regular expressions.  The regular expressions contained in
the second file are matched without regard to case.

     --regex=@CASE-SENSITIVE-FILE --ignore-case-regex=@IGNORE-CASE-FILE

A regex file for ‘etags’ contains one regular expression per line.
Empty lines, and lines beginning with space or tab are ignored.  When
the first character in a line is ‘@’, ‘etags’ assumes that the rest of
the line is the name of another file of regular expressions; thus, one
such file can include another file.  All the other lines are taken to be
regular expressions.  If the first non-whitespace text on the line is
‘--’, that line is a comment.

   For example, we can create a file called ‘emacs.tags’ with the
following contents:

             -- This is for GNU Emacs C source files
     {c}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/\1/

and then use it like this:

     etags --regex=@emacs.tags *.[ch] */*.[ch]

   Here are some more examples.  The regexps are quoted to protect them
from shell interpretation.

   • Tag Octave files:

          etags --language=none \
                --regex='/[ \t]*function.*=[ \t]*\([^ \t]*\)[ \t]*(/\1/' \
                --regex='/###key \(.*\)/\1/' \
                --regex='/[ \t]*global[ \t].*/' \
                *.m

     Note that tags are not generated for scripts, so that you have to
     add a line by yourself of the form ‘###key SCRIPTNAME’ if you want
     to jump to it.

   • Tag Tcl files:

          etags --language=none --regex='/proc[ \t]+\([^ \t]+\)/\1/' *.tcl

   • Tag VHDL files:

          etags --language=none \
            --regex='/[ \t]*\(ARCHITECTURE\|CONFIGURATION\) +[^ ]* +OF/' \
            --regex='/[ \t]*\(ATTRIBUTE\|ENTITY\|FUNCTION\|PACKAGE\
            \( BODY\)?\|PROCEDURE\|PROCESS\|TYPE\)[ \t]+\([^ \t(]+\)/\3/'


File: emacs.info,  Node: Select Tags Table,  Prev: Tags Tables,  Up: Xref

29.4.3 Selecting a Tags Table
-----------------------------

Emacs has at any time at most one “selected” tags table.  All the
commands for working with tags tables use the selected one first.  To
select a tags table, type ‘M-x visit-tags-table’, which reads the tags
table file name as an argument, with ‘TAGS’ defaulting to the first
directory that contains a file named ‘TAGS’ encountered when recursively
searching upward from the default directory.

   Emacs does not actually read in the tags table contents until you try
to use them; all ‘visit-tags-table’ does is store the file name in the
variable ‘tags-file-name’, and not much more.  The variable’s initial
value is ‘nil’; that value tells all the commands for working with tags
tables that they must ask for a tags table file name to use.

   In addition to the selected tags table, Emacs maintains the list of
several tags tables that you use together.  For example, if you are
working on a program that uses a library, you may wish to have the tags
tables of both the program and the library available, so that Emacs
could easily find identifiers from both.  If the selected tags table
doesn’t have the identifier or doesn’t mention the source file a tags
command needs, the command will try using all the other tags tables in
the current list of tags tables.

   Using ‘visit-tags-table’ to load a new tags table when another tags
table is already loaded gives you a choice: you can add the new tags
table to the current list of tags tables, or discard the current list
and start a new list.  If you start a new list, the new tags table is
used _instead_ of others.  If you add the new table to the current list,
it is used _as well as_ the others.

   You can specify a precise list of tags tables by setting the variable
‘tags-table-list’ to a list of directory names, like this:

     (setq tags-table-list
           '("~/.emacs.d" "/usr/local/lib/emacs/src"))

This tells the tags commands to look at the ‘TAGS’ files in your
‘~/.emacs.d’ directory and in the ‘/usr/local/lib/emacs/src’ directory.
The order depends on which file you are in and which tags table mentions
that file.

   Do not set both ‘tags-file-name’ and ‘tags-table-list’.


File: emacs.info,  Node: EDE,  Next: Emerge,  Prev: Xref,  Up: Maintaining

29.5 Emacs Development Environment
==================================

EDE (“Emacs Development Environment”) is a package that simplifies the
task of creating, building, and debugging large programs with Emacs.  It
provides some of the features of an IDE, or “Integrated Development
Environment”, in Emacs.

   This section provides a brief description of EDE usage.  For full
details, see *note EDE: (ede)Top.

   EDE is implemented as a global minor mode (*note Minor Modes::).  To
enable it, type ‘M-x global-ede-mode’ or click on the ‘Project Support
(EDE)’ item in the ‘Tools’ menu.  You can also enable EDE each time you
start Emacs, by adding the following line to your initialization file:

     (global-ede-mode t)

Activating EDE adds a menu named ‘Development’ to the menu bar.  Many
EDE commands, including the ones described below, can be invoked from
this menu.

   EDE organizes files into “projects”, which correspond to directory
trees.  The “project root” is the topmost directory of a project.  To
define a new project, visit a file in the desired project root and type
‘M-x ede-new’.  This command prompts for a “project type”, which refers
to the underlying method that EDE will use to manage the project (*note
EDE: (ede)Creating a project.).  The most common project types are
‘Make’, which uses Makefiles, and ‘Automake’, which uses GNU Automake
(*note Automake: (automake)Top.).  In both cases, EDE also creates a
file named ‘Project.ede’, which stores information about the project.

   A project may contain one or more “targets”.  A target can be an
object file, executable program, or some other type of file, which is
built from one or more of the files in the project.

   To add a new “target” to a project, type ‘C-c . t’ (‘M-x
ede-new-target’).  This command also asks if you wish to add the current
file to that target, which means that the target is to be built from
that file.  After you have defined a target, you can add more files to
it by typing ‘C-c . a’ (‘ede-add-file’).

   To build a target, type ‘C-c . c’ (‘ede-compile-target’).  To build
all the targets in the project, type ‘C-c . C’ (‘ede-compile-project’).
EDE uses the file types to guess how the target should be built.


File: emacs.info,  Node: Emerge,  Next: Bug Reference,  Prev: EDE,  Up: Maintaining

29.6 Merging Files with Emerge
==============================

It’s not unusual for programmers to get their signals crossed and modify
the same program in two different directions.  To recover from this
confusion, you need to merge the two versions.  Emerge makes this
easier.  For other ways to compare files, see *note Comparing Files::,
and *note Ediff: (ediff)Top.

* Menu:

* Overview of Emerge::     How to start Emerge.  Basic concepts.
* Submodes of Emerge::     Fast mode vs. Edit mode.
                             Skip Prefers mode and Auto Advance mode.
* State of Difference::    You do the merge by specifying state A or B
                             for each difference.
* Merge Commands::         Commands for selecting a difference,
                             changing states of differences, etc.
* Exiting Emerge::         What to do when you’ve finished the merge.
* Combining in Emerge::    How to keep both alternatives for a difference.
* Fine Points of Emerge::  Miscellaneous issues.


File: emacs.info,  Node: Overview of Emerge,  Next: Submodes of Emerge,  Up: Emerge

29.6.1 Overview of Emerge
-------------------------

To start Emerge, run one of these four commands:

‘M-x emerge-files’
     Merge two specified files.

‘M-x emerge-files-with-ancestor’
     Merge two specified files, with reference to a common ancestor.

‘M-x emerge-buffers’
     Merge two buffers.

‘M-x emerge-buffers-with-ancestor’
     Merge two buffers with reference to a common ancestor in a third
     buffer.

   The Emerge commands compare two files or buffers, and display the
comparison in three buffers: one for each input text (the “A buffer” and
the “B buffer”), and one (the “merge buffer”) where merging takes place.
The merge buffer shows the full merged text, not just the differences.
Wherever the two input texts differ, you can choose which one of them to
include in the merge buffer.

   The Emerge commands that take input from existing buffers use only
the accessible portions of those buffers, if they are narrowed.  *Note
Narrowing::.

   If a common ancestor version is available, from which the two texts
to be merged were both derived, Emerge can use it to guess which
alternative is right.  Wherever one current version agrees with the
ancestor, Emerge presumes that the other current version is a deliberate
change which should be kept in the merged version.  Use the
‘with-ancestor’ commands if you want to specify a common ancestor text.
These commands read three file or buffer names—variant A, variant B, and
the common ancestor.

   After the comparison is done and the buffers are prepared, the
interactive merging starts.  You control the merging by typing special
“merge commands” in the merge buffer (*note Merge Commands::).  For each
run of differences between the input texts, you can choose which one of
them to keep, or edit them both together.

   The merge buffer uses a special major mode, Emerge mode, with
commands for making these choices.  But you can also edit the buffer
with ordinary Emacs commands.

   At any given time, the attention of Emerge is focused on one
particular difference, called the “selected” difference.  This
difference is marked off in the three buffers like this:

     vvvvvvvvvvvvvvvvvvvv
     TEXT THAT DIFFERS
     ^^^^^^^^^^^^^^^^^^^^

Emerge numbers all the differences sequentially and the mode line always
shows the number of the selected difference.

   Normally, the merge buffer starts out with the A version of the text.
But when the A version of a difference agrees with the common ancestor,
then the B version is initially preferred for that difference.

   Emerge leaves the merged text in the merge buffer when you exit.  At
that point, you can save it in a file with ‘C-x C-w’.  If you give a
numeric argument to ‘emerge-files’ or ‘emerge-files-with-ancestor’, it
reads the name of the output file using the minibuffer.  (This is the
last file name those commands read.)  Then exiting from Emerge saves the
merged text in the output file.

   Normally, Emerge commands save the output buffer in its file when you
exit.  If you abort Emerge with ‘C-]’, the Emerge command does not save
the output buffer, but you can save it yourself if you wish.


File: emacs.info,  Node: Submodes of Emerge,  Next: State of Difference,  Prev: Overview of Emerge,  Up: Emerge

29.6.2 Submodes of Emerge
-------------------------

You can choose between two modes for giving merge commands: Fast mode
and Edit mode.  In Fast mode, basic merge commands are single
characters, but ordinary Emacs commands are disabled.  This is
convenient if you use only merge commands.  In Edit mode, all merge
commands start with the prefix key ‘C-c C-c’, and the normal Emacs
commands are also available.  This allows editing the merge buffer, but
slows down Emerge operations.

   Use ‘e’ to switch to Edit mode, and ‘C-c C-c f’ to switch to Fast
mode.  The mode line indicates Edit and Fast modes with ‘E’ and ‘F’.

   Emerge has two additional submodes that affect how particular merge
commands work: Auto Advance mode and Skip Prefers mode.

   If Auto Advance mode is in effect, the ‘a’ and ‘b’ commands advance
to the next difference.  This lets you go through the merge faster as
long as you simply choose one of the alternatives from the input.  The
mode line indicates Auto Advance mode with ‘A’.

   If Skip Prefers mode is in effect, the ‘n’ and ‘p’ commands skip over
differences in states “prefer-A” and “prefer-B” (*note State of
Difference::).  Thus you see only differences for which neither version
is presumed correct.  The mode line indicates Skip Prefers mode with
‘S’.  This mode is only relevant when there is an ancestor.

   Use the command ‘s a’ (‘emerge-auto-advance’) to set or clear Auto
Advance mode.  Use ‘s s’ (‘emerge-skip-prefers’) to set or clear Skip
Prefers mode.  These commands turn on the mode with a positive argument,
turn it off with a negative or zero argument, and toggle the mode with
no argument.


File: emacs.info,  Node: State of Difference,  Next: Merge Commands,  Prev: Submodes of Emerge,  Up: Emerge

29.6.3 State of a Difference
----------------------------

In the merge buffer, a difference is marked with lines of ‘v’ and ‘^’
characters.  Each difference has one of these seven states:

A
     The difference is showing the A version.  The ‘a’ command always
     produces this state; the mode line indicates it with ‘A’.

B
     The difference is showing the B version.  The ‘b’ command always
     produces this state; the mode line indicates it with ‘B’.

default-A
default-B
     The difference is showing the A or the B state by default, because
     you haven’t made a choice.  All differences start in the default-A
     state (and thus the merge buffer is a copy of the A buffer), except
     those for which one alternative is preferred (see below).

     When you select a difference, its state changes from default-A or
     default-B to plain A or B.  Thus, the selected difference never has
     state default-A or default-B, and these states are never displayed
     in the mode line.

     The command ‘d a’ chooses default-A as the default state, and ‘d b’
     chooses default-B.  This chosen default applies to all differences
     that you have never selected and for which no alternative is
     preferred.  If you are moving through the merge sequentially, the
     differences you haven’t selected are those following the selected
     one.  Thus, while moving sequentially, you can effectively make the
     A version the default for some sections of the merge buffer and the
     B version the default for others by using ‘d a’ and ‘d b’ between
     sections.

prefer-A
prefer-B
     The difference is showing the A or B state because it is
     “preferred”.  This means that you haven’t made an explicit choice,
     but one alternative seems likely to be right because the other
     alternative agrees with the common ancestor.  Thus, where the A
     buffer agrees with the common ancestor, the B version is preferred,
     because chances are it is the one that was actually changed.

     These two states are displayed in the mode line as ‘A*’ and ‘B*’.

combined
     The difference is showing a combination of the A and B states, as a
     result of the ‘x c’ or ‘x C’ commands.

     Once a difference is in this state, the ‘a’ and ‘b’ commands don’t
     do anything to it unless you give them a numeric argument.

     The mode line displays this state as ‘comb’.


File: emacs.info,  Node: Merge Commands,  Next: Exiting Emerge,  Prev: State of Difference,  Up: Emerge

29.6.4 Merge Commands
---------------------

Here are the Merge commands for Fast mode; in Edit mode, precede them
with ‘C-c C-c’:

‘p’
     Select the previous difference.

‘n’
     Select the next difference.

‘a’
     Choose the A version of this difference.

‘b’
     Choose the B version of this difference.

‘C-u N j’
     Select difference number N.

‘.’
     Select the difference containing point.

‘q’
     Quit—finish the merge.

‘C-]’
     Abort—exit merging and do not save the output.

‘f’
     Go into Fast mode.  (In Edit mode, this is actually ‘C-c C-c f’.)

‘e’
     Go into Edit mode.

‘l’
     Recenter (like ‘C-l’) all three windows.  With an argument,
     reestablish the default three-window display.

‘-’
     Specify part of a prefix numeric argument.

‘DIGIT’
     Also specify part of a prefix numeric argument.

‘d a’
     Choose the A version as the default from here down in the merge
     buffer.

‘d b’
     Choose the B version as the default from here down in the merge
     buffer.

‘c a’
     Copy the A version of this difference into the kill ring.

‘c b’
     Copy the B version of this difference into the kill ring.

‘i a’
     Insert the A version of this difference at point.

‘i b’
     Insert the B version of this difference at point.

‘m’
     Put point and mark around the difference.

‘^’
     Scroll all three windows down (like ‘M-v’).

‘v’
     Scroll all three windows up (like ‘C-v’).

‘<’
     Scroll all three windows left (like ‘C-x <’).

‘>’
     Scroll all three windows right (like ‘C-x >’).

‘|’
     Reset horizontal scroll on all three windows.

‘x 1’
     Shrink the merge window to one line.  (Use ‘C-u l’ to restore it to
     full size.)

‘x c’
     Combine the two versions of this difference (*note Combining in
     Emerge::).

‘x f’
     Show the names of the files/buffers Emerge is operating on, in a
     Help window.  (Use ‘C-u l’ to restore windows.)

‘x j’
     Join this difference with the following one.  (‘C-u x j’ joins this
     difference with the previous one.)

‘x s’
     Split this difference into two differences.  Before you use this
     command, position point in each of the three buffers at the place
     where you want to split the difference.

‘x t’
     Trim identical lines off the top and bottom of the difference.
     Such lines occur when the A and B versions are identical but differ
     from the ancestor version.


File: emacs.info,  Node: Exiting Emerge,  Next: Combining in Emerge,  Prev: Merge Commands,  Up: Emerge

29.6.5 Exiting Emerge
---------------------

The ‘q’ command (‘emerge-quit’) finishes the merge, storing the results
into the output file if you specified one.  It restores the A and B
buffers to their proper contents, or kills them if they were created by
Emerge and you haven’t changed them.  It also disables the Emerge
commands in the merge buffer, since executing them later could damage
the contents of the various buffers.

   ‘C-]’ aborts the merge.  This means exiting without writing the
output file.  If you didn’t specify an output file, then there is no
real difference between aborting and finishing the merge.

   If the Emerge command was called from another Lisp program, then its
return value is ‘t’ for successful completion, or ‘nil’ if you abort.


File: emacs.info,  Node: Combining in Emerge,  Next: Fine Points of Emerge,  Prev: Exiting Emerge,  Up: Emerge

29.6.6 Combining the Two Versions
---------------------------------

Sometimes you want to keep _both_ alternatives for a particular
difference.  To do this, use ‘x c’, which edits the merge buffer like
this:

     #ifdef NEW
     VERSION FROM B BUFFER
     #else /* not NEW */
     VERSION FROM A BUFFER
     #endif /* not NEW */

While this example shows C preprocessor conditionals delimiting the two
alternative versions, you can specify the strings to use by setting the
variable ‘emerge-combine-versions-template’ to a string of your choice.
In the string, ‘%a’ says where to put version A, and ‘%b’ says where to
put version B.  The default setting, which produces the results shown
above, looks like this:

     "#ifdef NEW\n%b#else /* not NEW */\n%a#endif /* not NEW */\n"


File: emacs.info,  Node: Fine Points of Emerge,  Prev: Combining in Emerge,  Up: Emerge

29.6.7 Fine Points of Emerge
----------------------------

During the merge, you mustn’t try to edit the A and B buffers yourself.
Emerge modifies them temporarily, but ultimately puts them back the way
they were.

   You can have any number of merges going at once—just don’t use any
one buffer as input to more than one merge at once, since the temporary
changes made in these buffers would get in each other’s way.

   Starting Emerge can take a long time because it needs to compare the
files fully.  Emacs can’t do anything else until ‘diff’ finishes.
Perhaps in the future someone will change Emerge to do the comparison in
the background when the input files are large—then you could keep on
doing other things with Emacs until Emerge is ready to accept commands.

   After setting up the merge, Emerge runs the hook
‘emerge-startup-hook’.  *Note Hooks::.


File: emacs.info,  Node: Bug Reference,  Prev: Emerge,  Up: Maintaining

29.7 Bug Reference
==================

Most projects with a certain amount of users track bug reports in some
issue tracking software which assigns each report a unique and short
number or identifier.  Those are used to reference a given bug, e.g., in
a source code comment above the code fixing some bug, in documentation
files, or in discussions on some mailing list or IRC channel.

   The minor modes ‘bug-reference-mode’ and ‘bug-reference-prog-mode’
highlight such bug references and make it possible to follow them to the
corresponding bug report on the project’s issue tracker.
‘bug-reference-prog-mode’ is a variant of ‘bug-reference-mode’ which
highlights bug references only inside source code comments and strings.

   For its working, bug reference mode needs to know the syntax of bug
references (‘bug-reference-bug-regexp’), and the URL of the tracker
where bug reports can be looked up (‘bug-reference-url-format’).  Since
those are typically different from project to project, it makes sense to
specify them in *note Directory Variables:: or *note File Variables::.

   For example, let’s assume in our project, we usually write references
to bug reports as bug#1234, or Bug-1234 and that this bug’s page on the
issue tracker is <https://project.org/issues/1234>, then these local
variables section would do.

     ;; Local Variables:
     ;; bug-reference-bug-regexp: "\\([Bb]ug[#-]\\([0-9]+\\)\\)"
     ;; bug-reference-url-format: "https://project.org/issues/%s"
     ;; End:

   The string captured by the first regexp group defines the bounds of
the overlay bug-reference creates, i.e., the part which is highlighted
and made clickable.

   The string captured by the second regexp group in
‘bug-reference-bug-regexp’ is used to replace the ‘%s’ template in the
‘bug-reference-url-format’.

   Note that ‘bug-reference-url-format’ may also be a function in order
to cater for more complex scenarios, e.g., when different parts of the
bug reference have to be used to distinguish between issues and merge
requests resulting in different URLs.

Automatic Setup
===============

If ‘bug-reference-mode’ is activated, ‘bug-reference-mode-hook’ has been
run and still ‘bug-reference-bug-regexp’, and ‘bug-reference-url-format’
aren’t both set, it’ll try to setup suitable values for these two
variables itself by calling the functions in
‘bug-reference-auto-setup-functions’ one after the other until one is
able to set the variables.

   Right now, there are three types of setup functions.
  1. Setup for version-controlled files configurable by the variables
     ‘bug-reference-forge-alist’, and
     ‘bug-reference-setup-from-vc-alist’.  The defaults are able to
     setup GNU projects where <https://debbugs.gnu.org> is used as issue
     tracker and issues are usually referenced as ‘bug#13’ (but many
     different notations are considered, too), and several kinds of
     modern software forges such as GitLab, Gitea, SourceHut, or GitHub.
     If you deploy a self-hosted instance of such a forge, the easiest
     way to tell bug-reference about it is through
     ‘bug-reference-forge-alist’.

  2. Setup for email guessing from mail folder/mbox names, and mail
     header values configurable by the variable
     ‘bug-reference-setup-from-mail-alist’.  The built-in news- and
     mailreader *note Gnus:: and *note Rmail:: are supported.

  3. Setup for IRC channels configurable by the variable
     ‘bug-reference-setup-from-irc-alist’.  The built-in IRC clients
     Rcirc, *Note Rcirc: (rcirc)Top, and ERC, *Note ERC: (erc)Top, are
     supported.

   For almost all of those modes, it’s enough to simply enable
‘bug-reference-mode’, only Rmail requires a slightly different setup.

     ;; Use VC-based setup if file is under version control.
     (add-hook 'prog-mode-hook #'bug-reference-prog-mode)

     ;; Gnus (summary & article buffers)
     (add-hook 'gnus-mode-hook #'bug-reference-mode)

     ;; Rmail
     (add-hook 'rmail-show-message-hook #'bug-reference-mode-force-auto-setup)

     ;; Rcirc
     (add-hook 'rcirc-mode-hook #'bug-reference-mode)

     ;; ERC
     (add-hook 'erc-mode-hook #'bug-reference-mode)

   In the Rmail case, instead of the mode hook, the
‘rmail-show-message-hook’ has to be used in combination with the
function ‘bug-reference-mode-force-auto-setup’ which activates
‘bug-reference-mode’ and forces auto-setup.  The reason is that with
Rmail all messages reside in the same buffer but the setup needs to be
performed whenever another messages is displayed.

Adding support for third-party packages
=======================================

Adding support for bug-reference’ auto-setup is usually quite
straight-forward: write a setup function of zero arguments which gathers
the required information (e.g., List-Id/To/From/Cc mail header values in
the case of a MUA), and then calls one of the following helper
functions:
   • ‘bug-reference-maybe-setup-from-vc’ which does the setup according
     to ‘bug-reference-setup-from-vc-alist’,

   • ‘bug-reference-maybe-setup-from-mail’ which does the setup
     according to ‘bug-reference-setup-from-mail-alist’,

   • and ‘bug-reference-maybe-setup-from-irc’ which does the setup
     according to ‘bug-reference-setup-from-irc-alist’.
   A setup function should return non-‘nil’ if it could setup
bug-reference mode which is the case if the last thing the function does
is calling one of the helper functions above.

   Finally, the setup function has to be added to
‘bug-reference-auto-setup-functions’.

   Note that these auto-setup functions should check as a first step if
they are applicable, e.g., by checking the ‘major-mode’ value.

Integration with the debbugs package
====================================

If your project’s issues are tracked on the server
<https://debbugs.gnu.org>, you can browse and reply to reports directly
in Emacs using the ‘debbugs’ package, which can be downloaded via the
Package Menu (*note Packages::).  This package adds the minor mode
‘debbugs-browse-mode’, which can be activated on top of
‘bug-reference-mode’ and ‘bug-reference-prog-mode’ as follows:

     (add-hook 'bug-reference-mode-hook 'debbugs-browse-mode)
     (add-hook 'bug-reference-prog-mode-hook 'debbugs-browse-mode)


File: emacs.info,  Node: Abbrevs,  Next: Dired,  Prev: Maintaining,  Up: Top

# /. 30 Abbrevs
**************

A defined “abbrev” is a word which “expands”, if you insert it, into
some different text.  Abbrevs are defined by the user to expand in
specific ways.  For example, you might define ‘foo’ as an abbrev
expanding to ‘find outer otter’.  Then you could insert ‘find outer
otter ’ into the buffer by typing ‘f o o <SPC>’.

   A second kind of abbreviation facility is called “dynamic abbrev
expansion”.  You use dynamic abbrev expansion with an explicit command
to expand the letters in the buffer before point by looking for other
words in the buffer that start with those letters.  *Note Dynamic
Abbrevs::.

   A third kind, “hippie expansion”, generalizes abbreviation expansion.
*Note Hippie Expansion: (autotype)Hippie Expand.

* Menu:

* Abbrev Concepts::   Fundamentals of defined abbrevs.
* Defining Abbrevs::  Defining an abbrev, so it will expand when typed.
* Expanding Abbrevs:: Controlling expansion: prefixes, canceling expansion.
* Abbrevs Suggestions:: Get automatic suggestions about defined abbrevs.
* Editing Abbrevs::   Viewing or editing the entire list of defined abbrevs.
* Saving Abbrevs::    Saving the entire list of abbrevs for another session.
* Dynamic Abbrevs::   Abbreviations for words already in the buffer.
* Dabbrev Customization:: What is a word, for dynamic abbrevs.  Case handling.


File: emacs.info,  Node: Abbrev Concepts,  Next: Defining Abbrevs,  Up: Abbrevs

30.1 Abbrev Concepts
====================

An “abbrev” is a word that has been defined to “expand” into a specified
“expansion”.  When you insert a word-separator character following the
abbrev, that expands the abbrev—replacing the abbrev with its expansion.
For example, if ‘foo’ is defined as an abbrev expanding to ‘find outer
otter’, then typing ‘f o o .’ will insert ‘find outer otter.’.

   Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled.  Disabling Abbrev mode does not cause abbrev definitions to be
forgotten, but they do not expand until Abbrev mode is enabled again.
The command ‘M-x abbrev-mode’ toggles Abbrev mode; with a numeric
argument, it turns Abbrev mode on if the argument is positive, off
otherwise.  *Note Minor Modes::.

   Abbrevs can have “mode-specific” definitions, active only in one
major mode.  Abbrevs can also have “global” definitions that are active
in all major modes.  The same abbrev can have a global definition and
various mode-specific definitions for different major modes.  A
mode-specific definition for the current major mode overrides a global
definition.

   You can define abbrevs interactively during the editing session,
irrespective of whether Abbrev mode is enabled.  You can also save lists
of abbrev definitions in files, which you can then reload for use in
later sessions.


File: emacs.info,  Node: Defining Abbrevs,  Next: Expanding Abbrevs,  Prev: Abbrev Concepts,  Up: Abbrevs

30.2 Defining Abbrevs
=====================

‘C-x a g’
     Define an abbrev, using one or more words before point as its
     expansion (‘add-global-abbrev’).

‘C-x a l’
     Similar, but define an abbrev specific to the current major mode
     (‘add-mode-abbrev’).

‘C-x a i g’
     Define a word in the buffer as an abbrev
     (‘inverse-add-global-abbrev’).

‘C-x a i l’
     Define a word in the buffer as a mode-specific abbrev
     (‘inverse-add-mode-abbrev’).

‘M-x define-global-abbrev <RET> ABBREV <RET> EXP <RET>’
     Define ABBREV as an abbrev expanding into EXP.

‘M-x define-mode-abbrev <RET> ABBREV <RET> EXP <RET>’
     Define ABBREV as a mode-specific abbrev expanding into EXP.

‘M-x kill-all-abbrevs’
     Discard all abbrev definitions, leaving a blank slate.

   The usual way to define an abbrev is to enter the text you want the
abbrev to expand to, position point after it, and type ‘C-x a g’
(‘add-global-abbrev’).  This reads the abbrev itself using the
minibuffer, and then defines it as an abbrev for one or more words
before point.  Use a numeric argument to say how many words before point
should be taken as the expansion.  For example, to define the abbrev
‘foo’ as mentioned above, insert the text ‘find outer otter’ and then
type ‘C-u 3 C-x a g f o o <RET>’.

   If you’re using ‘transient-mark-mode’ (which is the default), the
active region will be used as the expansion of the abbrev being defined.
If not, an argument of zero to ‘C-x a g’ means to use the contents of
the region.

   The command ‘C-x a l’ (‘add-mode-abbrev’) is similar, but defines a
mode-specific abbrev for the current major mode.  The arguments work the
same as for ‘C-x a g’.

   ‘C-x a i g’ (‘inverse-add-global-abbrev’) and ‘C-x a i l’
(‘inverse-add-mode-abbrev’) perform the opposite task: if the abbrev
text is already in the buffer, you use these commands to define an
abbrev by specifying the expansion in the minibuffer.  These commands
will expand the abbrev text used for the definition.

   You can define an abbrev without inserting either the abbrev or its
expansion in the buffer using the command ‘define-global-abbrev’.  It
reads two arguments—the abbrev, and its expansion.  The command
‘define-mode-abbrev’ does likewise for a mode-specific abbrev.

   To change the definition of an abbrev, just make a new definition.
When an abbrev has a prior definition, the abbrev definition commands
ask for confirmation before replacing it.

   To remove an abbrev definition, give a negative argument to the
abbrev definition command: ‘C-u - C-x a g’ or ‘C-u - C-x a l’.  The
former removes a global definition, while the latter removes a
mode-specific definition.  ‘M-x kill-all-abbrevs’ removes all abbrev
definitions, both global and local.


File: emacs.info,  Node: Expanding Abbrevs,  Next: Abbrevs Suggestions,  Prev: Defining Abbrevs,  Up: Abbrevs

30.3 Controlling Abbrev Expansion
=================================

When Abbrev mode is enabled, an abbrev expands whenever it is present in
the buffer just before point and you type a self-inserting whitespace or
punctuation character (<SPC>, comma, etc.).  More precisely, any
character that is not a word constituent expands an abbrev, and any
word-constituent character can be part of an abbrev.  The most common
way to use an abbrev is to insert it and then insert a punctuation or
whitespace character to expand it.

   Abbrev expansion preserves case: ‘foo’ expands to ‘find outer otter’,
and ‘Foo’ to ‘Find outer otter’.  ‘FOO’ expands to ‘Find Outer Otter’ by
default, but if you change the variable ‘abbrev-all-caps’ to a non-‘nil’
value, it expands to ‘FIND OUTER OTTER’.

   These commands are used to control abbrev expansion:

‘M-'’
     Separate a prefix from a following abbrev to be expanded
     (‘abbrev-prefix-mark’).

‘C-x a e’
     Expand the abbrev before point (‘expand-abbrev’).  This is
     effective even when Abbrev mode is not enabled.

‘M-x unexpand-abbrev’
     Undo the expansion of the last expanded abbrev.

‘M-x expand-region-abbrevs’
     Expand some or all abbrevs found in the region.

   You may wish to expand an abbrev and attach a prefix to the
expansion; for example, if ‘cnst’ expands into ‘construction’, you might
want to use it to enter ‘reconstruction’.  It does not work to type
‘recnst’, because that is not necessarily a defined abbrev.  What you
can do is use the command ‘M-'’ (‘abbrev-prefix-mark’) in between the
prefix ‘re’ and the abbrev ‘cnst’.  First, insert ‘re’.  Then type
‘M-'’; this inserts a hyphen in the buffer to indicate that it has done
its work.  Then insert the abbrev ‘cnst’; the buffer now contains
‘re-cnst’.  Now insert a non-word character to expand the abbrev ‘cnst’
into ‘construction’.  This expansion step also deletes the hyphen that
indicated ‘M-'’ had been used.  The result is the desired
‘reconstruction’.

   If you actually want the text of the abbrev in the buffer, rather
than its expansion, you can accomplish this by inserting the following
punctuation with ‘C-q’.  Thus, ‘foo C-q ,’ leaves ‘foo,’ in the buffer,
not expanding it.

   If you expand an abbrev by mistake, you can undo the expansion by
typing ‘C-/’ (‘undo’).  *Note Undo::.  This undoes the insertion of the
abbrev expansion and brings back the abbrev text.  If the result you
want is the terminating non-word character plus the unexpanded abbrev,
you must reinsert the terminating character, quoting it with ‘C-q’.  You
can also use the command ‘M-x unexpand-abbrev’ to cancel the last
expansion without deleting the terminating character.

   ‘M-x expand-region-abbrevs’ searches through the region for defined
abbrevs, and for each one found offers to replace it with its expansion.
This command is useful if you have typed in text using abbrevs but
forgot to turn on Abbrev mode first.  It may also be useful together
with a special set of abbrev definitions for making several global
replacements at once.  This command is effective even if Abbrev mode is
not enabled.

   The function ‘expand-abbrev’ performs the expansion by calling the
function that ‘abbrev-expand-function’ specifies.  By changing this
function you can make arbitrary changes to the abbrev expansion.  *Note
(elisp)Abbrev Expansion::.


File: emacs.info,  Node: Abbrevs Suggestions,  Next: Editing Abbrevs,  Prev: Expanding Abbrevs,  Up: Abbrevs

30.4 Abbrevs Suggestions
========================

You can get abbrev suggestions when you manually type text for which
there is currently an active defined abbrev.  For example, if there is
an abbrev ‘foo’ with the expansion ‘find outer otter’, and you manually
type ‘find outer otter’, Emacs can notice this and show a hint in the
echo area when you have stopped typing.

   To enable the abbrev suggestion feature, customize the option
‘abbrev-suggest’ to a non-‘nil’ value.

   The variable ‘abbrev-suggest-hint-threshold’ controls when to suggest
an abbrev to the user.  This variable defines the minimum savings (in
terms of the number of characters the user will not have to type)
required for Emacs to suggest using an abbrev.  For example, if the user
types ‘foo bar’ (seven characters) and there is an abbrev ‘fubar’
defined (five characters), the user will not get any suggestion unless
the threshold is set to the number 2 or lower.  With the default value
3, the user would not get any suggestion in this example, because the
savings in using the abbrev are below the threshold.  If you always want
to get abbrev suggestions, set this variable’s value to zero.

   The command ‘abbrev-suggest-show-report’ displays a buffer with all
the abbrev suggestions shown during the current editing session.  This
can be useful if you get several abbrev suggestions and don’t remember
them all.


File: emacs.info,  Node: Editing Abbrevs,  Next: Saving Abbrevs,  Prev: Abbrevs Suggestions,  Up: Abbrevs

30.5 Examining and Editing Abbrevs
==================================

‘M-x list-abbrevs’
     Display a list of all abbrev definitions.  With a numeric argument,
     list only local abbrevs.

‘M-x edit-abbrevs’
     Edit a list of abbrevs; you can add, alter or remove definitions.

   The output from ‘M-x list-abbrevs’ looks like this:

     VARIOUS OTHER TABLES...
     (lisp-mode-abbrev-table)
     "ks"          0    "keymap-set"
     (global-abbrev-table)
     "dfn"         0    "definition"

(Some blank lines of no semantic significance, and some other abbrev
tables, have been omitted.)

   A line containing a name in parentheses is the header for abbrevs in
a particular abbrev table; ‘global-abbrev-table’ contains all the global
abbrevs, and the other abbrev tables that are named after major modes
contain the mode-specific abbrevs.

   Within each abbrev table, each nonblank line defines one abbrev.  The
word at the beginning of the line is the abbrev.  The number that
follows is the number of times the abbrev has been expanded.  Emacs
keeps track of this to help you see which abbrevs you actually use, so
that you can eliminate those that you don’t use often.  The string at
the end of the line is the expansion.

   Some abbrevs are marked with ‘(sys)’.  These “system abbrevs” (*note
(elisp)Abbrevs::) are pre-defined by various modes, and are not saved to
your abbrev file.  To disable a system abbrev, define an abbrev of the
same name that expands to itself, and save it to your abbrev file.

   ‘M-x edit-abbrevs’ allows you to add, change or kill abbrev
definitions by editing a list of them in an Emacs buffer.  The list has
the same format described above.  The buffer of abbrevs is called
‘*Abbrevs*’, and is in Edit-Abbrevs mode.  Type ‘C-c C-c’ in this buffer
to install the abbrev definitions as specified in the buffer—and delete
any abbrev definitions not listed.

   The command ‘edit-abbrevs’ is actually the same as ‘list-abbrevs’
except that it selects the buffer ‘*Abbrevs*’ whereas ‘list-abbrevs’
merely displays it in another window.


File: emacs.info,  Node: Saving Abbrevs,  Next: Dynamic Abbrevs,  Prev: Editing Abbrevs,  Up: Abbrevs

30.6 Saving Abbrevs
===================

These commands allow you to keep abbrev definitions between editing
sessions.

‘M-x write-abbrev-file <RET> FILE <RET>’
     Write a file FILE describing all defined abbrevs.

‘M-x read-abbrev-file <RET> FILE <RET>’
     Read the file FILE and define abbrevs as specified therein.

‘M-x define-abbrevs’
     Define abbrevs from definitions in current buffer.

‘M-x insert-abbrevs’
     Insert all abbrevs and their expansions into current buffer.

   ‘M-x write-abbrev-file’ reads a file name using the minibuffer and
then writes a description of all current abbrev definitions into that
file.  This is used to save abbrev definitions for use in a later
session.  The text stored in the file is a series of Lisp expressions
that, when executed, define the same abbrevs that you currently have.

   ‘M-x read-abbrev-file’ reads a file name using the minibuffer and
then reads the file, defining abbrevs according to the contents of the
file.  The function ‘quietly-read-abbrev-file’ is similar except that it
does not display a message in the echo area; you cannot invoke it
interactively, and it is used primarily in your init file (*note Init
File::).  If either of these functions is called with ‘nil’ as the
argument, it uses the file given by the variable ‘abbrev-file-name’,
which is ‘~/.emacs.d/abbrev_defs’ by default.  This is your standard
abbrev definition file, and Emacs loads abbrevs from it automatically
when it starts up.  (As an exception, Emacs does not load the abbrev
file when it is started in batch mode.  *Note Initial Options::, for a
description of batch mode.)

   Emacs will offer to save abbrevs automatically if you have changed
any of them, whenever it offers to save all files (for ‘C-x s’ or ‘C-x
C-c’).  It saves them in the file specified by ‘abbrev-file-name’.  This
feature can be inhibited by setting the variable ‘save-abbrevs’ to
‘nil’; setting it to ‘silently’ will save the abbrevs automatically
without asking.

   The commands ‘M-x insert-abbrevs’ and ‘M-x define-abbrevs’ are
similar to the previous commands but work on text in an Emacs buffer.
‘M-x insert-abbrevs’ inserts text into the current buffer after point,
describing all current abbrev definitions; ‘M-x define-abbrevs’ parses
the entire current buffer and defines abbrevs accordingly.


File: emacs.info,  Node: Dynamic Abbrevs,  Next: Dabbrev Customization,  Prev: Saving Abbrevs,  Up: Abbrevs

30.7 Dynamic Abbrev Expansion
=============================

The abbrev facility described above operates automatically as you insert
text, but all abbrevs must be defined explicitly.  By contrast, “dynamic
abbrevs” allow the meanings of abbreviations to be determined
automatically from the contents of the buffer, but dynamic abbrev
expansion happens only when you request it explicitly.

‘M-/’
     Expand the word in the buffer before point as a “dynamic abbrev”,
     by searching for words starting with that abbreviation
     (‘dabbrev-expand’).

‘C-M-/’
     Complete the word before point as a dynamic abbrev
     (‘dabbrev-completion’).

   For example, if the buffer contains ‘does this follow ’ and you type
‘f o M-/’, the effect is to insert ‘follow’ because that is the last
word in the buffer that starts with ‘fo’.  A numeric argument to ‘M-/’
says to take the second, third, etc. distinct expansion found looking
backward from point.  Repeating ‘M-/’ searches for an alternative
expansion by looking farther back.  After scanning all the text before
point, it searches the text after point.  The variable ‘dabbrev-limit’,
if non-‘nil’, specifies how far away in the buffer to search for an
expansion.

   After scanning the current buffer, ‘M-/’ normally searches other
buffers.  The variables ‘dabbrev-check-all-buffers’ and
‘dabbrev-check-other-buffers’ can be used to determine which other
buffers, if any, are searched.  Buffers that have major modes derived
from any of the modes in ‘dabbrev-ignored-buffer-modes’ are ignored.

   For finer control over which buffers to scan, customize the variables
‘dabbrev-ignored-buffer-names’ and ‘dabbrev-ignored-buffer-regexps’.
The value of the former is a list of buffer names to skip.  The value of
the latter is a list of regular expressions; if a buffer’s name matches
any of these regular expressions, dynamic abbrev expansion skips that
buffer.

   A negative argument to ‘M-/’, as in ‘C-u - M-/’, says to search first
for expansions after point, then other buffers, and consider expansions
before point only as a last resort.  If you repeat the ‘M-/’ to look for
another expansion, do not specify an argument.  Repeating ‘M-/’ cycles
through all the expansions after point and then the expansions before
point.

   After you have expanded a dynamic abbrev, you can copy additional
words that follow the expansion in its original context.  Simply type
‘<SPC> M-/’ for each additional word you want to copy.  The spacing and
punctuation between words is copied along with the words.

   You can control the way ‘M-/’ determines the word to expand and how
to expand it, see *note Dabbrev Customization::.

   The command ‘C-M-/’ (‘dabbrev-completion’) performs completion of a
dynamic abbrev.  Instead of trying the possible expansions one by one,
it finds all of them, then inserts the text that they have in common.
If they have nothing in common, ‘C-M-/’ displays a list of completions,
from which you can select a choice in the usual manner.  *Note
Completion::.

   Dynamic abbrev expansion is completely independent of Abbrev mode;
the expansion of a word with ‘M-/’ is completely independent of whether
it has a definition as an ordinary abbrev.


File: emacs.info,  Node: Dabbrev Customization,  Prev: Dynamic Abbrevs,  Up: Abbrevs

30.8 Customizing Dynamic Abbreviation
=====================================

Normally, dynamic abbrev expansion ignores case when searching for
expansions.  That is, the expansion need not agree in case with the word
you are expanding.

   This feature is controlled by the variable
‘dabbrev-case-fold-search’.  If it is ‘t’, case is ignored in this
search; if it is ‘nil’, the word and the expansion must match in case.
If the value is ‘case-fold-search’ (the default), then the variable
‘case-fold-search’ controls whether to ignore case while searching for
expansions (*note Lax Search::).

   Normally, dynamic abbrev expansion preserves the case pattern _of the
dynamic abbrev you are expanding_, by converting the expansion to that
case pattern.

   The variable ‘dabbrev-case-replace’ controls whether to preserve the
case pattern of the dynamic abbrev.  If it is ‘t’, the dynamic abbrev’s
case pattern is preserved in most cases; if it is ‘nil’, the expansion
is always copied verbatim.  If the value is ‘case-replace’ (the
default), then the variable ‘case-replace’ controls whether to copy the
expansion verbatim (*note Replacement and Lax Matches::).

   However, if the expansion contains a complex mixed case pattern, and
the dynamic abbrev matches this pattern as far as it goes, then the
expansion is always copied verbatim, regardless of those variables.
Thus, for example, if the buffer contains
‘variableWithSillyCasePattern’, and you type ‘v a M-/’, it copies the
expansion verbatim including its case pattern.

   The variable ‘dabbrev-abbrev-char-regexp’, if non-‘nil’, controls
which characters are considered part of a word, for dynamic expansion
purposes.  The regular expression must match just one character, never
two or more.  The same regular expression also determines which
characters are part of an expansion.  The (default) value ‘nil’ has a
special meaning: dynamic abbrevs (i.e. the word at point) are made of
word characters, but their expansions are looked for as sequences of
word and symbol characters.  This is generally appropriate for expanding
symbols in a program source and also for human-readable text in many
languages, but may not be what you want in a text buffer that includes
unusual punctuation characters; in that case, the value ‘"\\sw"’ might
produce better results.

   In shell scripts and makefiles, a variable name is sometimes prefixed
with ‘$’ and sometimes not.  Major modes for this kind of text can
customize dynamic abbrev expansion to handle optional prefixes by
setting the variable ‘dabbrev-abbrev-skip-leading-regexp’.  Its value
should be a regular expression that matches the optional prefix that
dynamic abbrev expression should ignore.  The default is ‘nil’, which
means no characters should be skipped.


File: emacs.info,  Node: Dired,  Next: Calendar/Diary,  Prev: Abbrevs,  Up: Top

# /. 31 Dired, the Directory Editor
**********************************

Dired makes an Emacs buffer containing a listing of a directory, and
optionally some of its subdirectories as well.  You can use the normal
Emacs commands to move around in this buffer, and special Dired commands
to operate on the listed files.  Dired works with both local and remote
directories.

   The Dired buffer is normally read-only, and inserting text in it is
not allowed (however, the Wdired mode allows that, *note Wdired::).
Ordinary printing characters such as ‘d’ and ‘x’ are redefined for
special Dired commands.  Some Dired commands “mark” or “flag” the
“current file” (that is, the file on the current line); other commands
operate on the marked files or on the flagged files.  You first mark
certain files in order to operate on all of them with one command.

   The Dired-X package provides various extra features for Dired mode.
*Note Dired-X: (dired-x)Top.

   You can also view a list of files in a directory with ‘C-x C-d’
(‘list-directory’).  Unlike Dired, this command does not allow you to
operate on the listed files.  *Note Directories::.

* Menu:

* Enter: Dired Enter.         How to invoke Dired.
* Navigation: Dired Navigation.   Special motion commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* Flagging Many Files::       Flagging files based on their names.
* Visit: Dired Visiting.      Other file operations through Dired.
* Marks vs Flags::            Flagging for deletion vs marking.
* Operating on Files::        How to copy, rename, print, compress, etc.
                                either one file or several files.
* Shell Commands in Dired::   Running a shell command on the marked files.
* Shell Command Guessing::    Guessing shell commands for files.
* Transforming File Names::   Using patterns to rename multiple files.
* Comparison in Dired::       Running ‘diff’ by way of Dired.
* Subdirectories in Dired::   Adding subdirectories to the Dired buffer.
* Subdir Switches::           Subdirectory switches in Dired.
* Subdirectory Motion::       Moving across subdirectories, and up and down.
* Hiding Subdirectories::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.       Using ‘find’ to choose the files for Dired.
* Wdired::                    Operating on files by editing the Dired buffer.
* Image-Dired::               Viewing image thumbnails in Dired.
* Misc: Misc Dired Features.  Various other features.


File: emacs.info,  Node: Dired Enter,  Next: Dired Navigation,  Up: Dired

31.1 Entering Dired
===================

To invoke Dired, type ‘C-x d’ (‘dired’).  This reads a directory’s name
using the minibuffer, and opens a “Dired buffer” listing the files in
that directory.  You can also supply a wildcard file name pattern as the
minibuffer argument, in which case the Dired buffer lists all files
matching that pattern.  A wildcard may appear in the directory part as
well.  For instance,

     C-x d  ~/foo/*.el  <RET>
     C-x d  ~/foo/*/*.el  <RET>

   The former lists all the files with extension ‘.el’ in directory
‘foo’.  The latter lists the files with extension ‘.el’ in all the
subdirectories of ‘foo’.

   On Posix systems, when the system shell supports “globstar”, a
recursive globbing feature, and that support is enabled, you can use
recursive globbing in Dired:

     C-x d  ~/foo/**/*.el  <RET>

   This command produces a directory listing with all the files with
extension ‘.el’, descending recursively in all the subdirectories of
‘foo’.  Note that there are small differences in the implementation of
globstar between different shells.  Check your shell manual to know the
expected behavior.

   If the shell supports globstar, but that support is disabled by
default, you can still let Dired use this feature by customizing
‘dired-maybe-use-globstar’ to a non-‘nil’ value; then Dired will enable
globstar for those shells for which it knows how (see
‘dired-enable-globstar-in-shell’ for the list of those shells).

   The usual history and completion commands can be used in the
minibuffer; in particular, ‘M-n’ puts the name of the visited file (if
any) in the minibuffer (*note Minibuffer History::).

   You can also invoke Dired by giving ‘C-x C-f’ (‘find-file’) a
directory’s name.

   You can ask Emacs to invoke Dired on the default-directory (*note
default-directory: File Names.) of any buffer, by typing ‘C-x C-j’
(‘dired-jump’).  If the buffer visits a file, this command will move
point to that file’s line in the Dired buffer it shows; otherwise, point
will end up on the first file in the directory listing.  As an
exception, if you type ‘C-x C-j’ in a Dired buffer, Emacs displays the
directory listing of the parent directory and places point on the line
that corresponds to the directory where you invoked ‘dired-jump’.
Typing ‘C-x 4 C-j’ (‘dired-jump-other-window’) has the same effect, but
displays the Dired buffer in a new window.

   The variable ‘dired-listing-switches’ specifies the options to give
to ‘ls’ for listing the directory; this string _must_ contain ‘-l’.  If
you use a prefix argument with the ‘dired’ command, you can specify the
‘ls’ switches with the minibuffer before you enter the directory
specification.  No matter how they are specified, the ‘ls’ switches can
include short options (that is, single characters) requiring no
arguments, and long options (starting with ‘--’) whose arguments are
specified with ‘=’.

   Dired does not handle files that have names with embedded newline
characters well.  If you have many such files, you may consider adding
‘-b’ to ‘dired-listing-switches’.  This will quote all special
characters and allow Dired to handle them better.  (You can also use the
‘C-u C-x d’ command to add ‘-b’ temporarily.)

   Dired displays in the mode line an indication of what were the
switches used to invoke ‘ls’.  By default, Dired will try to determine
whether the switches indicate sorting by name or date, and will say so
in the mode line.  If the ‘dired-switches-in-mode-line’ variable is
‘as-is’, the switches will be shown verbatim.  If this variable’s value
is an integer, the switch display will be truncated to that length.
This variable can also be a function, which will be called with
‘dired-actual-switches’ as the only parameter, and should return a
string to display in the mode line.

   If your ‘ls’ program supports the ‘--dired’ option, Dired
automatically passes it that option; this causes ‘ls’ to emit special
escape sequences for certain unusual file names, without which Dired
will not be able to parse those names.  The first time you run Dired in
an Emacs session, it checks whether ‘ls’ supports the ‘--dired’ option
by calling it once with that option.  If the exit code is 0, Dired will
subsequently use the ‘--dired’ option; otherwise it will not.  You can
inhibit this check by customizing the variable ‘dired-use-ls-dired’.
The value ‘unspecified’ (the default) means to perform the check; any
other non-‘nil’ value means to use the ‘--dired’ option; and ‘nil’ means
not to use the ‘--dired’ option.

   On MS-Windows and MS-DOS systems, and also on some remote systems,
Emacs emulates ‘ls’.  *Note ls in Lisp::, for options and peculiarities
of this emulation.

   To display the Dired buffer in another window, use ‘C-x 4 d’
(‘dired-other-window’).  ‘C-x 5 d’ (‘dired-other-frame’) displays the
Dired buffer in a separate frame.

   Typing ‘q’ (‘quit-window’) buries the Dired buffer, and deletes its
window if the window was created just for that buffer.


File: emacs.info,  Node: Dired Navigation,  Next: Dired Deletion,  Prev: Dired Enter,  Up: Dired

31.2 Navigation in the Dired Buffer
===================================

All the usual Emacs cursor motion commands are available in Dired
buffers.  The keys ‘C-n’ and ‘C-p’ are redefined to run
‘dired-next-line’ and ‘dired-previous-line’, respectively, and they put
the cursor at the beginning of the file name on the line, rather than at
the beginning of the line.

   For extra convenience, <SPC> and ‘n’ in Dired are equivalent to
‘C-n’.  ‘p’ is equivalent to ‘C-p’.  (Moving by lines is so common in
Dired that it deserves to be easy to type.)  <DEL> (move up and unflag)
is also often useful simply for moving up (*note Dired Deletion::).

   ‘j’ (‘dired-goto-file’) prompts for a file name using the minibuffer,
and moves point to the line in the Dired buffer describing that file.

   ‘M-s f C-s’ (‘dired-isearch-filenames’) performs a forward
incremental search in the Dired buffer, looking for matches only amongst
the file names and ignoring the rest of the text in the buffer.  ‘M-s f
M-C-s’ (‘dired-isearch-filenames-regexp’) does the same, using a regular
expression search.  If you change the variable ‘dired-isearch-filenames’
to ‘t’, then the usual search commands also limit themselves to the file
names; for instance, ‘C-s’ behaves like ‘M-s f C-s’.  If the value is
‘dwim’, then search commands match the file names only when point was on
a file name initially.  *Note Search::, for information about
incremental search.

   Some additional navigation commands are available when the Dired
buffer includes several directories.  *Note Subdirectory Motion::.


File: emacs.info,  Node: Dired Deletion,  Next: Flagging Many Files,  Prev: Dired Navigation,  Up: Dired

31.3 Deleting Files with Dired
==============================

One of the most frequent uses of Dired is to first “flag” files for
deletion, then delete the files that were flagged.

‘d’
     Flag this file for deletion (‘dired-flag-file-deletion’).
‘u’
     Remove the deletion flag (‘dired-unmark’).
‘<DEL>’
     Move point to previous line and remove the deletion flag on that
     line (‘dired-unmark-backward’).
‘x’
     Delete files flagged for deletion (‘dired-do-flagged-delete’).

   You can flag a file for deletion by moving to the line describing the
file and typing ‘d’ (‘dired-flag-file-deletion’).  The deletion flag is
visible as a ‘D’ at the beginning of the line.  This command moves point
to the next line, so that repeated ‘d’ commands flag successive files.
A numeric prefix argument serves as a repeat count; a negative count
means to flag preceding files.

   If the region is active, the ‘d’ command flags all files in the
region for deletion; in this case, the command does not move point, and
ignores any prefix argument.

   The reason for flagging files for deletion, rather than deleting
files immediately, is to reduce the danger of deleting a file
accidentally.  Until you direct Dired to delete the flagged files, you
can remove deletion flags using the commands ‘u’ and <DEL>.  ‘u’
(‘dired-unmark’) works just like ‘d’, but removes flags rather than
making flags.  <DEL> (‘dired-unmark-backward’) moves upward, removing
flags; it is like ‘u’ with argument −1.  A numeric prefix argument to
either command serves as a repeat count, with a negative count meaning
to unflag in the opposite direction.  If the region is active, these
commands instead unflag all files in the region, without moving point.

   To delete flagged files, type ‘x’ (‘dired-do-flagged-delete’).  This
command displays a list of all the file names flagged for deletion, and
requests confirmation with ‘yes’.  If you confirm, Dired deletes the
flagged files, then deletes their lines from the text of the Dired
buffer.  The Dired buffer, with somewhat fewer lines, remains selected.

   If you answer ‘no’ or quit with ‘C-g’ when asked to confirm, you
return immediately to Dired, with the deletion flags still present in
the buffer, and no files actually deleted.

   You can delete empty directories just like other files, but normally
Dired cannot delete directories that are nonempty.  However, if the
variable ‘dired-recursive-deletes’ is non-‘nil’, then Dired is allowed
to delete nonempty directories including all their contents.  That can
be somewhat risky.  If the value of the variable is ‘always’, Dired will
delete nonempty directories recursively, which is even more risky.

   Even if you have set ‘dired-recursive-deletes’ to ‘nil’, you might
want sometimes to delete directories recursively without being asked for
confirmation for all of them.  For example, you may want that when you
have marked many directories for deletion and you are very sure that all
of them can safely be deleted.  For every nonempty directory you are
asked for confirmation to delete, if you answer ‘all’, then all the
remaining directories will be deleted without any further questions.

   If you change the variable ‘delete-by-moving-to-trash’ to ‘t’, the
above deletion commands will move the affected files or directories into
the operating system’s Trash, instead of deleting them outright.  *Note
Misc File Ops::.

   An alternative way of deleting files is to mark them with ‘m’ and
delete with ‘D’, see *note Operating on Files::.


File: emacs.info,  Node: Flagging Many Files,  Next: Dired Visiting,  Prev: Dired Deletion,  Up: Dired

31.4 Flagging Many Files at Once
================================

The ‘#’, ‘~’, ‘.’, ‘% &’, and ‘% d’ commands flag many files for
deletion, based on their file names:

‘#’
     Flag all auto-save files (files whose names start and end with ‘#’)
     for deletion (*note Auto Save::).

‘~’
     Flag all backup files (files whose names end with ‘~’) for deletion
     (*note Backup::).

‘. (Period)’
     Flag excess numeric backup files for deletion.  The oldest and
     newest few backup files of any one file are exempt; the middle ones
     are flagged.

‘% &’
     Flag for deletion all files with certain kinds of names which
     suggest you could easily create those files again.

‘% d REGEXP <RET>’
     Flag for deletion all files whose names match the regular
     expression REGEXP.

   ‘#’ (‘dired-flag-auto-save-files’) flags all files whose names look
like auto-save files—that is, files whose names begin and end with ‘#’.
*Note Auto Save::.

   ‘~’ (‘dired-flag-backup-files’) flags all files whose names say they
are backup files—that is, files whose names end in ‘~’.  *Note Backup::.

   ‘.’ (period, ‘dired-clean-directory’) flags just some of the backup
files for deletion: all but the oldest few and newest few backups of any
one file.  Normally, the number of newest versions kept for each file is
given by the variable ‘dired-kept-versions’ (_not_ ‘kept-new-versions’;
that applies only when saving).  The number of oldest versions to keep
is given by the variable ‘kept-old-versions’.

   Period with a positive numeric argument, as in ‘C-u 3 .’, specifies
the number of newest versions to keep, overriding ‘dired-kept-versions’.
A negative numeric argument overrides ‘kept-old-versions’, using minus
the value of the argument to specify the number of oldest versions of
each file to keep.

   ‘% &’ (‘dired-flag-garbage-files’) flags files whose names match the
regular expression specified by the variable
‘dired-garbage-files-regexp’.  By default, this matches certain files
produced by TeX, ‘.bak’ files, and the ‘.orig’ and ‘.rej’ files produced
by ‘patch’.

   ‘% d’ flags all files whose names match a specified regular
expression (‘dired-flag-files-regexp’).  Only the non-directory part of
the file name is used in matching.  You can use ‘^’ and ‘$’ to anchor
matches.  You can exclude certain subdirectories from marking by hiding
them while you use ‘% d’.  *Note Hiding Subdirectories::.


File: emacs.info,  Node: Dired Visiting,  Next: Marks vs Flags,  Prev: Flagging Many Files,  Up: Dired

31.5 Visiting Files in Dired
============================

There are several Dired commands for visiting or examining the files
listed in the Dired buffer.  All of them apply to the current line’s
file; if that file is really a directory, these commands invoke Dired on
that subdirectory (making a separate Dired buffer).

‘f’
     Visit the file described on the current line, like typing ‘C-x C-f’
     and supplying that file name (‘dired-find-file’).  *Note
     Visiting::.

‘<RET>’
‘e’
     Equivalent to ‘f’.

‘o’
     Like ‘f’, but uses another window to display the file’s buffer
     (‘dired-find-file-other-window’).  The Dired buffer remains visible
     in the first window.  This is like using ‘C-x 4 C-f’ to visit the
     file.  *Note Windows::.

‘C-o’
     Visit the file described on the current line, and display the
     buffer in another window, but do not select that window
     (‘dired-display-file’).

‘mouse-1’
‘mouse-2’
     Visit the file whose name you clicked on
     (‘dired-mouse-find-file-other-window’).  This uses another window
     to display the file, like the ‘o’ command.

‘v’
     View the file described on the current line, with View mode
     (‘dired-view-file’).  View mode provides convenient commands to
     navigate the buffer but forbids changing it; *Note View Mode::.

‘^’
     Visit the parent directory of the current directory
     (‘dired-up-directory’).  This is equivalent to moving to the line
     for ‘..’ and typing ‘f’ there.

 -- User Option: dired-kill-when-opening-new-dired-buffer
     When visiting a new sub-directory in Dired, Emacs will (by default)
     open a new buffer to display this new directory, and leave the old
     Dired buffer as is.  If this user option is non-‘nil’, the old
     Dired buffer will be killed after selecting the new directory.
     This means that if you’re traversing a directory structure in
     Dired, you won’t end up with more than a single Dired buffer.


File: emacs.info,  Node: Marks vs Flags,  Next: Operating on Files,  Prev: Dired Visiting,  Up: Dired

31.6 Dired Marks vs. Flags
==========================

Instead of flagging a file with ‘D’, you can “mark” the file with some
other character (usually ‘*’).  Most Dired commands to operate on files
use the files marked with ‘*’.  The only command that operates on
flagged files is ‘x’, which deletes them.

   Here are some commands for marking with ‘*’, for unmarking, and for
operating on marks.  (*Note Dired Deletion::, for commands to flag and
unflag files.)

‘m’
‘* m’
     Mark the current file with ‘*’ (‘dired-mark’).  If the region is
     active, mark all files in the region instead; otherwise, if a
     numeric argument N is supplied, mark the next N files instead,
     starting with the current file (if N is negative, mark the previous
     −N files).  If invoked on a subdirectory header line (*note
     Subdirectories in Dired::), this command marks all the files in
     that subdirectory.

‘* N’
     Report what the number and size of the marked files are
     (‘dired-number-of-marked-files’).

‘* *’
     Mark all executable files with ‘*’ (‘dired-mark-executables’).
     With a numeric argument, unmark all those files.

‘* @’
     Mark all symbolic links with ‘*’ (‘dired-mark-symlinks’).  With a
     numeric argument, unmark all those files.

‘* /’
     Mark with ‘*’ all files which are directories, except for ‘.’ and
     ‘..’ (‘dired-mark-directories’).  With a numeric argument, unmark
     all those files.

‘* s’
     Mark all the files in the current subdirectory, aside from ‘.’ and
     ‘..’ (‘dired-mark-subdir-files’).

‘u’
‘* u’
     Remove any mark on this line (‘dired-unmark’).  If the region is
     active, unmark all files in the region instead; otherwise, if a
     numeric argument N is supplied, unmark the next N files instead,
     starting with the current file (if N is negative, unmark the
     previous −N files).

‘<DEL>’
‘* <DEL>’
     Move point to previous line and remove any mark on that line
     (‘dired-unmark-backward’).  If the region is active, unmark all
     files in the region instead; otherwise, if a numeric argument N is
     supplied, unmark the N preceding files instead, starting with the
     current file (if N is negative, unmark the next −N files).

‘* !’
‘U’
     Remove all marks from all the files in this Dired buffer
     (‘dired-unmark-all-marks’).

‘* ? MARKCHAR’
‘M-<DEL>’
     Remove all marks that use the character MARKCHAR
     (‘dired-unmark-all-files’).  If invoked with ‘M-<DEL>’, the command
     prompts for MARKCHAR.  That MARKCHAR is a single character—do not
     use <RET> to terminate it.  See the description of the ‘* c’
     command below, which lets you replace one mark character with
     another.

     With a numeric argument, this command queries about each marked
     file, asking whether to remove its mark.  You can answer ‘y’
     meaning yes, ‘n’ meaning no, or ‘!’ to remove the marks from the
     remaining files without asking about them.

‘* C-n’
‘M-}’
     Move down to the next marked file (‘dired-next-marked-file’).  A
     file is “marked” if it has any kind of mark.

‘* C-p’
‘M-{’
     Move up to the previous marked file (‘dired-prev-marked-file’).

‘t’
‘* t’
     Toggle all marks (‘dired-toggle-marks’): files marked with ‘*’
     become unmarked, and unmarked files are marked with ‘*’.  Files
     marked in any other way are not affected.

‘* c OLD-MARKCHAR NEW-MARKCHAR’
     Replace all marks that use the character OLD-MARKCHAR with marks
     that use the character NEW-MARKCHAR (‘dired-change-marks’).  This
     command is the primary way to create or use marks other than ‘*’ or
     ‘D’.  The arguments are single characters—do not use <RET> to
     terminate them.

     You can use almost any character as a mark character by means of
     this command, to distinguish various classes of files.  If
     OLD-MARKCHAR is a space (‘ ’), then the command operates on all
     unmarked files; if NEW-MARKCHAR is a space, then the command
     unmarks the files it acts on.

     To illustrate the power of this command, here is how to put ‘D’
     flags on all the files that have no marks, while unflagging all
     those that already have ‘D’ flags:

          * c D t  * c <SPC> D  * c t <SPC>

     This assumes that no files were already marked with ‘t’.

‘% m REGEXP <RET>’
‘* % REGEXP <RET>’
     Mark (with ‘*’) all files whose names match the regular expression
     REGEXP (‘dired-mark-files-regexp’).  This command is like ‘% d’,
     except that it marks files with ‘*’ instead of flagging with ‘D’.

     Only the non-directory part of the file name is used in matching.
     Use ‘^’ and ‘$’ to anchor matches.  You can exclude subdirectories
     by temporarily hiding them (*note Hiding Subdirectories::).

‘% g REGEXP <RET>’
     Mark (with ‘*’) all files whose _contents_ contain a match for the
     regular expression REGEXP (‘dired-mark-files-containing-regexp’).
     This command is like ‘% m’, except that it searches the file
     contents instead of the file name.  Note that if a file is visited
     in an Emacs buffer, and ‘dired-always-read-filesystem’ is ‘nil’
     (the default), this command will look in the buffer without
     revisiting the file, so the results might be inconsistent with the
     file on disk if its contents have changed since it was last
     visited.  If you don’t want this, you may wish to revert the files
     you have visited in your buffers, or to turn on Auto-Revert mode in
     those buffers, before invoking this command.  *Note Reverting::.
     If you prefer that this command should always revisit the file,
     without you having to revert the file or enable Auto-Revert mode,
     you might want to set ‘dired-always-read-filesystem’ to non-‘nil’.

‘C-/’
‘C-x u’
‘C-_’
     Undo changes in the Dired buffer, such as adding or removing marks
     (‘dired-undo’).  _This command does not revert the actual file
     operations, nor recover lost files!_  It just undoes changes in the
     buffer itself.

     In some cases, using this after commands that operate on files can
     cause trouble.  For example, after renaming one or more files,
     ‘dired-undo’ restores the original names in the Dired buffer, which
     gets the Dired buffer out of sync with the actual contents of the
     directory.


File: emacs.info,  Node: Operating on Files,  Next: Shell Commands in Dired,  Prev: Marks vs Flags,  Up: Dired

31.7 Operating on Files
=======================

This section describes the basic Dired commands to operate on one file
or several files.  All of these commands are capital letters; all of
them use the minibuffer, either to read an argument or to ask for
confirmation, before they act.  All of them let you specify the files to
manipulate in these ways:

   • If you give the command a numeric prefix argument N, it operates on
     the next N files, starting with the current file.  (If N is
     negative, the command operates on the −N files preceding the
     current line.)

   • Otherwise, if some files are marked with ‘*’, the command operates
     on all those files.

   • Otherwise, the command operates on the current file only.

Certain other Dired commands, such as ‘!’ and the ‘%’ commands, use the
same conventions to decide which files to work on.

   In addition to Dired commands described here, you can also invoke
Version Control (VC) commands on one or more files shown in a Dired
buffer.  *Note Version Control::.

   Commands which ask for a destination directory, such as those which
copy and rename files or create links for them, try to guess the default
target directory for the operation.  Normally, they suggest the Dired
buffer’s default directory, but if the option ‘dired-dwim-target’ is
non-‘nil’, and if there is another Dired buffer displayed in some
window, that other buffer’s directory is suggested instead.  You can
customize ‘dired-dwim-target’ to prefer either the next window with a
Dired buffer, or the most recently used window with a Dired buffer, or
to use any other function.  When the value is a function, it will be
called with no arguments and is expected to return a list of directories
which will be used as defaults (i.e.  default target and “future
history”).

   Here are the file-manipulating Dired commands that operate on files.

‘C NEW <RET>’
     Copy the specified files (‘dired-do-copy’).  The argument NEW is
     the directory to copy into, or (if copying a single file) the new
     name.  This is like the shell command ‘cp’.

     The option ‘dired-create-destination-dirs’ controls whether Dired
     should create non-existent directories in the destination while
     copying/renaming files.  The default value ‘nil’ means Dired never
     creates such missing directories; the value ‘always’, means Dired
     automatically creates them; the value ‘ask’ means Dired asks you
     for confirmation before creating them.

     If the option ‘dired-create-destination-dirs-on-trailing-dirsep’ is
     non-‘nil’ in addition to ‘dired-create-destination-dirs’, a
     trailing directory separator at the destination directory is
     treated specially.  In that case, when copying to ‘test/’ and no
     directory ‘test’ exists already, it will be created and the
     specified source files or directories are copied into the newly
     created directory.

     If ‘dired-copy-preserve-time’ is non-‘nil’, then copying with this
     command preserves the modification time of the old file in the
     copy, like ‘cp -p’.

     The variable ‘dired-recursive-copies’ controls whether to copy
     directories recursively (like ‘cp -r’).  The default is ‘top’,
     which means to ask before recursively copying a directory.

     The variable ‘dired-copy-dereference’ controls whether to copy
     symbolic links as links or after dereferencing (like ‘cp -L’).  The
     default is ‘nil’, which means that the symbolic links are copied by
     creating new ones.

     The ‘dired-keep-marker-copy’ user option controls how this command
     handles file marking.  The default is to mark all new copies of
     files with a ‘C’ mark.

‘D’
     Delete the specified files (‘dired-do-delete’).  This is like the
     shell command ‘rm’.

     Like the other commands in this section, this command operates on
     the _marked_ files, or the next N files.  By contrast, ‘x’
     (‘dired-do-flagged-delete’) deletes all “flagged” files.

‘R NEW <RET>’
     Rename the specified files (‘dired-do-rename’).  If you rename a
     single file, the argument NEW is the new name of the file.  If you
     rename several files, the argument NEW is the directory into which
     to move the files (this is like the shell command ‘mv’).

     The option ‘dired-create-destination-dirs’ controls whether Dired
     should create non-existent directories in NEW.

     The option ‘dired-create-destination-dirs-on-trailing-dirsep’, when
     set in addition to ‘dired-create-destination-dirs’, controls
     whether a trailing directory separator at the destination is
     treated specially.  In that case, when renaming a directory ‘old’
     to ‘new/’ and no directory ‘new’ exists already, it will be created
     and ‘old’ is moved into the newly created directory.  Otherwise,
     ‘old’ is renamed to ‘new’.

     Dired automatically changes the visited file name of buffers
     associated with renamed files so that they refer to the new names.

     If the value of the variable ‘dired-vc-rename-file’ is non-‘nil’,
     files are renamed using the commands of the underlying VCS, via
     ‘vc-rename-file’ (*note VC Delete/Rename::).

‘H NEW <RET>’
     Make hard links to the specified files (‘dired-do-hardlink’).  This
     is like the shell command ‘ln’.  The argument NEW is the directory
     to make the links in, or (if making just one link) the name to give
     the link.

‘S NEW <RET>’
     Make symbolic links to the specified files (‘dired-do-symlink’).
     This is like ‘ln -s’.  The argument NEW is the directory to make
     the links in, or (if making just one link) the name to give the
     link.

‘Y NEW <RET>’
     Make relative symbolic links to the specified files
     (‘dired-do-relsymlink’).  The argument NEW is the directory to make
     the links in, or (if making just one link) the name to give the
     link.  This is like ‘dired-do-symlink’ but creates relative
     symbolic links.  For example:

              foo -> ../bar/foo

     It does not create absolute ones like:

              foo -> /path/that/may/change/any/day/bar/foo

‘M MODESPEC <RET>’
     Change the mode (also called “permission bits”) of the specified
     files (‘dired-do-chmod’).  MODESPEC can be in octal or symbolic
     notation, like arguments handled by the ‘chmod’ program.  This
     command does not follow symbolic links, so it reports an error if
     you try to change the mode of a symbolic link on a platform where
     such modes are immutable.

‘G NEWGROUP <RET>’
     Change the group of the specified files to NEWGROUP
     (‘dired-do-chgrp’).

‘O NEWOWNER <RET>’
     Change the owner of the specified files to NEWOWNER
     (‘dired-do-chown’).  (On most systems, only the superuser can do
     this.)

     The variable ‘dired-chown-program’ specifies the name of the
     program to use to do the work.  (This variable is necessary because
     different systems put ‘chown’ in different places).

‘T TIMESTAMP <RET>’
     Touch the specified files (‘dired-do-touch’).  This means updating
     their modification times to TIMESTAMP, which defaults to the
     present time.  This is like the shell command ‘touch’.

‘P COMMAND <RET>’
     Print the specified files (‘dired-do-print’).  You must specify the
     command to print them with, but the minibuffer starts out with a
     suitable guess made using the variables ‘lpr-command’ and
     ‘lpr-switches’ (the same variables that ‘lpr-buffer’ uses; *note
     Printing::).

‘Z’
     Compress the specified files (‘dired-do-compress’).  If the file
     appears to be a compressed file already, uncompress it instead.
     Each marked file is compressed into its own archive; this uses the
     ‘gzip’ program if it is available, otherwise it uses ‘compress’.

     On a directory name, this command produces a compressed archive
     depending on the ‘dired-compress-directory-default-suffix’ user
     option.  The default is a ‘.tar.gz’ archive containing all of the
     directory’s files, by running the ‘tar’ command with output piped
     to ‘gzip’.  To allow decompression of compressed directories,
     typing ‘Z’ on a ‘.tar.gz’ or ‘.tgz’ archive file unpacks all the
     files in the archive into a directory whose name is the archive
     name with the extension removed.

‘c’
     Compress the specified files (‘dired-do-compress-to’) into a single
     archive anywhere on the file system.  The default archive is
     controlled by the ‘dired-compress-directory-default-suffix’ user
     option.  Also see ‘dired-compress-files-alist’.

‘:d’
     Decrypt the specified files (‘epa-dired-do-decrypt’).  *Note
     (epa)Dired integration::.

‘:v’
     Verify digital signatures on the specified files
     (‘epa-dired-do-verify’).  *Note (epa)Dired integration::.

‘:s’
     Digitally sign the specified files (‘epa-dired-do-sign’).  *Note
     (epa)Dired integration::.

‘:e’
     Encrypt the specified files (‘epa-dired-do-encrypt’).  *Note
     (epa)Dired integration::.

‘L’
     Load the specified Emacs Lisp files (‘dired-do-load’).  *Note Lisp
     Libraries::.

‘B’
     Byte compile the specified Emacs Lisp files
     (‘dired-do-byte-compile’).  *Note Byte Compilation: (elisp)Byte
     Compilation.

‘I’
     Run Info on this file (assumed to be a file in Info format).

‘N’
     Run man on this file (assumed to be a file in ‘nroff’ format).

‘A REGEXP <RET>’
     Search all the specified files for the regular expression REGEXP
     (‘dired-do-find-regexp’).

     This command is a variant of ‘xref-find-references’ (*note
     Identifier Search::), it displays the ‘*xref*’ buffer, where you
     can navigate between matches and display them as needed using the
     commands described in *note Xref Commands::.

     If any of the marked files are directories, then this command
     searches all of the files in those directories, and any of their
     subdirectories, recursively, except files whose names match
     ‘grep-find-ignored-files’ and subdirectories whose names match
     ‘grep-find-ignored-directories’.

‘Q REGEXP <RET> TO <RET>’
     Perform ‘query-replace-regexp’ on each of the specified files,
     replacing matches for REGEXP with the string TO
     (‘dired-do-find-regexp-and-replace’).

     This command is a variant of ‘xref-query-replace-in-results’.  It
     presents an ‘*xref*’ buffer that lists all the matches of REGEXP,
     and you can use the special commands in that buffer (*note Xref
     Commands::).  In particular, if you exit the query replace loop,
     you can use ‘r’ in that buffer to replace more matches.  *Note
     Identifier Search::.

     Like with ‘dired-do-find-regexp’, if any of the marked files are
     directories, this command performs replacements in all of the files
     in those directories, and in any of their subdirectories,
     recursively, except for files whose names match
     ‘grep-find-ignored-files’ and subdirectories whose names match
     ‘grep-find-ignored-directories’.


File: emacs.info,  Node: Shell Commands in Dired,  Next: Shell Command Guessing,  Prev: Operating on Files,  Up: Dired

31.8 Shell Commands in Dired
============================

The Dired command ‘!’ (‘dired-do-shell-command’) reads a shell command
string in the minibuffer, and runs that shell command on one or more
files.  The files that the shell command operates on are determined in
the usual way for Dired commands (*note Operating on Files::).  The
command ‘X’ is a synonym for ‘!’.

   The command ‘&’ (‘dired-do-async-shell-command’) does the same,
except that it runs the shell command asynchronously.  (You can also do
this with ‘!’, by appending a ‘&’ character to the end of the shell
command.)  When the command operates on more than one file, it runs
multiple parallel copies of the specified shell command, one for each
file.  As an exception, if the specified shell command ends in ‘;’ or
‘;&’, the shell command is run in the background on each file
sequentially; Emacs waits for each invoked shell command to terminate
before running the next one.

   For both ‘!’ and ‘&’, the working directory for the shell command is
the top-level directory of the Dired buffer.

   If you tell ‘!’ or ‘&’ to operate on more than one file, the shell
command string determines how those files are passed to the shell
command:

   • If you use ‘*’ surrounded by whitespace in the command string, then
     the command runs just once, with the list of file names substituted
     for the ‘*’.  The order of file names is the order of appearance in
     the Dired buffer.

     Thus, ‘! tar cf foo.tar * <RET>’ runs ‘tar’ on the entire list of
     file names, putting them into one tar file ‘foo.tar’.

     If you want to use ‘*’ as a shell wildcard with whitespace around
     it, write ‘*""’.  In the shell, this is equivalent to ‘*’; but
     since the ‘*’ is not surrounded by whitespace, Dired does not treat
     it specially.  Emacs will prompt for confirmation if you do this,
     unless ‘dired-confirm-shell-command’ is ‘nil’.

   • Otherwise, if the command string contains ‘?’ surrounded by
     whitespace or ‘`?`’, Emacs runs the shell command once _for each
     file_, substituting the current file name for ‘?’ and ‘`?`’ each
     time.  You can use both ‘?’ and ‘`?`’ more than once in the
     command; the same file name replaces each occurrence.  If you mix
     them with ‘*’ the command signals an error.

   • If the command string contains neither ‘*’ nor ‘?’ nor ‘`?`’, Emacs
     runs the shell command once for each file, adding the file name at
     the end.  For example, ‘! uudecode <RET>’ runs ‘uudecode’ on each
     file.

   To iterate over the file names in a more complicated fashion, you
might prefer to use an explicit shell loop.  For example, here is how to
uuencode each file, making the output file name by appending ‘.uu’ to
the input file name:

     for file in * ; do uuencode "$file" "$file" >"$file".uu; done

   The same example with ‘`?`’ notation:
     uuencode ? ? > `?`.uu

   The ‘!’ and ‘&’ commands do not attempt to update the Dired buffer to
show new or modified files, because they don’t know what files will be
changed.  Use the ‘g’ command to update the Dired buffer (*note Dired
Updating::).

   *Note Single Shell::, for information about running shell commands
outside Dired.


File: emacs.info,  Node: Shell Command Guessing,  Next: Transforming File Names,  Prev: Shell Commands in Dired,  Up: Dired

31.9 Shell Command Guessing
===========================

Based upon the name of a file, Dired tries to guess what shell command
you might want to apply to it.  For example, if you have point on a file
named ‘foo.tar’ and you press ‘!’, Dired will guess that you want to run
‘tar xvf’, and suggest that as the default shell command.

   You can type ‘M-n’ to get the default into the minibuffer for
editing.  If there are several commands for a given file, type ‘M-n’
several times to see each matching command in order.

   Dired only tries to guess a command for a single file, never for a
list of marked files.

 -- Variable: dired-guess-shell-alist-default
     This variable specifies the predefined rules for guessing shell
     commands suitable for certain files.  Set this to ‘nil’ to turn
     guessing off.  The elements of ‘dired-guess-shell-alist-user’
     (defined by the user) will override these rules.

 -- Variable: dired-guess-shell-alist-user
     If non-‘nil’, this variable specifies the user-defined alist of
     file regexps and their suggested commands.  These rules take
     precedence over the predefined rules in the variable
     ‘dired-guess-shell-alist-default’ when ‘dired-do-shell-command’ is
     run).  The default is ‘nil’.

     Each element of the alist looks like

          (REGEXP COMMAND...)

     where each COMMAND can either be a string or a Lisp expression that
     evaluates to a string.  If several commands are given, all of them
     will temporarily be pushed onto the history.

     A ‘*’ in the shell command stands for the file name that matched
     REGEXP.  When Emacs invokes the COMMAND, it replaces each instance
     of ‘*’ with the matched file name.

     To add rules for ‘.foo’ and ‘.bar’ file extensions, add this to
     your Init file:

          (setq dired-guess-shell-alist-user
                (list
                 (list "\\.foo$" "FOO-COMMAND")  ; fixed rule
                 ;; possibly more rules...
                 (list "\\.bar$"  ; rule with condition test
                       '(if CONDITION
                            "BAR-COMMAND-1"
                          "BAR-COMMAND-2"))))

     This will override any predefined rules for the same extensions.

   You can find more user options with ‘M-x customize-group <RET>
dired-guess <RET>’.


File: emacs.info,  Node: Transforming File Names,  Next: Comparison in Dired,  Prev: Shell Command Guessing,  Up: Dired

31.10 Transforming File Names in Dired
======================================

This section describes Dired commands which alter file names in a
systematic way.  Each command operates on some or all of the marked
files, using a new name made by transforming the existing name.

   Like the basic Dired file-manipulation commands (*note Operating on
Files::), the commands described here operate either on the next N
files, or on all files marked with ‘*’, or on the current file.  (To
mark files, use the commands described in *note Marks vs Flags::.)

   All of the commands described in this section work _interactively_:
they ask you to confirm the operation for each candidate file.  Thus,
you can select more files than you actually need to operate on (e.g.,
with a regexp that matches many files), and then filter the selected
names by typing ‘y’ or ‘n’ when the command prompts for confirmation.

‘% u’
     Rename each of the selected files to an upper-case name
     (‘dired-upcase’).  If the old file names are ‘Foo’ and ‘bar’, the
     new names are ‘FOO’ and ‘BAR’.

‘% l’
     Rename each of the selected files to a lower-case name
     (‘dired-downcase’).  If the old file names are ‘Foo’ and ‘bar’, the
     new names are ‘foo’ and ‘bar’.

‘% R FROM <RET> TO <RET>’
‘% C FROM <RET> TO <RET>’
‘% H FROM <RET> TO <RET>’
‘% S FROM <RET> TO <RET>’
‘% Y FROM <RET> TO <RET>’
     These five commands rename, copy, make hard links, make soft links,
     and make relative soft links, in each case computing the new name
     by regular-expression substitution from the name of the old file.

   The four regular-expression substitution commands effectively perform
a search-and-replace on the selected file names.  They read two
arguments: a regular expression FROM, and a substitution pattern TO;
they match each old file name against FROM, and then replace the
matching part with TO.  You can use ‘\&’ and ‘\DIGIT’ in TO to refer to
all or part of what the pattern matched in the old file name, as in
‘replace-regexp’ (*note Regexp Replace::).  If the regular expression
matches more than once in a file name, only the first match is replaced.

   For example, ‘% R ^.*$ <RET> x-\& <RET>’ renames each selected file
by prepending ‘x-’ to its name.  The inverse of this, removing ‘x-’ from
the front of each file name, is also possible: one method is ‘% R
^x-\(.*\)$ <RET> \1 <RET>’; another is ‘% R ^x- <RET> <RET>’.  (Use ‘^’
and ‘$’ to anchor matches that should span the whole file name.)

   Normally, the replacement process does not consider the files’
directory names; it operates on the file name within the directory.  If
you specify a numeric argument of zero, then replacement affects the
entire absolute file name including directory name.  (A non-zero
argument specifies the number of files to operate on.)

   You may want to select the set of files to operate on using the same
regexp FROM that you will use to operate on them.  To do this, mark
those files with ‘% m FROM <RET>’, then use the same regular expression
in the command to operate on the files.  To make this more convenient,
the ‘%’ commands to operate on files use the last regular expression
specified in any ‘%’ command as a default.


File: emacs.info,  Node: Comparison in Dired,  Next: Subdirectories in Dired,  Prev: Transforming File Names,  Up: Dired

31.11 File Comparison with Dired
================================

The ‘=’ (‘dired-diff’) command compares the current file (the file at
point) with another file (read using the minibuffer) using the ‘diff’
program.  The file specified with the minibuffer is the first argument
of ‘diff’, and file at point is the second argument.  The output of the
‘diff’ program is shown in a buffer using Diff mode (*note Comparing
Files::).

   If the region is active, the default for the file read using the
minibuffer is the file at the mark (i.e., the ordinary Emacs mark, not a
Dired mark; *note Setting Mark::).  Otherwise, if the file at point has
a backup file (*note Backup::), that is the default.

   You could also compare files using ‘ediff-files’, see *note
(ediff)Major Entry Points::.


File: emacs.info,  Node: Subdirectories in Dired,  Next: Subdir Switches,  Prev: Comparison in Dired,  Up: Dired

31.12 Subdirectories in Dired
=============================

A Dired buffer usually displays just one directory, but you can
optionally include its subdirectories as well.

   The simplest way to include multiple directories in one Dired buffer
is to specify the options ‘-lR’ for running ‘ls’.  (If you give a
numeric argument when you run Dired, then you can specify these options
in the minibuffer.)  That produces a recursive directory listing showing
all subdirectories at all levels.

   More often, you will want to show only specific subdirectories.  You
can do this with ‘i’ (‘dired-maybe-insert-subdir’):

‘i’
     Insert the contents of a subdirectory later in the buffer.

If you use this command on a line that describes a file which is a
directory, it inserts the contents of that directory into the same Dired
buffer, and moves there.  Inserted subdirectory contents follow the
top-level directory of the Dired buffer, just as they do in ‘ls -lR’
output.

   If the subdirectory’s contents are already present in the buffer, the
‘i’ command just moves to it.

   In either case, ‘i’ sets the Emacs mark before moving, so ‘C-u
C-<SPC>’ returns to your previous position in the Dired buffer (*note
Setting Mark::).  You can also use ‘^’ to return to the parent directory
in the same Dired buffer (*note Dired Visiting::).

   Use the ‘l’ command (‘dired-do-redisplay’) to update the
subdirectory’s contents, and use ‘C-u k’ on the subdirectory header line
to remove the subdirectory listing (*note Dired Updating::).  You can
also hide and show inserted subdirectories (*note Hiding
Subdirectories::).


File: emacs.info,  Node: Subdir Switches,  Next: Subdirectory Motion,  Prev: Subdirectories in Dired,  Up: Dired

31.13 Subdirectory Switches in Dired
====================================

You can insert subdirectories with specified ‘ls’ switches in Dired
buffers using ‘C-u i’.  You can change the ‘ls’ switches of an already
inserted subdirectory at point using ‘C-u l’.

   Dired preserves the switches if you revert the buffer.  Deleting a
subdirectory forgets about its switches.

   Using ‘dired-undo’ (*note Marks vs Flags::) to reinsert or delete
subdirectories that were inserted with explicit switches can bypass
Dired’s machinery for remembering (or forgetting) switches.  Deleting a
subdirectory using ‘dired-undo’ does not forget its switches.  When
later reinserted using ‘i’, it will be reinserted using its old
switches.  Using ‘dired-undo’ to reinsert a subdirectory that was
deleted using the regular Dired commands (not ‘dired-undo’) will
originally insert it with its old switches.  Reverting the buffer,
however, will relist it using the buffer’s default switches.  If any of
this yields problems, you can easily correct the situation using ‘C-u i’
or ‘C-u l’.

   Dired does not remember the ‘R’ switch.  Inserting a subdirectory
with switches that include the ‘R’ switch is equivalent to inserting
each of its subdirectories using all remaining switches.  For instance,
updating or killing a subdirectory that was inserted with the ‘R’ switch
will not update or kill its subdirectories.

   The buffer’s default switches do not affect subdirectories that were
inserted using explicitly specified switches.  In particular, commands
such as ‘s’ that change the buffer’s switches do not affect such
subdirectories.  (They do, however, affect subdirectories without
explicitly assigned switches.)

   You can make Dired forget about all subdirectory switches and relist
all subdirectories with the buffer’s default switches using ‘M-x
dired-reset-subdir-switches’.  This also reverts the Dired buffer.


File: emacs.info,  Node: Subdirectory Motion,  Next: Hiding Subdirectories,  Prev: Subdir Switches,  Up: Dired

31.14 Moving Over Subdirectories
================================

When a Dired buffer lists subdirectories, you can use the page motion
commands ‘C-x [’ and ‘C-x ]’ to move by entire directories (*note
Pages::).

   The following commands move across, up and down in the tree of
directories within one Dired buffer.  They move to “directory header
lines”, which are the lines that give a directory’s name, at the
beginning of the directory’s contents.

‘C-M-n’
     Go to next subdirectory header line, regardless of level
     (‘dired-next-subdir’).

‘C-M-p’
     Go to previous subdirectory header line, regardless of level
     (‘dired-prev-subdir’).

‘C-M-u’
     Go up to the parent directory’s header line (‘dired-tree-up’).

‘C-M-d’
     Go down in the directory tree, to the first subdirectory’s header
     line (‘dired-tree-down’).

‘<’
     Move up to the previous directory-file line (‘dired-prev-dirline’).
     These lines are the ones that describe a directory as a file in its
     parent directory.

‘>’
     Move down to the next directory-file line (‘dired-next-dirline’).

‘M-G’
     Prompt for a directory and move to its directory-file line
     (‘dired-goto-subdir’).


File: emacs.info,  Node: Hiding Subdirectories,  Next: Dired Updating,  Prev: Subdirectory Motion,  Up: Dired

31.15 Hiding Subdirectories
===========================

“Hiding” a subdirectory means to make it invisible, except for its
header line.

‘$’
     Hide or show the subdirectory that point is in, and move point to
     the next subdirectory (‘dired-hide-subdir’).  This is a toggle.  A
     numeric argument serves as a repeat count.

‘M-$’
     Hide all subdirectories in this Dired buffer, leaving only their
     header lines (‘dired-hide-all’).  Or, if any subdirectory is
     currently hidden, make all subdirectories visible again.  You can
     use this command to get an overview in very deep directory trees or
     to move quickly to subdirectories far away.

   Ordinary Dired commands never consider files inside a hidden
subdirectory.  For example, the commands to operate on marked files
ignore files in hidden directories even if they are marked.  Thus you
can use hiding to temporarily exclude subdirectories from operations
without having to remove the Dired marks on files in those
subdirectories.

   *Note Subdirectories in Dired::, for how to insert a subdirectory
listing, and see *note Dired Updating::, for how to delete it.


File: emacs.info,  Node: Dired Updating,  Next: Dired and Find,  Prev: Hiding Subdirectories,  Up: Dired

31.16 Updating the Dired Buffer
===============================

This section describes commands to update the Dired buffer to reflect
outside (non-Dired) changes in the directories and files, and to delete
part of the Dired buffer.

‘g’
     Update the entire contents of the Dired buffer (‘revert-buffer’).

‘l’
     Update the specified files (‘dired-do-redisplay’).  You specify the
     files for ‘l’ in the same way as for file operations.

‘k’
     Delete the specified _file lines_—not the files, just the lines
     (‘dired-do-kill-lines’).

‘s’
     Toggle between alphabetical order and date/time order
     (‘dired-sort-toggle-or-edit’).

‘C-u s SWITCHES <RET>’
     Refresh the Dired buffer using SWITCHES as
     ‘dired-listing-switches’.

   Type ‘g’ (‘revert-buffer’) to update the contents of the Dired
buffer, based on changes in the files and directories listed.  This
preserves all marks except for those on files that have vanished.
Hidden subdirectories are updated but remain hidden.

   To update only some of the files, type ‘l’ (‘dired-do-redisplay’).
Like the Dired file-operating commands, this command operates on the
next N files (or previous −N files), or on the marked files if any, or
on the current file.  Updating the files means reading their current
status, then updating their lines in the buffer to indicate that status.

   If you use ‘l’ on a subdirectory header line, it updates the contents
of the corresponding subdirectory.

   If you use ‘C-x d’ or some other Dired command to visit a directory
that is already being shown in a Dired buffer, Dired switches to that
buffer but does not update it.  If the buffer is not up-to-date, Dired
displays a warning telling you to type ‘g’ to update it.  You can also
tell Emacs to revert each Dired buffer automatically when you revisit
it, by setting the variable ‘dired-auto-revert-buffer’ to a non-‘nil’
value.

   To delete _file lines_ from the buffer—without actually deleting the
files—type ‘k’ (‘dired-do-kill-lines’).  Like the file-operating
commands, this command operates on the next N files, or on the marked
files if any.  However, it does not operate on the current file, since
otherwise mistyping ‘k’ could be annoying.

   If you use ‘k’ to kill the line for a directory file which you had
inserted in the Dired buffer as a subdirectory (*note Subdirectories in
Dired::), it removes the subdirectory listing as well.  Typing ‘C-u k’
on the header line for a subdirectory also removes the subdirectory line
from the Dired buffer.

   The ‘g’ command brings back any individual lines that you have killed
in this way, but not subdirectories—you must use ‘i’ to reinsert a
subdirectory.

   The files in a Dired buffers are normally listed in alphabetical
order by file names.  Alternatively Dired can sort them by date/time.
The Dired command ‘s’ (‘dired-sort-toggle-or-edit’) switches between
these two sorting modes.  The mode line in a Dired buffer indicates
which way it is currently sorted—by name, or by date.

   ‘C-u s SWITCHES <RET>’ lets you specify a new value for
‘dired-listing-switches’.


File: emacs.info,  Node: Dired and Find,  Next: Wdired,  Prev: Dired Updating,  Up: Dired

31.17 Dired and ‘find’
======================

You can select a set of files for display in a Dired buffer more
flexibly by using the ‘find’ utility to choose the files.

   To search for files with names matching a wildcard pattern use ‘M-x
find-name-dired’.  It reads arguments DIRECTORY and PATTERN, and chooses
all the files in DIRECTORY or its subdirectories whose individual names
match PATTERN.

   The files thus chosen are displayed in a Dired buffer, in which the
ordinary Dired commands are available.

   If you want to test the contents of files, rather than their names,
use ‘M-x find-grep-dired’.  This command reads two minibuffer arguments,
DIRECTORY and REGEXP; it chooses all the files in DIRECTORY or its
subdirectories that contain a match for REGEXP.  It works by running the
programs ‘find’ and ‘grep’.  See also ‘M-x grep-find’, in *note Grep
Searching::.  Remember to write the regular expression for ‘grep’, not
for Emacs.  (An alternative method of showing files whose contents match
a given regexp is the ‘% g REGEXP’ command, see *note Marks vs Flags::.)

   The most general command in this series is ‘M-x find-dired’, which
lets you specify any condition that ‘find’ can test.  It takes two
minibuffer arguments, DIRECTORY and FIND-ARGS; it runs ‘find’ in
DIRECTORY, passing FIND-ARGS to tell ‘find’ what condition to test.  To
use this command, you need to know how to use ‘find’.

   The format of listing produced by these commands is controlled by the
variable ‘find-ls-option’.  This is a pair of options; the first
specifying how to call ‘find’ to produce the file listing, and the
second telling Dired to parse the output.

   The command ‘M-x locate’ provides a similar interface to the ‘locate’
program.  ‘M-x locate-with-filter’ is similar, but keeps only files
whose names match a given regular expression.

   These buffers don’t work entirely like ordinary Dired buffers: file
operations work, but do not always automatically update the buffer.
Reverting the buffer with ‘g’ deletes all inserted subdirectories, and
erases all flags and marks.


File: emacs.info,  Node: Wdired,  Next: Image-Dired,  Prev: Dired and Find,  Up: Dired

31.18 Editing the Dired Buffer
==============================

Wdired is a special mode that allows you to perform file operations by
editing the Dired buffer directly (the “W” in “Wdired” stands for
“writable”).  To enter Wdired mode, type ‘C-x C-q’
(‘dired-toggle-read-only’) while in a Dired buffer.  Alternatively, use
the ‘Immediate / Edit File Names’ menu item.

   While in Wdired mode, you can rename files by editing the file names
displayed in the Dired buffer.  All the ordinary Emacs editing commands,
including rectangle operations and ‘query-replace’, are available for
this.  Once you are done editing, type ‘C-c C-c’ (‘wdired-finish-edit’).
This applies your changes and switches back to ordinary Dired mode.

   Apart from simply renaming files, you can move a file to another
directory by typing in the new file name (either absolute or relative).
To mark a file for deletion, delete the entire file name.  To change the
target of a symbolic link, edit the link target name which appears next
to the link name.

   If you edit the file names to create a new subdirectory, Wdired will
automatically create these new directories.  To inhibit this behavior,
set ‘wdired-create-parent-directories’ to ‘nil’.

   The rest of the text in the buffer, such as the file sizes and
modification dates, is marked read-only, so you can’t edit it.  However,
if you set ‘wdired-allow-to-change-permissions’ to ‘t’, you can edit the
file permissions.  For example, you can change ‘-rw-r--r--’ to
‘-rw-rw-rw-’ to make a file world-writable.  These changes also take
effect when you type ‘C-c C-c’.


File: emacs.info,  Node: Image-Dired,  Next: Misc Dired Features,  Prev: Wdired,  Up: Dired

31.19 Viewing Image Thumbnails in Dired
=======================================

Image-Dired is a facility for browsing image files.  It provides viewing
the images either as thumbnails or in full size, either inside Emacs or
through an external viewer.  This is different from Image mode (*note
Image Mode::) for visiting an image file in the Emacs buffer.

   To enter Image-Dired, mark the image files you want to look at in the
Dired buffer, using ‘m’ as usual.  Then type ‘C-t d’
(‘image-dired-display-thumbs’).  This creates and switches to a buffer
containing Image-Dired, corresponding to the marked files.

   You can also enter Image-Dired directly by typing ‘M-x image-dired’.
This prompts for a directory; specify one that has image files.  This
creates thumbnails for all the images in that directory, and displays
them all in the thumbnail buffer.  The thumbnails are generated in the
background and are loaded as they become available.

   With point in the thumbnail buffer, you can type <RET>
(‘image-dired-display-this’) to display the image in another window.
Use the standard Emacs movement key bindings or the arrow keys to move
around in the thumbnail buffer.  For easy browsing, use <SPC>
(‘image-dired-display-next’) to advance and display the next image.
Typing <DEL> (‘image-dired-display-previous’) backs up to the previous
thumbnail and displays that instead.

   Type ‘C-<RET>’ (‘image-dired-thumbnail-display-external’) to display
the image in an external viewer.  You must first configure
‘image-dired-external-viewer’.

   You can delete images through Image-Dired also.  Type ‘d’
(‘image-dired-flag-thumb-original-file’) to flag the image file for
deletion in the Dired buffer.  Alternatively, you can remove an image’s
thumbnail from the thumbnail buffer without flagging the image for
deletion, by typing ‘C-d’ (‘image-dired-delete-char’).

   You could also use Image-Dired for “inline” operations (i.e., right
into the Dired buffer).  Type ‘C-t C-t’, and the thumbnails of the
selected images in Dired will appear in front of their names
(‘image-dired-dired-toggle-marked-thumbs’).  ‘C-t i’ and ‘C-t x’ will
display the image under the point in Emacs or with the external viewer,
respectively.

   More advanced features include “image tags”, which are metadata used
to categorize image files.  The tags are stored in a plain text file
configured by ‘image-dired-tags-db-file’.

   To tag image files, mark them in the Dired buffer (you can also mark
files in Dired from the thumbnail buffer by typing ‘m’) and type ‘C-t t’
(‘image-dired-tag-files’).  This reads the tag name in the minibuffer.
To mark files having a certain tag, type ‘C-t f’
(‘image-dired-mark-tagged-files’).  After marking image files with a
certain tag, you can use ‘C-t d’ to view them.

   You can also tag a file directly from the thumbnail buffer by typing
‘t t’, and you can remove a tag by typing ‘t r’.  There is also a
special tag called “comment” for each file (it is not a tag in the exact
same sense as the other tags, it is handled slightly differently).  That
is used to enter a comment or description about the image.  You comment
a file from the thumbnail buffer by typing ‘c’.  You will be prompted
for a comment.  Type ‘C-t c’ to add a comment from Dired
(‘image-dired-dired-comment-files’).  ‘C-t e’ will bring a buffer to
edit comment and tags (‘image-dired-dired-edit-comment-and-tags’).

   Files that are marked in Dired will also be marked in Image-Dired if
‘image-dired-thumb-visible-marks’ is non-‘nil’ (which is the default).

   Image-Dired also provides simple image manipulation.  In the
thumbnail buffer, type ‘L’ to rotate the original image 90 degrees anti
clockwise, and ‘R’ to rotate it 90 degrees clockwise.  This rotation is
lossless, and uses an external utility called ‘jpegtran’, which you need
to install first.


File: emacs.info,  Node: Misc Dired Features,  Prev: Image-Dired,  Up: Dired

31.20 Other Dired Features
==========================

By default, Dired will display the available space on the disk in the
first line.  This is the ‘first’ value of the ‘dired-free-space’
variable.  If you set this to ‘separate’ instead, Dired will display
this on a separate line (including the space the files in the current
directory takes).  If you set this to ‘nil’, the free space isn’t
displayed at all.

   The command ‘+’ (‘dired-create-directory’) reads a directory’s name,
and creates that directory.  It signals an error if the directory
already exists.

   The command (‘dired-create-empty-file’) reads a file name, and
creates that file.  It signals an error if the file already exists.

   The command ‘M-s a C-s’ (‘dired-do-isearch’) begins a multi-file
incremental search on the marked files.  If a search fails at the end of
a file, typing ‘C-s’ advances to the next marked file and repeats the
search; at the end of the last marked file, the search wraps around to
the first marked file.  The command ‘M-s a M-C-s’
(‘dired-do-isearch-regexp’) does the same with a regular expression
search.  *Note Repeat Isearch::, for information about search
repetition.

   The command ‘w’ (‘dired-copy-filename-as-kill’) puts the names of the
marked (or next N) files into the kill ring, as if you had killed them
with ‘C-w’.  The names are separated by a space.

   With a zero prefix argument, this uses the absolute file name of each
marked file.  With just ‘C-u’ as the prefix argument, it uses file names
relative to the Dired buffer’s default directory.  (This can still
contain slashes if in a subdirectory.)  As a special case, if point is
on a directory header line, ‘w’ gives you the absolute name of that
directory.  Any prefix argument or marked files are ignored in this
case.

   The main purpose of this command is so that you can yank the file
names into arguments for other Emacs commands.  It also displays what it
added to the kill ring, so you can use it to display the list of
currently marked files in the echo area.

   If you have an HTML file in the file listing, it can be useful to
view that file with a browser.  The ‘W’ (‘browse-url-of-dired-file’)
command will use the standard configured browser to view that file.

   The command ‘(’ (‘dired-hide-details-mode’) toggles whether details,
such as ownership or file permissions, are visible in the current Dired
buffer.  By default, it also hides the targets of symbolic links, and
all lines other than the header line and file/directory listings.  To
change this, customize the options
‘dired-hide-details-hide-symlink-targets’ and
‘dired-hide-details-hide-information-lines’, respectively.

   If the directory you are visiting is under version control (*note
Version Control::), then the normal VC diff and log commands will
operate on the selected files.

   The command ‘M-x dired-compare-directories’ is used to compare the
current Dired buffer with another directory.  It marks all the files
that differ between the two directories.  It puts these marks in all
Dired buffers where these files are listed, which of course includes the
current buffer.

   The default comparison method (used if you type <RET> at the prompt)
is to compare just the file names—file names differ if they do not
appear in the other directory.  You can specify more stringent
comparisons by entering a Lisp expression, which can refer to the
variables ‘size1’ and ‘size2’, the respective file sizes; ‘mtime1’ and
‘mtime2’, the last modification times in seconds, as floating point
numbers; and ‘fa1’ and ‘fa2’, the respective file attribute lists (as
returned by the function ‘file-attributes’).  This expression is
evaluated for each pair of like-named files, and files differ if the
expression’s value is non-‘nil’.

   For instance, the sequence ‘M-x dired-compare-directories <RET> (>
mtime1 mtime2) <RET>’ marks files newer in this directory than in the
other, and marks files older in the other directory than in this one.
It also marks files with no counterpart, in both directories, as always.

   On the X Window System, Emacs supports the drag and drop protocol.
You can drag a file object from another program, and drop it onto a
Dired buffer; this either moves, copies, or creates a link to the file
in that directory.  Precisely which action is taken is determined by the
originating program.  Dragging files out of a Dired buffer is also
supported, by enabling the user option ‘dired-mouse-drag-files’, the
mouse can be used to drag files onto other programs.  When set to
‘link’, it will make the other program (typically a file manager) create
a symbolic link to the file; when set to ‘move’, it will make the other
program move the file to a new location, and setting it to any other
non-‘nil’ value will make the other program open or create a copy of the
file.  The keyboard modifiers pressed during the drag-and-drop operation
can also control what action the other program takes towards the file.


File: emacs.info,  Node: Calendar/Diary,  Next: Sending Mail,  Prev: Dired,  Up: Top

# /. 32 The Calendar and the Diary
*********************************

Emacs provides the functions of a desk calendar, with a diary of planned
or past events.  It also has facilities for managing your appointments,
and keeping track of how much time you spend working on certain
projects.

   To enter the calendar, type ‘M-x calendar’.  This displays a
three-month calendar centered on the current month, with point on the
current date.  With a numeric argument, as in ‘C-u M-x calendar’, it
prompts you for the month and year to be the center of the three-month
calendar.  The calendar uses its own buffer, whose major mode is
Calendar mode.

   ‘mouse-3’ in the calendar brings up a menu of operations on a
particular date; ‘mouse-2’ brings up a menu of commonly used calendar
features that are independent of any particular date.  To exit the
calendar, type ‘q’.

* Menu:

* Calendar Motion::     Moving through the calendar; selecting a date.
* Scroll Calendar::     Bringing earlier or later months onto the screen.
* Counting Days::       How many days are there between two dates?
* General Calendar::    Exiting or recomputing the calendar.
* Writing Calendar Files:: Writing calendars to files of various formats.
* Holidays::            Displaying dates of holidays.
* Sunrise/Sunset::      Displaying local times of sunrise and sunset.
* Lunar Phases::        Displaying phases of the moon.
* Other Calendars::     Converting dates to other calendar systems.
* Diary::               Displaying events from your diary.
* Daylight Saving::     How to specify when daylight saving time is active.
* Time Intervals::      Keeping track of time intervals.
* Advanced Calendar/Diary Usage:: Advanced Calendar/Diary customization.


File: emacs.info,  Node: Calendar Motion,  Next: Scroll Calendar,  Up: Calendar/Diary

32.1 Movement in the Calendar
=============================

Calendar mode provides commands to move through the calendar in logical
units of time such as days, weeks, months, and years.  If you move
outside the three months originally displayed, the calendar display
scrolls automatically through time to make the selected date visible.
Moving to a date lets you view its holidays or diary entries, or convert
it to other calendars; moving by long time periods is also useful simply
to scroll the calendar.

* Menu:

* Calendar Unit Motion::      Moving by days, weeks, months, and years.
* Move to Beginning or End::  Moving to start/end of weeks, months, and years.
* Specified Dates::           Moving to the current date or another
                                specific date.


File: emacs.info,  Node: Calendar Unit Motion,  Next: Move to Beginning or End,  Up: Calendar Motion

32.1.1 Motion by Standard Lengths of Time
-----------------------------------------

The commands for movement in the calendar buffer parallel the commands
for movement in text.  You can move forward and backward by days, weeks,
months, and years.

‘C-f’
     Move point one day forward (‘calendar-forward-day’).
‘C-b’
     Move point one day backward (‘calendar-backward-day’).
‘C-n’
     Move point one week forward (‘calendar-forward-week’).
‘C-p’
     Move point one week backward (‘calendar-backward-week’).
‘M-}’
     Move point one month forward (‘calendar-forward-month’).
‘M-{’
     Move point one month backward (‘calendar-backward-month’).
‘C-x ]’
     Move point one year forward (‘calendar-forward-year’).
‘C-x [’
     Move point one year backward (‘calendar-backward-year’).

   The day and week commands are natural analogues of the usual Emacs
commands for moving by characters and by lines.  Just as ‘C-n’ usually
moves to the same column in the following line, in Calendar mode it
moves to the same day in the following week.  And ‘C-p’ moves to the
same day in the previous week.

   The arrow keys are equivalent to ‘C-f’, ‘C-b’, ‘C-n’ and ‘C-p’, just
as they normally are in other modes.

   The commands for motion by months and years work like those for
weeks, but move a larger distance.  The month commands ‘M-}’ and ‘M-{’
move forward or backward by an entire month.  The year commands ‘C-x ]’
and ‘C-x [’ move forward or backward a whole year.

   The easiest way to remember these commands is to consider months and
years analogous to paragraphs and pages of text, respectively.  But the
calendar movement commands themselves do not quite parallel those for
movement through text: the ordinary Emacs paragraph commands move to the
beginning or end of a paragraph, whereas these month and year commands
move by an entire month or an entire year, keeping the same date within
the month or year.

   All these commands accept a numeric argument as a repeat count.  For
convenience, the digit keys and the minus sign specify numeric arguments
in Calendar mode even without the Meta modifier.  For example, ‘100 C-f’
moves point 100 days forward from its present location.


File: emacs.info,  Node: Move to Beginning or End,  Next: Specified Dates,  Prev: Calendar Unit Motion,  Up: Calendar Motion

32.1.2 Beginning or End of Week, Month or Year
----------------------------------------------

A week (or month, or year) is not just a quantity of days; we think of
weeks (months, years) as starting on particular dates.  So Calendar mode
provides commands to move to the start or end of a week, month or year:

‘C-a’
     Move point to start of week (‘calendar-beginning-of-week’).
‘C-e’
     Move point to end of week (‘calendar-end-of-week’).
‘M-a’
     Move point to start of month (‘calendar-beginning-of-month’).
‘M-e’
     Move point to end of month (‘calendar-end-of-month’).
‘M-<’
     Move point to start of year (‘calendar-beginning-of-year’).
‘M->’
     Move point to end of year (‘calendar-end-of-year’).

   These commands also take numeric arguments as repeat counts, with the
repeat count indicating how many weeks, months, or years to move
backward or forward.

   By default, weeks begin on Sunday.  To make them begin on Monday
instead, set the variable ‘calendar-week-start-day’ to 1.  To change
which day headers are highlighted as weekend days, set the variable
‘calendar-weekend-days’.


File: emacs.info,  Node: Specified Dates,  Prev: Move to Beginning or End,  Up: Calendar Motion

32.1.3 Specified Dates
----------------------

Calendar mode provides commands for moving to a particular date
specified in various ways.

‘g d’
     Move point to specified date (‘calendar-goto-date’).
‘g D’
     Move point to specified day of year (‘calendar-goto-day-of-year’).
‘g w’
     Move point to specified week of year (‘calendar-iso-goto-week’).
‘o’
     Center calendar around specified month (‘calendar-other-month’).
‘.’
     Move point to today’s date (‘calendar-goto-today’).

   ‘g d’ (‘calendar-goto-date’) prompts for a year, a month, and a day
of the month, and then moves to that date.  Because the calendar
includes all dates from the beginning of the current era, you must type
the year in its entirety; that is, type ‘2010’, not ‘10’.

   ‘g D’ (‘calendar-goto-day-of-year’) prompts for a year and day
number, and moves to that date.  Negative day numbers count backward
from the end of the year.  ‘g w’ (‘calendar-iso-goto-week’) prompts for
a year and week number, and moves to that week.

   ‘o’ (‘calendar-other-month’) prompts for a month and year, then
centers the three-month calendar around that month.

   You can return to today’s date with ‘.’ (‘calendar-goto-today’).


File: emacs.info,  Node: Scroll Calendar,  Next: Counting Days,  Prev: Calendar Motion,  Up: Calendar/Diary

32.2 Scrolling in the Calendar
==============================

The calendar display scrolls automatically through time when you move
out of the visible portion.  You can also scroll it manually.  Imagine
that the calendar window contains a long strip of paper with the months
on it.  Scrolling the calendar means moving the strip horizontally, so
that new months become visible in the window.

‘>’
     Scroll calendar one month forward (‘calendar-scroll-left’).
‘<’
     Scroll calendar one month backward (‘calendar-scroll-right’).
‘C-v’
‘<PageDown>’
‘<next>’
     Scroll forward by three months
     (‘calendar-scroll-left-three-months’).
‘M-v’
‘<PageUp>’
‘<prior>’
     Scroll backward by three months
     (‘calendar-scroll-right-three-months’).

   The most basic calendar scroll commands scroll by one month at a
time.  This means that there are two months of overlap between the
display before the command and the display after.  ‘>’ scrolls the
calendar contents one month forward in time.  ‘<’ scrolls the contents
one month backwards in time.

   The commands ‘C-v’ and ‘M-v’ scroll the calendar by an entire
screenful—three months—in analogy with the usual meaning of these
commands.  ‘C-v’ makes later dates visible and ‘M-v’ makes earlier dates
visible.  These commands take a numeric argument as a repeat count; in
particular, since ‘C-u’ multiplies the next command by four, typing ‘C-u
C-v’ scrolls the calendar forward by a year and typing ‘C-u M-v’ scrolls
the calendar backward by a year.

   The function keys <PageDown> (or <next>) and <PageUp> (or <prior>)
are equivalent to ‘C-v’ and ‘M-v’, just as they are in other modes.


File: emacs.info,  Node: Counting Days,  Next: General Calendar,  Prev: Scroll Calendar,  Up: Calendar/Diary

32.3 Counting Days
==================

‘M-=’
     Display the number of days in the current region
     (‘calendar-count-days-region’).

   To determine the number of days in a range, set the mark on one date
using ‘C-<SPC>’, move point to another date, and type ‘M-=’
(‘calendar-count-days-region’).  The numbers of days shown is
_inclusive_; that is, it includes the days specified by mark and point.


File: emacs.info,  Node: General Calendar,  Next: Writing Calendar Files,  Prev: Counting Days,  Up: Calendar/Diary

32.4 Miscellaneous Calendar Commands
====================================

‘p d’
     Display day-in-year (‘calendar-print-day-of-year’).
‘C-c C-l’
     Regenerate the calendar window (‘calendar-redraw’).
‘<SPC>’
     Scroll the next window up (‘scroll-other-window’).
‘<DEL>’
‘S-<SPC>’
     Scroll the next window down (‘scroll-other-window-down’).
‘q’
     Exit from calendar (‘calendar-exit’).

   To display the number of days elapsed since the start of the year, or
the number of days remaining in the year, type the ‘p d’ command
(‘calendar-print-day-of-year’).  This displays both of those numbers in
the echo area.  The count of days elapsed includes the selected date.
The count of days remaining does not include that date.

   If the calendar window text gets corrupted, type ‘C-c C-l’
(‘calendar-redraw’) to redraw it.  (This can only happen if you use
non-Calendar-mode editing commands.)

   In Calendar mode, you can use <SPC> (‘scroll-other-window’) and <DEL>
(‘scroll-other-window-down’) to scroll the other window (if there is
one) up or down, respectively.  This is handy when you display a list of
holidays or diary entries in another window.

   To exit from the calendar, type ‘q’ (‘calendar-exit’).  This buries
all buffers related to the calendar, selecting other buffers.  (If a
frame contains a dedicated calendar window, exiting from the calendar
deletes or iconifies that frame depending on the value of
‘calendar-remove-frame-by-deleting’.)


File: emacs.info,  Node: Writing Calendar Files,  Next: Holidays,  Prev: General Calendar,  Up: Calendar/Diary

32.5 Writing Calendar Files
===========================

You can write calendars and diary entries to HTML and LaTeX files.

   The Calendar HTML commands produce files of HTML code that contain
calendar, holiday, and diary entries.  Each file applies to one month,
and has a name of the format ‘YYYY-MM.html’, where YYYY and MM are the
four-digit year and two-digit month, respectively.  The variable
‘cal-html-directory’ specifies the default output directory for the HTML
files.  To prevent holidays from being shown, customize
‘cal-html-holidays’.

   Diary entries enclosed by ‘<’ and ‘>’ are interpreted as HTML tags
(for example: this is a diary entry with <font color=”red”>some red
text</font>).  You can change the overall appearance of the displayed
HTML pages (for example, the color of various page elements, header
styles) via a stylesheet ‘cal.css’ in the directory containing the HTML
files (see the value of the variable ‘cal-html-css-default’ for relevant
style settings).

‘H m’
     Generate a one-month calendar (‘cal-html-cursor-month’).
‘H y’
     Generate a calendar file for each month of a year, as well as an
     index page (‘cal-html-cursor-year’).  By default, this command
     writes files to a YYYY subdirectory—if this is altered some
     hyperlinks between years will not work.

   If the variable ‘cal-html-print-day-number-flag’ is non-‘nil’, then
the monthly calendars show the day-of-the-year number.  The variable
‘cal-html-year-index-cols’ specifies the number of columns in the yearly
index page.

   The Calendar LaTeX commands produce a buffer of LaTeX code that
prints as a calendar.  Depending on the command you use, the printed
calendar covers the day, week, month or year that point is in.

‘t m’
     Generate a one-month calendar (‘cal-tex-cursor-month’).
‘t M’
     Generate a sideways-printing one-month calendar
     (‘cal-tex-cursor-month-landscape’).
‘t d’
     Generate a one-day calendar (‘cal-tex-cursor-day’).
‘t w 1’
     Generate a one-page calendar for one week, with hours
     (‘cal-tex-cursor-week’).
‘t w 2’
     Generate a two-page calendar for one week, with hours
     (‘cal-tex-cursor-week2’).
‘t w 3’
     Generate an ISO-style calendar for one week, without hours
     (‘cal-tex-cursor-week-iso’).
‘t w 4’
     Generate a calendar for one Monday-starting week, with hours
     (‘cal-tex-cursor-week-monday’).
‘t w W’
     Generate a two-page calendar for one week, without hours
     (‘cal-tex-cursor-week2-summary’).
‘t f w’
     Generate a Filofax-style two-weeks-at-a-glance calendar
     (‘cal-tex-cursor-filofax-2week’).
‘t f W’
     Generate a Filofax-style one-week-at-a-glance calendar
     (‘cal-tex-cursor-filofax-week’).
‘t y’
     Generate a calendar for one year (‘cal-tex-cursor-year’).
‘t Y’
     Generate a sideways-printing calendar for one year
     (‘cal-tex-cursor-year-landscape’).
‘t f y’
     Generate a Filofax-style calendar for one year
     (‘cal-tex-cursor-filofax-year’).

   Some of these commands print the calendar sideways (in landscape
mode), so it can be wider than it is long.  Some of them use Filofax
paper size (3.75in x 6.75in).  All of these commands accept a prefix
argument, which specifies how many days, weeks, months or years to print
(starting always with the selected one).

   If the variable ‘cal-tex-holidays’ is non-‘nil’ (the default), then
the printed calendars show the holidays in ‘calendar-holidays’.  If the
variable ‘cal-tex-diary’ is non-‘nil’ (the default is ‘nil’), diary
entries are included also (in monthly, Filofax, and iso-week calendars
only).  If the variable ‘cal-tex-rules’ is non-‘nil’ (the default is
‘nil’), the calendar displays ruled pages in styles that have sufficient
room.  Consult the documentation of the individual cal-tex functions to
see which calendars support which features.

   You can use the variable ‘cal-tex-preamble-extra’ to insert extra
LaTeX commands in the preamble of the generated document if you need to.


File: emacs.info,  Node: Holidays,  Next: Sunrise/Sunset,  Prev: Writing Calendar Files,  Up: Calendar/Diary

32.6 Holidays
=============

The Emacs calendar knows about many major and minor holidays, and can
display them.  You can add your own holidays to the default list.

‘mouse-3 Holidays’
‘h’
     Display holidays for the selected date
     (‘calendar-cursor-holidays’).
‘x’
     Mark holidays in the calendar window (‘calendar-mark-holidays’).
‘u’
     Unmark calendar window (‘calendar-unmark’).
‘a’
     List all holidays for the displayed three months in another window
     (‘calendar-list-holidays’).
‘M-x holidays’
     List all holidays for three months around today’s date in another
     window.
‘M-x list-holidays’
     List holidays in another window for a specified range of years.

   To see if any holidays fall on a given date, position point on that
date in the calendar window and use the ‘h’ command.  Alternatively,
click on that date with ‘mouse-3’ and then choose ‘Holidays’ from the
menu that appears.  Either way, this displays the holidays for that
date, in the echo area if they fit there, otherwise in a separate
window.

   To view the distribution of holidays for all the dates shown in the
calendar, use the ‘x’ command.  This displays the dates that are
holidays in a different face.  *Note calendar-holiday-marker: Calendar
Customizing.  The command applies both to the currently visible months
and to other months that subsequently become visible by scrolling.  To
turn marking off and erase the current marks, type ‘u’, which also
erases any diary marks (*note Diary::).  If the variable
‘calendar-mark-holidays-flag’ is non-‘nil’, creating or updating the
calendar marks holidays automatically.

   To get even more detailed information, use the ‘a’ command, which
displays a separate buffer containing a list of all holidays in the
current three-month range.  You can use <SPC> and <DEL> in the calendar
window to scroll that list up and down, respectively.

   The command ‘M-x holidays’ displays the list of holidays for the
current month and the preceding and succeeding months; this works even
if you don’t have a calendar window.  If the variable
‘calendar-view-holidays-initially-flag’ is non-‘nil’, creating the
calendar displays holidays in this way.  If you want the list of
holidays centered around a different month, use ‘C-u M-x holidays’,
which prompts for the month and year.

   The holidays known to Emacs include United States holidays and the
major Bahá’í, Chinese, Christian, Islamic, and Jewish holidays; also the
solstices and equinoxes.

   The command ‘M-x holiday-list’ displays the list of holidays for a
range of years.  This function asks you for the starting and stopping
years, and allows you to choose all the holidays or one of several
categories of holidays.  You can use this command even if you don’t have
a calendar window.

   The dates used by Emacs for holidays are based on _current practice_,
not historical fact.  For example Veteran’s Day began in 1919, but is
shown in earlier years.


File: emacs.info,  Node: Sunrise/Sunset,  Next: Lunar Phases,  Prev: Holidays,  Up: Calendar/Diary

32.7 Times of Sunrise and Sunset
================================

Special calendar commands can tell you, to within a minute or two, the
times of sunrise and sunset for any date.

‘mouse-3 Sunrise/sunset’
‘S’
     Display times of sunrise and sunset for the selected date
     (‘calendar-sunrise-sunset’).
‘M-x sunrise-sunset’
     Display times of sunrise and sunset for today’s date.
‘C-u M-x sunrise-sunset’
     Display times of sunrise and sunset for a specified date.
‘M-x calendar-sunrise-sunset-month’
     Display times of sunrise and sunset for the selected month.

   Within the calendar, to display the _local times_ of sunrise and
sunset in the echo area, move point to the date you want, and type ‘S’.
Alternatively, click ‘mouse-3’ on the date, then choose ‘Sunrise/sunset’
from the menu that appears.  The command ‘M-x sunrise-sunset’ is
available outside the calendar to display this information for today’s
date or a specified date.  To specify a date other than today, use ‘C-u
M-x sunrise-sunset’, which prompts for the year, month, and day.

   You can display the times of sunrise and sunset for any location and
any date with ‘C-u C-u M-x sunrise-sunset’.  This asks you for a
longitude, latitude, number of minutes difference from Coordinated
Universal Time, and date, and then tells you the times of sunrise and
sunset for that location on that date.

   Because the times of sunrise and sunset depend on the location on
earth, you need to tell Emacs your latitude, longitude, and location
name before using these commands.  Here is an example of what to set:

     (setq calendar-latitude 40.1)
     (setq calendar-longitude -88.2)
     (setq calendar-location-name "Urbana, IL")

Use one decimal place in the values of ‘calendar-latitude’ and
‘calendar-longitude’.

   Your time zone also affects the local time of sunrise and sunset.
Emacs usually gets time zone information from the operating system, but
if these values are not what you want (or if the operating system does
not supply them), you must set them yourself.  Here is an example:

     (setq calendar-time-zone -360)
     (setq calendar-standard-time-zone-name "CST")
     (setq calendar-daylight-time-zone-name "CDT")

The value of ‘calendar-time-zone’ is the number of minutes difference
between your local standard time and Coordinated Universal Time
(Greenwich time).  The values of ‘calendar-standard-time-zone-name’ and
‘calendar-daylight-time-zone-name’ are the abbreviations used in your
time zone.  Emacs displays the times of sunrise and sunset _corrected
for daylight saving time_.  *Note Daylight Saving::, for how daylight
saving time is determined.

   If you want to display numerical time zones (like ‘"+0100"’) instead
of symbolic ones (like ‘"CET"’), set this to ‘numeric’.

   As a user, you might find it convenient to set the calendar location
variables for your usual physical location in your ‘.emacs’ file.  If
you are a system administrator, you may want to set these variables for
all users in a ‘default.el’ file.  *Note Init File::.


File: emacs.info,  Node: Lunar Phases,  Next: Other Calendars,  Prev: Sunrise/Sunset,  Up: Calendar/Diary

32.8 Phases of the Moon
=======================

These calendar commands display the dates and times of the phases of the
moon (new moon, first quarter, full moon, last quarter).  This feature
is useful for debugging problems that depend on the phase of the moon.

‘M’
     Display the dates and times for all the quarters of the moon for
     the three-month period shown (‘calendar-lunar-phases’).
‘M-x lunar-phases’
     Display dates and times of the quarters of the moon for three
     months around today’s date.

   Within the calendar, use the ‘M’ command to display a separate buffer
of the phases of the moon for the current three-month range.  The dates
and times listed are accurate to within a few minutes.

   Outside the calendar, use the command ‘M-x lunar-phases’ to display
the list of the phases of the moon for the current month and the
preceding and succeeding months.  For information about a different
month, use ‘C-u M-x lunar-phases’, which prompts for the month and year.

   The dates and times given for the phases of the moon are given in
local time (corrected for daylight saving, when appropriate).  See the
discussion in the previous section.  *Note Sunrise/Sunset::.


File: emacs.info,  Node: Other Calendars,  Next: Diary,  Prev: Lunar Phases,  Up: Calendar/Diary

32.9 Conversion To and From Other Calendars
===========================================

The Emacs calendar displayed is _always_ the Gregorian calendar,
sometimes called the New Style calendar, which is used in most of the
world today.  However, this calendar did not exist before the sixteenth
century and was not widely used before the eighteenth century; it did
not fully displace the Julian calendar and gain universal acceptance
until the early twentieth century.  The Emacs calendar can display any
month since January, year 1 of the current era, but the calendar
displayed is always the Gregorian, even for a date at which the
Gregorian calendar did not exist.

   While Emacs cannot display other calendars, it can convert dates to
and from several other calendars.

* Menu:

* Calendar Systems::       The calendars Emacs understands
                             (aside from Gregorian).
* To Other Calendar::      Converting the selected date to various calendars.
* From Other Calendar::    Moving to a date specified in another calendar.


File: emacs.info,  Node: Calendar Systems,  Next: To Other Calendar,  Up: Other Calendars

32.9.1 Supported Calendar Systems
---------------------------------

The ISO commercial calendar is often used in business.

   The Julian calendar, named after Julius Caesar, was the one used in
Europe throughout medieval times, and in many countries up until the
nineteenth century.

   Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 BC on the Julian calendar.  The number of days elapsed
is called the “Julian day number” or the “Astronomical day number”.

   The Hebrew calendar is used by tradition in the Jewish religion.  The
Emacs calendar program uses the Hebrew calendar to determine the dates
of Jewish holidays.  Hebrew calendar dates begin and end at sunset.

   The Islamic calendar is used in many predominantly Islamic countries.
Emacs uses it to determine the dates of Islamic holidays.  There is no
universal agreement in the Islamic world about the calendar; Emacs uses
a widely accepted version, but the precise dates of Islamic holidays
often depend on proclamation by religious authorities, not on
calculations.  As a consequence, the actual dates of observance can vary
slightly from the dates computed by Emacs.  Islamic calendar dates begin
and end at sunset.

   The French Revolutionary calendar was created by the Jacobins after
the 1789 revolution, to represent a more secular and nature-based view
of the annual cycle, and to install a 10-day week in a rationalization
measure similar to the metric system.  The French government officially
abandoned this calendar at the end of 1805.

   The Maya of Central America used three separate, overlapping calendar
systems, the _long count_, the _tzolkin_, and the _haab_.  Emacs knows
about all three of these calendars.  Experts dispute the exact
correlation between the Mayan calendar and our calendar; Emacs uses the
Goodman-Martinez-Thompson correlation in its calculations.

   The Copts use a calendar based on the ancient Egyptian solar
calendar.  Their calendar consists of twelve 30-day months followed by
an extra five-day period.  Once every fourth year they add a leap day to
this extra period to make it six days.  The Ethiopic calendar is
identical in structure, but has different year numbers and month names.

   The Persians use a solar calendar based on a design of Omar Khayyam.
Their calendar consists of twelve months of which the first six have 31
days, the next five have 30 days, and the last has 29 in ordinary years
and 30 in leap years.  Leap years occur in a complicated pattern every
four or five years.  The calendar implemented here is the arithmetical
Persian calendar championed by Birashk, based on a 2,820-year cycle.  It
differs from the astronomical Persian calendar, which is based on
astronomical events.  As of this writing the first future discrepancy is
projected to occur on March 20, 2025.  It is currently not clear what
the official calendar of Iran will be at that time.

   The Chinese calendar is a complicated system of lunar months arranged
into solar years.  The years go in cycles of sixty, each year containing
either twelve months in an ordinary year or thirteen months in a leap
year; each month has either 29 or 30 days.  Years, ordinary months, and
days are named by combining one of ten “celestial stems” with one of
twelve “terrestrial branches” for a total of sixty names that are
repeated in a cycle of sixty.

   The Bahá’í calendar system is based on a solar cycle of 19 months
with 19 days each.  The four remaining intercalary days are placed
between the 18th and 19th months.


File: emacs.info,  Node: To Other Calendar,  Next: From Other Calendar,  Prev: Calendar Systems,  Up: Other Calendars

32.9.2 Converting To Other Calendars
------------------------------------

The following commands describe the selected date (the date at point) in
various other calendar systems:

‘mouse-3 Other calendars’
‘p o’
     Display the selected date in various other calendars.
     (‘calendar-print-other-dates’).
‘p c’
     Display ISO commercial calendar equivalent for selected day
     (‘calendar-iso-print-date’).
‘p j’
     Display Julian date for selected day
     (‘calendar-julian-print-date’).
‘p a’
     Display astronomical (Julian) day number for selected day
     (‘calendar-astro-print-day-number’).
‘p h’
     Display Hebrew date for selected day
     (‘calendar-hebrew-print-date’).
‘p i’
     Display Islamic date for selected day
     (‘calendar-islamic-print-date’).
‘p f’
     Display French Revolutionary date for selected day
     (‘calendar-french-print-date’).
‘p b’
     Display Bahá’í date for selected day (‘calendar-bahai-print-date’).
‘p C’
     Display Chinese date for selected day
     (‘calendar-chinese-print-date’).
‘p k’
     Display Coptic date for selected day
     (‘calendar-coptic-print-date’).
‘p e’
     Display Ethiopic date for selected day
     (‘calendar-ethiopic-print-date’).
‘p p’
     Display Persian date for selected day
     (‘calendar-persian-print-date’).
‘p m’
     Display Mayan date for selected day (‘calendar-mayan-print-date’).

   Otherwise, move point to the date you want to convert, then type the
appropriate command starting with ‘p’ from the table above.  The prefix
‘p’ is a mnemonic for “print”, since Emacs “prints” the equivalent date
in the echo area.  ‘p o’ displays the date in all forms known to Emacs.
You can also use ‘mouse-3’ and then choose ‘Other calendars’ from the
menu that appears.  This displays the equivalent forms of the date in
all the calendars Emacs understands, in the form of a menu.  (Choosing
an alternative from this menu doesn’t actually do anything—the menu is
used only for display.)


File: emacs.info,  Node: From Other Calendar,  Prev: To Other Calendar,  Up: Other Calendars

32.9.3 Converting From Other Calendars
--------------------------------------

You can use the other supported calendars to specify a date to move to.
This section describes the commands for doing this using calendars other
than Mayan; for the Mayan calendar, see the following section.

‘g c’
     Move to a date specified in the ISO commercial calendar
     (‘calendar-iso-goto-date’).
‘g w’
     Move to a week specified in the ISO commercial calendar
     (‘calendar-iso-goto-week’).
‘g j’
     Move to a date specified in the Julian calendar
     (‘calendar-julian-goto-date’).
‘g a’
     Move to a date specified with an astronomical (Julian) day number
     (‘calendar-astro-goto-day-number’).
‘g b’
     Move to a date specified in the Bahá’í calendar
     (‘calendar-bahai-goto-date’).
‘g h’
     Move to a date specified in the Hebrew calendar
     (‘calendar-hebrew-goto-date’).
‘g i’
     Move to a date specified in the Islamic calendar
     (‘calendar-islamic-goto-date’).
‘g f’
     Move to a date specified in the French Revolutionary calendar
     (‘calendar-french-goto-date’).
‘g C’
     Move to a date specified in the Chinese calendar
     (‘calendar-chinese-goto-date’).
‘g p’
     Move to a date specified in the Persian calendar
     (‘calendar-persian-goto-date’).
‘g k’
     Move to a date specified in the Coptic calendar
     (‘calendar-coptic-goto-date’).
‘g e’
     Move to a date specified in the Ethiopic calendar
     (‘calendar-ethiopic-goto-date’).

   These commands ask you for a date on the other calendar, move point
to the Gregorian calendar date equivalent to that date, and display the
other calendar’s date in the echo area.  Emacs uses strict completion
(*note Completion Exit::) whenever it asks you to type a month name, so
you don’t have to worry about the spelling of Hebrew, Islamic, or French
names.

   One common issue concerning the Hebrew calendar is the computation of
the anniversary of a date of death, called a “yahrzeit”.  The Emacs
calendar includes a facility for such calculations.  If you are in the
calendar, the command ‘M-x calendar-hebrew-list-yahrzeits’ asks you for
a range of years and then displays a list of the yahrzeit dates for
those years for the date given by point.  If you are not in the
calendar, this command first asks you for the date of death and the
range of years, and then displays the list of yahrzeit dates.


File: emacs.info,  Node: Diary,  Next: Daylight Saving,  Prev: Other Calendars,  Up: Calendar/Diary

32.10 The Diary
===============

The Emacs diary keeps track of appointments or other events on a daily
basis, in conjunction with the calendar.  To use the diary feature, you
must first create a diary file containing a list of events and their
dates.  Then Emacs can automatically pick out and display the events for
today, for the immediate future, or for any specified date.

   Although you probably will start by creating a diary manually, Emacs
provides a number of commands to let you view, add, and change diary
entries.

* Menu:

* Format of Diary File::   Entering events in your diary.
* Displaying the Diary::   Viewing diary entries and associated calendar dates.
* Date Formats::           Various ways you can specify dates.
* Adding to Diary::        Commands to create diary entries.
* Special Diary Entries::  Anniversaries, blocks of dates, cyclic entries, etc.
* Appointments::           Reminders when it’s time to do something.
* Importing Diary::        Converting diary events to/from other formats.


File: emacs.info,  Node: Format of Diary File,  Next: Displaying the Diary,  Up: Diary

32.10.1 The Diary File
----------------------

Your “diary file” is a file that records events associated with
particular dates.  The name of the diary file is specified by the
variable ‘diary-file’.  The default is ‘~/.emacs.d/diary’, though for
compatibility with older versions Emacs will use ‘~/diary’ if it exists.

   Each entry in the diary file describes one event and consists of one
or more lines.  An entry always begins with a date specification at the
left margin.  The rest of the entry is simply text to describe the
event.  If the entry has more than one line, then the lines after the
first must begin with whitespace to indicate they continue a previous
entry.  Lines that do not begin with valid dates and do not continue a
preceding entry are ignored.  Here’s an example:

     12/22/2015  Twentieth wedding anniversary!
     10/22       Ruth's birthday.
     * 21, *:    Payday
     Tuesday--weekly meeting with grad students at 10am
              Supowit, Shen, Bitner, and Kapoor to attend.
     1/13/89     Friday the thirteenth!!
     thu 4pm     squash game with Lloyd.
     mar 16      Dad's birthday
     April 15, 2016 Income tax due.
     * 15        time cards due.

This example uses extra spaces to align the event descriptions of most
of the entries.  Such formatting is purely a matter of taste.

   You can also use a format where the first line of a diary entry
consists only of the date or day name (with no following blanks or
punctuation).  For example:

     02/11/2012
           Bill B. visits Princeton today
           2pm Cognitive Studies Committee meeting
           2:30-5:30 Liz at Lawrenceville
           4:00pm Dentist appt
           7:30pm Dinner at George's
           8:00-10:00pm concert

This entry will have a different appearance if you use the simple diary
display (*note Diary Display::).  The simple diary display omits the
date line at the beginning; only the continuation lines appear.  This
style of entry looks neater when you display just a single day’s
entries, but can cause confusion if you ask for more than one day’s
entries.


File: emacs.info,  Node: Displaying the Diary,  Next: Date Formats,  Prev: Format of Diary File,  Up: Diary

32.10.2 Displaying the Diary
----------------------------

Once you have created a diary file, you can use the calendar to view it.
You can also view today’s events outside of Calendar mode.  In the
following, key bindings refer to the Calendar buffer.

‘mouse-3 Diary’
‘d’
     Display all diary entries for the selected date
     (‘diary-view-entries’).
‘s’
     Display the entire diary file (‘diary-show-all-entries’).
‘m’
     Mark all visible dates that have diary entries
     (‘diary-mark-entries’).
‘u’
     Unmark the calendar window (‘calendar-unmark’).
‘M-x diary-print-entries’
     Print hard copy of the diary display as it appears.
‘M-x diary’
     Display all diary entries for today’s date.
‘M-x diary-mail-entries’
     Mail yourself email reminders about upcoming diary entries.

   Displaying the diary entries with ‘d’ shows in a separate buffer the
diary entries for the selected date in the calendar.  The mode line of
the new buffer shows the date of the diary entries.  Holidays are shown
either in the buffer or in the mode line, depending on the display
method you choose (*note Diary Display::).  If you specify a numeric
argument with ‘d’, it shows all the diary entries for that many
successive days.  Thus, ‘2 d’ displays all the entries for the selected
date and for the following day.

   Another way to display the diary entries for a date is to click
‘mouse-3’ on the date, and then choose ‘Diary entries’ from the menu
that appears.  If the variable ‘calendar-view-diary-initially-flag’ is
non-‘nil’, creating the calendar lists the diary entries for the current
date (provided the current date is visible).

   To get a broader view of which days are mentioned in the diary, use
the ‘m’ command.  This marks the dates that have diary entries in a
different face.  *Note diary-entry-marker: Calendar Customizing.

   This command applies both to the months that are currently visible
and to those that subsequently become visible after scrolling.  To turn
marking off and erase the current marks, type ‘u’, which also turns off
holiday marks (*note Holidays::).  If the variable
‘calendar-mark-diary-entries-flag’ is non-‘nil’, creating or updating
the calendar marks diary dates automatically.

   To prevent an individual diary entry from being marked in the
calendar, insert the string that ‘diary-nonmarking-symbol’ specifies
(the default is ‘&’) at the beginning of the entry, before the date.
This has no effect on display of the entry in the diary buffer; it only
affects marks on dates in the calendar.  Nonmarking entries can be
useful for generic entries that would otherwise mark many different
dates.

   To see the full diary file, rather than just some of the entries, use
the ‘s’ command.

   The command ‘M-x diary’ displays the diary entries for the current
date, independently of the calendar display, and optionally for the next
few days as well; the variable ‘diary-number-of-entries’ specifies how
many days to include.  *Note diary-number-of-entries: Diary Customizing.

   If you put ‘(diary)’ in your ‘.emacs’ file, this automatically
displays a window with the day’s diary entries when you start Emacs.

   Some people like to receive email notifications of events in their
diary.  To send such mail to yourself, use the command ‘M-x
diary-mail-entries’.  A prefix argument specifies how many days
(starting with today) to check; otherwise, the variable
‘diary-mail-days’ says how many days.


File: emacs.info,  Node: Date Formats,  Next: Adding to Diary,  Prev: Displaying the Diary,  Up: Diary

32.10.3 Date Formats
--------------------

Here are some sample diary entries, illustrating different ways of
formatting a date.  The examples all show dates in American order
(month, day, year), but Calendar mode supports European order (day,
month, year) and ISO order (year, month, day) as options.

     4/20/12  Switch-over to new tabulation system
     apr. 25  Start tabulating annual results
     4/30  Results for April are due
     */25  Monthly cycle finishes
     Friday  Don't leave without backing up files

   The first entry appears only once, on April 20, 2012.  The second and
third appear every year on the specified dates, and the fourth uses a
wildcard (asterisk) for the month, so it appears on the 25th of every
month.  The final entry appears every week on Friday.

   You can use just numbers to express a date, as in ‘MONTH/DAY’ or
‘MONTH/DAY/YEAR’.  This must be followed by a nondigit.  In the date
itself, MONTH and DAY are numbers of one or two digits.  The optional
YEAR is also a number, and may be abbreviated to the last two digits;
that is, you can use ‘11/12/2012’ or ‘11/12/12’.

   Dates can also have the form ‘MONTHNAME DAY’ or ‘MONTHNAME DAY,
YEAR’, where the month’s name can be spelled in full or abbreviated
(with or without a period).  The preferred abbreviations for month and
day names can be set using the variables ‘calendar-abbrev-length’,
‘calendar-month-abbrev-array’, and ‘calendar-day-abbrev-array’.  The
default is to use the first three letters of a name as its abbreviation.
Case is not significant.

   A date may be “generic”; that is, partially unspecified.  Then the
entry applies to all dates that match the specification.  If the date
does not contain a year, it is generic and applies to any year.
Alternatively, MONTH, DAY, or YEAR can be ‘*’; this matches any month,
day, or year, respectively.  Thus, a diary entry ‘3/*/*’ matches any day
in March of any year; so does ‘march *’.

   If you prefer the European style of writing dates (in which the day
comes before the month), or the ISO style (in which the order is year,
month, day), type ‘M-x calendar-set-date-style’ while in the calendar,
or customize the variable ‘calendar-date-style’.  This affects how diary
dates are interpreted, date display, and the order in which some
commands expect their arguments to be given.

   You can use the name of a day of the week as a generic date which
applies to any date falling on that day of the week.  You can abbreviate
the day of the week as described above, or spell it in full; case is not
significant.


File: emacs.info,  Node: Adding to Diary,  Next: Special Diary Entries,  Prev: Date Formats,  Up: Diary

32.10.4 Commands to Add to the Diary
------------------------------------

While in the calendar, there are several commands to create diary
entries.  The basic commands are listed here; more sophisticated
commands are in the next section (*note Special Diary Entries::).
Entries can also be based on non-Gregorian calendars.  *Note
Non-Gregorian Diary::.

‘i d’
     Add a diary entry for the selected date (‘diary-insert-entry’).
‘i w’
     Add a diary entry for the selected day of the week
     (‘diary-insert-weekly-entry’).
‘i m’
     Add a diary entry for the selected day of the month
     (‘diary-insert-monthly-entry’).
‘i y’
     Add a diary entry for the selected day of the year
     (‘diary-insert-yearly-entry’).

   You can make a diary entry for a specific date by selecting that date
in the calendar window and typing the ‘i d’ command.  This command
displays the end of your diary file in another window and inserts the
date; you can then type the rest of the diary entry.

   If you want to make a diary entry that applies to a specific day of
the week, select that day of the week (any occurrence will do) and type
‘i w’.  This inserts the day-of-week as a generic date; you can then
type the rest of the diary entry.  You can make a monthly diary entry in
the same fashion: select the day of the month, use the ‘i m’ command,
and type the rest of the entry.  Similarly, you can insert a yearly
diary entry with the ‘i y’ command.

   All of the above commands make marking diary entries by default.  To
make a nonmarking diary entry, give a prefix argument to the command.
For example, ‘C-u i w’ makes a nonmarking weekly diary entry.

   When you modify the diary file, be sure to save the file before
exiting Emacs.  Saving the diary file after using any of the above
insertion commands will automatically update the diary marks in the
calendar window, if appropriate.  You can use the command
‘calendar-redraw’ to force an update at any time.


File: emacs.info,  Node: Special Diary Entries,  Next: Appointments,  Prev: Adding to Diary,  Up: Diary

32.10.5 Special Diary Entries
-----------------------------

In addition to entries based on calendar dates, the diary file can
contain “sexp entries” for regular events such as anniversaries.  These
entries are based on Lisp expressions (sexps) that Emacs evaluates as it
scans the diary file.  Instead of a date, a sexp entry contains ‘%%’
followed by a Lisp expression which must begin and end with parentheses.
The Lisp expression determines which dates the entry applies to.

   Calendar mode provides commands to insert certain commonly used sexp
entries:

‘i a’
     Add an anniversary diary entry for the selected date
     (‘diary-insert-anniversary-entry’).
‘i b’
     Add a block diary entry for the current region
     (‘diary-insert-block-entry’).
‘i c’
     Add a cyclic diary entry starting at the date
     (‘diary-insert-cyclic-entry’).

   If you want to make a diary entry that applies to the anniversary of
a specific date, move point to that date and use the ‘i a’ command.
This displays the end of your diary file in another window and inserts
the anniversary description; you can then type the rest of the diary
entry.  The entry looks like this:

     %%(diary-anniversary 10 31 1988) Arthur's birthday

This entry applies to October 31 in any year after 1988; ‘10 31 1988’
specifies the date.  (If you are using the European or ISO calendar
style, the input order of month, day and year is different.)  The reason
this expression requires a beginning year is that advanced diary
functions can use it to calculate the number of elapsed years.

   A “block” diary entry applies to a specified range of consecutive
dates.  Here is a block diary entry that applies to all dates from June
24, 2012 through July 10, 2012:

     %%(diary-block 6 24 2012 7 10 2012) Vacation

The ‘6 24 2012’ indicates the starting date and the ‘7 10 2012’
indicates the stopping date.  (Again, if you are using the European or
ISO calendar style, the input order of month, day and year is
different.)

   To insert a block entry, place point and the mark on the two dates
that begin and end the range, and type ‘i b’.  This command displays the
end of your diary file in another window and inserts the block
description; you can then type the diary entry.

   “Cyclic” diary entries repeat after a fixed interval of days.  To
create one, select the starting date and use the ‘i c’ command.  The
command prompts for the length of interval, then inserts the entry,
which looks like this:

     %%(diary-cyclic 50 3 1 2012) Renew medication

This entry applies to March 1, 2012 and every 50th day following; ‘3 1
2012’ specifies the starting date.  (If you are using the European or
ISO calendar style, the input order of month, day and year is
different.)

   All three of these commands make marking diary entries.  To insert a
nonmarking entry, give a prefix argument to the command.  For example,
‘C-u i a’ makes a nonmarking anniversary diary entry.

   Marking sexp diary entries in the calendar can be time-consuming,
since every date visible in the calendar window must be individually
checked.  So it’s a good idea to make sexp diary entries nonmarking
(with ‘&’) when possible.

   Another sophisticated kind of sexp entry, a “floating” diary entry,
specifies a regularly occurring event by offsets specified in days,
weeks, and months.  It is comparable to a crontab entry interpreted by
the ‘cron’ utility.  Here is a nonmarking, floating diary entry that
applies to the fourth Thursday in November:

     &%%(diary-float 11 4 4) American Thanksgiving

The 11 specifies November (the eleventh month), the 4 specifies Thursday
(the fourth day of the week, where Sunday is numbered zero), and the
second 4 specifies the fourth Thursday (1 would mean “first”, 2 would
mean “second”, −2 would mean “second-to-last”, and so on).  The month
can be a single month or a list of months.  Thus you could change the 11
above to ‘'(1 2 3)’ and have the entry apply to the last Thursday of
January, February, and March.  If the month is ‘t’, the entry applies to
all months of the year.

     %%(diary-offset '(diary-float t 3 4) 2) Monthly committee meeting

This entry applies to the Saturday after the third Thursday of each
month.  The 2 specifies number of days after when the sexp
‘'(diary-float t 3 4)’ would evaluate to ‘t’.  This is useful when for
example your organization has a committee meeting two days after every
monthly meeting which takes place on the third Thursday, or if you would
like to attend a virtual meeting scheduled in a different timezone
causing a difference in the date.

   Each of the standard sexp diary entries takes an optional parameter
specifying the name of a face or a single-character string to use when
marking the entry in the calendar.  Most generally, sexp diary entries
can perform arbitrary computations to determine when they apply.  *Note
Sexp Diary Entries::.


File: emacs.info,  Node: Appointments,  Next: Importing Diary,  Prev: Special Diary Entries,  Up: Diary

32.10.6 Appointments
--------------------

If you have a diary entry for an appointment, and that diary entry
begins with a recognizable time of day, Emacs can warn you in advance
that an appointment is pending.  Emacs alerts you to the appointment by
displaying a message in your chosen format, as specified by the variable
‘appt-display-format’.  If the value of ‘appt-audible’ is non-‘nil’, the
warning includes an audible reminder.  In addition, if
‘appt-display-mode-line’ is non-‘nil’, Emacs displays the number of
minutes to the appointment on the mode line.

   If ‘appt-display-format’ has the value ‘window’, then the variable
‘appt-display-duration’ controls how long the reminder window is visible
for; and the variables ‘appt-disp-window-function’ and
‘appt-delete-window-function’ give the names of functions used to create
and destroy the window, respectively.

   To enable appointment notification, type ‘M-x appt-activate’.  With a
positive argument, it enables notification; with a negative argument, it
disables notification; with no argument, it toggles.  Enabling
notification also sets up an appointment list for today from the diary
file, giving all diary entries found with recognizable times of day, and
reminds you just before each of them.

   For example, suppose the diary file contains these lines:

     Monday
       9:30am Coffee break
      12:00pm Lunch

Then on Mondays, you will be reminded at around 9:20am about your coffee
break and at around 11:50am about lunch.  The variable
‘appt-message-warning-time’ specifies how many minutes (default 12) in
advance to warn you.  This is a default warning time.  Each appointment
can specify a different warning time by adding a piece matching
‘appt-warning-time-regexp’ (see that variable’s documentation for
details).

   You can write times in am/pm style (with ‘12:00am’ standing for
midnight and ‘12:00pm’ standing for noon), or 24-hour European/military
style.  You need not be consistent; your diary file can have a mixture
of the two styles.  Times must be at the beginning of diary entries if
they are to be recognized.

   Emacs updates the appointments list from the diary file automatically
just after midnight.  You can force an update at any time by re-enabling
appointment notification.  Both these actions also display the day’s
diary buffer, unless you set ‘appt-display-diary’ to ‘nil’.  The
appointments list is also updated whenever the diary file (or a file it
includes; see *note Fancy Diary Display::) is saved.  If you use the Org
Mode and keep appointments in your Org agenda files, you can add those
appointments to the list using the ‘org-agenda-to-appt’ command.  *Note
Appointment reminders: (org)Weekly/daily agenda, for more about that
command.

   You can also use the appointment notification facility like an alarm
clock.  The command ‘M-x appt-add’ adds entries to the appointment list
without affecting your diary file.  You delete entries from the
appointment list with ‘M-x appt-delete’.


File: emacs.info,  Node: Importing Diary,  Prev: Appointments,  Up: Diary

32.10.7 Importing and Exporting Diary Entries
---------------------------------------------

You can transfer diary entries between Emacs diary files and a variety
of other formats.

   You can import diary entries from Outlook-generated appointment
messages.  While viewing such a message in Rmail or Gnus, do ‘M-x
diary-from-outlook’ to import the entry.  You can make this command
recognize additional appointment message formats by customizing the
variable ‘diary-outlook-formats’.  Other mail clients can set
‘diary-from-outlook-function’ to an appropriate value.

   The icalendar package allows you to transfer data between your Emacs
diary file and iCalendar files, which are defined in ‘RFC 2445—Internet
Calendaring and Scheduling Core Object Specification (iCalendar)’ (as
well as the earlier vCalendar format).

   The command ‘icalendar-import-buffer’ extracts iCalendar data from
the current buffer and adds it to your diary file.  This function is
also suitable for automatic extraction of iCalendar data; for example
with the Rmail mail client one could use:

     (add-hook 'rmail-show-message-hook 'icalendar-import-buffer)

   The command ‘icalendar-import-file’ imports an iCalendar file and
adds the results to an Emacs diary file.  For example:

     (icalendar-import-file "/here/is/calendar.ics"
                            "/there/goes/ical-diary")

You can use an ‘#include’ directive to add the import file contents to
the main diary file, if these are different files.  *Note Fancy Diary
Display::.

   Use ‘icalendar-export-file’ to interactively export an entire Emacs
diary file to iCalendar format.  To export only a part of a diary file,
mark the relevant area, and call ‘icalendar-export-region’.  In both
cases, Emacs appends the result to the target file.


File: emacs.info,  Node: Daylight Saving,  Next: Time Intervals,  Prev: Diary,  Up: Calendar/Diary

32.11 Daylight Saving Time
==========================

Emacs understands the difference between standard time and daylight
saving time—the times given for sunrise, sunset, solstices, equinoxes,
and the phases of the moon take that into account.  The rules for
daylight saving time vary from place to place and have also varied
historically from year to year.  To do the job properly, Emacs needs to
know which rules to use.

   Some operating systems keep track of the rules that apply to the
place where you are; on these systems, Emacs gets the information it
needs from the system automatically.  If some or all of this information
is missing, Emacs fills in the gaps with the rules currently used in
Cambridge, Massachusetts.  If the resulting rules are not what you want,
you can tell Emacs the rules to use by setting certain variables:
‘calendar-daylight-savings-starts’ and ‘calendar-daylight-savings-ends’.

   These values should be Lisp expressions that refer to the variable
‘year’, and evaluate to the Gregorian date on which daylight saving time
starts or (respectively) ends, in the form of a list ‘(MONTH DAY YEAR)’.
The values should be ‘nil’ if your area does not use daylight saving
time.

   Emacs uses these expressions to determine the starting date of
daylight saving time for the holiday list and for correcting times of
day in the solar and lunar calculations.

   The values for Cambridge, Massachusetts are as follows:

     (calendar-nth-named-day 2 0 3 year)
     (calendar-nth-named-day 1 0 11 year)

That is, the second 0th day (Sunday) of the third month (March) in the
year specified by ‘year’, and the first Sunday of the eleventh month
(November) of that year.  If daylight saving time were changed to start
on October 1, you would set ‘calendar-daylight-savings-starts’ to this:

     (list 10 1 year)

   If there is no daylight saving time at your location, or if you want
all times in standard time, set ‘calendar-daylight-savings-starts’ and
‘calendar-daylight-savings-ends’ to ‘nil’.

   The variable ‘calendar-daylight-time-offset’ specifies the difference
between daylight saving time and standard time, measured in minutes.
The value for Cambridge, Massachusetts is 60.

   Finally, the two variables ‘calendar-daylight-savings-starts-time’
and ‘calendar-daylight-savings-ends-time’ specify the number of minutes
after midnight local time when the transition to and from daylight
saving time should occur.  For Cambridge, Massachusetts both variables’
values are 120.


File: emacs.info,  Node: Time Intervals,  Next: Advanced Calendar/Diary Usage,  Prev: Daylight Saving,  Up: Calendar/Diary

32.12 Summing Time Intervals
============================

The timeclock package adds up time intervals, so you can (for instance)
keep track of how much time you spend working on particular projects.
(A more advanced alternative is to use the Org Mode’s facilities for
clocking time, *note (org)Clocking Work Time::).

   Use the ‘M-x timeclock-in’ command when you start working on a
project, and ‘M-x timeclock-out’ command when you’re done.  Each time
you do this, it adds one time interval to the record of the project.
You can change to working on a different project with ‘M-x
timeclock-change’.

   Once you’ve collected data from a number of time intervals, you can
use ‘M-x timeclock-workday-remaining’ to see how much time is left to
work today (assuming a typical average of 8 hours a day), and ‘M-x
timeclock-when-to-leave’ which will calculate when you’re done.

   If you want Emacs to display the amount of time left of your workday
in the mode line, either customize the ‘timeclock-mode-line-display’
variable and set its value to ‘t’, or invoke the ‘M-x
timeclock-mode-line-display’ command.

   Terminating the current Emacs session might or might not mean that
you have stopped working on the project and, by default, Emacs asks you.
You can, however, customize the value of the variable
‘timeclock-ask-before-exiting’ to ‘nil’ to avoid the question; then,
only an explicit ‘M-x timeclock-out’ or ‘M-x timeclock-change’ will tell
Emacs that the current interval is over.

   The timeclock functions work by accumulating the data in a file
called ‘~/.emacs.d/timelog’.  You can specify a different name for this
file by customizing the variable ‘timeclock-file’.  If you edit the
timeclock file manually, or if you change the value of any of
timeclock’s customizable variables, you should run the command ‘M-x
timeclock-reread-log’ to update the data in Emacs from the file.


File: emacs.info,  Node: Advanced Calendar/Diary Usage,  Prev: Time Intervals,  Up: Calendar/Diary

32.13 More advanced features of the Calendar and Diary
======================================================

This section describes some of the more advanced/specialized features of
the calendar and diary.  It starts with some of the many ways in which
you can customize the calendar and diary to suit your personal tastes.

* Menu:

* Calendar Customizing::   Calendar layout and hooks.
* Holiday Customizing::    Defining your own holidays.
* Mayan Calendar::         Moving to a date specified in a Mayan calendar.
* Date Display Format::    Changing the format.
* Time Display Format::    Changing the format.
* Diary Customizing::      Defaults you can set.
* Non-Gregorian Diary::    Diary entries based on other calendars.
* Diary Display::          A choice of ways to display the diary.
* Fancy Diary Display::    Sorting diary entries, using included diary files.
* Sexp Diary Entries::     More flexible diary entries.


File: emacs.info,  Node: Calendar Customizing,  Next: Holiday Customizing,  Up: Advanced Calendar/Diary Usage

32.13.1 Customizing the Calendar
--------------------------------

The calendar display unfortunately cannot be changed from three months,
but you can customize the whitespace used by setting the variables:
‘calendar-left-margin’, ‘calendar-day-header-width’,
‘calendar-day-digit-width’, ‘calendar-column-width’, and
‘calendar-intermonth-spacing’.  To display text _between_ the months,
for example week numbers, customize the variables
‘calendar-intermonth-header’ and ‘calendar-intermonth-text’ as described
in their documentation.

   The variable ‘calendar-month-header’ controls the text that appears
above each month in the calendar.  By default, it shows the month and
year.  The variable ‘calendar-day-header-array’ controls the text that
appears above each day’s column in every month.  By default, it shows
the first two letters of each day’s name.

   The variable ‘calendar-holiday-marker’ specifies how to mark a date
that is a holiday.  Its value may be a single-character string to insert
next to the date, or a face name to use for displaying the date.
Likewise, the variable ‘diary-entry-marker’ specifies how to mark a date
that has diary entries.  The function ‘calendar-mark-today’ uses
‘calendar-today-marker’ to mark today’s date.  By default, the calendar
uses faces named ‘holiday’, ‘diary’, and ‘calendar-today’ for these
purposes.

   Starting the calendar runs the normal hook
‘calendar-initial-window-hook’.  Recomputation of the calendar display
does not run this hook.  But if you leave the calendar with the ‘q’
command and reenter it, the hook runs again.

   The variable ‘calendar-today-visible-hook’ is a normal hook run after
the calendar buffer has been prepared with the calendar, when the
current date is visible in the window.  One use of this hook is to mark
today’s date; to do that use either of the functions
‘calendar-mark-today’ or ‘calendar-star-date’:

     (add-hook 'calendar-today-visible-hook 'calendar-mark-today)

A similar normal hook, ‘calendar-today-invisible-hook’ is run if the
current date is _not_ visible in the window.

   Each of the calendar cursor motion commands runs the hook
‘calendar-move-hook’ after it moves the cursor.


File: emacs.info,  Node: Holiday Customizing,  Next: Mayan Calendar,  Prev: Calendar Customizing,  Up: Advanced Calendar/Diary Usage

32.13.2 Customizing the Holidays
--------------------------------

There are several variables listing the default holidays that Emacs
knows about.  These are: ‘holiday-general-holidays’,
‘holiday-local-holidays’, ‘holiday-solar-holidays’,
‘holiday-bahai-holidays’, ‘holiday-christian-holidays’,
‘holiday-hebrew-holidays’, ‘holiday-islamic-holidays’,
‘holiday-oriental-holidays’, and ‘holiday-other-holidays’.  The names
should be self-explanatory; e.g., ‘holiday-solar-holidays’ lists sun-
and moon-related holidays.

   You can customize these lists of holidays to your own needs, deleting
or adding holidays as described below.  Set any of them to ‘nil’ to not
show the associated holidays.

   The general holidays are, by default, holidays common throughout the
United States.  In contrast, ‘holiday-local-holidays’ and
‘holiday-other-holidays’ are both empty by default.  These are intended
for system-wide settings and your individual use, respectively.

   By default, Emacs does not include all the holidays of the religions
that it knows, only those commonly found in secular calendars.  For a
more extensive collection of religious holidays, you can set any (or
all) of the variables ‘calendar-bahai-all-holidays-flag’,
‘calendar-christian-all-holidays-flag’,
‘calendar-hebrew-all-holidays-flag’, or
‘calendar-islamic-all-holidays-flag’ to ‘t’.

   Each of the holiday variables is a list of “holiday forms”, each form
describing a holiday (or sometimes a list of holidays).  Here is a table
of the possible kinds of holiday form.  Day numbers and month numbers
count starting from 1, but “dayname” numbers count Sunday as 0.  The
argument STRING is always the description of the holiday, as a string.

‘(holiday-fixed MONTH DAY STRING)’
     A fixed date on the Gregorian calendar.

‘(holiday-float MONTH DAYNAME K STRING’
     &optional DAY) The Kth DAYNAME (DAYNAME=0 for Sunday, and so on)
     after or before Gregorian date MONTH, DAY.  Negative K means count
     back from the end of the month.  Optional DAY defaults to 1 if K is
     positive, and the last day of MONTH otherwise.

‘(holiday-chinese MONTH DAY STRING)’
     A fixed date on the Chinese calendar.

‘(holiday-hebrew MONTH DAY STRING)’
     A fixed date on the Hebrew calendar.

‘(holiday-islamic MONTH DAY STRING)’
     A fixed date on the Islamic calendar.

‘(holiday-julian MONTH DAY STRING)’
     A fixed date on the Julian calendar.

‘(holiday-sexp SEXP STRING)’
     A date calculated by the Lisp expression SEXP.  The expression
     should use the variable ‘year’ to compute and return the date of a
     holiday in the form of a list ‘(MONTH DAY YEAR)’, or ‘nil’ if the
     holiday doesn’t happen this year.

‘(if CONDITION HOLIDAY-FORM)’
     A holiday that happens only if CONDITION is true.

‘(FUNCTION [ARGS])’
     A list of dates calculated by the function FUNCTION, called with
     arguments ARGS.

   For example, suppose you want to add Bastille Day, celebrated in
France on July 14 (i.e., the fourteenth day of the seventh month).  You
can do this as follows:

     (setq holiday-other-holidays '((holiday-fixed 7 14 "Bastille Day")))

   Many holidays occur on a specific day of the week, at a specific time
of month.  Here is a holiday form describing Hurricane Supplication Day,
celebrated in the Virgin Islands on the fourth Monday in July:

     (holiday-float 7 1 4 "Hurricane Supplication Day")

Here the 7 specifies July, the 1 specifies Monday (Sunday is 0, Tuesday
is 2, and so on), and the 4 specifies the fourth occurrence in the month
(1 specifies the first occurrence, 2 the second occurrence, −1 the last
occurrence, −2 the second-to-last occurrence, and so on).

   You can specify holidays that occur on fixed days of the Bahá’í,
Chinese, Hebrew, Islamic, and Julian calendars too.  For example,

     (setq holiday-other-holidays
           '((holiday-hebrew 10 2 "Last day of Hanukkah")
             (holiday-islamic 3 12 "Mohammed's Birthday")
             (holiday-julian 4 2 "Jefferson's Birthday")))

adds the last day of Hanukkah (since the Hebrew months are numbered with
1 starting from Nisan), the Islamic feast celebrating Mohammed’s
birthday (since the Islamic months are numbered from 1 starting with
Muharram), and Thomas Jefferson’s birthday, which is 2 April 1743 on the
Julian calendar.

   To include a holiday conditionally, use either Emacs Lisp’s ‘if’ or
the ‘holiday-sexp’ form.  For example, American presidential elections
occur on the first Tuesday after the first Monday in November of years
divisible by 4:

     (holiday-sexp '(if (zerop (% year 4))
                        (calendar-gregorian-from-absolute
                         (1+ (calendar-dayname-on-or-before
                               1 (+ 6 (calendar-absolute-from-gregorian
                                       (list 11 1 year)))))))
                   "US Presidential Election")

or

     (if (zerop (% displayed-year 4))
         (holiday-fixed 11
                (calendar-extract-day
                  (calendar-gregorian-from-absolute
                    (1+ (calendar-dayname-on-or-before
                          1 (+ 6 (calendar-absolute-from-gregorian
                                   (list 11 1 displayed-year)))))))
                "US Presidential Election"))

   Some holidays just don’t fit into any of these forms because special
calculations are involved in their determination.  In such cases you
must write a Lisp function to do the calculation.  To include eclipses,
for example, add ‘(eclipses)’ to ‘holiday-other-holidays’ and write an
Emacs Lisp function ‘eclipses’ that returns a (possibly empty) list of
the relevant Gregorian dates among the range visible in the calendar
window, with descriptive strings, like this:

     (((6 4 2012) "Lunar Eclipse") ((11 13 2012) "Solar Eclipse") ... )


File: emacs.info,  Node: Mayan Calendar,  Next: Date Display Format,  Prev: Holiday Customizing,  Up: Advanced Calendar/Diary Usage

32.13.3 Converting from the Mayan Calendar
------------------------------------------

Here are the commands to select dates based on the Mayan calendar:

‘g m l’
     Move to a date specified by the long count calendar
     (‘calendar-mayan-goto-long-count-date’).
‘g m n t’
     Move to the next occurrence of a place in the tzolkin calendar
     (‘calendar-mayan-next-tzolkin-date’).
‘g m p t’
     Move to the previous occurrence of a place in the tzolkin calendar
     (‘calendar-mayan-previous-tzolkin-date’).
‘g m n h’
     Move to the next occurrence of a place in the haab calendar
     (‘calendar-mayan-next-haab-date’).
‘g m p h’
     Move to the previous occurrence of a place in the haab calendar
     (‘calendar-mayan-previous-haab-date’).
‘g m n c’
     Move to the next occurrence of a place in the calendar round
     (‘calendar-mayan-next-calendar-round-date’).
‘g m p c’
     Move to the previous occurrence of a place in the calendar round
     (‘calendar-mayan-previous-calendar-round-date’).

   To understand these commands, you need to understand the Mayan
calendars.  The “long count” is a counting of days with these units:

     1 kin = 1 day   1 uinal = 20 kin   1 tun = 18 uinal
     1 katun = 20 tun   1 baktun = 20 katun

Thus, the long count date 12.16.11.16.6 means 12 baktun, 16 katun, 11
tun, 16 uinal, and 6 kin.  The Emacs calendar can handle Mayan long
count dates as early as 7.17.18.13.3, but no earlier.  When you use the
‘g m l’ command, type the Mayan long count date with the baktun, katun,
tun, uinal, and kin separated by periods.

   The Mayan tzolkin calendar is a cycle of 260 days formed by a pair of
independent cycles of 13 and 20 days.  Since this cycle repeats
endlessly, Emacs provides commands to move backward and forward to the
previous or next point in the cycle.  Type ‘g m p t’ to go to the
previous tzolkin date; Emacs asks you for a tzolkin date and moves point
to the previous occurrence of that date.  Similarly, type ‘g m n t’ to
go to the next occurrence of a tzolkin date.

   The Mayan haab calendar is a cycle of 365 days arranged as 18 months
of 20 days each, followed by a 5-day monthless period.  Like the tzolkin
cycle, this cycle repeats endlessly, and there are commands to move
backward and forward to the previous or next point in the cycle.  Type
‘g m p h’ to go to the previous haab date; Emacs asks you for a haab
date and moves point to the previous occurrence of that date.
Similarly, type ‘g m n h’ to go to the next occurrence of a haab date.

   The Maya also used the combination of the tzolkin date and the haab
date.  This combination is a cycle of about 52 years called a _calendar
round_.  If you type ‘g m p c’, Emacs asks you for both a haab and a
tzolkin date and then moves point to the previous occurrence of that
combination.  Use ‘g m n c’ to move point to the next occurrence of a
combination.  These commands signal an error if the haab/tzolkin date
combination you have typed is impossible.

   Emacs uses strict completion (*note Completion Exit::) whenever it
asks you to type a Mayan name, so you don’t have to worry about
spelling.


File: emacs.info,  Node: Date Display Format,  Next: Time Display Format,  Prev: Mayan Calendar,  Up: Advanced Calendar/Diary Usage

32.13.4 Date Display Format
---------------------------

You can customize the way dates are displayed in the diary, mode lines,
and messages by setting ‘calendar-date-display-form’.  This variable
holds a list of expressions that can involve the variables ‘month’,
‘day’, and ‘year’, which are all numbers in string form, and ‘monthname’
and ‘dayname’, which are both alphabetic strings.  In the American
style, the default value of this list is as follows:

     ((if dayname (concat dayname ", ")) monthname " " day ", " year)

while in the European style this value is the default:

     ((if dayname (concat dayname ", ")) day " " monthname " " year)

The default ISO date representation is:

     ((format "%s-%.2d-%.2d" year (string-to-number month)
              (string-to-number day)))

Another typical American format is:

     (month "/" day "/" (substring year -2))


File: emacs.info,  Node: Time Display Format,  Next: Diary Customizing,  Prev: Date Display Format,  Up: Advanced Calendar/Diary Usage

32.13.5 Time Display Format
---------------------------

The calendar and diary by default display times of day in the
conventional American style with the hours from 1 through 12, minutes,
and either ‘am’ or ‘pm’.  If you prefer the European style, also known
in the US as military, in which the hours go from 00 to 23, you can
alter the variable ‘calendar-time-display-form’.  This variable is a
list of expressions that can involve the variables ‘12-hours’,
‘24-hours’, and ‘minutes’, which are all numbers in string form, and
‘am-pm’ and ‘time-zone’, which are both alphabetic strings.  The default
value is:

     (12-hours ":" minutes am-pm
               (if time-zone " (") time-zone (if time-zone ")"))

Here is a value that provides European style times:

     (24-hours ":" minutes
               (if time-zone " (") time-zone (if time-zone ")"))

   Note that few calendar functions return a time of day (at present,
only solar functions).


File: emacs.info,  Node: Diary Customizing,  Next: Non-Gregorian Diary,  Prev: Time Display Format,  Up: Advanced Calendar/Diary Usage

32.13.6 Customizing the Diary
-----------------------------

Ordinarily, the diary window indicates any holidays that fall on the
date of the diary entries, either in the mode line or the buffer itself.
The process of checking for holidays can be slow, depending on the
defined holidays.  In that case, setting ‘diary-show-holidays-flag’ to
‘nil’ will speed up the diary display.

   The variable ‘diary-number-of-entries’ controls the number of days of
diary entries to be displayed at one time.  It affects the initial
display when ‘calendar-view-diary-initially-flag’ is ‘t’, as well as the
command ‘M-x diary’.  For example, a value of 1 (the default) displays
only the current day’s diary entries, whereas a value of 2 will also
show the next day’s entries.  The value can also be a vector of seven
integers: for example, if the value is ‘[0 2 2 2 2 4 1]’ then no diary
entries appear on Sunday, the current date’s and the next day’s diary
entries appear Monday through Thursday, Friday through Monday’s entries
appear on Friday, while on Saturday only that day’s entries appear.

   You can customize the form of dates in your diary file by setting the
variable ‘diary-date-forms’.  This variable is a list of patterns for
recognizing a date.  Each date pattern is a list whose elements may be
regular expressions (*note (elisp)Regular Expressions::) or the symbols
‘month’, ‘day’, ‘year’, ‘monthname’, and ‘dayname’.  All these elements
serve as patterns that match certain kinds of text in the diary file.
In order for the date pattern as a whole to match, all of its elements
must match consecutively.

   A regular expression in a date pattern matches in its usual fashion,
using the standard syntax table altered so that ‘*’ is a word
constituent.

   The symbols ‘month’, ‘day’, ‘year’, ‘monthname’, and ‘dayname’ match
the month number, day number, year number, month name, and day name of
the date being considered.  The symbols that match numbers allow leading
zeros; those that match names allow capitalization and abbreviation (as
specified by ‘calendar-month-abbrev-array’ and
‘calendar-day-abbrev-array’).  All the symbols can match ‘*’; since ‘*’
in a diary entry means “any day”, “any month”, and so on, it should
match regardless of the date being considered.

   The default value of ‘diary-date-forms’ in the American style is
provided by ‘diary-american-date-forms’:

     ((month "/" day "[^/0-9]")
      (month "/" day "/" year "[^0-9]")
      (monthname " *" day "[^,0-9]")
      (monthname " *" day ", *" year "[^0-9]")
      (dayname "\\W"))

The variables ‘diary-european-date-forms’ and ‘diary-iso-date-forms’
provide other default styles.

   The date patterns in the list must be _mutually exclusive_ and must
not match any portion of the diary entry itself, just the date and one
character of whitespace.  If, to be mutually exclusive, the pattern must
match a portion of the diary entry text—beyond the whitespace that ends
the date—then the first element of the date pattern _must_ be ‘backup’.
This causes the date recognizer to back up to the beginning of the
current word of the diary entry, after finishing the match.  Even if you
use ‘backup’, the date pattern must absolutely not match more than a
portion of the first word of the diary entry.  For example, the default
value of ‘diary-european-date-forms’ is:

     ((day "/" month "[^/0-9]")
      (day "/" month "/" year "[^0-9]")
      (backup day " *" monthname "\\W+\\<\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)")
      (day " *" monthname " *" year "[^0-9]")
      (dayname "\\W"))

Notice the use of ‘backup’ in the third pattern, because it needs to
match part of a word beyond the date itself to distinguish it from the
fourth pattern.


File: emacs.info,  Node: Non-Gregorian Diary,  Next: Diary Display,  Prev: Diary Customizing,  Up: Advanced Calendar/Diary Usage

32.13.7 Diary Entries Using non-Gregorian Calendars
---------------------------------------------------

As well as entries based on the standard Gregorian calendar, your diary
can have entries based on Bahá’í, Chinese, Hebrew, or Islamic dates.
Recognition of such entries can be time-consuming, however, and since
most people don’t use them, you must explicitly enable their use.  If
you want the diary to recognize Hebrew-date diary entries, for example,
you must do this:

     (add-hook 'diary-nongregorian-listing-hook 'diary-hebrew-list-entries)
     (add-hook 'diary-nongregorian-marking-hook 'diary-hebrew-mark-entries)

Similarly, for Islamic, Bahá’í and Chinese entries, add
‘diary-islamic-list-entries’ and ‘diary-islamic-mark-entries’,
‘diary-bahai-list-entries’ and ‘diary-bahai-mark-entries’, or
‘diary-chinese-list-entries’ and ‘diary-chinese-mark-entries’.

   These diary entries have the same formats as Gregorian-date diary
entries; except that ‘diary-bahai-entry-symbol’ (default ‘B’) must
precede a Bahá’í date, ‘diary-chinese-entry-symbol’ (default ‘C’) a
Chinese date, ‘diary-hebrew-entry-symbol’ (default ‘H’) a Hebrew date,
and ‘diary-islamic-entry-symbol’ (default ‘I’) an Islamic date.
Moreover, non-Gregorian month names may not be abbreviated (because the
first three letters are often not unique).  (Note also that you must use
“Adar I” if you want Adar of a common Hebrew year.)  For example, a
diary entry for the Hebrew date Heshvan 25 could look like this:

     HHeshvan 25 Happy Hebrew birthday!

and would appear in the diary for any date that corresponds to Heshvan
25 on the Hebrew calendar.  And here is an Islamic-date diary entry that
matches Dhu al-Qada 25:

     IDhu al-Qada 25 Happy Islamic birthday!

   As with Gregorian-date diary entries, non-Gregorian entries are
nonmarking if preceded by ‘diary-nonmarking-symbol’ (default ‘&’).

   Here is a table of commands used in the calendar to create diary
entries that match the selected date and other dates that are similar in
the Bahá’í, Chinese, Hebrew, or Islamic calendars:

‘i h d’
     ‘diary-hebrew-insert-entry’
‘i h m’
     ‘diary-hebrew-insert-monthly-entry’
‘i h y’
     ‘diary-hebrew-insert-yearly-entry’
‘i i d’
     ‘diary-islamic-insert-entry’
‘i i m’
     ‘diary-islamic-insert-monthly-entry’
‘i i y’
     ‘diary-islamic-insert-yearly-entry’
‘i B d’
     ‘diary-bahai-insert-entry’
‘i B m’
     ‘diary-bahai-insert-monthly-entry’
‘i B y’
     ‘diary-bahai-insert-yearly-entry’
‘i C d’
     ‘diary-chinese-insert-entry’
‘i C m’
     ‘diary-chinese-insert-monthly-entry’
‘i C y’
     ‘diary-chinese-insert-yearly-entry’
‘i C a’
     ‘diary-chinese-insert-anniversary-entry’

   These commands work much like the corresponding commands for ordinary
diary entries: they apply to the date that point is on in the calendar
window, and what they do is insert just the date portion of a diary
entry at the end of your diary file.  You must then insert the rest of
the diary entry.  The basic commands add an entry for the specific
non-Gregorian date, the ‘monthly’ commands for the given non-Gregorian
day-within-month in every month, and the ‘yearly’ commands for the given
non-Gregorian day and month in every year.


File: emacs.info,  Node: Diary Display,  Next: Fancy Diary Display,  Prev: Non-Gregorian Diary,  Up: Advanced Calendar/Diary Usage

32.13.8 Diary Display
---------------------

Diary display works by preparing the list of diary entries and then
running the function specified by the variable ‘diary-display-function’.
The default value ‘diary-fancy-display’ displays diary entries and
holidays by copying them into a special buffer that exists only for the
sake of display.  Copying diary entries to a separate buffer provides an
opportunity to change the displayed text to make it prettier—for
example, to sort the entries by the dates they apply to.

   Ordinarily, the fancy diary buffer does not show days for which there
are no diary entries, even if that day is a holiday.  If you want such
days to be shown in the fancy diary buffer, set the variable
‘diary-list-include-blanks’ to ‘t’.

   The fancy diary buffer enables View mode (*note View Mode::).

   The alternative display method ‘diary-simple-display’ shows the
actual diary buffer, and uses invisible text to hide entries that don’t
apply.  Holidays are shown in the mode line.  The advantage of this
method is that you can edit the buffer and save your changes directly to
the diary file.  This method is not as flexible as the fancy method,
however.  For example, it cannot sort entries.  Another disadvantage is
that invisible text can be confusing.  For example, if you copy a region
of text in order to paste it elsewhere, invisible text may be included.
Similarly, since the diary buffer as you see it is an illusion, simply
printing the buffer may not print what you see on your screen.

   For this reason, there is a special command to print hard copy of the
diary buffer _as it appears_; this command is ‘M-x diary-print-entries’.
It works with either display method, although with the fancy display you
can also print the buffer like any other.  To print a hard copy of a
day-by-day diary for a week, position point on the first day of the
week, type ‘7 d’, and then do ‘M-x diary-print-entries’.  As usual, the
inclusion of the holidays slows down the display slightly; you can speed
things up by setting the variable ‘diary-show-holidays-flag’ to ‘nil’.

   This command prepares a temporary buffer that contains only the diary
entries currently visible in the diary buffer.  Unlike with the simple
display, the other irrelevant entries are really absent, not just
hidden.  After preparing the buffer, it runs the hook
‘diary-print-entries-hook’.  The default value of this hook sends the
data directly to the printer with the command ‘lpr-buffer’ (*note
Printing::).  If you want to use a different command to do the printing,
just change the value of this hook.  Other uses might include, for
example, rearranging the lines into order by day and time.

   You can edit the diary entries as they appear in the simple diary
window, but it is important to remember that the buffer displayed
contains the _entire_ diary file, with portions of it concealed from
view.  This means, for instance, that the ‘C-f’ (‘forward-char’) command
can put point at what appears to be the end of the line, but what is in
reality the middle of some concealed line.

   _Be careful when editing the diary entries in the simple display!_
Inserting additional lines or adding/deleting characters in the middle
of a visible line cannot cause problems, but editing at the end of a
line may not do what you expect.  Deleting a line may delete other
invisible entries that follow it.  Before editing the simple diary
buffer, it is best to display the entire file with ‘s’
(‘diary-show-all-entries’).


File: emacs.info,  Node: Fancy Diary Display,  Next: Sexp Diary Entries,  Prev: Diary Display,  Up: Advanced Calendar/Diary Usage

32.13.9 Fancy Diary Display
---------------------------

The following features only work with the fancy diary display.

   You can use the normal hook ‘diary-list-entries-hook’ to sort each
day’s diary entries by their time of day.  Here’s how:

     (add-hook 'diary-list-entries-hook 'diary-sort-entries t)

For each day, this sorts diary entries that begin with a recognizable
time of day according to their times.  Diary entries without times come
first within each day.  Note how the sort command is placed at the end
of the hook list, in case earlier members of the list change the order
of the diary entries, or add items.

   You can write ‘comments’ in diary entries, by setting the variables
‘diary-comment-start’ and ‘diary-comment-end’ to strings that delimit
comments.  The fancy display does not print comments.  You might want to
put meta-data for the use of other packages (e.g., the appointment
package, *note Appointments::) inside comments.

   Your main diary file can include other files.  This permits a group
of people to share a diary file for events that apply to all of them.
Lines in the diary file starting with ‘diary-include-string’:

     #include "FILENAME"

include the diary entries from the file FILENAME in the fancy diary
buffer.  The include mechanism is recursive, so that included files can
include other files, and so on (you must be careful not to have a cycle
of inclusions, of course).  Here is how to enable the include facility:

     (add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
     (add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)

   The include mechanism works only with the fancy diary display,
because simple diary display shows the entries directly from your diary
file.


File: emacs.info,  Node: Sexp Diary Entries,  Prev: Fancy Diary Display,  Up: Advanced Calendar/Diary Usage

32.13.10 Sexp Entries and the Fancy Diary Display
-------------------------------------------------

Sexp diary entries allow you to do more than just have complicated
conditions under which a diary entry applies.  Sexp entries should be
preceded by ‘diary-sexp-entry-symbol’ (default ‘%%’) in the diary file.
With the fancy diary display, sexp entries can generate the text of the
entry depending on the date itself.

   For example, an anniversary diary entry can insert the number of
years since the anniversary date into the text of the diary entry.  Thus
the ‘%d’ in this diary entry:

     %%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)

gets replaced by the age, so on October 31, 1990 the entry appears in
the fancy diary buffer like this:

     Arthur's birthday (42 years old)

If the diary file instead contains this entry:

     %%(diary-anniversary 10 31 1948) Arthur's %d%s birthday

the entry in the fancy diary buffer for October 31, 1990 appears like
this:

     Arthur's 42nd birthday

   Similarly, cyclic diary entries can interpolate the number of
repetitions that have occurred:

     %%(diary-cyclic 50 1 1 2012) Renew medication (%d%s time)

looks like this:

     Renew medication (5th time)

in the fancy diary display on September 7, 2012.

   There is an early-reminder diary sexp that includes its entry in the
diary not only on the date of occurrence, but also on earlier dates.
For example, if you want a reminder a week before your anniversary, you
can use

     %%(diary-remind '(diary-anniversary 12 22 1968) 7) Ed's anniversary

and the fancy diary will show ‘Ed's anniversary’ both on December 15 and
on December 22.

   The function ‘diary-date’ applies to dates described by a month, day,
year combination, each of which can be an integer, a list of integers,
or ‘t’ (meaning all values).  For example,

     %%(diary-date '(10 11 12) 22 t) Rake leaves

causes the fancy diary to show

     Rake leaves

on October 22, November 22, and December 22 of every year.

   The function ‘diary-float’ allows you to describe diary entries that
apply to dates like the third Friday of November, or the last Tuesday in
April.  The parameters are the MONTH, DAYNAME, and an index N.  The
entry appears on the Nth DAYNAME after the first day of MONTH, where
DAYNAME=0 means Sunday, 1 means Monday, and so on.  If N is negative it
counts backward from the end of MONTH.  The value of MONTH can be a list
of months, a single month, or ‘t’ to specify all months.  You can also
use an optional parameter DAY to specify the Nth DAYNAME on or
after/before DAY of MONTH; the value of DAY defaults to 1 if N is
positive and to the last day of MONTH if N is negative.  For example,

     %%(diary-float t 1 -1) Pay rent

causes the fancy diary to show

     Pay rent

on the last Monday of every month.

   The generality of sexp diary entries lets you specify any diary entry
that you can describe algorithmically.  A sexp diary entry contains an
expression that computes whether the entry applies to any given date.
If its value is non-‘nil’, the entry applies to that date; otherwise, it
does not.  The expression can use the variable ‘date’ to find the date
being considered; its value is a list (MONTH DAY YEAR) that refers to
the Gregorian calendar.

   The sexp diary entry applies to a date when the expression’s value is
non-‘nil’, but some values have more specific meanings.  If the value is
a string, that string is a description of the event which occurs on that
date.  The value can also have the form ‘(MARK . STRING)’; then MARK
specifies how to mark the date in the calendar, and STRING is the
description of the event.  If MARK is a single-character string, that
character appears next to the date in the calendar.  If MARK is a face
name, the date is displayed in that face.  If MARK is ‘nil’, that
specifies no particular highlighting for the date.

   Suppose you get paid on the 21st of the month if it is a weekday, and
on the Friday before if the 21st is on a weekend.  Here is how to write
a sexp diary entry that matches those dates:

     &%%(let ((dayname (calendar-day-of-week date))
              (day (cadr date)))
           (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
               (and (memq day '(19 20)) (= dayname 5)))
              ) Pay check deposited

   The following sexp diary entries take advantage of the ability (in
the fancy diary display) to concoct diary entries whose text varies
based on the date:

‘%%(diary-sunrise-sunset)’
     Make a diary entry for today’s local times of sunrise and sunset.
‘%%(diary-lunar-phases)’
     Make a diary entry for the phases (quarters) of the moon.
‘%%(diary-day-of-year)’
     Make a diary entry with today’s day number in the current year and
     the number of days remaining in the current year.
‘%%(diary-iso-date)’
     Make a diary entry with today’s equivalent ISO commercial date.
‘%%(diary-julian-date)’
     Make a diary entry with today’s equivalent Julian calendar date.
‘%%(diary-astro-day-number)’
     Make a diary entry with today’s equivalent astronomical (Julian)
     day number.
‘%%(diary-bahai-date)’
     Make a diary entry with today’s equivalent Bahá’í calendar date.
‘%%(diary-chinese-date)’
     Make a diary entry with today’s equivalent Chinese calendar date.
‘%%(diary-coptic-date)’
     Make a diary entry with today’s equivalent Coptic calendar date.
‘%%(diary-ethiopic-date)’
     Make a diary entry with today’s equivalent Ethiopic calendar date.
‘%%(diary-french-date)’
     Make a diary entry with today’s equivalent date on the French
     Revolutionary calendar.
‘%%(diary-hebrew-date)’
     Make a diary entry with today’s equivalent Hebrew calendar date.
‘%%(diary-islamic-date)’
     Make a diary entry with today’s equivalent Islamic calendar date.
‘%%(diary-mayan-date)’
     Make a diary entry with today’s equivalent Mayan calendar date.
‘%%(diary-persian-date)’
     Make a diary entry with today’s equivalent Persian calendar date.

For example, including the diary entry

     &%%(diary-hebrew-date)

causes every day’s diary display to contain the equivalent date on the
Hebrew calendar, if you are using the fancy diary display.  (With simple
diary display, the literal line ‘&%%(diary-hebrew-date)’ appears in the
diary for any date.)

   This function has been used to construct certain standard Hebrew sexp
diary entries:

‘%%(diary-hebrew-rosh-hodesh)’
     Make a diary entry that tells the occurrence and ritual
     announcement of each new Hebrew month.
‘%%(diary-hebrew-parasha)’
     Make a Saturday diary entry that tells the weekly synagogue
     scripture reading.
‘%%(diary-hebrew-sabbath-candles)’
     Make a Friday diary entry that tells the _local time_ of Sabbath
     candle lighting.
‘%%(diary-hebrew-omer)’
     Make a diary entry that gives the omer count, when appropriate.
‘%%(diary-hebrew-yahrzeit MONTH DAY YEAR) NAME’
     Make a diary entry marking the anniversary of a date of death.  The
     date is the _Gregorian_ (civil) date of death.  The diary entry
     appears on the proper Hebrew calendar anniversary and on the day
     before.  (The order of the parameters changes according to the
     calendar date style; for example in the European style to DAY,
     MONTH, YEAR.)
‘%%(diary-hebrew-birthday MONTH DAY YEAR)’
     Make a diary entry for a birthday on the Hebrew calendar.

   All the functions documented above take an optional argument MARK
which specifies how to mark the date in the calendar display.  If one of
these functions decides that it applies to a certain date, it returns a
value that contains MARK, as described above.


File: emacs.info,  Node: Sending Mail,  Next: Rmail,  Prev: Calendar/Diary,  Up: Top

# /. 33 Sending Mail
*******************

To send an email message from Emacs, type ‘C-x m’.  This switches to a
buffer named ‘*unsent mail*’, where you can edit the text and headers of
the message.  When done, type ‘C-c C-s’ or ‘C-c C-c’ to send it.

‘C-x m’
     Begin composing mail (‘compose-mail’).
‘C-x 4 m’
     Likewise, in another window (‘compose-mail-other-window’).
‘C-x 5 m’
     Likewise, but in a new frame (‘compose-mail-other-frame’).
‘C-c C-s’
     In the mail buffer, send the message (‘message-send’).
‘C-c C-c’
     In the mail buffer, send the message and bury the buffer
     (‘message-send-and-exit’).

   The mail buffer is an ordinary Emacs buffer, so you can switch to
other buffers while composing the mail.  If you want to send another
message before finishing the current one, type ‘C-x m’ again to open a
new mail buffer whose name has a different numeric suffix (*note Misc
Buffer::).  (This only works if you use the default Message mode to
compose email; see *note Mail Commands::.)  If you know that you’d like
to continue composing the unsent message you were editing, invoke this
command with a prefix argument, ‘C-u C-x m’, and Emacs will switch to
the last mail buffer you used and let you pick up editing the message
where you left off.

   The command ‘C-x 4 m’ (‘compose-mail-other-window’) does the same as
‘C-x m’, except it displays the mail buffer in a different window.  The
command ‘C-x 5 m’ (‘compose-mail-other-frame’) does it in a new frame.

   When you type ‘C-c C-c’ or ‘C-c C-s’ to send the mail, Emacs may ask
you how it should deliver the mail—either directly via SMTP, or using
some other method.  *Note Mail Sending::, for details.

* Menu:

* Format: Mail Format.        Format of a mail message.
* Headers: Mail Headers.      Details of some standard mail header fields.
* Aliases: Mail Aliases.      Abbreviating and grouping mail addresses.
* Commands: Mail Commands.    Special commands for editing mail being composed.
* Signature: Mail Signature.  Adding a signature to every message.
* Amuse: Mail Amusements.     Distracting the NSA; adding fortune messages.
* Methods: Mail Methods.      Using alternative mail-composition methods.


File: emacs.info,  Node: Mail Format,  Next: Mail Headers,  Up: Sending Mail

33.1 The Format of the Mail Buffer
==================================

Here is an example of the contents of a mail buffer:

     To: subotai@example.org
     CC: mongol.soldier@example.net, rms@gnu.org
     Subject: Re: What is best in life?
     From: conan@example.org
     --text follows this line--
     To crush your enemies, see them driven before you, and to
     hear the lamentation of their women.

At the top of the mail buffer is a set of “header fields”, which are
used for specifying information about the email’s recipient(s), subject,
and so on.  The above buffer contains header fields for ‘To’, ‘CC’,
‘Subject’, and ‘From’.  Some header fields are automatically
pre-initialized in the mail buffer, when appropriate.

   The line that says ‘--text follows this line--’ separates the header
fields from the “body” (or “text”) of the message.  Everything above
that line is treated as part of the headers; everything below it is
treated as the body.  The delimiter line itself does not appear in the
message actually sent.

   You can insert and edit header fields using ordinary editing
commands.  *Note Header Editing::, for commands specific to editing
header fields.  Certain headers, such as ‘Date’ and ‘Message-Id’, are
normally omitted from the mail buffer and are created automatically when
the message is sent.


File: emacs.info,  Node: Mail Headers,  Next: Mail Aliases,  Prev: Mail Format,  Up: Sending Mail

33.2 Mail Header Fields
=======================

A header field in the mail buffer starts with a field name at the
beginning of a line, terminated by a colon.  Upper and lower case are
equivalent in field names.  After the colon and optional whitespace
comes the contents of the field.

   You can use any name you like for a header field, but normally people
use only standard field names with accepted meanings.

   The ‘From’ header field identifies the person sending the email
(i.e., you).  This should be a valid mailing address, as replies are
normally sent there.  The default contents of this header field are
computed from the variables ‘user-full-name’ (which specifies your full
name) and ‘user-mail-address’ (your email address).  On some operating
systems, Emacs initializes these two variables using environment
variables (*note General Variables::).  If this information is
unavailable or wrong, you should customize the variables yourself (*note
Easy Customization::).

   Apart from ‘From’, here is a table of commonly-used fields:

‘To’
     The mailing address(es) to which the message is addressed.  To list
     more than one address, use commas to separate them.

‘Subject’
     The subject of the message.

‘CC’
     Additional mailing address(es) to send the message to.  This is
     like ‘To’, except that these readers should not regard the message
     as directed at them.

‘BCC’
     Additional mailing address(es) to send the message to, which should
     not appear in the header of the message actually sent.  ‘BCC’
     stands for “blind carbon copies”.

‘FCC’
     The name of a file, to which a copy of the sent message should be
     appended.  Emacs writes the message in mbox format, unless the file
     is in Babyl format (used by Rmail before Emacs 23), in which case
     Emacs writes in Babyl format.  If an Rmail buffer is visiting the
     file, Emacs updates it accordingly.  To specify more than one file,
     use several ‘FCC’ fields, with one file name in each field.

‘Reply-To’
     An address to which replies should be sent, instead of ‘From’.
     This is used if, for some reason, your ‘From’ address cannot
     receive replies.

‘Mail-Reply-To’
     This field takes precedence over ‘Reply-To’.  It is used because
     some mailing lists set the ‘Reply-To’ field for their own purposes
     (a somewhat controversial practice).

‘Mail-Followup-To’
     One of more address(es) to use as default recipient(s) for
     follow-up messages.  This is typically used when you reply to a
     message from a mailing list that you are subscribed to, and want
     replies to go to the list without sending an extra copy to you.

‘In-Reply-To’
     An identifier for the message you are replying to.  Most mail
     readers use this information to group related messages together.
     Normally, this header is filled in automatically when you reply to
     a message in any mail program built into Emacs.

‘References’
     Identifiers for previous related messages.  Like ‘In-Reply-To’,
     this is normally filled in automatically for you.

The ‘To’, ‘CC’, and ‘BCC’ fields can appear any number of times, and
each such header field can contain multiple addresses, separated by
commas.  This way, you can specify any number of places to send the
message.  These fields can also have continuation lines: one or more
lines starting with whitespace, following the starting line of the
field, are considered part of the field.  Here’s an example of a ‘To’
field with a continuation line:

     To: foo@example.net, this@example.net,
       bob@example.com

   You can direct Emacs to insert certain default headers into the mail
buffer by setting the variable ‘mail-default-headers’ to a string.  Then
‘C-x m’ inserts this string into the message headers.  For example, here
is how to add a ‘Reply-To’ and ‘FCC’ header to each message:

     (setq mail-default-headers
           "Reply-To: foo@example.com\nFCC: ~/Mail/sent")

If the default header fields are not appropriate for a particular
message, edit them as necessary before sending the message.


File: emacs.info,  Node: Mail Aliases,  Next: Mail Commands,  Prev: Mail Headers,  Up: Sending Mail

33.3 Mail Aliases
=================

You can define “mail aliases”, which are short mnemonic names that stand
for one or more mailing addresses.  By default, mail aliases are defined
in the file ‘~/.mailrc’.  You can specify a different file name to use,
by setting the variable ‘mail-personal-alias-file’.

   To define an alias in ‘~/.mailrc’, write a line like this:

     alias NICK FULLADDRESSES

This means that NICK should expand into FULLADDRESSES, where
FULLADDRESSES can be either a single address, or multiple addresses
separated with spaces.  For instance, to make ‘maingnu’ stand for
‘gnu@gnu.org’ plus a local address of your own, put in this line:

     alias maingnu gnu@gnu.org local-gnu

If an address contains a space, quote the whole address with a pair of
double quotes, like this:

     alias jsmith "John Q. Smith <none@example.com>"

Note that you need not include double quotes around individual parts of
the address, such as the person’s full name.  Emacs puts them in if they
are needed.  For instance, it inserts the above address as ‘"John Q.
Smith" <none@example.com>’.

   Emacs also recognizes include commands in ‘~/.mailrc’.  They look
like this:

     source FILENAME

The ‘~/.mailrc’ file is not unique to Emacs; many other mail-reading
programs use it for mail aliases, and it can contain various other
commands.  However, Emacs ignores everything except alias definitions
and include commands.

   Mail aliases expand as abbrevs—that is to say, as soon as you type a
word-separator character after an alias (*note Abbrevs::).  This
expansion takes place only within the ‘To’, ‘From’, ‘CC’, ‘BCC’, and
‘Reply-To’ header fields (plus their ‘Resent-’ variants); it does not
take place in other header fields, such as ‘Subject’.

   You can also insert an aliased address directly, using the command
‘M-x mail-abbrev-insert-alias’.  This reads an alias name, with
completion, and inserts its definition at point.


File: emacs.info,  Node: Mail Commands,  Next: Mail Signature,  Prev: Mail Aliases,  Up: Sending Mail

33.4 Mail Commands
==================

The default major mode for the ‘*mail*’ buffer is called Message mode.
It behaves like Text mode in many ways, but provides several additional
commands on the ‘C-c’ prefix, which make editing a message more
convenient.

   In this section, we will describe some of the most commonly-used
commands available in Message mode.  Message mode also has its own
manual, where its features are described in greater detail.  *Note
Message: (message)Top.

* Menu:

* Mail Sending::        Commands to send the message.
* Header Editing::      Commands to move to header fields and edit them.
* Citing Mail::         Quoting a message you are replying to.
* Mail Misc::           Attachments, spell checking, etc.


File: emacs.info,  Node: Mail Sending,  Next: Header Editing,  Up: Mail Commands

33.4.1 Mail Sending
-------------------

‘C-c C-c’
     Send the message, and bury the mail buffer
     (‘message-send-and-exit’).
‘C-c C-s’
     Send the message, and leave the mail buffer selected
     (‘message-send’).

   The usual command to send a message is ‘C-c C-c’
(‘message-send-and-exit’).  This sends the message and then buries the
mail buffer, putting it at the lowest priority for reselection.  If you
want it to kill the mail buffer instead, change the variable
‘message-kill-buffer-on-exit’ to ‘t’.

   The command ‘C-c C-s’ (‘message-send’) sends the message and leaves
the buffer selected.  Use this command if you want to modify the message
(perhaps with new recipients) and send it again.

   Sending a message runs the hook ‘message-send-hook’.  It also marks
the mail buffer as unmodified, except if the mail buffer is also a
file-visiting buffer (in that case, only saving the file does that, and
you don’t get a warning if you try to send the same message twice).

   The variable ‘message-send-mail-function’ controls how the message is
delivered (‘send-mail-function’ is used for Mail mode).  The value of
‘send-mail-function’ should be one of the following functions:

‘sendmail-query-once’
     Query for a delivery method (one of the other entries in this
     list), and use that method for this message; then save the method
     to ‘send-mail-function’, so that it is used for future deliveries.
     This is the default, unless you have already set the variables for
     sending mail via ‘smtpmail-send-it’ (see below).

‘smtpmail-send-it’
     Send mail through an external mail host, such as your Internet
     service provider’s outgoing SMTP mail server.  If you have not told
     Emacs how to contact the SMTP server, it prompts for this
     information, which is saved in the ‘smtpmail-smtp-server’ variable
     and the file ‘~/.authinfo’.  *Note Emacs SMTP Library:
     (smtpmail)Top.

‘sendmail-send-it’
     Send mail using the system’s default ‘sendmail’ program, or
     equivalent.  This requires the system to be set up for delivering
     mail directly via SMTP.

‘mailclient-send-it’
     Pass the mail buffer on to the system’s designated mail client.
     See the commentary section in the file ‘mailclient.el’ for details.

‘feedmail-send-it’
     This is similar to ‘sendmail-send-it’, but allows you to queue
     messages for later sending.  See the commentary section in the file
     ‘feedmail.el’ for details.

   When you send a message containing non-ASCII characters, they need to
be encoded with a coding system (*note Coding Systems::).  Usually the
coding system is specified automatically by your chosen language
environment (*note Language Environments::).  You can explicitly specify
the coding system for outgoing mail by setting the variable
‘sendmail-coding-system’ (*note Recognize Coding::).  If the coding
system thus determined does not handle the characters in a particular
message, Emacs asks you to select the coding system to use, showing a
list of possible coding systems.  *Note Output Coding::.


File: emacs.info,  Node: Header Editing,  Next: Citing Mail,  Prev: Mail Sending,  Up: Mail Commands

33.4.2 Mail Header Editing
--------------------------

Message mode provides the following special commands to move to
particular header fields and to complete addresses in headers.

‘C-c C-f C-t’
     Move to the ‘To’ header (‘message-goto-to’).
‘C-c C-f C-s’
     Move to the ‘Subject’ header (‘message-goto-subject’).
‘C-c C-f C-c’
     Move to the ‘CC’ header (‘message-goto-cc’).
‘C-c C-f C-b’
     Move to the ‘BCC’ header (‘message-goto-bcc’).
‘C-c C-f C-r’
     Move to the ‘Reply-To’ header (‘message-goto-reply-to’).
‘C-c C-f C-f’
     Move to the ‘Mail-Followup-To’ header field
     (‘message-goto-followup-to’).
‘C-c C-f C-w’
     Add a new ‘FCC’ header field, with file-name completion
     (‘message-goto-fcc’).
‘C-c C-b’
     Move to the start of the message body (‘message-goto-body’).
‘<TAB>’
     Complete a mailing address (‘message-tab’).

   The commands to move point to particular header fields are all based
on the prefix ‘C-c C-f’ (‘C-f’ is for “field”).  If the field in
question does not exist, the command creates one (the exception is
‘mail-fcc’, which creates a new field each time).

   The command ‘C-c C-b’ (‘message-goto-body’) moves point to just after
the header separator line—that is, to the beginning of the body.

   While editing a header field that contains addresses, such as ‘To:’,
‘CC:’ and ‘BCC:’, you can complete an address by typing <TAB>
(‘message-tab’).  This attempts to insert the full name corresponding to
the address based on a couple of methods, including EUDC, a library that
recognizes a number of directory server protocols (*note EUDC:
(eudc)Top.).  Failing that, it attempts to expand the address as a mail
alias (*note Mail Aliases::).  If point is on a header field that does
not take addresses, or if it is in the message body, then <TAB> just
inserts a tab character.


File: emacs.info,  Node: Citing Mail,  Next: Mail Misc,  Prev: Header Editing,  Up: Mail Commands

33.4.3 Citing Mail
------------------

‘C-c C-y’
     Yank the selected message from the mail reader, as a citation
     (‘message-yank-original’).
‘C-c C-q’
     Fill each paragraph cited from another message
     (‘message-fill-yanked-message’).

   You can use the command ‘C-c C-y’ (‘message-yank-original’) to “cite”
a message that you are replying to.  This inserts the text of that
message into the mail buffer.  This command works only if the mail
buffer is invoked from a mail reader running in Emacs, such as Rmail.

   By default, Emacs inserts the string ‘>’ in front of each line of the
cited text; this prefix string is specified by the variable
‘message-yank-prefix’.  If you call ‘message-yank-original’ with a
prefix argument, the citation prefix is not inserted.

   After using ‘C-c C-y’, you can type ‘C-c C-q’
(‘message-fill-yanked-message’) to fill the paragraphs of the cited
message.  One use of ‘C-c C-q’ fills all such paragraphs, each one
individually.  To fill a single paragraph of the quoted message, use
‘M-q’.  If filling does not automatically handle the type of citation
prefix you use, try setting the fill prefix explicitly.  *Note
Filling::.

   You can customize mail citation through the hook
‘mail-citation-hook’.  For example, you can use the Supercite package,
which provides more flexible citation (*note (sc)Introduction::).


File: emacs.info,  Node: Mail Misc,  Prev: Citing Mail,  Up: Mail Commands

33.4.4 Mail Miscellany
----------------------

You can “attach” a file to an outgoing message by typing ‘C-c C-a’
(‘mml-attach-file’) in the mail buffer.  Attaching is done using the
Multipurpose Internet Mail Extensions (MIME) standard.

   The ‘mml-attach-file’ command prompts for the name of the file, and
for the attachment’s “content type”, “description”, and “disposition”.
The content type is normally detected automatically; just type <RET> to
accept the default.  The description is a single line of text that the
recipient will see next to the attachment; you may also choose to leave
this empty.  The disposition is either ‘inline’, which means the
recipient will see a link to the attachment within the message body, or
‘attachment’, which means the link will be separate from the body.

   The ‘mml-attach-file’ command is specific to Message mode; in Mail
mode use ‘mail-add-attachment’ instead.  It will prompt only for the
name of the file, and will determine the content type and the
disposition automatically.  If you want to include some description of
the attached file, type that in the message body.

   The actual contents of the attached file are not inserted into the
mail buffer.  Instead, some placeholder text is inserted into the mail
buffer, like this:

     <#part type="text/plain" filename="~/foo.txt" disposition=inline>
     <#/part>

When you type ‘C-c C-c’ or ‘C-c C-s’ to send the message, the attached
file will be delivered with it.

   While composing a message, you can do spelling correction on the
message text by typing ‘M-x ispell-message’.  If you have yanked an
incoming message into the outgoing draft, this command skips what was
yanked, but it checks the text that you yourself inserted (it looks for
indentation or ‘mail-yank-prefix’ to distinguish the cited lines from
your input).  *Note Spelling::.

   Turning on Message mode (which ‘C-x m’ does automatically) runs the
normal hooks ‘text-mode-hook’ and ‘message-mode-hook’.  Initializing a
new outgoing message runs the normal hook ‘message-setup-hook’; you can
use this hook if you want to make changes to the appearance of the mail
buffer.  *Note Hooks::.

   The main difference between these hooks is just when they are
invoked.  Whenever you type ‘C-x m’, ‘message-mode-hook’ runs as soon as
the mail buffer is created.  Then the ‘message-setup’ function inserts
the default contents of the buffer.  After these default contents are
inserted, ‘message-setup-hook’ runs.

   If you use ‘C-x m’ to continue an existing composition,
‘message-mode-hook’ runs immediately after switching to the mail buffer.
If the buffer is unmodified, or if you decide to erase it and start
again, ‘message-setup-hook’ runs after the default contents are
inserted.


File: emacs.info,  Node: Mail Signature,  Next: Mail Amusements,  Prev: Mail Commands,  Up: Sending Mail

33.5 Mail Signature
===================

You can add a standard piece of text—your “mail signature”—to the end of
every message.  This signature may contain information such as your
telephone number or your physical location.  The variable
‘message-signature’ determines how Emacs handles the mail signature.

   The default value of ‘message-signature’ is ‘t’; this means to look
for your mail signature in the file ‘~/.signature’.  If this file
exists, its contents are automatically inserted into the end of the mail
buffer.  You can change the signature file via the variable
‘message-signature-file’.

   If you change ‘message-signature’ to a string, that specifies the
text of the signature directly.

   If you change ‘message-signature’ to ‘nil’, Emacs will not insert
your mail signature automatically.  You can insert your mail signature
by typing ‘C-c C-w’ (‘message-insert-signature’) in the mail buffer.
Emacs will look for your signature in the signature file.

   If you use Mail mode rather than Message mode for composing your
mail, the corresponding variables that determine how your signature is
sent are ‘mail-signature’ and ‘mail-signature-file’ instead.

   By convention, a mail signature should be marked by a line whose
contents are ‘-- ’.  If your signature lacks this prefix, it is added
for you.  The remainder of your signature should be no more than four
lines.


File: emacs.info,  Node: Mail Amusements,  Next: Mail Methods,  Prev: Mail Signature,  Up: Sending Mail

33.6 Mail Amusements
====================

‘M-x spook’ adds a line of randomly chosen keywords to an outgoing mail
message.  The keywords are chosen from a list of words that suggest you
are discussing something subversive.

   The idea behind this feature is the suspicion that the NSA(1) and
other intelligence agencies snoop on all electronic mail messages that
contain keywords suggesting they might find them interesting.  (The
agencies say that they don’t, but that’s what they _would_ say.)  The
idea is that if lots of people add suspicious words to their messages,
the agencies will get so busy with spurious input that they will have to
give up reading it all.  Whether or not this is true, it at least amuses
some people.

   You can use the ‘fortune’ program to put a fortune cookie message
into outgoing mail.  To do this, add ‘fortune-to-signature’ to
‘mail-setup-hook’:

     (add-hook 'mail-setup-hook 'fortune-to-signature)

You will probably need to set the variable ‘fortune-file’ before using
this.

   ---------- Footnotes ----------

   (1) The US National Security Agency.


File: emacs.info,  Node: Mail Methods,  Prev: Mail Amusements,  Up: Sending Mail

33.7 Mail-Composition Methods
=============================

In this chapter we have described the usual Emacs mode for editing and
sending mail—Message mode.  This is only one of several available modes.
Prior to Emacs 23.2, the default mode was Mail mode, which is similar to
Message mode in many respects but lacks features such as MIME support.
Another available mode is MH-E (*note MH-E: (mh-e)Top.).

   You can choose any of these “mail user agents” as your preferred
method for editing and sending mail.  The commands ‘C-x m’, ‘C-x 4 m’
and ‘C-x 5 m’ use whichever agent you have specified; so do various
other parts of Emacs that send mail, such as the bug reporter (*note
Bugs::).  To specify a mail user agent, customize the variable
‘mail-user-agent’.  Currently, legitimate values include
‘message-user-agent’ (Message mode) ‘sendmail-user-agent’ (Mail mode),
‘gnus-user-agent’, and ‘mh-e-user-agent’.  Additional options may be
available; check in the manual of your mail user agent package for
details.  You may also define another mail user agent using
‘define-mail-user-agent’.

   If you select a different mail-composition method, the information in
this chapter about the mail buffer and Message mode does not apply; the
other methods use a different format of text in a different buffer, and
their commands are different as well.

   Similarly, to specify your preferred method for reading mail,
customize the variable ‘read-mail-command’.  The default is ‘rmail’
(*note Rmail::).


File: emacs.info,  Node: Rmail,  Next: Gnus,  Prev: Sending Mail,  Up: Top

# /. 34 Reading Mail with Rmail
******************************

Rmail is an Emacs subsystem for reading and disposing of mail that you
receive.  Rmail stores mail messages in files called Rmail files.
Reading the messages in an Rmail file is done in a special major mode,
Rmail mode, which redefines most letters to run commands for managing
mail.

   Emacs also comes with a much more sophisticated and flexible
subsystem for reading mail, called Gnus.  Gnus is a very large package,
and is therefore described in its own manual, see *note (gnus)Top::.

* Menu:

* Basic: Rmail Basics.       Basic concepts of Rmail, and simple use.
* Scroll: Rmail Scrolling.   Scrolling through a message.
* Motion: Rmail Motion.      Moving to another message.
* Deletion: Rmail Deletion.  Deleting and expunging messages.
* Inbox: Rmail Inbox.        How mail gets into the Rmail file.
* Files: Rmail Files.        Using multiple Rmail files.
* Output: Rmail Output.      Copying messages out to files.
* Labels: Rmail Labels.      Classifying messages by labeling them.
* Attrs: Rmail Attributes.   Certain standard labels, called attributes.
* Reply: Rmail Reply.        Sending replies to messages you are viewing.
* Summary: Rmail Summary.    Summaries show brief info on many messages.
* Sort: Rmail Sorting.       Sorting messages in Rmail.
* Display: Rmail Display.    How Rmail displays a message; customization.
* Coding: Rmail Coding.      How Rmail handles decoding character sets.
* Editing: Rmail Editing.    Editing message text and headers in Rmail.
* Digest: Rmail Digest.      Extracting the messages from a digest message.
* Rot13: Rmail Rot13.        Reading messages encoded in the rot13 code.
* Movemail::                 More details of fetching new mail.
* Remote Mailboxes::         Retrieving mail from remote mailboxes.
* Other Mailbox Formats::    Retrieving mail from local mailboxes in
                             various formats.


File: emacs.info,  Node: Rmail Basics,  Next: Rmail Scrolling,  Up: Rmail

34.1 Basic Concepts of Rmail
============================

Using Rmail in the simplest fashion, you have one Rmail file ‘~/RMAIL’
in which all of your mail is saved.  It is called your “primary Rmail
file”.  The command ‘M-x rmail’ reads your primary Rmail file, merges
new mail in from your inboxes, displays the first message you haven’t
read yet, and lets you begin reading.  The variable ‘rmail-file-name’
specifies the name of the primary Rmail file.

   Rmail displays only one message in the Rmail file at a time.  The
message that is shown is called the “current message”.  Rmail mode’s
special commands can do such things as delete the current message, copy
it into another file, send a reply, or move to another message.  You can
also create multiple Rmail files (*note Files::) and use Rmail to move
messages between them (*note Rmail Output::).

   Within the Rmail file, messages are normally arranged sequentially in
order of receipt; you can specify other ways to sort them (*note Rmail
Sorting::).  Messages are identified by consecutive integers which are
their “message numbers”.  The number of the current message is displayed
in Rmail’s mode line, followed by the total number of messages in the
file.  You can move to a message by specifying its message number with
the ‘j’ key (*note Rmail Motion::).

   Following the usual conventions of Emacs, changes in an Rmail file
become permanent only when you save the file.  You can save it with ‘s’
(‘rmail-expunge-and-save’), which also expunges deleted messages from
the file first (*note Rmail Deletion::).  To save the file without
expunging, use ‘C-x C-s’.  Rmail automatically saves the Rmail file
after merging new mail from an inbox file (*note Rmail Inbox::).

   You can exit Rmail with ‘q’ (‘rmail-quit’); this expunges and saves
the Rmail file, then buries the Rmail buffer as well as its summary
buffer, if present (*note Rmail Summary::).  But there is no need to
exit formally.  If you switch from Rmail to editing in other buffers,
and never switch back, you have exited.  Just make sure to save the
Rmail file eventually (like any other file you have changed).  ‘C-x s’
is a suitable way to do this (*note Save Commands::).  The Rmail command
‘b’, ‘rmail-bury’, buries the Rmail buffer and its summary without
expunging and saving the Rmail file.


File: emacs.info,  Node: Rmail Scrolling,  Next: Rmail Motion,  Prev: Rmail Basics,  Up: Rmail

34.2 Scrolling Within a Message
===============================

When Rmail displays a message that does not fit on the screen, you must
scroll through it to read the rest.  You could do this with the usual
scrolling commands: ‘C-v’, ‘M-v’ and ‘M-<’ (*note Scrolling::), but in
Rmail scrolling is so frequent that it deserves to be easier.

‘<SPC>’
     Scroll forward (‘scroll-up-command’).
‘<DEL>’
‘S-<SPC>’
     Scroll backward (‘scroll-down-command’).
‘.’
     Scroll to start of message (‘rmail-beginning-of-message’).
‘/’
     Scroll to end of message (‘rmail-end-of-message’).

   Since the most common thing to do while reading a message is to
scroll through it by screenfuls, Rmail makes <SPC> and <DEL> (or
‘S-<SPC>’) do the same as ‘C-v’ (‘scroll-up-command’) and ‘M-v’
(‘scroll-down-command’) respectively.

   The command ‘.’ (‘rmail-beginning-of-message’) scrolls back to the
beginning of the selected message.  This is not quite the same as ‘M-<’:
for one thing, it does not set the mark; for another, it resets the
buffer boundaries of the current message if you have changed them (e.g.,
by editing, *note Rmail Editing::).  Similarly, the command ‘/’
(‘rmail-end-of-message’) scrolls forward to the end of the selected
message.


File: emacs.info,  Node: Rmail Motion,  Next: Rmail Deletion,  Prev: Rmail Scrolling,  Up: Rmail

34.3 Moving Among Messages
==========================

The most basic thing to do with a message is to read it.  The way to do
this in Rmail is to make the message current.  The usual practice is to
move sequentially through the file, since this is the order of receipt
of messages.  When you enter Rmail, you are positioned at the first
message that you have not yet made current (that is, the first one that
has the ‘unseen’ attribute; *note Rmail Attributes::).  Move forward to
see the other new messages; move backward to re-examine old messages.

‘n’
     Move to the next nondeleted message, skipping any intervening
     deleted messages (‘rmail-next-undeleted-message’).
‘p’
     Move to the previous nondeleted message
     (‘rmail-previous-undeleted-message’).
‘M-n’
     Move to the next message, including deleted messages
     (‘rmail-next-message’).
‘M-p’
     Move to the previous message, including deleted messages
     (‘rmail-previous-message’).
‘C-c C-n’
     Move to the next message with the same subject as the current one
     (‘rmail-next-same-subject’).
‘C-c C-p’
     Move to the previous message with the same subject as the current
     one (‘rmail-previous-same-subject’).
‘j’
     Move to the first message.  With argument N, move to message number
     N (‘rmail-show-message’).
‘>’
     Move to the last message (‘rmail-last-message’).
‘<’
     Move to the first message (‘rmail-first-message’).
‘M-s REGEXP <RET>’
     Move to the next message containing a match for REGEXP
     (‘rmail-search’).
‘- M-s REGEXP <RET>’
     Move to the previous message containing a match for REGEXP.  (This
     is ‘M-s’ with a negative argument.)

   ‘n’ and ‘p’ are the usual way of moving among messages in Rmail.
They move through the messages sequentially, but skip over deleted
messages, which is usually what you want to do.  Their command
definitions are named ‘rmail-next-undeleted-message’ and
‘rmail-previous-undeleted-message’.  If you do not want to skip deleted
messages—for example, if you want to move to a message to undelete
it—use the variants ‘M-n’ and ‘M-p’ (‘rmail-next-message’ and
‘rmail-previous-message’).  A numeric argument to any of these commands
serves as a repeat count.

   In Rmail, you can specify a numeric argument by typing just the
digits.  You don’t need to type ‘C-u’ first.  You can also specify a
negative argument by typing just ‘-’.

   The ‘M-s’ (‘rmail-search’) command is Rmail’s version of search.  The
usual incremental search command ‘C-s’ works in Rmail, but it searches
only within the current message.  The purpose of ‘M-s’ is to search for
another message.  It reads a regular expression (*note Regexps::)
nonincrementally, then searches starting at the beginning of the
following message for a match.  It then selects that message.  If REGEXP
is empty, ‘M-s’ reuses the regexp used the previous time.

   To search backward in the file for another message, give ‘M-s’ a
negative argument.  In Rmail you can do this with ‘- M-s’.  This begins
searching from the end of the previous message.

   It is also possible to search for a message based on labels.  *Note
Rmail Labels::.

   The ‘C-c C-n’ (‘rmail-next-same-subject’) command moves to the next
message with the same subject as the current one.  A prefix argument
serves as a repeat count.  With a negative argument, this command moves
backward, acting like ‘C-c C-p’ (‘rmail-previous-same-subject’).  When
comparing subjects, these commands ignore the prefixes typically added
to the subjects of replies.  These commands are useful for reading all
of the messages pertaining to the same subject, a.k.a. “thread”.

   To move to a message specified by absolute message number, use ‘j’
(‘rmail-show-message’) with the message number as argument.  With no
argument, ‘j’ selects the first message.  ‘<’ (‘rmail-first-message’)
also selects the first message.  ‘>’ (‘rmail-last-message’) selects the
last message.


File: emacs.info,  Node: Rmail Deletion,  Next: Rmail Inbox,  Prev: Rmail Motion,  Up: Rmail

34.4 Deleting Messages
======================

When you no longer need to keep a message, you can “delete” it.  This
flags it as ignorable, and some Rmail commands pretend it is no longer
present; but it still has its place in the Rmail file, and still has its
message number.

   “Expunging” the Rmail file actually removes the deleted messages.
The remaining messages are renumbered consecutively.

‘d’
     Delete the current message, and move to the next nondeleted message
     (‘rmail-delete-forward’).
‘C-d’
     Delete the current message, and move to the previous nondeleted
     message (‘rmail-delete-backward’).
‘u’
     Undelete the current message, or move back to the previous deleted
     message and undelete it (‘rmail-undelete-previous-message’).
‘x’
     Expunge the Rmail file (‘rmail-expunge’).

   There are two Rmail commands for deleting messages.  Both delete the
current message and select another.  ‘d’ (‘rmail-delete-forward’) moves
to the following message, skipping messages already deleted, while ‘C-d’
(‘rmail-delete-backward’) moves to the previous nondeleted message.  If
there is no nondeleted message to move to in the specified direction,
the message that was just deleted remains current.  A numeric prefix
argument serves as a repeat count, to allow deletion of several messages
in a single command.  A negative argument reverses the meaning of ‘d’
and ‘C-d’.

   Whenever Rmail deletes a message, it runs the hook
‘rmail-delete-message-hook’.  When the hook functions are invoked, the
message has been marked deleted, but it is still the current message in
the Rmail buffer.

   To make all the deleted messages finally vanish from the Rmail file,
type ‘x’ (‘rmail-expunge’).  Until you do this, you can still “undelete”
the deleted messages.  The undeletion command, ‘u’
(‘rmail-undelete-previous-message’), is designed to cancel the effect of
a ‘d’ command in most cases.  It undeletes the current message if the
current message is deleted.  Otherwise it moves backward to previous
messages until a deleted message is found, and undeletes that message.
A numeric prefix argument serves as a repeat count, to allow undeletion
of several messages in a single command.

   You can usually undo a ‘d’ with a ‘u’ because the ‘u’ moves back to
and undeletes the message that the ‘d’ deleted.  But this does not work
when the ‘d’ skips a few already-deleted messages that follow the
message being deleted; then the ‘u’ command undeletes the last of the
messages that were skipped.  There is no clean way to avoid this
problem.  However, by repeating the ‘u’ command, you can eventually get
back to the message that you intend to undelete.  You can also select a
particular deleted message with the ‘M-p’ command, then type ‘u’ to
undelete it.

   A deleted message has the ‘deleted’ attribute, and as a result
‘deleted’ appears in the mode line when the current message is deleted.
In fact, deleting or undeleting a message is nothing more than adding or
removing this attribute.  *Note Rmail Attributes::.


File: emacs.info,  Node: Rmail Inbox,  Next: Rmail Files,  Prev: Rmail Deletion,  Up: Rmail

34.5 Rmail Files and Inboxes
============================

When you receive mail locally, the operating system places incoming mail
for you in a file that we call your “inbox”.  When you start up Rmail,
it runs a C program called ‘movemail’ to copy the new messages from your
inbox into your primary Rmail file, which also contains other messages
saved from previous Rmail sessions.  It is in this file that you
actually read the mail with Rmail.  This operation is called “getting
new mail”.  You can get new mail at any time in Rmail by typing ‘g’.

   The variable ‘rmail-primary-inbox-list’ contains a list of the files
that are inboxes for your primary Rmail file.  If you don’t set this
variable explicitly, Rmail uses the ‘MAIL’ environment variable, or, as
a last resort, a default inbox based on ‘rmail-spool-directory’.  The
default inbox file depends on your operating system; often it is
‘/var/mail/USERNAME’, ‘/var/spool/mail/USERNAME’, or
‘/usr/spool/mail/USERNAME’.

   You can specify the inbox file(s) for any Rmail file for the current
session with the command ‘set-rmail-inbox-list’; see *note Rmail
Files::.

   There are two reasons for having separate Rmail files and inboxes.

  1. The inbox file format varies between operating systems and
     according to the other mail software in use.  Only one part of
     Rmail needs to know about the alternatives, and it need only
     understand how to convert all of them to Rmail’s own format.

  2. It is very cumbersome to access an inbox file without danger of
     losing mail, because it is necessary to interlock with mail
     delivery.  Moreover, different operating systems use different
     interlocking techniques.  The strategy of moving mail out of the
     inbox once and for all into a separate Rmail file avoids the need
     for interlocking in all the rest of Rmail, since only Rmail
     operates on the Rmail file.

   Rmail uses the standard ‘mbox’ format, introduced by Unix and GNU
systems for inbox files, as its internal format of Rmail files.  (In
fact, there are a few slightly different mbox formats.  The differences
are not very important, but you can set the variable ‘rmail-mbox-format’
to tell Rmail which form your system uses.  See that variable’s
documentation for more details.)

   When getting new mail, Rmail first copies the new mail from the inbox
file to the Rmail file; then it saves the Rmail file; then it clears out
the inbox file.  This way, a system crash may cause duplication of mail
between the inbox and the Rmail file, but cannot lose mail.  If
‘rmail-preserve-inbox’ is non-‘nil’, then Rmail does not clear out the
inbox file when it gets new mail.  You may wish to set this, for
example, on a portable computer you use to check your mail via POP while
traveling, so that your mail will remain on the server and you can save
it later on your main desktop workstation.

   In some cases, Rmail copies the new mail from the inbox file
indirectly.  First it runs the ‘movemail’ program to move the mail from
the inbox to an intermediate file called ‘.newmail-INBOXNAME’, in the
same directory as the Rmail file.  Then Rmail merges the new mail from
that file, saves the Rmail file, and only then deletes the intermediate
file.  If there is a crash at the wrong time, this file continues to
exist, and Rmail will use it again the next time it gets new mail from
that inbox.

   If Rmail is unable to convert the data in ‘.newmail-INBOXNAME’ into
mbox format, it renames the file to ‘RMAILOSE.N’ (N is an integer chosen
to make the name unique) so that Rmail will not have trouble with the
data again.  You should look at the file, find whatever message confuses
Rmail (probably one that includes the control-underscore character,
octal code 037), and delete it.  Then you can use ‘1 g’ to get new mail
from the corrected file.


File: emacs.info,  Node: Rmail Files,  Next: Rmail Output,  Prev: Rmail Inbox,  Up: Rmail

34.6 Multiple Rmail Files
=========================

Rmail operates by default on your “primary Rmail file”, which is named
‘~/RMAIL’ and receives your incoming mail from your system inbox file.
But you can also have other Rmail files and edit them with Rmail.  These
files can receive mail through their own inboxes, or you can move
messages into them with explicit Rmail commands (*note Rmail Output::).

‘i FILE <RET>’
     Read FILE into Emacs and run Rmail on it (‘rmail-input’).
‘g’
     Merge new mail from current Rmail file’s inboxes
     (‘rmail-get-new-mail’).
‘C-u g FILE <RET>’
     Merge new mail from inbox file FILE.

   To run Rmail on a file other than your primary Rmail file, you can
use the ‘i’ (‘rmail-input’) command in Rmail.  This visits the file in
Rmail mode.  You can use ‘M-x rmail-input’ even when not in Rmail, but
it is easier to type ‘C-u M-x rmail’, which does the same thing.

   The file you read with ‘i’ should normally be a valid mbox file.  If
it is not, Rmail tries to convert its text to mbox format, and visits
the converted text in the buffer.  If you save the buffer, that converts
the file.

   If you specify a file name that doesn’t exist, ‘i’ initializes a new
buffer for creating a new Rmail file.

   You can also select an Rmail file from a menu.  In the Classify menu,
choose the Input Rmail File item; then choose the Rmail file you want.
The variables ‘rmail-secondary-file-directory’ and
‘rmail-secondary-file-regexp’ specify which files to offer in the menu:
the first variable says which directory to find them in; the second says
which files in that directory to offer (all those that match the regular
expression).  If no files match, you cannot select this menu item.
These variables also apply to choosing a file for output (*note Rmail
Output::).

   The inbox files to use are specified by the variable
‘rmail-inbox-list’, which is buffer-local in Rmail mode.  As a special
exception, if you have specified no inbox files for your primary Rmail
file, it uses the ‘MAIL’ environment variable, or your standard system
inbox.

   The ‘g’ command (‘rmail-get-new-mail’) merges mail into the current
Rmail file from its inboxes.  If the Rmail file has no inboxes, ‘g’ does
nothing.  The command ‘M-x rmail’ also merges new mail into your primary
Rmail file.

   To merge mail from a file that is not the usual inbox, give the ‘g’
key a numeric argument, as in ‘C-u g’.  Then it reads a file name and
merges mail from that file.  The inbox file is not deleted or changed in
any way when ‘g’ with an argument is used.  This is, therefore, a
general way of merging one file of messages into another.


File: emacs.info,  Node: Rmail Output,  Next: Rmail Labels,  Prev: Rmail Files,  Up: Rmail

34.7 Copying Messages Out to Files
==================================

These commands copy messages from an Rmail file into another file.

‘o FILE <RET>’
     Append a full copy of the current message to the file FILE
     (‘rmail-output’).

‘C-o FILE <RET>’
     Append a copy of the current message, as displayed, to the file
     FILE (‘rmail-output-as-seen’).

‘w FILE <RET>’
     Output just the message body to the file FILE, taking the default
     file name from the message ‘Subject’ header.

   The commands ‘o’ and ‘C-o’ copy the current message into a specified
file, adding it at the end.  A positive prefix argument serves as a
repeat count: that many consecutive messages will be copied to the
specified file, starting with the current one and ignoring deleted
messages.

   The two commands differ mainly in how much to copy: ‘o’ copies the
full message headers, even if they are not all visible, while ‘C-o’
copies exactly the headers currently displayed and no more.  *Note Rmail
Display::.  In addition, ‘o’ converts the message to Babyl format (used
by Rmail in Emacs version 22 and before) if the file is in Babyl format;
‘C-o’ cannot output to Babyl files at all.

   If the output file is currently visited in an Emacs buffer, the
output commands append the message to that buffer.  It is up to you to
save the buffer eventually in its file.

   Sometimes you may receive a message whose body holds the contents of
a file.  You can save the body to a file (excluding the message header)
with the ‘w’ command (‘rmail-output-body-to-file’).  Often these
messages contain the intended file name in the ‘Subject’ field, so the
‘w’ command uses the ‘Subject’ field as the default for the output file
name (after replacing some characters that cannot be portably used in
file names).  However, the file name is read using the minibuffer, so
you can specify a different name if you wish.

   You can also output a message to an Rmail file chosen with a menu.
In the Classify menu, choose the Output Rmail File menu item; then
choose the Rmail file you want.  This outputs the current message to
that file, like the ‘o’ command.  The variables
‘rmail-secondary-file-directory’ and ‘rmail-secondary-file-regexp’
specify which files to offer in the menu: the first variable says which
directory to find them in; the second says which files in that directory
to offer (all those that match the regular expression).  If no files
match, you cannot select this menu item.

   Copying a message with ‘o’ or ‘C-o’ gives the original copy of the
message the ‘filed’ attribute, so that ‘filed’ appears in the mode line
when such a message is current.

   If you like to keep just a single copy of every mail message, set the
variable ‘rmail-delete-after-output’ to ‘t’; then the ‘o’, ‘C-o’ and ‘w’
commands delete the original message after copying it.  (You can
undelete it afterward if you wish, see *note Rmail Deletion::.)

   By default, ‘o’ will leave the deleted status of a message it outputs
as it was on the original message; thus, a message deleted before it was
output will appear as deleted in the output file.  Setting the variable
‘rmail-output-reset-deleted-flag’ to a non-‘nil’ value countermands
that: the copy of the message will have its deleted status reset, so the
message will appear as undeleted in the output file.  In addition, when
this variable is non-‘nil’, specifying a positive argument to ‘o’ will
not ignore deleted messages when looking for consecutive messages to
output.

   The variable ‘rmail-output-file-alist’ lets you specify intelligent
defaults for the output file, based on the contents of the current
message.  The value should be a list whose elements have this form:

     (REGEXP . NAME-EXP)

If there’s a match for REGEXP in the current message, then the default
file name for output is NAME-EXP.  If multiple elements match the
message, the first matching element decides the default file name.  The
subexpression NAME-EXP may be a string constant giving the file name to
use, or more generally it may be any Lisp expression that yields a file
name as a string.  ‘rmail-output-file-alist’ applies to both ‘o’ and
‘C-o’.

   Rmail can automatically save messages from your primary Rmail file
(the one that ‘rmail-file-name’ specifies) to other files, based on the
value of the variable ‘rmail-automatic-folder-directives’.  This
variable is a list of elements (‘directives’) that say which messages to
save where.  Each directive is a list consisting of an output file,
followed by one or more pairs of a header name and a regular expression.
If a message has a header matching the specified regular expression,
that message is saved to the given file.  If the directive has more than
one header entry, all must match.  Rmail checks directives when it shows
a message from the file ‘rmail-file-name’, and applies the first that
matches (if any).  If the output file is ‘nil’, the message is deleted,
not saved.  For example, you can use this feature to save messages from
a particular address, or with a particular subject, to a dedicated file.


File: emacs.info,  Node: Rmail Labels,  Next: Rmail Attributes,  Prev: Rmail Output,  Up: Rmail

34.8 Labels
===========

Each message can have various “labels” assigned to it as a means of
classification.  Each label has a name; different names are different
labels.  Any given label is either present or absent on a particular
message.  A few label names have standard meanings and are given to
messages automatically by Rmail when appropriate; these special labels
are called “attributes”.  (*Note Rmail Attributes::.)  All other labels
are assigned only by users.

‘a LABEL <RET>’
     Assign the label LABEL to the current message (‘rmail-add-label’).
‘k LABEL <RET>’
     Remove the label LABEL from the current message
     (‘rmail-kill-label’).
‘C-M-n LABELS <RET>’
     Move to the next message that has one of the labels LABELS
     (‘rmail-next-labeled-message’).
‘C-M-p LABELS <RET>’
     Move to the previous message that has one of the labels LABELS
     (‘rmail-previous-labeled-message’).
‘l LABELS <RET>’
‘C-M-l LABELS <RET>’
     Make a summary of all messages containing any of the labels LABELS
     (‘rmail-summary-by-labels’).

   The ‘a’ (‘rmail-add-label’) and ‘k’ (‘rmail-kill-label’) commands
allow you to assign or remove any label on the current message.  If the
LABEL argument is empty, it means to assign or remove the label most
recently assigned or removed.

   Once you have given messages labels to classify them as you wish,
there are three ways to use the labels: in moving, in summaries, and in
sorting.

   ‘C-M-n LABELS <RET>’ (‘rmail-next-labeled-message’) moves to the next
message that has one of the labels LABELS.  The argument LABELS
specifies one or more label names, separated by commas.  ‘C-M-p’
(‘rmail-previous-labeled-message’) is similar, but moves backwards to
previous messages.  A numeric argument to either command serves as a
repeat count.

   The command ‘C-M-l LABELS <RET>’ (‘rmail-summary-by-labels’) displays
a summary containing only the messages that have at least one of a
specified set of labels.  The argument LABELS is one or more label
names, separated by commas.  *Note Rmail Summary::, for information on
summaries.

   If the LABELS argument to ‘C-M-n’, ‘C-M-p’ or ‘C-M-l’ is empty, it
means to use the last set of labels specified for any of these commands.

   *Note Rmail Sorting::, for information on sorting messages with
labels.


File: emacs.info,  Node: Rmail Attributes,  Next: Rmail Reply,  Prev: Rmail Labels,  Up: Rmail

34.9 Rmail Attributes
=====================

Some labels such as ‘deleted’ and ‘filed’ have built-in meanings, and
Rmail assigns them to messages automatically at appropriate times; these
labels are called “attributes”.  Here is a list of Rmail attributes:

‘unseen’
     Means the message has never been current.  Assigned to messages
     when they come from an inbox file, and removed when a message is
     made current.  When you start Rmail, it initially shows the first
     message that has this attribute.
‘deleted’
     Means the message is deleted.  Assigned by deletion commands and
     removed by undeletion commands (*note Rmail Deletion::).
‘filed’
     Means the message has been copied to some other file.  Assigned by
     the ‘o’ and ‘C-o’ file output commands (*note Rmail Output::).
‘answered’
     Means you have mailed an answer to the message.  Assigned by the
     ‘r’ command (‘rmail-reply’).  *Note Rmail Reply::.
‘forwarded’
     Means you have forwarded the message.  Assigned by the ‘f’ command
     (‘rmail-forward’).  *Note Rmail Reply::.
‘edited’
     Means you have edited the text of the message within Rmail.  *Note
     Rmail Editing::.
‘resent’
     Means you have resent the message.  Assigned by the command ‘M-x
     rmail-resend’.  *Note Rmail Reply::.
‘retried’
     Means you have retried a failed outgoing message.  Assigned by the
     command ‘M-x rmail-retry-failure’.  *Note Rmail Reply::.

   All other labels are assigned or removed only by users, and have no
standard meaning.


File: emacs.info,  Node: Rmail Reply,  Next: Rmail Summary,  Prev: Rmail Attributes,  Up: Rmail

34.10 Sending Replies
=====================

Rmail has several commands to send outgoing mail.  *Note Sending Mail::,
for information on using Message mode, including certain features meant
to work with Rmail.  What this section documents are the special
commands of Rmail for entering the mail buffer used to compose the
outgoing message.  Note that the usual keys for sending mail—‘C-x m’,
‘C-x 4 m’, and ‘C-x 5 m’—also work normally in Rmail mode.

‘m’
     Send a message (‘rmail-mail’).
‘c’
     Continue editing the already started outgoing message
     (‘rmail-continue’).
‘r’
     Send a reply to the current Rmail message (‘rmail-reply’).
‘f’
     Forward the current message to other users (‘rmail-forward’).
‘C-u f’
     Resend the current message to other users (‘rmail-resend’).
‘M-m’
     Try sending a bounced message a second time
     (‘rmail-retry-failure’).

   The most common reason to send a message while in Rmail is to reply
to the message you are reading.  To do this, type ‘r’ (‘rmail-reply’).
This displays a mail composition buffer in another window, much like
‘C-x 4 m’, but preinitializes the ‘Subject’, ‘To’, ‘CC’, ‘In-Reply-To’
and ‘References’ header fields based on the message you are replying to.
The ‘To’ field starts out as the address of the person who sent the
message you received, and the ‘CC’ field starts out with all the other
recipients of that message.

   You can exclude certain recipients from being included automatically
in replies, using the variable ‘mail-dont-reply-to-names’.  Its value
should be a regular expression; any recipients that match are excluded
from the ‘CC’ field.  They are also excluded from the ‘To’ field, unless
this would leave the field empty.  If this variable is ‘nil’, then the
first time you compose a reply it is initialized to a default value that
matches your own address.

   To reply only to the sender of the original message, enter the reply
command with a numeric argument: ‘C-u r’ or ‘1 r’.  This omits the ‘CC’
field completely for a particular reply.

   Once the mail composition buffer has been initialized, editing and
sending the mail goes as usual (*note Sending Mail::).  You can edit the
presupplied header fields if they are not what you want.  You can also
use commands such as ‘C-c C-y’, which yanks in the message that you are
replying to (*note Mail Commands::).  You can also switch to the Rmail
buffer, select a different message there, switch back, and yank the new
current message.

   Sometimes a message does not reach its destination.  Mailers usually
send the failed message back to you, enclosed in a “failure message”.
The Rmail command ‘M-m’ (‘rmail-retry-failure’) prepares to send the
same message a second time: it sets up a mail composition buffer with
the same text and header fields as before.  If you type ‘C-c C-c’ right
away, you send the message again exactly the same as the first time.
Alternatively, you can edit the text or headers and then send it.  The
variable ‘rmail-retry-ignored-headers’, in the same format as
‘rmail-ignored-headers’ (*note Rmail Display::), controls which headers
are stripped from the failed message when retrying it.

   Another frequent reason to send mail in Rmail is to “forward” the
current message to other users.  ‘f’ (‘rmail-forward’) makes this easy
by preinitializing the mail composition buffer with the current message
as the text, and a subject of the form ‘[FROM: SUBJECT]’, where FROM and
SUBJECT are the sender and subject of the original message.  All you
have to do is fill in the recipients and send.  When you forward a
message, recipients get a message which is from you, and which has the
original message in its contents.

   Rmail offers two formats for forwarded messages.  The default is to
use the MIME format (*note Rmail Display::).  This includes the original
message as a separate part.  You can use a simpler format if you prefer,
by setting the variable ‘rmail-enable-mime-composing’ to ‘nil’.  In this
case, Rmail just includes the original message enclosed between two
delimiter lines.  It also modifies every line that starts with a dash,
by inserting ‘- ’ at the start of the line.  When you receive a
forwarded message in this format, if it contains something besides
ordinary text—for example, program source code—you might find it useful
to undo that transformation.  You can do this by selecting the forwarded
message and typing ‘M-x unforward-rmail-message’.  This command extracts
the original forwarded message, deleting the inserted ‘- ’ strings, and
inserts it into the Rmail file as a separate message immediately
following the current one.

   “Resending” is an alternative similar to forwarding; the difference
is that resending sends a message that is from the original sender, just
as it reached you—with a few added header fields (‘Resent-From’ and
‘Resent-To’) to indicate that it came via you.  To resend a message in
Rmail, use ‘C-u f’.  (‘f’ runs ‘rmail-forward’, which invokes
‘rmail-resend’ if you provide a numeric argument.)

   Use the ‘m’ (‘rmail-mail’) command to start editing an outgoing
message that is not a reply.  It leaves the header fields empty.  Its
only difference from ‘C-x 4 m’ is that it makes the Rmail buffer
accessible for ‘C-c C-y’, just as ‘r’ does.

   The ‘c’ (‘rmail-continue’) command resumes editing the mail
composition buffer, to finish editing an outgoing message you were
already composing, or to alter a message you have sent.

   If you set the variable ‘rmail-mail-new-frame’ to a non-‘nil’ value,
then all the Rmail commands to start sending a message create a new
frame to edit it in.  This frame is deleted when you send the message.

   All the Rmail commands to send a message use the mail-composition
method that you have chosen (*note Mail Methods::).


File: emacs.info,  Node: Rmail Summary,  Next: Rmail Sorting,  Prev: Rmail Reply,  Up: Rmail

34.11 Summaries
===============

A “summary” is a buffer containing one line per message to give you an
overview of the mail in an Rmail file.  Each line shows the message
number and date, the sender, the line count, the labels, and the
subject.  Moving point in the summary buffer selects messages as you
move to their summary lines.  Almost all Rmail commands are valid in the
summary buffer also; when used there, they apply to the message
described by the current line of the summary.

   A summary buffer applies to a single Rmail file only; if you are
editing multiple Rmail files, each one can have its own summary buffer.
The summary buffer name is made by appending ‘-summary’ to the Rmail
buffer’s name.  Normally only one summary buffer is displayed at a time.

* Menu:

* Rmail Make Summary::       Making various sorts of summaries.
* Rmail Summary Edit::       Manipulating messages from the summary.


File: emacs.info,  Node: Rmail Make Summary,  Next: Rmail Summary Edit,  Up: Rmail Summary

34.11.1 Making Summaries
------------------------

Here are the commands to create a summary for the current Rmail buffer.
Once the Rmail buffer has a summary, changes in the Rmail buffer (such
as deleting or expunging messages, and getting new mail) automatically
update the summary.

‘h’
‘C-M-h’
     Summarize all messages (‘rmail-summary’).
‘l LABELS <RET>’
‘C-M-l LABELS <RET>’
     Summarize messages that have one or more of the specified labels
     (‘rmail-summary-by-labels’).
‘C-M-r RCPTS <RET>’
     Summarize messages that match the specified recipients
     (‘rmail-summary-by-recipients’).
‘C-M-t TOPIC <RET>’
     Summarize messages that have a match for the specified regexp TOPIC
     in their subjects (‘rmail-summary-by-topic’).
‘C-M-s REGEXP <RET>’
     Summarize messages whose headers match the specified regular
     expression REGEXP (‘rmail-summary-by-regexp’).
‘C-M-f SENDERS <RET>’
     Summarize messages that match the specified senders.
     (‘rmail-summary-by-senders’).

   The ‘h’ or ‘C-M-h’ (‘rmail-summary’) command fills the summary buffer
for the current Rmail buffer with a summary of all the messages in the
buffer.  It then displays and selects the summary buffer in another
window.

   ‘C-M-l LABELS <RET>’ (‘rmail-summary-by-labels’) makes a partial
summary mentioning only the messages that have one or more of the labels
LABELS.  LABELS should contain label names separated by commas.

   ‘C-M-r RCPTS <RET>’ (‘rmail-summary-by-recipients’) makes a partial
summary mentioning only the messages that have one or more recipients
matching the regular expression RCPTS.  This is matched against the
‘To’, ‘From’, and ‘CC’ headers (supply a prefix argument to exclude the
‘CC’ header).

   ‘C-M-t TOPIC <RET>’ (‘rmail-summary-by-topic’) makes a partial
summary mentioning only the messages whose subjects have a match for the
regular expression TOPIC.  With a prefix argument, the match is against
the whole message, not just the subject.

   ‘C-M-s REGEXP <RET>’ (‘rmail-summary-by-regexp’) makes a partial
summary that mentions only the messages whose headers (including the
date and the subject lines) match the regular expression REGEXP.

   ‘C-M-f SENDERS <RET>’ (‘rmail-summary-by-senders’) makes a partial
summary that mentions only the messages whose ‘From’ fields match the
regular expression SENDERS.

   Note that there is only one summary buffer for any Rmail buffer;
making any kind of summary discards any previous summary.

   The variable ‘rmail-summary-window-size’ says how many lines to use
for the summary window.  The variable ‘rmail-summary-line-count-flag’
controls whether the summary line for a message should include the line
count of the message.  Setting this option to ‘nil’ might speed up the
generation of summaries.


File: emacs.info,  Node: Rmail Summary Edit,  Prev: Rmail Make Summary,  Up: Rmail Summary

34.11.2 Editing in Summaries
----------------------------

You can use the Rmail summary buffer to do almost anything you can do in
the Rmail buffer itself.  In fact, once you have a summary buffer,
there’s no need to switch back to the Rmail buffer.

   You can select and display various messages in the Rmail buffer, from
the summary buffer, just by moving point in the summary buffer to
different lines.  It doesn’t matter what Emacs command you use to move
point; whichever line point is on at the end of the command, that
message is selected in the Rmail buffer.

   Almost all Rmail commands work in the summary buffer as well as in
the Rmail buffer.  Thus, ‘d’ in the summary buffer deletes the current
message, ‘u’ undeletes, and ‘x’ expunges.  (However, in the summary
buffer, if there are no more undeleted messages in the relevant
direction, the delete commands go to the first or last message, rather
than staying on the current message.)  ‘o’ and ‘C-o’ output the current
message to a FILE; ‘r’ starts a reply to it; etc.  You can scroll the
current message while remaining in the summary buffer using <SPC> and
<DEL>.  However, in the summary buffer scrolling past the end or the
beginning of a message with <SPC> or <DEL> goes, respectively, to the
next or previous undeleted message.  Customize the
‘rmail-summary-scroll-between-messages’ option to ‘nil’ to disable
scrolling to next/previous messages.

   ‘M-u’ (‘rmail-summary-undelete-many’) undeletes all deleted messages
in the summary.  A prefix argument means to undelete that many of the
previous deleted messages.

   The Rmail commands to move between messages also work in the summary
buffer, but with a twist: they move through the set of messages included
in the summary.  They also ensure the Rmail buffer appears on the screen
(unlike cursor motion commands, which update the contents of the Rmail
buffer but don’t display it in a window unless it already appears).
Here is a list of these commands:

‘n’
     Move to next line, skipping lines saying “deleted”, and select its
     message (‘rmail-summary-next-msg’).
‘p’
     Move to previous line, skipping lines saying “deleted”, and select
     its message (‘rmail-summary-previous-msg’).
‘M-n’
     Move to next line and select its message
     (‘rmail-summary-next-all’).
‘M-p’
     Move to previous line and select its message
     (‘rmail-summary-previous-all’).
‘>’
     Move to the last line, and select its message
     (‘rmail-summary-last-message’).
‘<’
     Move to the first line, and select its message
     (‘rmail-summary-first-message’).
‘j’
‘<RET>’
     Select the message on the current line (ensuring that the Rmail
     buffer appears on the screen; ‘rmail-summary-goto-msg’).  With
     argument N, select message number N and move to its line in the
     summary buffer; this signals an error if the message is not listed
     in the summary buffer.
‘M-s PATTERN <RET>’
     Search through messages for PATTERN starting with the current
     message; select the message found, and move point in the summary
     buffer to that message’s line (‘rmail-summary-search’).  A prefix
     argument acts as a repeat count; a negative argument means search
     backward (equivalent to ‘rmail-summary-search-backward’.)
‘C-M-n LABELS <RET>’
     Move to the next message with at least one of the specified labels
     (‘rmail-summary-next-labeled-message’).  LABELS is a
     comma-separated list of labels.  A prefix argument acts as a repeat
     count.
‘C-M-p LABELS <RET>’
     Move to the previous message with at least one of the specified
     labels (‘rmail-summary-previous-labeled-message’).
‘C-c C-n <RET>’
     Move to the next message with the same subject as the current
     message (‘rmail-summary-next-same-subject’).  A prefix argument
     acts as a repeat count.
‘C-c C-p <RET>’
     Move to the previous message with the same subject as the current
     message (‘rmail-summary-previous-same-subject’).

   Deletion, undeletion, and getting new mail, and even selection of a
different message all update the summary buffer when you do them in the
Rmail buffer.  If the variable ‘rmail-redisplay-summary’ is non-‘nil’,
these actions also bring the summary buffer back onto the screen.

   When you are finished using the summary, type ‘Q’
(‘rmail-summary-wipe’) to delete the summary buffer’s window.  You can
also exit Rmail while in the summary: ‘q’ (‘rmail-summary-quit’) deletes
the summary window, then exits from Rmail by saving the Rmail file and
switching to another buffer.  Alternatively, ‘b’ (‘rmail-summary-bury’)
simply buries the Rmail summary and buffer.


File: emacs.info,  Node: Rmail Sorting,  Next: Rmail Display,  Prev: Rmail Summary,  Up: Rmail

34.12 Sorting the Rmail File
============================

‘C-c C-s C-d’
‘M-x rmail-sort-by-date’
     Sort messages of current Rmail buffer by date.

‘C-c C-s C-s’
‘M-x rmail-sort-by-subject’
     Sort messages of current Rmail buffer by subject.

‘C-c C-s C-a’
‘M-x rmail-sort-by-author’
     Sort messages of current Rmail buffer by author’s name.

‘C-c C-s C-r’
‘M-x rmail-sort-by-recipient’
     Sort messages of current Rmail buffer by recipient’s name.

‘C-c C-s C-c’
‘M-x rmail-sort-by-correspondent’
     Sort messages of current Rmail buffer by the name of the other
     correspondent.

‘C-c C-s C-l’
‘M-x rmail-sort-by-lines’
     Sort messages of current Rmail buffer by number of lines.

‘C-c C-s C-k <RET> LABELS <RET>’
‘M-x rmail-sort-by-labels <RET> LABELS <RET>’
     Sort messages of current Rmail buffer by labels.  The argument
     LABELS should be a comma-separated list of labels.  The order of
     these labels specifies the order of messages; messages with the
     first label come first, messages with the second label come second,
     and so on.  Messages that have none of these labels come last.

   The Rmail sort commands perform a _stable sort_: if there is no
reason to prefer either one of two messages, their order remains
unchanged.  You can use this to sort by more than one criterion.  For
example, if you use ‘rmail-sort-by-date’ and then
‘rmail-sort-by-author’, messages from the same author appear in order by
date.

   With a prefix argument, all these commands reverse the order of
comparison.  This means they sort messages from newest to oldest, from
biggest to smallest, or in reverse alphabetical order.

   The same keys in the summary buffer run similar functions; for
example, ‘C-c C-s C-l’ runs ‘rmail-summary-sort-by-lines’.  These
commands always sort the whole Rmail buffer, even if the summary is only
showing a subset of messages.

   Note that you cannot undo a sort, so you may wish to save the Rmail
buffer before sorting it.


File: emacs.info,  Node: Rmail Display,  Next: Rmail Coding,  Prev: Rmail Sorting,  Up: Rmail

34.13 Display of Messages
=========================

This section describes how Rmail displays mail headers, MIME sections
and attachments, URLs, and encrypted messages.

‘t’
     Toggle display of complete header (‘rmail-toggle-header’).

   Before displaying each message for the first time, Rmail reformats
its header, hiding uninteresting header fields to reduce clutter.  The
‘t’ (‘rmail-toggle-header’) command toggles this, switching between
showing the reformatted header fields and showing the complete, original
header.  With a positive prefix argument, the command shows the
reformatted header; with a zero or negative prefix argument, it shows
the full header.  Selecting the message again also reformats it if
necessary.

   The variable ‘rmail-ignored-headers’ holds a regular expression
specifying the header fields to hide; any matching header line will be
hidden.  The variable ‘rmail-nonignored-headers’ overrides this: any
header field matching that regular expression is shown even if it
matches ‘rmail-ignored-headers’ too.  The variable
‘rmail-displayed-headers’ is an alternative to these two variables; if
non-‘nil’, this should be a regular expression specifying which headers
to display (the default is ‘nil’).

   Rmail highlights certain header fields that are especially
interesting—by default, the ‘From’ and ‘Subject’ fields.  This
highlighting uses the ‘rmail-highlight’ face.  The variable
‘rmail-highlighted-headers’ holds a regular expression specifying the
header fields to highlight; if it matches the beginning of a header
field, that whole field is highlighted.  To disable this feature, set
‘rmail-highlighted-headers’ to ‘nil’.

   If a message is in MIME (Multipurpose Internet Mail Extensions)
format and contains multiple parts (MIME entities), Rmail displays each
part with a “tagline”.  The tagline summarizes the part’s index, size,
and content type.  Depending on the content type, it may also contain
one or more buttons; these perform actions such as saving the part into
a file.

‘<RET>’
     Hide or show the MIME part at point (‘rmail-mime-toggle-hidden’).

‘<TAB>’
     Move point to the next MIME tagline button.
     (‘rmail-mime-next-item’).

‘S-<TAB>’
     Move point to the previous MIME part (‘rmail-mime-previous-item’).

‘v’
     Toggle between MIME display and raw message (‘rmail-mime’).

   Each plain-text MIME part is initially displayed immediately after
its tagline, as part of the Rmail buffer (unless the message has an HTML
part, see below), while MIME parts of other types are represented only
by their taglines, with their actual contents hidden.  In either case,
you can toggle a MIME part between its displayed and hidden states by
typing <RET> anywhere in the part—or anywhere in its tagline (except for
buttons for other actions, if there are any).  Type <RET> (or click with
the mouse) to activate a tagline button, and <TAB> to cycle point
between tagline buttons.

   The ‘v’ (‘rmail-mime’) command toggles between the default MIME
display described above, and a raw display showing the undecoded MIME
data.  With a prefix argument, this command toggles the display of only
an entity at point.

   If the message has an HTML MIME part, Rmail displays it in preference
to the plain-text part, if Emacs can render HTML(1).  To prevent that,
and have the plain-text part displayed instead, customize the variable
‘rmail-mime-prefer-html’ to a ‘nil’ value.

   To prevent Rmail from handling MIME decoded messages, change the
variable ‘rmail-enable-mime’ to ‘nil’.  When this is the case, the ‘v’
(‘rmail-mime’) command instead creates a temporary buffer to display the
current MIME message.

   If the current message is an encrypted one, use the command ‘C-c C-d’
(‘rmail-epa-decrypt’) to decrypt it, using the EasyPG library (*note
EasyPG: (epa)Top.).

   You can highlight and activate URLs in the Rmail buffer using Goto
Address mode:

     (add-hook 'rmail-show-message-hook 'goto-address-mode)

Then you can browse these URLs by clicking on them with ‘mouse-2’ (or
‘mouse-1’ quickly) or by moving to one and typing ‘C-c <RET>’.  *Note
Activating URLs: Goto Address mode.

   ---------- Footnotes ----------

   (1) This capability requires that Emacs be built with ‘libxml2’
support or that you have the Lynx browser installed.


File: emacs.info,  Node: Rmail Coding,  Next: Rmail Editing,  Prev: Rmail Display,  Up: Rmail

34.14 Rmail and Coding Systems
==============================

Rmail automatically decodes messages which contain non-ASCII characters,
just as Emacs does with files you visit and with subprocess output.
Rmail uses the standard ‘charset=CHARSET’ header in the message, if any,
to determine how the message was encoded by the sender.  It maps CHARSET
into the corresponding Emacs coding system (*note Coding Systems::), and
uses that coding system to decode message text.  If the message header
doesn’t have the ‘charset’ specification, or if CHARSET is not
recognized, Rmail chooses the coding system with the usual Emacs
heuristics and defaults (*note Recognize Coding::).

   Occasionally, a message is decoded incorrectly, either because Emacs
guessed the wrong coding system in the absence of the ‘charset’
specification, or because the specification was inaccurate.  For
example, a misconfigured mailer could send a message with a
‘charset=iso-8859-1’ header when the message is actually encoded in
‘koi8-r’.  When you see the message text garbled, or some of its
characters displayed as hex codes or empty boxes, this may have
happened.

   You can correct the problem by decoding the message again using the
right coding system, if you can figure out or guess which one is right.
To do this, invoke the ‘M-x rmail-redecode-body’ command.  It reads the
name of a coding system, and then redecodes the message using the coding
system you specified.  If you specified the right coding system, the
result should be readable.

   When you get new mail in Rmail, each message is translated
automatically from the coding system it is written in, as if it were a
separate file.  This uses the priority list of coding systems that you
have specified.  If a MIME message specifies a character set, Rmail
obeys that specification.  For reading and saving Rmail files
themselves, Emacs uses the coding system specified by the variable
‘rmail-file-coding-system’.  The default value is ‘nil’, which means
that Rmail files are not translated (they are read and written in the
Emacs internal character code).


File: emacs.info,  Node: Rmail Editing,  Next: Rmail Digest,  Prev: Rmail Coding,  Up: Rmail

34.15 Editing Within a Message
==============================

Most of the usual Emacs key bindings are available in Rmail mode, though
a few, such as ‘C-M-n’ and ‘C-M-h’, are redefined by Rmail for other
purposes.  However, the Rmail buffer is normally read only, and most of
the letters are redefined as Rmail commands.  If you want to edit the
text of a message, you must use the Rmail command ‘e’.

‘e’
     Edit the current message as ordinary text.

   The ‘e’ command (‘rmail-edit-current-message’) switches from Rmail
mode into Rmail Edit mode, another major mode which is nearly the same
as Text mode.  The mode line indicates this change.

   In Rmail Edit mode, letters insert themselves as usual and the Rmail
commands are not available.  You can edit the message body and header
fields.  When you are finished editing the message, type ‘C-c C-c’
(‘rmail-cease-edit’) to switch back to Rmail mode.  Alternatively, you
can return to Rmail mode but cancel any editing that you have done, by
typing ‘C-c C-]’ (‘rmail-abort-edit’).

   Entering Rmail Edit mode runs the hook ‘text-mode-hook’; then it runs
the hook ‘rmail-edit-mode-hook’ (*note Hooks::).  Returning to ordinary
Rmail mode adds the attribute ‘edited’ to the message, if you have made
any changes in it (*note Rmail Attributes::).


File: emacs.info,  Node: Rmail Digest,  Next: Rmail Rot13,  Prev: Rmail Editing,  Up: Rmail

34.16 Digest Messages
=====================

A “digest message” is a message which exists to contain and carry
several other messages.  Digests are used on some mailing lists; all the
messages that arrive for the list during a period of time such as one
day are put inside a single digest which is then sent to the
subscribers.  Transmitting the single digest uses less computer time
than transmitting the individual messages even though the total size is
the same, because of the per-message overhead in network mail
transmission.

   When you receive a digest message, the most convenient way to read it
is to “undigestify” it: to turn it back into many individual messages.
Then you can read and delete the individual messages as it suits you.
To do this, select the digest message and type the command ‘M-x
undigestify-rmail-message’.  This extracts the submessages as separate
Rmail messages, and inserts them following the digest.  The digest
message itself is flagged as deleted.


File: emacs.info,  Node: Rmail Rot13,  Next: Movemail,  Prev: Rmail Digest,  Up: Rmail

34.17 Reading Rot13 Messages
============================

Mailing list messages that might offend or annoy some readers are
sometimes encoded in a simple code called “rot13”—so named because it
rotates the alphabet by 13 letters.  This code is not for secrecy, as it
provides none; rather, it enables those who wish to avoid seeing the
real text of the message.  For example, a review of a film might use
rot13 to hide important plot points.

   To view a buffer that uses the rot13 code, use the command ‘M-x
rot13-other-window’.  This displays the current buffer in another window
which applies the code when displaying the text.

   If you are only interested in a region, the command ‘M-x
rot13-region’ might be preferable.  This will encrypt/decrypt the active
region in-place.  If the buffer is read-only, it will attempt to display
the plain text in the echo area.  If the text is too long for the echo
area, the command will pop up a temporary buffer with the
encrypted/decrypted text.


File: emacs.info,  Node: Movemail,  Next: Remote Mailboxes,  Prev: Rmail Rot13,  Up: Rmail

34.18 ‘movemail’ program
========================

Rmail uses the ‘movemail’ program to move mail from your inbox to your
Rmail file (*note Rmail Inbox::).  When loaded for the first time, Rmail
attempts to locate the ‘movemail’ program and determine its version.
There are two versions of the ‘movemail’ program: the GNU Mailutils
version (*note (mailutils)movemail::), and an Emacs-specific version
that is built and installed unless Emacs was configured
‘--with-mailutils’ in effect.  The two ‘movemail’ versions support the
same command line syntax and the same basic subset of options.  However,
the Mailutils version offers additional features and is more secure.

   The Emacs version of ‘movemail’ can retrieve mail from the usual Unix
mailbox formats.  *Warning*: Although it can also use the POP3 protocol,
this is not recommended because it does not support POP3 via encrypted
TLS channels.

   The Mailutils version is able to handle a wide set of mailbox
formats, such as plain Unix mailboxes, ‘maildir’ and ‘MH’ mailboxes,
etc.  It is able to access remote mailboxes using the POP3 or IMAP4
protocol, and can retrieve mail from them using a TLS encrypted channel.
It also accepts mailbox arguments in URL form.  The detailed description
of mailbox URLs can be found in *note (mailutils)URL::.  In short, a URL
is:

     PROTO://[USER[:PASSWORD]@]HOST-OR-FILE-NAME[:PORT]

where square brackets denote optional elements.

PROTO
     Specifies the “mailbox protocol”, or “format” to use.  The exact
     semantics of the rest of URL elements depends on the actual value
     of PROTO (see below).

USER
     User name to access the remote mailbox.

PASSWORD
     User password to access the remote mailbox.

HOST-OR-FILE-NAME
     Hostname of the remote server for remote mailboxes or file name of
     a local mailbox.

PORT
     Optional port number, if not the default for that protocol.

PROTO can be one of:

‘mbox’
     Usual Unix mailbox format.  In this case, USER, PASS and PORT are
     not used, and HOST-OR-FILE-NAME denotes the file name of the
     mailbox file, e.g., ‘mbox:///var/spool/mail/smith’.

‘mh’
     A local mailbox in the MH format.  USER, PASS and PORT are not
     used.  HOST-OR-FILE-NAME denotes the name of MH folder, e.g.,
     ‘mh:///Mail/inbox’.

‘maildir’
     A local mailbox in the maildir format.  USER, PASS and PORT are not
     used, and HOST-OR-FILE-NAME denotes the name of ‘maildir’ mailbox,
     e.g., ‘maildir:///mail/inbox’.

‘file’
     Any local file in mailbox format.  Its actual format is detected
     automatically by ‘movemail’.

‘pop’
‘pops’
     A remote mailbox to be accessed via POP3 protocol.  USER specifies
     the remote user name to use, PASS may be used to specify the user
     password, HOST-OR-FILE-NAME is the name or IP address of the remote
     mail server to connect to, and PORT is the port number; e.g.,
     ‘pop://smith:guessme@remote.server.net:995’.  If the server
     supports it, ‘movemail’ tries to use an encrypted connection—use
     the ‘pops’ form to require one.

‘imap’
‘imaps’
     A remote mailbox to be accessed via IMAP4 protocol.  USER specifies
     the remote user name to use, PASS may be used to specify the user
     password, HOST-OR-FILE-NAME is the name or IP address of the remote
     mail server to connect to, and PORT is the port number; e.g.,
     ‘imap://smith:guessme@remote.server.net:993’.  If the server
     supports it, ‘movemail’ tries to use an encrypted connection—use
     the ‘imaps’ form to require one.

   Alternatively, you can specify the file name of the mailbox to use.
This is equivalent to specifying the ‘file’ protocol:

     /var/spool/mail/USER ≡ file:///var/spool/mail/USER

   The variable ‘rmail-movemail-program’ controls which version of
‘movemail’ to use.  If that is a string, it specifies the absolute file
name of the ‘movemail’ executable.  If it is ‘nil’, Rmail searches for
‘movemail’ in the directories listed in ‘rmail-movemail-search-path’,
then in ‘exec-path’ (*note Shell::), then in ‘exec-directory’.


File: emacs.info,  Node: Remote Mailboxes,  Next: Other Mailbox Formats,  Prev: Movemail,  Up: Rmail

34.19 Retrieving Mail from Remote Mailboxes
===========================================

Some sites use a method called POP3 for accessing users’ inbox data
instead of storing the data in inbox files.  The Mailutils ‘movemail’ by
default supports POP3 with TLS encryption.  *Warning:* Although the
‘Emacs movemail’ supports POP3, its use for this is not recommended
since it does not support encrypted connections—the Mailutils version
does.  Both versions of ‘movemail’ work only with POP3, not with older
versions of POP.

   You can specify a POP3 inbox by using a POP3 “URL” (*note
Movemail::).  A POP3 URL is of the form ‘pop://USERNAME@HOSTNAME:PORT’,
where HOSTNAME and PORT are the host name (or IP address) and port
number of the remote mail server and USERNAME is the user name on that
server.  Additionally, you may specify the password in the mailbox URL:
‘pop://USERNAME:PASSWORD@HOSTNAME:PORT’.  In this case, PASSWORD takes
preference over the one set by ‘rmail-remote-password’ (see below).
This is especially useful if you have several remote mailboxes with
different passwords.  If using Mailutils ‘movemail’, you may wish to use
‘pops’ in place of ‘pop’.

   For backward compatibility, Rmail also supports an alternative way of
specifying remote POP3 mailboxes.  Specifying an inbox name in the form
‘po:USERNAME:HOSTNAME:PORT’ is equivalent to
‘pop://USERNAME@HOSTNAME:PORT’.  If you omit the :HOSTNAME part, the
‘MAILHOST’ environment variable specifies the machine on which to look
for the POP3 server.

   Another method for accessing remote mailboxes is IMAP.  This method
is supported only by the Mailutils ‘movemail’.  To specify an IMAP
mailbox in the inbox list, use the following mailbox URL:
‘imap://USERNAME[:PASSWORD]@HOSTNAME:PORT’.  The PASSWORD part is
optional, as described above.  You may wish to use ‘imaps’ in place of
‘imap’.

   Accessing a remote mailbox may require a password.  Rmail uses the
following algorithm to retrieve it:

  1. If a PASSWORD is present in the mailbox URL (see above), it is
     used.
  2. If the variable ‘rmail-remote-password-required’ is ‘nil’, Rmail
     assumes no password is required.
  3. If the variable ‘rmail-remote-password’ is non-‘nil’, its value is
     used.
  4. Otherwise, Rmail will ask you for the password to use.

   On some mail servers the usernames include domain information, which
can mean they contain the ‘@’ character.  The inbox specifier string
uses ‘@’ to signal the start of the mailserver name.  This creates
confusion for movemail.  If your username contains ‘@’ and you’re using
Mailutils ‘movemail’ then you can fix this: Replace ‘@’ in the user name
with its URL encoding ‘%40’.

   If you need to pass additional command-line flags to ‘movemail’, set
the variable ‘rmail-movemail-flags’ a list of the flags you wish to use.
Do not use this variable to pass the ‘-p’ flag to preserve your inbox
contents; use ‘rmail-preserve-inbox’ instead.

   The ‘movemail’ program installed at your site may support Kerberos
authentication.  If it is supported, it is used by default whenever you
attempt to retrieve POP3 mail when ‘rmail-remote-password’ and
‘rmail-remote-password-required’ are unset.

   Some POP3 servers store messages in reverse order.  If your server
does this, and you would rather read your mail in the order in which it
was received, you can tell ‘movemail’ to reverse the order of downloaded
messages by adding the ‘-r’ flag to ‘rmail-movemail-flags’.

   Mailutils ‘movemail’ supports TLS encryption.  If you wish to use it,
add the ‘--tls’ flag to ‘rmail-movemail-flags’.


File: emacs.info,  Node: Other Mailbox Formats,  Prev: Remote Mailboxes,  Up: Rmail

34.20 Retrieving Mail from Local Mailboxes in Various Formats
=============================================================

If your incoming mail is stored on a local machine in a format other
than Unix mailbox, you will need the Mailutils ‘movemail’ to retrieve
it.  *Note Movemail::, for the detailed description of ‘movemail’
versions.  For example, to access mail from an inbox in ‘maildir’ format
located in ‘/var/spool/mail/in’, you would include the following in the
Rmail inbox list:

     maildir:///var/spool/mail/in


File: emacs.info,  Node: Gnus,  Next: Host Security,  Prev: Rmail,  Up: Top

# /. 35 Email and Usenet News with Gnus
**************************************

Gnus is an Emacs package primarily designed for reading and posting
Usenet news.  It can also be used to read and respond to messages from a
number of other sources—email, remote directories, digests, and so on.
Here we introduce Gnus and describe several basic features.  For full
details, see *note Gnus: (gnus)Top.

* Menu:

* Buffers of Gnus::     The group, summary, and article buffers.
* Gnus Startup::        What you should know about starting Gnus.
* Gnus Group Buffer::   A short description of Gnus group commands.
* Gnus Summary Buffer:: A short description of Gnus summary commands.


File: emacs.info,  Node: Buffers of Gnus,  Next: Gnus Startup,  Up: Gnus

35.1 Gnus Buffers
=================

Gnus uses several buffers to display information and to receive
commands.  The three most commonly-used Gnus buffers are the “group
buffer”, the “summary buffer” and the “article buffer”.

   The “group buffer” contains a list of article sources (e.g.,
newsgroups and email inboxes), which are collectively referred to as
“groups”.  This is the first buffer Gnus displays when it starts up.  It
normally displays only the groups to which you subscribe and that
contain unread articles.  From this buffer, you can select a group to
read.

   The “summary buffer” lists the articles in a single group, showing
one article per line.  By default, it displays each article’s author,
subject, and line number, but this is customizable; *Note (gnus)Summary
Buffer Format::.  The summary buffer is created when you select a group
in the group buffer, and is killed when you exit the group.

   From the summary buffer, you can choose an article to view.  The
article is displayed in the “article buffer”.  In normal Gnus usage, you
view this buffer but do not select it—all useful Gnus commands can be
invoked from the summary buffer.  But you can select the article buffer,
and execute Gnus commands from it, if you wish.


File: emacs.info,  Node: Gnus Startup,  Next: Gnus Group Buffer,  Prev: Buffers of Gnus,  Up: Gnus

35.2 When Gnus Starts Up
========================

If your system has been set up for reading Usenet news, getting started
with Gnus is easy—just type ‘M-x gnus’.

   On starting up, Gnus reads your “news initialization file”: a file
named ‘.newsrc’ in your home directory which lists your Usenet
newsgroups and subscriptions (this file is not unique to Gnus; it is
used by many other newsreader programs).  It then tries to contact the
system’s default news server, which is typically specified by the
‘NNTPSERVER’ environment variable.

   If your system does not have a default news server, or if you wish to
use Gnus for reading email, then before invoking ‘M-x gnus’ you need to
tell Gnus where to get news and/or mail.  To do this, customize the
variables ‘gnus-select-method’ and/or ‘gnus-secondary-select-methods’.
*Note (gnus)Finding the News::.

   Once Gnus has started up, it displays the group buffer.  By default,
the group buffer shows only a small number of “subscribed groups”.
Groups with other statuses—“unsubscribed”, “killed”, or “zombie”—are
hidden.  The first time you start Gnus, any group to which you are not
subscribed is made into a killed group; any group that subsequently
appears on the news server becomes a zombie group.

   To proceed, you must select a group in the group buffer to open the
summary buffer for that group; then, select an article in the summary
buffer to view its article buffer in a separate window.  The following
sections explain how to use the group and summary buffers to do this.

   To quit Gnus, type ‘q’ in the group buffer.  This automatically
records your group statuses in the files ‘.newsrc’ and ‘.newsrc.eld’, so
that they take effect in subsequent Gnus sessions.


File: emacs.info,  Node: Gnus Group Buffer,  Next: Gnus Summary Buffer,  Prev: Gnus Startup,  Up: Gnus

35.3 Using the Gnus Group Buffer
================================

The following commands are available in the Gnus group buffer:

‘<SPC>’
     Switch to the summary buffer for the group on the current line
     (‘gnus-group-read-group’).

‘l’
‘A s’
     In the group buffer, list only the groups to which you subscribe
     and which contain unread articles (‘gnus-group-list-groups’; this
     is the default listing).

‘L’
‘A u’
     List all subscribed and unsubscribed groups, but not killed or
     zombie groups (‘gnus-group-list-all-groups’).

‘A k’
     List killed groups (‘gnus-group-list-killed’).

‘A z’
     List zombie groups (‘gnus-group-list-zombies’).

‘u’
     Toggle the subscription status of the group
     (‘gnus-group-toggle-subscription-at-point’) on the current line.
     Invoking this on a killed or zombie group turns it into an
     unsubscribed group.

‘C-k’
     Kill the group on the current line (‘gnus-group-kill-group’).
     Killed groups are not recorded in the ‘.newsrc’ file, and they are
     not shown in the ‘l’ or ‘L’ listings.

‘<DEL>’
     Move point to the previous group containing unread articles
     (‘gnus-group-prev-unread-group’).

‘n’
     Move point to the next unread group
     (‘gnus-group-next-unread-group’).

‘p’
     Move point to the previous unread group
     (‘gnus-group-prev-unread-group’).

‘q’
     Update your Gnus settings, and quit Gnus (‘gnus-group-exit’).


File: emacs.info,  Node: Gnus Summary Buffer,  Prev: Gnus Group Buffer,  Up: Gnus

35.4 Using the Gnus Summary Buffer
==================================

The following commands are available in the Gnus summary buffer:

‘<SPC>’
     If there is no article selected, select the article on the current
     line and display its article buffer.  Otherwise, try scrolling the
     selected article buffer in its window; on reaching the end of the
     buffer, select the next unread article (‘gnus-summary-next-page’).

     Thus, you can read through all articles by repeatedly typing <SPC>.

‘<DEL>’
     Scroll the text of the article backwards
     (‘gnus-summary-prev-page’).

‘n’
     Select the next unread article
     (‘gnus-summary-next-unread-article’).

‘p’
     Select the previous unread article
     (‘gnus-summary-prev-unread-article’).

‘s’
     Do an incremental search on the selected article buffer
     (‘gnus-summary-isearch-article’), as if you switched to the buffer
     and typed ‘C-s’ (*note Incremental Search::).

‘M-s M-s REGEXP <RET>’
     Search forward for articles containing a match for REGEXP
     (‘gnus-summary-search-article-forward’).

‘M-r REGEXP <RET>’
     Search back for articles containing a match for REGEXP
     (‘gnus-summary-search-article-backward’).

‘q’
     Exit the summary buffer and return to the group buffer
     (‘gnus-summary-exit’).


File: emacs.info,  Node: Host Security,  Next: Network Security,  Prev: Gnus,  Up: Top

# /. 36 Host Security
********************

Emacs runs inside an operating system such as GNU/Linux, and relies on
the operating system to check security constraints such as accesses to
files.  The default settings for Emacs are designed for typical use;
they may require some tailoring in environments where security is more
of a concern, or less of a concern, than usual.  For example, file-local
variables can be risky, and you can set the variable
‘enable-local-variables’ to ‘:safe’ or (even more conservatively) to
‘nil’; conversely, if your files can all be trusted and the default
checking for these variables is irritating, you can set
‘enable-local-variables’ to ‘:all’.  *Note Safe File Variables::.

   *Note (elisp)Security Considerations::, for more information about
security considerations when using Emacs as part of a larger
application.


File: emacs.info,  Node: Network Security,  Next: Document View,  Prev: Host Security,  Up: Top

# /. 37 Network Security
***********************

Whenever Emacs establishes any network connection, it passes the
established connection to the “Network Security Manager” (NSM).  NSM is
responsible for enforcing the network security under your control.
Currently, this works by using the Transport Layer Security (TLS)
features.

   The ‘network-security-level’ variable determines the security level
that NSM enforces.  If its value is ‘low’, no security checks are
performed.  This is not recommended, and will basically mean that your
network connections can’t be trusted.  However, the setting can be
useful in limited circumstances, as when testing network issues.

   If this variable is ‘medium’ (which is the default), a number of
checks will be performed.  If as result NSM determines that the network
connection might not be trustworthy, it will make you aware of that, and
will ask you what to do about the network connection.

   You can decide to register a permanent security exception for an
unverified connection, a temporary exception, or refuse the connection
entirely.

   In addition to the basic certificate correctness checks, several TLS
algorithm checks are available.  Some encryption technologies that were
previously thought to be secure have shown themselves to be fragile, so
Emacs (by default) warns you about some of these problems.

   The protocol network checks is controlled via the
‘network-security-protocol-checks’ variable.

   It’s an alist where the first element of each association is the name
of the check, and the second element is the security level where the
check should be used.

   An element like ‘(rc4 medium)’ will result in the function
‘nsm-protocol-check--rc4’ being called like thus:
‘(nsm-protocol-check--rc4 host port status settings)’.  The function
should return non-‘nil’ if the connection should proceed and ‘nil’
otherwise.

   Below is a list of the checks done on the default ‘medium’ level.

unable to verify a TLS certificate
     If the connection is a TLS, SSL or STARTTLS connection, NSM will
     check whether the certificate used to establish the identity of the
     server we’re connecting to can be verified.

     While an invalid certificate is often the cause for concern (there
     could be a Man-in-the-Middle hijacking your network connection and
     stealing your password), there may be valid reasons for going ahead
     with the connection anyway.  For instance, the server may be using
     a self-signed certificate, or the certificate may have expired.
     It’s up to you to determine whether it’s acceptable to continue
     with the connection.

a self-signed certificate has changed
     If you’ve previously accepted a self-signed certificate, but it has
     now changed, that could mean that the server has just changed the
     certificate, but it might also mean that the network connection has
     been hijacked.

previously encrypted connection now unencrypted
     If the connection is unencrypted, but it was encrypted in previous
     sessions, this might mean that there is a proxy between you and the
     server that strips away STARTTLS announcements, leaving the
     connection unencrypted.  This is usually very suspicious.

talking to an unencrypted service when sending a password
     When connecting to an IMAP or POP3 server, these should usually be
     encrypted, because it’s common to send passwords over these
     connections.  Similarly, if you’re sending email via SMTP that
     requires a password, you usually want that connection to be
     encrypted.  If the connection isn’t encrypted, NSM will warn you.

Diffie-Hellman low prime bits
     When doing the public key exchange, the number of prime bits should
     be high enough to ensure that the channel can’t be eavesdropped on
     by third parties.  If this number is too low, Emacs will warn you.
     (This is the ‘diffie-hellman-prime-bits’ check in
     ‘network-security-protocol-checks’).

RC4 stream cipher
     The RC4 stream cipher is believed to be of low quality and may
     allow eavesdropping by third parties.  (This is the ‘rc4’ check in
     ‘network-security-protocol-checks’).

SHA1 in the host certificate or in intermediate certificates
     It is believed that if an intermediate certificate uses the SHA1
     hashing algorithm, then third parties can issue certificates
     pretending to be that issuing instance.  These connections are
     therefore vulnerable to man-in-the-middle attacks.  (These are the
     ‘signature-sha1’ and ‘intermediate-sha1’ checks in
     ‘network-security-protocol-checks’).

SSL1, SSL2 and SSL3
     The protocols older than TLS1.0 are believed to be vulnerable to a
     variety of attacks, and you may want to avoid using these if what
     you’re doing requires higher security.  (This is the ‘ssl’ check in
     ‘network-security-protocol-checks’).

   If ‘network-security-level’ is ‘high’, the following checks will be
made, in addition to the above:

3DES cipher
     The 3DES stream cipher provides at most 112 bits of effective
     security, which is considered to be towards the low end.  (This is
     the ‘3des’ check in ‘network-security-protocol-checks’).

a validated certificate changes the public key
     Servers change their keys occasionally, and that is normally
     nothing to be concerned about.  However, if you are worried that
     your network connections are being hijacked by agencies who have
     access to pliable Certificate Authorities which issue new
     certificates for third-party services, you may want to keep track
     of these changes.

   Finally, if ‘network-security-level’ is ‘paranoid’, you will also be
notified the first time NSM sees any new certificate.  This will allow
you to inspect all the certificates from all the connections that Emacs
makes.

   The following additional variables can be used to control details of
NSM operation:

‘nsm-settings-file’
     This is the file where NSM stores details about connections.  It
     defaults to ‘~/.emacs.d/network-security.data’.

‘nsm-save-host-names’
     By default, host names will not be saved for non-‘STARTTLS’
     connections.  Instead a host/port hash is used to identify
     connections.  This means that one can’t casually read the settings
     file to see what servers the user has connected to.  If this
     variable is ‘t’, NSM will also save host names in the
     ‘nsm-settings-file’.


File: emacs.info,  Node: Document View,  Next: Shell,  Prev: Network Security,  Up: Top

# /. 38 Document Viewing
***********************

DocView mode is a major mode for viewing DVI, PostScript (PS), PDF,
OpenDocument, Microsoft Office, EPUB, CBZ, FB2, XPS and OXPS documents.
It provides features such as slicing, zooming, and searching inside
documents.  It works by converting the document to a set of images using
the ‘gs’ (GhostScript) or ‘pdfdraw’/‘mutool draw’ (MuPDF) commands and
other external tools, and then displays those converted images.

   When you visit a document file that can be displayed with DocView
mode, Emacs automatically uses that mode (1).  As an exception, when you
visit a PostScript file, Emacs switches to PS mode, a major mode for
editing PostScript files as text; however, it also enables DocView minor
mode, so you can type ‘C-c C-c’ to view the document with DocView.  In
either DocView mode or DocView minor mode, repeating ‘C-c C-c’
(‘doc-view-toggle-display’) toggles between DocView and the underlying
file contents.

   When you visit a file which would normally be handled by DocView mode
but some requirement is not met (e.g., you operate in a terminal frame
or Emacs has no PNG support), you are queried if you want to view the
document’s contents as plain text.  If you confirm, the buffer is put in
text mode and DocView minor mode is activated.  Thus, by typing ‘C-c
C-c’ you switch to the fallback mode.  With another ‘C-c C-c’ you return
to DocView mode.  The plain text contents can also be displayed from
within DocView mode by typing ‘C-c C-t’ (‘doc-view-open-text’).

   You can explicitly enable DocView mode with the command ‘M-x
doc-view-mode’.  You can toggle DocView minor mode with ‘M-x
doc-view-minor-mode’.

   When DocView mode starts, it displays a welcome screen and begins
formatting the file, page by page.  It displays the first page once that
has been formatted.

   To kill the DocView buffer, type ‘k’
(‘doc-view-kill-proc-and-buffer’).  To bury it, type ‘q’
(‘quit-window’).

* Menu:

* Navigation: DocView Navigation.  Navigating DocView buffers.
* Searching: DocView Searching.    Searching inside documents.
* Slicing: DocView Slicing.        Specifying which part of a page is displayed.
* Conversion: DocView Conversion.  Influencing and triggering conversion.

   ---------- Footnotes ----------

   (1) The needed external tools for the document type must be
available, and Emacs must be running in a graphical frame and have PNG
image support.  If these requirements is not fulfilled, Emacs falls back
to another major mode.


File: emacs.info,  Node: DocView Navigation,  Next: DocView Searching,  Up: Document View

38.1 DocView Navigation
=======================

In DocView mode, you can scroll the current page using the usual Emacs
movement keys: ‘C-p’, ‘C-n’, ‘C-b’, ‘C-f’, and the arrow keys.

   By default, the line-motion keys ‘C-p’ and ‘C-n’ stop scrolling at
the beginning and end of the current page, respectively.  However, if
you change the variable ‘doc-view-continuous’ to a non-‘nil’ value, then
‘C-p’ displays the previous page if you are already at the beginning of
the current page, and ‘C-n’ displays the next page if you are at the end
of the current page.

   You can also display the next page by typing ‘n’, <PageDown>, <next>
or ‘C-x ]’ (‘doc-view-next-page’).  To display the previous page, type
‘p’, <PageUp>, <prior> or ‘C-x [’ (‘doc-view-previous-page’).

   <SPC> (‘doc-view-scroll-up-or-next-page’) is a convenient way to
advance through the document.  It scrolls within the current page or
advances to the next.  <DEL> moves backwards in a similar way
(‘doc-view-scroll-down-or-previous-page’).

   To go to the first page, type ‘M-<’ (‘doc-view-first-page’); to go to
the last one, type ‘M->’ (‘doc-view-last-page’).  To jump to a page by
its number, type ‘M-g M-g’ or ‘M-g g’ (‘doc-view-goto-page’).

   You can enlarge or shrink the document with ‘+’ (‘doc-view-enlarge’)
and ‘-’ (‘doc-view-shrink’).  By default, these commands just rescale
the already-rendered image.  If you instead want the image to be
re-rendered at the new size, set ‘doc-view-scale-internally’ to ‘nil’.
To specify the default size for DocView, customize the variable
‘doc-view-resolution’.

   When the ‘mutool’ program is available, DocView will use it to
generate entries for an outline menu, making it accessible via the
‘imenu’ facility (*note Imenu::).  To disable this functionality even
when ‘mutool’ can be found on your system, customize the variable
‘doc-view-imenu-enabled’ to the ‘nil’ value.  You can further customize
how ‘imenu’ items are formatted and displayed using the variables
‘doc-view-imenu-format’ and ‘doc-view-flatten’.


File: emacs.info,  Node: DocView Searching,  Next: DocView Slicing,  Prev: DocView Navigation,  Up: Document View

38.2 DocView Searching
======================

In DocView mode, you can search the file’s text for a regular expression
(*note Regexps::).  The interface for searching is inspired by ‘isearch’
(*note Incremental Search::).

   To begin a search, type ‘C-s’ (‘doc-view-search’) or ‘C-r’
(‘doc-view-search-backward’).  This reads a regular expression using a
minibuffer, then echoes the number of matches found within the document.
You can move forward and back among the matches by typing ‘C-s’ and
‘C-r’.  DocView mode has no way to show the match inside the page image;
instead, it displays a tooltip (at the mouse position) listing all
matching lines in the current page.  To force display of this tooltip,
type ‘C-t’ (‘doc-view-show-tooltip’).

   To start a new search, use the search command with a prefix argument;
i.e., ‘C-u C-s’ for a forward search or ‘C-u C-r’ for a backward search.


File: emacs.info,  Node: DocView Slicing,  Next: DocView Conversion,  Prev: DocView Searching,  Up: Document View

38.3 DocView Slicing
====================

Documents often have wide margins for printing.  They are annoying when
reading the document on the screen, because they use up screen space and
can cause inconvenient scrolling.

   With DocView you can hide these margins by selecting a “slice” of
pages to display.  A slice is a rectangle within the page area; once you
specify a slice in DocView, it applies to whichever page you look at.

   To specify the slice numerically, type ‘c s’ (‘doc-view-set-slice’);
then enter the top left pixel position and the slice’s width and height.

   A more convenient graphical way to specify the slice is with ‘c m’
(‘doc-view-set-slice-using-mouse’), where you use the mouse to select
the slice.  Simply press and hold the left mouse button at the
upper-left corner of the region you want to have in the slice, then move
the mouse pointer to the lower-right corner and release the button.

   The most convenient way is to set the optimal slice by using
BoundingBox information automatically determined from the document by
typing ‘c b’ (‘doc-view-set-slice-from-bounding-box’).

   To cancel the selected slice, type ‘c r’ (‘doc-view-reset-slice’).
Then DocView shows the entire page including its entire margins.


File: emacs.info,  Node: DocView Conversion,  Prev: DocView Slicing,  Up: Document View

38.4 DocView Conversion
=======================

For efficiency, DocView caches the images produced by ‘gs’.  The name of
the directory where it caches images is given by the variable
‘doc-view-cache-directory’.  You can clear the cache directory by typing
‘M-x doc-view-clear-cache’.

   To force reconversion of the currently viewed document, type ‘r’ or
‘g’ (‘revert-buffer’).  To kill the converter process associated with
the current buffer, type ‘K’ (‘doc-view-kill-proc’).  The command ‘k’
(‘doc-view-kill-proc-and-buffer’) kills the converter process and the
DocView buffer.


File: emacs.info,  Node: Shell,  Next: Emacs Server,  Prev: Document View,  Up: Top

# /. 39 Running Shell Commands from Emacs
****************************************

Emacs has commands for passing single command lines to shell
subprocesses, and for running a shell interactively with input and
output to an Emacs buffer, and for running a shell in a terminal
emulator window.

‘M-! CMD <RET>’
     Run the shell command CMD and display the output (‘shell-command’).
‘M-| CMD <RET>’
     Run the shell command CMD with region contents as input; optionally
     replace the region with the output (‘shell-command-on-region’).
‘M-& CMD <RET>’
     Run the shell command CMD asynchronously, and display the output
     (‘async-shell-command’).
‘M-x shell’
     Run a subshell with input and output through an Emacs buffer.  You
     can then give commands interactively.
‘M-x term’
     Run a subshell with input and output through an Emacs buffer.  You
     can then give commands interactively.  Full terminal emulation is
     available.

   Whenever you specify a relative file name for an executable program
(either in the CMD argument to one of the above commands, or in other
contexts), Emacs searches for the program in the directories specified
by the variable ‘exec-path’.  The value of this variable must be a list
of directories; the default value is initialized from the environment
variable ‘PATH’ when Emacs is started (*note General Variables::).

   ‘M-x eshell’ invokes a shell implemented entirely in Emacs.  It is
documented in its own manual.  *Note Eshell: (eshell)Top.

* Menu:

* Single Shell::           How to run one shell command and return.
* Interactive Shell::      Permanent shell taking input via Emacs.
* Shell Mode::             Special Emacs commands used with permanent shell.
* Shell Prompts::          Two ways to recognize shell prompts.
* History: Shell History.  Repeating previous commands in a shell buffer.
* Directory Tracking::     Keeping track when the subshell changes directory.
* Options: Shell Options.  Options for customizing Shell mode.
* Terminal emulator::      An Emacs window as a terminal emulator.
* Term Mode::              Special Emacs commands used in Term mode.
* Remote Host::            Connecting to another computer.
* Serial Terminal::        Connecting to a serial port.


File: emacs.info,  Node: Single Shell,  Next: Interactive Shell,  Up: Shell

39.1 Single Shell Commands
==========================

‘M-!’ (‘shell-command’) reads a line of text using the minibuffer and
executes it as a shell command, in a subshell made just for that
command.  Standard input for the command comes from the null device.  If
the shell command produces any output, the output appears either in the
echo area (if it is short), or in the ‘"*Shell Command Output*"’
(‘shell-command-buffer-name’) buffer (if the output is long).  The
variables ‘resize-mini-windows’ and ‘max-mini-window-height’ (*note
Minibuffer Edit::) control when Emacs should consider the output to be
too long for the echo area.  Note that customizing
‘shell-command-dont-erase-buffer’, described below, can affect what is
displayed in the echo area.

   For instance, one way to decompress a file named ‘foo.gz’ is to type
‘M-! gunzip foo.gz <RET>’.  That shell command normally creates the file
‘foo’ and produces no terminal output.

   A numeric argument to ‘shell-command’, e.g., ‘M-1 M-!’, causes it to
insert terminal output into the current buffer instead of a separate
buffer.  By default, it puts point before the output, and sets the mark
after the output (but a non-default value of
‘shell-command-dont-erase-buffer’ can change that, see below).  For
instance, ‘M-1 M-! gunzip < foo.gz <RET>’ would insert the uncompressed
form of the file ‘foo.gz’ into the current buffer.

   Provided the specified shell command does not end with ‘&’, it runs
“synchronously”, and you must wait for it to exit before continuing to
use Emacs.  To stop waiting, type ‘C-g’ to quit; this sends a ‘SIGINT’
signal to terminate the shell command (this is the same signal that
‘C-c’ normally generates in the shell).  Emacs then waits until the
command actually terminates.  If the shell command doesn’t stop (because
it ignores the ‘SIGINT’ signal), type ‘C-g’ again; this sends the
command a ‘SIGKILL’ signal, which is impossible to ignore.

   A shell command that ends in ‘&’ is executed “asynchronously”, and
you can continue to use Emacs as it runs.  You can also type ‘M-&’
(‘async-shell-command’) to execute a shell command asynchronously; this
is exactly like calling ‘M-!’ with a trailing ‘&’, except that you do
not need the ‘&’.  The output from asynchronous shell commands, by
default, goes into the ‘"*Async Shell Command*"’ buffer
(‘shell-command-buffer-name-async’).  Emacs inserts the output into this
buffer as it comes in, whether or not the buffer is visible in a window.

   If you want to run more than one asynchronous shell command at the
same time, they could end up competing for the output buffer.  The
option ‘async-shell-command-buffer’ specifies what to do about this;
e.g., whether to rename the pre-existing output buffer, or to use a
different buffer for the new command.  Consult the variable’s
documentation for more possibilities.

   If you want the output buffer for asynchronous shell commands to be
displayed only when the command generates output, set
‘async-shell-command-display-buffer’ to ‘nil’.

   The option ‘async-shell-command-width’ defines the number of display
columns available for output of asynchronous shell commands.  A positive
integer tells the shell to use that number of columns for command
output.  The default value is ‘nil’ that means to use the same number of
columns as provided by the shell.

   To make the above commands show the current directory in their
prompts, customize the variable ‘shell-command-prompt-show-cwd’ to a
non-‘nil’ value.

   ‘M-|’ (‘shell-command-on-region’) is like ‘M-!’, but passes the
contents of the region as the standard input to the shell command,
instead of no input.  With a numeric argument, it deletes the old region
and replaces it with the output from the shell command.

   For example, you can use ‘M-|’ with the ‘gpg’ program to see what
keys are in the buffer.  If the buffer contains a GnuPG key, type ‘C-x h
M-| gpg <RET>’ to feed the entire buffer contents to ‘gpg’.  This will
output the list of keys to the buffer whose name is the value of
‘shell-command-buffer-name’.

   The above commands use the shell specified by the variable
‘shell-file-name’.  Its default value is determined by the ‘SHELL’
environment variable when Emacs is started.  If the file name is
relative, Emacs searches the directories listed in ‘exec-path’ (*note
Shell::).

   If the default directory is remote (*note Remote Files::), the
default value is ‘/bin/sh’.  This can be changed by declaring
‘shell-file-name’ connection-local (*note Connection Variables::).

   To specify a coding system for ‘M-!’ or ‘M-|’, use the command ‘C-x
<RET> c’ immediately beforehand.  *Note Communication Coding::.

   By default, error output is intermixed with the regular output in the
output buffer.  But if you change the value of the variable
‘shell-command-default-error-buffer’ to a string, error output is
inserted into a buffer of that name.

   By default, the output buffer is erased between shell commands,
except when the output goes to the current buffer.  If you change the
value of the option ‘shell-command-dont-erase-buffer’ to ‘erase’, then
the output buffer is always erased.  Other non-‘nil’ values prevent
erasing of the output buffer, and—if the output buffer is not the
current buffer—also control where to put point after inserting the
output of the shell command:

‘beg-last-out’
     Puts point at the beginning of the last shell-command output.
‘end-last-out’
     Puts point at the end of the last shell-command output, i.e. at the
     end of the output buffer.
‘save-point’
     Restores the position of point as it was before inserting the
     shell-command output.

   Note that if this option is non-‘nil’, the output shown in the echo
area could be from more than just the last command, since the echo area
just displays a portion of the output buffer.

   In case the output buffer is not the current buffer, shell command
output is appended at the end of this buffer.


File: emacs.info,  Node: Interactive Shell,  Next: Shell Mode,  Prev: Single Shell,  Up: Shell

39.2 Interactive Subshell
=========================

To run a subshell interactively, type ‘M-x shell’.  This creates (or
reuses) a buffer named ‘*shell*’, and runs a shell subprocess with input
coming from and output going to that buffer.  That is to say, any
terminal output from the subshell goes into the buffer, advancing point,
and any terminal input for the subshell comes from text in the buffer.
To give input to the subshell, go to the end of the buffer and type the
input, terminated by <RET>.

   By default, when the subshell is invoked interactively, the ‘*shell*’
buffer is displayed in a new window, unless the current window already
shows the ‘*shell*’ buffer.  This behavior can be customized via
‘display-buffer-alist’ (*note Window Choice::).

   While the subshell is waiting or running a command, you can switch
windows or buffers and perform other editing in Emacs.  Emacs inserts
the output from the subshell into the Shell buffer whenever it has time
to process it (e.g., while waiting for keyboard input).

   In the Shell buffer, prompts are displayed with the face
‘comint-highlight-prompt’, and submitted input lines are displayed with
the face ‘comint-highlight-input’.  This makes it easier to distinguish
input lines from the shell output.  *Note Faces::.

   To make multiple subshells, invoke ‘M-x shell’ with a prefix argument
(e.g., ‘C-u M-x shell’).  Then the command will read a buffer name, and
create (or reuse) a subshell in that buffer.  You can also rename the
‘*shell*’ buffer using ‘M-x rename-uniquely’, then create a new
‘*shell*’ buffer using plain ‘M-x shell’.  Subshells in different
buffers run independently and in parallel.

   Emacs attempts to keep track of what the current directory is by
looking at the commands you enter, looking for ‘cd’ commands and the
like.  This is an error-prone solution, since there are many ways to
change the current directory, so Emacs also looks for special OSC
(Operating System Commands) escape codes that are designed to convey
this information in a more reliable fashion.  You should arrange for
your shell to print the appropriate escape sequence at each prompt, for
instance with the following command:

     printf "\e]7;file://%s%s\e\\" "$HOSTNAME" "$PWD"

   To specify the shell file name used by ‘M-x shell’, customize the
variable ‘explicit-shell-file-name’.  If this is ‘nil’ (the default),
Emacs uses the environment variable ‘ESHELL’ if it exists.  Otherwise,
it usually uses the variable ‘shell-file-name’ (*note Single Shell::);
but if the default directory is remote (*note Remote Files::), it
prompts you for the shell file name.  *Note Minibuffer File::, for hints
how to type remote file names effectively.

   Emacs sends the new shell the contents of the file
‘~/.emacs_SHELLNAME’ as input, if it exists, where SHELLNAME is the name
of the file that the shell was loaded from.  For example, if you use
bash, the file sent to it is ‘~/.emacs_bash’.  If this file is not
found, Emacs tries with ‘~/.emacs.d/init_SHELLNAME.sh’.

   To specify a coding system for the shell, you can use the command
‘C-x <RET> c’ immediately before ‘M-x shell’.  You can also change the
coding system for a running subshell by typing ‘C-x <RET> p’ in the
shell buffer.  *Note Communication Coding::.

   Emacs sets the environment variable ‘INSIDE_EMACS’ in the subshell to
‘VERSION,comint’, where VERSION is the Emacs version (e.g., ‘28.1’).
Programs can check this variable to determine whether they are running
inside an Emacs subshell.


File: emacs.info,  Node: Shell Mode,  Next: Shell Prompts,  Prev: Interactive Shell,  Up: Shell

39.3 Shell Mode
===============

The major mode for Shell buffers is Shell mode.  Many of its special
commands are bound to the ‘C-c’ prefix, and resemble the usual editing
and job control characters present in ordinary shells, except that you
must type ‘C-c’ first.  Here is a list of Shell mode commands:

‘<RET>’
     Send the current line as input to the subshell
     (‘comint-send-input’).  Any shell prompt at the beginning of the
     line is omitted (*note Shell Prompts::).  If point is at the end of
     buffer, this is like submitting the command line in an ordinary
     interactive shell.  However, you can also invoke <RET> elsewhere in
     the shell buffer to submit the current line as input.

‘<TAB>’
     Complete the command name or file name before point in the shell
     buffer (‘completion-at-point’).  This uses the usual Emacs
     completion rules (*note Completion::), with the completion
     alternatives being file names, environment variable names, the
     shell command history, and history references (*note History
     References::).  For options controlling the completion, *note Shell
     Options::.

‘M-?’
     Display temporarily a list of the possible completions of the file
     name before point (‘comint-dynamic-list-filename-completions’).

‘C-d’
     Either delete a character or send EOF
     (‘comint-delchar-or-maybe-eof’).  Typed at the end of the shell
     buffer, this sends EOF to the subshell.  Typed at any other
     position in the buffer, this deletes a character as usual.

‘C-c C-a’
     Move to the beginning of the line, but after the prompt if any
     (‘comint-bol-or-process-mark’).  If you repeat this command twice
     in a row, the second time it moves back to the process mark, which
     is the beginning of the input that you have not yet sent to the
     subshell.  (Normally that is the same place—the end of the prompt
     on this line—but after ‘C-c <SPC>’ the process mark may be in a
     previous line.)

‘C-c <SPC>’
     Accumulate multiple lines of input, then send them together
     (‘comint-accumulate’).  This command inserts a newline before
     point, but does not send the preceding text as input to the
     subshell—at least, not yet.  Both lines, the one before this
     newline and the one after, will be sent together (along with the
     newline that separates them), when you type <RET>.

‘C-c C-u’
     Kill all text pending at end of buffer to be sent as input
     (‘comint-kill-input’).  If point is not at end of buffer, this only
     kills the part of this text that precedes point.

‘C-c C-w’
     Kill a word before point (‘backward-kill-word’).

‘C-c C-c’
     Interrupt the shell or its current subjob if any
     (‘comint-interrupt-subjob’).  This command also kills any shell
     input pending in the shell buffer and not yet sent.

‘C-c C-z’
     Stop the shell or its current subjob if any (‘comint-stop-subjob’).
     This command also kills any shell input pending in the shell buffer
     and not yet sent.

‘C-c C-\’
     Send quit signal to the shell or its current subjob if any
     (‘comint-quit-subjob’).  This command also kills any shell input
     pending in the shell buffer and not yet sent.

‘C-c C-o’
     Delete the last batch of output from a shell command
     (‘comint-delete-output’).  This is useful if a shell command spews
     out lots of output that just gets in the way.  With a prefix
     argument, this command saves the deleted text in the ‘kill-ring’
     (*note Kill Ring::), so that you could later yank it (*note
     Yanking::) elsewhere.

‘C-c C-s’
     Write the last batch of output from a shell command to a file
     (‘comint-write-output’).  With a prefix argument, the file is
     appended to instead.  Any prompt at the end of the output is not
     written.

‘C-c C-r’
‘C-M-l’
     Scroll to display the beginning of the last batch of output at the
     top of the window; also move the cursor there
     (‘comint-show-output’).

‘C-c C-e’
     Scroll to put the last line of the buffer at the bottom of the
     window (‘comint-show-maximum-output’).

‘C-c C-f’
     Move forward across one shell command, but not beyond the current
     line (‘shell-forward-command’).  The variable
     ‘shell-command-regexp’ specifies how to recognize the end of a
     command.

‘C-c C-b’
     Move backward across one shell command, but not beyond the current
     line (‘shell-backward-command’).

‘M-x dirs’
     Ask the shell for its working directory, and update the Shell
     buffer’s default directory.  *Note Directory Tracking::.

‘M-x comint-send-invisible <RET> TEXT <RET>’
     Send TEXT as input to the shell, after reading it without echoing.
     This is useful when a shell command runs a program that asks for a
     password.

     Please note that Emacs will not echo passwords by default.  If you
     really want them to be echoed, evaluate (*note Lisp Eval::) the
     following Lisp expression:

          (remove-hook 'comint-output-filter-functions
                       'comint-watch-for-password-prompt)

‘M-x comint-continue-subjob’
     Continue the shell process.  This is useful if you accidentally
     suspend the shell process.(1)

‘M-x comint-strip-ctrl-m’
     Discard all control-M characters from the current group of shell
     output.  The most convenient way to use this command is to make it
     run automatically when you get output from the subshell.  To do
     that, evaluate this Lisp expression:

          (add-hook 'comint-output-filter-functions
                    'comint-strip-ctrl-m)

‘M-x comint-truncate-buffer’
     This command truncates the shell buffer to a certain maximum number
     of lines, specified by the variable ‘comint-buffer-maximum-size’.
     Here’s how to do this automatically each time you get output from
     the subshell:

          (add-hook 'comint-output-filter-functions
                    'comint-truncate-buffer)

   By default, Shell mode handles common ANSI escape codes (for
instance, for changing the color of text).  Emacs also optionally
supports some extend escape codes, like some of the OSC (Operating
System Codes) if you put the following in your init file:

     (add-hook 'comint-output-filter-functions 'comint-osc-process-output)

   With this enabled, the output from, for instance, ‘ls --hyperlink’
will be made into clickable buttons in the Shell mode buffer.

   Shell mode is a derivative of Comint mode, a general-purpose mode for
communicating with interactive subprocesses.  Most of the features of
Shell mode actually come from Comint mode, as you can see from the
command names listed above.  The special features of Shell mode include
the directory tracking feature, and a few user commands.

   Other Emacs features that use variants of Comint mode include GUD
(*note Debuggers::) and ‘M-x run-lisp’ (*note External Lisp::).

   You can use ‘M-x comint-run’ to execute any program of your choice in
a subprocess using unmodified Comint mode—without the specializations of
Shell mode.  To pass arguments to the program, use ‘C-u M-x comint-run’.

   ---------- Footnotes ----------

   (1) You should not suspend the shell process.  Suspending a subjob of
the shell is a completely different matter—that is normal practice, but
you must use the shell to continue the subjob; this command won’t do it.


File: emacs.info,  Node: Shell Prompts,  Next: Shell History,  Prev: Shell Mode,  Up: Shell

39.4 Shell Prompts
==================

A prompt is text output by a program to show that it is ready to accept
new user input.  Normally, Comint mode (and thus Shell mode)
automatically figures out which part of the buffer is a prompt, based on
the output of the subprocess.  (Specifically, it assumes that any
received output line which doesn’t end with a newline is a prompt.)

   Comint mode divides the buffer into two types of “fields”: input
fields (where user input is typed) and output fields (everywhere else).
Prompts are part of the output fields.  Most Emacs motion commands do
not cross field boundaries, unless they move over multiple lines.  For
instance, when point is in the input field on a shell command line,
‘C-a’ puts point at the beginning of the input field, after the prompt.
Internally, the fields are implemented using the ‘field’ text property
(*note (elisp)Text Properties::).

   If you change the variable ‘comint-use-prompt-regexp’ to a non-‘nil’
value, then Comint mode will recognize prompts using a regular
expression (*note Regexps::).  In Shell mode, the regular expression is
specified by the variable ‘shell-prompt-pattern’.  The default value of
‘comint-use-prompt-regexp’ is ‘nil’, because this method for recognizing
prompts is unreliable, but you may want to set it to a non-‘nil’ value
in unusual circumstances.  In that case, Emacs does not divide the
Comint buffer into fields, so the general motion commands behave as they
normally do in buffers without special text properties.  However, you
can use the paragraph motion commands to conveniently navigate the
buffer (*note Paragraphs::); in Shell mode, Emacs uses
‘shell-prompt-pattern’ as paragraph boundaries.


File: emacs.info,  Node: Shell History,  Next: Directory Tracking,  Prev: Shell Prompts,  Up: Shell

39.5 Shell Command History
==========================

Shell buffers support three ways of repeating earlier commands.  You can
use keys like those used for the minibuffer history; these work much as
they do in the minibuffer, inserting text from prior commands while
point remains always at the end of the buffer.  You can move through the
buffer to previous inputs in their original place, then resubmit them or
copy them to the end.  Or you can use a ‘!’-style history reference.

* Menu:

* Ring: Shell Ring.             Fetching commands from the history list.
* Copy: Shell History Copying.  Moving to a command and then copying it.
* History References::          Expanding ‘!’-style history references.


File: emacs.info,  Node: Shell Ring,  Next: Shell History Copying,  Up: Shell History

39.5.1 Shell History Ring
-------------------------

‘M-p’
‘C-<UP>’
     Fetch the next earlier old shell command (‘comint-previous-input’).

‘M-n’
‘C-<DOWN>’
     Fetch the next later old shell command (‘comint-next-input’).

‘M-r’
     Begin an incremental regexp search of old shell commands
     (‘comint-history-isearch-backward-regexp’).

‘C-c C-x’
     Fetch the next subsequent command from the history
     (‘comint-get-next-from-history’).

‘C-c .’
     Fetch one argument from an old shell command
     (‘comint-input-previous-argument’).

‘C-c C-l’
     Display the buffer’s history of shell commands in another window
     (‘comint-dynamic-list-input-ring’).

   Shell buffers provide a history of previously entered shell commands.
To reuse shell commands from the history, use the editing commands
‘M-p’, ‘M-n’, and ‘M-r’.  These work similar to the minibuffer history
commands (*note Minibuffer History::), except that they operate within
the Shell buffer rather than the minibuffer, and ‘M-r’ in a Shell buffer
invokes incremental search through shell command history.

   ‘M-p’ fetches an earlier shell command to the end of the shell
buffer.  Successive use of ‘M-p’ fetches successively earlier shell
commands, each replacing any text that was already present as potential
shell input.  ‘M-n’ does likewise except that it finds successively more
recent shell commands from the buffer.  ‘C-<UP>’ works like ‘M-p’, and
‘C-<DOWN>’ like ‘M-n’.

   The history search command ‘M-r’ begins an incremental regular
expression search of previous shell commands.  After typing ‘M-r’, start
typing the desired string or regular expression; the last matching shell
command will be displayed in the current line.  Incremental search
commands have their usual effects—for instance, ‘C-s’ and ‘C-r’ search
forward and backward for the next match (*note Incremental Search::).
When you find the desired input, type <RET> to terminate the search.
This puts the input in the command line.  Any partial input you were
composing before navigating the history list is restored when you go to
the beginning or end of the history ring.

   Often it is useful to reexecute several successive shell commands
that were previously executed in sequence.  To do this, first find and
reexecute the first command of the sequence.  Then type ‘C-c C-x’; that
will fetch the following command—the one that follows the command you
just repeated.  Then type <RET> to reexecute this command.  You can
reexecute several successive commands by typing ‘C-c C-x <RET>’ over and
over.

   The command ‘C-c .’ (‘comint-insert-previous-argument’) copies an
individual argument from a previous command, like ‘<ESC> .’ in Bash and
‘zsh’.  The simplest use copies the last argument from the previous
shell command.  With a prefix argument N, it copies the Nth argument
instead.  Repeating ‘C-c .’ copies from an earlier shell commands,
always using the same value of N (don’t give a prefix argument when you
repeat the ‘C-c .’ command).

   If you set ‘comint-insert-previous-argument-from-end’ to a non-‘nil’
value, ‘C-c .’ will instead copy the Nth argument counting from the last
one; this emulates ‘<ESC> .’ in ‘zsh’.

   These commands get the text of previous shell commands from a special
history list, not from the shell buffer itself.  Thus, editing the shell
buffer, or even killing large parts of it, does not affect the history
that these commands access.

   Some shells store their command histories in files so that you can
refer to commands from previous shell sessions.  Emacs reads the command
history file for your chosen shell, to initialize its own command
history.  The file name is ‘~/.bash_history’ for bash, ‘~/.sh_history’
for ksh, and ‘~/.history’ for other shells.

   If you run the shell on a remote host, this setting might be
overwritten by the variable ‘tramp-histfile-override’.  It is
recommended to set this variable to ‘nil’.


File: emacs.info,  Node: Shell History Copying,  Next: History References,  Prev: Shell Ring,  Up: Shell History

39.5.2 Shell History Copying
----------------------------

‘C-c C-p’
     Move point to the previous prompt (‘comint-previous-prompt’).

‘C-c C-n’
     Move point to the following prompt (‘comint-next-prompt’).

‘C-c <RET>’
     Copy the input command at point, inserting the copy at the end of
     the buffer (‘comint-copy-old-input’).  This is useful if you move
     point back to a previous command.  After you copy the command, you
     can submit the copy as input with <RET>.  If you wish, you can edit
     the copy before resubmitting it.  If you use this command on an
     output line, it copies that line to the end of the buffer.

‘mouse-2’
     If ‘comint-use-prompt-regexp’ is ‘nil’ (the default), copy the old
     input command that you click on, inserting the copy at the end of
     the buffer (‘comint-insert-input’).  If ‘comint-use-prompt-regexp’
     is non-‘nil’, or if the click is not over old input, just yank as
     usual.

   Moving to a previous input and then copying it with ‘C-c <RET>’ or
‘mouse-2’ produces the same results—the same buffer contents—that you
would get by using ‘M-p’ enough times to fetch that previous input from
the history list.  However, ‘C-c <RET>’ copies the text from the buffer,
which can be different from what is in the history list if you edit the
input text in the buffer after it has been sent.


File: emacs.info,  Node: History References,  Prev: Shell History Copying,  Up: Shell History

39.5.3 Shell History References
-------------------------------

Various shells, including csh and bash, support “history references”
that begin with ‘!’ and ‘^’.  Shell mode recognizes these constructs,
and can perform the history substitution for you.

   If you insert a history reference and type <TAB>, this searches the
input history for a matching command, performs substitution if
necessary, and places the result in the buffer in place of the history
reference.  For example, you can fetch the most recent command beginning
with ‘mv’ with ‘! m v <TAB>’.  You can edit the command if you wish, and
then resubmit the command to the shell by typing <RET>.

   Shell mode can optionally expand history references in the buffer
when you send them to the shell.  To request this, set the variable
‘comint-input-autoexpand’ to ‘input’.  You can make <SPC> perform
history expansion by binding <SPC> to the command ‘comint-magic-space’.
*Note Rebinding::.

   Shell mode recognizes history references when they follow a prompt.
*Note Shell Prompts::, for how Shell mode recognizes prompts.


File: emacs.info,  Node: Directory Tracking,  Next: Shell Options,  Prev: Shell History,  Up: Shell

39.6 Directory Tracking
=======================

Shell mode keeps track of ‘cd’, ‘pushd’ and ‘popd’ commands given to the
subshell, in order to keep the Shell buffer’s default directory (*note
File Names::) the same as the shell’s working directory.  It recognizes
these commands by examining lines of input that you send.

   If you use aliases for these commands, you can tell Emacs to
recognize them also, by setting the variables ‘shell-pushd-regexp’,
‘shell-popd-regexp’, and ‘shell-cd-regexp’ to the appropriate regular
expressions (*note Regexps::).  For example, if ‘shell-pushd-regexp’
matches the beginning of a shell command line, that line is regarded as
a ‘pushd’ command.  These commands are recognized only at the beginning
of a shell command line.

   If Emacs gets confused about changes in the working directory of the
subshell, type ‘M-x dirs’.  This command asks the shell for its working
directory and updates the default directory accordingly.  It works for
shells that support the most common command syntax, but may not work for
unusual shells.

   You can also use Dirtrack mode, a buffer-local minor mode that
implements an alternative method of tracking the shell’s working
directory.  To use this method, your shell prompt must contain the
working directory at all times, and you must supply a regular expression
for recognizing which part of the prompt contains the working directory;
see the documentation of the variable ‘dirtrack-list’ for details.  To
use Dirtrack mode, type ‘M-x dirtrack-mode’ in the Shell buffer, or add
‘dirtrack-mode’ to ‘shell-mode-hook’ (*note Hooks::).


File: emacs.info,  Node: Shell Options,  Next: Terminal emulator,  Prev: Directory Tracking,  Up: Shell

39.7 Shell Mode Options
=======================

If the variable ‘comint-scroll-to-bottom-on-input’ is non-‘nil’,
insertion and yank commands scroll the selected window to the bottom
before inserting.  The default is ‘nil’.

   If ‘comint-scroll-show-maximum-output’ is non-‘nil’, then arrival of
output when point is at the end tries to scroll the last line of text to
the bottom line of the window, showing as much useful text as possible.
(This mimics the scrolling behavior of most terminals.)  The default is
‘t’.

   By setting ‘comint-move-point-for-output’, you can opt for having
point jump to the end of the buffer whenever output arrives—no matter
where in the buffer point was before.  If the value is ‘this’, point
jumps in the selected window.  If the value is ‘all’, point jumps in
each window that shows the Comint buffer.  If the value is ‘other’,
point jumps in all nonselected windows that show the current buffer.
The default value is ‘nil’, which means point does not jump to the end.

   If you set ‘comint-prompt-read-only’, the prompts in the Comint
buffer are read-only.

   The variable ‘comint-input-ignoredups’ controls whether successive
identical inputs are stored in the input history.  A non-‘nil’ value
means to omit an input that is the same as the previous input.  The
default is ‘nil’, which means to store each input even if it is equal to
the previous input.

   Three variables customize file name completion.  The variable
‘comint-completion-addsuffix’ controls whether completion inserts a
space or a slash to indicate a fully completed file or directory name
(non-‘nil’ means do insert a space or slash).
‘comint-completion-recexact’, if non-‘nil’, directs <TAB> to choose the
shortest possible completion if the usual Emacs completion algorithm
cannot add even a single character.  ‘comint-completion-autolist’, if
non-‘nil’, says to list all the possible completions whenever completion
is not exact.

   Command completion normally considers only executable files.  If you
set ‘shell-completion-execonly’ to ‘nil’, it considers nonexecutable
files as well.

   The variable ‘shell-completion-fignore’ specifies a list of file name
extensions to ignore in Shell mode completion.  The default setting is
‘nil’, but some users prefer ‘("~" "#" "%")’ to ignore file names ending
in ‘~’, ‘#’ or ‘%’.  Other related Comint modes use the variable
‘comint-completion-fignore’ instead.

   Some implementation details of the shell command completion may also
be found in the lisp documentation of the
‘shell-dynamic-complete-command’ function.

   You can configure the behavior of ‘pushd’.  Variables control whether
‘pushd’ behaves like ‘cd’ if no argument is given
(‘shell-pushd-tohome’), pop rather than rotate with a numeric argument
(‘shell-pushd-dextract’), and only add directories to the directory
stack if they are not already on it (‘shell-pushd-dunique’).  The values
you choose should match the underlying shell, of course.

   Comint mode sets the ‘TERM’ environment variable to a safe default
value, but this value disables some useful features.  For example, color
is disabled in applications that use ‘TERM’ to determine if color is
supported.  Therefore, Emacs provides an option
‘comint-terminfo-terminal’ to let you choose a terminal with more
advanced features, as defined in your system’s terminfo database.  Emacs
will use this option as the value for ‘TERM’ so long as
‘system-uses-terminfo’ is non-‘nil’.

   Both ‘comint-terminfo-terminal’ and ‘system-uses-terminfo’ can be
declared as connection-local variables to adjust these options to match
what a remote system expects (*note Connection Variables::).


File: emacs.info,  Node: Terminal emulator,  Next: Term Mode,  Prev: Shell Options,  Up: Shell

39.8 Emacs Terminal Emulator
============================

To run a subshell in a text terminal emulator, use ‘M-x term’.  This
creates (or reuses) a buffer named ‘*terminal*’, and runs a subshell
with input coming from your keyboard, and output going to that buffer.

   The terminal emulator uses Term mode, which has two input modes.  In
“line mode”, Term basically acts like Shell mode (*note Shell Mode::).
In “char mode”, each character is sent directly to the subshell, as
terminal input; the sole exception is the terminal escape character,
which by default is ‘C-c’ (*note Term Mode::).  Any echoing of your
input is the responsibility of the subshell; any terminal output from
the subshell goes into the buffer, advancing point.

   Some programs (such as Emacs itself) need to control the appearance
of the terminal screen in detail.  They do this by emitting special
control codes.  Term mode recognizes and handles ANSI-standard
VT100-style escape sequences, which are accepted by most modern
terminals, including ‘xterm’.  (Hence, you can actually run Emacs inside
an Emacs Term window.)

   The ‘term’ face specifies the default appearance of text in the
terminal emulator (the default is the same appearance as the ‘default’
face).  When terminal control codes are used to change the appearance of
text, these are represented in the terminal emulator by the faces
‘term-color-black’, ‘term-color-red’, ‘term-color-green’,
‘term-color-yellow’ ‘term-color-blue’, ‘term-color-magenta’,
‘term-color-cyan’, ‘term-color-white’, ‘term-color-underline’, and
‘term-color-bold’.  *Note Faces::.

   You can also use Term mode to communicate with a device connected to
a serial port.  *Note Serial Terminal::.

   The file name used to load the subshell is determined the same way as
for Shell mode.  To make multiple terminal emulators, rename the buffer
‘*terminal*’ to something different using ‘M-x rename-uniquely’, just as
with Shell mode.

   Unlike Shell mode, Term mode does not track the current directory by
examining your input.  But some shells can tell Term what the current
directory is.  This is done automatically by ‘bash’ version 1.15 and
later.


File: emacs.info,  Node: Term Mode,  Next: Remote Host,  Prev: Terminal emulator,  Up: Shell

39.9 Term Mode
==============

To switch between line and char mode in Term mode, use these commands:

‘C-c C-j’
     Switch to line mode (‘term-line-mode’).  Do nothing if already in
     line mode.

‘C-c C-k’
     Switch to char mode (‘term-char-mode’).  Do nothing if already in
     char mode.

   The following commands are only available in char mode:

‘C-c C-c’
     Send a literal ‘C-c’ to the sub-shell (‘term-interrupt-subjob’).

‘C-c CHAR’
     This is equivalent to ‘C-x CHAR’ in normal Emacs.  For example,
     ‘C-c o’ invokes the global binding of ‘C-x o’, which is normally
     ‘other-window’.

   Term mode has a page-at-a-time feature.  When enabled, it makes
output pause at the end of each screenful:

‘C-c C-q’
     Toggle the page-at-a-time feature (‘term-pager-toggle’).  This
     command works in both line and char modes.  When the feature is
     enabled, the mode-line displays the word ‘page’, and each time Term
     receives more than a screenful of output, it pauses and displays
     ‘**MORE**’ in the mode-line.  Type <SPC> to display the next
     screenful of output, or ‘?’ to see your other options.  The
     interface is similar to the ‘more’ program.


File: emacs.info,  Node: Remote Host,  Next: Serial Terminal,  Prev: Term Mode,  Up: Shell

39.10 Remote Host Shell
=======================

You can login to a remote computer, using whatever commands you would
from a regular terminal (e.g., the ‘ssh’ command), from a Term window.

   A program that asks you for a password will normally suppress echoing
of the password, so the password will not show up in the buffer.  This
will happen just as if you were using a real terminal, if the buffer is
in char mode.  If it is in line mode, the password is temporarily
visible, but will be erased when you hit return.  (This happens
automatically; there is no special password processing.)

   When you log in to a different machine, you need to specify the type
of terminal you’re using, by setting the ‘TERM’ environment variable in
the environment for the remote login command.  (If you use bash, you do
that by writing the variable assignment before the remote login command,
without a separating comma.)  Terminal types ‘ansi’ or ‘vt100’ will work
on most systems.


File: emacs.info,  Node: Serial Terminal,  Prev: Remote Host,  Up: Shell

39.11 Serial Terminal
=====================

If you have a device connected to a serial port of your computer, you
can communicate with it by typing ‘M-x serial-term’.  This command asks
for a serial port name and speed, and switches to a new Term mode
buffer.  Emacs communicates with the serial device through this buffer
just like it does with a terminal in ordinary Term mode.

   The speed of the serial port is measured in bits per second.  The
most common speed is 9600 bits per second.  You can change the speed
interactively by clicking on the mode line.

   A serial port can be configured even more by clicking on ‘8N1’ in the
mode line.  By default, a serial port is configured as ‘8N1’, which
means that each byte consists of 8 data bits, No parity check bit, and 1
stopbit.

   If the speed or the configuration is wrong, you cannot communicate
with your device and will probably only see garbage output in the
window.


File: emacs.info,  Node: Emacs Server,  Next: Printing,  Prev: Shell,  Up: Top

# /. 40 Using Emacs as a Server
******************************

Various programs can invoke your choice of editor to edit a particular
piece of text.  For instance, version control programs invoke an editor
to enter version control logs (*note Version Control::), and the Unix
‘mail’ utility invokes an editor to enter a message to send.  By
convention, your choice of editor is specified by the environment
variable ‘EDITOR’.  If you set ‘EDITOR’ to ‘emacs’, Emacs would be
invoked, but in an inconvenient way—by starting a new Emacs process.
This is inconvenient because the new Emacs process doesn’t share
buffers, a command history, or other kinds of information with any
existing Emacs process.

   You can solve this problem by setting up Emacs as an “edit server”,
so that it “listens” for external edit requests and acts accordingly.
There are various ways to start an Emacs server:

   • Run the command ‘server-start’ in an existing Emacs process: either
     type ‘M-x server-start’, or put the expression ‘(server-start)’ in
     your init file (*note Init File::).  The existing Emacs process is
     the server; when you exit Emacs, the server dies with the Emacs
     process.

   • Run Emacs as a “daemon”, using one of the ‘--daemon’ command-line
     options.  *Note Initial Options::.  When Emacs is started this way,
     it calls ‘server-start’ after initialization and does not open an
     initial frame.  It then waits for edit requests from clients.

   • Run the command ‘emacsclient’ with the ‘--alternate-editor=""’
     command-line option.  This starts an Emacs daemon only if no Emacs
     daemon is already running.

   • If your operating system uses ‘systemd’ to manage startup, you can
     automatically start Emacs in daemon mode when you login using the
     supplied “systemd unit file”.  To activate this:
          systemctl --user enable emacs
     (If your Emacs was installed into a non-standard location, you may
     need to copy the ‘emacs.service’ file to a standard directory such
     as ‘~/.config/systemd/user/’.)

   • An external process can invoke the Emacs server when a connection
     event occurs upon a specified socket and pass the socket to the new
     Emacs server process.  An instance of this is the socket
     functionality of ‘systemd’: the ‘systemd’ service creates a socket
     and listens for connections on it; when ‘emacsclient’ connects to
     it for the first time, ‘systemd’ can launch the Emacs server and
     hand over the socket to it for servicing ‘emacsclient’ connections.
     A setup to use this functionality could be:

     ‘~/.config/systemd/user/emacs.socket’:
          [Socket]
          ListenStream=/path/to/.emacs.socket
          DirectoryMode=0700

          [Install]
          WantedBy=sockets.target

     (The ‘emacs.service’ file described above must also be installed.)

     The ‘ListenStream’ path will be the path that Emacs listens for
     connections from ‘emacsclient’; this is a file of your choice.

   Once an Emacs server is started, you can use a shell command called
‘emacsclient’ to connect to the Emacs process and tell it to visit a
file.  You can then set the ‘EDITOR’ environment variable to
‘emacsclient’, so that external programs will use the existing Emacs
process for editing.(1)

   You can run multiple Emacs servers on the same machine by giving each
one a unique “server name”, using the variable ‘server-name’.  For
example, ‘M-x set-variable <RET> server-name <RET> "foo" <RET>’ sets the
server name to ‘foo’.  The ‘emacsclient’ program can specify a server by
name, using the ‘-s’ or the ‘-f’ option (*note emacsclient Options::),
depending on whether or not the server uses a TCP socket (*note TCP
Emacs server::).

   If you want to run multiple Emacs daemons (*note Initial Options::),
you can give each daemon its own server name like this:

       emacs --daemon=foo

   The Emacs server can optionally be stopped automatically when certain
conditions are met.  To do this, call the function
‘server-stop-automatically’ in your init file (*note Init File::), with
one of the following arguments:

   • With the argument ‘empty’, the server is stopped when it has no
     clients, no unsaved file-visiting buffers and no running processes
     anymore.

   • With the argument ‘delete-frame’, when the last client frame is
     being closed, you are asked whether each unsaved file-visiting
     buffer must be saved and each unfinished process can be stopped,
     and if so, the server is stopped.

   • With the argument ‘kill-terminal’, when the last client frame is
     being closed with ‘C-x C-c’ (‘save-buffers-kill-terminal’), you are
     asked whether each unsaved file-visiting buffer must be saved and
     each unfinished process can be stopped, and if so, the server is
     stopped.

   If you have defined a server by a unique server name, it is possible
to connect to the server from another Emacs instance and evaluate Lisp
expressions on the server, using the ‘server-eval-at’ function.  For
instance, ‘(server-eval-at "foo" '(+ 1 2))’ evaluates the expression ‘(+
1 2)’ on the ‘foo’ server, and returns ‘3’.  (If there is no server with
that name, an error is signaled.)  Currently, this feature is mainly
useful for developers.

   If your operating system’s desktop environment is
freedesktop.org-compatible (which is true of most GNU/Linux and other
recent Unix-like GUIs), you may use the ‘Emacs (Client)’ menu entry to
connect to an Emacs server with ‘emacsclient’.  The daemon starts if not
already running.

* Menu:

* TCP Emacs server::     Listening to a TCP socket.
* Invoking emacsclient:: Connecting to the Emacs server.
* emacsclient Options::  Emacs client startup options.

   ---------- Footnotes ----------

   (1) Some programs use a different environment variable; for example,
to make TeX use ‘emacsclient’, set the ‘TEXEDIT’ environment variable to
‘emacsclient +%d %s’.


File: emacs.info,  Node: TCP Emacs server,  Next: Invoking emacsclient,  Up: Emacs Server

40.1 TCP Emacs server
=====================

An Emacs server usually listens to connections on a local Unix domain
socket.  Some operating systems, such as MS-Windows, do not support
local sockets; in that case, the server uses TCP sockets instead.  In
some cases it is useful to have the server listen on a TCP socket even
if local sockets are supported, e.g., if you need to contact the Emacs
server from a remote machine.  You can set ‘server-use-tcp’ to non-‘nil’
to have Emacs listen on a TCP socket instead of a local socket.  This is
the default if your OS does not support local sockets.

   If the Emacs server is set to use TCP, it will by default listen on a
random port on the localhost interface.  This can be changed to another
interface and/or a fixed port using the variables ‘server-host’ and
‘server-port’.

   A TCP socket is not subject to file system permissions.  To retain
some control over which users can talk to an Emacs server over TCP
sockets, the ‘emacsclient’ program must send an authorization key to the
server.  This key is normally randomly generated by the Emacs server.
This is the recommended mode of operation.

   If needed, you can set the authorization key to a static value by
setting the ‘server-auth-key’ variable.  The key must consist of 64
ASCII printable characters except for space (this means characters from
‘!’ to ‘~’, or from decimal code 33 to 126).  You can use ‘M-x
server-generate-key’ to get a random key.

   When you start a TCP Emacs server, Emacs creates a “server file”
containing the TCP information to be used by ‘emacsclient’ to connect to
the server.  The variable ‘server-auth-dir’ specifies the default
directory containing the server file; by default, this is
‘~/.emacs.d/server/’.  In the absence of a local socket with file
permissions, the permissions of this directory determine which users can
have their ‘emacsclient’ processes talk to the Emacs server.  If
‘server-name’ is an absolute file name, the server file is created where
specified by that file name.

   To tell ‘emacsclient’ to connect to the server over TCP with a
specific server file, use the ‘-f’ or ‘--server-file’ option, or set the
‘EMACS_SERVER_FILE’ environment variable (*note emacsclient Options::).
If ‘server-auth-dir’ is set to a non-standard value, or if ‘server-name’
is set to an absolute file name, ‘emacsclient’ needs an absolute file
name to the server file, as the default ‘server-auth-dir’ is hard-coded
in ‘emacsclient’ to be used as the directory for resolving relative
filenames.


File: emacs.info,  Node: Invoking emacsclient,  Next: emacsclient Options,  Prev: TCP Emacs server,  Up: Emacs Server

40.2 Invoking ‘emacsclient’
===========================

The simplest way to use the ‘emacsclient’ program is to run the shell
command ‘emacsclient FILE’, where FILE is a file name.  This connects to
an Emacs server, and tells that Emacs process to visit FILE in one of
its existing frames—either a graphical frame, or one in a text terminal
(*note Frames::).  You can then select that frame to begin editing.

   If there is no Emacs server, the ‘emacsclient’ program halts with an
error message (you can prevent this from happening by using the
‘--alternate-editor=""’ option to ‘emacsclient’, *note emacsclient
Options::).  If the Emacs process has no existing frame—which can happen
if it was started as a daemon (*note Emacs Server::)—then Emacs opens a
frame on the terminal in which you called ‘emacsclient’.

   You can also force ‘emacsclient’ to open a new frame on a graphical
display using the ‘-c’ option, or on a text terminal using the ‘-t’
option.  *Note emacsclient Options::.

   If you are running on a single text terminal, you can switch between
‘emacsclient’’s shell and the Emacs server using one of two methods: (i)
run the Emacs server and ‘emacsclient’ on different virtual terminals,
and switch to the Emacs server’s virtual terminal after calling
‘emacsclient’; or (ii) call ‘emacsclient’ from within the Emacs server
itself, using Shell mode (*note Interactive Shell::) or Term mode (*note
Term Mode::); ‘emacsclient’ blocks only the subshell under Emacs, and
you can still use Emacs to edit the file.

   When you finish editing FILE in the Emacs server, type ‘C-x #’
(‘server-edit’) in its buffer.  This saves the file and sends a message
back to the ‘emacsclient’ program, telling it to exit.  Programs that
use ‘EDITOR’ usually wait for the editor—in this case ‘emacsclient’—to
exit before doing something else.

   If you want to abandon the edit instead, use the
‘M-x server-edit-abort’ command.  This sends a message back to the
‘emacsclient’ program, telling it to exit with abnormal exit status, and
doesn’t save any buffers.

   You can also call ‘emacsclient’ with multiple file name arguments:
‘emacsclient FILE1 FILE2 ...’ tells the Emacs server to visit FILE1,
FILE2, and so forth.  Emacs selects the buffer visiting FILE1, and
buries the other buffers at the bottom of the buffer list (*note
Buffers::).  The ‘emacsclient’ program exits once all the specified
files are finished (i.e., once you have typed ‘C-x #’ in each server
buffer).

   Finishing with a server buffer also kills the buffer, unless it
already existed in the Emacs session before the server was asked to
create it.  However, if you set ‘server-kill-new-buffers’ to ‘nil’, then
a different criterion is used: finishing with a server buffer kills it
if the file name matches the regular expression
‘server-temp-file-regexp’.  This is set up to distinguish certain
temporary files.

   Each ‘C-x #’ checks for other pending external requests to edit
various files, and selects the next such file.  You can switch to a
server buffer manually if you wish; you don’t have to arrive at it with
‘C-x #’.  But ‘C-x #’ is the way to tell ‘emacsclient’ that you are
finished.

   If you set the value of the variable ‘server-window’ to a window or a
frame, ‘C-x #’ always displays the next server buffer in that window or
in that frame.

   When ‘emacsclient’ connects, the server will normally output a
message that says how to exit the client frame.  If
‘server-client-instructions’ is set to ‘nil’, this message is inhibited.


File: emacs.info,  Node: emacsclient Options,  Prev: Invoking emacsclient,  Up: Emacs Server

40.3 ‘emacsclient’ Options
==========================

You can pass some optional arguments to the ‘emacsclient’ program, such
as:

     emacsclient -c +12 FILE1 +4:3 FILE2

The ‘+LINE’ or ‘+LINE:COLUMN’ arguments specify line numbers, or line
and column numbers, for the next file argument.  These behave like the
command line arguments for Emacs itself.  *Note Action Arguments::.

   The other optional arguments recognized by ‘emacsclient’ are listed
below:

‘-a COMMAND’
‘--alternate-editor=COMMAND’
     Specify a shell command to run if ‘emacsclient’ fails to contact
     Emacs.  This is useful when running ‘emacsclient’ in a script.  The
     command may include arguments, which may be quoted "like this".
     Currently, escaping of quotes is not supported.

     As a special exception, if COMMAND is the empty string, then
     ‘emacsclient’ starts Emacs in daemon mode (as ‘emacs --daemon’) and
     then tries connecting again.

     The environment variable ‘ALTERNATE_EDITOR’ has the same effect as
     the ‘-a’ option.  If both are present, the latter takes precedence.

‘-c’
‘--create-frame’
     Create a new graphical “client frame”, instead of using an existing
     Emacs frame.  See below for the special behavior of ‘C-x C-c’ in a
     client frame.  If Emacs cannot create a new graphical frame (e.g.,
     if it cannot connect to the X server), it tries to create a text
     terminal client frame, as though you had supplied the ‘-t’ option
     instead.

     On MS-Windows, a single Emacs session cannot display frames on both
     graphical and text terminals, nor on multiple text terminals.
     Thus, if the Emacs server is running on a text terminal, the ‘-c’
     option, like the ‘-t’ option, creates a new frame in the server’s
     current text terminal.  *Note Windows Startup::.

     If you omit a filename argument while supplying the ‘-c’ option,
     the new frame displays the ‘*scratch*’ buffer by default.  You can
     customize this behavior with the variable ‘initial-buffer-choice’
     (*note Entering Emacs::).

‘-r’
‘--reuse-frame’
     Create a new graphical client frame if none exists, otherwise use
     an existing Emacs frame.

‘-F ALIST’
‘--frame-parameters=ALIST’
     Set the parameters for a newly-created graphical frame (*note Frame
     Parameters::).

‘-d DISPLAY’
‘--display=DISPLAY’
     Tell Emacs to open the given files on the X display DISPLAY
     (assuming there is more than one X display available).

‘-e’
‘--eval’
     Tell Emacs to evaluate some Emacs Lisp code, instead of visiting
     some files.  When this option is given, the arguments to
     ‘emacsclient’ are interpreted as a list of expressions to evaluate,
     _not_ as a list of files to visit.

‘-f SERVER-FILE’
‘--server-file=SERVER-FILE’
     Specify a server file (*note TCP Emacs server::) for connecting to
     an Emacs server via TCP.  Alternatively, you can set the
     ‘EMACS_SERVER_FILE’ environment variable to point to the server
     file.  (The command-line option overrides the environment
     variable.)

     An Emacs server usually uses a local socket to listen for
     connections, but also supports connections over TCP.  To connect to
     a TCP Emacs server, ‘emacsclient’ needs to read a “server file”
     containing the connection details of the Emacs server.  The name of
     this file is specified with this option, either as a file name
     relative to ‘~/.emacs.d/server’ or as an absolute file name.  *Note
     TCP Emacs server::.

‘-n’
‘--no-wait’
     Let ‘emacsclient’ exit immediately, instead of waiting until all
     server buffers are finished.  You can take as long as you like to
     edit the server buffers within Emacs, and they are _not_ killed
     when you type ‘C-x #’ in them.

‘-w’
‘--timeout=N’
     Wait for a response from Emacs for N seconds before giving up.  If
     there is no response within that time, ‘emacsclient’ will display a
     warning and exit.  The default is ‘0’, which means to wait forever.

‘--parent-id=ID’
     Open an ‘emacsclient’ frame as a client frame in the parent X
     window with id ID, via the XEmbed protocol.  Currently, this option
     is mainly useful for developers.

‘-q’
‘--quiet’
     Do not let ‘emacsclient’ display messages about waiting for Emacs
     or connecting to remote server sockets.

‘-u’
‘--suppress-output’
     Do not let ‘emacsclient’ display results returned from the server.
     Mostly useful in combination with ‘-e’ when the evaluation
     performed is for side-effect rather than result.

‘-s SERVER-NAME’
‘--socket-name=SERVER-NAME’
     Connect to the Emacs server named SERVER-NAME.  (This option is not
     supported on MS-Windows.)  The server name is given by the variable
     ‘server-name’ on the Emacs server.  If this option is omitted,
     ‘emacsclient’ connects to the default socket.  If you set
     ‘server-name’ of the Emacs server to an absolute file name, give
     the same absolute file name as SERVER-NAME to this option to
     instruct ‘emacsclient’ to connect to that server.  You need to use
     this option if you started Emacs as daemon (*note Initial
     Options::) and specified the name for the server started by the
     daemon.

     Alternatively, you can set the ‘EMACS_SOCKET_NAME’ environment
     variable to point to the server socket.  (The command-line option
     overrides the environment variable.)

‘-t’
‘--tty’
‘-nw’
     Create a new client frame on the current text terminal, instead of
     using an existing Emacs frame.  This behaves just like the ‘-c’
     option, described above, except that it creates a text terminal
     frame (*note Non-Window Terminals::).

     On MS-Windows, ‘-t’ behaves just like ‘-c’ if the Emacs server is
     using the graphical display, but if the Emacs server is running on
     a text terminal, it creates a new frame in the current text
     terminal.

‘-T TRAMP-PREFIX’
‘--tramp-prefix=TRAMP-PREFIX’
     Set the prefix to add to filenames for Emacs to locate files on
     remote machines (*note Remote Files::) using TRAMP (*note The Tramp
     Manual: (tramp)Top.).  This is mostly useful in combination with
     using the Emacs server over TCP (*note TCP Emacs server::).  By
     ssh-forwarding the listening port and making the SERVER-FILE
     available on a remote machine, programs on the remote machine can
     use ‘emacsclient’ as the value for the ‘EDITOR’ and similar
     environment variables, but instead of talking to an Emacs server on
     the remote machine, the files will be visited in the local Emacs
     session using TRAMP.

     Setting the environment variable ‘EMACSCLIENT_TRAMP’ has the same
     effect as using the ‘-T’ option.  If both are specified, the
     command-line option takes precedence.

     For example, assume two hosts, ‘local’ and ‘remote’, and that the
     local Emacs listens on tcp port 12345.  Assume further that ‘/home’
     is on a shared file system, so that the server file
     ‘~/.emacs.d/server/server’ is readable on both hosts.

          local$ ssh -R12345:localhost:12345 remote
          remote$ export EDITOR="emacsclient \
                  --server-file=server \
                  --tramp=/ssh:remote:"
          remote$ $EDITOR /tmp/foo.txt #Should open in local emacs.

   The new graphical or text terminal frames created by the ‘-c’ or ‘-t’
options are considered “client frames”.  Any new frame that you create
from a client frame is also considered a client frame.  If you type ‘C-x
C-c’ (‘save-buffers-kill-terminal’) in a client frame, that command does
not kill the Emacs session as it normally does (*note Exiting::).
Instead, Emacs deletes the client frame; furthermore, if the client
frame has an ‘emacsclient’ waiting to regain control (i.e., if you did
not supply the ‘-n’ option), Emacs deletes all other frames of the same
client, and marks the client’s server buffers as finished, as though you
had typed ‘C-x #’ in all of them.  If it so happens that there are no
remaining frames after the client frame(s) are deleted, the Emacs
session exits.

   As an exception, when Emacs is started as a daemon, all frames are
considered client frames, and ‘C-x C-c’ never kills Emacs.  To kill a
daemon session, type ‘M-x kill-emacs’.

   Note that the ‘-t’ and ‘-n’ options are contradictory: ‘-t’ says to
take control of the current text terminal to create a new client frame,
while ‘-n’ says not to take control of the text terminal.  If you supply
both options, Emacs visits the specified files(s) in an existing frame
rather than a new client frame, negating the effect of ‘-t’.


File: emacs.info,  Node: Printing,  Next: Sorting,  Prev: Emacs Server,  Up: Top

# /. 41 Printing Hard Copies
***************************

Emacs provides commands for printing hardcopies of either an entire
buffer or part of one.  You can invoke the printing commands directly,
as detailed below, or using the ‘File’ menu on the menu bar.

   Aside from the commands described in this section, you can also print
hardcopies from Dired (*note Operating on Files::) and the diary (*note
Displaying the Diary::).  You can also “print” an Emacs buffer to HTML
with the command ‘M-x htmlfontify-buffer’, which converts the current
buffer to a HTML file, replacing Emacs faces with CSS-based markup.
Furthermore, Org mode allows you to print Org files to a variety of
formats, such as PDF (*note Org Mode::).

‘M-x print-buffer’
     Print hardcopy of current buffer with page headings containing the
     file name and page number.
‘M-x lpr-buffer’
     Print hardcopy of current buffer without page headings.
‘M-x print-region’
     Like ‘print-buffer’ but print only the current region.
‘M-x lpr-region’
     Like ‘lpr-buffer’ but print only the current region.

   On most operating systems, the above hardcopy commands submit files
for printing by calling the ‘lpr’ program.  To change the printer
program, customize the variable ‘lpr-command’.  To specify extra
switches to give the printer program, customize the list variable
‘lpr-switches’.  Its value should be a list of option strings, each of
which should start with ‘-’ (e.g., the option string ‘"-w80"’ specifies
a line width of 80 columns).  The default is the empty list, ‘nil’.

   To specify the printer to use, set the variable ‘printer-name’.  The
default, ‘nil’, specifies the default printer.  If you set it to a
printer name (a string), that name is passed to ‘lpr’ with the ‘-P’
switch; if you are not using ‘lpr’, you should specify the switch with
‘lpr-printer-switch’.

   The variable ‘lpr-headers-switches’ similarly specifies the extra
switches to use to make page headers.  The variable ‘lpr-add-switches’
controls whether to supply ‘-T’ and ‘-J’ options (suitable for ‘lpr’) to
the printer program: ‘nil’ means don’t add them (this should be the
value if your printer program is not compatible with ‘lpr’).

* Menu:

* PostScript::           Printing buffers or regions as PostScript.
* PostScript Variables:: Customizing the PostScript printing commands.
* Printing Package::     An optional advanced printing interface.


File: emacs.info,  Node: PostScript,  Next: PostScript Variables,  Up: Printing

41.1 PostScript Hardcopy
========================

These commands convert buffer contents to PostScript, either printing it
or leaving it in another Emacs buffer.

‘M-x ps-print-buffer’
     Print hardcopy of the current buffer in PostScript form.
‘M-x ps-print-region’
     Print hardcopy of the current region in PostScript form.
‘M-x ps-print-buffer-with-faces’
     Print hardcopy of the current buffer in PostScript form, showing
     the faces used in the text by means of PostScript features.
‘M-x ps-print-region-with-faces’
     Print hardcopy of the current region in PostScript form, showing
     the faces used in the text.
‘M-x ps-spool-buffer’
     Generate and spool a PostScript image for the current buffer text.
‘M-x ps-spool-region’
     Generate and spool a PostScript image for the current region.
‘M-x ps-spool-buffer-with-faces’
     Generate and spool a PostScript image for the current buffer,
     showing the faces used.
‘M-x ps-spool-region-with-faces’
     Generate and spool a PostScript image for the current region,
     showing the faces used.
‘M-x ps-despool’
     Send the spooled PostScript to the printer.
‘M-x handwrite’
     Generate/print PostScript for the current buffer as if handwritten.

   The ‘ps-print-buffer’ and ‘ps-print-region’ commands print buffer
contents in PostScript form.  One command prints the entire buffer; the
other, just the region.  The commands ‘ps-print-buffer-with-faces’ and
‘ps-print-region-with-faces’ behave similarly, but use PostScript
features to show the faces (fonts and colors) of the buffer text.

   Interactively, when you use a prefix argument (‘C-u’), these commands
prompt the user for a file name, and save the PostScript image in that
file instead of sending it to the printer.

   The commands whose names have ‘spool’ instead of ‘print’, generate
the PostScript output in an Emacs buffer instead of sending it to the
printer.

   Use the command ‘ps-despool’ to send the spooled images to the
printer.  This command sends the PostScript generated by ‘-spool-’
commands (see commands above) to the printer.  With a prefix argument
(‘C-u’), it prompts for a file name, and saves the spooled PostScript
image in that file instead of sending it to the printer.

   ‘M-x handwrite’ is more frivolous.  It generates a PostScript
rendition of the current buffer as a cursive handwritten document.  It
can be customized in group ‘handwrite’.  This function only supports ISO
8859-1 characters.


File: emacs.info,  Node: PostScript Variables,  Next: Printing Package,  Prev: PostScript,  Up: Printing

41.2 Variables for PostScript Hardcopy
======================================

All the PostScript hardcopy commands use the variables ‘ps-lpr-command’
and ‘ps-lpr-switches’ to specify how to print the output.
‘ps-lpr-command’ specifies the command name to run, ‘ps-lpr-switches’
specifies command line options to use, and ‘ps-printer-name’ specifies
the printer.  If you don’t set the first two variables yourself, they
take their initial values from ‘lpr-command’ and ‘lpr-switches’.  If
‘ps-printer-name’ is ‘nil’, ‘printer-name’ is used.

   The variable ‘ps-print-header’ controls whether these commands add
header lines to each page—set it to ‘nil’ to turn headers off.

   If your printer doesn’t support colors, you should turn off color
processing by setting ‘ps-print-color-p’ to ‘nil’.  By default, if the
display supports colors, Emacs produces hardcopy output with color
information; on black-and-white printers, colors are emulated with
shades of gray.  This might produce barely-readable or even illegible
output, even if your screen colors only use shades of gray.

   Alternatively, you can set ‘ps-print-color-p’ to ‘black-white’ to
have colors display better on black/white printers.  This works by using
information in ‘ps-black-white-faces’ to express colors by customizable
list of shades of gray, augmented by bold and italic face attributes.

   By default, PostScript printing ignores the background colors of the
faces, unless the variable ‘ps-use-face-background’ is non-‘nil’.  This
is to avoid unwanted interference with the zebra stripes and background
image/text.

   The variable ‘ps-paper-type’ specifies which size of paper to format
for; legitimate values include ‘a4’, ‘a3’, ‘a4small’, ‘b4’, ‘b5’,
‘executive’, ‘ledger’, ‘legal’, ‘letter’, ‘letter-small’, ‘statement’,
‘tabloid’.  The default is ‘letter’.  You can define additional paper
sizes by changing the variable ‘ps-page-dimensions-database’.

   The variable ‘ps-landscape-mode’ specifies the orientation of
printing on the page.  The default is ‘nil’, which stands for portrait
mode.  Any non-‘nil’ value specifies landscape mode.

   The variable ‘ps-number-of-columns’ specifies the number of columns;
it takes effect in both landscape and portrait mode.  The default is 1.

   The variable ‘ps-font-family’ specifies which font family to use for
printing ordinary text.  Legitimate values include ‘Courier’,
‘Helvetica’, ‘NewCenturySchlbk’, ‘Palatino’ and ‘Times’.  The variable
‘ps-font-size’ specifies the size of the font for ordinary text and
defaults to 8.5 points.  The value of ‘ps-font-size’ can also be a cons
of 2 floats: one for landscape mode, the other for portrait mode.

   Emacs supports more scripts and characters than a typical PostScript
printer.  Thus, some of the characters in your buffer might not be
printable using the fonts built into your printer.  You can augment the
fonts supplied with the printer with those from the GNU Intlfonts
package, or you can instruct Emacs to use Intlfonts exclusively.  The
variable ‘ps-multibyte-buffer’ controls this: the default value, ‘nil’,
is appropriate for printing ASCII and Latin-1 characters; a value of
‘non-latin-printer’ is for printers which have the fonts for ASCII,
Latin-1, Japanese, and Korean characters built into them.  A value of
‘bdf-font’ arranges for the BDF fonts from the Intlfonts package to be
used for _all_ characters.  Finally, a value of ‘bdf-font-except-latin’
instructs the printer to use built-in fonts for ASCII and Latin-1
characters, and Intlfonts BDF fonts for the rest.

   To be able to use the BDF fonts, Emacs needs to know where to find
them.  The variable ‘bdf-directory-list’ holds the list of directories
where Emacs should look for the fonts; the default value includes a
single directory ‘/usr/local/share/emacs/fonts/bdf’.

   Many other customization variables for these commands are defined and
described in the Lisp files ‘ps-print.el’ and ‘ps-mule.el’.


File: emacs.info,  Node: Printing Package,  Prev: PostScript Variables,  Up: Printing

41.3 Printing Package
=====================

The basic Emacs facilities for printing hardcopy can be extended using
the Printing package.  This provides an easy-to-use interface for
choosing what to print, previewing PostScript files before printing, and
setting various printing options such as print headers, landscape or
portrait modes, duplex modes, and so forth.  On GNU/Linux or Unix
systems, the Printing package relies on the ‘gs’ and ‘gv’ utilities,
which are distributed as part of the GhostScript program.  On
MS-Windows, the ‘gstools’ port of Ghostscript can be used.

   To use the Printing package, add ‘(require 'printing)’ to your init
file (*note Init File::), followed by ‘(pr-update-menus)’.  This
function replaces the usual printing commands in the menu bar with a
‘Printing’ submenu that contains various printing options.  You can also
type ‘M-x pr-interface <RET>’; this creates a ‘*Printing Interface*’
buffer, similar to a customization buffer, where you can set the
printing options.  After selecting what and how to print, you start the
print job using the ‘Print’ button (click ‘mouse-2’ on it, or move point
over it and type <RET>).  For further information on the various
options, use the ‘Interface Help’ button.


File: emacs.info,  Node: Sorting,  Next: Picture Mode,  Prev: Printing,  Up: Top

# /. 42 Sorting Text
*******************

Emacs provides several commands for sorting text in the buffer.  All
operate on the contents of the region.  They divide the text of the
region into many “sort records”, identify a “sort key” for each record,
and then reorder the records into the order determined by the sort keys.
The records are ordered so that their keys are in alphabetical order,
or, for numeric sorting, in numeric order.  In alphabetic sorting, all
upper-case letters ‘A’ through ‘Z’ come before lower-case ‘a’, in
accordance with the ASCII character sequence (but ‘sort-fold-case’,
described below, can change that).

   The various sort commands differ in how they divide the text into
sort records and in which part of each record is used as the sort key.
Most of the commands make each line a separate sort record, but some
commands use paragraphs or pages as sort records.  Most of the sort
commands use each entire sort record as its own sort key, but some use
only a portion of the record as the sort key.

‘M-x sort-lines’
     Divide the region into lines, and sort by comparing the entire text
     of a line.  A numeric argument means sort into descending order.

‘M-x sort-paragraphs’
     Divide the region into paragraphs, and sort by comparing the entire
     text of a paragraph (except for leading blank lines).  A numeric
     argument means sort into descending order.

‘M-x sort-pages’
     Divide the region into pages, and sort by comparing the entire text
     of a page (except for leading blank lines).  A numeric argument
     means sort into descending order.

‘M-x sort-fields’
     Divide the region into lines, and sort by comparing the contents of
     one field in each line.  Fields are defined as separated by
     whitespace, so the first run of consecutive non-whitespace
     characters in a line constitutes field 1, the second such run
     constitutes field 2, etc.

     Specify which field to sort by with a numeric argument: 1 to sort
     by field 1, etc.; the default is 1.  A negative argument means
     count fields from the right instead of from the left; thus, minus 1
     means sort by the last field.  If several lines have identical
     contents in the field being sorted, they keep the same relative
     order that they had in the original buffer.

‘M-x sort-numeric-fields’
     Like ‘M-x sort-fields’ except the specified field is converted to
     an integer for each line, and the numbers are compared.  ‘10’ comes
     before ‘2’ when considered as text, but after it when considered as
     a number.  By default, numbers are interpreted according to
     ‘sort-numeric-base’, but numbers beginning with ‘0x’ or ‘0’ are
     interpreted as hexadecimal and octal, respectively.

‘M-x sort-columns’
     Like ‘M-x sort-fields’ except that the text within each line used
     for comparison comes from a fixed range of columns.  With a prefix
     argument, sort in reverse order.  See below for more details on
     this command.

‘M-x reverse-region’
     Reverse the order of the lines in the region.  This is useful for
     sorting into descending order by fields, since those sort commands
     do not have a feature for doing that.

   For example, if the buffer contains this:

     On systems where clash detection (locking of files being edited) is
     implemented, Emacs also checks the first time you modify a buffer
     whether the file has changed on disk since it was last visited or
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.

applying ‘M-x sort-lines’ to the entire buffer produces this:

     On systems where clash detection (locking of files being edited) is
     implemented, Emacs also checks the first time you modify a buffer
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.
     whether the file has changed on disk since it was last visited or

where the upper-case ‘O’ sorts before all lower-case letters.  If you
use ‘C-u 2 M-x sort-fields’ instead, you get this:

     implemented, Emacs also checks the first time you modify a buffer
     saved.  If it has, you are asked to confirm that you want to change
     the buffer.
     On systems where clash detection (locking of files being edited) is
     whether the file has changed on disk since it was last visited or

where the sort keys were ‘Emacs’, ‘If’, ‘buffer’, ‘systems’ and ‘the’.

   ‘M-x sort-columns’ requires more explanation.  You specify the
columns by putting point at one of the columns and the mark at the other
column.  Because this means you cannot put point or the mark at the
beginning of the first line of the text you want to sort, this command
uses an unusual definition of “region”: all of the line point is in is
considered part of the region, and so is all of the line the mark is in,
as well as all the lines in between.

   For example, to sort a table by information found in columns 10 to
15, you could put the mark on column 10 in the first line of the table,
and point on column 15 in the last line of the table, and then run
‘sort-columns’.  Equivalently, you could run it with the mark on column
15 in the first line and point on column 10 in the last line.

   This can be thought of as sorting the rectangle specified by point
and the mark, except that the text on each line to the left or right of
the rectangle moves along with the text inside the rectangle.  *Note
Rectangles::.

   Many of the sort commands ignore case differences when comparing, if
‘sort-fold-case’ is non-‘nil’.


File: emacs.info,  Node: Picture Mode,  Next: Editing Binary Files,  Prev: Sorting,  Up: Top

# /. 43 Editing Pictures
***********************

To edit a picture made out of text characters (for example, a picture of
the division of a register into fields, as a comment in a program), use
the command ‘M-x picture-mode’ to enter Picture mode.

   In Picture mode, editing is based on the “quarter-plane” model of
text, according to which the text characters lie studded on an area that
stretches infinitely far to the right and downward.  The concept of the
end of a line does not exist in this model; the most you can say is
where the last nonblank character on the line is found.

   Of course, Emacs really always considers text as a sequence of
characters, and lines really do have ends.  But Picture mode replaces
the most frequently-used commands with variants that simulate the
quarter-plane model of text.  They do this by inserting spaces or by
converting tabs to spaces.

   Most of the basic editing commands of Emacs are redefined by Picture
mode to do essentially the same thing but in a quarter-plane way.  In
addition, Picture mode defines various keys starting with the ‘C-c’
prefix to run special picture editing commands.

   One of these keys, ‘C-c C-c’, is particularly important.  Often a
picture is part of a larger file that is usually edited in some other
major mode.  Picture mode records the name of the previous major mode so
you can use the ‘C-c C-c’ command (‘picture-mode-exit’) later to go back
to that mode.  ‘C-c C-c’ also deletes spaces from the ends of lines,
unless given a numeric argument.

   The special commands of Picture mode all work in other modes
(provided the ‘picture’ library is loaded), but are not bound to keys
except in Picture mode.  The descriptions below talk of moving “one
column” and so on, but all the picture mode commands handle numeric
arguments as their normal equivalents do.

   Turning on Picture mode runs the hook ‘picture-mode-hook’.
Additional extensions to Picture mode can be found in ‘artist.el’.

* Menu:

* Basic Picture::         Basic concepts and simple commands of Picture Mode.
* Insert in Picture::     Controlling direction of cursor motion
                            after self-inserting characters.
* Tabs in Picture::       Various features for tab stops and indentation.
* Rectangles in Picture:: Clearing and superimposing rectangles.


File: emacs.info,  Node: Basic Picture,  Next: Insert in Picture,  Up: Picture Mode

43.1 Basic Editing in Picture Mode
==================================

Most keys do the same thing in Picture mode that they usually do, but do
it in a quarter-plane style.  For example, ‘C-f’ is rebound to run
‘picture-forward-column’, a command which moves point one column to the
right, inserting a space if necessary so that the actual end of the line
makes no difference.  ‘C-b’ is rebound to run ‘picture-backward-column’,
which always moves point left one column, converting a tab to multiple
spaces if necessary.  ‘C-n’ and ‘C-p’ are rebound to run
‘picture-move-down’ and ‘picture-move-up’, which can either insert
spaces or convert tabs as necessary to make sure that point stays in
exactly the same column.  ‘C-e’ runs ‘picture-end-of-line’, which moves
to after the last nonblank character on the line.  ‘C-a’ runs
‘picture-beginning-of-line’.  (The choice of screen model does not
affect beginnings of lines; the only extra thing this command does is
update the current picture column to 0.)

   Insertion of text is adapted to the quarter-plane screen model
through the use of Overwrite mode (*note Minor Modes::.)  Self-inserting
characters replace existing text, column by column, rather than pushing
existing text to the right.  <RET> runs ‘picture-newline’, which just
moves to the beginning of the following line so that new text will
replace that line.

   In Picture mode, the commands that normally delete or kill text,
instead erase text (replacing it with spaces).  <DEL>
(‘picture-backward-clear-column’) replaces the preceding character with
a space rather than removing it; this moves point backwards.  ‘C-d’
(‘picture-clear-column’) replaces the next character or characters with
spaces, but does not move point.  (If you want to clear characters to
spaces and move forward over them, use <SPC>.)  ‘C-k’
(‘picture-clear-line’) really kills the contents of lines, but does not
delete the newlines from the buffer.

   To do actual insertion, you must use special commands.  ‘C-o’
(‘picture-open-line’) creates a blank line after the current line; it
never splits a line.  ‘C-M-o’ (‘split-line’) makes sense in Picture
mode, so it is not changed.  ‘C-j’ (‘picture-duplicate-line’) inserts
another line with the same contents below the current line.

   To do actual deletion in Picture mode, use ‘C-w’, ‘C-c C-d’ (which is
defined as ‘delete-char’, as ‘C-d’ is in other modes), or one of the
picture rectangle commands (*note Rectangles in Picture::).


File: emacs.info,  Node: Insert in Picture,  Next: Tabs in Picture,  Prev: Basic Picture,  Up: Picture Mode

43.2 Controlling Motion after Insert
====================================

Since self-inserting characters in Picture mode overwrite and move
point, there is no essential restriction on how point should be moved.
Normally point moves right, but you can specify any of the eight
orthogonal or diagonal directions for motion after a self-inserting
character.  This is useful for drawing lines in the buffer.

‘C-c <’
‘C-c <LEFT>’
     Move left after insertion (‘picture-movement-left’).
‘C-c >’
‘C-c <RIGHT>’
     Move right after insertion (‘picture-movement-right’).
‘C-c ^’
‘C-c <UP>’
     Move up after insertion (‘picture-movement-up’).
‘C-c .’
‘C-c <DOWN>’
     Move down after insertion (‘picture-movement-down’).
‘C-c `’
‘C-c <Home>’
     Move up and left (“northwest”) after insertion
     (‘picture-movement-nw’).
‘C-c '’
‘C-c <PageUp>’
‘C-c <prior>’
     Move up and right (“northeast”) after insertion
     (‘picture-movement-ne’).
‘C-c /’
‘C-c <End>’
     Move down and left (“southwest”) after insertion
     (‘picture-movement-sw’).
‘C-c \’
‘C-c <PageDown>’
‘C-c <next>’
     Move down and right (“southeast”) after insertion
     (‘picture-movement-se’).

   Two motion commands move based on the current Picture insertion
direction.  The command ‘C-c C-f’ (‘picture-motion’) moves in the same
direction as motion after insertion currently does, while ‘C-c C-b’
(‘picture-motion-reverse’) moves in the opposite direction.


File: emacs.info,  Node: Tabs in Picture,  Next: Rectangles in Picture,  Prev: Insert in Picture,  Up: Picture Mode

43.3 Picture Mode Tabs
======================

Two kinds of tab-like action are provided in Picture mode.  Use
‘M-<TAB>’ (‘picture-tab-search’) for context-based tabbing.  With no
argument, it moves to a point underneath the next “interesting”
character that follows whitespace in the previous nonblank line.  “Next”
here means “appearing at a horizontal position greater than the one
point starts out at”.  With prefix argument, as in ‘C-u M-<TAB>’, this
command moves to the next such interesting character in the current
line.  ‘M-<TAB>’ does not change the text; it only moves point.
“Interesting” characters are defined by the variable
‘picture-tab-chars’, which should define a set of characters.  The
syntax for this variable is like the syntax used inside of ‘[...]’ in a
regular expression—but without the ‘[’ and the ‘]’.  Its default value
is ‘"!-~"’.

   <TAB> itself runs ‘picture-tab’, which operates based on the current
tab stop settings; it is the Picture mode equivalent of
‘tab-to-tab-stop’.  Normally it just moves point, but with a numeric
argument it clears the text that it moves over.

   The context-based and tab-stop-based forms of tabbing are brought
together by the command ‘C-c <TAB>’ (‘picture-set-tab-stops’).  This
command sets the tab stops to the positions which ‘M-<TAB>’ would
consider significant in the current line.  The use of this command,
together with <TAB>, can get the effect of context-based tabbing.  But
‘M-<TAB>’ is more convenient in the cases where it is sufficient.

   It may be convenient to prevent use of actual tab characters in
pictures.  For example, this prevents ‘C-x <TAB>’ from messing up the
picture.  You can do this by setting the variable ‘indent-tabs-mode’ to
‘nil’.


File: emacs.info,  Node: Rectangles in Picture,  Prev: Tabs in Picture,  Up: Picture Mode

43.4 Picture Mode Rectangle Commands
====================================

Picture mode defines commands for working on rectangular pieces of the
text in ways that fit with the quarter-plane model.  The standard
rectangle commands may also be useful.  *Note Rectangles::.

‘C-c C-k’
     Clear out the region-rectangle with spaces
     (‘picture-clear-rectangle’).  With a prefix argument, delete the
     text.
‘C-c C-w R’
     Similar, but save rectangle contents in register R first
     (‘picture-clear-rectangle-to-register’).  *Note Registers::.

‘C-c C-y’
     Copy last killed rectangle into the buffer by overwriting, with
     upper left corner at point (‘picture-yank-rectangle’).  With
     argument, insert instead.
‘C-c C-x R’
     Similar, but use the rectangle in register R
     (‘picture-yank-rectangle-from-register’).

   The picture rectangle commands ‘C-c C-k’ (‘picture-clear-rectangle’)
and ‘C-c C-w’ (‘picture-clear-rectangle-to-register’) differ from the
standard rectangle commands in that they normally clear the rectangle
instead of deleting it; this is analogous with the way ‘C-d’ is changed
in Picture mode.

   However, deletion of rectangles can be useful in Picture mode, so
these commands delete the rectangle if given a numeric argument.  ‘C-c
C-k’ either with or without a numeric argument saves the rectangle for
‘C-c C-y’.

   The Picture mode commands for yanking rectangles differ from the
standard ones in that they overwrite instead of inserting.  This is the
same way that Picture mode insertion of other text differs from other
modes.  ‘C-c C-y’ (‘picture-yank-rectangle’) inserts (by overwriting)
the rectangle that was most recently killed, while ‘C-c C-x’
(‘picture-yank-rectangle-from-register’) does likewise for the rectangle
found in a specified register.


File: emacs.info,  Node: Editing Binary Files,  Next: Saving Emacs Sessions,  Prev: Picture Mode,  Up: Top

# /. 44 Editing Binary Files
***************************

There is a special major mode for editing binary files: Hexl mode.  To
use it, use ‘M-x hexl-find-file’ instead of ‘C-x C-f’ to visit the file.
This command converts the file’s contents to hexadecimal and lets you
edit the translation.  When you save the file, it is converted
automatically back to binary.

   You can also use ‘M-x hexl-mode’ to translate an existing buffer into
hex.  This is useful if you visit a file normally and then discover it
is a binary file.

   Inserting text always overwrites in Hexl mode.  This is to reduce the
risk of accidentally spoiling the alignment of data in the file.
Ordinary text characters insert themselves (i.e., overwrite with
themselves).  There are commands for insertion of special characters by
their code.  Most cursor motion keys, as well as ‘C-x C-s’, are bound in
Hexl mode to commands that produce the same effect.  Here is a list of
other important commands special to Hexl mode:

‘C-M-d’
     Insert a byte with a code typed in decimal.

‘C-M-o’
     Insert a byte with a code typed in octal.

‘C-M-x’
     Insert a byte with a code typed in hex.

‘C-M-a’
     Move to the beginning of a 512-byte page.

‘C-M-e’
     Move to the end of a 512-byte page.

‘C-x [’
     Move to the beginning of a 1k-byte page.

‘C-x ]’
     Move to the end of a 1k-byte page.

‘M-g’
     Move to an address specified in hex.

‘M-j’
     Move to an address specified in decimal.

‘C-c C-c’
     Leave Hexl mode, going back to the major mode this buffer had
     before you invoked ‘hexl-mode’.

Other Hexl commands let you insert strings (sequences) of binary bytes,
move by ‘short’s or ‘int’s, etc.; type ‘C-h a hexl- <TAB>’ for details.

   Hexl mode can also be used for editing text files.  This could come
in handy if the text file includes unusual characters or uses unusual
encoding (*note Coding Systems::).  For this purpose, Hexl commands that
insert bytes can also insert ASCII and non-ASCII characters, including
multibyte characters.  To edit a text file with Hexl, visit the file as
usual, and then type ‘M-x hexl-mode <RET>’ to switch to Hexl mode.  You
can now insert text characters by typing them.  However, inserting
multibyte characters requires special care, to avoid the danger of
creating invalid multibyte sequences: you should start typing such
characters when point is on the first byte of a multibyte sequence in
the file.


File: emacs.info,  Node: Saving Emacs Sessions,  Next: Recursive Edit,  Prev: Editing Binary Files,  Up: Top

# /. 45 Saving Emacs Sessions
****************************

You can use the desktop library to save the state of Emacs from one
session to another.  The saved Emacs “desktop configuration” includes
the buffers, their file names, major modes, buffer positions, window and
frame configuration, and some important global variables.

   To enable this feature, use the Customization buffer (*note Easy
Customization::) to set ‘desktop-save-mode’ to ‘t’ for future sessions,
or add this line in your init file (*note Init File::):

     (desktop-save-mode 1)

   If you turn on ‘desktop-save-mode’ in your init file, then when Emacs
starts, it looks for a saved desktop in ‘desktop-path’ (which defaults
to ‘user-emacs-directory’ and then your home directory) and uses the
first desktop it finds.  While Emacs runs with ‘desktop-save-mode’
turned on, it by default auto-saves the desktop whenever any of the
desktop configuration changes.  The variable ‘desktop-auto-save-timeout’
determines how frequently Emacs checks for modifications to your
desktop.  The desktop is also saved when you exit Emacs.

   Specify the option ‘--no-desktop’ on the Emacs command line when you
don’t want it to reload any saved desktop configurations.  This turns
off ‘desktop-save-mode’ for the current session.  Starting Emacs with
the ‘--no-init-file’ option also disables desktop reloading, since it
bypasses the init file, where ‘desktop-save-mode’ is usually turned on.

   You can have separate saved desktop configurations in different
directories; starting Emacs from a directory where you have a saved
desktop configuration will restore that configuration, provided that you
customize ‘desktop-path’ to prepend ‘.’ (the current directory) to the
other directories there.  You can save the current desktop and reload
the one saved in another directory by typing ‘M-x desktop-change-dir’.
Typing ‘M-x desktop-revert’ reverts to the previously reloaded desktop.

   The file in which Emacs saves the desktop is locked while the session
runs, to avoid inadvertently overwriting it from another Emacs session.
That lock is normally removed when Emacs exits, but if Emacs or your
system crashes, the lock stays, and when you restart Emacs, it will by
default ask you whether to use the locked desktop file.  You can avoid
the question by customizing the variable ‘desktop-load-locked-desktop’
to either ‘nil’, which means never load the desktop in this case, or
‘t’, which means load the desktop without asking.  You can also
customize the variable to the special value ‘check-pid’, which means to
load the file if the Emacs process that has locked the desktop is not
running on the local machine.  This should not be used in circumstances
where the locking Emacs might still be running on another machine, which
could be the case in multi-user environments where your home directory
is mounted remotely using NFS or similar.

   When Emacs starts in daemon mode, it cannot ask you any questions, so
if it finds the desktop file locked, it will not load it, unless
‘desktop-load-locked-desktop’ is ‘t’.  Note that restoring the desktop
in daemon mode is somewhat problematic for other reasons: e.g., the
daemon cannot use GUI features, so parameters such as frame position,
size, and decorations cannot be restored.  For that reason, you may wish
to delay restoring the desktop in daemon mode until the first client
connects, by calling ‘desktop-read’ (see below) in a hook function that
you add to ‘server-after-make-frame-hook’ (*note (elisp)Creating
Frames::).

   Whenever you want, you can use the command ‘M-x desktop-save’ to
force immediate saving of the current desktop.  This is useful either if
you do not want to use the automatic desktop restoration, and thus don’t
turn on ‘desktop-save-mode’, or when you have made significant changes
to the desktop, and want to make sure the configuration doesn’t get lost
if Emacs or your system crashes.  You can use ‘M-x desktop-read’ to
restore a previously-saved desktop if the current Emacs session didn’t
load any desktop yet.

   By default, the desktop tries to save and restore the frame and
window configuration.  To disable this, set ‘desktop-restore-frames’ to
‘nil’.  (See that variable’s documentation for some related options that
you can customize to fine-tune this behavior.)

   When the desktop restores the frame and window configuration, it uses
the recorded values of frame parameters, disregarding any settings for
those parameters you have in your init file (*note Init File::).  This
means that frame parameters such as fonts and faces for the restored
frames will come from the desktop file, where they were saved when you
exited your previous Emacs session; any settings for those parameters in
your init file will be ignored.  To disable this, customize the value of
‘frameset-filter-alist’ to filter out the frame parameters you don’t
want to be restored; they will then be set according to your
customizations in the init file.

   Information about buffers visiting remote files is not saved by
default.  Customize the variable ‘desktop-files-not-to-save’ to change
this.

   By default, all the buffers in the desktop are restored in one go.
However, this may be slow if there are a lot of buffers in the desktop.
You can specify the maximum number of buffers to restore immediately
with the variable ‘desktop-restore-eager’; the remaining buffers are
restored lazily, when Emacs is idle.

   Type ‘M-x desktop-clear’ to empty the Emacs desktop; this can be
useful, for example, if you want to switch to another desktop by
invoking ‘M-x desktop-read’ next.  The ‘desktop-clear’ command kills all
buffers except for internal ones, and clears the global variables listed
in ‘desktop-globals-to-clear’.  If you want it to preserve certain
buffers, customize the variable ‘desktop-clear-preserve-buffers-regexp’,
whose value is a regular expression matching the names of buffers not to
kill.

   If you want to save minibuffer history from one session to another,
use the ‘savehist’ library.


File: emacs.info,  Node: Recursive Edit,  Next: Hyperlinking,  Prev: Saving Emacs Sessions,  Up: Top

# /. 46 Recursive Editing Levels
*******************************

A “recursive edit” is a situation in which you are using Emacs commands
to perform arbitrary editing while in the middle of another Emacs
command.  For example, when you type ‘C-r’ inside of a ‘query-replace’,
you enter a recursive edit in which you can change the current buffer.
On exiting from the recursive edit, you go back to the ‘query-replace’.
*Note Query Replace::.

   “Exiting” the recursive edit means returning to the unfinished
command, which continues execution.  The command to exit is ‘C-M-c’
(‘exit-recursive-edit’).

   You can also “abort” the recursive edit.  This is like exiting, but
also quits the unfinished command immediately.  Use the command ‘C-]’
(‘abort-recursive-edit’) to do this.  *Note Quitting::.

   The mode line shows you when you are in a recursive edit by
displaying square brackets around the parentheses that always surround
the major and minor mode names.  Every window’s mode line shows this in
the same way, since being in a recursive edit is true of Emacs as a
whole rather than any particular window or buffer.

   It is possible to be in recursive edits within recursive edits.  For
example, after typing ‘C-r’ in a ‘query-replace’, you may type a command
that enters the debugger.  This begins a recursive editing level for the
debugger, within the recursive editing level for ‘C-r’.  Mode lines
display a pair of square brackets for each recursive editing level
currently in progress.

   Exiting the inner recursive edit (such as with the debugger ‘c’
command) resumes the command running in the next level up.  When that
command finishes, you can then use ‘C-M-c’ to exit another recursive
editing level, and so on.  Exiting applies to the innermost level only.
Aborting also gets out of only one level of recursive edit; it returns
immediately to the command level of the previous recursive edit.  If you
wish, you can then abort the next recursive editing level.

   Alternatively, the command ‘M-x top-level’ aborts all levels of
recursive edits, returning immediately to the top-level command reader.
It also exits the minibuffer, if it is active.

   The text being edited inside the recursive edit need not be the same
text that you were editing at top level.  It depends on what the
recursive edit is for.  If the command that invokes the recursive edit
selects a different buffer first, that is the buffer you will edit
recursively.  In any case, you can switch buffers within the recursive
edit in the normal manner (as long as the buffer-switching keys have not
been rebound).  You could probably do all the rest of your editing
inside the recursive edit, visiting files and all.  But this could have
surprising effects (such as stack overflow) from time to time.  So
remember to exit or abort the recursive edit when you no longer need it.

   In general, we try to minimize the use of recursive editing levels in
GNU Emacs.  This is because they constrain you to go back in a
particular order—from the innermost level toward the top level.  When
possible, we present different activities in separate buffers so that
you can switch between them as you please.  Some commands switch to a
new major mode which provides a command to switch back.  These
approaches give you more flexibility to go back to unfinished tasks in
the order you choose.


File: emacs.info,  Node: Hyperlinking,  Next: Amusements,  Prev: Recursive Edit,  Up: Top

# /. 47 Hyperlinking and Web Navigation Features
***********************************************

The following subsections describe convenience features for handling
URLs and other types of links occurring in Emacs buffer text.

* Menu:

* EWW::                         A web browser in Emacs.
* Embedded WebKit Widgets::     Embedding browser widgets in Emacs buffers.
* Browse-URL::                  Following URLs.
* Goto Address mode::           Activating URLs.
* FFAP::                        Finding files etc. at point.


File: emacs.info,  Node: EWW,  Next: Embedded WebKit Widgets,  Up: Hyperlinking

47.1 Web Browsing with EWW
==========================

“EWW”, the Emacs Web Wowser, is a web browser package for Emacs.  It
allows browsing URLs within an Emacs buffer.  The command ‘M-x eww’ will
open a URL or search the web.  You can open a file using the command
‘M-x eww-open-file’.  You can use EWW as the web browser for
‘browse-url’, *note Browse-URL::.  For full details, *note EWW:
(eww)Top.


File: emacs.info,  Node: Embedded WebKit Widgets,  Next: Browse-URL,  Prev: EWW,  Up: Hyperlinking

47.2 Embedded WebKit Widgets
============================

If Emacs was compiled with the appropriate support packages, it is able
to show browser widgets in its buffers.  The command ‘M-x
xwidget-webkit-browse-url’ asks for a URL to display in the browser
widget.  The URL normally defaults to the URL at or before point, but if
there is an active region (*note Mark::), the default URL comes from the
region instead, after removing any whitespace from it.  The command then
creates a new buffer with the embedded browser showing the specified
URL.  The buffer is put in the Xwidget-WebKit mode (similar to Image
mode, *note Image Mode::), which provides one-key commands for scrolling
the widget, changing its size, and reloading it.  Type ‘C-h b’ in that
buffer to see the key bindings.

   By default, typing a self-inserting character inside an xwidget
webkit buffer will do nothing, or trigger some special action.  To make
those characters and other common editing keys insert themselves when
pressed, you can enable ‘xwidget-webkit-edit-mode’, which redefines them
to be passed through to the WebKit xwidget.

   You can also enable ‘xwidget-webkit-edit-mode’ by typing ‘e’ inside
the xwidget webkit buffer.

   ‘xwidget-webkit-isearch-mode’ is a minor mode that behaves similarly
to incremental search (*note Incremental Search::), but operates on the
contents of a WebKit widget instead of the current buffer.  It is bound
to ‘C-s’ and ‘C-r’ inside xwidget-webkit buffers.  When it is invoked by
‘C-r’, the initial search will be performed in reverse direction.

   Typing any self-inserting character will cause the character to be
inserted into the current search query.  Typing ‘C-s’ will cause the
WebKit widget to display the next search result, while typing ‘C-r’ will
cause it to display the previous one.

   To leave incremental search, you can type ‘C-g’.

   The command ‘xwidget-webkit-browse-history’ displays a buffer
containing a list of pages previously loaded by the current WebKit
buffer, and lets you navigate to those pages by hitting ‘RET’.

   It is bound to ‘H’.


File: emacs.info,  Node: Browse-URL,  Next: Goto Address mode,  Prev: Embedded WebKit Widgets,  Up: Hyperlinking

47.3 Following URLs
===================

‘M-x browse-url <RET> URL <RET>’
     Load a URL into a Web browser.

   The Browse-URL package allows you to easily follow URLs from within
Emacs.  Most URLs are followed by invoking a web browser; ‘mailto:’ URLs
are followed by invoking the ‘compose-mail’ Emacs command to send mail
to the specified address (*note Sending Mail::).

   The command ‘M-x browse-url’ prompts for a URL, and follows it.  If
point is located near a plausible URL, that URL is offered as the
default.  The Browse-URL package also provides other commands which you
might like to bind to keys, such as ‘browse-url-at-point’ and
‘browse-url-at-mouse’.

   You can customize Browse-URL’s behavior via various options in the
‘browse-url’ Customize group.  In particular, the option
‘browse-url-mailto-function’ lets you define how to follow ‘mailto:’
URLs, while ‘browse-url-browser-function’ specifies your default
browser.

   You can define that certain URLs are browsed with other functions by
customizing ‘browse-url-handlers’, an alist of regular expressions or
predicates paired with functions to browse matching URLs.

   For more information, view the package commentary by typing ‘C-h P
browse-url <RET>’.

   Emacs also has a minor mode that has some support for handling URLs
as if they were files.  ‘url-handler-mode’ is a global minor mode that
affects most of the Emacs commands and primitives that deal with file
names.  After switching on this mode, you can say, for instance, ‘C-x
C-f https://www.gnu.org/ RET’ to see the HTML for that web page, and you
can then edit it and save it to a local file, for instance.


File: emacs.info,  Node: Goto Address mode,  Next: FFAP,  Prev: Browse-URL,  Up: Hyperlinking

47.4 Activating URLs
====================

‘M-x goto-address-mode’
     Activate URLs and e-mail addresses in the current buffer.

‘M-x global-goto-address-mode’
     Activate ‘goto-address-mode’ in all buffers.

   You can make Emacs mark out URLs specially in the current buffer, by
typing ‘M-x goto-address-mode’.  When this buffer-local minor mode is
enabled, it finds all the URLs in the buffer, highlights them, and turns
them into clickable buttons.  You can follow the URL by typing ‘C-c
<RET>’ (‘goto-address-at-point’) while point is on its text; or by
clicking with ‘mouse-2’, or by clicking ‘mouse-1’ quickly (*note Mouse
References::).  Following a URL is done by calling ‘browse-url’ as a
subroutine (*note Browse-URL::).

   It can be useful to add ‘goto-address-mode’ to mode hooks and hooks
for displaying an incoming message (e.g., ‘rmail-show-message-hook’ for
Rmail).  This is not needed for Gnus or MH-E, which have similar
features of their own.


File: emacs.info,  Node: FFAP,  Prev: Goto Address mode,  Up: Hyperlinking

47.5 Finding Files and URLs at Point
====================================

The FFAP package replaces certain key bindings for finding files, such
as ‘C-x C-f’, with commands that provide more sensible defaults.  These
commands behave like the ordinary ones when given a prefix argument.
Otherwise, they get the default file name or URL from the text around
point.  If what is found in the buffer has the form of a URL rather than
a file name, the commands use ‘browse-url’ to view it (*note
Browse-URL::).

   This feature is useful for following references in mail or news
buffers, ‘README’ files, ‘MANIFEST’ files, and so on.  For more
information, view the package commentary by typing ‘C-h P ffap <RET>’.

   To enable FFAP, type ‘M-x ffap-bindings’.  This makes the following
key bindings, and also installs hooks for additional FFAP functionality
in Rmail, Gnus and VM article buffers.

‘C-x C-f FILENAME <RET>’
     Find FILENAME, guessing a default from text around point
     (‘find-file-at-point’).
‘C-x C-r FILENAME <RET>’
     ‘ffap-read-only’, analogous to ‘find-file-read-only’.
‘C-x C-v FILENAME <RET>’
     ‘ffap-alternate-file’, analogous to ‘find-alternate-file’.
‘C-x d DIRECTORY <RET>’
     Start Dired on DIRECTORY, defaulting to the directory at point
     (‘dired-at-point’).
‘C-x C-d DIRECTORY <RET>’
     ‘ffap-list-directory’, analogous to ‘list-directory’.
‘C-x 4 f FILENAME <RET>’
     ‘ffap-other-window’, analogous to ‘find-file-other-window’.
‘C-x 4 r FILENAME <RET>’
     ‘ffap-read-only-other-window’, analogous to
     ‘find-file-read-only-other-window’.
‘C-x 4 d DIRECTORY <RET>’
     ‘ffap-dired-other-window’, like ‘dired-other-window’.
‘C-x 5 f FILENAME <RET>’
     ‘ffap-other-frame’, analogous to ‘find-file-other-frame’.
‘C-x 5 r FILENAME <RET>’
     ‘ffap-read-only-other-frame’, analogous to
     ‘find-file-read-only-other-frame’.
‘C-x 5 d DIRECTORY <RET>’
     ‘ffap-dired-other-frame’, analogous to ‘dired-other-frame’.
‘C-x t C-f FILENAME <return>’
     ‘ffap-other-tab’, analogous to ‘find-file-other-tab’.
‘C-x t C-r FILENAME <return>’
     ‘ffap-read-only-other-tab’, analogous to
     ‘find-file-read-only-other-tab’.
‘M-x ffap-next’
     Search buffer for next file name or URL, then find that file or
     URL.
‘S-mouse-3’
     ‘ffap-at-mouse’ finds the file guessed from text around the
     position of a mouse click.
‘C-S-mouse-3’
     Display a menu of files and URLs mentioned in current buffer, then
     find the one you select (‘ffap-menu’).


File: emacs.info,  Node: Amusements,  Next: Packages,  Prev: Hyperlinking,  Up: Top

# /. 48 Games and Other Amusements
*********************************

The ‘animate’ package makes text dance (e.g., ‘M-x
animate-birthday-present’).

   ‘M-x blackbox’, ‘M-x mpuz’ and ‘M-x 5x5’ are puzzles.  ‘blackbox’
challenges you to determine the location of objects inside a box by
tomography.  ‘mpuz’ displays a multiplication puzzle with letters
standing for digits in a code that you must guess—to guess a value, type
a letter and then the digit you think it stands for.  The aim of ‘5x5’
is to fill in all the squares.

   ‘M-x bubbles’ is a game in which the object is to remove as many
bubbles as you can in the smallest number of moves.

   ‘M-x decipher’ helps you to cryptanalyze a buffer which is encrypted
in a simple monoalphabetic substitution cipher.

   ‘M-x dissociated-press’ scrambles the text in the current Emacs
buffer, word by word or character by character, writing its output to a
buffer named ‘*Dissociation*’.  A positive argument tells it to operate
character by character, and specifies the number of overlap characters.
A negative argument tells it to operate word by word, and specifies the
number of overlap words.  Dissociated Press produces results fairly like
those of a Markov chain, but is however, an independent, ignoriginal
invention; it techniquitously copies several consecutive characters from
the sample text between random jumps, unlike a Markov chain which would
jump randomly after each word or character.  Keep dissociwords out of
your documentation, if you want it to be well userenced and properbose.

   ‘M-x dunnet’ runs a text-based adventure game.

   If you want a little more personal involvement, try ‘M-x gomoku’,
which plays the game Go Moku with you.

   If you are a little bit bored, you can try ‘M-x hanoi’.  If you are
considerably bored, give it a numeric argument.  If you are very, very
bored, try an argument of 9.  Sit back and watch.

   ‘M-x life’ runs Conway’s Game of Life cellular automaton.

   ‘M-x morse-region’ converts the text in the region to Morse code;
‘M-x unmorse-region’ converts it back.  ‘M-x nato-region’ converts the
text in the region to NATO phonetic alphabet; ‘M-x denato-region’
converts it back.

   ‘M-x pong’, ‘M-x snake’ and ‘M-x tetris’ are implementations of the
well-known Pong, Snake and Tetris games.

   ‘M-x solitaire’ plays a game of solitaire in which you jump pegs
across other pegs.

   The command ‘M-x zone’ plays games with the display when Emacs is
idle.

   “Real Programmers” deploy ‘M-x butterfly’, which uses butterflies to
flip a bit on the drive platter, see <https://xkcd.com/378>.

   Finally, if you find yourself frustrated, try describing your
problems to the famous psychotherapist Eliza.  Just do ‘M-x doctor’.
End each input by typing <RET> twice.


File: emacs.info,  Node: Packages,  Next: Customization,  Prev: Amusements,  Up: Top

# /. 49 Emacs Lisp Packages
**************************

Emacs is extended by implementing additional features in “packages”,
which are Emacs Lisp libraries.  These could be written by you or
provided by someone else.  If you want to install such a package so it
is available in your future Emacs session, you need to compile it and
put it in a directory where Emacs looks for Lisp libraries.  *Note Lisp
Libraries::, for more details about this manual installation method.
Many packages provide installation and usage instructions in the large
commentary near the beginning of the Lisp file; you can use those
instructions for installing and fine-tuning your use of the package.

   Packages can also be provided by “package archives”, which are large
collections of Emacs Lisp packages.  Each package is a separate Emacs
Lisp program, sometimes including other components such as an Info
manual.  Emacs includes a facility that lets you easily download and
install packages from such archives.  The rest of this chapter describes
this facility.

   To list the packages available for installation from package
archives, type ‘M-x list-packages <RET>’.  It brings up a buffer named
‘*Packages*’ with a list of all packages.  You can install or uninstall
packages via this buffer.  *Note Package Menu::.

   The command ‘C-h P’ (‘describe-package’) prompts for the name of a
package, and displays a help buffer describing the attributes of the
package and the features that it implements.

   By default, Emacs downloads packages from a package archive
maintained by the Emacs developers and hosted by the GNU project.
Optionally, you can also download packages from archives maintained by
third parties.  *Note Package Installation::.

   For information about turning an Emacs Lisp program into an
installable package, *Note (elisp)Packaging::.

* Menu:

* Package Menu::         Buffer for viewing and managing packages.
* Package Statuses::     Which statuses a package can have.
* Package Installation:: Options for package installation.
* Package Files::        Where packages are installed.
* Fetching Package Sources::  Managing packages directly from source.


File: emacs.info,  Node: Package Menu,  Next: Package Statuses,  Up: Packages

49.1 The Package Menu Buffer
============================

The command ‘M-x list-packages’ brings up the “package menu”.  This is a
buffer listing all the packages that Emacs knows about, one on each
line, with the following information:

   • The package name (e.g., ‘auctex’).

   • The package’s version number (e.g., ‘11.86’).

   • The package’s status—normally one of ‘available’ (can be downloaded
     from the package archive), ‘installed’, or ‘built-in’ (included in
     Emacs by default).  *Note Package Statuses::.

   • Which package archive this package is from, if you have more than
     one package archive enabled.

   • A short description of the package.

The ‘list-packages’ command accesses the network, to retrieve the list
of available packages from package archive servers.  If the network is
unavailable, it falls back on the most recently retrieved list.

   The main command to use in the package list buffer is the <x>
command.  If the package under point isn’t installed already, this
command will install it.  If the package under point is already
installed, this command will delete it.

   The following commands are available in the package menu:

‘h’
     Print a short message summarizing how to use the package menu
     (‘package-menu-quick-help’).

‘?’
‘<RET>’
     Display a help buffer for the package on the current line
     (‘package-menu-describe-package’), similar to the help window
     displayed by the ‘C-h P’ command (*note Packages::).

‘i’
     Mark the package on the current line for installation
     (‘package-menu-mark-install’).  If the package status is
     ‘available’, this adds an ‘I’ character to the start of the line;
     typing ‘x’ (see below) will download and install the package.

‘d’
     Mark the package on the current line for deletion
     (‘package-menu-mark-delete’).  If the package status is
     ‘installed’, this adds a ‘D’ character to the start of the line;
     typing ‘x’ (see below) will delete the package.  *Note Package
     Files::, for information about what package deletion entails.

‘w’
     Open the package website on the current line in a browser
     (‘package-browse-url’).  ‘browse-url’ is used to open the browser.

‘~’
     Mark all obsolete packages for deletion
     (‘package-menu-mark-obsolete-for-deletion’).  This marks for
     deletion all the packages whose status is ‘obsolete’.

‘u’
‘<DEL>’
     Remove any installation or deletion mark previously added to the
     current line by an ‘i’ or ‘d’ command (‘package-menu-mark-unmark’).

‘U’
     Mark all package with a newer available version for upgrading
     (‘package-menu-mark-upgrades’).  This places an installation mark
     on the new available versions, and a deletion mark on the old
     installed versions (marked with status ‘obsolete’).  By default,
     this won’t mark built-in packages for which a newer version is
     available, but customizing ‘package-install-upgrade-built-in’ can
     change that.  *Note Package Installation::.  If you customize
     ‘package-install-upgrade-built-in’ to a non-‘nil’ value, be sure to
     review all the built-in packages the ‘U’ command marks, to avoid
     updating built-in packages you don’t want to overwrite.

‘x’
     Download and install all packages marked with ‘i’, and their
     dependencies; also, delete all packages marked with ‘d’
     (‘package-menu-execute’).  This also removes the marks.  If no
     packages are marked, this command will install the package under
     point (if it isn’t installed already), or delete the package under
     point (if it’s already installed).

‘g’
‘r’
     Refresh the package list (‘revert-buffer’).  This fetches the list
     of available packages from the package archive again, and
     redisplays the package list.

‘H’
     Hide packages whose names match a regexp
     (‘package-menu-hide-package’).  This prompts for a regexp, and then
     hides the packages with matching names.  The default value of the
     regexp will hide only the package whose name is at point, so just
     pressing <RET> to the prompt will hide the current package.

‘(’
     Toggle visibility of old versions of packages and also of versions
     from lower-priority archives (‘package-menu-toggle-hiding’).

‘/ a’
     Filter package list by archive (‘package-menu-filter-by-archive’).
     This prompts for a package archive (e.g., ‘gnu’), then shows only
     packages from that archive.  You can specify several archives by
     typing their names separated by commas.

‘/ d’
     Filter package list by description
     (‘package-menu-filter-by-description’).  This prompts for a regular
     expression, then shows only packages with descriptions matching
     that regexp.

‘/ k’
     Filter package list by keyword (‘package-menu-filter-by-keyword’).
     This prompts for a keyword (e.g., ‘games’), then shows only
     packages with that keyword.  You can specify several keywords by
     typing them separated by commas.

‘/ N’
     Filter package list by name or description
     (‘package-menu-filter-by-name-or-description’).  This prompts for a
     regular expression, then shows only packages with a name or
     description matching that regexp.

‘/ n’
     Filter package list by name (‘package-menu-filter-by-name’).  This
     prompts for a regular expression, then shows only packages with
     names matching that regexp.

‘/ s’
     Filter package list by status (‘package-menu-filter-by-status’).
     This prompts for one or more statuses (e.g., ‘available’, *note
     Package Statuses::), then shows only packages with matching status.
     You can specify several status values by typing them separated by
     commas.

‘/ v’
     Filter package list by version (‘package-menu-filter-by-version’).
     This prompts first for one of the comparison symbols ‘<’, ‘>’ or
     ‘=’ and for a version string, and then shows packages whose
     versions are correspondingly lower, equal or higher than the
     version you typed.

‘/ m’
     Filter package list by non-empty mark
     (‘package-menu-filter-marked’).  This shows only the packages that
     have been marked to be installed or deleted.

‘/ u’
     Filter package list to show only packages for which there are
     available upgrades (‘package-menu-filter-upgradable’).  By default,
     this filter excludes the built-in packages for which a newer
     version is available, but customizing
     ‘package-install-upgrade-built-in’ can change that.  *Note Package
     Installation::.

‘/ /’
     Clear filter currently applied to the package list
     (‘package-menu-filter-clear’).

For example, you can install a package by typing ‘i’ on the line listing
that package, followed by ‘x’.


File: emacs.info,  Node: Package Statuses,  Next: Package Installation,  Prev: Package Menu,  Up: Packages

49.2 Package Statuses
=====================

A package can have one of the following statuses:

‘available’
     The package is not installed, but can be downloaded and installed
     from the package archive.

‘avail-obso’
     The package is available for installation, but a newer version is
     also available.  Packages with this status are hidden by default.

‘built-in’
     The package is included in Emacs by default.  It cannot be deleted
     through the package menu, and by default is not considered for
     upgrading (but you can change that by customizing
     ‘package-install-upgrade-built-in’, *note Package Installation::).

‘dependency’
     The package was installed automatically to satisfy a dependency of
     another package.

‘disabled’
     The package has been disabled using the ‘package-load-list’
     variable.

‘external’
     The package is not built-in and not from the directory specified by
     ‘package-user-dir’ (*note Package Files::).  External packages are
     treated much like ‘built-in’ packages and cannot be deleted.

‘held’
     The package is held, *Note Package Installation::.

‘incompat’
     The package cannot be installed for some reason, for example
     because it depends on uninstallable packages.

‘installed’
     The package is installed.

‘new’
     Equivalent to ‘available’, except that the package became newly
     available on the package archive after your last invocation of ‘M-x
     list-packages’.

‘obsolete’
     The package is an outdated installed version; in addition to this
     version of the package, a newer version is also installed.


File: emacs.info,  Node: Package Installation,  Next: Package Files,  Prev: Package Statuses,  Up: Packages

49.3 Package Installation
=========================

Packages are most conveniently installed using the package menu (*note
Package Menu::), but you can also use the command ‘M-x package-install’.
This prompts for the name of a package with the ‘available’ status, then
downloads and installs it.  Similarly, if you want to upgrade a package,
you can use the ‘M-x package-upgrade’ command, and if you want to
upgrade all the packages, you can use the ‘M-x package-upgrade-all’
command.

   By default, ‘package-install’ doesn’t consider built-in packages for
which new versions are available from the archives.  (A package is
built-in if it is included in the Emacs distribution.)  In particular,
it will not show built-in packages in the list of completion candidates
when you type at its prompt.  But if you invoke ‘package-install’ with a
prefix argument, it will also consider built-in packages that can be
upgraded.  You can make this behavior the default by customizing the
variable ‘package-install-upgrade-built-in’: if its value is non-‘nil’,
‘package-install’ will consider built-in packages even when invoked
without a prefix argument.  Note that the package-menu commands (*note
Package Menu::) are also affected by ‘package-install-upgrade-built-in’.

   By contrast, ‘package-upgrade’ and ‘package-upgrade-all’ never
consider built-in packages.  If you want to use these commands for
upgrading some built-in packages, you need to upgrade each of those
packages, once, either via ‘C-u M-x package-install <RET>’, or by
customizing ‘package-install-upgrade-built-in’ to a non-‘nil’ value, and
then upgrading the package once via the package menu or by
‘package-install’.

   If you customize ‘package-install-upgrade-built-in’ to a non-‘nil’
value, be very careful when using commands that update many packages at
once, like ‘package-upgrade-all’ and ‘U’ in the package menu: those
might overwrite built-in packages that you didn’t intent to replace with
newer versions from the archives.  Don’t use these bulk commands if you
want to update only a small number of built-in packages.

   A package may “require” certain other packages to be installed,
because it relies on functionality provided by them.  When Emacs
installs such a package, it also automatically downloads and installs
any required package that is not already installed.  (If a required
package is somehow unavailable, Emacs signals an error and stops
installation.)  A package’s requirements list is shown in its help
buffer.

   By default, packages are downloaded from a single package archive
maintained by the Emacs developers.  This is controlled by the variable
‘package-archives’, whose value is a list of package archives known to
Emacs.  Each list element must have the form ‘(ID . LOCATION)’, where ID
is the name of a package archive and LOCATION is the URL or name of the
package archive directory.  You can alter this list if you wish to use
third party package archives—but do so at your own risk, and use only
third parties that you think you can trust!

   The maintainers of package archives can increase the trust that you
can have in their packages by “signing” them.  They generate a
private/public pair of cryptographic keys, and use the private key to
create a “signature file” for each package.  With the public key, you
can use the signature files to verify the package creator and make sure
the package has not been tampered with.  Signature verification uses the
GnuPG package (https://www.gnupg.org/) via the EasyPG interface (*note
EasyPG: (epa)Top.).  A valid signature is not a cast-iron guarantee that
a package is not malicious, so you should still exercise caution.
Package archives should provide instructions on how you can obtain their
public key.  One way is to download the key from a server such as
<https://pgp.mit.edu/>.  Use ‘M-x package-import-keyring’ to import the
key into Emacs.  Emacs stores package keys in the directory specified by
the variable ‘package-gnupghome-dir’, by default in the ‘gnupg’
subdirectory of ‘package-user-dir’, which causes Emacs to invoke GnuPG
with the option ‘--homedir’ when verifying signatures.  If
‘package-gnupghome-dir’ is ‘nil’, GnuPG’s option ‘--homedir’ is omitted.
The public key for the GNU package archive is distributed with Emacs, in
the ‘etc/package-keyring.gpg’.  Emacs uses it automatically.

   If the user option ‘package-check-signature’ is non-‘nil’, Emacs
attempts to verify signatures when you install packages.  If the option
has the value ‘allow-unsigned’, and a usable OpenPGP configuration is
found, signed packages will be checked, but you can still install a
package that is not signed.  If you use some archives that do not sign
their packages, you can add them to the list
‘package-unsigned-archives’.  (If the value is ‘allow-unsigned’ and no
usable OpenPGP is found, this option is treated as if its value was
‘nil’.)  If the value is ‘t’, at least one signature must be valid; if
the value is ‘all’, all of them must be valid.

   For more information on cryptographic keys and signing, *note GnuPG:
(gnupg)Top.  Emacs comes with an interface to GNU Privacy Guard, *note
EasyPG: (epa)Top.

   If you have more than one package archive enabled, and some of them
offer different versions of the same package, you may find the option
‘package-pinned-packages’ useful.  You can add package/archive pairs to
this list, to ensure that the specified package is only ever downloaded
from the specified archive.

   Another option that is useful when you have several package archives
enabled is ‘package-archive-priorities’.  It specifies the priority of
each archive (higher numbers specify higher priority archives).  By
default, archives have the priority of zero, unless specified otherwise
by this option’s value.  Packages from lower-priority archives will not
be shown in the menu, if the same package is available from a
higher-priority archive.  (This is controlled by the value of
‘package-menu-hide-low-priority’.)

   Once a package is downloaded, byte-compiled and installed, it is made
available to the current Emacs session.  Making a package available adds
its directory to ‘load-path’ and loads its autoloads.  The effect of a
package’s autoloads varies from package to package.  Most packages just
make some new commands available, while others have more wide-ranging
effects on the Emacs session.  For such information, consult the
package’s help buffer.

   Installed packages are automatically made available by Emacs in all
subsequent sessions.  This happens at startup, before processing the
init file but after processing the early init file (*note Early Init
File::).  As an exception, Emacs does not make packages available at
startup if invoked with the ‘-q’ or ‘--no-init-file’ options (*note
Initial Options::).

   To keep Emacs from automatically making packages available at
startup, change the variable ‘package-enable-at-startup’ to ‘nil’.  You
must do this in the early init file, as the variable is read before
loading the regular init file.  Currently this variable cannot be set
via Customize.

   If you have many packages installed, you can improve startup times by
setting the user option ‘package-quickstart’ to ‘t’.  Setting this
option will make Emacs precompute many things instead of re-computing
them on every Emacs startup.  However, if you do this, then you have to
manually run the command ‘package-quickstart-refresh’ when the
activations need to be changed, such as when you change the value of
‘package-load-list’.

   If you have set ‘package-enable-at-startup’ to ‘nil’, you can still
make packages available either during or after startup.  To make
installed packages available during startup, call the function
‘package-activate-all’ in your init file.  To make installed packages
available after startup, invoke the command ‘M-: (package-activate-all)
RET’.

   For finer control over which packages are made available at startup,
you can use the variable ‘package-load-list’.  Its value should be a
list.  A list element of the form ‘(NAME VERSION)’ tells Emacs to make
available version VERSION of the package named NAME.  Here, VERSION
should be a version string (corresponding to a specific version of the
package), or ‘t’ (which means to make available any installed version),
or ‘nil’ (which means no version; this disables the package, preventing
it from being made available).  A list element can also be the symbol
‘all’, which means to make available the latest installed version of any
package not named by the other list elements.  The default value is just
‘'(all)’.

   For example, if you set ‘package-load-list’ to
‘'((muse "3.20") all)’, then Emacs only makes available version 3.20 of
the ‘muse’ package, plus any installed version of packages other than
‘muse’.  Any other version of ‘muse’ that happens to be installed will
be ignored.  The ‘muse’ package will be listed in the package menu with
the ‘held’ status.

   Emacs byte code is quite stable, but it’s possible for byte code to
become outdated, or for the compiled files to rely on macros that have
changed in new versions of Emacs.  You can use the command
‘M-x package-recompile’ to recompile a particular package, or
‘M-x package-recompile-all’ to recompile all the packages.  (The latter
command might take quite a while to run if you have many installed
packages.)


File: emacs.info,  Node: Package Files,  Next: Fetching Package Sources,  Prev: Package Installation,  Up: Packages

49.4 Package Files and Directory Layout
=======================================

Each package is downloaded from the package archive in the form of a
single “package file”—either an Emacs Lisp source file, or a tar file
containing multiple Emacs Lisp source and other files.  Package files
are automatically retrieved, processed, and disposed of by the Emacs
commands that install packages.  Normally, you will not need to deal
directly with them, unless you are making a package (*note
(elisp)Packaging::).  Should you ever need to install a package directly
from a package file, use the command ‘M-x package-install-file’.

   Once installed, the contents of a package are placed in a
subdirectory of ‘~/.emacs.d/elpa/’ (you can change the name of that
directory by changing the variable ‘package-user-dir’).  The package
subdirectory is named ‘NAME-VERSION’, where NAME is the package name and
VERSION is its version string.

   In addition to ‘package-user-dir’, Emacs looks for installed packages
in the directories listed in ‘package-directory-list’.  These
directories are meant for system administrators to make Emacs packages
available system-wide; Emacs itself never installs packages there.  The
package subdirectories for ‘package-directory-list’ are laid out in the
same way as in ‘package-user-dir’.

   Deleting a package (*note Package Menu::) involves deleting the
corresponding package subdirectory.  This only works for packages
installed in ‘package-user-dir’; if told to act on a package in a
system-wide package directory, the deletion command signals an error.


File: emacs.info,  Node: Fetching Package Sources,  Prev: Package Files,  Up: Packages

49.5 Fetching Package Sources
=============================

By default ‘package-install’ downloads a Tarball from a package archive
and installs its files.  This might be inadequate if you wish to hack on
the package sources and share your changes with others.  In that case,
you may prefer to directly fetch and work on the upstream source.  This
often makes it easier to develop patches and report bugs.

   One way to do this is to use ‘package-vc-install’, to fetch the
source code for a package directly from source.  The command will also
automatically ensure that all files are byte-compiled and auto-loaded,
just like with a regular package.  Packages installed this way behave
just like any other package.  You can upgrade them using
‘package-upgrade’ or ‘package-upgrade-all’ and delete them again using
‘package-delete’.  They are even displayed in the regular package
listing.  If you just wish to clone the source of a package, without
adding it to the package list, use ‘package-vc-checkout’.

   With the source checkout, you might want to reproduce a bug against
the current development head or implement a new feature to scratch an
itch.  If the package metadata indicates how to contact the maintainer,
you can use the command ‘package-report-bug’ to report a bug via Email.
This report will include all the user options that you have customized.
If you have made a change you wish to share with the maintainers, first
commit your changes then use the command ‘package-vc-prepare-patch’ to
share it.  *Note Preparing Patches::.

   If you maintain your own packages you might want to use a local
checkout instead of cloning a remote repository.  You can do this by
using ‘package-vc-install-from-checkout’, which creates a symbolic link
from the package directory (*note Package Files::) to your checkout and
initializes the code.  Note that you might have to use
‘package-vc-rebuild’ to repeat the initialization and update the
autoloads.

49.5.1 Specifying Package Sources
---------------------------------

To install a package from source, Emacs must know where to get the
package’s source code (such as a code repository) and basic information
about the structure of the code (such as the main file in a multi-file
package).  A “package specification” describes these properties.

   When supported by a package archive (*note (elisp)Package
Archives::), Emacs can automatically download a package’s specification
from said archive.  If the first argument passed to ‘package-vc-install’
is a symbol naming a package, then Emacs will use the specification
provided by the archive for that package.

     ;; Emacs will download BBDB's specification from GNU ELPA:
     (package-vc-install 'bbdb)

   The first argument to ‘package-vc-install’ may also be a package
specification.  This allows you to install source packages from
locations other than the known archives listed in the user option
‘package-archives’.  A package specification is a list of the form
‘(NAME . SPEC)’, in which SPEC should be a property list using any of
the keys in the table below.

   For definitions of basic terms for working with code repositories and
version control systems, see *note (emacs)VCS Concepts::.

‘:url’
     A string providing the URL that specifies the repository from which
     to fetch the package’s source code.

‘:branch’
     A string providing the revision of the code to install.  Do not
     confuse this with a package’s version number.

‘:lisp-dir’
     A string providing the repository-relative name of the directory to
     use for loading the Lisp sources, which defaults to the root
     directory of the repository.

‘:main-file’
     A string providing the main file of the project, from which to
     gather package metadata.  If not given, the default is the package
     name with ".el" appended to it.

‘:doc’
     A string providing the repository-relative name of the
     documentation file from which to build an Info file.  This can be a
     Texinfo file or an Org file.

‘:vc-backend’
     A symbol naming the VC backend to use for downloading a copy of the
     package’s repository (*note (emacs)Version Control Systems::).  If
     omitted, Emacs will attempt to make a guess based on the provided
     URL, or, failing that, the process will fall back onto the value of
     ‘package-vc-default-backend’.

     ;; Specifying information manually:
     (package-vc-install
       '(bbdb :url "https://git.savannah.nongnu.org/git/bbdb.git"
              :lisp-dir "lisp"
              :doc "doc/bbdb.texi"))


File: emacs.info,  Node: Customization,  Next: Quitting,  Prev: Packages,  Up: Top

# /. 50 Customization
********************

This chapter describes some simple methods to customize the behavior of
Emacs.

   Apart from the methods described here, see *note X Resources:: for
information about using X resources to customize Emacs, and see *note
Keyboard Macros:: for information about recording and replaying keyboard
macros.  Making more far-reaching and open-ended changes involves
writing Emacs Lisp code; see *note Emacs Lisp: (elisp)Top.

* Menu:

* Easy Customization::  Convenient way to browse and change settings.
* Variables::           Many Emacs commands examine Emacs variables
                          to decide what to do; by setting variables,
                          you can control their functioning.
* Key Bindings::        The keymaps say what command each key runs.
                          By changing them, you can redefine keys.
* Init File::           How to write common customizations in the
                          initialization file.
* Authentication::      Keeping persistent authentication information.


File: emacs.info,  Node: Easy Customization,  Next: Variables,  Up: Customization

50.1 Easy Customization Interface
=================================

Emacs has many “settings” which you can change.  Most settings are
“customizable variables” (*note Variables::), which are also called
“user options”.  There is a huge number of customizable variables,
controlling numerous aspects of Emacs behavior; the variables documented
in this manual are listed in *note Variable Index::.  A separate class
of settings are the “faces”, which determine the fonts, colors, and
other attributes of text (*note Faces::).

   To browse and alter settings (both variables and faces), type ‘M-x
customize’.  This creates a “customization buffer”, which lets you
navigate through a logically organized list of settings, edit and set
their values, and save them permanently.

* Menu:

* Customization Groups::     How settings are classified.
* Browsing Custom::          Browsing and searching for settings.
* Changing a Variable::      How to edit an option’s value and set the option.
* Saving Customizations::    Saving customizations for future Emacs sessions.
* Face Customization::       How to edit the attributes of a face.
* Specific Customization::   Customizing specific settings or groups.
* Custom Themes::            Collections of customization settings.
* Creating Custom Themes::   How to create a new custom theme.


File: emacs.info,  Node: Customization Groups,  Next: Browsing Custom,  Up: Easy Customization

50.1.1 Customization Groups
---------------------------

Customization settings are organized into “customization groups”.  These
groups are collected into bigger groups, all the way up to a master
group called ‘Emacs’.

   ‘M-x customize’ creates a customization buffer that shows the
top-level ‘Emacs’ group.  It looks like this, in part:

     For help using this buffer, see [Easy Customization] in the [Emacs manual].

     ________________________________________ [ Search ]

      Operate on all settings in this buffer:
      [ Revert... ] [ Apply ] [ Apply and Save ]


     Emacs group: Customization of the One True Editor.
           [State]: visible group members are all at standard values.
           See also [Manual].

     [Editing]      Basic text editing facilities.
     [Convenience]  Convenience features for faster editing.

     ...MORE SECOND-LEVEL GROUPS...

The main part of this buffer shows the ‘Emacs’ customization group,
which contains several other groups (‘Editing’, ‘Convenience’, etc.).
The contents of those groups are not listed here, only one line of
documentation each.

   The “state” of the group indicates whether setting in that group has
been edited, set, or saved.  *Note Changing a Variable::.

   Most of the customization buffer is read-only, but it includes some
“editable fields” that you can edit.  For example, at the top of the
customization buffer is an editable field for searching for settings
(*note Browsing Custom::).  There are also “buttons” and “links”, which
you can activate by either clicking with the mouse, or moving point
there and typing ‘<RET>’.  For example, the group names like ‘[Editing]’
are links; activating one of these links brings up the customization
buffer for that group.

   In the customization buffer, you can type ‘<TAB>’ (‘widget-forward’)
to move forward to the next button or editable field.  ‘S-<TAB>’
(‘widget-backward’) moves back to the previous button or editable field.


File: emacs.info,  Node: Browsing Custom,  Next: Changing a Variable,  Prev: Customization Groups,  Up: Easy Customization

50.1.2 Browsing and Searching for Settings
------------------------------------------

From the top-level customization buffer created by ‘M-x customize’, you
can follow the links to the subgroups of the ‘Emacs’ customization
group.  These subgroups may contain settings for you to customize; they
may also contain further subgroups, dealing with yet more specialized
subsystems of Emacs.  As you navigate the hierarchy of customization
groups, you should find some settings that you want to customize.

   If you are interested in customizing a particular setting or
customization group, you can go straight there with the commands ‘M-x
customize-option’, ‘M-x customize-face’, or ‘M-x customize-group’.
*Note Specific Customization::.

   If you don’t know exactly what groups or settings you want to
customize, you can search for them using the editable search field at
the top of each customization buffer.  Here, you can type in a search
term—either one or more words separated by spaces, or a regular
expression (*note Regexps::).  Then type ‘<RET>’ in the field, or
activate the ‘Search’ button next to it, to switch to a customization
buffer containing groups and settings that match those terms.  Note,
however, that this feature only finds groups and settings that are
loaded in the current Emacs session.

   If you don’t want customization buffers to show the search field,
change the variable ‘custom-search-field’ to ‘nil’.

   The command ‘M-x customize-apropos’ is similar to using the search
field, except that it reads the search term(s) using the minibuffer.
*Note Specific Customization::.

   ‘M-x customize-browse’ is another way to browse the available
settings.  This command creates a special customization buffer, which
shows only the names of groups and settings, in a structured layout.
You can show the contents of a group, in the same buffer, by invoking
the ‘[+]’ button next to the group name.  When the group contents are
shown, the button changes to ‘[-]’; invoking that hides the group
contents again.  Each group or setting in this buffer has a link which
says ‘[Group]’, ‘[Option]’ or ‘[Face]’.  Invoking this link creates an
ordinary customization buffer showing just that group, option, or face;
this is the way to change settings that you find with ‘M-x
customize-browse’.


File: emacs.info,  Node: Changing a Variable,  Next: Saving Customizations,  Prev: Browsing Custom,  Up: Easy Customization

50.1.3 Changing a Variable
--------------------------

Here is an example of what a variable, or user option, looks like in the
customization buffer:

     [Hide] Kill Ring Max: 60
        [State]: STANDARD.
        Maximum length of kill ring before oldest elements are thrown away.

   The first line shows that the variable is named ‘kill-ring-max’,
formatted as ‘Kill Ring Max’ for easier viewing.  Its value is ‘120’.
The button labeled ‘[Hide]’, if activated, hides the variable’s value
and state; this is useful to avoid cluttering up the customization
buffer with very long values (for this reason, variables that have very
long values may start out hidden).  If you use the ‘[Hide]’ button, it
changes to ‘[Show Value]’, which you can activate to reveal the value
and state.  On a graphical display, the ‘[Hide]’ and ‘[Show Value]’
buttons are replaced with graphical triangles pointing downwards and
rightwards respectively.

   The line after the variable name indicates the “customization state”
of the variable: in this example, ‘STANDARD’ means you have not changed
the variable, so its value is the default one.  The ‘[State]’ button
gives a menu of operations for customizing the variable.

   Below the customization state is the documentation for the variable.
This is the same documentation that would be shown by the ‘C-h v’
command (*note Examining::).  If the documentation is more than one line
long, only one line may be shown.  If so, that line ends with a ‘[More]’
button; activate this to see the full documentation.

   To enter a new value for ‘Kill Ring Max’, just move point to the
value and edit it.  For example, type ‘M-d’ to delete the ‘60’ and type
in another number.  As you begin to alter the text, the ‘[State]’ line
will change:

     [State]: EDITED, shown value does not take effect until you
              set or save it.

Editing the value does not make it take effect right away.  To do that,
you must “set” the variable by activating the ‘[State]’ button and
choosing ‘Set for Current Session’.  Then the variable’s state becomes:

     [State]: SET for current session only.

You don’t have to worry about specifying a value that is not valid; the
‘Set for Current Session’ operation checks for validity and will not
install an unacceptable value.

   While editing certain kinds of values, such as file names, directory
names, and Emacs command names, you can perform completion with ‘C-M-i’
(‘widget-complete’), or the equivalent keys ‘M-<TAB>’ or ‘<ESC> <TAB>’.
This behaves much like minibuffer completion (*note Completion::).

   Typing ‘<RET>’ on an editable value field moves point forward to the
next field or button, like ‘<TAB>’.  You can thus type ‘<RET>’ when you
are finished editing a field, to move on to the next button or field.
To insert a newline within an editable field, use ‘C-o’ or ‘C-q C-j’.

   For some variables, there is only a fixed set of legitimate values,
and you are not allowed to edit the value directly.  Instead, a ‘[Value
Menu]’ button appears before the value; activating this button presents
a choice of values.  For a boolean “on or off” value, the button says
‘[Toggle]’, and flips the value.  After using the ‘[Value Menu]’ or
‘[Toggle]’ button, you must again set the variable to make the chosen
value take effect.

   Some variables have values with complex structure.  For example, the
value of ‘minibuffer-frame-alist’ is an association list.  Here is how
it appears in the customization buffer:

     [Hide] Minibuffer Frame Alist:
     [INS] [DEL] Parameter: width
                 Value: 80
     [INS] [DEL] Parameter: height
                 Value: 2
     [INS]
        [ State ]: STANDARD.
        Alist of parameters for the initial minibuffer frame. [Hide]
        [...more lines of documentation...]

In this case, each association in the list consists of two items, one
labeled ‘Parameter’ and one labeled ‘Value’; both are editable fields.
You can delete an association from the list with the ‘[DEL]’ button next
to it.  To add an association, use the ‘[INS]’ button at the position
where you want to insert it; the very last ‘[INS]’ button inserts at the
end of the list.

   When you set a variable, the new value takes effect only in the
current Emacs session.  To “save” the value for future sessions, use the
‘[State]’ button and select the ‘Save for Future Sessions’ operation.
*Note Saving Customizations::.

   You can also restore the variable to its standard value by using the
‘[State]’ button and selecting the ‘Erase Customization’ operation.
There are actually four reset operations:

‘Undo Edits’
     If you have modified but not yet set the variable, this restores
     the text in the customization buffer to match the actual value.

‘Revert This Session's Customizations’
     This restores the value of the variable to the last saved value, if
     there was one.  Otherwise it restores the standard value.  It
     updates the text accordingly.

‘Erase Customization’
     This sets the variable to its standard value.  Any saved value that
     you have is also eliminated.

‘Set to Backup Value’
     This sets the variable to a previous value that was set in the
     customization buffer in this session.  If you customize a variable
     and then reset it, which discards the customized value, you can get
     the discarded value back again with this operation.

   Sometimes it is useful to record a comment about a specific
customization.  Use the ‘Add Comment’ item from the ‘[State]’ menu to
create a field for entering the comment.

   Near the top of the customization buffer are two lines of buttons:

      Operate on all settings in this buffer:
      [Revert...] [Apply] [Apply and Save]

The ‘[Revert...]’ button drops a menu with the first 3 reset operations
described above.  The ‘[Apply]’ button applies the settings for the
current session.  The ‘[Apply and Save]’ button applies the settings and
saves them for future sessions; this button does not appear if Emacs was
started with the ‘-q’ or ‘-Q’ option (*note Initial Options::).

   The command ‘C-c C-c’ (‘Custom-set’) is equivalent to using the ‘[Set
for Current Session]’ button.  The command ‘C-x C-s’ (‘Custom-save’) is
like using the ‘[Save for Future Sessions]’ button.

   The ‘[Exit]’ button switches out of the customization buffer, and
buries the buffer at the bottom of the buffer list.  To make it kill the
customization buffer instead, change the variable
‘custom-buffer-done-kill’ to ‘t’.


File: emacs.info,  Node: Saving Customizations,  Next: Face Customization,  Prev: Changing a Variable,  Up: Easy Customization

50.1.4 Saving Customizations
----------------------------

In the customization buffer, you can “save” a customization setting by
choosing the ‘Save for Future Sessions’ choice from its ‘[State]’
button.  The ‘C-x C-s’ (‘Custom-save’) command, or the ‘[Apply and
Save]’ button at the top of the customization buffer, saves all
applicable settings in the buffer.

   Saving works by writing code to a file, usually your initialization
file (*note Init File::).  Future Emacs sessions automatically read this
file at startup, which sets up the customizations again.

   You can choose to save customizations somewhere other than your
initialization file.  To make this work, you must add a couple of lines
of code to your initialization file, to set the variable ‘custom-file’
to the name of the desired file, and to load that file.  For example:

     (setq custom-file "~/.config/emacs-custom.el")
     (load custom-file)

   You can even specify different customization files for different
Emacs versions, like this:

     (cond ((< emacs-major-version 28)
            ;; Emacs 27 customization.
            (setq custom-file "~/.config/custom-27.el"))
           ((and (= emacs-major-version 26)
                 (< emacs-minor-version 3))
            ;; Emacs 26 customization, before version 26.3.
            (setq custom-file "~/.config/custom-26.el"))
           (t
            ;; Emacs version 28.1 or later.
            (setq custom-file "~/.config/emacs-custom.el")))

     (load custom-file)

   If Emacs was invoked with the ‘-q’ or ‘--no-init-file’ options (*note
Initial Options::), it will not let you save your customizations in your
initialization file.  This is because saving customizations from such a
session would wipe out all the other customizations you might have on
your initialization file.

   Please note that any customizations you have not chosen to save for
future sessions will be lost when you terminate Emacs.  If you’d like to
be prompted about unsaved customizations at termination time, add the
following to your initialization file:

     (add-hook 'kill-emacs-query-functions
               'custom-prompt-customize-unsaved-options)


File: emacs.info,  Node: Face Customization,  Next: Specific Customization,  Prev: Saving Customizations,  Up: Easy Customization

50.1.5 Customizing Faces
------------------------

You can customize faces (*note Faces::), which determine how Emacs
displays different types of text.  Customization groups can contain both
variables and faces.

   For example, in programming language modes, source code comments are
shown with ‘font-lock-comment-face’ (*note Font Lock::).  In a
customization buffer, that face appears like this, after you click on
the ‘[Show All Attributes]’ link:

     [Hide] Font Lock Comment Face:[sample]
        [State] : STANDARD.
        Font Lock mode face used to highlight comments.
        [ ] Font Family: --
        [ ] Font Foundry: --
        [ ] Width: --
        [ ] Height: --
        [ ] Weight: --
        [ ] Slant: --
        [ ] Underline: --
        [ ] Overline: --
        [ ] Strike-through: --
        [ ] Box around text: --
        [ ] Inverse-video: --
        [X] Foreground: Firebrick     [Choose]  (sample)
        [ ] Background: --
        [ ] Stipple: --
        [ ] Inherit: --
        [Hide Unused Attributes]

The first three lines show the name, ‘[State]’ button, and documentation
for the face.  Below that is a list of “face attributes”.  In front of
each attribute is a checkbox.  A filled checkbox, ‘[X]’, means that the
face specifies a value for this attribute; an empty checkbox, ‘[ ]’,
means that the face does not specify any special value for the
attribute.  You can activate a checkbox to specify or unspecify its
attribute.

   A face does not have to specify every single attribute; in fact, most
faces only specify a few attributes.  In the above example,
‘font-lock-comment-face’ only specifies the foreground color.  Any
unspecified attribute is taken from the special face named ‘default’,
whose attributes are all specified.  The ‘default’ face is the face used
to display any text that does not have an explicitly-assigned face;
furthermore, its background color attribute serves as the background
color of the frame.

   The ‘[Hide Unused Attributes]’ button, at the end of the attribute
list, hides the unspecified attributes of the face.  When attributes are
being hidden, the button changes to ‘[Show All Attributes]’, which
reveals the entire attribute list.  The customization buffer may start
out with unspecified attributes hidden, to avoid cluttering the
interface.

   When an attribute is specified, you can change its value in the usual
ways.

   Foreground and background colors can be specified using either color
names or RGB triplets (*note Colors::).  You can also use the ‘[Choose]’
button to switch to a list of color names; select a color with ‘<RET>’
in that buffer to put the color name in the value field.

   Setting, saving and resetting a face work like the same operations
for variables (*note Changing a Variable::).

   A face can specify different appearances for different types of
displays.  For example, a face can make text red on a color display, but
use a bold font on a monochrome display.  To specify multiple
appearances for a face, select ‘For All Kinds of Displays’ in the menu
you get from invoking ‘[State]’.


File: emacs.info,  Node: Specific Customization,  Next: Custom Themes,  Prev: Face Customization,  Up: Easy Customization

50.1.6 Customizing Specific Items
---------------------------------

‘M-x customize-option <RET> OPTION <RET>’
‘M-x customize-variable <RET> OPTION <RET>’
     Set up a customization buffer for just one user option, OPTION.

‘M-x customize-face <RET> FACE <RET>’
     Set up a customization buffer for just one face, FACE.

‘M-x customize-icon <RET> FACE <RET>’
     Set up a customization buffer for just one icon, ICON.

‘M-x customize-group <RET> GROUP <RET>’
     Set up a customization buffer for just one group, GROUP.

‘M-x customize-apropos <RET> REGEXP <RET>’
     Set up a customization buffer for all the settings and groups that
     match REGEXP.

‘M-x customize-changed <RET> VERSION <RET>’
     Set up a customization buffer with all the user options, faces and
     groups whose meaning has changed since (or been added after) Emacs
     version VERSION.

‘M-x customize-saved’
     Set up a customization buffer containing all settings that you have
     saved with customization buffers.

‘M-x customize-unsaved’
     Set up a customization buffer containing all settings that you have
     set but not saved.

   If you want to customize a particular user option, type ‘M-x
customize-option’.  This reads the variable name, and sets up the
customization buffer with just that one user option.  When entering the
variable name into the minibuffer, completion is available, but only for
the names of variables that have been loaded into Emacs.

   Likewise, you can customize a specific face using ‘M-x
customize-face’.  You can set up a customization buffer for a specific
customization group using ‘M-x customize-group’.

   ‘M-x customize-apropos’ prompts for a search term—either one or more
words separated by spaces, or a regular expression—and sets up a
customization buffer for all _loaded_ settings and groups with matching
names.  This is like using the search field at the top of the
customization buffer (*note Customization Groups::).

   When you upgrade to a new Emacs version, you might want to consider
customizing new settings, and settings whose meanings or default values
have changed.  To do this, use ‘M-x customize-changed’ and specify a
previous Emacs version number using the minibuffer.  It creates a
customization buffer which shows all the settings and groups whose
definitions have been changed since the specified version, loading them
if necessary.

   If you change settings and then decide the change was a mistake, you
can use two commands to revisit your changes.  Use ‘M-x customize-saved’
to customize settings that you have saved.  Use ‘M-x customize-unsaved’
to customize settings that you have set but not saved.


File: emacs.info,  Node: Custom Themes,  Next: Creating Custom Themes,  Prev: Specific Customization,  Up: Easy Customization

50.1.7 Custom Themes
--------------------

“Custom themes” are collections of settings that can be enabled or
disabled as a unit.  You can use Custom themes to switch easily between
various collections of settings, and to transfer such collections from
one computer to another.

   A Custom theme is stored as an Emacs Lisp source file.  If the name
of the Custom theme is NAME, the theme file is named ‘NAME-theme.el’.
*Note Creating Custom Themes::, for the format of a theme file and how
to make one.

   Type ‘M-x customize-themes’ to switch to a buffer named ‘*Custom
Themes*’, which lists the Custom themes that Emacs knows about.  By
default, Emacs looks for theme files in two locations: the directory
specified by the variable ‘custom-theme-directory’ (which defaults to
‘~/.emacs.d/’), and a directory named ‘etc/themes’ in your Emacs
installation (see the variable ‘data-directory’).  The latter contains
several Custom themes distributed with Emacs that customize Emacs’s
faces to fit various color schemes.  (Note, however, that Custom themes
need not be restricted to this purpose; they can be used to customize
variables too.)

   If you want Emacs to look for Custom themes in some other directory,
add the directory to the list variable ‘custom-theme-load-path’.  Its
default value is ‘(custom-theme-directory t)’; here, the symbol
‘custom-theme-directory’ has the special meaning of the value of the
variable ‘custom-theme-directory’, while ‘t’ stands for the built-in
theme directory ‘etc/themes’.  The themes listed in the ‘*Custom
Themes*’ buffer are those found in the directories specified by
‘custom-theme-load-path’.

   In the ‘*Custom Themes*’ buffer, you can activate the checkbox next
to a Custom theme to enable or disable the theme for the current Emacs
session.  When a Custom theme is enabled, all of its settings (variables
and faces) take effect in the Emacs session.  To apply the choice of
theme(s) to future Emacs sessions, type ‘C-x C-s’ (‘custom-theme-save’)
or use the ‘[Save Theme Settings]’ button.

   When you first enable a Custom theme, Emacs displays the contents of
the theme file and asks if you really want to load it.  Because loading
a Custom theme can execute arbitrary Lisp code, you should only say yes
if you know that the theme is safe; in that case, Emacs offers to
remember in the future that the theme is safe(this is done by saving the
theme file’s SHA-256 hash to the variable ‘custom-safe-themes’; if you
want to treat all themes as safe, change its value to ‘t’).  Themes that
come with Emacs (in the ‘etc/themes’ directory) are exempt from this
check, and are always considered safe.

   Setting or saving Custom themes actually works by customizing the
variable ‘custom-enabled-themes’.  The value of this variable is a list
of Custom theme names (as Lisp symbols, e.g., ‘tango’).  Instead of
using the ‘*Custom Themes*’ buffer to set ‘custom-enabled-themes’, you
can customize the variable using the usual customization interface,
e.g., with ‘M-x customize-option’.  Note that Custom themes are not
allowed to set ‘custom-enabled-themes’ themselves.

   Any customizations that you make through the customization buffer
take precedence over theme settings.  This lets you easily override
individual theme settings that you disagree with.  If settings from two
different themes overlap, the theme occurring earlier in
‘custom-enabled-themes’ takes precedence.  In the customization buffer,
if a setting has been changed from its default by a Custom theme, its
‘State’ display shows ‘THEMED’ instead of ‘STANDARD’.

   You can enable a specific Custom theme in the current Emacs session
by typing ‘M-x load-theme’.  This prompts for a theme name, loads the
theme from the theme file, and enables it.  If a theme file has been
loaded before, you can enable the theme without loading its file by
typing ‘M-x enable-theme’.  To disable a Custom theme, type ‘M-x
disable-theme’.

   To see a description of a Custom theme, type ‘?’ on its line in the
‘*Custom Themes*’ buffer; or type ‘M-x describe-theme’ anywhere in Emacs
and enter the theme name.

   Some themes have variants (most often just two: light and dark).  You
can switch to another variant using ‘M-x theme-choose-variant’.  If the
currently active theme has only one other variant, it will be selected;
if there are more variants, the command will prompt you which one to
switch to.

   Note that ‘theme-choose-variant’ only works if a single theme is
active.


File: emacs.info,  Node: Creating Custom Themes,  Prev: Custom Themes,  Up: Easy Customization

50.1.8 Creating Custom Themes
-----------------------------

You can define a Custom theme using an interface similar to the
customization buffer, by typing ‘M-x customize-create-theme’.  This
switches to a buffer named ‘*Custom Theme*’.  It also offers to insert
some common Emacs faces into the theme (a convenience, since Custom
themes are often used to customize faces).  If you answer no, the theme
will initially contain no settings.

   Near the top of the ‘*Custom Theme*’ buffer, there are editable
fields where you can enter the theme’s name and description.  The name
can be anything except ‘user’.  The description is the one that will be
shown when you invoke ‘M-x describe-theme’ for the theme.  Its first
line should be a brief one-sentence summary; in the buffer made by ‘M-x
customize-themes’, this sentence is displayed next to the theme name.

   To add a new setting to the theme, use the ‘[Insert Additional Face]’
or ‘[Insert Additional Variable]’ buttons.  Each button reads a face or
variable name using the minibuffer, with completion, and inserts a
customization entry for the face or variable.  You can edit the variable
values or face attributes in the same way as in a normal customization
buffer.  To remove a face or variable from the theme, uncheck the
checkbox next to its name.

   After specifying the Custom theme’s faces and variables, type ‘C-x
C-s’ (‘custom-theme-write’) or use the buffer’s ‘[Save Theme]’ button.
This saves the theme file, named ‘NAME-theme.el’ where NAME is the theme
name, in the directory named by ‘custom-theme-directory’.

   From the ‘*Custom Theme*’ buffer, you can view and edit an existing
Custom theme by activating the ‘[Visit Theme]’ button and specifying the
theme name.  You can also add the settings of another theme into the
buffer, using the ‘[Merge Theme]’ button.  You can import your non-theme
settings into a Custom theme by using the ‘[Merge Theme]’ button and
specifying the special theme named ‘user’.

   A theme file is simply an Emacs Lisp source file, and loading the
Custom theme works by loading the Lisp file.  Therefore, you can edit a
theme file directly instead of using the ‘*Custom Theme*’ buffer.  *Note
(elisp)Custom Themes::, for details.


File: emacs.info,  Node: Variables,  Next: Key Bindings,  Prev: Easy Customization,  Up: Customization

50.2 Variables
==============

A “variable” is a Lisp symbol which has a value.  The symbol’s name is
also called the “variable name”.  A variable name can contain any
characters that can appear in a file, but most variable names consist of
ordinary words separated by hyphens.

   The name of the variable serves as a compact description of its role.
Most variables also have a “documentation string”, which describes what
the variable’s purpose is, what kind of value it should have, and how
the value will be used.  You can view this documentation using the help
command ‘C-h v’ (‘describe-variable’).  *Note Examining::.

   Emacs uses many Lisp variables for internal record keeping, but the
most interesting variables for a non-programmer user are those meant for
users to change—these are called “customizable variables” or “user
options” (*note Easy Customization::).  In the following sections, we
will describe other aspects of Emacs variables, such as how to set them
outside Customize.

   Emacs Lisp allows any variable (with a few exceptions) to have any
kind of value.  However, many variables are meaningful only if assigned
values of a certain type.  For example, only numbers are meaningful
values for ‘kill-ring-max’, which specifies the maximum length of the
kill ring (*note Earlier Kills::); if you give ‘kill-ring-max’ a string
value, commands such as ‘C-y’ (‘yank’) will signal an error.  On the
other hand, some variables don’t care about type; for instance, if a
variable has one effect for ‘nil’ values and another effect for
non-‘nil’ values, then any value that is not the symbol ‘nil’ induces
the second effect, regardless of its type (by convention, we usually use
the value ‘t’—a symbol which stands for “true”—to specify a non-‘nil’
value).  If you set a variable using the customization buffer, you need
not worry about giving it an invalid type: the customization buffer
usually only allows you to enter meaningful values.  When in doubt, use
‘C-h v’ (‘describe-variable’) to check the variable’s documentation
string to see what kind of value it expects (*note Examining::).

* Menu:

* Examining::           Examining or setting one variable’s value.
* Hooks::               Hook variables let you specify programs for parts
                          of Emacs to run on particular occasions.
* Locals::              Per-buffer values of variables.
* File Variables::      How files can specify variable values.
* Directory Variables:: How variable values can be specified by directory.
* Connection Variables:: Variables which are valid for buffers with a
                           remote default directory.


File: emacs.info,  Node: Examining,  Next: Hooks,  Up: Variables

50.2.1 Examining and Setting Variables
--------------------------------------

‘C-h v VAR <RET>’
     Display the value and documentation of variable VAR
     (‘describe-variable’).

‘M-x set-variable <RET> VAR <RET> VALUE <RET>’
     Change the value of variable VAR to VALUE.

   To examine the value of a variable, use ‘C-h v’
(‘describe-variable’).  This reads a variable name using the minibuffer,
with completion, and displays both the value and the documentation of
the variable.  For example,

     C-h v fill-column <RET>

displays something like this:

     fill-column is a variable defined in ‘C source code’.
     Its value is 70

       Automatically becomes buffer-local when set.
       This variable is safe as a file local variable if its value
       satisfies the predicate ‘integerp’.
       Probably introduced at or before Emacs version 18.

     Documentation:
     Column beyond which automatic line-wrapping should happen.
     Interactively, you can set the buffer local value using C-x f.

     You can customize this variable.

The line that says ‘You can customize the variable’ indicates that this
variable is a user option.  ‘C-h v’ is not restricted to user options;
it allows non-customizable variables too.

   The most convenient way to set a specific customizable variable is
with ‘M-x set-variable’.  This reads the variable name with the
minibuffer (with completion), and then reads a Lisp expression for the
new value using the minibuffer a second time (you can insert the old
value into the minibuffer for editing via ‘M-n’).  For example,

     M-x set-variable <RET> fill-column <RET> 75 <RET>

sets ‘fill-column’ to 75.

   ‘M-x set-variable’ is limited to customizable variables, but you can
set any variable with a Lisp expression like this:

     (setq fill-column 75)

To execute such an expression, type ‘M-:’ (‘eval-expression’) and enter
the expression in the minibuffer (*note Lisp Eval::).  Alternatively, go
to the ‘*scratch*’ buffer, type in the expression, and then type ‘C-j’
(*note Lisp Interaction::).

   Setting variables, like all means of customizing Emacs except where
otherwise stated, affects only the current Emacs session.  The only way
to alter the variable in future sessions is to put something in your
initialization file (*note Init File::).

   If you’re setting a customizable variable in your initialization
file, and you don’t want to use the Customize interface, you can use the
‘setopt’ macro.  For instance:

     (setopt fill-column 75)

   This works the same as ‘setq’, but if the variable has any special
setter functions, they will be run automatically when using ‘setopt’.
You can also use ‘setopt’ on other, non-customizable variables, but this
is less efficient than using ‘setq’.


File: emacs.info,  Node: Hooks,  Next: Locals,  Prev: Examining,  Up: Variables

50.2.2 Hooks
------------

“Hooks” are an important mechanism for customizing Emacs.  A hook is a
Lisp variable which holds a list of functions, to be called on some
well-defined occasion.  (This is called “running the hook”.)  The
individual functions in the list are called the “hook functions” of the
hook.  For example, the hook ‘kill-emacs-hook’ runs just before exiting
Emacs (*note Exiting::).

   Most hooks are “normal hooks”.  This means that when Emacs runs the
hook, it calls each hook function in turn, with no arguments.  We have
made an effort to keep most hooks normal, so that you can use them in a
uniform way.  Every variable whose name ends in ‘-hook’ is a normal
hook.

   A few hooks are “abnormal hooks”.  Their names end in ‘-functions’,
instead of ‘-hook’ (some old code may also use the deprecated suffix
‘-hooks’).  What makes these hooks abnormal is the way its functions are
called—perhaps they are given arguments, or perhaps the values they
return are used in some way.  For example,
‘find-file-not-found-functions’ is abnormal because as soon as one hook
function returns a non-‘nil’ value, the rest are not called at all
(*note Visiting::).  The documentation of each abnormal hook variable
explains how its functions are used.

   You can set a hook variable with ‘setq’ like any other Lisp variable,
but the recommended way to add a function to a hook (either normal or
abnormal) is to use ‘add-hook’, as shown by the following examples.
*Note (elisp)Hooks::, for details.

   Most major modes run one or more “mode hooks” as the last step of
initialization.  Mode hooks are a convenient way to customize the
behavior of individual modes; they are always normal.  For example,
here’s how to set up a hook to turn on Auto Fill mode in Text mode and
other modes based on Text mode:

     (add-hook 'text-mode-hook 'auto-fill-mode)

This works by calling ‘auto-fill-mode’, which enables the minor mode
when no argument is supplied (*note Minor Modes::).  Next, suppose you
don’t want Auto Fill mode turned on in LaTeX mode, which is one of the
modes based on Text mode.  You can do this with the following additional
line:

     (add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))

Here we have used the special macro ‘lambda’ to construct an anonymous
function (*note (elisp)Lambda Expressions::), which calls
‘auto-fill-mode’ with an argument of ‘-1’ to disable the minor mode.
Because LaTeX mode runs ‘latex-mode-hook’ after running
‘text-mode-hook’, the result leaves Auto Fill mode disabled.

   Here is a more complex example, showing how to use a hook to
customize the indentation of C code:

     (setq my-c-style
       '((c-comment-only-line-offset . 4)
         (c-cleanup-list . (scope-operator
                            empty-defun-braces
                            defun-close-semi))))

     (add-hook 'c-mode-common-hook
       (lambda () (c-add-style "my-style" my-c-style t)))

   Major mode hooks also apply to other major modes “derived” from the
original mode (*note (elisp)Derived Modes::).  For instance, HTML mode
is derived from Text mode (*note HTML Mode::); when HTML mode is
enabled, it runs ‘text-mode-hook’ before running ‘html-mode-hook’.  This
provides a convenient way to use a single hook to affect several related
modes.  In particular, if you want to apply a hook function to any
programming language mode, add it to ‘prog-mode-hook’; Prog mode is a
major mode that does little else than to let other major modes inherit
from it, exactly for this purpose.

   It is best to design your hook functions so that the order in which
they are executed does not matter.  Any dependence on the order is
asking for trouble.  However, the order is predictable: the hook
functions are executed in the order they appear in the hook.

   If you play with adding various different versions of a hook function
by calling ‘add-hook’ over and over, remember that all the versions you
added will remain in the hook variable together.  You can clear out
individual functions by calling ‘remove-hook’, or do ‘(setq
HOOK-VARIABLE nil)’ to remove everything.

   If the hook variable is buffer-local, the buffer-local variable will
be used instead of the global variable.  However, if the buffer-local
variable contains the element ‘t’, the global hook variable will be run
as well.


File: emacs.info,  Node: Locals,  Next: File Variables,  Prev: Hooks,  Up: Variables

50.2.3 Local Variables
----------------------

‘M-x make-local-variable <RET> VAR <RET>’
     Make variable VAR have a local value in the current buffer.

‘M-x kill-local-variable <RET> VAR <RET>’
     Make variable VAR use its global value in the current buffer.

‘M-x make-variable-buffer-local <RET> VAR <RET>’
     Mark variable VAR so that setting it will make it local to the
     buffer that is current at that time.

   Almost any variable can be made “local” to a specific Emacs buffer.
This means that its value in that buffer is independent of its value in
other buffers.  A few variables are always local in every buffer.  Every
other Emacs variable has a “global” value which is in effect in all
buffers that have not made the variable local.

   ‘M-x make-local-variable’ reads the name of a variable and makes it
local to the current buffer.  Changing its value subsequently in this
buffer will not affect others, and changes in its global value will not
affect this buffer.

   ‘M-x make-variable-buffer-local’ marks a variable so it will become
local automatically whenever it is set.  More precisely, once a variable
has been marked in this way, the usual ways of setting the variable
automatically do ‘make-local-variable’ first.  We call such variables
“per-buffer” variables.  Many variables in Emacs are normally
per-buffer; the variable’s document string tells you when this is so.  A
per-buffer variable’s global value is normally never effective in any
buffer, but it still has a meaning: it is the initial value of the
variable for each new buffer.

   Major modes (*note Major Modes::) always make variables local to the
buffer before setting the variables.  This is why changing major modes
in one buffer has no effect on other buffers.  Minor modes also work by
setting variables—normally, each minor mode has one controlling variable
which is non-‘nil’ when the mode is enabled (*note Minor Modes::).  For
many minor modes, the controlling variable is per buffer, and thus
always buffer-local.  Otherwise, you can make it local in a specific
buffer like any other variable.

   A few variables cannot be local to a buffer because they are always
local to each display instead (*note Multiple Displays::).  If you try
to make one of these variables buffer-local, you’ll get an error
message.

   ‘M-x kill-local-variable’ makes a specified variable cease to be
local to the current buffer.  The global value of the variable
henceforth is in effect in this buffer.  Setting the major mode kills
all the local variables of the buffer except for a few variables
specially marked as “permanent locals”.

   To set the global value of a variable, regardless of whether the
variable has a local value in the current buffer, you can use the Lisp
construct ‘setq-default’.  This construct is used just like ‘setq’, but
it sets variables’ global values instead of their local values (if any).
When the current buffer does have a local value, the new global value
may not be visible until you switch to another buffer.  Here is an
example:

     (setq-default fill-column 75)

‘setq-default’ is the only way to set the global value of a variable
that has been marked with ‘make-variable-buffer-local’.

   Lisp programs can use ‘default-value’ to look at a variable’s default
value.  This function takes a symbol as argument and returns its default
value.  The argument is evaluated; usually you must quote it explicitly.
For example, here’s how to obtain the default value of ‘fill-column’:

     (default-value 'fill-column)


File: emacs.info,  Node: File Variables,  Next: Directory Variables,  Prev: Locals,  Up: Variables

50.2.4 Local Variables in Files
-------------------------------

A file can specify local variable values to use when editing the file
with Emacs.  Visiting the file or setting a major mode checks for local
variable specifications; it automatically makes these variables local to
the buffer, and sets them to the values specified in the file.

   File local variables override directory local variables (*note
Directory Variables::), if any are specified for a file’s directory.

* Menu:

* Specifying File Variables:: Specifying file local variables.
* Safe File Variables::       Making sure file local variables are safe.


File: emacs.info,  Node: Specifying File Variables,  Next: Safe File Variables,  Up: File Variables

50.2.4.1 Specifying File Variables
..................................

There are two ways to specify file local variable values: in the first
line, or with a local variables list.  Here’s how to specify them in the
first line:

     -*- mode: MODENAME; VAR: VALUE; ... -*-

You can specify any number of variable/value pairs in this way, each
pair with a colon and semicolon.  The special variable/value pair ‘mode:
MODENAME;’, if present, specifies a major mode (without the “-mode”
suffix).  The VALUEs are used literally, and not evaluated.

   You can use ‘M-x add-file-local-variable-prop-line’ instead of adding
entries by hand.  This command prompts for a variable and value, and
adds them to the first line in the appropriate way.  ‘M-x
delete-file-local-variable-prop-line’ prompts for a variable, and
deletes its entry from the line.  The command ‘M-x
copy-dir-locals-to-file-locals-prop-line’ copies the current
directory-local variables to the first line (*note Directory
Variables::).

   Here is an example first line that specifies Lisp mode and sets two
variables with numeric values:

     ;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-

Aside from ‘mode’, other keywords that have special meanings as file
variables are ‘coding’, ‘unibyte’, and ‘eval’.  These are described
below.

   In shell scripts, the first line is used to identify the script
interpreter, so you cannot put any local variables there.  To
accommodate this, Emacs looks for local variable specifications in the
_second_ line if the first line specifies an interpreter.  The same is
true for man pages which start with the magic string ‘'\"’ to specify a
list of troff preprocessors (not all do, however).

   Apart from using a ‘-*-’ line, you can define file local variables
using a “local variables list” near the end of the file.  The start of
the local variables list should be no more than 3000 characters from the
end of the file, and must be on the last page if the file is divided
into pages.

   If a file has both a local variables list and a ‘-*-’ line, Emacs
processes _everything_ in the ‘-*-’ line first, and _everything_ in the
local variables list afterward.  The exception to this is a major mode
specification.  Emacs applies this first, wherever it appears, since
most major modes kill all local variables as part of their
initialization.

   A local variables list starts with a line containing the string
‘Local Variables:’, and ends with a line containing the string ‘End:’.
In between come the variable names and values, one set per line, like
this:

     /* Local Variables:  */
     /* mode: c           */
     /* comment-column: 0 */
     /* End:              */

In this example, each line starts with the prefix ‘/*’ and ends with the
suffix ‘*/’.  Emacs recognizes the prefix and suffix by finding them
surrounding the magic string ‘Local Variables:’, on the first line of
the list; it then automatically discards them from the other lines of
the list.  The usual reason for using a prefix and/or suffix is to embed
the local variables list in a comment, so it won’t confuse other
programs that the file is intended for.  The example above is for the C
programming language, where comments start with ‘/*’ and end with ‘*/’.

   If some unrelated text might look to Emacs as a local variables list,
you can countermand that by inserting a form-feed character (a page
delimiter, *note Pages::) after that text.  Emacs only looks for
file-local variables in the last page of a file, after the last page
delimiter.

   Instead of typing in the local variables list directly, you can use
the command ‘M-x add-file-local-variable’.  This prompts for a variable
and value, and adds them to the list, adding the ‘Local Variables:’
string and start and end markers as necessary.  The command ‘M-x
delete-file-local-variable’ deletes a variable from the list.  ‘M-x
copy-dir-locals-to-file-locals’ copies directory-local variables to the
list (*note Directory Variables::).

   As with the ‘-*-’ line, the variables in a local variables list are
used literally, and are not evaluated first.  If you want to split a
long string value across multiple lines of the file, you can use
backslash-newline, which is ignored in Lisp string constants; you should
put the prefix and suffix on each line, even lines that start or end
within the string, as they will be stripped off when processing the
list.  Here is an example:

     # Local Variables:
     # compile-command: "cc foo.c -Dfoo=bar -Dhack=whatever \
     #   -Dmumble=blaah"
     # End:

   Some names have special meanings in a local variables list:

   • ‘mode’ enables the specified major mode.

   • ‘eval’ evaluates the specified Lisp expression (the value returned
     by that expression is ignored).

   • ‘coding’ specifies the coding system for character code conversion
     of this file.  *Note Coding Systems::.

   • ‘unibyte’ says to load or compile a file of Emacs Lisp in unibyte
     mode, if the value is ‘t’.  *Note Disabling Multibyte Characters:
     (elisp)Disabling Multibyte.

These four keywords are not really variables; setting them in any other
context has no special meaning.

   If you’re editing a file across Emacs versions, and a new mode has
been introduced to handle a file in a newer Emacs version, you can use
several ‘mode’ entries to use the new mode (called ‘my-new-mode’) in the
new Emacs, and fall back to the old mode (called ‘my-old-mode’) in older
Emacs versions.  If you’re enabling the modes in the first line of the
file, can say:

     -*- mode: my-old; mode: my-new -*-

   Emacs will use the final defined mode it finds, so in older Emacs
versions it will ignore ‘my-new-mode’, while in Emacs versions where
‘my-new-mode’ is defined, it’ll ignore ‘my-old-mode’.  Similarly, in a
local variable block at the end of the file:

     Local variables:
     mode: my-old
     mode: my-new

   Do not use the ‘mode’ keyword for minor modes.  To enable or disable
a minor mode in a local variables list, use the ‘eval’ keyword with a
Lisp expression that runs the mode command (*note Minor Modes::).  For
example, the following local variables list enables ElDoc mode (*note
Programming Language Doc::) by calling ‘eldoc-mode’ with no argument
(calling it with an argument of 1 would do the same), and disables Font
Lock mode (*note Font Lock::) by calling ‘font-lock-mode’ with an
argument of −1.

     ;; Local Variables:
     ;; eval: (eldoc-mode)
     ;; eval: (font-lock-mode -1)
     ;; End:

Note, however, that it is often a mistake to specify minor modes this
way.  Minor modes represent individual user preferences, and it may be
inappropriate to impose your preferences on another user who might edit
the file.  If you wish to automatically enable or disable a minor mode
in a situation-dependent way, it is often better to do it in a major
mode hook (*note Hooks::).

   Use the command ‘M-x normal-mode’ to reset the local variables and
major mode of a buffer according to the file name and contents,
including the local variables list if any.  *Note Choosing Modes::.


File: emacs.info,  Node: Safe File Variables,  Prev: Specifying File Variables,  Up: File Variables

50.2.4.2 Safety of File Variables
.................................

File-local variables can be dangerous; when you visit someone else’s
file, there’s no telling what its local variables list could do to your
Emacs.  Improper values of the ‘eval’ “variable”, and other variables
such as ‘load-path’, could execute Lisp code you didn’t intend to run.

   Therefore, whenever Emacs encounters file local variable values that
are not known to be safe, it displays the file’s entire local variables
list, and asks you for confirmation before setting them.  You can type
‘y’ or <SPC> to put the local variables list into effect, or ‘n’ to
ignore it.  When Emacs is run in batch mode (*note Initial Options::),
it can’t really ask you, so it assumes the answer ‘n’.

   Emacs normally recognizes certain variable/value pairs as safe.  For
instance, it is safe to give ‘comment-column’ or ‘fill-column’ any
integer value.  If a file specifies only known-safe variable/value
pairs, Emacs does not ask for confirmation before setting them.
Otherwise, you can tell Emacs to record all the variable/value pairs in
this file as safe, by typing ‘!’ at the confirmation prompt.  When Emacs
encounters these variable/value pairs subsequently, in the same file or
others, it will assume they are safe.

   You can also tell Emacs to permanently ignore all the variable/value
pairs in the file, by typing ‘i’ at the confirmation prompt – these
pairs will thereafter be ignored in this file and in all other files.

   Some variables, such as ‘load-path’, are considered particularly
“risky”: there is seldom any reason to specify them as local variables,
and changing them can be dangerous.  If a file contains only risky local
variables, Emacs neither offers nor accepts ‘!’ as input at the
confirmation prompt.  If some of the local variables in a file are
risky, and some are only potentially unsafe, you can enter ‘!’ at the
prompt.  It applies all the variables, but only marks the non-risky ones
as safe for the future.  If you really want to record safe values for
risky variables, do it directly by customizing
‘safe-local-variable-values’ (*note Easy Customization::).  Similarly,
if you want to record values of risky variables that should be
permanently ignored, customize ‘ignored-local-variable-values’.

   The variable ‘enable-local-variables’ allows you to change the way
Emacs processes local variables.  Its default value is ‘t’, which
specifies the behavior described above.  If it is ‘nil’, Emacs simply
ignores all file local variables.  ‘:safe’ means use only the safe
values and ignore the rest.  ‘:all’ instructs Emacs to set all file
local variables regardless of whether their value is safe or not (we
advise not to use this permanently).  Any other value says to query you
about each file that has local variables, without trying to determine
whether the values are known to be safe.

   The variable ‘enable-local-eval’ controls whether Emacs processes
‘eval’ variables.  The three possibilities for the variable’s value are
‘t’, ‘nil’, and anything else, just as for ‘enable-local-variables’.
The default is ‘maybe’, which is neither ‘t’ nor ‘nil’, so normally
Emacs does ask for confirmation about processing ‘eval’ variables.

   As an exception, Emacs never asks for confirmation to evaluate any
‘eval’ form if that form occurs within the variable
‘safe-local-eval-forms’.


File: emacs.info,  Node: Directory Variables,  Next: Connection Variables,  Prev: File Variables,  Up: Variables

50.2.5 Per-Directory Local Variables
------------------------------------

Sometimes, you may wish to define the same set of local variables to all
the files in a certain directory and its subdirectories, such as the
directory tree of a large software project.  This can be accomplished
with “directory-local variables”.  File local variables override
directory local variables, so if some of the files in a directory need
specialized settings, you can specify the settings for the majority of
the directory’s files in directory variables, and then define file local
variables in a few files which need the general settings overridden.

   The usual way to define directory-local variables is to put a file
named ‘.dir-locals.el’(1) in a directory.  Whenever Emacs visits any
file in that directory or any of its subdirectories, it will apply the
directory-local variables specified in ‘.dir-locals.el’, as though they
had been defined as file-local variables for that file (*note File
Variables::).  Emacs searches for ‘.dir-locals.el’ starting in the
directory of the visited file, and moving up the directory tree.  To
avoid slowdown, this search is skipped for remote files.  If needed, the
search can be extended for remote files by setting the variable
‘enable-remote-dir-locals’ to ‘t’.

   You can also use ‘.dir-locals-2.el’; if found, Emacs loads it in
addition to ‘.dir-locals.el’.  This is useful when ‘.dir-locals.el’ is
under version control in a shared repository and can’t be used for
personal customizations.

   The ‘.dir-locals.el’ file should hold a specially-constructed list,
which maps major mode names (symbols) to alists (*note
(elisp)Association Lists::).  Each alist entry consists of a variable
name and the directory-local value to assign to that variable, when the
specified major mode is enabled.  Instead of a mode name, you can
specify ‘nil’, which means that the alist applies to any mode; or you
can specify a subdirectory (a string), in which case the alist applies
to all files in that subdirectory.

   Here’s an example of a ‘.dir-locals.el’ file:

     ((nil . ((indent-tabs-mode . t)
              (fill-column . 80)
              (mode . auto-fill)))
      (c-mode . ((c-file-style . "BSD")
                 (subdirs . nil)))
      ("src/imported"
       . ((nil . ((change-log-default-name
                   . "ChangeLog.local"))))))

This sets the variables ‘indent-tabs-mode’ and ‘fill-column’ for any
file in the directory tree, and the indentation style for any C source
file.  The special ‘mode’ element specifies the minor mode to be
enabled.  So ‘(mode . auto-fill)’ specifies that the minor mode
‘auto-fill-mode’ needs to be enabled.  The special ‘subdirs’ element is
not a variable, but a special keyword which indicates that the C mode
settings are only to be applied in the current directory, not in any
subdirectories.  Finally, it specifies a different ‘ChangeLog’ file name
for any file in the ‘src/imported’ subdirectory.

   If the ‘.dir-locals.el’ file contains multiple different values for a
variable using different mode names or directories, the values will be
applied in an order such that the values for more specific modes take
priority over more generic modes.  Values specified under a directory
have even more priority.  For example:

     ((nil . ((fill-column . 40)))
      (c-mode . ((fill-column . 50)))
      (prog-mode . ((fill-column . 60)))
      ("narrow-files" . ((nil . ((fill-column . 20))))))

   Files that use ‘c-mode’ also match ‘prog-mode’ because the former
inherits from the latter.  The value used for ‘fill-column’ in C files
will however be ‘50’ because the mode name is more specific than
‘prog-mode’.  Files using other modes inheriting from ‘prog-mode’ will
use ‘60’.  Any file under the directory ‘narrow-files’ will use the
value ‘20’ even if they use ‘c-mode’ because directory entries have
priority over mode entries.

   You can specify the variables ‘mode’, ‘eval’, and ‘unibyte’ in your
‘.dir-locals.el’, and they have the same meanings as they would have in
file local variables.  ‘coding’ cannot be specified as a directory local
variable.  *Note File Variables::.

   The special key ‘auto-mode-alist’ in a ‘.dir-locals.el’ lets you set
a file’s major mode.  It works much like the variable ‘auto-mode-alist’
(*note Choosing Modes::).  For example, here is how you can tell Emacs
that ‘.def’ source files in this directory should be in C mode:

     ((auto-mode-alist . (("\\.def\\'" . c-mode))))

   Instead of editing the ‘.dir-locals.el’ file by hand, you can use the
command ‘M-x add-dir-local-variable’.  This prompts for a mode or
subdirectory, and for variable and value, and adds the entry defining
the directory-local variable.  ‘M-x delete-dir-local-variable’ deletes
an entry.  ‘M-x copy-file-locals-to-dir-locals’ copies the file-local
variables in the current file into ‘.dir-locals.el’.

   Another method of specifying directory-local variables is to define a
group of variables/value pairs in a “directory class”, using the
‘dir-locals-set-class-variables’ function; then, tell Emacs which
directories correspond to the class by using the
‘dir-locals-set-directory-class’ function.  These function calls
normally go in your initialization file (*note Init File::).  This
method is useful when you can’t put ‘.dir-locals.el’ in a directory for
some reason.  For example, you could apply settings to an unwritable
directory this way:

     (dir-locals-set-class-variables 'unwritable-directory
        '((nil . ((some-useful-setting . value)))))

     (dir-locals-set-directory-class
        "/usr/include/" 'unwritable-directory)

   If a variable has both a directory-local and file-local value
specified, the file-local value takes effect.  Unsafe directory-local
variables are handled in the same way as unsafe file-local variables
(*note Safe File Variables::).

   Directory-local variables also take effect in certain buffers that do
not visit a file directly but perform work within a directory, such as
Dired buffers (*note Dired::).

   ---------- Footnotes ----------

   (1) On MS-DOS, the name of this file should be ‘_dir-locals.el’, due
to limitations of the DOS filesystems.  If the filesystem is limited to
8+3 file names, the name of the file will be truncated by the OS to
‘_dir-loc.el’.


File: emacs.info,  Node: Connection Variables,  Prev: Directory Variables,  Up: Variables

50.2.6 Per-Connection Local Variables
-------------------------------------

Most of the variables reflect the situation on the local machine.
Often, they must use a different value when you operate in buffers with
a remote default directory.  Think about the behavior when calling
‘shell’ – on your local machine, you might use ‘/bin/bash’ and rely on
termcap, but on a remote machine, it may be ‘/bin/ksh’ and terminfo.

   This can be accomplished with “connection-local variables”.
Directory and file local variables override connection-local variables.
Unsafe connection-local variables are handled in the same way as unsafe
file-local variables (*note Safe File Variables::).

   Connection-local variables are declared as a group of variables/value
pairs in a “profile”, using the ‘connection-local-set-profile-variables’
function.  The function ‘connection-local-set-profiles’ activates
profiles for a given criteria, identifying a remote machine:

     (connection-local-set-profile-variables 'remote-terminfo
        '((system-uses-terminfo . t)
          (comint-terminfo-terminal . "dumb-emacs-ansi")))

     (connection-local-set-profile-variables 'remote-ksh
        '((shell-file-name . "/bin/ksh")
          (shell-command-switch . "-c")))

     (connection-local-set-profile-variables 'remote-bash
        '((shell-file-name . "/bin/bash")
          (shell-command-switch . "-c")))

     (connection-local-set-profiles
        '(:application tramp :machine "remotemachine")
        'remote-terminfo 'remote-ksh)

   This code declares three different profiles, ‘remote-terminfo’,
‘remote-ksh’, and ‘remote-bash’.  The profiles ‘remote-terminfo’ and
‘remote-ksh’ are applied to all buffers which have a remote default
directory matching the regexp ‘"remotemachine"’ as host name.  Such a
criteria can also discriminate for the properties ‘:protocol’ (this is
the Tramp method) or ‘:user’ (a remote user name).  The ‘nil’ criteria
matches all buffers with a remote default directory.


File: emacs.info,  Node: Key Bindings,  Next: Init File,  Prev: Variables,  Up: Customization

50.3 Customizing Key Bindings
=============================

This section describes “key bindings”, which map keys to commands, and
“keymaps”, which record key bindings.  It also explains how to customize
key bindings, which is done by editing your init file (*note Init
Rebinding::).

   Since most modes define their own key bindings, activating a mode
might override your custom key bindings.  A small number of keys are
reserved for user-defined bindings, and should not be used by modes, so
key bindings using those keys are safer in this regard.  The reserved
key sequences are those consisting of ‘C-c’ followed by a letter (either
upper or lower case), and function keys <F5> through <F9> without
modifiers (*note Modifier Keys::).

* Menu:

* Keymaps::             Generalities.  The global keymap.
* Prefix Keymaps::      Keymaps for prefix keys.
* Local Keymaps::       Major and minor modes have their own keymaps.
* Minibuffer Maps::     The minibuffer uses its own local keymaps.
* Rebinding::           How to redefine one key’s meaning conveniently.
* Init Rebinding::      Rebinding keys with your initialization file.
* Modifier Keys::       Using modifier keys.
* Function Keys::       Rebinding terminal function keys.
* Named ASCII Chars::   Distinguishing <TAB> from ‘C-i’, and so on.
* Mouse Buttons::       Rebinding mouse buttons in Emacs.
* Disabling::           Disabling a command means confirmation is required
                          before it can be executed.  This is done to protect
                          beginners from surprises.


File: emacs.info,  Node: Keymaps,  Next: Prefix Keymaps,  Up: Key Bindings

50.3.1 Keymaps
--------------

As described in *note Commands::, each Emacs command is a Lisp function
whose definition provides for interactive use.  Like every Lisp
function, a command has a function name, which usually consists of
lower-case letters and hyphens.

   A “key sequence” (“key”, for short) is a sequence of “input events”
that have a meaning as a unit.  Input events include characters,
function keys, and mouse buttons—all the inputs that you can send to the
computer.  A key sequence gets its meaning from its “binding”, which
says what command it runs.

   The bindings between key sequences and command functions are recorded
in data structures called “keymaps”.  Emacs has many of these, each used
on particular occasions.

   The “global” keymap is the most important keymap because it is always
in effect.  The global keymap defines keys for Fundamental mode (*note
Major Modes::); most of these definitions are common to most or all
major modes.  Each major or minor mode can have its own keymap which
overrides the global definitions of some keys.

   For example, a self-inserting character such as ‘g’ is self-inserting
because the global keymap binds it to the command ‘self-insert-command’.
The standard Emacs editing characters such as ‘C-a’ also get their
standard meanings from the global keymap.  Commands to rebind keys, such
as ‘M-x keymap-global-set’, work by storing the new binding in the
proper place in the global map (*note Rebinding::).  To view the current
key bindings, use the ‘C-h b’ command.

   Most modern keyboards have function keys as well as character keys.
Function keys send input events just as character keys do, and keymaps
can have bindings for them.  Key sequences can mix function keys and
characters.  For example, if your keyboard has a <Home> function key,
Emacs can recognize key sequences like ‘C-x <Home>’.  You can even mix
mouse events with keyboard events, such as ‘S-down-mouse-1’.

   On text terminals, typing a function key actually sends the computer
a sequence of characters; the precise details of the sequence depend on
the function key and on the terminal type.  (Often the sequence starts
with ‘<ESC> [’.)  If Emacs understands your terminal type properly, it
automatically handles such sequences as single input events.

   Key sequences that consist of ‘C-c’ followed by a letter (upper or
lower case; ASCII or non-ASCII) are reserved for users.  Emacs itself
will never bind those key sequences, and Emacs extensions should avoid
binding them.  In other words, users can bind key sequences like ‘C-c a’
or ‘C-c ç’ and rely on these never being shadowed by other Emacs
bindings.


File: emacs.info,  Node: Prefix Keymaps,  Next: Local Keymaps,  Prev: Keymaps,  Up: Key Bindings

50.3.2 Prefix Keymaps
---------------------

Internally, Emacs records only single events in each keymap.
Interpreting a key sequence of multiple events involves a chain of
keymaps: the first keymap gives a definition for the first event, which
is another keymap, which is used to look up the second event in the
sequence, and so on.  Thus, a prefix key such as ‘C-x’ or <ESC> has its
own keymap, which holds the definition for the event that immediately
follows that prefix.

   The definition of a prefix key is usually the keymap to use for
looking up the following event.  The definition can also be a Lisp
symbol whose function definition is the following keymap; the effect is
the same, but it provides a command name for the prefix key that can be
used as a description of what the prefix key is for.  Thus, the binding
of ‘C-x’ is the symbol ‘Control-X-prefix’, whose function definition is
the keymap for ‘C-x’ commands.  The definitions of ‘C-c’, ‘C-x’, ‘C-h’,
and <ESC> as prefix keys appear in the global map, so these prefix keys
are always available.

   Aside from ordinary prefix keys, there is a fictitious “prefix key”
which represents the menu bar; see *note (elisp)Menu Bar::, for special
information about menu bar key bindings.  Mouse button events that
invoke pop-up menus are also prefix keys; see *note (elisp)Menu
Keymaps::, for more details.

   Some prefix keymaps are stored in variables with names:

   • ‘ctl-x-map’ is the variable name for the map used for characters
     that follow ‘C-x’.
   • ‘help-map’ is for characters that follow ‘C-h’.
   • ‘esc-map’ is for characters that follow <ESC>.  Thus, all Meta
     characters are actually defined by this map.
   • ‘ctl-x-4-map’ is for characters that follow ‘C-x 4’.
   • ‘mode-specific-map’ is for characters that follow ‘C-c’.
   • ‘project-prefix-map’ is for characters that follow ‘C-x p’, used
     for project-related commands (*note Projects::).


File: emacs.info,  Node: Local Keymaps,  Next: Minibuffer Maps,  Prev: Prefix Keymaps,  Up: Key Bindings

50.3.3 Local Keymaps
--------------------

So far, we have explained the ins and outs of the global map.  Major
modes customize Emacs by providing their own key bindings in “local
keymaps”.  For example, C mode overrides <TAB> to make it indent the
current line for C code.  Minor modes can also have local keymaps;
whenever a minor mode is in effect, the definitions in its keymap
override both the major mode’s local keymap and the global keymap.  In
addition, portions of text in the buffer can specify their own keymaps,
which override all other keymaps.

   A local keymap can redefine a key as a prefix key by defining it as a
prefix keymap.  If the key is also defined globally as a prefix, its
local and global definitions (both keymaps) effectively combine: both
definitions are used to look up the event that follows the prefix key.
For example, if a local keymap defines ‘C-c’ as a prefix keymap, and
that keymap defines ‘C-z’ as a command, this provides a local meaning
for ‘C-c C-z’.  This does not affect other sequences that start with
‘C-c’; if those sequences don’t have their own local bindings, their
global bindings remain in effect.

   Another way to think of this is that Emacs handles a multi-event key
sequence by looking in several keymaps, one by one, for a binding of the
whole key sequence.  First it checks the minor mode keymaps for minor
modes that are enabled, then it checks the major mode’s keymap, and then
it checks the global keymap.  This is not precisely how key lookup
works, but it’s good enough for understanding the results in ordinary
circumstances.


File: emacs.info,  Node: Minibuffer Maps,  Next: Rebinding,  Prev: Local Keymaps,  Up: Key Bindings

50.3.4 Minibuffer Keymaps
-------------------------

The minibuffer has its own set of local keymaps; they contain various
completion and exit commands.

   • ‘minibuffer-local-map’ is used for ordinary input (no completion).
   • ‘minibuffer-local-ns-map’ is similar, except that <SPC> exits just
     like <RET>.
   • ‘minibuffer-local-completion-map’ is for permissive completion.
   • ‘minibuffer-local-must-match-map’ is for strict completion and for
     cautious completion.
   • ‘minibuffer-local-filename-completion-map’ is like the two previous
     ones, but specifically for file name completion.  It does not bind
     <SPC>.

   By default, <TAB>, <SPC> and <?> do completion in
‘minibuffer-local-completion-map’.  If you commonly complete over
collections that have elements with space or question mark characters in
them, it may be convenient to disable completion on those keys by
putting this in your init file:

     (keymap-set minibuffer-local-completion-map "SPC" 'self-insert-command)
     (keymap-set minibuffer-local-completion-map "?" 'self-insert-command)


File: emacs.info,  Node: Rebinding,  Next: Init Rebinding,  Prev: Minibuffer Maps,  Up: Key Bindings

50.3.5 Changing Key Bindings Interactively
------------------------------------------

The way to redefine an Emacs key is to change its entry in a keymap.
You can change the global keymap, in which case the change is effective
in all major modes (except those that have their own overriding local
bindings for the same key).  Or you can change a local keymap, which
affects all buffers using the same major mode.

   In this section, we describe how to rebind keys for the present Emacs
session.  *Note Init Rebinding::, for a description of how to make key
rebindings affect future Emacs sessions.

‘M-x keymap-global-set <RET> KEY CMD <RET>’
     Define KEY globally to run CMD.
‘M-x keymap-local-set <RET> KEY CMD <RET>’
     Define KEY locally (in the major mode now in effect) to run CMD.
‘M-x keymap-global-unset <RET> KEY’
     Make KEY undefined in the global map.
‘M-x keymap-local-unset <RET> KEY’
     Make KEY undefined locally (in the major mode now in effect).

   For example, the following binds ‘C-z’ to the ‘shell’ command (*note
Interactive Shell::), replacing the normal global definition of ‘C-z’:

     M-x keymap-global-set <RET> C-z shell <RET>

The ‘keymap-global-set’ command reads the command name after the key.
After you press the key, a message like this appears so that you can
confirm that you are binding the key you want:

     Set key C-z to command:

   You can redefine function keys and mouse events in the same way; just
type the function key or click the mouse when it’s time to specify the
key to rebind.

   You can rebind a key that contains more than one event in the same
way.  Emacs keeps reading the key to rebind until it is a complete key
(that is, not a prefix key).  Thus, if you type ‘C-f’ for KEY, that’s
the end; it enters the minibuffer immediately to read CMD.  But if you
type ‘C-x’, since that’s a prefix, it reads another character; if that
is ‘4’, another prefix character, it reads one more character, and so
on.  For example,

     M-x keymap-global-set <RET> C-x 4 $ spell-other-window <RET>

redefines ‘C-x 4 $’ to run the (fictitious) command
‘spell-other-window’.

   You can remove the global definition of a key with
‘keymap-global-unset’.  This makes the key “undefined”; if you type it,
Emacs will just beep.  Similarly, ‘keymap-local-unset’ makes a key
undefined in the current major mode keymap, which makes the global
definition (or lack of one) come back into effect in that major mode.

   If you have redefined (or undefined) a key and you subsequently wish
to retract the change, undefining the key will not do the job—you need
to redefine the key with its standard definition.  To find the name of
the standard definition of a key, go to a Fundamental mode buffer in a
fresh Emacs and use ‘C-h c’.  The documentation of keys in this manual
also lists their command names.

   If you want to prevent yourself from invoking a command by mistake,
it is better to disable the command than to undefine the key.  A
disabled command is less work to invoke when you really want to.  *Note
Disabling::.


File: emacs.info,  Node: Init Rebinding,  Next: Modifier Keys,  Prev: Rebinding,  Up: Key Bindings

50.3.6 Rebinding Keys in Your Init File
---------------------------------------

If you have a set of key bindings that you like to use all the time, you
can specify them in your initialization file by writing Lisp code.
*Note Init File::, for a description of the initialization file.

   The recommended way to write a key binding using Lisp is to use
either the ‘keymap-global-set’ or the ‘keymap-set’ functions.  For
example, here’s how to bind ‘C-z’ to the ‘shell’ command in the global
keymap (*note Interactive Shell::):

     (keymap-global-set "C-z" 'shell)

The first argument to ‘keymap-global-set’ describes the key sequence.
It is a string made of a series of characters separated by spaces, with
each character corresponding to a key.  Keys with modifiers can be
specified by prepending the modifier, such as ‘C-’ for Control, or ‘M-’
for Meta.  Special keys, such as <TAB> and <RET>, can be specified
within angle brackets as in ‘<TAB>’ and ‘<RET>’.

   The single-quote before the command name that is being bound to the
key sequence, ‘shell’ in the above example, marks it as a constant
symbol rather than a variable.  If you omit the quote, Emacs would try
to evaluate ‘shell’ as a variable.  This will probably cause an error;
it certainly isn’t what you want.

   Here are some additional examples, including binding function keys
and mouse events:

     (keymap-global-set "C-c y" 'clipboard-yank)
     (keymap-global-set "C-M-q" 'query-replace)
     (keymap-global-set "<f5>" 'flyspell-mode)
     (keymap-global-set "C-<f5>" 'display-line-numbers-mode)
     (keymap-global-set "C-<right>" 'forward-sentence)
     (keymap-global-set "<mouse-2>" 'mouse-save-then-kill)

   Language and coding systems may cause problems with key bindings for
non-ASCII characters.  *Note Init Non-ASCII::.

   Alternatively, you can use the low level functions ‘define-key’ and
‘global-set-key’.  For example, to bind ‘C-z’ to the ‘shell’ command, as
in the above example, using these low-level functions, use:

     (global-set-key (kbd "C-z") 'shell)

There are various ways to specify the key sequence but the simplest is
to use the function ‘kbd’ as shown in the example above.  ‘kbd’ takes a
single string argument that is a textual representation of a key
sequence, and converts it into a form suitable for low-level functions
such as ‘global-set-key’.  For more details about binding keys using
Lisp, *note (elisp)Keymaps::.

   As described in *note Local Keymaps::, major modes and minor modes
can define local keymaps.  These keymaps are constructed when the mode
is loaded for the first time in a session.  The function ‘keymap-set’
can be used to make changes in a specific keymap.  To remove a key
binding, use ‘keymap-unset’.

   Since a mode’s keymaps are not constructed until it has been loaded,
you must delay running code which modifies them, e.g., by putting it on
a “mode hook” (*note Hooks::).  For example, Texinfo mode runs the hook
‘texinfo-mode-hook’.  Here’s how you can use the hook to add local
bindings for ‘C-c n’ and ‘C-c p’, and remove the one for ‘C-c C-x x’ in
Texinfo mode:

     (add-hook 'texinfo-mode-hook
               (lambda ()
                 (keymap-set texinfo-mode-map "C-c p"
                             'backward-paragraph)
                 (keymap-set texinfo-mode-map "C-c n"
                             'forward-paragraph)))
                 (keymap-set texinfo-mode-map "C-c C-x x" nil)


File: emacs.info,  Node: Modifier Keys,  Next: Function Keys,  Prev: Init Rebinding,  Up: Key Bindings

50.3.7 Modifier Keys
--------------------

The default key bindings in Emacs are set up so that modified
alphabetical characters are case-insensitive.  In other words, ‘C-A’
does the same thing as ‘C-a’, and ‘M-A’ does the same thing as ‘M-a’.
This concerns only alphabetical characters, and does not apply to
shifted versions of other keys; for instance, ‘C-@’ is not the same as
‘C-2’.

   A <Control>-modified alphabetical character is generally considered
case-insensitive: Emacs always treats ‘C-A’ as ‘C-a’, ‘C-B’ as ‘C-b’,
and so forth.  The reason for this is historical: In non-graphical
environments there is no distinction between those keystrokes.  However,
you can bind shifted <Control> alphabetical keystrokes in GUI frames:

     (keymap-global-set "C-S-n" #'previous-line)

   For all other modifiers, you can make the modified alphabetical
characters case-sensitive (even on non-graphical frames) when you
customize Emacs.  For instance, you could make ‘M-a’ and ‘M-A’ run
different commands.

   Although only the <Control> and <Meta> modifier keys are commonly
used, Emacs supports three other modifier keys.  These are called
<Super>, <Hyper>, and <Alt>.  Few terminals provide ways to use these
modifiers; the key labeled <Alt> on most keyboards usually issues the
<Meta> modifier, not <Alt>.  The standard key bindings in Emacs do not
include any characters with the <Super> and <Hyper> modifiers, and only
a small number of standard key bindings use <Alt>.  However, you can
customize Emacs to assign meanings to key bindings that use these
modifiers.  The modifier bits are labeled as ‘s-’, ‘H-’ and ‘A-’
respectively.

   Even if your keyboard lacks these additional modifier keys, you can
enter them using ‘C-x @’: ‘C-x @ h’ adds the Hyper flag to the next
character, ‘C-x @ s’ adds the Super flag, and ‘C-x @ a’ adds the Alt
flag.  For instance, ‘C-x @ h C-a’ is a way to enter ‘Hyper-Control-a’.
(Unfortunately, there is no way to add two modifiers by using ‘C-x @’
twice for the same character, because the first one goes to work on the
‘C-x’.)  You can similarly enter the Shift, Control, and Meta modifiers
by using ‘C-x  S’, ‘C-x  c’, and ‘C-x  m’, respectively, although this
is rarely needed.


File: emacs.info,  Node: Function Keys,  Next: Named ASCII Chars,  Prev: Modifier Keys,  Up: Key Bindings

50.3.8 Rebinding Function Keys
------------------------------

Key sequences can contain function keys as well as ordinary characters.
Just as Lisp characters (actually integers) represent keyboard
characters, Lisp symbols represent function keys.  If the function key
has a word as its label, then that word is also the name of the
corresponding Lisp symbol.  Here are the conventional Lisp names for
common function keys:

‘left’, ‘up’, ‘right’, ‘down’
     Cursor arrow keys.

‘begin’, ‘end’, ‘home’, ‘next’, ‘prior’
     Other cursor repositioning keys.

‘select’, ‘print’, ‘execute’, ‘backtab’
‘insert’, ‘undo’, ‘redo’, ‘clearline’
‘insertline’, ‘deleteline’, ‘insertchar’, ‘deletechar’
     Miscellaneous function keys.

‘f1’, ‘f2’, ... ‘f35’
     Numbered function keys (across the top of the keyboard).

‘kp-add’, ‘kp-subtract’, ‘kp-multiply’, ‘kp-divide’
‘kp-backtab’, ‘kp-space’, ‘kp-tab’, ‘kp-enter’
‘kp-separator’, ‘kp-decimal’, ‘kp-equal’
‘kp-prior’, ‘kp-next’, ‘kp-end’, ‘kp-home’
‘kp-left’, ‘kp-up’, ‘kp-right’, ‘kp-down’
‘kp-insert ’, ‘kp-delete’
     Keypad keys (to the right of the regular keyboard), with names or
     punctuation.

‘kp-0’, ‘kp-1’, ... ‘kp-9’
     Keypad keys with digits.

‘kp-f1’, ‘kp-f2’, ‘kp-f3’, ‘kp-f4’
     Keypad PF keys.

   These names are conventional, but some systems (especially when using
X) may use different names.  To make certain what symbol is used for a
given function key on your terminal, type ‘C-h c’ followed by that key.

   *Note Init Rebinding::, for examples of binding function keys.

   Many keyboards have a numeric keypad on the right-hand side.  The
numeric keys in the keypad double up as cursor motion keys, toggled by a
key labeled ‘Num Lock’.  By default, Emacs translates these keys to the
corresponding keys on the main keyboard.  For example, when ‘Num Lock’
is on, the key labeled ‘8’ on the numeric keypad produces ‘kp-8’, which
is translated to ‘8’; when ‘Num Lock’ is off, the same key produces
‘kp-up’, which is translated to <UP>.  If you rebind a key such as ‘8’
or <UP>, it affects the equivalent keypad key too.  However, if you
rebind a ‘kp-’ key directly, that won’t affect its non-keypad
equivalent.  Note that the modified keys are not translated: for
instance, if you hold down the <Meta> key while pressing the ‘8’ key on
the numeric keypad, that generates ‘M-<kp-8>’.

   Emacs provides a convenient method for binding the numeric keypad
keys, using the variables ‘keypad-setup’, ‘keypad-numlock-setup’,
‘keypad-shifted-setup’, and ‘keypad-numlock-shifted-setup’.  These can
be found in the ‘keyboard’ customization group (*note Easy
Customization::).  You can rebind the keys to perform other tasks, such
as issuing numeric prefix arguments.


File: emacs.info,  Node: Named ASCII Chars,  Next: Mouse Buttons,  Prev: Function Keys,  Up: Key Bindings

50.3.9 Named ASCII Control Characters
-------------------------------------

<TAB>, <RET>, <BS>, <LFD>, <ESC>, and <DEL> started out as names for
certain ASCII control characters, used so often that they have special
keys of their own.  For instance, <TAB> was another name for ‘C-i’.
Later, users found it convenient to distinguish in Emacs between these
keys and the corresponding control characters typed with the <Ctrl> key.
Therefore, on most modern terminals, they are no longer the same: <TAB>
is different from ‘C-i’.

   Emacs can distinguish these two kinds of input if the keyboard does.
It treats the special keys as function keys named ‘tab’, ‘return’,
‘backspace’, ‘linefeed’, ‘escape’, and ‘delete’.  These function keys
translate automatically into the corresponding ASCII characters _if_
they have no bindings of their own.  As a result, neither users nor Lisp
programs need to pay attention to the distinction unless they care to.

   If you do not want to distinguish between (for example) <TAB> and
‘C-i’, make just one binding, for the ASCII character <TAB> (octal code
011).  If you do want to distinguish, make one binding for this ASCII
character, and another for the function key ‘tab’.

   With an ordinary ASCII terminal, there is no way to distinguish
between <TAB> and ‘C-i’ (and likewise for other such pairs), because the
terminal sends the same character in both cases.


File: emacs.info,  Node: Mouse Buttons,  Next: Disabling,  Prev: Named ASCII Chars,  Up: Key Bindings

50.3.10 Rebinding Mouse Buttons
-------------------------------

Emacs uses Lisp symbols to designate mouse buttons, too.  The ordinary
mouse events in Emacs are “click” events; these happen when you press a
button and release it without moving the mouse.  You can also get “drag”
events, when you move the mouse while holding the button down.  Drag
events happen when you finally let go of the button.

   The symbols for basic click events are ‘mouse-1’ for the leftmost
button, ‘mouse-2’ for the next, and so on.  Here is how you can redefine
the second mouse button to split the current window:

     (keymap-global-set "<mouse-2>" 'split-window-below)

   The symbols for drag events are similar, but have the prefix ‘drag-’
before the word ‘mouse’.  For example, dragging the first button
generates a ‘drag-mouse-1’ event.

   You can also define bindings for events that occur when a mouse
button is pressed down.  These events start with ‘down-’ instead of
‘drag-’.  Such events are generated only if they have key bindings.
When you get a button-down event, a corresponding click or drag event
will always follow.

   If you wish, you can distinguish single, double, and triple clicks.
A double click means clicking a mouse button twice in approximately the
same place.  The first click generates an ordinary click event.  The
second click, if it comes soon enough, generates a double-click event
instead.  The event type for a double-click event starts with ‘double-’:
for example, ‘double-mouse-3’.

   This means that you can give a special meaning to the second click at
the same place, but it must act on the assumption that the ordinary
single click definition has run when the first click was received.

   This constrains what you can do with double clicks, but user
interface designers say that this constraint ought to be followed in any
case.  A double click should do something similar to the single click,
only more so.  The command for the double-click event should perform the
extra work for the double click.

   If a double-click event has no binding, it changes to the
corresponding single-click event.  Thus, if you don’t define a
particular double click specially, it executes the single-click command
twice.

   Emacs also supports triple-click events whose names start with
‘triple-’.  Emacs does not distinguish quadruple clicks as event types;
clicks beyond the third generate additional triple-click events.
However, the full number of clicks is recorded in the event list, so if
you know Emacs Lisp you can distinguish if you really want to (*note
(elisp)Click Events::).  We don’t recommend distinct meanings for more
than three clicks, but sometimes it is useful for subsequent clicks to
cycle through the same set of three meanings, so that four clicks are
equivalent to one click, five are equivalent to two, and six are
equivalent to three.

   Emacs also records multiple presses in drag and button-down events.
For example, when you press a button twice, then move the mouse while
holding the button, Emacs gets a ‘double-drag-’ event.  And at the
moment when you press it down for the second time, Emacs gets a
‘double-down-’ event (which is ignored, like all button-down events, if
it has no binding).

   The variable ‘double-click-time’ specifies how much time can elapse
between clicks and still allow them to be grouped as a multiple click.
Its value is in units of milliseconds.  If the value is ‘nil’, double
clicks are not detected at all.  If the value is ‘t’, then there is no
time limit.  The default is 500.

   The variable ‘double-click-fuzz’ specifies how much the mouse can
move between clicks and still allow them to be grouped as a multiple
click.  Its value is in units of pixels on windowed displays and in
units of 1/8 of a character cell on text-mode terminals; the default is
3.

   The symbols for mouse events also indicate the status of the modifier
keys, with the usual prefixes ‘C-’, ‘M-’, ‘H-’, ‘s-’, ‘A-’, and ‘S-’.
These always precede ‘double-’ or ‘triple-’, which always precede
‘drag-’ or ‘down-’.

   A frame includes areas that don’t show text from the buffer, such as
the mode line and the scroll bar.  You can tell whether a mouse button
comes from a special area of the screen by means of dummy prefix keys.
For example, if you click the mouse in the mode line, you get the prefix
key ‘mode-line’ before the ordinary mouse-button symbol.  Thus, here is
how to define the command for clicking the first button in a mode line
to run ‘scroll-up-command’:

     (keymap-global-set "<mode-line> <mouse-1>" 'scroll-up-command)

   Here is the complete list of these dummy prefix keys and their
meanings:

‘mode-line’
     The mouse was in the mode line of a window.
‘vertical-line’
     The mouse was in the vertical line separating side-by-side windows.
     (If you use scroll bars, they appear in place of these vertical
     lines.)
‘vertical-scroll-bar’
     The mouse was in a vertical scroll bar.  (This is the only kind of
     scroll bar Emacs currently supports.)
‘menu-bar’
     The mouse was in the menu bar.
‘tab-bar’
     The mouse was in a tab bar.
‘tab-line’
     The mouse was in a tab line.
‘header-line’
     The mouse was in a header line.

   You can put more than one mouse button in a key sequence, but it
isn’t usual to do so.


File: emacs.info,  Node: Disabling,  Prev: Mouse Buttons,  Up: Key Bindings

50.3.11 Disabling Commands
--------------------------

Disabling a command means that invoking it interactively asks for
confirmation from the user.  The purpose of disabling a command is to
prevent users from executing it by accident; we do this for commands
that might be confusing to the uninitiated.

   Attempting to invoke a disabled command interactively in Emacs
displays a window containing the command’s name, its documentation, and
some instructions on what to do immediately; then Emacs asks for input
saying whether to execute the command as requested, enable it and
execute it, or cancel.  If you decide to enable the command, you must
then answer another question—whether to do this permanently, or just for
the current session.  (Enabling permanently works by automatically
editing your initialization file.)  You can also type ‘!’ to enable
_all_ commands, for the current session only.

   The direct mechanism for disabling a command is to put a non-‘nil’
‘disabled’ property on the Lisp symbol for the command.  Here is the
Lisp program to do this:

     (put 'delete-region 'disabled t)

   If the value of the ‘disabled’ property is a string, that string is
included in the message displayed when the command is used:

     (put 'delete-region 'disabled
          "It's better to use `kill-region' instead.\n")

   As a less heavy-handed alternative to disabling commands, you may
want to be queried before executing a command.  For instance, to be
queried before executing the ‘M->’ (‘end-of-buffer’) command, you could
put something like the following in your init file:

     (command-query
      'end-of-buffer
      "Do you really want to go to the end of the buffer?")

   By default, you’ll be queried with a ‘y’/‘n’ question, but if you
give a non-‘nil’ value to the third, optional argument, you’ll be
queried with ‘yes’/‘no’ instead.

   You can make a command disabled either by editing the initialization
file directly, or with the command ‘M-x disable-command’, which edits
the initialization file for you.  Likewise, ‘M-x enable-command’ edits
the initialization file to enable a command permanently.  *Note Init
File::.

   If Emacs was invoked with the ‘-q’ or ‘--no-init-file’ options (*note
Initial Options::), it will not edit your initialization file.  Doing so
could lose information because Emacs has not read your initialization
file.

   Whether a command is disabled is independent of what key is used to
invoke it; disabling also applies if the command is invoked using ‘M-x’.
However, disabling a command has no effect on calling it as a function
from Lisp programs.


File: emacs.info,  Node: Init File,  Next: Authentication,  Prev: Key Bindings,  Up: Customization

50.4 The Emacs Initialization File
==================================

When Emacs is started, it normally tries to load a Lisp program from an
“initialization file”, or “init file” for short.  This file, if it
exists, specifies how to initialize Emacs for you.  Traditionally, file
‘~/.emacs’ is used as the init file, although Emacs also looks at
‘~/.emacs.el’, ‘~/.emacs.d/init.el’, ‘~/.config/emacs/init.el’, or other
locations.  *Note Find Init::.

   You may find it convenient to have all your Emacs configuration in
one directory, in which case you should use ‘~/.emacs.d/init.el’ or the
XDG-compatible ‘~/.config/emacs/init.el’.

   You can use the command line switch ‘-q’ to prevent loading your init
file, and ‘-u’ (or ‘--user’) to specify a different user’s init file
(*note Initial Options::).

   There can also be a “default init file”, which is the library named
‘default.el’, found via the standard search path for libraries.  The
Emacs distribution contains no such library; your site may create one
for local customizations.  If this library exists, it is loaded whenever
you start Emacs (except when you specify ‘-q’).  But your init file, if
any, is loaded first; if it sets ‘inhibit-default-init’ non-‘nil’, then
‘default’ is not loaded.

   Your site may also have a “site startup file”; this is named
‘site-start.el’, if it exists.  Like ‘default.el’, Emacs finds this file
via the standard search path for Lisp libraries.  Emacs loads this
library before it loads your init file.  To inhibit loading of this
library, use the option ‘--no-site-file’.  *Note Initial Options::.  We
recommend against using ‘site-start.el’ for changes that some users may
not like.  It is better to put them in ‘default.el’, so that users can
more easily override them.

   You can place ‘default.el’ and ‘site-start.el’ in any of the
directories which Emacs searches for Lisp libraries.  The variable
‘load-path’ (*note Lisp Libraries::) specifies these directories.  Many
sites put these files in a subdirectory named ‘site-lisp’ in the Emacs
installation directory, such as ‘/usr/local/share/emacs/site-lisp’.

   Byte-compiling your init file is not recommended (*note Byte
Compilation: (elisp)Byte Compilation.).  It generally does not speed up
startup very much, and often leads to problems when you forget to
recompile the file.  A better solution is to use the Emacs server to
reduce the number of times you have to start Emacs (*note Emacs
Server::).  If your init file defines many functions, consider moving
them to a separate (byte-compiled) file that you load in your init file.

   If you are going to write actual Emacs Lisp programs that go beyond
minor customization, you should read the ‘Emacs Lisp Reference Manual’.
*Note Emacs Lisp: (elisp)Top.

* Menu:

* Init Syntax::         Syntax of constants in Emacs Lisp.
* Init Examples::       How to do some things with an init file.
* Terminal Init::       Each terminal type can have an init file.
* Find Init::           How Emacs finds the init file.
* Init Non-ASCII::      Using non-ASCII characters in an init file.
* Early Init File::     Another init file, which is read early on.


File: emacs.info,  Node: Init Syntax,  Next: Init Examples,  Up: Init File

50.4.1 Init File Syntax
-----------------------

The init file contains one or more Lisp expressions.  Each of these
consists of a function name followed by arguments, all surrounded by
parentheses.  For example, ‘(setq fill-column 60)’ calls the function
‘setq’ to set the variable ‘fill-column’ (*note Filling::) to 60.

   You can set any Lisp variable with ‘setq’, but with certain variables
‘setq’ won’t do what you probably want in the init file.  Some variables
automatically become buffer-local when set with ‘setq’; what you want in
the init file is to set the default value, using ‘setq-default’.  (The
following section has examples of both of these methods.)

   Some customizable minor mode variables do special things to enable
the mode when you set them with Customize, but ordinary ‘setq’ won’t do
that; to enable the mode in your init file, call the minor mode command.
Finally, a few customizable user options are initialized in complex
ways, and these have to be set either via the customize interface (*note
Customization::), or by using ‘customize-set-variable’/‘setopt’ (*note
Examining::).

   The second argument to ‘setq’ is an expression for the new value of
the variable.  This can be a constant, a variable, or a function call
expression.  In the init file, constants are used most of the time.
They can be:

Numbers:
     Numbers are written in decimal, with an optional initial minus
     sign.

Strings:
     Lisp string syntax is the same as C string syntax with a few extra
     features.  Use a double-quote character to begin and end a string
     constant.

     In a string, you can include newlines and special characters
     literally.  But often it is cleaner to use backslash sequences for
     them: ‘\n’ for newline, ‘\b’ for backspace, ‘\r’ for carriage
     return, ‘\t’ for tab, ‘\f’ for formfeed (control-L), ‘\e’ for
     escape, ‘\\’ for a backslash, ‘\"’ for a double-quote, or ‘\OOO’
     for the character whose octal code is OOO.  Backslash and
     double-quote are the only characters for which backslash sequences
     are mandatory.

     ‘\C-’ can be used as a prefix for a control character, as in ‘\C-s’
     for ASCII control-S, and ‘\M-’ can be used as a prefix for a Meta
     character, as in ‘\M-a’ for ‘<Meta>-A’ or ‘\M-\C-a’ for
     ‘<Ctrl>-<Meta>-A’.

     *Note Init Non-ASCII::, for information about including non-ASCII
     in your init file.

Characters:
     Lisp character constant syntax consists of a ‘?’ followed by either
     a character or an escape sequence starting with ‘\’.  Examples:
     ‘?x’, ‘?\n’, ‘?\"’, ‘?\)’.  Note that strings and characters are
     not interchangeable in Lisp; some contexts require one and some
     contexts require the other.

     *Note Init Non-ASCII::, for information about binding commands to
     keys which send non-ASCII characters.

True:
     ‘t’ stands for “true”.

False:
     ‘nil’ stands for “false”.

Other Lisp objects:
     Write a single-quote (‘'’) followed by the Lisp object you want.

   For more information on the Emacs Lisp syntax, *note
(elisp)Introduction::.


File: emacs.info,  Node: Init Examples,  Next: Terminal Init,  Prev: Init Syntax,  Up: Init File

50.4.2 Init File Examples
-------------------------

Here are some examples of doing certain commonly desired things with
Lisp expressions:

   • Add a directory to the variable ‘load-path’.  You can then put Lisp
     libraries that are not included with Emacs in this directory, and
     load them with ‘M-x load-library’.  *Note Lisp Libraries::.

          (add-to-list 'load-path "/path/to/lisp/libraries")

   • Make <TAB> in C mode just insert a tab if point is in the middle of
     a line.

          (setq c-tab-always-indent nil)

     Here we have a variable whose value is normally ‘t’ for “true” and
     the alternative is ‘nil’ for “false”.

   • Make searches case sensitive by default (in all buffers that do not
     override this).

          (setq-default case-fold-search nil)

     This sets the default value, which is effective in all buffers that
     do not have local values for the variable (*note Locals::).
     Setting ‘case-fold-search’ with ‘setq’ affects only the current
     buffer’s local value, which is probably not what you want to do in
     an init file.

   • Specify your own email address, if Emacs can’t figure it out
     correctly.

          (setq user-mail-address "cheney@torture.gov")

     Various Emacs packages, such as Message mode, consult
     ‘user-mail-address’ when they need to know your email address.
     *Note Mail Headers::.

   • Make Text mode the default mode for new buffers.

          (setq-default major-mode 'text-mode)

     Note that ‘text-mode’ is used because it is the command for
     entering Text mode.  The single-quote before it makes the symbol a
     constant; otherwise, ‘text-mode’ would be treated as a variable
     name.

   • Set up defaults for the Latin-1 character set, which supports most
     of the languages of Western Europe.

          (set-language-environment "Latin-1")

   • Turn off Line Number mode, a global minor mode.

          (line-number-mode 0)

   • Turn on Auto Fill mode automatically in Text mode and related modes
     (*note Hooks::).

          (add-hook 'text-mode-hook 'auto-fill-mode)

   • Change the coding system used when using the clipboard (*note
     Communication Coding::).

          (setopt selection-coding-system 'utf-8)

   • Load the installed Lisp library named ‘foo’ (actually a file
     ‘foo.elc’ or ‘foo.el’ in a standard Emacs directory).

          (load "foo")

     When the argument to ‘load’ is a relative file name, not starting
     with ‘/’ or ‘~’, ‘load’ searches the directories in ‘load-path’
     (*note Lisp Libraries::).

   • Load the compiled Lisp file ‘foo.elc’ from your home directory.

          (load "~/foo.elc")

     Here a full file name is used, so no searching is done.

   • Tell Emacs to find the definition for the function ‘myfunction’ by
     loading a Lisp library named ‘mypackage’ (i.e., a file
     ‘mypackage.elc’ or ‘mypackage.el’):

          (autoload 'myfunction "mypackage" "Do what I say." t)

     Here the string ‘"Do what I say."’ is the function’s documentation
     string.  You specify it in the ‘autoload’ definition so it will be
     available for help commands even when the package is not loaded.
     The last argument, ‘t’, indicates that this function is
     interactive; that is, it can be invoked interactively by typing
     ‘M-x myfunction <RET>’ or by binding it to a key.  If the function
     is not interactive, omit the ‘t’ or use ‘nil’.

   • Rebind the key ‘C-x l’ to run the function ‘make-symbolic-link’
     (*note Init Rebinding::).

          (keymap-global-set "C-x l" 'make-symbolic-link)

     or

          (keymap-set global-map "C-x l" 'make-symbolic-link)

     Note once again the single-quote used to refer to the symbol
     ‘make-symbolic-link’ instead of its value as a variable.

   • Do the same thing for Lisp mode only.

          (keymap-set lisp-mode-map "C-x l" 'make-symbolic-link)

   • Redefine all keys which now run ‘next-line’ in Fundamental mode so
     that they run ‘forward-line’ instead.

          (keymap-substitute global-map 'next-line 'forward-line)

   • Make ‘C-x C-v’ undefined.

          (keymap-global-unset "C-x C-v")

     One reason to undefine a key is so that you can make it a prefix.
     Simply defining ‘C-x C-v ANYTHING’ will make ‘C-x C-v’ a prefix,
     but ‘C-x C-v’ must first be freed of its usual non-prefix
     definition.

   • Make ‘$’ have the syntax of punctuation in Text mode.  Note the use
     of a character constant for ‘$’.

          (modify-syntax-entry ?\$ "." text-mode-syntax-table)

   • Enable the use of the command ‘narrow-to-region’ without
     confirmation.

          (put 'narrow-to-region 'disabled nil)

   • Adjusting the configuration to various platforms and Emacs
     versions.

     Users typically want Emacs to behave the same on all systems, so
     the same init file is right for all platforms.  However, sometimes
     it happens that a function you use for customizing Emacs is not
     available on some platforms or in older Emacs versions.  To deal
     with that situation, put the customization inside a conditional
     that tests whether the function or facility is available, like
     this:

          (if (fboundp 'blink-cursor-mode)
              (blink-cursor-mode 0))

          (if (boundp 'coding-category-utf-8)
              (set-coding-priority '(coding-category-utf-8)))

     You can also simply disregard the errors that occur if the function
     is not defined.

          (ignore-errors (set-face-background 'region "grey75"))

     A ‘setq’ on a variable which does not exist is generally harmless,
     so those do not need a conditional.

   • Using ‘use-package’ to automatically load and configure a package.

          (use-package hi-lock
            :defer t
            :init (add-hook 'some-hook 'hi-lock-mode)
            :config (use-package my-hi-lock)
            :bind (("M-o l" . highlight-lines-matching-regexp)
                   ("M-o r" . highlight-regexp)
                   ("M-o w" . highlight-phrase)))

     This will load ‘hi-lock’ when some of its commands or variables are
     first used, bind 3 keys to its commands, and additionally load the
     ‘my-hi-lock’ package (presumably further customizing ‘hi-lock’)
     after loading ‘hi-lock’.  The ‘use-package’ facility is fully
     documented in its own manual, *note (use-package)Top::.


File: emacs.info,  Node: Terminal Init,  Next: Find Init,  Prev: Init Examples,  Up: Init File

50.4.3 Terminal-specific Initialization
---------------------------------------

Each terminal type can have a Lisp library to be loaded into Emacs when
it is run on that type of terminal.  For a terminal type named TERMTYPE,
the library is called ‘term/TERMTYPE’.  (If there is an entry of the
form ‘(TERMTYPE . ALIAS)’ in the ‘term-file-aliases’ association list,
Emacs uses ALIAS in place of TERMTYPE.)  The library is found by
searching the directories ‘load-path’ as usual and trying the suffixes
‘.elc’ and ‘.el’.  Normally it appears in the subdirectory ‘term’ of the
directory where most Emacs libraries are kept.

   The usual purpose of the terminal-specific library is to map the
escape sequences used by the terminal’s function keys onto more
meaningful names, using ‘input-decode-map’.  See the file
‘term/lk201.el’ for an example of how this is done.  Many function keys
are mapped automatically according to the information in the Termcap
data base; the terminal-specific library needs to map only the function
keys that Termcap does not specify.

   When the terminal type contains a hyphen, only the part of the name
before the first hyphen is significant in choosing the library name.
Thus, terminal types ‘aaa-48’ and ‘aaa-30-rv’ both use the library
‘term/aaa’.  The code in the library can use ‘(getenv "TERM")’ to find
the full terminal type name.

   The library’s name is constructed by concatenating the value of the
variable ‘term-file-prefix’ and the terminal type.  Your ‘.emacs’ file
can prevent the loading of the terminal-specific library by setting
‘term-file-prefix’ to ‘nil’.

   Emacs runs the hook ‘tty-setup-hook’ at the end of initialization,
after both your ‘.emacs’ file and any terminal-specific library have
been read in.  Add hook functions to this hook if you wish to override
part of any of the terminal-specific libraries and to define
initializations for terminals that do not have a library.  *Note
Hooks::.


File: emacs.info,  Node: Find Init,  Next: Init Non-ASCII,  Prev: Terminal Init,  Up: Init File

50.4.4 How Emacs Finds Your Init File
-------------------------------------

Emacs normally finds your init file in a location under your home
directory.  *Note Init File::.

   Emacs looks for your init file using the filenames ‘~/.emacs.el’,
‘~/.emacs’, or ‘~/.emacs.d/init.el’ in that order; you can choose to use
any one of these names.  (Note that only the locations directly in your
home directory have a leading dot in the location’s basename.)

   Emacs can also look in an XDG-compatible location for ‘init.el’, the
default is the directory ‘~/.config/emacs’.  This can be overridden by
setting ‘XDG_CONFIG_HOME’ in your environment, its value replaces
‘~/.config’ in the name of the default XDG init file.  However
‘~/.emacs.d’, ‘~/.emacs’, and ‘~/.emacs.el’ are always preferred if they
exist, which means that you must delete or rename them in order to use
the XDG location.

   Note also that if neither the XDG location nor ‘~/.emacs.d’ exist,
then Emacs will create ‘~/.emacs.d’ (and therefore use it during
subsequent invocations).

   Emacs will set ‘user-emacs-directory’ to the directory it decides to
use.

   Although this is backward-compatible with older Emacs versions,
modern POSIX platforms prefer putting your initialization files under
‘~/.config’ so that troubleshooting a problem that might be due to a bad
init file, or archiving a collection of init files, can be done by
renaming that directory.  To help older Emacs versions find
configuration files in their current default locations, you can execute
the following Emacs Lisp code:

     (make-symbolic-link ".config/emacs" "~/.emacs.d")

   However, if you run Emacs from a shell started by ‘su’ and
‘XDG_CONFIG_HOME’ is not set in your environment, Emacs tries to find
your own initialization files, not that of the user you are currently
pretending to be.  The idea is that you should get your own editor
customizations even if you are running as the super user.

   More precisely, Emacs first determines which user’s init file to use.
It gets your user name from the environment variables ‘LOGNAME’ and
‘USER’; if neither of those exists, it uses the effective user-ID.  If
that user name matches the real user-ID, then Emacs uses ‘HOME’;
otherwise, it looks up the home directory corresponding to that user
name in the system’s data base of users.

   For brevity the rest of the Emacs documentation generally uses just
the current default location ‘~/.emacs.d/init.el’ for the init file.


File: emacs.info,  Node: Init Non-ASCII,  Next: Early Init File,  Prev: Find Init,  Up: Init File

50.4.5 Non-ASCII Characters in Init Files
-----------------------------------------

Language and coding systems may cause problems if your init file
contains non-ASCII characters, such as accented letters, in strings or
key bindings.

   If you want to use non-ASCII characters in your init file, you should
put a ‘-*-coding: CODING-SYSTEM-*-’ tag on the first line of the init
file, and specify a coding system that supports the character(s) in
question.  *Note Recognize Coding::.  This is because the defaults for
decoding non-ASCII text might not yet be set up by the time Emacs reads
those parts of your init file which use such strings, possibly leading
Emacs to decode those strings incorrectly.  You should then avoid adding
Emacs Lisp code that modifies the coding system in other ways, such as
calls to ‘set-language-environment’.

   An alternative to using non-ASCII characters directly is to use one
of the character escape syntaxes described in *note (elisp)General
Escape Syntax::, as they allow all Unicode codepoints to be specified
using only ASCII characters.

   To bind non-ASCII keys, you must use a vector (*note Init
Rebinding::).  The string syntax cannot be used, since the non-ASCII
characters will be interpreted as meta keys.  For instance:

     (global-set-key [?CHAR] 'some-function)

Type ‘C-q’, followed by the key you want to bind, to insert CHAR.


File: emacs.info,  Node: Early Init File,  Prev: Init Non-ASCII,  Up: Init File

50.4.6 The Early Init File
--------------------------

Most customizations for Emacs should be put in the normal init file.
*Note Init File::.  However, it is sometimes necessary to have
customizations take effect during Emacs startup earlier than the normal
init file is processed.  Such customizations can be put in the early
init file, ‘~/.config/emacs/early-init.el’ or
‘~/.emacs.d/early-init.el’.  This file is loaded before the package
system and GUI is initialized, so in it you can customize variables that
affect the package initialization process, such as
‘package-enable-at-startup’, ‘package-load-list’, and
‘package-user-dir’.  Note that variables like ‘package-archives’ which
only affect the installation of new packages, and not the process of
making already-installed packages available, may be customized in the
regular init file.  *Note Package Installation::.

   We do not recommend that you move into ‘early-init.el’ customizations
that can be left in the normal init files.  That is because the early
init file is read before the GUI is initialized, so customizations
related to GUI features will not work reliably in ‘early-init.el’.  By
contrast, the normal init files are read after the GUI is initialized.
If you must have customizations in the early init file that rely on GUI
features, make them run off hooks provided by the Emacs startup, such as
‘window-setup-hook’ or ‘tty-setup-hook’.  *Note Hooks::.

   For more information on the early init file, *note (elisp)Init
File::.


File: emacs.info,  Node: Authentication,  Prev: Init File,  Up: Customization

50.5 Keeping Persistent Authentication Information
==================================================

Some Emacs packages, which connect to other services, require
authentication (*note Passwords::), e.g., see *note Gnus: (gnus)Top, or
*note Tramp: (tramp)Top.  Because it might be annoying to provide the
same user name and password again and again, Emacs offers to keep this
information persistent via the ‘auth-source’ library.

   By default, the authentication information is taken from the file
‘~/.authinfo’ or ‘~/.authinfo.gpg’ or ‘~/.netrc’.  These files have a
syntax similar to netrc files as known from the ‘ftp’ program, like
this:

     machine MYMACHINE login MYLOGINNAME password MYPASSWORD port MYPORT

   Similarly, the ‘auth-source’ library supports multiple storage
backend, currently either the classic netrc backend, JSON files, the
Secret Service API, and pass, the standard unix password manager.

   All these alternatives can be customized via the user option
‘auth-sources’, see *note Emacs auth-source: (auth)Help for users.

   When a password is entered interactively, which is not found via the
configured backend, some of the backends offer to save it persistently.
This can be changed by customizing the user option
‘auth-source-save-behavior’.


File: emacs.info,  Node: Quitting,  Next: Lossage,  Prev: Customization,  Up: Top

# /. 51 Quitting and Aborting
****************************

‘C-g’
‘C-<Break> (MS-DOS only)’
     Quit: cancel running or partially typed command.
‘C-]’
     Abort innermost recursive editing level and cancel the command
     which invoked it (‘abort-recursive-edit’).
‘<ESC> <ESC> <ESC>’
     Either quit or abort, whichever makes sense
     (‘keyboard-escape-quit’).
‘M-x top-level’
     Abort all recursive editing levels that are currently executing.
‘C-/’
‘C-x u’
‘C-_’
     Cancel a previously made change in the buffer contents (‘undo’).

   There are two ways of canceling a command before it has finished:
“quitting” with ‘C-g’, and “aborting” with ‘C-]’ or ‘M-x top-level’.
Quitting cancels a partially typed command, or one which is still
running.  Aborting exits a recursive editing level and cancels the
command that invoked the recursive edit (*note Recursive Edit::).

   Quitting with ‘C-g’ is the way to get rid of a partially typed
command, or a numeric argument that you don’t want.  Furthermore, if you
are in the middle of a command that is running, ‘C-g’ stops the command
in a relatively safe way.  For example, if you quit out of a kill
command that is taking a long time, either your text will _all_ still be
in the buffer, or it will _all_ be in the kill ring, or maybe both.  If
the region is active, ‘C-g’ deactivates the mark, unless Transient Mark
mode is off (*note Disabled Transient Mark::).  If you are in the middle
of an incremental search, ‘C-g’ behaves specially; it may take two
successive ‘C-g’ characters to get out of a search.  *Note Incremental
Search::, for details.

   If you type ‘C-g’ in a minibuffer, this quits the command that opened
that minibuffer, closing it.  If that minibuffer is not the most
recently opened one (which can happen when
‘minibuffer-follows-selected-frame’ is ‘nil’ (*note Basic
Minibuffer::)), ‘C-g’ also closes the more recently opened ones,
quitting their associated commands, after asking you for confirmation.

   On MS-DOS, the character ‘C-<Break>’ serves as a quit character like
‘C-g’.  The reason is that it is not feasible, on MS-DOS, to recognize
‘C-g’ while a command is running, between interactions with the user.
By contrast, it _is_ feasible to recognize ‘C-<Break>’ at all times.
*Note MS-DOS Keyboard::.

   ‘C-g’ works by setting the variable ‘quit-flag’ to ‘t’ the instant
‘C-g’ is typed; Emacs Lisp checks this variable frequently, and quits if
it is non-‘nil’.  ‘C-g’ is only actually executed as a command if you
type it while Emacs is waiting for input.  In that case, the command it
runs is ‘keyboard-quit’.

   On a text terminal, if you quit with ‘C-g’ a second time before the
first ‘C-g’ is recognized, you activate the emergency-escape feature and
return to the shell.  *Note Emergency Escape::.

   There are some situations where you cannot quit.  When Emacs is
waiting for the operating system to do something, quitting is impossible
unless special pains are taken for the particular system call within
Emacs where the waiting occurs.  We have done this for the system calls
that users are likely to want to quit from, but it’s possible you will
encounter a case not handled.  In one very common case—waiting for file
input or output using NFS—Emacs itself knows how to quit, but many NFS
implementations simply do not allow user programs to stop waiting for
NFS when the NFS server is hung.

   Aborting with ‘C-]’ (‘abort-recursive-edit’) is used to get out of a
recursive editing level and cancel the command which invoked it.
Quitting with ‘C-g’ does not do this, and could not do this, because it
is used to cancel a partially typed command _within_ the recursive
editing level.  Both operations are useful.  For example, if you are in
a recursive edit and type ‘C-u 8’ to enter a numeric argument, you can
cancel that argument with ‘C-g’ and remain in the recursive edit.

   The sequence ‘<ESC> <ESC> <ESC>’ (‘keyboard-escape-quit’) can either
quit or abort.  (We defined it this way because <ESC> means “get out” in
many PC programs.)  It can cancel a prefix argument, clear a selected
region, or get out of a Query Replace, like ‘C-g’.  It can get out of
the minibuffer or a recursive edit, like ‘C-]’.  It can also get out of
splitting the frame into multiple windows, as with ‘C-x 1’.  One thing
it cannot do, however, is stop a command that is running.  That’s
because it executes as an ordinary command, and Emacs doesn’t notice it
until it is ready for the next command.

   The command ‘M-x top-level’ is equivalent to enough ‘C-]’ commands to
get you out of all the levels of recursive edits that you are in; it
also exits the minibuffer if it is active.  ‘C-]’ gets you out one level
at a time, but ‘M-x top-level’ goes out all levels at once.  Both ‘C-]’
and ‘M-x top-level’ are like all other commands, and unlike ‘C-g’, in
that they take effect only when Emacs is ready for a command.  ‘C-]’ is
an ordinary key and has its meaning only because of its binding in the
keymap.  *Note Recursive Edit::.

   ‘C-/’ (‘undo’) is not strictly speaking a way of canceling a command,
but you can think of it as canceling a command that already finished
executing.  *Note Undo::, for more information about the undo facility.


File: emacs.info,  Node: Lossage,  Next: Bugs,  Prev: Quitting,  Up: Top

# /. 52 Dealing with Emacs Trouble
*********************************

This section describes how to recognize and deal with situations in
which Emacs does not work as you expect, such as keyboard code mixups,
garbled displays, running out of memory, and crashes and hangs.

   *Note Bugs::, for what to do when you think you have found a bug in
Emacs.

* Menu:

* Stuck Recursive::       ’[...]’ in mode line around the parentheses.
* Screen Garbled::        Garbage on the screen.
* Text Garbled::          Garbage in the text.
* Memory Full::           How to cope when you run out of memory.
* Crashing::              What Emacs does when it crashes.
* After a Crash::         Recovering editing in an Emacs session that crashed.
* Emergency Escape::      What to do if Emacs stops responding.
* DEL Does Not Delete::   What to do if <DEL> doesn’t delete.


File: emacs.info,  Node: Stuck Recursive,  Next: Screen Garbled,  Up: Lossage

52.1 Recursive Editing Levels
=============================

Recursive editing levels are important and useful features of Emacs, but
they can seem like malfunctions if you do not understand them.

   If the mode line has square brackets ‘[...]’ around the parentheses
that contain the names of the major and minor modes, you have entered a
recursive editing level.  If you did not do this on purpose, or if you
don’t understand what that means, you should just get out of the
recursive editing level.  To do so, type ‘M-x top-level’.  *Note
Recursive Edit::.


File: emacs.info,  Node: Screen Garbled,  Next: Text Garbled,  Prev: Stuck Recursive,  Up: Lossage

52.2 Garbage on the Screen
==========================

If the text on a text terminal looks wrong, the first thing to do is see
whether it is wrong in the buffer.  Type ‘C-l’ (‘recenter-top-bottom’)
to redisplay the entire screen.  If the screen appears correct after
this, the problem was entirely in the previous screen update.
(Otherwise, see the following section.)

   Display updating problems often result from an incorrect terminfo
entry for the terminal you are using.  The file ‘etc/TERMS’ in the Emacs
distribution gives the fixes for known problems of this sort.  ‘INSTALL’
contains general advice for these problems in one of its sections.  If
you seem to be using the right terminfo entry, it is possible that there
is a bug in the terminfo entry, or a bug in Emacs that appears for
certain terminal types.


File: emacs.info,  Node: Text Garbled,  Next: Memory Full,  Prev: Screen Garbled,  Up: Lossage

52.3 Garbage in the Text
========================

If ‘C-l’ shows that the text is wrong, first type ‘C-h l’
(‘view-lossage’) to see what commands you typed to produce the observed
results.  Then try undoing the changes step by step using ‘C-x u’
(‘undo’), until it gets back to a state you consider correct.

   If a large portion of text appears to be missing at the beginning or
end of the buffer, check for the word ‘Narrow’ in the mode line.  If it
appears, the text you don’t see is probably still present, but
temporarily off-limits.  To make it accessible again, type ‘C-x n w’
(‘widen’).  *Note Narrowing::.


File: emacs.info,  Node: Memory Full,  Next: Crashing,  Prev: Text Garbled,  Up: Lossage

52.4 Running out of Memory
==========================

If you get the error message ‘Virtual memory exceeded’, save your
modified buffers with ‘C-x s’ (‘save-some-buffers’).  This method of
saving them has the smallest need for additional memory.  Emacs keeps a
reserve of memory which it makes available when this error happens; that
should be enough to enable ‘C-x s’ to complete its work.  When the
reserve has been used, ‘!MEM FULL!’ appears at the beginning of the mode
line, indicating there is no more reserve.

   Once you have saved your modified buffers, you can exit this Emacs
session and start another, or you can use ‘M-x kill-some-buffers’ to
free space in the current Emacs job.  If this frees up sufficient space,
Emacs will refill its memory reserve, and ‘!MEM FULL!’ will disappear
from the mode line.  That means you can safely go on editing in the same
Emacs session.

   Do not use ‘M-x buffer-menu’ to save or kill buffers when you run out
of memory, because the Buffer Menu needs a fair amount of memory itself,
and the reserve supply may not be enough.

   On GNU/Linux systems, Emacs does not normally get notified about
out-of-memory situations; instead, the OS can kill the Emacs process
when it runs out of memory.  This feature is known as the “out-of-memory
killer”, or “OOM killer”.  When this behavior is in effect, Emacs is
unable to detect the out-of-memory situation in time, and won’t be able
to let you save your buffer as described above.  However, it is possible
to turn off this behavior of the OS, and thus allow Emacs a chance to
handle the out-of-memory situation in a more useful manner, before it is
killed.  To do that, become the super user, edit the file
‘/etc/sysctl.conf’ to contain the lines shown below, and then invoke the
command ‘sysctl -p’ from the shell prompt:

     vm.overcommit_memory=2
     vm.overcommit_ratio=0

Please note that the above setting affects all the processes on the
system, and in general the behavior of the system under memory pressure,
not just the Emacs process alone.


File: emacs.info,  Node: Crashing,  Next: After a Crash,  Prev: Memory Full,  Up: Lossage

52.5 When Emacs Crashes
=======================

Emacs is not supposed to crash, but if it does, it produces a “crash
report” prior to exiting.  The crash report is printed to the standard
error stream.  If Emacs was started from a graphical desktop on a GNU or
Unix system, the standard error stream is commonly redirected to a file
such as ‘~/.xsession-errors’, so you can look for the crash report
there.  On MS-Windows, the crash report is written to a file named
‘emacs_backtrace.txt’ in the current directory of the Emacs process, in
addition to the standard error stream.

   The format of the crash report depends on the platform.  On some
platforms, such as those using the GNU C Library, the crash report
includes a “backtrace” describing the execution state prior to crashing,
which can be used to help debug the crash.  Here is an example for a GNU
system:

     Fatal error 11: Segmentation fault
     Backtrace:
     emacs[0x5094e4]
     emacs[0x4ed3e6]
     emacs[0x4ed504]
     /lib64/libpthread.so.0[0x375220efe0]
     /lib64/libpthread.so.0(read+0xe)[0x375220e08e]
     emacs[0x509af6]
     emacs[0x5acc26]
     ...

The number ‘11’ is the system signal number corresponding to the
crash—in this case a segmentation fault.  The hexadecimal numbers are
program addresses, which can be associated with source code lines using
a debugging tool.  For example, the GDB command ‘list *0x509af6’ prints
the source-code lines corresponding to the ‘emacs[0x509af6]’ entry.  If
your system has the ‘addr2line’ utility, the following shell command
outputs a backtrace with source-code line numbers:

     sed -n 's/.*\[\(.*\)]$/\1/p' BACKTRACE |
       addr2line -C -f -i -p -e BINDIR/EMACS-BINARY

On MS-Windows, the backtrace looks somewhat differently, for example:

     Backtrace:
     00007ff61166a12e
     00007ff611538be1
     00007ff611559601
     00007ff6116ce84a
     00007ff9b7977ff0
     ...

Therefore, the filtering via ‘sed’ is not required, and the command to
show the source-code line number is

      addr2line -C -f -i -p -e BINDIR/EMACS-BINARY < BACKTRACE

Here, BACKTRACE is the name of a text file containing a copy of the
backtrace (on MS-Windows, ‘emacs_backtrace.txt’ in the directory where
Emacs was started), BINDIR is the name of the directory that contains
the Emacs executable, and EMACS-BINARY is the name of the Emacs
executable file, normally ‘emacs’ on GNU and Unix systems and
‘emacs.exe’ on MS-Windows and MS-DOS.  Omit the ‘-p’ option if your
version of ‘addr2line’ is too old to have it.

   Optionally, Emacs can generate a “core dump” when it crashes, on
systems that support core files.  A core dump is a file containing
voluminous data about the state of the program prior to the crash,
usually examined by loading it into a debugger such as GDB.  On many
platforms, core dumps are disabled by default, and you must explicitly
enable them by running the shell command ‘ulimit -c unlimited’ (e.g., in
your shell startup script).


File: emacs.info,  Node: After a Crash,  Next: Emergency Escape,  Prev: Crashing,  Up: Lossage

52.6 Recovery After a Crash
===========================

If Emacs or the computer crashes, you can recover the files you were
editing at the time of the crash from their auto-save files.  To do
this, start Emacs again and type the command ‘M-x recover-session’.

   This command initially displays a buffer which lists interrupted
session files, each with its date.  You must choose which session to
recover from.  Typically the one you want is the most recent one.  Move
point to the one you choose, and type ‘C-c C-c’.

   Then ‘recover-session’ considers each of the files that you were
editing during that session; for each such file, it asks whether to
recover that file.  If you answer ‘y’ for a file, it shows the dates of
that file and its auto-save file, then asks once again whether to
recover that file.  For the second question, you must confirm with
‘yes’.  If you do, Emacs visits the file but gets the text from the
auto-save file.

   When ‘recover-session’ is done, the files you’ve chosen to recover
are present in Emacs buffers.  You should then save them.  Only
this—saving them—updates the files themselves.

   As a last resort, if you had buffers with content which were not
associated with any files, or if the autosave was not recent enough to
have recorded important changes, you can use the ‘etc/emacs-buffer.gdb’
script with GDB (the GNU Debugger) to retrieve them from a core
dump—provided that a core dump was saved, and that the Emacs executable
was not stripped of its debugging symbols.

   As soon as you get the core dump, rename it to another name such as
‘core.emacs’, so that another crash won’t overwrite it.

   To use this script, run ‘gdb’ with the file name of your Emacs
executable and the file name of the core dump, e.g., ‘gdb /usr/bin/emacs
core.emacs’.  At the ‘(gdb)’ prompt, load the recovery script: ‘source
/usr/src/emacs/etc/emacs-buffer.gdb’.  Then type the command
‘ybuffer-list’ to see which buffers are available.  For each buffer, it
lists a buffer number.  To save a buffer, use ‘ysave-buffer’; you
specify the buffer number, and the file name to write that buffer into.
You should use a file name which does not already exist; if the file
does exist, the script does not make a backup of its old contents.


File: emacs.info,  Node: Emergency Escape,  Next: DEL Does Not Delete,  Prev: After a Crash,  Up: Lossage

52.7 Emergency Escape
=====================

On text terminals, the “emergency escape” feature suspends Emacs
immediately if you type ‘C-g’ a second time before Emacs can actually
respond to the first one by quitting.  This is so you can always get out
of GNU Emacs no matter how badly it might be hung.  When things are
working properly, Emacs recognizes and handles the first ‘C-g’ so fast
that the second one won’t trigger emergency escape.  However, if some
problem prevents Emacs from handling the first ‘C-g’ properly, then the
second one will get you back to the shell.

   When you resume Emacs after a suspension caused by emergency escape,
it reports the resumption and asks a question or two before going back
to what it had been doing:

     Emacs is resuming after an emergency escape.
     Auto-save? (y or n)
     Abort (and dump core)? (y or n)

Answer each question with ‘y’ or ‘n’ followed by <RET>.

   Saying ‘y’ to ‘Auto-save?’ causes immediate auto-saving of all
modified buffers in which auto-saving is enabled.  Saying ‘n’ skips
this.  This question is omitted if Emacs is in a state where auto-saving
cannot be done safely.

   Saying ‘y’ to ‘Abort (and dump core)?’ causes Emacs to crash, dumping
core.  This is to enable a wizard to figure out why Emacs was failing to
quit in the first place.  Execution does not continue after a core dump.

   If you answer this question ‘n’, Emacs execution resumes.  With luck,
Emacs will ultimately do the requested quit.  If not, each subsequent
‘C-g’ invokes emergency escape again.

   If Emacs is not really hung, just slow, you may invoke the double
‘C-g’ feature without really meaning to.  Then just resume and answer
‘n’ to both questions, and you will get back to the former state.  The
quit you requested will happen by and by.

   Emergency escape is active only for text terminals.  On graphical
displays, you can use the mouse to kill Emacs or switch to another
program.

   On MS-DOS, you must type ‘C-<Break>’ (twice) to cause emergency
escape—but there are cases where it won’t work, when a system call hangs
or when Emacs is stuck in a tight loop in C code.


File: emacs.info,  Node: DEL Does Not Delete,  Prev: Emergency Escape,  Up: Lossage

52.8 If <DEL> Fails to Delete
=============================

Every keyboard has a large key, usually labeled <BACKSPACE>, which is
ordinarily used to erase the last character that you typed.  In Emacs,
this key is supposed to be equivalent to <DEL>.

   When Emacs starts up on a graphical display, it determines
automatically which key should be <DEL>.  In some unusual cases, Emacs
gets the wrong information from the system, and <BACKSPACE> ends up
deleting forwards instead of backwards.

   Some keyboards also have a <Delete> key, which is ordinarily used to
delete forwards.  If this key deletes backward in Emacs, that too
suggests Emacs got the wrong information—but in the opposite sense.

   On a text terminal, if you find that <BACKSPACE> prompts for a Help
command, like ‘Control-h’, instead of deleting a character, it means
that key is actually sending the ‘BS’ character.  Emacs ought to be
treating <BS> as <DEL>, but it isn’t.

   In all of those cases, the immediate remedy is the same: use the
command ‘M-x normal-erase-is-backspace-mode’.  This toggles between the
two modes that Emacs supports for handling <DEL>, so if Emacs starts in
the wrong mode, this should switch to the right mode.  On a text
terminal, if you want to ask for help when <BS> is treated as <DEL>, use
<F1> instead of ‘C-h’; ‘C-?’ may also work, if it sends character code
127.

   To fix the problem in every Emacs session, put one of the following
lines into your initialization file (*note Init File::).  For the first
case above, where <BACKSPACE> deletes forwards instead of backwards, use
this line to make <BACKSPACE> act as <DEL>:

     (normal-erase-is-backspace-mode 0)

For the other two cases, use this line:

     (normal-erase-is-backspace-mode 1)

   Another way to fix the problem for every Emacs session is to
customize the variable ‘normal-erase-is-backspace’: the value ‘t’
specifies the mode where <BS> or <BACKSPACE> is <DEL>, and ‘nil’
specifies the other mode.  *Note Easy Customization::.


File: emacs.info,  Node: Bugs,  Next: Contributing,  Prev: Lossage,  Up: Top

# /. 53 Reporting Bugs
*********************

If you think you have found a bug in Emacs, please report it.  We cannot
promise to fix it, or always to agree that it is a bug, but we certainly
want to hear about it.  The same applies for new features you would like
to see added.  This section will help you to determine whether you found
a bug, and if so, construct an effective bug report.

   The general procedure when you find something that could be a bug is
as follows:

   • See if what you found is a known problem or a bug that was already
     reported and/or fixed.  *Note Known Problems::, where you will find
     how to look for known problems and bugs.

   • If you are unsure whether the behavior you see is a bug, see *note
     Bug Criteria::, which tells what we consider as clear bugs in
     Emacs.

   • Once you decide you found a bug, see *note Understanding Bug
     Reporting::, which helps you in describing what you see in the most
     efficient manner, making our job of reproducing the issue and
     investigating it easier.

   • Next, see *note Checklist for Bug Reports: Checklist, where we
     describe in detail how to submit a bug report and what information
     to include in it.  In a nutshell, you submit a bug report via
     electronic mail using the Emacs command ‘report-emacs-bug’, which
     assists you in doing so.  Submitting a bug report starts the
     process of investigating and fixing the bug, where you will receive
     copies of email messages discussing the bug, in which we might ask
     you to provide more information, test possible fixes, etc.

   • Finally, if you want to propose specific changes to Emacs, whether
     to fix a bug, add a new feature, or improve our documentation,
     please see *note Sending Patches::, for details about submitting
     such changes.

* Menu:

* Known Problems::               How to read about known problems and bugs.
* Criteria:  Bug Criteria.       Have you really found a bug?
* Understanding Bug Reporting::  How to report a bug effectively.
* Checklist::                    Steps to follow for a good bug report.
* Sending Patches::              How to send a patch for GNU Emacs.


File: emacs.info,  Node: Known Problems,  Next: Bug Criteria,  Up: Bugs

53.1 Reading Existing Bug Reports and Known Problems
====================================================

Before reporting a bug, if at all possible, please check to see if we
already know about it.  Indeed, it may already have been fixed in a
later release of Emacs, or in the development version.  Here is a list
of the main places you can read about known issues:

   • The ‘etc/PROBLEMS’ file; type ‘C-h C-p’ to read it.  This file
     contains a list of particularly well-known issues that have been
     encountered in compiling, installing and running Emacs, with
     special emphasis on issues caused by other software that cannot be
     easily solved in Emacs.  Often, you will find there suggestions for
     workarounds and solutions.

   • The GNU Bug Tracker at <https://debbugs.gnu.org>.  Emacs bugs and
     issues are filed in the tracker under the ‘emacs’ package.  The
     tracker records information about the status of each bug, the
     initial bug report, and the follow-up messages by the bug reporter
     and Emacs developers who participate in discussing and fixing the
     bug.  You can search for bugs by subject, severity, and other
     criteria.  For more complex search criteria, use
     <https://debbugs.gnu.org/cgi/search.cgi>.

     Instead of browsing the bug tracker as a web page, you can browse
     it from Emacs using the ‘debbugs’ package, which can be downloaded
     via the Package Menu (*note Packages::).  This package provides the
     command ‘M-x debbugs-gnu’ to list bugs, and ‘M-x
     debbugs-gnu-search’ to search for a specific bug.  User tags,
     applied by the Emacs maintainers, are shown by ‘M-x
     debbugs-gnu-usertags’.

   • The ‘bug-gnu-emacs’ mailing list (also available as the newsgroup
     ‘gnu.emacs.bug’).  You can read the list archives at
     <https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs>.  This list
     works as a mirror of the Emacs bug reports and follow-up messages
     which are sent to the bug tracker.  It also contains old bug
     reports from before the bug tracker was introduced (in early 2008).

     If you like, you can subscribe to the list.  Be aware that its
     purpose is to provide the Emacs maintainers with information about
     bugs and feature requests, so reports may contain fairly large
     amounts of data; spectators should not complain about this.

   • The ‘emacs-pretest-bug’ mailing list.  This list is no longer used,
     and is mainly of historical interest.  At one time, it was used for
     bug reports in development (i.e., not yet released) versions of
     Emacs.  You can read the archives for 2003 to mid 2007 at
     <https://lists.gnu.org/r/emacs-pretest-bug/>.  Nowadays, email
     messages sent to this list are redirected to ‘bug-gnu-emacs’.

   • The ‘emacs-devel’ mailing list.  Sometimes people report bugs to
     this mailing list.  This is not the main purpose of the list,
     however, and it is much better to send bug reports to the bug list.
     You should not feel obliged to read this list before reporting a
     bug.


File: emacs.info,  Node: Bug Criteria,  Next: Understanding Bug Reporting,  Prev: Known Problems,  Up: Bugs

53.2 When Is There a Bug
========================

If Emacs accesses an invalid memory location (a.k.a. “segmentation
fault”) or exits with an operating system error message that indicates a
problem in the program (as opposed to something like “disk full”), then
it is certainly a bug.

   If the Emacs display does not correspond properly to the contents of
the buffer, then it is a bug.  But you should check that features like
buffer narrowing (*note Narrowing::), which can hide parts of the buffer
or change how it is displayed, are not responsible.

   Taking forever to complete a command can be a bug, but you must make
sure that it is really Emacs’s fault.  Some commands simply take a long
time.  Type ‘C-g’ (‘C-<Break>’ on MS-DOS) and then ‘C-h l’ to see
whether the input Emacs received was what you intended to type; if the
input was such that you _know_ it should have been processed quickly,
report a bug.  If you don’t know whether the command should take a long
time, find out by looking in the manual or by asking for assistance.

   If a command you are familiar with causes an Emacs error message in a
case where its usual definition ought to be reasonable, it is probably a
bug.

   If a command does the wrong thing, that is a bug.  But be sure you
know for certain what it ought to have done.  If you aren’t familiar
with the command, it might actually be working right.  If in doubt, read
the command’s documentation (*note Name Help::).

   A command’s intended definition may not be the best possible
definition for editing with.  This is a very important sort of problem,
but it is also a matter of judgment.  Also, it is easy to come to such a
conclusion out of ignorance of some of the existing features.  It is
probably best not to complain about such a problem until you have
checked the documentation in the usual ways, feel confident that you
understand it, and know for certain that what you want is not available.
Ask other Emacs users, too.  If you are not sure what the command is
supposed to do after a careful reading of the manual, check the index
and glossary for any terms that may be unclear.

   If after careful rereading of the manual you still do not understand
what the command should do, that indicates a bug in the manual, which
you should report.  The manual’s job is to make everything clear to
people who are not Emacs experts—including you.  It is just as important
to report documentation bugs as program bugs.

   If the built-in documentation for a function or variable disagrees
with the manual, one of them must be wrong; that is a bug.

   For problems with packages that are not part of Emacs, it is better
to begin by reporting them to the package developers.


File: emacs.info,  Node: Understanding Bug Reporting,  Next: Checklist,  Prev: Bug Criteria,  Up: Bugs

53.3 Understanding Bug Reporting
================================

When you decide that there is a bug, it is important to report it, and
to report it in a way which is useful.  What is most useful is an exact
description of what commands you type, starting with the shell command
to run Emacs, until the problem happens, and the effects produced by
typing those commands.

   The most important principle in reporting a bug is to report _facts_.
Hypotheses and verbal descriptions are no substitute for the detailed
raw data.  Reporting the facts is straightforward, but many people
strain to posit explanations and report them instead of the facts.  If
the explanations are based on guesses about how Emacs is implemented,
they night not be useful; meanwhile, lacking the facts, we will have no
real information about the bug.  If you want to actually _debug_ the
problem, and report explanations that are more than guesses, that is
useful—but please include the raw facts as well.

   For example, suppose that you type ‘C-x C-f /glorp/baz.ugh <RET>’,
visiting a file which (you know) happens to be rather large, and Emacs
displays ‘I feel pretty today’.  The bug report would need to provide
all that information.  You should not assume that the problem is due to
the size of the file and say, “I visited a large file, and Emacs
displayed ‘I feel pretty today’.” This is what we mean by “guessing
explanations”.  The problem might be due to the fact that there is a ‘z’
in the file name.  If this is so, then when we got your report, we would
try out the problem with some large file, probably with no ‘z’ in its
name, and not see any problem.  There is no way we could guess that we
should try visiting a file with a ‘z’ in its name.

   You should not even say “visit a file” instead of ‘C-x C-f’.  That’s
because a file can be visited in more than one way, and there’s no
certainty that all of them reproduce the problem.  Similarly, rather
than saying “if I have three characters on the line”, say “after I type
‘<RET> A B C <RET> C-p’”, if that is the way you entered the text—that
is, tell us about the text which in your case produced the problem.

   If possible, try quickly to reproduce the bug by invoking Emacs with
‘emacs -Q’ (so that Emacs starts with no initial customizations; *note
Initial Options::), and repeating the steps that you took to trigger the
bug.  If you can reproduce the bug this way, that rules out bugs in your
personal customizations and makes the bug much easier to reproduce.
Then your bug report should begin by stating that you started Emacs with
‘emacs -Q’, followed by the exact sequence of steps for reproducing the
bug.  If possible, inform us of the exact contents of any file that is
needed to reproduce the bug.

   Some bugs are not reproducible from ‘emacs -Q’; some are not easily
reproducible at all.  In that case, you should report what you have—but,
as before, please stick to the raw facts about what you did to trigger
the bug the first time.

   If you have multiple issues that you want to report, please make a
separate bug report for each.


File: emacs.info,  Node: Checklist,  Next: Sending Patches,  Prev: Understanding Bug Reporting,  Up: Bugs

53.4 Checklist for Bug Reports
==============================

Before reporting a bug, first try to see if the problem has already been
reported (*note Known Problems::).

   If you are able to, try the latest release of Emacs to see if the
problem has already been fixed.  Even better is to try the latest
development version.  We recognize that this is not easy for some
people, so do not feel that you absolutely must do this before making a
report.

   The best way to write a bug report for Emacs is to use the command
‘M-x report-emacs-bug’.  This sets up a mail buffer (*note Sending
Mail::) and automatically inserts _some_ of the essential information.
However, it cannot supply all the necessary information; you should
still read and follow the guidelines below, so you can enter the other
crucial information by hand before you send the message.  You may feel
that some of the information inserted by ‘M-x report-emacs-bug’ is not
relevant, but unless you are absolutely sure, it is best to leave it, so
that the developers can decide for themselves.

   When you have finished writing your report, type ‘C-c C-c’ and it
will be sent to the Emacs maintainers at <bug-gnu-emacs@gnu.org>.  If
you cannot send mail from inside Emacs, you can copy the text of your
report to your normal mail client (if your system supports it, you can
type ‘C-c M-i’ to have Emacs do this for you) and send it to that
address.  Or you can simply send an email to that address describing the
problem, including the necessary information mentioned below.

   If you want to submit code to Emacs (to fix a problem or implement a
new feature), the easiest way to do this is to send a patch to the Emacs
issue tracker.  Use the ‘M-x submit-emacs-patch’ command for that, which
works much the same as when reporting bugs; *note Sending Patches::.

   In any case, your report will be sent to the ‘bug-gnu-emacs’ mailing
list, and stored in the GNU Bug Tracker at <https://debbugs.gnu.org>.
Please include a valid reply email address, in case we need to ask you
for more information about your report.  Submissions are moderated, so
there may be a delay before your report actually appears on the tracker.

   You do not need to know how the GNU Bug Tracker works in order to
report a bug, but if you want to, you can read the tracker’s online
documentation (https://debbugs.gnu.org/Advanced.html) to see the various
features you can use.

   All mail sent to the ‘bug-gnu-emacs’ mailing list is also gatewayed
to the ‘gnu.emacs.bug’ newsgroup.  The reverse is also true, but we ask
you not to post bug reports (or replies) via the newsgroup.  It can make
it much harder to contact you if we need to ask for more information,
and it does not integrate well with the bug tracker.

   If your data is more than 500,000 bytes, please don’t include it
directly in the bug report; instead, offer to send it on request, or
make it available online and say where.  Large attachments are best sent
compressed.

   The GNU Bug Tracker will assign a bug number to your report; please
use it in the following discussions, keeping the bug address in the list
of recipients, so that the bug discussion is recorded by the tracker.
The bug address will look like ‘NNNNN@debbugs.gnu.org’, where NNNNN is
the bug number.

   To enable maintainers to investigate a bug, your report should
include all these things:

   • A description of what behavior you observe that you believe is
     incorrect.  For example, “The Emacs process gets a fatal signal”,
     or, “The resulting text is as follows, which I think is wrong.”

     Of course, if the bug is that Emacs gets a fatal signal, then one
     can’t miss it.  But if the bug is incorrect text, the maintainer
     might fail to notice what is wrong.  Why leave it to chance?

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the source is out of sync, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and the copy here might not.  If
     you _said_ to expect a crash, then when Emacs here fails to crash,
     we would know that the bug was not happening.  If you don’t say to
     expect a crash, then we would not know whether the bug was
     happening—we would not be able to draw any conclusion from our
     observations.

     Usually, description of the behavior and of the way to reproduce
     the problem needs to specify one or more of the following aspects:

        − The complete text of any files needed to reproduce the bug.

          If you can tell us a way to cause the problem without visiting
          any files, please do so.  This makes it much easier to debug.
          If you do need files, make sure you arrange for us to see
          their exact contents.  For example, it can matter whether
          there are spaces at the ends of lines, or a newline after the
          last line in the buffer (nothing ought to care whether the
          last line is terminated, but try telling the bugs that).

        − The precise commands we need to type to reproduce the bug.  If
          at all possible, give a full recipe for an Emacs started with
          the ‘-Q’ option (*note Initial Options::).  This bypasses your
          personal customizations.

          One way to record the input to Emacs precisely is to write a
          dribble file.  To start the file, use the command
          ‘M-x open-dribble-file’.  From then on, Emacs copies all your
          input to the specified dribble file until the Emacs process is
          killed.  Be aware that sensitive information (such as
          passwords) may end up recorded in the dribble file.

        − If the bug is that the Emacs Manual or the Emacs Lisp
          Reference Manual fails to describe the actual behavior of
          Emacs, or that the text is confusing, copy in the text from
          the manual which you think is at fault.  If the section is
          small, just the section name is enough.

        − If the manifestation of the bug is an Emacs error message, it
          is important to report the precise text of the error message,
          and a backtrace showing how the Lisp program in Emacs arrived
          at the error.

          To get the error message text accurately, copy it from the
          ‘*Messages*’ buffer into the bug report.  Copy all of it, not
          just part.

        − Check whether any programs you have loaded into the Lisp
          world, including your initialization file, set any variables
          that may affect the functioning of Emacs.  Also, see whether
          the problem happens in a freshly started Emacs without loading
          your initialization file (start Emacs with the ‘-Q’ switch to
          prevent loading the init files).  If the problem does _not_
          occur then, you must report the precise contents of any
          programs that you must load into the Lisp world in order to
          cause the problem to occur.

        − If the problem does depend on an init file or other Lisp
          programs that are not part of the standard Emacs system, then
          you should make sure it is not a bug in those programs by
          complaining to their maintainers first.  After they verify
          that they are using Emacs in a way that is supposed to work,
          they should report the bug.

        − If you wish to mention something in the GNU Emacs source, show
          the line of code with a few lines of context.  Don’t just give
          a line number.

          The line numbers in the development sources don’t match those
          in your sources.  It would take extra work for the maintainers
          to determine what code is in your version at a given line
          number, and we could not be certain.

        − For possible display bugs on text-mode terminals, the terminal
          type (the value of environment variable ‘TERM’), the complete
          termcap entry for the terminal from ‘/etc/termcap’ (since that
          file is not identical on all machines), and the output that
          Emacs actually sent to the terminal.

          The way to collect the terminal output is to invoke the
          command ‘M-x open-termscript’ just after starting Emacs; it
          will prompt you for the name of the file where to record all
          terminal output until the Emacs process is killed.  If the
          problem happens when Emacs starts up, put the Lisp expression

               (open-termscript "~/termscript")

          into your Emacs initialization file so that the termscript
          file will be open when Emacs displays the screen for the first
          time.

          Be warned: it is often difficult, and sometimes impossible, to
          fix a terminal-dependent bug without access to a terminal of
          the type that stimulates the bug.

   • The version number of Emacs.  Without this, we won’t know whether
     there is any point in looking for the bug in the current version of
     GNU Emacs.

     ‘M-x report-emacs-bug’ includes this information automatically, but
     if you are not using that command for your report you can get the
     version number by typing ‘M-x emacs-version <RET>’.  If that
     command does not work, you probably have something other than GNU
     Emacs, so you will have to report the bug somewhere else.

   • The type of machine you are using, and the operating system name
     and version number (again, automatically included by
     ‘M-x report-emacs-bug’).  ‘M-x emacs-version <RET>’ provides this
     information too.  Copy its output from the ‘*Messages*’ buffer, so
     that you get it all and get it accurately, or use
     ‘C-u M-x emacs-version <RET>’ to insert the version information
     into the current buffer.

   • The command-line arguments given to the ‘configure’ command when
     Emacs was built (automatically included by ‘M-x report-emacs-bug’).

   • A complete list of any modifications you have made to the Emacs
     source.  (We may not have time to investigate the bug unless it
     happens in an unmodified Emacs.  But if you’ve made modifications
     and you don’t tell us, you are sending us on a wild goose chase.)

     Be precise about these changes.  A description in English is not
     enough—send a unified context diff for them.

     Adding files of your own, or porting to another machine, is a
     modification of the source.

   • Details of any other deviations from the standard procedure for
     installing GNU Emacs.

   • If non-ASCII text or internationalization is relevant, the locale
     that was current when you started Emacs.  This is automatically
     included by ‘M-x report-emacs-bug’; alternatively, on GNU/Linux and
     Unix systems, or if you use a POSIX-style shell such as Bash, you
     can use this shell command to view the relevant values:

          echo LC_ALL=$LC_ALL LC_COLLATE=$LC_COLLATE LC_CTYPE=$LC_CTYPE \
            LC_MESSAGES=$LC_MESSAGES LC_TIME=$LC_TIME LANG=$LANG

     You can also use the ‘locale’ command, if your system has it, to
     display your locale settings.

   Here are some things that are not necessary in a bug report:

   • A description of the envelope of the bug—this is not necessary for
     a reproducible bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time-consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  You might as well save time by not searching for
     additional examples.  It is better to send the bug report right
     away, go back to editing, and find another bug to report.

     Of course, if you can find a simpler example to report _instead_ of
     the original one, that is a convenience.  Errors in the output will
     be easier to spot, running under the debugger will take less time,
     etc.

     However, simplification is not vital; if you can’t do this or don’t
     have time to try, please report the bug with your original test
     case.

   • A core dump file.

     Debugging the core dump might be useful, but it can only be done on
     your machine, with your Emacs executable.  Therefore, sending the
     core dump file to the Emacs maintainers won’t be useful.  Above
     all, don’t include the core file in an email bug report!  Such a
     large message can be extremely inconvenient.

   • A system-call trace of Emacs execution.

     System-call traces are very useful for certain special kinds of
     debugging, but in most cases they give little useful information.
     It is therefore strange that many people seem to think that _the_
     way to report information about a crash is to send a system-call
     trace.  Perhaps this is a habit formed from experience debugging
     programs that don’t have source code or debugging symbols.

     In most programs, a backtrace is normally far, far more informative
     than a system-call trace.  Even in Emacs, a simple backtrace is
     generally more informative, though to give full information you
     should supplement the backtrace by displaying variable values and
     printing them as Lisp objects with ‘pr’ (see above).

   • A patch for the bug.

     A patch for the bug is useful if it is a good one.  But don’t omit
     the other information that a bug report needs, such as the test
     case, on the assumption that a patch is sufficient.  We might see
     problems with your patch and decide to fix the problem another way,
     or we might not understand it at all.  And if we can’t understand
     what bug you are trying to fix, or why your patch should be an
     improvement, we mustn’t install it.  *Note Sending Patches::, for
     guidelines on how to make it easy for us to understand and install
     your patches.

   • A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even experts can’t guess right
     about such things without first using the debugger to find the
     facts.

   If you are willing to debug Emacs and provide additional information
about the bug, here is some useful advice:

   • If the bug manifests itself as an error message, try providing a
     Lisp backtrace for the error.  To make a backtrace for the error,
     use ‘M-x toggle-debug-on-error’ before the error happens (that is
     to say, you must give that command and then make the bug happen).
     This causes the error to start the Lisp debugger, which shows you a
     backtrace.  Copy the text of the debugger’s backtrace into the bug
     report.  (The backtrace is more detailed if you load the relevant
     Lisp ‘*.el’ source files before triggering the error, so do that if
     you know how to find and load those files.)

     To debug the error, we suggest using Edebug.  *Note Edebug:
     (elisp)Edebug, for information on debugging Emacs Lisp programs
     with the Edebug package.

     This use of the debugger is possible only if you know how to make
     the bug happen again.  If you can’t make it happen again, at least
     copy the whole error message.

   • If Emacs appears to be stuck in an infinite loop or in a very long
     operation, typing ‘C-g’ with the variable ‘debug-on-quit’ non-‘nil’
     will start the Lisp debugger and show a backtrace.  This backtrace
     is useful for debugging such long loops, so if you can produce it,
     copy it into the bug report.

     If you cannot get Emacs to respond to ‘C-g’ (e.g., because
     ‘inhibit-quit’ is set), then you can try sending the signal
     specified by ‘debug-on-event’ (default SIGUSR2) from outside Emacs
     to cause it to enter the debugger.

   • Additional information from a C debugger such as GDB might enable
     someone to find a problem on a machine which he does not have
     available.  If you don’t know how to use GDB, please read the GDB
     manual—it is not very long, and using GDB is easy.  You can find
     the GDB distribution, including the GDB manual in online form, in
     most of the same places you can find the Emacs distribution.  To
     run Emacs under GDB, you should switch to the ‘src’ subdirectory in
     which Emacs was compiled, then type ‘gdb ./emacs’.  It is important
     for the directory ‘src’ to be current so that GDB will read the
     ‘.gdbinit’ file in this directory.  (You can also tell GDB to read
     that file from inside GDB, by typing ‘source ./.gdbinit’.)

     However, you need to think when you collect the additional
     information if you want it to show what causes the bug.

     For example, many people send just a C-level backtrace, but that is
     not very useful by itself.  A simple backtrace with arguments often
     conveys little about what is happening inside GNU Emacs, because
     most of the arguments listed in the backtrace are pointers to Lisp
     objects.  The numeric values of these pointers have no significance
     whatever; all that matters is the contents of the objects they
     point to (and most of the contents are themselves pointers).

     To provide useful information, you need to show the values of Lisp
     objects in Lisp notation.  Do this for each variable which is a
     Lisp object, in several stack frames near the bottom of the stack.
     Look at the source to see which variables are Lisp objects, because
     the debugger thinks of them as integers.

     To show a variable’s value in Lisp syntax, first print its value,
     then use the user-defined GDB command ‘pr’ to print the Lisp object
     in Lisp syntax.  (If you must use another debugger, call the
     function ‘debug_print’ with the object as an argument.)  The ‘pr’
     command is defined by the file ‘.gdbinit’, and it works only if you
     are debugging a running process (not with a core dump).

     To make Lisp errors stop Emacs and return to GDB, put a breakpoint
     at ‘Fsignal’.

     For a backtrace of Lisp functions running, type the GDB command
     ‘xbacktrace’.

     The file ‘.gdbinit’ defines several other commands that are useful
     for examining the data types and contents of Lisp objects.  Their
     names begin with ‘x’.  These commands work at a lower level than
     ‘pr’, and are less convenient, but they may work even when ‘pr’
     does not, such as when debugging a core dump or when Emacs has had
     a fatal signal.

     More detailed advice and other useful techniques for debugging
     Emacs are available in the file ‘etc/DEBUG’ in the Emacs
     distribution.  That file also includes instructions for
     investigating problems whereby Emacs stops responding (many people
     assume that Emacs is “hung”, whereas in fact it might be in an
     infinite loop).

     To find the file ‘etc/DEBUG’ in your Emacs installation, use the
     directory name stored in the variable ‘data-directory’.


File: emacs.info,  Node: Sending Patches,  Prev: Checklist,  Up: Bugs

53.5 Sending Patches for GNU Emacs
==================================

If you would like to write bug fixes or improvements for GNU Emacs, that
is very helpful.  When you send your changes, please follow these
guidelines to make it easy for the maintainers to use them.  If you
don’t follow these guidelines, your information might still be useful,
but using it will take extra work.  Maintaining GNU Emacs is a lot of
work in the best of circumstances, and we can’t keep up unless you do
your best to help.

   Every patch must have several pieces of information before we can
properly evaluate it.  They are described below.

   When you have all these pieces, use the ‘M-x submit-emacs-patch’
command to send the patch.  The command will prompt you for the Subject
of the patch and a patch file.  It will then create and display a
Message mode buffer with the patch file as an attachment, display the
buffer, and let you explain more about the patch and add any other
information as requested below.  When you are done, type ‘C-c C-c’ to
send the patch via email to the developers.  It will be sent to the GNU
Bug Tracker at <https://debbugs.gnu.org>.  The tracker will assign a
number to your submission, just like it does with bug reports.  The
developers will usually respond, perhaps asking you for more details or
any additional information, so be sure to include a valid reply email
address.

   Here’s what we ask you to provide as part of your patch submissions:

   • An explanation of what problem you are fixing or what improvement
     will the patches bring about:

        − For a fix for an existing bug, it is best to reply to the
          relevant discussion on the ‘bug-gnu-emacs’ list, or the bug
          entry in the GNU Bug Tracker at <https://debbugs.gnu.org>.
          Explain why your change fixes the bug.

        − For a new feature, include a description of the feature and
          your implementation.

        − For a new bug, include a proper bug report for the problem you
          think you have fixed; *note Checklist for Bug Reports:
          Checklist.  We need to convince ourselves that the change is
          right before installing it.  Even if it is correct, we might
          have trouble understanding it if we don’t have a way to
          reproduce the problem it tries to fix.

   • Include in your code changes all the comments that are appropriate
     to help people reading the source in the future understand why this
     change was needed.

   • Don’t mix together changes made for different reasons.  Send them
     _individually_.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one, or
     install each one in a different versions of Emacs.  If you send
     them all jumbled together in a single set of diffs, we have to do
     extra work to disentangle them—to figure out which parts of the
     change serve which purpose.  If we don’t have time for this, we
     might have to postpone inclusion of your patches for a long time.

     If you send each change as soon as you have written it, with its
     own explanation, then two changes never get tangled up, and we can
     consider each one properly without any extra work to disentangle
     them.

   • Send each change as soon as that change is finished.  Sometimes
     people think they are helping us by accumulating many changes to
     send them all together.  As explained above, this is absolutely the
     worst thing you could do.

     Since you should send each change separately, you might as well
     send it right away.  That gives us the option of installing it
     immediately if it is important.

   • The patch itself.  This can be produced in one of the following
     ways:

        − If you are using the Emacs repository, make sure your copy is
          up-to-date (e.g., with ‘git pull’).  You can commit your
          changes to a private branch and generate a patch from the
          master version by using ‘git format-patch master’.  (This is
          the preferred method, as it makes our job of applying the
          patch easier.)  Or you can leave your changes uncommitted and
          use ‘git diff’, as described below.

        − Use ‘diff -u’ to make your diffs.  If you have GNU diff, use
          ‘diff -u -F'^[_a-zA-Z0-9$]\+ *('’ when making diffs of C code.
          This shows the name of the function that each change occurs
          in.

          When producing the diffs, avoid any ambiguity as to which is
          the old version and which is the new.  Please make the old
          version the first argument to diff, and the new version the
          second argument.  And please give one version or the other a
          name that indicates whether it is the old version or your new
          changed one.

   • Write the commit log entries for your changes.  This is both to
     save us the extra work of writing them, and to help explain your
     changes so we can understand them.

     The purpose of the commit log is to explain the rationale of the
     changes, the way the modified code solves whatever problems your
     patch is trying to fix, and also show people where to find what was
     changed.  So you need to be specific about what functions you
     changed and why.  For the details about our style and requirements
     for good commit log messages, please see the “Commit messages”
     section of the file ‘CONTRIBUTE’ in the Emacs source tree.

     Please also look at the commit log entries of recent commits to see
     what sorts of information to put in, and to learn the style that we
     use.  Note that, unlike some other projects, we do require commit
     logs for documentation, i.e., Texinfo files.  *Note Change Log::,
     *Note Change Log Concepts: (standards)Change Log Concepts.

   • When you write the fix, keep in mind that we can’t install a change
     that would break other systems.  Please think about what effect
     your change will have if compiled and/or used on another type of
     system.

     Sometimes people send fixes that _might_ be an improvement in
     general—but it is hard to be sure of this.  It’s hard to install
     such changes because we have to study them very carefully.  Of
     course, a good explanation of the reasoning by which you concluded
     the change was correct can help convince us.

     The safest changes are changes to the files or portions of files
     that are only used for a particular machine or a particular system.
     These are safe because they can’t create new bugs on other machines
     or systems.

     Please help us keep up with the workload by designing the patch in
     a form that is clearly safe to install.


File: emacs.info,  Node: Contributing,  Next: Service,  Prev: Bugs,  Up: Top

# /. 54 Contributing to Emacs Development
****************************************

Emacs is a collaborative project and we encourage contributions from
anyone and everyone.

   There are many ways to contribute to Emacs:

   • find and report bugs; *note Bugs::.

   • answer questions on the Emacs user mailing list
     <https://lists.gnu.org/mailman/listinfo/help-gnu-emacs>.

   • write documentation, either on the wiki
     (https://www.emacswiki.org/), or in the Emacs source repository
     (*note Sending Patches::).

   • check if existing bug reports are fixed in newer versions of Emacs
     <https://debbugs.gnu.org/cgi/pkgreport.cgi?which=pkg&data=emacs>.

   • fix existing bug reports.

   • implement a feature listed in the ‘etc/TODO’ file in the Emacs
     distribution, and submit a patch.

   • implement a new feature, and submit a patch.

   • develop a package that works with Emacs, and publish it on your own
     or in GNU ELPA (<https://elpa.gnu.org/>).

   • port Emacs to a new platform, but that is not common nowadays.

   If you would like to work on improving Emacs, please contact the
maintainers at <emacs-devel@gnu.org>.  You can ask for suggested
projects or suggest your own ideas.

   If you have a feature request or a suggestion for how to improve
Emacs, the best place to send it is to <bug-gnu-emacs@gnu.org> .  Please
explain as clearly as possible what change you would like to see, and
why and how you think it would improve Emacs.

   If you have already written an improvement, please tell us about it.
If you have not yet started work, it is useful to contact
<emacs-devel@gnu.org> before you start; it might be possible to suggest
ways to make your extension fit in better with the rest of Emacs.

   When implementing a feature, please follow the Emacs coding
standards; *note Coding Standards::.  In addition, substantial
contributions require a copyright assignment to the FSF; *note Copyright
Assignment::.

   The development version of Emacs can be downloaded from the
repository where it is actively maintained by a group of developers.
See the Emacs project page <https://savannah.gnu.org/projects/emacs/>
for access details.

   It is important to write your patches based on the current working
version.  If you start from an older version, your patch may be outdated
(so that maintainers will have a hard time applying it), or changes in
Emacs may have made your patch unnecessary.  After you have downloaded
the repository source, you should read the file ‘INSTALL.REPO’ for build
instructions (they differ to some extent from a normal build).

   If you would like to make more extensive contributions, see the
‘CONTRIBUTE’ file in the Emacs source tree for information on how to be
an Emacs developer.  That file is distributed as part of the source
tarball of every released Emacs version, and can also be found on-line
in the Emacs on-line source repository
(https://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE). If you
cloned the Emacs repository, per the instructions in
<https://savannah.gnu.org/projects/emacs/>, you will find this file in
the top directory of the source Emacs tree.

   For documentation on Emacs (to understand how to implement your
desired change), refer to:

   • *Note Emacs Manual: (emacs)Top.

   • *Note Emacs Lisp Reference Manual: (elisp)Top.

   • <https://www.gnu.org/software/emacs>

   • <https://www.emacswiki.org/>

* Menu:

* Coding Standards::        GNU Emacs coding standards
* Copyright Assignment::    assigning copyright to the FSF


File: emacs.info,  Node: Coding Standards,  Next: Copyright Assignment,  Up: Contributing

54.1 Coding Standards
=====================

Contributed code should follow the GNU Coding Standards
<https://www.gnu.org/prep/standards/>.  This may also be available in
info on your system.

   If it doesn’t, we’ll need to find someone to fix the code before we
can use it.

   Emacs has additional style and coding conventions:

   • *Note “Tips and Conventions” Appendix in the Emacs Lisp Reference:
     (elisp)Tips.

   • Avoid using ‘defadvice’ or ‘with-eval-after-load’ for Lisp code to
     be included in Emacs.

   • Remove all trailing whitespace in all source and text files.

   • Use ‘?\s’ instead of ‘? ’ in Lisp code for a space character.


File: emacs.info,  Node: Copyright Assignment,  Prev: Coding Standards,  Up: Contributing

54.2 Copyright Assignment
=========================

The FSF (Free Software Foundation) is the copyright holder for GNU
Emacs.  The FSF is a nonprofit with a worldwide mission to promote
computer user freedom and to defend the rights of all free software
users.  For general information, see the website <https://www.fsf.org/>.

   Generally speaking, for non-trivial contributions to GNU Emacs and
packages stored in GNU ELPA, we require that the copyright be assigned
to the FSF.  For the reasons behind this, see
<https://www.gnu.org/licenses/why-assign.html>.

   Copyright assignment is a simple process.  Residents of many
countries can do it entirely electronically.  We can help you get
started, including sending you the forms you should fill, and answer any
questions you may have (or point you to the people with the answers), at
the <emacs-devel@gnu.org> mailing list.

   (Please note: general discussion about why some GNU projects ask for
a copyright assignment is off-topic for emacs-devel.  See
gnu-misc-discuss instead.)

   A copyright disclaimer is also a possibility, but we prefer an
assignment.  Note that the disclaimer, like an assignment, involves you
sending signed paperwork to the FSF (simply saying “this is in the
public domain” is not enough).  Also, a disclaimer cannot be applied to
future work, it has to be repeated each time you want to send something
new.

   We can accept small changes (roughly, fewer than 15 lines) without an
assignment.  This is a cumulative limit (e.g., three separate 5 line
patches) over all your contributions.


File: emacs.info,  Node: Service,  Next: Copying,  Prev: Contributing,  Up: Top

# /. 55 How To Get Help with GNU Emacs
*************************************

If you need help installing, using or changing GNU Emacs, there are two
ways to find it:

   • Send a message to the mailing list <help-gnu-emacs@gnu.org>, or
     post your request on newsgroup ‘gnu.emacs.help’.  (This mailing
     list and newsgroup interconnect, so it does not matter which one
     you use.)

   • Look in the service directory
     (https://www.fsf.org/resources/service/) for someone who might help
     you for a fee.


File: emacs.info,  Node: Copying,  Next: GNU Free Documentation License,  Prev: Service,  Up: Top

# /. Appendix A GNU GENERAL PUBLIC LICENSE
*****************************************

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program—to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.


File: emacs.info,  Node: GNU Free Documentation License,  Next: Emacs Invocation,  Prev: Copying,  Up: Top

# /. Appendix B GNU Free Documentation License
*********************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: emacs.info,  Node: Emacs Invocation,  Next: X Resources,  Prev: GNU Free Documentation License,  Up: Top

# /. Appendix C Command Line Arguments for Emacs Invocation
**********************************************************

Emacs supports command line arguments to request various actions when
invoking Emacs.  These are for compatibility with other editors and for
sophisticated activities.  We don’t recommend using them for ordinary
editing (*Note Emacs Server::, for a way to access an existing Emacs job
from the command line).

   Arguments starting with ‘-’ are “options”, and so is ‘+LINENUM’.  All
other arguments specify files to visit.  Emacs visits the specified
files while it starts up.  The last file specified on the command line
becomes the current buffer; the other files are also visited in other
buffers.  As with most programs, the special argument ‘--’ says that all
subsequent arguments are file names, not options, even if they start
with ‘-’.

   Emacs command options can specify many things, such as the size and
position of the X window Emacs uses, its colors, and so on.  A few
options support advanced usage, such as running Lisp functions on files
in batch mode.  The sections of this chapter describe the available
options, arranged according to their purpose.

   There are two ways of writing options: the short forms that start
with a single ‘-’, and the long forms that start with ‘--’.  For
example, ‘-d’ is a short form and ‘--display’ is the corresponding long
form.

   The long forms with ‘--’ are easier to remember, but longer to type.
However, you don’t have to spell out the whole option name; any
unambiguous abbreviation is enough.  When a long option requires an
argument, you can use either a space or an equal sign to separate the
option name and the argument.  Thus, for the option ‘--display’, you can
write either ‘--display sugar-bombs:0.0’ or ‘--display=sugar-bombs:0.0’.
We recommend an equal sign because it makes the relationship clearer,
and the tables below always show an equal sign.

   Most options specify how to initialize Emacs, or set parameters for
the Emacs session.  We call them “initial options”.  A few options
specify things to do, such as loading libraries or calling Lisp
functions.  These are called “action options”.  These and file names
together are called “action arguments”.  The action arguments are stored
as a list of strings in the variable ‘command-line-args’.  (Actually,
when Emacs starts up, ‘command-line-args’ contains all the arguments
passed from the command line; during initialization, the initial
arguments are removed from this list when they are processed, leaving
only the action arguments.)

* Menu:

* Action Arguments::    Arguments to visit files, load libraries,
                          and call functions.
* Initial Options::     Arguments that take effect while starting Emacs.
* Command Example::     Examples of using command line arguments.
* Environment::         Environment variables that Emacs uses.
* Display X::           Changing the default display and using remote login.
* Font X::              Choosing a font for text, under X.
* Colors X::            Choosing display colors.
* Window Size X::       Start-up window size, under X.
* Borders X::           Internal and outer borders, under X.
* Title X::             Specifying the initial frame’s title.
* Icons X::             Choosing what sort of icon to use, under X.
* Misc X::              Other display options.


File: emacs.info,  Node: Action Arguments,  Next: Initial Options,  Up: Emacs Invocation

C.1 Action Arguments
====================

Here is a table of action arguments:

‘FILE’
‘--file=FILE’
‘--find-file=FILE’
‘--visit=FILE’
     Visit the specified FILE.  *Note Visiting::.

     When Emacs starts up, it displays the startup buffer in one window,
     and the buffer visiting FILE in another window (*note Windows::).
     If you supply more than one file argument, the displayed file is
     the last one specified on the command line; the other files are
     visited but their buffers are not shown.

     If the startup buffer is disabled (*note Entering Emacs::), then
     starting Emacs with one file argument displays the buffer visiting
     FILE in a single window.  With two file arguments, Emacs displays
     the files in two different windows.  With more than two file
     arguments, Emacs displays the last file specified in one window,
     plus another window with a Buffer Menu showing all the other files
     (*note Several Buffers::).  To inhibit using the Buffer Menu for
     this, change the variable ‘inhibit-startup-buffer-menu’ to ‘t’.

‘+LINENUM FILE’
     Visit the specified FILE, then go to line number LINENUM in it.

‘+LINENUM:COLUMNNUM FILE’
     Visit the specified FILE, then go to line number LINENUM and put
     point at column number COLUMNNUM.

‘-l FILE’
‘--load=FILE’
     Load a Lisp library named FILE with the function ‘load’.  If FILE
     is not an absolute file name, Emacs first looks for it in the
     current directory, then in the directories listed in ‘load-path’
     (*note Lisp Libraries::).

     *Warning:* If previous command-line arguments have visited files,
     the current directory is the directory of the last file visited.

‘-L DIR’
‘--directory=DIR’
     Prepend directory DIR to the variable ‘load-path’.  If you specify
     multiple ‘-L’ options, Emacs preserves the relative order; i.e.,
     using ‘-L /foo -L /bar’ results in a ‘load-path’ of the form
     ‘("/foo" "/bar" ...)’.  If DIR begins with ‘:’, Emacs removes the
     ‘:’ and appends (rather than prepends) the remainder to
     ‘load-path’.  (On MS Windows, use ‘;’ instead of ‘:’; i.e., use the
     value of ‘path-separator’.)

‘-f FUNCTION’
‘--funcall=FUNCTION’
     Call Lisp function FUNCTION.  If it is an interactive function (a
     command), it reads the arguments interactively just as if you had
     called the same function with a key sequence.  Otherwise, it calls
     the function with no arguments.

‘--eval=EXPRESSION’
‘--execute=EXPRESSION’
     Evaluate Lisp expression EXPRESSION.

‘--insert=FILE’
     Insert the contents of FILE into the buffer that is current when
     this command-line argument is processed.  Usually, this is the
     ‘*scratch*’ buffer (*note Lisp Interaction::), but if arguments
     earlier on the command line visit files or switch buffers, that
     might be a different buffer.  The effect of this command-line
     argument is like what ‘M-x insert-file’ does (*note Misc File
     Ops::).

‘--kill’
     Exit from Emacs without asking for confirmation.

‘--help’
     Print a usage message listing all available options, then exit
     successfully.

‘--version’
     Print Emacs version, then exit successfully.

‘--fingerprint’
     Print the Emacs “fingerprint”, which is used to uniquely identify
     the compiled version of Emacs.


File: emacs.info,  Node: Initial Options,  Next: Command Example,  Prev: Action Arguments,  Up: Emacs Invocation

C.2 Initial Options
===================

The initial options specify parameters for the Emacs session.  This
section describes the more general initial options; some other options
specifically related to the X Window System appear in the following
sections.

   Some initial options affect the loading of the initialization file.
Normally, Emacs first loads ‘site-start.el’ if it exists, then your own
initialization file if it exists, and finally the default initialization
file ‘default.el’ if it exists (*note Init File::).  Certain options
prevent loading of some of these files or substitute other files for
them.

‘-chdir DIRECTORY’
‘--chdir=DIRECTORY’
     Change to DIRECTORY before doing anything else.  This is mainly
     used by session management in X so that Emacs starts in the same
     directory as it stopped.  This makes desktop saving and restoring
     easier.

‘-t DEVICE’
‘--terminal=DEVICE’
     Use DEVICE as the device for terminal input and output.  This
     option implies ‘--no-window-system’.

‘-d DISPLAY’
‘--display=DISPLAY’
     Use the X Window System and use the display named DISPLAY to open
     the initial Emacs frame.  *Note Display X::, for more details.

‘-nw’
‘--no-window-system’
     Don’t communicate directly with the window system, disregarding the
     ‘DISPLAY’ environment variable even if it is set.  This means that
     Emacs uses the terminal from which it was launched for all its
     display and input.

‘-batch’
‘--batch’
     Run Emacs in “batch mode”.  Batch mode is used for running programs
     written in Emacs Lisp from shell scripts, makefiles, and so on.  To
     invoke a Lisp program, use the ‘-batch’ option in conjunction with
     one or more of ‘-l’, ‘-f’ or ‘--eval’ (*note Action Arguments::).
     *Note Command Example::, for an example.

     In batch mode, Emacs does not display the text being edited, and
     the standard terminal interrupt characters such as ‘C-z’ and ‘C-c’
     have their usual effect.  Emacs functions that normally print a
     message in the echo area will print to either the standard output
     stream (‘stdout’) or the standard error stream (‘stderr’) instead.
     (To be precise, functions like ‘prin1’, ‘princ’ and ‘print’ print
     to ‘stdout’, while ‘message’ and ‘error’ print to ‘stderr’.)
     Functions that normally read keyboard input from the minibuffer
     take their input from the terminal’s standard input stream
     (‘stdin’) instead.

     ‘--batch’ implies ‘-q’ (do not load an initialization file), but
     ‘site-start.el’ is loaded nonetheless.  It also causes Emacs to
     exit after processing all the command options.  In addition, it
     disables auto-saving except in buffers for which auto-saving is
     explicitly requested, and when saving files it omits the ‘fsync’
     system call unless otherwise requested.

     Errors that occur when running a ‘--batch’ Emacs will result in an
     Emacs Lisp backtrace being printed.  To disable this behavior, set
     ‘backtrace-on-error-noninteractive’ to ‘nil’.

‘--script FILE’
     Run Emacs in batch mode, like ‘--batch’, and then read and execute
     the Lisp code in FILE.

     The normal use of this option is in executable script files that
     run Emacs.  They can start with this text on the first line

          #!/usr/bin/emacs --script

     which will invoke Emacs with ‘--script’ and supply the name of the
     script file as FILE.  Emacs Lisp then treats the ‘#!’ on this first
     line as a comment delimiter.

‘-x’
     This option can only be used in executable script files, and should
     be invoked like this:

          #!/usr/bin/emacs -x

     This is like ‘--script’, but suppresses loading the init files
     (like ‘--quick’), and can’t be used on a normal command line (since
     it doesn’t specify the script to load).  In addition, when it
     reaches the end of the script, it exits Emacs and uses the value of
     the final form as the exit value from the script (if the final
     value is numerical).  Otherwise, it will always exit with a zero
     value.

‘--no-build-details’
     Omit details like system name and build time from the Emacs
     executable, so that builds are more deterministic.  This switch is
     not meant for regular (or interactive) use, since it makes commands
     like ‘system-name’ return ‘nil’.

‘-q’
‘--no-init-file’
     Do not load any initialization file (*note Init File::).  When
     Emacs is invoked with this option, the Customize facility does not
     allow options to be saved (*note Easy Customization::).  This
     option does not disable loading ‘site-start.el’.

‘--no-site-file’
‘-nsl’
     Do not load ‘site-start.el’ (*note Init File::).  The ‘-Q’ option
     does this too, but other options like ‘-q’ do not.

‘--no-site-lisp’
     Do not include the ‘site-lisp’ directories in ‘load-path’ (*note
     Init File::).  The ‘-Q’ option does this too.

‘--init-directory’
     Specify the directory to use when looking for the Emacs init files.

‘--no-splash’
     Do not display a startup screen.  You can also achieve this effect
     by setting the variable ‘inhibit-startup-screen’ to non-‘nil’ in
     your initialization file (*note Entering Emacs::).

‘--no-x-resources’
     Do not load X resources.  You can also achieve this effect by
     setting the variable ‘inhibit-x-resources’ to ‘t’ in your
     initialization file (*note Resources::).

‘-Q’
‘--quick’
     Start Emacs with minimum customizations.  This is similar to using
     ‘-q’, ‘--no-site-file’, ‘--no-site-lisp’, ‘--no-x-resources’, and
     ‘--no-splash’ together.

‘-daemon’
‘--daemon[=NAME]’
‘--bg-daemon[=NAME]’
‘--fg-daemon[=NAME]’
     Start Emacs as a daemon: after Emacs starts up, it starts the Emacs
     server without opening any frames.  You can then use the
     ‘emacsclient’ command to connect to Emacs for editing.
     (Optionally, you can specify an explicit NAME for the server; if
     you do, you will need to specify the same NAME when you invoke
     ‘emacsclient’, via its ‘--socket-name’ option, see *note
     emacsclient Options::.)  *Note Emacs Server::, for information
     about using Emacs as a daemon.  A “background” daemon disconnects
     from the terminal and runs in the background (‘--daemon’ is an
     alias for ‘--bg-daemon’).

‘--no-desktop’
     Do not reload any saved desktop.  *Note Saving Emacs Sessions::.

‘-u USER’
‘--user=USER’
     Load USER’s initialization file instead of your own(1).

‘--debug-init’
     Enable the Emacs Lisp debugger for errors in the init file.  *Note
     Entering the Debugger on an Error: (elisp)Error Debugging.

‘--module-assertions’
     Enable expensive correctness checks when dealing with dynamically
     loadable modules.  This is intended for module authors that wish to
     verify that their module conforms to the module API requirements.
     The option makes Emacs abort if a module-related assertion
     triggers.  *Note Writing Dynamically-Loaded Modules: (elisp)Writing
     Dynamic Modules.

‘--dump-file=FILE’
     Load the dumped Emacs state from the named FILE.  By default, an
     installed Emacs will look for its dump state in a file named
     ‘EMACS.pdmp’ in the directory where the Emacs installation puts the
     architecture-dependent files; the variable ‘exec-directory’ holds
     the name of that directory.  EMACS is the name of the Emacs
     executable file, normally just ‘emacs’.  (When you invoke Emacs
     from the ‘src’ directory where it was built without installing it,
     it will look for the dump file in the directory of the executable.)
     If you rename or move the dump file to a different place, you can
     use this option to tell Emacs where to find that file.

   ---------- Footnotes ----------

   (1) This option has no effect on MS-Windows.


File: emacs.info,  Node: Command Example,  Next: Environment,  Prev: Initial Options,  Up: Emacs Invocation

C.3 Command Argument Example
============================

Here is an example of using Emacs with arguments and options.  It
assumes you have a Lisp program file called ‘hack-c.el’ which, when
loaded, performs some useful operation on the current buffer, expected
to be a C program.

     emacs --batch foo.c -l hack-c -f save-buffer >& log

This says to visit ‘foo.c’, load ‘hack-c.el’ (which makes changes in the
visited file), save ‘foo.c’ (note that ‘save-buffer’ is the function
that ‘C-x C-s’ is bound to), and then exit back to the shell (because of
‘--batch’).  ‘--batch’ also guarantees there will be no problem
redirecting output to ‘log’, because Emacs will not assume that it has a
display terminal to work with.


File: emacs.info,  Node: Environment,  Next: Display X,  Prev: Command Example,  Up: Emacs Invocation

C.4 Environment Variables
=========================

The “environment” is a feature of the operating system; it consists of a
collection of variables with names and values.  Each variable is called
an “environment variable”; environment variable names are
case-sensitive, and it is conventional to use upper case letters only.
The values are all text strings.

   What makes the environment useful is that subprocesses inherit the
environment automatically from their parent process.  This means you can
set up an environment variable in your login shell, and all the programs
you run (including Emacs) will automatically see it.  Subprocesses of
Emacs (such as shells, compilers, and version control programs) inherit
the environment from Emacs, too.

   Inside Emacs, the command ‘M-x getenv’ reads the name of an
environment variable, and prints its value in the echo area.  ‘M-x
setenv’ sets a variable in the Emacs environment, and ‘C-u M-x setenv’
removes a variable.  (Environment variable substitutions with ‘$’ work
in the value just as in file names; see *note File Names with $::.)  The
variable ‘initial-environment’ stores the initial environment inherited
by Emacs.

   The way to set environment variables outside of Emacs depends on the
operating system, and especially the shell that you are using.  For
example, here’s how to set the environment variable ‘ORGANIZATION’ to
‘not very much’ using Bash:

     export ORGANIZATION="not very much"

and here’s how to do it in csh or tcsh:

     setenv ORGANIZATION "not very much"

   When Emacs is using the X Window System, various environment
variables that control X work for Emacs as well.  See the X
documentation for more information.

* Menu:

* General Variables::   Environment variables that all versions of Emacs use.
* Misc Variables::      Certain system-specific variables.
* MS-Windows Registry:: An alternative to the environment on MS-Windows.


File: emacs.info,  Node: General Variables,  Next: Misc Variables,  Up: Environment

C.4.1 General Variables
-----------------------

Here is an alphabetical list of environment variables that have special
meanings in Emacs.  Most of these variables are also used by some other
programs.  Emacs does not require any of these environment variables to
be set, but it uses their values if they are set.

‘CDPATH’
     Used by the ‘cd’ command to search for the directory you specify,
     when you specify a relative directory.
‘COLORTERM’
     If this variable is set to the value ‘truecolor’, it tells Emacs to
     use 24-bit true color on text-mode displays even if the terminfo
     database is not installed.  Emacs will use built-in commands to
     request true color by RGB values instead of the missing terminfo
     information.
‘DBUS_SESSION_BUS_ADDRESS’
     Used by D-Bus when Emacs is compiled with it.  Usually, there is no
     need to change it.  Setting it to a dummy address, like
     ‘unix:path=/dev/null’, suppresses connections to the D-Bus session
     bus as well as autolaunching the D-Bus session bus if not running
     yet.
‘EMACSDATA’
     Directory for the architecture-independent files that come with
     Emacs.  This is used to initialize the variable ‘data-directory’.
‘EMACSDOC’
     Directory for the documentation string file, which is used to
     initialize the Lisp variable ‘doc-directory’.
‘EMACSLOADPATH’
     A colon-separated list of directories(1) to search for Emacs Lisp
     files.  If set, it modifies the usual initial value of the
     ‘load-path’ variable (*note Lisp Libraries::).  An empty element
     stands for the default value of ‘load-path’; e.g., using
     ‘EMACSLOADPATH="/tmp:"’ adds ‘/tmp’ to the front of the default
     ‘load-path’.  To specify an empty element in the middle of the
     list, use 2 colons in a row, as in ‘EMACSLOADPATH="/tmp::/foo"’.
‘EMACSPATH’
     A colon-separated list of directories to search for executable
     files.  If set, Emacs uses this in addition to ‘PATH’ (see below)
     when initializing the variable ‘exec-path’ (*note Shell::).
‘EMAIL’
     Your email address; used to initialize the Lisp variable
     ‘user-mail-address’, which the Emacs mail interface puts into the
     ‘From’ header of outgoing messages (*note Mail Headers::).
‘ESHELL’
     Used for shell-mode to override the ‘SHELL’ environment variable
     (*note Interactive Shell::).
‘HISTFILE’
     The name of the file that shell commands are saved in between
     logins.  This variable defaults to ‘~/.bash_history’ if you use
     Bash, to ‘~/.sh_history’ if you use ksh, and to ‘~/.history’
     otherwise.
‘HOME’
     The location of your files in the directory tree; used for
     expansion of file names starting with a tilde (‘~’).  If set, it
     should be set to an absolute file name.  (If set to a relative file
     name, Emacs interprets it relative to the directory where Emacs was
     started, but we don’t recommend to use this feature.)  If unset,
     ‘HOME’ normally defaults to the home directory of the user given by
     ‘LOGNAME’, ‘USER’ or your user ID, or to ‘/’ if all else fails.  On
     MS-DOS, it defaults to the directory from which Emacs was started,
     with ‘/bin’ removed from the end if it was present.  On Windows,
     the default value of ‘HOME’ is the ‘Application Data’ subdirectory
     of the user profile directory (normally, this is ‘C:/Documents and
     Settings/USERNAME/Application Data’, where USERNAME is your user
     name), though for backwards compatibility ‘C:/’ will be used
     instead if a ‘.emacs’ file is found there.
‘HOSTNAME’
     The name of the machine that Emacs is running on.
‘INFOPATH’
     A colon-separated list of directories in which to search for Info
     files.
‘LC_ALL’
‘LC_COLLATE’
‘LC_CTYPE’
‘LC_MESSAGES’
‘LC_MONETARY’
‘LC_NUMERIC’
‘LC_TIME’
‘LANG’
     The user’s preferred locale.  The locale has six categories,
     specified by the environment variables ‘LC_COLLATE’ for sorting,
     ‘LC_CTYPE’ for character encoding, ‘LC_MESSAGES’ for system
     messages, ‘LC_MONETARY’ for monetary formats, ‘LC_NUMERIC’ for
     numbers, and ‘LC_TIME’ for dates and times.  If one of these
     variables is not set, the category defaults to the value of the
     ‘LANG’ environment variable, or to the default ‘C’ locale if ‘LANG’
     is not set.  But if ‘LC_ALL’ is specified, it overrides the
     settings of all the other locale environment variables.

     On MS-Windows and macOS, if ‘LANG’ is not already set in the
     environment, Emacs sets it based on the system-wide default.  You
     can set this in the “Regional Settings” Control Panel on some
     versions of MS-Windows, and in the “Language and Region” System
     Preference on macOS.

     The value of the ‘LC_CTYPE’ category is matched against entries in
     ‘locale-language-names’, ‘locale-charset-language-names’, and
     ‘locale-preferred-coding-systems’, to select a default language
     environment and coding system.  *Note Language Environments::.
‘LOGNAME’
     The user’s login name.  See also ‘USER’.
‘MAIL’
     The name of your system mail inbox.
‘MH’
     Name of setup file for the mh system.  *Note MH-E: (mh-e)Top.
‘NAME’
     Your real-world name.  This is used to initialize the variable
     ‘user-full-name’ (*note Mail Headers::).
‘NNTPSERVER’
     The name of the news server.  Used by the mh and Gnus packages.
‘ORGANIZATION’
     The name of the organization to which you belong.  Used for setting
     the ‘Organization:’ header in your posts from the Gnus package.
‘PATH’
     A colon-separated list of directories containing executable files.
     This is used to initialize the variable ‘exec-path’ (*note
     Shell::).
‘PWD’
     If set, this should be the default directory when Emacs was
     started.
‘REPLYTO’
     If set, this specifies an initial value for the variable
     ‘mail-default-reply-to’ (*note Mail Headers::).
‘SAVEDIR’
     The name of a directory in which news articles are saved by
     default.  Used by the Gnus package.
‘SHELL’
     The name of an interpreter used to parse and execute programs run
     from inside Emacs.  This is used to initialize the variable
     ‘shell-file-name’ (*note Single Shell::).
‘SMTPSERVER’
     The name of the outgoing mail server.  This is used to initialize
     the variable ‘smtpmail-smtp-server’ (*note Mail Sending::).
‘TERM’
     The type of the terminal that Emacs is using.  This variable must
     be set unless Emacs is run in batch mode.  On MS-DOS, it defaults
     to ‘internal’, which specifies a built-in terminal emulation that
     handles the machine’s own display.
‘TERMCAP’
     The name of the termcap library file describing how to program the
     terminal specified by ‘TERM’.  This defaults to ‘/etc/termcap’.
‘TMPDIR’
‘TMP’
‘TEMP’
     These environment variables are used to initialize the variable
     ‘temporary-file-directory’, which specifies a directory in which to
     put temporary files (*note Backup::).  Emacs tries to use ‘TMPDIR’
     first.  If that is unset, Emacs normally falls back on ‘/tmp’, but
     on MS-Windows and MS-DOS it instead falls back on ‘TMP’, then
     ‘TEMP’, and finally ‘c:/temp’.
‘TZ’
     This specifies the default time zone and possibly also daylight
     saving time information.  *Note (elisp)Time Zone Rules::.  On
     MS-DOS, if ‘TZ’ is not set in the environment when Emacs starts,
     Emacs defines a default value as appropriate for the country code
     returned by DOS.  On MS-Windows, Emacs does not use ‘TZ’ at all.
‘USER’
     The user’s login name.  See also ‘LOGNAME’.  On MS-DOS, this
     defaults to ‘root’.
‘VERSION_CONTROL’
     Used to initialize the ‘version-control’ variable (*note Backup
     Names::).

   ---------- Footnotes ----------

   (1) Here and below, whenever we say “colon-separated list of
directories”, it pertains to Unix and GNU/Linux systems.  On MS-DOS and
MS-Windows, the directories are separated by semi-colons instead, since
DOS/Windows file names might include a colon after a drive letter.


File: emacs.info,  Node: Misc Variables,  Next: MS-Windows Registry,  Prev: General Variables,  Up: Environment

C.4.2 Miscellaneous Variables
-----------------------------

These variables are used only on particular configurations:

‘COMSPEC’
     On MS-DOS and MS-Windows, the name of the command interpreter to
     use when invoking batch files and commands internal to the shell.
     On MS-DOS this is also used to make a default value for the ‘SHELL’
     environment variable.

‘NAME’
     On MS-DOS, this variable defaults to the value of the ‘USER’
     variable.

‘EMACSTEST’
     On MS-DOS, this specifies a file to use to log the operation of the
     internal terminal emulator.  This feature is useful for submitting
     bug reports.

‘EMACSCOLORS’
     On MS-DOS, this specifies the screen colors.  It is useful to set
     them this way, since otherwise Emacs would display the default
     colors momentarily when it starts up.

     The value of this variable should be the two-character encoding of
     the foreground (the first character) and the background (the second
     character) colors of the default face.  Each character should be
     the hexadecimal code for the desired color on a standard PC
     text-mode display.  For example, to get blue text on a light gray
     background, specify ‘EMACSCOLORS=17’, since 1 is the code of the
     blue color and 7 is the code of the light gray color.

     The PC display usually supports only eight background colors.
     However, Emacs switches the DOS display to a mode where all 16
     colors can be used for the background, so all four bits of the
     background color are actually used.

‘PRELOAD_WINSOCK’
     On MS-Windows, if you set this variable, Emacs will load and
     initialize the network library at startup, instead of waiting until
     the first time it is required.

‘WAYLAND_DISPLAY’
     Pgtk Emacs (built with ‘--with-pgtk’) can run on Wayland natively.
     ‘WAYLAND_DISPLAY’ specifies the connection to the compositor.

‘emacs_dir’
     On MS-Windows, ‘emacs_dir’ is a special environment variable, which
     indicates the full path of the directory in which Emacs is
     installed.  If Emacs is installed in the standard directory
     structure, it calculates this value automatically.  It is not much
     use setting this variable yourself unless your installation is
     non-standard, since unlike other environment variables, it will be
     overridden by Emacs at startup.  When setting other environment
     variables, such as ‘EMACSLOADPATH’, you may find it useful to use
     ‘emacs_dir’ rather than hard-coding an absolute path.  This allows
     multiple versions of Emacs to share the same environment variable
     settings, and it allows you to move the Emacs installation
     directory, without changing any environment or registry settings.


File: emacs.info,  Node: MS-Windows Registry,  Prev: Misc Variables,  Up: Environment

C.4.3 The MS-Windows System Registry
------------------------------------

On MS-Windows, the environment variables ‘emacs_dir’, ‘EMACSLOADPATH’,
‘EMACSDATA’, ‘EMACSPATH’, ‘EMACSDOC’, ‘SHELL’, ‘TERM’, ‘HOME’, ‘LANG’,
and ‘PRELOAD_WINSOCK’ can also be set in the ‘HKEY_CURRENT_USER’ or the
‘HKEY_LOCAL_MACHINE’ section of the system registry, under the
‘/Software/GNU/Emacs’ key.  When Emacs starts, as well as checking the
environment, it also checks the system registry for those variables.

   To determine the value of those variables, Emacs goes through the
following procedure.  First, it checks the environment.  If the variable
is not found there, Emacs looks for a registry key by the name of the
variable under ‘/Software/GNU/Emacs’; first in the ‘HKEY_CURRENT_USER’
section of the registry, and if not found there, in the
‘HKEY_LOCAL_MACHINE’ section.  Finally, if Emacs still cannot determine
the values, it uses the compiled-in defaults.

   Note that the registry settings have global system-wide effect: they
will affect all Emacs sessions run on the system.  Thus, if you run
different Emacs versions, or use both installed and un-installed Emacs
executables, or build newer versions of Emacs, the settings in the
registry will cause all of them to use the same directories, which is
probably not what you want.  For this reason, _we recommend against
setting these variables in the registry_.  If you have such settings in
the registry, we recommend that you remove them.

   If you run the Emacs MS-Windows installation program ‘addpm.exe’, it
will update any existing registry settings of the ‘emacs_dir’,
‘EMACSLOADPATH’, ‘EMACSDATA’, ‘EMACSPATH’, ‘EMACSDOC’, ‘SHELL’, and
‘TERM’ variables to have the values suitable for the installed Emacs
version with which ‘addpm.exe’ came.  Note that ‘addpm.exe’ will _not_
create any registry setting that didn’t exist, it will only update
existing settings, which are most probably inherited from an old Emacs
installation, so that they are compatible with the newly installed Emacs
version.  Running ‘addpm.exe’ is no longer necessary when installing
recent versions of Emacs, so we only recommend doing that if you are
upgrading from an older version, and cannot remove these settings from
the registry for some reason.

   In addition to the environment variables above, you can also add
settings to the ‘/Software/GNU/Emacs’ registry key to specify X
resources (*note X Resources::).  Most of the settings you can specify
in your ‘.Xdefaults’ file can be set from that registry key.


File: emacs.info,  Node: Display X,  Next: Font X,  Prev: Environment,  Up: Emacs Invocation

C.5 Specifying the Display Name
===============================

The environment variable ‘DISPLAY’ tells all X clients, including Emacs,
where to display their windows.  Its value is set by default in ordinary
circumstances, when you start an X server and run jobs locally.  You can
specify the display yourself; one reason to do this is if you want to
log into another system and run Emacs there, and have the window
displayed at your local terminal.

   ‘DISPLAY’ has the syntax ‘HOST:DISPLAY.SCREEN’, where HOST is the
host name of the X Window System server machine, DISPLAY is an
arbitrarily-assigned number that distinguishes your server (X terminal)
from other servers on the same machine, and SCREEN is a field that
allows an X server to control multiple terminal screens.  The period and
the SCREEN field are optional.  If included, SCREEN is usually zero.

   For example, if your host is named ‘glasperle’ and your server is the
first (or perhaps the only) server listed in the configuration, your
‘DISPLAY’ is ‘glasperle:0.0’.

   You can specify the display name explicitly when you run Emacs,
either by changing the ‘DISPLAY’ variable, or with the option ‘-d
DISPLAY’ or ‘--display=DISPLAY’.  Here is an example:

     emacs --display=glasperle:0 &

   You can inhibit the use of the X window system with the ‘-nw’ option.
Then Emacs uses its controlling text terminal for display.  *Note
Initial Options::.

   Sometimes, security arrangements prevent a program on a remote system
from displaying on your local system.  In this case, trying to run Emacs
produces messages like this:

     Xlib:  connection to "glasperle:0.0" refused by server

You might be able to overcome this problem by using the ‘xhost’ command
on the local system to give permission for access from your remote
machine.


File: emacs.info,  Node: Font X,  Next: Colors X,  Prev: Display X,  Up: Emacs Invocation

C.6 Font Specification Options
==============================

You can use the command line option ‘-fn FONT’ (or ‘--font’, which is an
alias for ‘-fn’) to specify a default font:

‘-fn FONT’
‘--font=FONT’
     Use FONT as the default font.

   When passing a font name to Emacs on the command line, you may need
to quote it, by enclosing it in quotation marks, if it contains
characters that the shell treats specially (e.g., spaces).  For example:

     emacs -fn "DejaVu Sans Mono-12"

   *Note Fonts::, for details about font names and other ways to specify
the default font.


File: emacs.info,  Node: Colors X,  Next: Window Size X,  Prev: Font X,  Up: Emacs Invocation

C.7 Window Color Options
========================

You can use the following command-line options to specify the colors to
use for various parts of the Emacs display.  Colors may be specified
using either color names or RGB triplets (*note Colors::).

‘-fg COLOR’
‘--foreground-color=COLOR’
     Specify the foreground color, overriding the color specified by the
     ‘default’ face (*note Faces::).
‘-bg COLOR’
‘--background-color=COLOR’
     Specify the background color, overriding the color specified by the
     ‘default’ face.
‘-bd COLOR’
‘--border-color=COLOR’
     Specify the color of the border of the X window.  This has no
     effect if Emacs is compiled with GTK+ support.
‘-cr COLOR’
‘--cursor-color=COLOR’
     Specify the color of the Emacs cursor which indicates where point
     is.
‘-ms COLOR’
‘--mouse-color=COLOR’
     Specify the color for the mouse cursor when the mouse is in the
     Emacs window.
‘-r’
‘-rv’
‘--reverse-video’
     Reverse video: swap the foreground and background colors.
‘--color=MODE’
     Set the “color support mode” when Emacs is run on a text terminal.
     This option overrides the number of supported colors that the
     character terminal advertises in its ‘termcap’ or ‘terminfo’
     database.  The parameter MODE can be one of the following:
     ‘never’
     ‘no’
          Don’t use colors even if the terminal’s capabilities specify
          color support.
     ‘default’
     ‘auto’
          Same as when ‘--color’ is not used at all: Emacs detects at
          startup whether the terminal supports colors, and if it does,
          turns on colored display.
     ‘always’
     ‘yes’
     ‘ansi8’
          Turn on the color support unconditionally, and use color
          commands specified by the ANSI escape sequences for the 8
          standard colors.
     ‘NUM’
          Use color mode for NUM colors.  If NUM is −1, turn off color
          support (equivalent to ‘never’); if it is 0, use the default
          color support for this terminal (equivalent to ‘auto’);
          otherwise use an appropriate standard mode for NUM colors.
          Depending on your terminal’s capabilities, Emacs might be able
          to turn on a color mode for 8, 16, 88, or 256 as the value of
          NUM.  If there is no mode that supports NUM colors, Emacs acts
          as if NUM were 0, i.e., it uses the terminal’s default color
          support mode.
     If MODE is omitted, it defaults to ANSI8.

   For example, to use a coral mouse cursor and a slate blue text
cursor, enter:

     emacs -ms coral -cr 'slate blue' &

   You can reverse the foreground and background colors through the
‘-rv’ option or with the X resource ‘reverseVideo’.

   The ‘-fg’, ‘-bg’, and ‘-rv’ options function on text terminals as
well as on graphical displays.


File: emacs.info,  Node: Window Size X,  Next: Borders X,  Prev: Colors X,  Up: Emacs Invocation

C.8 Options for Window Size and Position
========================================

Here is a list of the command-line options for specifying size and
position of the initial Emacs frame:

‘-g WIDTHxHEIGHT[{+-}XOFFSET{+-}YOFFSET]]’
‘--geometry=WIDTHxHEIGHT[{+-}XOFFSET{+-}YOFFSET]]’
     Specify the size WIDTH and HEIGHT (measured in character columns
     and lines), and positions XOFFSET and YOFFSET (measured in pixels).
     The WIDTH and HEIGHT parameters apply to all frames, whereas
     XOFFSET and YOFFSET only to the initial frame.

‘-fs’
‘--fullscreen’
     Specify that width and height should be that of the screen.
     Normally no window manager decorations are shown.  (After starting
     Emacs, you can toggle this state using <F11>,
     ‘toggle-frame-fullscreen’.)

‘-mm’
‘--maximized’
     Specify that the Emacs frame should be maximized.  This normally
     means that the frame has window manager decorations.  (After
     starting Emacs, you can toggle this state using ‘M-F10’,
     ‘toggle-frame-maximized’.)

‘-fh’
‘--fullheight’
     Specify that the height should be the height of the screen.

‘-fw’
‘--fullwidth’
     Specify that the width should be the width of the screen.

In the ‘--geometry’ option, ‘{+-}’ means either a plus sign or a minus
sign.  A plus sign before XOFFSET means it is the distance from the left
side of the screen; a minus sign means it counts from the right side.  A
plus sign before YOFFSET means it is the distance from the top of the
screen, and a minus sign there indicates the distance from the bottom.
The values XOFFSET and YOFFSET may themselves be positive or negative,
but that doesn’t change their meaning, only their direction.

   Emacs uses the same units as ‘xterm’ does to interpret the geometry.
The WIDTH and HEIGHT are measured in characters, so a large font creates
a larger frame than a small font.  (If you specify a proportional font,
Emacs uses its maximum bounds width as the width unit.)  The XOFFSET and
YOFFSET are measured in pixels.

   You do not have to specify all of the fields in the geometry
specification.  If you omit both XOFFSET and YOFFSET, the window manager
decides where to put the Emacs frame, possibly by letting you place it
with the mouse.  For example, ‘164x55’ specifies a window 164 columns
wide, enough for two ordinary width windows side by side, and 55 lines
tall.

   The default frame width is 80 characters and the default height is
between 35 and 40 lines, depending on the OS and the window manager.
You can omit either the width or the height or both.  If you start the
geometry with an integer, Emacs interprets it as the width.  If you
start with an ‘x’ followed by an integer, Emacs interprets it as the
height.  Thus, ‘81’ specifies just the width; ‘x45’ specifies just the
height.

   If you start the geometry with ‘+’ or ‘-’, that introduces an offset,
which means both sizes are omitted.  Thus, ‘-3’ specifies the XOFFSET
only.  (If you give just one offset, it is always XOFFSET.)  ‘+3-3’
specifies both the XOFFSET and the YOFFSET, placing the frame near the
bottom left of the screen.

   You can specify a default for any or all of the fields in your X
resource file (*note Resources::), and then override selected fields
with a ‘--geometry’ option.

   Since the mode line and the echo area occupy the last 2 lines of the
frame, the height of the initial text window is 2 less than the height
specified in your geometry.  In non-X-toolkit versions of Emacs, the
menu bar also takes one line of the specified number.  But in the X
toolkit version, the menu bar is additional and does not count against
the specified height.  The tool bar, if present, is also additional.

   Enabling or disabling the menu bar or tool bar alters the amount of
space available for ordinary text.  Therefore, if Emacs starts up with a
tool bar (which is the default), and handles the geometry specification
assuming there is a tool bar, and then your initialization file disables
the tool bar, you will end up with a frame geometry different from what
you asked for.  To get the intended size with no tool bar, use an X
resource to specify “no tool bar” (*note Table of Resources::); then
Emacs will already know there’s no tool bar when it processes the
specified geometry.

   When using one of ‘--fullscreen’, ‘--maximized’, ‘--fullwidth’ or
‘--fullheight’, some window managers require you to set the variable
‘frame-resize-pixelwise’ to a non-‘nil’ value to make a frame appear
truly maximized or full-screen.

   Some window managers have options that can make them ignore both
program-specified and user-specified positions.  If these are set, Emacs
fails to position the window correctly.


File: emacs.info,  Node: Borders X,  Next: Title X,  Prev: Window Size X,  Up: Emacs Invocation

C.9 Internal and Outer Borders
==============================

An Emacs frame has an internal border and an outer border.  The internal
border is an extra strip of the background color around the text portion
of the frame.  Emacs itself draws the internal border.  The outer border
is drawn by X outside the tool and menu bars of the frame.  There is
also an external border which is drawn by the window manager.  The size
of the external border cannot be set from within Emacs.

‘-ib WIDTH’
‘--internal-border=WIDTH’
     Specify WIDTH as the width of the internal border (around the
     frame’s text area), in pixels.

‘-bw WIDTH’
‘--border-width=WIDTH’
     Specify WIDTH as the width of the outer border, in pixels.

   When you specify the size of the frame, that does not count the
borders.  The frame’s position is measured from the outside edge of the
external border.

   Use the ‘-ib N’ option to specify an internal border N pixels wide.
The default is 1.  Use ‘-bw N’ to specify the width of the outer border
(though the window manager may not pay attention to what you specify).
The default width of the outer border is 2.


File: emacs.info,  Node: Title X,  Next: Icons X,  Prev: Borders X,  Up: Emacs Invocation

C.10 Frame Titles
=================

Each Emacs frame always has a title, which appears in window decorations
and icons as the name of the frame.  The default title is of the form
‘INVOCATION-NAME@MACHINE’ (if there is only one frame) or shows the
selected window’s buffer name (if there is more than one frame).

   You can specify a non-default title for the initial Emacs frame with
a command line option:

‘-T TITLE’
‘--title=TITLE’
     Specify TITLE as the title for the initial Emacs frame.

   The ‘--name’ option (*note Resources::) also specifies the title for
the initial Emacs frame.


File: emacs.info,  Node: Icons X,  Next: Misc X,  Prev: Title X,  Up: Emacs Invocation

C.11 Icons
==========

‘-iconic’
‘--iconic’
     Start Emacs in an iconified state.

‘-nbi’
‘--no-bitmap-icon’
     Disable the use of the Emacs icon.

   Most window managers allow you to iconify (or “minimize”) an Emacs
frame, hiding it from sight.  Some window managers replace iconified
windows with tiny icons, while others remove them entirely from sight.
The ‘-iconic’ option tells Emacs to begin running in an iconified state,
rather than showing a frame right away.  The text frame doesn’t appear
until you deiconify (or “un-minimize”) it.

   By default, Emacs uses an icon containing the Emacs logo.  On desktop
environments such as Gnome, this icon is also displayed in other
contexts, e.g., when switching into an Emacs frame.  The ‘-nbi’ or
‘--no-bitmap-icon’ option tells Emacs to let the window manager choose
what sort of icon to use—usually just a small rectangle containing the
frame’s title.


File: emacs.info,  Node: Misc X,  Prev: Icons X,  Up: Emacs Invocation

C.12 Other Display Options
==========================

‘--parent-id ID’
     Open Emacs as a client X window via the XEmbed protocol, with ID as
     the parent X window id.  Currently, this option is mainly useful
     for developers.

‘-vb’
‘--vertical-scroll-bars’
     Enable vertical scroll bars.

‘-lsp PIXELS’
‘--line-spacing=PIXELS’
     Specify PIXELS as additional space to put between lines, in pixels.

‘-nbc’
‘--no-blinking-cursor’
     Disable the blinking cursor on graphical displays.

‘-D’
‘--basic-display’
     Disable the menu-bar, the tool-bar, the scroll-bars, tool tips, and
     turn off font-lock-mode and the blinking cursor.  This can be
     useful for making a test case that simplifies debugging of display
     problems.

   The ‘--xrm’ option (*note Resources::) specifies additional X
resource values.


File: emacs.info,  Node: X Resources,  Next: Antinews,  Prev: Emacs Invocation,  Up: Top

# /. Appendix D X Options and Resources
**************************************

You can customize some X-related aspects of Emacs behavior using X
resources, as is usual for programs that use X.

   When Emacs is compiled with GTK+ support, the appearance of various
graphical widgets, such as the menu-bar, scroll-bar, and dialog boxes,
is determined by GTK+ resources, which we will also describe.  When
Emacs is built without GTK+ support, the appearance of these widgets is
determined by additional X resources.

   On MS-Windows, you can customize some of the same aspects using the
system registry (*note MS-Windows Registry::).

* Menu:

* Resources::           Using X resources with Emacs (in general).
* Table of Resources::  Table of specific X resources that affect Emacs.
* Lucid Resources::     X resources for Lucid menus.
* Motif Resources::     X resources for Motif and LessTif menus.
* GTK resources::       Resources for GTK+ widgets.


File: emacs.info,  Node: Resources,  Next: Table of Resources,  Up: X Resources

D.1 X Resources
===============

Programs running under the X Window System organize their user options
under a hierarchy of classes and resources.  You can specify default
values for these options in your “X resource file”, usually named
‘~/.Xdefaults’ or ‘~/.Xresources’.  Changes in this file do not take
effect immediately, because the X server stores its own list of
resources; to update it, use the command ‘xrdb’—for instance, ‘xrdb
~/.Xdefaults’.

   Settings specified via X resources in general override the equivalent
settings in Emacs init files (*note Init File::), in particular for
parameters of the initial frame (*note Frame Parameters::).

   (MS-Windows systems do not support X resource files; on such systems,
Emacs looks for X resources in the Windows Registry, first under the key
‘HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs’, which affects only the current
user and override the system-wide settings, and then under the key
‘HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs’, which affects all users of the
system.  The menu and scroll bars are native widgets on MS-Windows, so
they are only customizable via the system-wide settings in the Display
Control Panel.  You can also set resources using the ‘-xrm’ command line
option, as explained below.)

   Each line in the X resource file specifies a value for one option or
for a collection of related options.  The order in which the lines
appear in the file does not matter.  Each resource specification
consists of a “program name” and a “resource name”.  Case distinctions
are significant in each of these names.  Here is an example:

     emacs.cursorColor: dark green

   The program name is the name of the executable file to which the
resource applies.  For Emacs, this is normally ‘emacs’.  To specify a
definition that applies to all instances of Emacs, regardless of the
name of the Emacs executable, use ‘Emacs’.

   The resource name is the name of a program setting.  For instance,
Emacs recognizes a ‘cursorColor’ resource that controls the color of the
text cursor.

   Resources are grouped into named classes.  For instance, the
‘Foreground’ class contains the ‘cursorColor’, ‘foreground’ and
‘pointerColor’ resources (*note Table of Resources::).  Instead of using
a resource name, you can use a class name to specify the default value
for all resources in that class, like this:

     emacs.Foreground: dark green

   Emacs does not process X resources at all if you set the variable
‘inhibit-x-resources’ to a non-‘nil’ value.  If you invoke Emacs with
the ‘-Q’ (or ‘--quick’) command-line option, ‘inhibit-x-resources’ is
automatically set to ‘t’ (*note Initial Options::).

   In addition, you can use the following command-line options to
override the X resources file:

‘-name NAME’
‘--name=NAME’
     This option sets the program name of the initial Emacs frame to
     NAME.  It also sets the title of the initial frame to NAME.  This
     option does not affect subsequent frames.

     If you don’t specify this option, the default is to use the Emacs
     executable’s name as the program name.

     For consistency, ‘-name’ also specifies the name to use for other
     resource values that do not belong to any particular frame.

     The resources that name Emacs invocations also belong to a class,
     named ‘Emacs’.  If you write ‘Emacs’ instead of ‘emacs’, the
     resource applies to all frames in all Emacs jobs, regardless of
     frame titles and regardless of the name of the executable file.

‘-xrm RESOURCE-VALUE’
‘--xrm=RESOURCE-VALUE’
     This option specifies X resource values for the present Emacs job.

     RESOURCE-VALUE should have the same format that you would use
     inside a file of X resources.  Several ‘-xrm’ options are possible
     to include multiple resource specifications.  You can also use
     ‘#include "FILENAME"’ as RESOURCE-VALUE to include a file full of
     resource specifications.  Resource values specified with ‘-xrm’
     take precedence over all other resource specifications.


File: emacs.info,  Node: Table of Resources,  Next: Lucid Resources,  Prev: Resources,  Up: X Resources

D.2 Table of X Resources for Emacs
==================================

The table below lists the X resource names that Emacs recognizes.  Note
that some of the resources have no effect in Emacs compiled with various
X toolkits (GTK+, Lucid, etc.)—we indicate below when this is the case.

‘alpha’ (class ‘Alpha’)
     Sets the ‘alpha’ frame parameter, determining frame transparency
     (*note (elisp)Frame Parameters::).

‘alphaBackground’ (class ‘AlphaBackground’)
     Sets the ‘alpha-background’ frame parameter, determining background
     transparency (*note (elisp)Frame Parameters::).

‘background’ (class ‘Background’)
     Background color (*note Colors::).

‘bitmapIcon’ (class ‘BitmapIcon’)
     Tell the window manager to display the Emacs icon if ‘on’; don’t do
     so if ‘off’.  *Note Icons X::, for a description of the icon.

‘borderColor’ (class ‘BorderColor’)
     Color of the frame’s external border.  This has no effect if Emacs
     is compiled with GTK+ support.

‘borderWidth’ (class ‘BorderWidth’)
     Width of the frame’s external border, in pixels.  This has no
     effect if Emacs is compiled with GTK+ support.

‘cursorBlink’ (class ‘CursorBlink’)
     If the value of this resource is ‘off’ or ‘false’ or ‘0’ at
     startup, Emacs disables Blink Cursor mode (*note Cursor Display::).

‘cursorColor’ (class ‘Foreground’)
     Text cursor color.  If this resource is specified when Emacs starts
     up, Emacs sets its value as the background color of the ‘cursor’
     face (*note Faces::).

‘font’ (class ‘Font’)
     Font name for the ‘default’ face (*note Fonts::).  You can also
     specify a fontset name (*note Fontsets::).

‘fontBackend’ (class ‘FontBackend’)
     Comma-delimited list of backend(s) to use for drawing fonts, in
     order of precedence.  For instance, the value ‘x,xft’ tells Emacs
     to draw fonts using the X core font driver, falling back on the Xft
     font driver if that fails.  Normally, you should leave this
     resource unset, in which case Emacs tries using all available font
     backends.

‘foreground’ (class ‘Foreground’)
     Default foreground color for text.

‘fullscreen’ (class ‘Fullscreen’)
     The desired fullscreen size.  The value can be one of ‘fullboth’,
     ‘maximized’, ‘fullwidth’ or ‘fullheight’, which correspond to the
     command-line options ‘-fs’, ‘-mm’, ‘-fw’, and ‘-fh’ (*note Window
     Size X::).  Note that this applies to the initial frame only.

‘geometry’ (class ‘Geometry’)
     Window size and position.  The value should be a size and position
     specification, of the same form as in the ‘-g’ or ‘--geometry’
     command-line option (*note Window Size X::).

     The size applies to all frames in the Emacs session, but the
     position applies only to the initial Emacs frame (or, in the case
     of a resource for a specific frame name, only that frame).

     Be careful not to specify this resource as ‘emacs*geometry’, as
     that may affect individual menus as well as the main Emacs frame.

‘horizontalScrollBars’ (class ‘ScrollBars’)
     If the value of this resource is ‘off’ or ‘false’ or ‘0’, Emacs
     disables Horizontal Scroll Bar mode at startup (*note Scroll
     Bars::).

‘iconName’ (class ‘Title’)
     Name to display in the icon.

‘internalBorder’ (class ‘BorderWidth’)
     Width of the internal frame border, in pixels.

‘lineSpacing’ (class ‘LineSpacing’)
     Additional space between lines, in pixels.

‘menuBackground’ (class ‘Background’)
     The background color of the menus in non-toolkit versions of Emacs.
     (For toolkit versions, see *note Lucid Resources::, also see *note
     Motif Resources::, and see *note GTK resources::.)

‘menuBar’ (class ‘MenuBar’)
     If the value of this resource is ‘off’ or ‘false’ or ‘0’, Emacs
     disables Menu Bar mode at startup (*note Menu Bars::).

‘minibuffer’ (class ‘Minibuffer’)
     If ‘none’, Emacs will not make a minibuffer in this frame; it will
     use a separate minibuffer frame instead.

‘paneFont’ (class ‘Font’)
     Font name for menu pane titles, in non-toolkit versions of Emacs.
     (For toolkit versions, see *note Lucid Resources::, also see *note
     Motif Resources::, and see *note GTK resources::.)

‘paneForeground’ (class ‘Foreground’)
     Foreground color for menu pane titles, in non-toolkit versions of
     Emacs.  (For toolkit versions, see *note Lucid Resources::, also
     see *note Motif Resources::, and see *note GTK resources::.)

‘pointerColor’ (class ‘Foreground’)
     Color of the mouse cursor.  This has no effect in many graphical
     desktop environments, as they do not let Emacs change the mouse
     cursor this way.

‘privateColormap’ (class ‘PrivateColormap’)
     If ‘on’, use a private color map, in the case where the default
     visual of class PseudoColor and Emacs is using it.

‘reverseVideo’ (class ‘ReverseVideo’)
     Switch foreground and background default colors if ‘on’, use colors
     as specified if ‘off’.

‘screenGamma’ (class ‘ScreenGamma’)
     Gamma correction for colors, equivalent to the frame parameter
     ‘screen-gamma’.

‘scrollBar’ (class ‘ScrollBar’)
     If the value of this resource is ‘off’ or ‘false’ or ‘0’, Emacs
     disables Scroll Bar mode at startup (*note Scroll Bars::).

‘scrollBarWidth’ (class ‘ScrollBarWidth’)
     The scroll bar width in pixels, equivalent to the frame parameter
     ‘scroll-bar-width’.  Do not set this resource if Emacs is compiled
     with GTK+ support.

‘selectionFont’ (class ‘SelectionFont’)
     Font name for pop-up menu items, in non-toolkit versions of Emacs.
     (For toolkit versions, see *note Lucid Resources::, also see *note
     Motif Resources::, and see *note GTK resources::.)

‘selectionForeground’ (class ‘SelectionForeground’)
     Foreground color for pop-up menu items, in non-toolkit versions of
     Emacs.  (For toolkit versions, see *note Lucid Resources::, also
     see *note Motif Resources::, and see *note GTK resources::.)

‘selectionTimeout’ (class ‘SelectionTimeout’)
     Number of milliseconds to wait for a selection reply.  If the
     selection owner doesn’t reply in this time, we give up.  A value of
     0 means wait as long as necessary.

‘synchronous’ (class ‘Synchronous’)
     Run Emacs in synchronous mode if ‘on’.  Synchronous mode is useful
     for debugging X problems.

‘title’ (class ‘Title’)
     Name to display in the title bar of the initial Emacs frame.

‘toolBar’ (class ‘ToolBar’)
     If the value of this resource is ‘off’ or ‘false’ or ‘0’, Emacs
     disables Tool Bar mode at startup (*note Tool Bars::).

‘tabBar’ (class ‘TabBar’)
     If the value of this resource is ‘on’ or ‘yes’ or ‘1’, Emacs
     enables Tab Bar mode at startup (*note Tab Bars::).

‘useXIM’ (class ‘UseXIM’)
     Disable use of X input methods (XIM) if ‘false’ or ‘off’.  This is
     only relevant if your Emacs is built with XIM support.  It might be
     useful to turn off XIM on slow X client/server links.

‘inputStyle’ (class ‘InputStyle’)
     This resource controls how preview text generated by X input
     methods is displayed.  Its value can be on of the following:

     ‘callback’
          Display the contents of the preview text in the current
          buffer.

     ‘offthespot’
          Display the preview text inside a separate area of the display
          provided by Emacs.

     ‘overthespot’
          Display the preview text inside a popup window at the location
          of point in the current window.

     ‘none’
          Let the input method decide how to display itself.  This is
          usually equivalent to ‘overthespot’, but it might work with
          more input methods.

     ‘native’
          Use the toolkit for handling input methods.  This is currently
          implemented only on GTK.

     ‘root’
          Use some location on display specific to the input method for
          displaying the preview text.

‘synchronizeResize’ (class ‘SynchronizeResize’)
     If ‘off’ or ‘false’, Emacs will not try to tell the window manager
     when it has finished redrawing the display in response to a frame
     being resized.  Otherwise, the window manager will postpone drawing
     a frame that was just resized until its contents are updated, which
     prevents blank areas of a frame that have not yet been painted from
     being displayed.  If set to ‘extended’, it will enable use of an
     alternative frame synchronization protocol, which might be
     supported by some compositing window managers that don’t support
     the protocol Emacs uses by default, and causes Emacs to synchronize
     display with the monitor refresh rate when a compatible compositing
     window manager is in use.

‘verticalScrollBars’ (class ‘ScrollBars’)
     Give frames scroll bars on the left if ‘left’, on the right if
     ‘right’; don’t have scroll bars if ‘off’ (*note Scroll Bars::).

‘visualClass’ (class ‘VisualClass’)
     The “visual class” for X color display.  If specified, the value
     should start with one of ‘TrueColor’, ‘PseudoColor’, ‘DirectColor’,
     ‘StaticColor’, ‘GrayScale’, and ‘StaticGray’, followed by ‘-DEPTH’,
     where DEPTH is the number of color planes.

   You can also use X resources to customize individual Emacs faces
(*note Faces::).  For example, setting the resource
‘FACE.attributeForeground’ is equivalent to customizing the ‘foreground’
attribute of the face FACE.  However, we recommend customizing faces
from within Emacs, instead of using X resources.  *Note Face
Customization::.


File: emacs.info,  Node: Lucid Resources,  Next: Motif Resources,  Prev: Table of Resources,  Up: X Resources

D.3 Lucid Menu And Dialog X Resources
=====================================

If Emacs is compiled with the X toolkit support using Lucid widgets, you
can use X resources to customize the appearance of the menu bar (*note
Menu Bar::), pop-up menus, and dialog boxes (*note Dialog Boxes::).  The
resources for the menu bar fall in the ‘pane.menubar’ class (following,
as always, either the name of the Emacs executable or ‘Emacs’ for all
Emacs invocations).  The resources for the pop-up menu are in the
‘menu*’ class.  The resources for dialog boxes are in the ‘dialog*’
class.

   For example, to display menu bar entries with the ‘Courier-12’ font
(*note Fonts::), write this:

     Emacs.pane.menubar.font: Courier-12

Lucid widgets can display multilingual text in your locale.  To enable
this, specify a ‘fontSet’ resource instead of a ‘font’ resource.  *Note
Fontsets::.  If both ‘font’ and ‘fontSet’ resources are specified, the
‘fontSet’ resource is used.

   Here is a list of resources for menu bars, pop-up menus, and dialogs:

‘font’
     Font for menu item text.
‘fontSet’
     Fontset for menu item text.
‘background’
     Background color.
‘buttonForeground’
     Foreground color for a selected item.
‘foreground’
     Foreground color.
‘disabledForeground’
     Foreground color for a disabled menu item.
‘highlightForeground’
     Foreground color for a menu item highlighted by the mouse or key
     navigation.
‘highlightBackground’
     Background color for a menu item highlighted by the mouse or key
     navigation.
‘horizontalSpacing’
     Horizontal spacing in pixels between items.  Default is 3.
‘verticalSpacing’
     Vertical spacing in pixels between items.  Default is 2.
‘arrowSpacing’
     Horizontal spacing between the arrow (which indicates a submenu)
     and the associated text.  Default is 10.
‘shadowThickness’
     Thickness of shadow lines for 3D buttons, arrows, and other
     graphical elements.  Default is 1.
‘borderThickness’
     Thickness of the external borders of the menu bars and pop-up
     menus.  Default is 1.
‘cursor’
     Name of the cursor to use in the menu bars and pop-up menus.
     Default is ‘"right_ptr"’.
‘margin’
     Margin of the menu bar, in characters.  Default is 1.


File: emacs.info,  Node: Motif Resources,  Next: GTK resources,  Prev: Lucid Resources,  Up: X Resources

D.4 Motif Menu X Resources
==========================

If Emacs is compiled with the X toolkit support using Motif or LessTif
widgets, you can use X resources to customize the appearance of the menu
bar (*note Menu Bar::), pop-up menus, and dialog boxes (*note Dialog
Boxes::).  However, the resources are organized differently from Lucid
widgets.

   The resource names for the menu bar are in the ‘pane.menubar’ class,
and they must be specified in this form:

     Emacs.pane.menubar.SUBWIDGET.RESOURCE: VALUE

For pop-up menus, the resources are in the ‘menu*’ class, instead of
‘pane.menubar’.  For dialog boxes, they are in ‘dialog’.  In each case,
each individual menu string is a subwidget; the subwidget’s name is the
same as the menu item string.  For example, the ‘File’ menu in the menu
bar is a subwidget named ‘emacs.pane.menubar.File’.

   Typically, you want to specify the same resources for the whole menu
bar.  To do this, use ‘*’ instead of a specific subwidget name.  For
example, to specify the font ‘8x16’ for all menu bar items, including
submenus, write this:

     Emacs.pane.menubar.*.fontList: 8x16

   Each item in a submenu also has its own name for X resources; for
example, the ‘File’ submenu has an item named ‘Save (current buffer)’.
A resource specification for a submenu item looks like this:

     Emacs.pane.menubar.popup_*.MENU.ITEM.RESOURCE: VALUE

For example, here’s how to specify the font for the ‘Save (current
buffer)’ item:

     Emacs.pane.menubar.popup_*.File.Save (current buffer).fontList: 8x16

For an item in a second-level submenu, such as ‘Complete Word’ under
‘Spell Checking’ under ‘Tools’, the resource fits this template:

     Emacs.pane.menubar.popup_*.popup_*.MENU.RESOURCE: VALUE

For example,

     Emacs.pane.menubar.popup_*.popup_*.Spell Checking.Complete Word: VALUE

(This should be one long line.)

   If you want the submenu items to look different from the menu bar
itself, you must first specify the resource for all of them, then
override the value for submenus alone.  Here is an example:

     Emacs.pane.menubar.*.fontList: 9x18
     Emacs.pane.menubar.popup_*.fontList: 8x16

   To specify resources for the LessTif file-selection box, use ‘fsb*’,
like this:

     Emacs.fsb*.fontList: 8x16

   Here is a list of resources for LessTif menu bars and pop-up menus:

‘armColor’
     The color to show in an armed button.
‘fontList’
     The font to use.
‘marginBottom’
‘marginHeight’
‘marginLeft’
‘marginRight’
‘marginTop’
‘marginWidth’
     Amount of space to leave around the item, within the border.
‘borderWidth’
     The width of the border around the menu item, on all sides.
‘shadowThickness’
     The width of the border shadow.
‘bottomShadowColor’
     The color for the border shadow, on the bottom and the right.
‘topShadowColor’
     The color for the border shadow, on the top and the left.


File: emacs.info,  Node: GTK resources,  Prev: Motif Resources,  Up: X Resources

D.5 GTK+ resources
==================

If Emacs is compiled with GTK+ toolkit support, the simplest way to
customize its GTK+ widgets (e.g., menus, dialogs, tool bars and scroll
bars) is to choose an appropriate GTK+ theme, for example with the GNOME
theme selector.

   In GTK+ version 2, you can also use “GTK+ resources” to customize the
appearance of GTK+ widgets used by Emacs.  These resources are specified
in either the file ‘~/.emacs.d/gtkrc’ (for Emacs-specific GTK+
resources), or ‘~/.gtkrc-2.0’ (for general GTK+ resources).  We
recommend using ‘~/.emacs.d/gtkrc’, since GTK+ seems to ignore
‘~/.gtkrc-2.0’ when running GConf with GNOME.  Note, however, that some
GTK+ themes may override customizations in ‘~/.emacs.d/gtkrc’; there is
nothing we can do about this.  GTK+ resources do not affect aspects of
Emacs unrelated to GTK+ widgets, such as fonts and colors in the main
Emacs window; those are governed by normal X resources (*note
Resources::).

   The following sections describe how to customize GTK+ resources for
Emacs.  For details about GTK+ resources, see the GTK+ API document at
<https://developer-old.gnome.org/gtk2/stable/gtk2-Resource-Files.html>.

   In GTK+ version 3, GTK+ resources have been replaced by a completely
different system.  The appearance of GTK+ widgets is now determined by
CSS-like style files: ‘gtk-3.0/gtk.css’ in the GTK+ installation
directory, and ‘~/.themes/THEME/gtk-3.0/gtk.css’ for local style
settings (where THEME is the name of the current GTK+ theme).
Therefore, the description of GTK+ resources in this section does not
apply to GTK+ 3.  For details about the GTK+ 3 styling system, see
<https://developer-old.gnome.org/gtk3/3.0/GtkCssProvider.html>.

* Menu:

* GTK Resource Basics::   Basic usage of GTK+ resources.
* GTK Widget Names::      How GTK+ widgets are named.
* GTK Names in Emacs::    GTK+ widgets used by Emacs.
* GTK styles::            What can be customized in a GTK+ widget.


File: emacs.info,  Node: GTK Resource Basics,  Next: GTK Widget Names,  Up: GTK resources

D.5.1 GTK+ Resource Basics
--------------------------

In a GTK+ 2 resource file (usually ‘~/.emacs.d/gtkrc’), the simplest
kind of a resource setting simply assigns a value to a variable.  For
example, putting the following line in the resource file changes the
font on all GTK+ widgets to ‘courier-12’:

     gtk-font-name = "courier 12"

Note that in this case the font name must be supplied as a GTK font
pattern (also called a “Pango font name”), not as a Fontconfig-style
font name or XLFD.  *Note Fonts::.

   To customize widgets you first define a “style”, and then apply the
style to the widgets.  Here is an example that sets the font for menus
(‘#’ characters indicate comments):

     # Define the style ‘my_style’.
     style "my_style"
     {
       font_name = "helvetica bold 14"
     }

     # Specify that widget type ‘*emacs-menuitem*’ uses ‘my_style’.
     widget "*emacs-menuitem*" style "my_style"

The widget name in this example contains wildcards, so the style is
applied to all widgets matching ‘*emacs-menuitem*’.  The widgets are
named by the way they are contained, from the outer widget to the inner
widget.  Here is another example that applies ‘my_style’ specifically to
the Emacs menu bar:

     widget "Emacs.pane.menubar.*" style "my_style"

   Here is a more elaborate example, showing how to change the parts of
the scroll bar:

     style "scroll"
     {
       fg[NORMAL] = "red"     # Arrow color.
       bg[NORMAL] = "yellow"  # Thumb and background around arrow.
       bg[ACTIVE] = "blue"    # Trough color.
       bg[PRELIGHT] = "white" # Thumb color when the mouse is over it.
     }

     widget "*verticalScrollBar*" style "scroll"


File: emacs.info,  Node: GTK Widget Names,  Next: GTK Names in Emacs,  Prev: GTK Resource Basics,  Up: GTK resources

D.5.2 GTK+ widget names
-----------------------

A GTK+ widget is specified by a “widget name” and a “widget class”.  The
widget name refers to a specific widget (e.g., ‘emacs-menuitem’), while
the widget class refers to a collection of similar widgets (e.g.,
‘GtkMenuItem’).  A widget always has a class, but need not have a name.

   “Absolute names” are sequences of widget names or widget classes,
corresponding to hierarchies of widgets embedded within other widgets.
For example, if a ‘GtkWindow’ named ‘top’ contains a ‘GtkVBox’ named
‘box’, which in turn contains a ‘GtkMenuBar’ called ‘menubar’, the
absolute class name of the menu-bar widget is
‘GtkWindow.GtkVBox.GtkMenuBar’, and its absolute widget name is
‘top.box.menubar’.

   GTK+ resource files can contain two types of commands for specifying
widget appearances:

‘widget’
     specifies a style for widgets based on the class name, or just the
     class.

‘widget_class’
     specifies a style for widgets based on the class name.

See the previous subsection for examples of using the ‘widget’ command;
the ‘widget_class’ command is used similarly.  Note that the widget
name/class and the style must be enclosed in double-quotes, and these
commands must be at the top level in the GTK+ resource file.

   As previously noted, you may specify a widget name or class with
shell wildcard syntax: ‘*’ matches zero or more characters and ‘?’
matches one character.  This example assigns a style to all widgets:

     widget "*" style "my_style"


File: emacs.info,  Node: GTK Names in Emacs,  Next: GTK styles,  Prev: GTK Widget Names,  Up: GTK resources

D.5.3 GTK+ Widget Names in Emacs
--------------------------------

The GTK+ widgets used by an Emacs frame are listed below:

‘Emacs’ (class ‘GtkWindow’)
     ‘pane’ (class ‘GtkVBox’)
          ‘menubar’ (class ‘GtkMenuBar’)
               [menu item widgets]
          [unnamed widget] (class ‘GtkHandleBox’)
               ‘emacs-toolbar’ (class ‘GtkToolbar’)
                    [tool bar item widgets]
          ‘emacs’ (class ‘GtkFixed’)
               ‘verticalScrollBar’ (class ‘GtkVScrollbar’)

The contents of Emacs windows are drawn in the ‘emacs’ widget.  Note
that even if there are multiple Emacs windows, each scroll bar widget is
named ‘verticalScrollBar’.

   For example, here are two different ways to set the menu bar style:

     widget "Emacs.pane.menubar.*" style "my_style"
     widget_class "GtkWindow.GtkVBox.GtkMenuBar.*" style "my_style"

   For GTK+ dialogs, Emacs uses a widget named ‘emacs-dialog’, of class
‘GtkDialog’.  For file selection, Emacs uses a widget named
‘emacs-filedialog’, of class ‘GtkFileSelection’.

   Because the widgets for pop-up menus and dialogs are free-standing
windows and not contained in the ‘Emacs’ widget, their GTK+ absolute
names do not start with ‘Emacs’.  To customize these widgets, use
wildcards like this:

     widget "*emacs-dialog*" style "my_dialog_style"
     widget "*emacs-filedialog* style "my_file_style"
     widget "*emacs-menuitem* style "my_menu_style"

   If you want to apply a style to all menus in Emacs, use this:

     widget_class "*Menu*" style "my_menu_style"


File: emacs.info,  Node: GTK styles,  Prev: GTK Names in Emacs,  Up: GTK resources

D.5.4 GTK+ styles
-----------------

Here is an example of two GTK+ style declarations:

     pixmap_path "/usr/share/pixmaps:/usr/include/X11/pixmaps"

     style "default"
     {
       font_name = "helvetica 12"

       bg[NORMAL] = { 0.83, 0.80, 0.73 }
       bg[SELECTED] = { 0.0, 0.55, 0.55 }
       bg[INSENSITIVE] = { 0.77, 0.77, 0.66 }
       bg[ACTIVE] = { 0.0, 0.55, 0.55 }
       bg[PRELIGHT] = { 0.0, 0.55, 0.55 }

       fg[NORMAL] = "black"
       fg[SELECTED] = { 0.9, 0.9, 0.9 }
       fg[ACTIVE] = "black"
       fg[PRELIGHT] = { 0.9, 0.9, 0.9 }

       base[INSENSITIVE] = "#777766"
       text[INSENSITIVE] = { 0.60, 0.65, 0.57 }

       bg_pixmap[NORMAL] = "background.xpm"
       bg_pixmap[INSENSITIVE] = "background.xpm"
       bg_pixmap[ACTIVE] = "background.xpm"
       bg_pixmap[PRELIGHT] = "<none>"

     }

     style "ruler" = "default"
     {
       font_name = "helvetica 8"
     }


   The style ‘ruler’ inherits from ‘default’.  This way you can build on
existing styles.  The syntax for fonts and colors is described below.

   As this example shows, it is possible to specify several values for
foreground and background depending on the widget’s “state”.  The
possible states are:

‘NORMAL’
     This is the default state for widgets.

‘ACTIVE’
     This is the state for a widget that is ready to do something.  It
     is also for the trough of a scroll bar, i.e., ‘bg[ACTIVE] = "red"’
     sets the scroll bar trough to red.  Buttons that have been armed
     (pressed but not released yet) are in this state.

‘PRELIGHT’
     This is the state for a widget that can be manipulated, when the
     mouse pointer is over it—for example when the mouse is over the
     thumb in the scroll bar or over a menu item.  When the mouse is
     over a button that is not pressed, the button is in this state.

‘SELECTED’
     This is the state for data that has been selected by the user.  It
     can be selected text or items selected in a list.  This state is
     not used in Emacs.

‘INSENSITIVE’
     This is the state for widgets that are visible, but they cannot be
     manipulated in the usual way—for example, buttons that can’t be
     pressed, and disabled menu items.  To display disabled menu items
     in yellow, use ‘fg[INSENSITIVE] = "yellow"’.

   Here are the things that can go in a style declaration:

‘bg[STATE] = COLOR’
     This specifies the background color for the widget.  Note that
     editable text doesn’t use ‘bg’; it uses ‘base’ instead.

‘base[STATE] = COLOR’
     This specifies the background color for editable text.  In Emacs,
     this color is used for the background of the text fields in the
     file dialog.

‘bg_pixmap[STATE] = "PIXMAP"’
     This specifies an image background (instead of a background color).
     PIXMAP should be the image file name.  GTK+ can use a number of
     image file formats, including XPM, XBM, GIF, JPEG and PNG.  If you
     want a widget to use the same image as its parent, use ‘<parent>’.
     If you don’t want any image, use ‘<none>’.  ‘<none>’ is the way to
     cancel a background image inherited from a parent style.

     You can’t specify the file by its absolute file name.  GTK+ looks
     for the pixmap file in directories specified in ‘pixmap_path’.
     ‘pixmap_path’ is a colon-separated list of directories within
     double quotes, specified at the top level in a ‘gtkrc’ file (i.e.,
     not inside a style definition; see example above):

          pixmap_path "/usr/share/pixmaps:/usr/include/X11/pixmaps"

‘fg[STATE] = COLOR’
     This specifies the foreground color for widgets to use.  It is the
     color of text in menus and buttons, and the color for the arrows in
     the scroll bar.  For editable text, use ‘text’.

‘text[STATE] = COLOR’
     This is the color for editable text.  In Emacs, this color is used
     for the text fields in the file dialog.

‘font_name = "FONT"’
     This specifies the font for text in the widget.  FONT is a
     GTK-style (or Pango) font name, like ‘Sans Italic 10’.  *Note
     Fonts::.  The names are case insensitive.

   There are three ways to specify a color: a color name, an RGB
triplet, or a GTK-style RGB triplet.  *Note Colors::, for a description
of color names and RGB triplets.  Color names should be enclosed with
double quotes, e.g., ‘"red"’.  RGB triplets should be written without
double quotes, e.g., ‘#ff0000’.  GTK-style RGB triplets have the form
‘{ R, G, B }’, where R, G and B are either integers in the range 0–65535
or floats in the range 0.0–1.0.


File: emacs.info,  Node: Antinews,  Next: Mac OS / GNUstep,  Prev: X Resources,  Up: Top

# /. Appendix E Emacs 28 Antinews
********************************

For those users who live backwards in time, here is information about
downgrading to Emacs version 28.2.  We hope you will enjoy the greater
simplicity that results from the absence of many Emacs 29.1 features.

   • Like its newer releases, Emacs 28 can still be built with support
     of native compilation of Lisp programs.  However, in preparation
     for removal of this feature in some previous version, we’ve deleted
     the capability of ahead-of-time native compilation of all the Lisp
     files that come with Emacs.  This makes the Emacs build process
     much faster.

   • Emacs can no longer be built with the tree-sitter library, so you
     no longer will need to look for and install the grammar libraries
     for the languages in which you want to program.  Similarly, all the
     modes that are based on the tree-sitter library were deleted,
     leaving you with just one major mode for every supported
     programming language: no more need to decide whether to turn the
     tree-sitter supported modes on and try using their parser-based
     fontification, indentation, and other features.  For some languages
     and file types, this means no major mode at all, leaving you with
     the venerable Fundamental mode as the natural, high-performance
     choice.  For example, Go, Rust, and CMake files no longer have any
     major modes for editing their files — another milestone towards a
     simpler, leaner Emacs.

   • Built-in support for accessing SQLite databases was removed.  You
     can now again edit SQLite files as simple binary files, which Emacs
     is quite capable to support, as it always did.

   • As a gesture to users of the Haiku operating system, we’ve dropped
     the code which allowed Emacs to be built on that OS.  We expect
     Haiku users to enjoy the much simpler editors they have for editing
     their files.

   • Support for XInput2 input events on X is gone.  We think the
     traditional X input events are more than enough, certainly so as
     you move back in time, where XInput2 will eventually be removed
     from X as well, once the maintainers of the X Windows system
     realize the utter futility of supporting fancy input mechanisms.

   • The “pure GTK” (a.k.a. PGTK) configuration of Emacs is no longer
     supported.  This is in anticipation of the complete removal of the
     GTK toolkit support from Emacs, and in accordance with our
     expectation that GTK will cease to exist as you move back in time.
     We plan on removing support for all the other toolkits as well,
     leaving only the pure X build with our own widgets as the single
     supported GUI configuration on X.

   • The ‘--init-directory’ command-line option was removed, as
     initializing Emacs with init files of another user is a
     preposterous idea anyway.

   • In line with simplifying and eventually removing the
     native-compilation option, we’ve deleted the
     ‘--with-native-compilation=aot’ configure-time option.  This
     greatly simplifies how native compilation works and makes your
     configure-time decision regarding native compilation in Emacs
     clear-cut: either Emacs compiles non-preloaded Lisp packages to
     native code only before using it, or it never uses native
     compilation at all; no more half measures and special exceptions.
     For similar reasons, ‘native-compile-prune-cache’ and
     ‘startup-redirect-eln-cache’ features are no longer part of Emacs.

   • We’ve deleted the special code and features which allowed Emacs to
     present decent performance and responsiveness when editing files
     with very long lines.  Such files become more and more rare as time
     goes back, and so having all this tricky code in Emacs for their
     benefit was deemed an unnecessary complication.

   • Emacs dropped support for Eglot and the LSP servers.  We decided
     that the built-in ways of analyzing source code are more than
     enough as you move back in time.

   • Commands to scale and rotate images are once again bound to single
     keys like ‘+’, ‘-’, and ‘r’, which makes them much easier to type.
     As for the risk of typing these by mistake, we don’t believe Emacs
     users make typing mistakes, especially as they move back in time
     and become younger and younger.

   • To simplify typing popular commands, we’ve rebound the ‘C-x 8 . .’
     back to ‘C-x 8 .’ and ‘C-x 8 = =’ back to ‘C-x 8 =’.  There’s no
     need for fancier, longer key sequences, as moving back in time
     means we will have fewer and fewer commands to bind to them in the
     first place.

   • If you inadvertently kill the ‘*scratch*’ buffer, Emacs will
     recreate it in Fundamental mode, not in Lisp Interaction mode.  You
     get to turn on the mode you like yourself.  Our long-term plans for
     past Emacs releases is to remove the recreation of ‘*scratch*’
     altogether, and this is the first step in that direction.

   • Support for ‘rlogin’ and ‘rsh’ protocols are back, since we expect
     them to become more and more important and popular as you move back
     in time.

   • In preparation for eventual removal of Unicode support from Emacs,
     we’ve downgraded our Unicode support to version 14.0.

   • You can no longer change the size of the font globally.  Since
     Emacs will at some past date remove all support for variable-size
     fonts, having such commands is a luxury we are better without.

   • On our permanent quest for simplifying Emacs, we’ve removed the
     commands ‘duplicate-line’ and ‘duplicate-dwim’; the old-time
     friends ‘M-w’ and ‘C-y’ (typed one or more times) should suffice.
     The command ‘rename-visited-file’ is gone for the same reason.

   • We’ve deleted many commands related to Emoji, which were bound in
     the ‘C-x 8 e’ prefix keymap.  We decided that the ability to type
     Emoji sequences using ‘C-x 8 <RET>’ is enough, and actually serves
     our users better by requiring them to know the codepoints of the
     sequences they want to type.

   • We dropped support for many scripts and input methods, especially
     old scripts that no one uses anyway.  For similar reasons, Greek
     and Ukrainian translations of the Emacs tutorial are not available
     anymore.

   • ‘package.el’ can no longer fetch source code of packages from their
     VCS repositories.  We think command-line tools like Git should be
     enough to allow you to clone their repositories.  So we deleted the
     ‘package-vc-install’ command and other similar commands.

   • To keep up with decreasing computer memory capacity and disk space,
     many other functions and files have been eliminated in Emacs 28.2.


File: emacs.info,  Node: Mac OS / GNUstep,  Next: Haiku,  Prev: Antinews,  Up: Top

# /. Appendix F Emacs and macOS / GNUstep
****************************************

This section describes the peculiarities of using Emacs built with the
GNUstep libraries on GNU/Linux or other operating systems, or on macOS
with native window system support.  On macOS, Emacs can be built either
without window system support, with X11, or with the Cocoa interface;
this section only applies to the Cocoa build.  This does not support
versions before macOS 10.6.

   GNUstep is free software; macOS is not.  Because it is a non-free
operating system, macOS denies its users the freedom that every computer
user deserves.  That is an injustice.  For your freedom’s sake, we urge
you to switch to a free operating system.

   We support GNU Emacs on proprietary operating systems because we hope
this taste of freedom will inspire users to escape from them.

   For various historical and technical reasons, Emacs uses the term
‘Nextstep’ internally, instead of “Cocoa” or “macOS”; for instance, most
of the commands and variables described in this section begin with
‘ns-’, which is short for ‘Nextstep’.  NeXTstep was an application
interface released by NeXT Inc. during the 1980s, of which Cocoa is a
direct descendant.  Apart from Cocoa, there is another NeXTstep-style
system: GNUstep, which is free software.  As of this writing, Emacs
GNUstep support is in alpha status (*note GNUstep Support::), but we
hope to improve it in the future.

* Menu:

* Mac / GNUstep Basics::        Basic Emacs usage under GNUstep or macOS.
* Mac / GNUstep Customization:: Customizations under GNUstep or macOS.
* Mac / GNUstep Events::        How window system events are handled.
* GNUstep Support::             Details on status of GNUstep support.


File: emacs.info,  Node: Mac / GNUstep Basics,  Next: Mac / GNUstep Customization,  Up: Mac OS / GNUstep

F.1 Basic Emacs usage under macOS and GNUstep
=============================================

By default, the <Alt> and <Option> keys are the same as <Meta>.  The Mac
<Cmd> key is the same as <Super>, and Emacs provides a set of key
bindings using this modifier key that mimic other Mac / GNUstep
applications (*note Mac / GNUstep Events::).  You can change these
bindings in the usual way (*note Key Bindings::).  The modifiers
themselves can be customized; *note Mac / GNUstep Customization::.

   ‘S-mouse-1’ adjusts the region to the click position, just like
‘mouse-3’ (‘mouse-save-then-kill’); it does not pop up a menu for
changing the default face, as ‘S-mouse-1’ normally does (*note Text
Scale::).  This change makes Emacs behave more like other Mac / GNUstep
applications.

   When you open or save files using the menus, or using the ‘Cmd-o’ and
‘Cmd-S’ bindings, Emacs uses graphical file dialogs to read file names.
However, if you use the regular Emacs key sequences, such as ‘C-x C-f’,
Emacs uses the minibuffer to read file names.

   On GNUstep, in an X-windows environment you need to use ‘Cmd-c’
instead of one of the ‘C-w’ or ‘M-w’ commands to transfer text to the X
primary selection; otherwise, Emacs will use the clipboard selection.
Likewise, ‘Cmd-y’ (instead of ‘C-y’) yanks from the X primary selection
instead of the kill-ring or clipboard.

F.1.1 Grabbing environment variables
------------------------------------

Many programs which may run under Emacs, like latex or man, depend on
the settings of environment variables.  If Emacs is launched from the
shell, it will automatically inherit these environment variables and its
subprocesses will inherit them from it.  But if Emacs is launched from
the Finder it is not a descendant of any shell, so its environment
variables haven’t been set, which often causes the subprocesses it
launches to behave differently than they would when launched from the
shell.

   For the PATH and MANPATH variables, a system-wide method of setting
PATH is recommended on macOS, using the ‘/etc/paths’ files and the
‘/etc/paths.d’ directory.


File: emacs.info,  Node: Mac / GNUstep Customization,  Next: Mac / GNUstep Events,  Prev: Mac / GNUstep Basics,  Up: Mac OS / GNUstep

F.2 Mac / GNUstep Customization
===============================

There are a few customization options that are specific to the Nextstep
port.  For example, they affect things such as the modifier keys and the
fullscreen behavior.  To see all such options, use ‘M-x customize-group
<RET> ns <RET>’.

F.2.1 Modifier keys
-------------------

The following variables control the behavior of the actual modifier
keys:

‘ns-alternate-modifier’
‘ns-right-alternate-modifier’
     The left and right <Option> or <Alt> keys.

‘ns-command-modifier’
‘ns-right-command-modifier’
     The left and right <Command> keys.

‘ns-control-modifier’
‘ns-right-control-modifier’
     The left and right <Control> keys.

‘ns-function-modifier’
     The <Function> (fn) key.

   The value of each variable is either a symbol, describing the key for
any purpose, or a list of the form ‘(:ordinary SYMBOL :function SYMBOL
:mouse SYMBOL)’, which describes the modifier when used with ordinary
keys, function keys (that do not produce a character, such as arrow
keys), and mouse clicks.

   If the SYMBOL is one of ‘control’, ‘meta’, ‘alt’, ‘super’ or ‘hyper’,
this describes the Emacs modifier it represents.  If SYMBOL is ‘none’,
Emacs does not use the key, which retains its standard behavior.  For
instance, the <Option> key in macOS is then used for composing
additional characters.

   The variables for right-hand keys, like
‘ns-right-alternate-modifier’, may also be set to ‘left’, which means to
use the same behavior as the corresponding left-hand key.

F.2.2 Frame Variables
---------------------

‘ns-use-proxy-icon’
     This variable specifies whether to display the proxy icon in the
     titlebar.

‘ns-confirm-quit’
     This variable specifies whether to display a graphical confirmation
     dialog on quitting.

‘ns-auto-hide-menu-bar’
     This variable specifies whether the macOS menu bar is hidden when
     an Emacs frame is selected.  If non-‘nil’ the menu bar is not shown
     unless the mouse pointer is moved near to the top of the screen.

‘ns-use-native-fullscreen’
     This variable controls whether to use native, or non-native
     fullscreen.  Native fullscreen is only available on macOS 10.7 and
     above.

F.2.3 macOS Trackpad/Mousewheel Variables
-----------------------------------------

These variables only apply to macOS 10.7 (Lion) and above.

‘ns-use-mwheel-acceleration’
     This variable controls whether Emacs ignores the system mousewheel
     acceleration.  When ‘nil’ each ‘click’ of the mousewheel will
     correspond exactly with one mousewheel event.  When non-‘nil’, the
     default, each ‘click’ may correspond with more than one mousewheel
     event, depending on the user’s input.

‘ns-use-mwheel-momentum’
     This variable controls whether Emacs ignores the system ‘momentum’
     when scrolling using a trackpad.  When non-‘nil’, the default,
     scrolling rapidly may result in the buffer continuing to scroll for
     a short while after the user has lifted their fingers off the
     trackpad.

‘ns-mwheel-line-height’
     This variable controls the sensitivity of scrolling with the
     trackpad.  Apple trackpads scroll by pixels, not lines, so Emacs
     converts the system’s pixel values into lines.  When set to a
     number, this variable sets the number of pixels Emacs will consider
     as one line.  When ‘nil’ or a non-number the default line height is
     used.

     Setting a lower number makes the trackpad more sensitive, and a
     higher number makes the trackpad less sensitive.


File: emacs.info,  Node: Mac / GNUstep Events,  Next: GNUstep Support,  Prev: Mac / GNUstep Customization,  Up: Mac OS / GNUstep

F.3 Windowing System Events under macOS / GNUstep
=================================================

Nextstep applications receive a number of special events which have no X
equivalent.  These are sent as specially defined key events, which do
not correspond to any sequence of keystrokes.  Under Emacs, these key
events can be bound to functions just like ordinary keystrokes.  Here is
a list of these events.

<ns-open-file>
     This event occurs when another Nextstep application requests that
     Emacs open a file.  A typical reason for this would be a user
     double-clicking a file in the Finder application.  By default,
     Emacs responds to this event by opening a new frame and visiting
     the file in that frame (‘ns-find-file’).  As an exception, if the
     selected buffer is the ‘*scratch*’ buffer, Emacs visits the file in
     the selected frame.

     You can change how Emacs responds to a ‘ns-open-file’ event by
     changing the variable ‘ns-pop-up-frames’.  Its default value,
     ‘fresh’, is what we have just described.  A value of ‘t’ means to
     always visit the file in a new frame.  A value of ‘nil’ means to
     always visit the file in the selected frame.

<ns-open-temp-file>
     This event occurs when another application requests that Emacs open
     a temporary file.  By default, this is handled by just generating a
     ‘ns-open-file’ event, the results of which are described above.

<ns-open-file-line>
     Some applications, such as ProjectBuilder and gdb, request not only
     a particular file, but also a particular line or sequence of lines
     in the file.  Emacs handles this by visiting that file and
     highlighting the requested line (‘ns-open-file-select-line’).

<ns-power-off>
     This event occurs when the user logs out and Emacs is still
     running, or when “Quit Emacs” is chosen from the application menu.
     The default behavior is to save all file-visiting buffers.

<ns-show-prefs>
     This event occurs when the user selects “Preferences” from the
     application menu.  By default, it is bound to the command
     ‘customize’.

   Emacs also allows users to make use of Nextstep services, via a set
of commands whose names begin with ‘ns-service-’ and end with the name
of the service.  Type ‘M-x ns-service- <TAB>’ to see a list of these
commands.  These functions either operate on marked text (replacing it
with the result) or take a string argument and return the result as a
string.  You can also use the Lisp function ‘ns-perform-service’ to pass
arbitrary strings to arbitrary services and receive the results back.
Note that you may need to restart Emacs to access newly-available
services.


File: emacs.info,  Node: GNUstep Support,  Prev: Mac / GNUstep Events,  Up: Mac OS / GNUstep

F.4 GNUstep Support
===================

Emacs can be built and run under GNUstep, but there are still issues to
be addressed.  Interested developers should contact
<emacs-devel@gnu.org>.


File: emacs.info,  Node: Haiku,  Next: Microsoft Windows,  Prev: Mac OS / GNUstep,  Up: Top

# /. Appendix G Emacs and Haiku
******************************

Haiku is a Unix-like operating system that originated as a
re-implementation of the operating system BeOS.

   This section describes the peculiarities of using Emacs built with
the Application Kit, the windowing system native to Haiku.  The oddities
described here do not apply to using Emacs on Haiku built without
windowing support, or built with X11.

* Menu:

* Haiku Basics::        Basic Emacs usage and installation under Haiku.
* Haiku Fonts::         The various options for displaying fonts on Haiku.


File: emacs.info,  Node: Haiku Basics,  Next: Haiku Fonts,  Up: Haiku

G.1 Installation and usage peculiarities under Haiku
====================================================

Emacs installs two separate executables under Haiku; it is up to the
user to decide which one suits him best: A regular executable, with the
lowercase name ‘emacs’, and a binary containing Haiku-specific
application metadata, with the name ‘Emacs’.

   If you are launching Emacs from the Tracker, or want to make the
Tracker open files using Emacs, you should use the binary named ‘Emacs’;
if you are going to use Emacs in the terminal, or wish to launch
separate instances of Emacs, or do not care for the aforementioned
system integration features, use the binary named ‘emacs’ instead.

   On Haiku, unusual modifier keys such as the Hyper key are
unsupported.  By default, the super key corresponds with the option key
defined by the operating system, the meta key with the command key, the
control key with the system control key, and the shift key with the
system shift key.  On a standard PC keyboard, Haiku should map these
keys to positions familiar to those using a GNU system, but this may
require some adjustment to your system’s configuration to work.

   It is impossible to type accented characters using the system super
key map.

   You can customize the correspondence between modifier keys known to
the system, and those known to Emacs.  The variables that allow for that
are described below.

‘haiku-meta-keysym’
     The system modifier key that will be treated as the Meta key by
     Emacs.  It defaults to ‘command’.

‘haiku-control-keysym’
     The system modifier key that will be treated as the Control key by
     Emacs.  It defaults to ‘control’.

‘haiku-super-keysym’
     The system modifier key that will be treated as the Super key by
     Emacs.  It defaults to ‘option’.

‘haiku-shift-keysym’
     The system modifier key that will be treated as the Shift key by
     Emacs.  It defaults to ‘shift’.

   The value of each variable can be one of the symbols ‘command’,
‘control’, ‘option’, ‘shift’, or ‘nil’.  ‘nil’ or any other value will
cause the default value to be used instead.

   On Haiku, Emacs defaults to using the system tooltip mechanism.  This
usually leads to more responsive tooltips, but the tooltips will not be
able to display text properties or faces.  If you need those features,
customize the variable ‘use-system-tooltips’ to the ‘nil’ value, and
Emacs will use its own implementation of tooltips.

   Unlike the X window system, Haiku does not have a system-wide
resource database.  Since many important options are specified via X
resources (*note X Resources::), an emulation is provided: upon startup,
Emacs will load a file named ‘GNU Emacs’ inside the user configuration
directory (normally ‘/boot/home/config/settings’), which should be a
flattened system message where keys and values are both strings, and
correspond to attributes and their values respectively.

   You can create such a file with the ‘xmlbmessage’ tool.

G.1.1 What to do when Emacs crashes
-----------------------------------

If the variable ‘haiku-debug-on-fatal-error’ is non-‘nil’, Emacs will
launch the system debugger when a fatal signal is received.  It defaults
to ‘t’.  If GDB cannot be used on your system, please attach the report
generated by the system debugger when reporting a bug.


File: emacs.info,  Node: Haiku Fonts,  Prev: Haiku Basics,  Up: Haiku

G.2 Font and font backend selection on Haiku
============================================

Emacs, when built with Haiku windowing support, can be built with
several different font backends.  You can specify font backends by
specifying ‘-xrm Emacs.fontBackend:BACKEND’ on the command line used to
invoke Emacs, where ‘BACKEND’ is one of the backends specified below, or
on a per-frame basis by changing the ‘font-backend’ frame parameter.

   Two of these backends, ‘ftcr’ and ‘ftcrhb’ are identical to their
counterparts on the X Window System.  There is also a Haiku-specific
backend named ‘haiku’, that uses the App Server to draw fonts, but does
not at present support display of color font and emoji.


File: emacs.info,  Node: Microsoft Windows,  Next: Manifesto,  Prev: Haiku,  Up: Top

# /. Appendix H Emacs and Microsoft Windows/MS-DOS
*************************************************

This section describes peculiarities of using Emacs on Microsoft
Windows.  Some of these peculiarities are also relevant to Microsoft’s
older MS-DOS operating system.  However, Emacs features that are
relevant _only_ to MS-DOS are described in a separate section (*note
MS-DOS::).

   MS-Windows is a non-free operating system; that means it denies its
users the freedom that every computer user deserves.  That is an
injustice.  For your freedom’s sake, we urge you to switch to a free
operating system.

   We support GNU Emacs on proprietary operating systems because we hope
this taste of freedom will inspire users to escape from them.

   The behavior of Emacs on MS-Windows is reasonably similar to what is
documented in the rest of the manual, including support for long file
names, multiple frames, scroll bars, mouse menus, and subprocesses.
However, a few special considerations apply, and they are described
here.

* Menu:

* Windows Startup::     How to start Emacs on Windows.
* Text and Binary::     Text files use CRLF to terminate lines.
* Windows Files::       File-name conventions on Windows.
* ls in Lisp::          Emulation of ‘ls’ for Dired.
* Windows HOME::        Where Emacs looks for your ‘.emacs’ and
                          where it starts up.
* Windows Keyboard::    Windows-specific keyboard features.
* Windows Mouse::       Windows-specific mouse features.
* Windows Processes::   Running subprocesses on Windows.
* Windows Printing::    How to specify the printer on MS-Windows.
* Windows Fonts::       Specifying fonts on MS-Windows.
* Windows Misc::        Miscellaneous Windows features.
* MS-DOS::              Using Emacs on MS-DOS.


File: emacs.info,  Node: Windows Startup,  Next: Text and Binary,  Up: Microsoft Windows

H.1 How to Start Emacs on MS-Windows
====================================

There are several ways of starting Emacs on MS-Windows:

  1. From the desktop shortcut icon: either double-click the left mouse
     button on the icon, or click once, then press <RET>.  The desktop
     shortcut should specify as its “Target” (in the “Properties” of the
     shortcut) the full absolute file name of ‘runemacs.exe’, _not_ of
     ‘emacs.exe’.  This is because ‘runemacs.exe’ hides the console
     window that would have been created if the target of the shortcut
     were ‘emacs.exe’ (which is a console program, as far as Windows is
     concerned).  If you use this method, Emacs starts in the directory
     specified by the shortcut.  To control where that is, right-click
     on the shortcut, select “Properties”, and in the “Shortcut” tab
     modify the “Start in” field to your liking.

  2. From a task-bar shortcut icon, by clicking once the left mouse
     button.  Windows versions since Vista allow you to create such
     shortcuts by “pinning” the icon of a running program that appears
     in the task bar.  You can do that with Emacs, but afterwards you
     will have to change the properties of the pinned shortcut to run
     ‘runemacs.exe’, _not_ of ‘emacs.exe’.  You can also pin Emacs to
     the task bar by clicking the right mouse button on its icon in the
     Start menu, then selecting ‘Pin to taskbar’.  Once again, be sure
     to specify ‘runemacs.exe’ as the program to run.  You can control
     where Emacs starts by setting the “Start in” field of the
     shortcut’s Properties.

  3. From the Command Prompt window, by typing ‘emacs <RET>’ at the
     prompt.  The Command Prompt window where you did that will not be
     available for invoking other commands until Emacs exits.  In this
     case, Emacs will start in the current directory of the Windows
     shell.

  4. From the Command Prompt window, by typing ‘runemacs <RET>’ at the
     prompt.  The Command Prompt window where you did that will be
     immediately available for invoking other commands.  In this case,
     Emacs will start in the current directory of the Windows shell.

  5. From the Windows ‘Run’ dialog (normally reached by clicking the
     ‘Start’ button).  Typing ‘runemacs <RET>’ into the dialog will
     start Emacs in the parent directory of the Windows equivalent of
     your user’s ‘HOME’ directory, see *note Windows HOME::.

  6. Via ‘emacsclient.exe’ or ‘emacsclientw.exe’, which allow you to
     invoke Emacs from other programs, and to reuse a running Emacs
     process for serving editing jobs required by other programs.  *Note
     Emacs Server::.  The difference between ‘emacsclient.exe’ and
     ‘emacsclientw.exe’ is that the former is a console program, while
     the latter is a Windows GUI program.  Both programs wait for Emacs
     to signal that the editing job is finished, before they exit and
     return control to the program that invoked them.  Which one of them
     to use in each case depends on the expectations of the program that
     needs editing services.  If that program is itself a console
     (text-mode) program, you should use ‘emacsclient.exe’, so that any
     of its messages and prompts appear in the same command window as
     those of the invoking program.  By contrast, if the invoking
     program is a GUI program, you will be better off using
     ‘emacsclientw.exe’, because ‘emacsclient.exe’ will pop up a command
     window if it is invoked from a GUI program.  A notable situation
     where you would want ‘emacsclientw.exe’ is when you right-click on
     a file in the Windows Explorer and select “Open With” from the
     pop-up menu.  Use the ‘--alternate-editor=’ or ‘-a’ options if
     Emacs might not be running (or not running as a server) when
     ‘emacsclient’ is invoked—that will always give you an editor.  When
     invoked via ‘emacsclient’, Emacs will start in the current
     directory of the program that invoked ‘emacsclient’.

   Note that, due to limitations of MS-Windows, Emacs cannot have both
GUI and text-mode frames in the same session.  It also cannot open
text-mode frames on more than a single “Command Prompt” window, because
each Windows program can have only one console at any given time.  For
these reasons, if you invoke ‘emacsclient’ with the ‘-c’ option, and the
Emacs server runs in a text-mode session, Emacs will always create a new
text-mode frame in the same “Command Prompt” window where it was
started; a GUI frame will be created only if the server runs in a GUI
session.  Similarly, if you invoke ‘emacsclient’ with the ‘-t’ option,
Emacs will create a GUI frame if the server runs in a GUI session, or a
text-mode frame when the session runs in text mode in a “Command Prompt”
window.  *Note emacsclient Options::.


File: emacs.info,  Node: Text and Binary,  Next: Windows Files,  Prev: Windows Startup,  Up: Microsoft Windows

H.2 Text Files and Binary Files
===============================

GNU Emacs uses newline characters to separate text lines.  This is the
convention used on GNU, Unix, and other POSIX-compliant systems.

   By contrast, MS-DOS and MS-Windows normally use carriage return
followed by linefeed, a two-character sequence, to separate text lines.
(Linefeed is the same character as newline.)  Therefore, convenient
editing of typical files with Emacs requires conversion of these
end-of-line (EOL) sequences.  And that is what Emacs normally does: it
converts carriage return followed by linefeed into newline when reading
files, and converts newline into carriage return followed by linefeed
when writing files.  The same mechanism that handles conversion of
international character codes does this conversion also (*note Coding
Systems::).

   One consequence of this special format-conversion of most files is
that character positions as reported by Emacs (*note Position Info::) do
not agree with the file size information known to the operating system.

   In addition, if Emacs recognizes from a file’s contents that it uses
newline rather than carriage return followed by linefeed as its line
separator, it does not perform EOL conversion when reading or writing
that file.  Thus, you can read and edit files from GNU and Unix systems
on MS-DOS with no special effort, and they will retain their Unix-style
end-of-line convention after you edit them.

   The mode line indicates whether end-of-line translation was used for
the current buffer.  If MS-DOS end-of-line translation is in use for the
buffer, the MS-Windows build of Emacs displays a backslash ‘\’ after the
coding system mnemonic near the beginning of the mode line (*note Mode
Line::).  If no EOL translation was performed, the string ‘(Unix)’ is
displayed instead of the backslash, to alert you that the file’s EOL
format is not the usual carriage return followed by linefeed.

   To visit a file and specify whether it uses DOS-style or Unix-style
end-of-line, specify a coding system (*note Text Coding::).  For
example, ‘C-x <RET> c unix <RET> C-x C-f foobar.txt’ visits the file
‘foobar.txt’ without converting the EOLs; if some line ends with a
carriage return followed by linefeed pair, Emacs will display ‘^M’ at
the end of that line.  Similarly, you can direct Emacs to save a buffer
in a specified EOL format with the ‘C-x <RET> f’ command.  For example,
to save a buffer with Unix EOL format, type ‘C-x <RET> f unix <RET> C-x
C-s’.  If you visit a file with DOS EOL conversion, then save it with
Unix EOL format, that effectively converts the file to Unix EOL style,
like the ‘dos2unix’ program.

   When you use NFS, Samba, or some other similar method to access file
systems that reside on computers using GNU or Unix systems, Emacs should
not perform end-of-line translation on any files in these file
systems—not even when you create a new file.  To request this, designate
these file systems as “untranslated” file systems by calling the
function ‘w32-add-untranslated-filesystem’.  It takes one argument: the
file system name, including a drive letter and optionally a directory.
For example,

     (w32-add-untranslated-filesystem "Z:")

designates drive Z as an untranslated file system, and

     (w32-add-untranslated-filesystem "Z:\\foo")

designates directory ‘\foo’ on drive Z as an untranslated file system.

   Most often you would use ‘w32-add-untranslated-filesystem’ in your
‘.emacs’ or ‘init.el’ init file, or in ‘site-start.el’ so that all the
users at your site get the benefit of it.

   To countermand the effect of ‘w32-add-untranslated-filesystem’, use
the function ‘w32-remove-untranslated-filesystem’.  This function takes
one argument, which should be a string just like the one that was used
previously with ‘w32-add-untranslated-filesystem’.

   Designating a file system as untranslated does not affect character
set conversion, only end-of-line conversion.  Essentially, it directs
Emacs to default to creating new files with the Unix-style convention of
using newline at the end of a line.  *Note Coding Systems::.


File: emacs.info,  Node: Windows Files,  Next: ls in Lisp,  Prev: Text and Binary,  Up: Microsoft Windows

H.3 File Names on MS-Windows
============================

MS-Windows and MS-DOS normally use a backslash, ‘\’, to separate name
units within a file name, instead of the slash used on other systems.
Emacs on MS-DOS/MS-Windows permits use of either slash or backslash, and
also knows about drive letters in file names.

   On MS-DOS/MS-Windows, file names are case-insensitive, so Emacs by
default ignores letter-case in file names during completion.  To this
end, the default value of ‘read-file-name-completion-ignore-case’ is
non-‘nil’ on MS-DOS/MS-Windows.  *Note Completion Options::.

   The variable ‘w32-get-true-file-attributes’ controls whether Emacs
should issue additional system calls to determine more accurately file
attributes in primitives like ‘file-attributes’ and
‘directory-files-and-attributes’.  These additional calls are needed to
report correct file ownership, link counts and file types for special
files such as pipes.  Without these system calls, file ownership will be
attributed to the current user, link counts will be always reported as
1, and special files will be reported as regular files.

   If the value of this variable is ‘local’ (the default), Emacs will
issue these additional system calls only for files on local fixed
drives.  Any other non-‘nil’ value means do this even for removable and
remote volumes, where this could potentially slow down Dired and other
related features.  The value of ‘nil’ means never issue those system
calls.  Non-‘nil’ values are more useful on NTFS volumes, which support
hard links and file security, than on FAT, FAT32, and exFAT volumes.

   Unlike Unix, MS-Windows file systems restrict the set of characters
that can be used in a file name.  The following characters are not
allowed:

   • Shell redirection symbols ‘<’, ‘>’, and ‘|’.

   • Colon ‘:’ (except after the drive letter).

   • Forward slash ‘/’ and backslash ‘\’ (except as directory
     separators).

   • Wildcard characters ‘*’ and ‘?’.

   • Control characters whose codepoints are 1 through 31 decimal.  In
     particular, newlines in file names are not allowed.

   • The null character, whose codepoint is zero (this limitation exists
     on Unix filesystems as well).

In addition, referencing any file whose name matches a DOS character
device, such as ‘NUL’ or ‘LPT1’ or ‘PRN’ or ‘CON’, with or without any
file-name extension, will always resolve to those character devices, in
any directory.  Therefore, only use such file names when you want to use
the corresponding character device.


File: emacs.info,  Node: ls in Lisp,  Next: Windows HOME,  Prev: Windows Files,  Up: Microsoft Windows

H.4 Emulation of ‘ls’ on MS-Windows
===================================

Dired normally uses the external program ‘ls’ to produce the directory
listing displayed in Dired buffers (*note Dired::).  However, MS-Windows
and MS-DOS systems don’t come with such a program, although several
ports of GNU ‘ls’ are available.  Therefore, Emacs on those systems
_emulates_ ‘ls’ in Lisp, by using the ‘ls-lisp.el’ package.  While
‘ls-lisp.el’ provides a reasonably full emulation of ‘ls’, there are
some options and features peculiar to that emulation; they are described
in this section.

   The ‘ls’ emulation supports many of the ‘ls’ switches, but it doesn’t
support all of them.  Here’s the list of the switches it does support:
‘-A’, ‘-a’, ‘-B’, ‘-C’, ‘-c’, ‘-G’, ‘-g’, ‘-h’, ‘-i’, ‘-n’, ‘-R’, ‘-r’,
‘-S’, ‘-s’, ‘-t’, ‘-U’, ‘-u’, ‘-v’, and ‘-X’.  The ‘-F’ switch is
partially supported (it appends the character that classifies the file,
but does not prevent symlink following).

   On MS-Windows and MS-DOS, ‘ls-lisp.el’ is preloaded when Emacs is
built, so the Lisp emulation of ‘ls’ is always used on those platforms.
If you have a ported ‘ls’, setting
‘ls-lisp-use-insert-directory-program’ to a non-‘nil’ value will revert
to using an external program named by the variable
‘insert-directory-program’.

   The order in which ‘ls-lisp.el’ sorts files depends on several
customizable options described below.

   The default sorting order follows locale-specific rules derived from
your system locale.  You can make the order locale-independent by
customizing ‘ls-lisp-use-string-collate’ to a ‘nil’ value.

   On GNU and Unix systems, when the locale’s encoding is UTF-8, the
collation order follows the Unicode Collation Algorithm (UCA).  To have
a similar effect on MS-Windows, the variable
‘ls-lisp-UCA-like-collation’ should have a non-‘nil’ value (this is the
default).  The resulting sorting order ignores punctuation, symbol
characters, and whitespace characters, so ‘.foobar’, ‘foobar’ and
‘foo bar’ will appear together rather than far apart.

   By default, ‘ls-lisp.el’ uses a case-sensitive sort order for the
directory listing it produces; this is so the listing looks the same as
on other platforms.  If you wish that the files be sorted in
case-insensitive order, set the variable ‘ls-lisp-ignore-case’ to a
non-‘nil’ value.

   By default, files and subdirectories are sorted together, to emulate
the behavior of ‘ls’.  However, native MS-Windows/MS-DOS file managers
list the directories before the files; if you want that behavior,
customize the option ‘ls-lisp-dirs-first’ to a non-‘nil’ value.

   The variable ‘ls-lisp-verbosity’ controls the file attributes that
‘ls-lisp.el’ displays.  The value should be either ‘nil’ or a list that
contains one or more of the symbols ‘links’, ‘uid’, and ‘gid’.  ‘links’
means display the count of different file names that are associated with
(a.k.a. “links to”) the file’s data; this is only useful on NTFS
volumes.  ‘uid’ means display the numerical identifier of the user who
owns the file.  ‘gid’ means display the numerical identifier of the file
owner’s group.  The default value is ‘(links uid gid)’ i.e., all the 3
optional attributes are displayed.  The value ‘nil’ means not to display
any of these attributes.

   The variable ‘ls-lisp-emulation’ controls the flavor of the ‘ls’
emulation by setting the defaults for the 3 options described above:
‘ls-lisp-ignore-case’, ‘ls-lisp-dirs-first’, and ‘ls-lisp-verbosity’.
The value of this option can be one of the following symbols:

‘GNU’
‘nil’
     Emulate GNU systems; this is the default.  This sets
     ‘ls-lisp-ignore-case’ and ‘ls-lisp-dirs-first’ to ‘nil’, and
     ‘ls-lisp-verbosity’ to ‘(links uid gid)’.
‘UNIX’
     Emulate Unix systems.  Like ‘GNU’, but sets ‘ls-lisp-verbosity’ to
     ‘(links uid)’.
‘MacOS’
     Emulate macOS.  Sets ‘ls-lisp-ignore-case’ to ‘t’, and
     ‘ls-lisp-dirs-first’ and ‘ls-lisp-verbosity’ to ‘nil’.
‘MS-Windows’
     Emulate MS-Windows.  Sets ‘ls-lisp-ignore-case’ and
     ‘ls-lisp-dirs-first’ to ‘t’, and ‘ls-lisp-verbosity’ to ‘nil’ on
     Windows 9X and to ‘t’ on modern versions of Windows.  Note that the
     default emulation is _not_ ‘MS-Windows’, even on Windows, since
     many users of Emacs on those platforms prefer the GNU defaults.

Any other value of ‘ls-lisp-emulation’ means the same as ‘GNU’.
Customizing this option calls the function ‘ls-lisp-set-options’ to
update the 3 dependent options as needed.  If you change the value of
this variable without using customize after ‘ls-lisp.el’ is loaded (note
that it is preloaded on MS-Windows and MS-DOS), you can call that
function manually for the same result.

   The variable ‘ls-lisp-support-shell-wildcards’ controls how file-name
patterns are supported: if it is non-‘nil’ (the default), they are
treated as shell-style wildcards; otherwise they are treated as Emacs
regular expressions.

   The variable ‘ls-lisp-format-time-list’ defines how to format the
date and time of files.  _The value of this variable is ignored_, unless
Emacs cannot determine the current locale.  (However, if the value of
‘ls-lisp-use-localized-time-format’ is non-‘nil’, Emacs obeys
‘ls-lisp-format-time-list’ even if the current locale is available; see
below.)

   The value of ‘ls-lisp-format-time-list’ is a list of 2 strings.  The
first string is used if the file was modified within the current year,
while the second string is used for older files.  In each of these two
strings you can use ‘%’-sequences to substitute parts of the time.  For
example:
     ("%b %e %H:%M" "%b %e  %Y")

Note that the strings substituted for these ‘%’-sequences depend on the
current locale.  *Note (elisp)Time Parsing::, for more about format time
specs.

   Normally, Emacs formats the file time stamps in either traditional or
ISO-style time format.  However, if the value of the variable
‘ls-lisp-use-localized-time-format’ is non-‘nil’, Emacs formats file
time stamps according to what ‘ls-lisp-format-time-list’ specifies.  The
‘%’-sequences in ‘ls-lisp-format-time-list’ produce locale-dependent
month and day names, which might cause misalignment of columns in Dired
display.  The default value of ‘ls-lisp-use-localized-time-format’ is
‘nil’.


File: emacs.info,  Node: Windows HOME,  Next: Windows Keyboard,  Prev: ls in Lisp,  Up: Microsoft Windows

H.5 HOME and Startup Directories on MS-Windows
==============================================

The Windows equivalent of ‘HOME’ is the “user-specific application data
directory”.  The actual location depends on the Windows version; typical
values are ‘C:\Documents and Settings\USERNAME\Application Data’ on
Windows 2000 up to XP, ‘C:\Users\USERNAME\AppData\Roaming’ on Windows
Vista and later, and either ‘C:\WINDOWS\Application Data’ or
‘C:\WINDOWS\Profiles\USERNAME\Application Data’ on Windows 9X/ME.  If
this directory does not exist or cannot be accessed, Emacs falls back to
‘C:\’ as the default value of ‘HOME’.

   You can override this default value of ‘HOME’ by explicitly setting
the environment variable ‘HOME’ to point to any directory on your
system.  ‘HOME’ can be set either from the command shell prompt or from
‘Properties’ dialog of ‘My Computer’.  ‘HOME’ can also be set in the
system registry, *note MS-Windows Registry::.

   For compatibility with older versions of Emacs(1), if there is a file
named ‘.emacs’ in ‘C:\’, the root directory of drive ‘C:’, and ‘HOME’ is
set neither in the environment nor in the Registry, Emacs will treat
‘C:\’ as the default ‘HOME’ location, and will not look in the
application data directory, even if it exists.  Note that only ‘.emacs’
is looked for in ‘C:\’; the older name ‘_emacs’ (see below) is not.
This use of ‘C:\.emacs’ to define ‘HOME’ is deprecated; Emacs will
display a warning about its use during startup.

   Whatever the final place is, Emacs sets the internal value of the
‘HOME’ environment variable to point to it, and it will use that
location for other files and directories it normally looks for or
creates in your home directory.

   You can always find out what Emacs thinks is your home directory’s
location by typing ‘C-x d ~/ <RET>’.  This should present the list of
files in the home directory, and show its full name on the first line.
Likewise, to visit your init file, type ‘C-x C-f ~/.emacs <RET>’
(assuming the file’s name is ‘.emacs’).

   Your init file can have any name mentioned in *note Init File::.

   Because MS-DOS does not allow file names with leading dots, and older
Windows systems made it hard to create files with such names, the
Windows port of Emacs supports an init file name ‘_emacs’, if such a
file exists in the home directory and ‘.emacs’ does not.  This name is
considered obsolete, so Emacs will display a warning if it is used.

   ---------- Footnotes ----------

   (1) Older versions of Emacs didn’t check the application data
directory.


File: emacs.info,  Node: Windows Keyboard,  Next: Windows Mouse,  Prev: Windows HOME,  Up: Microsoft Windows

H.6 Keyboard Usage on MS-Windows
================================

This section describes the Windows-specific features related to keyboard
input in Emacs.

   Many key combinations (known as “keyboard shortcuts”) that have
conventional uses in MS-Windows programs conflict with traditional Emacs
key bindings.  (These Emacs key bindings were established years before
Microsoft was founded.)  Examples of conflicts include ‘C-c’, ‘C-x’,
‘C-z’, and ‘C-a’.  You can redefine some of them with meanings more like
the MS-Windows meanings by enabling CUA Mode (*note CUA Bindings::).
Another optional feature which will make Emacs behave like other Windows
applications is Delete Selection mode (*note Using Region::).

   By default, the key labeled <Alt> is mapped as the <Meta> key.  If
you wish it to produce the ‘Alt’ modifier instead, set the variable
‘w32-alt-is-meta’ to a ‘nil’ value.

   MS-Windows reserves certain key combinations, such as ‘<Alt>-<TAB>’
and a number of Windows key combinations, for its own use.  These key
combinations are intercepted by the system before Emacs can see them.
Also, on Windows 10, all Windows key combinations are reserved by the
system in such a way that they are never propagated to applications,
even if the system does not currently define a hotkey on the specific
combination.  You can use the ‘w32-register-hot-key’ function to allow a
key sequence to be seen by Emacs instead of being grabbed by Windows.
When registered as a hot key, the key combination is pulled out of the
system’s input queue before it is handled by Windows, effectively
overriding the special meaning of that key sequence for Windows.  The
override is only effective when Emacs is active; with other applications
on the foreground the keys behave normally.

   The argument to ‘w32-register-hot-key’ must be a single key with a
single modifier, in vector form that would be acceptable to
‘define-key’.  The control and shift modifiers have no effect on the
argument.  The meta modifier is interpreted as the <Alt> key if
‘w32-alt-is-meta’ is ‘t’ (the default), and the super and hyper
modifiers are interpreted according to the bindings of
‘w32-lwindow-modifier’ and ‘w32-rwindow-modifier’.  Additionally, a
modifier with the trailing dash but with no key indicates that all
Windows defined hotkeys for that modifier are to be overridden in the
favor of Emacs.

   For example, ‘(w32-register-hot-key [M-tab])’ lets you use ‘M-<TAB>’
normally in Emacs; for instance, to complete the word or symbol at point
at top level, or to complete the current search string against
previously sought strings during incremental search.
‘(w32-register-hot-key [s-])’ with ‘w32-lwindow-modifier’ bound to
‘super’ disables all the Windows’ own Windows key based shortcuts.(1)

   Note that ‘w32-register-hot-key’ checks the ‘w32-[lr]window-modifier’
values at the time of the function call.  Thus, you can set
‘w32-lwindow-modifier’ as ‘super’, then call ‘(w32-register-hot-key
[s-r])’, and finally set ‘w32-rwindow-modifier’ as ‘super’ as well.  The
result is that the left Windows key together with ‘R’ invokes whichever
function you have bound for the combination in Emacs, and the right
Windows key and ‘R’ opens the Windows ‘Run’ dialog.

   The hotkey registrations always also include all the shift and
control modifier combinations for the given hotkey; that is, registering
‘s-a’ as a hotkey gives you ‘S-s-a’, ‘C-s-a’ and ‘C-S-s-a’ as well.

   On Windows 98 and ME, the hotkey registration is more restricted.
The desired hotkey must always be fully specified, and
‘w32-phantom-key-code’ can be customized to achieve desired results.

   The function ‘w32-unregister-hot-key’ reverses the effect of
‘w32-register-hot-key’ for its argument key sequence.

   By default, the <CapsLock> key only affects normal character keys (it
converts lower-case characters to their upper-case variants).  However,
if you set the variable ‘w32-capslock-is-shiftlock’ to a non-‘nil’
value, the <CapsLock> key will affect non-character keys as well, as if
you pressed the <SHIFT> key while typing the non-character key.

   If the variable ‘w32-enable-caps-lock’ is set to a ‘nil’ value, the
<CapsLock> key produces the symbol ‘capslock’ instead of the shifted
version of typed keys.  The default value is ‘t’.

   Similarly, if ‘w32-enable-num-lock’ is ‘nil’, the <NumLock> key will
produce the symbol ‘kp-numlock’.  The default is ‘t’, which causes
<NumLock> to work as expected: toggle the meaning of the keys on the
numeric keypad.

   The variable ‘w32-apps-modifier’ controls the effect of the <Apps>
key (usually located between the right <Alt> and the right <Ctrl> keys).
Its value can be one of the symbols ‘hyper’, ‘super’, ‘meta’, ‘alt’,
‘control’, or ‘shift’ for the respective modifier, or ‘nil’ to appear as
the key ‘apps’.  The default is ‘nil’.

   The variable ‘w32-lwindow-modifier’ determines the effect of the left
Windows key (usually labeled with <start> and the Windows logo).  If its
value is ‘nil’ (the default), the key will produce the symbol ‘lwindow’.
Setting it to one of the symbols ‘hyper’, ‘super’, ‘meta’, ‘alt’,
‘control’, or ‘shift’ will produce the respective modifier.  A similar
variable ‘w32-rwindow-modifier’ controls the effect of the right Windows
key, and ‘w32-scroll-lock-modifier’ does the same for the <ScrLock> key.
If these variables are set to ‘nil’, the right Windows key produces the
symbol ‘rwindow’ and <ScrLock> produces the symbol ‘scroll’.  If you
want <ScrLock> to produce the same effect as in other applications, i.e.
toggle the Scroll Lock LED indication on the keyboard, set
‘w32-scroll-lock-modifier’ to ‘t’ or any non-‘nil’ value other than the
above modifier symbols.

   Emacs compiled as a native Windows application normally turns off the
Windows feature that tapping the <Alt> key invokes the Windows menu.
The reason is that the <Alt> serves as <Meta> in Emacs.  When using
Emacs, users often press the <Meta> key temporarily and then change
their minds; if this has the effect of bringing up the Windows menu, it
alters the meaning of subsequent commands.  Many users find this
frustrating.

   You can re-enable Windows’s default handling of tapping the <Alt> key
by setting ‘w32-pass-alt-to-system’ to a non-‘nil’ value.

   The variables ‘w32-pass-lwindow-to-system’ and
‘w32-pass-rwindow-to-system’ determine whether the respective keys are
passed to Windows or swallowed by Emacs.  If the value is ‘nil’, the
respective key is silently swallowed by Emacs, otherwise it is passed to
Windows.  The default is ‘t’ for both of these variables.  Passing each
of these keys to Windows produces its normal effect: for example,
‘<Lwindow>’ opens the ‘Start’ menu, etc.

   The variable ‘w32-recognize-altgr’ controls whether the <AltGr> key
(if it exists on your keyboard), or its equivalent, the combination of
the right <Alt> and left <Ctrl> keys pressed together, is recognized as
the <AltGr> key.  The default is ‘t’, which means these keys produce
‘AltGr’; setting it to ‘nil’ causes <AltGr> or the equivalent key
combination to be interpreted as the combination of <Ctrl> and <Meta>
modifiers.

   Some versions of MS-Windows, typically East Asian localized Windows,
enable the Input Method Manager (IMM) that allows applications to
communicate with the Input Method Editor (IME), the native Windows input
method service.  Emacs uses the IME when available to allow users to
input East Asian non-ASCII characters, similarly to Emacs’s built-in
input methods (*note Input Methods::).  However, in some situations the
IME can get in the way if it interprets simple ASCII keys you input as
part of a key sequence that designates a non-ASCII character.  The IME
can be temporarily turned off and then on again by using the
‘w32-set-ime-open-status’ function.

   ---------- Footnotes ----------

   (1) There is one known exception: The combination ‘<Windows>-L’ that
locks the workstation is handled by the system on a lower level.  For
this reason, ‘w32-register-hot-key’ cannot override this key combination
- it always locks the computer.


File: emacs.info,  Node: Windows Mouse,  Next: Windows Processes,  Prev: Windows Keyboard,  Up: Microsoft Windows

H.7 Mouse Usage on MS-Windows
=============================

This section describes the Windows-specific variables related to the
mouse.

   The variable ‘w32-mouse-button-tolerance’ specifies the time
interval, in milliseconds, for faking middle mouse button press on
2-button mice.  If both mouse buttons are depressed within this time
interval, Emacs generates a middle mouse button click event instead of a
double click on one of the buttons.

   If the variable ‘w32-pass-extra-mouse-buttons-to-system’ is
non-‘nil’, Emacs passes the fourth and fifth mouse buttons to Windows.

   The variable ‘w32-swap-mouse-buttons’ controls which of the 3 mouse
buttons generates the ‘mouse-2’ events.  When it is ‘nil’ (the default),
the middle button generates ‘mouse-2’ and the right button generates
‘mouse-3’ events.  If this variable is non-‘nil’, the roles of these two
buttons are reversed.


File: emacs.info,  Node: Windows Processes,  Next: Windows Printing,  Prev: Windows Mouse,  Up: Microsoft Windows

H.8 Subprocesses on Windows 9X/ME and Windows NT/2K/XP/Vista/7/8/10
===================================================================

Emacs compiled as a native Windows application (as opposed to the DOS
version) includes full support for asynchronous subprocesses.  In the
Windows version, synchronous and asynchronous subprocesses work fine on
all versions of MS-Windows, as long as you run only 32-bit or 64-bit
Windows applications.  However, when you run a DOS application in a
subprocess, you may encounter problems or be unable to run the
application at all; and if you run two DOS applications at the same time
in two subprocesses, you may have to reboot your system.

   Since the standard command interpreter (and most command line
utilities) on Windows 9X are DOS applications, these problems are
significant when using that system.  But there’s nothing we can do about
them; only Microsoft can fix them.

   If you run just one DOS application subprocess, the subprocess should
work as expected as long as it is “well-behaved” and does not perform
direct screen access or other unusual actions.  If you have a CPU
monitor application, your machine will appear to be 100% busy even when
the DOS application is idle, but this is only an artifact of the way CPU
monitors measure processor load.

   You must terminate the DOS application before you start any other DOS
application in a different subprocess.  Emacs is unable to interrupt or
terminate a DOS subprocess.  The only way you can terminate such a
subprocess is by giving it a command that tells its program to exit.

   If you attempt to run two DOS applications at the same time in
separate subprocesses, the second one that is started will be suspended
until the first one finishes, even if either or both of them are
asynchronous.

   If you can go to the first subprocess, and tell it to exit, the
second subprocess should continue normally.  However, if the second
subprocess is synchronous, Emacs itself will be hung until the first
subprocess finishes.  If it will not finish without user input, then you
have no choice but to reboot if you are running on Windows 9X.  If you
are running on Windows NT and later, you can use a process viewer
application to kill the appropriate instance of NTVDM instead (this will
terminate both DOS subprocesses).

   If you have to reboot Windows 9X in this situation, do not use the
‘Shutdown’ command on the ‘Start’ menu; that usually hangs the system.
Instead, type ‘<Ctrl>-<Alt>-<DEL>’ and then choose ‘Shutdown’.  That
usually works, although it may take a few minutes to do its job.

   The variable ‘w32-quote-process-args’ controls how Emacs quotes the
process arguments.  Non-‘nil’ means quote with the ‘"’ character.  If
the value is a character, Emacs uses that character to escape any quote
characters that appear; otherwise it chooses a suitable escape character
based on the type of the program.

   The variable ‘w32-pipe-buffer-size’ controls the size of the buffer
Emacs requests from the system when it creates pipes for communications
with subprocesses.  The default value is zero, which lets the OS choose
the size.  Any valid positive value will request a buffer of that size
in bytes.  This can be used to tailor communications with subprocesses
to programs that exhibit unusual behavior with respect to buffering pipe
I/O.

   If you need to invoke MS-DOS programs as Emacs subprocesses, you may
see low rate of reading data from such programs.  Setting the variable
‘w32-pipe-read-delay’ to a non-zero value may improve throughput in
these cases; we suggest the value of 50 for such situations.  The
default is zero.

   The function ‘w32-shell-execute’ can be useful for writing customized
commands that run MS-Windows applications registered to handle a certain
standard Windows operation for a specific type of document or file.
This function is a wrapper around the Windows ‘ShellExecute’ API.  See
the MS-Windows API documentation for more details.


File: emacs.info,  Node: Windows Printing,  Next: Windows Fonts,  Prev: Windows Processes,  Up: Microsoft Windows

H.9 Printing and MS-Windows
===========================

Printing commands, such as ‘lpr-buffer’ (*note Printing::) and
‘ps-print-buffer’ (*note PostScript::) work in MS-DOS and MS-Windows by
sending the output to one of the printer ports, if a POSIX-style ‘lpr’
program is unavailable.  The same Emacs variables control printing on
all systems, but in some cases they have different default values on
MS-DOS and MS-Windows.

   Emacs on MS Windows attempts to determine your default printer
automatically (using the function ‘default-printer-name’).  But in some
rare cases this can fail, or you may wish to use a different printer
from within Emacs.  The rest of this section explains how to tell Emacs
which printer to use.

   If you want to use your local printer, then set the Lisp variable
‘lpr-command’ to ‘""’ (its default value on Windows) and ‘printer-name’
to the name of the printer port—for example, ‘"PRN"’, the usual local
printer port, or ‘"LPT2"’, or ‘"COM1"’ for a serial printer.  You can
also set ‘printer-name’ to a file name, in which case “printed” output
is actually appended to that file.  If you set ‘printer-name’ to
‘"NUL"’, printed output is silently discarded (sent to the system null
device).

   You can also use a printer shared by another machine by setting
‘printer-name’ to the UNC share name for that printer—for example,
‘"//joes_pc/hp4si"’.  (It doesn’t matter whether you use forward slashes
or backslashes here.)  To find out the names of shared printers, run the
command ‘net view’ from the command prompt to obtain a list of servers,
and ‘net view SERVER-NAME’ to see the names of printers (and
directories) shared by that server.  Alternatively, click the ‘Network
Neighborhood’ icon on your desktop, and look for machines that share
their printers via the network.

   If the printer doesn’t appear in the output of ‘net view’, or if
setting ‘printer-name’ to the UNC share name doesn’t produce a hardcopy
on that printer, you can use the ‘net use’ command to connect a local
print port such as ‘"LPT2"’ to the networked printer.  For example,
typing ‘net use LPT2: \\joes_pc\hp4si’(1) causes Windows to “capture”
the ‘LPT2’ port and redirect the printed material to the printer
connected to the machine ‘joes_pc’.  After this command, setting
‘printer-name’ to ‘"LPT2"’ should produce the hardcopy on the networked
printer.

   With some varieties of Windows network software, you can instruct
Windows to capture a specific printer port such as ‘"LPT2"’, and
redirect it to a networked printer via the ‘Control Panel->Printers’
applet instead of ‘net use’.

   If you set ‘printer-name’ to a file name, it’s best to use an
absolute file name.  Emacs changes the working directory according to
the default directory of the current buffer, so if the file name in
‘printer-name’ is relative, you will end up with several such files,
each one in the directory of the buffer from which the printing was
done.

   If the value of ‘printer-name’ is correct, but printing does not
produce the hardcopy on your printer, it is possible that your printer
does not support printing plain text (some cheap printers omit this
functionality).  In that case, try the PostScript print commands,
described below.

   The commands ‘print-buffer’ and ‘print-region’ call the ‘pr’ program,
or use special switches to the ‘lpr’ program, to produce headers on each
printed page.  MS-DOS and MS-Windows don’t normally have these programs,
so by default, the variable ‘lpr-headers-switches’ is set so that the
requests to print page headers are silently ignored.  Thus,
‘print-buffer’ and ‘print-region’ produce the same output as
‘lpr-buffer’ and ‘lpr-region’, respectively.  If you do have a suitable
‘pr’ program (for example, from GNU Coreutils), set
‘lpr-headers-switches’ to ‘nil’; Emacs will then call ‘pr’ to produce
the page headers, and print the resulting output as specified by
‘printer-name’.

   Finally, if you do have an ‘lpr’ work-alike, you can set the variable
‘lpr-command’ to ‘"lpr"’.  Then Emacs will use ‘lpr’ for printing, as on
other systems.  (If the name of the program isn’t ‘lpr’, set
‘lpr-command’ to the appropriate value.)  The variable ‘lpr-switches’
has its standard meaning when ‘lpr-command’ is not ‘""’.  If the
variable ‘printer-name’ has a string value, it is used as the value for
the ‘-P’ option to ‘lpr’, as on Unix.

   A parallel set of variables, ‘ps-lpr-command’, ‘ps-lpr-switches’, and
‘ps-printer-name’ (*note PostScript Variables::), defines how PostScript
files should be printed.  These variables are used in the same way as
the corresponding variables described above for non-PostScript printing.
Thus, the value of ‘ps-printer-name’ is used as the name of the device
(or file) to which PostScript output is sent, just as ‘printer-name’ is
used for non-PostScript printing.  (There are two distinct sets of
variables in case you have two printers attached to two different ports,
and only one of them is a PostScript printer.)

   The default value of the variable ‘ps-lpr-command’ is ‘""’, which
causes PostScript output to be sent to the printer port specified by
‘ps-printer-name’; but ‘ps-lpr-command’ can also be set to the name of a
program which will accept PostScript files.  Thus, if you have a
non-PostScript printer, you can set this variable to the name of a
PostScript interpreter program (such as Ghostscript).  Any switches that
need to be passed to the interpreter program are specified using
‘ps-lpr-switches’.  (If the value of ‘ps-printer-name’ is a string, it
will be added to the list of switches as the value for the ‘-P’ option.
This is probably only useful if you are using ‘lpr’, so when using an
interpreter typically you would set ‘ps-printer-name’ to something other
than a string so it is ignored.)

   For example, to use Ghostscript for printing on the system’s default
printer, put this in your ‘.emacs’ file:

     (setq ps-printer-name t)
     (setq ps-lpr-command "D:/gs6.01/bin/gswin32c.exe")
     (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH"
                             "-sDEVICE=mswinpr2"
                             "-sPAPERSIZE=a4"))

(This assumes that Ghostscript is installed in the ‘D:/gs6.01’
directory.)

   ---------- Footnotes ----------

   (1) Note that the ‘net use’ command requires the UNC share name to be
typed with the Windows-style backslashes, while the value of
‘printer-name’ can be set with either forward- or backslashes.


File: emacs.info,  Node: Windows Fonts,  Next: Windows Misc,  Prev: Windows Printing,  Up: Microsoft Windows

H.10 Specifying Fonts on MS-Windows
===================================

Fonts are specified by their name, size and optional properties.  The
format for specifying fonts comes from the fontconfig library used in
modern Free desktops:

       [Family[-PointSize]][:Option1=Value1[:Option2=Value2[...]]]

   The old XLFD based format is also supported for backwards
compatibility.

   Emacs on MS-Windows supports a number of font backends.  Currently,
the ‘gdi’, ‘uniscribe’, and ‘harfbuzz’ backends are available.  The
‘gdi’ font backend is available on all versions of Windows, and supports
all fonts that are natively supported by Windows.  The ‘uniscribe’ font
backend is available on Windows 2000 and later, and supports TrueType
and OpenType fonts.  The ‘harfbuzz’ font backend is available if Emacs
was built with HarfBuzz support, and if the HarfBuzz DLL is installed on
your system; like ‘uniscribe’, this backend supports only TrueType and
OpenType fonts.  Some languages requiring complex layout can only be
properly supported by the Uniscribe or HarfBuzz backends.  By default,
two backends are enabled for each frame: ‘gdi’ and either ‘harfbuzz’ or
‘uniscribe’, depending on which one is available (if both are available,
only ‘harfbuzz’ is enabled by default).  The ‘harfbuzz’ and ‘uniscribe’
backends take priority over ‘gdi’ when Emacs looks for a suitable font.
To override that and use the GDI backend even if Uniscribe is available,
invoke Emacs with the ‘-xrm Emacs.fontBackend:gdi’ command-line
argument, or add a ‘Emacs.fontBackend’ resource with the value ‘gdi’ in
the Registry under either the ‘HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs’ or
the ‘HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs’ key (*note Resources::).
Similarly, to use the Uniscribe backend even if HarfBuzz is available,
use ‘-xrm Emacs.fontBackend:uniscribe’ on the command line that invokes
Emacs.  You can also request all the 3 backends via the ‘font-backend’
frame parameter, but be warned that in that case font searches for
characters for which no fonts are available on the system will take
longer.

   Alternatively, you could specify a font backend for a frame via the
‘font-backend’ frame parameter, using ‘modify-frame-parameters’ (*note
(elisp)Parameter Access::).  You can also request specific font
backend(s) for all your frames via ‘default-frame-alist’ and
‘initial-frame-alist’ (*note Frame Parameters::).  Note that the value
of the ‘font-backend’ parameter should be a list of symbols, as in
‘(uniscribe)’ or ‘(harfbuzz uniscribe gdi)’.

Optional font properties supported on MS-Windows are:

‘weight’
     Specifies the weight of the font.  Special values ‘light’,
     ‘medium’, ‘demibold’, ‘bold’, and ‘black’ can be specified without
     ‘weight=’ (e.g., ‘Courier New-12:bold’).  Otherwise, the weight
     should be a numeric value between 100 and 900, or one of the named
     weights in ‘font-weight-table’.  If unspecified, a regular font is
     assumed.

‘slant’
     Specifies whether the font is italic.  Special values ‘roman’,
     ‘italic’ and ‘oblique’ can be specified without ‘slant=’ (e.g.,
     ‘Courier New-12:italic’).  Otherwise, the slant should be a numeric
     value, or one of the named slants in ‘font-slant-table’.  On
     Windows, any slant above 150 is treated as italics, and anything
     below as roman.

‘family’
     Specifies the font family, but normally this will be specified at
     the start of the font name.

‘pixelsize’
     Specifies the font size in pixels.  This can be used instead of the
     point size specified after the family name.

‘adstyle’
     Specifies additional style information for the font.  On
     MS-Windows, the values ‘mono’, ‘sans’, ‘serif’, ‘script’ and
     ‘decorative’ are recognized.  These are most useful as a fallback
     with the font family left unspecified.

‘registry’
     Specifies the character set registry that the font is expected to
     cover.  Most TrueType and OpenType fonts will be Unicode fonts that
     cover several national character sets, but you can narrow down the
     selection of fonts to those that support a particular character set
     by using a specific registry from ‘w32-charset-info-alist’ here.

‘spacing’
     Specifies how the font is spaced.  The ‘p’ spacing specifies a
     proportional font, and ‘m’ or ‘c’ specify a monospaced font.

‘foundry’
     Not used on Windows, but for informational purposes and to prevent
     problems with code that expects it to be set, is set internally to
     ‘raster’ for bitmapped fonts, ‘outline’ for scalable fonts, or
     ‘unknown’ if the type cannot be determined as one of those.

‘script’
     Specifies a Unicode subrange the font should support.

     All the scripts known to Emacs (which generally means all the
     scripts defined by the latest Unicode Standard) are recognized on
     MS-Windows.  However, ‘GDI’ fonts support only a subset of the
     known scripts: ‘greek’, ‘hangul’, ‘kana’, ‘kanbun’, ‘bopomofo’,
     ‘tibetan’, ‘yi’, ‘mongolian’, ‘hebrew’, ‘arabic’, and ‘thai’.

‘antialias’
     Specifies the antialiasing method.  The value ‘none’ means no
     antialiasing, ‘standard’ means use standard antialiasing,
     ‘subpixel’ means use subpixel antialiasing (known as “Cleartype” on
     Windows), and ‘natural’ means use subpixel antialiasing with
     adjusted spacing between letters.  If unspecified, the font will
     use the system default antialiasing.

   The method used by Emacs on MS-Windows to look for fonts suitable for
displaying a given non-ASCII character might fail for some rare scripts,
specifically those added by Unicode relatively recently, even if you
have fonts installed on your system that support those scripts.  That is
because these scripts have no Unicode Subrange Bits (USBs) defined for
them in the information used by Emacs on MS-Windows to look for fonts.
You can use the ‘w32-find-non-USB-fonts’ function to overcome these
problems.  It needs to be run once at the beginning of the Emacs
session, and again if you install new fonts.  You can add the following
line to your init file to have this function run every time you start
Emacs:

     (w32-find-non-USB-fonts)

Alternatively, you can run this function manually via ‘M-:’ (*note Lisp
Eval::) at any time.  On a system that has many fonts installed, running
‘w32-find-non-USB-fonts’ might take a couple of seconds; if you consider
that to be too long to be run during startup, and if you install new
fonts only rarely, run this function once via ‘M-:’, and then assign the
value it returns, if non-‘nil’, to the variable ‘w32-non-USB-fonts’ in
your init file.  (If the function returns ‘nil’, you have no fonts
installed that can display characters from the scripts which need this
facility.)

   The variable ‘w32-use-w32-font-dialog’ controls the way fonts can be
selected via ‘S-mouse-1’ (‘mouse-appearance-menu’).  If the value is
‘t’, the default, Emacs uses the standard Windows font selection dialog.
If the value is ‘nil’, Emacs instead pops a menu of a fixed set of
fonts.  The fonts to appear in the menu are determined by
‘w32-fixed-font-alist’.


File: emacs.info,  Node: Windows Misc,  Next: MS-DOS,  Prev: Windows Fonts,  Up: Microsoft Windows

H.11 Miscellaneous Windows-specific features
============================================

This section describes Windows-specific features that don’t fit anywhere
else.

   The variable ‘w32-use-visible-system-caret’ is a flag that determines
whether to make the system caret visible.  The default when no screen
reader software is in use is ‘nil’, which means Emacs draws its own
cursor to indicate the position of point.  A non-‘nil’ value means Emacs
will indicate point location with the system caret; this facilitates use
of screen reader software, and is the default when such software is
detected when running Emacs.  When this variable is non-‘nil’, other
variables affecting the cursor display have no effect.

   The variable ‘w32-grab-focus-on-raise’, if set to a non-‘nil’ value
causes a frame to grab focus when it is raised.  The default is ‘t’,
which fits well with the Windows default click-to-focus policy.

   On Windows 10 (version 1809 and higher) and Windows 11, Emacs title
bars and scroll bars will follow the system’s Light or Dark mode,
similar to other programs such as Explorer and Command Prompt.  To
change the color mode, select ‘Personalization’ from ‘Windows Settings’,
then ‘Colors->Choose your color’ (or ‘Choose your default app mode’);
then restart Emacs.


File: emacs.info,  Node: MS-DOS,  Prev: Windows Misc,  Up: Microsoft Windows

H.12 Emacs and MS-DOS
=====================

This section briefly describes the peculiarities of using Emacs on
MS-DOS. Information about peculiarities common to MS-DOS and Microsoft’s
current operating systems Windows is in *note Microsoft Windows::.

   If you build Emacs for MS-DOS, the binary will also run on Windows
3.X, Windows NT, Windows 9X/ME, or Windows 2000/XP as a DOS application;
all of this chapter applies for all of those systems, if you use an
Emacs that was built for MS-DOS.

   *Note Text and Binary::, for information about Emacs’s special
handling of text files under MS-DOS (and Windows).

* Menu:

* Keyboard: MS-DOS Keyboard.   Keyboard conventions on MS-DOS.
* Mouse: MS-DOS Mouse.         Mouse conventions on MS-DOS.
* Display: MS-DOS Display.     Fonts, frames and display size on MS-DOS.
* Files: MS-DOS File Names.    File name conventions on MS-DOS.
* Printing: MS-DOS Printing.   Printing specifics on MS-DOS.
* I18N: MS-DOS and MULE.       Support for internationalization on MS-DOS.
* Processes: MS-DOS Processes. Running subprocesses on MS-DOS.


File: emacs.info,  Node: MS-DOS Keyboard,  Next: MS-DOS Mouse,  Up: MS-DOS

H.12.1 Keyboard Usage on MS-DOS
-------------------------------

The key that is called <DEL> in Emacs (because that’s how it is
designated on most workstations) is known as <BS> (backspace) on a PC.
That is why the PC-specific terminal initialization remaps the <BS> key
to act as <DEL>; the <Delete> key is remapped to act as ‘C-d’ for the
same reasons.

   Emacs built for MS-DOS recognizes ‘C-<Break>’ as a quit character,
just like ‘C-g’.  This is because Emacs cannot detect that you have
typed ‘C-g’ until it is ready for more input.  As a consequence, you
cannot use ‘C-g’ to stop a running command (*note Quitting::).  By
contrast, ‘C-<Break>’ _is_ detected as soon as you type it (as ‘C-g’ is
on other systems), so it can be used to stop a running command and for
emergency escape (*note Emergency Escape::).

   The PC keyboard maps use the left <Alt> key as the <Meta> key.  You
have two choices for emulating the <SUPER> and <Hyper> keys: choose
either the right <Ctrl> key or the right <Alt> key by setting the
variables ‘dos-hyper-key’ and ‘dos-super-key’ to 1 or 2 respectively.
If neither ‘dos-super-key’ nor ‘dos-hyper-key’ is 1, then by default the
right <Alt> key is also mapped to the <Meta> key.  However, if the
MS-DOS international keyboard support program ‘KEYB.COM’ is installed,
Emacs will _not_ map the right <Alt> to <Meta>, since it is used for
accessing characters like ‘~’ and ‘@’ on non-US keyboard layouts; in
this case, you may only use the left <Alt> as <Meta> key.

   The variable ‘dos-keypad-mode’ is a flag variable that controls what
key codes are returned by keys in the numeric keypad.  You can also
define the keypad <ENTER> key to act like ‘C-j’, by putting the
following line into your ‘_emacs’ file:

     ;; Make the <ENTER> key from the numeric keypad act as ‘C-j’.
     (keymap-set function-key-map "<kp-enter>" "C-j")


File: emacs.info,  Node: MS-DOS Mouse,  Next: MS-DOS Display,  Prev: MS-DOS Keyboard,  Up: MS-DOS

H.12.2 Mouse Usage on MS-DOS
----------------------------

Emacs on MS-DOS supports a mouse (on the default terminal only).  The
mouse commands work as documented, including those that use menus and
the menu bar (*note Menu Bar::).  Scroll bars don’t work in MS-DOS
Emacs.  PC mice usually have only two buttons; these act as ‘mouse-1’
and ‘mouse-2’, but if you press both of them together, that has the
effect of ‘mouse-3’.  If the mouse does have 3 buttons, Emacs detects
that at startup, and all the 3 buttons function normally, as on X.

   Help strings for menu-bar and pop-up menus are displayed in the echo
area when the mouse pointer moves across the menu items.  Highlighting
of mouse-sensitive text (*note Mouse References::) is also supported.

   Some versions of mouse drivers don’t report the number of mouse
buttons correctly.  For example, mice with a wheel report that they have
3 buttons, but only 2 of them are passed to Emacs; the clicks on the
wheel, which serves as the middle button, are not passed.  In these
cases, you can use the ‘M-x msdos-set-mouse-buttons’ command to tell
Emacs how many mouse buttons to expect.  You could make such a setting
permanent by adding this fragment to your ‘_emacs’ init file:

     ;; Treat the mouse like a 2-button mouse.
     (msdos-set-mouse-buttons 2)

   Emacs built for MS-DOS supports clipboard operations when it runs on
Windows.  Commands that put text on the kill ring, or yank text from the
ring, check the Windows clipboard first, just as Emacs does on the X
Window System (*note Mouse Commands::).  Only the primary selection and
the cut buffer are supported by MS-DOS Emacs on Windows; the secondary
selection always appears as empty.

   Due to the way clipboard access is implemented by Windows, the length
of text you can put into the clipboard is limited by the amount of free
DOS memory that is available to Emacs.  Usually, up to 620KB of text can
be put into the clipboard, but this limit depends on the system
configuration and is lower if you run Emacs as a subprocess of another
program.  If the killed text does not fit, Emacs outputs a message
saying so, and does not put the text into the clipboard.

   Null characters also cannot be put into the Windows clipboard.  If
the killed text includes null characters, Emacs does not put such text
into the clipboard, and displays in the echo area a message to that
effect.

   The variable ‘dos-display-scancodes’, when non-‘nil’, directs Emacs
to display the ASCII value and the keyboard scan code of each keystroke;
this feature serves as a complement to the ‘view-lossage’ command, for
debugging.


File: emacs.info,  Node: MS-DOS Display,  Next: MS-DOS File Names,  Prev: MS-DOS Mouse,  Up: MS-DOS

H.12.3 Display on MS-DOS
------------------------

Display on MS-DOS cannot use font variants, like bold or italic, but it
does support multiple faces, each of which can specify a foreground and
a background color.  Therefore, you can get the full functionality of
Emacs packages that use fonts (such as ‘font-lock’, Enriched Text mode,
and others) by defining the relevant faces to use different colors.  Use
the ‘list-colors-display’ command (*note Colors::) and the
‘list-faces-display’ command (*note Faces::) to see what colors and
faces are available and what they look like.

   *Note MS-DOS and MULE::, later in this chapter, for information on
how Emacs displays glyphs and characters that aren’t supported by the
native font built into the DOS display.

   When Emacs starts, it changes the cursor shape to a solid box.  This
is for compatibility with other systems, where the box cursor is the
default in Emacs.  This default shape can be changed to a bar by
specifying the ‘cursor-type’ parameter in the variable
‘default-frame-alist’ (*note Creating Frames::).  The MS-DOS terminal
doesn’t support a vertical-bar cursor, so the bar cursor is horizontal,
and the ‘WIDTH’ parameter, if specified by the frame parameters,
actually determines its height.  For this reason, the ‘bar’ and ‘hbar’
cursor types produce the same effect on MS-DOS.  As an extension, the
bar cursor specification can include the starting scan line of the
cursor as well as its width, like this:

      '(cursor-type bar WIDTH . START)

In addition, if the WIDTH parameter is negative, the cursor bar begins
at the top of the character cell.

   The MS-DOS terminal can only display a single frame at a time.  The
Emacs frame facilities work on MS-DOS much as they do on text terminals
(*note Frames::).  When you run Emacs from a DOS window on MS-Windows,
you can make the visible frame smaller than the full screen, but Emacs
still cannot display more than a single frame at a time.

   The ‘dos-mode4350’ command switches the display to 43 or 50 lines,
depending on your hardware; the ‘dos-mode25’ command switches to the
default 80x25 screen size.

   By default, Emacs only knows how to set screen sizes of 80 columns by
25, 28, 35, 40, 43 or 50 rows.  However, if your video adapter has
special video modes that will switch the display to other sizes, you can
have Emacs support those too.  When you ask Emacs to switch the frame to
N rows by M columns dimensions, it checks if there is a variable called
‘screen-dimensions-NxM’, and if so, uses its value (which must be an
integer) as the video mode to switch to.  (Emacs switches to that video
mode by calling the BIOS ‘Set Video Mode’ function with the value of
‘screen-dimensions-NxM’ in the ‘AL’ register.)  For example, suppose
your adapter will switch to 66x80 dimensions when put into video mode
85.  Then you can make Emacs support this screen size by putting the
following into your ‘_emacs’ file:

     (setq screen-dimensions-66x80 85)

   Since Emacs on MS-DOS can only set the frame size to specific
supported dimensions, it cannot honor every possible frame resizing
request.  When an unsupported size is requested, Emacs chooses the next
larger supported size beyond the specified size.  For example, if you
ask for 36x80 frame, you will get 40x80 instead.

   The variables ‘screen-dimensions-NxM’ are used only when they exactly
match the specified size; the search for the next larger supported size
ignores them.  In the above example, even if your VGA supports 38x80
dimensions and you define a variable ‘screen-dimensions-38x80’ with a
suitable value, you will still get 40x80 screen when you ask for a 36x80
frame.  If you want to get the 38x80 size in this case, you can do it by
setting the variable named ‘screen-dimensions-36x80’ with the same video
mode value as ‘screen-dimensions-38x80’.

   Changing frame dimensions on MS-DOS has the effect of changing all
the other frames to the new dimensions.


File: emacs.info,  Node: MS-DOS File Names,  Next: MS-DOS Printing,  Prev: MS-DOS Display,  Up: MS-DOS

H.12.4 File Names on MS-DOS
---------------------------

On MS-DOS, file names are case-insensitive and limited to eight
characters, plus optionally a period and three more characters.  Emacs
knows enough about these limitations to handle file names that were
meant for other operating systems.  For instance, leading dots ‘.’ in
file names are invalid in MS-DOS, so Emacs transparently converts them
to underscores ‘_’; thus your default init file (*note Init File::) is
called ‘_emacs’ on MS-DOS.  Excess characters before or after the period
are generally ignored by MS-DOS itself; thus, if you visit the file
‘LongFileName.EvenLongerExtension’, you will silently get
‘longfile.eve’, but Emacs will still display the long file name on the
mode line.  Other than that, it’s up to you to specify file names which
are valid under MS-DOS; the transparent conversion as described above
only works on file names built into Emacs.

   The above restrictions on the file names on MS-DOS make it almost
impossible to construct the name of a backup file (*note Backup Names::)
without losing some of the original file name characters.  For example,
the name of a backup file for ‘docs.txt’ is ‘docs.tx~’ even if single
backup is used.

   If you run Emacs as a DOS application under Windows 9X, Windows ME,
or Windows 2000/XP, you can turn on support for long file names.  If you
do that, Emacs doesn’t truncate file names or convert them to lower
case; instead, it uses the file names that you specify, verbatim.  To
enable long file name support, set the environment variable ‘LFN’ to ‘y’
before starting Emacs.  Unfortunately, Windows NT doesn’t allow DOS
programs to access long file names, so Emacs built for MS-DOS will only
see their short 8+3 aliases.

   MS-DOS has no notion of home directory, so Emacs on MS-DOS pretends
that the directory where it is installed is the value of the ‘HOME’
environment variable.  That is, if your Emacs binary, ‘emacs.exe’, is in
the directory ‘c:/utils/emacs/bin’, then Emacs acts as if ‘HOME’ were
set to ‘c:/utils/emacs’.  In particular, that is where Emacs looks for
the init file ‘_emacs’.  With this in mind, you can use ‘~’ in file
names as an alias for the home directory, as you would on GNU or Unix.
You can also set ‘HOME’ variable in the environment before starting
Emacs; its value will then override the above default behavior.

   Emacs on MS-DOS handles the name ‘/dev’ specially, because of a
feature in the emulator libraries of DJGPP that pretends I/O devices
have names in that directory.  We recommend that you avoid using an
actual directory named ‘/dev’ on any disk.


File: emacs.info,  Node: MS-DOS Printing,  Next: MS-DOS and MULE,  Prev: MS-DOS File Names,  Up: MS-DOS

H.12.5 Printing and MS-DOS
--------------------------

Printing commands, such as ‘lpr-buffer’ (*note Printing::) and
‘ps-print-buffer’ (*note PostScript::) can work on MS-DOS by sending the
output to one of the printer ports, if a POSIX-style ‘lpr’ program is
unavailable.  The same Emacs variables control printing on all systems,
but in some cases they have different default values on MS-DOS.

   *Note Windows Printing::, for details about setting up printing to a
networked printer.

   Some printers expect DOS codepage encoding of non-ASCII text, even
though they are connected to a Windows machine that uses a different
encoding for the same locale.  For example, in the Latin-1 locale, DOS
uses codepage 850 whereas Windows uses codepage 1252.  *Note MS-DOS and
MULE::.  When you print to such printers from Windows, you can use the
‘C-x <RET> c’ (‘universal-coding-system-argument’) command before ‘M-x
lpr-buffer’; Emacs will then convert the text to the DOS codepage that
you specify.  For example, ‘C-x <RET> c cp850-dos <RET> M-x lpr-region
<RET>’ will print the region while converting it to the codepage 850
encoding.

   For backwards compatibility, the value of ‘dos-printer’
(‘dos-ps-printer’), if it has a value, overrides the value of
‘printer-name’ (‘ps-printer-name’), on MS-DOS.


File: emacs.info,  Node: MS-DOS and MULE,  Next: MS-DOS Processes,  Prev: MS-DOS Printing,  Up: MS-DOS

H.12.6 International Support on MS-DOS
--------------------------------------

Emacs on MS-DOS supports the same international character sets as it
does on GNU, Unix and other platforms (*note International::), including
coding systems for converting between the different character sets.
However, due to incompatibilities between MS-DOS/MS-Windows and other
systems, there are several DOS-specific aspects of this support that you
should be aware of.  This section describes these aspects.

   The description below is largely specific to the MS-DOS port of
Emacs, especially where it talks about practical implications for Emacs
users.

‘M-x dos-codepage-setup’
     Set up Emacs display and coding systems as appropriate for the
     current DOS codepage.

   MS-DOS is designed to support one character set of 256 characters at
any given time, but gives you a variety of character sets to choose
from.  The alternative character sets are known as “DOS codepages”.
Each codepage includes all 128 ASCII characters, but the other 128
characters (codes 128 through 255) vary from one codepage to another.
Each DOS codepage is identified by a 3-digit number, such as 850, 862,
etc.

   In contrast to X, which lets you use several fonts at the same time,
MS-DOS normally doesn’t allow use of several codepages in a single
session.  MS-DOS was designed to load a single codepage at system
startup, and require you to reboot in order to change it(1).  Much the
same limitation applies when you run DOS executables on other systems
such as MS-Windows.

   For multibyte operation on MS-DOS, Emacs needs to know which
characters the chosen DOS codepage can display.  So it queries the
system shortly after startup to get the chosen codepage number, and
stores the number in the variable ‘dos-codepage’.  Some systems return
the default value 437 for the current codepage, even though the actual
codepage is different.  (This typically happens when you use the
codepage built into the display hardware.)  You can specify a different
codepage for Emacs to use by setting the variable ‘dos-codepage’ in your
init file.

   Multibyte Emacs supports only certain DOS codepages: those which can
display Far-Eastern scripts, like the Japanese codepage 932, and those
that encode a single ISO 8859 character set.

   The Far-Eastern codepages can directly display one of the MULE
character sets for these countries, so Emacs simply sets up to use the
appropriate terminal coding system that is supported by the codepage.
The special features described in the rest of this section mostly
pertain to codepages that encode ISO 8859 character sets.

   For the codepages that correspond to one of the ISO character sets,
Emacs knows the character set based on the codepage number.  Emacs
automatically creates a coding system to support reading and writing
files that use the current codepage, and uses this coding system by
default.  The name of this coding system is ‘cpNNN’, where NNN is the
codepage number.(2)

   All the ‘cpNNN’ coding systems use the letter ‘D’ (for “DOS”) as
their mode-line mnemonic.  Since both the terminal coding system and the
default coding system for file I/O are set to the proper ‘cpNNN’ coding
system at startup, it is normal for the mode line on MS-DOS to begin
with ‘-DD\-’.  *Note Mode Line::.  Far-Eastern DOS terminals do not use
the ‘cpNNN’ coding systems, and thus their initial mode line looks like
the Emacs default.

   Since the codepage number also indicates which script you are using,
Emacs automatically runs ‘set-language-environment’ to select the
language environment for that script (*note Language Environments::).

   If a buffer contains a character belonging to some other ISO 8859
character set, not the one that the chosen DOS codepage supports, Emacs
displays it using a sequence of ASCII characters.  For example, if the
current codepage doesn’t have a glyph for the letter ‘ò’ (small ‘o’ with
a grave accent), it is displayed as ‘{`o}’, where the braces serve as a
visual indication that this is a single character.  (This may look
awkward for some non-Latin characters, such as those from Greek or
Hebrew alphabets, but it is still readable by a person who knows the
language.)  Even though the character may occupy several columns on the
screen, it is really still just a single character, and all Emacs
commands treat it as one.

   MS-Windows provides its own codepages, which are different from the
DOS codepages for the same locale.  For example, DOS codepage 850
supports the same character set as Windows codepage 1252; DOS codepage
855 supports the same character set as Windows codepage 1251, etc.  The
MS-Windows version of Emacs uses the current codepage for display when
invoked with the ‘-nw’ option.

   ---------- Footnotes ----------

   (1) Normally, one particular codepage is burnt into the display
memory, while other codepages can be installed by modifying system
configuration files, such as ‘CONFIG.SYS’, and rebooting.  While there
is third-party software that allows changing the codepage without
rebooting, we describe here how a stock MS-DOS system behaves.

   (2) The standard Emacs coding systems for ISO 8859 are not quite
right for the purpose, because typically the DOS codepage does not match
the standard ISO character codes.  For example, the letter ‘ç’ (‘c’ with
cedilla) has code 231 in the standard Latin-1 character set, but the
corresponding DOS codepage 850 uses code 135 for this glyph.


File: emacs.info,  Node: MS-DOS Processes,  Prev: MS-DOS and MULE,  Up: MS-DOS

H.12.7 Subprocesses on MS-DOS
-----------------------------

Because MS-DOS is a single-process “operating system”, asynchronous
subprocesses are not available.  In particular, Shell mode and its
variants do not work.  Most Emacs features that use asynchronous
subprocesses also don’t work on MS-DOS, including Shell mode and GUD.
When in doubt, try and see; commands that don’t work output an error
message saying that asynchronous processes aren’t supported.

   Compilation under Emacs with ‘M-x compile’, searching files with ‘M-x
grep’ and displaying differences between files with ‘M-x diff’ do work,
by running the inferior processes synchronously.  This means you cannot
do any more editing until the inferior process finishes.

   Spell checking also works, by means of special support for
synchronous invocation of the ‘ispell’ program.  This is slower than the
asynchronous invocation on other platforms.

   Instead of the Shell mode, which doesn’t work on MS-DOS, you can use
the ‘M-x eshell’ command.  This invokes the Eshell package that
implements a POSIX-like shell entirely in Emacs Lisp.

   By contrast, Emacs compiled as a native Windows application *does*
support asynchronous subprocesses.  *Note Windows Processes::.

   Printing commands, such as ‘lpr-buffer’ (*note Printing::) and
‘ps-print-buffer’ (*note PostScript::), work in MS-DOS by sending the
output to one of the printer ports.  *Note MS-DOS Printing::.

   When you run a subprocess synchronously on MS-DOS, make sure the
program terminates and does not try to read keyboard input.  If the
program does not terminate on its own, you will be unable to terminate
it, because MS-DOS provides no general way to terminate a process.
Pressing ‘C-c’ or ‘C-<Break>’ might sometimes help in these cases.

   Accessing files on other machines is not supported on MS-DOS.  Other
network-oriented commands such as sending mail, Web browsing, remote
login, etc., don’t work either, unless network access is built into
MS-DOS with some network redirector.

   Dired on MS-DOS uses the ‘ls-lisp’ package (*note ls in Lisp::).
Therefore, Dired on MS-DOS supports only some of the possible options
you can mention in the ‘dired-listing-switches’ variable.  The options
that work are ‘-A’, ‘-a’, ‘-c’, ‘-i’, ‘-r’, ‘-S’, ‘-s’, ‘-t’, and ‘-u’.


File: emacs.info,  Node: Manifesto,  Next: Glossary,  Prev: Microsoft Windows,  Up: Top

# /. The GNU Manifesto
*********************

     The GNU Manifesto which appears below was written by Richard
     Stallman at the beginning of the GNU project, to ask for
     participation and support.  For the first few years, it was updated
     in minor ways to account for developments, but now it seems best to
     leave it unchanged as most people have seen it.

     Since that time, we have learned about certain common
     misunderstandings that different wording could help avoid.
     Footnotes added in 1993 help clarify these points.

     For up-to-date information about available GNU software, please see
     our web site, <https://www.gnu.org>.  For software tasks and other
     ways to contribute, see <https://www.gnu.org/help>.

What’s GNU? Gnu’s Not Unix!
===========================

GNU, which stands for Gnu’s Not Unix, is the name for the complete
Unix-compatible software system which I am writing so that I can give it
away free to everyone who can use it.(1)  Several other volunteers are
helping me.  Contributions of time, money, programs and equipment are
greatly needed.

   So far we have an Emacs text editor with Lisp for writing editor
commands, a source level debugger, a yacc-compatible parser generator, a
linker, and around 35 utilities.  A shell (command interpreter) is
nearly completed.  A new portable optimizing C compiler has compiled
itself and may be released this year.  An initial kernel exists but many
more features are needed to emulate Unix.  When the kernel and compiler
are finished, it will be possible to distribute a GNU system suitable
for program development.  We will use TeX as our text formatter, but an
nroff is being worked on.  We will use the free, portable X window
system as well.  After this we will add a portable Common Lisp, an
Empire game, a spreadsheet, and hundreds of other things, plus on-line
documentation.  We hope to supply, eventually, everything useful that
normally comes with a Unix system, and more.

   GNU will be able to run Unix programs, but will not be identical to
Unix.  We will make all improvements that are convenient, based on our
experience with other operating systems.  In particular, we plan to have
longer file names, file version numbers, a crashproof file system, file
name completion perhaps, terminal-independent display support, and
perhaps eventually a Lisp-based window system through which several Lisp
programs and ordinary Unix programs can share a screen.  Both C and Lisp
will be available as system programming languages.  We will try to
support UUCP, MIT Chaosnet, and Internet protocols for communication.

   GNU is aimed initially at machines in the 68000/16000 class with
virtual memory, because they are the easiest machines to make it run on.
The extra effort to make it run on smaller machines will be left to
someone who wants to use it on them.

   To avoid horrible confusion, please pronounce the “G” in the word
“GNU” when it is the name of this project.

Why I Must Write GNU
====================

I consider that the golden rule requires that if I like a program I must
share it with other people who like it.  Software sellers want to divide
the users and conquer them, making each user agree not to share with
others.  I refuse to break solidarity with other users in this way.  I
cannot in good conscience sign a nondisclosure agreement or a software
license agreement.  For years I worked within the Artificial
Intelligence Lab to resist such tendencies and other inhospitalities,
but eventually they had gone too far: I could not remain in an
institution where such things are done for me against my will.

   So that I can continue to use computers without dishonor, I have
decided to put together a sufficient body of free software so that I
will be able to get along without any software that is not free.  I have
resigned from the AI lab to deny MIT any legal excuse to prevent me from
giving GNU away.

Why GNU Will Be Compatible with Unix
====================================

Unix is not my ideal system, but it is not too bad.  The essential
features of Unix seem to be good ones, and I think I can fill in what
Unix lacks without spoiling them.  And a system compatible with Unix
would be convenient for many other people to adopt.

How GNU Will Be Available
=========================

GNU is not in the public domain.  Everyone will be permitted to modify
and redistribute GNU, but no distributor will be allowed to restrict its
further redistribution.  That is to say, proprietary modifications will
not be allowed.  I want to make sure that all versions of GNU remain
free.

Why Many Other Programmers Want to Help
=======================================

I have found many other programmers who are excited about GNU and want
to help.

   Many programmers are unhappy about the commercialization of system
software.  It may enable them to make more money, but it requires them
to feel in conflict with other programmers in general rather than feel
as comrades.  The fundamental act of friendship among programmers is the
sharing of programs; marketing arrangements now typically used
essentially forbid programmers to treat others as friends.  The
purchaser of software must choose between friendship and obeying the
law.  Naturally, many decide that friendship is more important.  But
those who believe in law often do not feel at ease with either choice.
They become cynical and think that programming is just a way of making
money.

   By working on and using GNU rather than proprietary programs, we can
be hospitable to everyone and obey the law.  In addition, GNU serves as
an example to inspire and a banner to rally others to join us in
sharing.  This can give us a feeling of harmony which is impossible if
we use software that is not free.  For about half the programmers I talk
to, this is an important happiness that money cannot replace.

How You Can Contribute
======================

I am asking computer manufacturers for donations of machines and money.
I’m asking individuals for donations of programs and work.

   One consequence you can expect if you donate machines is that GNU
will run on them at an early date.  The machines should be complete,
ready to use systems, approved for use in a residential area, and not in
need of sophisticated cooling or power.

   I have found very many programmers eager to contribute part-time work
for GNU.  For most projects, such part-time distributed work would be
very hard to coordinate; the independently-written parts would not work
together.  But for the particular task of replacing Unix, this problem
is absent.  A complete Unix system contains hundreds of utility
programs, each of which is documented separately.  Most interface
specifications are fixed by Unix compatibility.  If each contributor can
write a compatible replacement for a single Unix utility, and make it
work properly in place of the original on a Unix system, then these
utilities will work right when put together.  Even allowing for Murphy
to create a few unexpected problems, assembling these components will be
a feasible task.  (The kernel will require closer communication and will
be worked on by a small, tight group.)

   If I get donations of money, I may be able to hire a few people full
or part time.  The salary won’t be high by programmers’ standards, but
I’m looking for people for whom building community spirit is as
important as making money.  I view this as a way of enabling dedicated
people to devote their full energies to working on GNU by sparing them
the need to make a living in another way.

Why All Computer Users Will Benefit
===================================

Once GNU is written, everyone will be able to obtain good system
software free, just like air.(2)

   This means much more than just saving everyone the price of a Unix
license.  It means that much wasteful duplication of system programming
effort will be avoided.  This effort can go instead into advancing the
state of the art.

   Complete system sources will be available to everyone.  As a result,
a user who needs changes in the system will always be free to make them
himself, or hire any available programmer or company to make them for
him.  Users will no longer be at the mercy of one programmer or company
which owns the sources and is in sole position to make changes.

   Schools will be able to provide a much more educational environment
by encouraging all students to study and improve the system code.
Harvard’s computer lab used to have the policy that no program could be
installed on the system if its sources were not on public display, and
upheld it by actually refusing to install certain programs.  I was very
much inspired by this.

   Finally, the overhead of considering who owns the system software and
what one is or is not entitled to do with it will be lifted.

   Arrangements to make people pay for using a program, including
licensing of copies, always incur a tremendous cost to society through
the cumbersome mechanisms necessary to figure out how much (that is,
which programs) a person must pay for.  And only a police state can
force everyone to obey them.  Consider a space station where air must be
manufactured at great cost: charging each breather per liter of air may
be fair, but wearing the metered gas mask all day and all night is
intolerable even if everyone can afford to pay the air bill.  And the TV
cameras everywhere to see if you ever take the mask off are outrageous.
It’s better to support the air plant with a head tax and chuck the
masks.

   Copying all or parts of a program is as natural to a programmer as
breathing, and as productive.  It ought to be as free.

Some Easily Rebutted Objections to GNU’s Goals
==============================================

     “Nobody will use it if it is free, because that means they can’t
     rely on any support.”

     “You have to charge for the program to pay for providing the
     support.”

   If people would rather pay for GNU plus service than get GNU free
without service, a company to provide just service to people who have
obtained GNU free ought to be profitable.(3)

   We must distinguish between support in the form of real programming
work and mere handholding.  The former is something one cannot rely on
from a software vendor.  If your problem is not shared by enough people,
the vendor will tell you to get lost.

   If your business needs to be able to rely on support, the only way is
to have all the necessary sources and tools.  Then you can hire any
available person to fix your problem; you are not at the mercy of any
individual.  With Unix, the price of sources puts this out of
consideration for most businesses.  With GNU this will be easy.  It is
still possible for there to be no available competent person, but this
problem cannot be blamed on distribution arrangements.  GNU does not
eliminate all the world’s problems, only some of them.

   Meanwhile, the users who know nothing about computers need
handholding: doing things for them which they could easily do themselves
but don’t know how.

   Such services could be provided by companies that sell just
hand-holding and repair service.  If it is true that users would rather
spend money and get a product with service, they will also be willing to
buy the service having got the product free.  The service companies will
compete in quality and price; users will not be tied to any particular
one.  Meanwhile, those of us who don’t need the service should be able
to use the program without paying for the service.

     “You cannot reach many people without advertising, and you must
     charge for the program to support that.”

     “It’s no use advertising a program people can get free.”

   There are various forms of free or very cheap publicity that can be
used to inform numbers of computer users about something like GNU.  But
it may be true that one can reach more microcomputer users with
advertising.  If this is really so, a business which advertises the
service of copying and mailing GNU for a fee ought to be successful
enough to pay for its advertising and more.  This way, only the users
who benefit from the advertising pay for it.

   On the other hand, if many people get GNU from their friends, and
such companies don’t succeed, this will show that advertising was not
really necessary to spread GNU.  Why is it that free market advocates
don’t want to let the free market decide this?(4)

     “My company needs a proprietary operating system to get a
     competitive edge.”

   GNU will remove operating system software from the realm of
competition.  You will not be able to get an edge in this area, but
neither will your competitors be able to get an edge over you.  You and
they will compete in other areas, while benefiting mutually in this one.
If your business is selling an operating system, you will not like GNU,
but that’s tough on you.  If your business is something else, GNU can
save you from being pushed into the expensive business of selling
operating systems.

   I would like to see GNU development supported by gifts from many
manufacturers and users, reducing the cost to each.(5)

     “Don’t programmers deserve a reward for their creativity?”

   If anything deserves a reward, it is social contribution.  Creativity
can be a social contribution, but only in so far as society is free to
use the results.  If programmers deserve to be rewarded for creating
innovative programs, by the same token they deserve to be punished if
they restrict the use of these programs.

     “Shouldn’t a programmer be able to ask for a reward for his
     creativity?”

   There is nothing wrong with wanting pay for work, or seeking to
maximize one’s income, as long as one does not use means that are
destructive.  But the means customary in the field of software today are
based on destruction.

   Extracting money from users of a program by restricting their use of
it is destructive because the restrictions reduce the amount and the
ways that the program can be used.  This reduces the amount of wealth
that humanity derives from the program.  When there is a deliberate
choice to restrict, the harmful consequences are deliberate destruction.

   The reason a good citizen does not use such destructive means to
become wealthier is that, if everyone did so, we would all become poorer
from the mutual destructiveness.  This is Kantian ethics; or, the Golden
Rule.  Since I do not like the consequences that result if everyone
hoards information, I am required to consider it wrong for one to do so.
Specifically, the desire to be rewarded for one’s creativity does not
justify depriving the world in general of all or part of that
creativity.

     “Won’t programmers starve?”

   I could answer that nobody is forced to be a programmer.  Most of us
cannot manage to get any money for standing on the street and making
faces.  But we are not, as a result, condemned to spend our lives
standing on the street making faces, and starving.  We do something
else.

   But that is the wrong answer because it accepts the questioner’s
implicit assumption: that without ownership of software, programmers
cannot possibly be paid a cent.  Supposedly it is all or nothing.

   The real reason programmers will not starve is that it will still be
possible for them to get paid for programming; just not paid as much as
now.

   Restricting copying is not the only basis for business in software.
It is the most common basis because it brings in the most money.  If it
were prohibited, or rejected by the customer, software business would
move to other bases of organization which are now used less often.
There are always numerous ways to organize any kind of business.

   Probably programming will not be as lucrative on the new basis as it
is now.  But that is not an argument against the change.  It is not
considered an injustice that sales clerks make the salaries that they
now do.  If programmers made the same, that would not be an injustice
either.  (In practice they would still make considerably more than
that.)

     “Don’t people have a right to control how their creativity is
     used?”

   “Control over the use of one’s ideas” really constitutes control over
other people’s lives; and it is usually used to make their lives more
difficult.

   People who have studied the issue of intellectual property rights(6)
carefully (such as lawyers) say that there is no intrinsic right to
intellectual property.  The kinds of supposed intellectual property
rights that the government recognizes were created by specific acts of
legislation for specific purposes.

   For example, the patent system was established to encourage inventors
to disclose the details of their inventions.  Its purpose was to help
society rather than to help inventors.  At the time, the life span of 17
years for a patent was short compared with the rate of advance of the
state of the art.  Since patents are an issue only among manufacturers,
for whom the cost and effort of a license agreement are small compared
with setting up production, the patents often do not do much harm.  They
do not obstruct most individuals who use patented products.

   The idea of copyright did not exist in ancient times, when authors
frequently copied other authors at length in works of non-fiction.  This
practice was useful, and is the only way many authors’ works have
survived even in part.  The copyright system was created expressly for
the purpose of encouraging authorship.  In the domain for which it was
invented—books, which could be copied economically only on a printing
press—it did little harm, and did not obstruct most of the individuals
who read the books.

   All intellectual property rights are just licenses granted by society
because it was thought, rightly or wrongly, that society as a whole
would benefit by granting them.  But in any particular situation, we
have to ask: are we really better off granting such license?  What kind
of act are we licensing a person to do?

   The case of programs today is very different from that of books a
hundred years ago.  The fact that the easiest way to copy a program is
from one neighbor to another, the fact that a program has both source
code and object code which are distinct, and the fact that a program is
used rather than read and enjoyed, combine to create a situation in
which a person who enforces a copyright is harming society as a whole
both materially and spiritually; in which a person should not do so
regardless of whether the law enables him to.

     “Competition makes things get done better.”

   The paradigm of competition is a race: by rewarding the winner, we
encourage everyone to run faster.  When capitalism really works this
way, it does a good job; but its defenders are wrong in assuming it
always works this way.  If the runners forget why the reward is offered
and become intent on winning, no matter how, they may find other
strategies—such as, attacking other runners.  If the runners get into a
fist fight, they will all finish late.

   Proprietary and secret software is the moral equivalent of runners in
a fist fight.  Sad to say, the only referee we’ve got does not seem to
object to fights; he just regulates them (“For every ten yards you run,
you can fire one shot”).  He really ought to break them up, and penalize
runners for even trying to fight.

     “Won’t everyone stop programming without a monetary incentive?”

   Actually, many people will program with absolutely no monetary
incentive.  Programming has an irresistible fascination for some people,
usually the people who are best at it.  There is no shortage of
professional musicians who keep at it even though they have no hope of
making a living that way.

   But really this question, though commonly asked, is not appropriate
to the situation.  Pay for programmers will not disappear, only become
less.  So the right question is, will anyone program with a reduced
monetary incentive?  My experience shows that they will.

   For more than ten years, many of the world’s best programmers worked
at the Artificial Intelligence Lab for far less money than they could
have had anywhere else.  They got many kinds of non-monetary rewards:
fame and appreciation, for example.  And creativity is also fun, a
reward in itself.

   Then most of them left when offered a chance to do the same
interesting work for a lot of money.

   What the facts show is that people will program for reasons other
than riches; but if given a chance to make a lot of money as well, they
will come to expect and demand it.  Low-paying organizations do poorly
in competition with high-paying ones, but they do not have to do badly
if the high-paying ones are banned.

     “We need the programmers desperately.  If they demand that we stop
     helping our neighbors, we have to obey.”

   You’re never so desperate that you have to obey this sort of demand.
Remember: millions for defense, but not a cent for tribute!

     “Programmers need to make a living somehow.”

   In the short run, this is true.  However, there are plenty of ways
that programmers could make a living without selling the right to use a
program.  This way is customary now because it brings programmers and
businessmen the most money, not because it is the only way to make a
living.  It is easy to find other ways if you want to find them.  Here
are a number of examples.

   A manufacturer introducing a new computer will pay for the porting of
operating systems onto the new hardware.

   The sale of teaching, hand-holding and maintenance services could
also employ programmers.

   People with new ideas could distribute programs as freeware(7),
asking for donations from satisfied users, or selling hand-holding
services.  I have met people who are already working this way
successfully.

   Users with related needs can form users’ groups, and pay dues.  A
group would contract with programming companies to write programs that
the group’s members would like to use.

   All sorts of development can be funded with a Software Tax:

     Suppose everyone who buys a computer has to pay x percent of the
     price as a software tax.  The government gives this to an agency
     like the NSF to spend on software development.

     But if the computer buyer makes a donation to software development
     himself, he can take a credit against the tax.  He can donate to
     the project of his own choosing—often, chosen because he hopes to
     use the results when it is done.  He can take a credit for any
     amount of donation up to the total tax he had to pay.

     The total tax rate could be decided by a vote of the payers of the
     tax, weighted according to the amount they will be taxed on.

     The consequences:

        • The computer-using community supports software development.
        • This community decides what level of support is needed.
        • Users who care which projects their share is spent on can
          choose this for themselves.

   In the long run, making programs free is a step toward the
post-scarcity world, where nobody will have to work very hard just to
make a living.  People will be free to devote themselves to activities
that are fun, such as programming, after spending the necessary ten
hours a week on required tasks such as legislation, family counseling,
robot repair and asteroid prospecting.  There will be no need to be able
to make a living from programming.

   We have already greatly reduced the amount of work that the whole
society must do for its actual productivity, but only a little of this
has translated itself into leisure for workers because much
nonproductive activity is required to accompany productive activity.
The main causes of this are bureaucracy and isometric struggles against
competition.  Free software will greatly reduce these drains in the area
of software production.  We must do this, in order for technical gains
in productivity to translate into less work for us.

   ---------- Footnotes ----------

   (1) The wording here was careless.  The intention was that nobody
would have to pay for _permission_ to use the GNU system.  But the words
don’t make this clear, and people often interpret them as saying that
copies of GNU should always be distributed at little or no charge.  That
was never the intent; later on, the manifesto mentions the possibility
of companies providing the service of distribution for a profit.
Subsequently I have learned to distinguish carefully between “free” in
the sense of freedom and “free” in the sense of price.  Free software is
software that users have the freedom to distribute and change.  Some
users may obtain copies at no charge, while others pay to obtain
copies—and if the funds help support improving the software, so much the
better.  The important thing is that everyone who has a copy has the
freedom to cooperate with others in using it.

   (2) This is another place I failed to distinguish carefully between
the two different meanings of “free.” The statement as it stands is not
false—you can get copies of GNU software at no charge, from your friends
or over the net.  But it does suggest the wrong idea.

   (3) Several such companies now exist.

   (4) The Free Software Foundation raises most of its funds from a
distribution service, although it is a charity rather than a company.
If _no one_ chooses to obtain copies by ordering from the FSF, it will
be unable to do its work.  But this does not mean that proprietary
restrictions are justified to force every user to pay.  If a small
fraction of all the users order copies from the FSF, that is sufficient
to keep the FSF afloat.  So we ask users to choose to support us in this
way.  Have you done your part?

   (5) A group of computer companies recently pooled funds to support
maintenance of the GNU C Compiler.

   (6) In the 80s I had not yet realized how confusing it was to speak
of “the issue” of “intellectual property.” That term is obviously
biased; more subtle is the fact that it lumps together various disparate
laws which raise very different issues.  Nowadays I urge people to
reject the term “intellectual property” entirely, lest it lead others to
suppose that those laws form one coherent issue.  The way to be clear is
to discuss patents, copyrights, and trademarks separately.  See
<https://www.gnu.org/philosophy/not-ipr.xhtml> for more explanation of
how this term spreads confusion and bias.

   (7) Subsequently we have discovered the need to distinguish between
“free software” and “freeware”.  The term “freeware” means software you
are free to redistribute, but usually you are not free to study and
change the source code, so most of it is not free software.  See
<https://www.gnu.org/philosophy/words-to-avoid.html> for more
explanation.


File: emacs.info,  Node: Glossary,  Next: Acknowledgments,  Prev: Manifesto,  Up: Top

# /. Glossary
************

Abbrev
     An abbrev is a text string that expands into a different text
     string when present in the buffer.  For example, you might define a
     few letters as an abbrev for a long phrase that you want to insert
     frequently.  *Note Abbrevs::.

Aborting
     Aborting means getting out of a recursive edit (q.v.).  The
     commands ‘C-]’ and ‘M-x top-level’ are used for this.  *Note
     Quitting::.

Active Region
     Setting the mark (q.v.) at a position in the text also activates
     it.  When the mark is active, we call the region an active region.
     *Note Mark::.

<Alt>
     Alt is the name of a modifier bit that a keyboard input character
     may have.  To make a character Alt, type it while holding down the
     <Alt> key.  Such characters are given names that start with
     ‘<Alt>-’ (usually written ‘A-’ for short).  (Note that many
     terminals have a key labeled <Alt> that is really a <Meta> key.)
     *Note Alt: User Input.

Argument
     *Note Glossary---Numeric Argument::.

ASCII character
     An ASCII character is either an ASCII control character or an ASCII
     printing character.  *Note User Input::.

ASCII control character
     An ASCII control character is the Control version of an upper-case
     letter, or the Control version of one of the characters ‘@[\]^_?’.

ASCII printing character
     ASCII letters, digits, space, and the following punctuation
     characters: ‘!@#$%^&*()_-+=|\~`{}[]:;"'<>,.?/’.

Auto Fill Mode
     Auto Fill mode is a minor mode (q.v.) in which text that you insert
     is automatically broken into lines of a given maximum width.  *Note
     Filling::.

Auto Saving
     Auto saving is the practice of periodically saving the contents of
     an Emacs buffer in a specially-named file, so that the information
     will be preserved if the buffer is lost due to a system error or
     user error.  *Note Auto Save::.

Autoloading
     Emacs can automatically load Lisp libraries when a Lisp program
     requests a function from those libraries.  This is called
     “autoloading”.  *Note Lisp Libraries::.

Backtrace
     A backtrace is a trace of a series of function calls showing how a
     program arrived at a certain point.  It is used mainly for finding
     and correcting bugs (q.v.).  Emacs can display a backtrace when it
     signals an error or when you type ‘C-g’ (*note
     Glossary---Quitting::).  *Note Checklist::.

Backup File
     A backup file records the contents that a file had before the
     current editing session.  Emacs makes backup files automatically to
     help you track down or cancel changes you later regret making.
     *Note Backup::.

Balancing Parentheses
     Emacs can balance parentheses (or other matching delimiters) either
     manually or automatically.  You do manual balancing with the
     commands to move over parenthetical groupings (*note Moving by
     Parens::).  Automatic balancing works by blinking or highlighting
     the delimiter that matches the one you just inserted, or inserting
     the matching delimiter for you (*note Matching Parens: Matching.).

Balanced Expressions
     A balanced expression is a syntactically recognizable expression,
     such as a symbol (q.v.), number, string constant, block, or
     parenthesized expression in C.  *Note Balanced Expressions:
     Expressions.

Balloon Help
     *Note Glossary---Tooltips::.

Base Buffer
     A base buffer is a buffer whose text is shared by an indirect
     buffer (q.v.).

Bidirectional Text
     Some human languages, such as English, are written from left to
     right.  Others, such as Arabic, are written from right to left.
     Emacs supports both of these forms, as well as any mixture of
     them—this is “bidirectional text”.  *Note Bidirectional Editing::.

Bind
     To bind a key sequence means to give it a binding (q.v.).  *Note
     Rebinding::.

Binding
     A key sequence gets its meaning in Emacs by having a binding, which
     is a command (q.v.)—a Lisp function that is run when you type that
     sequence.  *Note Binding: Commands.  Customization often involves
     rebinding a character to a different command function.  The
     bindings of all key sequences are recorded in the keymaps (q.v.).
     *Note Keymaps::.

Blank Lines
     Blank lines are lines that contain only whitespace.  Emacs has
     several commands for operating on the blank lines in the buffer.
     *Note Blank Lines::.

Bookmark
     Bookmarks are akin to registers (q.v.) in that they record
     positions in buffers to which you can return later.  Unlike
     registers, bookmarks persist between Emacs sessions.  *Note
     Bookmarks::.

Border
     A border is a thin space along the edge of the frame, used just for
     spacing, not for displaying anything.  An Emacs frame has an
     ordinary external border, outside of everything including the menu
     bar, plus an internal border that surrounds the text windows, their
     scroll bars and fringes, and separates them from the menu bar and
     tool bar.  You can customize both borders with options and
     resources (*note Borders X::).  Borders are not the same as fringes
     (q.v.).

Buffer
     The buffer is the basic editing unit; one buffer corresponds to one
     text being edited.  You normally have several buffers, but at any
     time you are editing only one, the current buffer, though several
     can be visible when you are using multiple windows or frames
     (q.v.).  Most buffers are visiting (q.v.) some file.  *Note
     Buffers::.

Buffer Selection History
     Emacs keeps a buffer selection history that records how recently
     each Emacs buffer has been selected.  This is used for choosing
     which buffer to select.  *Note Buffers::.

Bug
     A bug is an incorrect or unreasonable behavior of a program, or
     inaccurate or confusing documentation.  Emacs developers treat bug
     reports, both in Emacs code and its documentation, very seriously
     and ask you to report any bugs you find.  *Note Bugs::.

Button Down Event
     A button down event is the kind of input event (q.v.) generated
     right away when you press down on a mouse button.  *Note Mouse
     Buttons::.

By Default
     *Note Glossary---Default::.

Byte Compilation
     *Note Glossary---Compilation::.

cf.
c.f.
     Short for “confer” in Latin, which means “compare with” or “compare
     to”.  The second variant, “c.f.”, is a widespread misspelling.

‘C-’
     ‘C-’ in the name of a character is an abbreviation for Control.
     *Note C-: User Input.

‘C-M-’
     ‘C-M-’ in the name of a character is an abbreviation for
     Control-Meta.  If your terminal lacks a real <Meta> key, you type a
     Control-Meta character by typing <ESC> and then typing the
     corresponding Control character.  *Note C-M-: User Input.

Case Conversion
     Case conversion means changing text from upper case to lower case
     or vice versa.  *Note Case::.

Case Folding
     Case folding means ignoring the differences between case variants
     of the same letter: upper-case, lower-case, and title-case.  Emacs
     performs case folding by default in text search.  *Note Lax
     Search::.

Character
     Characters form the contents of an Emacs buffer.  Also, key
     sequences (q.v.) are usually made up of characters (though they may
     include other input events as well).  *Note User Input::.

Character Folding
     Character folding means ignoring differences between similarly
     looking characters, such as between ‘a’, and ‘ä’ and ‘á’.  Emacs
     performs character folding by default in text search.  *Note Lax
     Search::.

Character Set
     Emacs supports a number of character sets, each of which represents
     a particular alphabet or script.  *Note International::.

Character Terminal
     *Note Glossary---Text Terminal::.

Click Event
     A click event is the kind of input event (q.v.) generated when you
     press a mouse button and release it without moving the mouse.
     *Note Mouse Buttons::.

Client
     *Note Glossary---Server::.

Clipboard
     A clipboard is a buffer provided by the window system for
     transferring text between applications.  On the X Window System,
     the clipboard is provided in addition to the primary selection
     (q.v.); on MS-Windows and Mac, the clipboard is used _instead_ of
     the primary selection.  *Note Clipboard::.

Coding System
     A coding system is a way to encode text characters in a file or in
     a stream of information.  Emacs has the ability to convert text to
     or from a variety of coding systems when reading or writing it.
     *Note Coding Systems::.

Command
     A command is a Lisp function specially defined to be able to serve
     as a key binding in Emacs or to be invoked by its name (*note
     Glossary---Command Name::).  (Another term for “command” is
     “interactive function”—they are used interchangeably.)  When you
     type a key sequence (q.v.), its binding (q.v.) is looked up in the
     relevant keymaps (q.v.) to find the command to run.  *Note
     Commands::.

Command History
     *Note Glossary---Minibuffer History::.

Command Name
     A command name is the name of a Lisp symbol (q.v.) that is a
     command (*note Commands::).  You can invoke any command by its name
     using ‘M-x’ (*note M-x: M-x.).

Comment
     A comment is text in a program which is intended only for humans
     reading the program, and which is specially marked so that it will
     be ignored when the program is loaded or compiled.  Emacs offers
     special commands for creating, aligning and killing comments.
     *Note Comments::.

Common Lisp
     Common Lisp is a dialect of Lisp (q.v.) much larger and more
     powerful than Emacs Lisp.  Emacs provides a subset of Common Lisp
     in the CL package.  *Note Common Lisp: (cl)Top.

Compilation
     Compilation is the process of creating an executable program from
     source code.  Emacs has commands for compiling files of Emacs Lisp
     code (*note (elisp)Byte Compilation::) and programs in C and other
     languages (*note Compilation::).  Byte-compiled Emacs Lisp code
     loads and executes faster.

Complete Key
     A complete key is a key sequence that fully specifies one action to
     be performed by Emacs.  For example, ‘X’ and ‘C-f’ and ‘C-x m’ are
     complete keys.  Complete keys derive their meanings from being
     bound (*note Glossary---Bind::) to commands (q.v.).  Thus, ‘X’ is
     conventionally bound to a command to insert ‘X’ in the buffer; ‘C-x
     m’ is conventionally bound to a command to begin composing a mail
     message.  *Note Keys::.

Completion
     Completion is what Emacs does when it automatically expands an
     abbreviation for a name into the entire name.  Completion is done
     for minibuffer (q.v.) arguments when the set of possible valid
     inputs is known; for example, on command names, buffer names, and
     file names.  Completion usually occurs when <TAB>, <SPC> or <RET>
     is typed.  *Note Completion::.

Continuation Line
     When a line of text is longer than the width of the window, it
     normally takes up more than one screen line when displayed (but see
     *note Glossary---Truncation::).  We say that the text line is
     continued, and all screen lines used for it after the first are
     called continuation lines.  *Note Continuation Lines::.  A related
     Emacs feature is filling (q.v.).

Control Character
     A control character is a character that you type by holding down
     the <Ctrl> key.  Some control characters also have their own keys,
     so that you can type them without using <Ctrl>.  For example,
     <RET>, <TAB>, <ESC> and <DEL> are all control characters.  *Note
     User Input::.

Copyleft
     A copyleft is a notice giving the public legal permission to
     redistribute and modify a program or other work of art, but
     requiring modified versions to carry similar permission.  Copyright
     is normally used to keep users divided and helpless; with copyleft
     we turn that around to empower users and encourage them to
     cooperate.

     The particular form of copyleft used by the GNU project is called
     the GNU General Public License.  *Note Copying::.

<Ctrl>
     The <Ctrl> or control key is what you hold down in order to enter a
     control character (q.v.).  *Note Glossary---C-::.

Current Buffer
     The current buffer in Emacs is the Emacs buffer on which most
     editing commands operate.  You can select any Emacs buffer as the
     current one.  *Note Buffers::.

Current Line
     The current line is the line that point is on (*note Point::).

Current Paragraph
     The current paragraph is the paragraph that point is in.  If point
     is between two paragraphs, the current paragraph is the one that
     follows point.  *Note Paragraphs::.

Current Defun
     The current defun is the defun (q.v.) that point is in.  If point
     is between defuns, the current defun is the one that follows point.
     *Note Defuns::.

Cursor
     The cursor is the rectangle on the screen which indicates the
     position (called point; q.v.) at which insertion and deletion takes
     place.  The cursor is on or under the character that follows point.
     Often people speak of “the cursor” when, strictly speaking, they
     mean “point”.  *Note Cursor: Point.

Customization
     Customization is making minor changes in the way Emacs works, to
     reflect your preferences or needs.  It is often done by setting
     variables (*note Variables::) or faces (*note Face
     Customization::), or by rebinding key sequences (*note Keymaps::).

Cut and Paste
     *Note Glossary---Killing::, and *note Glossary---Yanking::.

Daemon
     A daemon is a standard term for a system-level process that runs in
     the background.  Daemons are often started when the system first
     starts up.  When Emacs runs in daemon-mode, it does not open a
     display.  You connect to it with the ‘emacsclient’ program.  *Note
     Emacs Server::.

Default Argument
     The default for an argument is the value that will be assumed if
     you do not specify one.  When the minibuffer is used to read an
     argument, the default argument is used if you just type <RET>.
     *Note Minibuffer::.

Default
     A default is the value that is used for a certain purpose when you
     do not explicitly specify a value to use.

Default Directory
     When you specify a file name that does not start with ‘/’ or ‘~’,
     it is interpreted relative to the current buffer’s default
     directory.  (On MS systems, file names that start with a drive
     letter ‘X:’ are treated as absolute, not relative.)  *Note Default
     Directory: Minibuffer File.

Defun
     A defun is a major definition at the top level in a program.  The
     name “defun” comes from Lisp, where most such definitions use the
     construct ‘defun’.  *Note Defuns::.

<DEL>
     <DEL> is a character that runs the command to delete one character
     of text before the cursor.  It is typically either the <Delete> key
     or the <BACKSPACE> key, whichever one is easy to type.  *Note DEL:
     Erasing.

Deletion
     Deletion means erasing text without copying it into the kill ring
     (q.v.).  The alternative is killing (q.v.).  *Note Deletion:
     Killing.

Deletion of Files
     Deleting a file means erasing it from the file system.  (Note that
     some systems use the concept of a trash can, or recycle bin, to
     allow you to undelete files.)  *Note Misc File Ops: Misc File Ops.

Deletion of Messages
     Deleting a message (in Rmail, and other mail clients) means
     flagging it to be eliminated from your mail file.  Until you
     expunge (q.v.) the Rmail file, you can still undelete the messages
     you have deleted.  *Note Rmail Deletion::.

Deletion of Windows
     Deleting a window means eliminating it from the screen.  Other
     windows expand to use up the space.  The text that was in the
     window is not lost, and you can create a new window with the same
     dimensions as the old if you wish.  *Note Windows::.

Directory
     File directories are named collections in the file system, within
     which you can place individual files or subdirectories.  They are
     sometimes referred to as “folders”.  *Note Directories::.

Directory Local Variable
     A directory local variable is a local variable (q.v.) that applies
     to all the files within a certain directory.  *Note Directory
     Variables::.

Directory Name
     On GNU and other Unix-like systems, directory names are strings
     that end in ‘/’.  For example, ‘/no-such-dir/’ is a directory name
     whereas ‘/tmp’ is not, even though ‘/tmp’ names a file that happens
     to be a directory.  On MS-Windows the relationship is more
     complicated.  *Note (elisp)Directory Names::.

Dired
     Dired is the Emacs facility that displays the contents of a file
     directory and allows you to “edit the directory”, performing
     operations on the files in the directory.  *Note Dired::.

Disabled Command
     A disabled command is one that you may not run without special
     confirmation.  The usual reason for disabling a command is that it
     is confusing for beginning users.  *Note Disabling::.

Down Event
     Short for “button down event” (q.v.).

Drag Event
     A drag event is the kind of input event (q.v.) generated when you
     press a mouse button, move the mouse, and then release the button.
     *Note Mouse Buttons::.

Dribble File
     A dribble file is a file into which Emacs writes all the characters
     that you type on the keyboard.  Dribble files can be used to make a
     record for debugging Emacs bugs.  Emacs does not make a dribble
     file unless you tell it to.  *Note Bugs::.

e.g.
     Short for “exempli gratia” in Latin, which means “for example”.

Echo Area
     The echo area is the bottom line of the screen, used for echoing
     the arguments to commands, for asking questions, and showing brief
     messages (including error messages).  The messages are stored in
     the buffer ‘*Messages*’ so you can review them later.  *Note Echo
     Area::.

Echoing
     Echoing is acknowledging the receipt of input events by displaying
     them (in the echo area).  Emacs never echoes single-character key
     sequences; longer key sequences echo only if you pause while typing
     them.

Electric
     We say that a character is electric if it is normally
     self-inserting (q.v.), but the current major mode (q.v.) redefines
     it to do something else as well.  For example, some programming
     language major modes define particular delimiter characters to
     reindent the line, or insert one or more newlines in addition to
     self-insertion.

End Of Line
     End of line is a character or a sequence of characters that
     indicate the end of a text line.  On GNU and Unix systems, this is
     a newline (q.v.), but other systems have other conventions.  *Note
     end-of-line: Coding Systems.  Emacs can recognize several
     end-of-line conventions in files and convert between them.

Environment Variable
     An environment variable is one of a collection of variables stored
     by the operating system, each one having a name and a value.  Emacs
     can access environment variables set by its parent shell, and it
     can set variables in the environment it passes to programs it
     invokes.  *Note Environment::.

EOL
     *Note Glossary---End Of Line::.

Error
     An error occurs when an Emacs command cannot execute in the current
     circumstances.  When an error occurs, execution of the command
     stops (unless the command has been programmed to do otherwise) and
     Emacs reports the error by displaying an error message (q.v.).

Error Message
     An error message is output displayed by Emacs when you ask it to do
     something impossible (such as, killing text forward when point is
     at the end of the buffer), or when a command malfunctions in some
     way.  Such messages appear in the echo area, accompanied by a beep.

<ESC>
     <ESC> is a character used as a prefix for typing Meta characters on
     keyboards lacking a <Meta> key.  Unlike the <Meta> key (which, like
     the <SHIFT> key, is held down while another character is typed),
     you press the <ESC> key as you would press a letter key, and it
     applies to the next character you type.

etc.
     Short for “et cetera” in Latin, which means “and so on”.

Expression
     *Note Glossary---Balanced Expression::.

Expunging
     Expunging an Rmail, Gnus newsgroup, or Dired buffer is an operation
     that truly discards the messages or files you have previously
     flagged for deletion.

Face
     A face is a style of displaying characters.  It specifies
     attributes such as font family and size, foreground and background
     colors, underline and strike-through, background stipple, etc.
     Emacs provides features to associate specific faces with portions
     of buffer text, in order to display that text as specified by the
     face attributes.  *Note Faces::.

File Local Variable
     A file local variable is a local variable (q.v.) specified in a
     given file.  *Note File Variables::, and *note Glossary---Directory
     Local Variable::.

File Locking
     Emacs uses file locking to notice when two different users start to
     edit one file at the same time.  *Note Interlocking::.

File Name
     A file name is a name that refers to a file.  File names may be
     relative or absolute; the meaning of a relative file name depends
     on the current directory, but an absolute file name refers to the
     same file regardless of which directory is current.  On GNU and
     Unix systems, an absolute file name starts with a slash (the root
     directory) or with ‘~/’ or ‘~USER/’ (a home directory).  On
     MS-Windows/MS-DOS, an absolute file name can also start with a
     drive letter and a colon, e.g., ‘D:’.

     Some people use the term “pathname” for file names, but we do not;
     we use the word “path” only in the term “search path” (q.v.).

File-Name Component
     A file-name component names a file directly within a particular
     directory.  On GNU and Unix systems, a file name is a sequence of
     file-name components, separated by slashes.  For example, ‘foo/bar’
     is a file name containing two components, ‘foo’ and ‘bar’; it
     refers to the file named ‘bar’ in the directory named ‘foo’ in the
     current directory.  MS-DOS/MS-Windows file names can also use
     backslashes to separate components, as in ‘foo\bar’.

Fill Prefix
     The fill prefix is a string that should be expected at the
     beginning of each line when filling is done.  It is not regarded as
     part of the text to be filled.  *Note Filling::.

Filling
     Filling text means adjusting the position of line-breaks to shift
     text between consecutive lines, so that all the lines are
     approximately the same length.  *Note Filling::.  Some other
     editors call this feature “line wrapping”.

Font Lock
     Font Lock is a mode that highlights parts of buffer text in
     different faces, according to the syntax.  Some other editors refer
     to this as “syntax highlighting”.  For example, all comments (q.v.)
     might be colored red.  *Note Font Lock::.

Fontset
     A fontset is a named collection of fonts.  A fontset specification
     lists character sets and which font to use to display each of them.
     Fontsets make it easy to change several fonts at once by specifying
     the name of a fontset, rather than changing each font separately.
     *Note Fontsets::.

Formfeed Character
     *Note Glossary---Page::.

Frame
     A frame is a rectangular cluster of Emacs windows.  Emacs starts
     out with one frame, but you can create more.  You can subdivide
     each frame into Emacs windows (q.v.).  When you are using a window
     system (q.v.), more than one frame can be visible at the same time.
     *Note Frames::.  Some other editors use the term “window” for this,
     but in Emacs a window means something else.

Free Software
     Free software is software that gives you the freedom to share,
     study and modify it.  Emacs is free software, part of the GNU
     project (q.v.), and distributed under a copyleft (q.v.) license
     called the GNU General Public License.  *Note Copying::.

Free Software Foundation
     The Free Software Foundation (FSF) is a charitable foundation
     dedicated to promoting the development of free software (q.v.).
     For more information, see the FSF website (https://fsf.org/).

Fringe
     On a graphical display (q.v.), there’s a narrow portion of the
     frame (q.v.) between the text area and the window’s border.  These
     “fringes” are used to display symbols that provide information
     about the buffer text (*note Fringes::).  Emacs displays the fringe
     using a special face (q.v.) called ‘fringe’.  *Note fringe: Faces.

FSF
     *Note Glossary---Free Software Foundation::.

FTP
     FTP is an acronym for File Transfer Protocol.  This is one standard
     method for retrieving remote files (q.v.).

Function Key
     A function key is a key on the keyboard that sends input but does
     not correspond to any character.  *Note Function Keys::.

Global
     Global means “independent of the current environment; in effect
     throughout Emacs”.  It is the opposite of local (q.v.).  Particular
     examples of the use of “global” appear below.

Global Abbrev
     A global definition of an abbrev (q.v.) is effective in all major
     modes that do not have local (q.v.) definitions for the same
     abbrev.  *Note Abbrevs::.

Global Keymap
     The global keymap (q.v.) contains key bindings that are in effect
     everywhere, except when overridden by local key bindings in a major
     mode’s local keymap (q.v.).  *Note Keymaps::.

Global Mark Ring
     The global mark ring records the series of buffers you have
     recently set a mark (q.v.) in.  In many cases you can use this to
     backtrack through buffers you have been editing, or in which you
     have found tags (*note Glossary---Tags Table::).  *Note Global Mark
     Ring::.

Global Substitution
     Global substitution means replacing each occurrence of one string
     by another string throughout a large amount of text.  *Note
     Replace::.

Global Variable
     The global value of a variable (q.v.) takes effect in all buffers
     that do not have their own local (q.v.) values for the variable.
     *Note Variables::.

GNU
     GNU is a recursive acronym for GNU’s Not Unix, and it refers to a
     Unix-compatible operating system which is free software (q.v.).
     *Note Manifesto::.  GNU is normally used with Linux as the kernel
     since Linux works better than the GNU kernel.  For more
     information, see the GNU website (https://www.gnu.org/).

Graphic Character
     Graphic characters are those assigned pictorial images rather than
     just names.  All the non-Meta (q.v.) characters except for the
     Control (q.v.) characters are graphic characters.  These include
     letters, digits, punctuation, and spaces; they do not include <RET>
     or <ESC>.  In Emacs, typing a graphic character inserts that
     character (in ordinary editing modes).  *Note Inserting Text::.

Graphical Display
     A graphical display is one that can display images and multiple
     fonts.  Usually it also has a window system (q.v.).

Highlighting
     Highlighting text means displaying it with a different foreground
     and/or background color to make it stand out from the rest of the
     text in the buffer.

     Emacs uses highlighting in several ways.  It highlights the region
     whenever it is active (*note Mark::).  Incremental search also
     highlights matches (*note Incremental Search::).  *Note
     Glossary---Font Lock::.

Hardcopy
     Hardcopy means printed output.  Emacs has various commands for
     printing the contents of Emacs buffers.  *Note Printing::.

<HELP>
     <HELP> is the Emacs name for ‘C-h’ or <F1>.  You can type <HELP> at
     any time to ask what options you have, or to ask what a command
     does.  *Note Help::.

Help Echo
     Help echo is a short message displayed in the echo area (q.v.) when
     the mouse pointer is located on portions of display that require
     some explanations.  Emacs displays help echo for menu items, parts
     of the mode line, tool-bar buttons, etc.  On graphical displays,
     the messages can be displayed as tooltips (q.v.).  *Note
     Tooltips::.

Home Directory
     Your home directory contains your personal files.  On a multi-user
     GNU or Unix system, each user has his or her own home directory.
     When you start a new login session, your home directory is the
     default directory in which to start.  A standard shorthand for your
     home directory is ‘~’.  Similarly, ‘~USER’ represents the home
     directory of some other user.

Hook
     A hook is a list of functions to be called on specific occasions,
     such as saving a buffer in a file, major mode activation, etc.  By
     customizing the various hooks, you can modify Emacs’s behavior
     without changing any of its code.  *Note Hooks::.

Hyper
     Hyper is the name of a modifier bit that a keyboard input character
     may have.  To make a character Hyper, type it while holding down
     the <Hyper> key.  Such characters are given names that start with
     ‘Hyper-’ (usually written ‘H-’ for short).  *Note Modifier Keys::.

i.e.
     Short for “id est” in Latin, which means “that is”.

Iff
     “Iff” means “if and only if”.  This terminology comes from
     mathematics.  Try to avoid using this term in documentation, since
     many are unfamiliar with it and mistake it for a typo.

Inbox
     An inbox is a file in which mail is delivered by the operating
     system.  Rmail transfers mail from inboxes to Rmail files in which
     the mail is then stored permanently or until explicitly deleted.
     *Note Rmail Inbox::.

Incremental Search
     Emacs provides an incremental search facility, whereby Emacs begins
     searching for a string as soon as you type the first character.  As
     you type more characters, it refines the search.  *Note Incremental
     Search::.

Indentation
     Indentation means blank space at the beginning of a line.  Most
     programming languages have conventions for using indentation to
     illuminate the structure of the program, and Emacs has special
     commands to adjust indentation.  *Note Indentation::.

Indirect Buffer
     An indirect buffer is a buffer that shares the text of another
     buffer, called its base buffer (q.v.).  *Note Indirect Buffers::.

Info
     Info is the hypertext format used by the GNU project for writing
     documentation.

Input Event
     An input event represents, within Emacs, one action taken by the
     user on the terminal.  Input events include typing characters,
     typing function keys, pressing or releasing mouse buttons, and
     switching between Emacs frames.  *Note User Input::.

Input Method
     An input method is a system for entering non-ASCII text characters
     by typing sequences of ASCII characters (q.v.).  *Note Input
     Methods::.

Insertion
     Insertion means adding text into the buffer, either from the
     keyboard or from some other place in Emacs.

Interactive Function
     A different term for “command” (q.v.).

Interactive Invocation
     A function can be called from Lisp code, or called as a user level
     command (via ‘M-x’, a key binding or a menu).  In the latter case,
     the function is said to be “called interactively”.

Interlocking
     *Note Glossary---File Locking::.

Isearch
     *Note Glossary---Incremental Search::.

Justification
     Justification means adding extra spaces within lines of text in
     order to adjust the position of the text edges.  *Note Fill
     Commands::.

Key Binding
     *Note Glossary---Binding::.

Keyboard Macro
     Keyboard macros are a way of defining new Emacs commands from
     sequences of existing ones, with no need to write a Lisp program.
     You can use a macro to record a sequence of commands, then play
     them back as many times as you like.  *Note Keyboard Macros::.

Keyboard Shortcut
     A keyboard shortcut is a key sequence (q.v.) that invokes a
     command.  What some programs call “assigning a keyboard shortcut”,
     Emacs calls “binding a key sequence”.  *Note Glossary---Binding::.

Key Sequence
     A key sequence (key, for short) is a sequence of input events
     (q.v.) that are meaningful as a single unit.  If the key sequence
     is enough to specify one action, it is a complete key (q.v.); if it
     is not enough, it is a prefix key (q.v.).  *Note Keys::.

Keymap
     The keymap is the data structure that records the bindings (q.v.)
     of key sequences to the commands that they run.  For example, the
     global keymap binds the character ‘C-n’ to the command function
     ‘next-line’.  *Note Keymaps::.

Keyboard Translation Table
     The keyboard translation table is an array that translates the
     character codes that come from the terminal into the character
     codes that make up key sequences.

Kill Ring
     The kill ring is where all text you have killed (*note
     Glossary---Killing::) recently is saved.  You can reinsert any of
     the killed text still in the ring; this is called yanking (q.v.).
     *Note Yanking::.

Killing
     Killing means erasing text and saving it on the kill ring so it can
     be yanked (q.v.) later.  Some other systems call this “cutting”.
     Most Emacs commands that erase text perform killing, as opposed to
     deletion (q.v.).  *Note Killing::.

Killing a Job
     Killing a job (such as, an invocation of Emacs) means making it
     cease to exist.  Any data within it, if not saved in a file, is
     lost.  *Note Exiting::.

Language Environment
     Your choice of language environment specifies defaults for the
     input method (q.v.) and coding system (q.v.).  *Note Language
     Environments::.  These defaults are relevant if you edit non-ASCII
     text (*note International::).

Line Wrapping
     *Note Glossary---Filling::.

Lisp
     Lisp is a programming language.  Most of Emacs is written in a
     dialect of Lisp, called Emacs Lisp, which is extended with special
     features that make it especially suitable for text editing tasks.

List
     A list is, approximately, a text string beginning with an open
     parenthesis and ending with the matching close parenthesis.  In C
     mode and other non-Lisp modes, groupings surrounded by other kinds
     of matched delimiters appropriate to the language, such as braces,
     are also considered lists.  Emacs has special commands for many
     operations on lists.  *Note Moving by Parens::.

Local
     Local means “in effect only in a particular context”; the relevant
     kind of context is a particular function execution, a particular
     buffer, or a particular major mode.  It is the opposite of “global”
     (q.v.).  Specific uses of “local” in Emacs terminology appear
     below.

Local Abbrev
     A local abbrev definition is effective only if a particular major
     mode is selected.  In that major mode, it overrides any global
     definition for the same abbrev.  *Note Abbrevs::.

Local Keymap
     A local keymap is used in a particular major mode; the key bindings
     (q.v.) in the current local keymap override global bindings of the
     same key sequences.  *Note Keymaps::.

Local Variable
     A local value of a variable (q.v.) applies to only one buffer.
     *Note Locals::.

‘M-’
     ‘M-’ in the name of a character is an abbreviation for <Meta>, one
     of the modifier keys that can accompany any character.  *Note M-:
     User Input.

‘M-C-’
     ‘M-C-’ in the name of a character is an abbreviation for
     Control-Meta; it means the same thing as ‘C-M-’ (q.v.).

‘M-x’
     ‘M-x’ is the key sequence that is used to call an Emacs command by
     name.  This is how you run commands that are not bound to key
     sequences.  *Note M-x: M-x.

Mail
     Mail means messages sent from one user to another through the
     computer system, to be read at the recipient’s convenience.  Emacs
     has commands for composing and sending mail, and for reading and
     editing the mail you have received.  *Note Sending Mail::.  *Note
     Rmail::, for one way to read mail with Emacs.

Mail Composition Method
     A mail composition method is a program runnable within Emacs for
     editing and sending a mail message.  Emacs lets you select from
     several alternative mail composition methods.  *Note Mail
     Methods::.

Major Mode
     The Emacs major modes are a mutually exclusive set of options, each
     of which configures Emacs for editing a certain sort of text.
     Ideally, each programming language has its own major mode.  *Note
     Major Modes::.

Margin
     The space between the usable part of a window (including the
     fringe) and the window edge.

Mark
     The mark points to a position in the text.  It specifies one end of
     the region (q.v.), point being the other end.  Many commands
     operate on all the text from point to the mark.  Each buffer has
     its own mark.  *Note Mark::.

Mark Ring
     The mark ring is used to hold several recent previous locations of
     the mark, in case you want to move back to them.  Each buffer has
     its own mark ring; in addition, there is a single global mark ring
     (q.v.).  *Note Mark Ring::.

Menu Bar
     The menu bar is a line at the top of an Emacs frame.  It contains
     words you can click on with the mouse to bring up menus, or you can
     use a keyboard interface to navigate it.  *Note Menu Bars::.

Message
     *Note Glossary---Mail::.

Meta
     Meta is the name of a modifier bit which you can use in a command
     character.  To enter a meta character, you hold down the <Meta> key
     while typing the character.  We refer to such characters with names
     that start with ‘Meta-’ (usually written ‘M-’ for short).  For
     example, ‘M-<’ is typed by holding down <Meta> and at the same time
     typing ‘<’ (which itself is done, on most terminals, by holding
     down <SHIFT> and typing ‘,’).  *Note Meta: User Input.

     On some terminals, the <Meta> key is actually labeled <Alt> or
     <Edit>.

Meta Character
     A Meta character is one whose character code includes the Meta bit.

Minibuffer
     The minibuffer is the window that appears when necessary inside the
     echo area (q.v.), used for reading arguments to commands.  *Note
     Minibuffer::.

Minibuffer History
     The minibuffer history records the text you have specified in the
     past for minibuffer arguments, so you can conveniently use the same
     text again.  *Note Minibuffer History::.

Minor Mode
     A minor mode is an optional feature of Emacs, which can be switched
     on or off independently of all other features.  Each minor mode has
     a command to turn it on or off.  Some minor modes are global
     (q.v.), and some are local (q.v.).  *Note Minor Modes::.

Minor Mode Keymap
     A minor mode keymap is a keymap that belongs to a minor mode and is
     active when that mode is enabled.  Minor mode keymaps take
     precedence over the buffer’s local keymap, just as the local keymap
     takes precedence over the global keymap.  *Note Keymaps::.

Mode Line
     The mode line is the line at the bottom of each window (q.v.),
     giving status information on the buffer displayed in that window.
     *Note Mode Line::.

Modified Buffer
     A buffer (q.v.) is modified if its text has been changed since the
     last time the buffer was saved (or since it was created, if it has
     never been saved).  *Note Saving::.

Moving Text
     Moving text means erasing it from one place and inserting it in
     another.  The usual way to move text is by killing (q.v.) it and
     then yanking (q.v.) it.  *Note Killing::.

MULE
     Prior to Emacs 23, MULE was the name of a software package which
     provided a “MULtilingual Enhancement” to Emacs, by adding support
     for multiple character sets (q.v.).  MULE was later integrated into
     Emacs, and much of it was replaced when Emacs gained internal
     Unicode support in version 23.

     Some parts of Emacs that deal with character set support still use
     the MULE name.  *Note International::.

Multibyte Character
     A multibyte character is a character that takes up several bytes in
     a buffer.  Emacs uses multibyte characters to represent non-ASCII
     text, since the number of non-ASCII characters is much more than
     256.  *Note International Characters: International Chars.

Named Mark
     A named mark is a register (q.v.), in its role of recording a
     location in text so that you can move point to that location.
     *Note Registers::.

Narrowing
     Narrowing means creating a restriction (q.v.) that limits editing
     in the current buffer to only a part of the text.  Text outside
     that part is inaccessible for editing (or viewing) until the
     boundaries are widened again, but it is still there, and saving the
     file saves it all.  *Note Narrowing::.

Newline
     Control-J characters in the buffer terminate lines of text and are
     therefore also called newlines.  *Note Glossary---End Of Line::.

‘nil’
     ‘nil’ is a value usually interpreted as a logical “false”.  Its
     opposite is ‘t’, interpreted as “true”.

Numeric Argument
     A numeric argument is a number, specified before a command, to
     change the effect of the command.  Often the numeric argument
     serves as a repeat count.  *Note Arguments::.

Overwrite Mode
     Overwrite mode is a minor mode.  When it is enabled, ordinary text
     characters replace the existing text after point rather than
     pushing it to one side.  *Note Minor Modes::.

Package
     A package is a collection of Lisp code that you download and
     automatically install from within Emacs.  Packages provide a
     convenient way to add new features.  *Note Packages::.

Page
     A page is a unit of text, delimited by formfeed characters (ASCII
     control-L, code 014) at the beginning of a line.  Some Emacs
     commands are provided for moving over and operating on pages.
     *Note Pages::.

Paragraph
     Paragraphs are the medium-size unit of human-language text.  There
     are special Emacs commands for moving over and operating on
     paragraphs.  *Note Paragraphs::.

Parsing
     We say that certain Emacs commands parse words or expressions in
     the text being edited.  Really, all they know how to do is find the
     other end of a word or expression.

Point
     Point is the place in the buffer at which insertion and deletion
     occur.  Point is considered to be between two characters, not at
     one character.  The terminal’s cursor (q.v.) indicates the location
     of point.  *Note Point::.

Prefix Argument
     *Note Glossary---Numeric Argument::.

Prefix Key
     A prefix key is a key sequence (q.v.) whose sole function is to
     introduce a set of longer key sequences.  ‘C-x’ is an example of
     prefix key; any two-character sequence starting with ‘C-x’ is
     therefore a legitimate key sequence.  *Note Keys::.

Primary Selection
     The primary selection is one particular X selection (q.v.); it is
     the selection that most X applications use for transferring text to
     and from other applications.

     The Emacs commands that mark or select text set the primary
     selection, and clicking the mouse inserts text from the primary
     selection when appropriate.  *Note Shift Selection::.

Prompt
     A prompt is text used to ask you for input.  Displaying a prompt is
     called prompting.  Emacs prompts always appear in the echo area
     (q.v.).  One kind of prompting happens when the minibuffer is used
     to read an argument (*note Minibuffer::); the echoing that happens
     when you pause in the middle of typing a multi-character key
     sequence is also a kind of prompting (*note Echo Area::).

q.v.
     Short for “quod vide” in Latin, which means “which see”.

Query-Replace
     Query-replace is an interactive string replacement feature provided
     by Emacs.  *Note Query Replace::.

Quitting
     Quitting means canceling a partially typed command or a running
     command, using ‘C-g’ (or ‘C-<Break>’ on MS-DOS). *Note Quitting::.

Quoting
     Quoting means depriving a character of its usual special
     significance.  The most common kind of quoting in Emacs is with
     ‘C-q’.  What constitutes special significance depends on the
     context and on convention.  For example, an ordinary character as
     an Emacs command inserts itself; so in this context, a special
     character is any character that does not normally insert itself
     (such as <DEL>, for example), and quoting it makes it insert itself
     as if it were not special.  Not all contexts allow quoting.  *Note
     Quoting: Inserting Text.

Quoting File Names
     Quoting a file name turns off the special significance of
     constructs such as ‘$’, ‘~’ and ‘:’.  *Note Quoted File Names::.

Read-Only Buffer
     A read-only buffer is one whose text you are not allowed to change.
     Normally Emacs makes buffers read-only when they contain text which
     has a special significance to Emacs; for example, Dired buffers.
     Visiting a file that is write-protected also makes a read-only
     buffer.  *Note Buffers::.

Rectangle
     A rectangle consists of the text in a given range of columns on a
     given range of lines.  Normally you specify a rectangle by putting
     point at one corner and putting the mark at the diagonally opposite
     corner.  *Note Rectangles::.

Recursive Editing Level
     A recursive editing level is a state in which part of the execution
     of a command involves asking you to edit some text.  This text may
     or may not be the same as the text to which the command was
     applied.  The mode line (q.v.) indicates recursive editing levels
     with square brackets (‘[’ and ‘]’).  *Note Recursive Edit::.

Redisplay
     Redisplay is the process of correcting the image on the screen to
     correspond to changes that have been made in the text being edited.
     *Note Redisplay: Screen.

Regexp
     *Note Glossary---Regular Expression::.

Region
     The region is the text between point (q.v.) and the mark (q.v.).
     Many commands operate on the text of the region.  *Note Region:
     Mark.

Register
     Registers are named slots in which text, buffer positions, or
     rectangles can be saved for later use.  *Note Registers::.  A
     related Emacs feature is bookmarks (q.v.).

Regular Expression
     A regular expression is a pattern that can match various text
     strings; for example, ‘a[0-9]+’ matches ‘a’ followed by one or more
     digits.  *Note Regexps::.

Remote File
     A remote file is a file that is stored on a system other than your
     own.  Emacs can access files on other computers provided that they
     are reachable from your machine over the network, and (obviously)
     that you have a supported method to gain access to those files.
     *Note Remote Files::.

Repeat Count
     *Note Glossary---Numeric Argument::.

Replacement
     *Note Glossary---Global Substitution::.

Restriction
     A buffer’s restriction is the amount of text, at the beginning or
     the end of the buffer, that is temporarily inaccessible.  Giving a
     buffer a nonzero amount of restriction is called narrowing (q.v.);
     removing a restriction is called widening (q.v.).  *Note
     Narrowing::.

<RET>
     <RET> is a character that in Emacs runs the command to insert a
     newline into the text.  It is also used to terminate most arguments
     read in the minibuffer (q.v.).  *Note Return: User Input.

Reverting
     Reverting means returning to the original state.  For example,
     Emacs lets you revert a buffer by re-reading its file from disk.
     *Note Reverting::.

Saving
     Saving a buffer means copying its text into the file that was
     visited (q.v.) in that buffer.  This is the way text in files
     actually gets changed by your Emacs editing.  *Note Saving::.

Scroll Bar
     A scroll bar is a tall thin hollow box that appears at the side of
     a window.  You can use mouse commands in the scroll bar to scroll
     the window.  The scroll bar feature is supported only under
     windowing systems.  *Note Scroll Bars::.

Scrolling
     Scrolling means shifting the text in the Emacs window so as to see
     a different part of the buffer.  *Note Scrolling::.

Searching
     Searching means moving point to the next occurrence of a specified
     string or the next match for a specified regular expression.  *Note
     Search::.

Search Path
     A search path is a list of directories, to be used for searching
     for files for certain purposes.  For example, the variable
     ‘load-path’ holds a search path for finding Lisp library files.
     *Note Lisp Libraries::.

Secondary Selection
     The secondary selection is one particular X selection (q.v.); some
     X applications can use it for transferring text to and from other
     applications.  Emacs has special mouse commands for transferring
     text using the secondary selection.  *Note Secondary Selection::.

Selected Frame
     The selected frame is the one your input currently operates on.
     *Note Frames::.

Selected Window
     The selected window is the one your input currently operates on.
     *Note Basic Window::.

Selecting a Buffer
     Selecting a buffer means making it the current (q.v.) buffer.
     *Note Select Buffer::.

Selection
     Windowing systems allow an application program to specify
     selections whose values are text.  A program can also read the
     selections that other programs have set up.  This is the principal
     way of transferring text between window applications.  Emacs has
     commands to work with the primary (q.v.) selection and the
     secondary (q.v.) selection, and also with the clipboard (q.v.).

Self-Documentation
     Self-documentation is the feature of Emacs that can tell you what
     any command does, or give you a list of all commands related to a
     topic you specify.  You ask for self-documentation with the help
     character, ‘C-h’.  *Note Help::.

Self-Inserting Character
     A character is self-inserting if typing that character inserts that
     character in the buffer.  Ordinary printing and whitespace
     characters are self-inserting in Emacs, except in certain special
     major modes.

Sentences
     Emacs has commands for moving by or killing by sentences.  *Note
     Sentences::.

Server
     Within Emacs, you can start a “server” process, which listens for
     connections from “clients”.  This offers a faster alternative to
     starting several Emacs instances.  *Note Emacs Server::, and *note
     Glossary---Daemon::.

Sexp
     A sexp (short for “s-expression”) is the basic syntactic unit of
     Lisp in its textual form: either a list, or Lisp atom.  Sexps are
     also the balanced expressions (q.v.) of the Lisp language; this is
     why the commands for editing balanced expressions have ‘sexp’ in
     their name.  *Note Sexps: Expressions.

Simultaneous Editing
     Simultaneous editing means two users modifying the same file at
     once.  Simultaneous editing, if not detected, can cause one user to
     lose his or her work.  Emacs detects all cases of simultaneous
     editing, and warns one of the users to investigate.  *Note
     Interlocking: Interlocking.

<SPC>
     <SPC> is the space character, which you enter by pressing the space
     bar.

Speedbar
     The speedbar is a special tall frame that provides fast access to
     Emacs buffers, functions within those buffers, Info nodes, and
     other interesting parts of text within Emacs.  *Note Speedbar::.

Spell Checking
     Spell checking means checking correctness of the written form of
     each one of the words in a text.  Emacs can use various external
     spelling-checker programs to check the spelling of parts of a
     buffer via a convenient user interface.  *Note Spelling::.

String
     A string is a kind of Lisp data object that contains a sequence of
     characters.  Many Emacs variables are intended to have strings as
     values.  The Lisp syntax for a string consists of the characters in
     the string with a ‘"’ before and another ‘"’ after.  A ‘"’ that is
     part of the string must be written as ‘\"’ and a ‘\’ that is part
     of the string must be written as ‘\\’.  All other characters,
     including newline, can be included just by writing them inside the
     string; however, backslash sequences as in C, such as ‘\n’ for
     newline or ‘\241’ using an octal character code, are allowed as
     well.

String Substitution
     *Note Glossary---Global Substitution::.

Symbol
     A symbol in Emacs Lisp is an object with a name.  The object can be
     a variable (q.v.), a function or command (q.v.), or a face (q.v.).
     The symbol’s name serves as the printed representation of the
     symbol.  *Note Symbol Type: (elisp)Symbol Type.

Syntax Highlighting
     *Note Glossary---Font Lock::.

Syntax Table
     The syntax table tells Emacs which characters are part of a word,
     which characters balance each other like parentheses, etc.  *Note
     Syntax Tables: (elisp)Syntax Tables.

Super
     Super is the name of a modifier bit that a keyboard input character
     may have.  To make a character Super, type it while holding down
     the <SUPER> key.  Such characters are given names that start with
     ‘Super-’ (usually written ‘s-’ for short).  *Note Modifier Keys::.

Suspending
     Suspending Emacs means stopping it temporarily and returning
     control to its parent process, which is usually a shell.  Unlike
     killing a job (q.v.), you can later resume the suspended Emacs job
     without losing your buffers, unsaved edits, undo history, etc.
     *Note Exiting::.

<TAB>
     <TAB> is the tab character.  In Emacs it is typically used for
     indentation or completion.

Tab Bar
     The tab bar is a row of tabs at the top of an Emacs frame.
     Clicking on one of these tabs switches named persistent window
     configurations.  *Note Tab Bars::.

Tab Line
     The tab line is a line of tabs at the top of an Emacs window.
     Clicking on one of these tabs switches window buffers.  *Note Tab
     Line::.

Tag
     A tag is an identifier in a program source.  *Note Xref::.

Tags Table
     A tags table is a file that serves as an index to identifiers:
     definitions of functions, macros, data structures, etc., in one or
     more other files.  *Note Tags Tables::.

Termscript File
     A termscript file contains a record of all characters sent by Emacs
     to the terminal.  It is used for tracking down bugs in Emacs
     redisplay.  Emacs does not make a termscript file unless you tell
     it to.  *Note Bugs::.

Text

     “Text” has two meanings (*note Text::):

        • Data consisting of a sequence of characters, as opposed to
          binary numbers, executable programs, and the like.  The basic
          contents of an Emacs buffer (aside from the text properties,
          q.v.) are always text in this sense.

        • Data consisting of written human language (as opposed to
          programs), or following the stylistic conventions of human
          language.

Text Terminal
     A text terminal, or character terminal, is a display that is
     limited to displaying text in character units.  Such a terminal
     cannot control individual pixels it displays.  Emacs supports a
     subset of display features on text terminals.

Text Properties
     Text properties are annotations recorded for particular characters
     in the buffer.  Images in the buffer are recorded as text
     properties; they also specify formatting information.  *Note
     Editing Format Info::.

Theme
     A theme is a set of customizations (q.v.) that give Emacs a
     particular appearance or behavior.  For example, you might use a
     theme for your favorite set of faces (q.v.).

Tool Bar
     The tool bar is a line (sometimes multiple lines) of icons at the
     top of an Emacs frame.  Clicking on one of these icons executes a
     command.  You can think of this as a graphical relative of the menu
     bar (q.v.).  *Note Tool Bars::.

Tooltips
     Tooltips are small windows displaying a help echo (q.v.) text,
     which explains parts of the display, lists useful options available
     via mouse clicks, etc.  *Note Tooltips::.

Top Level
     Top level is the normal state of Emacs, in which you are editing
     the text of the file you have visited.  You are at top level
     whenever you are not in a recursive editing level (q.v.) or the
     minibuffer (q.v.), and not in the middle of a command.  You can get
     back to top level by aborting (q.v.) and quitting (q.v.).  *Note
     Quitting::.

Transient Mark Mode
     The default behavior of the mark (q.v.) and region (q.v.), in which
     setting the mark activates it and highlights the region, is called
     Transient Mark mode.  It is enabled by default.  *Note Disabled
     Transient Mark::.

Transposition
     Transposing two units of text means putting each one into the place
     formerly occupied by the other.  There are Emacs commands to
     transpose two adjacent characters, words, balanced expressions
     (q.v.) or lines (*note Transpose::).

Trash Can
     *Note Glossary---Deletion of Files::.

Truncation
     Truncating text lines in the display means leaving out any text on
     a line that does not fit within the right margin of the window
     displaying it.  *Note Truncation: Continuation Lines, and *note
     Glossary---Continuation Line::.

TTY
     *Note Glossary---Text Terminal::.

Undoing
     Undoing means making your previous editing go in reverse, bringing
     back the text that existed earlier in the editing session.  *Note
     Undo::.

Unix
     Unix is a class of multi-user computer operating systems with a
     long history.  There are several implementations today.  The GNU
     project (q.v.) aims to develop a complete Unix-like operating
     system that is free software (q.v.).

User Option
     A user option is a face (q.v.) or a variable (q.v.) that exists so
     that you can customize Emacs by setting it to a new value.  *Note
     Easy Customization::.

Variable
     A variable is an object in Lisp that can store an arbitrary value.
     Emacs uses some variables for internal purposes, and has others
     (known as “user options”; q.v.) just so that you can set their
     values to control the behavior of Emacs.  The variables used in
     Emacs that you are likely to be interested in are listed in the
     Variables Index in this manual (*note Variable Index::).  *Note
     Variables::, for information on variables.

Version Control
     Version control systems keep track of multiple versions of a source
     file.  They provide a more powerful alternative to keeping backup
     files (q.v.).  *Note Version Control::.

Visiting
     Visiting a file means loading its contents into a buffer (q.v.)
     where they can be edited.  *Note Visiting::.

Whitespace
     Whitespace is any run of consecutive formatting characters (space,
     tab, newline, backspace, etc.).

Widening
     Widening is removing any restriction (q.v.) on the current buffer;
     it is the opposite of narrowing (q.v.).  *Note Narrowing::.

Window
     Emacs divides a frame (q.v.) into one or more windows, each of
     which can display the contents of one buffer (q.v.) at any time.
     *Note Screen::, for basic information on how Emacs uses the screen.
     *Note Windows::, for commands to control the use of windows.  Some
     other editors use the term “window” for what we call a “frame” in
     Emacs.

Window System
     A window system is software that operates on a graphical display
     (q.v.), to subdivide the screen so that multiple applications can
     have their own windows at the same time.  All modern operating
     systems include a window system.

Word Abbrev
     *Note Glossary---Abbrev::.

Word Search
     Word search is searching for a sequence of words, considering the
     punctuation between them as insignificant.  *Note Word Search::.

Yanking
     Yanking means reinserting text previously killed (q.v.).  It can be
     used to undo a mistaken kill, or for copying or moving text.  Some
     other systems call this “pasting”.  *Note Yanking::.


File: emacs.info,  Node: Acknowledgments,  Next: Key Index,  Prev: Glossary,  Up: Top

# /. Acknowledgments
*******************

Many people have contributed code included in the Free Software
Foundation’s distribution of GNU Emacs.  To show our appreciation for
their public spirit, we list here in alphabetical order those who have
written substantial portions.  Others too numerous to mention have
reported and fixed bugs, and added features to many parts of Emacs.  We
thank them for their generosity as well.

   This list is intended to mention every contributor of a major package
or feature; if you know of someone we have omitted, please make a bug
report.  More comprehensive information is available in the ‘ChangeLog’
files, summarized in the file ‘etc/AUTHORS’ in the distribution.

   • Per Abrahamsen wrote the customization facilities, as well as
     ‘double.el’, for typing accented characters not normally available
     from the keyboard; ‘xt-mouse.el’, which allows mouse commands
     through Xterm; ‘gnus-cus.el’, which implements customization
     commands for Gnus; ‘gnus-cite.el’, a citation-parsing facility for
     news articles; ‘gnus-score.el’, scoring for Gnus; ‘cpp.el’, which
     hides or highlights parts of C programs according to preprocessor
     conditionals; and the widget library files ‘wid-browse.el’,
     ‘wid-edit.el’, ‘widget.el’.  He also co-wrote ‘gnus-soup.el’.

   • Tomas Abrahamsson wrote ‘artist.el’, a package for producing ASCII
     art with a mouse or with keyboard keys.

   • Jay K. Adams wrote ‘jka-compr.el’ and ‘jka-cmpr-hook.el’, providing
     automatic decompression and recompression for compressed files.

   • Michael Albinus wrote ‘dbus.el’, a package that implements the
     D-Bus message bus protocol; ‘zeroconf.el’, a mode for browsing
     Avahi services; ‘secrets.el’, an interface to keyring daemons for
     storing confidential data; and ‘filenotify.el’ and the associated
     low-level interface routines, for watching file status changes.  He
     and Kai Großjohann wrote the Tramp package, which provides
     transparent remote file editing using ssh, ftp, and other network
     protocols.  He and Daniel Pittman wrote ‘tramp-cache.el’.

   • Ralf Angeli wrote ‘scroll-lock.el’, a minor mode which keeps the
     point vertically fixed by scrolling the window when moving up and
     down in the buffer.

   • Aurélien Aptel added dynamic module support to Emacs.  Philipp
     Stephani and others also worked on the dynamic module code.

   • Joe Arceneaux wrote the original text property implementation, and
     implemented support for X11.

   • Emil Åström, Milan Zamaza, and Stefan Bruda wrote ‘prolog.el’, a
     mode for editing Prolog (and Mercury) code.

   • Miles Bader wrote ‘image-file.el’, support code for visiting image
     files; ‘minibuf-eldef.el’, a minor mode that hides the minibuffer
     default value when appropriate; ‘rfn-eshadow.el’, shadowing of
     ‘read-file-name’ input; ‘mb-depth.el’, display of minibuffer depth;
     ‘button.el’, the library that implements clickable buttons;
     ‘face-remap.el’, a package for changing the default face in
     individual buffers; and ‘macroexp.el’ for macro-expansion.  He also
     worked on an early version of the lexical binding code.

   • David Bakhash wrote ‘strokes.el’, a mode for controlling Emacs by
     moving the mouse in particular patterns.

   • Juanma Barranquero wrote ‘emacs-lock.el’ (based on the original
     version by Tom Wurgler), which makes it harder to exit with
     valuable buffers unsaved; and ‘frameset.el’, for saving and
     restoring the frame/window setup.  He also made many other
     contributions to other areas, including MS Windows support.

   • Eli Barzilay wrote ‘calculator.el’, a desktop calculator for Emacs.

   • Steven L. Baur wrote ‘footnote.el’ which lets you include footnotes
     in email messages; and ‘gnus-audio.el’ and ‘earcon.el’, which
     provide sound effects for Gnus.  He also wrote ‘gnus-setup.el’.

   • Alexander L. Belikoff, Sergey Berezin, Sacha Chua, David Edmondson,
     Noah Friedman, Andreas Fuchs, Mario Lang, Ben Mesander, Lawrence
     Mitchell, Gergely Nagy, Michael Olson, Per Persson, Jorgen Schäfer,
     Alex Schroeder, and Tom Tromey wrote ERC, an advanced Internet
     Relay Chat client (for more information, see the file ‘CREDITS’ in
     the ERC distribution).

   • Scott Bender, Michael Brouwer, Christophe de Dinechin, Carl Edman,
     Christian Limpach and Adrian Robert developed and maintained the
     NeXTstep port of Emacs.

   • Stephen Berman wrote ‘todo-mode.el’ (based on the original version
     by Oliver Seidel), a package for maintaining ‘TODO’ list files.

   • Anna M. Bigatti wrote ‘cal-html.el’, which produces HTML calendars.

   • Ray Blaak and Simon South wrote ‘opascal.el’, a mode for editing
     Object Pascal source code.

   • Martin Blais, Stefan Merten, and David Goodger wrote ‘rst.el’, a
     mode for editing reStructuredText documents.

   • Jim Blandy wrote Emacs 19’s input system, brought its configuration
     and build process up to the GNU coding standards, and contributed
     to the frame support and multi-face support.  Jim also wrote
     ‘tvi970.el’, terminal support for the TeleVideo 970 terminals; and
     co-wrote ‘wyse50.el’ (q.v.).

   • Per Bothner wrote ‘term.el’, a terminal emulator in an Emacs
     buffer.

   • Terrence M. Brannon wrote ‘landmark.el’, a neural-network robot
     that learns landmarks.

   • Frank Bresz wrote ‘diff.el’, a program to display ‘diff’ output.

   • Peter Breton implemented ‘dirtrack.el’, a library for tracking
     directory changes in shell buffers; ‘filecache.el’, which records
     which directories your files are in; ‘locate.el’, which interfaces
     to the ‘locate’ command; ‘find-lisp.el’, an Emacs Lisp emulation of
     the ‘find’ program; ‘net-utils.el’; and the generic mode feature.

   • Emmanuel Briot wrote ‘xml.el’, an XML parser for Emacs; and
     ‘ada-prj.el’, editing of Ada mode project files, as well as
     co-authoring ‘ada-mode.el’ and ‘ada-xref.el’.

   • Kevin Broadey wrote ‘foldout.el’, providing folding extensions to
     Emacs’s outline modes.

   • David M. Brown wrote ‘array.el’, for editing arrays and other
     tabular data.

   • Włodek Bzyl and Ryszard Kubiak wrote ‘ogonek.el’, a package for
     changing the encoding of Polish characters.

   • Bill Carpenter provided ‘feedmail.el’, a package for massaging
     outgoing mail messages and sending them through various popular
     mailers.

   • Per Cederqvist and Inge Wallin wrote ‘ewoc.el’, an Emacs widget for
     manipulating object collections.  Per Cederqvist, Inge Wallin, and
     Thomas Bellman wrote ‘avl-tree.el’, for balanced binary trees.

   • Hans Chalupsky wrote ‘advice.el’, an overloading mechanism for
     Emacs Lisp functions; and ‘trace.el’, a tracing facility for Emacs
     Lisp.

   • Chris Chase, Carsten Dominik, and J. D. Smith wrote IDLWAVE mode,
     for editing IDL and WAVE CL.

   • Bob Chassell wrote ‘texnfo-upd.el’, ‘texinfo.el’, and
     ‘makeinfo.el’, modes and utilities for working with Texinfo files;
     and ‘page-ext.el’, commands for extended page handling.  He also
     wrote the Emacs Lisp introduction.  *Note (eintr)Top::.

   • Jihyun Cho wrote ‘hanja-util.el’ and ‘hangul.el’, utilities for
     Korean Hanja.

   • Andrew Choi and Yamamoto Mitsuharu wrote the Carbon support, used
     prior to Emacs 23 for macOS.  Yamamoto Mitsuharu continued to
     contribute to macOS support in the newer Nextstep port; and also
     improved support for multi-monitor displays.

   • Chong Yidong was the Emacs co-maintainer from Emacs 23 to 24.3.  He
     made many improvements to the Emacs display engine.  He also wrote
     ‘tabulated-list.el’, a generic major mode for lists of data; and
     improved support for themes and packages.

   • James Clark wrote SGML mode, a mode for editing SGML documents; and
     nXML mode, a mode for editing XML documents.  He also contributed
     to Emacs’s dumping procedures.

   • Mike Clarkson wrote ‘edt.el’, an emulation of DEC’s EDT editor.

   • Glynn Clements provided ‘gamegrid.el’ and a couple of games that
     use it, Snake and Tetris.

   • Andrew Cohen wrote ‘spam-wash.el’, to decode and clean email before
     it is analyzed for spam.

   • Daniel Colascione wrote the portable dumping code in ‘pdumper.c’
     and elsewhere.  He also implemented double-buffering for X-based
     GUI frames, and the original support for loading shared-object
     modules into Emacs.

   • Theresa O’Connor wrote ‘json.el’, a file for parsing and generating
     JSON files.

   • Andrea Corallo wrote the native compilation support in ‘comp.c’ and
     ‘comp.el’, for compiling Emacs Lisp to native code using
     ‘libgccjit’.

   • Georges Brun-Cottan and Stefan Monnier wrote ‘easy-mmode.el’, a
     package for easy definition of major and minor modes.

   • Andrew Csillag wrote M4 mode (‘m4-mode.el’).

   • Doug Cutting and Jamie Zawinski wrote ‘disass.el’, a disassembler
     for compiled Emacs Lisp code.

   • Mathias Dahl wrote ‘image-dired.el’, a package for viewing image
     files as thumbnails.

   • Julien Danjou wrote an implementation of desktop notifications
     (‘notifications.el’, and related packages for ERC and Gnus); and
     ‘color.el’, a library for general color manipulation.  He also made
     various contributions to Gnus.

   • Vivek Dasmohapatra wrote ‘htmlfontify.el’, to convert a buffer or
     source tree to HTML.

   • Matthieu Devin wrote ‘delsel.el’, a package to make newly-typed
     text replace the current selection.

   • Eric Ding wrote ‘goto-addr.el’,

   • Jan Djärv added support for the GTK+ toolkit and X drag-and-drop.
     He also wrote ‘dynamic-setting.el’.

   • Carsten Dominik wrote RefTeX, a package for setting up labels and
     cross-references in LaTeX documents; and co-wrote IDLWAVE mode
     (q.v.).  He was the original author of Org mode, for maintaining
     notes, todo lists, and project planning.  Bastien Guerry
     subsequently took over maintainership.  Benjamin Andresen, Thomas
     Baumann, Joel Boehland, Jan Böcker, Lennart Borgman, Baoqiu Cui,
     Dan Davison, Christian Egli, Eric S. Fraga, Daniel German, Chris
     Gray, Konrad Hinsen, Tassilo Horn, Philip Jackson, Martyn Jago,
     Thorsten Jolitz, Jambunathan K, Tokuya Kameshima, Sergey Litvinov,
     David Maus, Ross Patterson, Juan Pechiar, Sebastian Rose, Eric
     Schulte, Paul Sexton, Ulf Stegemann, Andy Stewart, Christopher
     Suckling, David O’Toole, John Wiegley, Zhang Weize, Piotr
     Zieliński, and others also wrote various Org mode components.  For
     more information, *note (org)History and Acknowledgments::.

   • Scott Draves wrote ‘tq.el’, help functions for maintaining
     transaction queues between Emacs and its subprocesses.

   • Benjamin Drieu wrote ‘pong.el’, an implementation of the classical
     pong game.

   • Viktor Dukhovni wrote support for dumping under SunOS version 4.

   • John Eaton and Kurt Hornik wrote Octave mode.

   • Rolf Ebert, Markus Heritsch, and Emmanuel Briot wrote Ada mode.

   • Paul Eggert integrated the Gnulib portability library, and made
     many other portability fixes to the C code; as well as his
     contributions to VC and the calendar.

   • Stephen Eglen wrote ‘mspools.el’, which tells you which Procmail
     folders have mail waiting in them.

   • Torbjörn Einarsson wrote ‘f90.el’, a mode for Fortran 90 files.

   • Tsugutomo Enami co-wrote the support for international character
     sets.

   • David Engster wrote ‘mairix.el’ and ‘nnmairix.el’, an interface to
     the Mairix indexing tool.

   • Hans Henrik Eriksen wrote ‘simula.el’, a mode for editing SIMULA 87
     code.

   • Michael Ernst wrote ‘reposition.el’, a command for recentering a
     function’s source code and preceding comment on the screen.

   • Ata Etemadi wrote ‘cdl.el’, functions for working with Common Data
     Language source code.

   • Frederick Farnbach implemented ‘morse.el’, which converts text to
     Morse code.

   • Oscar Figueiredo wrote EUDC, the Emacs Unified Directory Client,
     which is an interface to directory servers via LDAP, CCSO PH/QI, or
     BBDB; and ‘ldap.el’, the LDAP client interface.

   • Fred Fish wrote the support for dumping COFF executable files.

   • Karl Fogel wrote ‘bookmark.el’, which implements named
     placeholders; ‘mail-hist.el’, a history mechanism for outgoing mail
     messages; and ‘saveplace.el’, for preserving point’s location in
     files between editing sessions.

   • Gary Foster wrote ‘scroll-all.el’, a mode for scrolling several
     buffers together.

   • Romain Francoise contributed ACL (Access Control List) support, for
     preserving extended file attributes on backup and copy.

   • Noah Friedman wrote ‘rlogin.el’, an interface to Rlogin,
     ‘type-break.el’, which reminds you to take periodic breaks from
     typing, and ‘eldoc-mode’, a mode to show the defined parameters or
     the doc string for the Lisp function near point.

   • Shigeru Fukaya wrote a testsuite for the byte-compiler.

   • Keith Gabryelski wrote ‘hexl.el’, a mode for editing binary files.

   • Kevin Gallagher rewrote and enhanced the EDT emulation, and wrote
     ‘flow-ctrl.el’, a package for coping with unsuppressible XON/XOFF
     flow control.

   • Fabián E. Gallina rewrote ‘python.el’, the major mode for the
     Python programming language used in Emacs 24.3 onwards.

   • Kevin Gallo added multiple-frame support for Windows NT and wrote
     ‘w32-win.el’, support functions for the MS-Windows window system.

   • Juan León Lahoz García wrote ‘wdired.el’, a package for performing
     file operations by directly editing Dired buffers.

   • Howard Gayle wrote much of the C and Lisp code for display tables
     and case tables.  He also wrote ‘rot13.el’, a command to display
     the plain-text form of a buffer encoded with the Caesar cipher;
     ‘vt100-led.el’, a package for controlling the LEDs on
     VT100-compatible terminals; and much of the support for ISO-8859
     European character sets (which includes ‘iso-ascii.el’,
     ‘iso-insert.el’, ‘iso-swed.el’, ‘iso-syntax.el’, ‘iso-transl.el’,
     and ‘swedish.el’).

   • Stephen Gildea made the Emacs quick reference card, and made many
     contributions for ‘time-stamp.el’, a package for maintaining
     last-change time stamps in files.

   • Julien Gilles wrote ‘gnus-ml.el’, a mailing list minor mode for
     Gnus.

   • David Gillespie wrote the Common Lisp compatibility packages;
     ‘Calc’, an advanced calculator and mathematical tool, since
     maintained and developed by Jay Belanger; ‘complete.el’, a partial
     completion mechanism; and ‘edmacro.el’, a package for editing
     keyboard macros.

   • Bob Glickstein wrote ‘sregex.el’, a facility for writing regexps
     using a Lisp-like syntax.

   • Boris Goldowsky wrote ‘avoid.el’, a package to keep the mouse
     cursor out of the way of the text cursor; ‘shadowfile.el’, a
     package for keeping identical copies of files in more than one
     place; ‘format.el’, a package for reading and writing files in
     various formats; ‘enriched.el’, a package for saving text
     properties in files; ‘facemenu.el’, a package for specifying faces;
     and ‘descr-text.el’, describing text and character properties.

   • Michelangelo Grigni wrote ‘ffap.el’ which visits a file, taking the
     file name from the buffer.

   • Odd Gripenstam wrote ‘dcl-mode.el’ for editing DCL command files.

   • Michael Gschwind wrote ‘iso-cvt.el’, a package to convert between
     the ISO 8859-1 character set and the notations for non-ASCII
     characters used by TeX and net tradition.

   • Bastien Guerry wrote ‘gnus-bookmark.el’, bookmark support for Gnus;
     as well as helping to maintain Org mode (q.v.).

   • Henry Guillaume wrote ‘find-file.el’, a package to visit files
     related to the currently visited file.

   • Doug Gwyn wrote the portable ‘alloca’ implementation.

   • Ken’ichi Handa implemented most of the support for international
     character sets, and wrote most of the Emacs 23 font handling code.
     He also wrote ‘composite.el’, which provides a minor mode that
     composes characters automatically when they are displayed;
     ‘isearch-x.el’, a facility for searching non-ASCII text; and
     ‘ps-bdf.el’, a BDF font support for printing non-ASCII text on a
     PostScript printer.  Together with Naoto Takahashi, he wrote
     ‘quail.el’, an input facility for typing non-ASCII text from an
     ASCII keyboard.

   • Jesper Harder wrote ‘yenc.el’, for decoding yenc encoded messages.

   • Alexandru Harsanyi wrote a library for accessing SOAP web services.

   • K. Shane Hartman wrote ‘chistory.el’ and ‘echistory.el’, packages
     for browsing command history lists; ‘electric.el’ and ‘helper.el’,
     which provide an alternative command loop and appropriate help
     facilities; ‘emacsbug.el’, a package for reporting Emacs bugs;
     ‘picture.el’, a mode for editing ASCII pictures; and ‘view.el’, a
     package for perusing files and buffers without editing them.

   • John Heidemann wrote ‘mouse-copy.el’ and ‘mouse-drag.el’, which
     provide alternative mouse-based editing and scrolling features.

   • Jon K Hellan wrote ‘utf7.el’, support for mail-safe transformation
     format of Unicode.

   • Karl Heuer wrote the original blessmail script, implemented the
     ‘intangible’ text property, and rearranged the structure of the
     ‘Lisp_Object’ type to allow for more data bits.

   • Manabu Higashida ported Emacs to MS-DOS.

   • Anders Holst wrote ‘hippie-exp.el’, a versatile completion and
     expansion package.

   • Tassilo Horn wrote DocView mode, allowing viewing of PDF,
     PostScript and DVI documents.

   • Khaled Hosny, Yamamoto Mitsuharu, and Eli Zaretskii implemented
     text shaping with HarfBuzz for Emacs.

   • Joakim Hove wrote ‘html2text.el’, a html to plain text converter.

   • Denis Howe wrote ‘browse-url.el’, a package for invoking a WWW
     browser to display a URL.

   • Lars Magne Ingebrigtsen was the Emacs (co-)maintainer from Emacs
     27.2 onwards.  He did a major redesign of the Gnus news-reader and
     wrote many of its parts.  Several of these are now general
     components of Emacs, including: ‘dns.el’ for Domain Name Service
     lookups; ‘format-spec.el’ for formatting arbitrary format strings;
     ‘netrc.el’ for parsing of ‘.netrc’ files; and ‘time-date.el’ for
     general date and time handling.  He also wrote ‘network-stream.el’,
     for opening network processes; ‘url-queue.el’, for controlling
     parallel downloads of URLs; and implemented libxml2 support.  He
     also wrote ‘eww.el’, an Emacs Lisp web browser; and implemented
     native zlib decompression.  Components of Gnus have also been
     written by: Nagy Andras, David Blacka, Scott Byer, Ludovic Courtès,
     Julien Danjou, Kevin Greiner, Kai Großjohann, Joe Hildebrand, Paul
     Jarc, Simon Josefsson, Sascha Lüdecke, David Moore, Jim Radford,
     Benjamin Rutt, Raymond Scholz, Thomas Steffen, Reiner Steib, Jan
     Tatarik, Didier Verna, Ilja Weis, Katsumi Yamaoka, Teodor Zlatanov,
     and others (*note (gnus)Contributors::).

   • Andrew Innes contributed extensively to the MS-Windows support.

   • Seiichiro Inoue improved Emacs’s XIM support.

   • Philip Jackson wrote ‘find-cmd.el’, to build a ‘find’ command-line.

   • Ulf Jasper wrote ‘icalendar.el’, a package for converting Emacs
     diary entries to and from the iCalendar format; ‘newsticker.el’, an
     RSS and Atom based Newsticker; and ‘bubbles.el’, a puzzle game.

   • Kyle Jones wrote ‘life.el’, a package to play Conway’s Game of
     Life.

   • Terry Jones wrote ‘shadow.el’, a package for finding potential
     load-path problems when some Lisp file shadows another.

   • Simon Josefsson wrote ‘dns-mode.el’, an editing mode for Domain
     Name System master files; ‘dig.el’, a Domain Name System interface;
     ‘flow-fill.el’, a package for interpreting RFC2646 formatted text
     in messages; ‘fringe.el’, a package for customizing the fringe;
     ‘imap.el’, an Emacs Lisp library for talking to IMAP servers;
     ‘password-cache.el’, a password reader; ‘nnimap.el’, the IMAP
     back-end for Gnus; ‘url-imap.el’ for the URL library; ‘rfc2104.el’,
     a hashed message authentication facility; the Gnus S/MIME and Sieve
     components; and ‘tls.el’ and ‘starttls.el’ for the Transport Layer
     Security protocol.

   • Arne Jørgensen wrote ‘latexenc.el’, a package to automatically
     guess the correct coding system in LaTeX files.

   • Alexandre Julliard wrote ‘vc-git.el’, support for the Git version
     control system.

   • Tomoji Kagatani implemented ‘smtpmail.el’, used for sending out
     mail with SMTP.

   • Ivan Kanis wrote ‘vc-hg.el’, support for the Mercurial version
     control system.

   • Henry Kautz wrote ‘bib-mode.el’, a mode for maintaining
     bibliography databases compatible with ‘refer’ (the ‘troff’
     version) and ‘lookbib’, and ‘refbib.el’, a package to convert those
     databases to the format used by the LaTeX text formatting package.

   • Taichi Kawabata added support for Devanagari script and the Indian
     languages, and wrote ‘ucs-normalize.el’ for Unicode normalization.

   • Taro Kawagishi implemented the MD4 Message Digest Algorithm in
     Lisp; and wrote ‘ntlm.el’ and ‘sasl-ntlm.el’ for NT LanManager
     authentication support.

   • Howard Kaye wrote ‘sort.el’, commands to sort text in Emacs
     buffers.

   • Michael Kifer wrote ‘ediff’, an interactive interface to the
     ‘diff’, ‘patch’, and ‘merge’ programs; and Viper, an emulator of
     the VI editor.

   • Richard King wrote the first version of ‘userlock.el’ and
     ‘filelock.c’, which provide simple support for multiple users
     editing the same file.  He also wrote the initial version of
     ‘uniquify.el’, a facility to make buffer names unique by adding
     parts of the file’s name to the buffer name.

   • Peter Kleiweg wrote ‘ps-mode.el’, a mode for editing PostScript
     files and running a PostScript interpreter interactively from
     within Emacs.

   • Karel Klíč contributed SELinux support, for preserving the
     Security-Enhanced Linux context of files on backup and copy.

   • Shuhei Kobayashi wrote ‘hex-util.el’, for operating on hexadecimal
     strings; and support for HMAC (Keyed-Hashing for Message
     Authentication).

   • Pavel Kobyakov wrote ‘flymake.el’, a minor mode for performing
     on-the-fly syntax checking.

   • David M. Koppelman wrote ‘hi-lock.el’, a minor mode for interactive
     automatic highlighting of parts of the buffer text.

   • Koseki Yoshinori wrote ‘iimage.el’, a minor mode for displaying
     inline images.

   • Robert Krawitz wrote the original ‘xmenu.c’, part of Emacs’s pop-up
     menu support.

   • Sebastian Kremer wrote ‘dired-mode’, with contributions by Lawrence
     R. Dodd.  He also wrote ‘ls-lisp.el’, a Lisp emulation of the ‘ls’
     command for platforms that don’t have ‘ls’ as a standard program.

   • David Kågedal wrote ‘tempo.el’, providing support for easy
     insertion of boilerplate text and other common constructions.

   • Igor Kuzmin wrote ‘cconv.el’, providing closure conversion for
     statically scoped Emacs lisp.

   • Daniel LaLiberte wrote ‘edebug.el’, a source-level debugger for
     Emacs Lisp; ‘cl-specs.el’, specifications to help ‘edebug’ debug
     code written using David Gillespie’s Common Lisp support; and
     ‘isearch.el’, Emacs’s incremental search minor mode.  He also
     co-wrote ‘hideif.el’ (q.v.).

   • Karl Landstrom and Daniel Colascione wrote ‘js.el’, a mode for
     editing JavaScript.

   • Vinicius Jose Latorre wrote the Emacs printing facilities, as well
     as ‘ps-print’ (with Jim Thompson, Jacques Duthen, and Kenichi
     Handa), a package for pretty-printing Emacs buffers to PostScript
     printers; ‘delim-col.el’, a package to arrange text into columns;
     ‘ebnf2ps.el’, a package that translates EBNF grammar to a syntactic
     chart that can be printed to a PostScript printer; and
     ‘whitespace.el’, a package that detects and cleans up excess
     whitespace in a file (building on an earlier version by Rajesh
     Vaidheeswarran).

   • Frederic Lepied wrote ‘expand.el’, which uses the abbrev mechanism
     for inserting programming constructs.

   • Peter Liljenberg wrote ‘elint.el’, a Lint-style code checker for
     Emacs Lisp programs.

   • Lars Lindberg wrote ‘msb.el’, which provides more flexible menus
     for buffer selection; co-wrote ‘imenu.el’ (q.v.); and rewrote
     ‘dabbrev.el’, originally written by Don Morrison.

   • Anders Lindgren wrote ‘autorevert.el’, a package for automatically
     reverting files visited by Emacs that were changed on disk;
     ‘cwarn.el’, a package to highlight suspicious C and C++ constructs;
     and ‘follow.el’, a minor mode to synchronize windows that show the
     same buffer.

   • Thomas Link wrote ‘filesets.el’, a package for handling sets of
     files.

   • Juri Linkov wrote ‘misearch.el’, extending isearch to multi-buffer
     searches; the code in ‘files-x.el’ for handling file- and
     directory-local variables; and the ‘info-finder’ feature that
     creates a virtual Info manual of package keywords.  He also
     implemented the Tab Bar and window tab-lines, and added numerous
     enhancements and improvements in I-search.

   • Leo Liu wrote ‘pcmpl-x.el’, providing completion for miscellaneous
     external tools; and revamped support for Octave in Emacs 24.4.

   • Károly Lőrentey wrote the multi-terminal code, which allows Emacs
     to run on graphical and text terminals simultaneously.

   • Martin Lorentzon wrote ‘vc-annotate.el’, support for version
     control annotation.

   • Dave Love wrote much of the code dealing with Unicode support and
     Latin-N unification.  He added support for many coding systems,
     including the various UTF-7 and UTF-16 coding systems.  He also
     wrote ‘autoarg-mode’, a global minor mode whereby digit keys supply
     prefix arguments; ‘autoarg-kp-mode’, which redefines the keypad
     numeric keys to digit arguments; ‘autoconf.el’, a mode for editing
     Autoconf files; ‘cfengine.el’, a mode for editing Cfengine files;
     ‘elide-head.el’, a package for eliding boilerplate text from file
     headers; ‘hl-line.el’, a minor mode for highlighting the line in
     the current window on which point is; ‘cap-words.el’, a minor mode
     for motion in ‘CapitalizedWordIdentifiers’; ‘latin1-disp.el’, a
     package that lets you display ISO 8859 characters on Latin-1
     terminals by setting up appropriate display tables; the version of
     ‘python.el’ used prior to Emacs 24.3; ‘smiley.el’, a facility for
     displaying smiley faces; ‘sym-comp.el’, a library for performing
     mode-dependent symbol completion; ‘benchmark.el’ for timing code
     execution; and ‘tool-bar.el’, a mode to control the display of the
     Emacs tool bar.  With Riccardo Murri he wrote ‘vc-bzr.el’, support
     for the Bazaar version control system.

   • Eric Ludlam wrote the Speedbar package; ‘checkdoc.el’, for checking
     doc strings in Emacs Lisp programs; ‘dframe.el’, providing
     dedicated frame support modes; ‘ezimage.el’, a generalized way to
     place images over text; ‘chart.el’ for drawing bar charts etc.; and
     the EIEIO (Enhanced Implementation of Emacs Interpreted Objects)
     package.  He was also the main author of the CEDET (Collection of
     Emacs Development Environment Tools) package.  Portions were also
     written by Jan Moringen, David Ponce, and Joakim Verona.

   • Roland McGrath wrote ‘compile.el’ (since updated by Daniel
     Pfeiffer), a package for running compilations in a buffer, and then
     visiting the locations reported in error messages; ‘etags.el’, a
     package for jumping to function definitions and searching or
     replacing in all the files mentioned in a ‘TAGS’ file; with
     Sebastian Kremer ‘find-dired.el’, for using ‘dired’ commands on
     output from the ‘find’ program; ‘grep.el’ for running the ‘grep’
     command; ‘map-ynp.el’, a general purpose boolean question-asker;
     ‘autoload.el’, providing semi-automatic maintenance of autoload
     files.

   • Alan Mackenzie wrote the integrated AWK support in CC Mode, and
     maintained CC Mode from Emacs 22 onwards.

   • Michael McNamara and Wilson Snyder wrote Verilog mode.

   • Christopher J. Madsen wrote ‘decipher.el’, a package for cracking
     simple substitution ciphers.

   • Neil M. Mager wrote ‘appt.el’, functions to notify users of their
     appointments.  It finds appointments recorded in the diary files
     used by the ‘calendar’ package.

   • Ken Manheimer wrote ‘allout.el’, a mode for manipulating and
     formatting outlines, and ‘icomplete.el’, which provides incremental
     completion feedback in the minibuffer.

   • Bill Mann wrote ‘perl-mode.el’, a mode for editing Perl code.

   • Brian Marick and Daniel LaLiberte wrote ‘hideif.el’, support for
     hiding selected code within C ‘#ifdef’ clauses.

   • Simon Marshall wrote ‘regexp-opt.el’, which generates a regular
     expression from a list of strings; and the fast-lock and lazy-lock
     font-lock support modes.  He also extended ‘comint.el’ and
     ‘shell.el’, originally written by Olin Shivers.

   • Bengt Martensson, Dirk Herrmann, Marc Shapiro, Mike Newton, Aaron
     Larson, and Stefan Schoef, wrote ‘bibtex.el’, a mode for editing
     BibTeX bibliography files.

   • Charlie Martin wrote ‘autoinsert.el’, which provides automatic
     mode-sensitive insertion of text into new files.

   • Yukihiro Matsumoto and Nobuyoshi Nakada wrote Ruby-mode.

   • Tomohiro Matsuyama wrote the native Elisp profiler.

   • Thomas May wrote ‘blackbox.el’, a version of the traditional
     blackbox game.

   • David Megginson wrote ‘derived.el’, which allows one to define new
     major modes by inheriting key bindings and commands from existing
     major modes.

   • Jimmy Aguilar Mena wrote the code to support the ‘:extend’ face
     attribute, and also implemented the optional
     ‘display-fill-column-indicator’ feature.

   • Will Mengarini wrote ‘repeat.el’, a command to repeat the preceding
     command with its arguments.

   • Richard Mlynarik wrote ‘cl-indent.el’, a package for indenting
     Common Lisp code; ‘ebuff-menu.el’, an electric browser for buffer
     listings; ‘ehelp.el’, bindings for browsing help screens; and
     ‘rfc822.el’, a parser for E-mail addresses in the format used in
     mail messages and news articles (Internet RFC 822 and its
     successors).

   • Gerd Möllmann was the Emacs maintainer from the beginning of Emacs
     21 development until the release of 21.1.  He wrote the new display
     engine used from Emacs 21 onwards, and the asynchronous timers
     facility.  He also wrote ‘ebrowse’, the C++ browser; ‘jit-lock.el’,
     the Just-In-Time font-lock support mode; ‘tooltip.el’, a package
     for displaying tooltips; ‘authors.el’, a package for maintaining
     the ‘AUTHORS’ file; and ‘rx.el’, a regular expression constructor.

   • Stefan Monnier was the Emacs (co-)maintainer from Emacs 23 until
     late in the development of 25.1.  He added support for Arch and
     Subversion to VC, re-wrote much of the Emacs server to use the
     built-in networking primitives, and re-wrote the abbrev and
     minibuffer completion code for Emacs 23.  He also wrote ‘PCL-CVS’,
     a directory-level front end to the CVS version control system;
     ‘reveal.el’, a minor mode for automatically revealing invisible
     text; ‘smerge-mode.el’, a minor mode for resolving ‘diff3’
     conflicts; ‘diff-mode.el’, a mode for viewing and editing context
     diffs; ‘css-mode.el’ for Cascading Style Sheets; ‘bibtex-style.el’
     for BibTeX Style files; ‘mpc.el’, a client for the Music Player
     Daemon (MPD); ‘smie.el’, a generic indentation engine; and
     ‘pcase.el’, implementing ML-style pattern matching.  In Emacs 24,
     he integrated the lexical binding code, cleaned up the CL namespace
     (making it acceptable to use CL functions at runtime), added
     generalized variables to core Emacs Lisp, and implemented a new
     lightweight advice mechanism.

   • Morioka Tomohiko wrote several packages for MIME support in Gnus
     and elsewhere.

   • Sen Nagata wrote ‘crm.el’, a package for reading multiple strings
     with completion, and ‘rfc2368.el’, support for ‘mailto:’ URLs.

   • Erik Naggum wrote the time-conversion functions.  He also wrote
     ‘disp-table.el’, for dealing with display tables; ‘mailheader.el’,
     for parsing email headers; and ‘parse-time.el’, for parsing time
     strings.

   • Takahashi Naoto co-wrote ‘quail.el’ (q.v.), and wrote ‘robin.el’,
     another input method.

   • Thomas Neumann and Eric Raymond wrote ‘make-mode.el’, a mode for
     editing makefiles.

   • Thien-Thi Nguyen and Dan Nicolaescu wrote ‘hideshow.el’, a minor
     mode for selectively displaying blocks of text.

   • Dan Nicolaescu added support for running Emacs as a daemon.  He
     also wrote ‘romanian.el’, support for editing Romanian text;
     ‘iris-ansi.el’, support for running Emacs on SGI’s ‘xwsh’ and
     ‘winterm’ terminal emulators; and ‘vc-dir.el’, displaying the
     status of version-controlled directories.

   • Hrvoje Nikšić wrote ‘savehist.el’, for saving the minibuffer
     history between Emacs sessions.

   • Jeff Norden wrote ‘kermit.el’, a package to help the Kermit dialup
     communications program run comfortably in an Emacs shell buffer.

   • Andrew Norman wrote ‘ange-ftp.el’, providing transparent FTP
     support.

   • Kentaro Ohkouchi created the Emacs icons used beginning with Emacs
     23.

   • Christian Ohler wrote ‘ert.el’, a library for automated regression
     testing.

   • Alexandre Oliva wrote ‘gnus-mlspl.el’, a group params-based mail
     splitting mechanism.

   • Takaaki Ota wrote ‘table.el’, a package for creating and editing
     embedded text-based tables.

   • Pieter E. J. Pareit wrote ‘mixal-mode.el’, an editing mode for the
     MIX assembly language.

   • David Pearson wrote ‘quickurl.el’, a simple method of inserting a
     URL into the current buffer based on text at point; ‘5x5.el’, a
     game to fill all squares on the field.

   • Jeff Peck wrote ‘sun.el’, key bindings for sunterm keys.

   • Damon Anton Permezel wrote ‘hanoi.el’, an animated demonstration of
     the Towers of Hanoi puzzle.

   • William M. Perry wrote ‘mailcap.el’ (with Lars Magne Ingebrigtsen),
     a MIME media types configuration facility; ‘mwheel.el’, a package
     for supporting mouse wheels; co-wrote (with Dave Love) ‘socks.el’,
     a Socks v5 client; and developed the URL package.

   • Per Persson wrote ‘gnus-vm.el’, the VM interface for Gnus.

   • Jens Petersen wrote ‘find-func.el’, which makes it easy to find the
     source code for an Emacs Lisp function or variable.

   • Nicolas Petton wrote ‘map.el’, a library providing map-manipulation
     functions that work on alists, hash-table and arrays; ‘seq.el’, a
     library providing advanced sequence manipulation functions and
     macros; and ‘thunk.el’, a library providing functions and macros to
     delay the evaluation of forms.  He also created the new icon in
     Emacs 25.

   • Daniel Pfeiffer wrote ‘conf-mode.el’, a mode for editing
     configuration files; ‘copyright.el’, a package for updating
     copyright notices in files; ‘executable.el’, a package for
     executing interpreter scripts; ‘sh-script.el’, a mode for editing
     shell scripts; ‘skeleton.el’, implementing a concise language for
     writing statement skeletons; and ‘two-column.el’, a minor mode for
     simultaneous two-column editing.

     Daniel also rewrote ‘apropos.el’ (originally written by Joe Wells),
     for finding commands, functions, and variables matching a regular
     expression; and, together with Jim Blandy, co-authored ‘wyse50.el’,
     support for Wyse 50 terminals.  He also co-wrote ‘compile.el’
     (q.v.) and ‘ada-stmt.el’.

   • Richard L. Pieri wrote ‘pop3.el’, a Post Office Protocol (RFC 1460)
     interface for Emacs.

   • Fred Pierresteguy and Paul Reilly made Emacs work with X Toolkit
     widgets.

   • François Pinard, Greg McGary, and Bruno Haible wrote ‘po.el’,
     support for PO translation files.

   • Christian Plaunt wrote ‘soundex.el’, an implementation of the
     Soundex algorithm for comparing English words by their
     pronunciation.

   • David Ponce wrote ‘recentf.el’, a package that puts a menu of
     recently visited files in the Emacs menu bar; ‘ruler-mode.el’, a
     minor mode for displaying a ruler in the header line; and
     ‘tree-widget.el’, a package to display hierarchical data
     structures.

   • Francesco A. Potortì wrote ‘cmacexp.el’, providing a command which
     runs the C preprocessor on a region of a file and displays the
     results.  He also expanded and redesigned the ‘etags’ program.

   • Michael D. Prange and Steven A. Wood wrote ‘fortran.el’, a mode for
     editing Fortran code.

   • Ashwin Ram wrote ‘refer.el’, commands to look up references in
     bibliography files by keyword.

   • Eric S. Raymond wrote ‘vc.el’, an interface to the RCS and SCCS
     source code version control systems, with Paul Eggert; ‘gud.el’, a
     package for running source-level debuggers like GDB and SDB in
     Emacs; ‘asm-mode.el’, a mode for editing assembly language code;
     ‘AT386.el’, terminal support package for IBM’s AT keyboards;
     ‘cookie1.el’, support for fortune-cookie programs like ‘yow.el’ and
     ‘spook.el’; ‘finder.el’, a package for finding Emacs Lisp packages
     by keyword and topic; ‘keyswap.el’, code to swap the <BS> and <DEL>
     keys; ‘loadhist.el’, functions for loading and unloading Emacs
     features; ‘lisp-mnt.el’, functions for working with the special
     headers used in Emacs Lisp library files; and code to set and make
     use of the ‘load-history’ lisp variable, which records the source
     file from which each lisp function loaded into Emacs came.

   • Edward M. Reingold wrote the calendar and diary support, with
     contributions from Stewart Clamen (‘cal-mayan.el’), Nachum
     Dershowitz (‘cal-hebrew.el’), Paul Eggert (‘cal-dst.el’), Steve
     Fisk (‘cal-tex.el’), Michael Kifer (‘cal-x.el’), Lara Rios
     (‘cal-menu.el’), and Denis B. Roegel (‘solar.el’).  Andy Oram
     contributed to its documentation.  Reingold also contributed to
     ‘tex-mode.el’, a mode for editing TeX files, as did William F.
     Schelter, Dick King, Stephen Gildea, Michael Prange, and Jacob
     Gore.

   • David Reitter wrote ‘mailclient.el’ which can send mail via the
     system’s designated mail client.

   • Alex Rezinsky wrote ‘which-func.el’, a mode that shows the name of
     the current function in the mode line.

   • Rob Riepel wrote ‘vt-control.el’, providing some control functions
     for the DEC VT line of terminals.

   • Nick Roberts wrote ‘t-mouse.el’, for mouse support in text
     terminals; and ‘gdb-ui.el’, a graphical user interface to GDB.
     Together with Dmitry Dzhus, he wrote ‘gdb-mi.el’, the successor to
     ‘gdb-ui.el’.

   • Danny Roozendaal implemented ‘handwrite.el’, which converts text
     into “handwriting”.

   • Markus Rost wrote ‘cus-test.el’, a testing framework for customize.

   • Guillermo J. Rozas wrote ‘scheme.el’, a mode for editing Scheme and
     DSSSL code.

   • Martin Rudalics implemented improved display-buffer handling in
     Emacs 24; and implemented pixel-wise resizing of windows and
     frames.

   • Ivar Rummelhoff wrote ‘winner.el’, which records recent window
     configurations so you can move back to them.

   • Jason Rumney ported the Emacs 21 display engine to MS-Windows, and
     has contributed extensively to the MS-Windows port of Emacs.

   • Wolfgang Rupprecht wrote Emacs 19’s floating-point support
     (including ‘float-sup.el’ and ‘floatfns.c’).

   • Kevin Ryde wrote ‘info-xref.el’, a library for checking references
     in Info files.

   • Phil Sainty wrote ‘so-long.el’, a set of features for easier
     editing of files with very long lines.

   • James B. Salem and Brewster Kahle wrote ‘completion.el’, providing
     dynamic word completion.

   • Holger Schauer wrote ‘fortune.el’, a package for using fortune in
     message signatures.

   • William Schelter wrote ‘telnet.el’, support for ‘telnet’ sessions
     within Emacs.

   • Ralph Schleicher wrote ‘battery.el’, a package for displaying
     laptop computer battery status, and ‘info-look.el’, a package for
     looking up Info documentation for symbols in the buffer.

   • Michael Schmidt and Tom Perrine wrote ‘modula2.el’, a mode for
     editing Modula-2 code, based on work by Mick Jordan and Peter
     Robinson.

   • Ronald S. Schnell wrote ‘dunnet.el’, a text adventure game.

   • Philippe Schnoebelen wrote ‘gomoku.el’, a Go Moku game played
     against Emacs; and ‘mpuz.el’, a multiplication puzzle.

   • Jan Schormann wrote ‘solitaire.el’, an implementation of the
     Solitaire game.

   • Alex Schroeder wrote ‘ansi-color.el’, a package for translating
     ANSI color escape sequences to Emacs faces; ‘sql.el’, a package for
     interactively running an SQL interpreter in an Emacs buffer;
     ‘cus-theme.el’, an interface for custom themes; ‘master.el’, a
     package for making a buffer ‘master’ over another; and
     ‘spam-stat.el’, for statistical detection of junk email.  He also
     wrote parts of the IRC client ERC (q.v.).

   • Randal Schwartz wrote ‘pp.el’, a pretty-printer for lisp objects.

   • Manuel Serrano wrote the Flyspell package, which does spell
     checking as you type.

   • Hovav Shacham wrote ‘windmove.el’, a set of commands for selecting
     windows based on their geometrical position on the frame.

   • Stanislav Shalunov wrote ‘uce.el’, for responding to unsolicited
     commercial email.

   • Richard Sharman wrote ‘hilit-chg.el’, which uses colors to show
     recent editing changes.

   • Olin Shivers wrote ‘comint.el’, a library for modes running
     interactive command-line-oriented subprocesses, and ‘shell.el’, for
     running inferior shells (both since extended by Simon Marshall);
     ‘cmuscheme.el’, for running inferior Scheme processes;
     ‘inf-lisp.el’, for running inferior Lisp process.

   • Espen Skoglund wrote ‘pascal.el’, a mode for editing Pascal code.

   • Rick Sladkey wrote ‘backquote.el’, a lisp macro for creating
     mostly-constant data.

   • Lynn Slater wrote ‘help-macro.el’, a macro for writing interactive
     help for key bindings.

   • Chris Smith wrote ‘icon.el’, a mode for editing Icon code.

   • David Smith wrote ‘ielm.el’, a mode for interacting with the Emacs
     Lisp interpreter as a subprocess.

   • Paul D. Smith wrote ‘snmp-mode.el’.

   • William Sommerfeld wrote ‘scribe.el’, a mode for editing Scribe
     files, and ‘server.el’, a package allowing programs to send files
     to an extant Emacs job to be edited.

   • Andre Spiegel made many contributions to the Emacs Version Control
     package, and in particular made it support multiple back ends.

   • Michael Staats wrote ‘pc-select.el’, which rebinds keys for
     selecting regions to follow many other systems.

   • Richard Stallman invented Emacs.  He is the original author of GNU
     Emacs, and has been Emacs maintainer over several non-contiguous
     periods.  In addition to much of the core Emacs code, he has
     written ‘easymenu.el’, a facility for defining Emacs menus;
     ‘image-mode.el’, support for visiting image files; ‘menu-bar.el’,
     the Emacs menu bar support code; ‘paren.el’, a package to make
     matching parentheses stand out in color; and also co-authored
     portions of CC mode.

   • Sam Steingold wrote ‘midnight.el’, a package for running a command
     every midnight.

   • Ake Stenhoff and Lars Lindberg wrote ‘imenu.el’, a framework for
     browsing indices made from buffer contents.

   • Peter Stephenson wrote ‘vcursor.el’, which implements a virtual
     cursor that you can move with the keyboard and use for copying
     text.

   • Ken Stevens wrote ‘ispell.el’, a spell-checker interface.

   • Kim F. Storm made many improvements to the Emacs display engine,
     process support, and networking support.  He also wrote
     ‘bindat.el’, a package for encoding and decoding binary data; CUA
     mode, which allows Emacs to emulate the standard CUA key bindings;
     ‘ido.el’, a package for selecting buffers and files quickly;
     ‘keypad.el’ for simplified keypad bindings; and ‘kmacro.el’, the
     keyboard macro facility.

   • Martin Stjernholm co-authored CC Mode, a major editing mode for C,
     C++, Objective-C, Java, Pike, CORBA IDL, and AWK code.

   • Steve Strassmann did not write ‘spook.el’, and even if he did, he
     really didn’t mean for you to use it in an anarchistic way.

   • Olaf Sylvester wrote ‘bs.el’, a package for manipulating Emacs
     buffers.

   • Tibor Šimko and Milan Zamazal wrote ‘slovak.el’, support for
     editing text in Slovak language.

   • João Távora wrote many improvements for ‘flymake.el’, an on-the-fly
     syntax-checking package.

   • Luc Teirlinck wrote ‘help-at-pt.el’, providing local help through
     the keyboard.

   • Jean-Philippe Theberge wrote ‘thumbs.el’, a package for viewing
     image files as thumbnails.

   • Spencer Thomas wrote the original ‘dabbrev.el’, providing a command
     which completes the partial word before point, based on other
     nearby words for which it is a prefix.  He also wrote the original
     dumping support.

   • Toru Tomabechi contributed to Tibetan support.

   • Markus Triska wrote ‘linum.el’, a minor mode that displays line
     numbers in the left margin.

   • Tom Tromey and Chris Lindblad wrote ‘tcl.el’, a mode for editing
     Tcl/Tk source files and running a Tcl interpreter as an Emacs
     subprocess.  Tom Tromey also wrote ‘bug-reference.el’, providing
     clickable links to bug reports; and the first version of the Emacs
     package system.

   • Eli Tziperman wrote ‘rmail-spam-filter.el’, a spam filter for
     RMAIL.

   • Daiki Ueno wrote ‘starttls.el’, support for Transport Layer
     Security protocol; ‘sasl-cram.el’ and ‘sasl-digest.el’ (with
     Kenichi Okada), and ‘sasl.el’, support for Simple Authentication
     and Security Layer (SASL); ‘plstore.el’ for secure storage of
     property lists; and the EasyPG (and its predecessor PGG) package,
     for GnuPG and PGP support.

   • Masanobu Umeda wrote GNUS, a feature-rich reader for Usenet news
     that was the ancestor of the current Gnus package.  He also wrote
     ‘rmailsort.el’, a package for sorting messages in RMAIL folders;
     ‘metamail.el’, an interface to the Metamail program;
     ‘gnus-kill.el’, the Kill File mode for Gnus; ‘gnus-mh.el’, an mh-e
     interface for Gnus; ‘gnus-msg.el’, a mail and post interface for
     Gnus; and ‘timezone.el’, providing functions for dealing with time
     zones.

   • Neil W. Van Dyke wrote ‘webjump.el’, a Web hotlist package.

   • Didier Verna wrote ‘rect.el’, a package of functions for operations
     on rectangle regions of text.  He also contributed to Gnus (q.v.).

   • Joakim Verona implemented ImageMagick support.

   • Ulrik Vieth implemented ‘meta-mode.el’, for editing MetaFont code.

   • Geoffrey Voelker wrote the Windows NT support.  He also wrote
     ‘dos-w32.el’, functions shared by the MS-DOS and MS-Windows ports
     of Emacs, and ‘w32-fns.el’, MS-Windows specific support functions.

   • Johan Vromans wrote ‘forms.el’ and its associated files, a mode for
     filling in forms.  He also wrote ‘iso-acc.el’, a minor mode
     providing electric accent keys.

   • Colin Walters wrote Ibuffer, an enhanced buffer menu.

   • Barry Warsaw wrote ‘cc-mode.el’, a mode for editing C, C++, and
     Java code, based on earlier work by Dave Detlefs, Stewart Clamen,
     and Richard Stallman; ‘elp.el’, a profiler for Emacs Lisp programs;
     ‘man.el’, a mode for reading Unix manual pages; ‘regi.el’,
     providing an AWK-like functionality for use in lisp programs;
     ‘reporter.el’, providing customizable bug reporting for lisp
     packages; and ‘supercite.el’, a minor mode for quoting sections of
     mail messages and news articles.

   • Christoph Wedler wrote ‘antlr-mode.el’, a major mode for ANTLR
     grammar files.

   • Morten Welinder helped port Emacs to MS-DOS, and introduced face
     support into the MS-DOS port of Emacs.  He also wrote ‘desktop.el’,
     facilities for saving some of Emacs’s state between sessions;
     ‘timer.el’, the Emacs facility to run commands at a given time or
     frequency, or when Emacs is idle, and its C-level support code;
     ‘pc-win.el’, the MS-DOS “window-system” support; ‘internal.el’, an
     “internal terminal” emulator for the MS-DOS port of Emacs;
     ‘arc-mode.el’, the mode for editing compressed archives;
     ‘s-region.el’, commands for setting the region using the shift key
     and motion commands; and ‘dos-fns.el’, functions for use under
     MS-DOS.

   • Joe Wells wrote the original version of ‘apropos.el’ (q.v.);
     ‘resume.el’, support for processing command-line arguments after
     resuming a suspended Emacs job; and ‘mail-extr.el’, a package for
     extracting names and addresses from mail headers, with
     contributions from Jamie Zawinski.

   • Rodney Whitby and Reto Zimmermann wrote ‘vhdl-mode.el’, a major
     mode for editing VHDL source code.

   • John Wiegley was the Emacs maintainer from Emacs 25 onwards.  He
     wrote ‘align.el’, a set of commands for aligning text according to
     regular-expression based rules; ‘isearchb.el’ for fast buffer
     switching; ‘timeclock.el’, a package for keeping track of time
     spent on projects; the Bahá’í calendar support; ‘pcomplete.el’, a
     programmable completion facility; ‘remember.el’, a mode for jotting
     down things to remember; ‘eudcb-mab.el’, an address book backend
     for the Emacs Unified Directory Client; and ‘eshell’, a command
     shell implemented entirely in Emacs Lisp.  He also contributed to
     Org mode (q.v.).

   • Mike Williams wrote ‘thingatpt.el’, a library of functions for
     finding the “thing” (word, line, s-expression) at point.

   • Roland Winkler wrote ‘proced.el’, a system process editor.

   • Bill Wohler wrote MH-E, the Emacs interface to the MH mail system;
     making use of earlier work by James R. Larus.  Satyaki Das, Peter
     S. Galbraith, Stephen Gildea, and Jeffrey C. Honig also wrote
     various MH-E components.

   • Dale R. Worley wrote ‘emerge.el’, a package for interactively
     merging two versions of a file.

   • Francis J. Wright wrote ‘woman.el’, a package for browsing manual
     pages without the ‘man’ command.

   • Masatake Yamato wrote ‘ld-script.el’, an editing mode for GNU
     linker scripts, and contributed subword handling and style guessing
     in CC mode.

   • Jonathan Yavner wrote ‘testcover.el’, a package for keeping track
     of the testing status of Emacs Lisp code; ‘unsafep.el’ to determine
     if a Lisp form is safe; and the SES spreadsheet package.

   • Ryan Yeske wrote ‘rcirc.el’ a simple Internet Relay Chat client.

   • Ilya Zakharevich and Bob Olson wrote ‘cperl-mode.el’, a major mode
     for editing Perl code.  Ilya Zakharevich also wrote ‘tmm.el’, a
     mode for accessing the Emacs menu bar on a text-mode terminal.

   • Milan Zamazal wrote ‘czech.el’, support for editing Czech text;
     ‘glasses.el’, a package for easier reading of source code that uses
     illegible identifier names; and ‘tildify.el’, commands for adding
     hard spaces to text, TeX, and SGML/HTML files.

   • Victor Zandy wrote ‘zone.el’, a package for people who like to zone
     out in front of Emacs.

   • Eli Zaretskii was the Emacs (co-)maintainer from Emacs 25 onwards.
     He made many standard Emacs features work on MS-DOS and Microsoft
     Windows.  He also wrote ‘tty-colors.el’, which implements
     transparent mapping of X colors to tty colors; and ‘rxvt.el’.  He
     implemented support for bidirectional text, menus on text-mode
     terminals, and built-in display of line numbers.

   • Jamie Zawinski wrote much of the support for faces and X
     selections.  With Hallvard Furuseth, he wrote the optimizing byte
     compiler used from Emacs 19 onwards.  He also wrote
     ‘mailabbrev.el’, a package that provides automatic expansion of
     mail aliases, and ‘tar-mode.el’, which provides simple viewing and
     editing commands for tar files.

   • Andrew Zhilin created the Emacs 22 icons.

   • Shenghuo Zhu wrote ‘binhex.el’, a package for reading and writing
     binhex files; ‘mm-partial.el’, message/partial support for MIME
     messages; ‘rfc1843.el’, an HZ decoding package; ‘uudecode.el’, an
     Emacs Lisp decoder for uuencoded data; and ‘webmail.el’, an
     interface to Web mail.  He also wrote several other Gnus
     components.

   • Ian T. Zimmerman wrote ‘gametree.el’.

   • Reto Zimmermann wrote ‘vera-mode.el’.

   • Neal Ziring and Felix S. T. Wu wrote ‘vi.el’, an emulation of the
     VI text editor.

   • Ted Zlatanov (as well as his contributions to the Gnus newsreader)
     wrote an interface to the GnuTLS library, for secure network
     connections; and a futures facility for the URL library.

   • Detlev Zundel wrote ‘re-builder.el’, a package for building regexps
     with visual feedback.


File: emacs.info,  Node: Key Index,  Next: Option Index,  Prev: Acknowledgments,  Up: Top

# /. Key (Character) Index
*************************

 [index ]
* Menu:

* ! (Dired):                             Shell Commands in Dired.
                                                              (line   6)
* " (TeX mode):                          TeX Editing.         (line  21)
* # (Dired):                             Flagging Many Files. (line  30)
* $ (Dired):                             Hiding Subdirectories.
                                                              (line  10)
* % & (Dired):                           Flagging Many Files. (line  50)
* % (Buffer Menu):                       Several Buffers.     (line  77)
* % C (Dired):                           Transforming File Names.
                                                              (line  33)
* % d (Dired):                           Flagging Many Files. (line  56)
* % g (Dired):                           Marks vs Flags.      (line 128)
* % H (Dired):                           Transforming File Names.
                                                              (line  34)
* % l (Dired):                           Transforming File Names.
                                                              (line  27)
* % m (Dired):                           Marks vs Flags.      (line 119)
* % R (Dired):                           Transforming File Names.
                                                              (line  32)
* % S (Dired):                           Transforming File Names.
                                                              (line  35)
* % u (Dired):                           Transforming File Names.
                                                              (line  21)
* % Y (Dired):                           Transforming File Names.
                                                              (line  36)
* ( (Dired):                             Misc Dired Features. (line  50)
* ( (Package Menu):                      Package Menu.        (line 105)
* * ! (Dired):                           Marks vs Flags.      (line  64)
* * % (Dired):                           Marks vs Flags.      (line 119)
* * * (Dired):                           Marks vs Flags.      (line  30)
* * / (Dired):                           Marks vs Flags.      (line  38)
* * ? (Dired):                           Marks vs Flags.      (line  69)
* * @ (Dired):                           Marks vs Flags.      (line  34)
* * c (Dired):                           Marks vs Flags.      (line  97)
* * C-n (Dired):                         Marks vs Flags.      (line  83)
* * C-p (Dired):                         Marks vs Flags.      (line  88)
* * DEL (Dired):                         Marks vs Flags.      (line  56)
* * m (Dired):                           Marks vs Flags.      (line  17)
* * N (Dired):                           Marks vs Flags.      (line  26)
* * s (Dired):                           Marks vs Flags.      (line  43)
* * t (Dired):                           Marks vs Flags.      (line  92)
* * u (Dired):                           Marks vs Flags.      (line  48)
* + (Dired):                             Misc Dired Features. (line  13)
* + (DocView mode):                      DocView Navigation.  (line  29)
* - (DocView mode):                      DocView Navigation.  (line  29)
* . (Calendar mode):                     Specified Dates.     (line  33)
* . (Dired):                             Flagging Many Files. (line  37)
* . (Rmail):                             Rmail Scrolling.     (line  26)
* / (Rmail):                             Rmail Scrolling.     (line  26)
* / / (Package Menu):                    Package Menu.        (line 165)
* / a (Package Menu):                    Package Menu.        (line 109)
* / d (Package Menu):                    Package Menu.        (line 115)
* / k (Package Menu):                    Package Menu.        (line 121)
* / m (Package Menu):                    Package Menu.        (line 152)
* / N (Package Menu):                    Package Menu.        (line 127)
* / n (Package Menu):                    Package Menu.        (line 133)
* / s (Package Menu):                    Package Menu.        (line 138)
* / u (Package Menu):                    Package Menu.        (line 157)
* / v (Package Menu):                    Package Menu.        (line 145)
* 1 (Buffer Menu):                       Several Buffers.     (line 104)
* 2 (Buffer Menu):                       Several Buffers.     (line 108)
* :d (Dired):                            Operating on Files.  (line 192)
* :e (Dired):                            Operating on Files.  (line 204)
* :s (Dired):                            Operating on Files.  (line 200)
* :v (Dired):                            Operating on Files.  (line 196)
* < (Calendar mode):                     Scroll Calendar.     (line  27)
* < (Dired):                             Subdirectory Motion. (line  30)
* < (Rmail):                             Rmail Motion.        (line  83)
* = (Dired):                             Comparison in Dired. (line   6)
* > (Calendar mode):                     Scroll Calendar.     (line  27)
* > (Dired):                             Subdirectory Motion. (line  35)
* > (Rmail):                             Rmail Motion.        (line  83)
* ? (completion):                        Completion Commands. (line  35)
* ? (Package Menu):                      Package Menu.        (line  40)
* ^ (Dired):                             Dired Visiting.      (line  43)
* { (Buffer Menu):                       Several Buffers.     (line 140)
* } (Buffer Menu):                       Several Buffers.     (line 136)
* ~ (Buffer Menu):                       Several Buffers.     (line  73)
* ~ (Dired):                             Flagging Many Files. (line  34)
* ~ (Package Menu):                      Package Menu.        (line  62)
* a (Calendar mode):                     Holidays.            (line  43)
* A (Dired):                             Operating on Files.  (line 223)
* a (Rmail):                             Rmail Labels.        (line  30)
* A k (Gnus Group mode):                 Gnus Group Buffer.   (line  23)
* A s (Gnus Group mode):                 Gnus Group Buffer.   (line  12)
* A u (Gnus Group mode):                 Gnus Group Buffer.   (line  18)
* A z (Gnus Group mode):                 Gnus Group Buffer.   (line  26)
* AltGr (MS-Windows):                    Windows Keyboard.    (line 127)
* b (Buffer Menu):                       Several Buffers.     (line 113)
* B (Dired):                             Operating on Files.  (line 212)
* b (Rmail summary):                     Rmail Summary Edit.  (line  93)
* b (Rmail):                             Rmail Basics.        (line  35)
* BS (MS-DOS):                           MS-DOS Keyboard.     (line   6)
* C (Dired):                             Operating on Files.  (line  44)
* c (Dired):                             Operating on Files.  (line 186)
* c (Rmail):                             Rmail Reply.         (line 104)
* C-/:                                   Undo.                (line  21)
* C-0, tab bar:                          Tab Bars.            (line 156)
* C-1, tab bar:                          Tab Bars.            (line 139)
* C-9, tab bar:                          Tab Bars.            (line 151)
* C-@:                                   Setting Mark.        (line  24)
* C-a:                                   Moving Point.        (line  45)
* C-a (Calendar mode):                   Move to Beginning or End.
                                                              (line  10)
* C-b:                                   Moving Point.        (line  26)
* C-b (Calendar mode):                   Calendar Unit Motion.
                                                              (line  27)
* C-b, when using input methods:         Input Methods.       (line  33)
* C-Break (MS-DOS):                      MS-DOS Keyboard.     (line  12)
* C-c ' (Picture mode):                  Insert in Picture.   (line   6)
* C-c , j:                               Semantic.            (line  28)
* C-c , J:                               Semantic.            (line  32)
* C-c , l:                               Semantic.            (line  44)
* C-c , SPC:                             Semantic.            (line  36)
* C-c . (C mode):                        Custom C Indent.     (line  27)
* C-c . (Picture mode):                  Insert in Picture.   (line   6)
* C-c . (Shell mode):                    Shell Ring.          (line  23)
* C-c / (Picture mode):                  Insert in Picture.   (line   6)
* C-c / (SGML mode):                     HTML Mode.           (line  57)
* C-c 8 (SGML mode):                     HTML Mode.           (line  62)
* C-c ; (Fortran mode):                  Fortran Comments.    (line  78)
* C-c < (GUD):                           Commands of GUD.     (line  69)
* C-c < (Picture mode):                  Insert in Picture.   (line   6)
* C-c > (GUD):                           Commands of GUD.     (line  74)
* C-c > (Picture mode):                  Insert in Picture.   (line   6)
* C-c ? (SGML mode):                     HTML Mode.           (line  53)
* C-c @ (Outline minor mode):            Outline Minor Mode.  (line  12)
* C-c @ C-c:                             Hideshow.            (line  19)
* C-c @ C-h:                             Hideshow.            (line  19)
* C-c @ C-l:                             Hideshow.            (line  19)
* C-c @ C-M-h:                           Hideshow.            (line  19)
* C-c @ C-M-s:                           Hideshow.            (line  19)
* C-c @ C-r:                             Hideshow.            (line  19)
* C-c @ C-s:                             Hideshow.            (line  19)
* C-c C-a (C mode):                      Electric C.          (line  31)
* C-c C-a (F90 mode):                    Fortran Motion.      (line  29)
* C-c C-a (Log Edit mode):               Log Buffer.          (line  48)
* C-c C-a (Message mode):                Mail Misc.           (line   6)
* C-c C-a (Outline mode):                Outline Visibility.  (line  72)
* C-c C-a (SGML mode):                   HTML Mode.           (line  32)
* C-c C-a (Shell mode):                  Shell Mode.          (line  39)
* C-c C-b (Help mode):                   Help Mode.           (line  43)
* C-c C-b (Message mode):                Header Editing.      (line  35)
* C-c C-b (Outline mode):                Outline Motion.      (line  19)
* C-c C-b (Picture mode):                Insert in Picture.   (line  43)
* C-c C-b (SGML mode):                   HTML Mode.           (line  41)
* C-c C-b (Shell mode):                  Shell Mode.          (line 109)
* C-c C-b (TeX mode):                    TeX Print.           (line  39)
* C-c C-c (C mode):                      Comment Commands.    (line  84)
* C-c C-c (customization buffer):        Changing a Variable. (line 135)
* C-c C-c (Edit Abbrevs):                Editing Abbrevs.     (line  41)
* C-c C-c (Edit Tab Stops):              Tab Stops.           (line  16)
* C-c C-c (Log Edit mode):               Log Buffer.          (line   6)
* C-c C-c (Message mode):                Mail Sending.        (line  13)
* C-c C-c (Outline mode):                Outline Visibility.  (line  49)
* C-c C-c (Shell mode):                  Shell Mode.          (line  64)
* C-c C-c (TeX mode):                    TeX Print.           (line 148)
* C-c C-d (C Mode):                      Hungry Delete.       (line  20)
* C-c C-d (Fortran mode):                ForIndent Commands.  (line  30)
* C-c C-d (GUD):                         Commands of GUD.     (line  57)
* C-c C-d (Log Edit mode):               Log Buffer.          (line  32)
* C-c C-d (Org Mode):                    Org Organizer.       (line  13)
* C-c C-d (Outline mode):                Outline Visibility.  (line  54)
* C-c C-d (Picture mode):                Basic Picture.       (line  44)
* C-c C-d (SGML mode):                   HTML Mode.           (line  47)
* C-c C-DEL (C Mode):                    Hungry Delete.       (line  14)
* C-c C-Delete (C Mode):                 Hungry Delete.       (line  20)
* C-c C-e (C mode):                      Other C Commands.    (line  34)
* C-c C-e (F90 mode):                    Fortran Motion.      (line  22)
* C-c C-e (LaTeX mode):                  LaTeX Editing.       (line  27)
* C-c C-e (Org mode):                    Org Authoring.       (line   6)
* C-c C-e (Outline mode):                Outline Visibility.  (line  49)
* C-c C-e (Shell mode):                  Shell Mode.          (line  99)
* C-c C-f (GUD):                         Commands of GUD.     (line  86)
* C-c C-f (Help mode):                   Help Mode.           (line  43)
* C-c C-f (Log Edit mode):               Log Buffer.          (line  32)
* C-c C-f (Outline mode):                Outline Motion.      (line  16)
* C-c C-f (Picture mode):                Insert in Picture.   (line  43)
* C-c C-f (SGML mode):                   HTML Mode.           (line  36)
* C-c C-f (Shell mode):                  Shell Mode.          (line 103)
* C-c C-f (TeX mode):                    TeX Print.           (line 110)
* C-c C-f C-b (Message mode):            Header Editing.      (line  30)
* C-c C-f C-c (Message mode):            Header Editing.      (line  30)
* C-c C-f C-f (Message mode):            Header Editing.      (line  30)
* C-c C-f C-r (Message mode):            Header Editing.      (line  30)
* C-c C-f C-s (Message mode):            Header Editing.      (line  30)
* C-c C-f C-t (Message mode):            Header Editing.      (line  30)
* C-c C-f C-w (Message mode):            Header Editing.      (line  30)
* C-c C-i (GUD):                         Commands of GUD.     (line  41)
* C-c C-i (Outline mode):                Outline Visibility.  (line  59)
* C-c C-j (Term mode):                   Term Mode.           (line   8)
* C-c C-k (Outline mode):                Outline Visibility.  (line  59)
* C-c C-k (Picture mode):                Rectangles in Picture.
                                                              (line  26)
* C-c C-k (Term mode):                   Term Mode.           (line  12)
* C-c C-k (TeX mode):                    TeX Print.           (line  78)
* C-c C-l (C mode):                      Electric C.          (line  21)
* C-c C-l (Calendar mode):               General Calendar.    (line  24)
* C-c C-l (GUD):                         Commands of GUD.     (line  25)
* C-c C-l (Outline mode):                Outline Visibility.  (line  59)
* C-c C-l (Shell mode):                  Shell Ring.          (line  27)
* C-c C-l (TeX mode):                    TeX Print.           (line  78)
* C-c C-n (C mode):                      Motion in C.         (line  35)
* C-c C-n (Fortran mode):                Fortran Motion.      (line  12)
* C-c C-n (GUD):                         Commands of GUD.     (line  36)
* C-c C-n (Outline mode):                Outline Motion.      (line  10)
* C-c C-n (Rmail):                       Rmail Motion.        (line  75)
* C-c C-n (SGML mode):                   HTML Mode.           (line  16)
* C-c C-n (Shell mode):                  Shell History Copying.
                                                              (line   9)
* C-c C-o (LaTeX mode):                  LaTeX Editing.       (line  15)
* C-c C-o (Outline mode):                Outline Visibility.  (line  67)
* C-c C-o (Shell mode):                  Shell Mode.          (line  79)
* C-c C-p (C mode):                      Motion in C.         (line  30)
* C-c C-p (Fortran mode):                Fortran Motion.      (line  16)
* C-c C-p (GUD):                         Commands of GUD.     (line  45)
* C-c C-p (Outline mode):                Outline Motion.      (line  13)
* C-c C-p (Rmail):                       Rmail Motion.        (line  75)
* C-c C-p (Shell mode):                  Shell History Copying.
                                                              (line   6)
* C-c C-p (TeX mode):                    TeX Print.           (line  39)
* C-c C-q (C mode):                      C Indent.            (line   9)
* C-c C-q (Message mode):                Citing Mail.         (line  23)
* C-c C-q (Outline mode):                Outline Visibility.  (line  72)
* C-c C-q (Term mode):                   Term Mode.           (line  29)
* C-c C-r (Fortran mode):                Fortran Columns.     (line  33)
* C-c C-r (GUD):                         Commands of GUD.     (line  51)
* C-c C-r (Shell mode):                  Shell Mode.          (line  94)
* C-c C-r (TeX mode):                    TeX Print.           (line  88)
* C-c C-s (C mode):                      Other C Commands.    (line  65)
* C-c C-s (GUD):                         Commands of GUD.     (line  30)
* C-c C-s (Message mode):                Mail Sending.        (line  13)
* C-c C-s (Org Mode):                    Org Organizer.       (line  13)
* C-c C-s (Outline mode):                Outline Visibility.  (line  54)
* C-c C-s (Shell mode):                  Shell Mode.          (line  87)
* C-c C-t (GUD):                         Commands of GUD.     (line  63)
* C-c C-t (Org Mode):                    Org Organizer.       (line   6)
* C-c C-t (Outline mode):                Outline Visibility.  (line  72)
* C-c C-t (SGML mode):                   HTML Mode.           (line  20)
* C-c C-u (C mode):                      Motion in C.         (line  20)
* C-c C-u (GUD):                         Commands of GUD.     (line  79)
* C-c C-u (Outline mode):                Outline Motion.      (line  22)
* C-c C-u (Shell mode):                  Shell Mode.          (line  56)
* C-c C-v (SGML mode):                   HTML Mode.           (line  67)
* C-c C-v (TeX mode):                    TeX Print.           (line  39)
* C-c C-w (Fortran mode):                Fortran Columns.     (line  53)
* C-c C-w (Log Edit mode):               Log Buffer.          (line  39)
* C-c C-w (Message mode):                Mail Signature.      (line  20)
* C-c C-w (Picture mode):                Rectangles in Picture.
                                                              (line  26)
* C-c C-w (Shell mode):                  Shell Mode.          (line  61)
* C-c C-x:                               Foldout.             (line  39)
* C-c C-x (Picture mode):                Rectangles in Picture.
                                                              (line  37)
* C-c C-x (Shell mode):                  Shell Ring.          (line  19)
* C-c C-y (Message mode):                Citing Mail.         (line  13)
* C-c C-y (Picture mode):                Rectangles in Picture.
                                                              (line  37)
* C-c C-z:                               Foldout.             (line  15)
* C-c C-z (Shell mode):                  Shell Mode.          (line  69)
* C-c C-\ (C mode):                      Other C Commands.    (line  46)
* C-c C-\ (Shell mode):                  Shell Mode.          (line  74)
* C-c DEL (C Mode):                      Hungry Delete.       (line  14)
* C-c Delete (C Mode):                   Hungry Delete.       (line  20)
* C-c DOWN (Picture mode):               Insert in Picture.   (line   6)
* C-c End (Picture mode):                Insert in Picture.   (line   6)
* C-c Home (Picture mode):               Insert in Picture.   (line   6)
* C-c LEFT (Picture mode):               Insert in Picture.   (line   6)
* C-c next (Picture mode):               Insert in Picture.   (line   6)
* C-c PageDown (Picture mode):           Insert in Picture.   (line   6)
* C-c PageUp (Picture mode):             Insert in Picture.   (line   6)
* C-c prior (Picture mode):              Insert in Picture.   (line   6)
* C-c RET (Goto Address mode):           Goto Address mode.   (line  12)
* C-c RET (Shell mode):                  Shell History Copying.
                                                              (line  12)
* C-c RIGHT (Picture mode):              Insert in Picture.   (line   6)
* C-c TAB (Picture mode):                Tabs in Picture.     (line  25)
* C-c TAB (SGML mode):                   HTML Mode.           (line  72)
* C-c TAB (TeX mode):                    TeX Print.           (line 138)
* C-c UP (Picture mode):                 Insert in Picture.   (line   6)
* C-c [ (Enriched mode):                 Enriched Indentation.
                                                              (line  33)
* C-c [ (Org Mode):                      Org Organizer.       (line  20)
* C-c \ (Picture mode):                  Insert in Picture.   (line   6)
* C-c ] (Enriched mode):                 Enriched Indentation.
                                                              (line  33)
* C-c ^ (Picture mode):                  Insert in Picture.   (line   6)
* C-c ` (Picture mode):                  Insert in Picture.   (line   6)
* C-c { (TeX mode):                      TeX Editing.         (line  43)
* C-c } (TeX mode):                      TeX Editing.         (line  43)
* C-d (Buffer Menu):                     Several Buffers.     (line  35)
* C-d (Rmail):                           Rmail Deletion.      (line  26)
* C-d (Shell mode):                      Shell Mode.          (line  33)
* C-Down-mouse-1:                        Buffer Menus.        (line  22)
* C-e:                                   Moving Point.        (line  49)
* C-e (Calendar mode):                   Move to Beginning or End.
                                                              (line  11)
* C-END:                                 Moving Point.        (line  88)
* C-f:                                   Moving Point.        (line  19)
* C-f (Calendar mode):                   Calendar Unit Motion.
                                                              (line  27)
* C-f, when using input methods:         Input Methods.       (line  33)
* C-g:                                   Quitting.            (line  28)
* C-g (Incremental search):              Error in Isearch.    (line  23)
* C-g (MS-DOS):                          MS-DOS Keyboard.     (line  12)
* C-g C-g (Incremental Search):          Basic Isearch.       (line  53)
* C-h:                                   Help.                (line   6)
* C-h .:                                 Help Echo.           (line  13)
* C-h 4 i:                               Misc Help.           (line   6)
* C-h a:                                 Apropos.             (line  16)
* C-h b:                                 Misc Help.           (line  44)
* C-h c:                                 Key Help.            (line   9)
* C-h C:                                 Coding Systems.      (line  43)
* C-h C-c:                               Help Files.          (line  12)
* C-h C-d:                               Help Files.          (line  12)
* C-h C-e:                               Help Files.          (line  12)
* C-h C-f:                               Help Files.          (line  12)
* C-h C-h:                               Help.                (line   6)
* C-h C-h (Incremental Search):          Special Isearch.     (line 106)
* C-h C-m:                               Help Files.          (line  12)
* C-h C-n:                               Help Files.          (line  12)
* C-h C-o:                               Help Files.          (line  12)
* C-h C-p:                               Help Files.          (line  12)
* C-h C-t:                               Help Files.          (line  12)
* C-h C-w:                               Help Files.          (line  12)
* C-h C-\:                               Select Input Method. (line  21)
* C-h d:                                 Apropos.             (line  45)
* C-h e:                                 Misc Help.           (line  34)
* C-h f:                                 Name Help.           (line  15)
* C-h F:                                 Name Help.           (line  58)
* C-h g:                                 Help Files.          (line  12)
* C-h h:                                 International Chars. (line  18)
* C-h i:                                 Misc Help.           (line   6)
* C-h I:                                 Select Input Method. (line  21)
* C-h k:                                 Key Help.            (line  12)
* C-h K:                                 Key Help.            (line  16)
* C-h l:                                 Misc Help.           (line  27)
* C-h L:                                 Language Environments.
                                                              (line  76)
* C-h m:                                 Misc Help.           (line  38)
* C-h o:                                 Name Help.           (line  62)
* C-h p:                                 Package Keywords.    (line  10)
* C-h P:                                 Package Keywords.    (line  17)
* C-h S:                                 Misc Help.           (line  22)
* C-h s:                                 Misc Help.           (line  44)
* C-h t:                                 Basic.               (line   6)
* C-h v:                                 Name Help.           (line  49)
* C-h w:                                 Key Help.            (line  25)
* C-h x:                                 Name Help.           (line   6)
* C-j:                                   Inserting Text.      (line  11)
* C-j (and major modes):                 Major Modes.         (line   6)
* C-j (Lisp Interaction mode):           Lisp Interaction.    (line  14)
* C-j (MS-DOS):                          MS-DOS Keyboard.     (line  31)
* C-j (TeX mode):                        TeX Editing.         (line  51)
* C-k:                                   Killing by Lines.    (line  11)
* C-k (Gnus Group mode):                 Gnus Group Buffer.   (line  35)
* C-l:                                   Recentering.         (line  24)
* C-LEFT:                                Moving Point.        (line  65)
* C-M-%:                                 Query Replace.       (line  21)
* C-M-% (Incremental search):            Special Isearch.     (line  81)
* C-M-,:                                 Looking Up Identifiers.
                                                              (line  83)
* C-M-.:                                 Looking Up Identifiers.
                                                              (line  51)
* C-M-/:                                 Dynamic Abbrevs.     (line  12)
* C-M-@:                                 Marking Objects.     (line  38)
* C-M-a:                                 Moving by Defuns.    (line  17)
* C-M-b:                                 Expressions.         (line  25)
* C-M-c:                                 Recursive Edit.      (line  13)
* C-M-d:                                 Moving by Parens.    (line  39)
* C-M-d (Dired):                         Subdirectory Motion. (line  26)
* C-M-d (Incremental search):            Isearch Yank.        (line  43)
* C-M-e:                                 Moving by Defuns.    (line  17)
* C-M-f:                                 Expressions.         (line  25)
* C-M-f (Rmail):                         Rmail Make Summary.  (line  55)
* C-M-h:                                 Moving by Defuns.    (line  17)
* C-M-h (C mode):                        Moving by Defuns.    (line  30)
* C-M-i:                                 Symbol Completion.   (line   9)
* C-M-i (customization buffer):          Changing a Variable. (line  53)
* C-M-j:                                 Multi-Line Comments. (line   6)
* C-M-j (Fortran mode):                  ForIndent Commands.  (line  25)
* C-M-k:                                 Expressions.         (line  44)
* C-M-l:                                 Recentering.         (line  61)
* C-M-l (Rmail):                         Rmail Make Summary.  (line  36)
* C-M-l (Shell mode):                    Shell Mode.          (line  94)
* C-M-n:                                 Moving by Parens.    (line  28)
* C-M-n (Dired):                         Subdirectory Motion. (line  15)
* C-M-n (Fortran mode):                  Fortran Motion.      (line  33)
* C-M-n (Rmail):                         Rmail Labels.        (line  39)
* C-M-o:                                 Indentation Commands.
                                                              (line  10)
* C-M-p:                                 Moving by Parens.    (line  28)
* C-M-p (Dired):                         Subdirectory Motion. (line  19)
* C-M-p (Fortran mode):                  Fortran Motion.      (line  41)
* C-M-p (Rmail):                         Rmail Labels.        (line  39)
* C-M-q:                                 Multi-line Indent.   (line  25)
* C-M-q (C mode):                        C Indent.            (line  14)
* C-M-q (Fortran mode):                  ForIndent Commands.  (line  21)
* C-M-r:                                 Regexp Search.       (line  17)
* C-M-r (Rmail):                         Rmail Make Summary.  (line  40)
* C-M-s:                                 Regexp Search.       (line  17)
* C-M-s (Rmail):                         Rmail Make Summary.  (line  51)
* C-M-S-l:                               Other Window.        (line  38)
* C-M-S-v:                               Other Window.        (line  38)
* C-M-SPC:                               Expressions.         (line  56)
* C-M-t:                                 Expressions.         (line  47)
* C-M-t (Rmail):                         Rmail Make Summary.  (line  46)
* C-M-u:                                 Moving by Parens.    (line  32)
* C-M-u (Dired):                         Subdirectory Motion. (line  23)
* C-M-v:                                 Other Window.        (line  38)
* C-M-w:                                 Appending Kills.     (line  38)
* C-M-w (Incremental search):            Isearch Yank.        (line  16)
* C-M-wheel-down:                        Text Scale.          (line  35)
* C-M-wheel-up:                          Text Scale.          (line  35)
* C-M-x (Emacs Lisp mode):               Lisp Eval.           (line  60)
* C-M-x (Lisp mode):                     External Lisp.       (line  25)
* C-M-x (Scheme mode):                   External Lisp.       (line  35)
* C-M-y (Incremental search):            Isearch Yank.        (line  43)
* C-M-z (Incremental search):            Isearch Yank.        (line  27)
* C-M-\:                                 Indentation Commands.
                                                              (line  50)
* C-mouse-1:                             Menu Mouse Clicks.   (line  10)
* C-mouse-2:                             Menu Mouse Clicks.   (line  16)
* C-mouse-2 (mode line):                 Split Window.        (line  59)
* C-mouse-2 (scroll bar):                Split Window.        (line  59)
* C-mouse-3:                             Menu Mouse Clicks.   (line  21)
* C-mouse-3 (when menu bar is disabled): Menu Bars.           (line  12)
* C-n:                                   Moving Point.        (line  34)
* C-n (Calendar mode):                   Calendar Unit Motion.
                                                              (line  27)
* C-n (Dired):                           Dired Navigation.    (line   6)
* C-n, when using input methods:         Input Methods.       (line  33)
* C-o:                                   Blank Lines.         (line  15)
* C-o (Buffer Menu):                     Several Buffers.     (line 100)
* C-o (Dired):                           Dired Visiting.      (line  27)
* C-o (Occur mode):                      Other Repeating Search.
                                                              (line  64)
* C-o (Rmail):                           Rmail Output.        (line  20)
* C-p:                                   Moving Point.        (line  40)
* C-p (Calendar mode):                   Calendar Unit Motion.
                                                              (line  27)
* C-p (Dired):                           Dired Navigation.    (line   6)
* C-p, when using input methods:         Input Methods.       (line  33)
* C-q:                                   Inserting Text.      (line  30)
* C-q (Incremental Search):              Special Isearch.     (line  36)
* C-r:                                   Basic Isearch.       (line  63)
* C-r (Incremental Search):              Repeat Isearch.      (line   6)
* C-RIGHT:                               Moving Point.        (line  56)
* C-s:                                   Basic Isearch.       (line  11)
* C-s (Incremental Search):              Repeat Isearch.      (line   6)
* C-S-backspace:                         Killing by Lines.    (line  38)
* C-S-mouse-3 (FFAP):                    FFAP.                (line  60)
* C-SPC:                                 Setting Mark.        (line  24)
* C-SPC C-SPC:                           Mark Ring.           (line  17)
* C-SPC C-SPC, enabling Transient Mark mode temporarily: Disabled Transient Mark.
                                                              (line  33)
* C-t:                                   Transpose.           (line  21)
* C-t d (Image-Dired):                   Image-Dired.         (line  11)
* C-TAB:                                 File Name Cache.     (line   6)
* C-TAB <1>:                             Tab Bars.            (line 120)
* C-u:                                   Arguments.           (line  41)
* C-u C-/:                               Undo.                (line  55)
* C-u C-c C-w (Fortran mode):            Fortran Columns.     (line  58)
* C-u C-SPC:                             Mark Ring.           (line  26)
* C-u C-x C-x:                           Disabled Transient Mark.
                                                              (line  39)
* C-u C-x v =:                           Old Revisions.       (line  35)
* C-u C-x v D:                           Old Revisions.       (line  61)
* C-u M-;:                               Comment Commands.    (line  73)
* C-u TAB:                               Multi-line Indent.   (line  33)
* C-v:                                   Moving Point.        (line  94)
* C-v <1>:                               Scrolling.           (line  35)
* C-v (Calendar mode):                   Scroll Calendar.     (line  33)
* C-w:                                   Other Kill Commands. (line  27)
* C-w (Incremental search):              Isearch Yank.        (line  10)
* C-wheel-down:                          Text Scale.          (line   6)
* C-wheel-up:                            Text Scale.          (line   6)
* C-x #:                                 Invoking emacsclient.
                                                              (line  32)
* C-x $:                                 Selective Display.   (line   6)
* C-x (:                                 Basic Keyboard Macro.
                                                              (line  93)
* C-x ):                                 Basic Keyboard Macro.
                                                              (line  93)
* C-x +:                                 Change Window.       (line  77)
* C-x -:                                 Change Window.       (line  72)
* C-x .:                                 Fill Prefix.         (line  23)
* C-x 0:                                 Change Window.       (line  29)
* C-x 1:                                 Change Window.       (line  41)
* C-x 2:                                 Split Window.        (line  15)
* C-x 3:                                 Split Window.        (line  32)
* C-x 4:                                 Pop Up Window.       (line   6)
* C-x 4 .:                               Looking Up Identifiers.
                                                              (line  40)
* C-x 4 0:                               Change Window.       (line  38)
* C-x 4 a:                               Change Log Commands. (line   6)
* C-x 4 b:                               Select Buffer.       (line  53)
* C-x 4 c:                               Indirect Buffers.    (line  17)
* C-x 4 C-j:                             Dired Enter.         (line  45)
* C-x 4 C-o:                             Pop Up Window.       (line  16)
* C-x 4 d:                               Dired Enter.         (line  97)
* C-x 4 f:                               Visiting.            (line 128)
* C-x 4 f (FFAP):                        FFAP.                (line  35)
* C-x 4 m:                               Sending Mail.        (line  33)
* C-x 5:                                 Creating Frames.     (line   6)
* C-x 5 .:                               Looking Up Identifiers.
                                                              (line  40)
* C-x 5 0:                               Frame Commands.      (line   9)
* C-x 5 1:                               Frame Commands.      (line  28)
* C-x 5 2:                               Creating Frames.     (line  18)
* C-x 5 b:                               Select Buffer.       (line  58)
* C-x 5 c:                               Creating Frames.     (line  22)
* C-x 5 d:                               Dired Enter.         (line  97)
* C-x 5 f:                               Visiting.            (line 136)
* C-x 5 f (FFAP):                        FFAP.                (line  42)
* C-x 5 m:                               Sending Mail.        (line  33)
* C-x 5 o:                               Frame Commands.      (line  24)
* C-x 5 r:                               Creating Frames.     (line  48)
* C-x 5 u:                               Frame Commands.      (line  13)
* C-x 6 1:                               Two-Column.          (line  58)
* C-x 6 2:                               Two-Column.          (line  11)
* C-x 6 b:                               Two-Column.          (line  34)
* C-x 6 d:                               Two-Column.          (line  63)
* C-x 6 RET:                             Two-Column.          (line  53)
* C-x 6 s:                               Two-Column.          (line  21)
* C-x 8:                                 Inserting Text.      (line  60)
* C-x 8 e:                               Input Methods.       (line 118)
* C-x 8 e RET (Incremental Search):      Special Isearch.     (line  69)
* C-x 8 <RET>:                           Input Methods.       (line 114)
* C-x 8 RET (Incremental Search):        Special Isearch.     (line  64)
* C-x ;:                                 Options for Comments.
                                                              (line   6)
* C-x <:                                 Horizontal Scrolling.
                                                              (line  42)
* C-x =:                                 Position Info.       (line  54)
* C-x =, and international characters:   International Chars. (line  38)
* C-x >:                                 Horizontal Scrolling.
                                                              (line  42)
* C-x a g:                               Defining Abbrevs.    (line  31)
* C-x a i g:                             Defining Abbrevs.    (line  49)
* C-x a i l:                             Defining Abbrevs.    (line  49)
* C-x a l:                               Defining Abbrevs.    (line  45)
* C-x b:                                 Select Buffer.       (line  23)
* C-x C-+:                               Text Scale.          (line   6)
* C-x C--:                               Text Scale.          (line   6)
* C-x C-0:                               Text Scale.          (line   6)
* C-x C-;:                               Comment Commands.    (line  63)
* C-x C-=:                               Text Scale.          (line   6)
* C-x C-a (GUD):                         Commands of GUD.     (line  17)
* C-x C-a C-b:                           Commands of GUD.     (line  10)
* C-x C-a C-j (GUD):                     Commands of GUD.     (line  93)
* C-x C-a C-w (GUD):                     Watch Expressions.   (line   6)
* C-x C-b:                               List Buffers.        (line   9)
* C-x C-c:                               Exiting.             (line  12)
* C-x C-c (customization buffer):        Changing a Variable. (line 135)
* C-x C-d:                               Directories.         (line  23)
* C-x C-e:                               Lisp Eval.           (line  36)
* C-x C-f:                               Visiting.            (line  27)
* C-x C-f (FFAP):                        FFAP.                (line  23)
* C-x C-j:                               Dired Enter.         (line  45)
* C-x C-k b:                             Save Keyboard Macro. (line  26)
* C-x C-k C-a:                           Keyboard Macro Counter.
                                                              (line  67)
* C-x C-k C-c:                           Keyboard Macro Counter.
                                                              (line  59)
* C-x C-k C-e:                           Edit Keyboard Macro. (line  14)
* C-x C-k C-f:                           Keyboard Macro Counter.
                                                              (line  73)
* C-x C-k C-i:                           Keyboard Macro Counter.
                                                              (line  33)
* C-x C-k C-k:                           Keyboard Macro Ring. (line  31)
* C-x C-k C-n:                           Keyboard Macro Ring. (line  41)
* C-x C-k C-p:                           Keyboard Macro Ring. (line  41)
* C-x C-k d:                             Basic Keyboard Macro.
                                                              (line 111)
* C-x C-k e:                             Edit Keyboard Macro. (line  20)
* C-x C-k l:                             Edit Keyboard Macro. (line  25)
* C-x C-k n:                             Save Keyboard Macro. (line  15)
* C-x C-k r:                             Basic Keyboard Macro.
                                                              (line  88)
* C-x C-k RET:                           Edit Keyboard Macro. (line  14)
* C-x C-k SPC:                           Keyboard Macro Step-Edit.
                                                              (line   6)
* C-x C-k x:                             Keyboard Macro Registers.
                                                              (line   6)
* C-x C-l:                               Case.                (line  41)
* C-x C-M-+:                             Text Scale.          (line  35)
* C-x C-M--:                             Text Scale.          (line  35)
* C-x C-M-0:                             Text Scale.          (line  35)
* C-x C-M-=:                             Text Scale.          (line  35)
* C-x C-n:                               Moving Point.        (line 133)
* C-x C-o:                               Blank Lines.         (line  15)
* C-x C-p:                               Pages.               (line  37)
* C-x C-q:                               Misc Buffer.         (line  15)
* C-x C-r:                               Visiting.            (line 124)
* C-x C-r (FFAP):                        FFAP.                (line  26)
* C-x C-s:                               Save Commands.       (line  23)
* C-x C-s (Custom Themes buffer):        Custom Themes.       (line  36)
* C-x C-SPC:                             Global Mark Ring.    (line  15)
* C-x C-t:                               Transpose.           (line  35)
* C-x C-u:                               Case.                (line  41)
* C-x C-v:                               Visiting.            (line 100)
* C-x C-v (FFAP):                        FFAP.                (line  28)
* C-x C-w:                               Save Commands.       (line  98)
* C-x C-x:                               Setting Mark.        (line  43)
* C-x C-x, in rectangle-mark-mode:       Rectangles.          (line 140)
* C-x C-z:                               External Lisp.       (line  11)
* C-x d:                                 Dired Enter.         (line   6)
* C-x d (FFAP):                          FFAP.                (line  30)
* C-x DEL:                               Sentences.           (line  37)
* C-x e:                                 Basic Keyboard Macro.
                                                              (line  93)
* C-x ESC ESC:                           Repetition.          (line  19)
* C-x f:                                 Fill Commands.       (line  43)
* C-x h:                                 Marking Objects.     (line  52)
* C-x i:                                 Misc File Ops.       (line  45)
* C-x k:                                 Kill Buffer.         (line  22)
* C-x l:                                 Pages.               (line  51)
* C-x LEFT:                              Select Buffer.       (line  46)
* C-x m:                                 Sending Mail.        (line   6)
* C-x n d:                               Narrowing.           (line  38)
* C-x n n:                               Narrowing.           (line  33)
* C-x n p:                               Narrowing.           (line  38)
* C-x n w:                               Narrowing.           (line  43)
* C-x o:                                 Other Window.        (line  19)
* C-x q:                                 Keyboard Macro Query.
                                                              (line  14)
* C-x r +:                               Number Registers.    (line  13)
* C-x r b:                               Bookmarks.           (line  30)
* C-x r c:                               Rectangles.          (line  96)
* C-x r d:                               Rectangles.          (line  66)
* C-x r f:                               Configuration Registers.
                                                              (line   6)
* C-x r i:                               Text Registers.      (line  51)
* C-x r j:                               Position Registers.  (line  18)
* C-x r k:                               Rectangles.          (line  66)
* C-x r l:                               Bookmarks.           (line  40)
* C-x r m:                               Bookmarks.           (line  30)
* C-x r M:                               Bookmarks.           (line  36)
* C-x r M-w:                             Rectangles.          (line  79)
* C-x r N:                               Rectangles.          (line 107)
* C-x r n:                               Number Registers.    (line  11)
* C-x r o:                               Rectangles.          (line  96)
* C-x r r:                               Rectangle Registers. (line  10)
* C-x r s:                               Text Registers.      (line  26)
* C-x r SPC:                             Position Registers.  (line  13)
* C-x r t:                               Rectangles.          (line 114)
* C-x r w:                               Configuration Registers.
                                                              (line   6)
* C-x r y:                               Rectangles.          (line  83)
* C-x RET:                               International Chars. (line  35)
* C-x RET c:                             Text Coding.         (line  43)
* C-x RET C-\:                           Select Input Method. (line  29)
* C-x RET f:                             Text Coding.         (line  25)
* C-x RET F:                             File Name Coding.    (line  10)
* C-x RET k:                             Terminal Coding.     (line  29)
* C-x RET p:                             Communication Coding.
                                                              (line  43)
* C-x RET r:                             Text Coding.         (line  74)
* C-x RET t:                             Terminal Coding.     (line  14)
* C-x RET x:                             Communication Coding.
                                                              (line  23)
* C-x RET X:                             Communication Coding.
                                                              (line  23)
* C-x RIGHT:                             Select Buffer.       (line  46)
* C-x s:                                 Save Commands.       (line  39)
* C-x t:                                 Tab Bars.            (line  60)
* C-x t 0:                               Tab Bars.            (line 103)
* C-x t 1:                               Tab Bars.            (line 109)
* C-x t 2:                               Tab Bars.            (line  69)
* C-x t b:                               Tab Bars.            (line  76)
* C-x t C-f (FFAP):                      FFAP.                (line  47)
* C-x t d:                               Tab Bars.            (line  84)
* C-x t f:                               Tab Bars.            (line  80)
* C-x t m:                               Tab Bars.            (line 166)
* C-x t o:                               Tab Bars.            (line 120)
* C-x t r:                               Tab Bars.            (line 163)
* C-x t <RET>:                           Tab Bars.            (line 132)
* C-x t t:                               Tab Bars.            (line  88)
* C-x TAB:                               Indentation Commands.
                                                              (line  57)
* C-x TAB (Enriched mode):               Enriched Indentation.
                                                              (line  13)
* C-x u:                                 Undo.                (line  21)
* C-x v !:                               Editing VC Commands. (line   6)
* C-x v +:                               Pulling / Pushing.   (line  38)
* C-x v =:                               Old Revisions.       (line  28)
* C-x v a:                               Change Logs and VC.  (line  18)
* C-x v b c:                             Creating Branches.   (line  15)
* C-x v b l:                             VC Change Log.       (line  73)
* C-x v b s:                             Switching Branches.  (line  21)
* C-x v D:                               Old Revisions.       (line  56)
* C-x v d:                               VC Directory Mode.   (line  12)
* C-x v g:                               Old Revisions.       (line  84)
* C-x v G:                               VC Ignore.           (line   9)
* C-x v h:                               VC Change Log.       (line 138)
* C-x v i:                               Registering.         (line   9)
* C-x v I:                               VC Change Log.       (line  79)
* C-x v l:                               VC Change Log.       (line  33)
* C-x v L:                               VC Change Log.       (line  54)
* C-x v O:                               VC Change Log.       (line  79)
* C-x v P:                               Pulling / Pushing.   (line  18)
* C-x v r:                               Revision Tags.       (line  21)
* C-x v s:                               Revision Tags.       (line  17)
* C-x v u:                               VC Undo.             (line  10)
* C-x v v:                               Basic VC Editing.    (line  28)
* C-x v ~:                               Old Revisions.       (line  79)
* C-x w .:                               Highlight Interactively.
                                                              (line  72)
* C-x w b:                               Highlight Interactively.
                                                              (line  77)
* C-x w h:                               Highlight Interactively.
                                                              (line  28)
* C-x w i:                               Highlight Interactively.
                                                              (line  89)
* C-x w l:                               Highlight Interactively.
                                                              (line  60)
* C-x w p:                               Highlight Interactively.
                                                              (line  65)
* C-x w r:                               Highlight Interactively.
                                                              (line  48)
* C-x z:                                 Repeating.           (line  12)
* C-x [:                                 Pages.               (line  31)
* C-x [ (Calendar mode):                 Calendar Unit Motion.
                                                              (line  36)
* C-x [ (DocView mode):                  DocView Navigation.  (line  16)
* C-x \:                                 Select Input Method. (line  95)
* C-x ]:                                 Pages.               (line  31)
* C-x ] (Calendar mode):                 Calendar Unit Motion.
                                                              (line  36)
* C-x ] (DocView mode):                  DocView Navigation.  (line  16)
* C-x ^:                                 Change Window.       (line  51)
* C-x `:                                 Compilation Mode.    (line  64)
* C-x }:                                 Change Window.       (line  51)
* C-y:                                   Yanking.             (line  19)
* C-y (Incremental search):              Isearch Yank.        (line  35)
* C-z:                                   Exiting.             (line  47)
* C-z (X windows):                       Frame Commands.      (line  20)
* C-\:                                   Select Input Method. (line  35)
* C-]:                                   Quitting.            (line  73)
* C-^ (Incremental Search):              Special Isearch.     (line  43)
* C-_:                                   Undo.                (line  21)
* C-_ (Dired):                           Marks vs Flags.      (line 146)
* d (Buffer Menu):                       Several Buffers.     (line  29)
* d (Calendar mode):                     Displaying the Diary.
                                                              (line  28)
* d (Dired):                             Dired Deletion.      (line  19)
* D (Dired):                             Operating on Files.  (line  82)
* D (GDB Breakpoints buffer):            Breakpoints Buffer.  (line  18)
* D (GDB speedbar):                      Watch Expressions.   (line  25)
* d (GDB threads buffer):                Threads Buffer.      (line  31)
* d (Package Menu):                      Package Menu.        (line  51)
* d (Rmail):                             Rmail Deletion.      (line  26)
* DEL (and major modes):                 Major Modes.         (line   6)
* DEL (Buffer Menu):                     Several Buffers.     (line  53)
* DEL (Dired):                           Dired Deletion.      (line  30)
* DEL (DocView mode):                    DocView Navigation.  (line  20)
* DEL (Gnus Group mode):                 Gnus Group Buffer.   (line  40)
* DEL (Gnus Summary mode):               Gnus Summary Buffer. (line  16)
* DEL (Incremental search):              Basic Isearch.       (line  27)
* DEL (MS-DOS):                          MS-DOS Keyboard.     (line   6)
* DEL (programming modes):               Program Modes.       (line  38)
* DEL (Rmail):                           Rmail Scrolling.     (line  21)
* DEL (View mode):                       View Mode.           (line   6)
* DOWN:                                  Moving Point.        (line  34)
* DOWN (minibuffer history):             Minibuffer History.  (line  55)
* Down-mouse-3:                          Menu Mouse Clicks.   (line  33)
* e (Dired):                             Dired Visiting.      (line  18)
* e (Rmail):                             Rmail Editing.       (line  15)
* e (View mode):                         View Mode.           (line  13)
* END:                                   Moving Point.        (line  49)
* ESC ESC ESC:                           Quitting.            (line  81)
* ESC ESC ESC (Incremental Search):      Basic Isearch.       (line  53)
* f (Buffer Menu):                       Several Buffers.     (line  92)
* f (Dired):                             Dired Visiting.      (line  12)
* f (GDB threads buffer):                Threads Buffer.      (line  35)
* f (Rmail):                             Rmail Reply.         (line  68)
* F1:                                    Help.                (line   6)
* F10:                                   Menu Bar.            (line  22)
* F11:                                   Frame Commands.      (line  35)
* F2 1:                                  Two-Column.          (line  58)
* F2 2:                                  Two-Column.          (line  11)
* F2 b:                                  Two-Column.          (line  34)
* F2 d:                                  Two-Column.          (line  63)
* F2 RET:                                Two-Column.          (line  53)
* F2 s:                                  Two-Column.          (line  21)
* F3:                                    Basic Keyboard Macro.
                                                              (line  31)
* F4:                                    Basic Keyboard Macro.
                                                              (line  31)
* G (Dired):                             Operating on Files.  (line 146)
* g (Dired):                             Dired Updating.      (line  29)
* g (Package Menu):                      Package Menu.        (line  93)
* g (Rmail):                             Rmail Files.         (line  49)
* g CHAR (Calendar mode):                From Other Calendar. (line  10)
* g d (Calendar mode):                   Specified Dates.     (line  20)
* g D (Calendar mode):                   Specified Dates.     (line  25)
* g m (Calendar mode):                   Mayan Calendar.      (line  36)
* g w (Calendar mode):                   Specified Dates.     (line  25)
* H (Calendar mode):                     Writing Calendar Files.
                                                              (line  24)
* h (Calendar mode):                     Holidays.            (line  26)
* H (Dired):                             Operating on Files.  (line 113)
* h (Package Menu):                      Package Menu.        (line  35)
* H (Package Menu):                      Package Menu.        (line  98)
* h (Rmail):                             Rmail Make Summary.  (line  31)
* HOME:                                  Moving Point.        (line  45)
* I (Dired):                             Operating on Files.  (line 217)
* i (Dired):                             Subdirectories in Dired.
                                                              (line  18)
* i (Package Menu):                      Package Menu.        (line  45)
* i (Rmail):                             Rmail Files.         (line  20)
* i + (Image mode):                      Image Mode.          (line  67)
* i - (Image mode):                      Image Mode.          (line  73)
* i a (Calendar mode):                   Special Diary Entries.
                                                              (line  26)
* i b (Calendar mode):                   Special Diary Entries.
                                                              (line  51)
* i c (Calendar mode):                   Special Diary Entries.
                                                              (line  56)
* i c (Image mode):                      Image Mode.          (line  99)
* i d (Calendar mode):                   Adding to Diary.     (line  24)
* i h (Image mode):                      Image Mode.          (line  85)
* i m (Calendar mode):                   Adding to Diary.     (line  29)
* i o (Image mode):                      Image Mode.          (line  95)
* i r (Image mode):                      Image Mode.          (line  79)
* i v (Image mode):                      Image Mode.          (line  90)
* i w (Calendar mode):                   Adding to Diary.     (line  29)
* i x (Image mode):                      Image Mode.          (line 114)
* i y (Calendar mode):                   Adding to Diary.     (line  29)
* INSERT:                                Minor Modes.         (line  83)
* j (Dired):                             Dired Navigation.    (line  17)
* j (Rmail):                             Rmail Motion.        (line  83)
* k (Dired):                             Dired Updating.      (line  51)
* k (Rmail):                             Rmail Labels.        (line  30)
* L (Dired):                             Operating on Files.  (line 208)
* l (Dired):                             Dired Updating.      (line  34)
* l (GDB threads buffer):                Threads Buffer.      (line  39)
* l (Gnus Group mode):                   Gnus Group Buffer.   (line  12)
* L (Gnus Group mode):                   Gnus Group Buffer.   (line  18)
* l (Help mode):                         Help Mode.           (line  43)
* l (Rmail):                             Rmail Make Summary.  (line  36)
* LEFT:                                  Moving Point.        (line  29)
* LEFT, and bidirectional text:          Bidirectional Editing.
                                                              (line  79)
* m (Buffer Menu):                       Several Buffers.     (line 117)
* M (Calendar mode):                     Lunar Phases.        (line  17)
* m (Calendar mode):                     Displaying the Diary.
                                                              (line  43)
* m (Dired):                             Marks vs Flags.      (line  17)
* M (Dired):                             Operating on Files.  (line 138)
* m (Rmail):                             Rmail Reply.         (line  99)
* M-!:                                   Single Shell.        (line   6)
* M-$:                                   Spelling.            (line  51)
* M-$ (Dired):                           Hiding Subdirectories.
                                                              (line  15)
* M-%:                                   Query Replace.       (line  11)
* M-% (Incremental search):              Special Isearch.     (line  81)
* M-&:                                   Single Shell.        (line  39)
* M-':                                   Expanding Abbrevs.   (line  35)
* M-,:                                   Looking Up Identifiers.
                                                              (line  75)
* M--:                                   Arguments.           (line  15)
* M-- M-c:                               Fixing Case.         (line  13)
* M-- M-l:                               Fixing Case.         (line  13)
* M-- M-u:                               Fixing Case.         (line  13)
* M-.:                                   Looking Up Identifiers.
                                                              (line  31)
* M-/:                                   Dynamic Abbrevs.     (line  12)
* M-0, tab bar:                          Tab Bars.            (line 156)
* M-1:                                   Arguments.           (line  15)
* M-1, tab bar:                          Tab Bars.            (line 139)
* M-9, tab bar:                          Tab Bars.            (line 151)
* M-;:                                   Comment Commands.    (line  27)
* M-<:                                   Moving Point.        (line  83)
* M-< (Calendar mode):                   Move to Beginning or End.
                                                              (line  17)
* M-< (DocView mode):                    DocView Navigation.  (line  25)
* M-=:                                   Position Info.       (line  45)
* M-= (Calendar mode):                   Counting Days.       (line  10)
* M->:                                   Moving Point.        (line  88)
* M-> (Calendar mode):                   Move to Beginning or End.
                                                              (line  19)
* M-> (DocView mode):                    DocView Navigation.  (line  25)
* M-?:                                   Identifier Search.   (line  34)
* M-? (Nroff mode):                      Nroff Mode.          (line  15)
* M-? (Shell mode):                      Shell Mode.          (line  29)
* M-@:                                   Marking Objects.     (line  28)
* M-@ <1>:                               Words.               (line  54)
* M-a:                                   Sentences.           (line  19)
* M-a (C mode):                          Motion in C.         (line  40)
* M-a (Calendar mode):                   Move to Beginning or End.
                                                              (line  13)
* M-b:                                   Words.               (line  26)
* M-c:                                   Case.                (line  20)
* M-c (Incremental search):              Lax Search.          (line  64)
* M-colon:                               Lisp Eval.           (line  31)
* M-d:                                   Words.               (line  35)
* M-DEL:                                 Words.               (line  43)
* M-DEL (Buffer Menu):                   Several Buffers.     (line  57)
* M-DEL (Dired):                         Marks vs Flags.      (line  69)
* M-DOWN:                                Completion Commands. (line  40)
* M-DOWN (Org Mode):                     Org Mode.            (line  29)
* M-Drag-mouse-1:                        Secondary Selection. (line  11)
* M-e:                                   Sentences.           (line  19)
* M-e (C mode):                          Motion in C.         (line  49)
* M-e (Calendar mode):                   Move to Beginning or End.
                                                              (line  15)
* M-e (Incremental search):              Repeat Isearch.      (line  71)
* M-f:                                   Words.               (line  26)
* M-F10:                                 Frame Commands.      (line  31)
* M-G (Dired):                           Subdirectory Motion. (line  38)
* M-g c:                                 Moving Point.        (line 104)
* M-g g:                                 Moving Point.        (line 112)
* M-g M-g:                               Moving Point.        (line 112)
* M-g M-n:                               Compilation Mode.    (line  64)
* M-g n:                                 Compilation Mode.    (line  64)
* M-g TAB:                               Moving Point.        (line 128)
* M-h:                                   Paragraphs.          (line  23)
* M-i:                                   Indentation Commands.
                                                              (line  22)
* M-j:                                   Multi-Line Comments. (line   6)
* M-j b (Enriched mode):                 Enriched Justification.
                                                              (line  17)
* M-j c (Enriched mode):                 Enriched Justification.
                                                              (line  21)
* M-j l (Enriched mode):                 Enriched Justification.
                                                              (line  11)
* M-j r (Enriched mode):                 Enriched Justification.
                                                              (line  14)
* M-j u (Enriched mode):                 Enriched Justification.
                                                              (line  25)
* M-k:                                   Sentences.           (line  30)
* M-l:                                   Case.                (line  20)
* M-LEFT:                                Moving Point.        (line  65)
* M-LEFT (Org Mode):                     Org Mode.            (line  29)
* M-m:                                   Indentation Commands.
                                                              (line  16)
* M-m (Rmail):                           Rmail Reply.         (line  57)
* M-mouse-1:                             Secondary Selection. (line  22)
* M-mouse-2:                             Secondary Selection. (line  36)
* M-mouse-3:                             Secondary Selection. (line  28)
* M-n (Incremental search):              Repeat Isearch.      (line  62)
* M-n (Log Edit mode):                   Log Buffer.          (line  63)
* M-n (Man mode):                        Man Page.            (line  31)
* M-n (minibuffer history):              Minibuffer History.  (line  31)
* M-n (Nroff mode):                      Nroff Mode.          (line  15)
* M-n (Rmail):                           Rmail Motion.        (line  46)
* M-n (Shell mode):                      Shell Ring.          (line  10)
* M-o b (Enriched mode):                 Enriched Faces.      (line  15)
* M-o d (Enriched mode):                 Enriched Faces.      (line  12)
* M-o i (Enriched mode):                 Enriched Faces.      (line  18)
* M-o l (Enriched mode):                 Enriched Faces.      (line  21)
* M-o o (Enriched mode):                 Enriched Faces.      (line  27)
* M-o u (Enriched mode):                 Enriched Faces.      (line  24)
* M-p (Incremental search):              Repeat Isearch.      (line  62)
* M-p (Log Edit mode):                   Log Buffer.          (line  63)
* M-p (Man mode):                        Man Page.            (line  31)
* M-p (minibuffer history):              Minibuffer History.  (line  31)
* M-p (Nroff mode):                      Nroff Mode.          (line  15)
* M-p (Rmail):                           Rmail Motion.        (line  46)
* M-p (Shell mode):                      Shell Ring.          (line   6)
* M-q:                                   Fill Commands.       (line  17)
* M-q (C mode):                          Other C Commands.    (line  28)
* M-q (Fortran mode):                    ForIndent Commands.  (line  35)
* M-r:                                   Moving Point.        (line  70)
* M-r (Incremental Search):              Special Isearch.     (line  25)
* M-r (Log Edit mode):                   Log Buffer.          (line  63)
* M-r (minibuffer history):              Minibuffer History.  (line  65)
* M-r (Shell mode):                      Shell Ring.          (line  14)
* M-RET:                                 Completion Commands. (line  40)
* M-RIGHT:                               Moving Point.        (line  56)
* M-RIGHT (Org Mode):                    Org Mode.            (line  29)
* M-s ' (Incremental Search):            Lax Search.          (line  95)
* M-S (Enriched mode):                   Enriched Justification.
                                                              (line  21)
* M-s (Log Edit mode):                   Log Buffer.          (line  63)
* M-s (minibuffer history):              Minibuffer History.  (line  65)
* M-s (Rmail):                           Rmail Motion.        (line  60)
* M-s .:                                 Symbol Search.       (line  27)
* M-s a C-s (Dired):                     Misc Dired Features. (line  20)
* M-s a M-C-s (Dired):                   Misc Dired Features. (line  20)
* M-s c (Incremental search):            Lax Search.          (line  64)
* M-s C-e (Incremental search):          Isearch Yank.        (line  22)
* M-s f C-s (Dired):                     Dired Navigation.    (line  20)
* M-s f M-C-s (Dired):                   Dired Navigation.    (line  20)
* M-s h .:                               Highlight Interactively.
                                                              (line  72)
* M-s h f:                               Highlight Interactively.
                                                              (line  89)
* M-s h l:                               Highlight Interactively.
                                                              (line  60)
* M-s h l (Incremental Search):          Special Isearch.     (line  97)
* M-s h p:                               Highlight Interactively.
                                                              (line  65)
* M-s h r:                               Highlight Interactively.
                                                              (line  28)
* M-s h r (Incremental Search):          Special Isearch.     (line  97)
* M-s h u:                               Highlight Interactively.
                                                              (line  48)
* M-s h w:                               Highlight Interactively.
                                                              (line  77)
* M-s i (Incremental search):            Special Isearch.     (line  22)
* M-s M-.:                               Isearch Yank.        (line  57)
* M-s M-<:                               Special Isearch.     (line 111)
* M-s M->:                               Special Isearch.     (line 111)
* M-s M-r (Gnus Summary mode):           Gnus Summary Buffer. (line  37)
* M-s M-s (Gnus Summary mode):           Gnus Summary Buffer. (line  33)
* M-s M-w:                               Word Search.         (line  55)
* M-s o:                                 Other Repeating Search.
                                                              (line  41)
* M-s o (Incremental Search):            Special Isearch.     (line  77)
* M-s r (Incremental Search):            Special Isearch.     (line  25)
* M-s SPC (Incremental search):          Lax Search.          (line  15)
* M-s w:                                 Word Search.         (line  27)
* M-s _:                                 Symbol Search.       (line  27)
* M-S-x:                                 M-x.                 (line  51)
* M-SPC:                                 Deletion.            (line  52)
* M-t:                                   Transpose.           (line  35)
* M-TAB:                                 Symbol Completion.   (line   9)
* M-TAB (customization buffer):          Changing a Variable. (line  53)
* M-TAB (Incremental search):            Special Isearch.     (line  89)
* M-TAB (Picture mode):                  Tabs in Picture.     (line   6)
* M-TAB (Text mode):                     Text Mode.           (line  36)
* M-TAB, (MS-Windows):                   Windows Keyboard.    (line  47)
* M-u:                                   Case.                (line  20)
* M-UP:                                  Completion Commands. (line  40)
* M-UP (Org Mode):                       Org Mode.            (line  29)
* M-v:                                   Moving Point.        (line 100)
* M-v <1>:                               Scrolling.           (line  35)
* M-v (Calendar mode):                   Scroll Calendar.     (line  33)
* M-w:                                   Other Kill Commands. (line  27)
* M-x:                                   M-x.                 (line  17)
* M-X:                                   M-x.                 (line  51)
* M-y:                                   Earlier Kills.       (line  12)
* M-y (Incremental search):              Isearch Yank.        (line  35)
* M-z:                                   Other Kill Commands. (line  39)
* M-\:                                   Deletion.            (line  40)
* M-^:                                   Indentation Commands.
                                                              (line  33)
* M-^ (Fortran mode):                    ForIndent Commands.  (line  30)
* M-`:                                   Menu Bar.            (line  32)
* M-{:                                   Paragraphs.          (line  16)
* M-{ (Calendar mode):                   Calendar Unit Motion.
                                                              (line  36)
* M-{ (Dired):                           Marks vs Flags.      (line  88)
* M-|:                                   Single Shell.        (line  69)
* M-}:                                   Paragraphs.          (line  16)
* M-} (Calendar mode):                   Calendar Unit Motion.
                                                              (line  36)
* M-} (Dired):                           Marks vs Flags.      (line  83)
* M-~:                                   Save Commands.       (line  77)
* mouse-1:                               Mouse Commands.      (line   6)
* mouse-1 (mode line):                   Mode Line Mouse.     (line  16)
* mouse-1 (on buttons):                  Mouse References.    (line   6)
* mouse-1 (scroll bar):                  Mode Line Mouse.     (line  34)
* mouse-1 in the minibuffer (Incremental Search): Repeat Isearch.
                                                              (line  71)
* mouse-2:                               Mouse Commands.      (line   6)
* mouse-2 (GDB Breakpoints buffer):      Breakpoints Buffer.  (line  25)
* mouse-2 (mode line):                   Mode Line Mouse.     (line  23)
* mouse-2 (on buttons):                  Mouse References.    (line   6)
* mouse-2 in the minibuffer (Incremental search): Isearch Yank.
                                                              (line  35)
* mouse-3:                               Mouse Commands.      (line   6)
* mouse-3 (mode line):                   Mode Line Mouse.     (line  26)
* N (Dired):                             Operating on Files.  (line 220)
* n (DocView mode):                      DocView Navigation.  (line  16)
* n (Gnus Group mode):                   Gnus Group Buffer.   (line  44)
* n (Gnus Summary mode):                 Gnus Summary Buffer. (line  20)
* n (Help mode):                         Help Mode.           (line  62)
* n (Rmail):                             Rmail Motion.        (line  46)
* next:                                  Moving Point.        (line  94)
* next <1>:                              Scrolling.           (line  35)
* next (Calendar mode):                  Scroll Calendar.     (line  33)
* next (DocView mode):                   DocView Navigation.  (line  16)
* o (Buffer Menu):                       Several Buffers.     (line  96)
* o (Calendar mode):                     Specified Dates.     (line  30)
* o (Dired):                             Dired Visiting.      (line  21)
* O (Dired):                             Operating on Files.  (line 150)
* o (Occur mode):                        Other Repeating Search.
                                                              (line  64)
* o (Rmail):                             Rmail Output.        (line  20)
* p (Calendar mode):                     To Other Calendar.   (line   9)
* P (Dired):                             Operating on Files.  (line 164)
* p (DocView mode):                      DocView Navigation.  (line  16)
* p (Gnus Group mode):                   Gnus Group Buffer.   (line  48)
* p (Gnus Summary mode):                 Gnus Summary Buffer. (line  24)
* p (Help mode):                         Help Mode.           (line  62)
* p (Rmail):                             Rmail Motion.        (line  46)
* p d (Calendar mode):                   General Calendar.    (line  18)
* PageDown:                              Moving Point.        (line  94)
* PageDown <1>:                          Scrolling.           (line  35)
* PageDown (Calendar mode):              Scroll Calendar.     (line  33)
* PageDown (DocView mode):               DocView Navigation.  (line  16)
* PageUp:                                Moving Point.        (line 100)
* PageUp <1>:                            Scrolling.           (line  35)
* PageUp (Calendar mode):                Scroll Calendar.     (line  33)
* PageUp (DocView mode):                 DocView Navigation.  (line  16)
* prior:                                 Moving Point.        (line 100)
* prior <1>:                             Scrolling.           (line  35)
* prior (Calendar mode):                 Scroll Calendar.     (line  33)
* prior (DocView mode):                  DocView Navigation.  (line  16)
* q (Buffer Menu):                       Several Buffers.     (line  87)
* q (Calendar mode):                     General Calendar.    (line  33)
* q (Dired):                             Dired Enter.         (line 101)
* Q (Dired):                             Operating on Files.  (line 238)
* q (Gnus Group mode):                   Gnus Group Buffer.   (line  52)
* q (Gnus Summary mode):                 Gnus Summary Buffer. (line  41)
* Q (Rmail summary):                     Rmail Summary Edit.  (line  93)
* q (Rmail summary):                     Rmail Summary Edit.  (line  93)
* q (Rmail):                             Rmail Basics.        (line  35)
* q (View mode):                         View Mode.           (line  13)
* R (Dired):                             Operating on Files.  (line  89)
* r (GDB threads buffer):                Threads Buffer.      (line  43)
* r (Help mode):                         Help Mode.           (line  43)
* r (Package Menu):                      Package Menu.        (line  93)
* r (Rmail):                             Rmail Reply.         (line  28)
* RET:                                   Inserting Text.      (line  11)
* RET (Buffer Menu):                     Several Buffers.     (line  92)
* RET (completion in minibuffer):        Completion Exit.     (line   6)
* RET (Dired):                           Dired Visiting.      (line  18)
* RET (GDB Breakpoints buffer):          Breakpoints Buffer.  (line  21)
* RET (GDB speedbar):                    Watch Expressions.   (line  28)
* RET (Help mode):                       Help Mode.           (line  43)
* RET (Incremental search):              Basic Isearch.       (line  36)
* RET (Occur mode):                      Other Repeating Search.
                                                              (line  64)
* RET (Package Menu):                    Package Menu.        (line  40)
* RET (Shell mode):                      Shell Mode.          (line  12)
* RIGHT:                                 Moving Point.        (line  22)
* RIGHT, and bidirectional text:         Bidirectional Editing.
                                                              (line  79)
* s (Buffer Menu):                       Several Buffers.     (line  39)
* S (Buffer Menu):                       Several Buffers.     (line 131)
* S (Calendar mode):                     Sunrise/Sunset.      (line  20)
* s (Calendar mode):                     Displaying the Diary.
                                                              (line  62)
* S (Dired):                             Operating on Files.  (line 119)
* s (Dired):                             Dired Updating.      (line  67)
* s (Gnus Summary mode):                 Gnus Summary Buffer. (line  28)
* s (Rmail):                             Rmail Basics.        (line  28)
* s (View mode):                         View Mode.           (line   6)
* s 0 (Image mode):                      Image Mode.          (line  22)
* s o (Image mode):                      Image Mode.          (line  22)
* s p (Image mode):                      Image Mode.          (line  22)
* s s (Image mode):                      Image Mode.          (line  22)
* s w (Image mode):                      Image Mode.          (line  22)
* S-C-TAB:                               Tab Bars.            (line 127)
* S-F10:                                 Menu Mouse Clicks.   (line  33)
* S-mouse-2:                             Hideshow.            (line  19)
* S-mouse-3 (FFAP):                      FFAP.                (line  57)
* S-SPC (Rmail):                         Rmail Scrolling.     (line  21)
* S-TAB (customization buffer):          Customization Groups.
                                                              (line  47)
* S-TAB (Help mode):                     Help Mode.           (line  52)
* S-TAB (Org Mode):                      Org Mode.            (line  24)
* SPC (Calendar mode):                   General Calendar.    (line  28)
* SPC (completion):                      Completion Commands. (line  29)
* SPC (Dired):                           Dired Navigation.    (line  12)
* SPC (DocView mode):                    DocView Navigation.  (line  20)
* SPC (GDB Breakpoints buffer):          Breakpoints Buffer.  (line  12)
* SPC (Gnus Group mode):                 Gnus Group Buffer.   (line   8)
* SPC (Gnus Summary mode):               Gnus Summary Buffer. (line   8)
* SPC (Incremental search):              Lax Search.          (line  15)
* SPC (Rmail):                           Rmail Scrolling.     (line  21)
* SPC (View mode):                       View Mode.           (line   6)
* t (Buffer Menu):                       Several Buffers.     (line  81)
* T (Buffer Menu):                       Several Buffers.     (line 144)
* t (Calendar mode):                     Writing Calendar Files.
                                                              (line  41)
* t (Dired):                             Marks vs Flags.      (line  92)
* T (Dired):                             Operating on Files.  (line 159)
* t (Rmail):                             Rmail Display.       (line  12)
* TAB (and major modes):                 Major Modes.         (line   6)
* TAB (completion example):              Completion Example.  (line   6)
* TAB (completion):                      Completion Commands. (line  24)
* TAB (customization buffer):            Customization Groups.
                                                              (line  47)
* TAB (GUD):                             Commands of GUD.     (line 102)
* TAB (Help mode):                       Help Mode.           (line  52)
* TAB (indentation):                     Indentation.         (line  13)
* TAB (Message mode):                    Header Editing.      (line  38)
* TAB (Org Mode):                        Org Mode.            (line  16)
* TAB (programming modes):               Basic Indent.        (line  12)
* TAB (Shell mode):                      Shell Mode.          (line  20)
* TAB (Text mode):                       Text Mode.           (line  16)
* TAB, when using Chinese input methods: Input Methods.       (line  56)
* u (Buffer Menu):                       Several Buffers.     (line  48)
* U (Buffer Menu):                       Several Buffers.     (line  63)
* u (Calendar mode):                     Holidays.            (line  33)
* u (Dired deletion):                    Dired Deletion.      (line  30)
* u (Dired):                             Marks vs Flags.      (line  48)
* U (Dired):                             Marks vs Flags.      (line  64)
* u (Gnus Group mode):                   Gnus Group Buffer.   (line  29)
* u (Package Menu):                      Package Menu.        (line  68)
* U (Package Menu):                      Package Menu.        (line  72)
* u (Rmail):                             Rmail Deletion.      (line  41)
* UP:                                    Moving Point.        (line  40)
* UP (minibuffer history):               Minibuffer History.  (line  55)
* v (Buffer Menu):                       Several Buffers.     (line 123)
* v (Dired):                             Dired Visiting.      (line  38)
* v (Rmail):                             Rmail Display.       (line  56)
* w (Dired):                             Misc Dired Features. (line  29)
* W (Dired):                             Misc Dired Features. (line  46)
* w (Package Menu):                      Package Menu.        (line  58)
* w (Rmail):                             Rmail Output.        (line  37)
* x (Buffer Menu):                       Several Buffers.     (line  45)
* x (Calendar mode):                     Holidays.            (line  33)
* x (Dired):                             Dired Deletion.      (line  41)
* X (Dired):                             Shell Commands in Dired.
                                                              (line   6)
* x (Package Menu):                      Package Menu.        (line  84)
* x (Rmail):                             Rmail Deletion.      (line  41)
* Y (Dired):                             Operating on Files.  (line 125)
* Z (Dired):                             Operating on Files.  (line 171)


File: emacs.info,  Node: Option Index,  Next: Command Index,  Prev: Key Index,  Up: Top

# /. Command-Line Options Index
******************************

 [index ]
* Menu:

* +LINENUM:                              Action Arguments.    (line  30)
* --background-color:                    Colors X.            (line  16)
* --basic-display:                       Misc X.              (line  25)
* --batch:                               Initial Options.     (line  43)
* --border-color:                        Colors X.            (line  20)
* --border-width:                        Borders X.           (line  20)
* --chdir:                               Initial Options.     (line  20)
* --color:                               Colors X.            (line  35)
* --cursor-color:                        Colors X.            (line  24)
* --daemon:                              Initial Options.     (line 142)
* --debug-init:                          Initial Options.     (line 163)
* --directory:                           Action Arguments.    (line  48)
* --display:                             Initial Options.     (line  32)
* --dump-file:                           Initial Options.     (line 175)
* --eval:                                Action Arguments.    (line  64)
* --execute:                             Action Arguments.    (line  65)
* --file:                                Action Arguments.    (line   9)
* --find-file:                           Action Arguments.    (line  10)
* --fingerprint:                         Action Arguments.    (line  87)
* --font:                                Font X.              (line  11)
* --foreground-color:                    Colors X.            (line  12)
* --fullheight:                          Window Size X.       (line  32)
* --fullscreen:                          Window Size X.       (line  18)
* --fullwidth:                           Window Size X.       (line  36)
* --funcall:                             Action Arguments.    (line  58)
* --geometry:                            Window Size X.       (line  11)
* --help:                                Action Arguments.    (line  80)
* --iconic:                              Icons X.             (line   7)
* --init-directory:                      Initial Options.     (line 122)
* --insert:                              Action Arguments.    (line  68)
* --internal-border:                     Borders X.           (line  15)
* --kill:                                Action Arguments.    (line  77)
* --line-spacing:                        Misc X.              (line  17)
* --load:                                Action Arguments.    (line  38)
* --maximized:                           Window Size X.       (line  25)
* --module-assertions:                   Initial Options.     (line 167)
* --mouse-color:                         Colors X.            (line  28)
* --name:                                Resources.           (line  62)
* --no-bitmap-icon:                      Icons X.             (line  12)
* --no-blinking-cursor:                  Misc X.              (line  21)
* --no-build-details:                    Initial Options.     (line 100)
* --no-desktop:                          Initial Options.     (line 156)
* --no-init-file:                        Initial Options.     (line 107)
* --no-site-file:                        Initial Options.     (line 113)
* --no-site-lisp:                        Initial Options.     (line 118)
* --no-splash:                           Initial Options.     (line 125)
* --no-window-system:                    Initial Options.     (line  37)
* --no-x-resources:                      Initial Options.     (line 130)
* --quick:                               Initial Options.     (line 136)
* --reverse-video:                       Colors X.            (line  33)
* --script:                              Initial Options.     (line  73)
* --terminal:                            Initial Options.     (line  27)
* --title:                               Title X.             (line  16)
* --user:                                Initial Options.     (line 160)
* --version:                             Action Arguments.    (line  84)
* --vertical-scroll-bars:                Misc X.              (line  13)
* --visit:                               Action Arguments.    (line  11)
* --xrm:                                 Resources.           (line  79)
* -bd:                                   Colors X.            (line  19)
* -bg:                                   Colors X.            (line  15)
* -bw:                                   Borders X.           (line  19)
* -chdir:                                Initial Options.     (line  19)
* -cr:                                   Colors X.            (line  23)
* -d:                                    Initial Options.     (line  31)
* -D:                                    Misc X.              (line  24)
* -daemon:                               Initial Options.     (line 141)
* -f:                                    Action Arguments.    (line  57)
* -fg:                                   Colors X.            (line  11)
* -fh:                                   Window Size X.       (line  31)
* -fn:                                   Font X.              (line  10)
* -fs:                                   Window Size X.       (line  17)
* -fw:                                   Window Size X.       (line  35)
* -g:                                    Window Size X.       (line  10)
* -ib:                                   Borders X.           (line  14)
* -l:                                    Action Arguments.    (line  37)
* -L:                                    Action Arguments.    (line  47)
* -lsp:                                  Misc X.              (line  16)
* -mm:                                   Window Size X.       (line  24)
* -ms:                                   Colors X.            (line  27)
* -nbc:                                  Misc X.              (line  20)
* -nbi:                                  Icons X.             (line  11)
* -nsl:                                  Initial Options.     (line 114)
* -nw:                                   Initial Options.     (line  36)
* -q:                                    Initial Options.     (line 106)
* -Q:                                    Initial Options.     (line 135)
* -r:                                    Colors X.            (line  31)
* -rv:                                   Colors X.            (line  32)
* -t:                                    Initial Options.     (line  26)
* -T:                                    Title X.             (line  15)
* -u:                                    Initial Options.     (line 159)
* -vb:                                   Misc X.              (line  12)
* -x:                                    Initial Options.     (line  86)


File: emacs.info,  Node: Command Index,  Next: Variable Index,  Prev: Option Index,  Up: Top

# /. Command and Function Index
******************************

 [index ]
* Menu:

* 2C-associate-buffer:                   Two-Column.          (line  34)
* 2C-dissociate:                         Two-Column.          (line  63)
* 2C-merge:                              Two-Column.          (line  58)
* 2C-newline:                            Two-Column.          (line  53)
* 2C-split:                              Two-Column.          (line  21)
* 2C-two-columns:                        Two-Column.          (line  11)
* 5x5:                                   Amusements.          (line   9)
* abbrev-mode:                           Abbrev Concepts.     (line  12)
* abbrev-prefix-mark:                    Expanding Abbrevs.   (line  35)
* abbrev-suggest-show-report:            Abbrevs Suggestions. (line  26)
* abort-recursive-edit:                  Quitting.            (line  73)
* activate-transient-input-method:       Select Input Method. (line  95)
* add-change-log-entry-other-window:     Change Log Commands. (line   6)
* add-change-log-entry-other-window, in Diff mode: Diff Mode. (line 151)
* add-dir-local-variable:                Directory Variables. (line  92)
* add-file-local-variable:               Specifying File Variables.
                                                              (line  80)
* add-file-local-variable-prop-line:     Specifying File Variables.
                                                              (line  17)
* add-global-abbrev:                     Defining Abbrevs.    (line  31)
* add-hook:                              Hooks.               (line  29)
* add-mode-abbrev:                       Defining Abbrevs.    (line  45)
* add-name-to-file:                      Copying and Naming.  (line  41)
* animate-birthday-present:              Amusements.          (line   6)
* append-next-kill:                      Appending Kills.     (line  38)
* append-to-buffer:                      Accumulating Text.   (line   6)
* append-to-file:                        Accumulating Text.   (line   6)
* append-to-register:                    Text Registers.      (line  34)
* apply-macro-to-region-lines:           Basic Keyboard Macro.
                                                              (line  88)
* appt-activate:                         Appointments.        (line  21)
* appt-add:                              Appointments.        (line  59)
* appt-delete:                           Appointments.        (line  59)
* apropos:                               Apropos.             (line  20)
* apropos-command:                       Apropos.             (line  16)
* apropos-documentation:                 Apropos.             (line  45)
* apropos-local-value:                   Apropos.             (line  41)
* apropos-local-variable:                Apropos.             (line  32)
* apropos-user-option:                   Apropos.             (line  24)
* apropos-value:                         Apropos.             (line  35)
* apropos-variable:                      Apropos.             (line  28)
* ask-user-about-lock:                   Interlocking.        (line  18)
* async-shell-command:                   Single Shell.        (line  39)
* auto-compression-mode:                 Compressed Files.    (line  17)
* auto-fill-mode:                        Auto Fill.           (line  16)
* auto-revert-mode:                      Auto Revert.         (line   6)
* auto-revert-tail-mode:                 Auto Revert.         (line   6)
* auto-save-mode:                        Auto Save Control.   (line   6)
* back-to-indentation:                   Indentation Commands.
                                                              (line  16)
* backward-button:                       Help Mode.           (line  52)
* backward-char:                         Moving Point.        (line  26)
* backward-delete-char-untabify:         Program Modes.       (line  38)
* backward-kill-sentence:                Sentences.           (line  37)
* backward-kill-word:                    Words.               (line  43)
* backward-list:                         Moving by Parens.    (line  28)
* backward-page:                         Pages.               (line  31)
* backward-paragraph:                    Paragraphs.          (line  16)
* backward-sentence:                     Sentences.           (line  19)
* backward-sexp:                         Expressions.         (line  25)
* backward-up-list:                      Moving by Parens.    (line  32)
* backward-word:                         Words.               (line  26)
* balance-windows:                       Change Window.       (line  77)
* beginning-of-buffer:                   Moving Point.        (line  83)
* beginning-of-defun:                    Moving by Defuns.    (line  17)
* beginning-of-visual-line:              Visual Line Mode.    (line  27)
* bibtex-mode:                           TeX Mode.            (line   6)
* binary-overwrite-mode:                 Minor Modes.         (line  93)
* blackbox:                              Amusements.          (line   9)
* blink-cursor-mode:                     Cursor Display.      (line  25)
* bookmark-delete:                       Bookmarks.           (line  89)
* bookmark-insert:                       Bookmarks.           (line  96)
* bookmark-insert-location:              Bookmarks.           (line  92)
* bookmark-jump:                         Bookmarks.           (line  30)
* bookmark-load:                         Bookmarks.           (line  80)
* bookmark-save:                         Bookmarks.           (line  46)
* bookmark-set:                          Bookmarks.           (line  30)
* bookmark-set-no-overwrite:             Bookmarks.           (line  36)
* bookmark-write:                        Bookmarks.           (line  86)
* browse-url:                            Browse-URL.          (line   6)
* browse-url-at-mouse:                   Browse-URL.          (line   6)
* browse-url-at-point:                   Browse-URL.          (line   6)
* browse-url-of-dired-file:              Misc Dired Features. (line  46)
* bs-customize:                          Buffer Menus.        (line  12)
* bs-show:                               Buffer Menus.        (line   6)
* bubbles:                               Amusements.          (line  16)
* buffer-menu:                           Several Buffers.     (line  17)
* Buffer-menu-1-window:                  Several Buffers.     (line 104)
* Buffer-menu-2-window:                  Several Buffers.     (line 108)
* Buffer-menu-backup-unmark:             Several Buffers.     (line  53)
* Buffer-menu-bury:                      Several Buffers.     (line 113)
* Buffer-menu-delete:                    Several Buffers.     (line  29)
* Buffer-menu-delete-backwards:          Several Buffers.     (line  35)
* Buffer-menu-execute:                   Several Buffers.     (line  45)
* Buffer-menu-mark:                      Several Buffers.     (line 117)
* Buffer-menu-not-modified:              Several Buffers.     (line  73)
* buffer-menu-other-window:              Several Buffers.     (line  17)
* Buffer-menu-other-window:              Several Buffers.     (line  96)
* Buffer-menu-save:                      Several Buffers.     (line  39)
* Buffer-menu-select:                    Several Buffers.     (line 123)
* Buffer-menu-switch-other-window:       Several Buffers.     (line 100)
* Buffer-menu-this-window:               Several Buffers.     (line  92)
* Buffer-menu-toggle-files-only:         Several Buffers.     (line 144)
* Buffer-menu-toggle-read-only:          Several Buffers.     (line  77)
* Buffer-menu-unmark:                    Several Buffers.     (line  48)
* Buffer-menu-unmark-all:                Several Buffers.     (line  63)
* Buffer-menu-unmark-all-buffers:        Several Buffers.     (line  57)
* Buffer-menu-visit-tags-table:          Several Buffers.     (line  81)
* bug-reference-mode:                    Bug Reference.       (line  12)
* bug-reference-prog-mode:               Bug Reference.       (line  12)
* butterfly:                             Amusements.          (line  59)
* button-describe:                       Key Help.            (line  30)
* c-backslash-region:                    Other C Commands.    (line  46)
* c-backward-conditional:                Motion in C.         (line  30)
* c-beginning-of-defun:                  Motion in C.         (line  11)
* c-beginning-of-statement:              Motion in C.         (line  40)
* c-context-line-break:                  Other C Commands.    (line   7)
* c-end-of-defun:                        Motion in C.         (line  11)
* c-end-of-statement:                    Motion in C.         (line  49)
* c-fill-paragraph:                      Other C Commands.    (line  28)
* c-forward-conditional:                 Motion in C.         (line  35)
* c-guess:                               Custom C Indent.     (line  64)
* c-guess-install:                       Custom C Indent.     (line  64)
* c-hungry-delete-backwards:             Hungry Delete.       (line  14)
* c-hungry-delete-forward:               Hungry Delete.       (line  20)
* c-indent-defun:                        C Indent.            (line   9)
* c-indent-exp:                          C Indent.            (line  14)
* c-indent-line-or-region:               C Indent.            (line  21)
* c-macro-expand:                        Other C Commands.    (line  34)
* c-mark-function:                       Moving by Defuns.    (line  30)
* c-set-style:                           Custom C Indent.     (line  27)
* c-show-syntactic-information:          Other C Commands.    (line  65)
* c-toggle-auto-newline:                 Electric C.          (line  31)
* c-toggle-electric-state:               Electric C.          (line  21)
* c-toggle-hungry-state:                 Hungry Delete.       (line  30)
* c-ts-mode-indent-defun:                C Indent.            (line   9)
* c-ts-mode-set-style:                   Custom C Indent.     (line  27)
* c-up-conditional:                      Motion in C.         (line  20)
* calendar:                              Calendar/Diary.      (line   6)
* calendar-astro-goto-day-number:        From Other Calendar. (line  10)
* calendar-astro-print-day-number:       To Other Calendar.   (line  18)
* calendar-backward-day:                 Calendar Unit Motion.
                                                              (line  27)
* calendar-backward-month:               Calendar Unit Motion.
                                                              (line  36)
* calendar-backward-week:                Calendar Unit Motion.
                                                              (line  27)
* calendar-backward-year:                Calendar Unit Motion.
                                                              (line  36)
* calendar-bahai-goto-date:              From Other Calendar. (line  10)
* calendar-bahai-print-date:             To Other Calendar.   (line  30)
* calendar-beginning-of-month:           Move to Beginning or End.
                                                              (line  13)
* calendar-beginning-of-week:            Move to Beginning or End.
                                                              (line  10)
* calendar-beginning-of-year:            Move to Beginning or End.
                                                              (line  17)
* calendar-chinese-goto-date:            From Other Calendar. (line  10)
* calendar-chinese-print-date:           To Other Calendar.   (line  33)
* calendar-coptic-goto-date:             From Other Calendar. (line  10)
* calendar-coptic-print-date:            To Other Calendar.   (line  35)
* calendar-count-days-region:            Counting Days.       (line  10)
* calendar-cursor-holidays:              Holidays.            (line  26)
* calendar-end-of-month:                 Move to Beginning or End.
                                                              (line  15)
* calendar-end-of-week:                  Move to Beginning or End.
                                                              (line  11)
* calendar-end-of-year:                  Move to Beginning or End.
                                                              (line  19)
* calendar-ethiopic-goto-date:           From Other Calendar. (line  10)
* calendar-ethiopic-print-date:          To Other Calendar.   (line  38)
* calendar-forward-day:                  Calendar Unit Motion.
                                                              (line  27)
* calendar-forward-month:                Calendar Unit Motion.
                                                              (line  36)
* calendar-forward-week:                 Calendar Unit Motion.
                                                              (line  27)
* calendar-forward-year:                 Calendar Unit Motion.
                                                              (line  36)
* calendar-french-goto-date:             From Other Calendar. (line  10)
* calendar-french-print-date:            To Other Calendar.   (line  27)
* calendar-goto-date:                    Specified Dates.     (line  20)
* calendar-goto-day-of-year:             Specified Dates.     (line  25)
* calendar-goto-today:                   Specified Dates.     (line  33)
* calendar-hebrew-goto-date:             From Other Calendar. (line  10)
* calendar-hebrew-list-yahrzeits:        From Other Calendar. (line  54)
* calendar-hebrew-print-date:            To Other Calendar.   (line  21)
* calendar-islamic-goto-date:            From Other Calendar. (line  10)
* calendar-islamic-print-date:           To Other Calendar.   (line  24)
* calendar-iso-goto-date:                From Other Calendar. (line  10)
* calendar-iso-goto-week:                Specified Dates.     (line  25)
* calendar-iso-print-date:               To Other Calendar.   (line  12)
* calendar-julian-goto-date:             From Other Calendar. (line  10)
* calendar-julian-print-date:            To Other Calendar.   (line  15)
* calendar-list-holidays:                Holidays.            (line  43)
* calendar-lunar-phases:                 Lunar Phases.        (line  17)
* calendar-mark-holidays:                Holidays.            (line  33)
* calendar-mark-today:                   Calendar Customizing.
                                                              (line  41)
* calendar-mayan-goto-long-count-date:   Mayan Calendar.      (line  36)
* calendar-mayan-next-calendar-round-date: Mayan Calendar.    (line  58)
* calendar-mayan-next-haab-date:         Mayan Calendar.      (line  50)
* calendar-mayan-next-tzolkin-date:      Mayan Calendar.      (line  42)
* calendar-mayan-previous-haab-date:     Mayan Calendar.      (line  50)
* calendar-mayan-previous-tzolkin-date:  Mayan Calendar.      (line  42)
* calendar-mayan-print-date:             To Other Calendar.   (line  44)
* calendar-other-month:                  Specified Dates.     (line  30)
* calendar-persian-goto-date:            From Other Calendar. (line  10)
* calendar-persian-print-date:           To Other Calendar.   (line  41)
* calendar-print-day-of-year:            General Calendar.    (line  18)
* calendar-print-other-dates:            To Other Calendar.   (line   9)
* calendar-redraw:                       General Calendar.    (line  24)
* calendar-scroll-left:                  Scroll Calendar.     (line  27)
* calendar-scroll-left-three-months:     Scroll Calendar.     (line  33)
* calendar-scroll-right:                 Scroll Calendar.     (line  27)
* calendar-scroll-right-three-months:    Scroll Calendar.     (line  33)
* calendar-set-date-style:               Date Formats.        (line  43)
* calendar-star-date:                    Calendar Customizing.
                                                              (line  35)
* calendar-sunrise-sunset:               Sunrise/Sunset.      (line  20)
* calendar-unmark:                       Holidays.            (line  33)
* capitalize-word:                       Case.                (line  20)
* category-set-mnemonics:                Visual Line Mode.    (line  55)
* cd:                                    File Names.          (line  31)
* center-line:                           Fill Commands.       (line  55)
* change-log-goto-source:                Change Log Commands. (line  46)
* change-log-merge:                      Change Log Commands. (line  55)
* change-log-mode:                       Change Log Commands. (line  40)
* char-category-set:                     Visual Line Mode.    (line  55)
* check-parens:                          Parentheses.         (line   6)
* choose-completion:                     Completion Commands. (line  63)
* clean-buffer-list:                     Kill Buffer.         (line  50)
* clear-rectangle:                       Rectangles.          (line  96)
* clipboard-kill-region:                 Clipboard.           (line  55)
* clipboard-kill-ring-save:              Clipboard.           (line  55)
* clipboard-yank:                        Clipboard.           (line  55)
* clone-frame:                           Creating Frames.     (line  22)
* clone-indirect-buffer:                 Indirect Buffers.    (line  12)
* clone-indirect-buffer-other-window:    Indirect Buffers.    (line  17)
* column-number-mode:                    Optional Mode Line.  (line  23)
* comint-bol-or-process-mark:            Shell Mode.          (line  39)
* comint-continue-subjob:                Shell Mode.          (line 129)
* comint-copy-old-input:                 Shell History Copying.
                                                              (line  12)
* comint-delchar-or-maybe-eof:           Shell Mode.          (line  33)
* comint-delete-output:                  Shell Mode.          (line  79)
* comint-dynamic-list-filename...:       Shell Mode.          (line  29)
* comint-dynamic-list-input-ring:        Shell Ring.          (line  27)
* comint-get-next-from-history:          Shell Ring.          (line  19)
* comint-history-isearch-backward-regexp: Shell Ring.         (line  14)
* comint-insert-previous-argument:       Shell Ring.          (line  23)
* comint-interrupt-subjob:               Shell Mode.          (line  64)
* comint-kill-input:                     Shell Mode.          (line  56)
* comint-magic-space:                    History References.  (line  17)
* comint-next-input:                     Shell Ring.          (line  10)
* comint-next-prompt:                    Shell History Copying.
                                                              (line   9)
* comint-previous-input:                 Shell Ring.          (line   6)
* comint-previous-prompt:                Shell History Copying.
                                                              (line   6)
* comint-quit-subjob:                    Shell Mode.          (line  74)
* comint-run:                            Shell Mode.          (line 169)
* comint-send-input:                     Shell Mode.          (line  12)
* comint-send-invisible:                 Shell Mode.          (line 117)
* comint-show-maximum-output:            Shell Mode.          (line  99)
* comint-show-output:                    Shell Mode.          (line  94)
* comint-stop-subjob:                    Shell Mode.          (line  69)
* comint-strip-ctrl-m:                   Shell Mode.          (line 133)
* comint-truncate-buffer:                Shell Mode.          (line 142)
* comint-write-output:                   Shell Mode.          (line  87)
* command-query:                         Disabling.           (line  33)
* comment-dwim:                          Comment Commands.    (line  27)
* comment-kill:                          Comment Commands.    (line  73)
* comment-line:                          Comment Commands.    (line  63)
* comment-region:                        Comment Commands.    (line  84)
* comment-set-column:                    Options for Comments.
                                                              (line   6)
* compare-windows:                       Comparing Files.     (line  32)
* compilation-next-error:                Compilation Mode.    (line 133)
* compilation-next-file:                 Compilation Mode.    (line 133)
* compilation-previous-error:            Compilation Mode.    (line 133)
* compilation-previous-file:             Compilation Mode.    (line 133)
* compile:                               Compilation.         (line  22)
* compile (MS-DOS):                      MS-DOS Processes.    (line   6)
* compile-goto-error:                    Compilation Mode.    (line  24)
* completion-at-point, in programming language modes: Symbol Completion.
                                                              (line   9)
* completion-at-point, in Shell Mode:    Shell Mode.          (line  20)
* compose-mail:                          Sending Mail.        (line   6)
* compose-mail-other-frame:              Sending Mail.        (line  33)
* compose-mail-other-window:             Sending Mail.        (line  33)
* connection-local-set-profile-variables: Connection Variables.
                                                              (line  17)
* connection-local-set-profiles:         Connection Variables.
                                                              (line  17)
* context-menu-mode:                     Menu Mouse Clicks.   (line  33)
* copy-dir-locals-to-file-locals:        Specifying File Variables.
                                                              (line  80)
* copy-dir-locals-to-file-locals-prop-line: Specifying File Variables.
                                                              (line  17)
* copy-directory:                        Copying and Naming.  (line  23)
* copy-file:                             Copying and Naming.  (line  21)
* copy-file-locals-to-dir-locals:        Directory Variables. (line  92)
* copy-matching-lines:                   Other Repeating Search.
                                                              (line 134)
* copy-rectangle-as-kill:                Rectangles.          (line  79)
* copy-rectangle-to-register:            Rectangle Registers. (line  10)
* copy-to-buffer:                        Accumulating Text.   (line   6)
* copy-to-register:                      Text Registers.      (line  26)
* count-lines-page:                      Pages.               (line  51)
* count-words:                           Position Info.       (line  50)
* count-words-region:                    Position Info.       (line  45)
* cpp-highlight-buffer:                  Other C Commands.    (line  56)
* create-fontset-from-fontset-spec:      Defining Fontsets.   (line 106)
* cua-mode:                              CUA Bindings.        (line   6)
* custom-prompt-customize-unsaved-options: Saving Customizations.
                                                              (line  46)
* Custom-save:                           Changing a Variable. (line 135)
* Custom-set:                            Changing a Variable. (line 135)
* customize:                             Easy Customization.  (line  14)
* customize-apropos:                     Specific Customization.
                                                              (line  46)
* customize-browse:                      Browsing Custom.     (line   6)
* customize-changed:                     Specific Customization.
                                                              (line  52)
* customize-create-theme:                Creating Custom Themes.
                                                              (line   6)
* customize-face:                        Specific Customization.
                                                              (line  42)
* customize-group:                       Specific Customization.
                                                              (line  42)
* customize-option:                      Specific Customization.
                                                              (line  36)
* customize-saved:                       Specific Customization.
                                                              (line  60)
* customize-themes:                      Custom Themes.       (line  16)
* customize-unsaved:                     Specific Customization.
                                                              (line  60)
* cwarn-mode:                            Other C Commands.    (line  71)
* cycle-spacing:                         Deletion.            (line  52)
* dabbrev-completion:                    Dynamic Abbrevs.     (line  12)
* dabbrev-expand:                        Dynamic Abbrevs.     (line  12)
* dbx:                                   Starting GUD.        (line  36)
* debbugs-browse-mode:                   Bug Reference.       (line 133)
* debug_print:                           Checklist.           (line 344)
* decipher:                              Amusements.          (line  19)
* default-indent-new-line:               Multi-Line Comments. (line   6)
* default-value:                         Locals.              (line  70)
* define-abbrevs:                        Saving Abbrevs.      (line  47)
* define-global-abbrev:                  Defining Abbrevs.    (line  55)
* define-key:                            Init Rebinding.      (line  43)
* define-mail-user-agent:                Mail Methods.        (line  12)
* define-mode-abbrev:                    Defining Abbrevs.    (line  55)
* delete-backward-char:                  Deletion.            (line   6)
* delete-blank-lines:                    Blank Lines.         (line  15)
* delete-char:                           Deletion.            (line   6)
* delete-dir-local-variable:             Directory Variables. (line  92)
* delete-duplicate-lines:                Deletion.            (line  66)
* delete-file:                           Misc File Ops.       (line   9)
* delete-file-local-variable:            Specifying File Variables.
                                                              (line  80)
* delete-file-local-variable-prop-line:  Specifying File Variables.
                                                              (line  17)
* delete-frame:                          Frame Commands.      (line   9)
* delete-horizontal-space:               Deletion.            (line  40)
* delete-indentation:                    Indentation Commands.
                                                              (line  33)
* delete-other-frames:                   Frame Commands.      (line  28)
* delete-other-windows:                  Change Window.       (line  41)
* delete-rectangle:                      Rectangles.          (line  66)
* delete-selection-mode:                 Using Region.        (line  50)
* delete-trailing-whitespace:            Useless Whitespace.  (line  21)
* delete-whitespace-rectangle:           Rectangles.          (line 101)
* delete-window:                         Change Window.       (line  29)
* describe-bindings:                     Misc Help.           (line  44)
* describe-categories:                   Regexp Backslash.    (line 158)
* describe-char:                         International Chars. (line  65)
* describe-character-set:                Charsets.            (line  24)
* describe-coding-system:                Coding Systems.      (line  43)
* describe-command:                      Name Help.           (line   6)
* describe-copying:                      Help Files.          (line  12)
* describe-distribution:                 Help Files.          (line  12)
* describe-fontset:                      Fontsets.            (line  47)
* describe-function:                     Name Help.           (line  15)
* describe-gnu-project:                  Help Files.          (line  12)
* describe-input-method:                 Select Input Method. (line  21)
* describe-key:                          Key Help.            (line   6)
* describe-key-briefly:                  Key Help.            (line   6)
* describe-keymap:                       Misc Help.           (line  61)
* describe-language-environment:         Language Environments.
                                                              (line  76)
* describe-mode:                         Misc Help.           (line  38)
* describe-no-warranty:                  Help Files.          (line  12)
* describe-package:                      Package Keywords.    (line  17)
* describe-prefix-bindings:              Misc Help.           (line  53)
* describe-repeat-maps:                  Repeating.           (line  27)
* describe-symbol:                       Name Help.           (line  62)
* describe-syntax:                       Misc Help.           (line  44)
* describe-text-properties:              Editing Format Info. (line  20)
* describe-theme:                        Custom Themes.       (line  76)
* describe-variable:                     Name Help.           (line  49)
* desktop-change-dir:                    Saving Emacs Sessions.
                                                              (line  32)
* desktop-clear:                         Saving Emacs Sessions.
                                                              (line 101)
* desktop-read:                          Saving Emacs Sessions.
                                                              (line  66)
* desktop-revert:                        Saving Emacs Sessions.
                                                              (line  32)
* desktop-save:                          Saving Emacs Sessions.
                                                              (line  66)
* desktop-save-mode:                     Saving Emacs Sessions.
                                                              (line  11)
* diary:                                 Displaying the Diary.
                                                              (line  65)
* diary-anniversary:                     Special Diary Entries.
                                                              (line  32)
* diary-anniversary, and sexp diary entries: Sexp Diary Entries.
                                                              (line  16)
* diary-astro-day-number:                Sexp Diary Entries.  (line 116)
* diary-bahai-date:                      Sexp Diary Entries.  (line 116)
* diary-bahai-insert-entry:              Non-Gregorian Diary. (line  73)
* diary-bahai-insert-monthly-entry:      Non-Gregorian Diary. (line  73)
* diary-bahai-insert-yearly-entry:       Non-Gregorian Diary. (line  73)
* diary-bahai-list-entries:              Non-Gregorian Diary. (line  13)
* diary-bahai-mark-entries:              Non-Gregorian Diary. (line  13)
* diary-block:                           Special Diary Entries.
                                                              (line  44)
* diary-chinese-date:                    Sexp Diary Entries.  (line 116)
* diary-chinese-insert-anniversary-entry: Non-Gregorian Diary.
                                                              (line  73)
* diary-chinese-insert-entry:            Non-Gregorian Diary. (line  73)
* diary-chinese-insert-monthly-entry:    Non-Gregorian Diary. (line  73)
* diary-chinese-insert-yearly-entry:     Non-Gregorian Diary. (line  73)
* diary-chinese-list-entries:            Non-Gregorian Diary. (line  13)
* diary-chinese-mark-entries:            Non-Gregorian Diary. (line  13)
* diary-coptic-date:                     Sexp Diary Entries.  (line 116)
* diary-cyclic:                          Special Diary Entries.
                                                              (line  61)
* diary-cyclic, and sexp diary entries:  Sexp Diary Entries.  (line  35)
* diary-date:                            Sexp Diary Entries.  (line  53)
* diary-day-of-year:                     Sexp Diary Entries.  (line 116)
* diary-ethiopic-date:                   Sexp Diary Entries.  (line 116)
* diary-fancy-display:                   Diary Display.       (line   6)
* diary-float:                           Special Diary Entries.
                                                              (line  83)
* diary-float, and sexp diary entries:   Sexp Diary Entries.  (line  65)
* diary-french-date:                     Sexp Diary Entries.  (line 116)
* diary-hebrew-birthday:                 Sexp Diary Entries.  (line 162)
* diary-hebrew-date:                     Sexp Diary Entries.  (line 116)
* diary-hebrew-insert-entry:             Non-Gregorian Diary. (line  73)
* diary-hebrew-insert-monthly-entry:     Non-Gregorian Diary. (line  73)
* diary-hebrew-insert-yearly-entry:      Non-Gregorian Diary. (line  73)
* diary-hebrew-list-entries:             Non-Gregorian Diary. (line  13)
* diary-hebrew-mark-entries:             Non-Gregorian Diary. (line  13)
* diary-hebrew-omer:                     Sexp Diary Entries.  (line 162)
* diary-hebrew-parasha:                  Sexp Diary Entries.  (line 162)
* diary-hebrew-rosh-hodesh:              Sexp Diary Entries.  (line 162)
* diary-hebrew-sabbath-candles:          Sexp Diary Entries.  (line 162)
* diary-hebrew-yahrzeit:                 Sexp Diary Entries.  (line 162)
* diary-include-other-diary-files:       Fancy Diary Display. (line  36)
* diary-insert-anniversary-entry:        Special Diary Entries.
                                                              (line  26)
* diary-insert-block-entry:              Special Diary Entries.
                                                              (line  51)
* diary-insert-cyclic-entry:             Special Diary Entries.
                                                              (line  56)
* diary-insert-entry:                    Adding to Diary.     (line  24)
* diary-insert-monthly-entry:            Adding to Diary.     (line  29)
* diary-insert-weekly-entry:             Adding to Diary.     (line  29)
* diary-insert-yearly-entry:             Adding to Diary.     (line  29)
* diary-islamic-date:                    Sexp Diary Entries.  (line 116)
* diary-islamic-insert-entry:            Non-Gregorian Diary. (line  73)
* diary-islamic-insert-monthly-entry:    Non-Gregorian Diary. (line  73)
* diary-islamic-insert-yearly-entry:     Non-Gregorian Diary. (line  73)
* diary-islamic-list-entries:            Non-Gregorian Diary. (line  13)
* diary-islamic-mark-entries:            Non-Gregorian Diary. (line  13)
* diary-iso-date:                        Sexp Diary Entries.  (line 116)
* diary-julian-date:                     Sexp Diary Entries.  (line 116)
* diary-lunar-phases:                    Sexp Diary Entries.  (line 116)
* diary-mail-entries:                    Displaying the Diary.
                                                              (line  73)
* diary-mark-entries:                    Displaying the Diary.
                                                              (line  43)
* diary-mark-included-diary-files:       Fancy Diary Display. (line  36)
* diary-mayan-date:                      Sexp Diary Entries.  (line 116)
* diary-offset:                          Special Diary Entries.
                                                              (line  94)
* diary-persian-date:                    Sexp Diary Entries.  (line 116)
* diary-print-entries:                   Diary Display.       (line  32)
* diary-remind:                          Sexp Diary Entries.  (line  48)
* diary-show-all-entries:                Displaying the Diary.
                                                              (line  62)
* diary-simple-display:                  Diary Display.       (line   6)
* diary-sort-entries:                    Fancy Diary Display. (line  11)
* diary-sunrise-sunset:                  Sexp Diary Entries.  (line 116)
* diary-view-entries:                    Displaying the Diary.
                                                              (line  28)
* diff:                                  Comparing Files.     (line   6)
* diff-add-change-log-entries-other-window: Diff Mode.        (line 151)
* diff-apply-hunk:                       Diff Mode.           (line  74)
* diff-backup:                           Comparing Files.     (line  20)
* diff-buffer-with-file:                 Comparing Files.     (line  25)
* diff-buffers:                          Comparing Files.     (line  29)
* diff-context->unified:                 Diff Mode.           (line 138)
* diff-delete-trailing-whitespace:       Diff Mode.           (line 160)
* diff-ediff-patch:                      Diff Mode.           (line 105)
* diff-file-kill:                        Diff Mode.           (line  70)
* diff-file-next:                        Diff Mode.           (line  57)
* diff-file-prev:                        Diff Mode.           (line  62)
* diff-goto-source:                      Diff Mode.           (line  90)
* diff-hunk-kill:                        Diff Mode.           (line  67)
* diff-hunk-next:                        Diff Mode.           (line  41)
* diff-hunk-prev:                        Diff Mode.           (line  51)
* diff-ignore-whitespace-hunk:           Diff Mode.           (line 147)
* diff-mode:                             Diff Mode.           (line   6)
* diff-refine-hunk:                      Diff Mode.           (line  81)
* diff-refresh-hunk:                     Diff Mode.           (line 144)
* diff-restrict-view:                    Diff Mode.           (line 109)
* diff-reverse-direction:                Diff Mode.           (line 115)
* diff-split-hunk:                       Diff Mode.           (line 123)
* diff-unified->context:                 Diff Mode.           (line 133)
* digit-argument:                        Arguments.           (line  15)
* dir-locals-set-class-variables:        Directory Variables. (line  99)
* dir-locals-set-directory-class:        Directory Variables. (line  99)
* dired:                                 Dired Enter.         (line   6)
* dired-at-point:                        FFAP.                (line   6)
* dired-change-marks:                    Marks vs Flags.      (line  97)
* dired-clean-directory:                 Flagging Many Files. (line  37)
* dired-compare-directories:             Misc Dired Features. (line  62)
* dired-copy-filename-as-kill:           Misc Dired Features. (line  29)
* dired-create-directory:                Misc Dired Features. (line  13)
* dired-create-empty-file:               Misc Dired Features. (line  17)
* dired-diff:                            Comparison in Dired. (line   6)
* dired-display-file:                    Dired Visiting.      (line  27)
* dired-do-byte-compile:                 Operating on Files.  (line 212)
* dired-do-chgrp:                        Operating on Files.  (line 146)
* dired-do-chmod:                        Operating on Files.  (line 138)
* dired-do-chown:                        Operating on Files.  (line 150)
* dired-do-compress:                     Operating on Files.  (line 171)
* dired-do-compress-to:                  Operating on Files.  (line 186)
* dired-do-copy:                         Operating on Files.  (line  44)
* dired-do-copy-regexp:                  Transforming File Names.
                                                              (line  33)
* dired-do-delete:                       Operating on Files.  (line  82)
* dired-do-find-regexp:                  Operating on Files.  (line 223)
* dired-do-find-regexp-and-replace:      Operating on Files.  (line 238)
* dired-do-flagged-delete:               Dired Deletion.      (line  41)
* dired-do-hardlink:                     Operating on Files.  (line 113)
* dired-do-hardlink-regexp:              Transforming File Names.
                                                              (line  34)
* dired-do-info:                         Operating on Files.  (line 217)
* dired-do-isearch:                      Misc Dired Features. (line  20)
* dired-do-isearch-regexp:               Misc Dired Features. (line  20)
* dired-do-kill-lines:                   Dired Updating.      (line  51)
* dired-do-load:                         Operating on Files.  (line 208)
* dired-do-man:                          Operating on Files.  (line 220)
* dired-do-print:                        Operating on Files.  (line 164)
* dired-do-redisplay:                    Dired Updating.      (line  34)
* dired-do-relsymlink:                   Operating on Files.  (line 125)
* dired-do-relsymlink-regexp:            Transforming File Names.
                                                              (line  36)
* dired-do-rename:                       Operating on Files.  (line  89)
* dired-do-rename-regexp:                Transforming File Names.
                                                              (line  32)
* dired-do-shell-command:                Shell Commands in Dired.
                                                              (line   6)
* dired-do-symlink:                      Operating on Files.  (line 119)
* dired-do-symlink-regexp:               Transforming File Names.
                                                              (line  35)
* dired-do-touch:                        Operating on Files.  (line 159)
* dired-downcase:                        Transforming File Names.
                                                              (line  27)
* dired-find-file:                       Dired Visiting.      (line  12)
* dired-find-file-other-window:          Dired Visiting.      (line  21)
* dired-flag-auto-save-files:            Flagging Many Files. (line  30)
* dired-flag-backup-files:               Flagging Many Files. (line  34)
* dired-flag-file-deletion:              Dired Deletion.      (line  19)
* dired-flag-files-regexp:               Flagging Many Files. (line  56)
* dired-flag-garbage-files:              Flagging Many Files. (line  50)
* dired-goto-file:                       Dired Navigation.    (line  17)
* dired-goto-subdir:                     Subdirectory Motion. (line  38)
* dired-hide-all:                        Hiding Subdirectories.
                                                              (line  15)
* dired-hide-details-mode:               Misc Dired Features. (line  50)
* dired-hide-subdir:                     Hiding Subdirectories.
                                                              (line  10)
* dired-isearch-filenames:               Dired Navigation.    (line  20)
* dired-isearch-filenames-regexp:        Dired Navigation.    (line  20)
* dired-jump:                            Dired Enter.         (line  45)
* dired-jump-other-window:               Dired Enter.         (line  45)
* dired-mark:                            Marks vs Flags.      (line  17)
* dired-mark-directories:                Marks vs Flags.      (line  38)
* dired-mark-executables:                Marks vs Flags.      (line  30)
* dired-mark-files-containing-regexp:    Marks vs Flags.      (line 128)
* dired-mark-files-regexp:               Marks vs Flags.      (line 119)
* dired-mark-subdir-files:               Marks vs Flags.      (line  43)
* dired-mark-symlinks:                   Marks vs Flags.      (line  34)
* dired-maybe-insert-subdir:             Subdirectories in Dired.
                                                              (line  18)
* dired-mouse-find-file-other-window:    Dired Visiting.      (line  33)
* dired-next-dirline:                    Subdirectory Motion. (line  35)
* dired-next-line:                       Dired Navigation.    (line   6)
* dired-next-marked-file:                Marks vs Flags.      (line  83)
* dired-next-subdir:                     Subdirectory Motion. (line  15)
* dired-number-of-marked-files:          Marks vs Flags.      (line  26)
* dired-other-frame:                     Dired Enter.         (line  97)
* dired-other-tab:                       Tab Bars.            (line  84)
* dired-other-window:                    Dired Enter.         (line  97)
* dired-prev-dirline:                    Subdirectory Motion. (line  30)
* dired-prev-marked-file:                Marks vs Flags.      (line  88)
* dired-prev-subdir:                     Subdirectory Motion. (line  19)
* dired-previous-line:                   Dired Navigation.    (line   6)
* dired-sort-toggle-or-edit:             Dired Updating.      (line  67)
* dired-toggle-marks:                    Marks vs Flags.      (line  92)
* dired-tree-down:                       Subdirectory Motion. (line  26)
* dired-tree-up:                         Subdirectory Motion. (line  23)
* dired-undo:                            Marks vs Flags.      (line 146)
* dired-unmark:                          Marks vs Flags.      (line  48)
* dired-unmark-all-files:                Marks vs Flags.      (line  69)
* dired-unmark-all-marks:                Marks vs Flags.      (line  64)
* dired-unmark-backward:                 Marks vs Flags.      (line  56)
* dired-up-directory:                    Dired Visiting.      (line  43)
* dired-upcase:                          Transforming File Names.
                                                              (line  21)
* dired-view-file:                       Dired Visiting.      (line  38)
* dirs:                                  Directory Tracking.  (line  19)
* dirtrack-mode:                         Directory Tracking.  (line  25)
* disable-command:                       Disabling.           (line  46)
* disable-theme:                         Custom Themes.       (line  69)
* display-battery-mode:                  Optional Mode Line.  (line  80)
* display-buffer (command):              Pop Up Window.       (line  15)
* display-buffer, detailed description:  Window Choice.       (line   6)
* display-fill-column-indicator-mode:    Displaying Boundaries.
                                                              (line   6)
* display-line-numbers-mode:             Display Custom.      (line  39)
* display-local-help:                    Help Echo.           (line  13)
* display-time:                          Optional Mode Line.  (line  55)
* dissociated-press:                     Amusements.          (line  22)
* do-auto-save:                          Auto Save Control.   (line  41)
* doc-view-clear-cache:                  DocView Conversion.  (line   6)
* doc-view-enlarge:                      DocView Navigation.  (line  29)
* doc-view-first-page:                   DocView Navigation.  (line  25)
* doc-view-goto-page:                    DocView Navigation.  (line  25)
* doc-view-kill-proc:                    DocView Conversion.  (line  11)
* doc-view-kill-proc-and-buffer:         DocView Conversion.  (line  11)
* doc-view-last-page:                    DocView Navigation.  (line  25)
* doc-view-minor-mode:                   Document View.       (line  13)
* doc-view-mode:                         Document View.       (line   6)
* doc-view-next-page:                    DocView Navigation.  (line  16)
* doc-view-open-text:                    Document View.       (line  22)
* doc-view-previous-page:                DocView Navigation.  (line  16)
* doc-view-reset-slice:                  DocView Slicing.     (line  27)
* doc-view-scroll-down-or-previous-page: DocView Navigation.  (line  20)
* doc-view-scroll-up-or-next-page:       DocView Navigation.  (line  20)
* doc-view-search:                       DocView Searching.   (line  10)
* doc-view-search-backward:              DocView Searching.   (line  10)
* doc-view-set-slice:                    DocView Slicing.     (line  10)
* doc-view-set-slice-using-mouse:        DocView Slicing.     (line  10)
* doc-view-show-tooltip:                 DocView Searching.   (line  10)
* doc-view-shrink:                       DocView Navigation.  (line  29)
* doc-view-toggle-display:               Document View.       (line  13)
* doctex-mode:                           TeX Mode.            (line   6)
* doctor:                                Amusements.          (line  62)
* dos-mode25:                            MS-DOS Display.      (line  42)
* dos-mode4350:                          MS-DOS Display.      (line  42)
* down-list:                             Moving by Parens.    (line  39)
* downcase-region:                       Case.                (line  41)
* downcase-word:                         Case.                (line  20)
* dunnet:                                Amusements.          (line  34)
* edit-abbrevs:                          Editing Abbrevs.     (line  41)
* edit-kbd-macro:                        Edit Keyboard Macro. (line  20)
* edit-tab-stops:                        Tab Stops.           (line  16)
* eldoc-doc-buffer:                      Programming Language Doc.
                                                              (line  86)
* eldoc-mode:                            Programming Language Doc.
                                                              (line  11)
* eldoc-print-current-symbol-info:       Programming Language Doc.
                                                              (line  40)
* electric-indent-mode:                  Indent Convenience.  (line  21)
* electric-layout-mode:                  Misc for Programs.   (line  25)
* electric-pair-mode:                    Matching.            (line  77)
* electric-quote-mode:                   Quotation Marks.     (line   6)
* emacs-lisp-mode:                       Lisp Eval.           (line   6)
* emacs-version:                         Checklist.           (line 180)
* emerge-auto-advance:                   Submodes of Emerge.  (line  31)
* emerge-buffers:                        Overview of Emerge.  (line  15)
* emerge-buffers-with-ancestor:          Overview of Emerge.  (line  18)
* emerge-files:                          Overview of Emerge.  (line   9)
* emerge-files-with-ancestor:            Overview of Emerge.  (line  12)
* emerge-skip-prefers:                   Submodes of Emerge.  (line  31)
* emoji-describe:                        Input Methods.       (line 126)
* emoji-insert:                          Input Methods.       (line 118)
* emoji-list:                            Input Methods.       (line 118)
* emoji-search:                          Input Methods.       (line 118)
* enable-command:                        Disabling.           (line  46)
* enable-theme:                          Custom Themes.       (line  69)
* end-of-buffer:                         Moving Point.        (line  88)
* end-of-defun:                          Moving by Defuns.    (line  17)
* end-of-visual-line:                    Visual Line Mode.    (line  27)
* enlarge-window:                        Change Window.       (line  51)
* enlarge-window-horizontally:           Change Window.       (line  62)
* enriched-mode:                         Enriched Mode.       (line  13)
* epa-dired-do-decrypt:                  Operating on Files.  (line 192)
* epa-dired-do-encrypt:                  Operating on Files.  (line 204)
* epa-dired-do-sign:                     Operating on Files.  (line 200)
* epa-dired-do-verify:                   Operating on Files.  (line 196)
* eval-buffer:                           Lisp Eval.           (line  73)
* eval-defun:                            Lisp Eval.           (line  60)
* eval-expression:                       Lisp Eval.           (line  31)
* eval-last-sexp:                        Lisp Eval.           (line  36)
* eval-print-last-sexp:                  Lisp Interaction.    (line  14)
* eval-region:                           Lisp Eval.           (line  73)
* eww:                                   EWW.                 (line   6)
* eww-open-file:                         EWW.                 (line   6)
* eww-search-words:                      Word Search.         (line  55)
* exchange-point-and-mark:               Setting Mark.        (line  43)
* exchange-point-and-mark, in rectangle-mark-mode: Rectangles.
                                                              (line 140)
* execute-extended-command:              M-x.                 (line  94)
* exit-calendar:                         General Calendar.    (line  33)
* exit-recursive-edit:                   Recursive Edit.      (line  13)
* expand-abbrev:                         Expanding Abbrevs.   (line  26)
* expand-region-abbrevs:                 Expanding Abbrevs.   (line  61)
* f90-beginning-of-block:                Fortran Motion.      (line  41)
* f90-end-of-block:                      Fortran Motion.      (line  33)
* f90-mode:                              Fortran.             (line   6)
* f90-next-block:                        Fortran Motion.      (line  22)
* f90-next-statement:                    Fortran Motion.      (line  12)
* f90-previous-block:                    Fortran Motion.      (line  29)
* f90-previous-statement:                Fortran Motion.      (line  16)
* facemenu-remove-all:                   Editing Format Info. (line  16)
* facemenu-remove-face-props:            Editing Format Info. (line  12)
* facemenu-set-background:               Enriched Faces.      (line  34)
* facemenu-set-bold:                     Enriched Faces.      (line  15)
* facemenu-set-bold-italic:              Enriched Faces.      (line  21)
* facemenu-set-default:                  Enriched Faces.      (line  12)
* facemenu-set-face:                     Enriched Faces.      (line  27)
* facemenu-set-foreground:               Enriched Faces.      (line  30)
* facemenu-set-italic:                   Enriched Faces.      (line  18)
* facemenu-set-underline:                Enriched Faces.      (line  24)
* ff-find-related-file:                  Other C Commands.    (line  94)
* ffap:                                  FFAP.                (line   6)
* ffap-menu:                             FFAP.                (line   6)
* ffap-mode:                             FFAP.                (line  18)
* ffap-next:                             FFAP.                (line   6)
* fido-mode:                             Icomplete.           (line  26)
* file-cache-add-directory:              File Name Cache.     (line  17)
* file-cache-minibuffer-complete:        File Name Cache.     (line   6)
* file-name-shadow-mode:                 Minibuffer File.     (line  34)
* fileloop-continue:                     Identifier Search.   (line  77)
* filesets-add-buffer:                   Filesets.            (line  13)
* filesets-init:                         Filesets.            (line   6)
* filesets-remove-buffer:                Filesets.            (line  13)
* fill-individual-paragraphs:            Fill Prefix.         (line  60)
* fill-nonuniform-paragraphs:            Fill Prefix.         (line  67)
* fill-paragraph:                        Fill Commands.       (line  17)
* fill-region:                           Fill Commands.       (line  26)
* fill-region-as-paragraph:              Fill Commands.       (line  31)
* find-alternate-file:                   Visiting.            (line 100)
* find-dired:                            Dired and Find.      (line  26)
* find-file:                             Visiting.            (line  27)
* find-file-at-point:                    FFAP.                (line   6)
* find-file-literally:                   Visiting.            (line 166)
* find-file-other-frame:                 Visiting.            (line 136)
* find-file-other-tab:                   Tab Bars.            (line  80)
* find-file-other-window:                Visiting.            (line 128)
* find-file-read-only:                   Visiting.            (line 124)
* find-file-read-only-other-frame:       Creating Frames.     (line  48)
* find-grep:                             Grep Searching.      (line  66)
* find-grep-dired:                       Dired and Find.      (line  17)
* find-name-dired:                       Dired and Find.      (line   9)
* find-sibling-file:                     Visiting.            (line 176)
* find-tag-other-window:                 Pop Up Window.       (line  32)
* finder-by-keyword:                     Package Keywords.    (line  10)
* flush-lines:                           Other Repeating Search.
                                                              (line 102)
* flyspell-auto-correct-word:            Spelling.            (line 177)
* flyspell-correct-word:                 Spelling.            (line 177)
* flyspell-correct-word-before-point:    Spelling.            (line 177)
* flyspell-mode:                         Spelling.            (line 167)
* flyspell-prog-mode:                    Spelling.            (line 187)
* foldout-exit-fold:                     Foldout.             (line  39)
* foldout-zoom-subtree:                  Foldout.             (line  15)
* follow-mode:                           Follow Mode.         (line   6)
* font-lock-add-keywords:                Traditional Font Lock.
                                                              (line  37)
* font-lock-mode:                        Font Lock.           (line  12)
* font-lock-remove-keywords:             Traditional Font Lock.
                                                              (line  49)
* format-decode-buffer:                  Enriched Mode.       (line  25)
* fortran-beginning-of-block:            Fortran Motion.      (line  41)
* fortran-column-ruler:                  Fortran Columns.     (line  33)
* fortran-comment-region:                Fortran Comments.    (line  78)
* fortran-end-of-block:                  Fortran Motion.      (line  33)
* fortran-indent-subprogram:             ForIndent Commands.  (line  21)
* fortran-join-line:                     ForIndent Commands.  (line  30)
* fortran-mode:                          Fortran.             (line   6)
* fortran-next-statement:                Fortran Motion.      (line  12)
* fortran-previous-statement:            Fortran Motion.      (line  16)
* fortran-split-line:                    ForIndent Commands.  (line  25)
* fortran-strip-sequence-nos:            Fortran Columns.     (line  63)
* fortran-window-create:                 Fortran Columns.     (line  58)
* fortran-window-create-momentarily:     Fortran Columns.     (line  53)
* fortune-to-signature:                  Mail Amusements.     (line  19)
* forward-button:                        Help Mode.           (line  52)
* forward-char:                          Moving Point.        (line  19)
* forward-list:                          Moving by Parens.    (line  28)
* forward-page:                          Pages.               (line  31)
* forward-paragraph:                     Paragraphs.          (line  16)
* forward-sentence:                      Sentences.           (line  19)
* forward-sexp:                          Expressions.         (line  25)
* forward-word:                          Words.               (line  26)
* frameset-to-register:                  Configuration Registers.
                                                              (line   6)
* fringe-mode:                           Fringes.             (line   6)
* gdb:                                   Starting GUD.        (line  10)
* gdb-delete-breakpoint:                 Breakpoints Buffer.  (line  18)
* gdb-display-disassembly-buffer:        Other GDB Buffers.   (line  40)
* gdb-display-disassembly-for-thread:    Threads Buffer.      (line  31)
* gdb-display-io-buffer:                 Other GDB Buffers.   (line  23)
* gdb-display-locals-buffer:             Other GDB Buffers.   (line   9)
* gdb-display-locals-for-thread:         Threads Buffer.      (line  39)
* gdb-display-memory-buffer:             Other GDB Buffers.   (line  47)
* gdb-display-registers-buffer:          Other GDB Buffers.   (line  32)
* gdb-display-registers-for-thread:      Threads Buffer.      (line  43)
* gdb-display-stack-for-thread:          Threads Buffer.      (line  35)
* gdb-edit-value:                        Watch Expressions.   (line  28)
* gdb-frames-select:                     Stack Buffer.        (line  10)
* gdb-goto-breakpoint:                   Breakpoints Buffer.  (line  21)
* gdb-load-window-configuration:         GDB User Interface Layout.
                                                              (line  23)
* gdb-many-windows:                      GDB User Interface Layout.
                                                              (line  34)
* gdb-restore-windows:                   GDB User Interface Layout.
                                                              (line  34)
* gdb-save-window-configuration:         GDB User Interface Layout.
                                                              (line  23)
* gdb-select-thread:                     Threads Buffer.      (line   6)
* gdb-toggle-breakpoint:                 Breakpoints Buffer.  (line  12)
* gdb-var-delete:                        Watch Expressions.   (line  25)
* getenv:                                Environment.         (line  19)
* global-auto-revert-mode:               Auto Revert.         (line   6)
* global-cwarn-mode:                     Other C Commands.    (line  71)
* global-display-fill-column-indicator-mode: Displaying Boundaries.
                                                              (line   6)
* global-display-line-numbers-mode:      Display Custom.      (line  39)
* global-eldoc-mode:                     Programming Language Doc.
                                                              (line  11)
* global-font-lock-mode:                 Font Lock.           (line  17)
* global-hl-line-mode:                   Cursor Display.      (line  54)
* global-set-key:                        Init Rebinding.      (line  43)
* global-tab-line-mode:                  Tab Line.            (line   6)
* global-text-scale-adjust:              Text Scale.          (line  35)
* global-visual-line-mode:               Visual Line Mode.    (line  14)
* global-whitespace-mode:                Useless Whitespace.  (line  91)
* global-whitespace-toggle-options:      Useless Whitespace.  (line  91)
* glyphless-display-mode:                Text Display.        (line  64)
* gnus:                                  Gnus Startup.        (line   6)
* gnus-group-exit:                       Gnus Group Buffer.   (line  52)
* gnus-group-kill-group:                 Gnus Group Buffer.   (line  35)
* gnus-group-list-all-groups:            Gnus Group Buffer.   (line  18)
* gnus-group-list-groups:                Gnus Group Buffer.   (line  12)
* gnus-group-list-killed:                Gnus Group Buffer.   (line  23)
* gnus-group-list-zombies:               Gnus Group Buffer.   (line  26)
* gnus-group-next-unread-group:          Gnus Group Buffer.   (line  44)
* gnus-group-prev-unread-group:          Gnus Group Buffer.   (line  48)
* gnus-group-read-group:                 Gnus Group Buffer.   (line   8)
* gnus-group-toggle-subscription-at-point: Gnus Group Buffer. (line  29)
* gnus-summary-isearch-article:          Gnus Summary Buffer. (line  28)
* gnus-summary-next-page:                Gnus Summary Buffer. (line   8)
* gnus-summary-next-unread-article:      Gnus Summary Buffer. (line  20)
* gnus-summary-prev-page:                Gnus Summary Buffer. (line  16)
* gnus-summary-prev-unread-article:      Gnus Summary Buffer. (line  24)
* gnus-summary-search-article-backward:  Gnus Summary Buffer. (line  37)
* gnus-summary-search-article-forward:   Gnus Summary Buffer. (line  33)
* gomoku:                                Amusements.          (line  36)
* goto-address-at-point:                 Goto Address mode.   (line  12)
* goto-address-mode:                     Goto Address mode.   (line   6)
* goto-char:                             Moving Point.        (line 104)
* goto-followup-to:                      Header Editing.      (line  30)
* goto-line:                             Moving Point.        (line 112)
* goto-line, with an argument:           Select Buffer.       (line  71)
* goto-line-relative:                    Moving Point.        (line 112)
* goto-reply-to:                         Header Editing.      (line  30)
* gpm-mouse-mode:                        Text-Only Mouse.     (line  17)
* grep:                                  Grep Searching.      (line  25)
* grep (MS-DOS):                         MS-DOS Processes.    (line   6)
* grep-find:                             Grep Searching.      (line  66)
* grep-find-toggle-abbreviation:         Grep Searching.      (line  89)
* gud-cont:                              Commands of GUD.     (line  52)
* gud-def:                               GUD Customization.   (line  18)
* gud-down:                              Commands of GUD.     (line  75)
* gud-finish:                            Commands of GUD.     (line  87)
* gud-gdb:                               Starting GUD.        (line  15)
* gud-gdb-complete-command:              Commands of GUD.     (line 102)
* gud-jump:                              Commands of GUD.     (line  93)
* gud-next:                              Commands of GUD.     (line  37)
* gud-print:                             Commands of GUD.     (line  46)
* gud-refresh:                           Commands of GUD.     (line  26)
* gud-remove:                            Commands of GUD.     (line  58)
* gud-step:                              Commands of GUD.     (line  31)
* gud-stepi:                             Commands of GUD.     (line  42)
* gud-tbreak:                            Commands of GUD.     (line  64)
* gud-tooltip-mode:                      Debugger Operation.  (line  32)
* gud-until:                             Commands of GUD.     (line  80)
* gud-up:                                Commands of GUD.     (line  70)
* gud-watch:                             Watch Expressions.   (line   6)
* guiler:                                Starting GUD.        (line  33)
* handwrite:                             PostScript.          (line  54)
* hanoi:                                 Amusements.          (line  39)
* help-command:                          Help.                (line   6)
* help-follow:                           Help Mode.           (line  43)
* help-for-help:                         Help.                (line   6)
* help-go-back:                          Help Mode.           (line  43)
* help-go-forward:                       Help Mode.           (line  43)
* help-goto-next-page:                   Help Mode.           (line  62)
* help-goto-previous-page:               Help Mode.           (line  62)
* help-mode:                             Help Mode.           (line   6)
* help-with-tutorial:                    Basic.               (line   6)
* hi-lock-find-patterns:                 Highlight Interactively.
                                                              (line  89)
* hi-lock-mode:                          Highlight Interactively.
                                                              (line  11)
* hi-lock-write-interactive-patterns:    Highlight Interactively.
                                                              (line  77)
* hide-ifdef-mode:                       Other C Commands.    (line  86)
* hide-sublevels:                        Outline Visibility.  (line  72)
* highlight-changes-mode:                Highlight Interactively.
                                                              (line   6)
* highlight-lines-matching-regexp:       Highlight Interactively.
                                                              (line  60)
* highlight-phrase:                      Highlight Interactively.
                                                              (line  65)
* highlight-regexp:                      Highlight Interactively.
                                                              (line  28)
* highlight-symbol-at-point:             Highlight Interactively.
                                                              (line  72)
* hl-line-mode:                          Cursor Display.      (line  54)
* holidays:                              Holidays.            (line  48)
* horizontal-scroll-bar-mode:            Scroll Bars.         (line  80)
* how-many:                              Other Repeating Search.
                                                              (line  97)
* hs-hide-all:                           Hideshow.            (line  19)
* hs-hide-block:                         Hideshow.            (line  19)
* hs-hide-level:                         Hideshow.            (line  19)
* hs-minor-mode:                         Hideshow.            (line   6)
* hs-show-all:                           Hideshow.            (line  19)
* hs-show-block:                         Hideshow.            (line  19)
* hs-show-region:                        Hideshow.            (line  19)
* hs-toggle-hiding:                      Hideshow.            (line  19)
* hs-toggle-hiding <1>:                  Hideshow.            (line  19)
* html-mode:                             HTML Mode.           (line   6)
* htmlfontify-buffer:                    Printing.            (line  10)
* ibuffer:                               Buffer Menus.        (line  29)
* icalendar-export-file:                 Importing Diary.     (line  38)
* icalendar-export-region:               Importing Diary.     (line  38)
* icalendar-import-buffer:               Importing Diary.     (line  21)
* icalendar-import-file:                 Importing Diary.     (line  28)
* icomplete-mode:                        Icomplete.           (line   6)
* icomplete-vertical-mode:               Icomplete.           (line  42)
* ielm:                                  Lisp Interaction.    (line  28)
* image-converter-add-handler:           Image Mode.          (line 147)
* image-crop:                            Image Mode.          (line  99)
* image-cut:                             Image Mode.          (line 114)
* image-decrease-size:                   Image Mode.          (line  73)
* image-decrease-speed:                  Image Mode.          (line  51)
* image-dired-dired-comment-files:       Image-Dired.         (line  58)
* image-dired-dired-display-external:    Image-Dired.         (line  40)
* image-dired-dired-display-image:       Image-Dired.         (line  40)
* image-dired-dired-edit-comment-and-tags: Image-Dired.       (line  58)
* image-dired-dired-toggle-marked-thumbs: Image-Dired.        (line  40)
* image-dired-display-next:              Image-Dired.         (line  22)
* image-dired-display-previous:          Image-Dired.         (line  22)
* image-dired-display-this:              Image-Dired.         (line  22)
* image-dired-display-thumbs:            Image-Dired.         (line  11)
* image-flip-horizontally:               Image Mode.          (line  85)
* image-flip-vertically:                 Image Mode.          (line  90)
* image-goto-frame:                      Image Mode.          (line  51)
* image-increase-size:                   Image Mode.          (line  67)
* image-increase-speed:                  Image Mode.          (line  51)
* image-mode:                            Image Mode.          (line   6)
* image-mode-copy-file-name-as-kill:     Image Mode.          (line  41)
* image-mode-mark-file:                  Image Mode.          (line  41)
* image-mode-unmark-file:                Image Mode.          (line  41)
* image-next-file:                       Image Mode.          (line  32)
* image-next-frame:                      Image Mode.          (line  51)
* image-previous-file:                   Image Mode.          (line  32)
* image-previous-frame:                  Image Mode.          (line  51)
* image-reset-speed:                     Image Mode.          (line  51)
* image-reverse-speed:                   Image Mode.          (line  51)
* image-rotate:                          Image Mode.          (line  79)
* image-save:                            Image Mode.          (line  95)
* image-toggle-animation:                Image Mode.          (line  51)
* image-toggle-display:                  Image Mode.          (line   6)
* image-transform-fit-to-window:         Image Mode.          (line  22)
* image-transform-reset-to-initial:      Image Mode.          (line  22)
* image-transform-reset-to-original:     Image Mode.          (line  22)
* image-transform-set-percent:           Image Mode.          (line  22)
* image-transform-set-scale:             Image Mode.          (line  22)
* imenu:                                 Imenu.               (line  11)
* imenu-add-menubar-index:               Imenu.               (line  16)
* increase-left-margin:                  Enriched Indentation.
                                                              (line  13)
* increment-register:                    Number Registers.    (line  13)
* indent-code-rigidly:                   Multi-line Indent.   (line  43)
* indent-for-tab-command:                Indentation.         (line  13)
* indent-line-function:                  Basic Indent.        (line  12)
* indent-pp-sexp:                        Multi-line Indent.   (line  25)
* indent-region:                         Indentation Commands.
                                                              (line  50)
* indent-relative:                       Indentation Commands.
                                                              (line  25)
* indent-rigidly:                        Indentation Commands.
                                                              (line  57)
* info:                                  Misc Help.           (line   6)
* Info-goto-emacs-command-node:          Name Help.           (line  58)
* Info-goto-emacs-key-command-node:      Key Help.            (line  16)
* info-lookup-file:                      Info Lookup.         (line   6)
* info-lookup-symbol:                    Misc Help.           (line  22)
* info-other-window:                     Misc Help.           (line   6)
* insert-abbrevs:                        Saving Abbrevs.      (line  47)
* insert-char:                           Inserting Text.      (line  60)
* insert-file:                           Misc File Ops.       (line  45)
* insert-file-literally:                 Misc File Ops.       (line  51)
* insert-kbd-macro:                      Save Keyboard Macro. (line  44)
* insert-register:                       Text Registers.      (line  51)
* inverse-add-global-abbrev:             Defining Abbrevs.    (line  49)
* inverse-add-mode-abbrev:               Defining Abbrevs.    (line  49)
* isearch-abort:                         Basic Isearch.       (line  53)
* isearch-backward:                      Basic Isearch.       (line  63)
* isearch-backward-regexp:               Regexp Search.       (line  17)
* isearch-cancel:                        Basic Isearch.       (line  53)
* isearch-char-by-name:                  Special Isearch.     (line  64)
* isearch-complete:                      Special Isearch.     (line  89)
* isearch-del-char:                      Isearch Yank.        (line  43)
* isearch-delete-char:                   Basic Isearch.       (line  27)
* isearch-edit-string:                   Repeat Isearch.      (line  71)
* isearch-emoji-by-name:                 Special Isearch.     (line  69)
* isearch-exit:                          Basic Isearch.       (line  36)
* isearch-forward:                       Basic Isearch.       (line  11)
* isearch-forward-regexp:                Regexp Search.       (line  17)
* isearch-forward-symbol:                Symbol Search.       (line  27)
* isearch-forward-symbol-at-point:       Symbol Search.       (line  27)
* isearch-forward-thing-at-point:        Isearch Yank.        (line  57)
* isearch-forward-word:                  Word Search.         (line  27)
* isearch-help-map:                      Special Isearch.     (line 106)
* isearch-highlight-lines-matching-regexp: Special Isearch.   (line  97)
* isearch-highlight-regexp:              Special Isearch.     (line  97)
* isearch-occur:                         Special Isearch.     (line  77)
* isearch-query-replace:                 Special Isearch.     (line  81)
* isearch-query-replace-regexp:          Special Isearch.     (line  81)
* isearch-quote-char:                    Special Isearch.     (line  36)
* isearch-repeat-backward:               Repeat Isearch.      (line   6)
* isearch-repeat-forward:                Repeat Isearch.      (line   6)
* isearch-ring-advance:                  Repeat Isearch.      (line  62)
* isearch-ring-retreat:                  Repeat Isearch.      (line  62)
* isearch-toggle-case-fold:              Lax Search.          (line  64)
* isearch-toggle-char-fold:              Lax Search.          (line  95)
* isearch-toggle-input-method:           Special Isearch.     (line  43)
* isearch-toggle-invisible:              Special Isearch.     (line  22)
* isearch-toggle-lax-whitespace:         Lax Search.          (line  15)
* isearch-toggle-regexp:                 Special Isearch.     (line  25)
* isearch-toggle-specified-input-method: Special Isearch.     (line  43)
* isearch-toggle-symbol:                 Symbol Search.       (line  16)
* isearch-toggle-word:                   Word Search.         (line  27)
* isearch-transient-input-method:        Special Isearch.     (line  43)
* isearch-yank-char:                     Isearch Yank.        (line  43)
* isearch-yank-kill:                     Isearch Yank.        (line  35)
* isearch-yank-line:                     Isearch Yank.        (line  22)
* isearch-yank-pop:                      Isearch Yank.        (line  35)
* isearch-yank-symbol-or-char:           Isearch Yank.        (line  16)
* isearch-yank-until-char:               Isearch Yank.        (line  27)
* isearch-yank-word-or-char:             Isearch Yank.        (line  10)
* isearch-yank-x-selection:              Isearch Yank.        (line  35)
* iso-gtex2iso:                          TeX Misc.            (line  12)
* iso-iso2gtex:                          TeX Misc.            (line  12)
* iso-iso2tex:                           TeX Misc.            (line  12)
* iso-tex2iso:                           TeX Misc.            (line  12)
* ispell:                                Spelling.            (line  58)
* ispell-buffer:                         Spelling.            (line  58)
* ispell-change-dictionary:              Spelling.            (line 148)
* ispell-comment-or-string-at-point:     Spelling.            (line  58)
* ispell-comments-and-strings:           Spelling.            (line  58)
* ispell-complete-word:                  Spelling.            (line 135)
* ispell-kill-ispell:                    Spelling.            (line 142)
* ispell-message:                        Mail Misc.           (line  35)
* ispell-region:                         Spelling.            (line  58)
* ispell-word:                           Spelling.            (line  51)
* jdb:                                   Starting GUD.        (line  27)
* jump-to-register:                      Position Registers.  (line  18)
* just-one-space:                        Deletion.            (line  46)
* kbd:                                   Init Rebinding.      (line  49)
* kbd-macro-query:                       Keyboard Macro Query.
                                                              (line  14)
* keep-lines:                            Other Repeating Search.
                                                              (line 117)
* keyboard-escape-quit:                  Quitting.            (line  81)
* keyboard-quit:                         Quitting.            (line  53)
* keymap-global-set:                     Rebinding.           (line  16)
* keymap-global-set <1>:                 Init Rebinding.      (line  10)
* keymap-global-unset:                   Rebinding.           (line  16)
* keymap-local-set:                      Rebinding.           (line  16)
* keymap-local-unset:                    Rebinding.           (line  16)
* keymap-set:                            Init Rebinding.      (line  56)
* keymap-substitute:                     Init Examples.       (line 119)
* keymap-unset:                          Init Rebinding.      (line  56)
* kill-all-abbrevs:                      Defining Abbrevs.    (line  64)
* kill-buffer:                           Kill Buffer.         (line  22)
* kill-buffer-and-window:                Change Window.       (line  38)
* kill-compilation:                      Compilation.         (line  71)
* kill-current-buffer:                   Completion Commands. (line  88)
* kill-emacs:                            Exiting.             (line  44)
* kill-line:                             Killing by Lines.    (line  11)
* kill-local-variable:                   Locals.              (line  51)
* kill-matching-buffers:                 Kill Buffer.         (line  35)
* kill-matching-lines:                   Other Repeating Search.
                                                              (line 129)
* kill-rectangle:                        Rectangles.          (line  66)
* kill-region:                           Other Kill Commands. (line  27)
* kill-ring-save:                        Other Kill Commands. (line  27)
* kill-sentence:                         Sentences.           (line  30)
* kill-sexp:                             Expressions.         (line  44)
* kill-some-buffers:                     Kill Buffer.         (line  30)
* kill-whole-line:                       Killing by Lines.    (line  38)
* kill-word:                             Words.               (line  35)
* kmacro-add-counter:                    Keyboard Macro Counter.
                                                              (line  67)
* kmacro-bind-to-key:                    Save Keyboard Macro. (line  26)
* kmacro-cycle-ring-next:                Keyboard Macro Ring. (line  41)
* kmacro-cycle-ring-previous:            Keyboard Macro Ring. (line  41)
* kmacro-edit-lossage:                   Edit Keyboard Macro. (line  25)
* kmacro-edit-macro:                     Edit Keyboard Macro. (line  14)
* kmacro-end-and-call-macro:             Basic Keyboard Macro.
                                                              (line  31)
* kmacro-end-macro:                      Basic Keyboard Macro.
                                                              (line  93)
* kmacro-end-or-call-macro:              Basic Keyboard Macro.
                                                              (line  31)
* kmacro-end-or-call-macro-repeat:       Keyboard Macro Ring. (line  31)
* kmacro-insert-counter:                 Keyboard Macro Counter.
                                                              (line  33)
* kmacro-name-last-macro:                Save Keyboard Macro. (line  15)
* kmacro-redisplay:                      Basic Keyboard Macro.
                                                              (line 111)
* kmacro-set-counter:                    Keyboard Macro Counter.
                                                              (line  59)
* kmacro-set-format:                     Keyboard Macro Counter.
                                                              (line  73)
* kmacro-start-macro:                    Basic Keyboard Macro.
                                                              (line  93)
* kmacro-start-macro-or-insert-counter:  Basic Keyboard Macro.
                                                              (line  31)
* kmacro-step-edit-macro:                Keyboard Macro Step-Edit.
                                                              (line   6)
* kmacro-to-register:                    Keyboard Macro Registers.
                                                              (line   6)
* latex-close-block:                     LaTeX Editing.       (line  27)
* latex-electric-env-pair-mode:          LaTeX Editing.       (line  27)
* latex-insert-block:                    LaTeX Editing.       (line  15)
* latex-mode:                            TeX Mode.            (line   6)
* left-char:                             Moving Point.        (line  29)
* left-char, and bidirectional text:     Bidirectional Editing.
                                                              (line  79)
* left-word:                             Moving Point.        (line  65)
* lgrep:                                 Grep Searching.      (line  72)
* life:                                  Amusements.          (line  43)
* line-number-mode:                      Optional Mode Line.  (line  18)
* lisp-eval-defun:                       External Lisp.       (line  25)
* lisp-interaction-mode:                 Lisp Interaction.    (line   6)
* list-abbrevs:                          Editing Abbrevs.     (line  13)
* list-bookmarks:                        Bookmarks.           (line  40)
* list-buffers:                          List Buffers.        (line   9)
* list-character-sets:                   Charsets.            (line  31)
* list-charset-chars:                    Charsets.            (line  24)
* list-coding-systems:                   Coding Systems.      (line  51)
* list-colors-display:                   Colors.              (line  14)
* list-command-history:                  Repetition.          (line  12)
* list-directory:                        Directories.         (line  23)
* list-faces-display:                    Faces.               (line  13)
* list-holidays:                         Holidays.            (line  60)
* list-input-methods:                    Select Input Method. (line  91)
* list-matching-lines:                   Other Repeating Search.
                                                              (line  84)
* list-packages:                         Package Menu.        (line   6)
* list-tags:                             List Identifiers.    (line  27)
* load:                                  Lisp Libraries.      (line  27)
* load-file:                             Lisp Libraries.      (line  21)
* load-library:                          Lisp Libraries.      (line  27)
* load-theme:                            Custom Themes.       (line  69)
* locate:                                Dired and Find.      (line  37)
* locate-with-filter:                    Dired and Find.      (line  37)
* log-edit-done:                         Log Buffer.          (line   6)
* log-edit-generate-changelog-from-diff: Log Buffer.          (line  39)
* log-edit-insert-changelog:             Log Buffer.          (line  48)
* log-edit-show-diff:                    Log Buffer.          (line  32)
* log-edit-show-files:                   Log Buffer.          (line  32)
* log-view-toggle-entry-display:         VC Change Log.       (line  54)
* lossage-size:                          Misc Help.           (line  27)
* lpr-buffer:                            Printing.            (line  28)
* lpr-region:                            Printing.            (line  28)
* lunar-phases:                          Lunar Phases.        (line  21)
* mail-abbrev-insert-alias:              Mail Aliases.        (line  42)
* mail-add-attachment:                   Mail Misc.           (line  19)
* mail-fill-yanked-message:              Citing Mail.         (line  23)
* mail-text:                             Header Editing.      (line  35)
* make-frame-command:                    Creating Frames.     (line  18)
* make-frame-on-display:                 Multiple Displays.   (line  11)
* make-frame-on-monitor:                 Multiple Displays.   (line  27)
* make-indirect-buffer:                  Indirect Buffers.    (line  10)
* make-local-variable:                   Locals.              (line  22)
* make-symbolic-link:                    Copying and Naming.  (line  48)
* make-variable-buffer-local:            Locals.              (line  27)
* man:                                   Man Page.            (line  12)
* mark-defun:                            Moving by Defuns.    (line  17)
* mark-page:                             Pages.               (line  37)
* mark-paragraph:                        Paragraphs.          (line  23)
* mark-sexp:                             Marking Objects.     (line  38)
* mark-whole-buffer:                     Marking Objects.     (line  52)
* mark-word:                             Marking Objects.     (line  28)
* menu-bar-mode:                         Menu Bars.           (line   6)
* menu-bar-open:                         Menu Bar.            (line  22)
* message-goto-bcc:                      Header Editing.      (line  30)
* message-goto-cc:                       Header Editing.      (line  30)
* message-goto-fcc:                      Header Editing.      (line  30)
* message-goto-subject:                  Header Editing.      (line  30)
* message-goto-to:                       Header Editing.      (line  30)
* message-insert-signature:              Mail Signature.      (line  20)
* message-send:                          Mail Sending.        (line  13)
* message-send-and-exit:                 Mail Sending.        (line  13)
* message-tab:                           Header Editing.      (line  38)
* message-yank-original:                 Citing Mail.         (line  13)
* message-yank-prefix:                   Citing Mail.         (line  13)
* minibuffer-choose-completion:          Completion Commands. (line  40)
* minibuffer-complete:                   Completion Commands. (line  24)
* minibuffer-complete-and-exit:          Completion Exit.     (line   6)
* minibuffer-complete-word:              Completion Commands. (line  29)
* minibuffer-depth-indicate-mode:        Minibuffer Edit.     (line  62)
* minibuffer-electric-default-mode:      Basic Minibuffer.    (line  24)
* minibuffer-inactive-mode:              Minibuffer Edit.     (line  71)
* minibuffer-next-completion:            Completion Commands. (line  40)
* minibuffer-previous-completion:        Completion Commands. (line  40)
* mml-attach-file:                       Mail Misc.           (line   6)
* modify-category-entry:                 Visual Line Mode.    (line  55)
* morse-region:                          Amusements.          (line  45)
* mouse-avoidance-mode:                  Mouse Avoidance.     (line  37)
* mouse-buffer-menu:                     Buffer Menus.        (line  22)
* mouse-save-then-kill:                  Mouse Commands.      (line  83)
* mouse-secondary-save-then-kill:        Secondary Selection. (line  28)
* mouse-set-point:                       Mouse Commands.      (line  27)
* mouse-set-region:                      Mouse Commands.      (line  42)
* mouse-set-secondary:                   Secondary Selection. (line  11)
* mouse-start-secondary:                 Secondary Selection. (line  22)
* mouse-wheel-mode:                      Mouse Commands.      (line 120)
* mouse-wheel-text-scale:                Text Scale.          (line  60)
* mouse-yank-at-click:                   Mouse Commands.      (line  70)
* mouse-yank-primary:                    Mouse Commands.      (line  70)
* mouse-yank-secondary:                  Secondary Selection. (line  36)
* move-beginning-of-line:                Moving Point.        (line  45)
* move-end-of-line:                      Moving Point.        (line  49)
* move-file-to-trash:                    Misc File Ops.       (line  13)
* move-to-column:                        Moving Point.        (line 128)
* move-to-window-line-top-bottom:        Moving Point.        (line  70)
* mpuz:                                  Amusements.          (line   9)
* msb-mode:                              Buffer Menus.        (line  22)
* msdos-set-mouse-buttons:               MS-DOS Mouse.        (line  18)
* multi-isearch-buffers:                 Other Repeating Search.
                                                              (line  13)
* multi-isearch-buffers-regexp:          Other Repeating Search.
                                                              (line  21)
* multi-isearch-files:                   Other Repeating Search.
                                                              (line  25)
* multi-isearch-files-regexp:            Other Repeating Search.
                                                              (line  33)
* multi-occur:                           Other Repeating Search.
                                                              (line  86)
* multi-occur-in-matching-buffers:       Other Repeating Search.
                                                              (line  91)
* narrow-to-defun:                       Narrowing.           (line  38)
* narrow-to-page:                        Narrowing.           (line  38)
* narrow-to-region:                      Narrowing.           (line  33)
* nato-region:                           Amusements.          (line  45)
* negative-argument:                     Arguments.           (line  15)
* next-buffer:                           Select Buffer.       (line  46)
* next-completion:                       Completion Commands. (line  72)
* next-error:                            Compilation Mode.    (line  64)
* next-error-follow-minor-mode:          Compilation Mode.    (line 140)
* next-error-select-buffer:              Compilation Mode.    (line  78)
* next-history-element:                  Minibuffer History.  (line  31)
* next-line:                             Moving Point.        (line  34)
* next-line-or-history-element:          Minibuffer History.  (line  55)
* next-logical-line:                     Visual Line Mode.    (line  27)
* next-matching-history-element:         Minibuffer History.  (line  65)
* next-window-any-frame:                 Other Window.        (line  32)
* normal-erase-is-backspace-mode:        DEL Does Not Delete. (line  24)
* normal-mode:                           Choosing Modes.      (line 131)
* not-modified:                          Save Commands.       (line  77)
* nroff-backward-text-line:              Nroff Mode.          (line  15)
* nroff-count-text-lines:                Nroff Mode.          (line  15)
* nroff-electric-mode:                   Nroff Mode.          (line  24)
* nroff-forward-text-line:               Nroff Mode.          (line  15)
* nroff-mode:                            Nroff Mode.          (line   6)
* number-to-register:                    Number Registers.    (line  11)
* nxml-mode:                             HTML Mode.           (line  75)
* occur:                                 Other Repeating Search.
                                                              (line  41)
* open-dribble-file:                     Checklist.           (line 106)
* open-line:                             Blank Lines.         (line  15)
* open-rectangle:                        Rectangles.          (line  96)
* open-termscript:                       Checklist.           (line 154)
* org-agenda:                            Org Organizer.       (line  27)
* org-agenda-file-to-front:              Org Organizer.       (line  20)
* org-cycle:                             Org Mode.            (line  16)
* org-deadline:                          Org Organizer.       (line  13)
* org-export-dispatch:                   Org Authoring.       (line   6)
* org-metadown:                          Org Mode.            (line  29)
* org-metaleft:                          Org Mode.            (line  29)
* org-metaright:                         Org Mode.            (line  29)
* org-metaup:                            Org Mode.            (line  29)
* org-mode:                              Org Mode.            (line   6)
* org-schedule:                          Org Organizer.       (line  13)
* org-shifttab:                          Org Mode.            (line  24)
* org-todo:                              Org Organizer.       (line   6)
* other-frame:                           Frame Commands.      (line  24)
* other-tab-prefix:                      Tab Bars.            (line  88)
* other-window:                          Other Window.        (line  19)
* outline-backward-same-level:           Outline Motion.      (line  19)
* outline-cycle:                         Outline Visibility.  (line  84)
* outline-cycle-buffer:                  Outline Visibility.  (line  84)
* outline-forward-same-level:            Outline Motion.      (line  16)
* outline-hide-body:                     Outline Visibility.  (line  72)
* outline-hide-entry:                    Outline Visibility.  (line  49)
* outline-hide-leaves:                   Outline Visibility.  (line  59)
* outline-hide-other:                    Outline Visibility.  (line  67)
* outline-hide-subtree:                  Outline Visibility.  (line  54)
* outline-minor-mode:                    Outline Minor Mode.  (line   6)
* outline-mode:                          Outline Mode.        (line   6)
* outline-next-visible-heading:          Outline Motion.      (line  10)
* outline-previous-visible-heading:      Outline Motion.      (line  13)
* outline-show-all:                      Outline Visibility.  (line  72)
* outline-show-branches:                 Outline Visibility.  (line  59)
* outline-show-children:                 Outline Visibility.  (line  59)
* outline-show-entry:                    Outline Visibility.  (line  49)
* outline-show-subtree:                  Outline Visibility.  (line  54)
* outline-up-heading:                    Outline Motion.      (line  22)
* overwrite-mode:                        Minor Modes.         (line  83)
* package-activate-all:                  Package Installation.
                                                              (line 137)
* package-browse-url:                    Package Menu.        (line  58)
* package-install:                       Package Installation.
                                                              (line   6)
* package-install-file:                  Package Files.       (line   6)
* package-menu-describe-package:         Package Menu.        (line  40)
* package-menu-execute:                  Package Menu.        (line  84)
* package-menu-filter-by-archive:        Package Menu.        (line 109)
* package-menu-filter-by-description:    Package Menu.        (line 115)
* package-menu-filter-by-keyword:        Package Menu.        (line 121)
* package-menu-filter-by-name:           Package Menu.        (line 133)
* package-menu-filter-by-name-or-description: Package Menu.   (line 127)
* package-menu-filter-by-status:         Package Menu.        (line 138)
* package-menu-filter-by-version:        Package Menu.        (line 145)
* package-menu-filter-clear:             Package Menu.        (line 165)
* package-menu-filter-marked:            Package Menu.        (line 152)
* package-menu-filter-upgradable:        Package Menu.        (line 157)
* package-menu-hide-package:             Package Menu.        (line  98)
* package-menu-mark-delete:              Package Menu.        (line  51)
* package-menu-mark-install:             Package Menu.        (line  45)
* package-menu-mark-obsolete-for-deletion: Package Menu.      (line  62)
* package-menu-mark-unmark:              Package Menu.        (line  68)
* package-menu-mark-upgrades:            Package Menu.        (line  72)
* package-menu-quick-help:               Package Menu.        (line  35)
* package-menu-toggle-hiding:            Package Menu.        (line 105)
* package-quickstart-refresh:            Package Installation.
                                                              (line 129)
* package-recompile:                     Package Installation.
                                                              (line 163)
* package-recompile-all:                 Package Installation.
                                                              (line 163)
* package-report-bug:                    Fetching Package Sources.
                                                              (line  22)
* package-upgrade:                       Package Installation.
                                                              (line   6)
* package-upgrade-all:                   Package Installation.
                                                              (line   6)
* package-vc-checkout:                   Fetching Package Sources.
                                                              (line  12)
* package-vc-install:                    Fetching Package Sources.
                                                              (line  12)
* package-vc-install-from-checkout:      Fetching Package Sources.
                                                              (line  31)
* package-vc-prepare-patch:              Fetching Package Sources.
                                                              (line  22)
* package-vc-rebuild:                    Fetching Package Sources.
                                                              (line  31)
* paragraph-indent-minor-mode:           Text Mode.           (line  27)
* paragraph-indent-text-mode:            Text Mode.           (line  27)
* pdb:                                   Starting GUD.        (line  30)
* perldb:                                Starting GUD.        (line  24)
* picture-backward-clear-column:         Basic Picture.       (line  28)
* picture-backward-column:               Basic Picture.       (line   6)
* picture-clear-column:                  Basic Picture.       (line  28)
* picture-clear-line:                    Basic Picture.       (line  28)
* picture-clear-rectangle:               Rectangles in Picture.
                                                              (line  26)
* picture-clear-rectangle-to-register:   Rectangles in Picture.
                                                              (line  26)
* picture-forward-column:                Basic Picture.       (line   6)
* picture-mode:                          Picture Mode.        (line   6)
* picture-motion:                        Insert in Picture.   (line  43)
* picture-motion-reverse:                Insert in Picture.   (line  43)
* picture-move-down:                     Basic Picture.       (line   6)
* picture-move-up:                       Basic Picture.       (line   6)
* picture-movement-down:                 Insert in Picture.   (line   6)
* picture-movement-left:                 Insert in Picture.   (line   6)
* picture-movement-ne:                   Insert in Picture.   (line   6)
* picture-movement-nw:                   Insert in Picture.   (line   6)
* picture-movement-right:                Insert in Picture.   (line   6)
* picture-movement-se:                   Insert in Picture.   (line   6)
* picture-movement-sw:                   Insert in Picture.   (line   6)
* picture-movement-up:                   Insert in Picture.   (line   6)
* picture-newline:                       Basic Picture.       (line  21)
* picture-open-line:                     Basic Picture.       (line  38)
* picture-set-tab-stops:                 Tabs in Picture.     (line  25)
* picture-tab:                           Tabs in Picture.     (line  20)
* picture-tab-search:                    Tabs in Picture.     (line   6)
* picture-yank-rectangle:                Rectangles in Picture.
                                                              (line  37)
* picture-yank-rectangle-from-register:  Rectangles in Picture.
                                                              (line  37)
* plain-tex-mode:                        TeX Mode.            (line   6)
* point-to-register:                     Position Registers.  (line  13)
* pong:                                  Amusements.          (line  50)
* pop-global-mark:                       Global Mark Ring.    (line  15)
* pr-interface:                          Printing Package.    (line  15)
* prefer-coding-system:                  Recognize Coding.    (line  31)
* prepend-to-buffer:                     Accumulating Text.   (line   6)
* prepend-to-register:                   Text Registers.      (line  34)
* prettify-symbols-mode:                 Misc for Programs.   (line  38)
* previous-buffer:                       Select Buffer.       (line  46)
* previous-completion:                   Completion Commands. (line  78)
* previous-history-element:              Minibuffer History.  (line  31)
* previous-line:                         Moving Point.        (line  40)
* previous-line-or-history-element:      Minibuffer History.  (line  55)
* previous-logical-line:                 Visual Line Mode.    (line  27)
* previous-matching-history-element:     Minibuffer History.  (line  65)
* print-buffer:                          Printing.            (line  28)
* print-buffer (MS-DOS):                 Windows Printing.    (line  66)
* print-region:                          Printing.            (line  28)
* print-region (MS-DOS):                 Windows Printing.    (line  66)
* prog-indent-sexp:                      C Indent.            (line  14)
* project-async-shell-command:           Project File Commands.
                                                              (line 112)
* project-compile:                       Project File Commands.
                                                              (line 106)
* project-dired:                         Project File Commands.
                                                              (line  91)
* project-eshell:                        Project File Commands.
                                                              (line 102)
* project-find-dir:                      Project File Commands.
                                                              (line  87)
* project-find-file:                     Project File Commands.
                                                              (line  50)
* project-find-regexp:                   Project File Commands.
                                                              (line  61)
* project-forget-project:                Managing Projects.   (line   9)
* project-kill-buffers:                  Project Buffer Commands.
                                                              (line  28)
* project-list-buffers:                  Project Buffer Commands.
                                                              (line  24)
* project-query-replace-regexp:          Project File Commands.
                                                              (line  80)
* project-search:                        Project File Commands.
                                                              (line  73)
* project-shell:                         Project File Commands.
                                                              (line  98)
* project-shell-command:                 Project File Commands.
                                                              (line 109)
* project-switch-project:                Switching Projects.  (line  10)
* project-switch-to-buffer:              Project Buffer Commands.
                                                              (line  15)
* project-vc-dir:                        Project File Commands.
                                                              (line  94)
* ps-despool:                            PostScript.          (line  48)
* ps-print-buffer:                       PostScript.          (line  34)
* ps-print-buffer (MS-DOS):              Windows Printing.    (line  86)
* ps-print-buffer-with-faces:            PostScript.          (line  34)
* ps-print-region:                       PostScript.          (line  34)
* ps-print-region-with-faces:            PostScript.          (line  34)
* ps-spool-buffer:                       PostScript.          (line  44)
* ps-spool-buffer (MS-DOS):              Windows Printing.    (line  86)
* ps-spool-buffer-with-faces:            PostScript.          (line  44)
* ps-spool-region:                       PostScript.          (line  44)
* ps-spool-region-with-faces:            PostScript.          (line  44)
* pwd:                                   File Names.          (line  31)
* quail-set-keyboard-layout:             Select Input Method. (line  80)
* quail-show-key:                        Select Input Method. (line  86)
* quail-translation-keymap:              Input Methods.       (line 103)
* query-replace:                         Query Replace.       (line  11)
* query-replace-regexp:                  Query Replace.       (line  21)
* quietly-read-abbrev-file:              Saving Abbrevs.      (line  27)
* quit-window:                           Completion Commands. (line  84)
* quit-window <1>:                       Several Buffers.     (line  87)
* quit-window, in Dired buffers:         Dired Enter.         (line 101)
* quoted-insert:                         Inserting Text.      (line  30)
* re-search-backward:                    Regexp Search.       (line  66)
* re-search-forward:                     Regexp Search.       (line  66)
* read-abbrev-file:                      Saving Abbrevs.      (line  27)
* read-only-mode:                        Misc Buffer.         (line  24)
* recenter:                              Recentering.         (line  58)
* recenter-other-window:                 Other Window.        (line  38)
* recenter-top-bottom:                   Recentering.         (line  24)
* recentf-edit-list:                     File Conveniences.   (line   9)
* recentf-mode:                          File Conveniences.   (line   9)
* recentf-open:                          File Conveniences.   (line   9)
* recentf-save-list:                     File Conveniences.   (line   9)
* recode-file-name:                      File Name Coding.    (line  46)
* recode-region:                         Text Coding.         (line  78)
* recompile:                             Compilation.         (line  64)
* recover-file:                          Recover.             (line   6)
* recover-session:                       Recover.             (line  22)
* rectangle:                             Rectangles.          (line 107)
* rectangle-exchange-point-and-mark:     Rectangles.          (line 140)
* rectangle-mark-mode:                   Rectangles.          (line 124)
* remove-hook:                           Hooks.               (line  83)
* rename-buffer:                         Misc Buffer.         (line  32)
* rename-file:                           Copying and Naming.  (line  31)
* rename-uniquely:                       Misc Buffer.         (line  37)
* repeat:                                Repeating.           (line  12)
* repeat-complex-command:                Repetition.          (line  19)
* repeat-mode:                           Repeating.           (line  27)
* replace-regexp:                        Regexp Replace.      (line   6)
* replace-string:                        Unconditional Replace.
                                                              (line   6)
* report-emacs-bug:                      Checklist.           (line  15)
* reposition-window:                     Recentering.         (line  61)
* reveal-mode:                           Outline Visibility.  (line  91)
* reverse-region:                        Sorting.             (line  65)
* revert-buffer:                         Reverting.           (line   6)
* revert-buffer (Dired):                 Dired Updating.      (line  29)
* revert-buffer-quick:                   Reverting.           (line  49)
* revert-buffer-with-coding-system:      Text Coding.         (line  74)
* revert-buffer-with-fine-grain:         Reverting.           (line   6)
* rgrep:                                 Grep Searching.      (line  72)
* right-char:                            Moving Point.        (line  22)
* right-char, and bidirectional text:    Bidirectional Editing.
                                                              (line  79)
* right-word:                            Moving Point.        (line  56)
* rmail:                                 Rmail.               (line   6)
* rmail-abort-edit:                      Rmail Editing.       (line  19)
* rmail-add-label:                       Rmail Labels.        (line  30)
* rmail-beginning-of-message:            Rmail Scrolling.     (line  26)
* rmail-bury:                            Rmail Basics.        (line  35)
* rmail-cease-edit:                      Rmail Editing.       (line  19)
* rmail-continue:                        Rmail Reply.         (line 104)
* rmail-delete-backward:                 Rmail Deletion.      (line  26)
* rmail-delete-forward:                  Rmail Deletion.      (line  26)
* rmail-edit-current-message:            Rmail Editing.       (line  15)
* rmail-end-of-message:                  Rmail Scrolling.     (line  26)
* rmail-epa-decrypt:                     Rmail Display.       (line  83)
* rmail-expunge:                         Rmail Deletion.      (line  41)
* rmail-expunge-and-save:                Rmail Basics.        (line  28)
* rmail-first-message:                   Rmail Motion.        (line  83)
* rmail-forward:                         Rmail Reply.         (line  68)
* rmail-get-new-mail:                    Rmail Files.         (line  49)
* rmail-input:                           Rmail Files.         (line  20)
* rmail-kill-label:                      Rmail Labels.        (line  30)
* rmail-last-message:                    Rmail Motion.        (line  83)
* rmail-mail:                            Rmail Reply.         (line  99)
* rmail-mime:                            Rmail Display.       (line  55)
* rmail-mime-next-item:                  Rmail Display.       (line  48)
* rmail-mime-previous-item:              Rmail Display.       (line  52)
* rmail-mime-toggle-hidden:              Rmail Display.       (line  45)
* rmail-mode:                            Rmail.               (line   6)
* rmail-next-labeled-message:            Rmail Labels.        (line  39)
* rmail-next-message:                    Rmail Motion.        (line  46)
* rmail-next-same-subject:               Rmail Motion.        (line  75)
* rmail-next-undeleted-message:          Rmail Motion.        (line  46)
* rmail-output:                          Rmail Output.        (line  20)
* rmail-output-as-seen:                  Rmail Output.        (line  20)
* rmail-output-body-to-file:             Rmail Output.        (line  37)
* rmail-previous-labeled-message:        Rmail Labels.        (line  39)
* rmail-previous-message:                Rmail Motion.        (line  46)
* rmail-previous-same-subject:           Rmail Motion.        (line  75)
* rmail-previous-undeleted-message:      Rmail Motion.        (line  46)
* rmail-quit:                            Rmail Basics.        (line  35)
* rmail-redecode-body:                   Rmail Coding.        (line  25)
* rmail-reply:                           Rmail Reply.         (line  28)
* rmail-resend:                          Rmail Reply.         (line  92)
* rmail-retry-failure:                   Rmail Reply.         (line  57)
* rmail-search:                          Rmail Motion.        (line  60)
* rmail-show-message:                    Rmail Motion.        (line  83)
* rmail-sort-by-author:                  Rmail Sorting.       (line  14)
* rmail-sort-by-correspondent:           Rmail Sorting.       (line  22)
* rmail-sort-by-date:                    Rmail Sorting.       (line   6)
* rmail-sort-by-labels:                  Rmail Sorting.       (line  31)
* rmail-sort-by-lines:                   Rmail Sorting.       (line  27)
* rmail-sort-by-recipient:               Rmail Sorting.       (line  18)
* rmail-sort-by-subject:                 Rmail Sorting.       (line  10)
* rmail-summary:                         Rmail Make Summary.  (line  31)
* rmail-summary-bury:                    Rmail Summary Edit.  (line  93)
* rmail-summary-by-labels:               Rmail Make Summary.  (line  36)
* rmail-summary-by-recipients:           Rmail Make Summary.  (line  40)
* rmail-summary-by-regexp:               Rmail Make Summary.  (line  51)
* rmail-summary-by-senders:              Rmail Make Summary.  (line  55)
* rmail-summary-by-topic:                Rmail Make Summary.  (line  46)
* rmail-summary-quit:                    Rmail Summary Edit.  (line  93)
* rmail-summary-undelete-many:           Rmail Summary Edit.  (line  30)
* rmail-summary-wipe:                    Rmail Summary Edit.  (line  93)
* rmail-toggle-header:                   Rmail Display.       (line  12)
* rmail-undelete-previous-message:       Rmail Deletion.      (line  41)
* rot13-other-window:                    Rmail Rot13.         (line  13)
* rot13-region:                          Rmail Rot13.         (line  17)
* run-lisp:                              External Lisp.       (line  11)
* run-scheme:                            External Lisp.       (line  35)
* save-buffer:                           Save Commands.       (line  23)
* save-buffers-kill-terminal:            Exiting.             (line  12)
* save-some-buffers:                     Save Commands.       (line  39)
* scheme-mode:                           External Lisp.       (line  35)
* scratch-buffer:                        Lisp Interaction.    (line  11)
* scroll-bar-mode:                       Scroll Bars.         (line  21)
* scroll-down-command:                   Scrolling.           (line  35)
* scroll-down-line:                      Scrolling.           (line 102)
* scroll-left:                           Horizontal Scrolling.
                                                              (line  42)
* scroll-other-window:                   Other Window.        (line  38)
* scroll-other-window-down:              Other Window.        (line  38)
* scroll-right:                          Horizontal Scrolling.
                                                              (line  42)
* scroll-up-command:                     Scrolling.           (line  35)
* scroll-up-line:                        Scrolling.           (line 102)
* sdb:                                   Starting GUD.        (line  42)
* search-backward:                       Nonincremental Search.
                                                              (line  28)
* search-forward:                        Nonincremental Search.
                                                              (line  28)
* select-frame-by-name:                  Non-Window Terminals.
                                                              (line  19)
* serial-term:                           Serial Terminal.     (line   6)
* server-edit:                           Invoking emacsclient.
                                                              (line  32)
* server-edit-abort:                     Invoking emacsclient.
                                                              (line  38)
* server-eval-at:                        Emacs Server.        (line 105)
* server-generate-key:                   TCP Emacs server.    (line  26)
* server-start:                          Emacs Server.        (line  21)
* server-stop-automatically:             Emacs Server.        (line  85)
* set-buffer-file-coding-system:         Text Coding.         (line  25)
* set-buffer-process-coding-system:      Communication Coding.
                                                              (line  43)
* set-face-background:                   Colors.              (line  41)
* set-face-foreground:                   Colors.              (line  41)
* set-file-modes:                        Misc File Ops.       (line  62)
* set-file-name-coding-system:           File Name Coding.    (line  10)
* set-fill-column:                       Fill Commands.       (line  43)
* set-fill-prefix:                       Fill Prefix.         (line  23)
* set-fontset-font:                      Modifying Fontsets.  (line   6)
* set-frame-name:                        Non-Window Terminals.
                                                              (line  19)
* set-fringe-style:                      Fringes.             (line   6)
* set-goal-column:                       Moving Point.        (line 133)
* set-input-method:                      Select Input Method. (line  29)
* set-justification-center:              Enriched Justification.
                                                              (line  21)
* set-justification-full:                Enriched Justification.
                                                              (line  17)
* set-justification-left:                Enriched Justification.
                                                              (line  11)
* set-justification-none:                Enriched Justification.
                                                              (line  25)
* set-justification-right:               Enriched Justification.
                                                              (line  14)
* set-keyboard-coding-system:            Terminal Coding.     (line  29)
* set-language-environment:              Language Environments.
                                                              (line  19)
* set-left-margin:                       Enriched Indentation.
                                                              (line  33)
* set-locale-environment:                Language Environments.
                                                              (line  45)
* set-mark-command:                      Setting Mark.        (line  24)
* set-next-selection-coding-system:      Communication Coding.
                                                              (line  23)
* set-right-margin:                      Enriched Indentation.
                                                              (line  33)
* set-selection-coding-system:           Communication Coding.
                                                              (line  23)
* set-selective-display:                 Selective Display.   (line   6)
* set-terminal-coding-system:            Terminal Coding.     (line  14)
* set-variable:                          Examining.           (line  40)
* set-visited-file-name:                 Save Commands.       (line  90)
* setenv:                                Environment.         (line  19)
* setopt:                                Examining.           (line  69)
* setq-default:                          Locals.              (line  57)
* sgml-attributes:                       HTML Mode.           (line  32)
* sgml-close-tag:                        HTML Mode.           (line  57)
* sgml-delete-tag:                       HTML Mode.           (line  47)
* sgml-mode:                             HTML Mode.           (line   6)
* sgml-name-8bit-mode:                   HTML Mode.           (line  62)
* sgml-name-char:                        HTML Mode.           (line  16)
* sgml-skip-tag-backward:                HTML Mode.           (line  41)
* sgml-skip-tag-forward:                 HTML Mode.           (line  36)
* sgml-tag:                              HTML Mode.           (line  20)
* sgml-tag-help:                         HTML Mode.           (line  53)
* sgml-tags-invisible:                   HTML Mode.           (line  72)
* sgml-validate:                         HTML Mode.           (line  67)
* shadow-initialize:                     File Shadowing.      (line   6)
* shell:                                 Interactive Shell.   (line   6)
* shell-backward-command:                Shell Mode.          (line 109)
* shell-command:                         Single Shell.        (line   6)
* shell-command-on-region:               Single Shell.        (line  69)
* shell-dynamic-complete-command:        Shell Options.       (line  53)
* shell-forward-command:                 Shell Mode.          (line 103)
* shell-pushd-dextract:                  Shell Options.       (line  57)
* shell-pushd-dunique:                   Shell Options.       (line  57)
* shell-pushd-tohome:                    Shell Options.       (line  57)
* shortdoc:                              Name Help.           (line  44)
* show-paren-local-mode:                 Matching.            (line  34)
* show-paren-mode:                       Matching.            (line  34)
* shrink-window-horizontally:            Change Window.       (line  62)
* shrink-window-if-larger-than-buffer:   Change Window.       (line  72)
* size-indication-mode:                  Optional Mode Line.  (line   6)
* slitex-mode:                           TeX Mode.            (line   6)
* smerge-mode:                           Comparing Files.     (line  54)
* snake:                                 Amusements.          (line  50)
* solitaire:                             Amusements.          (line  53)
* sort-columns:                          Sorting.             (line  97)
* sort-fields:                           Sorting.             (line  23)
* sort-lines:                            Sorting.             (line  23)
* sort-numeric-fields:                   Sorting.             (line  23)
* sort-pages:                            Sorting.             (line  23)
* sort-paragraphs:                       Sorting.             (line  23)
* split-line:                            Indentation Commands.
                                                              (line  10)
* split-window-below:                    Split Window.        (line  15)
* split-window-right:                    Split Window.        (line  32)
* spook:                                 Mail Amusements.     (line   6)
* standard-display-8bit:                 Unibyte Mode.        (line  35)
* string-insert-rectangle:               Rectangles.          (line 120)
* string-rectangle:                      Rectangles.          (line 114)
* subword-mode:                          MixedCase Words.     (line  23)
* sunrise-sunset:                        Sunrise/Sunset.      (line  20)
* superword-mode:                        Misc for Programs.   (line  19)
* suspend-frame:                         Exiting.             (line  47)
* switch-to-buffer:                      Select Buffer.       (line  23)
* switch-to-buffer-other-frame:          Select Buffer.       (line  58)
* switch-to-buffer-other-tab:            Tab Bars.            (line  76)
* switch-to-buffer-other-window:         Select Buffer.       (line  53)
* switch-to-completions:                 Completion Commands. (line  54)
* tab-bar-history-back:                  Tab Bars.            (line 182)
* tab-bar-history-forward:               Tab Bars.            (line 186)
* tab-bar-history-mode:                  Tab Bars.            (line 179)
* tab-bar-mode:                          Tab Bars.            (line  33)
* tab-close:                             Tab Bars.            (line 103)
* tab-close-other:                       Tab Bars.            (line 109)
* tab-last:                              Tab Bars.            (line 151)
* tab-move:                              Tab Bars.            (line 166)
* tab-new:                               Tab Bars.            (line  69)
* tab-next:                              Tab Bars.            (line 120)
* tab-previous:                          Tab Bars.            (line 127)
* tab-recent:                            Tab Bars.            (line 156)
* tab-rename:                            Tab Bars.            (line 163)
* tab-select:                            Tab Bars.            (line 139)
* tab-switch:                            Tab Bars.            (line 132)
* tab-to-tab-stop:                       Indentation Commands.
                                                              (line  22)
* tab-undo:                              Tab Bars.            (line 116)
* tabify:                                Just Spaces.         (line  26)
* table-backward-cell:                   Cell Commands.       (line   6)
* table-capture:                         Table Conversion.    (line   6)
* table-fixed-width-mode:                Text Based Tables.   (line  27)
* table-forward-cell:                    Cell Commands.       (line   6)
* table-generate-source:                 Table Misc.          (line  24)
* table-heighten-cell:                   Cell Commands.       (line  31)
* table-insert:                          Table Creation.      (line   6)
* table-insert-column:                   Table Rows and Columns.
                                                              (line  13)
* table-insert-row:                      Table Rows and Columns.
                                                              (line   6)
* table-insert-sequence:                 Table Misc.          (line  15)
* table-justify:                         Cell Justification.  (line  11)
* table-narrow-cell:                     Cell Commands.       (line  40)
* table-query-dimension:                 Table Misc.          (line   6)
* table-recognize:                       Table Recognition.   (line   6)
* table-recognize-cell:                  Table Recognition.   (line  30)
* table-recognize-region:                Table Recognition.   (line  18)
* table-recognize-table:                 Table Recognition.   (line  24)
* table-release:                         Table Conversion.    (line  28)
* table-shorten-cell:                    Cell Commands.       (line  34)
* table-span-cell:                       Cell Commands.       (line  12)
* table-split-cell:                      Cell Commands.       (line  17)
* table-split-cell-horizontally:         Cell Commands.       (line  17)
* table-split-cell-vertically:           Cell Commands.       (line  17)
* table-unrecognize:                     Table Recognition.   (line   6)
* table-unrecognize-cell:                Table Recognition.   (line  33)
* table-unrecognize-region:              Table Recognition.   (line  21)
* table-unrecognize-table:               Table Recognition.   (line  27)
* table-widen-cell:                      Cell Commands.       (line  37)
* tabulated-list-narrow-current-column:  Several Buffers.     (line 140)
* tabulated-list-sort:                   Several Buffers.     (line 131)
* tabulated-list-widen-current-column:   Several Buffers.     (line 136)
* tags-next-file:                        List Identifiers.    (line  35)
* tags-query-replace:                    Identifier Search.   (line  82)
* tags-search:                           Identifier Search.   (line  71)
* temp-buffer-resize-mode:               Temporary Displays.  (line  29)
* term:                                  Terminal emulator.   (line   6)
* term-char-mode:                        Term Mode.           (line  12)
* term-line-mode:                        Term Mode.           (line   8)
* term-pager-toggle:                     Term Mode.           (line  29)
* tetris:                                Amusements.          (line  50)
* tex-bibtex-file:                       TeX Print.           (line 138)
* tex-buffer:                            TeX Print.           (line  39)
* tex-compile:                           TeX Print.           (line 148)
* tex-file:                              TeX Print.           (line 110)
* tex-insert-braces:                     TeX Editing.         (line  43)
* tex-insert-quote:                      TeX Editing.         (line  21)
* tex-kill-job:                          TeX Print.           (line  78)
* tex-mode:                              TeX Mode.            (line   6)
* tex-print:                             TeX Print.           (line  39)
* tex-recenter-output-buffer:            TeX Print.           (line  78)
* tex-region:                            TeX Print.           (line  88)
* tex-terminate-paragraph:               TeX Editing.         (line  51)
* tex-validate-region:                   TeX Editing.         (line  51)
* tex-view:                              TeX Print.           (line  39)
* text-mode:                             Text Mode.           (line   6)
* text-scale-adjust:                     Text Scale.          (line   6)
* text-scale-decrease:                   Text Scale.          (line  42)
* text-scale-increase:                   Text Scale.          (line  42)
* text-scale-mode:                       Text Scale.          (line  50)
* text-scale-pinch:                      Text Scale.          (line  54)
* text-scale-set:                        Text Scale.          (line  47)
* theme-choose-variant:                  Custom Themes.       (line  80)
* thumbs-mode:                           Image Mode.          (line 167)
* time-stamp:                            Time Stamps.         (line  17)
* timeclock-change:                      Time Intervals.      (line  11)
* timeclock-in:                          Time Intervals.      (line  11)
* timeclock-mode-line-display:           Time Intervals.      (line  22)
* timeclock-out:                         Time Intervals.      (line  11)
* timeclock-reread-log:                  Time Intervals.      (line  34)
* timeclock-when-to-leave:               Time Intervals.      (line  11)
* timeclock-workday-remaining:           Time Intervals.      (line  11)
* tmm-menubar:                           Menu Bar.            (line  32)
* toggle-debug-on-error:                 Checklist.           (line 292)
* toggle-frame-fullscreen:               Frame Commands.      (line  35)
* toggle-frame-maximized:                Frame Commands.      (line  31)
* toggle-frame-tab-bar:                  Tab Bars.            (line  55)
* toggle-input-method:                   Select Input Method. (line  35)
* toggle-scroll-bar:                     Scroll Bars.         (line  21)
* toggle-truncate-lines:                 Line Truncation.     (line  14)
* tool-bar-mode:                         Tool Bars.           (line  14)
* tooltip-mode:                          Tooltips.            (line  12)
* top-level:                             Quitting.            (line  91)
* transient-mark-mode:                   Disabled Transient Mark.
                                                              (line   6)
* transpose-chars:                       Transpose.           (line  21)
* transpose-lines:                       Transpose.           (line  35)
* transpose-paragraphs:                  Transpose.           (line  43)
* transpose-regions:                     Transpose.           (line  65)
* transpose-sentences:                   Transpose.           (line  43)
* transpose-sexps:                       Expressions.         (line  47)
* transpose-words:                       Transpose.           (line  35)
* tty-suppress-bold-inverse-default-colors: Display Custom.   (line 127)
* uncomment-region:                      Comment Commands.    (line  84)
* undelete-frame:                        Frame Commands.      (line  13)
* undelete-frame-mode:                   Frame Commands.      (line  13)
* undigestify-rmail-message:             Rmail Digest.        (line  15)
* undo:                                  Undo.                (line  21)
* undo-only:                             Undo.                (line  28)
* undo-redo:                             Undo.                (line  28)
* unexpand-abbrev:                       Expanding Abbrevs.   (line  30)
* unforward-rmail-message:               Rmail Reply.         (line  77)
* unhighlight-regexp:                    Highlight Interactively.
                                                              (line  48)
* universal-argument:                    Arguments.           (line  41)
* universal-coding-system-argument:      Text Coding.         (line  43)
* unmorse-region:                        Amusements.          (line  45)
* untabify:                              Just Spaces.         (line  26)
* up-list:                               TeX Editing.         (line  43)
* upcase-region:                         Case.                (line  41)
* upcase-word:                           Case.                (line  20)
* url-handler-mode:                      Browse-URL.          (line  33)
* use-hard-newlines:                     Hard and Soft Newlines.
                                                              (line   6)
* vc-annotate:                           Old Revisions.       (line  84)
* vc-create-branch:                      Creating Branches.   (line  15)
* vc-create-tag:                         Revision Tags.       (line  17)
* vc-delete-file:                        VC Delete/Rename.    (line  15)
* vc-diff:                               Old Revisions.       (line  28)
* vc-dir:                                VC Directory Mode.   (line  12)
* vc-dir-mark:                           VC Directory Commands.
                                                              (line  82)
* vc-dir-mark-all-files:                 VC Directory Commands.
                                                              (line  82)
* vc-dir-mark-by-regexp:                 VC Directory Commands.
                                                              (line  47)
* vc-dir-mark-registered-files:          VC Directory Commands.
                                                              (line  53)
* vc-ediff:                              Old Revisions.       (line  53)
* vc-edit-next-command:                  Editing VC Commands. (line   6)
* vc-ignore:                             VC Ignore.           (line   9)
* vc-insert-headers:                     Version Headers.     (line  20)
* vc-log-incoming:                       VC Change Log.       (line  79)
* vc-log-outgoing:                       VC Change Log.       (line  79)
* vc-log-search:                         VC Change Log.       (line 153)
* vc-next-action:                        Basic VC Editing.    (line  28)
* vc-prepare-patch:                      Preparing Patches.   (line   6)
* vc-print-branch-log:                   VC Change Log.       (line  73)
* vc-print-log:                          VC Change Log.       (line  33)
* vc-print-root-log:                     VC Change Log.       (line  54)
* vc-pull:                               Pulling / Pushing.   (line  38)
* vc-push:                               Pulling / Pushing.   (line  18)
* vc-refresh-state:                      Version Control.     (line  19)
* vc-region-history:                     VC Change Log.       (line 138)
* vc-register:                           Registering.         (line   9)
* vc-rename-file:                        VC Delete/Rename.    (line  22)
* vc-retrieve-tag:                       Revision Tags.       (line  21)
* vc-revert:                             VC Undo.             (line  10)
* vc-revision-other-window:              Old Revisions.       (line  79)
* vc-root-diff:                          Old Revisions.       (line  56)
* vc-root-version-diff:                  Old Revisions.       (line  61)
* vc-state-refresh:                      Version Control.     (line  19)
* vc-switch-branch:                      Switching Branches.  (line  21)
* vc-update-change-log:                  Change Logs and VC.  (line  18)
* view-buffer:                           View Mode.           (line  18)
* view-echo-area-messages:               Misc Help.           (line  34)
* view-emacs-debugging:                  Help Files.          (line  12)
* view-emacs-FAQ:                        Help Files.          (line  12)
* view-emacs-news:                       Help Files.          (line  12)
* view-emacs-problems:                   Help Files.          (line  12)
* view-emacs-todo:                       Help Files.          (line  12)
* View-exit:                             View Mode.           (line  13)
* view-external-packages:                Help Files.          (line  12)
* view-file:                             View Mode.           (line  18)
* view-hello-file:                       International Chars. (line  18)
* view-lossage:                          Misc Help.           (line  27)
* view-order-manuals:                    Help Files.          (line  12)
* View-quit:                             View Mode.           (line  13)
* view-register:                         Registers.           (line  19)
* visit-tags-table:                      Select Tags Table.   (line   6)
* visual-line-mode:                      Visual Line Mode.    (line  14)
* w32-add-untranslated-filesystem:       Text and Binary.     (line  51)
* w32-find-non-USB-fonts:                Windows Fonts.       (line 115)
* w32-register-hot-key:                  Windows Keyboard.    (line  22)
* w32-remove-untranslated-filesystem:    Text and Binary.     (line  72)
* w32-set-console-codepage:              Terminal Coding.     (line  46)
* w32-set-ime-open-status:               Windows Keyboard.    (line 135)
* w32-shell-execute:                     Windows Processes.   (line  71)
* w32-unregister-hot-key:                Windows Keyboard.    (line  22)
* wdired-change-to-wdired-mode:          Wdired.              (line   6)
* wdired-finish-edit:                    Wdired.              (line  12)
* what-cursor-position:                  Position Info.       (line  54)
* what-cursor-position, and international characters: International Chars.
                                                              (line  38)
* what-line:                             Position Info.       (line  37)
* what-page:                             Pages.               (line  28)
* where-is:                              Key Help.            (line  25)
* which-function-mode:                   Which Function.      (line  10)
* whitespace-mode:                       Useless Whitespace.  (line  37)
* whitespace-toggle-options:             Useless Whitespace.  (line  37)
* widen:                                 Narrowing.           (line  43)
* widget-backward:                       Customization Groups.
                                                              (line  47)
* widget-complete:                       Changing a Variable. (line  53)
* widget-describe:                       Key Help.            (line  30)
* widget-forward:                        Customization Groups.
                                                              (line  47)
* windmove-default-keybindings:          Window Convenience.  (line  26)
* windmove-delete-default-keybindings:   Window Convenience.  (line  26)
* windmove-display-default-keybindings:  Window Convenience.  (line  26)
* windmove-right:                        Window Convenience.  (line  26)
* windmove-swap-states-default-keybindings: Window Convenience.
                                                              (line  26)
* window-configuration-to-register:      Configuration Registers.
                                                              (line   6)
* window-divider-mode:                   Window Dividers.     (line  10)
* winner-mode:                           Window Convenience.  (line   6)
* woman:                                 Man Page.            (line  39)
* word-search-backward:                  Word Search.         (line  35)
* word-search-forward:                   Word Search.         (line  35)
* write-abbrev-file:                     Saving Abbrevs.      (line  21)
* write-file:                            Save Commands.       (line  98)
* write-region:                          Misc File Ops.       (line  56)
* xdb:                                   Starting GUD.        (line  39)
* xref-etags-mode:                       Looking Up Identifiers.
                                                              (line  92)
* xref-find-apropos:                     Looking Up Identifiers.
                                                              (line  51)
* xref-find-definitions:                 Looking Up Identifiers.
                                                              (line  31)
* xref-find-definitions-other-frame:     Looking Up Identifiers.
                                                              (line  40)
* xref-find-definitions-other-window:    Looking Up Identifiers.
                                                              (line  40)
* xref-find-references:                  Identifier Search.   (line  34)
* xref-find-references-and-replace:      Identifier Search.   (line  67)
* xref-go-back:                          Looking Up Identifiers.
                                                              (line  75)
* xref-go-forward:                       Looking Up Identifiers.
                                                              (line  83)
* xref-next-group:                       Xref Commands.       (line  24)
* xref-next-line:                        Xref Commands.       (line  20)
* xref-prev-group:                       Xref Commands.       (line  33)
* xref-prev-line:                        Xref Commands.       (line  29)
* xref-query-replace-in-results:         Identifier Search.   (line  55)
* xref-quit:                             Xref Commands.       (line  55)
* xref-quit-and-pop-marker-stack:        Xref Commands.       (line  51)
* xref-revert-buffer:                    Xref Commands.       (line  48)
* xref-select-and-show-xref:             Xref Commands.       (line  15)
* xref-show-location-at-point:           Xref Commands.       (line  37)
* xwidget-webkit-browse-history:         Embedded WebKit Widgets.
                                                              (line  40)
* xwidget-webkit-browse-url:             Embedded WebKit Widgets.
                                                              (line   6)
* xwidget-webkit-edit-mode:              Embedded WebKit Widgets.
                                                              (line  18)
* xwidget-webkit-isearch-mode:           Embedded WebKit Widgets.
                                                              (line  27)
* xwidget-webkit-mode:                   Embedded WebKit Widgets.
                                                              (line   6)
* yank:                                  Yanking.             (line  19)
* yank-media:                            Clipboard.           (line  35)
* yank-pop:                              Earlier Kills.       (line  12)
* yank-rectangle:                        Rectangles.          (line  83)
* zap-to-char:                           Other Kill Commands. (line  39)
* zap-up-to-char:                        Other Kill Commands. (line  46)
* zone:                                  Amusements.          (line  56)
* zrgrep:                                Grep Searching.      (line  72)


File: emacs.info,  Node: Variable Index,  Next: Concept Index,  Prev: Command Index,  Up: Top

# /. Variable Index
******************

 [index ]
* Menu:

* abbrev-all-caps:                       Expanding Abbrevs.   (line  14)
* abbrev-file-name:                      Saving Abbrevs.      (line  27)
* abbrev-suggest:                        Abbrevs Suggestions. (line  12)
* abbrev-suggest-hint-threshold:         Abbrevs Suggestions. (line  15)
* adaptive-fill-first-line-regexp:       Adaptive Fill.       (line  31)
* adaptive-fill-function:                Adaptive Fill.       (line  52)
* adaptive-fill-mode:                    Adaptive Fill.       (line  46)
* adaptive-fill-regexp:                  Adaptive Fill.       (line  46)
* add-log-always-start-new-record:       Change Log Commands. (line  30)
* add-log-dont-create-changelog-file:    Change Log Commands. (line  59)
* add-log-keep-changes-together:         Change Log Commands. (line  22)
* ange-ftp-default-user:                 Remote Files.        (line  35)
* ange-ftp-gateway-host:                 Remote Files.        (line  57)
* ange-ftp-generate-anonymous-password:  Remote Files.        (line  49)
* ange-ftp-make-backup-files:            Remote Files.        (line  41)
* ange-ftp-smart-gateway:                Remote Files.        (line  57)
* appt-audible:                          Appointments.        (line   6)
* appt-delete-window-function:           Appointments.        (line  15)
* appt-disp-window-function:             Appointments.        (line  15)
* appt-display-diary:                    Appointments.        (line  48)
* appt-display-duration:                 Appointments.        (line  15)
* appt-display-format:                   Appointments.        (line   6)
* appt-display-mode-line:                Appointments.        (line   6)
* appt-message-warning-time:             Appointments.        (line  34)
* appt-warning-time-regexp:              Appointments.        (line  34)
* apropos-do-all:                        Apropos.             (line  87)
* apropos-documentation-sort-by-scores:  Apropos.             (line  93)
* apropos-sort-by-scores:                Apropos.             (line  93)
* async-shell-command-buffer:            Single Shell.        (line  48)
* async-shell-command-display-buffer:    Single Shell.        (line  55)
* async-shell-command-width:             Single Shell.        (line  59)
* auth-source-save-behavior:             Authentication.      (line  26)
* auth-sources:                          Authentication.      (line  23)
* auto-coding-alist:                     Recognize Coding.    (line  86)
* auto-coding-functions:                 Recognize Coding.    (line  95)
* auto-coding-regexp-alist:              Recognize Coding.    (line  86)
* auto-compression-mode:                 Compressed Files.    (line  17)
* auto-hscroll-mode:                     Horizontal Scrolling.
                                                              (line   6)
* auto-mode-alist:                       Choosing Modes.      (line   6)
* auto-mode-case-fold:                   Choosing Modes.      (line 109)
* auto-revert-avoid-polling:             Auto Revert.         (line  41)
* auto-revert-check-vc-info:             VC Mode Line.        (line  30)
* auto-revert-interval:                  Auto Revert.         (line  31)
* auto-revert-notify-exclude-dir-regexp: Auto Revert.         (line  41)
* auto-revert-remote-files:              Auto Revert.         (line  27)
* auto-revert-use-notify:                Auto Revert.         (line  31)
* auto-revert-verbose:                   Auto Revert.         (line  24)
* auto-save-default:                     Auto Save Control.   (line   6)
* auto-save-file-name-transforms:        Auto Save Files.     (line  26)
* auto-save-interval:                    Auto Save Control.   (line  13)
* auto-save-list-file-prefix:            Recover.             (line  37)
* auto-save-no-message:                  Auto Save.           (line  11)
* auto-save-timeout:                     Auto Save Control.   (line  20)
* auto-save-visited-interval:            Auto Save Control.   (line  32)
* auto-save-visited-mode:                Auto Save Files.     (line  40)
* backtrace-on-error-noninteractive:     Initial Options.     (line  68)
* backup-by-copying:                     Backup Copying.      (line  20)
* backup-by-copying-when-linked:         Backup Copying.      (line  20)
* backup-by-copying-when-mismatch:       Backup Copying.      (line  20)
* backup-by-copying-when-privileged-mismatch: Backup Copying. (line  20)
* backup-directory-alist:                Backup.              (line  45)
* backup-enable-predicate:               Backup.              (line  31)
* battery-mode-line-format:              Optional Mode Line.  (line  80)
* bdf-directory-list:                    PostScript Variables.
                                                              (line  68)
* bidi-display-reordering:               Bidirectional Editing.
                                                              (line  32)
* bidi-paragraph-direction:              Bidirectional Editing.
                                                              (line  51)
* bidi-paragraph-separate-re:            Bidirectional Editing.
                                                              (line  37)
* bidi-paragraph-start-re:               Bidirectional Editing.
                                                              (line  37)
* blink-cursor-alist:                    Cursor Display.      (line  25)
* blink-cursor-blinks:                   Cursor Display.      (line  25)
* blink-cursor-mode:                     Cursor Display.      (line  25)
* blink-matching-delay:                  Matching.            (line  17)
* blink-matching-paren:                  Matching.            (line  17)
* blink-matching-paren-distance:         Matching.            (line  17)
* bookmark-default-file:                 Bookmarks.           (line  62)
* bookmark-save-flag:                    Bookmarks.           (line  55)
* bookmark-search-size:                  Bookmarks.           (line  70)
* bookmark-use-annotations:              Bookmarks.           (line  65)
* browse-url-browser-function:           Browse-URL.          (line  20)
* browse-url-handlers:                   Browse-URL.          (line  26)
* browse-url-mailto-function:            Browse-URL.          (line  20)
* buffer-auto-revert-by-notification:    Non-File Buffers.    (line  32)
* buffer-file-coding-system:             Output Coding.       (line   6)
* buffer-read-only:                      Misc Buffer.         (line  15)
* bug-reference-auto-setup-functions:    Bug Reference.       (line  50)
* bug-reference-auto-setup-functions <1>: Bug Reference.      (line 107)
* bug-reference-bug-regexp:              Bug Reference.       (line  18)
* bug-reference-forge-alist:             Bug Reference.       (line  57)
* bug-reference-setup-from-irc-alist:    Bug Reference.       (line  57)
* bug-reference-setup-from-mail-alist:   Bug Reference.       (line  57)
* bug-reference-setup-from-vc-alist:     Bug Reference.       (line  57)
* bug-reference-url-format:              Bug Reference.       (line  18)
* c-default-style:                       Custom C Indent.     (line  34)
* c-hungry-delete-key:                   Hungry Delete.       (line  34)
* c-mode-hook:                           Program Modes.       (line  47)
* c-tab-always-indent:                   C Indent.            (line  26)
* c-ts-mode-indent-style:                Custom C Indent.     (line  52)
* cal-html-css-default:                  Writing Calendar Files.
                                                              (line  16)
* calendar-bahai-all-holidays-flag:      Holiday Customizing. (line  24)
* calendar-christian-all-holidays-flag:  Holiday Customizing. (line  24)
* calendar-date-display-form:            Date Display Format. (line   6)
* calendar-date-style:                   Date Formats.        (line  43)
* calendar-day-header-array:             Calendar Customizing.
                                                              (line  15)
* calendar-daylight-savings-ends:        Daylight Saving.     (line  13)
* calendar-daylight-savings-ends-time:   Daylight Saving.     (line  51)
* calendar-daylight-savings-starts:      Daylight Saving.     (line  13)
* calendar-daylight-time-offset:         Daylight Saving.     (line  47)
* calendar-daylight-time-zone-name:      Sunrise/Sunset.      (line  50)
* calendar-hebrew-all-holidays-flag:     Holiday Customizing. (line  24)
* calendar-holiday-marker:               Calendar Customizing.
                                                              (line  21)
* calendar-holidays:                     Holiday Customizing. (line   6)
* calendar-initial-window-hook:          Calendar Customizing.
                                                              (line  30)
* calendar-intermonth-text:              Calendar Customizing.
                                                              (line   6)
* calendar-islamic-all-holidays-flag:    Holiday Customizing. (line  24)
* calendar-latitude:                     Sunrise/Sunset.      (line  38)
* calendar-location-name:                Sunrise/Sunset.      (line  38)
* calendar-longitude:                    Sunrise/Sunset.      (line  38)
* calendar-mark-diary-entries-flag:      Displaying the Diary.
                                                              (line  43)
* calendar-mark-holidays-flag:           Holidays.            (line  33)
* calendar-month-header:                 Calendar Customizing.
                                                              (line  15)
* calendar-move-hook:                    Calendar Customizing.
                                                              (line  46)
* calendar-remove-frame-by-deleting:     General Calendar.    (line  33)
* calendar-standard-time-zone-name:      Sunrise/Sunset.      (line  50)
* calendar-time-display-form:            Time Display Format. (line   6)
* calendar-time-zone:                    Sunrise/Sunset.      (line  50)
* calendar-time-zone-style:              Sunrise/Sunset.      (line  62)
* calendar-today-invisible-hook:         Calendar Customizing.
                                                              (line  43)
* calendar-today-marker:                 Calendar Customizing.
                                                              (line  21)
* calendar-today-visible-hook:           Calendar Customizing.
                                                              (line  35)
* calendar-view-diary-initially-flag:    Displaying the Diary.
                                                              (line  28)
* calendar-view-holidays-initially-flag: Holidays.            (line  26)
* calendar-week-start-day:               Move to Beginning or End.
                                                              (line  27)
* calendar-weekend-days:                 Move to Beginning or End.
                                                              (line  27)
* case-fold-search:                      Lax Search.          (line  56)
* case-replace:                          Replacement and Lax Matches.
                                                              (line  30)
* CDPATH, environment variable:          General Variables.   (line  12)
* change-log-version-info-enabled:       Change Log Commands. (line  34)
* change-log-version-number-regexp-list: Change Log Commands. (line  34)
* change-major-mode-with-file-name:      Choosing Modes.      (line 140)
* char-fold-exclude:                     Lax Search.          (line 112)
* char-fold-include:                     Lax Search.          (line 112)
* char-fold-override:                    Lax Search.          (line 112)
* char-fold-symmetric:                   Lax Search.          (line 104)
* clone-indirect-buffer-hook:            Indirect Buffers.    (line  50)
* coding:                                Specify Coding.      (line  14)
* colon-double-space:                    Fill Commands.       (line  69)
* COLORTERM, environment variable:       General Variables.   (line  15)
* column-number-indicator-zero-based:    Optional Mode Line.  (line  31)
* comint-completion-addsuffix:           Shell Options.       (line  33)
* comint-completion-autolist:            Shell Options.       (line  33)
* comint-completion-fignore:             Shell Options.       (line  47)
* comint-completion-recexact:            Shell Options.       (line  33)
* comint-input-autoexpand:               History References.  (line  17)
* comint-input-ignoredups:               Shell Options.       (line  27)
* comint-input-ring-file-name:           Shell Ring.          (line  80)
* comint-insert-previous-argument-from-end: Shell Ring.       (line  71)
* comint-move-point-for-output:          Shell Options.       (line  16)
* comint-prompt-read-only:               Shell Options.       (line  24)
* comint-scroll-show-maximum-output:     Shell Options.       (line  10)
* comint-scroll-to-bottom-on-input:      Shell Options.       (line   6)
* comint-terminfo-terminal:              Shell Options.       (line  64)
* comint-use-prompt-regexp:              Shell Prompts.       (line  21)
* command-history:                       Repetition.          (line  46)
* command-line-args:                     Emacs Invocation.    (line  40)
* comment-column:                        Options for Comments.
                                                              (line   6)
* comment-end:                           Options for Comments.
                                                              (line  30)
* comment-fill-column:                   Options for Comments.
                                                              (line   6)
* comment-indent-function:               Options for Comments.
                                                              (line  47)
* comment-multi-line:                    Multi-Line Comments. (line   6)
* comment-padding:                       Options for Comments.
                                                              (line  37)
* comment-start:                         Options for Comments.
                                                              (line  30)
* comment-start-skip:                    Options for Comments.
                                                              (line  19)
* compare-ignore-case:                   Comparing Files.     (line  47)
* compare-ignore-whitespace:             Comparing Files.     (line  47)
* compilation-always-kill:               Compilation.         (line  71)
* compilation-auto-jump-to-first-error:  Compilation Mode.    (line  24)
* compilation-context-lines:             Compilation Mode.    (line 107)
* compilation-environment:               Compilation.         (line  84)
* compilation-error:                     Compilation Mode.    (line  13)
* compilation-error-regexp-alist:        Compilation Mode.    (line 127)
* compilation-hidden-output:             Compilation Mode.    (line 118)
* compilation-max-output-line-length:    Compilation.         (line  90)
* compilation-scroll-output:             Compilation.         (line  58)
* compilation-skip-threshold:            Compilation Mode.    (line  93)
* compilation-warning:                   Compilation Mode.    (line  13)
* compile-command:                       Compilation.         (line  30)
* completion-auto-help:                  Completion Options.  (line  36)
* completion-auto-select:                Completion Options.  (line  55)
* completion-category-overrides:         Completion Styles.   (line  74)
* completion-cycle-threshold:            Completion Options.  (line  65)
* completion-ignored-extensions:         Completion Options.  (line  19)
* completion-styles:                     Completion Styles.   (line  20)
* completions-detailed:                  Name Help.           (line  68)
* completions-format:                    Completion Options.  (line  77)
* completions-header-format:             Completion Options.  (line  98)
* completions-highlight-face:            Completion Options.  (line 108)
* completions-max-height:                Completion Options.  (line  91)
* completions-sort:                      Completion Options.  (line  84)
* COMSPEC:                               Misc Variables.      (line   8)
* confirm-kill-emacs:                    Exiting.             (line  30)
* confirm-kill-processes:                Exiting.             (line  37)
* confirm-nonexistent-file-or-buffer:    Completion Exit.     (line  44)
* context-menu-functions:                Menu Mouse Clicks.   (line  33)
* copy-directory-create-symlink:         Copying and Naming.  (line  23)
* create-lockfiles:                      Interlocking.        (line  26)
* ctl-arrow:                             Text Display.        (line  26)
* ctl-x-4-map:                           Prefix Keymaps.      (line  37)
* ctl-x-map:                             Prefix Keymaps.      (line  32)
* cua-enable-cua-keys:                   CUA Bindings.        (line   6)
* cua-mode:                              CUA Bindings.        (line   6)
* current-input-method:                  Select Input Method. (line  29)
* current-language-environment:          Language Environments.
                                                              (line  19)
* cursor-in-non-selected-windows:        Cursor Display.      (line  49)
* cursor-type:                           Cursor Display.      (line  13)
* custom-buffer-done-kill:               Changing a Variable. (line 139)
* custom-enabled-themes:                 Custom Themes.       (line  53)
* custom-file:                           Saving Customizations.
                                                              (line  16)
* custom-safe-themes:                    Custom Themes.       (line  43)
* custom-search-field:                   Browsing Custom.     (line  18)
* custom-theme-directory:                Custom Themes.       (line  16)
* custom-theme-directory, saving theme files: Creating Custom Themes.
                                                              (line  28)
* custom-theme-load-path:                Custom Themes.       (line  27)
* cycle-spacing-actions:                 Deletion.            (line  52)
* dabbrev-abbrev-char-regexp:            Dabbrev Customization.
                                                              (line  35)
* dabbrev-abbrev-skip-leading-regexp:    Dabbrev Customization.
                                                              (line  48)
* dabbrev-case-fold-search:              Dabbrev Customization.
                                                              (line  10)
* dabbrev-case-replace:                  Dabbrev Customization.
                                                              (line  21)
* dabbrev-check-all-buffers:             Dynamic Abbrevs.     (line  31)
* dabbrev-check-other-buffers:           Dynamic Abbrevs.     (line  31)
* dabbrev-ignored-buffer-modes:          Dynamic Abbrevs.     (line  31)
* dabbrev-ignored-buffer-names:          Dynamic Abbrevs.     (line  37)
* dabbrev-ignored-buffer-regexps:        Dynamic Abbrevs.     (line  37)
* dabbrev-limit:                         Dynamic Abbrevs.     (line  21)
* DBUS_SESSION_BUS_ADDRESS, environment variable: General Variables.
                                                              (line  21)
* dbx-mode-hook:                         GUD Customization.   (line   6)
* debug-on-event:                        Checklist.           (line 316)
* debug-on-quit:                         Checklist.           (line 310)
* default-directory:                     File Names.          (line  22)
* default-frame-alist:                   Frame Parameters.    (line   6)
* default-input-method:                  Select Input Method. (line  48)
* default-justification:                 Enriched Justification.
                                                              (line  30)
* delete-active-region:                  Using Region.        (line  31)
* delete-auto-save-files:                Auto Save Files.     (line  55)
* delete-by-moving-to-trash:             Misc File Ops.       (line  19)
* delete-by-moving-to-trash, and Dired:  Dired Deletion.      (line  66)
* delete-old-versions:                   Backup Deletion.     (line  21)
* delete-selection-temporary-region:     Using Region.        (line  50)
* delete-trailing-lines:                 Useless Whitespace.  (line  21)
* desktop-auto-save-timeout:             Saving Emacs Sessions.
                                                              (line  17)
* desktop-clear-preserve-buffers-regexp: Saving Emacs Sessions.
                                                              (line 101)
* desktop-files-not-to-save:             Saving Emacs Sessions.
                                                              (line  91)
* desktop-globals-to-clear:              Saving Emacs Sessions.
                                                              (line 101)
* desktop-load-locked-desktop:           Saving Emacs Sessions.
                                                              (line  40)
* desktop-path:                          Saving Emacs Sessions.
                                                              (line  17)
* desktop-restore-eager:                 Saving Emacs Sessions.
                                                              (line  95)
* desktop-restore-frames:                Saving Emacs Sessions.
                                                              (line  75)
* desktop-save-mode:                     Saving Emacs Sessions.
                                                              (line  11)
* diary-bahai-entry-symbol:              Non-Gregorian Diary. (line  21)
* diary-chinese-entry-symbol:            Non-Gregorian Diary. (line  21)
* diary-comment-start:                   Fancy Diary Display. (line  19)
* diary-date-forms:                      Diary Customizing.   (line  23)
* diary-display-function:                Diary Display.       (line   6)
* diary-entry-marker:                    Calendar Customizing.
                                                              (line  21)
* diary-file:                            Format of Diary File.
                                                              (line   6)
* diary-hebrew-entry-symbol:             Non-Gregorian Diary. (line  21)
* diary-include-string:                  Fancy Diary Display. (line  25)
* diary-islamic-entry-symbol:            Non-Gregorian Diary. (line  21)
* diary-list-entries-hook:               Fancy Diary Display. (line  36)
* diary-list-include-blanks:             Diary Display.       (line  14)
* diary-mail-days:                       Displaying the Diary.
                                                              (line  73)
* diary-mark-entries-hook:               Fancy Diary Display. (line  36)
* diary-nongregorian-listing-hook:       Non-Gregorian Diary. (line  13)
* diary-nongregorian-marking-hook:       Non-Gregorian Diary. (line  13)
* diary-nonmarking-symbol:               Displaying the Diary.
                                                              (line  54)
* diary-number-of-entries:               Diary Customizing.   (line  12)
* diary-outlook-formats:                 Importing Diary.     (line   9)
* diary-print-entries-hook:              Diary Display.       (line  32)
* diary-sexp-entry-symbol:               Sexp Diary Entries.  (line   6)
* diary-show-holidays-flag:              Diary Customizing.   (line   6)
* diff-add-log-use-relative-names:       Log Buffer.          (line  39)
* diff-font-lock-syntax:                 Diff Mode.           (line 173)
* diff-jump-to-old-file:                 Diff Mode.           (line  90)
* diff-refine:                           Diff Mode.           (line  44)
* diff-refine <1>:                       Diff Mode.           (line  85)
* diff-switches:                         Comparing Files.     (line   6)
* diff-update-on-the-fly:                Diff Mode.           (line  24)
* directory-abbrev-alist:                File Aliases.        (line  33)
* dired-auto-revert-buffer:              Dired Updating.      (line  43)
* dired-chown-program:                   Operating on Files.  (line 155)
* dired-confirm-shell-command:           Shell Commands in Dired.
                                                              (line   6)
* dired-copy-dereference:                Operating on Files.  (line  72)
* dired-copy-preserve-time:              Operating on Files.  (line  64)
* dired-create-destination-dirs:         Operating on Files.  (line  49)
* dired-create-destination-dirs-on-trailing-dirsep: Operating on Files.
                                                              (line  56)
* dired-dwim-target:                     Operating on Files.  (line  29)
* dired-enable-globstar-in-shell:        Dired Enter.         (line  32)
* dired-free-space:                      Misc Dired Features. (line   6)
* dired-garbage-files-regexp:            Flagging Many Files. (line  50)
* dired-guess-shell-alist-default:       Shell Command Guessing.
                                                              (line  18)
* dired-guess-shell-alist-user:          Shell Command Guessing.
                                                              (line  24)
* dired-hide-details-hide-information-lines: Misc Dired Features.
                                                              (line  50)
* dired-hide-details-hide-symlink-targets: Misc Dired Features.
                                                              (line  50)
* dired-isearch-filenames:               Dired Navigation.    (line  20)
* dired-keep-marker-copy:                Operating on Files.  (line  77)
* dired-kept-versions:                   Flagging Many Files. (line  37)
* dired-kill-when-opening-new-dired-buffer: Dired Visiting.   (line  47)
* dired-listing-switches:                Dired Enter.         (line   6)
* dired-listing-switches (MS-DOS):       MS-DOS Processes.    (line  44)
* dired-maybe-use-globstar:              Dired Enter.         (line  32)
* dired-mouse-drag-files:                Misc Dired Features. (line  84)
* dired-recursive-copies:                Operating on Files.  (line  68)
* dired-recursive-deletes:               Dired Deletion.      (line  51)
* dired-switches-in-mode-line:           Dired Enter.         (line  71)
* dired-use-ls-dired:                    Dired Enter.         (line  81)
* dired-vc-rename-file:                  Operating on Files.  (line 109)
* dirtrack-list:                         Directory Tracking.  (line  25)
* display-battery-mode:                  Optional Mode Line.  (line  80)
* display-fill-column-indicator-character: Displaying Boundaries.
                                                              (line  39)
* display-fill-column-indicator-column:  Displaying Boundaries.
                                                              (line  31)
* display-hourglass:                     Display Custom.      (line  97)
* display-line-numbers:                  Display Custom.      (line   9)
* display-line-numbers-current-absolute: Display Custom.      (line  48)
* display-line-numbers-grow-only:        Display Custom.      (line  69)
* display-line-numbers-offset:           Display Custom.      (line  63)
* display-line-numbers-type:             Display Custom.      (line  39)
* display-line-numbers-widen:            Display Custom.      (line  57)
* display-line-numbers-width:            Display Custom.      (line  69)
* display-line-numbers-width-start:      Display Custom.      (line  69)
* display-raw-bytes-as-hex:              Display Custom.      (line 132)
* display-time-24hr-format:              Optional Mode Line.  (line  62)
* display-time-mail-directory:           Optional Mode Line.  (line  70)
* display-time-mail-face:                Optional Mode Line.  (line  70)
* display-time-mail-file:                Optional Mode Line.  (line  70)
* display-time-use-mail-icon:            Optional Mode Line.  (line  70)
* dnd-indicate-insertion-point:          Drag and Drop.       (line  21)
* dnd-open-file-other-window:            Drag and Drop.       (line  14)
* dnd-scroll-margin:                     Drag and Drop.       (line  21)
* doc-view-cache-directory:              DocView Conversion.  (line   6)
* doc-view-continuous:                   DocView Navigation.  (line   9)
* doc-view-imenu-enabled:                DocView Navigation.  (line  36)
* doc-view-imenu-flatten:                DocView Navigation.  (line  36)
* doc-view-imenu-format:                 DocView Navigation.  (line  36)
* doc-view-resolution:                   DocView Navigation.  (line  29)
* doc-view-scale-internally:             DocView Navigation.  (line  29)
* doctex-mode-hook:                      TeX Misc.            (line   6)
* dos-codepage:                          MS-DOS and MULE.     (line  36)
* dos-display-scancodes:                 MS-DOS Mouse.        (line  49)
* dos-hyper-key:                         MS-DOS Keyboard.     (line  20)
* dos-keypad-mode:                       MS-DOS Keyboard.     (line  31)
* dos-printer:                           MS-DOS Printing.     (line  26)
* dos-ps-printer:                        MS-DOS Printing.     (line  26)
* dos-super-key:                         MS-DOS Keyboard.     (line  20)
* double-click-fuzz:                     Mouse Buttons.       (line  74)
* double-click-time:                     Mouse Buttons.       (line  68)
* echo-keystrokes:                       Display Custom.      (line  91)
* eldoc-documentation-functions:         Programming Language Doc.
                                                              (line 109)
* eldoc-documentation-strategy:          Programming Language Doc.
                                                              (line  98)
* eldoc-echo-area-display-truncation-message: Programming Language Doc.
                                                              (line  79)
* eldoc-echo-area-prefer-doc-buffer:     Programming Language Doc.
                                                              (line  86)
* eldoc-echo-area-use-multiline-p:       Programming Language Doc.
                                                              (line  61)
* eldoc-idle-delay:                      Programming Language Doc.
                                                              (line  45)
* eldoc-print-after-edit:                Programming Language Doc.
                                                              (line  51)
* electric-pair-delete-adjacent-pairs:   Matching.            (line  93)
* electric-pair-open-newline-between-pairs: Matching.         (line  97)
* electric-pair-preserve-balance:        Matching.            (line  89)
* electric-pair-skip-whitespace:         Matching.            (line 101)
* electric-quote-chars:                  Quotation Marks.     (line  13)
* electric-quote-comment:                Quotation Marks.     (line  21)
* electric-quote-paragraph:              Quotation Marks.     (line  21)
* electric-quote-replace-double:         Quotation Marks.     (line  29)
* electric-quote-string:                 Quotation Marks.     (line  21)
* emacs-lisp-mode-hook:                  Program Modes.       (line  47)
* EMACSCLIENT_TRAMP, environment variable: emacsclient Options.
                                                              (line 162)
* EMACSCOLORS:                           Misc Variables.      (line  23)
* EMACSDATA, environment variable:       General Variables.   (line  27)
* EMACSDOC, environment variable:        General Variables.   (line  30)
* EMACSLOADPATH, environment variable:   General Variables.   (line  33)
* EMACSPATH, environment variable:       General Variables.   (line  41)
* EMACSTEST:                             Misc Variables.      (line  18)
* emacs_dir:                             Misc Variables.      (line  50)
* EMACS_SERVER_FILE, environment variable: TCP Emacs server.  (line  42)
* EMAIL, environment variable:           General Variables.   (line  45)
* emerge-combine-versions-template:      Combining in Emerge. (line  16)
* emerge-startup-hook:                   Fine Points of Emerge.
                                                              (line  20)
* enable-local-eval:                     Safe File Variables. (line  54)
* enable-local-variables:                Safe File Variables. (line  44)
* enable-recursive-minibuffers:          Minibuffer Edit.     (line  62)
* enriched-allow-eval-in-display-props:  Enriched Properties. (line  16)
* enriched-translations:                 Enriched Mode.       (line  21)
* eol-mnemonic-dos:                      Optional Mode Line.  (line 107)
* eol-mnemonic-mac:                      Optional Mode Line.  (line 107)
* eol-mnemonic-undecided:                Optional Mode Line.  (line 107)
* eol-mnemonic-unix:                     Optional Mode Line.  (line 107)
* esc-map:                               Prefix Keymaps.      (line  35)
* ESHELL, environment variable:          General Variables.   (line  49)
* eval-expression-debug-on-error:        Lisp Eval.           (line  77)
* eval-expression-print-length:          Lisp Eval.           (line  77)
* eval-expression-print-level:           Lisp Eval.           (line  77)
* eval-expression-print-maximum-character: Lisp Eval.         (line  77)
* eww-search-prefix:                     Word Search.         (line  55)
* exec-path:                             Shell.               (line  27)
* exit-language-environment-hook:        Language Environments.
                                                              (line  94)
* explicit-shell-file-name:              Interactive Shell.   (line  47)
* extended-command-suggest-shorter:      M-x.                 (line  81)
* face-ignored-fonts:                    Modifying Fontsets.  (line  62)
* fast-but-imprecise-scrolling:          Scrolling.           (line  75)
* ff-related-file-alist:                 Other C Commands.    (line  94)
* file-coding-system-alist:              Recognize Coding.    (line  43)
* file-name-at-point-functions:          Minibuffer History.  (line  44)
* file-name-coding-system:               File Name Coding.    (line  14)
* file-preserve-symlinks-on-save:        Customize Save.      (line  22)
* fill-column:                           Fill Commands.       (line  43)
* fill-column-indicator:                 Displaying Boundaries.
                                                              (line  49)
* fill-nobreak-predicate:                Fill Commands.       (line  72)
* fill-prefix:                           Fill Prefix.         (line  76)
* find-file-existing-other-name:         File Aliases.        (line  15)
* find-file-hook:                        Visiting.            (line 209)
* find-file-not-found-functions:         Visiting.            (line 209)
* find-file-run-dired:                   Visiting.            (line 108)
* find-file-suppress-same-file-warnings: File Aliases.        (line  15)
* find-file-visit-truename:              File Aliases.        (line  27)
* find-file-wildcards:                   Visiting.            (line  84)
* find-ls-option:                        Dired and Find.      (line  32)
* find-sibling-rules:                    Visiting.            (line 176)
* focus-follows-mouse:                   Frame Commands.      (line  61)
* foldout-mouse-modifiers:               Foldout.             (line  68)
* font-lock-ignore:                      Traditional Font Lock.
                                                              (line  49)
* font-lock-maximum-decoration:          Traditional Font Lock.
                                                              (line  11)
* font-slant-table (MS-Windows):         Windows Fonts.       (line  59)
* font-weight-table (MS-Windows):        Windows Fonts.       (line  51)
* fortran-analyze-depth:                 ForIndent Cont.      (line  18)
* fortran-break-before-delimiters:       Fortran Autofill.    (line  14)
* fortran-check-all-num...:              ForIndent Vars.      (line   6)
* fortran-column-ruler-fixed:            Fortran Columns.     (line  46)
* fortran-column-ruler-tabs:             Fortran Columns.     (line  46)
* fortran-comment-indent-char:           Fortran Comments.    (line  62)
* fortran-comment-indent-style:          Fortran Comments.    (line  46)
* fortran-comment-line-extra-indent:     Fortran Comments.    (line  46)
* fortran-comment-line-start:            Fortran Comments.    (line  11)
* fortran-comment-region:                Fortran Comments.    (line  78)
* fortran-continuation-indent:           ForIndent Vars.      (line   6)
* fortran-continuation-string:           ForIndent Cont.      (line   6)
* fortran-directive-re:                  Fortran Comments.    (line  67)
* fortran-do-indent:                     ForIndent Vars.      (line   6)
* fortran-electric-line-number:          ForIndent Num.       (line  20)
* fortran-if-indent:                     ForIndent Vars.      (line   6)
* fortran-line-length:                   Fortran Columns.     (line   6)
* fortran-line-number-indent:            ForIndent Num.       (line  12)
* fortran-minimum-statement-indent...:   ForIndent Vars.      (line   6)
* fortran-structure-indent:              ForIndent Vars.      (line   6)
* fortran-tab-mode-default:              ForIndent Cont.      (line  18)
* frame-background-mode:                 Faces.               (line  18)
* frame-resize-pixelwise:                Frame Commands.      (line  40)
* frameset-filter-alist:                 Saving Emacs Sessions.
                                                              (line  80)
* fringe-mode (variable):                Fringes.             (line   6)
* gdb-default-window-configuration-file: GDB User Interface Layout.
                                                              (line  23)
* gdb-delete-out-of-scope:               Watch Expressions.   (line  39)
* gdb-display-source-buffer-action:      GDB User Interface Layout.
                                                              (line  60)
* gdb-gud-control-all-threads:           Multithreaded Debugging.
                                                              (line  39)
* gdb-many-windows:                      GDB User Interface Layout.
                                                              (line   6)
* gdb-max-source-window-count:           GDB User Interface Layout.
                                                              (line  60)
* gdb-mi-decode-strings:                 Source Buffers.      (line  43)
* gdb-mode-hook:                         GUD Customization.   (line   6)
* gdb-non-stop-setting:                  Multithreaded Debugging.
                                                              (line  15)
* gdb-restore-window-configuration-after-quit: GDB User Interface Layout.
                                                              (line  34)
* gdb-show-changed-values:               Watch Expressions.   (line  33)
* gdb-show-main:                         GDB User Interface Layout.
                                                              (line   6)
* gdb-show-threads-by-default:           Breakpoints Buffer.  (line  28)
* gdb-speedbar-auto-raise:               Watch Expressions.   (line  50)
* gdb-stack-buffer-addresses:            Stack Buffer.        (line  17)
* gdb-stopped-functions:                 Multithreaded Debugging.
                                                              (line  33)
* gdb-switch-reasons:                    Multithreaded Debugging.
                                                              (line  28)
* gdb-switch-when-another-stopped:       Multithreaded Debugging.
                                                              (line  23)
* gdb-thread-buffer-addresses:           Threads Buffer.      (line  25)
* gdb-thread-buffer-arguments:           Threads Buffer.      (line  19)
* gdb-thread-buffer-locations:           Threads Buffer.      (line  22)
* gdb-thread-buffer-verbose-names:       Threads Buffer.      (line  16)
* gdb-use-colon-colon-notation:          Watch Expressions.   (line  45)
* gdb-window-configuration-directory:    GDB User Interface Layout.
                                                              (line  23)
* global-cwarn-mode:                     Other C Commands.    (line  71)
* global-font-lock-mode:                 Font Lock.           (line  17)
* global-mark-ring-max:                  Global Mark Ring.    (line   6)
* global-text-scale-adjust-resizes-frames: Text Scale.        (line  35)
* grep-find-abbreviate:                  Grep Searching.      (line  89)
* grep-find-ignored-directories:         Grep Searching.      (line  85)
* grep-find-ignored-directories (Dired): Operating on Files.  (line 232)
* grep-find-ignored-files (Dired):       Operating on Files.  (line 232)
* grep-match-regexp:                     Grep Searching.      (line  45)
* grep-regexp-alist:                     Compilation Mode.    (line 127)
* gud-gdb-command-name:                  GDB Graphical Interface.
                                                              (line  12)
* gud-tooltip-echo-area:                 Debugger Operation.  (line  32)
* gud-xdb-directories:                   Starting GUD.        (line  39)
* guiler-mode-hook:                      GUD Customization.   (line   6)
* haiku-control-keysym:                  Haiku Basics.        (line  36)
* haiku-debug-on-fatal-error:            Haiku Basics.        (line  71)
* haiku-meta-keysym:                     Haiku Basics.        (line  32)
* haiku-shift-keysym:                    Haiku Basics.        (line  44)
* haiku-super-keysym:                    Haiku Basics.        (line  40)
* help-at-pt-display-when-idle:          Help Echo.           (line  13)
* help-clean-buttons:                    Help Mode.           (line  58)
* help-enable-autoload:                  Lisp Libraries.      (line  92)
* help-enable-completion-autoload:       Lisp Libraries.      (line  99)
* help-enable-symbol-autoload:           Name Help.           (line  37)
* help-map:                              Prefix Keymaps.      (line  34)
* help-window-keep-selected:             Help.                (line  24)
* help-window-select:                    Help.                (line  17)
* help-window-select, and apropos commands: Apropos.          (line  56)
* hi-lock-auto-select-face:              Highlight Interactively.
                                                              (line  38)
* hi-lock-exclude-modes:                 Highlight Interactively.
                                                              (line 107)
* hi-lock-file-patterns-policy:          Highlight Interactively.
                                                              (line  97)
* hide-ifdef-shadow:                     Other C Commands.    (line  86)
* highlight-nonselected-windows:         Mark.                (line  48)
* HISTFILE, environment variable:        General Variables.   (line  52)
* history-delete-duplicates:             Minibuffer History.  (line  91)
* history-length:                        Minibuffer History.  (line  86)
* holiday-bahai-holidays:                Holiday Customizing. (line  24)
* holiday-christian-holidays:            Holiday Customizing. (line  24)
* holiday-general-holidays:              Holiday Customizing. (line  19)
* holiday-hebrew-holidays:               Holiday Customizing. (line  24)
* holiday-islamic-holidays:              Holiday Customizing. (line  24)
* holiday-local-holidays:                Holiday Customizing. (line  19)
* holiday-oriental-holidays:             Holiday Customizing. (line   6)
* holiday-other-holidays:                Holiday Customizing. (line  19)
* holiday-solar-holidays:                Holiday Customizing. (line   6)
* HOME, environment variable:            General Variables.   (line  57)
* horizontal-scroll-bar-mode:            Scroll Bars.         (line  86)
* HOSTNAME, environment variable:        General Variables.   (line  72)
* hourglass-delay:                       Display Custom.      (line  97)
* hs-hide-comments-when-hiding-all:      Hideshow.            (line  37)
* hs-isearch-open:                       Hideshow.            (line  37)
* hs-special-modes-alist:                Hideshow.            (line  37)
* hscroll-margin:                        Horizontal Scrolling.
                                                              (line  21)
* hscroll-step:                          Horizontal Scrolling.
                                                              (line  27)
* icon-preference:                       Icons.               (line   9)
* ignored-local-variable-values:         Safe File Variables. (line  31)
* image-animate-loop:                    Image Mode.          (line  51)
* image-auto-resize:                     Image Mode.          (line  15)
* image-auto-resize-on-window-resize:    Image Mode.          (line  15)
* image-crop-crop-command:               Image Mode.          (line  99)
* image-crop-cut-command:                Image Mode.          (line 114)
* image-cut-color:                       Image Mode.          (line 114)
* image-dired-external-viewer:           Image-Dired.         (line  30)
* image-dired-thumb-visible-marks:       Image-Dired.         (line  68)
* image-use-external-converter:          Image Mode.          (line 140)
* imagemagick-enabled-types:             Image Mode.          (line 126)
* imagemagick-types-inhibit:             Image Mode.          (line 126)
* imenu-auto-rescan:                     Imenu.               (line  25)
* imenu-auto-rescan-maxout:              Imenu.               (line  31)
* imenu-max-index-time:                  Imenu.               (line  31)
* imenu-sort-function:                   Imenu.               (line  35)
* indent-tabs-mode:                      Just Spaces.         (line  12)
* indent-tabs-mode (Fortran mode):       ForIndent Cont.      (line  18)
* indicate-buffer-boundaries:            Displaying Boundaries.
                                                              (line  54)
* indicate-empty-lines:                  Useless Whitespace.  (line  28)
* inferior-lisp-program:                 External Lisp.       (line  11)
* INFOPATH, environment variable:        General Variables.   (line  74)
* inhibit-eol-conversion:                Recognize Coding.    (line  56)
* inhibit-iso-escape-detection:          Recognize Coding.    (line  67)
* inhibit-startup-buffer-menu:           Action Arguments.    (line  12)
* inhibit-startup-screen:                Entering Emacs.      (line  47)
* initial-environment:                   Environment.         (line  19)
* initial-frame-alist:                   Frame Parameters.    (line  25)
* initial-scratch-message:               Lisp Interaction.    (line  22)
* input-method-highlight-flag:           Input Methods.       (line  95)
* input-method-verbose-flag:             Input Methods.       (line  95)
* insert-default-directory:              Minibuffer File.     (line  60)
* interpreter-mode-alist:                Choosing Modes.      (line  45)
* isearch-allow-motion:                  Not Exiting Isearch. (line  72)
* isearch-allow-prefix:                  Not Exiting Isearch. (line  23)
* isearch-allow-scroll:                  Not Exiting Isearch. (line  39)
* isearch-hide-immediately:              Search Customizations.
                                                              (line  82)
* isearch-lazy-count:                    Search Customizations.
                                                              (line  67)
* isearch-lazy-highlight:                Search Customizations.
                                                              (line  42)
* isearch-mode-map:                      Special Isearch.     (line 106)
* isearch-motion-changes-direction:      Not Exiting Isearch. (line  72)
* isearch-repeat-on-direction-change:    Repeat Isearch.      (line  40)
* isearch-resume-in-command-history:     Repetition.          (line  39)
* isearch-wrap-pause:                    Repeat Isearch.      (line  53)
* ispell-complete-word-dict:             Spelling.            (line 160)
* ispell-dictionary:                     Spelling.            (line 148)
* ispell-local-dictionary:               Spelling.            (line 148)
* ispell-personal-dictionary:            Spelling.            (line 148)
* ispell-program-name:                   Spelling.            (line  13)
* jdb-mode-hook:                         GUD Customization.   (line   6)
* jit-lock-defer-time:                   Scrolling.           (line  87)
* kept-new-versions:                     Backup Deletion.     (line  11)
* kept-old-versions:                     Backup Deletion.     (line  11)
* keyboard-coding-system:                Terminal Coding.     (line  29)
* kill-buffer-delete-auto-save-files:    Auto Save Files.     (line  61)
* kill-buffer-hook:                      Kill Buffer.         (line  46)
* kill-do-not-save-duplicates:           Kill Options.        (line  27)
* kill-read-only-ok:                     Kill Options.        (line   6)
* kill-ring:                             Kill Ring.           (line  19)
* kill-ring-max:                         Kill Ring.           (line  14)
* kill-transform-function:               Kill Options.        (line  15)
* kill-whole-line:                       Killing by Lines.    (line  34)
* kmacro-ring-max:                       Keyboard Macro Ring. (line  53)
* LANG, environment variable:            General Variables.   (line  84)
* large-file-warning-threshold:          Visiting.            (line  62)
* latex-block-names:                     LaTeX Editing.       (line  21)
* latex-mode-hook:                       TeX Misc.            (line   6)
* latex-run-command:                     TeX Print.           (line  54)
* latin1-display:                        Undisplayable Characters.
                                                              (line  20)
* lazy-count-prefix-format:              Search Customizations.
                                                              (line  72)
* lazy-count-suffix-format:              Search Customizations.
                                                              (line  72)
* lazy-highlight-initial-delay:          Search Customizations.
                                                              (line  48)
* lazy-highlight-interval:               Search Customizations.
                                                              (line  57)
* lazy-highlight-max-at-a-time:          Search Customizations.
                                                              (line  60)
* lazy-highlight-no-delay-length:        Search Customizations.
                                                              (line  53)
* LC_ALL, environment variable:          General Variables.   (line  77)
* LC_COLLATE, environment variable:      General Variables.   (line  78)
* LC_CTYPE, environment variable:        General Variables.   (line  79)
* LC_MESSAGES, environment variable:     General Variables.   (line  80)
* LC_MONETARY, environment variable:     General Variables.   (line  81)
* LC_NUMERIC, environment variable:      General Variables.   (line  82)
* LC_TIME, environment variable:         General Variables.   (line  83)
* line-move-visual:                      Moving Point.        (line 144)
* line-number-display-limit:             Optional Mode Line.  (line  43)
* line-number-display-limit-width:       Optional Mode Line.  (line  49)
* lisp-body-indent:                      Lisp Indent.         (line  22)
* lisp-indent-offset:                    Lisp Indent.         (line  17)
* lisp-interaction-mode-hook:            Program Modes.       (line  47)
* lisp-mode-hook:                        Program Modes.       (line  47)
* list-colors-sort:                      Colors.              (line  14)
* list-directory-brief-switches:         Directories.         (line  40)
* list-directory-verbose-switches:       Directories.         (line  40)
* list-matching-lines-default-context-lines: Other Repeating Search.
                                                              (line  41)
* list-matching-lines-jump-to-current-line: Other Repeating Search.
                                                              (line  41)
* load-path:                             Lisp Libraries.      (line  55)
* load-prefer-newer:                     Lisp Libraries.      (line  27)
* locale-charset-language-names:         Language Environments.
                                                              (line  45)
* locale-coding-system:                  Communication Coding.
                                                              (line  58)
* locale-language-names:                 Language Environments.
                                                              (line  45)
* locale-preferred-coding-systems:       Language Environments.
                                                              (line  64)
* locate-command:                        Dired and Find.      (line  37)
* LOGNAME, environment variable:         General Variables.   (line 105)
* lpr-add-switches:                      Printing.            (line  42)
* lpr-command (MS-DOS):                  Windows Printing.    (line  78)
* lpr-commands:                          Printing.            (line  28)
* lpr-headers-switches:                  Printing.            (line  42)
* lpr-headers-switches (MS-DOS):         Windows Printing.    (line  66)
* lpr-printer-switch:                    Printing.            (line  36)
* lpr-switches:                          Printing.            (line  28)
* lpr-switches (MS-DOS):                 Windows Printing.    (line  78)
* ls-lisp-dirs-first:                    ls in Lisp.          (line  50)
* ls-lisp-emulation:                     ls in Lisp.          (line  66)
* ls-lisp-format-time-list:              ls in Lisp.          (line 101)
* ls-lisp-ignore-case:                   ls in Lisp.          (line  44)
* ls-lisp-support-shell-wildcards:       ls in Lisp.          (line  96)
* ls-lisp-UCA-like-collation:            ls in Lisp.          (line  36)
* ls-lisp-use-insert-directory-program:  ls in Lisp.          (line  22)
* ls-lisp-use-localized-time-format:     ls in Lisp.          (line 119)
* ls-lisp-use-string-collate:            ls in Lisp.          (line  32)
* ls-lisp-verbosity:                     ls in Lisp.          (line  55)
* magic-fallback-mode-alist:             Choosing Modes.      (line 117)
* magic-mode-alist:                      Choosing Modes.      (line  62)
* MAIL, environment variable:            General Variables.   (line 107)
* mail-citation-hook:                    Citing Mail.         (line  31)
* mail-default-headers:                  Mail Headers.        (line  88)
* mail-dont-reply-to-names:              Rmail Reply.         (line  37)
* mail-personal-alias-file:              Mail Aliases.        (line   6)
* mail-signature:                        Mail Signature.      (line  25)
* mail-signature-file:                   Mail Signature.      (line  25)
* mail-user-agent:                       Mail Methods.        (line  12)
* major-mode:                            Major Modes.         (line  39)
* major-mode-remap-alist:                Choosing Modes.      (line 125)
* make-backup-file-name-function:        Backup Names.        (line  48)
* make-backup-files:                     Backup.              (line   6)
* make-pointer-invisible:                Display Custom.      (line 103)
* Man-switches:                          Man Page.            (line  31)
* mark-even-if-inactive:                 Using Region.        (line  41)
* mark-ring-max:                         Mark Ring.           (line  41)
* max-mini-window-height:                Minibuffer Edit.     (line  50)
* maximum-scroll-margin:                 Auto Scrolling.      (line  57)
* menu-bar-mode:                         Menu Bars.           (line   6)
* message-kill-buffer-on-exit:           Mail Sending.        (line  13)
* message-log-max:                       Echo Area.           (line  34)
* message-mode-hook:                     Mail Misc.           (line  42)
* message-send-hook:                     Mail Sending.        (line  23)
* message-send-mail-function:            Mail Sending.        (line  28)
* message-setup-hook:                    Mail Misc.           (line  42)
* message-signature:                     Mail Signature.      (line   6)
* message-signature-file:                Mail Signature.      (line   6)
* MH, environment variable:              General Variables.   (line 109)
* midnight-hook:                         Kill Buffer.         (line  61)
* midnight-mode:                         Kill Buffer.         (line  61)
* minibuffer-completion-auto-choose:     Completion Commands. (line  40)
* minibuffer-default-prompt-format:      Basic Minibuffer.    (line  17)
* minibuffer-eldef-shorten-default:      Basic Minibuffer.    (line  24)
* minibuffer-follows-selected-frame:     Basic Minibuffer.    (line  38)
* minibuffer-local-completion-map:       Minibuffer Maps.     (line   6)
* minibuffer-local-filename-completion-map: Minibuffer Maps.  (line   6)
* minibuffer-local-map:                  Minibuffer Maps.     (line   6)
* minibuffer-local-must-match-map:       Minibuffer Maps.     (line   6)
* minibuffer-local-ns-map:               Minibuffer Maps.     (line   6)
* minibuffer-prompt-properties:          Standard Faces.      (line 148)
* mode-line-in-non-selected-windows:     Optional Mode Line.  (line 103)
* mode-require-final-newline:            Customize Save.      (line  16)
* mode-specific-map:                     Prefix Keymaps.      (line  38)
* mouse-1-click-follows-link:            Mouse References.    (line  29)
* mouse-1-click-in-non-selected-windows: Mouse References.    (line  38)
* mouse-autoselect-window:               Other Window.        (line  50)
* mouse-avoidance-mode:                  Mouse Avoidance.     (line  15)
* mouse-drag-and-drop-region:            Drag and Drop.       (line  29)
* mouse-drag-and-drop-region-cross-program: Drag and Drop.    (line  47)
* mouse-drag-and-drop-region-cut-when-buffers-differ: Drag and Drop.
                                                              (line  39)
* mouse-drag-and-drop-region-show-cursor: Drag and Drop.      (line  39)
* mouse-drag-and-drop-region-show-tooltip: Drag and Drop.     (line  39)
* mouse-drag-copy-region:                Mouse Commands.      (line  48)
* mouse-drag-mode-line-buffer:           Mouse Commands.      (line  65)
* mouse-highlight:                       Mouse References.    (line   6)
* mouse-scroll-min-lines:                Mouse Commands.      (line  58)
* mouse-wheel-flip-direction:            Mouse Commands.      (line 139)
* mouse-wheel-follow-mouse:              Mouse Commands.      (line 120)
* mouse-wheel-progressive-speed:         Mouse Commands.      (line 120)
* mouse-wheel-scroll-amount:             Mouse Commands.      (line 120)
* mouse-wheel-scroll-amount-horizontal:  Mouse Commands.      (line 134)
* mouse-wheel-tilt-scroll:               Mouse Commands.      (line 139)
* mouse-yank-at-point:                   Mouse Commands.      (line  77)
* NAME:                                  Misc Variables.      (line  14)
* NAME, environment variable:            General Variables.   (line 111)
* native-comp-eln-load-path:             Lisp Libraries.      (line  81)
* network-security-level:                Network Security.    (line  12)
* network-security-protocol-checks:      Network Security.    (line  27)
* next-error-find-buffer-function:       Compilation Mode.    (line  78)
* next-error-highlight:                  Compilation Mode.    (line  64)
* next-error-highlight-no-select:        Compilation Mode.    (line  64)
* next-error-message-highlight:          Compilation Mode.    (line  64)
* next-line-add-newlines:                Moving Point.        (line 166)
* next-screen-context-lines:             Scrolling.           (line  45)
* NNTPSERVER, environment variable:      General Variables.   (line 114)
* nobreak-char-display:                  Text Display.        (line  35)
* normal-erase-is-backspace:             DEL Does Not Delete. (line  43)
* nroff-mode-hook:                       Nroff Mode.          (line   6)
* ns-alternate-modifier:                 Mac / GNUstep Customization.
                                                              (line  17)
* ns-auto-hide-menu-bar:                 Mac / GNUstep Customization.
                                                              (line  59)
* ns-command-modifier:                   Mac / GNUstep Customization.
                                                              (line  21)
* ns-confirm-quit:                       Mac / GNUstep Customization.
                                                              (line  55)
* ns-control-modifier:                   Mac / GNUstep Customization.
                                                              (line  25)
* ns-function-modifier:                  Mac / GNUstep Customization.
                                                              (line  29)
* ns-mwheel-line-height:                 Mac / GNUstep Customization.
                                                              (line  88)
* ns-pop-up-frames:                      Mac / GNUstep Events.
                                                              (line  13)
* ns-right-alternate-modifier:           Mac / GNUstep Customization.
                                                              (line  17)
* ns-right-command-modifier:             Mac / GNUstep Customization.
                                                              (line  21)
* ns-right-control-modifier:             Mac / GNUstep Customization.
                                                              (line  25)
* ns-standard-fontset-spec:              Defining Fontsets.   (line   6)
* ns-use-mwheel-acceleration:            Mac / GNUstep Customization.
                                                              (line  74)
* ns-use-mwheel-momentum:                Mac / GNUstep Customization.
                                                              (line  81)
* ns-use-native-fullscreen:              Mac / GNUstep Customization.
                                                              (line  64)
* ns-use-proxy-icon:                     Mac / GNUstep Customization.
                                                              (line  51)
* nsm-save-host-names:                   Network Security.    (line 134)
* nsm-settings-file:                     Network Security.    (line 130)
* open-paren-in-column-0-is-defun-start: Left Margin Paren.   (line  12)
* org-agenda-files:                      Org Organizer.       (line  20)
* org-publish-project-alist:             Org Authoring.       (line  13)
* org-todo-keywords:                     Org Organizer.       (line   6)
* ORGANIZATION, environment variable:    General Variables.   (line 116)
* outline-default-state:                 Outline Visibility.  (line 101)
* outline-level:                         Outline Format.      (line  56)
* outline-minor-mode-cycle:              Outline Minor Mode.  (line  28)
* outline-minor-mode-prefix:             Outline Minor Mode.  (line  12)
* outline-minor-mode-use-buttons:        Outline Minor Mode.  (line  18)
* outline-mode-hook:                     Outline Mode.        (line   6)
* outline-regexp:                        Outline Format.      (line  37)
* overflow-newline-into-fringe:          Fringes.             (line  34)
* overline-margin:                       Display Custom.      (line 123)
* package-archive-priorities:            Package Installation.
                                                              (line  99)
* package-archives:                      Package Installation.
                                                              (line  49)
* package-check-signature:               Package Installation.
                                                              (line  78)
* package-directory-list:                Package Files.       (line  21)
* package-enable-at-startup:             Package Installation.
                                                              (line 123)
* package-install-upgrade-built-in:      Package Installation.
                                                              (line  14)
* package-load-list:                     Package Installation.
                                                              (line 144)
* package-menu-async:                    Package Menu.        (line  84)
* package-menu-hide-low-priority:        Package Installation.
                                                              (line  99)
* package-pinned-packages:               Package Installation.
                                                              (line  93)
* package-quickstart:                    Package Installation.
                                                              (line 129)
* package-unsigned-archives:             Package Installation.
                                                              (line  78)
* package-user-dir:                      Package Files.       (line  15)
* page-delimiter:                        Pages.               (line  61)
* paragraph-separate:                    Paragraphs.          (line  49)
* paragraph-start:                       Paragraphs.          (line  49)
* PATH, environment variable:            General Variables.   (line 119)
* pdb-mode-hook:                         GUD Customization.   (line   6)
* perldb-mode-hook:                      GUD Customization.   (line   6)
* picture-mode-hook:                     Picture Mode.        (line  40)
* picture-tab-chars:                     Tabs in Picture.     (line   6)
* plain-tex-mode-hook:                   TeX Misc.            (line   6)
* PRELOAD_WINSOCK:                       Misc Variables.      (line  41)
* print-region-function (MS-DOS):        Windows Printing.    (line  78)
* printer-name:                          Printing.            (line  36)
* printer-name, (MS-DOS/MS-Windows):     Windows Printing.    (line  19)
* prog-mode-hook:                        Major Modes.         (line  71)
* project-kill-buffer-conditions:        Project Buffer Commands.
                                                              (line  28)
* project-kill-buffers-display-buffer-list: Project Buffer Commands.
                                                              (line  28)
* project-list-file:                     Switching Projects.  (line  20)
* project-prefix-map:                    Prefix Keymaps.      (line  39)
* project-switch-commands:               Switching Projects.  (line  10)
* ps-black-white-faces:                  PostScript Variables.
                                                              (line  24)
* ps-font-family:                        PostScript Variables.
                                                              (line  47)
* ps-font-info-database:                 PostScript Variables.
                                                              (line  47)
* ps-font-size:                          PostScript Variables.
                                                              (line  47)
* ps-landscape-mode:                     PostScript Variables.
                                                              (line  40)
* ps-lpr-command:                        PostScript Variables.
                                                              (line   6)
* ps-lpr-command (MS-DOS):               Windows Printing.    (line  86)
* ps-lpr-switches:                       PostScript Variables.
                                                              (line   6)
* ps-lpr-switches (MS-DOS):              Windows Printing.    (line  86)
* ps-multibyte-buffer:                   PostScript Variables.
                                                              (line  54)
* ps-number-of-columns:                  PostScript Variables.
                                                              (line  44)
* ps-page-dimensions-database:           PostScript Variables.
                                                              (line  34)
* ps-paper-type:                         PostScript Variables.
                                                              (line  34)
* ps-print-color-p:                      PostScript Variables.
                                                              (line  17)
* ps-print-header:                       PostScript Variables.
                                                              (line  14)
* ps-printer-name:                       PostScript Variables.
                                                              (line   6)
* ps-printer-name (MS-DOS):              Windows Printing.    (line  86)
* ps-use-face-background:                PostScript Variables.
                                                              (line  29)
* PWD, environment variable:             General Variables.   (line 123)
* quail-activate-hook:                   Input Methods.       (line 103)
* query-about-changed-file:              Visiting.            (line  93)
* query-replace-from-to-separator:       Query Replace.       (line  25)
* query-replace-highlight:               Query Replace.       (line  34)
* query-replace-highlight-submatches:    Query Replace.       (line  34)
* query-replace-lazy-highlight:          Query Replace.       (line  34)
* query-replace-show-replacement:        Query Replace.       (line  34)
* query-replace-skip-read-only:          Query Replace.       (line  49)
* read-buffer-completion-ignore-case:    Completion Options.  (line  11)
* read-extended-command-predicate:       M-x.                 (line  44)
* read-file-name-completion-ignore-case: Completion Options.  (line  11)
* read-mail-command:                     Mail Methods.        (line  29)
* read-quoted-char-radix:                Inserting Text.      (line  55)
* recenter-positions:                    Recentering.         (line  33)
* recenter-redisplay:                    Recentering.         (line  52)
* recentf-mode:                          File Conveniences.   (line   9)
* redisplay-skip-fontification-on-input: Scrolling.           (line  95)
* regexp-search-ring-max:                Regexp Search.       (line  28)
* register-preview-delay:                Registers.           (line  28)
* register-separator:                    Text Registers.      (line  41)
* remote-file-name-inhibit-locks:        Interlocking.        (line  72)
* repeat-exit-key:                       Repeating.           (line  27)
* repeat-exit-timeout:                   Repeating.           (line  27)
* replace-lax-whitespace:                Replacement and Lax Matches.
                                                              (line  11)
* replace-regexp-lax-whitespace:         Replacement and Lax Matches.
                                                              (line  17)
* REPLYTO, environment variable:         General Variables.   (line 126)
* require-final-newline:                 Customize Save.      (line   6)
* resize-mini-windows:                   Minibuffer Edit.     (line  39)
* revert-buffer-quick-short-answers:     Reverting.           (line  49)
* revert-buffer-with-fine-grain-max-seconds: Reverting.       (line  23)
* revert-without-query:                  Reverting.           (line  39)
* rmail-automatic-folder-directives:     Rmail Output.        (line  89)
* rmail-delete-after-output:             Rmail Output.        (line  60)
* rmail-delete-message-hook:             Rmail Deletion.      (line  36)
* rmail-displayed-headers:               Rmail Display.       (line  21)
* rmail-edit-mode-hook:                  Rmail Editing.       (line  26)
* rmail-enable-mime:                     Rmail Display.       (line  38)
* rmail-enable-mime-composing:           Rmail Reply.         (line  77)
* rmail-file-coding-system:              Rmail Coding.        (line  32)
* rmail-file-name:                       Rmail Basics.        (line   6)
* rmail-highlighted-headers:             Rmail Display.       (line  30)
* rmail-ignored-headers:                 Rmail Display.       (line  21)
* rmail-inbox-list:                      Rmail Files.         (line  43)
* rmail-mail-new-frame:                  Rmail Reply.         (line 108)
* rmail-mbox-format:                     Rmail Inbox.         (line  41)
* rmail-mime-prefer-html:                Rmail Display.       (line  73)
* rmail-mode-hook:                       Rmail.               (line   6)
* rmail-movemail-flags:                  Remote Mailboxes.    (line  57)
* rmail-movemail-program:                Movemail.            (line  97)
* rmail-movemail-search-path:            Movemail.            (line  97)
* rmail-nonignored-headers:              Rmail Display.       (line  21)
* rmail-output-file-alist:               Rmail Output.        (line  75)
* rmail-output-reset-deleted-flag:       Rmail Output.        (line  65)
* rmail-preserve-inbox:                  Rmail Inbox.         (line  48)
* rmail-primary-inbox-list:              Rmail Inbox.         (line  14)
* rmail-redisplay-summary:               Rmail Summary Edit.  (line  88)
* rmail-remote-password:                 Remote Mailboxes.    (line  39)
* rmail-remote-password-required:        Remote Mailboxes.    (line  39)
* rmail-retry-ignored-headers:           Rmail Reply.         (line  57)
* rmail-secondary-file-directory:        Rmail Files.         (line  33)
* rmail-secondary-file-regexp:           Rmail Files.         (line  33)
* rmail-summary-line-count-flag:         Rmail Make Summary.  (line  62)
* rmail-summary-scroll-between-messages: Rmail Summary Edit.  (line  16)
* rmail-summary-window-size:             Rmail Make Summary.  (line  62)
* safe-local-eval-forms:                 Safe File Variables. (line  54)
* safe-local-variable-values:            Safe File Variables. (line  31)
* save-abbrevs:                          Saving Abbrevs.      (line  40)
* save-interprogram-paste-before-kill:   Clipboard.           (line  14)
* save-some-buffers-default-predicate:   Save Commands.       (line  71)
* SAVEDIR, environment variable:         General Variables.   (line 129)
* scheme-mode-hook:                      Program Modes.       (line  47)
* script-representative-chars:           Modifying Fontsets.  (line  54)
* scroll-all-mode:                       Window Convenience.  (line  46)
* scroll-bar-adjust-thumb-portion:       Scroll Bars.         (line  40)
* scroll-bar-height:                     Scroll Bars.         (line  89)
* scroll-bar-mode:                       Scroll Bars.         (line  26)
* scroll-bar-width:                      Scroll Bars.         (line  35)
* scroll-conservatively:                 Auto Scrolling.      (line  11)
* scroll-down:                           Scrolling.           (line 102)
* scroll-down-aggressively:              Auto Scrolling.      (line  32)
* scroll-error-top-bottom:               Scrolling.           (line  52)
* scroll-margin:                         Auto Scrolling.      (line  57)
* scroll-minibuffer-conservatively:      Auto Scrolling.      (line  11)
* scroll-preserve-screen-position:       Scrolling.           (line  59)
* scroll-step:                           Auto Scrolling.      (line  25)
* scroll-up:                             Scrolling.           (line 102)
* scroll-up-aggressively:                Auto Scrolling.      (line  32)
* sdb-mode-hook:                         GUD Customization.   (line   6)
* search-exit-option:                    Not Exiting Isearch. (line  12)
* search-highlight:                      Search Customizations.
                                                              (line  19)
* search-highlight-submatches:           Search Customizations.
                                                              (line  23)
* search-invisible:                      Outline Visibility.  (line  91)
* search-nonincremental-instead:         Search Customizations.
                                                              (line  75)
* search-ring-max:                       Repeat Isearch.      (line  62)
* search-slow-speed:                     Search Customizations.
                                                              (line  89)
* search-slow-window-lines:              Search Customizations.
                                                              (line  89)
* search-upper-case:                     Lax Search.          (line  43)
* search-whitespace-regexp:              Lax Search.          (line  15)
* select-active-regions:                 Primary Selection.   (line  21)
* select-enable-clipboard:               Clipboard.           (line  32)
* select-enable-primary:                 Clipboard.           (line  55)
* selective-display-ellipses:            Selective Display.   (line  27)
* send-mail-function:                    Mail Sending.        (line  28)
* sendmail-coding-system:                Output Coding.       (line  40)
* sentence-end:                          Sentences.           (line  58)
* sentence-end-double-space:             Sentences.           (line  49)
* sentence-end-without-period:           Sentences.           (line  65)
* server-auth-dir:                       TCP Emacs server.    (line  32)
* server-auth-key:                       TCP Emacs server.    (line  20)
* server-client-instructions:            Invoking emacsclient.
                                                              (line  69)
* server-host:                           TCP Emacs server.    (line  15)
* server-kill-new-buffers:               Invoking emacsclient.
                                                              (line  51)
* server-name:                           Emacs Server.        (line  72)
* server-port:                           TCP Emacs server.    (line  15)
* server-temp-file-regexp:               Invoking emacsclient.
                                                              (line  51)
* server-use-tcp:                        TCP Emacs server.    (line   6)
* server-window:                         Invoking emacsclient.
                                                              (line  65)
* set-language-environment-hook:         Language Environments.
                                                              (line  85)
* set-mark-command-repeat-pop:           Mark Ring.           (line  32)
* sgml-xml-mode:                         HTML Mode.           (line  86)
* SHELL, environment variable:           General Variables.   (line 132)
* shell-cd-regexp:                       Directory Tracking.  (line   6)
* shell-command-buffer-name:             Single Shell.        (line   6)
* shell-command-buffer-name-async:       Single Shell.        (line  39)
* shell-command-default-error-buffer:    Single Shell.        (line  93)
* shell-command-dont-erase-buffer:       Single Shell.        (line  98)
* shell-command-prompt-show-cwd:         Single Shell.        (line  65)
* shell-command-regexp:                  Shell Mode.          (line 103)
* shell-completion-execonly:             Shell Options.       (line  43)
* shell-completion-fignore:              Shell Options.       (line  47)
* shell-file-name:                       Single Shell.        (line  80)
* shell-popd-regexp:                     Directory Tracking.  (line   6)
* shell-prompt-pattern:                  Shell Prompts.       (line  21)
* shell-pushd-regexp:                    Directory Tracking.  (line   6)
* shift-select-mode:                     Shift Selection.     (line  32)
* show-paren-context-when-offscreen:     Matching.            (line  70)
* show-paren-highlight-openparen:        Matching.            (line  49)
* show-paren-predicate:                  Matching.            (line  41)
* show-paren-style:                      Matching.            (line  53)
* show-paren-when-point-in-periphery:    Matching.            (line  64)
* show-paren-when-point-inside-paren:    Matching.            (line  60)
* show-trailing-whitespace:              Useless Whitespace.  (line   6)
* slitex-mode-hook:                      TeX Misc.            (line   6)
* small-temporary-file-directory:        Backup.              (line  31)
* SMTPSERVER, environment variable:      General Variables.   (line 136)
* sort-fold-case:                        Sorting.             (line 116)
* sort-numeric-base:                     Sorting.             (line  23)
* split-height-threshold:                Window Choice.       (line  53)
* split-width-threshold:                 Window Choice.       (line  53)
* split-window-keep-point:               Split Window.        (line  25)
* standard-fontset-spec:                 Defining Fontsets.   (line   6)
* standard-indent:                       Enriched Indentation.
                                                              (line  28)
* suggest-key-bindings:                  M-x.                 (line  68)
* system-uses-terminfo:                  Shell Options.       (line  64)
* tab-always-indent:                     Indent Convenience.  (line   6)
* tab-bar-close-last-tab-choice:         Tab Bars.            (line 103)
* tab-bar-close-tab-select:              Tab Bars.            (line 112)
* tab-bar-new-tab-choice:                Tab Bars.            (line  94)
* tab-bar-new-tab-to:                    Tab Bars.            (line  98)
* tab-bar-select-tab-modifiers:          Tab Bars.            (line 139)
* tab-bar-show:                          Tab Bars.            (line  38)
* tab-bar-tab-hints:                     Tab Bars.            (line 139)
* tab-bar-tab-name-function:             Tab Bars.            (line  69)
* tab-first-completion:                  Indent Convenience.  (line  15)
* tab-stop-list:                         Tab Stops.           (line   6)
* tab-width:                             Text Display.        (line  11)
* table-cell-horizontal-chars:           Table Definition.    (line  17)
* table-cell-intersection-char:          Table Definition.    (line  20)
* table-cell-vertical-char:              Table Definition.    (line  14)
* table-detect-cell-alignment:           Cell Justification.  (line  24)
* tags-apropos-additional-actions:       Looking Up Identifiers.
                                                              (line  51)
* tags-case-fold-search:                 Identifier Search.   (line  89)
* tags-file-name:                        Select Tags Table.   (line  13)
* tags-table-list:                       Select Tags Table.   (line  35)
* TEMP, environment variable:            General Variables.   (line 149)
* temp-buffer-max-height:                Temporary Displays.  (line  36)
* temp-buffer-max-width:                 Temporary Displays.  (line  36)
* temporary-file-directory:              Backup.              (line  31)
* TERM, environment variable:            General Variables.   (line 139)
* TERM, environment variable, and display bugs: Checklist.    (line 154)
* TERM, environment variable, in compilation mode: Compilation Shell.
                                                              (line  29)
* TERM, environment variable, in sub-shell: Shell Options.    (line  64)
* term-file-aliases:                     Terminal Init.       (line   6)
* term-file-prefix:                      Terminal Init.       (line  29)
* TERMCAP, environment variable:         General Variables.   (line 144)
* tex-bibtex-command:                    TeX Print.           (line 138)
* tex-default-mode:                      TeX Mode.            (line  12)
* tex-directory:                         TeX Print.           (line  46)
* tex-dvi-print-command:                 TeX Print.           (line  54)
* tex-dvi-view-command:                  TeX Print.           (line  54)
* tex-main-file:                         TeX Print.           (line 129)
* tex-mode-hook:                         TeX Misc.            (line   6)
* tex-print-file-extension:              TeX Print.           (line  54)
* tex-run-command:                       TeX Print.           (line  54)
* tex-shell-hook:                        TeX Misc.            (line   6)
* tex-start-commands:                    TeX Print.           (line 125)
* tex-start-options:                     TeX Print.           (line 122)
* text-mode-hook:                        Text Mode.           (line  42)
* timeclock-ask-before-exiting:          Time Intervals.      (line  27)
* timeclock-file:                        Time Intervals.      (line  34)
* timeclock-mode-line-display:           Time Intervals.      (line  22)
* TMP, environment variable:             General Variables.   (line 148)
* TMPDIR, environment variable:          General Variables.   (line 147)
* tool-bar-mode:                         Tool Bars.           (line  14)
* tool-bar-style:                        Tool Bars.           (line  19)
* tooltip-delay:                         Tooltips.            (line  20)
* tooltip-frame-parameters:              Tooltips.            (line  43)
* tooltip-hide-delay:                    Tooltips.            (line  29)
* tooltip-short-delay:                   Tooltips.            (line  24)
* tooltip-x-offset:                      Tooltips.            (line  33)
* tooltip-y-offset:                      Tooltips.            (line  34)
* track-eol:                             Moving Point.        (line 161)
* tramp-histfile-override:               Shell Ring.          (line  86)
* treesit-defun-tactic:                  Moving by Defuns.    (line  53)
* treesit-font-lock-feature-list:        Parser-based Font Lock.
                                                              (line  33)
* treesit-font-lock-level:               Parser-based Font Lock.
                                                              (line  16)
* treesit-max-buffer-size:               Visiting.            (line  74)
* truncate-lines:                        Line Truncation.     (line  14)
* truncate-partial-width-windows:        Split Window.        (line  39)
* tty-menu-open-use-tmm:                 Menu Bar.            (line  32)
* tty-setup-hook:                        Terminal Init.       (line  34)
* TZ, environment variable:              General Variables.   (line 156)
* underline-minimum-offset:              Display Custom.      (line 110)
* undo-limit:                            Undo.                (line  68)
* undo-outer-limit:                      Undo.                (line  68)
* undo-strong-limit:                     Undo.                (line  68)
* unibyte-display-via-language-environment: Unibyte Mode.     (line  18)
* uniquify-buffer-name-style:            Uniquify.            (line  14)
* use-dialog-box:                        Dialog Boxes.        (line   6)
* use-file-dialog:                       Dialog Boxes.        (line  17)
* use-system-tooltips:                   Tooltips.            (line  50)
* USER, environment variable:            General Variables.   (line 162)
* user-full-name:                        Mail Headers.        (line  14)
* user-mail-address:                     Mail Headers.        (line  14)
* user-mail-address, in init file:       Init Examples.       (line  34)
* user-mail-address, initialization:     General Variables.   (line  45)
* vc-annotate-background-mode:           Old Revisions.       (line  84)
* vc-annotate-switches:                  Old Revisions.       (line  95)
* vc-BACKEND-header:                     Version Headers.     (line  20)
* vc-command-messages:                   General VC Options.  (line  24)
* vc-consult-headers:                    Version Headers.     (line  12)
* vc-cvs-global-switches:                CVS Options.         (line   6)
* vc-cvs-stay-local:                     CVS Options.         (line  11)
* vc-default-patch-addressee:            Preparing Patches.   (line  23)
* vc-diff-switches:                      Old Revisions.       (line  67)
* vc-directory-exclusion-list:           VC Directory Buffer. (line  47)
* vc-directory-exclusion-list <1>:       Project File Commands.
                                                              (line  50)
* vc-follow-symlinks:                    General VC Options.  (line  11)
* vc-handled-backends:                   Customizing VC.      (line   6)
* vc-log-mode-hook:                      Log Buffer.          (line  12)
* vc-log-show-limit:                     VC Change Log.       (line 130)
* vc-make-backup-files:                  General VC Options.  (line   6)
* vc-prepare-patches-separately:         Preparing Patches.   (line  17)
* vc-revert-show-diff:                   VC Undo.             (line  10)
* vc-static-header-alist:                Version Headers.     (line  31)
* vc-suppress-confirm:                   General VC Options.  (line  20)
* version-control:                       Backup Names.        (line  21)
* VERSION_CONTROL, environment variable: General Variables.   (line 165)
* view-read-only:                        Misc Buffer.         (line  24)
* visible-bell:                          Display Custom.      (line  86)
* visible-cursor:                        Cursor Display.      (line   6)
* visual-order-cursor-movement:          Bidirectional Editing.
                                                              (line  93)
* w32-alt-is-meta:                       Windows Keyboard.    (line  18)
* w32-apps-modifier:                     Windows Keyboard.    (line  88)
* w32-capslock-is-shiftlock:             Windows Keyboard.    (line  73)
* w32-charset-info-alist:                Windows Fonts.       (line  81)
* w32-enable-caps-lock:                  Windows Keyboard.    (line  79)
* w32-enable-num-lock:                   Windows Keyboard.    (line  83)
* w32-fixed-font-alist:                  Windows Fonts.       (line 139)
* w32-get-true-file-attributes:          Windows Files.       (line  16)
* w32-grab-focus-on-raise:               Windows Misc.        (line  18)
* w32-lwindow-modifier:                  Windows Keyboard.    (line  94)
* w32-mouse-button-tolerance:            Windows Mouse.       (line   9)
* w32-non-USB-fonts:                     Windows Fonts.       (line 129)
* w32-pass-alt-to-system:                Windows Keyboard.    (line 108)
* w32-pass-extra-mouse-buttons-to-system: Windows Mouse.      (line  15)
* w32-pass-lwindow-to-system:            Windows Keyboard.    (line 119)
* w32-pass-rwindow-to-system:            Windows Keyboard.    (line 119)
* w32-pipe-buffer-size:                  Windows Processes.   (line  57)
* w32-pipe-read-delay:                   Windows Processes.   (line  65)
* w32-quote-process-args:                Windows Processes.   (line  51)
* w32-recognize-altgr:                   Windows Keyboard.    (line 127)
* w32-rwindow-modifier:                  Windows Keyboard.    (line  94)
* w32-scroll-lock-modifier:              Windows Keyboard.    (line  94)
* w32-standard-fontset-spec:             Defining Fontsets.   (line   6)
* w32-swap-mouse-buttons:                Windows Mouse.       (line  18)
* w32-unicode-filenames:                 File Name Coding.    (line  25)
* w32-use-visible-system-caret:          Windows Misc.        (line   9)
* w32-use-w32-font-dialog:               Windows Fonts.       (line 139)
* WAYLAND_DISPLAY:                       Misc Variables.      (line  46)
* what-cursor-show-names:                Position Info.       (line  71)
* which-func-modes:                      Which Function.      (line  10)
* whitespace-big-indent-regexp:          Useless Whitespace.  (line  77)
* whitespace-line-column:                Useless Whitespace.  (line  63)
* whitespace-style:                      Useless Whitespace.  (line  37)
* window-divider-default-bottom-width:   Window Dividers.     (line  19)
* window-divider-default-places:         Window Dividers.     (line  13)
* window-divider-default-right-width:    Window Dividers.     (line  19)
* window-min-height:                     Change Window.       (line  51)
* window-min-width:                      Change Window.       (line  62)
* window-resize-pixelwise:               Split Window.        (line  65)
* winner-boring-buffers:                 Window Convenience.  (line   6)
* winner-boring-buffers-regexp:          Window Convenience.  (line   6)
* winner-dont-bind-my-keys:              Window Convenience.  (line   6)
* winner-ring-size:                      Window Convenience.  (line   6)
* word-wrap-by-category:                 Visual Line Mode.    (line  55)
* word-wrap-whitespace-mode:             Visual Line Mode.    (line  46)
* write-region-inhibit-fsync:            Customize Save.      (line  31)
* x-gtk-file-dialog-help-text:           Dialog Boxes.        (line  23)
* x-gtk-show-hidden-files:               Dialog Boxes.        (line  23)
* x-gtk-use-native-input:                Unibyte Mode.        (line  73)
* x-input-coding-system:                 X Coding.            (line  14)
* x-mouse-click-focus-ignore-position:   Mouse Commands.      (line  34)
* x-select-enable-clipboard-manager:     Clipboard.           (line  42)
* x-select-request-type:                 Communication Coding.
                                                              (line  31)
* x-stretch-cursor:                      Cursor Display.      (line  43)
* x-underline-at-descent-line:           Display Custom.      (line 110)
* xdb-mode-hook:                         GUD Customization.   (line   6)
* xref-auto-jump-to-first-definition:    Looking Up Identifiers.
                                                              (line  60)
* xref-auto-jump-to-first-xref:          Identifier Search.   (line  46)
* xref-prompt-for-identifier:            Looking Up Identifiers.
                                                              (line  31)
* yank-pop-change-selection:             Clipboard.           (line  28)


File: emacs.info,  Node: Concept Index,  Prev: Variable Index,  Up: Top

# /. Concept Index
*****************

 [index ]
* Menu:

* #, in auto-save file names:            Auto Save Files.    (line   12)
* $ in file names:                       File Names.         (line   53)
* ( in leftmost column:                  Left Margin Paren.  (line    6)
* *Messages* buffer:                     Echo Area.          (line   34)
* –/—/.-./.../.:                         Amusements.         (line   45)
* .#, lock file names:                   Interlocking.       (line   18)
* .dir-locals.el file:                   Directory Variables.
                                                             (line   15)
* .emacs file:                           Init File.          (line    6)
* .mailrc file:                          Mail Aliases.       (line    6)
* .newsrc file:                          Gnus Startup.       (line    6)
* // in file name:                       Minibuffer File.    (line   34)
* 7z:                                    File Archives.      (line   45)
* 8-bit display:                         Unibyte Mode.       (line   35)
* 8-bit input:                           Unibyte Mode.       (line   42)
* ? in display:                          International Chars.
                                                             (line   18)
* _emacs init file, MS-Windows:          Windows HOME.       (line   43)
* ~, in names of backup files:           Backup Names.       (line    6)
* ~/.authinfo file:                      Authentication.     (line   12)
* ~/.authinfo.gpg file:                  Authentication.     (line   12)
* ~/.config/emacs/init.el file:          Init File.          (line    6)
* ~/.emacs file:                         Init File.          (line    6)
* ~/.emacs.d/%backup%~:                  Backup Names.       (line   10)
* ~/.emacs.d/gtkrc file:                 GTK resources.      (line    6)
* ~/.gtkrc-2.0 file:                     GTK resources.      (line    6)
* ~/.netrc file:                         Authentication.     (line   12)
* ~/.Xdefaults file:                     Resources.          (line    6)
* ~/.Xresources file:                    Resources.          (line    6)
* A and B buffers (Emerge):              Overview of Emerge. (line   21)
* A-:                                    Modifier Keys.      (line   26)
* abbrev file:                           Saving Abbrevs.     (line   27)
* Abbrev mode:                           Abbrev Concepts.    (line   12)
* abbrevs:                               Abbrevs.            (line    6)
* abnormal hook:                         Hooks.              (line   19)
* aborting recursive edit:               Quitting.           (line   73)
* accented characters:                   Unibyte Mode.       (line    6)
* accessible portion:                    Narrowing.          (line    6)
* accumulating scattered text:           Accumulating Text.  (line    6)
* action options (command line):         Emacs Invocation.   (line   40)
* activating the mark:                   Mark.               (line   12)
* active region:                         Mark.               (line   12)
* active text:                           Help Echo.          (line    6)
* adaptive filling:                      Adaptive Fill.      (line    6)
* adding to the kill ring in Dired:      Misc Dired Features.
                                                             (line   29)
* addpm, MS-Windows installation program: MS-Windows Registry.
                                                             (line    6)
* adjust buffer font size:               Text Scale.         (line    6)
* adjust global font size:               Text Scale.         (line   35)
* aggressive scrolling:                  Auto Scrolling.     (line   32)
* alarm clock:                           Appointments.       (line   59)
* alignment for comments:                Comment Commands.   (line    6)
* Alt key (MS-Windows):                  Windows Keyboard.   (line   18)
* Alt key invokes menu (Windows):        Windows Keyboard.   (line  108)
* Alt key, serving as Meta:              User Input.         (line   17)
* Alt, modifier key:                     Modifier Keys.      (line   26)
* <Alt>-<TAB> vs M-<TAB> (MS-Windows):   Windows Keyboard.   (line   47)
* ALTERNATE_EDITOR environment variable: emacsclient Options.
                                                             (line   29)
* <AltGr> key (MS-Windows):              Windows Keyboard.   (line  127)
* ange-ftp:                              Remote Files.       (line   30)
* animate:                               Amusements.         (line    6)
* animated images:                       Image Mode.         (line   51)
* anonymous FTP:                         Remote Files.       (line   49)
* appending kills in the ring:           Appending Kills.    (line    6)
* appointment notification:              Appointments.       (line    6)
* apropos:                               Apropos.            (line    6)
* apropos search results, order by score: Apropos.           (line   93)
* Arabic:                                Language Environments.
                                                             (line   28)
* arc:                                   File Archives.      (line   45)
* Archive mode:                          File Archives.      (line   45)
* arguments (command line):              Emacs Invocation.   (line    6)
* arguments to commands:                 Arguments.          (line    6)
* arrow keys:                            Moving Point.       (line    6)
* ASCII:                                 User Input.         (line    6)
* ASCII (language environment):          Language Environments.
                                                             (line   28)
* ASCII art:                             Text.               (line   31)
* Asm mode:                              Asm Mode.           (line    6)
* assembler mode:                        Asm Mode.           (line    6)
* astronomical day numbers:              Calendar Systems.   (line   12)
* at-point documentation for program symbols: Programming Language Doc.
                                                             (line   11)
* attached frame (of speedbar):          Speedbar.           (line    6)
* attribute (Rmail):                     Rmail Labels.       (line    6)
* attributes of mode line, changing:     Optional Mode Line. (line   90)
* Auto Compression mode:                 Compressed Files.   (line    6)
* Auto Fill mode:                        Auto Fill.          (line    6)
* Auto Revert mode:                      Auto Revert.        (line    6)
* Auto Save mode:                        Auto Save.          (line    6)
* auto-save for remote files:            Auto Save Files.    (line   26)
* autoload:                              Lisp Libraries.     (line   85)
* autoload Lisp libraries:               Init Examples.      (line   86)
* automatic scrolling:                   Auto Scrolling.     (line    6)
* automatic typing:                      Text.               (line   35)
* automatic version backups:             CVS Options.        (line   28)
* autotyping:                            Text.               (line   35)
* avoiding mouse in the way of your typing: Mouse Avoidance. (line    6)
* Awk mode:                              Program Modes.      (line   15)
* AWK mode:                              C Modes.            (line    6)
* back end (version control):            Version Control Systems.
                                                             (line    6)
* back reference, in regexp:             Regexp Backslash.   (line   54)
* back reference, in regexp replacement: Regexp Replace.     (line   13)
* background color:                      Faces.              (line   31)
* background color, command-line argument: Colors X.         (line   16)
* background for menus (X resource):     Table of Resources. (line   90)
* background mode, on xterm:             General Variables.  (line  137)
* background syntax highlighting:        Font Lock.          (line   37)
* <BACKSPACE> vs <DEL>:                  DEL Does Not Delete.
                                                             (line    6)
* backtrace:                             Crashing.           (line    6)
* backtrace for bug reports:             Checklist.          (line  336)
* backup file:                           Backup.             (line    6)
* backup file names:                     Backup Names.       (line    6)
* backup file names on MS-DOS:           MS-DOS File Names.  (line   20)
* backup files, choosing a major mode:   Choosing Modes.     (line  101)
* backup, and user-id:                   Backup Copying.     (line   20)
* backups for remote files:              Remote Files.       (line   41)
* Bahá’í calendar:                       Calendar Systems.   (line   66)
* balanced expression:                   Expressions.        (line    6)
* balloon help:                          Help Echo.          (line    6)
* base buffer:                           Indirect Buffers.   (line    6)
* base direction of paragraphs:          Bidirectional Editing.
                                                             (line   37)
* basic, completion style:               Completion Styles.  (line   27)
* batch mode:                            Initial Options.    (line   42)
* battery status (on mode line):         Optional Mode Line. (line   80)
* Bazaar:                                Version Control Systems.
                                                             (line   47)
* Belarusian:                            Language Environments.
                                                             (line   28)
* Bengali:                               Language Environments.
                                                             (line   28)
* bidi formatting control characters:    Bidirectional Editing.
                                                             (line  100)
* bidirectional editing:                 Bidirectional Editing.
                                                             (line    6)
* binding:                               Commands.           (line    6)
* binding keyboard macros:               Save Keyboard Macro.
                                                             (line   26)
* binding keys:                          Rebinding.          (line    6)
* blank lines:                           Blank Lines.        (line   15)
* blank lines in programs:               Multi-Line Comments.
                                                             (line    6)
* blinking cursor:                       Cursor Display.     (line   25)
* blinking cursor disable, command-line argument: Misc X.    (line   21)
* body lines (Outline mode):             Outline Format.     (line    6)
* bookmark annotations:                  Bookmarks.          (line   65)
* bookmarks:                             Bookmarks.          (line    6)
* border color, command-line argument:   Colors X.           (line   20)
* borders (X Window System):             Borders X.          (line    6)
* boredom:                               Amusements.         (line    6)
* bound branch (Bazaar VCS):             Pulling / Pushing.  (line   30)
* brace in column zero and fontification: Traditional Font Lock.
                                                             (line   28)
* braces, moving across:                 Moving by Parens.   (line    6)
* branch (version control):              Branches.           (line    6)
* Brazilian Portuguese:                  Language Environments.
                                                             (line   28)
* Browse-URL:                            Browse-URL.         (line    6)
* bubbles:                               Amusements.         (line   16)
* buffer contents:                       Buffers.            (line   34)
* buffer definitions index:              Imenu.              (line    6)
* buffer list, customizable:             Buffer Menus.       (line    6)
* Buffer Menu:                           Several Buffers.    (line    6)
* buffer size display:                   Optional Mode Line. (line    6)
* buffer size, maximum:                  Buffers.            (line   45)
* buffer text garbled:                   Text Garbled.       (line    6)
* buffer-local hooks:                    Hooks.              (line   89)
* buffers:                               Buffers.            (line    6)
* bug criteria:                          Bug Criteria.       (line    6)
* bug reference:                         Bug Reference.      (line    6)
* bug reporting, checklist:              Checklist.          (line    6)
* bug reporting, principles:             Understanding Bug Reporting.
                                                             (line    6)
* bug tracker:                           Known Problems.     (line   18)
* bugs:                                  Bugs.               (line    6)
* build details:                         Initial Options.    (line  100)
* building programs:                     Building.           (line    6)
* built-in package:                      Package Menu.       (line    6)
* built-in package <1>:                  Package Statuses.   (line   16)
* Bulgarian:                             Language Environments.
                                                             (line   28)
* Burmese:                               Language Environments.
                                                             (line   29)
* butterfly:                             Amusements.         (line   59)
* button-down events:                    Mouse Buttons.      (line    6)
* buttons:                               Mouse References.   (line    6)
* buttons (customization buffer):        Customization Groups.
                                                             (line   38)
* buttons at buffer position:            Editing Format Info.
                                                             (line   20)
* bypassing init and default.el file:    Initial Options.    (line  107)
* byte code:                             Lisp Libraries.     (line    9)
* byte-compiling several files (in Dired): Operating on Files.
                                                             (line  212)
* bzr:                                   Version Control Systems.
                                                             (line   47)
* C editing:                             Programs.           (line    6)
* C mode:                                C Modes.            (line    6)
* C# mode:                               Program Modes.      (line   15)
* C++ class browser, tags:               Tags Tables.        (line   26)
* C++ mode:                              C Modes.            (line    6)
* C-:                                    User Input.         (line   17)
* cache of file names:                   File Name Cache.    (line    6)
* calendar:                              Calendar/Diary.     (line    6)
* calendar and HTML:                     Writing Calendar Files.
                                                             (line    8)
* calendar and LaTeX:                    Writing Calendar Files.
                                                             (line   37)
* calendar layout:                       Calendar Customizing.
                                                             (line    6)
* calendar week numbers:                 Calendar Customizing.
                                                             (line    6)
* calendar, first day of week:           Move to Beginning or End.
                                                             (line   27)
* call Lisp functions, command-line argument: Action Arguments.
                                                             (line   58)
* camel case:                            MixedCase Words.    (line    6)
* candle lighting times:                 Sexp Diary Entries. (line  162)
* capitalizing words:                    Case.               (line   20)
* case conversion:                       Case.               (line    6)
* case folding in replace commands:      Replacement and Lax Matches.
                                                             (line   21)
* case folding in search:                Lax Search.         (line   35)
* case in completion:                    Completion Options. (line    6)
* case-sensitivity and completion:       Completion Options. (line    6)
* case-sensitivity and search:           Lax Search.         (line   35)
* case-sensitivity and tags search:      Identifier Search.  (line   89)
* categories of characters:              Regexp Backslash.   (line  158)
* CBZ file:                              Document View.      (line    6)
* cells, for text-based tables:          Table Definition.   (line    6)
* centering:                             Fill Commands.      (line   55)
* centralized version control:           VCS Repositories.   (line    6)
* Cham:                                  Language Environments.
                                                             (line   29)
* change buffers:                        Select Buffer.      (line    6)
* change Emacs directory:                Initial Options.    (line   20)
* change log:                            Change Log.         (line    6)
* Change Log mode:                       Change Log Commands.
                                                             (line   40)
* changes, undoing:                      Undo.               (line    6)
* changeset-based version control:       VCS Changesets.     (line   14)
* changing file group (in Dired):        Operating on Files. (line  146)
* changing file owner (in Dired):        Operating on Files. (line  150)
* changing file permissions (in Dired):  Operating on Files. (line  138)
* changing file time (in Dired):         Operating on Files. (line  159)
* char mode (terminal emulator):         Terminal emulator.  (line   10)
* character classes, in regular expressions: Regexps.        (line  107)
* character equivalence in search:       Lax Search.         (line    6)
* character folding in replace commands: Replacement and Lax Matches.
                                                             (line   48)
* character folding in search:           Lax Search.         (line   76)
* character set (keyboard):              User Input.         (line    6)
* character set of character at point:   International Chars.
                                                             (line   65)
* character set, in regular expressions: Regexps.            (line   90)
* character syntax:                      Init Syntax.        (line   57)
* characters (in text):                  Text Display.       (line    6)
* characters in a certain charset:       Charsets.           (line   24)
* characters which belong to a specific language: Regexp Backslash.
                                                             (line  158)
* characters with no font glyphs:        Text Display.       (line   53)
* characters, inserting by name or code-point: Inserting Text.
                                                             (line   60)
* charsets:                              Charsets.           (line    6)
* checking out files:                    VCS Concepts.       (line   13)
* checking spelling:                     Spelling.           (line    6)
* checking syntax:                       Flymake.            (line    6)
* checklist before reporting a bug:      Checklist.          (line    6)
* Chinese:                               Language Environments.
                                                             (line   29)
* Chinese calendar:                      Calendar Systems.   (line   58)
* choosing a major mode:                 Choosing Modes.     (line    6)
* choosing a minor mode:                 Choosing Modes.     (line    6)
* ciphers:                               Amusements.         (line   19)
* citing mail:                           Citing Mail.        (line    6)
* CKJ characters:                        Modifying Fontsets. (line   50)
* class browser, C++:                    Tags Tables.        (line   26)
* Cleartype:                             Windows Fonts.      (line  107)
* click events:                          Mouse Buttons.      (line    6)
* client frame:                          emacsclient Options.
                                                             (line   32)
* client-side fonts:                     Fonts.              (line  200)
* clipboard:                             Clipboard.          (line    6)
* clipboard manager:                     Clipboard.          (line   42)
* clocking time:                         Time Intervals.     (line    6)
* close buffer:                          Kill Buffer.        (line    6)
* close file:                            Kill Buffer.        (line    6)
* CMake mode:                            Program Modes.      (line   15)
* codepage, MS-DOS:                      MS-DOS and MULE.    (line   21)
* codepoint of a character:              Modifying Fontsets. (line   39)
* coding standards for Emacs submissions: Coding Standards.  (line    6)
* coding systems:                        Coding Systems.     (line    6)
* collision:                             Interlocking.       (line   31)
* color emulation on black-and-white printers: PostScript Variables.
                                                             (line   17)
* color name:                            Colors.             (line   14)
* color of window, from command line:    Colors X.           (line    6)
* color scheme:                          Custom Themes.      (line   16)
* Column Number mode:                    Optional Mode Line. (line   23)
* columns (and rectangles):              Rectangles.         (line    6)
* columns (indentation):                 Indentation.        (line    6)
* columns, splitting:                    Two-Column.         (line    6)
* Comint mode:                           Shell Mode.         (line  160)
* comint-highlight-input face:           Interactive Shell.  (line   24)
* comint-highlight-prompt face:          Interactive Shell.  (line   24)
* command:                               Commands.           (line    6)
* command history:                       Repetition.         (line    6)
* command line arguments:                Emacs Invocation.   (line    6)
* commands in *xref* buffers:            Xref Commands.      (line    6)
* comments:                              Comments.           (line    6)
* comments on customized settings:       Changing a Variable.
                                                             (line  120)
* Common Lisp:                           External Lisp.      (line    6)
* compare files (in Dired):              Comparison in Dired.
                                                             (line    6)
* comparing 3 files (diff3):             Comparing Files.    (line   54)
* comparing files:                       Comparing Files.    (line    6)
* compilation buffer, keeping point at end: Compilation.     (line   58)
* compilation errors:                    Compilation.        (line    6)
* Compilation mode:                      Compilation Mode.   (line    6)
* compilation mode faces:                Compilation Mode.   (line   13)
* compilation under MS-DOS:              MS-DOS Processes.   (line    6)
* complete key:                          Keys.               (line   10)
* completion:                            Completion.         (line    6)
* completion (Lisp symbols):             Symbol Completion.  (line    9)
* completion (symbol names):             Symbol Completion.  (line    6)
* completion alternative:                Completion.         (line   10)
* completion list:                       Completion Commands.
                                                             (line   35)
* completion style:                      Completion Styles.  (line    6)
* completion, walking through candidates: Minibuffer History.
                                                             (line    6)
* compose character:                     Unibyte Mode.       (line   86)
* compressing files (in Dired):          Operating on Files. (line  171)
* compression:                           Compressed Files.   (line    6)
* Conf mode:                             Program Modes.      (line   15)
* confirming in the minibuffer:          Completion Exit.    (line   34)
* conflicts:                             Merging.            (line   34)
* connecting to remote host:             Remote Host.        (line    6)
* connection-local variables:            Connection Variables.
                                                             (line    6)
* contents of a buffer:                  Buffers.            (line   34)
* context menu:                          Menu Mouse Clicks.  (line   33)
* continuation line:                     Continuation Lines. (line    6)
* contributing to Emacs:                 Contributing.       (line    6)
* Control:                               User Input.         (line   17)
* control character:                     User Input.         (line   10)
* control characters on display:         Text Display.       (line   11)
* converting text to upper or lower case: Case.              (line   20)
* Coptic calendar:                       Calendar Systems.   (line   41)
* copy:                                  Cut and Paste.      (line    6)
* copy/paste to/from primary selection (macOS): Mac / GNUstep Basics.
                                                             (line   24)
* copying files:                         Copying and Naming. (line   21)
* copying files (in Dired):              Operating on Files. (line   44)
* copying text:                          Yanking.            (line    6)
* copyright assignment:                  Copyright Assignment.
                                                             (line    6)
* CORBA IDL mode:                        C Modes.            (line    6)
* core dump:                             Crashing.           (line   66)
* correcting spelling:                   Spelling.           (line    6)
* CPerl mode:                            Program Modes.      (line   15)
* crash report:                          Crashing.           (line    6)
* crashes:                               Auto Save.          (line    6)
* crashes, Haiku:                        Haiku Basics.       (line   71)
* create a text-based table:             Table Creation.     (line    6)
* creating files:                        Visiting.           (line   45)
* creating frames:                       Creating Frames.    (line    6)
* Croatian:                              Language Environments.
                                                             (line   30)
* cropping images:                       Image Mode.         (line   99)
* cryptanalysis:                         Amusements.         (line   19)
* CSS mode:                              Program Modes.      (line   15)
* CSSC:                                  Version Control Systems.
                                                             (line   34)
* CUA key bindings:                      CUA Bindings.       (line    6)
* curly quotes:                          Quotation Marks.    (line    6)
* curly quotes, and terminal capabilities: Text Display.     (line   69)
* curly quotes, inserting:               Inserting Text.     (line   60)
* current buffer:                        Buffers.            (line   27)
* current function name in mode line:    Which Function.     (line    6)
* current message (Rmail):               Rmail Basics.       (line   13)
* current project:                       Project File Commands.
                                                             (line   43)
* cursor:                                Point.              (line    6)
* cursor color, command-line argument:   Colors X.           (line   24)
* cursor face:                           Faces.              (line   39)
* cursor in non-selected windows:        Cursor Display.     (line   49)
* cursor location:                       Position Info.      (line   37)
* cursor location, on MS-DOS:            Text and Binary.    (line   20)
* cursor motion:                         Moving Point.       (line    6)
* cursor shape on MS-DOS:                MS-DOS Display.     (line   19)
* cursor, blinking:                      Cursor Display.     (line   25)
* cursor, visual-order motion:           Bidirectional Editing.
                                                             (line   93)
* curved quotes:                         Quotation Marks.    (line    6)
* curved quotes, and terminal capabilities: Text Display.    (line   69)
* curved quotes, inserting:              Inserting Text.     (line   60)
* custom themes:                         Custom Themes.      (line    6)
* custom themes, creating:               Creating Custom Themes.
                                                             (line    6)
* customizable variable:                 Easy Customization. (line    6)
* customization:                         Customization.      (line    6)
* customization buffer:                  Easy Customization. (line   14)
* customization groups:                  Customization Groups.
                                                             (line    6)
* customization of menu face:            Standard Faces.     (line  187)
* customizing faces:                     Face Customization. (line    6)
* customizing Lisp indentation:          Lisp Indent.        (line    6)
* customizing variables:                 Changing a Variable.
                                                             (line   35)
* cut:                                   Cut and Paste.      (line    6)
* cut and paste:                         Glossary.           (line  342)
* cutting text:                          Deletion and Killing.
                                                             (line    6)
* cvs:                                   VC Directory Mode.  (line   23)
* CVS:                                   Version Control Systems.
                                                             (line   14)
* CVS directory mode:                    VC Directory Mode.  (line   23)
* CWarn mode:                            Other C Commands.   (line   71)
* cycle visibility, in Outline mode:     Outline Visibility. (line   84)
* Cyrillic:                              Language Environments.
                                                             (line   30)
* Czech:                                 Language Environments.
                                                             (line   31)
* daemon, Emacs:                         Emacs Server.       (line   27)
* day of year:                           General Calendar.   (line   18)
* daylight saving time:                  Daylight Saving.    (line    6)
* DBX:                                   Debuggers.          (line    6)
* deactivating the mark:                 Mark.               (line   27)
* dead character:                        Unibyte Mode.       (line   86)
* debbugs package:                       Known Problems.     (line   27)
* debuggers:                             Debuggers.          (line    6)
* debugging Emacs, tricks and techniques: Checklist.         (line  370)
* debugging X problems:                  Table of Resources. (line  154)
* decentralized version control:         VCS Repositories.   (line    6)
* decoding mail messages (Rmail):        Rmail Coding.       (line    6)
* decoding non-ASCII keyboard input on X: Communication Coding.
                                                             (line   58)
* decrease buffer font size:             Text Scale.         (line   42)
* decrypting files (in Dired):           Operating on Files. (line  192)
* default argument:                      Basic Minibuffer.   (line   17)
* default directory:                     Minibuffer File.    (line    6)
* default directory, of a buffer:        File Names.         (line   22)
* default face:                          Faces.              (line   31)
* default file name:                     File Names.         (line    6)
* default search mode:                   Search Customizations.
                                                             (line    9)
* default.el file, not loading:          Initial Options.    (line  107)
* default.el, the default init file:     Init File.          (line   21)
* defining keyboard macros:              Keyboard Macros.    (line    6)
* defuns:                                Moving by Defuns.   (line    6)
* <DEL> does not delete:                 DEL Does Not Delete.
                                                             (line    6)
* <DEL> vs <BACKSPACE>:                  DEL Does Not Delete.
                                                             (line    6)
* Delete Selection mode:                 Using Region.       (line   50)
* delete window:                         Change Window.      (line    6)
* deleting auto-save files:              Flagging Many Files.
                                                             (line   30)
* deleting blank lines:                  Blank Lines.        (line    6)
* deleting characters and lines:         Erasing.            (line    6)
* deleting files (in Dired):             Dired Deletion.     (line    6)
* deleting rows and column in text-based tables: Table Rows and Columns.
                                                             (line   19)
* deleting some backup files:            Flagging Many Files.
                                                             (line   50)
* deleting windows:                      Change Window.      (line    6)
* deletion:                              Deletion and Killing.
                                                             (line    6)
* deletion (of files):                   Misc File Ops.      (line    9)
* deletion (Rmail):                      Rmail Deletion.     (line    6)
* dereference symbolic links:            Operating on Files. (line   72)
* desktop configuration:                 Saving Emacs Sessions.
                                                             (line    6)
* desktop restore in daemon mode:        Saving Emacs Sessions.
                                                             (line   55)
* desktop shortcut, MS-Windows:          Windows Startup.    (line    8)
* deterministic build:                   Initial Options.    (line  100)
* Devanagari:                            Language Environments.
                                                             (line   31)
* device for Emacs terminal I/O:         Initial Options.    (line   27)
* dialog boxes:                          Dialog Boxes.       (line    6)
* Dialog X Resources (Lucid widgets):    Lucid Resources.    (line    6)
* diary:                                 Diary.              (line    6)
* diary buffer:                          Diary Display.      (line    6)
* diary file:                            Format of Diary File.
                                                             (line    6)
* Diff mode:                             Diff Mode.          (line    6)
* digest message:                        Rmail Digest.       (line    6)
* directional window selection:          Window Convenience. (line   26)
* directories in buffer names:           Uniquify.           (line    6)
* directory header lines:                Subdirectory Motion.
                                                             (line   10)
* directory listing:                     Directories.        (line    6)
* directory listing on MS-DOS:           MS-DOS Processes.   (line   44)
* directory name abbreviation:           File Aliases.       (line   33)
* directory tracking:                    Directory Tracking. (line    6)
* directory where Emacs starts on MS-Windows: Windows Startup.
                                                             (line    8)
* directory-local variables:             Directory Variables.
                                                             (line    6)
* Dired:                                 Dired.              (line    6)
* Dired and version control:             Misc Dired Features.
                                                             (line   58)
* Dired sorting:                         Dired Updating.     (line   67)
* Dired sorting order, on MS-Windows/MS-DOS: ls in Lisp.     (line   29)
* Dired, and MS-Windows/MS-DOS:          ls in Lisp.         (line    6)
* Dirtrack mode:                         Directory Tracking. (line   25)
* disable restoring of desktop configuration: Saving Emacs Sessions.
                                                             (line   26)
* disable window system:                 Initial Options.    (line   37)
* disabled command:                      Disabling.          (line    6)
* disabling remote files:                Remote Files.       (line   25)
* DISPLAY environment variable:          Display X.          (line    6)
* display for Emacs frame:               Initial Options.    (line   32)
* display line numbers:                  Display Custom.     (line    9)
* display name (X Window System):        Display X.          (line    6)
* display of buffer size:                Optional Mode Line. (line    6)
* display of current line number:        Optional Mode Line. (line   18)
* display server:                        Multiple Displays.  (line    6)
* display, incorrect:                    Screen Garbled.     (line    6)
* distributed version control:           VCS Repositories.   (line    6)
* DNS mode:                              Program Modes.      (line   15)
* Dockerfile mode:                       Program Modes.      (line   15)
* DocTeX mode:                           TeX Mode.           (line    6)
* document viewer (DocView):             Document View.      (line    6)
* documentation for program symbols:     Programming Language Doc.
                                                             (line    6)
* documentation string:                  Key Help.           (line   12)
* DocView mode:                          Document View.      (line    6)
* DOS applications, running from Emacs:  Windows Processes.  (line    6)
* DOS codepages:                         MS-DOS and MULE.    (line   21)
* DOS-style end-of-line display:         Recognize Coding.   (line   56)
* DOS-to-Unix conversion of files:       Text and Binary.    (line   39)
* double clicks:                         Mouse Buttons.      (line   28)
* double slash in file name:             Minibuffer File.    (line   34)
* down events:                           Mouse Buttons.      (line    6)
* downcase file names:                   Transforming File Names.
                                                             (line   27)
* drag and drop:                         Drag and Drop.      (line    6)
* drag and drop, Dired:                  Misc Dired Features.
                                                             (line   84)
* drag events:                           Mouse Buttons.      (line    6)
* drastic changes:                       Reverting.          (line    6)
* dribble file:                          Checklist.          (line  106)
* DSSSL mode:                            Program Modes.      (line   15)
* dunnet:                                Amusements.         (line   34)
* Dutch:                                 Language Environments.
                                                             (line   31)
* DVI file:                              Document View.      (line    6)
* early init file:                       Early Init File.    (line    6)
* Ebrowse:                               Tags Tables.        (line   26)
* echo area:                             Echo Area.          (line    6)
* echo area message:                     Echo Area.          (line   19)
* echoing:                               Echo Area.          (line    9)
* EDE (Emacs Development Environment):   EDE.                (line    6)
* Edebug:                                Checklist.          (line  292)
* editable fields (customization buffer): Customization Groups.
                                                             (line   38)
* editing binary files:                  Editing Binary Files.
                                                             (line    6)
* editing in Picture mode:               Basic Picture.      (line    6)
* editing level, recursive:              Recursive Edit.     (line    6)
* EDITOR environment variable:           Emacs Server.       (line    6)
* eight-bit character set:               International Chars.
                                                             (line   54)
* ElDoc mode:                            Programming Language Doc.
                                                             (line   11)
* Electric Indent mode:                  Indent Convenience. (line   21)
* Electric Pair mode:                    Matching.           (line   77)
* Electric Quote mode:                   Quotation Marks.    (line    6)
* Eliza:                                 Amusements.         (line   62)
* Emacs as a server:                     Emacs Server.       (line    6)
* Emacs Development Environment:         EDE.                (line    6)
* Emacs icon, a gnu:                     Icons X.            (line   12)
* Emacs initialization file:             Init File.          (line    6)
* Emacs Lisp mode:                       Lisp Eval.          (line    6)
* Emacs Lisp package archive:            Packages.           (line   16)
* emacs-internal, coding system:         Coding Systems.     (line  111)
* emacs22, completion style:             Completion Styles.  (line   43)
* emacsclient:                           Emacs Server.       (line    6)
* emacsclient invocation:                Invoking emacsclient.
                                                             (line    6)
* emacsclient options:                   emacsclient Options.
                                                             (line    6)
* emacsclient, on MS-Windows:            Windows Startup.    (line   72)
* emacsclient.exe:                       Windows Startup.    (line   48)
* emacsclientw.exe:                      Windows Startup.    (line   48)
* emacs_backtrace.txt file, MS-Windows:  Crashing.           (line    6)
* email:                                 Sending Mail.       (line    6)
* embedded widgets:                      Embedded WebKit Widgets.
                                                             (line    6)
* Emerge:                                Emerge.             (line    6)
* emergency escape:                      Emergency Escape.   (line    6)
* emoji input:                           Input Methods.      (line  118)
* enabling Transient Mark mode temporarily: Disabled Transient Mark.
                                                             (line   29)
* encoding of characters:                International.      (line    6)
* encrypted files, choosing a major mode: Choosing Modes.    (line  101)
* encrypted mails (reading in Rmail):    Rmail Display.      (line   83)
* encrypting files (in Dired):           Operating on Files. (line  204)
* encryption:                            Network Security.   (line    6)
* end-of-line convention, mode-line indication: Mode Line.   (line   40)
* end-of-line conversion:                Coding Systems.     (line   56)
* end-of-line conversion on MS-DOS/MS-Windows: Text and Binary.
                                                             (line    9)
* English:                               Language Environments.
                                                             (line   31)
* Enriched mode:                         Enriched Text.      (line    6)
* enriched text:                         Enriched Text.      (line    6)
* entering Emacs:                        Entering Emacs.     (line    6)
* entering passwords:                    Passwords.          (line    6)
* environment variables:                 Environment.        (line    6)
* environment variables (macOS):         Mac / GNUstep Basics.
                                                             (line   33)
* environment variables for subshells:   Interactive Shell.  (line   47)
* environment variables in file names:   File Names.         (line   53)
* EPUB file:                             Document View.      (line    6)
* equivalent character sequences:        Lax Search.         (line   76)
* erasing characters and lines:          Erasing.            (line    6)
* error log:                             Compilation.        (line    6)
* error message:                         Echo Area.          (line   19)
* errors in init file:                   Initial Options.    (line  163)
* <ESC> replacing <Meta> key:            User Input.         (line   26)
* escape sequences in files:             Recognize Coding.   (line   67)
* escape-glyph face:                     Text Display.       (line   35)
* ESHELL environment variable:           Interactive Shell.  (line   47)
* Esperanto:                             Language Environments.
                                                             (line   32)
* etags:                                 Tags Tables.        (line   14)
* etags program:                         Create Tags Table.  (line    6)
* Ethiopic:                              Language Environments.
                                                             (line   32)
* Ethiopic calendar:                     Calendar Systems.   (line   41)
* European character sets:               Unibyte Mode.       (line    6)
* evaluate expression, command-line argument: Action Arguments.
                                                             (line   65)
* evaluation, Emacs Lisp:                Lisp Eval.          (line    6)
* events on macOS:                       Mac / GNUstep Events.
                                                             (line    6)
* exit incremental search:               Basic Isearch.      (line   36)
* exiting:                               Exiting.            (line    6)
* exiting recursive edit:                Recursive Edit.     (line   13)
* expanding subdirectories in Dired:     Subdirectories in Dired.
                                                             (line    6)
* expansion (of abbrevs):                Abbrevs.            (line    6)
* expansion of C macros:                 Other C Commands.   (line   34)
* expansion of environment variables:    File Names.         (line   53)
* expression:                            Expressions.        (line    6)
* expunging (Rmail):                     Rmail Deletion.     (line   11)
* face at point:                         International Chars.
                                                             (line   65)
* face colors, setting:                  Colors.             (line   41)
* faces:                                 Faces.              (line    6)
* faces for highlighting query replace:  Query Replace.      (line   34)
* faces for highlighting search matches: Basic Isearch.      (line   21)
* faces for mode lines:                  Standard Faces.     (line  108)
* faces for text-mode menus:             Standard Faces.     (line  190)
* faces under MS-DOS:                    MS-DOS Display.     (line    6)
* faces, customizing:                    Face Customization. (line    6)
* failed merges:                         Comparing Files.    (line   54)
* fallback modes:                        Specifying File Variables.
                                                             (line  118)
* FB2 file:                              Document View.      (line    6)
* Feedmail:                              Mail Sending.       (line   28)
* FFAP minor mode:                       FFAP.               (line   18)
* fido mode:                             Icomplete.          (line   26)
* file archives:                         File Archives.      (line    6)
* file comparison (in Dired):            Comparison in Dired.
                                                             (line    6)
* file database (locate):                Dired and Find.     (line   37)
* file dates:                            Interlocking.       (line    6)
* file directory:                        Directories.        (line    6)
* file local variables:                  File Variables.     (line    6)
* file locking:                          Interlocking.       (line   18)
* file management:                       Dired.              (line    6)
* file modes:                            Misc File Ops.      (line   62)
* file name caching:                     File Name Cache.    (line    6)
* file names:                            File Names.         (line    6)
* file names on MS-Windows:              Windows Files.      (line    6)
* file names under MS-DOS:               MS-DOS File Names.  (line    6)
* file names under Windows 95/NT:        MS-DOS File Names.  (line   26)
* file names with non-ASCII characters:  File Name Coding.   (line   10)
* file names, invalid characters on MS-Windows: Windows Files.
                                                             (line   33)
* file names, quote special characters:  Quoted File Names.  (line    6)
* file notifications:                    Auto Revert.        (line   31)
* file ownership, and backup:            Backup Copying.     (line   20)
* file permissions:                      Misc File Ops.      (line   62)
* file selection dialog:                 Visiting.           (line  140)
* file selection dialog, how to disable: Dialog Boxes.       (line   17)
* file shadows:                          File Shadowing.     (line    6)
* file truenames:                        File Aliases.       (line   27)
* file version in change log entries:    Change Log Commands.
                                                             (line   34)
* file, warning when size is large:      Visiting.           (line   62)
* file-based version control:            VCS Changesets.     (line    6)
* file-name completion, on MS-Windows:   Windows Files.      (line   11)
* file-name encoding, MS-Windows:        File Name Coding.   (line   25)
* files:                                 Files.              (line    6)
* files, visiting and saving:            Visiting.           (line   23)
* filesets:                              Filesets.           (line    6)
* filesets, VC:                          Basic VC Editing.   (line    6)
* filesets, VC, in Dired buffers:        Version Control.    (line   26)
* fill prefix:                           Fill Prefix.        (line    6)
* filling text:                          Filling.            (line    6)
* find:                                  File Name Cache.    (line    6)
* find and Dired:                        Dired and Find.     (line    6)
* find definition of symbols:            Looking Up Identifiers.
                                                             (line    6)
* find Info manual by its file name:     Misc Help.          (line   12)
* find references to symbols:            Looking Up Identifiers.
                                                             (line    6)
* finder:                                Package Keywords.   (line    6)
* finding file at point:                 FFAP.               (line    6)
* finding files containing regexp matches (in Dired): Marks vs Flags.
                                                             (line  128)
* finding strings within text:           Search.             (line    6)
* firewall, and accessing remote files:  Remote Files.       (line   57)
* fixing incorrectly decoded mail messages: Rmail Coding.    (line   16)
* flagging files (in Dired):             Dired Deletion.     (line    6)
* flagging many files for deletion (in Dired): Flagging Many Files.
                                                             (line    6)
* flex, completion style:                Completion Styles.  (line   60)
* Flyspell mode:                         Spelling.           (line  167)
* folding editing:                       Foldout.            (line    6)
* Follow mode:                           Follow Mode.        (line    6)
* follow symbolic links:                 Operating on Files. (line   72)
* font antialiasing (MS Windows):        Windows Fonts.      (line  107)
* font backend selection (Haiku):        Haiku Fonts.        (line    6)
* font backend selection (MS-Windows):   Windows Fonts.      (line   15)
* font for menus (X resource):           Table of Resources. (line  103)
* Font Lock mode:                        Font Lock.          (line    6)
* font lookup, MS-Windows:               Windows Fonts.      (line  115)
* font name (X Window System):           Font X.             (line    6)
* font of character at point:            International Chars.
                                                             (line   65)
* font properties (MS Windows):          Windows Fonts.      (line   49)
* font scripts (MS Windows):             Windows Fonts.      (line   98)
* font size of default face, increase or decrease: Text Scale.
                                                             (line    6)
* font specification (MS Windows):       Windows Fonts.      (line    6)
* font Unicode subranges (MS Windows):   Windows Fonts.      (line   98)
* font-lock via tree-sitter:             Parser-based Font Lock.
                                                             (line    6)
* fontconfig:                            Fonts.              (line   51)
* fonts:                                 Fonts.              (line    6)
* fonts and faces:                       Face Customization. (line    6)
* fonts for PostScript printing:         PostScript Variables.
                                                             (line   54)
* fonts for various scripts:             Fontsets.           (line   14)
* fonts, emulating under MS-DOS:         MS-DOS Display.     (line    6)
* fonts, how to ignore:                  Modifying Fontsets. (line   62)
* fontsets:                              Fontsets.           (line    6)
* fontsets, modifying:                   Modifying Fontsets. (line    6)
* foreground color, command-line argument: Colors X.         (line   12)
* foreground for menus (X resource):     Table of Resources. (line  108)
* formfeed character:                    Pages.              (line    6)
* Fortran 77 and Fortran 90, 95, 2003, 2008: Fortran.        (line    6)
* Fortran continuation lines:            ForIndent Cont.     (line    6)
* Fortran fixed form and free form:      Fortran.            (line    6)
* Fortran mode:                          Fortran.            (line    6)
* fortune cookies:                       Mail Amusements.    (line   19)
* forwarding a message:                  Rmail Reply.        (line   68)
* frame:                                 Screen.             (line    6)
* frame focus policy, MS-Windows:        Windows Misc.       (line   18)
* frame size under MS-DOS:               MS-DOS Display.     (line   42)
* frame size, specifying default:        Frame Parameters.   (line   13)
* frame title, command-line argument:    Title X.            (line   16)
* frames:                                Frames.             (line    6)
* frames on MS-DOS:                      MS-DOS Display.     (line   36)
* frameset:                              Configuration Registers.
                                                             (line   13)
* frameset, saving in a register:        Configuration Registers.
                                                             (line    6)
* French:                                Language Environments.
                                                             (line   32)
* French Revolutionary calendar:         Calendar Systems.   (line   29)
* fringe face:                           Standard Faces.     (line  156)
* fringes:                               Fringes.            (line    6)
* fringes, and continuation lines:       Continuation Lines. (line    6)
* fringes, and unused line indication:   Useless Whitespace. (line   28)
* fringes, for debugging:                Source Buffers.     (line    6)
* FTP:                                   Remote Files.       (line    6)
* fullheight, command-line argument:     Window Size X.      (line   32)
* fullscreen, command-line argument:     Window Size X.      (line   18)
* fullwidth, command-line argument:      Window Size X.      (line   36)
* function key:                          Keymaps.            (line   35)
* function, move to beginning or end:    Moving by Defuns.   (line   17)
* future history for file names:         Minibuffer History. (line   44)
* games:                                 Amusements.         (line    6)
* gamma correction (X resource):         Table of Resources. (line  126)
* garbled display:                       Screen Garbled.     (line    6)
* garbled text:                          Text Garbled.       (line    6)
* gateway, and remote file access with ange-ftp: Remote Files.
                                                             (line   57)
* GDB:                                   Debuggers.          (line    6)
* GDB User Interface layout:             GDB User Interface Layout.
                                                             (line    6)
* geometry of Emacs window:              Window Size X.      (line    6)
* geometry, command-line argument:       Window Size X.      (line   11)
* Georgian:                              Language Environments.
                                                             (line   32)
* German:                                Language Environments.
                                                             (line   32)
* getting help with keys:                Basic Help.         (line    6)
* Ghostscript, use for PostScript printing: Windows Printing.
                                                             (line   96)
* git:                                   Version Control Systems.
                                                             (line    9)
* git source of package:                 Fetching Package Sources.
                                                             (line    6)
* Glasses mode:                          MixedCase Words.    (line   12)
* Global Auto Revert mode:               Auto Revert.        (line    6)
* global keymap:                         Keymaps.            (line   21)
* global mark:                           CUA Bindings.       (line   47)
* global mark ring:                      Global Mark Ring.   (line    6)
* global substitution:                   Replace.            (line    6)
* globstar, in Dired:                    Dired Enter.        (line   20)
* glossary:                              Glossary.           (line    6)
* glyphless characters:                  Text Display.       (line   53)
* glyphless-char face:                   Text Display.       (line   53)
* gnu.emacs.help newsgroup:              Service.            (line    6)
* Gnus:                                  Gnus.               (line    6)
* GNUstep:                               Mac OS / GNUstep.   (line    6)
* Go Moku:                               Amusements.         (line   36)
* Goto Address mode:                     Goto Address mode.  (line    6)
* graphic characters:                    Inserting Text.     (line    6)
* Greek:                                 Language Environments.
                                                             (line   32)
* Gregorian calendar:                    Other Calendars.    (line    6)
* growing minibuffer:                    Minibuffer Edit.    (line   31)
* GTK font pattern:                      Fonts.              (line  101)
* GTK input methods:                     Unibyte Mode.       (line   63)
* GTK+ resources:                        GTK resources.      (line    6)
* GTK+ styles:                           GTK styles.         (line    6)
* GTK+ widget classes:                   GTK Names in Emacs. (line    6)
* GTK+ widget names:                     GTK Widget Names.   (line    6)
* GTK+ widget names in Emacs:            GTK Names in Emacs. (line    6)
* GUD interaction buffer:                Debugger Operation. (line    6)
* GUD library:                           Debuggers.          (line    6)
* GUD Tooltip mode:                      Debugger Operation. (line   32)
* guessing shell commands for files (in Dired): Shell Command Guessing.
                                                             (line    6)
* guillemets:                            Quotation Marks.    (line    6)
* Gujarati:                              Language Environments.
                                                             (line   32)
* gzip:                                  Compressed Files.   (line    6)
* H-:                                    Modifier Keys.      (line   26)
* Haiku:                                 Haiku.              (line    6)
* haiku application:                     Haiku Basics.       (line    6)
* haiku debugger:                        Haiku Basics.       (line   71)
* haiku installation:                    Haiku Basics.       (line    6)
* haiku keymap:                          Haiku Basics.       (line   17)
* haiku tooltips:                        Haiku Basics.       (line   52)
* Han:                                   International.      (line    6)
* handwriting:                           PostScript.         (line   54)
* Hangul:                                International.      (line    6)
* hard links (creation):                 Copying and Naming. (line   41)
* hard links (in Dired):                 Operating on Files. (line  113)
* hard links (visiting):                 File Aliases.       (line    6)
* hard newline:                          Hard and Soft Newlines.
                                                             (line    6)
* hardcopy:                              Printing.           (line    6)
* header (TeX mode):                     TeX Print.          (line   97)
* header line (Dired):                   Subdirectory Motion.
                                                             (line   10)
* header-line face:                      Standard Faces.     (line  127)
* header-line-highlight face:            Standard Faces.     (line  133)
* headers (of mail message):             Mail Headers.       (line    6)
* heading lines (Outline mode):          Outline Format.     (line    6)
* Hebrew:                                Language Environments.
                                                             (line   33)
* Hebrew calendar:                       Calendar Systems.   (line   16)
* height of minibuffer:                  Minibuffer Edit.    (line   31)
* height of the horizontal scroll bar:   Scroll Bars.        (line   89)
* help:                                  Help.               (line    6)
* help buffer:                           Help.               (line   13)
* help in using Emacs:                   Service.            (line    6)
* help mode:                             Help Mode.          (line    6)
* help text, in GTK+ file chooser:       Dialog Boxes.       (line   23)
* help, viewing web pages:               Help Mode.          (line   70)
* help-gnu-emacs mailing list:           Service.            (line    6)
* hex editing:                           Editing Binary Files.
                                                             (line    6)
* Hexl mode:                             Editing Binary Files.
                                                             (line    6)
* hg:                                    Version Control Systems.
                                                             (line   43)
* Hi Lock mode:                          Highlight Interactively.
                                                             (line   11)
* hidden files, in GTK+ file chooser:    Dialog Boxes.       (line   23)
* Hide-ifdef mode:                       Other C Commands.   (line   86)
* Hideshow mode:                         Hideshow.           (line    6)
* hiding details in Dired:               Misc Dired Features.
                                                             (line   50)
* hiding subdirectories (Dired):         Hiding Subdirectories.
                                                             (line    6)
* Highlight Changes mode:                Highlight Interactively.
                                                             (line    6)
* highlight current line:                Cursor Display.     (line   54)
* highlighting by matching:              Highlight Interactively.
                                                             (line    6)
* highlighting lines of text:            Highlight Interactively.
                                                             (line   60)
* highlighting matching parentheses:     Matching.           (line   34)
* highlighting phrase:                   Highlight Interactively.
                                                             (line   65)
* highlighting region:                   Disabled Transient Mark.
                                                             (line    6)
* highlighting symbol at point:          Highlight Interactively.
                                                             (line   72)
* Hindi:                                 International.      (line    6)
* history of commands:                   Repetition.         (line    6)
* history of minibuffer input:           Minibuffer History. (line    6)
* history of webkit buffers:             Embedded WebKit Widgets.
                                                             (line   40)
* history reference:                     History References. (line    6)
* holiday forms:                         Holiday Customizing.
                                                             (line   32)
* holidays:                              Holidays.           (line    6)
* HOME directory on MS-Windows:          Windows HOME.       (line    6)
* home directory shorthand:              Minibuffer File.    (line   47)
* HOME directory under MS-DOS:           MS-DOS File Names.  (line   35)
* homoglyph face:                        Text Display.       (line   69)
* hook:                                  Hooks.              (line    6)
* Horizontal Scroll Bar:                 Scroll Bars.        (line   66)
* Horizontal Scroll Bar mode:            Scroll Bars.        (line   66)
* horizontal scrolling:                  Horizontal Scrolling.
                                                             (line    6)
* hourglass pointer display:             Display Custom.     (line   97)
* HTML mode:                             HTML Mode.          (line    6)
* hungry deletion (C Mode):              Hungry Delete.      (line    6)
* hunk, diff:                            Diff Mode.          (line   11)
* Hyper (under MS-DOS):                  MS-DOS Keyboard.    (line   20)
* Hyper, modifier key:                   Modifier Keys.      (line   26)
* hyperlink:                             Help Mode.          (line   43)
* hyperlinks:                            Mouse References.   (line    6)
* iCalendar support:                     Importing Diary.    (line   16)
* Icomplete mode:                        Icomplete.          (line    6)
* Icomplete vertical mode:               Icomplete.          (line   42)
* Icon mode:                             Program Modes.      (line   15)
* iconifying:                            Exiting.            (line   47)
* icons (X Window System):               Icons X.            (line    6)
* icons, on clickable buttons:           Icons.              (line    6)
* icons, toolbar:                        Tool Bars.          (line    6)
* identifier, finding definition of:     Looking Up Identifiers.
                                                             (line    6)
* IDL mode:                              C Modes.            (line    6)
* IDLWAVE mode:                          Program Modes.      (line   15)
* ignore case:                           Glossary.           (line  183)
* ignore font:                           Modifying Fontsets. (line   62)
* ignored file names, in completion:     Completion Options. (line   19)
* image animation:                       Image Mode.         (line   51)
* image resize:                          Image Mode.         (line   67)
* image rotation:                        Image Mode.         (line   79)
* image-dired:                           Image-Dired.        (line    6)
* image-dired mode:                      Image-Dired.        (line    6)
* ImageMagick support:                   Image Mode.         (line  126)
* images, viewing:                       Image Mode.         (line    6)
* IMAP mailboxes:                        Remote Mailboxes.   (line   32)
* IME, MS-Windows:                       Windows Keyboard.   (line  135)
* in-situ subdirectory (Dired):          Subdirectories in Dired.
                                                             (line   19)
* inbox file:                            Rmail Inbox.        (line    6)
* incorrect fontification:               Traditional Font Lock.
                                                             (line   28)
* increase buffer font size:             Text Scale.         (line   42)
* incremental search:                    Incremental Search. (line    6)
* incremental search, edit search string: Repeat Isearch.    (line   71)
* incremental search, exiting:           Basic Isearch.      (line   36)
* incremental search, go to first or last occurrence: Special Isearch.
                                                             (line  111)
* incremental search, help on special keys: Special Isearch. (line  106)
* incremental search, input method interference: Input Methods.
                                                             (line   88)
* indentation:                           Indentation.        (line    6)
* indentation for comments:              Comment Commands.   (line    6)
* indentation for programs:              Program Indent.     (line    6)
* index of buffer definitions:           Imenu.              (line    6)
* indirect buffer:                       Indirect Buffers.   (line    6)
* indirect buffers and outlines:         Outline Views.      (line    6)
* inferior process:                      Compilation.        (line    6)
* inferior processes under MS-DOS:       MS-DOS Processes.   (line    6)
* Info:                                  Misc Help.          (line    6)
* init file:                             Init File.          (line    6)
* init file .emacs on MS-Windows:        Windows HOME.       (line   41)
* init file, default name under MS-DOS:  MS-DOS File Names.  (line    6)
* init file, not loading:                Initial Options.    (line  107)
* initial options (command line):        Emacs Invocation.   (line   40)
* initials, completion style:            Completion Styles.  (line   66)
* input event:                           User Input.         (line   47)
* input item, isearch:                   Basic Isearch.      (line   27)
* input method style, X:                 Table of Resources. (line  174)
* input methods:                         Input Methods.      (line    6)
* input methods, native:                 Unibyte Mode.       (line   63)
* input methods, X:                      Table of Resources. (line  169)
* input with the keyboard:               User Input.         (line    6)
* inputStyle (X resource):               Table of Resources. (line  174)
* insert character by name or code-point: Input Methods.     (line  114)
* insert file contents, command-line argument: Action Arguments.
                                                             (line   68)
* insert Unicode character:              Inserting Text.     (line   60)
* inserted subdirectory (Dired):         Subdirectories in Dired.
                                                             (line   19)
* inserting blank lines:                 Blank Lines.        (line    6)
* inserting Emoji:                       Input Methods.      (line  118)
* inserting matching parentheses:        Matching.           (line   77)
* inserting rows and columns in text-based tables: Table Rows and Columns.
                                                             (line    6)
* insertion:                             Inserting Text.     (line    6)
* INSIDE_EMACS environment variable:     Interactive Shell.  (line   66)
* Integrated development environment:    EDE.                (line    6)
* interactive highlighting:              Highlight Interactively.
                                                             (line    6)
* interactively edit search string:      Repeat Isearch.     (line   71)
* internal border width, command-line argument: Borders X.   (line   15)
* international characters in .emacs:    Init Non-ASCII.     (line    6)
* international files from DOS/Windows systems: Coding Systems.
                                                             (line   20)
* international scripts:                 International.      (line    6)
* international support (MS-DOS):        MS-DOS and MULE.    (line    6)
* Internet search:                       Word Search.        (line   55)
* Intlfonts for PostScript printing:     PostScript Variables.
                                                             (line   54)
* Intlfonts package, installation:       Fontsets.           (line   14)
* invisible lines:                       Outline Mode.       (line    6)
* invisible text, and query-replace:     Query Replace.      (line  158)
* invisible text, searching for:         Special Isearch.    (line   22)
* invocation (command line arguments):   Emacs Invocation.   (line    6)
* invoking Emacs from Windows Explorer:  Windows Startup.    (line   48)
* IPA:                                   Language Environments.
                                                             (line   33)
* isearch:                               Incremental Search. (line    6)
* isearch face:                          Basic Isearch.      (line   21)
* isearch input item:                    Basic Isearch.      (line   27)
* isearch multiple buffers:              Other Repeating Search.
                                                             (line   13)
* isearch multiple files:                Other Repeating Search.
                                                             (line   25)
* isearch-fail face:                     Error in Isearch.   (line    6)
* isearch-move property:                 Not Exiting Isearch.
                                                             (line   89)
* isearch-scroll property:               Not Exiting Isearch.
                                                             (line   52)
* Islamic calendar:                      Calendar Systems.   (line   20)
* ISO commercial calendar:               Calendar Systems.   (line    6)
* ISO Latin character sets:              Unibyte Mode.       (line    6)
* iso-ascii library:                     Unibyte Mode.       (line   29)
* iso-transl library:                    Unibyte Mode.       (line   86)
* ispell program:                        Spelling.           (line  142)
* issue tracker:                         Known Problems.     (line   18)
* Italian:                               Language Environments.
                                                             (line   33)
* Japanese:                              Language Environments.
                                                             (line   33)
* jar:                                   File Archives.      (line   45)
* Java class archives:                   File Archives.      (line   45)
* Java mode:                             C Modes.            (line    6)
* Javascript mode:                       Program Modes.      (line   15)
* JDB:                                   Debuggers.          (line    6)
* JSON mode:                             Program Modes.      (line   15)
* Julian calendar:                       Calendar Systems.   (line    8)
* Julian day numbers:                    Calendar Systems.   (line   12)
* just-in-time (JIT) font-lock:          Font Lock.          (line   37)
* justification:                         Fill Commands.      (line   38)
* justification in text-based tables:    Cell Justification. (line    6)
* justification style:                   Enriched Justification.
                                                             (line    6)
* Kannada:                               Language Environments.
                                                             (line   33)
* Kerberos POP3 authentication:          Remote Mailboxes.   (line   62)
* key:                                   Keys.               (line   10)
* key bindings:                          Key Bindings.       (line    6)
* key rebinding, permanent:              Init Rebinding.     (line    6)
* key rebinding, this session:           Rebinding.          (line    6)
* key sequence:                          Keys.               (line   10)
* key sequence syntax:                   Init Rebinding.     (line   17)
* keyboard input:                        User Input.         (line    6)
* keyboard macro:                        Keyboard Macros.    (line    6)
* keyboard macros, in registers:         Keyboard Macro Registers.
                                                             (line    6)
* keyboard shortcuts:                    Glossary.           (line  792)
* keyboard, MS-Windows:                  Windows Keyboard.   (line    6)
* keymap:                                Keymaps.            (line    6)
* keypad:                                Function Keys.      (line   48)
* keypad keys (MS-Windows):              Windows Keyboard.   (line   83)
* keys stolen by window manager:         User Input.         (line   41)
* keys, reserved:                        Key Bindings.       (line   11)
* Khmer:                                 Language Environments.
                                                             (line   33)
* kill DOS application:                  Windows Processes.  (line   37)
* kill ring:                             Yanking.            (line    6)
* killing buffers:                       Kill Buffer.        (line    6)
* killing characters and lines:          Erasing.            (line    6)
* killing Emacs:                         Exiting.            (line    6)
* killing expressions:                   Expressions.        (line   44)
* killing rectangular areas of text:     Rectangles.         (line    6)
* killing text:                          Deletion and Killing.
                                                             (line    6)
* killing unsaved buffers:               Kill Buffer.        (line   22)
* kinsoku line-breaking rules:           Auto Fill.          (line   31)
* known bugs and problems:               Known Problems.     (line    6)
* Korean:                                Language Environments.
                                                             (line   33)
* label (Rmail):                         Rmail Labels.       (line    6)
* language environment, automatic selection on MS-DOS: MS-DOS and MULE.
                                                             (line   46)
* language environments:                 Language Environments.
                                                             (line    6)
* Lao:                                   Language Environments.
                                                             (line   33)
* large programming projects, maintaining: Maintaining.      (line    6)
* LaTeX mode:                            TeX Mode.           (line    6)
* Latin:                                 Language Environments.
                                                             (line   34)
* Latin-1 TeX encoding:                  TeX Misc.           (line   12)
* Latvian:                               Language Environments.
                                                             (line   35)
* launching Emacs from the tracker:      Haiku Basics.       (line   11)
* lax search:                            Lax Search.         (line    6)
* lax space matching in replace commands: Replacement and Lax Matches.
                                                             (line   11)
* lax space matching in search:          Lax Search.         (line   15)
* lazy highlighting customizations:      Search Customizations.
                                                             (line   42)
* lazy search highlighting:              Repeat Isearch.     (line   18)
* lazy-highlight face:                   Search Customizations.
                                                             (line   42)
* lazy-highlight face, in replace:       Query Replace.      (line   34)
* leaving Emacs:                         Exiting.            (line    6)
* libraries:                             Lisp Libraries.     (line    6)
* Life:                                  Amusements.         (line   43)
* line endings:                          Coding Systems.     (line   56)
* line mode (terminal emulator):         Terminal emulator.  (line   10)
* line number commands:                  Position Info.      (line   37)
* line number display:                   Optional Mode Line. (line   18)
* line spacing (X resource):             Table of Resources. (line   87)
* line spacing, command-line argument:   Misc X.             (line   17)
* line truncation:                       Line Truncation.    (line    6)
* line truncation, and fringes:          Continuation Lines. (line   20)
* line wrapping:                         Continuation Lines. (line    6)
* line-number face:                      Display Custom.     (line   76)
* lines, highlighting:                   Highlight Interactively.
                                                             (line   60)
* links:                                 Mouse References.   (line    6)
* links (customization buffer):          Customization Groups.
                                                             (line   38)
* Lisp character syntax:                 Init Syntax.        (line   57)
* Lisp editing:                          Programs.           (line    6)
* Lisp mode:                             External Lisp.      (line    6)
* Lisp object syntax:                    Init Syntax.        (line   73)
* Lisp string syntax:                    Init Syntax.        (line   35)
* Lisp symbol completion:                Symbol Completion.  (line    9)
* lisp-indent-function property:         Lisp Indent.        (line   27)
* list commands:                         Moving by Parens.   (line    6)
* listing current buffers:               List Buffers.       (line    9)
* listing system fonts:                  Fonts.              (line  207)
* Lithuanian:                            Language Environments.
                                                             (line   35)
* load init file of another user:        Initial Options.    (line  160)
* load path for Emacs Lisp:              Lisp Libraries.     (line   27)
* loading Lisp code:                     Lisp Libraries.     (line    6)
* loading Lisp libraries automatically:  Init Examples.      (line   86)
* loading Lisp libraries, command-line argument: Action Arguments.
                                                             (line   38)
* loading several files (in Dired):      Operating on Files. (line  208)
* local keymap:                          Local Keymaps.      (line    6)
* local variables:                       Locals.             (line   16)
* local variables in files:              File Variables.     (line    6)
* local variables, for all files in a directory: Directory Variables.
                                                             (line    6)
* local variables, for all remote connections: Connection Variables.
                                                             (line    6)
* locale, date format:                   Time Stamps.        (line    6)
* locales:                               Language Environments.
                                                             (line   45)
* location of point:                     Position Info.      (line   37)
* lock-file-mode:                        Interlocking.       (line   75)
* locking (CVS):                         CVS Options.        (line   46)
* locking files:                         Interlocking.       (line   18)
* locking, non-strict (RCS):             RCS and SCCS.       (line    6)
* locking-based version:                 VCS Merging.        (line   15)
* locus:                                 Compilation Mode.   (line    6)
* Log Edit mode:                         Log Buffer.         (line   12)
* log File, types of:                    Types of Log File.  (line    6)
* logging keystrokes:                    Checklist.          (line  106)
* logical order:                         Bidirectional Editing.
                                                             (line   19)
* long file names in DOS box under Windows 95/NT: MS-DOS File Names.
                                                             (line   26)
* looking for a subject in documentation: Help.              (line   31)
* lost-selection-mode:                   Primary Selection.  (line   32)
* lpr usage under MS-DOS:                Windows Printing.   (line   78)
* LRM:                                   Bidirectional Editing.
                                                             (line   60)
* ls emulation:                          ls in Lisp.         (line    6)
* Lucid Widget X Resources:              Lucid Resources.    (line    6)
* lzh:                                   File Archives.      (line   45)
* M-:                                    User Input.         (line   17)
* M-<TAB> vs <Alt>-<TAB> (MS-Windows):   Windows Keyboard.   (line   47)
* M4 mode:                               Program Modes.      (line   15)
* Macintosh:                             Mac OS / GNUstep.   (line    6)
* Macintosh end-of-line conversion:      Coding Systems.     (line   56)
* macOS:                                 Mac OS / GNUstep.   (line    6)
* macro expansion in C:                  Other C Commands.   (line   34)
* mail:                                  Sending Mail.       (line    6)
* mail (on mode line):                   Optional Mode Line. (line   70)
* mail aliases:                          Mail Aliases.       (line    6)
* MAIL environment variable:             Rmail Inbox.        (line   14)
* Mail mode:                             Mail Methods.       (line    6)
* mail signature:                        Mail Signature.     (line    6)
* mail-composition methods:              Mail Methods.       (line    6)
* Mailclient:                            Mail Sending.       (line   28)
* MAILHOST environment variable:         Remote Mailboxes.   (line   14)
* mailrc file:                           Mail Aliases.       (line    6)
* main border width, command-line argument: Borders X.       (line   20)
* maintaining large programs:            Maintaining.        (line    6)
* major modes:                           Major Modes.        (line    6)
* make:                                  Compilation.        (line    6)
* Makefile mode:                         Program Modes.      (line   15)
* making pictures out of text characters: Picture Mode.      (line    6)
* Malayalam:                             Language Environments.
                                                             (line   35)
* man page:                              Man Page.           (line    6)
* man pages, and local file variables:   Specifying File Variables.
                                                             (line   35)
* manipulating paragraphs:               Paragraphs.         (line    6)
* manipulating sentences:                Sentences.          (line    6)
* manipulating text:                     Text.               (line    6)
* manual pages, on MS-DOS/MS-Windows:    Man Page.           (line   39)
* manual version backups:                CVS Options.        (line   39)
* manuals, included:                     Misc Help.          (line    6)
* mark:                                  Mark.               (line    6)
* mark rectangle:                        Rectangles.         (line   13)
* mark ring:                             Mark Ring.          (line    6)
* marking executable files (in Dired):   Marks vs Flags.     (line   30)
* marking many files (in Dired):         Marks vs Flags.     (line    6)
* marking sections of text:              Marking Objects.    (line    6)
* marking subdirectories (in Dired):     Marks vs Flags.     (line   38)
* marking symbolic links (in Dired):     Marks vs Flags.     (line   34)
* match (face name):                     Other Repeating Search.
                                                             (line   41)
* matching parentheses:                  Matching.           (line    6)
* matching parenthesis and braces, moving to: Moving by Parens.
                                                             (line    6)
* maximized, command-line argument:      Window Size X.      (line   25)
* maximum buffer size exceeded, error message: Visiting.     (line   62)
* Mayan calendar:                        Mayan Calendar.     (line    6)
* Mayan calendar round:                  Mayan Calendar.     (line   58)
* Mayan calendars:                       Calendar Systems.   (line   35)
* Mayan haab calendar:                   Mayan Calendar.     (line   50)
* Mayan long count:                      Mayan Calendar.     (line   30)
* Mayan tzolkin calendar:                Mayan Calendar.     (line   42)
* mbox files:                            Rmail Inbox.        (line   41)
* memory full:                           Memory Full.        (line    6)
* menu bar:                              Menu Bar.           (line    6)
* menu bar (X resource):                 Table of Resources. (line   95)
* menu bar access using keyboard:        Menu Bar.           (line   22)
* menu bar appearance:                   Standard Faces.     (line  187)
* menu bar mode:                         Menu Bars.          (line    6)
* menu face, no effect if customized:    Standard Faces.     (line  187)
* Menu X Resources (Lucid widgets):      Lucid Resources.    (line    6)
* Menu X Resources (Motif widgets):      Motif Resources.    (line    6)
* Mercurial:                             Version Control Systems.
                                                             (line   43)
* merge buffer (Emerge):                 Overview of Emerge. (line   21)
* merge mail from file (Rmail):          Rmail Files.        (line   54)
* merges, failed:                        Comparing Files.    (line   54)
* merging changes:                       Merging.            (line    6)
* merging files:                         Emerge.             (line    6)
* merging-based version:                 VCS Merging.        (line   10)
* message:                               Sending Mail.       (line    6)
* Message mode:                          Mail Commands.      (line    6)
* Message mode for sending mail:         Mail Methods.       (line    6)
* message number (Rmail):                Rmail Basics.       (line   20)
* messages saved from echo area:         Echo Area.          (line   34)
* META:                                  User Input.         (line   17)
* Meta (under MS-DOS):                   MS-DOS Keyboard.    (line   20)
* Meta commands and words:               Words.              (line    6)
* Metafont mode:                         Program Modes.      (line   15)
* MH mail interface:                     Mail Methods.       (line    6)
* Microsoft Office file:                 Document View.      (line    6)
* Microsoft Windows:                     Microsoft Windows.  (line    6)
* Midnight mode:                         Kill Buffer.        (line   61)
* MIME:                                  Mail Misc.          (line    6)
* MIME messages (Rmail):                 Rmail Display.      (line   38)
* minibuffer:                            Minibuffer.         (line    6)
* minibuffer confirmation:               Completion Exit.    (line   34)
* minibuffer defaults for file names:    Minibuffer History. (line   44)
* Minibuffer Electric Default mode:      Basic Minibuffer.   (line   24)
* minibuffer history:                    Minibuffer History. (line    6)
* minibuffer history, searching:         Isearch Minibuffer. (line    6)
* minibuffer keymaps:                    Minibuffer Maps.    (line    6)
* minibuffer-prompt face:                Standard Faces.     (line  148)
* minimizing:                            Exiting.            (line   47)
* minimizing a frame at startup:         Icons X.            (line    6)
* minor mode keymap:                     Local Keymaps.      (line    6)
* minor modes:                           Minor Modes.        (line    6)
* mistakes, correcting:                  Fixit.              (line    6)
* mode commands for minor modes:         Minor Modes.        (line   19)
* mode hook:                             Major Modes.        (line   71)
* mode hook, and major modes:            Program Modes.      (line   47)
* mode line:                             Mode Line.          (line    6)
* mode line (MS-DOS):                    MS-DOS and MULE.    (line   63)
* mode line, 3D appearance:              Optional Mode Line. (line   90)
* mode line, mouse:                      Mode Line Mouse.    (line    6)
* mode, Abbrev:                          Abbrev Concepts.    (line   12)
* mode, archive:                         File Archives.      (line   45)
* mode, Auto Compression:                Compressed Files.   (line    6)
* mode, Auto Fill:                       Auto Fill.          (line    6)
* mode, Auto Revert:                     Auto Revert.        (line    6)
* mode, Auto Save:                       Auto Save.          (line    6)
* mode, AWK:                             C Modes.            (line    6)
* mode, C:                               C Modes.            (line    6)
* mode, C++:                             C Modes.            (line    6)
* mode, Column Number:                   Optional Mode Line. (line   23)
* mode, Comint:                          Shell Mode.         (line  160)
* mode, Compilation:                     Compilation Mode.   (line    6)
* mode, CORBA IDL:                       C Modes.            (line    6)
* mode, Delete Selection:                Using Region.       (line   50)
* mode, Dirtrack:                        Directory Tracking. (line   25)
* mode, display-fill-column-indicator:   Displaying Boundaries.
                                                             (line    6)
* mode, DocTeX:                          TeX Mode.           (line    6)
* mode, DocView:                         Document View.      (line    6)
* mode, Electric Indent:                 Indent Convenience. (line   21)
* mode, Electric Quote:                  Quotation Marks.    (line    6)
* mode, Emacs Lisp:                      Lisp Eval.          (line    6)
* mode, Enriched:                        Enriched Text.      (line    6)
* mode, Flyspell:                        Spelling.           (line  167)
* mode, Follow:                          Follow Mode.        (line    6)
* mode, Font Lock:                       Font Lock.          (line    6)
* mode, Fortran:                         Fortran.            (line    6)
* mode, Glasses:                         MixedCase Words.    (line   12)
* mode, Global Auto Revert:              Auto Revert.        (line    6)
* mode, Goto Address:                    Goto Address mode.  (line    6)
* mode, GUD Tooltip:                     Debugger Operation. (line   32)
* mode, Hexl:                            Editing Binary Files.
                                                             (line    6)
* mode, Hideshow:                        Hideshow.           (line    6)
* mode, HTML:                            HTML Mode.          (line    6)
* mode, Java:                            C Modes.            (line    6)
* mode, LaTeX:                           TeX Mode.           (line    6)
* mode, Lisp:                            External Lisp.      (line    6)
* mode, Log Edit:                        Log Buffer.         (line   12)
* mode, Mail:                            Mail Methods.       (line    6)
* mode, major:                           Major Modes.        (line    6)
* mode, Menu Bar:                        Menu Bars.          (line    6)
* mode, Message:                         Mail Commands.      (line    6)
* mode, Minibuffer Electric Default:     Basic Minibuffer.   (line   24)
* mode, minor:                           Minor Modes.        (line    6)
* mode, Mouse Wheel:                     Mouse Commands.     (line  120)
* mode, MSB:                             Buffer Menus.       (line   22)
* mode, nXML:                            HTML Mode.          (line   75)
* mode, Objective C:                     C Modes.            (line    6)
* mode, Occur:                           Other Repeating Search.
                                                             (line   41)
* mode, Occur Edit:                      Other Repeating Search.
                                                             (line   78)
* mode, Org:                             Org Mode.           (line    6)
* mode, Outline:                         Outline Mode.       (line    6)
* mode, Overwrite:                       Minor Modes.        (line   83)
* mode, Paragraph-Indent Text:           Text Mode.          (line   27)
* mode, Pike:                            C Modes.            (line    6)
* mode, Scheme:                          External Lisp.      (line   35)
* mode, Scroll Bar:                      Scroll Bars.        (line    6)
* mode, Scroll-all:                      Window Convenience. (line   46)
* mode, Semantic:                        Semantic.           (line   18)
* mode, SGML:                            HTML Mode.          (line    6)
* mode, Shell:                           Shell Mode.         (line    6)
* mode, SliTeX:                          TeX Mode.           (line    6)
* mode, Tab Bar:                         Tab Bars.           (line    6)
* mode, tar:                             File Archives.      (line    6)
* mode, Term:                            Term Mode.          (line    6)
* mode, TeX:                             TeX Mode.           (line    6)
* mode, Text:                            Text Mode.          (line    6)
* mode, Thumbs:                          Image Mode.         (line  167)
* mode, Tool Bar:                        Tool Bars.          (line    6)
* mode, Transient Mark:                  Disabled Transient Mark.
                                                             (line    6)
* mode, View:                            View Mode.          (line    6)
* mode, Visual Line:                     Visual Line Mode.   (line   14)
* mode, Whitespace:                      Useless Whitespace. (line   37)
* mode, Window Divider:                  Window Dividers.    (line    6)
* mode, Winner:                          Window Convenience. (line    6)
* mode, XML:                             HTML Mode.          (line   75)
* mode-line face:                        Standard Faces.     (line   98)
* mode-line-buffer-id face:              Standard Faces.     (line  124)
* mode-line-highlight face:              Standard Faces.     (line  119)
* mode-line-inactive face:               Standard Faces.     (line  113)
* modes for editing programs:            Hooks.              (line   68)
* modes for programming languages:       Program Modes.      (line    6)
* modification dates:                    Time Stamps.        (line    6)
* modified (buffer):                     Visiting.           (line   49)
* modifier key customization (Haiku):    Haiku Basics.       (line   32)
* modifier keys:                         User Input.         (line   17)
* modifier keys (macOS):                 Mac / GNUstep Basics.
                                                             (line    6)
* modifier keys and system keymap (Haiku): Haiku Basics.     (line   17)
* modifier keys unsupported by keyboard: Modifier Keys.      (line   37)
* modifier keys, and key rebinding:      Modifier Keys.      (line    6)
* Modula2 mode:                          Program Modes.      (line   15)
* module verification:                   Initial Options.    (line  167)
* moon, phases of:                       Lunar Phases.       (line    6)
* Morse code:                            Amusements.         (line   45)
* Motif Widget X Resources:              Motif Resources.    (line    6)
* motion commands, during incremental search: Not Exiting Isearch.
                                                             (line   84)
* mouse avoidance:                       Mouse Avoidance.    (line    6)
* mouse button events:                   Mouse Buttons.      (line    6)
* mouse buttons (what they do):          Mouse Commands.     (line    6)
* mouse input:                           Mouse Input.        (line    6)
* mouse on mode line:                    Mode Line Mouse.    (line    6)
* mouse pointer:                         Display Custom.     (line   97)
* mouse pointer color, command-line argument: Colors X.      (line   28)
* mouse support:                         Text-Only Mouse.    (line    6)
* mouse support under MS-DOS:            MS-DOS Mouse.       (line    6)
* mouse wheel:                           Mouse Commands.     (line  120)
* Mouse Wheel minor mode:                Mouse Commands.     (line  120)
* mouse, and MS-Windows:                 Windows Mouse.      (line    6)
* mouse, dragging:                       Mouse Commands.     (line   42)
* mouse, selecting text using:           Mouse Commands.     (line    6)
* mouse, set number of buttons:          MS-DOS Mouse.       (line   18)
* move to beginning or end of function:  Moving by Defuns.   (line   17)
* movemail:                              Remote Mailboxes.   (line    6)
* movemail program:                      Movemail.           (line    6)
* movement:                              Moving Point.       (line    6)
* moving files (in Dired):               Operating on Files. (line   89)
* moving inside the calendar:            Calendar Motion.    (line    6)
* moving point:                          Moving Point.       (line    6)
* moving text:                           Yanking.            (line    6)
* moving the cursor:                     Moving Point.       (line    6)
* MS-DOS end-of-line conversion:         Coding Systems.     (line   56)
* MS-DOS peculiarities:                  MS-DOS.             (line    6)
* MS-Windows codepages:                  MS-DOS and MULE.    (line   87)
* MS-Windows keyboard shortcuts:         Windows Keyboard.   (line    9)
* MS-Windows, and primary selection:     Primary Selection.  (line   37)
* MS-Windows, Emacs peculiarities:       Microsoft Windows.  (line    6)
* MSB mode:                              Buffer Menus.       (line   22)
* MULE:                                  Glossary.           (line  984)
* multibyte characters:                  International.      (line    6)
* multiple displays:                     Multiple Displays.  (line    6)
* multiple source file search and replace: Identifier Search.
                                                             (line    6)
* multiple views of outline:             Outline Views.      (line    6)
* multiple windows in Emacs:             Windows.            (line    6)
* multiple-buffer isearch:               Other Repeating Search.
                                                             (line   13)
* multiple-file isearch:                 Other Repeating Search.
                                                             (line   25)
* Multipurpose Internet Mail Extensions: Mail Misc.          (line    6)
* Multithreaded debugging in GDB:        Multithreaded Debugging.
                                                             (line    6)
* names of backup files:                 Backup Names.       (line    6)
* narrowing:                             Narrowing.          (line    6)
* narrowing, and line number display:    Optional Mode Line. (line   36)
* native compilation:                    Lisp Libraries.     (line   15)
* nested defuns:                         Moving by Defuns.   (line   53)
* net use, and printing on MS-Windows:   Windows Printing.   (line   38)
* network security manager:              Network Security.   (line    6)
* networked printers (MS-Windows):       Windows Printing.   (line   38)
* newline:                               Inserting Text.     (line   11)
* newlines, hard and soft:               Hard and Soft Newlines.
                                                             (line    6)
* newsreader:                            Gnus.               (line    6)
* Next Error Follow mode:                Compilation Mode.   (line  140)
* NFS and quitting:                      Quitting.           (line   63)
* nil:                                   Glossary.           (line 1015)
* no-conversion, coding system:          Coding Systems.     (line  100)
* nobreak-space face:                    Text Display.       (line   35)
* non-ASCII characters in .emacs:        Init Non-ASCII.     (line    6)
* non-ASCII keys, binding:               Init Non-ASCII.     (line    6)
* non-breaking hyphen:                   Text Display.       (line   35)
* non-breaking space:                    Text Display.       (line   35)
* non-greedy regexp matching:            Regexps.            (line   73)
* non-integral number of lines in a window: Optional Mode Line.
                                                             (line   90)
* non-selected windows, mode line appearance: Optional Mode Line.
                                                             (line   95)
* Non-stop debugging in GDB:             Multithreaded Debugging.
                                                             (line    6)
* non-strict locking (RCS):              RCS and SCCS.       (line    6)
* nonincremental search:                 Nonincremental Search.
                                                             (line    6)
* normal hook:                           Hooks.              (line   13)
* nroff:                                 Nroff Mode.         (line    6)
* ns-open-file event:                    Mac / GNUstep Events.
                                                             (line   13)
* ns-open-file-line event:               Mac / GNUstep Events.
                                                             (line   33)
* ns-open-temp-file event:               Mac / GNUstep Events.
                                                             (line   28)
* ns-power-off event:                    Mac / GNUstep Events.
                                                             (line   39)
* ns-show-prefs event:                   Mac / GNUstep Events.
                                                             (line   44)
* NSA:                                   Mail Amusements.    (line    6)
* NSM:                                   Network Security.   (line    6)
* number lines in a buffer:              Display Custom.     (line    9)
* numeric arguments:                     Arguments.          (line    6)
* nXML mode:                             HTML Mode.          (line   75)
* Objective C mode:                      C Modes.            (line    6)
* obsolete command:                      M-x.                (line   37)
* Occur Edit mode:                       Other Repeating Search.
                                                             (line   78)
* Occur mode:                            Other Repeating Search.
                                                             (line   41)
* octal escapes:                         Text Display.       (line   26)
* Octave mode:                           Program Modes.      (line   15)
* omer count:                            Sexp Diary Entries. (line  162)
* OOM killer:                            Memory Full.        (line   25)
* OPascal mode:                          Program Modes.      (line   15)
* open file:                             Visiting.           (line    6)
* open-parenthesis in leftmost column:   Left Margin Paren.  (line    6)
* OpenDocument file:                     Document View.      (line    6)
* operating on files in Dired:           Operating on Files. (line    6)
* operations on a marked region:         Using Region.       (line    6)
* options (command line):                Emacs Invocation.   (line    6)
* Org agenda:                            Org Organizer.      (line    6)
* Org exporting:                         Org Authoring.      (line    6)
* Org mode:                              Org Mode.           (line    6)
* organizer:                             Org Mode.           (line    6)
* Oriya:                                 Language Environments.
                                                             (line   35)
* out of memory:                         Memory Full.        (line    6)
* out of memory killer, GNU/Linux:       Memory Full.        (line   25)
* outer border width, command-line argument: Borders X.      (line   20)
* Outline mode:                          Outline Mode.       (line    6)
* outline with multiple views:           Outline Views.      (line    6)
* overlays at character position:        Editing Format Info.
                                                             (line   20)
* override character terminal color support: Colors X.       (line   35)
* overscrolling:                         Scroll Bars.        (line   40)
* overwrapped search:                    Repeat Isearch.     (line   45)
* Overwrite mode:                        Minor Modes.        (line   83)
* OXPS file:                             Document View.      (line    6)
* Package:                               Packages.           (line    6)
* Package archive:                       Packages.           (line    6)
* package development source:            Fetching Package Sources.
                                                             (line    6)
* package directory:                     Package Files.      (line    6)
* package file:                          Package Files.      (line    6)
* package menu:                          Package Menu.       (line    6)
* package requirements:                  Package Installation.
                                                             (line   41)
* package security:                      Package Installation.
                                                             (line   58)
* package signing:                       Package Installation.
                                                             (line   58)
* package specification:                 Fetching Package Sources.
                                                             (line   42)
* package status:                        Package Statuses.   (line    6)
* pages:                                 Pages.              (line    6)
* paging in Term mode:                   Term Mode.          (line   26)
* paragraph, base direction:             Bidirectional Editing.
                                                             (line   37)
* Paragraph-Indent Text mode:            Text Mode.          (line   27)
* paragraphs:                            Paragraphs.         (line    6)
* parasha, weekly:                       Sexp Diary Entries. (line  162)
* parentheses, displaying matches:       Matching.           (line    6)
* parentheses, moving across:            Moving by Parens.   (line    6)
* parenthesis in column zero and fontification: Traditional Font Lock.
                                                             (line   28)
* parenthetical groupings:               Moving by Parens.   (line    6)
* parser-based font-lock:                Parser-based Font Lock.
                                                             (line    6)
* partial completion:                    Completion Styles.  (line   32)
* partial-completion, completion style:  Completion Styles.  (line   32)
* paste:                                 Cut and Paste.      (line    6)
* pasting:                               Yanking.            (line    6)
* patches, applying:                     Diff Mode.          (line   74)
* patches, editing:                      Diff Mode.          (line    6)
* patches, sending:                      Sending Patches.    (line    6)
* PCL-CVS:                               VC Directory Mode.  (line   23)
* PDB:                                   Debuggers.          (line    6)
* PDF file:                              Document View.      (line    6)
* pending, in incremental search:        Regexp Search.      (line   52)
* per-buffer variables:                  Locals.             (line   27)
* per-connection local variables:        Connection Variables.
                                                             (line    6)
* per-directory local variables:         Directory Variables.
                                                             (line    6)
* Perl mode:                             Program Modes.      (line   15)
* Perldb:                                Debuggers.          (line    6)
* Persian:                               Language Environments.
                                                             (line   35)
* Persian calendar:                      Calendar Systems.   (line   47)
* phases of the moon:                    Lunar Phases.       (line    6)
* phrase, highlighting:                  Highlight Interactively.
                                                             (line   65)
* Picture mode and rectangles:           Rectangles in Picture.
                                                             (line    6)
* pictures:                              Picture Mode.       (line    6)
* Pike mode:                             C Modes.            (line    6)
* pinch to scale:                        Text Scale.         (line   54)
* pinning Emacs to Windows task bar:     Windows Startup.    (line   20)
* planner:                               Org Mode.           (line    6)
* point:                                 Point.              (line    6)
* point location:                        Position Info.      (line   37)
* point location, on MS-DOS:             Text and Binary.    (line   20)
* Polish:                                Language Environments.
                                                             (line   35)
* Pong game:                             Amusements.         (line   50)
* POP3 mailboxes:                        Remote Mailboxes.   (line   14)
* position and size of Emacs frame:      Window Size X.      (line    6)
* PostScript file:                       Document View.      (line    6)
* PostScript mode:                       Program Modes.      (line   15)
* prefix argument commands, during incremental search: Not Exiting Isearch.
                                                             (line   23)
* prefix arguments:                      Arguments.          (line    6)
* prefix key:                            Keys.               (line   10)
* preprocessor highlighting:             Other C Commands.   (line   56)
* pretty-printer:                        Program Indent.     (line   23)
* prevent commands from exiting incremental search: Not Exiting Isearch.
                                                             (line   52)
* preview of registers:                  Registers.          (line   28)
* primary Rmail file:                    Rmail Basics.       (line    6)
* primary selection:                     Primary Selection.  (line    6)
* primary selection, when active region changes: Setting Mark.
                                                             (line   76)
* printing:                              Printing.           (line    6)
* printing character:                    Text Display.       (line    6)
* printing files (in Dired):             Operating on Files. (line  164)
* Printing package:                      Printing Package.   (line    6)
* printing under MS-DOS:                 MS-DOS Processes.   (line   29)
* Prog mode:                             Hooks.              (line   68)
* program building:                      Building.           (line    6)
* program editing:                       Programs.           (line    6)
* program functions and variables, documentation lookup: Programming Language Doc.
                                                             (line    6)
* project back-end:                      Projects.           (line   11)
* project root:                          Projects.           (line    6)
* projects:                              Projects.           (line    6)
* Prolog mode:                           Program Modes.      (line   15)
* prompt:                                Basic Minibuffer.   (line    6)
* prompt, shell:                         Shell Prompts.      (line    6)
* PS file:                               Document View.      (line    6)
* Punjabi:                               Language Environments.
                                                             (line   36)
* puzzles:                               Amusements.         (line    9)
* Python mode:                           Program Modes.      (line   15)
* query replace:                         Query Replace.      (line    6)
* query-replace face:                    Query Replace.      (line   34)
* quitting:                              Quitting.           (line   28)
* quitting (in search):                  Error in Isearch.   (line   23)
* quitting Emacs:                        Exiting.            (line    6)
* quitting on MS-DOS:                    MS-DOS Keyboard.    (line   12)
* Quotation marks:                       Quotation Marks.    (line    6)
* quoting:                               Inserting Text.     (line   30)
* quoting file names:                    Quoted File Names.  (line    6)
* rar:                                   File Archives.      (line   45)
* raw bytes:                             International Chars.
                                                             (line   54)
* raw-text, coding system:               Coding Systems.     (line   91)
* RCS:                                   Version Control Systems.
                                                             (line   38)
* read-only buffer:                      Misc Buffer.        (line   15)
* read-only text, killing:               Kill Options.       (line    6)
* reading mail:                          Rmail.              (line    6)
* rebinding keys, permanently:           Init Rebinding.     (line    6)
* rebinding keys, this session:          Rebinding.          (line    6)
* rebinding major mode keys:             Init Rebinding.     (line    6)
* rebinding mouse buttons:               Mouse Buttons.      (line    6)
* rebinding non-ASCII keys:              Init Non-ASCII.     (line    6)
* recovering crashed session:            After a Crash.      (line    6)
* rectangle:                             Rectangles.         (line    6)
* rectangle highlighting:                CUA Bindings.       (line   30)
* rectangles and Picture mode:           Rectangles in Picture.
                                                             (line    6)
* rectangular region:                    Rectangles.         (line   13)
* recursive copying:                     Operating on Files. (line   68)
* recursive deletion:                    Dired Deletion.     (line   51)
* recursive editing level:               Recursive Edit.     (line    6)
* recursive editing, cannot exit:        Stuck Recursive.    (line    6)
* recycle bin:                           Misc File Ops.      (line   13)
* redo:                                  Undo.               (line   28)
* refreshing displayed files:            Dired Updating.     (line    6)
* regexp:                                Regexps.            (line    6)
* regexp search:                         Regexp Search.      (line    6)
* region:                                Mark.               (line    6)
* region highlighting:                   Disabled Transient Mark.
                                                             (line    6)
* region-rectangle:                      Rectangles.         (line   13)
* registered file:                       VCS Concepts.       (line    6)
* registers:                             Registers.          (line    6)
* registry, setting environment variables (MS-Windows): MS-Windows Registry.
                                                             (line    6)
* registry, setting resources (MS-Windows): Resources.       (line   18)
* regular expression:                    Regexps.            (line    6)
* related files:                         Other C Commands.   (line   94)
* reload files:                          Saving Emacs Sessions.
                                                             (line    6)
* remember editing session:              Saving Emacs Sessions.
                                                             (line    6)
* remote file access:                    Remote Files.       (line    6)
* remote host:                           Remote Host.        (line    6)
* remote host, debugging on:             Starting GUD.       (line   52)
* remote repositories (CVS):             CVS Options.        (line   11)
* remove indentation:                    Indentation Commands.
                                                             (line   57)
* renaming files:                        Copying and Naming. (line   31)
* renaming files (in Dired):             Operating on Files. (line   89)
* renaming version-controlled files:     VC Delete/Rename.   (line    6)
* repeating a command:                   Repeating.          (line    6)
* replacement:                           Replace.            (line    6)
* reply to a message:                    Rmail Reply.        (line   28)
* report an Emacs bug, how to:           Understanding Bug Reporting.
                                                             (line    6)
* report bugs in Emacs:                  Checklist.          (line    6)
* repository:                            VCS Concepts.       (line    6)
* reread a file:                         Reverting.          (line    6)
* reserved key bindings:                 Key Bindings.       (line   11)
* resize images:                         Image Mode.         (line   67)
* resize window:                         Change Window.      (line   51)
* resizing minibuffer:                   Minibuffer Edit.    (line   31)
* resizing windows:                      Change Window.      (line   51)
* resolving conflicts:                   Merging.            (line   34)
* resource files for GTK+:               GTK resources.      (line    6)
* resource name, command-line argument:  Resources.          (line   63)
* resource values, command-line argument: Resources.         (line   80)
* resources:                             Resources.          (line    6)
* restore session:                       Saving Emacs Sessions.
                                                             (line    6)
* restriction:                           Narrowing.          (line    6)
* retrying a failed message:             Rmail Reply.        (line   57)
* reverse order in POP3 inboxes:         Remote Mailboxes.   (line   67)
* reverse video, command-line argument:  Colors X.           (line   33)
* revision:                              VCS Concepts.       (line   21)
* revision ID:                           VCS Concepts.       (line   21)
* revision ID in version control:        Advanced C-x v v.   (line    6)
* revision tag:                          Revision Tags.      (line    6)
* RGB triplet:                           Colors.             (line   29)
* right-to-left text:                    Bidirectional Editing.
                                                             (line    6)
* risky variable:                        Safe File Variables.
                                                             (line   31)
* RLM:                                   Bidirectional Editing.
                                                             (line   60)
* Rmail:                                 Rmail.              (line    6)
* Rmail file sorting:                    Rmail Sorting.      (line    6)
* Romanian:                              Language Environments.
                                                             (line   36)
* rosh hodesh:                           Sexp Diary Entries. (line  162)
* rot13 code:                            Rmail Rot13.        (line    6)
* rotating images:                       Image Mode.         (line   79)
* Ruby mode:                             Program Modes.      (line   15)
* runemacs.exe:                          Windows Startup.    (line    8)
* running a hook:                        Hooks.              (line    6)
* running info on files (in Dired):      Operating on Files. (line  217)
* running Lisp functions:                Building.           (line    6)
* running man on files (in Dired):       Operating on Files. (line  220)
* Russian:                               Language Environments.
                                                             (line   36)
* s-:                                    Modifier Keys.      (line   26)
* saved echo area messages:              Echo Area.          (line   34)
* saving a setting:                      Changing a Variable.
                                                             (line   92)
* saving buffer name in a register:      File and Buffer Registers.
                                                             (line    6)
* saving file name in a register:        File and Buffer Registers.
                                                             (line    6)
* saving files:                          Visiting.           (line   23)
* saving frame configuration in a register: Configuration Registers.
                                                             (line    6)
* saving keyboard macro in a register:   Keyboard Macro Registers.
                                                             (line    6)
* saving keyboard macros:                Save Keyboard Macro.
                                                             (line   15)
* saving number in a register:           Number Registers.   (line    6)
* saving position in a register:         Position Registers. (line    6)
* saving rectangle in a register:        Rectangle Registers.
                                                             (line    6)
* saving sessions:                       Saving Emacs Sessions.
                                                             (line    6)
* saving text in a register:             Text Registers.     (line    6)
* saving window configuration in a register: Configuration Registers.
                                                             (line    6)
* SCCS:                                  Version Control Systems.
                                                             (line   27)
* Scheme mode:                           External Lisp.      (line   35)
* screen:                                Screen.             (line    6)
* screen display, wrong:                 Screen Garbled.     (line    6)
* screen reader software, MS-Windows:    Windows Misc.       (line    9)
* script mode:                           Initial Options.    (line   73)
* script of a character:                 Modifying Fontsets. (line   39)
* scroll bar (X resource):               Table of Resources. (line  130)
* Scroll Bar mode:                       Scroll Bars.        (line    6)
* Scroll-all mode:                       Window Convenience. (line   46)
* scroll-bar face:                       Scroll Bars.        (line   49)
* scroll-command property:               Scrolling.          (line   59)
* scroll-command property, and incremental search: Not Exiting Isearch.
                                                             (line   39)
* scrollbar width (X resource):          Table of Resources. (line  134)
* scrolling:                             Scrolling.          (line    6)
* scrolling commands, during incremental search: Not Exiting Isearch.
                                                             (line   39)
* scrolling in the calendar:             Scroll Calendar.    (line    6)
* scrolling windows together:            Window Convenience. (line   46)
* SDB:                                   Debuggers.          (line    6)
* search and replace in multiple files (in Dired): Operating on Files.
                                                             (line  238)
* search and replace in multiple source files: Identifier Search.
                                                             (line    6)
* search customizations:                 Search Customizations.
                                                             (line    6)
* search display on slow terminals:      Search Customizations.
                                                             (line   89)
* search for a regular expression:       Regexp Search.      (line    6)
* search Internet for keywords:          Word Search.        (line   55)
* search known bugs:                     Known Problems.     (line   18)
* search mode, default:                  Search Customizations.
                                                             (line    9)
* search multiple files (in Dired):      Operating on Files. (line  223)
* search ring:                           Repeat Isearch.     (line   62)
* search, changing direction:            Repeat Isearch.     (line   40)
* search, overwrapped:                   Repeat Isearch.     (line   45)
* search, wrapping around:               Repeat Isearch.     (line   45)
* search-and-replace commands:           Replace.            (line    6)
* searching:                             Search.             (line    6)
* searching Dired buffers:               Dired Navigation.   (line   20)
* searching documentation efficiently:   Help.               (line   31)
* searching in Rmail:                    Rmail Motion.       (line   60)
* searching in webkit buffers:           Embedded WebKit Widgets.
                                                             (line   27)
* searching multiple files via Dired:    Misc Dired Features.
                                                             (line   20)
* secondary selection:                   Secondary Selection.
                                                             (line    6)
* secondary-selection face:              Secondary Selection.
                                                             (line   11)
* sections of manual pages:              Man Page.           (line   22)
* security:                              Host Security.      (line    6)
* security, when displaying enriched text: Enriched Properties.
                                                             (line   16)
* select all:                            Marking Objects.    (line   52)
* selected buffer:                       Buffers.            (line   27)
* selected window:                       Basic Window.       (line   12)
* selecting buffers in other windows:    Pop Up Window.      (line    6)
* selection, primary:                    Primary Selection.  (line    6)
* selective display:                     Selective Display.  (line    6)
* selective undo:                        Undo.               (line   55)
* self-documentation:                    Help.               (line    6)
* Semantic mode:                         Semantic.           (line   18)
* Semantic package:                      Semantic.           (line    6)
* sending mail:                          Sending Mail.       (line    6)
* sending patches for GNU Emacs:         Sending Patches.    (line    6)
* Sendmail:                              Mail Sending.       (line   28)
* sentences:                             Sentences.          (line    6)
* server file:                           TCP Emacs server.   (line   32)
* server, using Emacs as:                Emacs Server.       (line    6)
* server-side fonts:                     Fonts.              (line  200)
* set buffer font size:                  Text Scale.         (line   47)
* set of alternative characters, in regular expressions: Regexps.
                                                             (line   90)
* sets of files:                         Filesets.           (line    6)
* setting a mark:                        Mark.               (line    6)
* setting variables:                     Examining.          (line    6)
* settings:                              Easy Customization. (line    6)
* settings, how to save:                 Changing a Variable.
                                                             (line   92)
* sexp:                                  Expressions.        (line    6)
* sexp diary entries:                    Sexp Diary Entries. (line    6)
* SGML mode:                             HTML Mode.          (line    6)
* shadow cluster:                        File Shadowing.     (line   16)
* shadow face:                           Standard Faces.     (line   47)
* shadow files:                          File Shadowing.     (line    6)
* shell commands:                        Shell.              (line    6)
* shell commands, Dired:                 Shell Commands in Dired.
                                                             (line    6)
* shell completion:                      Shell Mode.         (line   20)
* SHELL environment variable:            Single Shell.       (line   80)
* Shell mode:                            Shell Mode.         (line    6)
* shell scripts, and local file variables: Specifying File Variables.
                                                             (line   35)
* Shell-script mode:                     Program Modes.      (line   15)
* shelves in version control:            VC Directory Commands.
                                                             (line  143)
* shift-selection:                       Shift Selection.    (line    6)
* Show Paren mode:                       Matching.           (line   34)
* showing hidden subdirectories (Dired): Hiding Subdirectories.
                                                             (line    6)
* shy group, in regexp:                  Regexp Backslash.   (line   47)
* signing files (in Dired):              Operating on Files. (line  200)
* Simula mode:                           Program Modes.      (line   15)
* simulation of middle mouse button:     Windows Mouse.      (line    9)
* simultaneous editing:                  Interlocking.       (line    6)
* Sinhala:                               Language Environments.
                                                             (line   36)
* site init file:                        Init File.          (line   29)
* site-lisp directories:                 Init File.          (line   38)
* site-lisp files, not loading:          Initial Options.    (line  118)
* site-start.el file, not loading:       Initial Options.    (line  114)
* site-start.el, the site startup file:  Init File.          (line   29)
* size of file, warning when visiting:   Visiting.           (line   62)
* size of minibuffer:                    Minibuffer Edit.    (line   31)
* skeletons:                             Text.               (line   35)
* slashes repeated in file name:         Minibuffer File.    (line   34)
* SliTeX mode:                           TeX Mode.           (line    6)
* Slovak:                                Language Environments.
                                                             (line   36)
* Slovenian:                             Language Environments.
                                                             (line   36)
* Smerge mode:                           Comparing Files.    (line   54)
* SMTP:                                  Mail Sending.       (line   28)
* Snake:                                 Amusements.         (line   50)
* socket activation, systemd, Emacs:     Emacs Server.       (line   44)
* soft hyphen:                           Text Display.       (line   35)
* soft newline:                          Hard and Soft Newlines.
                                                             (line    6)
* solitaire:                             Amusements.         (line   53)
* sorting:                               Sorting.            (line    6)
* sorting diary entries:                 Fancy Diary Display.
                                                             (line    8)
* sorting Dired buffer:                  Dired Updating.     (line   67)
* sorting Rmail file:                    Rmail Sorting.      (line    6)
* Spanish:                               Language Environments.
                                                             (line   36)
* specific version control system:       Advanced C-x v v.   (line   10)
* specification, for source packages:    Fetching Package Sources.
                                                             (line   42)
* specify default font from the command line: Font X.        (line   11)
* specify dump file:                     Initial Options.    (line  175)
* specify end-of-line conversion:        Text Coding.        (line   37)
* specifying fullscreen for Emacs frame: Window Size X.      (line    6)
* speedbar:                              Speedbar.           (line    6)
* spell-checking the active region:      Spelling.           (line   58)
* spelling, checking and correcting:     Spelling.           (line    6)
* splash screen:                         Initial Options.    (line  125)
* splitting columns:                     Two-Column.         (line    6)
* splitting table cells:                 Cell Commands.      (line   17)
* SQL mode:                              Program Modes.      (line   15)
* SRC:                                   Version Control Systems.
                                                             (line   51)
* src:                                   Version Control Systems.
                                                             (line   51)
* SSH:                                   Remote Host.        (line    6)
* SSL:                                   Network Security.   (line    6)
* standard colors on a character terminal: Colors X.         (line   35)
* standard faces:                        Standard Faces.     (line    6)
* standard fontset:                      Defining Fontsets.  (line    6)
* start directory, MS-Windows:           Windows Startup.    (line    8)
* start iconified, command-line argument: Icons X.           (line    8)
* starting Emacs:                        Entering Emacs.     (line    6)
* starting Emacs on MS-Windows:          Windows Startup.    (line    6)
* STARTTLS:                              Network Security.   (line    6)
* startup (command line arguments):      Emacs Invocation.   (line    6)
* startup (init file):                   Init File.          (line    6)
* startup fontset:                       Defining Fontsets.  (line   22)
* startup message:                       Initial Options.    (line  125)
* startup screen:                        Entering Emacs.     (line   13)
* stashes in version control:            VC Directory Commands.
                                                             (line  143)
* string substitution:                   Replace.            (line    6)
* string syntax:                         Init Syntax.        (line   35)
* stuck in recursive editing:            Stuck Recursive.    (line    6)
* style (for indentation):               Custom C Indent.    (line    6)
* subdirectories in Dired:               Subdirectories in Dired.
                                                             (line    6)
* subprocesses on MS-Windows:            Windows Processes.  (line    6)
* subscribe groups:                      Gnus Group Buffer.  (line   29)
* subshell:                              Shell.              (line    6)
* substring, completion style:           Completion Styles.  (line   51)
* subtree (Outline mode):                Outline Visibility. (line   54)
* Subversion:                            Version Control Systems.
                                                             (line   22)
* Subword mode:                          MixedCase Words.    (line   23)
* summary (Rmail):                       Rmail Summary.      (line    6)
* summing time intervals:                Time Intervals.     (line    6)
* sunrise and sunset:                    Sunrise/Sunset.     (line    6)
* Super (under MS-DOS):                  MS-DOS Keyboard.    (line   20)
* Super, modifier key:                   Modifier Keys.      (line   26)
* suspending:                            Exiting.            (line   47)
* suspicious constructions in C, C++:    Other C Commands.   (line   71)
* SVN:                                   Version Control Systems.
                                                             (line   22)
* Swedish:                               Language Environments.
                                                             (line   37)
* switch buffers:                        Select Buffer.      (line    6)
* switches (command line):               Emacs Invocation.   (line    6)
* symbol search:                         Symbol Search.      (line    6)
* symbol, highlighting:                  Highlight Interactively.
                                                             (line   72)
* symbolic links (and version control):  General VC Options. (line   11)
* symbolic links (creation in Dired):    Operating on Files. (line  119)
* symbolic links (creation):             Copying and Naming. (line   48)
* symbolic links (visiting):             File Aliases.       (line    6)
* synchronizing windows:                 Follow Mode.        (line    6)
* synchronous X mode:                    Table of Resources. (line  154)
* syntax highlighting and coloring:      Font Lock.          (line    6)
* syntax of regexps:                     Regexps.            (line    6)
* system-wide packages:                  Package Files.      (line   21)
* systemd unit file:                     Emacs Server.       (line   36)
* t:                                     Glossary.           (line 1015)
* tab bar (X resource):                  Table of Resources. (line  165)
* tab bar mode:                          Tab Bars.           (line    6)
* tab line:                              Tab Line.           (line    6)
* tab stops:                             Tab Stops.          (line    6)
* tab-line face:                         Standard Faces.     (line  139)
* table creation:                        Table Creation.     (line    6)
* table dimensions:                      Table Misc.         (line    6)
* table for HTML and LaTeX:              Table Misc.         (line   24)
* table mode:                            Text Based Tables.  (line    6)
* table recognition:                     Table Recognition.  (line    6)
* table to text:                         Table Conversion.   (line    6)
* tabs:                                  Indentation.        (line    6)
* tabs, on the Tab Bar:                  Tab Bars.           (line    6)
* tag:                                   Xref.               (line    6)
* tags and tag tables:                   Tags Tables.        (line    6)
* tags for version control:              Revision Tags.      (line    6)
* tags, C++:                             Tags Tables.        (line   26)
* tags-based completion:                 Symbol Completion.  (line    9)
* TaiViet:                               Language Environments.
                                                             (line   37)
* Tajik:                                 Language Environments.
                                                             (line   37)
* Tamil:                                 Language Environments.
                                                             (line   37)
* Tar mode:                              File Archives.      (line    6)
* Tcl mode:                              Program Modes.      (line   15)
* TCP Emacs server:                      TCP Emacs server.   (line    6)
* Telnet:                                Remote Host.        (line    6)
* Telugu:                                Language Environments.
                                                             (line   37)
* templates:                             Text.               (line   35)
* temporary windows:                     Temporary Displays. (line    6)
* Term mode:                             Term Mode.          (line    6)
* terminal emulators, mouse support:     Text-Only Mouse.    (line    6)
* terminal, serial:                      Serial Terminal.    (line    6)
* termscript file:                       Checklist.          (line  154)
* Tetris:                                Amusements.         (line   50)
* TeX encoding:                          TeX Misc.           (line   12)
* TeX mode:                              TeX Mode.           (line    6)
* TEXEDIT environment variable:          Emacs Server.       (line   66)
* TEXINPUTS environment variable:        TeX Print.          (line   46)
* text:                                  Text.               (line    6)
* text and binary files on MS-DOS/MS-Windows: Text and Binary.
                                                             (line    6)
* text buttons:                          Mouse References.   (line    6)
* text colors, from command line:        Colors X.           (line    6)
* text cursor:                           Cursor Display.     (line    6)
* Text mode:                             Text Mode.          (line    6)
* text properties at point:              International Chars.
                                                             (line   65)
* text properties of characters:         Editing Format Info.
                                                             (line   20)
* text terminal:                         Non-Window Terminals.
                                                             (line    6)
* text to table:                         Table Conversion.   (line    6)
* text-based tables:                     Text Based Tables.  (line    6)
* text-based tables, splitting cells:    Cell Commands.      (line   17)
* text/enriched MIME format:             Enriched Text.      (line    6)
* Thai:                                  Language Environments.
                                                             (line   37)
* Tibetan:                               Language Environments.
                                                             (line   37)
* tilde (~) at end of backup file name:  Backup Names.       (line    6)
* time (on mode line):                   Optional Mode Line. (line   55)
* time intervals, summing:               Time Intervals.     (line    6)
* time stamps:                           Time Stamps.        (line    6)
* timeclock:                             Time Intervals.     (line    6)
* timelog file:                          Time Intervals.     (line   34)
* TLS:                                   Network Security.   (line    6)
* TLS encryption (Rmail):                Remote Mailboxes.   (line   72)
* TODO item:                             Org Organizer.      (line    6)
* toggling marks (in Dired):             Marks vs Flags.     (line   92)
* TOML mode:                             Program Modes.      (line   15)
* tool bar (X resource):                 Table of Resources. (line  161)
* tool bar mode:                         Tool Bars.          (line    6)
* Tool Bar position:                     Tool Bars.          (line   25)
* Tool Bar style:                        Tool Bars.          (line   19)
* tooltip help:                          Help Echo.          (line    6)
* tooltips:                              Tooltips.           (line    6)
* tooltips (haiku):                      Haiku Basics.       (line   52)
* top level:                             Mode Line.          (line    6)
* touchscreen events:                    Mouse Input.        (line   36)
* tower of Hanoi:                        Amusements.         (line   39)
* traditional font-lock:                 Traditional Font Lock.
                                                             (line    6)
* trailing whitespace:                   Useless Whitespace. (line    6)
* trailing whitespace, in patches:       Diff Mode.          (line  160)
* trailing-whitespace face:              Useless Whitespace. (line   10)
* Tramp:                                 Remote Files.       (line    6)
* Transient Mark mode:                   Disabled Transient Mark.
                                                             (line    6)
* Transport Layer Security:              Network Security.   (line    6)
* transposition of expressions:          Expressions.        (line   47)
* trash:                                 Misc File Ops.      (line   13)
* tree-sitter library, supported major modes: Program Modes. (line   32)
* triple clicks:                         Mouse Buttons.      (line   28)
* troubleshooting Emacs:                 Lossage.            (line    6)
* truenames of files:                    File Aliases.       (line   27)
* truncation:                            Line Truncation.    (line    6)
* tty Emacs in haiku:                    Haiku Basics.       (line   11)
* TTY menu faces:                        Standard Faces.     (line  190)
* Turkish:                               Language Environments.
                                                             (line   37)
* two directories (in Dired):            Operating on Files. (line   29)
* two-column editing:                    Two-Column.         (line    6)
* types of log file:                     Types of Log File.  (line    6)
* TypeScript mode:                       Program Modes.      (line   15)
* typos, fixing:                         Fixit.              (line    6)
* Ukrainian:                             Language Environments.
                                                             (line   38)
* unbalanced parentheses and quotes:     Parentheses.        (line    6)
* uncompression:                         Compressed Files.   (line    6)
* undecided, coding system:              Coding Systems.     (line   86)
* undeletion (Rmail):                    Rmail Deletion.     (line   41)
* undigestify:                           Rmail Digest.       (line    6)
* undisplayable characters:              International Chars.
                                                             (line   18)
* undo:                                  Undo.               (line    6)
* undo limit:                            Undo.               (line   68)
* undoing window configuration changes:  Window Convenience. (line    6)
* Unibyte operation:                     Unibyte Mode.       (line    6)
* Unicode:                               International Chars.
                                                             (line   11)
* Unicode characters, inserting:         Inserting Text.     (line   60)
* Unicode Collation Algorithm (UCA), and ls-lisp.el: ls in Lisp.
                                                             (line   36)
* unique buffer names:                   Uniquify.           (line    6)
* unmarking files (in Dired):            Marks vs Flags.     (line   56)
* unsaved buffers, killing:              Kill Buffer.        (line   22)
* unsaved customizations, reminder to save: Saving Customizations.
                                                             (line   46)
* unsubscribe groups:                    Gnus Group Buffer.  (line   29)
* untranslated file system:              Text and Binary.    (line   51)
* unused lines:                          Useless Whitespace. (line   28)
* unzip archives:                        File Archives.      (line   45)
* upcase file names:                     Transforming File Names.
                                                             (line   21)
* updating Dired buffer:                 Dired Updating.     (line    6)
* upstream source, for packages:         Fetching Package Sources.
                                                             (line    6)
* URL, viewing in help:                  Help Mode.          (line   70)
* URLs:                                  Browse-URL.         (line    6)
* URLs, activating:                      Goto Address mode.  (line    6)
* Usenet news:                           Gnus.               (line    6)
* user name for remote file access:      Remote Files.       (line   35)
* user option:                           Easy Customization. (line    6)
* user options, changing:                Changing a Variable.
                                                             (line   35)
* using Nextstep services (macOS):       Mac / GNUstep Events.
                                                             (line   48)
* UTF-8:                                 Language Environments.
                                                             (line   38)
* variable:                              Variables.          (line    6)
* variable-pitch face:                   Standard Faces.     (line   34)
* variables, changing:                   Changing a Variable.
                                                             (line   35)
* VC:                                    Version Control.    (line   10)
* VC change log:                         VC Change Log.      (line    6)
* VC commands, in Dired buffers:         Version Control.    (line   26)
* VC Directory buffer:                   VC Directory Mode.  (line    6)
* VC filesets:                           Basic VC Editing.   (line    6)
* VC log buffer, commands in:            VC Change Log.      (line   92)
* VC mode line indicator:                VC Mode Line.       (line    6)
* vc-log buffer:                         VC Change Log.      (line   92)
* verifying digital signatures on files (in Dired): Operating on Files.
                                                             (line  196)
* Verilog mode:                          Program Modes.      (line   15)
* version control:                       Version Control.    (line    6)
* version control log:                   Types of Log File.  (line    6)
* version control status:                VC Mode Line.       (line   10)
* VERSION_CONTROL environment variable:  Backup Names.       (line   40)
* vertical border:                       Scroll Bars.        (line   54)
* Vertical Scroll Bar:                   Scroll Bars.        (line    6)
* vertical scroll bars, command-line argument: Misc X.       (line   13)
* vertical-border face:                  Standard Faces.     (line  144)
* VHDL mode:                             Program Modes.      (line   15)
* Vietnamese:                            Language Environments.
                                                             (line   38)
* View mode:                             View Mode.          (line    6)
* viewing web pages in help:             Help Mode.          (line   70)
* views of an outline:                   Outline Views.      (line    6)
* visiting files:                        Visiting.           (line    6)
* visiting files, command-line argument: Action Arguments.   (line   12)
* Visual Line mode:                      Visual Line Mode.   (line   14)
* visual order:                          Bidirectional Editing.
                                                             (line   19)
* Watching expressions in GDB:           Watch Expressions.  (line    6)
* wdired mode:                           Wdired.             (line    6)
* Web:                                   Browse-URL.         (line    6)
* web pages, viewing in help:            Help Mode.          (line   70)
* webkit widgets:                        Embedded WebKit Widgets.
                                                             (line    6)
* weeks, which day they start on:        Move to Beginning or End.
                                                             (line   27)
* Welsh:                                 Language Environments.
                                                             (line   38)
* what constitutes an Emacs bug:         Bug Criteria.       (line    6)
* wheel-down, a mouse event:             Mouse Commands.     (line  120)
* wheel-left, a mouse event:             Mouse Commands.     (line  120)
* wheel-right, a mouse event:            Mouse Commands.     (line  120)
* wheel-up, a mouse event:               Mouse Commands.     (line  120)
* whitespace character:                  Indentation.        (line    6)
* Whitespace mode:                       Useless Whitespace. (line   37)
* whitespace, trailing:                  Useless Whitespace. (line    6)
* wide block cursor:                     Cursor Display.     (line   43)
* widening:                              Narrowing.          (line    6)
* widgets at buffer position:            Editing Format Info.
                                                             (line   20)
* width and height of Emacs frame:       Window Size X.      (line    6)
* width of the vertical scroll bar:      Scroll Bars.        (line   35)
* wildcard characters in file names:     Visiting.           (line   84)
* Windmove package:                      Window Convenience. (line   26)
* window configuration changes, undoing: Window Convenience. (line    6)
* Window Divider mode:                   Window Dividers.    (line    6)
* window manager, keys stolen by:        User Input.         (line   41)
* Windows clipboard support:             MS-DOS Mouse.       (line   29)
* windows in Emacs:                      Windows.            (line    6)
* Windows system menu:                   Windows Keyboard.   (line  108)
* windows, synchronizing:                Follow Mode.        (line    6)
* Windows-1255:                          Language Environments.
                                                             (line   38)
* Winner mode:                           Window Convenience. (line    6)
* word processing:                       Enriched Text.      (line    6)
* word search:                           Word Search.        (line    6)
* word wrap:                             Visual Line Mode.   (line    6)
* words:                                 Words.              (line    6)
* words, case conversion:                Case.               (line   20)
* work file:                             VCS Concepts.       (line   13)
* working tree:                          VCS Concepts.       (line   19)
* World Wide Web:                        Browse-URL.         (line    6)
* wrapped search:                        Repeat Isearch.     (line   45)
* wrapping:                              Continuation Lines. (line    6)
* WYSIWYG:                               Enriched Text.      (line    6)
* X cutting and pasting:                 Primary Selection.  (line    6)
* X defaults file:                       Fonts.              (line   27)
* X input method coding systems:         X Coding.           (line    6)
* X input method coding systems, overriding: X Coding.       (line   14)
* X input methods (X resource):          Table of Resources. (line  169)
* X Logical Font Description:            Fonts.              (line  124)
* X resources:                           Resources.          (line    6)
* X resources file:                      Fonts.              (line   27)
* X resources on Haiku:                  Haiku Basics.       (line   58)
* X resources, not loading:              Initial Options.    (line  130)
* X selection:                           Primary Selection.  (line    6)
* XDB:                                   Debuggers.          (line    6)
* XDG_CONFIG_HOME:                       Init File.          (line    6)
* XIM (X resource):                      Table of Resources. (line  169)
* XIM, X Input Methods:                  Unibyte Mode.       (line   63)
* XLFD:                                  Fonts.              (line  124)
* XML schema:                            HTML Mode.          (line   75)
* XPS file:                              Document View.      (line    6)
* xref:                                  Xref.               (line    6)
* xref backend:                          Xref.               (line   24)
* XREF mode:                             Xref Commands.      (line    6)
* xterm:                                 Text-Only Mouse.    (line    8)
* xwidget:                               Embedded WebKit Widgets.
                                                             (line    6)
* Xwidget-WebKit mode:                   Embedded WebKit Widgets.
                                                             (line    6)
* xwidget-webkit-edit-mode:              Embedded WebKit Widgets.
                                                             (line   18)
* y or n prompt:                         Yes or No Prompts.  (line    9)
* yahrzeits:                             From Other Calendar.
                                                             (line   54)
* yahrzeits, and sexp diary entries:     Sexp Diary Entries. (line  162)
* yanking:                               Yanking.            (line    6)
* yanking previous kills:                Earlier Kills.      (line    6)
* yes or no prompt:                      Yes or No Prompts.  (line   17)
* zip:                                   File Archives.      (line   45)
* Zmacs mode:                            Disabled Transient Mark.
                                                             (line    6)
* zone:                                  Amusements.         (line   56)
* zoo:                                   File Archives.      (line   45)



Tag Table:
Node: Top1115
Node: Distrib55488
Ref: Printed Books57433
Ref: Distrib-Footnote-158041
Node: Intro58265
Node: Screen60357
Node: Point63408
Ref: Point-Footnote-164788
Node: Echo Area64972
Node: Mode Line67876
Node: Menu Bar74024
Node: User Input76368
Ref: User Input-Footnote-179082
Node: Keys79142
Node: Mouse Input81740
Node: Commands83708
Node: Entering Emacs86123
Ref: Entering Emacs-Footnote-189590
Node: Exiting89809
Node: Basic92981
Node: Inserting Text94099
Node: Moving Point99343
Node: Erasing106770
Node: Basic Undo109106
Node: Basic Files110871
Node: Basic Help112318
Node: Blank Lines112840
Node: Continuation Lines114312
Node: Position Info116691
Node: Arguments120863
Node: Repeating125351
Node: Minibuffer128522
Node: Basic Minibuffer129510
Node: Minibuffer File132393
Node: Minibuffer Edit135760
Node: Completion139873
Node: Completion Example141092
Node: Completion Commands143051
Node: Completion Exit147015
Node: Completion Styles149800
Node: Completion Options153526
Node: Minibuffer History160087
Node: Repetition164892
Node: Passwords167392
Node: Yes or No Prompts168860
Node: M-x170510
Node: Help175237
Node: Help Summary178915
Node: Key Help183794
Node: Name Help185446
Node: Apropos189254
Node: Help Mode193862
Node: Package Keywords197289
Node: Language Help198468
Node: Misc Help199574
Node: Help Files202971
Node: Help Echo204673
Node: Mark205575
Node: Setting Mark208995
Ref: Setting Mark-Footnote-1213050
Node: Marking Objects213373
Node: Using Region215831
Node: Mark Ring219617
Node: Global Mark Ring222118
Node: Shift Selection223052
Node: Disabled Transient Mark225066
Node: Killing227705
Node: Deletion and Killing228833
Node: Deletion230642
Node: Killing by Lines233969
Node: Other Kill Commands235883
Node: Kill Options238160
Node: Yanking239528
Node: Kill Ring241515
Node: Earlier Kills242486
Node: Appending Kills246552
Node: Cut and Paste249140
Node: Clipboard250358
Node: Primary Selection253757
Node: Secondary Selection256091
Node: Accumulating Text258311
Node: Rectangles261584
Node: CUA Bindings268787
Node: Registers271821
Node: Position Registers274239
Node: Text Registers275461
Node: Rectangle Registers277985
Node: Configuration Registers278790
Node: Number Registers279866
Node: File and Buffer Registers280911
Node: Keyboard Macro Registers282024
Node: Bookmarks282614
Node: Display286903
Node: Scrolling289033
Node: Recentering294832
Node: Auto Scrolling297969
Node: Horizontal Scrolling301729
Node: Narrowing305232
Node: View Mode307793
Node: Follow Mode308687
Node: Faces309509
Node: Colors312215
Node: Standard Faces314624
Node: Icons322583
Node: Text Scale323514
Node: Font Lock326766
Node: Traditional Font Lock329792
Node: Parser-based Font Lock332472
Node: Highlight Interactively334759
Node: Fringes340199
Node: Displaying Boundaries343283
Node: Useless Whitespace347283
Ref: indicate-empty-lines348634
Node: Selective Display351283
Node: Optional Mode Line352827
Node: Text Display358593
Node: Cursor Display363021
Node: Line Truncation366206
Node: Visual Line Mode367741
Node: Display Custom371715
Node: Search379407
Node: Incremental Search380924
Node: Basic Isearch382259
Node: Repeat Isearch385826
Node: Isearch Yank390332
Node: Error in Isearch393801
Node: Special Isearch395709
Node: Not Exiting Isearch401639
Node: Isearch Minibuffer406769
Node: Nonincremental Search408054
Node: Word Search409419
Node: Symbol Search412574
Node: Regexp Search415094
Node: Regexps419185
Node: Regexp Backslash428825
Node: Regexp Example436003
Node: Lax Search436582
Node: Replace443455
Node: Unconditional Replace444567
Node: Regexp Replace445846
Node: Replacement and Lax Matches449175
Node: Query Replace452001
Node: Other Repeating Search459266
Node: Search Customizations465946
Node: Fixit471538
Node: Undo472578
Ref: Undo-Footnote-1477438
Node: Transpose477721
Node: Fixing Case481355
Node: Spelling482054
Node: Keyboard Macros490954
Node: Basic Keyboard Macro493011
Node: Keyboard Macro Ring498896
Node: Keyboard Macro Counter501507
Node: Keyboard Macro Query506547
Node: Save Keyboard Macro508575
Node: Edit Keyboard Macro511782
Node: Keyboard Macro Step-Edit512979
Node: Files516226
Node: File Names518288
Ref: File Names with $521046
Node: Visiting522236
Node: Saving534358
Node: Save Commands535044
Node: Backup540462
Node: Backup Names543468
Node: Backup Deletion545867
Node: Backup Copying547306
Node: Customize Save549645
Node: Interlocking552420
Ref: Interlocking-Footnote-1556273
Node: File Shadowing556358
Node: Time Stamps558516
Node: Reverting559447
Node: Auto Revert562552
Node: Non-File Buffers565749
Node: Auto Reverting the Buffer Menu567956
Node: Auto Reverting Dired568822
Node: Auto Save570923
Node: Auto Save Files572272
Node: Auto Save Control575939
Node: Recover578159
Node: File Aliases580209
Node: Directories582858
Node: Comparing Files585607
Node: Diff Mode588670
Node: Copying and Naming597057
Node: Misc File Ops600184
Node: Compressed Files603955
Node: File Archives604843
Node: Remote Files608120
Node: Quoted File Names611475
Node: File Name Cache613390
Node: File Conveniences615193
Node: Image Mode616213
Node: Filesets625134
Node: Buffers627119
Node: Select Buffer630505
Node: List Buffers634993
Node: Misc Buffer637157
Node: Kill Buffer639883
Node: Several Buffers643283
Node: Indirect Buffers649427
Node: Buffer Convenience652350
Node: Uniquify652863
Node: Icomplete655535
Node: Buffer Menus658020
Node: Windows659559
Node: Basic Window660495
Node: Split Window662463
Node: Other Window666604
Node: Pop Up Window669368
Node: Change Window671328
Node: Displaying Buffers675191
Node: Window Choice677115
Node: Temporary Displays680684
Node: Window Convenience682655
Node: Tab Line685364
Node: Frames687050
Node: Mouse Commands690319
Node: Word and Line Mouse698343
Node: Mouse References700243
Node: Menu Mouse Clicks702668
Node: Mode Line Mouse704726
Node: Creating Frames706367
Node: Frame Commands708770
Node: Fonts711780
Node: Speedbar721372
Node: Multiple Displays724341
Node: Frame Parameters725617
Node: Scroll Bars727573
Node: Window Dividers732628
Node: Drag and Drop733907
Node: Menu Bars736844
Node: Tool Bars737924
Node: Tab Bars739478
Node: Dialog Boxes748448
Node: Tooltips750010
Ref: Tooltips-Footnote-1752676
Node: Mouse Avoidance752903
Node: Non-Window Terminals754590
Node: Text-Only Mouse755796
Node: International757005
Node: International Chars761442
Node: Language Environments767527
Node: Input Methods773300
Node: Select Input Method780716
Ref: transient input method784875
Node: Coding Systems785577
Ref: Coding Systems-Footnote-1791510
Node: Recognize Coding791729
Node: Specify Coding797109
Node: Output Coding798373
Node: Text Coding801135
Node: Communication Coding805343
Node: File Name Coding808942
Node: X Coding811623
Node: Terminal Coding812652
Node: Fontsets815339
Ref: Fontsets-Footnote-1818867
Node: Defining Fontsets819071
Node: Modifying Fontsets823915
Node: Undisplayable Characters827123
Node: Unibyte Mode828346
Node: Charsets833797
Node: Bidirectional Editing836295
Node: Modes842563
Node: Major Modes843738
Ref: Major Modes-Footnote-1848487
Node: Minor Modes848601
Node: Choosing Modes855050
Node: Indentation862306
Node: Indentation Commands864568
Node: Tab Stops867889
Node: Just Spaces870359
Node: Indent Convenience872038
Node: Text873378
Node: Words876013
Node: Sentences879177
Node: Paragraphs882532
Node: Pages885910
Node: Quotation Marks888918
Ref: Quotation Marks-Footnote-1891452
Node: Filling891808
Node: Auto Fill892508
Node: Fill Commands895109
Node: Fill Prefix899792
Node: Adaptive Fill903805
Node: Case906439
Node: Text Mode908822
Node: Outline Mode911263
Node: Outline Minor Mode912840
Node: Outline Format914652
Node: Outline Motion917454
Node: Outline Visibility918602
Ref: Outline Search923149
Node: Outline Views924360
Node: Foldout925273
Node: Org Mode929125
Node: Org Organizer931180
Node: Org Authoring932751
Node: TeX Mode934000
Ref: TeX Mode-Footnote-1936439
Node: TeX Editing936528
Node: LaTeX Editing939874
Node: TeX Print941471
Node: TeX Misc949327
Node: HTML Mode949967
Node: Nroff Mode954093
Node: Enriched Text955605
Node: Enriched Mode957148
Node: Hard and Soft Newlines959052
Node: Editing Format Info960290
Node: Enriched Faces961506
Node: Enriched Indentation963471
Node: Enriched Justification965350
Node: Enriched Properties966756
Node: Text Based Tables968353
Node: Table Definition970404
Node: Table Creation971818
Node: Table Recognition972951
Node: Cell Commands974269
Node: Cell Justification976166
Node: Table Rows and Columns977769
Node: Table Conversion978904
Node: Table Misc981911
Node: Two-Column983392
Node: Programs986591
Node: Program Modes988188
Node: Defuns991267
Node: Left Margin Paren991969
Node: Moving by Defuns992994
Node: Imenu996215
Node: Which Function998746
Node: Program Indent999520
Node: Basic Indent1000589
Node: Multi-line Indent1002275
Node: Lisp Indent1004709
Node: C Indent1006636
Node: Custom C Indent1008548
Node: Parentheses1011919
Node: Expressions1013008
Ref: Expressions-Footnote-11016795
Node: Moving by Parens1016866
Node: Matching1018849
Node: Comments1024343
Node: Comment Commands1025650
Node: Multi-Line Comments1030786
Node: Options for Comments1032113
Node: Documentation1035412
Node: Info Lookup1035951
Node: Man Page1037014
Node: Programming Language Doc1040227
Ref: Programming Language Doc-Footnote-11046622
Node: Hideshow1046729
Node: Symbol Completion1048668
Ref: Symbol Completion-Footnote-11050736
Node: MixedCase Words1050925
Node: Semantic1052259
Ref: Semantic-Footnote-11054655
Node: Misc for Programs1054702
Node: C Modes1057603
Node: Motion in C1058344
Node: Electric C1060427
Node: Hungry Delete1062250
Node: Other C Commands1063694
Node: Asm Mode1068198
Node: Fortran1068804
Node: Fortran Motion1070661
Node: Fortran Indent1072964
Node: ForIndent Commands1073732
Node: ForIndent Cont1075190
Node: ForIndent Num1077751
Node: ForIndent Conv1078910
Node: ForIndent Vars1080015
Node: Fortran Comments1082148
Node: Fortran Autofill1086363
Node: Fortran Columns1087604
Node: Fortran Abbrev1090805
Node: Building1091609
Node: Compilation1092902
Node: Compilation Mode1097909
Node: Compilation Shell1105899
Node: Grep Searching1108309
Node: Flymake1113383
Node: Debuggers1114816
Node: Starting GUD1115927
Node: Debugger Operation1117876
Node: Commands of GUD1120952
Node: GUD Customization1125153
Node: GDB Graphical Interface1127563
Node: GDB User Interface Layout1129000
Node: Source Buffers1133173
Node: Breakpoints Buffer1135522
Node: Threads Buffer1136858
Node: Stack Buffer1139084
Node: Other GDB Buffers1139972
Node: Watch Expressions1142888
Node: Multithreaded Debugging1145712
Node: Executing Lisp1148907
Node: Lisp Libraries1150219
Node: Lisp Eval1157191
Node: Lisp Interaction1161688
Node: External Lisp1163327
Node: Maintaining1165529
Node: Version Control1167310
Node: Introduction to VC1170034
Node: Why Version Control?1171332
Node: Version Control Systems1172290
Node: VCS Concepts1175318
Node: VCS Merging1176975
Node: VCS Changesets1179423
Node: VCS Repositories1180360
Node: Types of Log File1181526
Node: VC Mode Line1183536
Node: Basic VC Editing1185715
Node: VC With A Merging VCS1188069
Node: VC With A Locking VCS1190663
Node: Advanced C-x v v1192277
Node: Log Buffer1193716
Node: Registering1197494
Node: Old Revisions1199549
Node: VC Change Log1207015
Node: VC Undo1214353
Node: VC Ignore1215564
Node: VC Directory Mode1216326
Node: VC Directory Buffer1218020
Node: VC Directory Commands1220459
Node: Branches1226162
Node: Switching Branches1227317
Node: Pulling / Pushing1229524
Node: Merging1232601
Node: Creating Branches1234822
Node: Miscellaneous VC1236638
Node: Change Logs and VC1237341
Node: VC Delete/Rename1239483
Node: Revision Tags1241228
Node: Version Headers1244140
Node: Editing VC Commands1246150
Node: Preparing Patches1247003
Node: Customizing VC1248400
Node: General VC Options1249366
Node: RCS and SCCS1250740
Node: CVS Options1252222
Node: Projects1254919
Node: Project File Commands1256341
Node: Project Buffer Commands1261899
Node: Switching Projects1263587
Node: Managing Projects1264650
Node: Change Log1265201
Node: Change Log Commands1265906
Node: Format of ChangeLog1269576
Node: Xref1271358
Node: Find Identifiers1274952
Node: Looking Up Identifiers1275770
Node: Xref Commands1281200
Node: Identifier Search1283336
Node: List Identifiers1289279
Node: Tags Tables1291141
Ref: Tags Tables-Footnote-11292963
Node: Tag Syntax1293169
Node: Create Tags Table1299853
Node: Etags Regexps1305559
Node: Select Tags Table1311178
Node: EDE1313531
Node: Emerge1315926
Node: Overview of Emerge1317030
Node: Submodes of Emerge1320320
Node: State of Difference1322154
Node: Merge Commands1324750
Node: Exiting Emerge1327447
Node: Combining in Emerge1328347
Node: Fine Points of Emerge1329260
Node: Bug Reference1330235
Node: Abbrevs1336736
Node: Abbrev Concepts1338188
Node: Defining Abbrevs1339673
Node: Expanding Abbrevs1342671
Node: Abbrevs Suggestions1346320
Node: Editing Abbrevs1347871
Node: Saving Abbrevs1350117
Node: Dynamic Abbrevs1352635
Node: Dabbrev Customization1356090
Node: Dired1359034
Node: Dired Enter1361722
Node: Dired Navigation1367040
Node: Dired Deletion1368794
Node: Flagging Many Files1372585
Node: Dired Visiting1375275
Node: Marks vs Flags1377445
Node: Operating on Files1384227
Node: Shell Commands in Dired1395880
Node: Shell Command Guessing1399406
Node: Transforming File Names1401924
Node: Comparison in Dired1405409
Node: Subdirectories in Dired1406347
Node: Subdir Switches1408135
Node: Subdirectory Motion1410234
Node: Hiding Subdirectories1411617
Node: Dired Updating1412900
Node: Dired and Find1416248
Node: Wdired1418512
Node: Image-Dired1420268
Node: Misc Dired Features1424387
Node: Calendar/Diary1429616
Node: Calendar Motion1431452
Node: Calendar Unit Motion1432326
Node: Move to Beginning or End1434735
Node: Specified Dates1436029
Node: Scroll Calendar1437425
Node: Counting Days1439281
Node: General Calendar1439817
Node: Writing Calendar Files1441487
Node: Holidays1445788
Node: Sunrise/Sunset1448969
Node: Lunar Phases1452218
Node: Other Calendars1453554
Node: Calendar Systems1454705
Node: To Other Calendar1458376
Node: From Other Calendar1460623
Node: Diary1463229
Node: Format of Diary File1464359
Node: Displaying the Diary1466572
Node: Date Formats1470272
Node: Adding to Diary1473014
Node: Special Diary Entries1475146
Node: Appointments1480278
Node: Importing Diary1483478
Node: Daylight Saving1485386
Node: Time Intervals1488057
Node: Advanced Calendar/Diary Usage1490148
Node: Calendar Customizing1491183
Node: Holiday Customizing1493589
Node: Mayan Calendar1499729
Node: Date Display Format1503092
Node: Time Display Format1504131
Node: Diary Customizing1505254
Node: Non-Gregorian Diary1509273
Node: Diary Display1512828
Node: Fancy Diary Display1516554
Node: Sexp Diary Entries1518482
Node: Sending Mail1526430
Node: Mail Format1528807
Node: Mail Headers1530266
Node: Mail Aliases1534600
Node: Mail Commands1536723
Node: Mail Sending1537579
Node: Header Editing1540866
Node: Citing Mail1542948
Node: Mail Misc1544483
Node: Mail Signature1547426
Node: Mail Amusements1548988
Ref: Mail Amusements-Footnote-11550175
Node: Mail Methods1550216
Node: Rmail1551853
Node: Rmail Basics1553872
Node: Rmail Scrolling1556347
Node: Rmail Motion1557779
Node: Rmail Deletion1562035
Node: Rmail Inbox1565311
Node: Rmail Files1569342
Node: Rmail Output1572192
Node: Rmail Labels1577560
Node: Rmail Attributes1580074
Node: Rmail Reply1581779
Node: Rmail Summary1587953
Node: Rmail Make Summary1588975
Node: Rmail Summary Edit1591998
Node: Rmail Sorting1596926
Node: Rmail Display1599090
Ref: Rmail Display-Footnote-11603537
Node: Rmail Coding1603662
Node: Rmail Editing1605895
Node: Rmail Digest1607348
Node: Rmail Rot131608443
Node: Movemail1609543
Node: Remote Mailboxes1613867
Node: Other Mailbox Formats1617737
Node: Gnus1618369
Node: Buffers of Gnus1619119
Node: Gnus Startup1620480
Node: Gnus Group Buffer1622376
Node: Gnus Summary Buffer1624022
Node: Host Security1625484
Node: Network Security1626442
Node: Document View1633144
Ref: Document View-Footnote-11635580
Node: DocView Navigation1635811
Node: DocView Searching1638106
Node: DocView Slicing1639164
Node: DocView Conversion1640572
Node: Shell1641287
Node: Single Shell1643668
Node: Interactive Shell1649987
Node: Shell Mode1653728
Ref: Shell Mode-Footnote-11661194
Node: Shell Prompts1661417
Node: Shell History1663265
Node: Shell Ring1664088
Node: Shell History Copying1668310
Node: History References1669855
Node: Directory Tracking1671076
Node: Shell Options1672849
Node: Terminal emulator1676810
Node: Term Mode1679163
Node: Remote Host1680525
Node: Serial Terminal1681612
Node: Emacs Server1682634
Ref: Emacs Server-Footnote-11688714
Node: TCP Emacs server1688894
Node: Invoking emacsclient1691626
Node: emacsclient Options1695450
Node: Printing1704551
Node: PostScript1707158
Node: PostScript Variables1709805
Node: Printing Package1714106
Node: Sorting1715485
Node: Picture Mode1721263
Node: Basic Picture1723725
Node: Insert in Picture1726403
Node: Tabs in Picture1728088
Node: Rectangles in Picture1730034
Node: Editing Binary Files1732013
Node: Saving Emacs Sessions1734639
Node: Recursive Edit1740959
Node: Hyperlinking1744497
Node: EWW1745111
Node: Embedded WebKit Widgets1745612
Node: Browse-URL1747871
Node: Goto Address mode1749694
Node: FFAP1750804
Node: Amusements1753578
Node: Packages1756552
Node: Package Menu1758823
Node: Package Statuses1766002
Node: Package Installation1767803
Ref: Package Signing1771067
Node: Package Files1777616
Node: Fetching Package Sources1779362
Node: Customization1784111
Node: Easy Customization1785249
Node: Customization Groups1786694
Node: Browsing Custom1788829
Node: Changing a Variable1791343
Node: Saving Customizations1798247
Node: Face Customization1800589
Node: Specific Customization1803883
Node: Custom Themes1806747
Node: Creating Custom Themes1811532
Node: Variables1813949
Node: Examining1816794
Node: Hooks1819724
Node: Locals1824269
Node: File Variables1827990
Node: Specifying File Variables1828720
Node: Safe File Variables1836115
Node: Directory Variables1839750
Ref: Directory Variables-Footnote-11846172
Node: Connection Variables1846408
Node: Key Bindings1848567
Node: Keymaps1850253
Node: Prefix Keymaps1853064
Node: Local Keymaps1855192
Node: Minibuffer Maps1856924
Node: Rebinding1858145
Node: Init Rebinding1861399
Node: Modifier Keys1865056
Node: Function Keys1867495
Node: Named ASCII Chars1870620
Node: Mouse Buttons1872176
Node: Disabling1877765
Node: Init File1880533
Node: Init Syntax1883915
Node: Init Examples1887254
Node: Terminal Init1894012
Node: Find Init1896147
Node: Init Non-ASCII1898813
Node: Early Init File1900311
Node: Authentication1901945
Node: Quitting1903338
Node: Lossage1908903
Node: Stuck Recursive1909836
Node: Screen Garbled1910488
Node: Text Garbled1911428
Node: Memory Full1912178
Node: Crashing1914373
Node: After a Crash1917511
Node: Emergency Escape1919942
Node: DEL Does Not Delete1922263
Node: Bugs1924395
Node: Known Problems1926676
Node: Bug Criteria1929893
Node: Understanding Bug Reporting1932761
Node: Checklist1936045
Node: Sending Patches1955721
Node: Contributing1962689
Node: Coding Standards1966351
Node: Copyright Assignment1967134
Node: Service1968807
Node: Copying1969410
Node: GNU Free Documentation License2007193
Node: Emacs Invocation2032550
Node: Action Arguments2036124
Node: Initial Options2039705
Ref: Initial Options-Footnote-12048008
Node: Command Example2048057
Node: Environment2048930
Node: General Variables2051001
Ref: General Variables-Footnote-12059309
Node: Misc Variables2059589
Node: MS-Windows Registry2062523
Node: Display X2065278
Node: Font X2067228
Node: Colors X2067922
Node: Window Size X2070988
Node: Borders X2075930
Node: Title X2077195
Node: Icons X2077903
Node: Misc X2078948
Node: X Resources2079898
Node: Resources2080937
Node: Table of Resources2085185
Node: Lucid Resources2095454
Node: Motif Resources2097915
Node: GTK resources2101014
Node: GTK Resource Basics2103090
Node: GTK Widget Names2104904
Node: GTK Names in Emacs2106613
Node: GTK styles2108359
Node: Antinews2113131
Node: Mac OS / GNUstep2120162
Node: Mac / GNUstep Basics2122003
Node: Mac / GNUstep Customization2124274
Node: Mac / GNUstep Events2128097
Node: GNUstep Support2130977
Node: Haiku2131262
Node: Haiku Basics2131925
Node: Haiku Fonts2135445
Node: Microsoft Windows2136248
Node: Windows Startup2138117
Node: Text and Binary2143237
Node: Windows Files2147554
Node: ls in Lisp2150307
Node: Windows HOME2157128
Ref: Windows HOME-Footnote-12159848
Node: Windows Keyboard2159927
Ref: Windows Keyboard-Footnote-12168262
Node: Windows Mouse2168518
Node: Windows Processes2169563
Node: Windows Printing2173725
Ref: Windows Printing-Footnote-12180437
Node: Windows Fonts2180643
Node: Windows Misc2188275
Node: MS-DOS2189719
Node: MS-DOS Keyboard2190888
Node: MS-DOS Mouse2192910
Node: MS-DOS Display2195680
Node: MS-DOS File Names2199833
Node: MS-DOS Printing2202648
Node: MS-DOS and MULE2204104
Ref: MS-DOS and MULE-Footnote-12209077
Ref: MS-DOS and MULE-Footnote-22209416
Node: MS-DOS Processes2209770
Node: Manifesto2212258
Ref: Manifesto-Footnote-12236616
Ref: Manifesto-Footnote-22237516
Ref: Manifesto-Footnote-32237793
Ref: Manifesto-Footnote-42237835
Ref: Manifesto-Footnote-52238355
Ref: Manifesto-Footnote-62238461
Ref: Manifesto-Footnote-72239074
Node: Glossary2239438
Ref: Glossary---Abbrev2239546
Ref: Glossary---Balanced Expression2242693
Ref: Glossary---Bind2243390
Ref: Glossary---Binding2243479
Ref: Glossary---C-2246075
Ref: Glossary---Command Name2248815
Ref: Glossary---Compilation2249522
Ref: Glossary---Continuation Line2250743
Ref: Glossary---Daemon2253451
Ref: Glossary---Default2254017
Ref: Glossary---Deletion of Files2255083
Ref: Glossary---Directory Local Variable2256093
Ref: Glossary---End Of Line2258582
Ref: Glossary---File Locking2261127
Ref: Glossary---Filling2262702
Ref: Glossary---Font Lock2262963
Ref: Glossary---Free Software Foundation2264305
Ref: Glossary---Global Substitution2266149
Ref: Glossary---Incremental Search2270044
Ref: Glossary---Killing2273533
Ref: Glossary---Mail2276255
Ref: Glossary---Minibuffer History2278813
Ref: Glossary---Numeric Argument2281718
Ref: Glossary---Page2282328
Ref: Glossary---Quitting2284548
Ref: Glossary---Regular Expression2287026
Ref: Glossary---Server2291075
Ref: Glossary---Tags Table2295006
Ref: Glossary---Text Terminal2295934
Ref: Glossary---Tooltips2296904
Ref: Glossary---Truncation2298054
Ref: Glossary---Yanking2300882
Node: Acknowledgments2301098
Node: Key Index2357834
Node: Option Index2445837
Node: Command Index2452721
Node: Variable Index2599005
Node: Concept Index2693501

End Tag Table


Local Variables:
coding: utf-8
End:
