/Part 1. 📜 TOC Tree

* Part 1. 001.📜 docutils-0.20.1/README.txt
* Part 1. 002.📜 docutils-0.20.1/docs/index.txt
* Part 1. 003.📜 docutils-0.20.1/docs/user/rst/cheatsheet.txt
* Part 1. 004.📜 docutils-0.20.1/docs/user/rst/demo.txt
* Part 1. 005.📜 docutils-0.20.1/docs/user/rst/quickstart.txt
* Part 1. 006.📜 docutils-0.20.1/docs/ref/doctree.txt
* Part 1. 007.📜 docutils-0.20.1/docs/ref/docutils.dtd
* Part 1. 008.📜 docutils-0.20.1/docs/ref/soextblx.dtd
* Part 1. 009.📜 docutils-0.20.1/docs/ref/rst/definitions.txt
* Part 1. 010.📜 docutils-0.20.1/docs/ref/rst/directives.txt
* Part 1. 011.📜 docutils-0.20.1/docs/ref/rst/introduction.txt
* Part 1. 012.📜 docutils-0.20.1/docs/ref/rst/mathematics.txt
* Part 1. 013.📜 docutils-0.20.1/docs/ref/rst/restructuredtext.txt
* Part 1. 014.📜 docutils-0.20.1/docs/ref/rst/roles.txt
* Part 2. 015.📜 docutils-0.20.1/docs/user/tools.txt
* Part 2. 016.📜 docutils command-line
* Part 2. 017.📜 docutils-0.20.1/docs/user/slide-shows.txt
* Part 2. 018.📜 docutils-0.20.1/docs/user/smartquotes.txt
* Part 2. 019.📜 docutils-0.20.1/docs/user/todo-lists.txt
* Part 2. 020.📜 docutils-0.20.1/docs/user/config.txt
* Part 2. 021.📜 docutils-0.20.1/docs/user/emacs.txt
* Part 2. 022.📜 docutils-0.20.1/docs/user/html.txt
* Part 2. 023.📜 docutils-0.20.1/docs/user/latex.txt
* Part 2. 024.📜 docutils-0.20.1/docs/user/links.txt
* Part 2. 025.📜 docutils-0.20.1/docs/user/mailing-lists.txt
* Part 2. 026.📜 docutils-0.20.1/docs/user/manpage.txt
* Part 2. 027.📜 docutils-0.20.1/docs/user/odt.txt
* Part 2. 028.📜 docutils-0.20.1/tools/editors/README.txt
* Part 2. 029.📜 docutils-0.20.1/tools/editors/emacs/README.txt
* Part 3. 030.📜 docutils-0.20.1/docs/howto/cmdline-tool.txt
* Part 3. 031.📜 docutils-0.20.1/docs/howto/html-stylesheets.txt
* Part 3. 032.📜 docutils-0.20.1/docs/howto/i18n.txt
* Part 3. 033.📜 docutils-0.20.1/docs/howto/rst-directives.txt
* Part 3. 034.📜 docutils-0.20.1/docs/howto/rst-roles.txt
* Part 3. 035.📜 docutils-0.20.1/docs/howto/security.txt
* Part 3. 036.📜 docutils-0.20.1/docs/api/publisher.txt
* Part 3. 037.📜 docutils-0.20.1/docs/api/runtime-settings.txt
* Part 3. 038.📜 docutils-0.20.1/docs/api/transforms.txt
* Part 3. 039.📜 docutils-0.20.1/docs/dev/distributing.txt
* Part 3. 040.📜 docutils-0.20.1/docs/dev/enthought-plan.txt
* Part 3. 041.📜 docutils-0.20.1/docs/dev/enthought-rfp.txt
* Part 3. 042.📜 docutils-0.20.1/docs/dev/hacking.txt
* Part 3. 043.📜 docutils-0.20.1/docs/dev/policies.txt
* Part 3. 044.📜 docutils-0.20.1/docs/dev/pysource.txt
* Part 3. 045.📜 docutils-0.20.1/docs/dev/release.txt
* Part 3. 046.📜 docutils-0.20.1/docs/dev/repository.txt
* Part 3. 047.📜 docutils-0.20.1/docs/dev/rst/alternatives.txt
* Part 3. 048.📜 docutils-0.20.1/docs/dev/rst/problems.txt
* Part 3. 049.📜 docutils-0.20.1/docs/dev/runtime-settings-processing.txt
* Part 3. 050.📜 docutils-0.20.1/docs/dev/semantics.txt
* Part 3. 051.📜 docutils-0.20.1/docs/dev/testing.txt
* Part 3. 052.📜 docutils-0.20.1/docs/dev/todo.txt
* Part 3. 053.📜 docutils-0.20.1/docs/dev/website.txt
* Part 3. 054.📜 docutils-0.20.1/docs/dev/pysource.dtd
* Part 3. 055.📜 docutils-0.20.1/docs/peps/pep-0256.txt
* Part 3. 056.📜 docutils-0.20.1/docs/peps/pep-0257.txt
* Part 3. 057.📜 docutils-0.20.1/docs/peps/pep-0258.txt
* Part 3. 058.📜 docutils-0.20.1/docs/peps/pep-0287.txt
* Part 3. 059.📜 docutils-0.20.1/docs/header.txt
* Part 3. 060.📜 docutils-0.20.1/docs/header0.txt
* Part 3. 061.📜 docutils-0.20.1/docs/header2.txt
* Part 4. 062.📜 docutils-0.20.1/docutils.conf
* Part 4. 063.📜 docutils-0.20.1/docutils/docutils.conf
* Part 4. 064.📜 docutils-0.20.1/docutils/parsers/rst/include/README.txt
* Part 4. 065.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsa.txt
* Part 4. 066.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsb.txt
* Part 4. 067.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsc.txt
* Part 4. 068.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsn.txt
* Part 4. 069.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamso.txt
* Part 4. 070.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsr.txt
* Part 4. 071.📜 docutils-0.20.1/docutils/parsers/rst/include/isobox.txt
* Part 4. 072.📜 docutils-0.20.1/docutils/parsers/rst/include/isocyr1.txt
* Part 4. 073.📜 docutils-0.20.1/docutils/parsers/rst/include/isocyr2.txt
* Part 4. 074.📜 docutils-0.20.1/docutils/parsers/rst/include/isodia.txt
* Part 4. 075.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk1.txt
* Part 4. 076.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk2.txt
* Part 4. 077.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk3.txt
* Part 4. 078.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk4-wide.txt
* Part 4. 079.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk4.txt
* Part 4. 080.📜 docutils-0.20.1/docutils/parsers/rst/include/isolat1.txt
* Part 4. 081.📜 docutils-0.20.1/docutils/parsers/rst/include/isolat2.txt
* Part 4. 082.📜 docutils-0.20.1/docutils/parsers/rst/include/isomfrk-wide.txt
* Part 4. 083.📜 docutils-0.20.1/docutils/parsers/rst/include/isomfrk.txt
* Part 4. 084.📜 docutils-0.20.1/docutils/parsers/rst/include/isomopf-wide.txt
* Part 4. 085.📜 docutils-0.20.1/docutils/parsers/rst/include/isomopf.txt
* Part 4. 086.📜 docutils-0.20.1/docutils/parsers/rst/include/isomscr-wide.txt
* Part 4. 087.📜 docutils-0.20.1/docutils/parsers/rst/include/isomscr.txt
* Part 4. 088.📜 docutils-0.20.1/docutils/parsers/rst/include/isonum.txt
* Part 4. 089.📜 docutils-0.20.1/docutils/parsers/rst/include/isopub.txt
* Part 4. 090.📜 docutils-0.20.1/docutils/parsers/rst/include/isotech.txt
* Part 4. 091.📜 docutils-0.20.1/docutils/parsers/rst/include/mmlalias.txt
* Part 4. 092.📜 docutils-0.20.1/docutils/parsers/rst/include/mmlextra-wide.txt
* Part 4. 093.📜 docutils-0.20.1/docutils/parsers/rst/include/mmlextra.txt
* Part 4. 094.📜 docutils-0.20.1/docutils/parsers/rst/include/s5defs.txt
* Part 4. 095.📜 docutils-0.20.1/docutils/parsers/rst/include/xhtml1-lat1.txt
* Part 4. 096.📜 docutils-0.20.1/docutils/parsers/rst/include/xhtml1-special.txt
* Part 4. 097.📜 docutils-0.20.1/docutils/parsers/rst/include/xhtml1-symbol.txt
* Part 4. 098.📜 docutils-0.20.1/docutils/writers/html4css1/template.txt
* Part 4. 099.📜 docutils-0.20.1/docutils/writers/html5_polyglot/template.txt
* Part 4. 100.📜 docutils-0.20.1/docutils/writers/pep_html/template.txt
* Part 5. 101.📜 docutils-0.20.1/licenses/BSD-2-Clause.txt
* Part 5. 102.📜 docutils-0.20.1/licenses/gpl-3-0.txt
* Part 5. 103.📜 docutils-0.20.1/licenses/python-2-1-1.txt
* Part 5. 104.📜 docutils-0.20.1/BUGS.txt
* Part 5. 105.📜 docutils-0.20.1/COPYING.txt
* Part 5. 106.📜 docutils-0.20.1/FAQ.txt
* Part 5. 107.📜 docutils-0.20.1/HISTORY.txt
* Part 5. 108.📜 docutils-0.20.1/RELEASE-NOTES.txt
* Part 5. 109.📜 docutils-0.20.1/THANKS.txt

.. sectnum::
  :start: 0
  :suffix: 💦

.. contents:: Table of Contents 
   :local:
   :depth: 3
   :class: handout

一个 reStructuredText 文档使用的章节标题必须是一致的：一旦建立了标题样式的层次结构， 
章节必须使用该层次结构。标题修饰符号可以使用以下正则表达式表示：

.. code-block:: sh

    \n[=-~.+^'`*]{3,}\n

例如，以下是不同级别标题语法参考:

========================
 Title [level H2]
========================

Title [level H3]
========================

Title [level H4]
------------------------

Title [level H5]
~~~~~~~~~~~~~~~~~~~

Title [level H6]
........................

Title [level H6]
''''''''''''''''''''''''

Title [level H6]
^^^^^^^^^^^^^^^^^^^^^^^^

Title [level H6]
++++++++++++++++++++++++

Title [level H6]
************************

.. sidebar:: Title Levels
  
  ::

    ========================
     Title [level H2]
    ========================

    ------------------------
     Title [level H3]
    ------------------------

    Title [level H4]
    ========================

    Title [level H5]
    ------------------------

    Title [level H6]
    ~~~~~~~~~~~~~~~~~~~

    Title [level H6]
    ........................

    Title [level H6]
    ''''''''''''''''''''''''

    Title [level H6]
    ************************

    Title [level H6]
    ++++++++++++++++++++++++

    Title [level H6]
    ^^^^^^^^^^^^^^^^^^^^^^^^

标题装饰符号可用于标题内容所在行前和行后，行前、行后同时使用，或者只在行后使用， 
前者可以在标题内容中插值，也可以空格开头。装饰符号与标题级别关系并不是固定的，
这取决于前后出现的位置关系，依次逐级下降。一旦确定它们的层级关系就需要保持一致，
不能跳级、或者改变顺序使用。

如果标题层次结构不一致，docutils 转译时触发错误， (SEVERE/4) Title level inconsistent，
导致编译过程中止。

并且，装饰符号长度不能小于标题内容长度，否则触发 (WARNING/2) Title underline too short。
警告不会终止编译过程，但是会向生成文件添加大量 Docutils System Messages 信息。

Docutils 常用命令行工具参数： 

1. ``--warnings=<file>`` 将警告信息转储到指定文件。 
2. ``--quiet`` 禁止将警告信息写入输出文件，等同 "--report=5"。
3. ``--no-section-numbering`` 禁止给标题自动编号，如果编译后输出重复的编号就可以使用。

使用 ``.. sectnum::`` 指令可以给标题添加序号属性，不要重复在同一个文档中使用此指令，
因为会给标题添加多个序号。使用 prefix 或者 suffix 设置前后缀符号，``:depth: 1`` 这样
的标志值可以用来约束其作用目录深度。``.. section-numbering::`` 是同义、功能等价指令，
参考 Automatic Section Numbering。

使用 ``.. contents::`` 指令用来生成 TOC，将文档中的所有标题生成链接。使用 ``:local:``
标志可以约束在当前标题所在 section 范围内的标题，参考 Table of Contents。::

  .. sectnum::
    :suffix: 💦
    :depth: 2
    :start: 0

  .. section-numbering::

  .. title:: Custom Title

  .. contents:: :local:

  .. contents:: Table of Contents
     :class: handout

  .. contents:: Table of Contents   
     :local: 
     :depth: 2 
     :class: handout

Docutils 中的指令有很多是针对整个文档设置的，比如 ``.. title::`` 指令来修改文档标题，
它的功能用来模拟 HTML 中的 title 元素。只有一个参数设置时，可以和指令写在同一行。
如果有多个参数，就需要换行，并且缩进。


/Part 1. 001.📜 docutils-0.20.1/README.txt

.. include:: /dl/pl/docutils-0.20.1/docs/header0.txt

=========================
 README: Docutils 0.20.1
=========================

:Author: David Goodger
:Contact: goodger@python.org
:Date: $Date: 2023-05-09 20:32:19 +0200 (Di, 09. Mai 2023) $
:Web site: https://docutils.sourceforge.io/
:Copyright: This document has been placed in the public domain.


Quick-Start
===========

This is for those who want to get up & running quickly.

1. Docutils requires **Python**, available from
   https://www.python.org/.
   See Dependencies_ below for details.

2. Install the latest stable release from PyPi with pip_::

       pip install docutils

   For alternatives and details, see section `Installation`_ below.

3. Use the `front-end scripts`_ to convert reStructuredText documents.
   Try for example::

       docutils FAQ.txt FAQ.html

   See Usage_ below for details.


Purpose
=======

The purpose of the Docutils project is to provide a set of tools for
processing plaintext documentation into useful formats, such as HTML,
LaTeX, troff (man pages), OpenOffice, and native XML.  Support for the
following sources has been implemented:

* Standalone files.

* `PEPs (Python Enhancement Proposals)`_.

Support for the following sources is planned or provided by
`third party tools`_:

* Inline documentation from Python modules and packages, extracted
  with namespace context.

* Email (RFC-822 headers, quoted excerpts, signatures, MIME parts).

* Wikis, with global reference lookups of "wiki links".

* Compound documents, such as multiple chapter files merged into a
  book.

* And others as discovered.

.. _PEPs (Python Enhancement Proposals):
   https://peps.python.org/pep-0012
.. _third party tools: docs/user/links.html#related-applications


Dependencies
============

To run the code, Python_ must be installed.
(Python is pre-installed with most Linux distributions.)

* Since version 0.19, Docutils requires Python 3.7 or later.
* Docutils 0.16 to 0.18 require Python 2.7 or 3.5+.

.. _Python: https://www.python.org/.


Recommendations
---------------

Docutils uses the following packages for enhanced functionality, if they
are installed:

* The recommended installer is pip_, setuptools_ works, too.

* The `Python Imaging Library`_ (PIL) is used for some image
  manipulation operations.

* The `Pygments PyPi`_ package provides syntax highlight of "code" directives
  and roles.

* The `myst`_, `pycmark`_, or `recommonmark`_ parsers can be used to
  parse input in "Markdown" (CommonMark_) format.

The `Docutils Link List <docs/user/links.html>`__ records projects that
users of Docutils and reStructuredText may find useful.

.. _pip: https://pypi.org/project/pip/
.. _setuptools: https://pypi.org/project/setuptools/
.. _Python Imaging Library: http://www.pythonware.com/products/pil/
.. _Pygments PyPi: https://pypi.org/project/Pygments/
.. _myst: https://pypi.org/project/myst-docutils/
.. _pycmark: https://pypi.org/project/pycmark/
.. _recommonmark: https://github.com/rtfd/recommonmark
.. _CommonMark: https://spec.commonmark.org/0.30/


Installation
============

The `Python Packaging User Guide`_ gives details how to
`use pip for installing`_.

* The simplest way is to install the latest *stable release* from PyPi::

      pip install docutils

* To install a *pre-relase*, append the option ``--pre``.

* To install a `development version`_ *from source*:

  1. Open a shell

  2. Go to the directory containing the file ``setup.py``.

  3. Install the package with **one** of the following commands::

         pip install -e .  # editable install
         pip install .     # regular install
         python setup.py   # regular install with setuptools

  4. Optional steps:

     * `Running the test suite`_
     * `Converting the documentation`_

  See also the OS-specific installation instructions below and
  the `Docutils version repository`_ documentation.

* To install for a *specific Python version*, use this version in the
  setup call, e.g. ::

       python3.11 -m pip install docutils

  If the python executable isn't on your path, you'll have to specify the
  complete path, such as ``/usr/local/bin/python3.11``.

  To install for different Python versions, repeat step 3 for every
  required version. The last installed version will be used for the
  ``docutils`` command line application.

.. _Python Packaging User Guide: https://packaging.python.org/en/latest/
.. _use pip for installing:
    https://packaging.python.org/en/latest/tutorials/installing-packages/
    #use-pip-for-installing
.. _"editable" install:
    https://pip.pypa.io/en/stable/topics/local-project-installs/
    #editable-installs


GNU/Linux, BSDs, Unix, Mac OS X, etc.
---------------------------------------------------

* Use ``su`` or ``sudo`` for a system-wide
  installation as ``root``, e.g.::

      sudo pip install docutils


Windows
-------

* The Python FAQ explains `how to run a Python program under Windows`__.

  __ https://docs.python.org/3/faq/windows.html
     #how-do-i-run-a-python-program-under-windows

* Usually, pip_ is automatically installed if you are using Python
  downloaded from https://python.org. If not, see the
  `pip documentation <https://pip.pypa.io/en/stable/installation/>`__.

* The command window should recognise the word ``py`` as an instruction to
  start the interpreter, e.g.

       py -m pip install docutils

  If this does not work, you may have to specify the full path to the
  Python executable.


Usage
=====

Start the "docutils" command line application with::

    docutils [options] [<source> [<destination>]]

The default action is to convert a reStructuredText_ document to HTML5,
for example::

    docutils test.rst test.html

Read the ``--help`` option output for details on options and arguments and
`Docutils Front-End Tools`_ for the full documentation of the various tools.

For programmatic use of the `docutils` Python package, read the
`API Reference Material`_ and the source code.
Remaining questions may be answered in the `Docutils Project
Documentation`_ or the Docutils-users_ mailing list.

Contributions are welcome!

.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _front-end scripts:
.. _Docutils Front-End Tools: docs/user/tools.html
.. _API Reference Material: /docs/index.html
                            #api-reference-material-for-client-developers
.. _Docutils Project Documentation: /docs/index.html


Project Files & Directories
===========================

* README.txt: You're reading it.

* COPYING.txt: Public Domain Dedication and copyright details for
  non-public-domain files (most are PD).

* FAQ.txt: Frequently Asked Questions (with answers!).

* RELEASE-NOTES.txt: Summary of the major changes in recent releases.

* HISTORY.txt: A detailed change log, for the current and all previous
  project releases.

* BUGS.txt: Known bugs, and how to report a bug.

* THANKS.txt: List of contributors.

* setup.py: Installation script.  See "Installation" below.

* install.py: Quick & dirty installation script.  Just run it.  For
  any kind of customization or help though, setup.py must be used.

* docutils: The project source directory, installed as a Python
  package.

* docs: The project documentation directory.  Read ``docs/index.txt``
  for an overview.

* docs/user: The project user documentation directory.  Contains the
  following documents, among others:

  - docs/user/tools.txt: Docutils Front-End Tools
  - docs/user/latex.txt: Docutils LaTeX Writer
  - docs/user/rst/quickstart.txt: A ReStructuredText Primer
  - docs/user/rst/quickref.html: Quick reStructuredText (HTML only)

* docs/ref: The project reference directory.
  ``docs/ref/rst/restructuredtext.txt`` is the reStructuredText
  reference.

* licenses: Directory containing copies of license files for
  non-public-domain files.

* tools: Directory for Docutils front-end tools.  See
  ``docs/user/tools.txt`` for documentation.

* test: Unit tests.  Not required to use the software, but very useful
  if you're planning to modify it.  See `Running the Test Suite`_
  below.


Development version
===================

While we are trying to follow a "release early & often" policy,
features are added frequently.
We recommend using a current snapshot or a working copy of the repository.

Repository check-out: 
  To keep up to date on the latest developments,
  use a `working copy`__ of the `Docutils version repository`_.

Snapshots: 
  To get a repository _`snapshot`, go to
  https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/
  and click the download snapshot button.

  Unpack in a temporary directory,
  **not** directly in Python's ``site-packages``.

Continue with the `Installation`_ instructions below.

__ docs/dev/repository.html#checking-out-the-repository
.. _Docutils version repository: docs/dev/repository.html
.. _sandbox: https://docutils.sourceforge.io/sandbox/README.html


Converting the documentation
============================

After unpacking and installing the Docutils package, the following
shell commands will generate HTML for all included documentation::

    cd <archive_directory_path>
    tools/buildhtml.py .

On Windows systems, type::

    cd <archive_directory_path>
    py tools\buildhtml.py ..

The final directory name of the ``<archive_directory_path>`` is
"docutils" for snapshots.  For official releases, the directory may be
called "docutils-X.Y.Z", where "X.Y.Z" is the release version.

Some files may generate system messages (warnings and errors).  The
``docs/user/rst/demo.txt`` file (under the archive directory) contains
five intentional errors.  (They test the error reporting mechanism!)


Running the Test Suite
======================

The test suite is documented in `Docutils Testing`_ (docs/dev/testing.txt).

To run the entire test suite, open a shell and use the following
commands::

    cd <archive_directory_path>/test
    ./alltests.py

Under Windows, type::

    cd <archive_directory_path>\test
    python alltests.py


You should see a long line of periods, one for each test, and then a
summary like this::

    Ran 1744 tests in 5.859s

    OK (skipped=1)
    Elapsed time: 6.235 seconds

The number of tests will grow over time, and the times reported will
depend on the computer running the tests.
Some test are skipped, if optional dependencies (`recommendations`_)
are missing.
The difference between the two times represents the time required to set
up the tests (import modules, create data structures, etc.).

A copy of the test output is written to the file ``alltests.out``.

If any of the tests fail, please `open a bug report`_ or `send an email`_
(see `Bugs <BUGS.html>`_).
Please include all relevant output, information about your operating
system, Python version, and Docutils version.  To see the Docutils
version, look at the test output or use ::

    docutils --version

.. _Docutils Testing: https://docutils.sourceforge.io/docs/dev/testing.html
.. _open a bug report:
   https://sourceforge.net/p/docutils/bugs/
.. _send an email: mailto:docutils-users@lists.sourceforge.net
   ?subject=Test%20suite%20failure
.. _web interface: https://sourceforge.net/p/docutils/mailman/


Getting Help
============

All documentation can be reached from the `Project Documentation
Overview`_.

The SourceForge `project page`_ has links to the tracker, mailing
lists, and code repository.

If you have further questions or need assistance with Docutils or
reStructuredText, please post a message to the Docutils-users_ mailing
list.

.. _Project Documentation Overview: docs/index.html
.. _project page: https://sourceforge.net/p/docutils
.. _Docutils-users: docs/user/mailing-lists.html#docutils-users



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 002.📜 docutils-0.20.1/docs/index.txt

==========================================
 Docutils Project Documentation Overview
==========================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2023-04-08 23:09:08 +0200 (Sa, 08. Apr 2023) $
:Revision: $Revision: 9340 $
:Copyright: This document has been placed in the public domain.

The latest working documents may be accessed individually below, or
from the ``docs`` directory of the `Docutils distribution`_.

.. _Docutils distribution: https://docutils.sourceforge.io/#download

.. code-block:: text

  .. header::
     Docutils_ | Overview | About__ | Users__ | Reference__ | Developers__

  .. _Docutils: https://docutils.sourceforge.io/
  __ `project fundamentals`_
  __ user_
  __ ref_
  __ howto_


.. .. contents:: Table of Contents


Project Fundamentals
====================

These files are for all `Docutils stakeholders`_.  They are kept at the
top level of the Docutils project directory.

.. class:: narrow run-in

:README_:  Project overview: quick-start, requirements,
           installation, and usage.
:COPYING_: Conditions for Docutils redistribution, with links to
           licenses.
:FAQ_:     Docutils Frequently Asked Questions.  If you have a
           question or issue, there's a good chance it's already
           answered here.
:BUGS_:    A list of known bugs, and how to report a bug.
:RELEASE-NOTES_: Summary of the major changes in recent releases and
           notice of future incompatible changes.
:HISTORY_: Detailed change history log.
:THANKS_:  Acknowledgements.

.. _README: ../README.html
.. .. .. _BUGS: ../BUGS.html
.. _COPYING: ../COPYING.html
.. _Docutils FAQ:
.. _FAQ: ../FAQ.html
.. _RELEASE-NOTES: ../RELEASE-NOTES.html
.. _HISTORY: ../HISTORY.html
.. _THANKS: ../THANKS.html


.. _docutils stakeholders:
.. class:: details

Docutils Stakeholders … 
    can be categorized in several groups:

    End-users:
       users of reStructuredText and the Docutils tools.
       Although some are developers (e.g. Python developers utilizing
       reStructuredText for docstrings in their source), many are not.

    Client-developers:
       developers using Docutils as a library,
       programmers developing *with* Docutils.

    Component-developers:
       those who implement application-specific components,
       directives, and/or roles, separately from Docutils.

    Core-developers:
       developers of the Docutils codebase and participants
       in the Docutils project community.

    Re-implementers:
       developers of alternate implementations of Docutils.

    There's a lot of overlap between these groups.  Most (perhaps all)
    core-developers, component-developers, client-developers, and
    re-implementers are also end-users.  Core-developers are also
    client-developers, and may also be component-developers in other
    projects.  Component-developers are also client-developers.


.. _user:

Introductory & Tutorial Material for End-Users
==============================================

Docutils-general: 
  * `Docutils Front-End Tools <user/tools.html>`__
  * `Docutils Configuration <user/config.html>`__
  * `Docutils Mailing Lists <user/mailing-lists.html>`__
  * `Docutils Link List <user/links.html>`__

Writer-specific: 
  * `Docutils HTML Writers <user/html.html>`__
  * `Easy Slide Shows With reStructuredText & S5 <user/slide-shows.html>`__
  * `Docutils LaTeX Writer <user/latex.html>`__
  * `Man Page Writer for Docutils <user/manpage.html>`__
  * `Docutils ODF/OpenOffice/odt Writer <user/odt.html>`__

`reStructuredText <https://docutils.sourceforge.io/rst.html>`_: 
  * `A ReStructuredText Primer <user/rst/quickstart.html>`__
    (see also the `text source <user/rst/quickstart.txt>`__)
  * `Quick reStructuredText <user/rst/quickref.html>`__ (user reference)
  * `reStructuredText Cheat Sheet <user/rst/cheatsheet.txt>`__ (text
    only; 1 page for syntax, 1 page directive & role reference)
  * `Demonstration <user/rst/demo.html>`_
    of most reStructuredText features
    (see also the `text source <user/rst/demo.txt>`__)

Editor support: 
  * `Emacs support for reStructuredText <user/emacs.html>`_


.. _ref:

Reference Material for All Groups
=================================

Many of these files began as developer specifications, but now that
they're mature and used by end-users and client-developers, they have
become reference material.  Successful specs evolve into refs.

Docutils-general: 
  * `The Docutils Document Tree <ref/doctree.html>`__ (incomplete)
  * `Docutils Generic DTD <ref/docutils.dtd>`__
  * `OASIS XML Exchange Table Model Declaration Module
    <ref/soextblx.dtd>`__ (CALS tables DTD module)
  * `Docutils Design Specification`_ (PEP 258)

reStructuredText_: 
  * `An Introduction to reStructuredText <ref/rst/introduction.html>`__
    (includes the `Goals <ref/rst/introduction.html#goals>`__ and
    `History <ref/rst/introduction.html#history>`__ of reStructuredText)
  * `reStructuredText Markup Specification <ref/rst/restructuredtext.html>`__
  * `reStructuredText Directives <ref/rst/directives.html>`__
  * `reStructuredText Interpreted Text Roles <ref/rst/roles.html>`__
  * `reStructuredText Standard Definition Files
    <ref/rst/definitions.html>`_
  * `LaTeX syntax for mathematics <ref/rst/mathematics.html>`__
    (syntax used in "math" directive and role)

.. _peps:

Python Enhancement Proposals
  * `PEP 256: Docstring Processing System Framework`__ is a high-level
    generic proposal.  [:PEP:`256` in the `master repository`_]
  * `PEP 257: Docstring Conventions`__ addresses docstring style and
    touches on content.  [:PEP:`257` in the `master repository`_]
  * `PEP 258: Docutils Design Specification`__ is an overview of the
    architecture of Docutils.  It documents design issues and
    implementation details.  [:PEP:`258` in the `master repository`_]
  * `PEP 287: reStructuredText Docstring Format`__ proposes a standard
    markup syntax.  [:PEP:`287` in the `master repository`_]

  Please note that PEPs in the `master repository`_ developed
  independent from the local versions after submission.

  __ peps/pep-0256.html
  __ peps/pep-0257.html
  .. _PEP 258:
  .. _Docutils Design Specification:
  __ peps/pep-0258.html
  __ peps/pep-0287.html
  .. _master repository: https://peps.python.org

Prehistoric: 
  `Setext Documents Mirror`__

  __ https://docutils.sourceforge.io/mirror/setext.html


.. _api:

API Reference Material for Client-Developers
============================================

`The Docutils Publisher <api/publisher.html>`__
  entry points for using Docutils as a library
`Docutils Runtime Settings <api/runtime-settings.html>`__
  configuration framework details
`Docutils Transforms <api/transforms.html>`__
  change the document tree in-place (resolve references, …)

The `Docutils Design Specification`_ (PEP 258) is a must-read for any
Docutils developer.


.. _howto:

Instructions for Developers
===========================

:Security: `Deploying Docutils Securely <howto/security.html>`__

* `Inside A Docutils Command-Line Front-End Tool <howto/cmdline-tool.html>`__
* `Runtime Settings Processing <dev/runtime-settings-processing.html>`__
* `Writing HTML (CSS) Stylesheets for Docutils
  <howto/html-stylesheets.html>`__
* `Docutils Internationalization <howto/i18n.html>`__
* `Creating reStructuredText Directives <howto/rst-directives.html>`__
* `Creating reStructuredText Interpreted Text Roles
  <howto/rst-roles.html>`__


.. _dev:

Development Notes and Plans for Core-Developers
===============================================

Docutils-general: 
  * `Docutils Hacker's Guide <dev/hacking.html>`__
  * `Docutils Distributor's Guide <dev/distributing.html>`__
  * `Docutils To Do List <dev/todo.html>`__
  * `Docutils Project Policies <dev/policies.html>`__
  * `Docutils Web Site <dev/website.html>`__
  * `Docutils Release Procedure <dev/release.html>`__
  * `The Docutils Subversion Repository <dev/repository.html>`__
  * `Docutils Testing <dev/testing.html>`__
  * `Docstring Semantics <dev/semantics.html>`__ (incomplete)
  * `Python Source Reader <dev/pysource.html>`_ (incomplete)
  * `Docutils Python DTD <dev/pysource.dtd>`_
  * `Plan for Enthought API Documentation Tool <dev/enthought-plan.html>`_
  * `Enthought API Documentation Tool RFP <dev/enthought-rfp.html>`_

reStructuredText_: 
  * `A Record of reStructuredText Syntax Alternatives
    <dev/rst/alternatives.html>`__
  * `Problems With StructuredText <dev/rst/problems.html>`__



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 003.📜 docutils-0.20.1/docs/user/rst/cheatsheet.txt

=====================================================
 The reStructuredText_ Cheat Sheet: Syntax Reminders
=====================================================
:Info: See <https://docutils.sourceforge.io/rst.html> for introductory docs.
:Author: David Goodger <goodger@python.org>
:Date: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
:Revision: $Revision: 8956 $
:Description: This is a "docinfo block", or bibliographic field list

.. NOTE:: If you are reading this as HTML, please read
   `<cheatsheet.txt>`_ instead to see the input syntax examples!

Section Structure
=================
Section titles are underlined or overlined & underlined.

Body Elements
=============
Grid table:

+--------------------------------+-----------------------------------+
| Paragraphs are flush-left,     | Literal block, preceded by "::":: |
| separated by blank lines.      |                                   |
|                                |     Indented                      |
|     Block quotes are indented. |                                   |
+--------------------------------+ or::                              |
| >>> print 'Doctest block'      |                                   |
| Doctest block                  | > Quoted                          |
+--------------------------------+-----------------------------------+
| | Line blocks preserve line breaks & indents. [new in 0.3.6]       |
| |     Useful for addresses, verse, and adornment-free lists; long  |
|       lines can be wrapped with continuation lines.                |
+--------------------------------------------------------------------+

Simple tables:

================  ============================================================
List Type         Examples (syntax in the `text source <cheatsheet.txt>`_)
================  ============================================================
Bullet list       * items begin with "-", "+", or "*"
Enumerated list   1. items use any variation of "1.", "A)", and "(i)"
                  #. also auto-enumerated
Definition list   Term is flush-left : optional classifier
                      Definition is indented, no blank line between
Field list        :field name: field body
Option list       -o  at least 2 spaces between option & description
================  ============================================================

================  ============================================================
Explicit Markup   Examples (visible in the `text source`_)
================  ============================================================
Footnote          .. [1] Manually numbered or [#] auto-numbered
                     (even [#labelled]) or [*] auto-symbol
Citation          .. [CIT2003] A citation.
Hyperlink Target  .. _reStructuredText: https://docutils.sourceforge.io/rst.html
                  .. _indirect target: reStructuredText_
                  .. _internal target:
Anonymous Target  __ https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html
Directive ("::")  .. image:: https://docutils.sourceforge.io/docs/user/rst/images/biohazard.png
Substitution Def  .. |substitution| replace:: like an inline directive
Comment           .. is anything else
Empty Comment     (".." on a line by itself, with blank lines before & after,
                  used to separate indentation contexts)
================  ============================================================

Inline Markup
=============
*emphasis*; **strong emphasis**; `interpreted text`; `interpreted text
with role`:emphasis:; ``inline literal text``; standalone hyperlink,
https://docutils.sourceforge.io; named reference, reStructuredText_;
`anonymous reference`__; footnote reference, [1]_; citation reference,
[CIT2003]_; |substitution|; _`inline internal target`.


Directive Quick Reference
=========================
See <https://docutils.sourceforge.io/docs/ref/rst/directives.html> for full info.

================  ============================================================
Directive Name    Description (Docutils version added to, in [brackets])
================  ============================================================
attention         Specific admonition; also "caution", "danger",
                  "error", "hint", "important", "note", "tip", "warning"
admonition        Generic titled admonition: ``.. admonition:: By The Way``
image             ``.. image:: picture.png``; many options possible
figure            Like "image", but with optional caption and legend
topic             ``.. topic:: Title``; like a mini section
sidebar           ``.. sidebar:: Title``; like a mini parallel document
parsed-literal    A literal block with parsed inline markup
rubric            ``.. rubric:: Informal Heading``
epigraph          Block quote with class="epigraph"
highlights        Block quote with class="highlights"
pull-quote        Block quote with class="pull-quote"
compound          Compound paragraphs [0.3.6]
container         Generic block-level container element [0.3.10]
table             Create a titled table [0.3.1]
list-table        Create a table from a uniform two-level bullet list [0.3.8]
csv-table         Create a table from CSV data [0.3.4]
contents          Generate a table of contents
sectnum           Automatically number sections, subsections, etc.
header, footer    Create document decorations [0.3.8]
target-notes      Create an explicit footnote for each external target
math              Mathematical notation (input in LaTeX format)
meta              Document metadata
include           Read an external reST file as if it were inline
raw               Non-reST data passed untouched to the Writer
replace           Replacement text for substitution definitions
unicode           Unicode character code conversion for substitution defs
date              Generates today's date; for substitution defs
class             Set a "class" attribute on the next element
role              Create a custom interpreted text role [0.3.2]
default-role      Set the default interpreted text role [0.3.10]
title             Set the metadata document title [0.3.10]
================  ============================================================

Interpreted Text Role Quick Reference
=====================================
See <https://docutils.sourceforge.io/docs/ref/rst/roles.html> for full info.

================  ============================================================
Role Name         Description
================  ============================================================
emphasis          Equivalent to *emphasis*
literal           Equivalent to ``literal`` but processes backslash escapes
math              Mathematical notation (input in LaTeX format)
PEP               Reference to a numbered Python Enhancement Proposal
RFC               Reference to a numbered Internet Request For Comments
raw               For non-reST data; cannot be used directly (see docs) [0.3.6]
strong            Equivalent to **strong**
sub               Subscript
sup               Superscript
title             Title reference (book, etc.); standard default role
================  ============================================================


/Part 1. 004.📜 docutils-0.20.1/docs/user/rst/demo.txt

.. This is a comment. Note how any initial comments are moved by
   transforms to after the document title, subtitle, and docinfo.

================================
 reStructuredText Demonstration
================================

.. Above is the document title, and below is the subtitle.
   They are transformed from section titles after parsing.


Examples of Syntax Constructs
===================================================

.. bibliographic fields (which also require a transform):

:Author: David Goodger
:Address: 123 Example Street
          Example, EX  Canada
          A1B 2C3
:Contact: docutils-develop@lists.sourceforge.net
:Authors: Me; Myself; I
:organization: humankind
:date: $Date: 2022-01-29 23:26:10 +0100 (Sa, 29. Jän 2022) $
:status: This is a "work in progress"
:revision: $Revision: 8995 $
:version: 1
:copyright: This document has been placed in the public domain. You
            may do with it as you wish. You may copy, modify,
            redistribute, reattribute, sell, buy, rent, lease,
            destroy, or improve it, quote it at length, excerpt,
            incorporate, collate, fold, staple, or mutilate it, or do
            anything else to it that your or anyone else's heart
            desires.
:field name: This is a generic bibliographic field.
:field name 2:
    Generic bibliographic fields may contain multiple body elements.

    Like this.

:Dedication:

    For Docutils users & co-developers.

:abstract:

    This document is a demonstration of the reStructuredText markup
    language, containing examples of all basic reStructuredText
    constructs and many advanced constructs.

.. meta::
   :keywords: reStructuredText, demonstration, demo, parser
   :description lang=en: A demonstration of the reStructuredText
       markup language, containing examples of all basic
       constructs and many advanced constructs.

.. .. contents:: Table of Contents
.. .. section-numbering::


Structural Elements
===================

Section Title
-------------

That's it, the text just above this line.

Transitions
-----------

Here's a transition:

---------

It divides the section.

Body Elements
=============

Paragraphs
----------

A paragraph.

Inline Markup
~~~~~~~~~~~~~

Paragraphs contain text and may contain inline markup: *emphasis*,
**strong emphasis**, ``inline literals``, standalone hyperlinks
(https://www.python.org), external hyperlinks (Python_), internal
cross-references (example_), external hyperlinks with embedded URIs
(`Python web site <https://www.python.org>`__), footnote references
(manually numbered [1]_, anonymous auto-numbered [#]_, labeled
auto-numbered [#label]_, or symbolic [*]_), citation references
([CIT2002]_), substitution references (|example|), and _`inline
hyperlink targets` (see Targets_ below for a reference back to here).
Character-level inline markup is also possible (although exceedingly
ugly!) in *re*\ ``Structured``\ *Text*.  Problems are indicated by
|problematic| text (generated by processing errors; this one is
intentional).

The default role for interpreted text is `Title Reference`.  Here are
some explicit interpreted text roles: a PEP reference (:PEP:`287`); an
RFC reference (:RFC:`2822`); a :sub:`subscript`; a :sup:`superscript`;
and explicit roles for :emphasis:`standard` :strong:`inline`
:literal:`markup`.

.. DO NOT RE-WRAP THE FOLLOWING PARAGRAPH!

Let's test wrapping and whitespace significance in inline literals:
``This is an example of --inline-literal --text, --including some--
strangely--hyphenated-words.  Adjust-the-width-of-your-browser-window
to see how the text is wrapped.  -- ---- --------  Now note    the
spacing    between the    words of    this sentence    (words
should    be grouped    in pairs).``

If the ``--pep-references`` option was supplied, there should be a
live link to PEP 258 here.

Bullet Lists
------------

- A bullet list

  + Nested bullet list.
  + Nested item 2.

- Item 2.

  Paragraph 2 of item 2.

  * Nested bullet list.
  * Nested item 2.

    - Third level.
    - Item 2.

  * Nested item 3.

Enumerated Lists
----------------

1. Arabic numerals.

   a) lower alpha)

      (i) (lower roman)

          A. upper alpha.

             I) upper roman)

2. Lists that don't start at 1:

   3. Three

   4. Four

   C. C

   D. D

   iii. iii

   iv. iv

#. List items may also be auto-enumerated.

Definition Lists
----------------

Term
    Definition
Term : classifier
    Definition paragraph 1.

    Definition paragraph 2.
Term
    Definition

Field Lists
-----------

:what: Field lists map field names to field bodies, like database
       records.  They are often part of an extension syntax.  They are
       an unambiguous variant of RFC 2822 fields.

:how arg1 arg2:

    The field marker is a colon, the field name, and a colon.

    The field body may contain one or more body elements, indented
    relative to the field marker.

Option Lists
------------

For listing command-line options:

-a            command-line option "a"
-b file       options can have arguments
              and long descriptions
--long        options can be long also
--input=file  long options can also have
              arguments

--very-long-option
              The description can also start on the next line.

              The description may contain multiple body elements,
              regardless of where it starts.

-x, -y, -z    Multiple options are an "option group".
-v, --verbose  Commonly-seen: short & long options.
-1 file, --one=file, --two file
              Multiple options with arguments.
/V            DOS/VMS-style options too

There must be at least two spaces between the option and the
description.

Literal Blocks
--------------

Literal blocks are indicated with a double-colon ("::") at the end of
the preceding paragraph (over there ``-->``).  They can be indented::

    if literal_block:
        text = 'is left as-is'
        spaces_and_linebreaks = 'are preserved'
        markup_processing = None

Or they can be quoted without indentation::

>> Great idea!
>
> Why didn't I think of that?

Line Blocks
-----------

| This is a line block.  It ends with a blank line.
|     Each new line begins with a vertical bar ("|").
|     Line breaks and initial indents are preserved.
| Continuation lines are wrapped portions of long lines;
  they begin with a space in place of the vertical bar.
|     The left edge of a continuation line need not be aligned with
  the left edge of the text above it.

| This is a second line block.
|
| Blank lines are permitted internally, but they must begin with a "|".

Take it away, Eric the Orchestra Leader!

    | A one, two, a one two three four
    |
    | Half a bee, philosophically,
    |     must, *ipso facto*, half not be.
    | But half the bee has got to be,
    |     *vis a vis* its entity.  D'you see?
    |
    | But can a bee be said to be
    |     or not to be an entire bee,
    |         when half the bee is not a bee,
    |             due to some ancient injury?
    |
    | Singing...

Block Quotes
------------

Block quotes consist of indented body elements:

    My theory by A. Elk.  Brackets Miss, brackets.  This theory goes
    as follows and begins now.  All brontosauruses are thin at one
    end, much much thicker in the middle and then thin again at the
    far end.  That is my theory, it is mine, and belongs to me and I
    own it, and what it is too.

    -- Anne Elk (Miss)

Doctest Blocks
--------------

>>> print 'Python-specific usage examples; begun with ">>>"'
Python-specific usage examples; begun with ">>>"
>>> print '(cut and pasted from interactive Python sessions)'
(cut and pasted from interactive Python sessions)

Tables
------

Here's a grid table followed by a simple table:

+------------------------+------------+----------+----------+
| Header row, column 1   | Header 2   | Header 3 | Header 4 |
| (header rows optional) |            |          |          |
+========================+============+==========+==========+
| body row 1, column 1   | column 2   | column 3 | column 4 |
+------------------------+------------+----------+----------+
| body row 2             | Cells may span columns.          |
+------------------------+------------+---------------------+
| body row 3             | Cells may  | - Table cells       |
+------------------------+ span rows. | - contain           |
| body row 4             |            | - body elements.    |
+------------------------+------------+----------+----------+
| body row 5             | Cells may also be     |          |
|                        | empty: ``-->``        |          |
+------------------------+-----------------------+----------+

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

Footnotes
---------

.. [1] A footnote contains body elements, consistently indented by at
   least 3 spaces.

   This is the footnote's second paragraph.

.. [#label] Footnotes may be numbered, either manually (as in [1]_) or
   automatically using a "#"-prefixed label.  This footnote has a
   label so it can be referred to from multiple places, both as a
   footnote reference ([#label]_) and as a hyperlink reference
   (label_).

.. [#] This footnote is numbered automatically and anonymously using a
   label of "#" only.

.. [*] Footnotes may also use symbols, specified with a "*" label.
   Here's a reference to the next footnote: [*]_.

.. [*] This footnote shows the next symbol in the sequence.

.. [4] Here's an unreferenced footnote, with a reference to a
   nonexistent footnote: [5]_.

Citations
---------

.. [CIT2002] Citations are text-labeled footnotes. They may be
   rendered separately and differently from footnotes.

Here's a reference to the above, [CIT2002]_, and a [nonexistent]_
citation.

Targets
-------

.. _example:

This paragraph is pointed to by the explicit "example" target. A
reference can be found under `Inline Markup`_, above. `Inline
hyperlink targets`_ are also possible.

Section headers are implicit targets, referred to by name. See
Targets_, which is a subsection of `Body Elements`_.

Explicit external targets are interpolated into references such as
"Python_".

.. _Python: https://www.python.org

Targets may be indirect and anonymous.  Thus `this phrase`__ may also
refer to the Targets_ section.

__ Targets_

Here's a `hyperlink reference without a target`_, which generates an
error.

Duplicate Target Names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Duplicate names in section headers or other implicit targets will
generate "info" (level-1) system messages.  Duplicate names in
explicit targets will generate "warning" (level-2) system messages.

Duplicate Target Names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since there are two "Duplicate Target Names" section headers, we
cannot uniquely refer to either of them by name.  If we try to (like
this: `Duplicate Target Names`_), an error is generated.

Directives
----------

.. contents:: :local:

These are just a sample of the many reStructuredText Directives.  For
others, please see
https://docutils.sourceforge.io/docs/ref/rst/directives.html.

Document Parts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An example of the "contents" directive can be seen above this section
(a local, untitled table of contents_) and at the beginning of the
document (a document-wide `table of contents`_).

Images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An image directive (also clickable -- a hyperlink reference):

.. image:: https://docutils.sourceforge.io/docs/user/rst/images/title.png
   :target: directives_

A figure directive: 

.. figure:: https://docutils.sourceforge.io/docs/user/rst/images/title.png
   :alt: reStructuredText, the markup syntax

   A figure is an image with a caption and/or a legend:

   +------------+-----------------------------------------------+
   | re         | Revised, revisited, based on 're' module.     |
   +------------+-----------------------------------------------+
   | Structured | Structure-enhanced text, structuredtext.      |
   +------------+-----------------------------------------------+
   | Text       | Well it is, isn't it?                         |
   +------------+-----------------------------------------------+

   This paragraph is also part of the legend.

Admonitions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. Attention:: Directives at large.

.. Caution::

   Don't take any wooden nickels.

.. DANGER:: Mad scientist at work!

.. Error:: Does not compute.

.. Hint:: It's bigger than a bread box.

.. Important::
   - Wash behind your ears.
   - Clean up your room.
   - Call your mother.
   - Back up your data.

.. Note:: This is a note.

.. Tip:: 15% if the service is good.

.. WARNING:: Strong prose may provoke extreme mental exertion.
   Reader discretion is strongly advised.

.. admonition:: And, by the way...

   You can make up your own admonition too.

Topics, Sidebars, and Rubrics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. sidebar:: Optional Sidebar Title
   :subtitle: Optional Subtitle

   This is a sidebar.  It is for text outside the flow of the main
   text.

   .. rubric:: This is a rubric inside a sidebar

   Sidebars often appears beside the main text with a border and
   background color.

.. topic:: Topic Title

   This is a topic.

.. rubric:: This is a rubric

Target Footnotes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use ``.. target-notes::`` detective to insert contents of all footnotes:

.. code-block:: text

    .. target-notes::

``.. target-notes::`` output is somethine like this:

.. code-block:: text
      
  [1] (1,2,3) https://peps.python.org/pep-0012
  [2] docs/user/links.html#related-applications
  [3] (1,2,3) https://pypi.org/project/pip/
  [4] (1,2,3) https://pypi.org/project/setuptools/
  [5] https://pypi.org/project/Pygments/


Replacement Text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I recommend you try |Python|_.

.. |Python| replace:: Python, *the* best language around

Compound Paragraph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. compound::

   This paragraph contains a literal block::

       Connecting... OK
       Transmitting data... OK
       Disconnecting... OK

   and thus consists of a simple paragraph, a literal block, and
   another simple paragraph.  Nonetheless it is semantically *one*
   paragraph.

This construct is called a *compound paragraph* and can be produced
with the "compound" directive.

Meta
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `“meta” directive`__ is used to specify metadata to be stored in,
e.g., HTML META__ tags or ODT file properties.

.. meta::
   :keywords: reStructuredText, test, parser
   :description lang=en: A test document, containing at least one
       example of each reStructuredText construct.

__ https://docutils.sourceforge.io/docs/ref/rst/directives.html#metadata
__ https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag


Substitution Definitions
------------------------

An inline image (|example|) example: 

.. |EXAMPLE| image:: https://docutils.sourceforge.io/docs/user/rst/images/biohazard.png

(Substitution definitions are not visible in the HTML source.)

Comments
--------

Here's one:

.. Comments begin with two dots and a space. Anything may
   follow, except for the syntax of footnotes, hyperlink
   targets, directives, or substitution definitions.

   Double-dashes -- "--" -- must be escaped somehow in HTML output.

(View the HTML source to see the comment.)

Error Handling
==============

Any errors caught during processing will generate system messages.

|*** Expect 6 errors (including this one). ***|

There should be six messages in the following, auto-generated
section, "Docutils System Messages":

.. section should be added by Docutils automatically


/Part 1. 005.📜 docutils-0.20.1/docs/user/rst/quickstart.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

A ReStructuredText Primer
=========================

:Author: Richard Jones
:Version: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents


The text below contains links that look like "(quickref__)".  These
are relative links that point to the `Quick reStructuredText`_ user
reference.  If these links don't work, please refer to the `master
quick reference`_ document.

__
.. _Quick reStructuredText: quickref.html
.. _master quick reference:
   https://docutils.sourceforge.io/docs/user/rst/quickref.html

.. Note:: This document is an informal introduction to
   reStructuredText.  The `What Next?`_ section below has links to
   further resources, including a formal reference.


Structure
---------

From the outset, let me say that "Structured Text" is probably a bit
of a misnomer.  It's more like "Relaxed Text" that uses certain
consistent patterns.  These patterns are interpreted by a HTML
converter to produce "Very Structured Text" that can be used by a web
browser.

The most basic pattern recognised is a **paragraph** (quickref__).
That's a chunk of text that is separated by blank lines (one is
enough).  Paragraphs must have the same indentation -- that is, line
up at their left edge.  Paragraphs that start indented will result in
indented quote paragraphs. For example::

  This is a paragraph.  It's quite
  short.

     This paragraph will result in an indented block of
     text, typically used for quoting other text.

  This is another one.

Results in:

  This is a paragraph.  It's quite
  short.

     This paragraph will result in an indented block of
     text, typically used for quoting other text.

  This is another one.

__ quickref.html#paragraphs


Text styles
-----------

(quickref__)

__ quickref.html#inline-markup

Inside paragraphs and other bodies of text, you may additionally mark
text for *italics* with "``*italics*``" or **bold** with
"``**bold**``".  This is called "inline markup".

If you want something to appear as a fixed-space literal, use
"````double back-quotes````".  Note that no further fiddling is done
inside the double back-quotes -- so asterisks "``*``" etc. are left
alone.

If you find that you want to use one of the "special" characters in
text, it will generally be OK -- reStructuredText is pretty smart.
For example, this lone asterisk * is handled just fine, as is the
asterisk in this equation: 5*6=30.  If you actually
want text \*surrounded by asterisks* to **not** be italicised, then
you need to indicate that the asterisk is not special.  You do this by
placing a backslash just before it, like so "``\*``" (quickref__), or
by enclosing it in double back-quotes (inline literals), like this::

    ``*``

__ quickref.html#escaping

.. Tip:: Think of inline markup as a form of (parentheses) and use it
   the same way: immediately before and after the text being marked
   up.  Inline markup by itself (surrounded by whitespace) or in the
   middle of a word won't be recognized.  See the `markup spec`__ for
   full details.

__ ../../ref/rst/restructuredtext.html#inline-markup


Lists
-----

Lists of items come in three main flavours: **enumerated**,
**bulleted** and **definitions**.  In all list cases, you may have as
many paragraphs, sublists, etc. as you want, as long as the left-hand
side of the paragraph or whatever aligns with the first line of text
in the list item.

Lists must always start a new paragraph -- that is, they must appear
after a blank line.

**enumerated** lists (numbers, letters or roman numerals; quickref__)
  __ quickref.html#enumerated-lists

  Start a line off with a number or letter followed by a period ".",
  right bracket ")" or surrounded by brackets "( )" -- whatever you're
  comfortable with.  All of the following forms are recognised::

    1. numbers

    A. upper-case letters
       and it goes over many lines

       with two paragraphs and all!

    a. lower-case letters

       3. with a sub-list starting at a different number
       4. make sure the numbers are in the correct sequence though!

    I. upper-case roman numerals

    i. lower-case roman numerals

    (1) numbers again

    1) and again

  Results in (note: the different enumerated list styles are not
  always supported by every web browser, so you may not get the full
  effect here):

  1. numbers

  A. upper-case letters
     and it goes over many lines

     with two paragraphs and all!

  a. lower-case letters

     3. with a sub-list starting at a different number
     4. make sure the numbers are in the correct sequence though!

  I. upper-case roman numerals

  i. lower-case roman numerals

  (1) numbers again

  1) and again

**bulleted** lists (quickref__)
  __ quickref.html#bullet-lists

  Just like enumerated lists, start the line off with a bullet point
  character - either "-", "+" or "*"::

    * a bullet point using "*"

      - a sub-list using "-"

        + yet another sub-list

      - another item

  Results in:

  * a bullet point using "*"

    - a sub-list using "-"

      + yet another sub-list

    - another item

**definition** lists (quickref__)
  __ quickref.html#definition-lists

  Unlike the other two, the definition lists consist of a term, and
  the definition of that term.  The format of a definition list is::

    what
      Definition lists associate a term with a definition.

    *how*
      The term is a one-line phrase, and the definition is one or more
      paragraphs or body elements, indented relative to the term.
      Blank lines are not allowed between term and definition.

  Results in:

  what
    Definition lists associate a term with a definition.

  *how*
    The term is a one-line phrase, and the definition is one or more
    paragraphs or body elements, indented relative to the term.
    Blank lines are not allowed between term and definition.


Preformatting (code samples)
----------------------------
(quickref__)

__ quickref.html#literal-blocks

To just include a chunk of preformatted, never-to-be-fiddled-with
text, finish the prior paragraph with "``::``".  The preformatted
block is finished when the text falls back to the same indentation
level as a paragraph prior to the preformatted block.  For example::

  An example::

      Whitespace, newlines, blank lines, and all kinds of markup
        (like *this* or \this) is preserved by literal blocks.
    Lookie here, I've dropped an indentation level
    (but not far enough)

  no more example

Results in:

  An example::

      Whitespace, newlines, blank lines, and all kinds of markup
        (like *this* or \this) is preserved by literal blocks.
    Lookie here, I've dropped an indentation level
    (but not far enough)

  no more example

Note that if a paragraph consists only of "``::``", then it's removed
from the output::

  ::

      This is preformatted text, and the
      last "::" paragraph is removed

Results in:

::

    This is preformatted text, and the
    last "::" paragraph is removed


Sections
--------

(quickref__)

__ quickref.html#section-structure

To break longer text up into sections, you use **section headers**.
These are a single line of text (one or more words) with adornment: an
underline alone, or an underline and an overline together, in dashes
"``-----``", equals "``======``", tildes "``~~~~~~``" or any of the
non-alphanumeric characters ``= - ` : ' " ~ ^ _ * + # < >`` that you
feel comfortable with.  An underline-only adornment is distinct from
an overline-and-underline adornment using the same character.  The
underline/overline must be at least as long as the title text.  Be
consistent, since all sections marked with the same adornment style
are deemed to be at the same level::

  Chapter 1 Title
  ===============

  Section 1.1 Title
  -----------------

  Subsection 1.1.1 Title
  ~~~~~~~~~~~~~~~~~~~~~~

  Section 1.2 Title
  -----------------

  Chapter 2 Title
  ===============

This results in the following structure, illustrated by simplified
pseudo-XML::

    <section>
        <title>
            Chapter 1 Title
        <section>
            <title>
                Section 1.1 Title
            <section>
                <title>
                    Subsection 1.1.1 Title
        <section>
            <title>
                Section 1.2 Title
    <section>
        <title>
            Chapter 2 Title

(Pseudo-XML uses indentation for nesting and has no end-tags.  It's
not possible to show actual processed output, as in the other
examples, because sections cannot exist inside block quotes.  For a
concrete example, compare the section structure of this document's
source text and processed output.)

Note that section headers are available as link targets, just using
their name.  To link to the Lists_ heading, I write "``Lists_``".  If
the heading has a space in it like `text styles`_, we need to quote
the heading "```text styles`_``".


Document Title / Subtitle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The title of the whole document is distinct from section titles and
may be formatted somewhat differently (e.g. the HTML writer by default
shows it as a centered heading).

To indicate the document title in reStructuredText, use a unique adornment
style at the beginning of the document.  To indicate the document subtitle,
use another unique adornment style immediately after the document title.  For
example::

    ================
     Document Title
    ================
    ----------
     Subtitle
    ----------

    Section Title
    =============

    ...

Note that "Document Title" and "Section Title" above both use equals
signs, but are distict and unrelated styles.  The text of
overline-and-underlined titles (but not underlined-only) may be inset
for aesthetics.


Images
------

(quickref__)

__ quickref.html#directives

To include an image in your document, you use the the ``image`` directive__.
For example::

  .. image:: https://docutils.sourceforge.io/docs/user/rst/images/biohazard.png

results in:

.. image:: https://docutils.sourceforge.io/docs/user/rst/images/biohazard.png

The ``images/biohazard.png`` part indicates the filename of the image
you wish to appear in the document. There's no restriction placed on
the image (format, size etc).  If the image is to appear in HTML and
you wish to supply additional information, you may::

  .. image:: https://docutils.sourceforge.io/docs/user/rst/images/biohazard.png
     :height: 100
     :width: 200
     :scale: 50
     :alt: alternate text

See the full `image directive documentation`__ for more info.

__ ../../ref/rst/directives.html
__ ../../ref/rst/directives.html#images


What Next?
----------

This primer introduces the most common features of reStructuredText,
but there are a lot more to explore.  The `Quick reStructuredText`_
user reference is a good place to go next.  For complete details, the
`reStructuredText Markup Specification`_ is the place to go [#]_.

Users who have questions or need assistance with Docutils or
reStructuredText should post a message to the Docutils-users_ mailing
list.

.. [#] If that relative link doesn't work, try the master document:
   https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html.

.. _reStructuredText Markup Specification:
   ../../ref/rst/restructuredtext.html
.. _Docutils-users: ../mailing-lists.html#docutils-users
.. _Docutils project web site: https://docutils.sourceforge.io/


/Part 1. 006.📜 docutils-0.20.1/docs/ref/doctree.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

============================
 The Docutils Document Tree
============================

A Guide to the Docutils DTD
===================================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9115 $
:Date: $Date: 2022-07-28 19:06:24 +0200 (Do, 28. Jul 2022) $
:Copyright: This document has been placed in the public domain.


.. .. contents:: Table of Contents
  :depth: 1


This document describes the XML data structure of Docutils_ documents:
the relationships and semantics of elements and attributes.  The
Docutils document structure is formally defined by the `Docutils
Generic DTD`_ XML document type definition, docutils.dtd_, which is
the definitive source for details of element structural relationships.

This document does not discuss implementation details.  Those can be
found in internal documentation (docstrings) for the
``docutils.nodes`` module, where the document tree data structure is
implemented in a class library.

The reader is assumed to have some familiarity with XML or SGML, and
an understanding of the data structure meaning of "tree".  For a list
of introductory articles, see `Introducing the Extensible Markup
Language (XML)`_.

The reStructuredText_ markup is used for illustrative examples
throughout this document.  For a gentle introduction, see `A
ReStructuredText Primer`_.  For complete technical details, see the
`reStructuredText Markup Specification`_.

.. _Docutils: https://docutils.sourceforge.io/
.. _Docutils Generic DTD:
.. _Docutils DTD:
.. _docutils.dtd: docutils.dtd
.. _Introducing the Extensible Markup Language (XML):
   http://xml.coverpages.org/xmlIntro.html
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _A ReStructuredText Primer: ../user/rst/quickstart.html
.. _reStructuredText Markup Specification: rst/restructuredtext.html


Element Hierarchy
===================================================

.. contents:: :local:

Below is a simplified diagram of the hierarchy of elements in the
Docutils document tree structure.  An element may contain any other
elements immediately below it in the diagram.  Notes are written in
square brackets.  Element types in parentheses indicate recursive or
one-to-many relationships; sections may contain (sub)sections, tables
contain further body elements, etc. ::

  +--------------------------------------------------------------------+
  | document  [may begin with a title, subtitle, decoration, docinfo]  |
  |                             +--------------------------------------+
  |                             | sections  [each begins with a title] |
  +-----------------------------+-------------------------+------------+
  | [body elements:]                                      | (sections) |
  |         | - literal | - lists  |       | - hyperlink  +------------+
  |         |   blocks  | - tables |       |   targets    |
  | para-   | - doctest | - block  | foot- | - sub. defs  |
  | graphs  |   blocks  |   quotes | notes | - comments   |
  +---------+-----------+----------+-------+--------------+
  | [text]+ | [text]    | (body elements)  | [text]       |
  | (inline +-----------+------------------+--------------+
  | markup) |
  +---------+

The Docutils document model uses a simple, recursive model for section
structure.  A document_ node may contain body elements and section_
elements.  Sections in turn may contain body elements and sections.
The level (depth) of a section element is determined from its physical
nesting level; unlike other document models (``<h1>`` in HTML_,
``<sect1>`` in DocBook_, ``<div1>`` in XMLSpec_) the level is not
incorporated into the element name.

The Docutils document model uses strict element content models.  Every
element has a unique structure and semantics, but elements may be
classified into general categories (below).  Only elements which are
meant to directly contain text data have a mixed content model, where
text data and inline elements may be intermixed.  This is unlike the
much looser HTML_ document model, where paragraphs and text data may
occur at the same level.

.. _HTML: https://www.w3.org/TR/html52/
.. _DocBook: https://tdg.docbook.org/tdg/5.1/
.. _XMLSpec: https://www.w3.org/XML/1998/06/xmlspec-report.htm


Structural Elements
===================

Structural elements may only contain child elements; they do not
directly contain text data.  Structural elements may contain body
elements or further structural elements.  Structural elements can only
be child elements of other structural elements.

Category members: document_, section_, topic_, sidebar_ 


Structural Subelements
----------------------

Structural subelements are child elements of structural elements.
Simple structuctural subelements (title_, subtitle_) contain text
data; the others are compound and do not directly contain text data.

Category members: title_, subtitle_, decoration_, docinfo_, meta_,
transition_


Bibliographic Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The docinfo_ element is an optional child of document_.  It groups
bibliographic elements together.  All bibliographic elements except
authors_ and field_ contain text data.  authors_ contains further
bibliographic elements (most notably author_).  field_ contains
field_name_ and field_body_ body subelements.

Category members: address_, author_, authors_, contact_, copyright_,
date_, field_, organization_, revision_, status_, version_


Decorative Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The decoration_ element is also an optional child of document_.  It
groups together elements used to generate page headers and footers.

Category members: footer_, header_


Body Elements
=============

Body elements are contained within structural elements and compound
body elements.  There are two subcategories of body elements: simple
and compound.

Category members: admonition_, attention_, block_quote_, bullet_list_,
caution_, citation_, comment_, compound_, container_, danger_,
definition_list_, doctest_block_, enumerated_list_, error_,
field_list_, figure_, footnote_, hint_, image_, important_,
line_block_, literal_block_, note_, option_list_, paragraph_,
pending_, raw_, rubric_, substitution_definition_, system_message_,
table_, target_, tip_, warning_


Simple Body Elements
--------------------

Simple body elements are empty or directly contain text data.  Those
that contain text data may also contain inline elements.  Such
elements therefore have a "mixed content model".

Category members: comment_, doctest_block_, image_, literal_block_,
math_block_, paragraph_, pending_, raw_, rubric_, substitution_definition_,
target_


Compound Body Elements
----------------------

Compound body elements contain local substructure (body subelements)
and further body elements.  They do not directly contain text data.

Category members: admonition_, attention_, block_quote_, bullet_list_,
caution_, citation_, compound_, container_, danger_, definition_list_,
enumerated_list_, error_, field_list_, figure_, footnote_, hint_,
important_, line_block, note_, option_list_, system_message_, table_,
tip_, warning_


Body Subelements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Compound body elements contain specific subelements (e.g. bullet_list_
contains list_item_).  Subelements may themselves be compound elements
(containing further child elements, like field_) or simple data
elements (containing text data, like field_name_).  These subelements
always occur within specific parent elements, never at the body
element level (beside paragraphs, etc.).

Category members (simple): attribution_, caption_, classifier_,
colspec_, field_name_, label_, line_, option_argument_,
option_string_, term_

Category members (compound): definition_, definition_list_item_,
description_, entry_, field_, field_body_, legend_, list_item_,
option_, option_group_, option_list_item_, row_, tbody_, tgroup_,
thead_


Inline Elements
===============

Inline elements directly contain text data, and may also contain
further inline elements.  Inline elements are contained within simple
body elements.  Most inline elements have a "mixed content model".

Category members: abbreviation_, acronym_, citation_reference_,
emphasis_, footnote_reference_, generated_, image_, inline_, literal_,
math_, problematic_, reference_, strong_, subscript_,
substitution_reference_, superscript_, target_, title_reference_, raw_


Element Reference
===================================================

.. contents:: :local:
              :depth: 1

Each element in the DTD (document type definition) is described in its
own section below.  Each section contains an introduction plus the
following subsections:

* Details (of element relationships and semantics):

  - Category: One or more references to the element categories in
    `Element Hierarchy`_ above.  Some elements belong to more than one
    category.

  - Analogues: Describes analogous elements in well-known document
    models such as HTML_ or DocBook_.  Lists similarities and
    differences.

  - Processing: Lists formatting or rendering recommendations for the
    element.

  - Parents: A list of elements which may contain the element.

  - Children: A list of elements which may occur within the element
    followed by the formal XML content model from the `Docutils DTD`_.

  - Attributes: Describes (or refers to descriptions of) the possible
    values and semantics of each attribute.

  - Parameter Entities: Lists the parameter entities which directly or
    indirectly include the element.

* Examples: reStructuredText_ examples are shown along with
  fragments of the document trees resulting from parsing.
  _`Pseudo-XML` is used for the results of parsing and processing.
  Pseudo-XML is a representation of XML where nesting is indicated by
  indentation and end-tags are not shown.  Some of the precision of
  real XML is given up in exchange for easier readability.  For
  example, the following are equivalent:

  - Real XML::

        <document>
        <section ids="a-title" names="a title">
        <title>A Title</title>
        <paragraph>A paragraph.</paragraph>
        </section>
        </document>

  - Pseudo-XML::

        <document>
            <section ids="a-title" names="a title">
                <title>
                    A Title
                <paragraph>
                    A paragraph.

--------------------

Many of the element reference sections below are marked "_`to be
completed`".  Please help complete this document by contributing to
its writing.


abbreviation
================

The ``abbreviation`` element is an inline element used to represent an
abbreviation being used in the document. An example of an abbreviation is 'St'
being used instead of 'Street'.


Details
-------

:Category:
    `Inline Elements`_

:Analogues:
    ``abbreviation`` is analogous to the HTML "abbr" element.

:Parents:
     All elements employing the `%inline.elements;`_ parameter entity in their
     content models may contain ``abbreviation``.

:Children:
    ``abbreviation`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``abbreviation`` element contains only the `common attributes`_.


Examples
--------

The ``abbreviation`` element is not exposed in default restructured text. It
can only be accessed through custom roles.

Pseudo-XML_ example from a custom `:abbr:` role::

    <paragraph>
        <abbreviation explanation="Street">
            St
        is a common abbreviation for "street".


acronym
===========

`To be completed`_.


address
===========

The ``address`` element holds the surface mailing address information
for the author (individual or group) of the document, or a third-party
contact address.  Its structure is identical to that of the
literal_block_ element: whitespace is significant, especially
newlines.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``address`` is analogous to the DocBook "address" element.

:Processing:
    As with the literal_block_ element, newlines and other whitespace
    is significant and must be preserved.  However, a monospaced
    typeface need not be used.

    See also docinfo_.

:Parents:
    The following elements may contain ``address``: docinfo_, authors_

:Children:
    ``address`` elements contain text data plus `inline elements`_.

     .. parsed-literal::

         `%text.model;`_

:Attributes:
    The ``address`` element contains the `common attributes`_ plus
    `xml:space`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``address``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Address: 123 Example Ave.
              Example, EX

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <address>
                123 Example Ave.
                Example, EX

See docinfo_ for a more complete example, including processing
context.


admonition
==============

This element is a generic, titled admonition.  Also see the specific
admonition elements Docutils offers (in alphabetical order): caution_,
danger_, error_, hint_, important_, note_, tip_, warning_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``admonition`` has no direct analogues in common DTDs.  It can be
    emulated with primitives and type effects.

    The specific admonitions caution_, note_, tip_, and warning_
    are analogous to the respective DocBook elements.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.).

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``admonition``.

:Children:
    ``admonition`` elements begin with a title_ and may contain one or
    more `body elements`_. ::

        (title_, (`%body.elements;`_)+)

:Attributes:
    The ``admonition`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``admonition``.  The `%structure.model;`_ parameter entity
    indirectly includes ``admonition``.


Examples
--------

reStructuredText source::

    .. admonition:: And, by the way...

       You can make up your own admonition too.

Pseudo-XML_ fragment from simple parsing::

    <admonition class="admonition-and-by-the-way">
        <title>
            And, by the way...
        <paragraph>
            You can make up your own admonition too.


attention
=============

The ``attention`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): caution_, danger_, error_,
hint_, important_, note_, tip_, warning_, and the generic admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``attention`` has no direct analogues in common DTDs.  It can be
    emulated with primitives and type effects.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Attention!" (or similar).


:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``attention``.

:Children:
    ``attention`` elements contain one or more `body elements`_.

     .. parsed-literal::

         (`%body.elements;`_)+

:Attributes:
    The ``attention`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``attention``.  The `%structure.model;`_ parameter entity
    indirectly includes ``attention``.


Examples
--------

reStructuredText source::

    .. Attention:: All your base are belong to us.

Pseudo-XML_ fragment from simple parsing::

    <attention>
        <paragraph>
            All your base are belong to us.


attribution
===============

`To be completed`_.


author
==========

The ``author`` element holds the name of the author of the document.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``author`` is analogous to the DocBook "author" element.

:Processing:
    See docinfo_.

:Parents:
    The following elements may contain ``author``: docinfo_, authors_

:Children:
    ``author`` elements may contain text data plus `inline elements`_.

     .. parsed-literal::

         `%text.model;`_

:Attributes:
    The ``author`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``author``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Author: J. Random Hacker

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <author>
                J. Random Hacker

See docinfo_ for a more complete example, including processing
context.


authors
===========

The ``authors`` element is a container for author information for
documents with multiple authors.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``authors`` is analogous to the DocBook "authors" element.

:Processing:
    See docinfo_.

:Parents:
    Only the docinfo_ element contains ``authors``.

:Children:
    ``authors`` elements may contain the following elements: author_,
    organization_, address_, contact_::

        ((author, organization?, address?, contact?)+)

:Attributes:
    The ``authors`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``authors``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Authors: J. Random Hacker; Jane Doe

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <authors>
                <author>
                    J. Random Hacker
                <author>
                    Jane Doe

In reStructuredText, multiple author's names are separated with
semicolons (";") or commas (","); semicolons take precedence.  There
is currently no way to represent the author's organization, address,
or contact in a reStructuredText "Authors" field.

See docinfo_ for a more complete example, including processing
context.


block_quote
===============

The ``block_quote`` element is used for quotations set off from the
main text (standalone).


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``block_quote`` is analogous to the "blockquote" element in both
    HTML and DocBook.

:Processing:
    ``block_quote`` elements serve to set their contents off from the
    main text, typically with indentation and/or other decoration.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``block_quote``.

:Children:
    ``block_quote`` elements contain `body elements`_ followed by an
    optional attribution_ element.

     .. parsed-literal::

         ((`%body.elements;`_)+, attribution?)

:Attributes:
    The ``block_quote`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``block_quote``.  The `%structure.model;`_ parameter entity
    indirectly includes ``block_quote``.


Examples
--------

reStructuredText source::

    As a great paleontologist once said,

        This theory, that is mine, is mine.

        -- Anne Elk (Miss)

Pseudo-XML_ fragment from simple parsing::

    <paragraph>
        As a great paleontologist once said,
    <block_quote>
        <paragraph>
            This theory, that is mine, is mine.
        <attribution>
            Anne Elk (Miss)


bullet_list
===============

The ``bullet_list`` element contains list_item_ elements which are
uniformly marked with bullets.  Bullets are typically simple dingbats
(symbols) such as circles and squares.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``bullet_list`` is analogous to the HTML "ul" element and to the
    DocBook "itemizedlist" element.  HTML's "ul" is short for
    "unordered list", which we consider to be a misnomer.  "Unordered"
    implies that the list items may be randomly rearranged without
    affecting the meaning of the list.  Bullet lists *are* often
    ordered; the ordering is simply left implicit.

:Processing:
    Each list item should begin a new vertical block, prefaced by a
    bullet/dingbat.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``bullet_list``.

:Children:
    ``bullet_list`` elements contain one or more list_item_ elements::

        (list_item_+)

:Attributes:
    The ``bullet_list`` element contains the `common attributes`_
    plus bullet_.

    ``bullet`` is used to record the style of bullet from the input
    data.  In documents processed from reStructuredText_, it contains
    one of "-", "+", or "*".  It may be ignored in processing.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``bullet_list``.  The `%structure.model;`_ parameter entity
    indirectly includes ``bullet_list``.


Examples
--------

reStructuredText_ source::

    - Item 1, paragraph 1.

      Item 1, paragraph 2.

    - Item 2.

Pseudo-XML_ fragment from simple parsing::

    <bullet_list bullet="-">
        <list_item>
            <paragraph>
                Item 1, paragraph 1.
            <paragraph>
                Item 1, paragraph 2.
        <list_item>
            <paragraph>
                Item 2.

See list_item_ for another example.


caption
===========

`To be completed`_.


caution
===========

The ``caution`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, danger_, error_,
hint_, important_, note_, tip_, warning_, and the generic admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``caution`` is analogous to the `DocBook "caution"`_ element.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Caution" (or similar).

.. _DocBook "caution": https://tdg.docbook.org/tdg/5.1/caution.html

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``caution``.

:Children:
    ``caution`` elements contain one or more `body elements`_.

     .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``caution`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``caution``.  The `%structure.model;`_ parameter entity
    indirectly includes ``caution``.


Examples
--------

reStructuredText source::

    .. Caution:: Don't take any wooden nickels.

Pseudo-XML_ fragment from simple parsing::

    <caution>
        <paragraph>
            Don't take any wooden nickels.


citation
============

`To be completed`_.


citation_reference
======================

`To be completed`_.


classifier
==============

The ``classifier`` element contains the classification or type of the
term_ being defined in a definition_list_.  For example, it can be
used to indicate the type of a variable.


Details
-------

:Category:
    `Body Subelements`_ (simple)

:Analogues:
    ``classifier`` has no direct analogues in common DTDs.  It can be
    emulated with primitives or type effects.

:Processing:
    See definition_list_item_.

:Parents:
    Only the definition_list_item_ element contains ``classifier``.

:Children:
    ``classifier`` elements may contain text data plus `inline elements`_.

     .. parsed-literal::

         `%text.model;`_

:Attributes:
    The ``classifier`` element contains only the `common attributes`_.


Examples
--------

Here is a hypothetical data dictionary.  reStructuredText_ source::

    name : string
        Customer name.
    i : int
        Temporary index variable.

Pseudo-XML_ fragment from simple parsing::

    <definition_list>
        <definition_list_item>
            <term>
                name
            <classifier>
                string
            <definition>
                <paragraph>
                    Customer name.
        <definition_list_item>
            <term>
                i
            <classifier>
                int
            <definition>
                <paragraph>
                    Temporary index variable.


colspec
===========

Specifications for a column in a table_.


Details
-------

:Category:
    `Body Subelements`_ (simple)

:Analogues:
    ``colspec`` is based on the [exchange-table-model]_ and
    analogous to the DocBook "colspec" element.

:Processing:
    The ``colspec`` element contains layout information for the parent
    table_.

:Parents:
    Only the tgroup_ element contains ``colspec``.

:Children:
    ``colspec`` is an empty element and has no children.

:Attributes:
    The ``colspec`` element contains the optional "colnum", "colname",
    "colwidth", "colsep", "rowsep", "align", "char", and "charoff"
    attributes defined in the exchange-table-model_ plus the
    `common attributes`_ and `stub`_.

    Docutils uses only colwidth_ and stub_.

    .. attention::

       In contrast to the definition in the exchange-table-model_,
       unitless values of the "colwidth" are interpreted as proportional
       values, not fixed values with unit "pt".

       .. The reference implementation `html4css2` converts column
          widths values to percentages.

       Future versions of Docutils may use the standard form
       ``number*``, e.g., “5*” for 5 times the proportion.

Examples
--------

See table_.


comment
===========

`To be completed`_.


compound
============

`To be completed`_.


contact
===========

The ``contact`` element holds contact information for the author
(individual or group) of the document, or a third-party contact.  It
is typically used for an email or web address.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``contact`` is analogous to the DocBook "email" element.  The HTML
    "address" element serves a similar purpose.

:Processing:
    See docinfo_.

:Parents:
    The following elements may contain ``contact``: docinfo_, authors_

:Children:
    ``contact`` elements may contain text data plus `inline
    elements`_.

     .. parsed-literal::

         `%text.model;`_

:Attributes:
    The ``contact`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``contact``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Contact: jrh@example.com

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <contact>
                <reference refuri="mailto:jrh@example.com">
                    jrh@example.com

See docinfo_ for a more complete example, including processing
context.


container
=============

`To be completed`_.


copyright
=============

The ``copyright`` element contains the document's copyright statement.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``copyright`` is analogous to the DocBook "copyright" element.

:Processing:
    See docinfo_.

:Parents:
    Only the docinfo_ element contains ``copyright``.

:Children:
    ``copyright`` elements may contain text data plus `inline
    elements`_.

     .. parsed-literal::

         `%text.model;`_

:Attributes:
    The ``copyright`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``copyright``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Copyright: This document has been placed in the public domain.

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <copyright>
                This document has been placed in the public domain.

See docinfo_ for a more complete example, including processing
context.


danger
==========

The ``danger`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, caution_, error_,
hint_, important_, note_, tip_, warning_, and the generic admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``danger`` has no direct analogues in common DTDs.  It can be
    emulated with primitives and type effects.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "!DANGER!" (or similar).

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``danger``.

:Children:
    ``danger`` elements contain one or more `body elements`_.

     .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``danger`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``danger``.  The `%structure.model;`_ parameter entity
    indirectly includes ``danger``.


Examples
--------

reStructuredText source::

    .. DANGER:: Mad scientist at work!

Pseudo-XML_ fragment from simple parsing::

    <danger>
        <paragraph>
            Mad scientist at work!


date
========

The ``date`` element contains the date of publication, release, or
last modification of the document.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``date`` is analogous to the DocBook "date" element.

:Processing:
    Often used with the RCS/CVS keyword "Date".  See docinfo_.

:Parents:
    Only the docinfo_ element contains ``date``.

:Children:
    ``date`` elements may contain text data plus `inline elements`_.

     .. parsed-literal::

         `%text.model;`_

:Attributes:
    The ``date`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``date``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Date: 2002-08-20

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <date>
                2002-08-20

See docinfo_ for a more complete example, including processing
context.


decoration
==============

The ``decoration`` element is a container for header_ and footer_
elements and potential future extensions.  These elements are used for
notes, time/datestamp, processing information, etc.


Details
-------

:Category:
    `Structural Subelements`_

:Analogues:
    There are no direct analogies to ``decoration`` in HTML or in
    DocBook.  Equivalents are typically constructed from primitives
    and/or generated by the processing system.

:Processing:
    See the individual `decorative elements`_.

:Parents:
    Only the document_ element contains ``decoration``.

:Children:
    ``decoration`` elements may contain `decorative elements`_.

     .. parsed-literal::

         (header_?, footer_?)

Although the content model doesn't specifically require contents, no
empty ``decoration`` elements are ever created.

:Attributes:
    The ``decoration`` element contains only the `common attributes`_.


Examples
--------

reStructuredText_ source::

    A paragraph.

Complete pseudo-XML_ result after parsing and applying transforms,
assuming that the datestamp command-line option or configuration
setting has been supplied::

    <document>
        <decoration>
            <footer>
                <paragraph>
                    Generated on: 2002-08-20.
        <paragraph>
            A paragraph.


definition
==============

The ``definition`` element is a container for the body elements used
to define a term_ in a definition_list_.


Details
-------

:Category:
    `Body Subelements`_ (compound)

:Analogues:
    ``definition`` is analogous to the HTML "dd" element and to the
    DocBook "listitem" element (inside a "variablelistentry" element).

:Processing:
    See definition_list_item_.

:Parents:
    Only definition_list_item_ elements contain ``definition``.

:Children:
    ``definition`` elements contain `body elements`_.

     .. parsed-literal::

         (`%body.elements;`_)+

:Attributes:
    The ``definition`` element contains only the `common attributes`_.


Examples
--------

See the examples for the definition_list_, definition_list_item_, and
classifier_ elements.


definition_list
===================

The ``definition_list`` element contains a list of terms and their
definitions.  It can be used for glossaries or dictionaries, to
describe or classify things, for dialogues, or to itemize subtopics
(such as in this reference).


Details
-------

:Category:
    `Compound Body Elements`_

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``definition_list``.

:Children:
    ``definition_list`` elements contain one or more
    definition_list_item_ elements.

:Analogues:
    ``definition_list`` is analogous to the HTML "dl" element and to
    the DocBook "variablelist" element.

:Processing:
    See definition_list_item_.

:Attributes:
    The ``definition_list`` element contains only the `common
    attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``definition_list``.  The `%structure.model;`_ parameter entity
    indirectly includes ``definition_list``.


Examples
--------

reStructuredText_ source::

    Term
      Definition.

    Term : classifier
        The ' : ' indicates a classifier in
        definition list item terms only.

Pseudo-XML_ fragment from simple parsing::

    <definition_list>
        <definition_list_item>
            <term>
                Term
            <definition>
                <paragraph>
                    Definition.
        <definition_list_item>
            <term>
                Term
            <classifier>
                classifier
            <definition>
                <paragraph>
                    The ' : ' indicates a classifier in
                    definition list item terms only.

See definition_list_item_ and classifier_ for further examples.


definition_list_item
========================

The ``definition_list_item`` element contains a single
term_/definition_ pair (with optional classifier_).


Details
-------

:Category:
    `Body Subelements`_ (compound)

:Analogues:
    ``definition_list_item`` is analogous to the DocBook
    "variablelistentry" element.

:Processing:
    The optional classifier_ can be rendered differently from the
    term_.  They should be separated visually, typically by spaces
    plus a colon or dash.

:Parents:
    Only the definition_list_ element contains
    ``definition_list_item``.

:Children:
    ``definition_list_item`` elements each contain a single term_,
    an optional classifier_, and a definition_::

        (term, classifier?, definition)

:Attributes:
    The ``definition_list_item`` element contains only the `common
    attributes`_.


Examples
--------

reStructuredText_ source::

    Tyrannosaurus Rex : carnivore
        Big and scary; the "Tyrant King".

    Brontosaurus : herbivore
        All brontosauruses are thin at one end,
        much much thicker in the middle
        and then thin again at the far end.

        -- Anne Elk (Miss)

Pseudo-XML_ fragment from simple parsing::

    <definition_list>
        <definition_list_item>
            <term>
                Tyrannosaurus Rex
            <classifier>
                carnivore
            <definition>
                <paragraph>
                    Big and scary; the "Tyrant King".
        <definition_list_item>
            <term>
                Brontosaurus
            <classifier>
                herbivore
            <definition>
                <paragraph>
                    All brontosauruses are thin at one end,
                    much much thicker in the middle
                    and then thin again at the far end.
                <paragraph>
                    -- Anne Elk (Miss)

See definition_list_ and classifier_ for further examples.


description
===============

The ``description`` element contains body elements, describing the
purpose or effect of a command-line option or group of options.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``description`` has no direct analogues in common DTDs.

:Processing:
    See option_list_.

:Parents:
    Only the option_list_item_ element contains ``description``.

:Children:
    ``description`` elements may contain `body elements`_.

    .. parsed-literal::

       (`%body.elements;`_)+

:Attributes:
    The ``description`` element contains only the `common attributes`_.


Examples
--------

See the examples for the option_list_ element.


docinfo
===========

The ``docinfo`` element is a container for displayed document bibliographic
data, or meta-data (data about the document).  It corresponds to the
front matter of a book, such as the title page and copyright page.

See also the meta_ element (for "hidden" meta-data).

Details
-------

:Category:
    `Structural Subelements`_

:Analogues:
    ``docinfo`` is analogous to DocBook "info" elements ("bookinfo"
    etc.).  There are no directly analogous HTML elements; the "meta"
    element carries some of the same information, albeit invisibly.

:Processing:
    The ``docinfo`` element may be rendered as a two-column table or
    in other styles.  It may even be invisible or omitted from the
    processed output.  Meta-data may be extracted from ``docinfo``
    children; for example, HTML ``<meta>`` tags may be constructed.

    When Docutils_ transforms a reStructuredText_ field_list_ into a
    ``docinfo`` element (see the examples below), RCS/CVS keywords are
    normally stripped from simple (one paragraph) field bodies.  For
    complete details, please see `RCS Keywords`_ in the
    `reStructuredText Markup Specification`_.

    .. _RCS Keywords: rst/restructuredtext.html#rcs-keywords

:Parents:
    Only the document_ element contains ``docinfo``.

:Children:
    ``docinfo`` elements contain `bibliographic elements`_.

    .. parsed-literal::

        (`%bibliographic.elements;`_)+

:Attributes:
    The ``docinfo`` element contains only the `common attributes`_.


Examples
--------

Docinfo is represented in reStructuredText_ by a field_list_ in a
bibliographic context: the first non-comment element of a document_,
after any document title_/subtitle_.  The field list is transformed
into a ``docinfo`` element and its children by a transform.  Source::

    Docinfo Example
    ===============

    :Author: J. Random Hacker
    :Contact: jrh@example.com
    :Date: 2002-08-18
    :Status: Work In Progress
    :Version: 1
    :Filename: $RCSfile$
    :Copyright: This document has been placed in the public domain.

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="docinfo-example" names="docinfo example">
        <title>
            Docinfo Example
        <docinfo>
            <author>
                J. Random Hacker
            <contact>
                <reference refuri="mailto:jrh@example.com">
                    jrh@example.com
            <date>
                2002-08-18
            <status>
                Work In Progress
            <version>
                1
            <field>
                <field_name>
                    Filename
                <field_body>
                    <paragraph>
                        doctree.txt
            <copyright>
                This document has been placed in the public domain.

Note that "Filename" is a non-standard ``docinfo`` field, so becomes a
generic ``field`` element.  Also note that the "RCSfile" keyword
syntax has been stripped from the "Filename" data.

See field_list_ for an example in a non-bibliographic context.  Also
see the individual examples for the various `bibliographic elements`_.


doctest_block
=================

The ``doctest_block`` element is a Python-specific variant of
literal_block_.  It is a block of text where line breaks and
whitespace are significant and must be preserved.  ``doctest_block``
elements are used for interactive Python interpreter sessions, which
are distinguished by their input prompt: ``>>>``.  They are meant to
illustrate usage by example, and provide an elegant and powerful
testing environment via the `doctest module`_ in the Python standard
library.

.. _doctest module:
   https://docs.python.org/3/library/doctest.html


Details
-------

:Category:
    `Simple Body Elements`_

:Analogues:
    ``doctest_block`` is analogous to the HTML "pre" element and to
    the DocBook "programlisting" and "screen" elements.

:Processing:
    As with literal_block_, ``doctest_block`` elements are typically
    rendered in a monospaced typeface.  It is crucial that all
    whitespace and line breaks are preserved in the rendered form.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``doctest_block``.

:Children:
    ``doctest_block`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

       `%text.model;`_

:Attributes:
    The ``doctest_block`` element contains the `common attributes`_
    plus `xml:space`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``doctest_block``.  The `%structure.model;`_ parameter entity
    indirectly includes ``doctest_block``.


Examples
--------

reStructuredText source::

    This is an ordinary paragraph.

    >>> print 'this is a Doctest block'
    this is a Doctest block

Pseudo-XML_ fragment from simple parsing::

    <paragraph>
        This is an ordinary paragraph.
    <doctest_block xml:space="preserve">
        >>> print 'this is a Doctest block'
        this is a Doctest block


document
============

The ``document`` element is the root (topmost) element of the Docutils
document tree.  ``document`` is the direct or indirect ancestor of
every other element in the tree.  It encloses the entire document
tree.  It is the starting point for a document.


Details
-------

:Category:
    `Structural Elements`_

:Analogues:
    ``document`` is analogous to the HTML "html" element and to
    several DocBook elements such as "book".

:Parents:
    The ``document`` element has no parents.

:Children:
    ``document`` elements may contain `structural subelements`_,
    `structural elements`_, and `body elements`_.

    .. parsed-literal::

        ( (title_, subtitle_?)?,
          decoration_?,
          (docinfo_, transition_?)?,
          `%structure.model;`_ )

Depending on the source of the data and the stage of processing, the
"document" may not initially contain a "title".  A document title is
not directly representable in reStructuredText_.  Instead, a lone
top-level section may have its title promoted to become the document
title_, and similarly for a lone second-level (sub)section's title to
become the document subtitle_.

The contents of "decoration_" may be specified in a document,
constructed programmatically, or both.  The "docinfo_" may be
transformed from an initial field_list_.

See the `%structure.model;`_ parameter entity for details of the body
of a ``document``.

:Attributes:
    The ``document`` element contains the `common attributes`_ (ids_,
    names_, dupnames_, source_, and classes_), plus an optional
    `title attribute`_ which stores the document title metadata.

Examples
--------

reStructuredText_ source::

    A Title
    =======

    A paragraph.

Complete pseudo-XML_ result from simple parsing::

    <document>
        <section ids="a-title" names="a title">
            <title>
                A Title
            <paragraph>
                A paragraph.

After applying transforms, the section title is promoted to become the
document title::

    <document ids="a-title" names="a title">
        <title>
            A Title
        <paragraph>
            A paragraph.


emphasis
============

`To be completed`_.


entry
=========

`To be completed`_.


enumerated_list
===================

The ``enumerated_list`` element contains list_item_ elements which are
uniformly marked with enumerator labels.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``enumerated_list`` is analogous to the HTML "ol" element and to
    the DocBook "orderedlist" element.

:Processing:
    Each list item should begin a new vertical block, prefaced by a
    enumeration marker (such as "1.").

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``enumerated_list``.

:Children:
    ``enumerated_list`` elements contain one or more list_item_
    elements::

        (list_item+)

:Attributes:
    The ``enumerated_list`` element contains the `common attributes`_
    plus enumtype_,
    prefix_, suffix_, and start_.

    ``enumtype`` is used to record the intended enumeration sequence,
    one of "arabic" (1, 2, 3, ...), "loweralpha" (a, b, c, ..., z),
    "upperalpha" (A, B, C, ..., Z), "lowerroman" (i, ii, iii, iv, ...,
    mmmmcmxcix [4999]), or "upperroman" (I, II, III, IV, ...,
    MMMMCMXCIX [4999]).

    ``prefix`` stores the formatting characters used before the
    enumerator.  In documents originating from reStructuredText_ data,
    it will contain either "" (empty string) or "(" (left
    parenthesis).  It may or may not affect processing.

    ``suffix`` stores the formatting characters used after the
    enumerator.  In documents originating from reStructuredText_ data,
    it will contain either "." (period) or ")" (right parenthesis).
    Depending on the capabilities of the output format, this attribute
    may or may not affect processing.

    ``start`` contains the ordinal value of the first item in the
    list, in decimal.  For lists beginning at value 1 ("1", "a", "A",
    "i", or "I"), this attribute may be omitted.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``enumerated_list``.  The `%structure.model;`_ parameter entity
    indirectly includes ``enumerated_list``.


Examples
--------

reStructuredText_ source::

    1. Item 1.

       (A) Item A.
       (B) Item B.
       (C) Item C.

    2. Item 2.

Pseudo-XML_ fragment from simple parsing::

    <enumerated_list enumtype="arabic" prefix="" suffix=".">
        <list_item>
            <paragraph>
                Item 1.
            <enumerated_list enumtype="upperalpha" prefix="(" suffix=")">
                <list_item>
                    <paragraph>
                        Item A.
                <list_item>
                    <paragraph>
                        Item B.
                <list_item>
                    <paragraph>
                        Item C.
        <list_item>
            <paragraph>
                Item 2.

See list_item_ for another example.


error
=========

The ``error`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, caution_,
danger_, hint_, important_, note_, tip_, warning_, and the generic
admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``error`` has no direct analogues in common DTDs.  It can be
    emulated with primitives and type effects.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Error" (or similar).

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``error``.

:Children:
    ``error`` elements contain one or more `body elements`_.

    .. parsed-literal::

       (`%body.elements;`_)+

:Attributes:
    The ``error`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``error``.  The `%structure.model;`_ parameter entity indirectly
    includes ``error``.


Examples
--------

reStructuredText source::

    .. Error:: Does not compute.

Pseudo-XML_ fragment from simple parsing::

    <error>
        <paragraph>
            Does not compute.


field
=========

The ``field`` element contains a pair of field_name_ and field_body_
elements.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``field`` has no direct analogues in common DTDs.

:Processing:
    See field_list_.

:Parents:
    The following elements may contain ``field``: docinfo_,
    field_list_

:Children:
    Each ``field`` element contains one field_name_ and one
    field_body_ element::

        (field_name, field_body)

:Attributes:
    The ``field`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``field``.


Examples
--------

See the examples for the field_list_ and docinfo_ elements.


field_body
==============

The ``field_body`` element contains body elements.  It is analogous to
a database field's data.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``field_body`` has no direct analogues in common DTDs.

:Processing:
    See field_list_.

:Parents:
    Only the field_ element contains ``field_body``.

:Children:
    ``field_body`` elements may contain `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)*

:Attributes:
    The ``field_body`` element contains only the `common attributes`_.


Examples
--------

See the examples for the field_list_ and docinfo_ elements.


field_list
==============

The ``field_list`` element contains two-column table-like structures
resembling database records (label & data pairs).  Field lists are
often meant for further processing.  In reStructuredText_, field lists
are used to represent bibliographic fields (contents of the docinfo_
element) and `directive options`_.

Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``field_list`` has no direct analogues in common DTDs.  It can be
    emulated with primitives such as tables.

:Processing:
    A ``field_list`` is typically rendered as a two-column list, where
    the first column contains "labels" (usually with a colon suffix).
    However, field lists are often used for extension syntax or
    special processing.  Such structures do not survive as field lists
    to be rendered.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``field_list``.

:Children:
    ``field_list`` elements contain one or more field_ elements. ::

        (field+)

:Attributes:
    The ``field_list`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``field_list``.  The `%structure.model;`_ parameter entity
    indirectly includes ``field_list``.


Examples
--------

reStructuredText_ source::

    :Author: Me
    :Version: 1
    :Date: 2001-08-11
    :Parameter i: integer

Pseudo-XML_ fragment from simple parsing::

    <field_list>
        <field>
            <field_name>
                Author
            <field_body>
                <paragraph>
                    Me
        <field>
            <field_name>
                Version
            <field_body>
                <paragraph>
                    1
        <field>
            <field_name>
                Date
            <field_body>
                <paragraph>
                    2001-08-11
        <field>
            <field_name>
                Parameter i
            <field_body>
                <paragraph>
                    integer

.. _directive options: rst/restructuredtext.html#directive-options


field_name
==============

The ``field_name`` element contains text; it is analogous to a
database field's name.


Details
-------

:Category:
    `Body Subelements`_ (simple)

:Analogues:
    ``field_name`` has no direct analogues in common DTDs.

:Processing:
    See field_list_.

:Parents:
    Only the field_ element contains ``field_name``.

:Children:
    ``field_name`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``field_name`` element contains only the `common attributes`_.


Examples
--------

See the examples for the field_list_ and docinfo_ elements.


figure
==========

`To be completed`_.


footer
==========

The ``footer`` element is a container element whose contents are meant
to appear at the bottom of a web page, or repeated at the bottom of
every printed page.  The ``footer`` element may contain processing
information (datestamp, a link to Docutils_, etc.) as well as custom
content.


Details
-------

:Category:
    `Decorative Elements`_

:Analogues:
    ``footer`` is analogous to the HTML5 "footer" element.
    There are no direct analogies to ``footer`` in HTML4 or DocBook.
    Equivalents are typically constructed from primitives and/or
    generated by the processing system.

:Parents:
    Only the decoration_ element contains ``footer``.

:Children:
    ``footer`` elements may contain `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``footer`` element contains only the `common attributes`_.


Examples
--------

reStructuredText_ source::

    A paragraph.

Complete pseudo-XML_ result after parsing and applying transforms,
assuming that the datestamp command-line option or configuration
setting has been supplied::

    <document>
        <decoration>
            <footer>
                <paragraph>
                    Generated on: 2002-08-20.
        <paragraph>
            A paragraph.


footnote
============

The ``footnote`` element is used for labeled notes_ that provide
additional context to a passage of text (*footnotes* or *endnotes*).
The corresponding footnote mark in running text is set by the
`footnote_reference`_ element.

.. _notes: https://en.wikipedia.org/wiki/Note_(typography)


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``footnote`` has no direct analogues in DocBook or HTML.

    The `DocBook "footnote"`_ element combines features of ``footnote``
    and footnote_reference_.

    The DPub ARIA role `"doc-footnote"`__ may be used to mark a (conforming__)
    `HTML emulation`__ as "ancillary information, such as a citation or
    commentary, that provides additional context to a referenced passage
    of text".

    For collections of notes that occur at the end of a section, the
    the DPub ARIA role `"doc-endnotes"`__ is more appropriate.

    The corresponding types in the `EPUB 3 Structural Semantics
    Vocabulary`__ are "footnote" and "endnote".

    .. _DocBook "footnote": https://tdg.docbook.org/tdg/5.1/footnote.html
    __ https://www.w3.org/TR/dpub-aria-1.0/#doc-footnote
    __ https://www.w3.org/TR/html-aria/#docconformance
    __ https://www.w3.org/TR/html51/
       common-idioms-without-dedicated-elements.html#footnotes
    __ https://www.w3.org/TR/dpub-aria-1.0/#doc-endnotes
    __ https://www.w3.org/TR/epub-ssv-11/#notes

:Processing:
    A ``footnote`` element should be set off from the rest of the
    document, e.g. with a border or using a smaller font size.

    Footnotes may "float" to the bottom or margin of a page or a
    dedicated section.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``footnote``.

:Children:
    ``footnote`` elements begin with an optional label_
    and contain `body elements`_.

    .. parsed-literal::

        (label?, (`%body.elements;`_)+)

:Attributes:
    The ``footnote`` element contains the `common attributes`_
    plus auto_ and backrefs_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``footnote``.  The `%structure.model;`_ parameter entity indirectly
    includes ``footnote``.


Examples
--------

reStructuredText_ uses `explicit markup blocks`_ for footnotes::

    .. [1] This is a footnote.

Pseudo-XML_ fragment from simple parsing::

    <footnote ids="id1" names="1">
        <label>
            1
        <paragraph>
            This is a footnote.

.. _explicit markup blocks: rst/restructuredtext.html#explicit-markup-blocks


footnote_reference
======================

The ``footnote_reference`` element is an inline element representing a
cross reference to a footnote_ (a footnote mark).


Details
-------

:Category:
    `Inline Elements`_

:Analogues:
    The ``footnote_reference`` element resembles the `DocBook
    "footnoteref"`_ element or the LaTeX ``\footnotemark`` command.

    There is no equivalent in HTML. The ``<a>`` element can be used
    to provide a link to the corresponding footnote.

    .. _DocBook "footnoteref": https://tdg.docbook.org/tdg/5.1/footnoteref.html

:Processing:
    A ``footnote_reference`` should generate a mark matching the label_
    of the referenced footnote. The mark is typically formatted as
    superscript or enclosed i square brackets.

:Parents:
    All elements employing the `%inline.elements;`_ parameter entities in
    their content models may contain ``footnote-reference``.

:Children:
    ``footnote_reference`` elements may contain text data. ::

        (#PCDATA)

:Attributes:
    The ``footnote_reference`` element contains the `common attributes`_
    plus auto_, refid_, and refname_.


Examples
--------

reStructuredText source fragment::

    [#]_ is an auto-numbered footnote reference.

    .. [#] Auto-numbered footnote 1.

Pseudo-XML_ fragment from simple parsing::

    <paragraph>
        <footnote_reference auto="1" ids="id1">
         is an auto-numbered footnote reference.
    <footnote auto="1" ids="id3">
        <paragraph>
            Auto-numbered footnote 1.

The ``references.Footnotes`` Docutils transform_ resolves this to::

    <paragraph>
        <footnote_reference auto="1" ids="id1" refid="id2">
            1
         is an auto-numbered footnote reference.
    <footnote auto="1" backrefs="id1" ids="id2" names="1">
        <label>
            1
        <paragraph>
            Auto-numbered footnote 1.

.. _transform: api/.html


generated
=============

Docutils wraps ``generated`` elements around text that is inserted
(generated) by Docutils; i.e., text that was not in the document, like
section numbers inserted by the "sectnum" directive.

`To be completed`_.


header
==========

The ``header`` element is a container element whose contents are meant
to appear at the top of a web page, or at the top of every printed
page.


Details
-------

:Category:
    `Decorative Elements`_

:Analogues:
    ``header`` is analogous to the HTML5 "header" element.
    There are no direct analogies to ``header`` in HTML4 or DocBook.
    Equivalents are typically constructed from primitives and/or
    generated by the processing system.

:Parents:
    Only the decoration_ element contains ``header``.

:Children:
    ``header`` elements may contain `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``header`` element contains only the `common attributes`_.


Examples
--------

reStructuredText source fragment::

    .. header:: This space for rent.

Pseudo-XML_ fragment from simple parsing::

    <document>
        <decoration>
            <header>
                <paragraph>
                    This space for rent.


hint
========

The ``hint`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, caution_,
danger_, error_, important_, note_, tip_, warning_, and the generic
admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``hint`` has no direct analogues in common DTDs.  It can be
    emulated with primitives and type effects.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Hint" (or similar).

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``hint``.

:Children:
    ``hint`` elements contain one or more `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``hint`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``hint``.  The `%structure.model;`_ parameter entity indirectly
    includes ``hint``.


Examples
--------

reStructuredText source::

    .. Hint:: It's bigger than a bread box.

Pseudo-XML_ fragment from simple parsing::

    <hint>
        <paragraph>
            It's bigger than a bread box.


image
=========

:Attributes:
    The ``image`` element contains the `common attributes`_
    plus uri, align_, alt, height_, width_, and scale_.

`To be completed`_.


important
=============

The ``important`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, caution_,
danger_, error_, hint_, note_, tip_, warning_, and the generic
admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``important`` is analogous to the `DocBook "important"`_ element.

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Important" (or similar).

.. _DocBook "important": https://tdg.docbook.org/tdg/5.1/important.html

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``important``.

:Children:
    ``important`` elements contain one or more `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``important`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``important``.  The `%structure.model;`_ parameter entity
    indirectly includes ``important``.


Examples
--------

reStructuredText source::

    .. Important::

       * Wash behind your ears.
       * Clean up your room.
       * Back up your data.
       * Call your mother.

Pseudo-XML_ fragment from simple parsing::

    <important>
        <bullet_list>
            <list_item>
                <paragraph>
                    Wash behind your ears.
            <list_item>
                <paragraph>
                    Clean up your room.
            <list_item>
                <paragraph>
                    Back up your data.
            <list_item>
                <paragraph>
                    Call your mother.


inline
==========

The ``inline`` element is a generic inline container.

Details
-------

:Category:
    `Inline Elements`_

:Analogues:
    ``inline`` is analogous to the HTML "span" element.

:Processing:
    Writers typically pass the classes_ attribute to the output document
    and leave styling to the backend or a custom stylesheet_. They may
    also process the classes_ attribute and convert the ``inline``
    element to a specific element or render the content distinctly
    for specific class values. Moreover, writers may ignore the classes
    attribute and render the content as ordinary text.

:Parents:
    All elements employing the `%inline.elements;`_ parameter entities in
    their content models may contain ``inline``.

:Children:
    ``inline`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``inline`` element contains the `common attributes`_.


Examples
--------

`Custom interpreted text roles`_ create ``inline`` elements (unless they
are based on a `standard role`_).

reStructuredText source fragment::

    .. role:: custom

    An example of using :custom:`interpreted text`

Pseudo-XML_ fragment from simple parsing::


    <paragraph>
        An example of using
        <inline classes="custom">
            interpreted text

.. _stylesheet: ../user/config.html#stylesheet
.. _custom interpreted text roles:
   rst/directives.html#custom-interpreted-text-roles
.. _standard role: rst/roles.html


label
=========

`To be completed`_.


legend
==========

`To be completed`_.


line
========

The ``line`` element contains a single line of text, part of a
`line_block`_.


Details
-------

:Category:
    `Body Subelements`_ (simple)

:Parents:
    Only the `line_block`_ element contains ``line``.

:Children:
    ``line`` elements may contain text data plus `inline elements`_.

:Analogues:
    ``line`` has no direct analogues in common DTDs.  It can be
    emulated with primitives or type effects.

:Processing:
    See `line_block`_.

:Parents:
    All elements employing the `%inline.elements;`_ parameter entities in
    their content models may contain ``inline``.

:Children:
    ``inline`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``line`` element contains the `common attributes`_.


Examples
--------

See `line_block`_.


line_block
==============

The ``line_block`` element contains a sequence of lines and nested
line blocks.  Line breaks (implied between elements) and leading
whitespace (indicated by nesting) is significant and must be
preserved.  ``line_block`` elements are commonly used for verse and
addresses.  See `literal_block`_ for an alternative useful for program
listings and interactive computer sessions.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``line_block`` is analogous to the DocBook "literallayout" element
    and to the HTML "pre" element (with modifications to typeface
    styles).

:Processing:
    Unlike ``literal_block``, ``line_block`` elements are typically
    rendered in an ordinary text typeface.  It is crucial that leading
    whitespace and line breaks are preserved in the rendered form.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``line_block``.

:Children:
    ``line_block`` elements may contain line_ elements and nested
    line_block_ elements. ::

        (line | line_block)+

:Attributes:
    The ``line_block`` element contains the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``line_block``.  The `%structure.model;`_ parameter entity
    indirectly includes ``line_block``.


Examples
--------

Example source::

    Take it away, Eric the Orchestra Leader!

    | A one, two, a one two three four
    |
    | Half a bee, philosophically,
    |     must, *ipso facto*, half not be.
    | But half the bee has got to be,
    |     *vis a vis* its entity.  D'you see?
    |
    | But can a bee be said to be
    |     or not to be an entire bee,
    |         when half the bee is not a bee,
    |             due to some ancient injury?
    |
    | Singing...

Pseudo-XML_ fragment from simple parsing::

    <paragraph>
        Take it away, Eric the Orchestra Leader!
    <line_block>
        <line>
            A one, two, a one two three four
        <line>
        <line>
            Half a bee, philosophically,
        <line_block>
            <line>
                must,
                <emphasis>
                    ipso facto
                , half not be.
        <line>
            But half the bee has got to be,
        <line_block>
            <line>
                <emphasis>
                    vis a vis
                 its entity.  D'you see?
            <line>
        <line>
            But can a bee be said to be
        <line_block>
            <line>
                or not to be an entire bee,
            <line_block>
                <line>
                    when half the bee is not a bee,
                <line_block>
                    <line>
                        due to some ancient injury?
                    <line>
        <line>
            Singing...


list_item
=============

The ``list_item`` element is a container for the elements of a list
item.


Details
-------

:Category:
    `Body Subelements`_ (compound)

:Analogues:
    ``list_item`` is analogous to the HTML "li" element and to the
    DocBook "listitem" element.

:Processing:
    See bullet_list_ or enumerated_list_.

:Parents:
    The bullet_list_ and enumerated_list_ elements contain
    ``list_item``.

:Children:
    ``list_item`` elements may contain `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)*

:Attributes:
    The ``list_item`` element contains only the `common attributes`_.


Examples
--------

reStructuredText_ source::

    1. Outer list, item 1.

       * Inner list, item 1.
       * Inner list, item 2.

    2. Outer list, item 2.

Pseudo-XML_ fragment from simple parsing::

    <enumerated_list enumtype="arabic" prefix="" suffix=".">
        <list_item>
            <paragraph>
                Outer list, item 1.
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>
                        Inner list, item 1.
                <list_item>
                    <paragraph>
                        Inner list, item 2.
        <list_item>
            <paragraph>
                Outer list, item 2.

See bullet_list_ or enumerated_list_ for further examples.


literal
===========

`To be completed`_.


literal_block
=================

The ``literal_block`` element contains a block of text where line
breaks and whitespace are significant and must be preserved.
``literal_block`` elements are commonly used for program listings and
interactive computer sessions.  See `line_block`_ for an alternative
useful for verse and addresses.


Details
-------

:Category:
    `Simple Body Elements`_

:Analogues:
    ``literal_block`` is analogous to the HTML "pre" element and to
    the DocBook "programlisting" and "screen" elements.

:Processing:
    ``literal_block`` elements are typically rendered in a monospaced
    typeface.  It is crucial that all whitespace and line breaks are
    preserved in the rendered form.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``literal_block``.

:Children:
    ``literal_block`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``literal_block`` element contains the `common attributes`_
    plus `xml:space`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``literal_block``.  The `%structure.model;`_ parameter entity
    indirectly includes ``literal_block``.


Examples
--------

reStructuredText source::

    Here is a literal block::

        if literal_block:
            text = 'is left as-is'
            spaces_and_linebreaks = 'are preserved'
            markup_processing = None

Pseudo-XML_ fragment from simple parsing::

    <paragraph>
        Here is a literal block:
    <literal_block xml:space="preserve">
        if literal_block:
            text = 'is left as-is'
            spaces_and_linebreaks = 'are preserved'
            markup_processing = None

math
========

The ``math`` element contains text in `LaTeX math format` [#latex-math]_
that is typeset as mathematical notation (inline formula).

If the output format does not support math typesetting, the content is
inserted verbatim.

Details
-------

:Category:
    `Inline Elements`_

:Analogues:
    ``math`` is analogous to a MathML "math" element or
    the LaTeX (``$ math $``) mode.

:Processing:
    Rendered as mathematical notation.

:Parents:
    All elements employing the `%inline.elements;`_ parameter entities in
    their content models may contain ``math``.

:Children:
    ``math`` elements may contain text data.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``math`` element contains the `common attributes`_.

.. [#latex-math] For details of the supported mathematical language, see
   the `"math" directive`_

.. _"math" directive: rst/directives.html#math


math_block
==============

The ``math_block`` element contains a block of text in `LaTeX math
format` [#latex-math]_ that is typeset as mathematical notation
(display formula). The ``math_block`` element is generated during
the initial parse from a `"math" directive`_.

If the output format does not support math typesetting, the content is
inserted verbatim.

Details
-------

:Category:
    `Simple Body Elements`_

:Analogues:
    ``math_block`` is analogous to a LaTeX "equation*" environment or
    a MathML "math" element displayed as block-level element.

:Processing:
    Rendered in a block as mathematical notation, typically centered or with
    indentation

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``math_block``.

:Children:
    ``math_block`` elements may contain text data. ::

        (#PCDATA)

:Attributes:
    The ``math`` element contains the `common attributes`_.

meta
========

The ``meta`` element is a container for "hidden" document
bibliographic data, or meta-data (data about the document).
It corresponds to HTML META tags.

See also the docinfo_ element for displayed meta-data.
The document's `title attribute`_ stores the metadate document title.


Details
-------

:Category:
    `Structural Subelements`_

:Analogues:
    ``meta`` is analogous to the HTML "meta" element
    or the file properties in ODT or PDF documents.

:Processing:
    The ``meta`` element is stored as metadata if the export format
    supports this. It is typically invisible and may be omitted from
    the processed output.

    Meta-data may also be extracted from docinfo_ children
    or the document_ attributes (title).

:Parents:
    Only the document_ element contains ``meta``.

:Children:
    None.


Example
-------

The `"meta" directive`_ is used to create a ``meta`` element.
reStructuredText_ source::

    .. meta::
       :description lang=en: An amusing story
       :description lang=fr: Un histoire amusant

Pseudo-XML_ fragment from simple parsing::

    <meta content="An amusing story" lang="en" name="description">
    <meta content="Un histoire amusant" lang="fr" name="description">

.. _"meta" directive: rst/directives.html#meta


note
========

The ``note`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, caution_,
danger_, error_, hint_, important_, tip_, warning_, and the generic
admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``note`` is analogous to the `DocBook "note"`_ element.

    .. _DocBook "note": https://tdg.docbook.org/tdg/5.1/note.html

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Note" (or similar).


:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``note``.

:Children:
    ``note`` elements contain one or more `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``note`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``note``.  The `%structure.model;`_ parameter entity indirectly
    includes ``note``.


Examples
--------

reStructuredText source::

    .. Note:: Admonitions can be handy to break up a
       long boring technical document.

Pseudo-XML_ fragment from simple parsing::

    <note>
        <paragraph>
            Admonitions can be handy to break up a
            long boring technical document.

option
==========

The ``option`` element groups an option string together with zero or
more option argument placeholders.  Note that reStructuredText_
currently supports only one argument per option.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``option`` has no direct analogues in common DTDs.

:Processing:
    See option_list_.

:Parents:
    Only the option_group_ element contains ``option``.

:Children:
    Each ``option`` element contains one option_string_ and zero or
    more option_argument_ elements. ::

        (option_string, option_argument*)

:Attributes:
    The ``option`` element contains only the `common attributes`_.


Examples
--------

See the examples for the option_list_ element.


option_argument
===================

The ``option_argument`` element contains placeholder text for option
arguments.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``option_argument`` has no direct analogues in common DTDs.

:Processing:
    The value of the "delimiter" attribute is prefixed to the
    ``option_argument``, separating it from its option_string_ or a
    preceding ``option_argument``.  The ``option_argument`` text is
    typically rendered in a monospaced typeface, possibly italicized
    or otherwise altered to indicate its placeholder nature.

:Parents:
    Only the option_ element contains ``option_argument``.

:Children:
    ``option_argument`` elements contain text data only. ::

        (#PCDATA)

:Attributes:
    The ``option_argument`` element contains the `common attributes`_
    plus delimiter_.

    ``delimiter`` contains the text preceding the ``option_argument``:
    either the text separating it from the option_string_ (typically
    either "=" or " ") or the text between option arguments (typically
    either "," or " ").


Examples
--------

See the examples for the option_list_ element.


option_group
================

The ``option_group`` element groups together one or more option_
elements, all synonyms.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``option_group`` has no direct analogues in common DTDs.

:Processing:
    Typically option_ elements within an ``option_group`` are joined
    together in a comma-separated list.

:Parents:
    Only the option_list_item_ element contains ``option_group``.

:Children:
    ``option_group`` elements contain one or more option_ elements. ::

        (option+)

:Attributes:
    The ``option_group`` element contains only the `common attributes`_.

Examples
--------

See the examples for the option_list_ element.


option_list
===============

Each ``option_list`` element contains a two-column list of
command-line options and descriptions, documenting a program's
options.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``option_list`` has no direct analogues in common DTDs.  It can be
    emulated with primitives such as tables.

:Processing:
    An ``option_list`` is typically rendered as a two-column list,
    where the first column contains option strings and arguments, and
    the second column contains descriptions.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``option_list``.

:Children:
    ``option_list`` elements contain one or more option_list_item_
    elements. ::

        (option_list_item+)

:Attributes:
    The ``option_list`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``option_list``.  The `%structure.model;`_ parameter entity
    indirectly includes ``option_list``.


Examples
--------

reStructuredText_ source::

    -a            command-line option "a"
    -1 file, --one=file, --two file
                  Multiple options with arguments.

Pseudo-XML_ fragment from simple parsing::

    <option_list>
        <option_list_item>
            <option_group>
                <option>
                    <option_string>
                        -a
            <description>
                <paragraph>
                    command-line option "a"
        <option_list_item>
            <option_group>
                <option>
                    <option_string>
                        -1
                    <option_argument delimiter=" ">
                        file
                <option>
                    <option_string>
                        --one
                    <option_argument delimiter="=">
                        file
                <option>
                    <option_string>
                        --two
                    <option_argument delimiter=" ">
                        file
            <description>
                <paragraph>
                    Multiple options with arguments.


option_list_item
====================

The ``option_list_item`` element is a container for a pair of
option_group_ and description_ elements.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``option_list_item`` has no direct analogues in common DTDs.

:Processing:
    See option_list_.

:Parents:
    Only the option_list_ element contains ``option_list_item``.

:Children:
    Each ``option_list_item`` element contains one option_group_ and
    one description_ element. ::

        (option_group, description)

:Attributes:
    The ``option_list_item`` element contains only the `common attributes`_.


Examples
--------

See the examples for the option_list_ element.


option_string
=================

The ``option_string`` element contains the text of a command-line
option.


Details
-------

:Category:
    `Body Subelements`_

:Analogues:
    ``option_string`` has no direct analogues in common DTDs.

:Processing:
    The ``option_string`` text is typically rendered in a monospaced
    typeface.

:Parents:
    Only the option_ element contains ``option_string``.

:Children:
    ``option_string`` elements contain text data only. ::

        (#PCDATA)

:Attributes:
    The ``option_string`` element contains only the `common attributes`_.


Examples
--------

See the examples for the option_list_ element.


organization
================

The ``organization`` element contains the name of document author's
organization, or the organization responsible for the document.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``organization`` is analogous to the DocBook "orgname",
    "corpname", or "publishername" elements.

:Processing:
    See docinfo_.

:Parents:
    Only the docinfo_ element contains ``organization``.

:Children:
    ``organization`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``organization`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``organization``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Organization: Humankind

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <organization>
                Humankind

See docinfo_ for a more complete example, including processing
context.


paragraph
=============

The ``paragraph`` element contains the text and inline elements of a
single paragraph, a fundamental building block of documents.


Details
-------

:Category:
    `Simple Body Elements`_

:Analogues:
    ``paragraph`` is analogous to the HTML "p" element and to the
    DocBook "para" elements.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``paragraph``.

:Children:
    ``paragraph`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``paragraph`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``paragraph``.  The `%structure.model;`_ parameter entity
    indirectly includes ``paragraph``.


Examples
--------

reStructuredText_ source::

    A paragraph.

Pseudo-XML_ fragment from simple parsing::

    <paragraph>
        A paragraph.


pending
===========

`To be completed`_.


problematic
===============

`To be completed`_.


raw
=======

`To be completed`_.


reference
=============

`To be completed`_.


revision
============

The ``revision`` element contains the revision number of the document.
It can be used alone or in conjunction with version_.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``revision`` is analogous to but simpler than the DocBook
    "revision" element.  It closely matches the DocBook "revnumber"
    element, but in a simpler context.

:Processing:
    Often used with the RCS/CVS keyword "Revision".  See docinfo_.

:Parents:
    Only the docinfo_ element contains ``revision``.

:Children:
    ``revision`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``revision`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``revision``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Version: 1
    :Revision: b

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <version>
                1
            <revision>
                b

See docinfo_ for a more complete example, including processing
context.


row
=======

`To be completed`_.


rubric
==========

     rubric n. 1. a title, heading, or the like, in a manuscript,
     book, statute, etc., written or printed in red or otherwise
     distinguished from the rest of the text. ...

     -- Random House Webster's College Dictionary, 1991

A rubric is like an informal heading that doesn't correspond to the
document's structure.

`To be completed`_.


section
===========

The ``section`` element is the main unit of hierarchy for Docutils
documents.  Docutils ``section`` elements are a recursive structure; a
``section`` may contain other ``section`` elements, without limit.
Paragraphs and other body elements may occur before a ``section``, but
not after it.


Details
-------

:Category:
    `Structural Elements`_

:Analogues:
    ``section`` is analogous to the recursive "section" elements in
    DocBook and HTML5.

:Parents:
    The following elements may contain ``section``: document_,
    section_

:Children:
    ``section`` elements begin with a title_, and may contain `body
    elements`_ as well as transition_, topic_, and sidebar_ elements.

    .. parsed-literal::

        (title_, `%structure.model;`_)

    See the `%structure.model;`_ parameter entity for details of the body
    of a ``section``.

:Attributes:
    The ``section`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%section.elements;`_ parameter entity directly includes
    ``section``.  The `%structure.model;`_ parameter entity indirectly
    includes ``section``.


Examples
--------

reStructuredText_ source::

    Title 1
    =======
    Paragraph 1.

    Title 2
    -------
    Paragraph 2.

    Title 3
    =======
    Paragraph 3.

    Title 4
    -------
    Paragraph 4.

Complete pseudo-XML_ result after parsing::

    <document>
        <section ids="title-1" names="title 1">
            <title>
                Title 1
            <paragraph>
                Paragraph 1.
            <section ids="title-2" names="title 2">
                <title>
                    Title 2
                <paragraph>
                    Paragraph 2.
        <section ids="title-3" names="title 3">
            <title>
                Title 3
            <paragraph>
                Paragraph 3.
            <section ids="title-4" names="title 4">
                <title>
                    Title 4
                <paragraph>
                    Paragraph 4.


sidebar
===========

Sidebars are like miniature, parallel documents that occur inside
other documents, providing related or reference material.  A
``sidebar`` is typically offset by a border and "floats" to the side
of the page; the document's main text may flow around it.  Sidebars
can also be likened to super-footnotes; their content is outside of
the flow of the document's main text.

The ``sidebar`` element is a nonrecursive section_-like construct
which may occur at the top level of a section_ wherever a body element
(list, table, etc.) is allowed.  In other words, ``sidebar`` elements
cannot nest inside body elements, so you can't have a ``sidebar``
inside a ``table`` or a ``list``, or inside another ``sidebar`` (or
topic_).


Details
-------

:Category:
    `Structural Elements`_

:Analogues:
    ``sidebar`` is analogous to the DocBook "sidebar" element.

:Processing:
    A ``sidebar`` element should be set off from the rest of the
    document somehow, typically with a border.  Sidebars typically
    "float" to the side of the page and the document's main text flows
    around them.

:Parents:
    The following elements may contain ``sidebar``: document_,
    section_

:Children:
    ``sidebar`` elements begin with optional title_ and subtitle_
    and contain `body elements`_ and topic_ elements.

    .. parsed-literal::

        (title, subtitle?,
         (`%body.elements;`_ | topic)+)

:Attributes:
    The ``sidebar`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%structure.model;`_ parameter entity directly includes
    ``sidebar``.


Examples
--------

The `"sidebar" directive`_ is used to create a ``sidebar`` element.
reStructuredText_ source::

    .. sidebar:: Optional Title
       :subtitle: If Desired

       Body.

Pseudo-XML_ fragment from simple parsing::

    <sidebar>
        <title>
            Optional Title
        <subtitle>
            If Desired
        <paragraph>
            Body.

.. _"sidebar" directive: rst/directives.html#sidebar


status
==========

The ``status`` element contains a status statement for the document,
such as "Draft", "Final", "Work In Progress", etc.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``status`` is analogous to the DocBook "status" element.

:Processing:
    See docinfo_.

:Parents:
    Only the docinfo_ element contains ``status``.

:Children:
    ``status`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``status`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``status``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Status: Work In Progress

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <status>
                Work In Progress

See docinfo_ for a more complete example, including processing
context.


strong
==========

`To be completed`_.


subscript
=============

`To be completed`_.


substitution_definition
===========================

`To be completed`_.


substitution_reference
==========================

`To be completed`_.


subtitle
============

The ``subtitle`` element stores the subtitle of a document_.


Details
-------

:Category:
    `Structural Subelements`_

:Analogues:
    ``subtitle`` is analogous to HTML header elements ("h2" etc.) and
    to the DocBook "subtitle" element.

:Processing:
    A document's subtitle is usually rendered smaller than its title_.

:Parents:
    The document_ and sidebar_ elements may contain ``subtitle``.

:Children:
    ``subtitle`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``subtitle`` element contains only the `common attributes`_.


Examples
--------

reStructuredText_ source::

    =======
     Title
    =======
    ----------
     Subtitle
    ----------

    A paragraph.

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="title" names="title">
        <title>
            Title
        <subtitle ids="subtitle" names="subtitle">
            Subtitle
        <paragraph>
            A paragraph.

Note how two section levels have collapsed, promoting their titles to
become the document's title and subtitle.  Since there is only one
structural element (document), the subsection's ``ids`` and ``names``
attributes are stored in the ``subtitle`` element.


superscript
===============

`To be completed`_.


system_message
==================

`To be completed`_.


table
=========

The ``table`` element identifies a data arrangement with rows and columns.

Docutils tables are based on the `Exchange subset of the CALS-table
model` [exchange-table-model]_. [#]_

.. [#] The interpretation of column widths in colspec_ differs from the
   specification.

Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``table`` is analogous to the HTML "table" element.

:Processing:
    Content is rendered in rows and columns.

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``table``.

:Children:
    ``table`` elements begin with an optional title_ (caption) and may
    contain one or more `tgroup`_ elements. ::

        (title?, tgroup+)

:Attributes:
    The ``table`` element contains the attributes frame, colsep, rowsep,
    and pgwide defined in the exchange-table-model_, the
    `common attributes`_, align_, and width_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``table``.  The `%structure.model;`_ parameter entity
    indirectly includes ``table``.

Examples
--------

In reStructuredText, tables can specified via the 
table__, csv-table_, or list-table_ directives or directly as
`grid table`_ or `simple table`_, e.g. ::

    ======== ====
     bread   £2
     butter  £30
    ======== ====

Pseudo-XML_ fragment from simple parsing::

    <table>
        <tgroup cols="2">
            <colspec colwidth="8">
            <colspec colwidth="4">
            <tbody>
                <row>
                    <entry>
                        <paragraph>
                            bread
                    <entry>
                        <paragraph>
                            £2
                <row>
                    <entry>
                        <paragraph>
                            butter
                    <entry>
                        <paragraph>
                            £30

__ rst/directives.html#table
.. _csv-table: rst/directives.html#csv-table
.. _list-table: rst/directives.html#list-table
.. _grid table: rst/restructuredtext.html#grid-tables
.. _simple table: rst/restructuredtext.html#simple-tables

.. [exchange-table-model] `XML Exchange Table Model DTD`, OASIS Technical
   Memorandum 9901:1999, http://www.oasis-open.org/html/tm9901.html.

target
==========

`To be completed`_.


tbody
=========

`To be completed`_.


term
========

The ``term`` element contains a word or phrase being defined in a
definition_list_.


Details
-------

:Category:
    `Body Subelements`_ (simple)

:Analogues:
    ``term`` is analogous to the HTML "dt" element and to the DocBook
    "term" element.

:Processing:
    See definition_list_item_.

:Parents:
    Only the definition_list_item_ element contains ``term``.

:Children:
    ``term`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``term`` element contains only the `common attributes`_.


Examples
--------

See the examples for the definition_list_, definition_list_item_, and
classifier_ elements.


tgroup
==========

See [exchange-table-model]_.
.. parsed-literal::

    (colspec_\*, thead_\?, tbody_)


`To be completed`_.


thead
=========

`To be completed`_.


tip
=======

The ``tip`` element is an admonition, a distinctive and self-contained
notice.  Also see the other admonition elements Docutils offers (in
alphabetical order): attention_, caution_, danger_, error_, hint_,
important_, note_, warning_, and the generic admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``tip`` is analogous to the `DocBook "tip"`_ element.

  .. _DocBook "tip": https://tdg.docbook.org/tdg/5.1/tip.html

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Tip" (or similar).

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``tip``.

:Children:
    ``tip`` elements contain one or more `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``tip`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes ``tip``.
    The `%structure.model;`_ parameter entity indirectly includes
    ``tip``.


Examples
--------

reStructuredText source::

    .. Tip:: 15% if the service is good.

Pseudo-XML_ fragment from simple parsing::

    <tip>
        <paragraph>
            15% if the service is good.


.. _title:

title
=========

The ``title`` element stores the title of a document_, section_,
sidebar_, table_, topic_, or generic admonition_.


Details
-------

:Category:
    `Structural Subelements`_

:Analogues:
    ``title`` is analogous to HTML "title" and header ("h1" etc.)
    elements, and to the DocBook "title" element.

:Parents:
    The following elements may contain ``title``: admonition_, document_,
    section_, sidebar_, table_, topic_.

:Children:
    ``title`` elements may contain text data plus `inline elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``title`` element contains the `common attributes`_
    plus refid_ and auto_.

    ``refid`` is used as a backlink to a table of contents entry.

    ``auto`` is used to indicate (with value "1") that the ``title``
    has been numbered automatically.


Examples
--------

reStructuredText_ source::

    A Title
    =======

    A paragraph.

Pseudo-XML_ fragment from simple parsing::

    <section ids="a-title" names="a title">
        <title>
            A Title
        <paragraph>
            A paragraph.


title_reference
===================

`To be completed`_.


topic
=========

The ``topic`` element is a nonrecursive section_-like construct which
may occur at the top level of a section_ wherever a body element
(list, table, etc.) is allowed.  In other words, ``topic`` elements
cannot nest inside body elements, so you can't have a ``topic`` inside
a ``table`` or a ``list``, or inside another ``topic``.


Details
-------

:Category:
    `Structural Elements`_

:Analogues:
    ``topic`` is analogous to the DocBook "simplesect" element.

:Processing:
    A ``topic`` element should be set off from the rest of the
    document somehow, such as with indentation or a border.

:Parents:
    The following elements may contain ``topic``: document_, section_,
    sidebar_

:Children:
    ``topic`` elements begin with a title_ and may contain `body
    elements`_.

    .. parsed-literal::

        (title?, (`%body.elements;`_)+)

:Attributes:
    The ``topic`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%structure.model;`_ parameter entity directly includes
    ``topic``.


Examples
--------

The `"topic" directive`_ is used to create a ``topic`` element.
reStructuredText_ source::

    .. topic:: Title

       Body.

Pseudo-XML_ fragment from simple parsing::

    <topic>
        <title>
            Title
        <paragraph>
            Body.

.. _"topic" directive: rst/directives.html#topic


transition
==============

The ``transition`` element is commonly seen in novels and short
fiction, as a gap spanning one or more lines, with or without a type
ornament such as a row of asterisks.  Transitions separate body
elements and sections, dividing a section into untitled divisions.  A
transition may not begin or end a section [#]_ or document, nor may
two transitions be immediately adjacent.

See `Doctree Representation of Transitions`__ in `A Record of
reStructuredText Syntax Alternatives`__.

.. [#] In reStructuredText markup, a transition may appear to fall at
   the end of a section immediately before another section.  A
   transform recognizes this case and moves the transition so it
   separates the sections.

__ ../dev/rst/alternatives.html#doctree-representation-of-transitions
__ ../dev/rst/alternatives.html


Details
-------

:Category:
    `Structural Subelements`_

:Analogues:
    ``transition`` is analogous to the HTML "hr" element.

:Processing:
    The ``transition`` element is typically rendered as vertical
    whitespace (more than that separating paragraphs), with or without
    a horizontal line or row of asterisks.  In novels, transitions are
    often represented as a row of three well-spaced asterisks with
    vertical space above and below.

:Parents:
    The following elements may contain ``transition``: document_,
    section_

:Children:
    The ``transition`` element has no content.

:Attributes:
    The ``transition`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%structure.model;`_ parameter entity directly includes
    ``transition``.


Examples
--------

reStructuredText_ source::

    Paragraph 1.

    --------

    Paragraph 2.

Complete pseudo-XML_ result after parsing::

    <document>
        <paragraph>
            Paragraph 1.
        <transition>
        <paragraph>
            Paragraph 2.


version
===========

The ``version`` element contains the version number of the document.
It can be used alone or in conjunction with revision_.


Details
-------

:Category:
    `Bibliographic Elements`_

:Analogues:
    ``version`` may be considered analogous to the DocBook "revision",
    "revnumber", or "biblioid" elements.

:Processing:
    Sometimes used with the RCS/CVS keyword "Revision".  See docinfo_
    and revision_.

:Parents:
    Only the docinfo_ element contains ``version``.

:Children:
    ``version`` elements may contain text data plus `inline
    elements`_.

    .. parsed-literal::

        `%text.model;`_

:Attributes:
    The ``version`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``version``.


Examples
--------

reStructuredText_ source::

    Document Title
    ==============

    :Version: 1.1

Complete pseudo-XML_ result after parsing and applying transforms::

    <document ids="document-title" names="document title">
        <title>
            Document Title
        <docinfo>
            <version>
                1.1

See docinfo_ for a more complete example, including processing
context.


warning
===========

The ``warning`` element is an admonition, a distinctive and
self-contained notice.  Also see the other admonition elements
Docutils offers (in alphabetical order): attention_, caution_,
danger_, error_, hint_, important_, note_, tip_,
and the generic admonition_.


Details
-------

:Category:
    `Compound Body Elements`_

:Analogues:
    ``warning`` is analogous to the `DocBook "warning"`_ element.

    .. _DocBook "warning": https://tdg.docbook.org/tdg/5.1/warning.html

:Processing:
    Rendered distinctly (inset and/or in a box, etc.), with the
    generated title "Warning" (or similar).

:Parents:
    All elements employing the `%body.elements;`_ or
    `%structure.model;`_ parameter entities in their content models
    may contain ``warning``.

:Children:
    ``warning`` elements contain one or more `body elements`_.

    .. parsed-literal::

        (`%body.elements;`_)+

:Attributes:
    The ``warning`` element contains only the `common attributes`_.

:Parameter Entities:
    The `%body.elements;`_ parameter entity directly includes
    ``warning``.  The `%structure.model;`_ parameter entity indirectly
    includes ``warning``.


Examples
--------

reStructuredText source::

    .. WARNING:: Reader discretion is strongly advised.

Pseudo-XML_ fragment from simple parsing::

    <warning>
        <paragraph>
            Reader discretion is strongly advised.


.. _attribute type:

===================================================
Attribute types
===================================================

.. contents:: :local:
              :depth: 1

Standard attribute types
========================

Attribute types defined in the `attribute types`__ section of the
`XML 1.0 specification`_:

_`CDATA`
    Character data.  CDATA attributes may contain arbitrary text.

_`NMTOKEN`
    A "name token".  One or more of letters, digits, ".", "-", and
    "_".

_`NMTOKENS`
    One or more space-separated NMTOKEN values.

_`EnumeratedType`
    The attribute value may be one of a specified list of values.

Docutils uses `custom attribute types`_ instead of the ID, IDREF, and IDREFS
standard types, because it does not adhere to the `One ID per Element Type`_
validity constraint.

__ `XML attribute types`_


Custom attribute types
======================

The Docutils DTD defines `parameter entities`_ that resolve to standard
attribute types to highlight specific attribute value constraints.

_`yesorno`
    Boolean: no if zero ("0"), yes if any other value.
    Resolves to ``NMTOKEN``.

    Used in the `anonymous`_ and `stub`_ attributes.

_`number`
    The attribute value must be a number. Resolves to ``NMTOKEN``.

    Used in the `level`_, `morecols`_, `scale`_, and `start`_ attributes.

_`measure`
    A number which may be immediately followed by a unit or percent sign.
    Resolves to CDATA.

    Used in the `height`_ and `width`_ attributes.

_`classnames.type`
    A space-separated list of `class names` [#classname]_. Resolves to NMTOKEN.

    Used in the `classes`_ attribute.

_`refname.type`
    A normalized_ `reference name`_. Resolves to CDATA (in contrast to
    NMTOKENS, `reference names`_ may consist of any text).

    Used in the `refname`_ attribute.

_`refnames.type`
    A space-separated list of `reference names`_. Resolves to CDATA.

    `Backslash escaping`_ is used for space characters inside a `reference
    name`.

    Used in the `names`_ and `dupnames`_ attributes.

_`ids.type`
    A space-separated list of unique `identifier keys` [#identifier]_.
    Resolves to NMTOKENS (the XML `standard attribute types`_ do not provide
    for a list of IDs).

    Used in the `ids`_ attribute.

_`idref.type`
    A reference to an `identifier key`_.
    Resolves to NMTOKEN (Docutils identifier keys do not use the ID standard
    type as required by the `IDREF Validity constraint`_).

    Used in the `refid`_ attribute.

_`idrefs.type`
    A list of references to element identifiers.
    Resolves to NMTOKENS.

    Used in the `backrefs`_ attribute.

.. _`class names`:

.. [#classname] `Class names` define sub-classes of existing elements.

   In reStructuredText, custom `class names` can be specified using
   the `"class" directive`_, a directive's `:class: option`_, or
   `custom interpreted text roles`_.
   Docutils normalizes them to conform to both, HTML4.1 and CSS1.0 `name`
   requirements (the regular expression ``[a-z](-?[a-z0-9]+)*``) via the
   `identifier normalization`_.

.. _identifiers:
.. _identifier key:
.. _identifier keys:

.. [#identifier] `Identifier keys` are used for cross references in
   generated documents. Therefore, they must comply with restrictions in the
   respective output formats (HTML4.1__, HTML5__, `polyglot HTML`__,
   LaTeX__, ODT__, troff (manpage), XML__).

   Identifier keys cannot be specified directly in reStructuredText.
   Docutils generates them by applying the `identifier normalization`_ to
   `reference names`_ or from the auto_id_prefix_, prepending the id_prefix_
   and potentially appending numbers for disambiguation.

   __ https://www.w3.org/TR/html401/types.html#type-name
   __ https://www.w3.org/TR/html50/dom.html#the-id-attribute
   __ https://www.w3.org/TR/html-polyglot/#id-attribute
   __ https://tex.stackexchange.com/questions/18311/what-are-the-valid-names-as-labels
   __ https://help.libreoffice.org/6.3/en-US/text/swriter/01/04040000.html?DbPAR=WRITER#bm_id4974211
   __ https://www.w3.org/TR/REC-xml/#id


.. _XML 1.0 specification: https://www.w3.org/TR/REC-xml
.. _XML attribute types: https://www.w3.org/TR/REC-xml/#sec-attribute-types
.. _One ID per Element Type: https://www.w3.org/TR/REC-xml/#one-id-per-el
.. .. _ID attribute type: https://www.w3.org/TR/REC-xml/#id
.. _parameter entities: https://www.w3.org/TR/REC-xml/#dt-PE
.. _IDREF Validity constraint: https://www.w3.org/TR/REC-xml/#idref

.. _reference names:
.. _reference name: rst/restructuredtext.html#reference-names
.. _backslash escaping: rst/restructuredtext.html#escaping-mechanism
.. _id_prefix: ../user/config.html#id-prefix
.. _auto_id_prefix: ../user/config.html#auto-id-prefix
.. _identifier normalization:
    rst/directives.html#identifier-normalization
.. _`:class: option`: rst/directives.html#class-option
.. _custom interpreted text roles:
    rst/directives.html#custom-interpreted-text-roles


===================================================
 Attribute Reference
===================================================

.. contents:: :local:
              :depth: 1

_`Common Attributes`:
    Through the `%basic.atts;`_ parameter entity, all elements support
    the following attributes: ids_, names_ or dupnames_, source_, and
    classes_.

align
=========

Attribute type: `CDATA`_.  Default value: none (inherit).

The ``align`` attribute is used in the figure_, image_, and table_ elements
(via the `%align-h.att;`_ and `%align-hv.att;`_ parameter entities).

anonymous
=============

Attribute type: `yesorno`_.  Default value: none (implies no).

The ``anonymous`` attribute is used for unnamed hyperlinks in the
target_ and reference_ elements (via the `%anonymous.att;`_ parameter
entity).


auto
========

Attribute type: `CDATA`_.  Default value: none.

The ``auto`` attribute is used to indicate automatically-numbered
footnote_, footnote_reference_ and title_ elements (via the
`%auto.att;`_ parameter entity).


backrefs
============

Attribute type: `idrefs.type`_.  Default value: none.

The ``backrefs`` attribute contains a space-separated list of identifier_
references, used for backlinks from footnote_, citation_, and
system_message_ elements (via the `%backrefs.att;`_ parameter entity).


bullet
==========

Attribute type: `CDATA`_.  Default value: none.

The ``bullet`` attribute is used in the bullet_list_ element.


classes
===========

Attribute type: `classnames.type`_.  Default value: none.

The ``classes`` attribute is a space separated list containing zero or more
`class names`_.

The purpose of the attribute is to indicate an "is-a" variant relationship,
to allow an extensible way of defining sub-classes of existing elements.  It
can be used to carry context forward between a Docutils Reader and Writer,
when a custom structure is reduced to a standardized document tree.  One
common use is in conjunction with stylesheets, to add selection criteria.
It should not be used to carry formatting instructions or arbitrary content.

The ``classes`` attribute's contents should be ignorable.  Writers that
are not familiar with the variant expressed should be able to ignore
the attribute.

``classes`` is one of the `common attributes`_, shared by all Docutils
elements.

.. _"class" directive: rst/directives.html#class


colwidth
============

Attribute type: `CDATA`_. Default value: "1*"

Column width specification used in the colspec_ element.
Defined in the exchange-table-model_.

Either proportional measure of the form number*, e.g., “5*” for 5 times
the proportion, or “*” (which is equivalent to “1*”); fixed measure,
e.g., 2pt for 2 point, 3pi for 3 pica.

The fixed unit values are case insensitive. The standard list of allowed
unit values is “pt” (points), “cm” (centimeters), “mm” (millimeters),
“pi” (picas), and “in” (inches). The default fixed unit should be
interpreted as “pt” if neither a proportion nor a fixed unit is
specified.

.. important:: Currently, Docutils interprets unitless numbers as
   proportions.


delimiter
=============

Attribute type: `CDATA`_.  Default value: none.

The ``delimiter`` attribute is used in the option_argument_ element.


dupnames
============

Attribute type: `refnames.type`_.  Default value: none.

The ``dupnames`` attribute replaces the `names`_ attribute
when there has been a naming conflict.
``dupnames`` is one of the `common attributes`_, shared by all
Docutils elements.


enumtype
============

Attribute type: EnumeratedType_, one of "arabic", "loweralpha",
"upperalpha", "lowerroman", or "upperroman".  Default value: none.

The ``enumtype`` attribute is used in the enumerated_list_ element.


height
==========

Attribute type: measure_.  Default value: none.

The ``height`` attribute is used in the image_ element.


ids
=======

Attribute type: `ids.type`_.  Default value: none.

The ``ids`` attribute is a space separated list containing one or more
unique `identifier keys`_, typically assigned by the system.

``ids`` is one of the `common attributes`_, shared by all Docutils
elements.

.. TODO:
   * Use 'id' for primary identifier key?
   * Keep additional keys in `ids`
     or in the preceding target elements?

level
=========

Attribute type: number_.  Default value: none.

The ``level`` attribute is used in the system_message_ element.

morecols
============

Attribute type: number_.  Default value: none.

The ``morecols`` attribute is used in the table_ element.

names
=========

Attribute type: `refnames.type`_.  Default value: none.

The ``names`` attribute is a space-separated list containing
`normalized`_ `reference names`_ of an element. Whitespace inside a
name is backslash escaped.
Each name in the list must be unique; if there are name conflicts
(two or more elements want to the same name), the contents will be
transferred to the `dupnames`_ attribute on the duplicate elements.
An element may have at most one of the ``names`` or ``dupnames``
attributes, but not both.

`Reference names`_ are identifiers assigned in the markup. They
originate from `internal hyperlink targets`_, a directive's `name
option`_, or the element's title or content and are used for
internal cross-references (cf. refname_).

``names`` is one of the `common attributes`_, shared by all
Docutils elements.

.. _normalized:
   rst/restructuredtext.html#normalized-reference-names
.. _internal hyperlink targets:
   rst/restructuredtext.html#internal-hyperlink-targets
.. _name option: rst/directives.html#name


prefix
==========

Attribute type: `CDATA`_.  Default value: none.

The ``prefix`` attribute is used in the enumerated_list_ element.


refid
=========

Attribute type: `idref.type`_.  Default value: none.

The ``refid`` attribute contains a reference to an `identifier key`_

``refid`` is used by the target_, reference_, footnote_reference_,
citation_reference_, title_ and problematic_ elements (via the
`%refid.att;`_ and `%reference.atts;`_ parameter entities).


refname
===========

Attribute type: `refname.type`_.  Default value: none.

The ``refname`` attribute contains a reference to one of the
`reference names`_ in the `names`_ attribute of another element.  On
a `target`_ element, ``refname`` indicates an `indirect target`_ which
may resolve to either an internal or external reference.  Docutils
"transforms_" replace the ``refname`` attribute with a refid_ pointing
to the same element.

``refname`` is used by the target_, reference_, footnote_reference_,
citation_reference_, and substitution_reference_ elements (via the
`%refname.att;`_ and `%reference.atts;`_ parameter entities).

.. _indirect target: rst/restructuredtext.html#indirect-hyperlink-targets
.. _transforms: api/.html


refuri
==========

Attribute type: `CDATA`_.  Default value: none.

The ``refuri`` attribute contains an external reference to a URI/URL.
It is used by the target_, reference_, footnote_reference_, and
citation_reference_ elements (via the `%reference.atts;`_ parameter
entity).


scale
==========

Attribute type: number_.  Default value: none.

The ``scale`` attribute is used in the image_ element.


source
==========

Attribute type: `CDATA`_.  Default value: none.

The ``source`` attribute is used to store the path or URL to the
source text that was used to produce the document tree.  It is one of
the `common attributes`_, declared for all Docutils elements.


start
=========

Attribute type: `number`_.  Default value: none.

The ``start`` attribute is used in the enumerated_list_ element.


stub
=========

Attribute type: `yesorno`_.  Default value: none.

The ``stub`` attribute is used in the colspec_ element.
It marks a table column containing "stubs" (row titles, on the left).
See also the csv-table_ and list-table_ directives.

suffix
==========

Attribute type: `CDATA`_.  Default value: none.

The ``suffix`` attribute is used in the enumerated_list_ element.


.. _title attribute:

title
=========

Attribute type: `CDATA`_.  Default value: none.

The ``title`` attribute stores the title metadata of a document_.  This
title is typically not part of the rendered document.  It may for
example be used in HTML's ``title`` element.


width
==========

Attribute type: measure_.  Default value: none.

The ``width`` attribute is used in the figure_, image_, and table_ element.


xml:space
=============

`Attribute type`: `EnumeratedType`_, one of "default" or "preserve".
Default value: "preserve" (fixed).

The ``xml:space`` attribute is a standard XML attribute for
whitespace-preserving elements.  It is used by the literal_block_,
line_block_, doctest_block_, comment_, and raw_ elements (via the
`%fixedspace.att;`_ parameter entity).  It is a fixed attribute, meant
to communicate to an XML parser that the element contains significant
whitespace.  The attribute value should not be set in a document
instance.


===================================================
 Parameter Entity Reference
===================================================

.. contents:: :local:
              :depth: 1

Parameter entities are used to simplify the DTD (to share definitions
and reduce duplication) and to allow the DTD to be customized by
wrapper DTDs (external client DTDs that use or import the Docutils
DTD).  Parameter entities may be overridden by wrapper DTDs, replacing
the definitions below with custom definitions.  Parameter entities
whose names begin with "additional" are meant to allow easy extension
by wrapper DTDs.

align-h.att;
=================

The ``%align-h.att;`` parameter entity contains the align_
attribute for horizontal alignment.

Entity definition::

    align     (left | center | right) #IMPLIED

The figure_ and table_ elements directly employ the
``%align-h.att;`` parameter entity in their attribute lists.

align-hv.att;
==================

The ``%align-hv.att;`` parameter entity contains the align_
attribute for horizontal and vertical alignment.

Entity definition::

    align     (top | middle | bottom | left | center | right) #IMPLIED

The image_ element directly employs the ``%align-hv.att;`` parameter
entity in its attribute list.

anonymous.att;
===================

The ``%anonymous.att;`` parameter entity contains the anonymous_
attribute, used for unnamed hyperlinks.

Entity definition::

    anonymous %yesorno; #IMPLIED

The reference_ and target_ elements directly employ the
``%anonymous.att;`` parameter entity in their attribute lists.


auto.att;
==============

The ``%auto.att;`` parameter entity contains the auto_ attribute, used
to indicate an automatically-numbered footnote or title.

Entity definition::

    auto     CDATA     #IMPLIED

The footnote_, footnote_reference_, and title_ elements directly
employ the ``%auto.att;`` parameter entity in their attribute lists.


backrefs.att;
==================

The ``%backrefs.att;`` parameter entity contains the backrefs_
attribute, a space-separated list of id references, for backlinks.

Entity definition::

    backrefs_  %idrefs.type;    #IMPLIED

The citation_, footnote_, and system_message_ elements directly employ
the ``%backrefs.att;`` parameter entity in their attribute lists.


basic.atts;
================

The ``%basic.atts;`` parameter entity lists the `common attributes`_.

Entity definition:

.. parsed-literal::

    ids_      NMTOKENS  #IMPLIED
    names_    CDATA     #IMPLIED
    dupnames_ CDATA     #IMPLIED
    source_   CDATA     #IMPLIED
    classes_  NMTOKENS  #IMPLIED
    %additional.basic.atts;

The ``%additional.basic.atts;`` parameter entity can be used by
wrapper DTDs to extend ``%basic.atts;``.


bibliographic.elements;
============================

The ``%bibliographic.elements;`` parameter entity contains an OR-list of all
`bibliographic elements`_.

Entity definition:

.. parsed-literal::

    author_ | authors_ | organization_ | contact_ | address_
    | version_ | revision_ | status_ | date_ | copyright_
    | field_
    %additional.bibliographic.elements;

The ``%additional.bibliographic.elements;`` parameter entity can be used by
wrapper DTDs to extend ``%bibliographic.elements;``.

Only the docinfo_ element directly employs the
``%bibliographic.elements;`` parameter entity in its content model.


body.elements;
===================

The ``%body.elements;`` parameter entity contains an OR-list of all
`body elements`_.  ``%body.elements;`` is itself contained within the
`%structure.model;`_ parameter entity.

Entity definition:

.. parsed-literal::

    admonition_ | attention_ | block_quote_ | bullet_list_ | caution_
    | citation_ | compound_ | comment_ | container_ | danger_
    | definition_list_ | doctest_block_ | enumerated_list_ | error_
    | field_list_ | figure_ | footnote_ | hint_ | image_ | important_
    | line_block_ | literal_block_ | note_ | option_list_
    | paragraph_ | pending_ | raw_ reference_ | rubric_
    | substitution_definition_ | system_message_ | table_ | target_
    | tip_ | warning_ %additional.body.elements;

The ``%additional.body.elements;`` parameter entity can be used by
wrapper DTDs to extend ``%body.elements;``.

The ``%body.elements;`` parameter entity is directly employed in the
content models of the following elements: admonition_, attention_,
block_quote_, caution_, citation_, compound_, danger_, definition_,
description_, entry_, error_, field_body_, footer_, footnote_,
header_, hint_, important_, legend_, list_item_, note_, sidebar_,
system_message_, tip_, topic_, warning_

Via `%structure.model;`_, the ``%body.elements;`` parameter entity is
indirectly employed in the content models of the document_ and
section_ elements.


fixedspace.att;
====================

The ``%fixedspace.att;`` parameter entity contains the `xml:space`_
attribute, a standard XML attribute for whitespace-preserving
elements.

Entity definition:

.. parsed-literal::

    `xml:space`_ (default | preserve) #FIXED 'preserve'

The ``%fixedspace.att;`` parameter entity is directly employed in the
attribute lists of the following elements: address_, comment_,
doctest_block_, line_block_, literal_block_, raw_


inline.elements;
=====================

The ``%inline.elements;`` parameter entity contains an OR-list of all
`inline elements`_.

Entity definition:

.. parsed-literal::

    abbreviation_ | acronym_ | citation_reference_ | emphasis_
    | footnote_reference_ | generated_ | image_ | inline_ | literal_
    | problematic_ | raw_ | reference_ | strong_ | substitution_reference_
    | subscript_ | superscript_ | target_ | title_reference_
    %additional.inline.elements;

The ``%additional.inline.elements;`` parameter entity can be used by
wrapper DTDs to extend ``%inline.elements;``.

Via `%text.model;`_, the ``%inline.elements;`` parameter entity is
indirectly employed in the content models of the following elements:
abbreviation_, acronym_, address_, attribution_, author_, caption_,
classifier_, contact_, copyright_, date_, doctest_block_, emphasis_,
generated_, inline_, line_block_, literal_block_, math_, math_block_,
organization_,
paragraph_, problematic_, raw_, reference_, revision_, rubric_,
status_, strong_, subscript_, substitution_definition_,
substitution_reference_, subtitle_, superscript_, target_, term_,
title_, title_reference_, version_


reference.atts;
====================

The ``%reference.atts;`` parameter entity groups together the refuri_,
refid_, and refname_ attributes.

Entity definition:

.. parsed-literal::

    `%refuri.att;`_
    `%refid.att;`_
    `%refname.att;`_
    %additional.reference.atts;

The ``%additional.reference.atts;`` parameter entity can be used by
wrapper DTDs to extend ``%additional.reference.atts;``.

The citation_reference_, footnote_reference_, reference_, and target_
elements directly employ the ``%reference.att;`` parameter entity in
their attribute lists.


refid.att;
================

The ``%refid.att;`` parameter entity contains the refid_ attribute, an
internal reference to the `ids`_ attribute of another element.

Entity definition:

.. parsed-literal::

    refid_   %idref.type;    #IMPLIED

The title_ and problematic_ elements directly employ the
``%refid.att;`` parameter entity in their attribute lists.

Via `%reference.atts;`_, the ``%refid.att;`` parameter entity is
indirectly employed in the attribute lists of the citation_reference_,
footnote_reference_, reference_, and target_ elements.


refname.att;
=================

The ``%refname.att;`` parameter entity contains the refname_
attribute, an internal reference to the `names`_ attribute of another
element.  On a `target`_ element, ``refname`` indicates an indirect
target which may resolve to either an internal or external
reference.

Entity definition:

.. parsed-literal::

    refname_  %refname.type;  #IMPLIED

The substitution_reference_ element directly employs the
``%refname.att;`` parameter entity in its attribute list.

Via `%reference.atts;`_, the ``%refname.att;`` parameter entity is
indirectly employed in the attribute lists of the citation_reference_,
footnote_reference_, reference_, and target_ elements.


refuri.att;
================

The ``%refuri.att;`` parameter entity contains the refuri_ attribute,
an external reference to a URI/URL.

Entity definition:

.. parsed-literal::

    refuri_   CDATA     #IMPLIED

Via `%reference.atts;`_, the ``%refuri.att;`` parameter entity is
indirectly employed in the attribute lists of the citation_reference_,
footnote_reference_, reference_, and target_ elements.


section.elements;
======================

The ``%section.elements;`` parameter entity contains an OR-list of all
section_-equivalent elements.  ``%section.elements;`` is itself
contained within the `%structure.model;`_ parameter entity.

Entity definition:

.. parsed-literal::

    section_
    %additional.section.elements;

The ``%additional.section.elements;`` parameter entity can be used
by wrapper DTDs to extend ``%section.elements;``.

Via `%structure.model;`_, the ``%section.elements;`` parameter entity
is indirectly employed in the content models of the document_ and
section_ elements.


structure.model;
=====================

The ``%structure.model;`` parameter entity encapsulates the
hierarchical structure of a document and of its constituent parts.
See the discussion of the `element hierarchy`_ above.

Entity definition:

.. parsed-literal::

   ( ( (`%body.elements;`_ | topic_ | sidebar_)+, transition_? )*,
     ( (`%section.elements;`_), (transition_?, (`%section.elements;`_) )* )? )

Each document_ or section_ contains zero or more body elements,
topics, and/or sidebars, optionally interspersed with single
transitions, followed by zero or more sections (whose contents are
recursively the same as this model) optionally interspersed with
transitions.

The following restrictions are imposed by this model:

* Transitions must be separated by other elements (body elements,
  sections, etc.).  In other words, a transition may not be
  immediately adjacent to another transition.

* A transition may not occur at the beginning of a document or
  section.

.. The following is not the case with Docutils (since at least 2004)
   (cf. test/functional/input/data/standard.txt)

   An additional restriction, which cannot be expressed in the language
   of DTDs, is imposed by software:

   * A transition may not occur at the end of a document or section.

The `%structure.model;`_ parameter entity is directly employed in the
content models of the document_ and section_ elements.


text.model;
================

The ``%text.model;`` parameter entity is used by many elements to
represent text data mixed with `inline elements`_.

Entity definition:

.. parsed-literal::

    (#PCDATA | `%inline.elements;`_)*

The ``%text.model;`` parameter entity is directly employed in the
content models of the following elements: abbreviation_, acronym_,
address_, author_, caption_, classifier_, contact_, copyright_, date_,
doctest_block_, emphasis_, field_name_, generated_, line_block_,
literal_block_, organization_, paragraph_, problematic_, raw_,
reference_, revision_, status_, strong_, substitution_definition_,
substitution_reference_, subtitle_, target_, term_, title_, version_




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 007.📜 docutils-0.20.1/docs/ref/docutils.dtd

.. code-block:: xml

  <!--
  ======================================================================
      Docutils Generic DTD
  ======================================================================
  :Author: David Goodger
  :Contact: docutils-develop@lists.sourceforge.net
  :Revision: $Revision: 8956 $
  :Date: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
  :Copyright: This DTD has been placed in the public domain.
  :Filename: docutils.dtd

  More information about this DTD (document type definition) and the
  Docutils project can be found at https://docutils.sourceforge.io/.
  The latest version of this DTD is available from
  https://docutils.sourceforge.io/docs/ref/docutils.dtd.

  The formal public identifier for this DTD is::

      +//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML
  -->

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Parameter Entities
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Parameter entities are used to simplify the DTD (reduce duplication)
  and to allow the DTD to be customized by wrapper DTDs.  Parameter
  entities beginning with "additional" are meant to allow easy extension
  by wrapper DTDs.
  -->

  <!-- Attribute types
  ==================================================================

  Expand the set of `XML standard attribute types`_.

  -->

  <!-- Boolean: no if zero(s), yes if any other value. -->
  <!ENTITY % yesorno "NMTOKEN">

  <!-- Emphasize that the attribute value must be a number. -->
  <!ENTITY % number  "NMTOKEN">

  <!-- A number which may be immediately followed by a unit or percent sign. -->
  <!ENTITY % measure "CDATA">

  <!-- A space-separated list of `class names`.

  Docutils normalizes class names to conform to HTML4.1 and CSS1.0 `name`
  requirements, i.e. the regular expression ``[a-z](-?[a-z0-9]+)*``, via an
  `identifier normalisation`. -->
  <!ENTITY % classnames.type "NMTOKENS">

  <!-- A normalized `reference name`.

  The CDATA type is used because a `reference name` may consist of any text.

  `Normalization` implies downcasing and replacing runs of whitespace with
  single space characters. -->
  <!ENTITY % refname.type  "CDATA">

  <!-- A space-separated list of `reference names`.

  `Backslash escaping`_ is used for space characters inside a `reference name`.
  -->
  <!ENTITY % refnames.type "CDATA">

  <!-- A space-separated list of `identifier keys`.

  The NMTOKENS type is used because `XML standard attribute types`_
  do not include a list of IDs.
  -->
  <!ENTITY % ids.type  "NMTOKENS">

  <!-- A reference to an `identifier key` in another element's `ids` attribute.

  The NMTOKEN type is used, because Docutils `identifier keys` do not use the
  ``ID`` attribute type, as required by the `IDREF Validity constraint`_ -->
  <!ENTITY % idref.type  "NMTOKEN">

  <!-- A list of references to `identifier keys` in other elements. -->
  <!ENTITY % idrefs.type  "NMTOKENS">

  <!-- References:
  .. _XML standard attribute types:
         https://www.w3.org/TR/REC-xml/#sec-attribute-types
  .. _IDREF Validity constraint: https://www.w3.org/TR/REC-xml/#idref
  .. _backslash escaping: rst/restructuredtext.html#escaping-mechanism
  -->


  <!-- Attributes
  ================================================================== -->

  <!ENTITY % additional.basic.atts "">

  <!--
  Attributes shared by all elements in this DTD:

  - `ids` are unique identifiers, typically assigned by the system. The NMTOKENS
    attribute type is used because XML doesn't support a multiple-ID "IDS" type.
  - `names` are identifiers assigned in the markup.
  - `dupnames` is the same as `name`, used when it's a duplicate.
  - `source` is the name of the source of this document or fragment.
  - `classes` is used to transmit individuality information forward.
  -->
  <!ENTITY % basic.atts
    " ids       %ids.type;         #IMPLIED
      names     %refnames.type;    #IMPLIED
      dupnames  %refnames.type;    #IMPLIED
      source    CDATA              #IMPLIED
      classes   %classnames.type;  #IMPLIED
      %additional.basic.atts; ">

  <!-- External reference to a URI/URL. -->
  <!ENTITY % refuri.att
    " refuri    CDATA              #IMPLIED ">

  <!-- Internal reference to the `ids` attribute of an element. -->
  <!ENTITY % refid.att
    " refid     %idref.type;       #IMPLIED ">

  <!-- Space-separated list of `ids` references, for backlinks. -->
  <!ENTITY % backrefs.att
    " backrefs  %idrefs.type;      #IMPLIED ">

  <!--
  Internal reference to the `name` attribute of an element. On a
  'target' element, 'refname' indicates an indirect target which may
  resolve to either an internal or external reference.
  -->
  <!ENTITY % refname.att
    " refname  %refname.type;   #IMPLIED ">

  <!ENTITY % additional.reference.atts "">
  <!-- Collected hyperlink reference attributes. -->
  <!ENTITY % reference.atts
    " %refuri.att;
      %refid.att;
      %refname.att;
      %additional.reference.atts; ">

  <!-- Unnamed hyperlink. -->
  <!ENTITY % anonymous.att
    " anonymous %yesorno; #IMPLIED ">

  <!-- Auto-numbered footnote or title. -->
  <!ENTITY % auto.att
    " auto      CDATA     #IMPLIED ">

  <!-- XML standard attribute for whitespace-preserving elements. -->
  <!ENTITY % fixedspace.att
    " xml:space (default | preserve) #FIXED 'preserve' ">

  <!ENTITY % align-h.att
    " align     (left | center | right) #IMPLIED ">

  <!ENTITY % align-hv.att
    " align     (top | middle | bottom | left | center | right) #IMPLIED ">


  <!-- Element OR-Lists
  ============================================================= -->

  <!ENTITY % additional.bibliographic.elements "">
  <!ENTITY % bibliographic.elements
    " author | authors | organization | address | contact
      | version | revision | status | date | copyright
      | field
      %additional.bibliographic.elements; ">

  <!ENTITY % additional.section.elements "">
  <!ENTITY % section.elements
    " section
      %additional.section.elements; ">

  <!ENTITY % additional.body.elements "">
  <!ENTITY % body.elements
    " paragraph | compound | container | literal_block | doctest_block
      | math_block | line_block | block_quote
      | table | figure | image | footnote | citation | rubric
      | bullet_list | enumerated_list | definition_list | field_list
      | option_list
      | attention | caution | danger | error | hint | important | note
      | tip | warning | admonition
      | reference | target | substitution_definition | comment | pending
      | system_message | raw
      %additional.body.elements; ">

  <!ENTITY % additional.inline.elements "">
  <!ENTITY % inline.elements
    " emphasis | strong | literal | math
      | reference | footnote_reference | citation_reference
      | substitution_reference | title_reference
      | abbreviation | acronym | subscript | superscript
      | inline | problematic | generated
      | target | image | raw
      %additional.inline.elements; ">


  <!-- Element Content Models
  ================================================================== -->

  <!-- The structure model may not end with a transition. -->
  <!ENTITY % structure.model
     " ( ( (%body.elements; | topic | sidebar)+, transition? )*,
         ( (%section.elements;), (transition?, (%section.elements;) )* )? )">

  <!ENTITY % text.model
    " (#PCDATA | %inline.elements;)* ">


  <!-- Table Model
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  This DTD uses the Exchange subset of the CALS-table model (OASIS
  Technical Memorandum 9901:1999 "XML Exchange Table Model DTD",
  http://www.oasis-open.org/html/tm9901.htm).
  -->

  <!ENTITY % calstblx PUBLIC
      "-//OASIS//DTD XML Exchange Table Model 19990315//EN"
      "soextblx.dtd">

  <!-- These parameter entities customize the table model DTD. -->
  <!ENTITY % bodyatt              " %basic.atts; ">  <!-- table elt -->
  <!-- 1 colspec element is expected per table column: -->
  <!ENTITY % tbl.tgroup.mdl      "colspec+,thead?,tbody">
  <!ENTITY % tbl.tgroup.att       " %basic.atts; ">
  <!ENTITY % tbl.thead.att        " %basic.atts; ">
  <!ENTITY % tbl.tbody.att        " %basic.atts; ">
  <!ENTITY % tbl.colspec.att
    " %basic.atts;
      stub      %yesorno; #IMPLIED ">
  <!ENTITY % tbl.row.att          " %basic.atts; ">
  <!-- ``(...)*``: nested tables are supported -->
  <!ENTITY % tbl.entry.mdl        " (%body.elements;)* ">
  <!ENTITY % tbl.entry.att
    " %basic.atts;
      morecols  %number;  #IMPLIED ">
  <!ATTLIST table
      %align-h.att;
      width     %measure;  #IMPLIED>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Root Element
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!-- Optional elements may be generated by internal processing. -->
  <!ELEMENT document
      ( (title, subtitle?)?,
        meta?,
        decoration?,
        (docinfo, transition?)?,
        %structure.model; )>
  <!ATTLIST document
      %basic.atts;
      title     CDATA     #IMPLIED>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Title Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!ELEMENT title %text.model;>
  <!ATTLIST title
      %basic.atts;
      %refid.att;
      %auto.att;>

  <!ELEMENT subtitle %text.model;>
  <!ATTLIST subtitle %basic.atts;>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Bibliographic Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!-- Container for bibliographic elements. Must not be empty. -->
  <!ELEMENT docinfo (%bibliographic.elements;)+>
  <!ATTLIST docinfo %basic.atts;>

  <!-- Container for bibliographic elements. May not be empty.
  Eventual replacement for docinfo? -->
  <!ELEMENT info (%bibliographic.elements;)+>
  <!ATTLIST info %basic.atts;>

  <!ELEMENT author %text.model;>
  <!ATTLIST author %basic.atts;>

  <!ELEMENT authors (author, organization?, address?, contact?)+>
  <!ATTLIST authors %basic.atts;>

  <!ELEMENT organization %text.model;>
  <!ATTLIST organization %basic.atts;>

  <!ELEMENT address %text.model;>
  <!ATTLIST address
      %basic.atts;
      %fixedspace.att;>

  <!ELEMENT contact %text.model;>
  <!ATTLIST contact %basic.atts;>

  <!ELEMENT version %text.model;>
  <!ATTLIST version %basic.atts;>

  <!ELEMENT revision %text.model;>
  <!ATTLIST revision %basic.atts;>

  <!ELEMENT status %text.model;>
  <!ATTLIST status %basic.atts;>

  <!ELEMENT date %text.model;>
  <!ATTLIST date %basic.atts;>

  <!ELEMENT copyright %text.model;>
  <!ATTLIST copyright %basic.atts;>

  <!-- Container for "hidden" meta-data. Must not be empty. -->
  <!ELEMENT meta (field_list+)>
  <!ATTLIST meta %basic.atts;>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Decoration Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!ELEMENT decoration (header?, footer?)>
  <!ATTLIST decoration %basic.atts;>

  <!ELEMENT header (%body.elements;)+>
  <!ATTLIST header %basic.atts;>

  <!ELEMENT footer (%body.elements;)+>
  <!ATTLIST footer %basic.atts;>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Structural Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!ELEMENT section
      (title, subtitle?, info?, decoration?, %structure.model;)>
  <!ATTLIST section %basic.atts;>

  <!ELEMENT topic (title?, (%body.elements;)+)>
  <!ATTLIST topic %basic.atts;>

  <!ELEMENT sidebar (title?, subtitle?, (%body.elements; | topic)+)>
  <!ATTLIST sidebar %basic.atts;>

  <!ELEMENT transition EMPTY>
  <!ATTLIST transition %basic.atts;>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Body Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!ELEMENT paragraph %text.model;>
  <!ATTLIST paragraph %basic.atts;>

  <!ELEMENT compound (%body.elements;)+>
  <!ATTLIST compound %basic.atts;>

  <!ELEMENT container (%body.elements;)+>
  <!ATTLIST container %basic.atts;>

  <!ELEMENT bullet_list (list_item+)>
  <!ATTLIST bullet_list
      %basic.atts;
      bullet    CDATA     #IMPLIED>

  <!ELEMENT enumerated_list (list_item+)>
  <!ATTLIST enumerated_list
      %basic.atts;
      enumtype  (arabic | loweralpha | upperalpha
                        | lowerroman | upperroman)
                          #IMPLIED
      prefix    CDATA     #IMPLIED
      suffix    CDATA     #IMPLIED
      start     %number;  #IMPLIED>

  <!ELEMENT list_item (%body.elements;)*>
  <!ATTLIST list_item %basic.atts;>

  <!ELEMENT definition_list (definition_list_item+)>
  <!ATTLIST definition_list %basic.atts;>

  <!ELEMENT definition_list_item (term, classifier*, definition)>
  <!ATTLIST definition_list_item %basic.atts;>

  <!ELEMENT term %text.model;>
  <!ATTLIST term %basic.atts;>

  <!ELEMENT classifier %text.model;>
  <!ATTLIST classifier %basic.atts;>

  <!ELEMENT definition (%body.elements;)+>
  <!ATTLIST definition %basic.atts;>

  <!ELEMENT field_list (field+)>
  <!ATTLIST field_list %basic.atts;>

  <!ELEMENT field (field_name, field_body)>
  <!ATTLIST field %basic.atts;>

  <!ELEMENT field_name %text.model;>
  <!ATTLIST field_name %basic.atts;>

  <!-- May be empty. -->
  <!ELEMENT field_body (%body.elements;)*>
  <!ATTLIST field_body %basic.atts;>

  <!ELEMENT option_list (option_list_item+)>
  <!ATTLIST option_list %basic.atts;>

  <!ELEMENT option_list_item (option_group, description)>
  <!ATTLIST option_list_item %basic.atts;>

  <!ELEMENT option_group (option+)>
  <!ATTLIST option_group %basic.atts;>

  <!ELEMENT option (option_string, option_argument*)>
  <!ATTLIST option %basic.atts;>

  <!ELEMENT option_string (#PCDATA)>
  <!ATTLIST option_string %basic.atts;>

  <!--
  `delimiter` contains the text preceding the `option_argument`: either
  the text separating it from the `option_string` (typically either "="
  or " ") or the text between option arguments (typically either "," or
  " ").
  -->
  <!ELEMENT option_argument (#PCDATA)>
  <!ATTLIST option_argument
      %basic.atts;
      delimiter  CDATA    #IMPLIED>

  <!ELEMENT description (%body.elements;)+>
  <!ATTLIST description %basic.atts;>

  <!ELEMENT literal_block %text.model;>
  <!ATTLIST literal_block
      %basic.atts;
      %fixedspace.att;>

  <!--
  `math_block` contains a block of text in "LaTeX math format"
  that is typeset as mathematical notation (display formula).
  -->
  <!ELEMENT math_block (#PCDATA)>
  <!ATTLIST math_block %basic.atts;>

  <!ELEMENT line_block (line | line_block)+>
  <!ATTLIST line_block %basic.atts;>

  <!ELEMENT line %text.model;>
  <!ATTLIST line %basic.atts;>

  <!ELEMENT block_quote ((%body.elements;)+, attribution?)>
  <!ATTLIST block_quote %basic.atts;>

  <!ELEMENT attribution %text.model;>
  <!ATTLIST attribution %basic.atts;>

  <!ELEMENT doctest_block %text.model;>
  <!ATTLIST doctest_block
      %basic.atts;
      %fixedspace.att;>

  <!ELEMENT attention (%body.elements;)+>
  <!ATTLIST attention %basic.atts;>

  <!ELEMENT caution (%body.elements;)+>
  <!ATTLIST caution %basic.atts;>

  <!ELEMENT danger (%body.elements;)+>
  <!ATTLIST danger %basic.atts;>

  <!ELEMENT error (%body.elements;)+>
  <!ATTLIST error %basic.atts;>

  <!ELEMENT hint (%body.elements;)+>
  <!ATTLIST hint %basic.atts;>

  <!ELEMENT important (%body.elements;)+>
  <!ATTLIST important %basic.atts;>

  <!ELEMENT note (%body.elements;)+>
  <!ATTLIST note %basic.atts;>

  <!ELEMENT tip (%body.elements;)+>
  <!ATTLIST tip %basic.atts;>

  <!ELEMENT warning (%body.elements;)+>
  <!ATTLIST warning %basic.atts;>

  <!ELEMENT admonition (title, (%body.elements;)+)>
  <!ATTLIST admonition %basic.atts;>

  <!ELEMENT footnote (label?, (%body.elements;)+)>
  <!ATTLIST footnote
      %basic.atts;
      %backrefs.att;
      %auto.att;>

  <!ELEMENT citation (label, (%body.elements;)+)>
  <!ATTLIST citation
      %basic.atts;
      %backrefs.att;>

  <!ELEMENT label (#PCDATA)>
  <!ATTLIST label %basic.atts;>

  <!ELEMENT rubric %text.model;>
  <!ATTLIST rubric %basic.atts;>

  <!-- Empty except when used as an inline element. -->
  <!ELEMENT target %text.model;>
  <!ATTLIST target
      %basic.atts;
      %reference.atts;
      %anonymous.att;>

  <!ELEMENT substitution_definition %text.model;>
  <!ATTLIST substitution_definition
      %basic.atts;
      ltrim     %yesorno; #IMPLIED
      rtrim     %yesorno; #IMPLIED>

  <!ELEMENT comment (#PCDATA)>
  <!ATTLIST comment
      %basic.atts;
      %fixedspace.att;>

  <!ELEMENT pending EMPTY>
  <!ATTLIST pending %basic.atts;>

  <!ELEMENT figure (image, ((caption, legend?) | legend)) >
  <!ATTLIST figure
      %basic.atts;
      %align-h.att;
      width     %measure;  #IMPLIED>

  <!-- Also an inline element. -->
  <!ELEMENT image EMPTY>
  <!ATTLIST image
      %basic.atts;
      %align-hv.att;
      uri       CDATA     #REQUIRED
      alt       CDATA     #IMPLIED
      height    %measure; #IMPLIED
      width     %measure; #IMPLIED
      scale     %number;  #IMPLIED>

  <!ELEMENT caption %text.model;>
  <!ATTLIST caption %basic.atts;>

  <!ELEMENT legend (%body.elements;)+>
  <!ATTLIST legend %basic.atts;>

  <!--
  Table elements: table, tgroup, colspec, thead, tbody, row, entry.
  -->
  %calstblx;

  <!-- Used to record processing information. -->
  <!ELEMENT system_message (%body.elements;)+>
  <!ATTLIST system_message
      %basic.atts;
      %backrefs.att;
      level     %number;  #IMPLIED
      line      %number;  #IMPLIED
      type      NMTOKEN   #IMPLIED>

  <!-- Used to pass raw data through the system. Also inline. -->
  <!ELEMENT raw %text.model;>
  <!ATTLIST raw
      %basic.atts;
      %fixedspace.att;
      format    NMTOKENS  #IMPLIED>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Inline Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Inline elements occur within the text contents of body elements. Some
  nesting of inline elements is allowed by these definitions, with the
  following caveats:

  - An inline element may not contain a nested element of the same type
    (e.g. <strong> may not contain another <strong>).
  - Nested inline elements may or may not be supported by individual
    applications using this DTD.
  - The inline elements <footnote_reference>, <citation_reference>,
    <math>, and <image> do not support nesting.
  -->

  <!ELEMENT emphasis %text.model;>
  <!ATTLIST emphasis %basic.atts;>

  <!ELEMENT strong %text.model;>
  <!ATTLIST strong %basic.atts;>

  <!ELEMENT literal %text.model;>
  <!ATTLIST literal %basic.atts;>

  <!ELEMENT math (#PCDATA)>
  <!ATTLIST math %basic.atts;>

  <!-- Can also be a body element, when it contains an "image" element. -->
  <!ELEMENT reference %text.model;>
  <!ATTLIST reference
      name      CDATA     #IMPLIED
      %basic.atts;
      %reference.atts;
      %anonymous.att;>

  <!ELEMENT footnote_reference (#PCDATA)>
  <!ATTLIST footnote_reference
      %basic.atts;
      %refid.att;
      %refname.att;
      %auto.att;>

  <!ELEMENT citation_reference (#PCDATA)>
  <!ATTLIST citation_reference
      %basic.atts;
      %refid.att;
      %refname.att;>

  <!ELEMENT substitution_reference %text.model;>
  <!ATTLIST substitution_reference
      %basic.atts;
      %refname.att;>

  <!ELEMENT title_reference %text.model;>
  <!ATTLIST title_reference %basic.atts;>

  <!ELEMENT abbreviation %text.model;>
  <!ATTLIST abbreviation %basic.atts;>

  <!ELEMENT acronym %text.model;>
  <!ATTLIST acronym %basic.atts;>

  <!ELEMENT superscript %text.model;>
  <!ATTLIST superscript %basic.atts;>

  <!ELEMENT subscript %text.model;>
  <!ATTLIST subscript %basic.atts;>

  <!ELEMENT inline %text.model;>
  <!ATTLIST inline %basic.atts;>

  <!ELEMENT problematic %text.model;>
  <!ATTLIST problematic
      %basic.atts;
      %refid.att;>

  <!ELEMENT generated %text.model;>
  <!ATTLIST generated %basic.atts;>

  <!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  fill-column: 70
  End:
  -->


/Part 1. 008.📜 docutils-0.20.1/docs/ref/soextblx.dtd

.. code-block:: xml

  <!--
  ===========================================================================
      OASIS XML Exchange Table Model Declaration Module
  ===========================================================================
  :Date: 1999-03-15
  -->

  <!-- This set of declarations defines the XML version of the Exchange
       Table Model as of the date shown in the Formal Public Identifier
       (FPI) for this entity.

       This set of declarations may be referred to using a public external
       entity declaration and reference as shown in the following three
       lines:

       <!ENTITY % calstblx
         PUBLIC "-//OASIS//DTD XML Exchange Table Model 19990315//EN">
         %calstblx;

       If various parameter entities used within this set of declarations
       are to be given non-default values, the appropriate declarations
       should be given before calling in this package (i.e., before the
       "%calstblx;" reference).
  -->

  <!-- The motivation for this XML version of the Exchange Table Model
       is simply to create an XML version of the SGML Exchange Table
       Model. By design, no effort has been made to "improve" the model.

       This XML version incorporates the logical bare minimum changes
       necessary to make the Exchange Table Model a valid XML DTD.
  -->

  <!-- The XML version of the Exchange Table Model differs from
       the SGML version in the following ways:

       The following parameter entities have been removed:

         - tbl.table.excep, tbl.hdft.excep, tbl.row.excep, tbl.entry.excep
           There are no exceptions in XML. The following normative statement
           is made in lieu of exceptions: the exchange table model explicitly
           forbids a table from occurring within another table. If the
           content model of an entry includes a table element, then this
           cannot be enforced by the DTD, but it is a deviation from the
           exchange table model to include a table within a table.

         - tbl.hdft.name, tbl.hdft.mdl, tbl.hdft.excep, tbl.hdft.att
           The motivation for these elements was to change the table
           header/footer elements. Since XML does not allow element declarations
           to contain name groups, and the exchange table model does not
           allow a table to contain footers, the continued presence of these
           attributes seems unnecessary.

       The following parameter entity has been added:

         - tbl.thead.att
           This entity parametrizes the attributes on thead. It replaces
           the tbl.hdft.att parameter entity.

       Other miscellaneous changes:

         - Tag omission indicators have been removed
         - Comments have been removed from declarations
         - NUMBER attributes have been changed to NMTOKEN
         - NUTOKEN attributes have been to changed to NMTOKEN
         - Removed the grouping characters around the content model
           parameter entry for the 'entry' element. This is necessary
           so that an entry can contain #PCDATA and be defined as an
           optional, repeatable OR group beginning with #PCDATA.
  -->

  <!-- This entity includes a set of element and attribute declarations
       that partially defines the Exchange table model.  However, the model
       is not well-defined without the accompanying natural language
       description of the semantics (meanings) of these various elements,
       attributes, and attribute values.  The semantic writeup, also available
       from SGML Open, should be used in conjunction with this entity.
  -->

  <!-- In order to use the Exchange table model, various parameter entity
       declarations are required.  A brief description is as follows:

       ENTITY NAME      WHERE USED              WHAT IT IS

       %yesorno         In ATTLIST of:          An attribute declared value
                        almost all elements     for a "boolean" attribute

       %paracon         In content model of:    The "text" (logical content)
                        <entry>                 of the model group for <entry>

       %titles          In content model of:    The "title" part of the model
                        table element           group for the table element

       %tbl.table.name  In declaration of:      The name of the "table"
                        table element           element

       %tbl.table-titles.mdl In content model of: The model group for the title
                        table elements          part of the content model for
                                                table element

       %tbl.table.mdl   In content model of:    The model group for the content
                        table elements          model for table element,
                                                often (and by default) defined
                                                in terms of %tbl.table-titles.mdl
                                                and tgroup

       %tbl.table.att   In ATTLIST of:          Additional attributes on the
                        table element           table element

       %bodyatt         In ATTLIST of:          Additional attributes on the
                        table element           table element (for backward
                                                compatibility with the SGML
                                                model)

       %tbl.tgroup.mdl  In content model of:    The model group for the content
                        <tgroup>                model for <tgroup>

       %tbl.tgroup.att  In ATTLIST of:          Additional attributes on the
  4                      <tgroup>                <tgroup> element

       %tbl.thead.att   In ATTLIST of:          Additional attributes on the
                        <thead>                 <thead> element

       %tbl.tbody.att   In ATTLIST of:          Additional attributes on the
                        <tbody>                 <tbody> element

       %tbl.colspec.att In ATTLIST of:          Additional attributes on the
                        <colspec>               <colspec> element

       %tbl.row.mdl     In content model of:    The model group for the content
                        <row>                   model for <row>

       %tbl.row.att     In ATTLIST of:          Additional attributes on the
                        <row>                   <row> element

       %tbl.entry.mdl   In content model of:    The model group for the content
                        <entry>                 model for <entry>

       %tbl.entry.att   In ATTLIST of:          Additional attributes on the
                        <entry>                 <entry> element

       This set of declarations will use the default definitions shown below
       for any of these parameter entities that are not declared before this
       set of declarations is referenced.
  -->

  <!-- These definitions are not directly related to the table model, but are
       used in the default CALS table model and may be defined elsewhere (and
       prior to the inclusion of this table module) in the referencing DTD. -->

  <!ENTITY % yesorno 'NMTOKEN'> <!-- no if zero(s), yes if any other value -->
  <!ENTITY % titles  'title?'>
  <!ENTITY % paracon '#PCDATA'> <!-- default for use in entry content -->

  <!--
  The parameter entities as defined below change and simplify the CALS table
  model as published (as part of the Example DTD) in MIL-HDBK-28001.  The
  resulting simplified DTD has support from the SGML Open vendors and is
  therefore more interoperable among different systems.

  These following declarations provide the Exchange default definitions
  for these entities.  However, these entities can be redefined (by giving
  the appropriate parameter entity declaration(s) prior to the reference
  to this Table Model declaration set entity) to fit the needs of the
  current application.

  Note, however, that changes may have significant effect on the ability to
  interchange table information.  These changes may manifest themselves
  in usability, presentation, and possible structure information degradation.
  -->

  <!ENTITY % tbl.table.name       "table">
  <!ENTITY % tbl.table-titles.mdl "%titles;,">
  <!ENTITY % tbl.table-main.mdl   "tgroup+">
  <!ENTITY % tbl.table.mdl        "%tbl.table-titles.mdl; %tbl.table-main.mdl;">
  <!ENTITY % tbl.table.att        "
      pgwide      %yesorno;       #IMPLIED ">
  <!ENTITY % bodyatt              "">
  <!ENTITY % tbl.tgroup.mdl       "colspec*,thead?,tbody">
  <!ENTITY % tbl.tgroup.att       "">
  <!ENTITY % tbl.thead.att        "">
  <!ENTITY % tbl.tbody.att        "">
  <!ENTITY % tbl.colspec.att      "">
  <!ENTITY % tbl.row.mdl          "entry+">
  <!ENTITY % tbl.row.att          "">
  <!ENTITY % tbl.entry.mdl        "(%paracon;)*">
  <!ENTITY % tbl.entry.att        "">

  <!-- =====  Element and attribute declarations follow. =====  -->

  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % tbl.table.name       "table"
       ENTITY % tbl.table-titles.mdl "%titles;,"
       ENTITY % tbl.table.mdl        "%tbl.table-titles; tgroup+"
       ENTITY % tbl.table.att        "
                          pgwide          %yesorno;       #IMPLIED "
  -->

  <!ELEMENT %tbl.table.name; (%tbl.table.mdl;)>

  <!ATTLIST %tbl.table.name;
          frame           (top|bottom|topbot|all|sides|none)      #IMPLIED
          colsep          %yesorno;                               #IMPLIED
          rowsep          %yesorno;                               #IMPLIED
          %tbl.table.att;
          %bodyatt;
  >

  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % tbl.tgroup.mdl    "colspec*,thead?,tbody"
       ENTITY % tbl.tgroup.att    ""
  -->

  <!ELEMENT tgroup (%tbl.tgroup.mdl;) >

  <!ATTLIST tgroup
          cols            NMTOKEN                                 #REQUIRED
          colsep          %yesorno;                               #IMPLIED
          rowsep          %yesorno;                               #IMPLIED
          align           (left|right|center|justify|char)        #IMPLIED
          %tbl.tgroup.att;
  >

  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % tbl.colspec.att   ""
  -->

  <!ELEMENT colspec EMPTY >

  <!ATTLIST colspec
          colnum          NMTOKEN                                 #IMPLIED
          colname         NMTOKEN                                 #IMPLIED
          colwidth        CDATA                                   #IMPLIED
          colsep          %yesorno;                               #IMPLIED
          rowsep          %yesorno;                               #IMPLIED
          align           (left|right|center|justify|char)        #IMPLIED
          char            CDATA                                   #IMPLIED
          charoff         NMTOKEN                                 #IMPLIED
          %tbl.colspec.att;
  >

  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % tbl.thead.att      ""
  -->

  <!ELEMENT thead (row+)>

  <!ATTLIST thead
          valign          (top|middle|bottom)                     #IMPLIED
          %tbl.thead.att;
  >

  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % tbl.tbody.att     ""
  -->

  <!ELEMENT tbody (row+)>

  <!ATTLIST tbody
          valign          (top|middle|bottom)                     #IMPLIED
          %tbl.tbody.att;
  >

  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % tbl.row.mdl       "entry+"
       ENTITY % tbl.row.att       ""
  -->

  <!ELEMENT row (%tbl.row.mdl;)>

  <!ATTLIST row
          rowsep          %yesorno;                               #IMPLIED
          valign          (top|middle|bottom)                     #IMPLIED
          %tbl.row.att;
  >


  <!--
       Default declarations previously defined in this entity and
       referenced below include:
       ENTITY % paracon           "#PCDATA"
       ENTITY % tbl.entry.mdl     "(%paracon;)*"
       ENTITY % tbl.entry.att     ""
  -->

  <!ELEMENT entry %tbl.entry.mdl;>

  <!ATTLIST entry
          colname         NMTOKEN                                 #IMPLIED
          namest          NMTOKEN                                 #IMPLIED
          nameend         NMTOKEN                                 #IMPLIED
          morerows        NMTOKEN                                 #IMPLIED
          colsep          %yesorno;                               #IMPLIED
          rowsep          %yesorno;                               #IMPLIED
          align           (left|right|center|justify|char)        #IMPLIED
          char            CDATA                                   #IMPLIED
          charoff         NMTOKEN                                 #IMPLIED
          valign          (top|middle|bottom)                     #IMPLIED
          %tbl.entry.att;
  >


/Part 1. 009.📜 docutils-0.20.1/docs/ref/rst/definitions.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

============================================
 reStructuredText Standard Definition Files
============================================
:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents


This document describes standard definition files, such as sets of
substitution definitions and interpreted text roles, that can be
included in reStructuredText documents.  The `"include" directive`__
has a special syntax for these standard definition files, angle
brackets around the file name::

    .. include:: <filename.txt>

__ directives.html#include

The individual data files are stored with the Docutils source code in
the "docutils" package, in the ``docutils/parsers/rst/include``
directory.


Substitution Definitions
========================

Many of the standard definition files contain sets of `substitution
definitions`__, which can be used in documents via `substitution
references`__.  For example, the copyright symbol is defined in
``isonum.txt`` as "copy"::

    .. include:: <isonum.txt>

    Copyright |copy| 2003 by John Q. Public, all rights reserved.

__ restructuredtext.html#substitution-definitions
__ restructuredtext.html#substitution-references

Individual substitution definitions can also be copied from definition
files and pasted into documents.  This has two advantages: it removes
dependencies, and it saves processing of unused definitions.  However,
multiple substitution definitions add clutter to the document.

Substitution references require separation from the surrounding text
with whitespace or punctuation.  To use a substitution without
intervening whitespace, you can use the disappearing-whitespace escape
sequence, backslash-space::

    .. include:: isonum.txt

    Copyright |copy| 2003, BogusMegaCorp\ |trade|.

Custom substitution definitions may use the `"unicode" directive`__.
Whitespace is ignored and removed, effectively sqeezing together the
text::

    .. |copy|   unicode:: U+000A9 .. COPYRIGHT SIGN
    .. |BogusMegaCorp (TM)| unicode:: BogusMegaCorp U+2122
       .. with trademark sign

    Copyright |copy| 2003, |BogusMegaCorp (TM)|.

__ directives.html#unicode

In addition, the "ltrim", "rtrim", and "trim" options may be used with
the "unicode" directive to automatically trim spaces from the left,
right, or both sides (respectively) of substitution references::

    .. |---| unicode:: U+02014 .. em dash
       :trim:


Character Entity Sets
---------------------

The following files contain substitution definitions corresponding to
XML character entity sets, from the following standards: ISO 8879 &
ISO 9573-13 (combined), MathML, and XHTML1.  They were generated by
the ``tools/dev/unicode2rstsubs.py`` program from the input file
unicode.xml__, which is maintained as part of the MathML 2
Recommentation XML source.

__ https://www.w3.org/2003/entities/xml/

===================  =================================================
Entity Set File      Description
===================  =================================================
isoamsa.txt_         Added Mathematical Symbols: Arrows
isoamsb.txt_         Added Mathematical Symbols: Binary Operators
isoamsc.txt_         Added Mathematical Symbols: Delimiters
isoamsn.txt_         Added Mathematical Symbols: Negated Relations
isoamso.txt_         Added Mathematical Symbols: Ordinary
isoamsr.txt_         Added Mathematical Symbols: Relations
isobox.txt_          Box and Line Drawing
isocyr1.txt_         Russian Cyrillic
isocyr2.txt_         Non-Russian Cyrillic
isodia.txt_          Diacritical Marks
isogrk1.txt_         Greek Letters
isogrk2.txt_         Monotoniko Greek
isogrk3.txt_         Greek Symbols
isogrk4.txt_  [1]_   Alternative Greek Symbols
isolat1.txt_         Added Latin 1
isolat2.txt_         Added Latin 2
isomfrk.txt_  [1]_   Mathematical Fraktur
isomopf.txt_  [1]_   Mathematical Openface (Double-struck)
isomscr.txt_  [1]_   Mathematical Script
isonum.txt_          Numeric and Special Graphic
isopub.txt_          Publishing
isotech.txt_         General Technical
mmlalias.txt_        MathML aliases for entities from other sets
mmlextra.txt_ [1]_   Extra names added by MathML
xhtml1-lat1.txt_     XHTML Latin 1
xhtml1-special.txt_  XHTML Special Characters
xhtml1-symbol.txt_   XHTML Mathematical, Greek and Symbolic Characters
===================  =================================================

.. [1] There are ``*-wide.txt`` variants for each of these character
   entity set files, containing characters outside of the Unicode
   basic multilingual plane or BMP (wide-Unicode; code points greater
   than U+FFFF).  Most pre-built Python distributions are "narrow" and
   do not support wide-Unicode characters.  Python *can* be built with
   wide-Unicode support though; consult the Python build instructions
   for details.

For example, the copyright symbol is defined as the XML character
entity ``&copy;``.  The equivalent reStructuredText substitution
reference (defined in both ``isonum.txt`` and ``xhtml1-lat1.txt``) is
``|copy|``.

.. _isoamsa.txt:        ../../../docutils/parsers/rst/include/isoamsa.txt
.. _isoamsb.txt:        ../../../docutils/parsers/rst/include/isoamsb.txt
.. _isoamsc.txt:        ../../../docutils/parsers/rst/include/isoamsc.txt
.. _isoamsn.txt:        ../../../docutils/parsers/rst/include/isoamsn.txt
.. _isoamso.txt:        ../../../docutils/parsers/rst/include/isoamso.txt
.. _isoamsr.txt:        ../../../docutils/parsers/rst/include/isoamsr.txt
.. _isobox.txt:         ../../../docutils/parsers/rst/include/isobox.txt
.. _isocyr1.txt:        ../../../docutils/parsers/rst/include/isocyr1.txt
.. _isocyr2.txt:        ../../../docutils/parsers/rst/include/isocyr2.txt
.. _isodia.txt:         ../../../docutils/parsers/rst/include/isodia.txt
.. _isogrk1.txt:        ../../../docutils/parsers/rst/include/isogrk1.txt
.. _isogrk2.txt:        ../../../docutils/parsers/rst/include/isogrk2.txt
.. _isogrk3.txt:        ../../../docutils/parsers/rst/include/isogrk3.txt
.. _isogrk4.txt:        ../../../docutils/parsers/rst/include/isogrk4.txt
.. _isolat1.txt:        ../../../docutils/parsers/rst/include/isolat1.txt
.. _isolat2.txt:        ../../../docutils/parsers/rst/include/isolat2.txt
.. _isomfrk.txt:        ../../../docutils/parsers/rst/include/isomfrk.txt
.. _isomopf.txt:        ../../../docutils/parsers/rst/include/isomopf.txt
.. _isomscr.txt:        ../../../docutils/parsers/rst/include/isomscr.txt
.. _isonum.txt:         ../../../docutils/parsers/rst/include/isonum.txt
.. _isopub.txt:         ../../../docutils/parsers/rst/include/isopub.txt
.. _isotech.txt:        ../../../docutils/parsers/rst/include/isotech.txt
.. _mmlalias.txt:       ../../../docutils/parsers/rst/include/mmlalias.txt
.. _mmlextra.txt:       ../../../docutils/parsers/rst/include/mmlextra.txt
.. _xhtml1-lat1.txt:    ../../../docutils/parsers/rst/include/xhtml1-lat1.txt
.. _xhtml1-special.txt: ../../../docutils/parsers/rst/include/xhtml1-special.txt
.. _xhtml1-symbol.txt:  ../../../docutils/parsers/rst/include/xhtml1-symbol.txt


S5/HTML Definitions
===================

The "s5defs.txt_" standard definition file contains interpreted text
roles (classes) and other definitions for documents destined to become
`S5/HTML slide shows`_.

.. _s5defs.txt: ../../../docutils/parsers/rst/include/s5defs.txt
.. _S5/HTML slide shows: ../../user/slide-shows.html



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 010.📜 docutils-0.20.1/docs/ref/rst/directives.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

=============================
 reStructuredText Directives
=============================
:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9385 $
:Date: $Date: 2023-05-13 16:39:18 +0200 (Sa, 13. Mai 2023) $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents
   :depth: 2

This document describes the directives implemented in the reference
reStructuredText parser.

Directives have the following syntax::

    +-------+-------------------------------+
    | ".. " | directive type "::" directive |
    +-------+ block                         |
            |                               |
            +-------------------------------+

Directives begin with an explicit markup start (two periods and a
space), followed by the directive type and two colons (collectively,
the "directive marker").  The directive block begins immediately after
the directive marker, and includes all subsequent indented lines.  The
directive block is divided into arguments, options (a field list), and
content (in that order), any of which may appear.  See the Directives_
section in the `reStructuredText Markup Specification`_ for syntax
details.

Descriptions below list "doctree elements" (document tree element
names; XML DTD generic identifiers) corresponding to individual
directives.  For details on the hierarchy of elements, please see `The
Docutils Document Tree`_ and the `Docutils Generic DTD`_ XML document
type definition.  For directive implementation details, see `Creating
reStructuredText Directives`_.

.. _Directives: restructuredtext.html#directives
.. _reStructuredText Markup Specification: restructuredtext.html
.. _The Docutils Document Tree: ../doctree.html
.. _Docutils Generic DTD: ../docutils.dtd
.. _Creating reStructuredText Directives:
   ../../howto/rst-directives.html


===================================================
Admonitions
===================================================

Admonitions ("safety messages" or "hazard statements") can appear anywhere
an ordinary body element can.  They contain arbitrary body elements.
Typically, an admonition is rendered as an offset block in a document,
sometimes outlined or shaded.

Docutils defines a `generic admonition`_ as well as a set of
`specific admonitions`_.


.. _attention:
.. _caution:
.. _danger:
.. _error:
.. _hint:
.. _important:
.. _note:
.. _tip:
.. _warning:

Specific Admonitions
====================

:Directive Types: "attention", "caution", "danger", "error", "hint",
                  "important", "note", "tip", "warning"
:Doctree Elements: `attention <../doctree.html#attention>`__,
                   `caution <../doctree.html#caution>`__                        ,
                   `danger <../doctree.html#danger>`__,
                   `error <../doctree.html#error>`__,
                   `hint <../doctree.html#hint>`__,
                   `important <../doctree.html#important>`__,
                   `note <../doctree.html#note>`__,
                   `tip <../doctree.html#tip>`__,
                   `warning <../doctree.html#warning>`__

:Directive Arguments: None.
:Directive Options: class_, name_
:Directive Content: Interpreted as body elements.

Specific admontions are rendered with a title matching the admonition type.
For example::

    .. DANGER::
       Beware killer rabbits!

This directive might be rendered something like this::

    +------------------------+
    |        !DANGER!        |
    |                        |
    | Beware killer rabbits! |
    +------------------------+

Any text immediately following the directive indicator (on the same
line and/or indented on following lines) is interpreted as a directive
block and is parsed for normal body elements.  For example, the
following "note" admonition directive contains one paragraph and a
bullet list consisting of two list items::

    .. note:: This is a note admonition.
       This is the second line of the first paragraph.

       - The note contains all indented body elements
         following.
       - It includes this bullet list.


.. _admonition:

Generic Admonition
==================

:Directive Type: "admonition"
:Doctree Elements: `admonition <../doctree.html#admonition>`__,
                   `title <../doctree.html#title>`__
:Directive Arguments: One, required (admonition title)
:Directive Options: class_, name_
:Directive Content: Interpreted as body elements.

This is a generic, titled admonition.  The title may be anything the
author desires.

The author-supplied title is also used as a `"classes"`_ attribute value
after `identifier normalization`_ and adding the prefix "admonition-".
For example, this admonition::

    .. admonition:: And, by the way...

       You can make up your own admonition too.

becomes the following document tree (pseudo-XML)::

    <document source="test data">
        <admonition classes="admonition-and-by-the-way">
            <title>
                And, by the way...
            <paragraph>
                You can make up your own admonition too.

The class_ option overrides the generated `"classes"`_ attribute value.


===================================================
 Images
===================================================

There are two image directives: image_ and figure_.

.. attention::

  It is up to the author to ensure compatibility of the image data format
  with the output format or user agent (LaTeX engine, `HTML browser`__).
  The following, non exhaustive table provides an overview:

  =========== ====== ====== ===== ===== ===== ===== ===== ===== ===== =====
  ..          vector image  raster image                  moving image [#]_
  ----------- ------------- ----------------------------- -----------------
  ..          SVG    PDF    PNG   JPG   GIF   APNG  AVIF  WebM  MP4   OGG
  =========== ====== ====== ===== ===== ===== ===== ===== ===== ===== =====
  HTML4_      ✓ [#]_        ✓     ✓     ✓     (✓)   (✓)

  HTML5_      ✓             ✓     ✓     ✓     ✓     ✓     ✓     ✓     ✓

  LaTeX_ [#]_        ✓      ✓     ✓

  ODT_        ✓      ✓      ✓     ✓     ✓
  =========== ====== ====== ===== ===== ===== ===== ===== ===== ===== =====

  .. [#] The `html5 writer`_ uses the ``<video>`` tag if the image URI
         ends with an extension matching one of the listed video formats
         (since Docutils 0.17).

  .. [#] The html4 writer uses an ``<object>`` tag for SVG images
         for better compatibility with older browsers.

  .. [#] When compiling with ``pdflatex``, ``xelatex``, or ``lualatex``.
         The original ``latex`` engine supports only the EPS image format.
         Some build systems, e.g. rubber_ support additional formats
         via on-the-fly image conversion.

__ https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types
.. _HTML4:
.. _html4 writer: ../../user/html.html#html4css1
.. _HTML5:
.. _html5 writer: ../../user/html.html#html5-polyglot
.. _LaTeX: ../../user/latex.html#image-inclusion
.. _ODT: ../../user/odt.html
.. _rubber: https://github.com/petrhosek/rubber


Image
=====

:Directive Type: "image"
:Doctree Element: `image <../doctree.html#image>`__
:Directive Arguments: One, required (image URI_).
:Directive Options: Possible (see below).
:Directive Content: None.

An "image" is a simple picture::

    .. image:: picture.png

Inline images can be defined with an "image" directive in a `substitution
definition`_

The URI for the image source file is specified in the directive
argument.  As with hyperlink targets, the image URI may begin on the
same line as the explicit markup start and target name, or it may
begin in an indented text block immediately following, with no
intervening blank lines.  If there are multiple lines in the link
block, they are stripped of leading and trailing whitespace and joined
together.

Optionally, the image link block may contain a flat field list, the
_`image options`.  For example::

    .. image:: picture.jpeg
       :height: 100px
       :width: 200 px
       :scale: 50 %
       :alt: alternate text
       :align: right

The following options are recognized:

``alt`` : text_
    Alternate text: a short description of the image, displayed by
    applications that cannot display images, or spoken by applications
    for visually impaired users.

``height`` : length_
    The desired height of the image.
    Used to reserve space or scale the image vertically.  When the "scale"
    option is also specified, they are combined.  For example, a height of
    200px and a scale of 50 is equivalent to a height of 100px with no scale.

``width`` : length_ or percentage_ of the current line width
    The width of the image.
    Used to reserve space or scale the image horizontally.  As with "height"
    above, when the "scale" option is also specified, they are combined.

``scale`` : integer percentage (the "%" symbol is optional)
    The uniform scaling factor of the image.  The default is "100 %", i.e.
    no scaling.

    If no "height" or "width" options are specified, the `Python
    Imaging Library` (PIL/Pillow_) may be used to determine them, if
    it is installed and the image file is available.

``align`` : "top", "middle", "bottom", "left", "center", or "right"
    The alignment of the image, equivalent to the HTML ``<img>`` tag's
    deprecated "align" attribute or the corresponding "vertical-align" and
    "text-align" CSS properties.
    The values "top", "middle", and "bottom"
    control an image's vertical alignment (relative to the text
    baseline); they are only useful for inline images (substitutions).
    The values "left", "center", and "right" control an image's
    horizontal alignment, allowing the image to float and have the
    text flow around it.  The specific behavior depends upon the
    browser or rendering software used.

``target`` : URI_ or `reference name`_
    Makes the image into a hyperlink reference ("clickable").  The
    option argument may be a URI (relative or absolute), or a
    `reference name`_ with underscore suffix (e.g. ```a name`_``).

and the common options class_ and name_.


Figure
======

:Directive Type: "figure"
:Doctree Elements: figure_, image_, caption_, legend_
:Directive Arguments: One, required (image URI_).
:Directive Options: Possible (see below).
:Directive Content: Interpreted as the figure caption and an optional
                    legend.

A "figure" consists of image_ data (including `image options`_), an optional
caption (a single paragraph), and an optional legend (arbitrary body
elements). For page-based output media, figures might float to a different
position if this helps the page layout.
::

    .. figure:: picture.png
       :scale: 50 %
       :alt: map to buried treasure

       This is the caption of the figure (a simple paragraph).

       The legend consists of all elements after the caption.  In this
       case, the legend consists of this paragraph and the following
       table:

       +-----------------------+-----------------------+
       | Symbol                | Meaning               |
       +=======================+=======================+
       | .. image:: tent.png   | Campground            |
       +-----------------------+-----------------------+
       | .. image:: waves.png  | Lake                  |
       +-----------------------+-----------------------+
       | .. image:: peak.png   | Mountain              |
       +-----------------------+-----------------------+

There must be blank lines before the caption paragraph and before the
legend.  To specify a legend without a caption, use an empty comment
("..") in place of the caption.

The "figure" directive supports all of the options of the "image"
directive (see `image options`_ above). These options (except
"align") are passed on to the contained image.

``align`` : "left", "center", or "right"
    The horizontal alignment of the figure, allowing the image to
    float and have the text flow around it.  The specific behavior
    depends upon the browser or rendering software used.

In addition, the following options are recognized:

``figwidth`` : "image", length_, or percentage_ of current line width
    The width of the figure.
    Limits the horizontal space used by the figure.
    A special value of "image" is allowed, in which case the
    included image's actual width is used (requires the `Python Imaging
    Library`_). If the image file is not found or the required software is
    unavailable, this option is ignored.

    Sets the "width" attribute of the "figure" doctree element.

    This option does not scale the included image; use the "width"
    `image`_ option for that. ::

        +---------------------------+
        |        figure             |
        |                           |
        |<------ figwidth --------->|
        |                           |
        |  +---------------------+  |
        |  |     image           |  |
        |  |                     |  |
        |  |<--- width --------->|  |
        |  +---------------------+  |
        |                           |
        |The figure's caption should|
        |wrap at this width.        |
        +---------------------------+

``figclass`` : space separated list of `class names`_
    Set a `"classes"`_ attribute value on the figure element.  See the
    `class directive`_ below.

.. _Python Imaging Library:
.. _Pillow: https://pypi.org/project/Pillow/


===================================================
 Body Elements
===================================================

Topic
=====

:Directive Type: "topic"
:Doctree Element: topic_
:Directive Arguments: One, required (topic title).
:Directive Options: class_, name_
:Directive Content: Interpreted as the topic body.

A topic is like a block quote with a title, or a self-contained
section with no subsections.  Use the "topic" directive to indicate a
self-contained idea that is separate from the flow of the document.
Topics may occur anywhere a section or transition may occur.  Body
elements and topics may not contain nested topics.

The directive's sole argument is interpreted as the topic title; the
next line must be blank.  All subsequent lines make up the topic body,
interpreted as body elements.  For example::

    .. topic:: Topic Title

        Subsequent indented lines comprise
        the body of the topic, and are
        interpreted as body elements.


Sidebar
=======

:Directive Type: "sidebar"
:Doctree Element: sidebar_
:Directive Arguments: One, optional (sidebar title).
:Directive Options: Possible (see below).
:Directive Content: Interpreted as the sidebar body.

Sidebars are like miniature, parallel documents that occur inside
other documents, providing related or reference material.  A sidebar
is typically offset by a border and "floats" to the side of the page;
the document's main text may flow around it.  Sidebars can also be
likened to super-footnotes; their content is outside of the flow of
the document's main text.

Sidebars may occur anywhere a section or transition may occur.  Body
elements (including sidebars) may not contain nested sidebars.

The directive's sole argument is interpreted as the sidebar title,
which may be followed by a subtitle option (see below); the next line
must be blank.  All subsequent lines make up the sidebar body,
interpreted as body elements.  For example::

    .. sidebar:: Optional Sidebar Title
       :subtitle: Optional Sidebar Subtitle

       Subsequent indented lines comprise
       the body of the sidebar, and are
       interpreted as body elements.

The following options are recognized:

``subtitle`` : text_
    The sidebar's subtitle.

and the common options class_ and name_.


Line Block
==========

.. admonition:: Deprecated

   The "line-block" directive is deprecated.  Use the `line block
   syntax`_ instead.

   .. _line block syntax: restructuredtext.html#line-blocks

:Directive Type: "line-block"
:Doctree Element: line_block_
:Directive Arguments: None.
:Directive Options: class_, name_
:Directive Content: Becomes the body of the line block.

The "line-block" directive constructs an element where line breaks and
initial indentation is significant and inline markup is supported.  It
is equivalent to a `parsed literal block`_ with different rendering:
typically in an ordinary serif typeface instead of a
typewriter/monospaced face, and not automatically indented.  (Have the
line-block directive begin a block quote to get an indented line
block.)  Line blocks are useful for address blocks and verse (poetry,
song lyrics), where the structure of lines is significant.  For
example, here's a classic::

    "To Ma Own Beloved Lassie: A Poem on her 17th Birthday", by
    Ewan McTeagle (for Lassie O'Shea):

        .. line-block::

            Lend us a couple of bob till Thursday.
            I'm absolutely skint.
            But I'm expecting a postal order and I can pay you back
                as soon as it comes.
            Love, Ewan.


.. _parsed-literal:

Parsed Literal Block
====================

:Directive Type: "parsed-literal"
:Doctree Element: literal_block_
:Directive Arguments: None.
:Directive Options: class_, name_
:Directive Content: Becomes the body of the literal block.

Unlike an ordinary literal block, the "parsed-literal" directive
constructs a literal block where the text is parsed for inline markup.
It is equivalent to a `line block`_ with different rendering:
typically in a typewriter/monospaced typeface, like an ordinary
literal block.  Parsed literal blocks are useful for adding hyperlinks
to code examples.

However, care must be taken with the text, because inline markup is
recognized and there is no protection from parsing.  Backslash-escapes
may be necessary to prevent unintended parsing.  And because the
markup characters are removed by the parser, care must also be taken
with vertical alignment.  Parsed "ASCII art" is tricky, and extra
whitespace may be necessary.

For example, all the element names in this content model are links::

    .. parsed-literal::

       ( (title_, subtitle_?)?,
         decoration_?,
         (docinfo_, transition_?)?,
         `%structure.model;`_ )


Code
====

:Directive Type: "code"
:Doctree Element: literal_block_, `inline elements`_
:Directive Arguments: One, optional (formal language).
:Directive Options: name, class, number-lines.
:Directive Content: Becomes the body of the literal block.
:Configuration Setting: syntax_highlight_.

The "code" directive constructs a literal block. If the code language is
specified, the content is parsed by the Pygments_ syntax highlighter and
tokens are stored in nested `inline elements`_ with class arguments
according to their syntactic category. The actual highlighting requires
a style-sheet (e.g. one `generated by Pygments`__, see the
`sandbox/stylesheets`__ for examples).

The parsing can be turned off with the syntax_highlight_ configuration
setting and command line option or by specifying the language as class_
option instead of directive argument. This also avoids warnings
when Pygments_ is not installed or the language is not in the
`supported languages and markup formats`_.

For inline code, use the `"code" role`_.

__ https://pygments.org/docs/cmdline/#generating-styles
__ https://docutils.sourceforge.io/sandbox/stylesheets/
.. _Pygments: https://pygments.org/
.. _syntax_highlight: ../../user/config.html#syntax-highlight
.. _supported languages and markup formats: https://pygments.org/languages/
.. _"code" role: roles.html#code


The following options are recognized:

``number-lines`` : integer_ (start line number, optional)
    Precede every line with a line number.
    The optional argument is the number of the first line (default 1).

and the common options class_ and name_.

Example::
  The content of the following directive ::

    .. code:: python

      def my_function():
          "just a test"
          print 8/2

  is parsed and marked up as Python source code.


Math
====

:Directive Type: "math"
:Doctree Element: math_block_
:Directive Arguments: None.
:Directive Options: class_, name_
:Directive Content: Becomes the body of the math block.
                    (Content blocks separated by a blank line are put in
                    adjacent math blocks.)
:Configuration Setting: math_output_

The "math" directive inserts blocks with mathematical content
(display formulas, equations) into the document. The input format is
`LaTeX math syntax`_ with support for Unicode symbols, for example::

  .. math::

    α_t(i) = P(O_1, O_2, … O_t, q_t = S_i λ)

Support is limited to a subset of *LaTeX math* by the conversion
required for many output formats.  For HTML, the `math_output`_
configuration setting (or the corresponding ``--math-output``
command line option) select between alternative output formats with
different subsets of supported elements. If a writer does not
support math typesetting, the content is inserted verbatim.

For inline formulas, use the `"math" role`_.

.. _LaTeX math syntax: ../../ref/rst/mathematics.html
.. _"math" role: roles.html#math
.. _math_output: ../../user/config.html#math-output


Rubric
======

:Directive Type: "rubric"
:Doctree Element: rubric_
:Directive Arguments: One, required (rubric text).
:Directive Options: class_, name_
:Directive Content: None.

..

     rubric n. 1. a title, heading, or the like, in a manuscript,
     book, statute, etc., written or printed in red or otherwise
     distinguished from the rest of the text. ...

     -- Random House Webster's College Dictionary, 1991

The "rubric" directive inserts a "rubric" element into the document
tree.  A rubric is like an informal heading that doesn't correspond to
the document's structure.


Epigraph
========

:Directive Type: "epigraph"
:Doctree Element: block_quote_
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: Interpreted as the body of the block quote.

An epigraph is an apposite (suitable, apt, or pertinent) short
inscription, often a quotation or poem, at the beginning of a document
or section.

The "epigraph" directive produces an "epigraph"-class block quote.
For example, this input::

     .. epigraph::

        No matter where you go, there you are.

        -- Buckaroo Banzai

becomes this document tree fragment::

    <block_quote classes="epigraph">
        <paragraph>
            No matter where you go, there you are.
        <attribution>
            Buckaroo Banzai


Highlights
==========

:Directive Type: "highlights"
:Doctree Element: block_quote_
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: Interpreted as the body of the block quote.

Highlights summarize the main points of a document or section, often
consisting of a list.

The "highlights" directive produces a "highlights"-class block quote.
See Epigraph_ above for an analogous example.


Pull-Quote
==========

:Directive Type: "pull-quote"
:Doctree Element: block_quote_
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: Interpreted as the body of the block quote.

A pull-quote is a small selection of text "pulled out and quoted",
typically in a larger typeface.  Pull-quotes are used to attract
attention, especially in long articles.

The "pull-quote" directive produces a "pull-quote"-class block quote.
See Epigraph_ above for an analogous example.


.. compound:

Compound Paragraph
==================

:Directive Type: "compound"
:Doctree Element: `compound <../doctree.html#compound>`__
:Directive Arguments: None.
:Directive Options: class_, name_
:Directive Content: Interpreted as body elements.

The "compound" directive is used to create a compound paragraph, which
is a single logical paragraph containing multiple physical body
elements such as simple paragraphs, literal blocks, tables, lists,
etc., instead of directly containing text and inline elements.  For
example::

    .. compound::

       The 'rm' command is very dangerous.  If you are logged
       in as root and enter ::

           cd /
           rm -rf *

       you will erase the entire contents of your file system.

In the example above, a literal block is "embedded" within a sentence
that begins in one physical paragraph and ends in another.

.. note::

   The "compound" directive is *not* a generic block-level container
   like HTML's ``<div>`` element.  Do not use it only to group a
   sequence of elements, or you may get unexpected results.

   If you need a generic block-level container, please use the
   container_ directive, described below.

Compound paragraphs are typically rendered as multiple distinct text
blocks, with the possibility of variations to emphasize their logical
unity:

* If paragraphs are rendered with a first-line indent, only the first
  physical paragraph of a compound paragraph should have that indent
  -- second and further physical paragraphs should omit the indents;
* vertical spacing between physical elements may be reduced;
* and so on.


Container
=========

:Directive Type: "container"
:Doctree Element: `container <container element_>`__
:Directive Arguments: One or more, optional (class names).
:Directive Options: name_
:Directive Content: Interpreted as body elements.

The "container" directive surrounds its contents (arbitrary body
elements) with a generic block-level "container" element.  Combined
with the optional "classes_" attribute argument(s), this is an
extension mechanism for users & applications.  For example::

    .. container:: custom

       This paragraph might be rendered in a custom way.

Parsing the above results in the following pseudo-XML::

    <container classes="custom">
        <paragraph>
            This paragraph might be rendered in a custom way.

The "container" directive is the equivalent of HTML's ``<div>``
element.  It may be used to group a sequence of elements for user- or
application-specific purposes.


===================================================
 Tables
===================================================

Formal tables need more structure than the reStructuredText `table syntax`_
supplies.  Tables may be given titles with the "table_" directive.
Sometimes reStructuredText tables are inconvenient to write, or table
data in a standard format is readily available.  The "csv-table_"
directive supports CSV [#CSV]_ data.

.. _table syntax: restructuredtext.html#tables


Table
=====

:Directive Type: "table"
:Doctree Element: `table <../doctree.html#table>`__
:Directive Arguments: One, optional (table title).
:Directive Options: Possible (see below).
:Directive Content: A normal `reStructuredText table`_.

The "table" directive is used to associate a
title with a table or specify options, e.g.::

    .. table:: Truth table for "not"
       :widths: auto

       =====  =====
         A    not A
       =====  =====
       False  True
       True   False
       =====  =====

The following options are recognized:

``align`` : "left", "center", or "right"
    The horizontal alignment of the table (new in Docutils 0.13).

``width`` : length_ or percentage_
    Sets the width of the table to the specified length or percentage
    of the line width.  If omitted, the renderer determines the width
    of the table based on its contents or the column ``widths``.

    .. _column-widths:

``widths`` : "auto", "grid", or a `list of integers`_
    Explicitly set column widths.
    Specifies relative widths if used with the ``width`` option.
    Overrides a `table_style`_ setting or class value "colwidths-auto".
    The default depends on the `table_style`_ configuration setting.

    *"auto"* delegates the determination of column widths to the backend
    (LaTeX, the HTML browser, ...).
    Default for the `html5 writer`_

    *"grid"* determines column widths from the widths of the input columns
    (in characters).
    Default for most writers.

    A *list of integers* is used instead of the input column widths.
    Implies *"grid"*.

Plus the common options class_ and name_.

.. _reStructuredText table: restructuredtext.html#tables
.. _table_style: ../../user/config.html#table-style


.. _csv-table:

CSV Table
=========

:Directive Type: "csv-table"
:Doctree Element: table_
:Directive Arguments: One, optional (table title).
:Directive Options: Possible (see below).
:Directive Content: A CSV (comma-separated values) table
                    or (with the `file`_ or `url`_ options) None

.. WARNING::

   The "csv-table" directive's `file`_ and `url`_ options represent
   potential security holes.  They can be disabled with the
   "file_insertion_enabled_" runtime setting.

The "csv-table" directive is used to create a table from CSV
(comma-separated values) [#CSV]_ data. The data may be internal
(an integral part of the document) or external (a separate file).

* Block markup and inline markup within cells is supported.  Line ends
  are recognized within quoted cells.

* There is no support for checking that the number of columns in each
  row is the same. The directive automatically adds empty entries at
  the end of short rows.

  .. Add "strict" option to verify input?

Example::

    .. csv-table:: Frozen Delights!
       :header: "Treat", "Quantity", "Description"
       :widths: 15, 10, 30

       "Albatross", 2.99, "On a stick!"
       "Crunchy Frog", 1.49, "If we took the bones out,
       it wouldn't be crunchy, now would it?"
       "Gannet Ripple", 1.99, "On a stick!"

The following options are recognized:

``align`` : "left", "center", or "right"
    The horizontal alignment of the table. (New in Docutils 0.13)

    .. _delimiter:

``delim`` : character_, "tab", or "space"
    The character used to separate data fields.
    The special values "tab" and "space" are converted to the respective
    whitespace characters. [#tab-expansion]_
    Defaults to ``,`` (comma).

``encoding`` : encoding_
    The text encoding of the external CSV data (file or URL).
    Defaults to the document's `input_encoding`_.

``escape`` : character_
    A character used to escape the delimiter_ or quote_ characters from
    the CSV parser. The default is no escape character -- fields may
    contain delimiter or newline characers if they are quoted, two quote
    characters stand for a literal one, e.g., ``"He said, ""Hi!"""``.

    .. Caution:: Setting ``escape`` to ``\`` (backslash) interferes with
       the reStructuredText `escaping mechanism`_ (applied after CSV
       parsing). You will need two backslashes to escape reStructuredText
       markup and four backslashes for a literal one.

    .. _`file`:

``file`` : path_
    The local filesystem path to a CSV data file.

``header`` : text_ (CSV data)
    Supplemental data for the table header, added independently of and
    before any ``header-rows`` from the main CSV data.  Must use the
    same CSV format as the main CSV data.

    .. Important:: Currently, the header option uses a hard-coded CSV
       dialect with the backslash as escape character (interfering with
       the reStructuredText `escaping mechanism`_). This will change to
       the documented behaviour in Docutils 0.21.

``header-rows`` : integer_
    The number of rows of CSV data to use in the table header.
    Defaults to 0.

``keepspace`` : flag_
    Treat whitespace immediately following the delimiter as
    significant.  The default is to ignore such whitespace.

    .. _quote:

``quote`` : character_
    The character used to quote fields containing special characters,
    such as the delimiter_, quote, or new-line characters.
    Defaults to ``"`` (quote).

``stub-columns`` : integer_
    The number of table columns to use as stubs (row titles, on the left).
    Defaults to 0.

    .. _`url`:

``url`` : URI_
    An Internet URI reference to a CSV data file.

``widths`` : `list of integers`_ or "auto"
    A list of relative column widths.
    The default is equal-width columns (100%/#columns).

    "auto" delegates the determination of column widths to the backend
    (LaTeX, the HTML browser, ...).

``width`` : length_ or percentage_
    Sets the width of the table to the specified length or percentage
    of the line width.  If omitted, the renderer determines the width
    of the table based on its contents or the column ``widths``.

and the common options class_ and name_.

.. [#CSV] CSV (comma separated values) is a common data format generated
   by spreadsheet applications and commercial databases. Despite the
   "comma" in its name, the field delimiter_ may be any Unicode character.

.. [#tab-expansion] Note, that tabs can be used as separator only in
   external files because hard tabs the directive content are
   `converted to spaces`__ before it reaches the CVS reader.

   __ restructuredtext.html#whitespace


List Table
==========

:Directive Type: "list-table"
:Doctree Element: table_
:Directive Arguments: One, optional (table title).
:Directive Options: Possible (see below).
:Directive Content: A uniform two-level bullet list.

(This is an initial implementation; `further ideas`__ may be implemented
in the future.)

__ ../../dev/rst/alternatives.html#list-driven-tables

The "list-table" directive is used to create a table from data in a
uniform two-level bullet list.  "Uniform" means that each sublist
(second-level list) must contain the same number of list items.

Example::

    .. list-table:: Frozen Delights!
       :widths: 15 10 30
       :header-rows: 1

       * - Treat
         - Quantity
         - Description
       * - Albatross
         - 2.99
         - On a stick!
       * - Crunchy Frog
         - 1.49
         - If we took the bones out, it wouldn't be
           crunchy, now would it?
       * - Gannet Ripple
         - 1.99
         - On a stick!

The following options are recognized:


``align`` : "left", "center", or "right"
    The horizontal alignment of the table.
    (New in Docutils 0.13)

``header-rows`` : integer_
    The number of rows of list data to use in the table header.
    Defaults to 0.

``stub-columns`` : integer_
    The number of table columns to use as stubs (row titles, on the
    left).  Defaults to 0.

    .. _table width:

``width`` : length_ or percentage_
    Sets the width of the table to the specified length or percentage
    of the line width.  If omitted, the renderer determines the width
    of the table based on its contents or the column ``widths``.

    .. _column widths:

``widths`` : `list of integers`_ or "auto"
    A list of relative column widths.
    The default is equal-width columns (100%/#columns).

    "auto" delegates the determination of column widths to the backend
    (LaTeX, the HTML browser, ...).

and the common options class_ and name_.


===================================================
 Document Parts
===================================================

.. _contents:

Table of Contents
=================

:Directive Type: "contents"
:Doctree Elements: pending_, topic_
:Directive Arguments: One, optional: title.
:Directive Options: Possible (see below).
:Directive Content: None.

The "contents" directive generates a table of contents (TOC) in a
topic_.  Topics, and therefore tables of contents, may occur anywhere
a section or transition may occur.  Body elements and topics may not
contain tables of contents.

Here's the directive in its simplest form::

    .. contents::

Language-dependent boilerplate text will be used for the title.  The
English default title text is "Contents".

An explicit title may be specified::

    .. contents:: Table of Contents

The title may span lines, although it is not recommended::

    .. contents:: Here's a very long Table of
       Contents title

Options may be specified for the directive, using a field list::

    .. contents:: Table of Contents
       :depth: 2

If the default title is to be used, the options field list may begin
on the same line as the directive marker::

    .. contents:: :depth: 2

The following options are recognized:

``depth`` : integer_
    The number of section levels that are collected in the table of
    contents.  The default is unlimited depth.

``local`` : flag_
    Generate a local table of contents.  Entries will only include
    subsections of the section in which the directive is given.  If no
    explicit title is given, the table of contents will not be titled.

``backlinks`` : "entry" or "top" or "none"
    Generate links from section headers back to the table of contents
    entries, the table of contents itself, or generate no back-links.

``class`` : text_ (list of `class names`_)
    Set a `"classes"`_ attribute value on the topic element.  See the
    `class directive`_ below.


.. _sectnum:
.. _section-numbering:

Automatic Section Numbering
===========================

:Directive Type: "sectnum" or "section-numbering" (synonyms)
:Doctree Elements: pending_, generated_
:Directive Arguments: None.
:Directive Options: Possible (see below).
:Directive Content: None.
:Configuration Setting: sectnum_xform_

The "sectnum" (or "section-numbering") directive automatically numbers
sections and subsections in a document (if not disabled by the
``--no-section-numbering`` command line option or the `sectnum_xform`_
configuration setting).

Section numbers are of the "multiple enumeration" form, where each
level has a number, separated by periods.  For example, the title of section
1, subsection 2, subsubsection 3 would have "1.2.3" prefixed.

The "sectnum" directive does its work in two passes: the initial parse
and a transform.  During the initial parse, a "pending" element is
generated which acts as a placeholder, storing any options internally.
At a later stage in the processing, the "pending" element triggers a
transform, which adds section numbers to titles.  Section numbers are
enclosed in a "generated" element, and titles have their "auto"
attribute set to "1".

The following options are recognized:

``depth`` : integer_
    The number of section levels that are numbered by this directive.
    The default is unlimited depth.

``prefix`` : text_
    An arbitrary string that is prefixed to the automatically
    generated section numbers.  It may be something like "3.2.", which
    will produce "3.2.1", "3.2.2", "3.2.2.1", and so on.  Note that
    any separating punctuation (in the example, a period, ".") must be
    explicitly provided.  The default is no prefix.

``suffix`` : text_
    An arbitrary string that is appended to the automatically
    generated section numbers.  The default is no suffix.

``start`` : integer_
    The value that will be used for the first section number.
    Combined with ``prefix``, this may be used to force the right
    numbering for a document split over several source files.  The
    default is 1.

.. _sectnum_xform: ../../user/config.html#sectnum-xform


.. _header:
.. _footer:

Document Header & Footer
========================

:Directive Types: "header" and "footer"
:Doctree Elements: decoration_, header, footer
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: Interpreted as body elements.

The "header" and "footer" directives create document decorations,
useful for page navigation, notes, time/datestamp, etc.  For example::

    .. header:: This space for rent.

This will add a paragraph to the document header, which will appear at
the top of the generated web page or at the top of every printed page.

These directives may be used multiple times, cumulatively.  There is
currently support for only one header and footer.

.. note::

   While it is possible to use the "header" and "footer" directives to
   create navigational elements for web pages, you should be aware
   that Docutils is meant to be used for *document* processing, and
   that a navigation bar is not typically part of a document.

   Thus, you may soon find Docutils' abilities to be insufficient for
   these purposes.  At that time, you should consider using a
   documentation generator like Sphinx_ rather than the "header" and
   "footer" directives.

   .. _Sphinx: http://sphinx-doc.org/

In addition to the use of these directives to populate header and
footer content, content may also be added automatically by the
processing system.  For example, if certain runtime settings are
enabled, the document footer is populated with processing information
such as a datestamp, a link to `the Docutils website`_, etc.

.. _the Docutils website: https://docutils.sourceforge.io


===================================================
 References
===================================================

.. _target-notes:

Target Footnotes
================

:Directive Type: "target-notes"
:Doctree Elements: pending_, footnote_, footnote_reference_
:Directive Arguments: None.
:Directive Options: class_, name_
:Directive Options: Possible (see below).
:Directive Content: None.

The "target-notes" directive creates a footnote for each external
target in the text, and corresponding footnote references after each
reference.  For every explicit target (of the form, ``.. _target name:
URL``) in the text, a footnote will be generated containing the
visible URL as content.


Footnotes
=========

**NOT IMPLEMENTED YET**

:Directive Type: "footnotes"
:Doctree Elements: pending_, topic_
:Directive Arguments: None?
:Directive Options: Possible?
:Directive Content: None.

@@@


Citations
=========

**NOT IMPLEMENTED YET**

:Directive Type: "citations"
:Doctree Elements: pending_, topic_
:Directive Arguments: None?
:Directive Options: Possible?
:Directive Content: None.

@@@

.. ---------------
    HTML-Specific
   ---------------

   Imagemap
   ========

   **NOT IMPLEMENTED YET**

   Non-standard element: imagemap.


===================================================
 Directives for Substitution Definitions
===================================================

The directives in this section may only be used in `substitution
definitions`_.  They may not be used directly, in standalone context.
The `image`_ directive may be used both in substitution definitions
and in the standalone context.

.. _substitution definitions:
.. _substitution definition: restructuredtext.html#substitution-definitions


.. _replace:

Replacement Text
================

:Directive Type: "replace"
:Doctree Element: Text & `inline elements`_
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: A single paragraph; may contain inline markup.

The "replace" directive is used to indicate replacement text for a
substitution reference.  It may be used within `substitution
definitions`_ only.  For example, this directive can be used to expand
abbreviations::

    .. |reST| replace:: reStructuredText

    Yes, |reST| is a long word, so I can't blame anyone for wanting to
    abbreviate it.

As reStructuredText doesn't support nested inline markup, the only way
to create a reference with styled text is to use substitutions with
the "replace" directive::

    I recommend you try |Python|_.

    .. |Python| replace:: Python, *the* best language around
    .. _Python: https://www.python.org/


.. _unicode:

Unicode Character Codes
=======================

:Directive Type: "unicode"
:Doctree Element: Text
:Directive Arguments: One or more, required (Unicode character codes,
                      optional text, and comments).
:Directive Options: Possible (see below).
:Directive Content: None.

The "unicode" directive converts Unicode character codes (numerical
values) to characters, and may be used in `substitution definitions`_
only.

The arguments, separated by spaces, can be:

.. _character code:

* **character codes** as

  - decimal numbers or

  - hexadecimal numbers, prefixed by ``0x``, ``x``, ``\x``, ``U+``,
    ``u``, or ``\u`` or as XML-style hexadecimal character entities,
    e.g. ``&#x1a2b;``

* **text**, which is used as-is.

Text following " .. " is a comment and is ignored.  The spaces between
the arguments are ignored and thus do not appear in the output.
Hexadecimal codes are case-insensitive.

For example, the following text::

    Copyright |copy| 2003, |BogusMegaCorp (TM)| |---|
    all rights reserved.

    .. |copy| unicode:: 0xA9 .. copyright sign
    .. |BogusMegaCorp (TM)| unicode:: BogusMegaCorp U+2122
       .. with trademark sign
    .. |---| unicode:: U+02014 .. em dash
       :trim:

results in:

    Copyright |copy| 2003, |BogusMegaCorp (TM)| |---|
    all rights reserved.

    .. |copy| unicode:: 0xA9 .. copyright sign
    .. |BogusMegaCorp (TM)| unicode:: BogusMegaCorp U+2122
       .. with trademark sign
    .. |---| unicode:: U+02014 .. em dash
       :trim:

The following options are recognized:

``ltrim`` : flag_
    Whitespace to the left of the substitution reference is removed.

``rtrim`` : flag_
    Whitespace to the right of the substitution reference is removed.

``trim`` : flag_
    Equivalent to ``ltrim`` plus ``rtrim``; whitespace on both sides
    of the substitution reference is removed.


Date
====

:Directive Type: "date"
:Doctree Element: Text
:Directive Arguments: One, optional (date format).
:Directive Options: None.
:Directive Content: None.

The "date" directive generates the current local date and inserts it
into the document as text.  This directive may be used in substitution
definitions only.

The optional directive content is interpreted as the desired date
format, using the same codes as Python's `time.strftime()`__ function.  The
default format is "%Y-%m-%d" (ISO 8601 date), but time fields can also
be used.  Examples::

    .. |date| date::
    .. |time| date:: %H:%M

    Today's date is |date|.

    This document was generated on |date| at |time|.

__ https://docs.python.org/3/library/time.html#time.strftime


===================================================
 Miscellaneous
===================================================

.. _include:

Including an External Document Fragment
=======================================

:Directive Type: "include"
:Doctree Elements: Depend on data being included
                   (literal_block_ with ``code`` or ``literal`` option).
:Directive Arguments: One, required (path_ to the file to include).
:Directive Options: Possible (see below).
:Directive Content: None.
:Configuration Setting: file_insertion_enabled_

.. WARNING::

   The "include" directive represents a potential security hole.  It
   can be disabled with the "file_insertion_enabled_" runtime setting.

   .. _file_insertion_enabled: ../../user/config.html#file-insertion-enabled

The "include" directive reads a text file. The directive argument is
the path to the file to be included, relative to the document containing
the directive. Unless the options ``literal``, ``code``, or ``parser``
are given, the file is parsed in the current document's context at the
point of the directive. For example::

    This first example will be parsed at the document level, and can
    thus contain any construct, including section headers.

    .. include:: inclusion.txt

    Back in the main document.

        This second example will be parsed in a block quote context.
        Therefore it may only contain body elements.  It may not
        contain section headers.

        .. include:: inclusion.txt

If an included document fragment contains section structure, the title
adornments must match those of the master document.

Standard data files intended for inclusion in reStructuredText
documents are distributed with the Docutils source code, located in
the "docutils" package in the ``docutils/parsers/rst/include``
directory.  To access these files, use the special syntax for standard
"include" data files, angle brackets around the file name::

    .. include:: <isonum.txt>

The current set of standard "include" data files consists of sets of
substitution definitions.  See `reStructuredText Standard Definition
Files`__ for details.

__ definitions.html

The following options are recognized:

``start-line`` : integer_
    Only the content starting from this line will be included.
    (As usual in Python, the first line has index 0 and negative values
    count from the end.)

``end-line`` : integer_
    Only the content up to (but excluding) this line will be included.

``start-after`` : text_
    Only the content after the first occurrence of the specified *text*
    in the external data file will be included.

``end-before`` : text_
    Only the content before the first occurrence of the specified *text*
    in the external data file (but after any ``start-after`` text)
    will be included.

``parser`` : text_ (parser name)
    Parse the included content with the specified parser.
    (New in Docutils 0.17)

``literal`` : flag_
    The entire included text is inserted into the document as a single
    literal block.

``code`` : text_ (formal language, optional)
    The argument and the included content are passed to
    the code_ directive (useful for program listings).

``number-lines`` : integer_ (start line number, optional)
    Precede every included line with a line number.
    The optional argument is the number of the first line (default 1).
    Works only with ``code`` or ``literal``.

``encoding`` : encoding_
    The text encoding of the external file.
    Defaults to the document's input_encoding_.

    .. _input_encoding: ../../user/config.html#input-encoding

``tab-width`` : integer_
    Number of spaces for hard tab expansion.
    A negative value prevents expansion of hard tabs. Defaults to the
    tab_width_ configuration setting.

    .. _tab_width: ../../user/config.html#tab-width

With ``code`` or ``literal`` the common options class_ and
name_ are recognized as well.

Combining ``start/end-line`` and ``start-after/end-before`` is possible. The
text markers will be searched in the specified lines (further limiting the
included content).


.. _raw:

Raw Data Pass-Through
=====================

:Directive Type: "raw"
:Doctree Element: `raw <../doctree.html#raw>`__
:Directive Arguments: One or more, required (output format types).
:Directive Options: Possible (see below).
:Directive Content: Stored verbatim, uninterpreted.  None (empty) if a
                    "file" or "url" option given.
:Configuration Setting: raw_enabled_

.. WARNING::

   The "raw" directive represents a potential security hole.  It can
   be disabled with the "raw_enabled_" runtime setting.
   Insertion of external files can be disabled with the
   "file_insertion_enabled_" runtime setting.

   .. _raw_enabled: ../../user/config.html#raw-enabled

.. Caution::

   The "raw" directive is a stop-gap measure allowing the author to
   bypass reStructuredText's markup.  It is a "power-user" feature
   that should not be overused or abused.  The use of "raw" ties
   documents to specific output formats and makes them less portable.

   If you often need to use the "raw" directive or a "raw"-derived
   interpreted text role, that is a sign either of overuse/abuse or
   that functionality may be missing from reStructuredText.  Please
   describe your situation in a message to the Docutils-users_ mailing
   list.

.. _Docutils-users: ../../user/mailing-lists.html#docutils-users

The "raw" directive indicates non-reStructuredText data that is to be
passed untouched to the Writer.  The names of the output formats are
given in the directive arguments.  The interpretation of the raw data
is up to the Writer.  A Writer may ignore any raw output not matching
its format.

For example, the following input would be passed untouched by an HTML
writer::

    .. raw:: html

       <hr width=50 size=10>

A LaTeX Writer could insert the following raw content into its
output stream::

    .. raw:: latex

       \setlength{\parindent}{0pt}

Raw data can also be read from an external file, specified in a
directive option.  In this case, the content block must be empty.  For
example::

    .. raw:: html
       :file: inclusion.html

Inline equivalents of the "raw" directive can be defined via
`custom interpreted text roles`_ derived from the `"raw" role`_.

The following options are recognized:

``file`` : path_
    The local filesystem path of a raw data file to be included.

``url`` : URI_
    An Internet URI reference to a raw data file to be included.

``encoding`` : encoding_
    The text encoding of the external raw data (with ``file`` or ``url``).
    Defaults to the main document's `input_encoding`_ (if specified).

and the common option class_.

.. _"raw" role: roles.html#raw


.. _class directive:

Class
=====

:Directive Type: "class"
:Doctree Element: pending_
:Directive Arguments: One or more, required (class names / attribute
                      values).
:Directive Options: None.
:Directive Content: Optional.  If present, it is interpreted as body
                    elements.

The "class" directive sets the `"classes"`_ attribute value on its content
or on the first immediately following [#]_ non-comment element [#]_.
The directive argument consists of one or more space-separated class
names. The names are transformed to conform to the regular expression
``[a-z](-?[a-z0-9]+)*`` (see `Identifier Normalization`_ below).

Examples::

    .. class:: special

    This is a "special" paragraph.

    .. class:: exceptional remarkable

    An Exceptional Section
    ======================

    This is an ordinary paragraph.

    .. class:: multiple

       First paragraph.

       Second paragraph.

The text above is parsed and transformed into this doctree fragment::

    <paragraph classes="special">
        This is a "special" paragraph.
    <section classes="exceptional remarkable">
        <title>
            An Exceptional Section
        <paragraph>
            This is an ordinary paragraph.
        <paragraph classes="multiple">
            First paragraph.
        <paragraph classes="multiple">
            Second paragraph.


.. [#] This is also true, if the class directive is "nested" at the end of
   an indented text block, for example::

       .. note:: the class values set in this directive-block do not apply to
          the note but the next paragraph.

          .. class:: special

       This is a paragraph with class value "special".

   This allows the "classification" of individual list items (except the
   first, as a preceding class directive applies to the list as a whole)::

       * bullet list

         .. class:: classy item

       * second item, with class argument

.. [#] To set a "classes" attribute value on a block quote, the
   "class" directive must be followed by an empty comment::

       .. class:: highlights
       ..

           Block quote text.

   Without the empty comment, the indented text would be interpreted as the
   "class" directive's content, and the classes would be applied to each
   element (paragraph, in this case) individually, instead of to the block
   quote as a whole.


Identifier Normalization
---------------------------------------------------

Docutils `class names`_ and `identifier keys`_ are normalized to conform
to the regular expression "``[a-z](-?[a-z0-9]+)*``" by converting

* alphabetic characters to lowercase,
* accented characters to the base character,
* non-alphanumeric characters to hyphens,
* consecutive hyphens into one hyphen

and stripping

* leading hyphens and number characters, and
* trailing hyphens.

For example ``"Rot.Gelb&Grün:+2008"`` becomes ``"rot-gelb-grun-2008"`` and
``"1000_Steps!"`` becomes ``"steps"``.

.. topic:: Rationale:

    Identifier keys must be valid in all supported output formats.

    For HTML 4.1 + CSS1 compatibility, identifiers should have no
    underscores, colons, or periods.  Hyphens may be used.

    - The `HTML 4.01 spec`_ defines identifiers based on SGML tokens:

          ID and NAME tokens must begin with a letter ([A-Za-z]) and
          may be followed by any number of letters, digits ([0-9]),
          hyphens ("-"), underscores ("_"), colons (":"), and periods
          (".").

          -- https://www.w3.org/TR/html401/types.html#type-name

    - The `CSS1 spec`_ defines identifiers based on the "name" token
      ("flex" tokenizer notation below; "latin1" and "escape" 8-bit
      characters have been replaced with XML entities)::

          unicode     \\[0-9a-f]{1,4}
          latin1      [&iexcl;-&yuml;]
          escape      {unicode}|\\[ -~&iexcl;-&yuml;]
          nmchar      [-A-Za-z0-9]|{latin1}|{escape}
          name        {nmchar}+

    The CSS1 rule requires underscores ("_"), colons (":"), and
    periods (".") to be escaped [#]_,
    therefore `"classes"`_ and `"ids"`_ attributes should not
    contain these characters.  Combined with HTML4.1 requirements (the
    first character must be a letter; no "unicode", "latin1", or
    "escape" characters), this results in the regular expression
    ``[A-Za-z][-A-Za-z0-9]*``. Docutils adds a normalization by
    downcasing and merge of consecutive hyphens.

    .. [#] CSS identifiers may use underscores ("_") directly in
       `CSS Level 1`__, `CSS2.1`__, CSS2.2__, and CSS3__.

       __ https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
       __ https://www.w3.org/TR/CSS/#css-level-1
       __ https://www.w3.org/TR/CSS22/syndata.html
       __ https://www.w3.org/TR/css-syntax-3/#typedef-ident-token

    .. _HTML 4.01 spec: https://www.w3.org/TR/html401/
    .. _CSS1 spec: https://www.w3.org/TR/REC-CSS1


.. _role:

Custom Interpreted Text Roles
=============================

:Directive Type: "role"
:Doctree Element: None; affects subsequent parsing.
:Directive Arguments: Two; one required (new `role name`_), one optional
                      (base role name, in parentheses).
:Directive Options: Possible (depends on base role).
:Directive Content: depends on base role.

The "role" directive dynamically creates a custom `interpreted text
role`_ and registers it with the parser.  This means that after
declaring a role like this::

    .. role:: custom

the document may use the new "custom" role::

    An example of using :custom:`interpreted text`

This will be parsed into the following document tree fragment::

    <paragraph>
        An example of using
        <inline classes="custom">
            interpreted text

The role must be declared in a document before it can be used.

.. _role name:

Role names are case insensitive and must conform to the rules of
simple `reference names`_ (but do not share a namespace with
hyperlinks, footnotes, and citations).

The new role may be based on an existing role, specified as a second
argument in parentheses (whitespace optional)::

    .. role:: custom(emphasis)

    :custom:`text`

The parsed result is as follows::

    <paragraph>
        <emphasis classes="custom">
            text

A special case is the `"raw" role`_: derived roles enable
inline `raw data pass-through`_, e.g.::

   .. role:: raw-role(raw)
      :format: html latex

   :raw-role:`raw text`

If no base role is explicitly specified, a generic custom role is
automatically used.  Subsequent interpreted text will produce an
"inline" element with a `"classes"`_ attribute, as in the first example
above.

With most roles, the ":class:" option can be used to set a "classes"
attribute that is different from the role name.  For example::

    .. role:: custom
       :class: special

    :custom:`interpreted text`

This is the parsed result::

    <paragraph>
        <inline classes="special">
            interpreted text

.. _role class:

The following option is recognized by the "role" directive for most
base roles:

``class`` : space separated list of `class names`_
    Set the `"classes"`_ attribute value on the element produced
    (``inline``, or element associated with a base class) when the
    custom interpreted text role is used.  If no directive options are
    specified, a "class" option with the directive argument (role
    name) as the value is implied.  See the `class directive`_ above.

Specific base roles may support other options and/or directive
content.  See the `reStructuredText Interpreted Text Roles`_ document
for details.

.. _reStructuredText Interpreted Text Roles: roles.html


.. _default-role:

Setting the Default Interpreted Text Role
=========================================

:Directive Type: "default-role"
:Doctree Element: None; affects subsequent parsing.
:Directive Arguments: One, optional (new default role name).
:Directive Options: None.
:Directive Content: None.

The "default-role" directive sets the default interpreted text role,
the role that is used for interpreted text without an explicit role.
For example, after setting the default role like this::

    .. default-role:: subscript

any subsequent use of implicit-role interpreted text in the document
will use the "subscript" role::

    An example of a `default` role.

This will be parsed into the following document tree fragment::

    <paragraph>
        An example of a
        <subscript>
            default
         role.

Custom roles may be used (see the "role_" directive above), but it
must have been declared in a document before it can be set as the
default role.  See the `reStructuredText Interpreted Text Roles`_
document for details of built-in roles.

The directive may be used without an argument to restore the initial
default interpreted text role, which is application-dependent.  The
initial default interpreted text role of the standard reStructuredText
parser is "title-reference".


.. _meta:

Metadata
========

:Directive Type: "meta"
:Doctree Element: `meta <../doctree.html#meta>`__
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: Must contain a flat field list.

The "meta" directive is used to specify metadata\ [#]_ to be stored
in, e.g., `HTML meta elements`_ or as `ODT file properties`_. The
LaTeX writer passes it to the ``pdfinfo`` option of the hyperref_
package. If an output format does not support "invisible" metadata,
content is silently dropped by the writer.

.. note:: Data from some `bibliographic fields`_ is automatically
   extracted and stored as metadata, too. However, Bibliographic
   Fields are also displayed in the document's screen rendering or
   printout.

   For an "invisible" *document title*, see the `metadata document
   title`_ directive below.

Within the directive block, a flat field list provides the syntax for
metadata.  The field name becomes the contents of the "name" attribute
of the META tag, and the field body (interpreted as a single string
without inline markup) becomes the contents of the "content"
attribute.  For example::

    .. meta::
       :description: The reStructuredText plaintext markup language
       :keywords: plaintext, markup language

This would be converted to the following HTML::

    <meta name="description"
        content="The reStructuredText plaintext markup language">
    <meta name="keywords" content="plaintext, markup language">

Support for other META attributes ("http-equiv", "scheme", "lang",
"dir") are provided through field arguments, which must be of the form
"attr=value"::

    .. meta::
       :description lang=en: An amusing story
       :description lang=fr: Une histoire amusante

And their HTML equivalents::

    <meta name="description" lang="en" content="An amusing story">
    <meta name="description" lang="fr" content="Une histoire amusante">

Some META tags use an "http-equiv" attribute instead of the "name"
attribute.  To specify "http-equiv" META tags, simply omit the name::

    .. meta::
       :http-equiv=Content-Type: text/html; charset=ISO-8859-1

HTML equivalent::

    <meta http-equiv="Content-Type"
         content="text/html; charset=ISO-8859-1">

.. [#] "Metadata" is data about data, in this case data about the
   document. Metadata is, e.g., used to describe and classify web
   pages in the World Wide Web, in a form that is easy for search
   engines to extract and collate.

.. _HTML meta elements:
   https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element
.. _ODT file properties:
   https://en.wikipedia.org/wiki/OpenDocument_technical_specification#Metadata
.. _hyperref: https://ctan.org/pkg/hyperref
.. _bibliographic fields: restructuredtext.html#bibliographic-fields


.. _title:

Metadata Document Title
=======================

:Directive Type: "title"
:Doctree Element: Sets the document's `title attribute`_.
:Directive Arguments: One, required (the title text).
:Directive Options: None.
:Directive Content: None.

The "title" directive specifies the document title as metadata, which
does not become part of the document body. It overrides the
document-supplied `document title`_ and the `"title" configuration
setting`_. For example, in HTML output the metadata document title
appears in the title bar of the browser window.

.. _document title: restructuredtext.html#document-title
.. _"title" configuration setting: ../../user/config.html#title


Restructuredtext-Test-Directive
===============================

:Directive Type: "restructuredtext-test-directive"
:Doctree Element: system_warning
:Directive Arguments: None.
:Directive Options: None.
:Directive Content: Interpreted as a literal block.

This directive is provided for test purposes only.  (Nobody is
expected to type in a name *that* long!)  It is converted into a
level-1 (info) system message showing the directive data, possibly
followed by a literal block containing the rest of the directive
block.


===================================================
Common Options
===================================================

Most of the directives that generate doctree elements support the following
options:

.. _class-option:
.. _class:

``class`` : space separated list of `class names`_
    Set a `"classes"`_ attribute value on the doctree element generated by
    the directive. See also the `class directive`_.

    .. _name:

``name`` : text_
    Add `text` to the `"names"`_ attribute of the doctree element generated
    by the directive. This allows `hyperlink references`_ to the element
    using `text` as `reference name`_.

    Specifying the `name` option of a directive, e.g., ::

      .. image:: bild.png
         :name: my picture

    is a concise syntax alternative to preceding it with a `hyperlink
    target`_ ::

      .. _my picture:

      .. image:: bild.png


===================================================
Common Option Value Types
===================================================

*"keyword"*
  recognized keywords.
  Used without quotes in the reStructuredText source.

  .. _character:

*character*
  single character.
  May be specified as literal character or as Unicode `character code`_
  (cf. the unicode_ directive).

  .. _encoding:

*encoding*
  text encoding name.
  Docutils looks it up in the list of registered codecs_
  (see also `Standard Encodings`_).

  .. _flag:

*flag*
  no value.

  .. _integer:

*integer*
  integer number.
  A _`list of integers` may be comma- or whitespace-separated.

  .. _length:

*length*
  number followed by one of the supported `length units`_.

  .. _path:

*path*
  local filesystem path. Newlines are removed.

  .. _text:

*text*
  free text (with possible restrictions in parentheses).

  .. _URI:

*URI*
  `Uniform Resource Identifier`_.
  Whitespace is removed, cf. `External hyperlink targets`_.


.. _codecs: https://docs.python.org/3/library/codecs.html
.. _Standard Encodings:
    https://docs.python.org/3/library/codecs.html#standard-encodings
.. _Uniform Resource Identifier:
    https://en.wikipedia.org/wiki/Uniform_Resource_Identifier

.. _block_quote: ../doctree.html#block-quote
.. _caption: ../doctree.html#caption
.. _class names: ../doctree.html#classname
.. _"classes":
.. _classes: ../doctree.html#classes
.. _container element: ../doctree.html#container
.. _decoration: ../doctree.html#decoration
.. _escaping mechanism: restructuredtext.html#escaping-mechanism
.. _external hyperlink targets:
    restructuredtext.html#external-hyperlink-targets
.. _figure: ../doctree.html#figure
.. _footnote: ../doctree.html#footnote
.. _footnote_reference: ../doctree.html#footnote-reference
.. _generated: ../doctree.html#generated
.. _hyperlink references: restructuredtext.html#hyperlink-references
.. _hyperlink target: restructuredtext.html#hyperlink-targets
.. _identifier keys: ../doctree.html#ids-type
.. _"ids": ../doctree.html#ids
.. _inline elements: ../doctree.html#inline-elements
.. _interpreted text role: roles.html
.. _legend: ../doctree.html#legend
.. _length units: restructuredtext.html#length-units
.. _line_block: ../doctree.html#line-block
.. _literal_block: ../doctree.html#literal-block
.. _math_block: ../doctree.html#math-block
.. _"names": ../doctree.html#names
.. _pending: ../doctree.html#pending
.. _percentage: restructuredtext.html#percentage-units
.. _reference name:
.. _reference names: restructuredtext.html#reference-names
.. _rubric: ../doctree.html#rubric
.. _sidebar: ../doctree.html#sidebar
.. _title attribute: ../doctree.html#title-attribute
.. _topic: ../doctree.html#topic




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 011.📜 docutils-0.20.1/docs/ref/rst/introduction.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

=====================================
 An Introduction to reStructuredText
=====================================
:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

reStructuredText_ is an easy-to-read, what-you-see-is-what-you-get
plaintext markup syntax and parser system.  It is useful for inline
program documentation (such as Python docstrings), for quickly
creating simple web pages, and for standalone documents.
reStructuredText_ is a proposed revision and reinterpretation of the
StructuredText_ and Setext_ lightweight markup systems.

reStructuredText is designed for extensibility for specific
application domains.  Its parser is a component of Docutils_.

This document defines the goals_ of reStructuredText and provides a
history_ of the project.  It is written using the reStructuredText
markup, and therefore serves as an example of its use.  For a gentle
introduction to using reStructuredText, please read `A
ReStructuredText Primer`_.  The `Quick reStructuredText`_ user
reference is also useful.  The `reStructuredText Markup
Specification`_ is the definitive reference.  There is also an
analysis of the `Problems With StructuredText`_.

ReStructuredText's web page is
https://docutils.sourceforge.io/rst.html.

.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _StructuredText: https://zopestructuredtext.readthedocs.org/
.. _Setext: https://docutils.sourceforge.io/mirror/setext.html
.. _Docutils: https://docutils.sourceforge.io/
.. _A ReStructuredText Primer: ../../user/rst/quickstart.html
.. _Quick reStructuredText: ../../user/rst/quickref.html
.. _reStructuredText Markup Specification: restructuredtext.html
.. _Problems with StructuredText: ../../dev/rst/problems.html


Goals
=====

The primary goal of reStructuredText_ is to define a markup syntax for
use in Python docstrings and other documentation domains, that is
readable and simple, yet powerful enough for non-trivial use.  The
intended purpose of the reStructuredText markup is twofold:

- the establishment of a set of standard conventions allowing the
  expression of structure within plaintext, and

- the conversion of such documents into useful structured data
  formats.

The secondary goal of reStructuredText is to be accepted by the Python
community (by way of being blessed by PythonLabs and the BDFL [#]_) as
a standard for Python inline documentation (possibly one of several
standards, to account for taste).

.. [#] Python's creator and "Benevolent Dictator For Life",
   Guido van Rossum.

To clarify the primary goal, here are specific design goals, in order,
beginning with the most important:

1. Readable.  The marked-up text must be easy to read without any
   prior knowledge of the markup language.  It should be as easily
   read in raw form as in processed form.

2. Unobtrusive.  The markup that is used should be as simple and
   unobtrusive as possible.  The simplicity of markup constructs
   should be roughly proportional to their frequency of use.  The most
   common constructs, with natural and obvious markup, should be the
   simplest and most unobtrusive.  Less common constructs, for which
   there is no natural or obvious markup, should be distinctive.

3. Unambiguous.  The rules for markup must not be open for
   interpretation.  For any given input, there should be one and only
   one possible output (including error output).

4. Unsurprising.  Markup constructs should not cause unexpected output
   upon processing.  As a fallback, there must be a way to prevent
   unwanted markup processing when a markup construct is used in a
   non-markup context (for example, when documenting the markup syntax
   itself).

5. Intuitive.  Markup should be as obvious and easily remembered as
   possible, for the author as well as for the reader.  Constructs
   should take their cues from such naturally occurring sources as
   plaintext email messages, newsgroup postings, and text
   documentation such as README.txt files.

6. Easy.  It should be easy to mark up text using any ordinary text
   editor.

7. Scalable.  The markup should be applicable regardless of the length
   of the text.

8. Powerful.  The markup should provide enough constructs to produce a
   reasonably rich structured document.

9. Language-neutral.  The markup should apply to multiple natural (as
   well as artificial) languages, not only English.

10. Extensible.  The markup should provide a simple syntax and
    interface for adding more complex general markup, and custom
    markup.

11. Output-format-neutral.  The markup will be appropriate for
    processing to multiple output formats, and will not be biased
    toward any particular format.

The design goals above were used as criteria for accepting or
rejecting syntax, or selecting between alternatives.

It is emphatically *not* the goal of reStructuredText to define
docstring semantics, such as docstring contents or docstring length.
These issues are orthogonal to the markup syntax and beyond the scope
of this specification.

Also, it is not the goal of reStructuredText to maintain compatibility
with StructuredText_ or Setext_.  reStructuredText shamelessly steals
their great ideas and ignores the not-so-great.

Author's note:

    Due to the nature of the problem we're trying to solve (or,
    perhaps, due to the nature of the proposed solution), the above
    goals unavoidably conflict.  I have tried to extract and distill
    the wisdom accumulated over the years in the Python Doc-SIG_
    mailing list and elsewhere, to come up with a coherent and
    consistent set of syntax rules, and the above goals by which to
    measure them.

    There will inevitably be people who disagree with my particular
    choices.  Some desire finer control over their markup, others
    prefer less.  Some are concerned with very short docstrings,
    others with full-length documents.  This specification is an
    effort to provide a reasonably rich set of markup constructs in a
    reasonably simple form, that should satisfy a reasonably large
    group of reasonable people.

    David Goodger (goodger@python.org), 2001-04-20

.. _Doc-SIG: https://www.python.org/sigs/doc-sig/


History
=======

reStructuredText_, the specification, is based on StructuredText_ and
Setext_.  StructuredText was developed by Jim Fulton of `Zope
Corporation`_ (formerly Digital Creations) and first released in 1996.
It is now released as a part of the open-source "Z Object Publishing
Environment" (ZOPE_).  Ian Feldman's and Tony Sanders' earlier Setext_
specification was either an influence on StructuredText or, by their
similarities, at least evidence of the correctness of this approach.

I discovered StructuredText_ in late 1999 while searching for a way to
document the Python modules in one of my projects.  Version 1.1 of
StructuredText was included in Daniel Larsson's pythondoc_.  Although
I was not able to get pythondoc to work for me, I found StructuredText
to be almost ideal for my needs.  I joined the Python Doc-SIG_
(Documentation Special Interest Group) mailing list and found an
ongoing discussion of the shortcomings of the StructuredText
"standard".  This discussion has been going on since the inception of
the mailing list in 1996, and possibly predates it.

I decided to modify the original module with my own extensions and
some suggested by the Doc-SIG members.  I soon realized that the
module was not written with extension in mind, so I embarked upon a
general reworking, including adapting it to the "re" regular
expression module (the original inspiration for the name of this
project).  Soon after I completed the modifications, I discovered that
StructuredText.py was up to version 1.23 in the ZOPE distribution.
Implementing the new syntax extensions from version 1.23 proved to be
an exercise in frustration, as the complexity of the module had become
overwhelming.

In 2000, development on StructuredTextNG ("Next Generation") began at
`Zope Corporation`_ (then Digital Creations).  It seems to have many
improvements, but still suffers from many of the problems of classic
StructuredText.

I decided that a complete rewrite was in order, and even started a
`reStructuredText SourceForge project`_ (now inactive).  My
motivations (the "itches" I aim to "scratch") are as follows:

- I need a standard format for inline documentation of the programs I
  write.  This inline documentation has to be convertible to other
  useful formats, such as HTML.  I believe many others have the same
  need.

- I believe in the Setext/StructuredText idea and want to help
  formalize the standard.  However, I feel the current specifications
  and implementations have flaws that desperately need fixing.

- reStructuredText could form part of the foundation for a
  documentation extraction and processing system, greatly benefitting
  Python.  But it is only a part, not the whole.  reStructuredText is
  a markup language specification and a reference parser
  implementation, but it does not aspire to be the entire system.  I
  don't want reStructuredText or a hypothetical Python documentation
  processor to die stillborn because of over-ambition.

- Most of all, I want to help ease the documentation chore, the bane
  of many a programmer.

Unfortunately I was sidetracked and stopped working on this project.
In November 2000 I made the time to enumerate the problems of
StructuredText and possible solutions, and complete the first draft of
a specification.  This first draft was posted to the Doc-SIG in three
parts:

- `A Plan for Structured Text`__
- `Problems With StructuredText`__
- `reStructuredText: Revised Structured Text Specification`__

__ https://mail.python.org/pipermail/doc-sig/2000-November/001239.html
__ https://mail.python.org/pipermail/doc-sig/2000-November/001240.html
__ https://mail.python.org/pipermail/doc-sig/2000-November/001241.html

In March 2001 a flurry of activity on the Doc-SIG spurred me to
further revise and refine my specification, the result of which you
are now reading.  An offshoot of the reStructuredText project has been
the realization that a single markup scheme, no matter how well
thought out, may not be enough.  In order to tame the endless debates
on Doc-SIG, a flexible `Docstring Processing System framework`_ needed
to be constructed.  This framework has become the more important of
the two projects; reStructuredText_ has found its place as one
possible choice for a single component of the larger framework.

The project web site and the first project release were rolled out in
June 2001, including posting the second draft of the spec [#spec-2]_
and the first draft of PEPs 256, 257, and 258 [#peps-1]_ to the
Doc-SIG.  These documents and the project implementation proceeded to
evolve at a rapid pace.  Implementation history details can be found
in the `project history file`_.

In November 2001, the reStructuredText parser was nearing completion.
Development of the parser continued with the addition of small
convenience features, improvements to the syntax, the filling in of
gaps, and bug fixes.  After a long holiday break, in early 2002 most
development moved over to the other Docutils components, the
"Readers", "Writers", and "Transforms".  A "standalone" reader
(processes standalone text file documents) was completed in February,
and a basic HTML writer (producing HTML 4.01, using CSS-1) was
completed in early March.

`PEP 287`_, "reStructuredText Standard Docstring Format", was created
to formally propose reStructuredText as a standard format for Python
docstrings, PEPs, and other files.  It was first posted to
comp.lang.python_ and the Python-dev_ mailing list on 2002-04-02.

Version 0.4 of the reStructuredText__ and `Docstring Processing
System`_ projects were released in April 2002.  The two projects were
immediately merged, renamed to "Docutils_", and a 0.1 release soon
followed.

.. __: `reStructuredText SourceForge project`_

.. [#spec-2] The second draft of the spec:

   - `An Introduction to reStructuredText`__
   - `Problems With StructuredText`__
   - `reStructuredText Markup Specification`__
   - `Python Extensions to the reStructuredText Markup
     Specification`__

   __ https://mail.python.org/pipermail/doc-sig/2001-June/001858.html
   __ https://mail.python.org/pipermail/doc-sig/2001-June/001859.html
   __ https://mail.python.org/pipermail/doc-sig/2001-June/001860.html
   __ https://mail.python.org/pipermail/doc-sig/2001-June/001861.html

.. [#peps-1] First drafts of the PEPs:

   - `PEP 256: Docstring Processing System Framework`__
   - `PEP 258: DPS Generic Implementation Details`__
   - `PEP 257: Docstring Conventions`__

   Current working versions of the PEPs can be found in
   https://docutils.sourceforge.io/docs/peps/, and official versions
   can be found in the `master PEP repository`_.

   __ https://mail.python.org/pipermail/doc-sig/2001-June/001855.html
   __ https://mail.python.org/pipermail/doc-sig/2001-June/001856.html
   __ https://mail.python.org/pipermail/doc-sig/2001-June/001857.html


.. _Zope Corporation: http://www.zope.com
.. _ZOPE: https://www.zope.dev
.. _reStructuredText SourceForge project:
   http://structuredtext.sourceforge.net/
.. _pythondoc: http://starship.python.net/crew/danilo/pythondoc/
.. _project history file: ../../../HISTORY.html
.. _PEP 287: ../../peps/pep-0287.html
.. _Docstring Processing System framework: ../../peps/pep-0256.html
.. _comp.lang.python: news:comp.lang.python
.. _Python-dev: https://mail.python.org/pipermail/python-dev/
.. _Docstring Processing System: http://docstring.sourceforge.net/
.. _master PEP repository: https://peps.python.org/



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 012.📜 docutils-0.20.1/docs/ref/rst/mathematics.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

============================
LaTeX syntax for mathematics
============================

.. role:: m(math)
.. default-role:: math
.. |latex| replace:: L\ :sup:`A`\ T\ :sub:`E`\ X

:abstract: Docutils supports mathematical content with a `"math"
           directive`__ and `role`__. The input format is *LaTeX math
           syntax*\ [#math-syntax]_ with support for literal Unicode symbols.

.. .. sectnum::
.. .. contents:: Table of Contents

__ https://docutils.sourceforge.io/docs/ref/rst/directives.html#math
__ https://docutils.sourceforge.io/docs/ref/rst/roles.html#math

Inline formulas and displayed equations
=======================================

The **math role** can be used for inline mathematical expressions:
``:math:`\psi(r) = \exp(-2r)``` will produce :m:`\psi(r)=\exp(-2r)`.
Inside the backtics you can write anything you would write between dollar
signs in a LaTeX document.  [#math-syntax]_
 
.. tip::

  If you put ``.. default-role:: math`` at the top of your
  document, you can write ```x^2``` instead of the longer
  version: ``:math:`x^2```.  You can also introduce an
  abbreviation like this ``.. role:: m(math)``.  That will allow
  you to write ``:m:`x^2``` or ```x^2`:m:``.


The **math directive** is used for displayed equations. It corresponds to
an ``equation*`` or ``align*`` environment in a LaTeX document. If you
write::

  .. math:: \psi(r) = e^{-2r}

you will get:

.. math:: \psi(r) = e^{-2r}

A more complex example is the definition of the `Fourier transform`_::

  .. math::
     :name: Fourier transform

     (\mathcal{F}f)(y)
      = \frac{1}{\sqrt{2\pi}^{\ n}}
        \int_{\mathbb{R}^n} f(x)\,
        e^{-\mathrm{i} y \cdot x} \,\mathrm{d} x.

which is rendered as:

.. math::
   :name: Fourier transform

     (\mathcal{F}f)(y)
      = \frac{1}{\sqrt{2\pi}^{\ n}}
        \int_{\mathbb{R}^n} f(x)\,
        e^{-\mathrm{i} y \cdot x} \,\mathrm{d} x.

The ``:name:`` option puts a label on the equation that can be
linked to by `hyperlink references`_.

Displayed equations can use ``\\`` and ``&`` for line shifts and alignments::

  .. math::

   a &= (x + y)^2         &  b &= (x - y)^2 \\
     &= x^2 + 2xy + y^2   &    &= x^2 - 2xy + y^2

LaTeX output will wrap it in an ``align*`` environment.
The result is:

.. math::

   a &= (x + y)^2         &  b &= (x - y)^2 \\
     &= x^2 + 2xy + y^2   &    &= x^2 - 2xy + y^2


.. [#math-syntax] The supported LaTeX commands include AMS extensions
   (see, e.g., the `Short Math Guide`_). Some of the shown symbols
   require the "amssymb" `LaTeX package`_ (or another package providing
   the AMS symbol macros) when exported with the "latex" writer.

   The support is limited to a subset of *LaTeX math* by the conversion
   required for many output formats.  For HTML, the `math_output`_
   configuration setting (or the corresponding ``--math-output`` command
   line option) selects between alternative output formats with different
   subsets of supported elements. If a writer does not support math
   typesetting, the content is inserted verbatim.

.. _hyperlink references:
   ../ref/rst/restructuredtext.html#hyperlink-references
.. _Short Math Guide:
   https://mirrors.ctan.org/info/short-math-guide/short-math-guide.pdf
.. _math_output:
   https://docutils.sourceforge.io/docs/user/config.html#math-output
.. _LaTeX package:
   ../../user/latex.html#latex-document-classes-and-packages


Mathematical symbols
====================

The following tables are adapted from the first edition of
"The LaTeX Companion" (Goossens, Mittelbach, Samarin) and the
AMS `Short Math Guide`_.


Accents and embellishments
--------------------------

The "narrow" accents are intended for a single-letter base.

.. class:: colwidths-auto

  =========== =============  =========== =============  ============== ================
  `\acute{x}` ``\acute{x}``  `\dot{t}`   ``\dot{t}``    `\hat{x}`      ``\hat{x}``
  `\bar{v}`   ``\bar{v}``    `\ddot{t}`  ``\ddot{t}``   `\mathring{x}` ``\mathring{x}``
  `\breve{x}` ``\breve{x}``  `\dddot{t}` ``\dddot{t}``  `\tilde{n}`    ``\tilde{n}``
  `\check{x}` ``\check{x}``  `\grave{x}` ``\grave{x}``  `\vec{x}`      ``\vec{x}``
  =========== =============  =========== =============  ============== ================

When adding an accent to an i or j in math, dotless variants can be
obtained with ``\imath`` and ``\jmath``: `\hat \imath`, `\vec{\jmath}`.

For embellishments that span multiple symbols, use:

.. class:: colwidths-auto

  ========================== ============================  =========================== =============================
  `\widetilde{gbi}`          ``\widetilde{gbi}``           `\widehat{gbi}`             ``\widehat{gbi}``
  `\overline{gbi}`           ``\overline{gbi}``            `\underline{gbi}`           ``\underline{gbi}``
  `\overbrace{gbi}`          ``\overbrace{gbi}``           `\underbrace{gbi}`          ``\underbrace{gbi}``
  `\overleftarrow{gbi}`      ``\overleftarrow{gbi}``       `\underleftarrow{gbi}`      ``\underleftarrow{gbi}``
  `\overrightarrow{gbi}`     ``\overrightarrow{gbi}``      `\underrightarrow{gbi}`     ``\underrightarrow{gbi}``
  `\overleftrightarrow{gbi}` ``\overleftrightarrow{gbi}``  `\underleftrightarrow{gbi}` ``\underleftrightarrow{gbi}``
  ========================== ============================  =========================== =============================


Binary operators
----------------
.. class:: colwidths-auto

  ================== ====================  ================= ===================  ================== ====================
  `*`                ``*``                 `\circledast`     ``\circledast``      `\ominus`          ``\ominus``
  `+`                ``+``                 `\circledcirc`    ``\circledcirc``     `\oplus`           ``\oplus``
  `-`                ``-``                 `\circleddash`    ``\circleddash``     `\oslash`          ``\oslash``
  `:`                ``:``                 `\cup`            ``\cup``             `\otimes`          ``\otimes``
  `\Cap`             ``\Cap``              `\curlyvee`       ``\curlyvee``        `\pm`              ``\pm``
  `\Cup`             ``\Cup``              `\curlywedge`     ``\curlywedge``      `\rightthreetimes` ``\rightthreetimes``
  `\amalg`           ``\amalg``            `\dagger`         ``\dagger``          `\rtimes`          ``\rtimes``
  `\ast`             ``\ast``              `\ddagger`        ``\ddagger``         `\setminus`        ``\setminus``
  `\bigcirc`         ``\bigcirc``          `\diamond`        ``\diamond``         `\smallsetminus`   ``\smallsetminus``
  `\bigtriangledown` ``\bigtriangledown``  `\div`            ``\div``             `\sqcap`           ``\sqcap``
  `\bigtriangleup`   ``\bigtriangleup``    `\divideontimes`  ``\divideontimes``   `\sqcup`           ``\sqcup``
  `\boxdot`          ``\boxdot``           `\dotplus`        ``\dotplus``         `\star`            ``\star``
  `\boxminus`        ``\boxminus``         `\doublebarwedge` ``\doublebarwedge``  `\times`           ``\times``
  `\boxplus`         ``\boxplus``          `\gtrdot`         ``\gtrdot``          `\triangleleft`    ``\triangleleft``
  `\boxtimes`        ``\boxtimes``         `\intercal`       ``\intercal``        `\triangleright`   ``\triangleright``
  `\bullet`          ``\bullet``           `\leftthreetimes` ``\leftthreetimes``  `\uplus`           ``\uplus``
  `\cap`             ``\cap``              `\lessdot`        ``\lessdot``         `\vee`             ``\vee``
  `\cdot`            ``\cdot``             `\ltimes`         ``\ltimes``          `\veebar`          ``\veebar``
  `\centerdot`       ``\centerdot``        `\mp`             ``\mp``              `\wedge`           ``\wedge``
  `\circ`            ``\circ``             `\odot`            ``\odot``           `\wr`              ``\wr``
  ================== ====================  ================= ===================  ================== ====================


Extensible delimiters
---------------------
Unless you indicate otherwise, delimiters in math formulas remain at the
standard size regardless of the height of the enclosed material. To get
adaptable sizes, use ``\left`` and ``\right`` prefixes, for example
`g(A,B,Y) = f \left(A,B,X=h^{[X]}(Y)\right)` or

.. math:: a_n = \left(\frac{1}{2}\right)^n

Use ``.`` for "empty" delimiters:

.. math:: A = \left . \frac{1}{1-n}\, \right |_{n=0}^\infty

See also the commands for fixed `delimiter sizes`_ below.

The following symbols extend when used with ``\left`` and ``\right``:

Pairing delimiters
~~~~~~~~~~~~~~~~~~
.. class:: colwidths-auto

  =============== =================   ========================= ===========================
  `( )`           ``( )``             `\langle \rangle`         ``\langle \rangle``
  `[ ]`           ``[ ]``             `\lceil  \rceil`          ``\lceil \rceil``
  `\{ \}`         ``\{ \}``           `\lfloor \rfloor`         ``\lfloor \rfloor``
  `\lvert \rvert` ``\lvert \rvert``   `\lgroup \rgroup`         ``\lgroup \rgroup``
  `\lVert \rVert` ``\lVert \rVert``   `\lmoustache \rmoustache` ``\lmoustache \rmoustache``
  =============== =================   ========================= ===========================


Nonpairing delimiters
~~~~~~~~~~~~~~~~~~~~~
.. class:: colwidths-auto

  ==== ======  ============ ==============  ============ ==============
  `|`  ``|``   `\vert`      ``\vert``       `\arrowvert` ``\arrowvert``
  `\|` ``\|``  `\Vert`      ``\Vert``       `\Arrowvert` ``\Arrowvert``
  `/`  ``/``   `\backslash` ``\backslash``  `\bracevert` ``\bracevert``
  ==== ======  ============ ==============  ============ ==============

The use of ``|`` and ``\|`` for pairs of vertical bars may produce
incorrect spacing, e.g., ``|k|=|-k|`` produces `|k| = |−k|` and
``|\sin(x)|`` produces `|\sin(x)|`. The pairing delimiters, e.g.
`\lvert -k\rvert` and `\lvert\sin(x)\rvert`, prevent this problem.


Extensible vertical arrows
--------------------------
.. class:: colwidths-auto

  ===============================  ======================================
  `\uparrow`     ``\uparrow``      `\Uparrow`     ``\Uparrow``
  `\downarrow`   ``\downarrow``    `\Downarrow`   ``\Downarrow``
  `\updownarrow` ``\updownarrow``  `\Updownarrow` ``\Updownarrow``
  ===============================  ======================================


Functions (named operators)
---------------------------
.. class:: colwidths-auto

  ========= ===========  ========= ===========  ============= ================
  `\arccos` ``\arccos``  `\gcd`    ``\gcd``     `\Pr`         ``\Pr``
  `\arcsin` ``\arcsin``  `\hom`    ``\hom``     `\projlim`    ``\projlim``
  `\arctan` ``\arctan``  `\inf`    ``\inf``     `\sec`        ``\sec``
  `\arg`    ``\arg``     `\injlim` ``\injlim``  `\sin`        ``\sin``
  `\cos`    ``\cos``     `\ker`    ``\ker``     `\sinh`       ``\sinh``
  `\cosh`   ``\cosh``    `\lg`     ``\lg``      `\sup`        ``\sup``
  `\cot`    ``\cot``     `\lim`    ``\lim``     `\tan`        ``\tan``
  `\coth`   ``\coth``    `\liminf` ``\liminf``  `\tanh`       ``\tanh``
  `\csc`    ``\csc``     `\limsup` ``\limsup``  `\varlimsup`  ``\varlimsup``
  `\deg`    ``\deg``     `\ln`     ``\ln``      `\varliminf`  ``\varliminf``
  `\det`    ``\det``     `\log`    ``\log``     `\varprojlim` ``\varprojlim``
  `\dim`    ``\dim``     `\max`    ``\max``     `\varinjlim`  ``\varinjlim``
  `\exp`    ``\exp``     `\min`    ``\min``
  ========= ===========  ========= ===========  ============= ================

Named operators outside the above list can be typeset with
``\operatorname{name}``, e.g.

.. math:: \operatorname{sgn}(-3) = -1.

.. TODO: \operatorname* for function name with limits.

The ``\DeclareMathOperator`` command can only be used in the
`LaTeX preamble`_.

.. _LaTeX preamble: latex.html#latex-preamble


Greek letters
-------------

Greek letters that have Latin look-alikes are rarely used in math
formulas and not supported by LaTeX.

.. class:: colwidths-auto

  ========== ============  ========== ============  ========== ============  ============== ===============
  `\Gamma`   ``\Gamma``    `\alpha`   ``\alpha``    `\mu`      ``\mu``       `\omega`       ``\omega``
  `\Delta`   ``\Delta``    `\beta`    ``\beta``     `\nu`      ``\nu``       `\digamma`     ``\digamma``
  `\Lambda`  ``\Lambda``   `\gamma`   ``\gamma``    `\xi`      ``\xi``       `\varepsilon`  ``\varepsilon``
  `\Phi`     ``\Phi``      `\delta`   ``\delta``    `\pi`      ``\pi``       `\varkappa`    ``\varkappa``
  `\Pi`      ``\Pi``       `\epsilon` ``\epsilon``  `\rho`     ``\rho``      `\varphi`      ``\varphi``
  `\Psi`     ``\Psi``      `\zeta`    ``\zeta``     `\sigma`   ``\sigma``    `\varpi`       ``\varpi``
  `\Sigma`   ``\Sigma``    `\eta`     ``\eta``      `\tau`     ``\tau``      `\varrho`      ``\varrho``
  `\Theta`   ``\Theta``    `\theta`   ``\theta``    `\upsilon` ``\upsilon``  `\varsigma`    ``\varsigma``
  `\Upsilon` ``\Upsilon``  `\iota`    ``\iota``     `\phi`     ``\phi``      `\vartheta`    ``\vartheta``
  `\Xi`      ``\Xi``       `\kappa`   ``\kappa``    `\chi`     ``\chi``
  `\Omega`   ``\Omega``    `\lambda`  ``\lambda``   `\psi`     ``\psi``
  ========== ============  ========== ============  ========== ============  ============== ===============

In LaTeX, the default font for capital Greek letters is upright/roman.
*Italic* capital Greek letters can be obtained by loading a `package
providing the "ISO" math style`__. They are used by default in MathML.

Individual Greek italic capitals can also be achieved preceding the
letter name with ``var`` like ``\varPhi``:
`\varGamma\ \varDelta\ \varLambda\ \varPhi\ \varPi\ \varPsi\ \varSigma\
\varTheta\ \varUpsilon\ \varXi\ \varOmega`


__ https://mirrors.ctan.org/macros/latex/contrib/isomath/isomath.html#table-2


Letterlike symbols
------------------
.. class:: colwidths-auto

  ============= ===============  ========== ============  ========== ============  =========== =============
  `\forall`     ``\forall``      `\aleph`   ``\aleph``    `\hbar`    ``\hbar``     `\ell`      ``\ell``
  `\complement` ``\complement``  `\beth`    ``\beth``     `\hslash`  ``\hslash``   `\wp`       ``\wp``
  `\exists`     ``\exists``      `\gimel`   ``\gimel``    `\Im`      ``\Im``       `\Re`       ``\Re``
  `\Finv`       ``\Finv``        `\daleth`  ``\daleth``   `\imath`   ``\imath``    `\circledR` ``\circledR``
  `\Game`       ``\Game``        `\partial` ``\partial``  `\jmath`   ``\jmath``    `\circledS` ``\circledS``
  `\mho`        ``\mho``         `\eth`     ``\eth``      `\Bbbk`    ``\Bbbk``
  ============= ===============  ========== ============  ========== ============  =========== =============


Mathematical Alphabets
----------------------

Mathematical alphabets select a combination of font attributes (shape,
weight, family) [#]_. They are intended for mathematical variables where
style variations are important semantically.

.. class:: colwidths-auto

  ===============  ============================  ==========================
  command          example                       result
  ===============  ============================  ==========================
  ``\mathbf``      ``\mathbf{r}^2=x^2+y^2+z^2``  `\mathbf{r}^2=x^2+y^2+z^2`
  ``\mathbb``      ``\mathbb{R \subset C}``      `\mathbb{R \subset C}`
  ``\mathcal``     ``\mathcal{F}f(x)``           `\mathcal{F}f(x)`
  ``\mathfrak``    ``\mathfrak{a}``              `\mathfrak{a}`
  ``\mathit``      ``\mathit{\Gamma}``           `\mathit{\Gamma}`
  ``\mathrm``      ``s_\mathrm{out}``            `s_\mathrm{out}`
  ``\mathsf``      ``\mathsf x``                 `\mathsf x`
  ``\mathtt``      ``\mathtt{0.12}``             `\mathtt{0.12}`
  ===============  ============================  ==========================

.. [#] TeX’s *math alphabets* correspond to the `mathematical
   alphanumeric symbols`__ block in Unicode and the "mathvariant" `style
   attribute`__ in MathML.

   __ https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols
   __ https://developer.mozilla.org/en-US/docs/Web/MathML/Attribute

Additional alphabets are defined in LaTeX packages, e.g.

.. class:: colwidths-auto

  ===========  =============  ======================
  TeX command  LaTeX package  MathML "mathvariant"
  ===========  =============  ======================
  mathbfit     isomath_       bold-italic
  mathsfit     isomath_       sans-serif-italic
  mathsfbfit   isomath_       sans-serif-bold-italic
  mathscr      mathrsfs_      script
  ===========  =============  ======================
.. _isomath: https://www.ctan.org/pkg/isomath
.. _mathrsfs: https://www.ctan.org/pkg/mathrsfs

This can be used to typeset vector symbols in bold italic
in line with the International Standard [ISO-80000-2].

.. ``\mathbfit{r}^2=x^2+y^2+z^2`` becomes

   .. math:: \mathbfit{r}^2=x^2+y^2+z^2.

The package mathrsfs_ (and some drop-in replacements) define the ``\mathscr``
macro that selects a differently shaped "script" alphabet.
Compare `\mathscr{A, B, …, Z, a, b, …, z}`
with `\mathcal{A, B, …, Z, a, b, …, z}`.


In contrast to the math alphabet selectors, ``\boldsymbol`` only changes
the *font weight*. In LaTeX, it can be used to get a bold version of any
mathematical symbol (for other output formats, results are mixed):

.. math::
   \boldsymbol{\cos(x)\pm\alpha \approx 3\Gamma \quad \forall x\in\mathbb{R}}


Miscellaneous symbols
---------------------
.. class:: colwidths-auto

==================== ======================  ================ ==================  ================= ===================
`\#`                 ``\#``                  `\clubsuit`      ``\clubsuit``       `\neg`            ``\neg``
`\&`                 ``\&``                  `\diamondsuit`   ``\diamondsuit``    `\nexists`        ``\nexists``
`\angle`             ``\angle``              `\emptyset`      ``\emptyset``       `\prime`          ``\prime``
`\backprime`         ``\backprime``          `\exists`        ``\exists``         `\sharp`          ``\sharp``
`\bigstar`           ``\bigstar``            `\flat`          ``\flat``           `\spadesuit`      ``\spadesuit``
`\blacklozenge`      ``\blacklozenge``       `\forall`        ``\forall``         `\sphericalangle` ``\sphericalangle``
`\blacksquare`       ``\blacksquare``        `\heartsuit`     ``\heartsuit``      `\square`         ``\square``
`\blacktriangle`     ``\blacktriangle``      `\infty`         ``\infty``          `\surd`           ``\surd``
`\blacktriangledown` ``\blacktriangledown``  `\lozenge`       ``\lozenge``        `\top`            ``\top``
`\bot`               ``\bot``                `\measuredangle` ``\measuredangle``  `\triangle`       ``\triangle``
`\diagdown`          ``\diagdown``           `\nabla`         ``\nabla``          `\triangledown`   ``\triangledown``
`\diagup`            ``\diagup``             `\natural`       ``\natural``        `\varnothing`     ``\varnothing``
==================== ======================  ================ ==================  ================= ===================


Punctuation
-----------
.. class:: colwidths-auto

=== =====  ======== ===============  ======== ==========
`.` ``.``  `!`      ``!``            `\vdots` ``\vdots``
`/` ``/``  `?`      ``?``            `\dotsb` ``\dotsb``
`|` ``|``  `\colon` ``\colon`` [#]_  `\dotsc` ``\dotsc``
`'` ``'``  `\cdots` ``\cdots``       `\dotsi` ``\dotsi``
`;` ``;``  `\ddots` ``\ddots``       `\dotsm` ``\dotsm``
`:` ``:``  `\ldots` ``\ldots``       `\dotso` ``\dotso``
=== =====  ======== ===============  ======== ==========

.. [#] Punctuation (not ratio):
       Compare spacing in `a\colon b\to c` to `a:b = c`.


Relation symbols
----------------

Arrows
~~~~~~
.. class:: colwidths-auto

  ====================== ========================  ===================== =======================
  `\circlearrowleft`     ``\circlearrowleft``      `\circlearrowright`   ``\circlearrowright``
  `\curvearrowleft`      ``\curvearrowleft``       `\curvearrowright`    ``\curvearrowright``
  `\hookleftarrow`       ``\hookleftarrow``        `\hookrightarrow`     ``\hookrightarrow``
  `\leftarrow`           ``\leftarrow``            `\rightarrow`         ``\rightarrow``
  `\Leftarrow`           ``\Leftarrow``            `\Rightarrow`         ``\Rightarrow``
  `\leftarrowtail`       ``\leftarrowtail``        `\rightarrowtail`     ``\rightarrowtail``
  `\leftharpoondown`     ``\leftharpoondown``      `\rightharpoondown`   ``\rightharpoondown``
  `\leftharpoonup`       ``\leftharpoonup``        `\rightharpoonup`     ``\rightharpoonup``
  `\leftleftarrows`      ``\leftleftarrows``       `\rightrightarrows`   ``\rightrightarrows``
  `\leftrightarrow`      ``\leftrightarrow``       `\Leftrightarrow`     ``\Leftrightarrow``
  `\leftrightarrows`     ``\leftrightarrows``      `\rightleftarrows`    ``\rightleftarrows``
  `\leftrightharpoons`   ``\leftrightharpoons``    `\rightleftharpoons`  ``\rightleftharpoons``
  `\leftrightsquigarrow` ``\leftrightsquigarrow``  `\rightsquigarrow`    ``\rightsquigarrow``
  `\Lleftarrow`          ``\Lleftarrow``           `\Rrightarrow`        ``\Rrightarrow``
  `\longleftarrow`       ``\longleftarrow``        `\longrightarrow`     ``\longrightarrow``
  `\Longleftarrow`       ``\Longleftarrow``        `\Longrightarrow`     ``\Longrightarrow``
  `\longleftrightarrow`  ``\longleftrightarrow``   `\Longleftrightarrow` ``\Longleftrightarrow``
  `\looparrowleft`       ``\looparrowleft``        `\looparrowright`     ``\looparrowright``
  `\Lsh`                 ``\Lsh``                  `\Rsh`                ``\Rsh``
  `\mapsto`              ``\mapsto``               `\longmapsto`         ``\longmapsto``
  `\multimap`            ``\multimap``
  `\nleftarrow`          ``\nleftarrow``           `\nrightarrow`        ``\nrightarrow``
  `\nLeftarrow`          ``\nLeftarrow``           `\nRightarrow`        ``\nRightarrow``
  `\nleftrightarrow`     ``\nleftrightarrow``      `\nLeftrightarrow`    ``\nLeftrightarrow``
  `\nwarrow`             ``\nwarrow``              `\nearrow`            ``\nearrow``
  `\swarrow`             ``\swarrow``              `\searrow`            ``\searrow``
  `\twoheadleftarrow`    ``\twoheadleftarrow``     `\twoheadrightarrow`  ``\twoheadrightarrow``
  `\upharpoonleft`       ``\upharpoonleft``        `\upharpoonright`     ``\upharpoonright``
  `\downharpoonleft`     ``\downharpoonleft``      `\downharpoonright`   ``\downharpoonright``
  `\upuparrows`          ``\upuparrows``           `\downdownarrows`     ``\downdownarrows``
  ====================== ========================  ===================== =======================

Synonyms: `\gets` ``\gets``, `\to` ``\to``, `\restriction` ``\restriction``.

Comparison
~~~~~~~~~~

.. class:: colwidths-auto

================ ==================  ============= ===============  ============= ===============  =============== =================
`<`              ``<``               `\geq`           ``\geq``      `\ll`         ``\ll``          `\prec`         ``\prec``
`=`              ``=``               `\geqq`       ``\geqq``        `\lll`        ``\lll``         `\precapprox`   ``\precapprox``
`>`              ``>``               `\geqslant`   ``\geqslant``    `\lnapprox`   ``\lnapprox``    `\preccurlyeq`  ``\preccurlyeq``
`\approx`        ``\approx``         `\gg`         ``\gg``          `\lneq`       ``\lneq``        `\preceq`       ``\preceq``
`\approxeq`      ``\approxeq``       `\ggg`        ``\ggg``         `\lneqq`      ``\lneqq``       `\precnapprox`  ``\precnapprox``
`\asymp`         ``\asymp``          `\gnapprox`   ``\gnapprox``    `\lnsim`      ``\lnsim``       `\precneqq`     ``\precneqq``
`\backsim`       ``\backsim``        `\gneq`       ``\gneq``        `\ncong`      ``\ncong``       `\precnsim`     ``\precnsim``
`\backsimeq`     ``\backsimeq``      `\gneqq`      ``\gneqq``       `\neq`        ``\neq``         `\precsim`      ``\precsim``
`\bumpeq`        ``\bumpeq``         `\gnsim`      ``\gnsim``       `\ngeq`       ``\ngeq``        `\risingdotseq` ``\risingdotseq``
`\Bumpeq`        ``\Bumpeq``         `\gtrapprox`  ``\gtrapprox``   `\ngeqq`      ``\ngeqq``       `\sim`          ``\sim``
`\circeq`        ``\circeq``         `\gtreqless`  ``\gtreqless``   `\ngeqslant`  ``\ngeqslant``   `\simeq`        ``\simeq``
`\cong`          ``\cong``           `\gtreqqless` ``\gtreqqless``  `\ngtr`       ``\ngtr``        `\succ`         ``\succ``
`\curlyeqprec`   ``\curlyeqprec``    `\gtrless`    ``\gtrless``     `\nleq`       ``\nleq``        `\succapprox`   ``\succapprox``
`\curlyeqsucc`   ``\curlyeqsucc``    `\gtrsim`     ``\gtrsim``      `\nleqq`      ``\nleqq``       `\succcurlyeq`  ``\succcurlyeq``
`\doteq`         ``\doteq``          `\leq`        ``\leq``         `\nleqslant`  ``\nleqslant``   `\succeq`       ``\succeq``
`\doteqdot`      ``\doteqdot``       `\leqq`       ``\leqq``        `\nless`      ``\nless``       `\succnapprox`  ``\succnapprox``
`\eqcirc`        ``\eqcirc``         `\leqslant`   ``\leqslant``    `\nprec`      ``\nprec``       `\succneqq`     ``\succneqq``
`\eqsim`         ``\eqsim``          `\lessapprox` ``\lessapprox``  `\npreceq`    ``\npreceq``     `\succnsim`     ``\succnsim``
`\eqslantgtr`    ``\eqslantgtr``     `\lesseqgtr`  ``\lesseqgtr``   `\nsim`       ``\nsim``        `\succsim`      ``\succsim``
`\eqslantless`   ``\eqslantless``    `\lesseqqgtr` ``\lesseqqgtr``  `\nsucc`      ``\nsucc``       `\thickapprox`  ``\thickapprox``
`\equiv`         ``\equiv``          `\lessgtr`    ``\lessgtr``     `\nsucceq`    ``\nsucceq``     `\thicksim`     ``\thicksim``
`\fallingdotseq` ``\fallingdotseq``  `\lesssim`    ``\lesssim``                                    `\triangleq`    ``\triangleq``
================ ==================  ============= ===============  ============= ===============  =============== =================

The commands ``\lvertneqq`` and ``\gvertneqq`` are not supported by
LateX2MathML, as there is no corresponding Unicode character.

Synonyms: `\ne` ``\ne``, `\le` ``\le``, `\ge` ``\ge``,
`\Doteq` ``\Doteq``, `\llless` ``\llless``, `\gggtr` ``\gggtr``.

Symbols can be negated prepending ``\not``, e.g.
`\not=` ``\not=``, `\not\equiv` ``\not\equiv``,
`\not\gtrless` ``\not\gtrless``, `\not\lessgtr` ``\not\lessgtr``.

Miscellaneous relations
~~~~~~~~~~~~~~~~~~~~~~~
.. class:: colwidths-auto

  ===================== =======================  =================== =====================  =================== =====================
  `\backepsilon`        ``\backepsilon``         `\ntrianglelefteq`  ``\ntrianglelefteq``   `\subseteq`         ``\subseteq``
  `\because`            ``\because``             `\ntriangleright`   ``\ntriangleright``    `\subseteqq`        ``\subseteqq``
  `\between`            ``\between``             `\ntrianglerighteq` ``\ntrianglerighteq``  `\subsetneq`        ``\subsetneq``
  `\blacktriangleleft`  ``\blacktriangleleft``   `\nvdash`           ``\nvdash``            `\subsetneqq`       ``\subsetneqq``
  `\blacktriangleright` ``\blacktriangleright``  `\nVdash`           ``\nVdash``            `\supset`           ``\supset``
  `\bowtie`             ``\bowtie``              `\nvDash`           ``\nvDash``            `\Supset`           ``\Supset``
  `\dashv`              ``\dashv``               `\nVDash`           ``\nVDash``            `\supseteq`         ``\supseteq``
  `\frown`              ``\frown``               `\parallel`         ``\parallel``          `\supseteqq`        ``\supseteqq``
  `\in`                 ``\in``                  `\perp`             ``\perp``              `\supsetneq`        ``\supsetneq``
  `\mid`                ``\mid``                 `\pitchfork`        ``\pitchfork``         `\supsetneqq`       ``\supsetneqq``
  `\models`             ``\models``              `\propto`           ``\propto``            `\therefore`        ``\therefore``
  `\ni`                 ``\ni``                  `\shortmid`         ``\shortmid``          `\trianglelefteq`   ``\trianglelefteq``
  `\nmid`               ``\nmid``                `\shortparallel`    ``\shortparallel``     `\trianglerighteq`  ``\trianglerighteq``
  `\notin`              ``\notin``               `\smallfrown`       ``\smallfrown``        `\varpropto`        ``\varpropto``
  `\nparallel`          ``\nparallel``           `\smallsmile`       ``\smallsmile``        `\vartriangle`      ``\vartriangle``
  `\nshortmid`          ``\nshortmid``           `\smile`            ``\smile``             `\vartriangleleft`  ``\vartriangleleft``
  `\nshortparallel`     ``\nshortparallel``      `\sqsubset`         ``\sqsubset``          `\vartriangleright` ``\vartriangleright``
  `\nsubseteq`          ``\nsubseteq``           `\sqsubseteq`       ``\sqsubseteq``        `\vdash`            ``\vdash``
  `\nsubseteqq`         ``\nsubseteqq``          `\sqsupset`         ``\sqsupset``          `\Vdash`            ``\Vdash``
  `\nsupseteq`          ``\nsupseteq``           `\sqsupseteq`       ``\sqsupseteq``        `\vDash`            ``\vDash``
  `\nsupseteqq`         ``\nsupseteqq``          `\subset`           ``\subset``            `\Vvdash`           ``\Vvdash``
  `\ntriangleleft`      ``\ntriangleleft``       `\Subset`           ``\Subset``
  ===================== =======================  =================== =====================  =================== =====================

Synonyms: `\owns` ``\owns``.

Symbols can be negated prepending ``\not``, e.g.
`\not\in` ``\not\in``, `\not\ni` ``\not\ni``.

The commands ``\varsubsetneq``, ``\varsubsetneqq``, ``\varsupsetneq``,
and ``\varsupsetneqq`` are not supported by LateX2MathML, as there is no
corresponding Unicode character.


Variable-sized operators
------------------------
.. class:: colwidths-auto

  =========================  =========================  =========================  ===========================
  `\sum`      ``\sum``       `\prod`     ``\prod``      `\bigcap`   ``\bigcap``    `\bigodot`   ``\bigodot``
  `\int`      ``\int``       `\coprod`   ``\coprod``    `\bigcup`   ``\bigcup``    `\bigoplus`  ``\bigoplus``
  `\oint`     ``\oint``      `\bigwedge` ``\bigwedge``  `\biguplus` ``\biguplus``  `\bigotimes` ``\bigotimes``
  `\smallint` ``\smallint``  `\bigvee`   ``\bigvee``    `\bigsqcup` ``\bigsqcup``
  =========================  =========================  =========================  ===========================

Larger symbols are used in displayed formulas, sum-like symbols have
indices above/below the symbol (see also `scripts and limits`_):

.. math:: \sum_{n=1}^N a_n \qquad
          \int_0^1f(x)\,dx \qquad
          \prod_{i=1}^{10} b_i \ldots


Notations
=========

Top and bottom embellishments
-----------------------------

See `Accents and embellishments`_.


Extensible arrows
-----------------

\xleftarrow and \xrightarrow produce arrows that extend automatically to
accommodate unusually wide subscripts or superscripts. These commands
take one optional argument (the subscript) and one mandatory argument
(the superscript, possibly empty)::

  A \xleftarrow{n+\mu-1} B \xrightarrow[T]{n\pm i-1} C

results in

.. math:: A \xleftarrow{n+\mu-1} B \xrightarrow[T]{n\pm i-1} C


Affixing symbols to other symbols
---------------------------------

In addition to the standard `accents and embellishments`_, other symbols
can be placed above or below a base symbol with the ``\overset`` and
``\underset`` commands. The symbol is set in "scriptstyle" (smaller font
size). For example, writing ``\overset{*}{X}`` becomes `\overset{*}{X}`
and ``\underset{+}{M}`` becomes `\underset{+}{M}`.


Matrices
--------

The ``matrix`` and ``cases`` environments can also contain ``\\`` and
``&``::

  .. math::
     \left ( \begin{matrix} a & b \\ c & d \end{matrix}\right)

Result:

.. math::
     \left ( \begin{matrix} a & b \\ c & d \end{matrix} \right)

The environments ``pmatrix``, ``bmatrix``, ``Bmatrix``, ``vmatrix``, and
``Vmatrix`` have (respectively) ( ), [ ], { }, \| \|, and `\Vert\ \Vert`
delimiters built in, e.g.

.. math:: \begin{pmatrix} a & b \\ c & d \end{pmatrix} \qquad
          \begin{bmatrix} a & b \\ c & d \end{bmatrix} \qquad
          \begin{Vmatrix} a & b \\ c & d \end{Vmatrix}

To produce a small matrix suitable for use in text, there is a
``smallmatrix`` environment
`\bigl(\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}\bigr)`
that comes closer to fitting within a single text line than a normal
matrix.


For piecewise function definitions there is a ``cases`` environment:

.. math:: \mathrm{sgn}(x) = \begin{cases}
                                        -1 & x<0\\
                              \phantom{-}1 & x>0
                            \end{cases}


Spacing commands
----------------

Horizontal spacing of elements can be controlled with the following
commands:

.. class:: colwidths-auto

  ======================  ========  =====================  ===================
  :m:`3\qquad 4`                    ``3\qquad 4``          = 2em
  :m:`3\quad 4`                     ``3\quad 4``           = 1em
  :m:`3~4`                ``3~4``   ``3\nobreakspace 4``
  :m:`3\ 4`               ``3\ 4``                         escaped space
  :m:`3\;4`               ``3\;4``  ``3\thickspace 4``
  :m:`3\:4`               ``3\:4``  ``3\medspace 4``
  :m:`3\,4`               ``3\,4``  ``3\thinspace 4``
  :m:`3  4`               ``3  4``                         regular space [#]_
  :m:`3\!4`               ``3\!4``  ``3\negthinspace 4``   negative space [#]_
  :m:`3\negmedspace 4`              ``3\negmedspace 4``
  :m:`3\negthickspace 4`            ``3\negthickspace 4``
  `3\hspace{1ex}4`                  ``3\hspace{1ex}4``     custom length
  `3\mspace{20mu}4`                 ``3\mspace{20mu}4``    custom length [#]_
  ======================  ========  =====================  ===================

.. [#] Whitespace characters are ignored in LaTeX math mode.
.. [#] Negative spacing does not work with MathML (last tested in Firefox 102).
.. [#] In LaTeX, the unit must be 'mu' (1 mu = 1/18em).

There are also three commands that leave a space equal to the height and
width of its argument. For example ``\phantom{XXX}`` results in space as
wide and high as three X’s:

.. math:: \frac{\phantom{XXX}+1}{XXX-1}

The commands ``\hphantom`` and ``\vphantom`` insert space with the
width or height of the argument. They are not supported with `math_output`_
MathML.


Modular arithmetic and modulo operation
---------------------------------------

The commands ``\bmod``, ``\pmod``, ``\mod``, and ``\pod`` deal with the
special spacing conventions of the “mod” notation. [#]_

.. class:: colwidths-auto

  =========  ===========================  =========================
  command    example                      result
  =========  ===========================  =========================
  ``\bmod``  ``\gcd(n,m \bmod n)``        `\gcd(n,m \bmod n)`
  ``\pmod``  ``x\equiv y \pmod b``        `x\equiv y \pmod b`
  ``\mod``   ``x\equiv y \mod c``         `x\equiv y \mod c`
  ``\pod``   ``x\equiv y \pod d``         `x\equiv y \pod d`
  ..         ``\operatorname{mod}(m,n)``  `\operatorname{mod}(m,n)`
  =========  ===========================  =========================

.. [#] Currently `not supported`__ by the "HTML" math_output_ option
       of the HTML writer.

__ https://sourceforge.net/p/docutils/feature-requests/93/


Roots
-----

.. class:: colwidths-auto

  =========  ====================  ==================
  command    example               result
  =========  ====================  ==================
  ``\sqrt``  ``\sqrt{x^2-1}``      `\sqrt{x^2-1}`
  ..         ``\sqrt[3n]{x^2-1}``  `\sqrt[3n]{x^2-1}`
  ..         ``\sqrt\frac{1}{2}``  `\sqrt\frac{1}{2}`
  =========  ====================  ==================


Boxed formulas
--------------

The command ``\boxed`` puts a box around its argument:

.. math:: \boxed{\eta \leq C(\delta(\eta) +\Lambda_M(0,\delta))}


Fractions and related constructions
===================================

The ``\frac`` command takes two ar guments, numerator and denominator, 
and typesets them in normal fraction form. For example, ``U = \frac{R}{I}``
produces `U = \frac{R}{I}`. Use ``\dfrac`` or ``\tfrac`` to
force text style and display style respectively.

.. math:: \frac{x+1}{x-1}  \quad
          \dfrac{x+1}{x-1} \quad
          \tfrac{x+1}{x-1}

and in text: `\frac{x+1}{x-1}`, `\dfrac{x+1}{x-1}`, `\tfrac{x+1}{x-1}`.

For binomial expressions such as `\binom{n}{k}`, 
there are ``\binom``, ``\dbinom`` and ``\tbinom`` commands::

  2^k-\binom{k}{1}2^{k-1}+\binom{k}{2}2^{k-2}

prints

.. math::  2^k-\binom{k}{1}2^{k-1}+\binom{k}{2}2^{k-2}

The ``\cfrac`` command for continued fractions uses displaystyle and
padding for sub-fractions:

.. math:: \frac{\pi}{4} = 1 + \cfrac{1^2}{
                              2 + \cfrac{3^2}{
                                  2 + \cfrac{5^2}{
                                      2 + \cfrac{7^2}{2 + \cdots}
                              }}}
          \qquad \text{vs.}\qquad
          \frac{\pi}{4} = 1 + \frac{1^2}{
                              2 + \frac{3^2}{
                                  2 + \frac{5^2}{
                                      2 + \frac{7^2}{2 + \cdots}
                              }}}

The optional argument ``[l]`` or ``[r]`` for left or right placement of
the numerator is `not supported by MathML Core`__:

.. math::  \cfrac[l]{x}{x-1} \quad
           \cfrac{x}{x-1}    \quad
           \cfrac[r]{x}{x-1}

__ https://github.com/w3c/mathml/issues/30


Delimiter sizes
===============

Besides the automatic scaling of `extensible delimiters`_ with ``\left``
and ``\right``, there are four commands to manually select delimiters of
fixed size:

.. class:: colwidths-auto

  =========  ==============  ==============  ==============  ==============  ===============  ===============
  Sizing     no              ``\left``       ``\bigl``       ``\Bigl``       ``\biggl``       ``\Biggl``
  command                    ``\right``      ``\bigr``       ``\Bigr``       ``\biggr``       ``\Biggr``
  ---------  --------------  --------------  --------------  --------------  ---------------  ---------------
  Result     `\displaystyle  `\displaystyle  `\displaystyle  `\displaystyle  `\displaystyle   `\displaystyle
             (b)             \left(b\right)  \bigl(b\bigr)   \Bigl(b\Bigr)   \biggl(b\biggr)  \Biggl(b\Biggr)
             (\frac{c}{d})`  \left(\frac{c}  \bigl(\frac{c}  \Bigl(\frac{c}  \biggl(\frac{c}  \Biggl(\frac{c}
                             {d}\right)`     {d}\bigr)`      {d}\Bigr)`      {d}\biggr)`      {d}\Biggr)`
  =========  ==============  ==============  ==============  ==============  ===============  ===============

There are two or three situations where the delimiter size is commonly
adjusted using these commands:

The first kind of adjustment is done for cumulative operators with
limits, such as summation signs. With ``\left`` and ``\right`` the
delimiters usually turn out larger than necessary, and using the ``Big``
or ``bigg`` sizes instead gives better results:

.. math::
   \left[\sum_i a_i\left\lvert\sum_j x_{ij}\right\rvert^p\right]^{1/p}
   \text{ versus }
   \biggl[\sum_i a_i\Bigl\lvert\sum_j x_{ij}\Bigr\rvert^p\biggr]^{1/p}

The second kind of situation is clustered pairs of delimiters, where
\left and \right make them all the same size (because that is adequate to
cover the encompassed material), but what you really want is to make some
of the delimiters slightly larger to make the nesting easier to see.

.. math:: \left((a_1 b_1) - (a_2 b_2)\right)
          \left((a_2 b_1) + (a_1 b_2)\right)
          \quad\text{versus}\quad
          \bigl((a_1 b_1) - (a_2 b_2)\bigr)
          \bigl((a_2 b_1) + (a_1 b_2)\bigr)

The third kind of situation is a slightly oversize object in running
text, such as `\left|\frac{b'}{d'}\right|` where the delimiters produced
by ``\left`` and ``\right`` cause too much line spreading. [#]_ In that case
``\bigl`` and ``\bigr`` can be used to produce delimiters that are larger
than the base size but still able to fit within the normal line spacing:
`\bigl|\frac{b'}{d'}\bigr|`.

.. [#] With MathML, an example would be parentheses
   around a ``smallmatrix`` environment
   `\left(\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}\right)`
   vs. `\Bigl(\begin{smallmatrix} a & b \\ c & d \end{smallmatrix}\Bigr)`.


Text
====

The main use of the command ``\text`` is for words or phrases in a
display. It is similar to ``\mbox`` in its effects but, unlike ``\mbox``,
automatically produces subscript-size text if used in a subscript,
``k_{\text{B}}T`` becomes `k_{\text{B}}T`.

Whitespace is kept inside the argument:

.. Math:: f_{[x_{i-1},x_i]} \text{ is monotonic for }  i = 1,\,…,\,c+1


The text may contain math commands wrapped in ``$`` signs, e.g.

.. math:: (-1)^{n_i} = \begin{cases} -1 \quad \text{if $n_i$ is odd,} \\
                                     +1 \quad \text{if $n_i$ is even.}
                       \end{cases}

.. TODO ignore {}, handle text-mode commands


Integrals and sums
==================

The limits on integrals, sums, and similar symbols are placed either to
the side of or above and below the base symbol, depending on convention
and context. In inline formulas and fractions, the limits on sums, and
similar symbols like

.. math:: \lim_{n\to\infty} \sum_1^n \frac{1}{n}

move to index positions: `\lim_{n\to\infty} \sum_1^n \frac{1}{n}`.


Altering the placement of limits
--------------------------------

The commands ``\intop`` and ``\ointop`` produce integral signs with
limits as in sums and similar: `\intop_0^1`, `\ointop_c` and

.. math:: \intop_0^1 \quad \ointop_c
             \quad \text{vs.} \quad
          \int^1_0   \quad \oint_c

The commands ``\limits`` and ``\nolimits`` override the default placement
of the limits for any operator; ``\displaylimits`` forces standard
positioning as for the \sum command. They should follow immediately after
the operator to which they apply.

Compare the same term with default positions, ``\limits``, and
``\nolimits`` in inline and display mode: `\lim_{x\to0}f(x)`,
`\lim\limits_{x\to0}f(x)`, `\lim\nolimits_{x\to0}f(x)`, vs.

.. math:: \lim_{x\to0}f(x), \quad
          \lim\limits_{x\to0}f(x) \quad
          \lim\nolimits_{x\to0}f(x).

.. TODO: \substack

.. TODO: \sideset


Changing the size of elements in a formula
==========================================

The declarations [#]_ ``\displaystyle``, ``\textstyle``, 
``\scriptstyle``, and ``\scriptscriptstyle``, select a symbol size and
spacing that would be applied in (respectively) display math, inline
math, first-order subscript, or second-order subscript, even when the
current context would normally yield some other size.

For example ``:math:`\displaystyle \sum_{n=0}^\infty\frac{1}{n}``` 
is printed as `\displaystyle \sum_{n=0}^\infty \frac{1}{n}`
rather than `\sum_{n=0}^\infty \frac{1}{n}` and ::

  \frac{\scriptstyle\sum_{n > 0} z^n}
  {\displaystyle\prod_{1\leq k\leq n} (1-q^k)}

yields

.. math::

  \frac{\scriptstyle\sum_{n > 0} z^n}
  {\displaystyle\prod_{1\leq k\leq n} (1-q^k)}
  \text{ instead of the default }
  \frac{\sum_{n > 0} z^n}
  {\prod_{1\leq k\leq n} (1-q^k)}.

.. [#] "Declarations" are commands that affect processing of the current
   "group". In particular, notice where the braces fall that delimit the
   effect of the command: Right: ``{\displaystyle ...}`` Wrong:
   ``\displaystyle{...}``.

   With math_output_ MathML, the declaration must be the first element
   after the opening bracket.


Appendix
========

Tests
-----

Font changes
~~~~~~~~~~~~

Math alphabet macros change the default alphabet ("mathvariant" in
MathML), leaving some symbols unchanged:

:normal: `abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R`
:mathrm: `\mathrm{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`
:mathit: `\mathit{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`
:mathsf: `\mathsf{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`
:mathbb: `\mathbb{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`
:mathbf: `\mathbf{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`
:mathcal: `\mathcal{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`
:mathscr: `\mathscr{abs(x) \pm \alpha \approx 3 \Gamma  \quad \forall x \in R}`

Without additional packages, LaTeX supports "blackboard-bold" only for
capital Latin letters.
Unicode supports also small Latin letters, some Greek letters, and digits:
`\mathbb{A \ldots Z a \ldots z} 
\mathbb\Gamma \mathbb{\Pi} \mathbb {\Sigma} \mathbb\gamma \mathbb \pi
\mathbb{0 \ldots 9}`.


Inferred <mrow>s in MathML
~~~~~~~~~~~~~~~~~~~~~~~~~~

The elements <msqrt>, <mstyle>, <merror>, <mpadded>, <mphantom>, <menclose>,
<mtd>, <mscarry>, and <math> treat their contents as a single inferred mrow
formed from all their children.

.. math:: a = \sqrt 2 + x,\quad
          b = \sqrt{1+x^2},\quad
          c = \sqrt\frac{\sin(x)}{23},

inline: :math:`a = \sqrt 2 + x, b = \sqrt{1+x^2}, c = \sqrt\frac{\sin(x)}{23}`.


Scripts and Limits
~~~~~~~~~~~~~~~~~~

Accents should be nearer to the base:
`\bar a \overline a, \bar l \overline l, \bar i \overline i`,
`\vec{r}` `\overrightarrow{r}`.

Sub- and superscript may be given in any order:
`x_i^j = x^j_i` and `\int_0^1 = \int^1_0`.

Double exponent: `x^{10^4}`, `r_{T_\mathrm{in}}` and `x_i^{n^2}`.


Nested groups
~~~~~~~~~~~~~

tex-token returns "{" for nested groups:

.. math:: \text{das ist ein  {toller} text (unescaped \{ and \} is
                ignored by LaTeX)}


Big delimiters and symbols
~~~~~~~~~~~~~~~~~~~~~~~~~~
Compare automatic sizing with fixed sizes:

.. math:  \left( \frac{\frac1x}{\frac{1}{n}}\right) &= \Biggl(\text{Bigg}\Biggr)\\


.. math::
  \left( 3                          \right)
  \left( f(x)                       \right)
  \left( \bar x                     \right)
  \left( \overline x                \right)
  \left( n_i                        \right) &= () \\
  \left( \underline x               \right) &= \bigl(\text{big}\bigr)\\
  \left( 3^2                        \right)
  \left( \sqrt{3}                   \right)
  \left( \sqrt{3^2}                 \right)
  \left( \sum                       \right)
  \left( \bigotimes                 \right)
  \left( \prod                      \right) &= \Bigl(\text{Big}\Bigr)\\
  \left( \frac{3  }{2}              \right)
  \left( \frac{3^2}{2^4}            \right)
  \binom{3  }{2}
  \begin{pmatrix} a & b \\ c & d \end{pmatrix}
  \left( \frac{1}{\sqrt 2}          \right)
  \left( \int                       \right)
  \left( \int_0                     \right)
  \left( \int^1                     \right)
  \left( \int_0^1                   \right) &= \biggl(\text{bigg}\biggr)\\
  \left( \frac{\sqrt 2}{2}          \right)
  \left( \sum_0                     \right)
  \left( \sum^1                     \right)
  \left( \sum_0^1                   \right)
  \left( \frac{\frac1x}{\frac{1}{n}}\right) &= \Biggl(\text{Bigg}\Biggr)\\
  \left( \intop_0                   \right)
  \left( \intop^1                   \right)
  \left( \intop_0^1                 \right)

And in text:

:`()`:                        `\left(3                          \right)
                              \left( f(x)                       \right)
                              \left( \bar x                     \right)
                              \left( \overline x                \right)
                              \left( n_i                        \right)
                              \left( \sum                       \right)
                              \left( \sum_0                     \right)
                              \left( \prod                      \right)`


:`\bigl(\text{big}\bigr)`:    `\left(\underline x               \right)
                              \left( 3^2                        \right)
                              \binom{3}{2}
                              \left(\begin{smallmatrix} a & b \\
                              c & d \end{smallmatrix}           \right)
                              \left( \bigotimes                 \right)`

:`\Bigl(\text{Big}\Bigr)`:    `\left(\sqrt{3}                   \right)
                              \left( \sqrt{3^2}                 \right)
                              \left( \frac{3}{2}                \right)
                              \left( \frac{3^2}{2^4}            \right)
                              \left( \frac{\sqrt 2}{2}          \right)
                              \left( \int                       \right)
                              \left( \int_0                     \right)
                              \left( \int^1                     \right)
                              \left( \int_0^1                   \right)
                              \left( \sum^1                     \right)
                              \left( \sum_0^1                   \right)
                              \left( \frac{\frac1x}{\frac{1}{n}}\right)`





Test ``\left``, ``\right``, and the  \bigl/\bigr, … size commands
with all extensible delimiters.

.. math::
   \left.(b\right)\ \bigl(b\Bigr)\ \biggl(b\Biggr)
   \quad
   \left.[b\right]\ \bigl[b\Bigr]\ \biggl[b\Biggr]
   \quad
   \left.\{b\right \} \ \bigl\{b\Bigr \} \ \biggl\{b\Biggr \}
   \quad
   \left.\langle b\right\rangle\ \bigl\langle b\Bigr\rangle\ \biggl\langle b\Biggr\rangle

   \left.\lceil b\right\rceil\ \bigl\lceil b\Bigr\rceil\ \biggl\lceil b\Biggr\rceil
   \quad
   \left.\lfloor b\right\rfloor\ \bigl\lfloor b\Bigr\rfloor\ \biggl\lfloor b\Biggr\rfloor
   \quad
   \left.\lvert b\right\rvert\ \bigl\lvert b\Bigr\rvert\
   \biggl\lvert b\Biggr\rvert
   \quad
   \left.\lVert b\right\rVert\ \bigl\lVert b\Bigr\rVert\
   \biggl\lVert b\Biggr\rVert

   \left.\lgroup b\right\rgroup\ \bigl\lgroup b\Bigr\rgroup\ \biggl\lgroup b\Biggr\rgroup
   \quad
   \left.\lmoustache b\right\rmoustache\ \bigl\lmoustache b\Bigr\rmoustache\ \biggl\lmoustache b\Biggr\rmoustache
   \quad
   \left./b\right\backslash\ \bigl/b\Bigr\backslash\ \biggl/b\Biggr\backslash

   \left.|b\right\|\ \bigl|b\Bigr\|\ \biggl|b\Biggr\|
   \quad
   \left.\vert b\right\Vert\ \bigl\vert b\Bigr\Vert\ \biggl\vert b\Biggr\Vert
   \quad
   \left.\arrowvert b\right\Arrowvert\ \bigl\arrowvert b\Bigr\Arrowvert\ \biggl\arrowvert b\Biggr\Arrowvert
   \quad
   \left.\bracevert b\right\bracevert\ \bigl\bracevert b\Bigr\bracevert\ \biggl\bracevert b\Biggr\bracevert
   \quad
   \left.\vert b\right\Vert\ \bigl\vert b\Bigr\Vert\ \biggl\vert b\Biggr\Vert


Variable-sized operators:

Inline: `\int\ \iint\ \iiint\ \iiiint\ \idotsint \oint\ \smallint\
\sum\ \prod\ \coprod\ \bigwedge\ \bigvee\ \bigcap\ \bigcup\ \biguplus\
\bigsqcup\ \bigodot\ \bigoplus\ \bigotimes` and Display:

.. math:: \int\ \iint\ \iiint\ \iiiint\ \idotsint\ \oint\ \smallint\
   \sum\ \prod\ \coprod\ \bigwedge\ \bigvee\ \bigcap\ \bigcup\
   \biguplus\ \bigsqcup\ \bigodot\ \bigoplus\ \bigotimes

.. math:: \int_1 f\ \intop_1 f\ \iint_1 f\ \smallint_1 f\ \sum_1\
   \prod_1\ \bigwedge_1\ \bigcap_1\ \biguplus_1\ \bigodot_1\ \int^N\
   \intop^N\ \iiiint^N\ \oint^N\ \smallint^N\ \sum^N\ \coprod^N\
   \bigvee^N\ \bigcup^N\ \bigsqcup^N\ \bigotimes^N

.. math:: \int_1^N\ \intop_1^N\ \iint_1^N\ \iiint_1^N\ \iiiint_1^N\
   \idotsint_1^N\ \oint_1^N\ \smallint_1^N\ \sum_1^N\ \prod_1^N\
   \coprod_1^N\ \bigwedge_1^N\ \bigvee_1^N\ \bigcap_1^N\ \bigcup_1^N
   \ \biguplus_1^N\ \bigsqcup_1^N\ \bigodot_1^N\ \bigoplus_1^N\
   \bigotimes_1^N


Text
~~~~

The text may contain non-ASCII characters: `n_\text{Stoß}`.

Some text-mode LaTeX commands are supported with math_output_ "html".
In other output formats, use literal Unicode: `\text{ç é è ë ê ñ ů ž ©}`
to get the result of the accent macros
`\text{\c{c} \'e \`e \"e \^e \~n \r{u} \v{z} \textcircled{c}}`.


/Part 1. 013.📜 docutils-0.20.1/docs/ref/rst/restructuredtext.txt

.. -*- coding: utf-8 -*-

.. .. include:: /docutils-0.20.1/docs/header2.txt

=======================================
 reStructuredText Markup Specification
=======================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9322 $
:Date: $Date: 2023-01-17 16:40:43 +0100 (Di, 17. Jän 2023) $
:Copyright: This document has been placed in the public domain.

.. Note::

   This document is a detailed technical specification; it is not a
   tutorial or a primer.  If this is your first exposure to
   reStructuredText, please read `A ReStructuredText Primer`_ and the
   `Quick reStructuredText`_ user reference first.

.. _A ReStructuredText Primer: ../../user/rst/quickstart.html
.. _Quick reStructuredText: ../../user/rst/quickref.html


reStructuredText_ is plaintext that uses simple and intuitive
constructs to indicate the structure of a document.  These constructs
are equally easy to read in raw and processed forms.  This document is
itself an example of reStructuredText (raw, if you are reading the
text file, or processed, if you are reading an HTML document, for
example).  The reStructuredText parser is a component of Docutils_.

Simple, implicit markup is used to indicate special constructs, such
as section headings, bullet lists, and emphasis.  The markup used is
as minimal and unobtrusive as possible.  Less often-used constructs
and extensions to the basic reStructuredText syntax may have more
elaborate or explicit markup.

reStructuredText is applicable to documents of any length, from the
very small (such as inline program documentation fragments, e.g.
Python docstrings) to the quite large (this document).

The first section gives a quick overview of the syntax of the
reStructuredText markup by example.  A complete specification is given
in the `Syntax Details`_ section.

`Literal blocks`_ (in which no markup processing is done) are used for
examples throughout this document, to illustrate the plaintext markup.


.. .. contents:: Table of Contents


===================================================
 Quick Syntax Overview
===================================================

A reStructuredText document is made up of body or block-level
elements, and may be structured into sections.  Sections_ are
indicated through title style (underlines & optional overlines).
Sections contain body elements and/or subsections.  Some body elements
contain further elements, such as lists containing list items, which
in turn may contain paragraphs and other body elements.  Others, such
as paragraphs, contain text and `inline markup`_ elements.

Here are examples of `body elements`_:

- Paragraphs_ (and `inline markup`_)::

      Paragraphs contain text and may contain inline markup:
      *emphasis*, **strong emphasis**, `interpreted text`, ``inline
      literals``, standalone hyperlinks (https://www.python.org),
      external hyperlinks (Python_), internal cross-references
      (example_), footnote references ([1]_), citation references
      ([CIT2002]_), substitution references (|example|), and _`inline
      internal targets`.

      Paragraphs are separated by blank lines and are left-aligned.

- Five types of lists:

  1. `Bullet lists`_::

         - This is a bullet list.

         - Bullets can be "*", "+", or "-".

  2. `Enumerated lists`_::

         1. This is an enumerated list.

         2. Enumerators may be arabic numbers, letters, or roman
            numerals.

  3. `Definition lists`_::

         what
             Definition lists associate a term with a definition.

         how
             The term is a one-line phrase, and the definition is one
             or more paragraphs or body elements, indented relative to
             the term.

  4. `Field lists`_::

         :what: Field lists map field names to field bodies, like
                database records.  They are often part of an extension
                syntax.

         :how: The field marker is a colon, the field name, and a
               colon.

               The field body may contain one or more body elements,
               indented relative to the field marker.

  5. `Option lists`_, for listing command-line options::

         -a            command-line option "a"
         -b file       options can have arguments
                       and long descriptions
         --long        options can be long also
         --input=file  long options can also have
                       arguments
         /V            DOS/VMS-style options too

     There must be at least two spaces between the option and the
     description.

- `Literal blocks`_::

      Literal blocks are either indented or line-prefix-quoted blocks,
      and indicated with a double-colon ("::") at the end of the
      preceding paragraph (right here -->)::

          if literal_block:
              text = 'is left as-is'
              spaces_and_linebreaks = 'are preserved'
              markup_processing = None

- `Block quotes`_::

      Block quotes consist of indented body elements:

          This theory, that is mine, is mine.

          -- Anne Elk (Miss)

- `Doctest blocks`_::

      >>> print 'Python-specific usage examples; begun with ">>>"'
      Python-specific usage examples; begun with ">>>"
      >>> print '(cut and pasted from interactive Python sessions)'
      (cut and pasted from interactive Python sessions)

- Two syntaxes for tables_:

  1. `Grid tables`_; complete, but complex and verbose::

         +------------------------+------------+----------+
         | Header row, column 1   | Header 2   | Header 3 |
         +========================+============+==========+
         | body row 1, column 1   | column 2   | column 3 |
         +------------------------+------------+----------+
         | body row 2             | Cells may span        |
         +------------------------+-----------------------+

  2. `Simple tables`_; easy and compact, but limited::

         ====================  ==========  ==========
         Header row, column 1  Header 2    Header 3
         ====================  ==========  ==========
         body row 1, column 1  column 2    column 3
         body row 2            Cells may span columns
         ====================  ======================

- `Explicit markup blocks`_ all begin with an explicit block marker,
  two periods and a space:

  - Footnotes_::

        .. [1] A footnote contains body elements, consistently
           indented by at least 3 spaces.

  - Citations_::

        .. [CIT2002] Just like a footnote, except the label is
           textual.

  - `Hyperlink targets`_::

        .. _Python: https://www.python.org

        .. _example:

        The "_example" target above points to this paragraph.

  - Directives_::

        .. image:: mylogo.png

  - `Substitution definitions`_::

        .. |symbol here| image:: symbol.png

  - Comments_::

        .. Comments begin with two dots and a space.  Anything may
           follow, except for the syntax of footnotes/citations,
           hyperlink targets, directives, or substitution definitions.


===================================================
 Syntax Details
===================================================

Descriptions below list "doctree elements" (document tree element
names; XML DTD generic identifiers) corresponding to syntax
constructs.  For details on the hierarchy of elements, please see `The
Docutils Document Tree`_ and the `Docutils Generic DTD`_ XML document
type definition.


Whitespace
==========

Spaces are recommended for indentation_, but tabs may also be used.
Tabs will be converted to spaces.  Tab stops are at every 8th column
(processing systems may make this value configurable).

Other whitespace characters (form feeds [chr(12)] and vertical tabs
[chr(11)]) are converted to single spaces before processing.


Blank Lines
-----------

Blank lines are used to separate paragraphs and other elements.
Multiple successive blank lines are equivalent to a single blank line,
except within literal blocks (where all whitespace is preserved).
Blank lines may be omitted when the markup makes element separation
unambiguous, in conjunction with indentation.  The first line of a
document is treated as if it is preceded by a blank line, and the last
line of a document is treated as if it is followed by a blank line.


Indentation
-----------

Indentation is used to indicate -- and is only significant in
indicating -- block quotes, definitions (in `definition lists`_),
and local nested content:

- list item content (multi-line contents of list items, and multiple
  body elements within a list item, including nested lists),
- the content of `literal blocks`_, and
- the content of `explicit markup blocks`_ (directives, footnotes, ...).

Any text whose indentation is less than that of the current level
(i.e., unindented text or "dedents") ends the current level of
indentation.

Since all indentation is significant, the level of indentation must be
consistent.  For example, indentation is the sole markup indicator for
`block quotes`_::

    This is a top-level paragraph.

        This paragraph belongs to a first-level block quote.

        Paragraph 2 of the first-level block quote.

Multiple levels of indentation within a block quote will result in
more complex structures::

    This is a top-level paragraph.

        This paragraph belongs to a first-level block quote.

            This paragraph belongs to a second-level block quote.

    Another top-level paragraph.

            This paragraph belongs to a second-level block quote.

        This paragraph belongs to a first-level block quote.  The
        second-level block quote above is inside this first-level
        block quote.

When a paragraph or other construct consists of more than one line of
text, the lines must be left-aligned::

    This is a paragraph.  The lines of
    this paragraph are aligned at the left.

        This paragraph has problems.  The
    lines are not left-aligned.  In addition
      to potential misinterpretation, warning
        and/or error messages will be generated
      by the parser.

Several constructs begin with a marker, and the body of the construct
must be indented relative to the marker.  For constructs using simple
markers (`bullet lists`_, `enumerated lists`_), the level of
indentation of the body is determined by the position of the first
line of text. For example::

    - This is the first line of a bullet list
      item's paragraph.  All lines must align
      relative to the first line.

          This indented paragraph is interpreted
          as a block quote.

      Another paragraph belonging to the first list item.

     Because it is not sufficiently indented,
     this paragraph does not belong to the list
     item (it's a block quote following the list).

The body of `explicit markup blocks`_, `field lists`_, and `option
lists`_ ends above the first line with the same or less indentation
than the marker.  For example, field lists may have very long markers
(containing the field names)::

    :Hello: This field has a short field name, so aligning the field
            body with the first line is feasible.

    :Number-of-African-swallows-required-to-carry-a-coconut: It would
        be very difficult to align the field body with the left edge
        of the first line.  It may even be preferable not to begin the
        body on the same line as the marker.


.. _escape:

Escaping Mechanism
==================

The character set universally available to plaintext documents, 7-bit
ASCII, is limited.  No matter what characters are used for markup,
they will already have multiple meanings in written text.  Therefore
markup characters will sometimes appear in text without being
intended as markup.  Any serious markup system requires an escaping
mechanism to override the default meaning of the characters used for
the markup.  In reStructuredText we use the *backslash*, commonly used
as an escaping character in other domains.

A backslash (``\``) escapes the following character.

* "Escaping" backslash characters are represented by NULL characters in
  the `Document Tree`_ and removed from the output document by the
  Docutils writers_.

* Escaped non-white characters are prevented from playing a role in any
  markup interpretation. The escaped character represents the character
  itself. (A literal backslash can be specified by two backslashes in a
  row -- the first backslash escapes the second. [#caveat]_)

* Escaped whitespace characters are removed from the output document
  together with the escaping backslash. This allows for `character-level
  inline markup`_.

  In `URI context` [#uri-context]_, backslash-escaped whitespace
  represents a single space.

Backslashes have no special meaning in `literal context` [#literal-context]_.
Here, a single backslash represents a literal backslash, without having
to double up. [#caveat]_

.. [#caveat] Please note that the reStructuredText specification and
   parser do not address the issue of the representation or extraction of
   text input (how and in what form the text actually *reaches* the
   parser). Backslashes and other characters may serve a
   character-escaping purpose in certain contexts and must be dealt with
   appropriately.  For example, Python uses backslashes in string
   literals to escape certain characters. The simplest solution when
   backslashes appear in Python docstrings is to use raw docstrings::

     r"""This is a raw docstring.  Backslashes (\) are not touched."""

.. [#uri-context] In contexts where Docutils expects a URI (the link
   block of `external hyperlink targets`_ or the argument of an image_ or
   figure_ directive), whitespace is ignored by default

.. [#literal-context] In literal context (`literal blocks`_ and `inline
   literals`_, content of the code_, math_, and raw_ directives, content
   of the `"raw" role`_ and `custom roles`_ based on it),
   reStructuredText markup characters lose their semantics so there is no
   reason to escape them.

.. _reference name:

Reference Names
===============

`Reference names` identify elements for cross-referencing.

.. Note:: References to a target position in external, generated documents
   must use the auto-generated `identifier key`_ which may differ from the
   `reference name` due to restrictions on identifiers/labels in the
   output format.

Simple reference names are single words consisting of alphanumerics
plus isolated (no two adjacent) internal hyphens, underscores,
periods, colons and plus signs; no whitespace or other characters are
allowed.  Footnote labels (Footnotes_ & `Footnote References`_), citation
labels (Citations_ & `Citation References`_), `interpreted text`_ roles,
and some `hyperlink references`_ use the simple reference name syntax.

Reference names using punctuation or whose names are phrases (two or
more space-separated words) are called "phrase-references".
Phrase-references are expressed by enclosing the phrase in backquotes
and treating the backquoted text as a reference name::

    Want to learn about `my favorite programming language`_?

    .. _my favorite programming language: https://www.python.org

Simple reference names may also optionally use backquotes.

.. _`normalized reference names`:

Reference names are whitespace-neutral and case-insensitive.  When
resolving reference names internally:

- whitespace is normalized (one or more spaces, horizontal or vertical
  tabs, newlines, carriage returns, or form feeds, are interpreted as
  a single space), and

- case is normalized (all alphabetic characters are converted to
  lowercase).

For example, the following `hyperlink references`_ are equivalent::

    - `A HYPERLINK`_
    - `a    hyperlink`_
    - `A
      Hyperlink`_

Hyperlinks_, footnotes_, and citations_ all share the same namespace
for reference names.  The labels of citations (simple reference names)
and manually-numbered footnotes (numbers) are entered into the same
database as other hyperlink names.  This means that a footnote_
(defined as "``.. [#note]``") which can be referred to by a footnote
reference (``[#note]_``), can also be referred to by a plain hyperlink
reference (``note_``).  Of course, each type of reference (hyperlink,
footnote, citation) may be processed and rendered differently.  Some
care should be taken to avoid reference name conflicts.


Document Structure
==================

Document
--------

Doctree element: `document <document element_>`_.


The top-level element of a parsed reStructuredText document is the
"document" element.  After initial parsing, the document element is a
simple container for a document fragment, consisting of `body
elements`_, transitions_, and sections_, but lacking a document title
or other bibliographic elements.  The code that calls the parser may
choose to run one or more optional post-parse transforms_,
rearranging the document fragment into a complete document with a
title and possibly other metadata elements (author, date, etc.; see
`Bibliographic Fields`_).

.. _document title:

Specifically, there is no way to indicate a document title and
subtitle explicitly in reStructuredText. [#]_ Instead, a lone top-level
section title (see Sections_ below) can be treated as the document
title.  Similarly, a lone second-level section title immediately after
the "document title" can become the document subtitle.  The rest of
the sections are then lifted up a level or two.  See the `DocTitle
transform`_ for details.

.. [#] The `"title" configuration setting`__ and the `"title"
   directive`__ set the document's `title attribute`_ that does not
   become part of the document body.

   .. _title attribute: ../doctree.html#title-attribute
   __ ../../user/config.html#title
   __ directives.html#metadata-document-title


Sections
--------

Doctree elements: section_, title_.

Sections are identified through their titles, which are marked up with
adornment: "underlines" below the title text, or underlines and
matching "overlines" above the title.  An underline/overline is a
single repeated punctuation character that begins in column 1 and
forms a line extending at least as far as the right edge of the title
text. [#]_  Specifically, an underline/overline character may be any
non-alphanumeric printable 7-bit ASCII character [#]_.  When an
overline is used, the length and character used must match the
underline.  Underline-only adornment styles are distinct from
overline-and-underline styles that use the same character.  There may
be any number of levels of section titles, although some output
formats may have limits (HTML has 6 levels).

.. [#] The key is the visual length of the title in a mono-spaced font.
   The adornment may need more or less characters than title, if the
   title contains wide__ or combining__ characters.

.. [#] The following are all valid section title adornment
   characters::

       ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~

   Some characters are more suitable than others.  The following are
   recommended::

       = - ` : . ' " ~ ^ _ * + #

__ https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms#In_Unicode
__ https://en.wikipedia.org/wiki/Combining_character

Rather than imposing a fixed number and order of section title
adornment styles, the order enforced will be the order as encountered.
The first style encountered will be an outermost title (like HTML H1),
the second style will be a subtitle, the third will be a subsubtitle,
and so on.

Below are examples of section title styles::

    ===============
     Section Title
    ===============

    ---------------
     Section Title
    ---------------

    Section Title
    =============

    Section Title
    -------------

    Section Title
    `````````````

    Section Title
    '''''''''''''

    Section Title
    .............

    Section Title
    ~~~~~~~~~~~~~

    Section Title
    *************

    Section Title
    +++++++++++++

    Section Title
    ^^^^^^^^^^^^^

When a title has both an underline and an overline, the title text may
be inset, as in the first two examples above.  This is merely
aesthetic and not significant.  Underline-only title text may *not* be
inset.

A blank line after a title is optional.  All text blocks up to the
next title of the same or higher level are included in a section (or
subsection, etc.).

All section title styles need not be used, nor need any specific
section title style be used.  However, a document must be consistent
in its use of section titles: once a hierarchy of title styles is
established, sections must use that hierarchy.

Each section title automatically generates a hyperlink target pointing
to the section.  The text of the hyperlink target (the "reference
name") is the same as that of the section title.  See `Implicit
Hyperlink Targets`_ for a complete description.

Sections may contain `body elements`_, transitions_, and nested
sections.


Transitions
-----------

Doctree element: transition_.

    Instead of subheads, extra space or a type ornament between
    paragraphs may be used to mark text divisions or to signal
    changes in subject or emphasis.

    (The Chicago Manual of Style, 14th edition, section 1.80)

Transitions are commonly seen in novels and short fiction, as a gap
spanning one or more lines, with or without a type ornament such as a
row of asterisks.  Transitions separate other body elements.  A
transition should not begin or end a section or document, nor should
two transitions be immediately adjacent.

The syntax for a transition marker is a horizontal line of 4 or more
repeated punctuation characters.  The syntax is the same as section
title underlines without title text.  Transition markers require blank
lines before and after::

    Para.

    ----------

    Para.

Unlike section title underlines, no hierarchy of transition markers is
enforced, nor do differences in transition markers accomplish
anything.  It is recommended that a single consistent style be used.

The processing system is free to render transitions in output in any
way it likes.  For example, horizontal rules (``<hr>``) in HTML output
would be an obvious choice.


Body Elements
=============

Paragraphs
----------

Doctree element: paragraph_.

Paragraphs consist of blocks of left-aligned text with no markup
indicating any other body element.  Blank lines separate paragraphs
from each other and from other body elements.  Paragraphs may contain
`inline markup`_.

Syntax diagram::

    +------------------------------+
    | paragraph                    |
    |                              |
    +------------------------------+

    +------------------------------+
    | paragraph                    |
    |                              |
    +------------------------------+


Bullet Lists
------------

Doctree elements: bullet_list_, list_item_.

A text block which begins with a "*", "+", "-", "•", "‣", or "⁃",
followed by whitespace, is a bullet list item (a.k.a. "unordered" list
item).  List item bodies must be left-aligned and indented relative to
the bullet; the text immediately after the bullet determines the
indentation.  For example::

    - This is the first bullet list item.  The blank line above the
      first list item is required; blank lines between list items
      (such as below this paragraph) are optional.

    - This is the first paragraph in the second item in the list.

      This is the second paragraph in the second item in the list.
      The blank line above this paragraph is required.  The left edge
      of this paragraph lines up with the paragraph above, both
      indented relative to the bullet.

      - This is a sublist.  The bullet lines up with the left edge of
        the text blocks above.  A sublist is a new list so requires a
        blank line above and below.

    - This is the third item of the main list.

    This paragraph is not part of the list.

Here are examples of **incorrectly** formatted bullet lists::

    - This first line is fine.
    A blank line is required between list items and paragraphs.
    (Warning)

    - The following line appears to be a new sublist, but it is not:
      - This is a paragraph continuation, not a sublist (since there's
        no blank line).  This line is also incorrectly indented.
      - Warnings may be issued by the implementation.

Syntax diagram::

    +------+-----------------------+
    | "- " | list item             |
    +------| (body elements)+      |
           +-----------------------+


Enumerated Lists
----------------

Doctree elements: enumerated_list_, list_item_.

Enumerated lists (a.k.a. "ordered" lists) are similar to bullet lists,
but use enumerators instead of bullets.  An enumerator consists of an
enumeration sequence member and formatting, followed by whitespace.
The following enumeration sequences are recognized:

- arabic numerals: 1, 2, 3, ... (no upper limit).
- uppercase alphabet characters: A, B, C, ..., Z.
- lower-case alphabet characters: a, b, c, ..., z.
- uppercase Roman numerals: I, II, III, IV, ..., MMMMCMXCIX (4999).
- lowercase Roman numerals: i, ii, iii, iv, ..., mmmmcmxcix (4999).

In addition, the auto-enumerator, "#", may be used to automatically
enumerate a list.  Auto-enumerated lists may begin with explicit
enumeration, which sets the sequence.  Fully auto-enumerated lists use
arabic numerals and begin with 1.  (Auto-enumerated lists are new in
Docutils 0.3.8.)

The following formatting types are recognized:

- suffixed with a period: "1.", "A.", "a.", "I.", "i.".
- surrounded by parentheses: "(1)", "(A)", "(a)", "(I)", "(i)".
- suffixed with a right-parenthesis: "1)", "A)", "a)", "I)", "i)".

While parsing an enumerated list, a new list will be started whenever:

- An enumerator is encountered which does not have the same format and
  sequence type as the current list (e.g. "1.", "(a)" produces two
  separate lists).

- The enumerators are not in sequence (e.g., "1.", "3." produces two
  separate lists).

It is recommended that the enumerator of the first list item be
ordinal-1 ("1", "A", "a", "I", or "i").  Although other start-values
will be recognized, they may not be supported by the output format.  A
level-1 [info] system message will be generated for any list beginning
with a non-ordinal-1 enumerator.

Lists using Roman numerals must begin with "I"/"i" or a
multi-character value, such as "II" or "XV".  Any other
single-character Roman numeral ("V", "X", "L", "C", "D", "M") will be
interpreted as a letter of the alphabet, not as a Roman numeral.
Likewise, lists using letters of the alphabet may not begin with
"I"/"i", since these are recognized as Roman numeral 1.

The second line of each enumerated list item is checked for validity.
This is to prevent ordinary paragraphs from being mistakenly
interpreted as list items, when they happen to begin with text
identical to enumerators.  For example, this text is parsed as an
ordinary paragraph::

    A. Einstein was a really
    smart dude.

However, ambiguity cannot be avoided if the paragraph consists of only
one line.  This text is parsed as an enumerated list item::

    A. Einstein was a really smart dude.

.. Caution:: 
    If a single-line paragraph begins with text identical to an enumerator
    ("A.", "1.", "(b)", "I)", etc.), the first character will have to be
    escaped in order to have the line parsed as an ordinary paragraph::
    
        \A. Einstein was a really smart dude.
        
    Alternatively, you can escape the delimiter ::
    
        A\. Einstein was a really smart dude.
        
    or use a literal NO-BREAK SPACE after the initial.    

Examples of nested enumerated lists::

    1. Item 1 initial text.

       a) Item 1a.
       b) Item 1b.

    2. a) Item 2a.
       b) Item 2b.

Example syntax diagram::

    +-------+----------------------+
    | "1. " | list item            |
    +-------| (body elements)+     |
            +----------------------+


Definition Lists
----------------

Doctree elements: definition_list_, definition_list_item_, term_,
classifier_, definition_.

Each definition list item contains a term, optional classifiers, and a
definition.

* A `term` is a simple one-line word or phrase.  Escape_ a leading hyphen
  to prevent recognition as an `option list`_ item.

* Optional `classifiers` may follow the term on the same line, each after
  an inline " : " (space, colon, space).  Inline markup is parsed in the
  term line before the classifier delimiters are recognized.  A delimiter
  will only be recognized if it appears outside of any inline markup.

* A `definition` is a block indented relative to the term, and may
  contain multiple paragraphs and other body elements.  There may be no
  blank line between a term line and a definition block (this
  distinguishes definition lists from `block quotes`_). Blank lines are
  required before the first and after the last definition list item, but
  are optional in-between.

Example::

    term 1
        Definition 1.

    term 2
        Definition 2, paragraph 1.

        Definition 2, paragraph 2.

    term 3 : classifier
        Definition 3.

    term 4 : classifier one : classifier two
        Definition 4.

    \-term 5
        Without escaping, this would be an option list item.

A definition list may be used in various ways, including:

- As a dictionary or glossary.  The term is the word itself, a
  classifier may be used to indicate the usage of the term (noun,
  verb, etc.), and the definition follows.

- To describe program variables.  The term is the variable name, a
  classifier may be used to indicate the type of the variable (string,
  integer, etc.), and the definition describes the variable's use in
  the program.  This usage of definition lists supports the classifier
  syntax of Grouch_, a system for describing and enforcing a Python
  object schema.

Syntax diagram::

    +----------------------------+
    | term [ " : " classifier ]* |
    +--+-------------------------+--+
       | definition                 |
       | (body elements)+           |
       +----------------------------+


Field Lists
-----------

Doctree elements: field_list_, field_, field_name_, field_body_.

Field lists are used as part of an extension syntax, such as options
for directives_, or database-like records meant for further
processing.  They may also be used for two-column table-like
structures resembling database records (label & data pairs).
Applications of reStructuredText may recognize field names and
transform fields or field bodies in certain contexts.  For examples,
see `Bibliographic Fields`_ below, or the "image_" and "meta_"
directives in `reStructuredText Directives`_.

.. _field names:

Field lists are mappings from *field names* to *field bodies*, modeled on
RFC822_ headers.  A field name may consist of any characters, but
colons (":") inside of field names must be backslash-escaped
when followed by whitespace.\ [#]_
Inline markup is parsed in field names, but care must be taken when
using `interpreted text`_ with explicit roles in field names: the role
must be a suffix to the interpreted text.  Field names are
case-insensitive when further processed or transformed.  The field
name, along with a single colon prefix and suffix, together form the
field marker.  The field marker is followed by whitespace and the
field body.  The field body may contain multiple body elements,
indented relative to the field marker.  The first line after the field
name marker determines the indentation of the field body.  For
example::

    :Date: 2001-08-16
    :Version: 1
    :Authors: - Me
              - Myself
              - I
    :Indentation: Since the field marker may be quite long, the second
       and subsequent lines of the field body do not have to line up
       with the first line, but they must be indented relative to the
       field name marker, and they must line up with each other.
    :Parameter i: integer

The interpretation of individual words in a multi-word field name is
up to the application.  The application may specify a syntax for the
field name.  For example, second and subsequent words may be treated
as "arguments", quoted phrases may be treated as a single argument,
and direct support for the "name=value" syntax may be added.

Standard RFC822_ headers cannot be used for this construct because
they are ambiguous.  A word followed by a colon at the beginning of a
line is common in written text.  However, in well-defined contexts
such as when a field list invariably occurs at the beginning of a
document (PEPs and email messages), standard RFC822 headers could be
used.

Syntax diagram (simplified)::

    +--------------------+----------------------+
    | ":" field name ":" | field body           |
    +-------+------------+                      |
            | (body elements)+                  |
            +-----------------------------------+

.. [#] Up to Docutils 0.14, field markers were not recognized when
   containing a colon.

Bibliographic Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Doctree elements: docinfo_, address_, author_, authors_, contact_,
copyright_, date_, organization_, revision_, status_, topic_,
version_.

When a field list is the first element in a document
(after the document title, if there is one) [#]_, it may have its fields
transformed to document bibliographic data.  This bibliographic data
corresponds to the front matter of a book, such as the title page and
copyright page.

.. [#] In addition to the document title and subtitle, also comments_,
   `substitution definitions`_, `hyperlink targets`_, and "header",
   "footer", "meta", and "raw" directives_ may be placed before the
   bibliographic fields.

Certain registered field names (listed below) are recognized and
transformed to the corresponding doctree elements, most becoming child
elements of the docinfo_ element.  No ordering is required of these
fields, although they may be rearranged to fit the document structure,
as noted.  Unless otherwise indicated below, each of the bibliographic
elements' field bodies may contain a single paragraph only.  Field
bodies may be checked for `RCS keywords`_ and cleaned up.  Any
unrecognized fields will remain as generic fields in the docinfo
element.

The registered bibliographic field names and their corresponding
doctree elements are as follows:

  ============= ================
  Field name    doctree element
  ============= ================
  Abstract      topic_
  Address       address_
  Author        author_
  Authors       authors_
  Contact       contact_
  Copyright     copyright_
  Date          date_
  Dedication    topic_
  Organization  organization_
  Revision      revision_
  Status        status_
  Version       version_
  ============= ================

The "Authors" field may contain either: a single paragraph consisting
of a list of authors, separated by ";" or "," (";" is checked first,
so "Doe, Jane; Doe, John" will work.); multiple paragraphs (one per
author); or a bullet list whose elements each contain a single
paragraph per author. In some languages
(e.g. Swedish), there is no singular/plural distinction between
"Author" and "Authors", so only an "Authors" field is provided, and a
single name is interpreted as an "Author".  If a single name contains
a comma, end it with a semicolon to disambiguate: ":Authors: Doe,
Jane;".

The "Address" field is for a multi-line surface mailing address.
Newlines and whitespace will be preserved.

The "Dedication" and "Abstract" fields may contain arbitrary body
elements.  Only one of each is allowed.  They become topic elements
with "Dedication" or "Abstract" titles (or language equivalents)
immediately following the docinfo element.

This field-name-to-element mapping can be replaced for other
languages.  See the `DocInfo transform`_ implementation documentation
for details.

Unregistered/generic fields may contain one or more paragraphs or
arbitrary body elements.
The field name is also used as a `"classes" attribute`_ value after being
converted into a valid identifier form.


RCS Keywords
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`Bibliographic fields`_ recognized by the parser are normally checked
for RCS [#]_ keywords and cleaned up [#]_.  RCS keywords may be
entered into source files as "$keyword$", and once stored under RCS,
CVS [#]_, or SVN [#]_, they are expanded to "$keyword: expansion text $".
For example, a "Status" field will be transformed to a "status" element::

    :Status: $keyword: expansion text $

.. [#] Revision Control System.
.. [#] RCS keyword processing can be turned off (unimplemented).
.. [#] Concurrent Versions System.  CVS uses the same keywords as RCS.
.. [#] Subversion Versions System. Uses the same keywords as RCS.

Processed, the "status" element's text will become simply "expansion
text".  The dollar sign delimiters and leading RCS keyword name are
removed.

The RCS keyword processing only kicks in when the field list is in
bibliographic context (first non-comment construct in the document,
after a document title if there is one).

.. _option list:

Option Lists
------------

Doctree elements: option_list_, option_list_item_, option_group_, option_,
option_string_, option_argument_, description_.

Option lists map a program's command-line options to descriptions
documenting them.  For example::

    -a         Output all.
    -b         Output both (this description is
               quite long).
    -c arg     Output just arg.
    --long     Output all day long.
    
    -p         This option has two paragraphs in the description.
               This is the first.

               This is the second.  Blank lines may be omitted between
               options (as above) or left in (as here and below).

    --very-long-option  A VMS-style option.  Note the adjustment for
                        the required two spaces.

    --an-even-longer-option
               The description can also start on the next line.

    -2, --two  This option has two variants.

    -f FILE, --file=FILE  These two options are synonyms; both have
                          arguments.

    /V         A VMS/DOS-style option.

There are several types of options recognized by reStructuredText:

- Short POSIX options consist of one dash and an option letter.
- Long POSIX options consist of two dashes and an option word; some
  systems use a single dash.
- Old GNU-style "plus" options consist of one plus and an option
  letter ("plus" options are deprecated now, their use discouraged).
- DOS/VMS options consist of a slash and an option letter or word.

Please note that both POSIX-style and DOS/VMS-style options may be
used by DOS or Windows software.  These and other variations are
sometimes used mixed together.  The names above have been chosen for
convenience only.

The syntax for short and long POSIX options is based on the syntax
supported by Python's getopt.py_ module, which implements an option
parser similar to the `GNU libc getopt_long()`_ function but with some
restrictions.  There are many variant option systems, and
reStructuredText option lists do not support all of them.

Although long POSIX and DOS/VMS option words may be allowed to be
truncated by the operating system or the application when used on the
command line, reStructuredText option lists do not show or support
this with any special syntax.  The complete option word should be
given, supported by notes about truncation if and when applicable.

Options may be followed by an argument placeholder, whose role and
syntax should be explained in the description text.
Either a space or an equals sign may be used as a delimiter between long
options and option argument placeholders;
short options ("-" or "+" prefix only) use a space or omit the delimiter.
Option arguments may take one of two forms:

- Begins with a letter (``[a-zA-Z]``) and subsequently consists of
  letters, numbers, underscores and hyphens (``[a-zA-Z0-9_-]``).
- Begins with an open-angle-bracket (``<``) and ends with a
  close-angle-bracket (``>``); any characters except angle brackets
  are allowed internally.

Multiple option "synonyms" may be listed, sharing a single
description.  They must be separated by comma-space.

There must be at least two spaces between the option(s) and the
description (which can also start on the next line).  The description
may contain multiple body elements.
The first line after the option marker determines the indentation of the
description.  As with other types of lists, blank lines are required
before the first option list item and after the last, but are optional
between option entries.

Syntax diagram (simplified)::

    +----------------------------+-------------+
    | option [" " argument] "  " | description |
    +-------+--------------------+             |
            | (body elements)+                 |
            +----------------------------------+


Literal Blocks
--------------

Doctree element: literal_block_.

A paragraph consisting of two colons ("::") signifies that the
following text block(s) comprise a literal block.  The literal block
must either be indented or quoted (see below).  No markup processing
is done within a literal block.  It is left as-is, and is typically
rendered in a monospaced typeface::

    This is a typical paragraph.  An indented literal block follows.

    ::

        for a in [5,4,3,2,1]:   # this is program code, shown as-is
            print a
        print "it's..."
        # a literal block continues until the indentation ends

    This text has returned to the indentation of the first paragraph,
    is outside of the literal block, and is therefore treated as an
    ordinary paragraph.

The paragraph containing only "::" will be completely removed from the
output; no empty paragraph will remain.

As a convenience, the "::" is recognized at the end of any paragraph.
If immediately preceded by whitespace, both colons will be removed
from the output (this is the "partially minimized" form).  When text
immediately precedes the "::", *one* colon will be removed from the
output, leaving only one colon visible (i.e., "::" will be replaced by
":"; this is the "fully minimized" form).

In other words, these are all equivalent (please pay attention to the
colons after "Paragraph"):

1. Expanded form::

      Paragraph:

      ::

          Literal block

2. Partially minimized form::

      Paragraph: ::

          Literal block

3. Fully minimized form::

      Paragraph::

          Literal block

All whitespace (including line breaks, but excluding minimum
indentation for indented literal blocks) is preserved.  Blank lines
are required before and after a literal block, but these blank lines
are not included as part of the literal block.


Indented Literal Blocks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Indented literal blocks are indicated by indentation relative to the
surrounding text (leading whitespace on each line).  The minimum
indentation will be removed from each line of an indented literal
block.  The literal block need not be contiguous; blank lines are
allowed between sections of indented text.  The literal block ends
with the end of the indentation.

Syntax diagram::

    +------------------------------+
    | paragraph                    |
    | (ends with "::")             |
    +------------------------------+
       +---------------------------+
       | indented literal block    |
       +---------------------------+


Quoted Literal Blocks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Quoted literal blocks are unindented contiguous blocks of text where
each line begins with the same non-alphanumeric printable 7-bit ASCII
character [#]_.  A blank line ends a quoted literal block.  The
quoting characters are preserved in the processed document.

.. [#]
   The following are all valid quoting characters::

       ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~

   Note that these are the same characters as are valid for title
   adornment of sections_.

Possible uses include literate programming in Haskell and email
quoting::

    John Doe wrote::

    >> Great idea!
    >
    > Why didn't I think of that?

    You just did!  ;-)

Syntax diagram::

    +------------------------------+
    | paragraph                    |
    | (ends with "::")             |
    +------------------------------+
    +------------------------------+
    | ">" per-line-quoted          |
    | ">" contiguous literal block |
    +------------------------------+


Line Blocks
-----------

Doctree elements: line_block_, line_.  (New in Docutils 0.3.5.)

Line blocks are useful for address blocks, verse (poetry, song
lyrics), and unadorned lists, where the structure of lines is
significant.  Line blocks are groups of lines beginning with vertical
bar ("|") prefixes.  Each vertical bar prefix indicates a new line, so
line breaks are preserved.  Initial indents are also significant,
resulting in a nested structure.  Inline markup is supported.
Continuation lines are wrapped portions of long lines; they begin with
a space in place of the vertical bar.  The left edge of a continuation
line must be indented, but need not be aligned with the left edge of
the text above it.  A line block ends with a blank line.

This example illustrates continuation lines::

    | Lend us a couple of bob till Thursday.
    | I'm absolutely skint.
    | But I'm expecting a postal order and I can pay you back
      as soon as it comes.
    | Love, Ewan.

This example illustrates the nesting of line blocks, indicated by the
initial indentation of new lines::

    Take it away, Eric the Orchestra Leader!

        | A one, two, a one two three four
        |
        | Half a bee, philosophically,
        |     must, *ipso facto*, half not be.
        | But half the bee has got to be,
        |     *vis a vis* its entity.  D'you see?
        |
        | But can a bee be said to be
        |     or not to be an entire bee,
        |         when half the bee is not a bee,
        |             due to some ancient injury?
        |
        | Singing...

Syntax diagram::

    +------+-----------------------+
    | "| " | line                  |
    +------| continuation line     |
           +-----------------------+


Block Quotes
------------

Doctree elements: block_quote_, attribution_.

A text block that is indented relative to the preceding text, without
preceding markup indicating it to be a literal block or other content,
is a block quote.  All markup processing (for body elements and inline
markup) continues within the block quote::

    This is an ordinary paragraph, introducing a block quote.

        "It is my business to know things.  That is my trade."

        -- Sherlock Holmes

A block quote may end with an attribution: a text block beginning with
``--``, ``---``, or a true em-dash, flush left within the block quote.  If
the attribution consists of multiple lines, the left edges of the
second and subsequent lines must align.

Multiple block quotes may occur consecutively if terminated with
attributions.

    Unindented paragraph.

        Block quote 1.

        -- Attribution 1

        Block quote 2.

`Empty comments`_ may be used to explicitly terminate preceding
constructs that would otherwise consume a block quote::

    * List item.

    ..

        Block quote 3.

Empty comments may also be used to separate block quotes::

        Block quote 4.

    ..

        Block quote 5.

Blank lines are required before and after a block quote, but these
blank lines are not included as part of the block quote.

Syntax diagram::

    +------------------------------+
    | (current level of            |
    | indentation)                 |
    +------------------------------+
       +---------------------------+
       | block quote               |
       | (body elements)+          |
       |                           |
       | -- attribution text       |
       |    (optional)             |
       +---------------------------+


Doctest Blocks
--------------

Doctree element: doctest_block_.

Doctest blocks are interactive Python sessions cut-and-pasted into
docstrings.  They are meant to illustrate usage by example, and
provide an elegant and powerful testing environment via the `doctest
module`_ in the Python standard library.

Doctest blocks are text blocks which begin with ``">>> "``, the Python
interactive interpreter main prompt, and end with a blank line.
Doctest blocks are treated as a special case of literal blocks,
without requiring the literal block syntax.  If both are present, the
literal block syntax takes priority over Doctest block syntax::

    This is an ordinary paragraph.

    >>> print 'this is a Doctest block'
    this is a Doctest block

    The following is a literal block::

        >>> This is not recognized as a doctest block by
        reStructuredText.  It *will* be recognized by the doctest
        module, though!

Indentation is not required for doctest blocks.


Tables
------

Doctree elements: table_, tgroup_, colspec_, thead_, tbody_, row_, entry_.

ReStructuredText provides two syntax variants for delineating table
cells: `Grid Tables`_ and `Simple Tables`_. Tables are also generated by
the `CSV Table`_ and `List Table`_ directives. The `table
directive`_ is used to add a table title or specify options.

As with other body elements, blank lines are required before and after
tables.  Tables' left edges should align with the left edge of
preceding text blocks; if indented, the table is considered to be part
of a block quote.

Once isolated, each table cell is treated as a miniature document; the
top and bottom cell boundaries act as delimiting blank lines.  Each
cell contains zero or more body elements.  Cell contents may include
left and/or right margins, which are removed before processing.


Grid Tables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Grid tables provide a complete table representation via grid-like
"ASCII art".  Grid tables allow arbitrary cell contents (body
elements), and both row and column spans.  However, grid tables can be
cumbersome to produce, especially for simple data sets.  The `Emacs
table mode`_ is a tool that allows easy editing of grid tables, in
Emacs.  See `Simple Tables`_ for a simpler (but limited)
representation.

Grid tables are described with a visual grid made up of the characters
"-", "=", "|", and "+".  The hyphen ("-") is used for horizontal lines
(row separators).  The equals sign ("=") may be used to separate
optional header rows from the table body (not supported by the `Emacs
table mode`_).  The vertical bar ("|") is used for vertical lines
(column separators).  The plus sign ("+") is used for intersections of
horizontal and vertical lines.  Example::

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | Cells may span columns.          |
    +------------------------+------------+---------------------+
    | body row 3             | Cells may  | - Table cells       |
    +------------------------+ span rows. | - contain           |
    | body row 4             |            | - body elements.    |
    +------------------------+------------+---------------------+

Some care must be taken with grid tables to avoid undesired
interactions with cell text in rare cases.  For example, the following
table contains a cell in row 2 spanning from column 2 to column 4::

    +--------------+----------+-----------+-----------+
    | row 1, col 1 | column 2 | column 3  | column 4  |
    +--------------+----------+-----------+-----------+
    | row 2        |                                  |
    +--------------+----------+-----------+-----------+
    | row 3        |          |           |           |
    +--------------+----------+-----------+-----------+

If a vertical bar is used in the text of that cell, it could have
unintended effects if accidentally aligned with column boundaries::

    +--------------+----------+-----------+-----------+
    | row 1, col 1 | column 2 | column 3  | column 4  |
    +--------------+----------+-----------+-----------+
    | row 2        | Use the command ``ls | more``.   |
    +--------------+----------+-----------+-----------+
    | row 3        |          |           |           |
    +--------------+----------+-----------+-----------+

Several solutions are possible.  All that is needed is to break the
continuity of the cell outline rectangle.  One possibility is to shift
the text by adding an extra space before::

    +--------------+----------+-----------+-----------+
    | row 1, col 1 | column 2 | column 3  | column 4  |
    +--------------+----------+-----------+-----------+
    | row 2        |  Use the command ``ls | more``.  |
    +--------------+----------+-----------+-----------+
    | row 3        |          |           |           |
    +--------------+----------+-----------+-----------+

Another possibility is to add an extra line to row 2::

    +--------------+----------+-----------+-----------+
    | row 1, col 1 | column 2 | column 3  | column 4  |
    +--------------+----------+-----------+-----------+
    | row 2        | Use the command ``ls | more``.   |
    |              |                                  |
    +--------------+----------+-----------+-----------+
    | row 3        |          |           |           |
    +--------------+----------+-----------+-----------+


Simple Tables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Simple tables provide a compact and easy to type but limited
row-oriented table representation for simple data sets.  Cell contents
are typically single paragraphs, although arbitrary body elements may
be represented in most cells.  Simple tables allow multi-line rows (in
all but the first column) and column spans, but not row spans.  See
`Grid Tables`_ above for a complete table representation.

Simple tables are described with horizontal borders made up of "=" and
"-" characters.  The equals sign ("=") is used for top and bottom
table borders, and to separate optional header rows from the table
body.  The hyphen ("-") is used to indicate column spans in a single
row by underlining the joined columns, and may optionally be used to
explicitly and/or visually separate rows.

A simple table begins with a top border of equals signs with one or
more spaces at each column boundary (two or more spaces recommended).
Regardless of spans, the top border *must* fully describe all table
columns.  There must be at least two columns in the table (to
differentiate it from section headers).  The top border may be
followed by header rows, and the last of the optional header rows is
underlined with '=', again with spaces at column boundaries.  There
may not be a blank line below the header row separator; it would be
interpreted as the bottom border of the table.  The bottom boundary of
the table consists of '=' underlines, also with spaces at column
boundaries.  For example, here is a truth table, a three-column table
with one header row and four body rows::

    =====  =====  =======
      A      B    A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======

Underlines of '-' may be used to indicate column spans by "filling in"
column margins to join adjacent columns.  Column span underlines must
be complete (they must cover all columns) and align with established
column boundaries.  Text lines containing column span underlines may
not contain any other text.  A column span underline applies only to
one row immediately above it.  For example, here is a table with a
column span in the header::

    =====  =====  ======
       Inputs     Output
    ------------  ------
      A      B    A or B
    =====  =====  ======
    False  False  False
    True   False  True
    False  True   True
    True   True   True
    =====  =====  ======

Each line of text must contain spaces at column boundaries, except
where cells have been joined by column spans.  Each line of text
starts a new row, except when there is a blank cell in the first
column.  In that case, that line of text is parsed as a continuation
line.  For this reason, cells in the first column of new rows (*not*
continuation lines) *must* contain some text; blank cells would lead
to a misinterpretation (but see the tip below).  Also, this mechanism
limits cells in the first column to only one line of text.  Use `grid
tables`_ if this limitation is unacceptable.

.. Tip::

   To start a new row in a simple table without text in the first
   column in the processed output, use one of these:

   * an empty comment (".."), which may be omitted from the processed
     output (see Comments_ below)

   * a backslash escape ("``\``") followed by a space (see `Escaping
     Mechanism`_ above)

Underlines of '-' may also be used to visually separate rows, even if
there are no column spans.  This is especially useful in long tables,
where rows are many lines long.

Blank lines are permitted within simple tables.  Their interpretation
depends on the context.  Blank lines *between* rows are ignored.
Blank lines *within* multi-line rows may separate paragraphs or other
body elements within cells.

The rightmost column is unbounded; text may continue past the edge of
the table (as indicated by the table borders).  However, it is
recommended that borders be made long enough to contain the entire
text.

The following example illustrates continuation lines (row 2 consists
of two lines of text, and four lines for row 3), a blank line
separating paragraphs (row 3, column 2), text extending past the right
edge of the table, and a new row which will have no text in the first
column in the processed output (row 4)::

    =====  =====
    col 1  col 2
    =====  =====
    1      Second column of row 1.
    2      Second column of row 2.
           Second line of paragraph.
    3      - Second column of row 3.

           - Second item in bullet
             list (row 3, column 2).
    \      Row 4; column 1 will be empty.
    =====  =====


Explicit Markup Blocks
----------------------

The explicit markup syntax is used for footnotes_, citations_,
`hyperlink targets`_, directives_, `substitution definitions`_,
and comments_.

An explicit markup block is a text block:

- whose first line begins with ".." followed by whitespace (the
  "explicit markup start"),
- whose second and subsequent lines (if any) are indented relative to
  the first, and
- which ends before an unindented line.

Explicit markup blocks are analogous to field list items. The
maximum common indentation is always removed from the second and
subsequent lines of the block body.  Therefore, if the first construct
fits in one line and the indentation of the first and second
constructs should differ, the first construct should not begin on the
same line as the explicit markup start.

Blank lines are required between explicit markup blocks and other
elements, but are optional between explicit markup blocks where
unambiguous.


Footnotes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

See also: `Footnote References`_.

Doctree elements: footnote_, label_.

Configuration settings:
`footnote_references <footnote_references setting_>`_.

.. _footnote_references setting:
   ../../user/config.html#footnote-references

Each footnote consists of an explicit markup start (".. "), a left
square bracket, the footnote label, a right square bracket, and
whitespace, followed by indented body elements.  A footnote label can
be:

- a whole decimal number consisting of one or more digits,

- a single "#" (denoting `auto-numbered footnotes`_),

- a "#" followed by a simple reference name (an `autonumber label`_),
  or

- a single "*" (denoting `auto-symbol footnotes`_).

The footnote content (body elements) must be consistently indented
and left-aligned.  The first body element within a
footnote may often begin on the same line as the footnote label.
However, if the first element fits on one line and the indentation of
the remaining elements differ, the first element must begin on the
line after the footnote label.  Otherwise, the difference in
indentation will not be detected.

Footnotes may occur anywhere in the document, not only at the end.
Where and how they appear in the processed output depends on the
processing system.

Here is a manually numbered footnote::

    .. [1] Body elements go here.

Each footnote automatically generates a hyperlink target pointing to
itself.  The text of the hyperlink target name is the same as that of
the footnote label.  `Auto-numbered footnotes`_ generate a number as
their footnote label and reference name.  See `Implicit Hyperlink
Targets`_ for a complete description of the mechanism.

Syntax diagram::

    +-------+-------------------------+
    | ".. " | "[" label "]" footnote  |
    +-------+                         |
            | (body elements)+        |
            +-------------------------+


Auto-Numbered Footnotes
.......................

A number sign ("#") may be used as the first character of a footnote
label to request automatic numbering of the footnote or footnote
reference.

The first footnote to request automatic numbering is assigned the
label "1", the second is assigned the label "2", and so on (assuming
there are no manually numbered footnotes present; see `Mixed Manual
and Auto-Numbered Footnotes`_ below).  A footnote which has
automatically received a label "1" generates an implicit hyperlink
target with name "1", just as if the label was explicitly specified.

.. _autonumber label: `autonumber labels`_

A footnote may specify a label explicitly while at the same time
requesting automatic numbering: ``[#label]``.  These labels are called
_`autonumber labels`.  Autonumber labels do two things:

- On the footnote itself, they generate a hyperlink target whose name
  is the autonumber label (doesn't include the "#").

- They allow an automatically numbered footnote to be referred to more
  than once, as a footnote reference or hyperlink reference.  For
  example::

      If [#note]_ is the first footnote reference, it will show up as
      "[1]".  We can refer to it again as [#note]_ and again see
      "[1]".  We can also refer to it as note_ (an ordinary internal
      hyperlink reference).

      .. [#note] This is the footnote labeled "note".

The numbering is determined by the order of the footnotes, not by the
order of the references.  For footnote references without autonumber
labels (``[#]_``), the footnotes and footnote references must be in
the same relative order but need not alternate in lock-step.  For
example::

    [#]_ is a reference to footnote 1, and [#]_ is a reference to
    footnote 2.

    .. [#] This is footnote 1.
    .. [#] This is footnote 2.
    .. [#] This is footnote 3.

    [#]_ is a reference to footnote 3.

Special care must be taken if footnotes themselves contain
auto-numbered footnote references, or if multiple references are made
in close proximity.  Footnotes and references are noted in the order
they are encountered in the document, which is not necessarily the
same as the order in which a person would read them.


Auto-Symbol Footnotes
.....................

An asterisk ("*") may be used for footnote labels to request automatic
symbol generation for footnotes and footnote references.  The asterisk
may be the only character in the label.  For example::

    Here is a symbolic footnote reference: [*]_.

    .. [*] This is the footnote.

A transform will insert symbols as labels into corresponding footnotes
and footnote references.  The number of references must be equal to
the number of footnotes.  One symbol footnote cannot have multiple
references.

The standard Docutils system uses the following symbols for footnote
marks [#]_:

- asterisk/star ("*")
- dagger (HTML character entity "&dagger;", Unicode U+02020)
- double dagger ("&Dagger;"/U+02021)
- section mark ("&sect;"/U+000A7)
- pilcrow or paragraph mark ("&para;"/U+000B6)
- number sign ("#")
- spade suit ("&spades;"/U+02660)
- heart suit ("&hearts;"/U+02665)
- diamond suit ("&diams;"/U+02666)
- club suit ("&clubs;"/U+02663)

.. [#] This list was inspired by the list of symbols for "Note
   Reference Marks" in The Chicago Manual of Style, 14th edition,
   section 12.51.  "Parallels" ("||") were given in CMoS instead of
   the pilcrow.  The last four symbols (the card suits) were added
   arbitrarily.

If more than ten symbols are required, the same sequence will be
reused, doubled and then tripled, and so on ("**" etc.).

.. Note:: When using auto-symbol footnotes, the choice of output
   encoding is important.  Many of the symbols used are not encodable
   in certain common text encodings such as Latin-1 (ISO 8859-1).  The
   use of UTF-8 for the output encoding is recommended.  An
   alternative for HTML and XML output is to use the
   "xmlcharrefreplace" `output encoding error handler`__.

__ ../../user/config.html#output-encoding-error-handler


Mixed Manual and Auto-Numbered Footnotes
........................................

Manual and automatic footnote numbering may both be used within a
single document, although the results may not be expected.  Manual
numbering takes priority.  Only unused footnote numbers are assigned
to auto-numbered footnotes.  The following example should be
illustrative::

    [2]_ will be "2" (manually numbered),
    [#]_ will be "3" (anonymous auto-numbered), and
    [#label]_ will be "1" (labeled auto-numbered).

    .. [2] This footnote is labeled manually, so its number is fixed.

    .. [#label] This autonumber-labeled footnote will be labeled "1".
       It is the first auto-numbered footnote and no other footnote
       with label "1" exists.  The order of the footnotes is used to
       determine numbering, not the order of the footnote references.

    .. [#] This footnote will be labeled "3".  It is the second
       auto-numbered footnote, but footnote label "2" is already used.


Citations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

See also: `Citation References`_.

Doctree element: citation_

Citations are identical to footnotes except that they use only
non-numeric labels such as ``[note]`` or ``[GVR2001]``.  Citation
labels are simple `reference names`_ (case-insensitive single words
consisting of alphanumerics plus internal hyphens, underscores, and
periods; no whitespace).  Citations may be rendered separately and
differently from footnotes.  For example::

    Here is a citation reference: [CIT2002]_.

    .. [CIT2002] This is the citation.  It's just like a footnote,
       except the label is textual.


.. _hyperlinks:

Hyperlink Targets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Doctree element: target_.

These are also called _`explicit hyperlink targets`, to differentiate
them from `implicit hyperlink targets`_ defined below.

Hyperlink targets identify a location within or outside of a document,
which may be linked to by `hyperlink references`_.

Hyperlink targets may be named or anonymous.  Named hyperlink targets
consist of an explicit markup start (".. "), an underscore, the
reference name (no trailing underscore), a colon, whitespace, and a
link block::

    .. _hyperlink-name: link-block

Reference names are whitespace-neutral and case-insensitive.  See
`Reference Names`_ for details and examples.

Anonymous hyperlink targets consist of an explicit markup start
(".. "), two underscores, a colon, whitespace, and a link block; there
is no reference name::

    .. __: anonymous-hyperlink-target-link-block

An alternate syntax for anonymous hyperlinks consists of two
underscores, a space, and a link block::

    __ anonymous-hyperlink-target-link-block

See `Anonymous Hyperlinks`_ below.

There are three types of hyperlink targets: internal, external, and
indirect.

1. _`Internal hyperlink targets` have empty link blocks.  They provide
   an end point allowing a hyperlink to connect one place to another
   within a document.  An internal hyperlink target points to the
   element following the target. [#]_  For example::

       Clicking on this internal hyperlink will take us to the target_
       below.

       .. _target:

       The hyperlink target above points to this paragraph.

   Internal hyperlink targets may be "chained".  Multiple adjacent
   internal hyperlink targets all point to the same element::

       .. _target1:
       .. _target2:

       The targets "target1" and "target2" are synonyms; they both
       point to this paragraph.

   If the element "pointed to" is an external hyperlink target (with a
   URI in its link block; see #2 below) the URI from the external
   hyperlink target is propagated to the internal hyperlink targets;
   they will all "point to" the same URI.  There is no need to
   duplicate a URI.  For example, all three of the following hyperlink
   targets refer to the same URI::

       .. _Python DOC-SIG mailing list archive:
       .. _archive:
       .. _Doc-SIG: https://mail.python.org/pipermail/doc-sig/

   An inline form of internal hyperlink target is available; see
   `Inline Internal Targets`_.

   .. [#] Works also, if the internal hyperlink target is "nested" at the
      end of an indented text block. This behaviour allows setting targets
      to individual list items (except the first, as a preceding internal
      target applies to the list as a whole)::

       * bullet list

         .. _`second item`:

       * second item, with hyperlink target.


2. _`External hyperlink targets` have an absolute or relative URI or
   email address in their link blocks.  For example, take the
   following input::

       See the Python_ home page for info.

       `Write to me`_ with your questions.

       .. _Python: https://www.python.org
       .. _Write to me: jdoe@example.com

   After processing into HTML, the hyperlinks might be expressed as::

       See the <a href="https://www.python.org">Python</a> home page
       for info.

       <a href="mailto:jdoe@example.com">Write to me</a> with your
       questions.

   An external hyperlink's URI may begin on the same line as the
   explicit markup start and target name, or it may begin in an
   indented text block immediately following, with no intervening
   blank lines.  If there are multiple lines in the link block, they
   are concatenated.  Any unescaped whitespace is removed (whitespace is
   permitted to allow for line wrapping).  The following external
   hyperlink targets are equivalent::

       .. _one-liner: https://docutils.sourceforge.io/rst.html

       .. _starts-on-this-line: https://
          docutils.sourceforge.net/rst.html

       .. _entirely-below:
          https://docutils.
          sourceforge.net/rst.html

   Escaped whitespace is preserved as intentional spaces, e.g.::

       .. _reference: ../local\ path\ with\ spaces.html

   If an external hyperlink target's URI contains an underscore as its
   last character, it must be escaped to avoid being mistaken for an
   indirect hyperlink target::

       This link_ refers to a file called ``underscore_``.

       .. _link: underscore\_

   It is possible (although not generally recommended) to include URIs
   directly within hyperlink references.  See `Embedded URIs and Aliases`_
   below.

3. _`Indirect hyperlink targets` have a hyperlink reference in their
   link blocks.  In the following example, target "one" indirectly
   references whatever target "two" references, and target "two"
   references target "three", an internal hyperlink target.  In
   effect, all three reference the same thing::

       .. _one: two_
       .. _two: three_
       .. _three:

   Just as with `hyperlink references`_ anywhere else in a document,
   if a phrase-reference is used in the link block it must be enclosed
   in backquotes.  As with `external hyperlink targets`_, the link
   block of an indirect hyperlink target may begin on the same line as
   the explicit markup start or the next line.  It may also be split
   over multiple lines, in which case the lines are joined with
   whitespace before being normalized.

   For example, the following indirect hyperlink targets are
   equivalent::

       .. _one-liner: `A HYPERLINK`_
       .. _entirely-below:
          `a    hyperlink`_
       .. _split: `A
          Hyperlink`_

   It is possible to include an alias directly within hyperlink
   references. See `Embedded URIs and Aliases`_ below.

If the reference name contains any colons, either:

- the phrase must be enclosed in backquotes::

      .. _`FAQTS: Computers: Programming: Languages: Python`:
         http://python.faqts.com/

- or the colon(s) must be backslash-escaped in the link target::

      .. _Chapter One\: "Tadpole Days":

      It's not easy being green...

See `Implicit Hyperlink Targets`_ below for the resolution of
duplicate reference names.

Syntax diagram::

    +-------+----------------------+
    | ".. " | "_" name ":" link    |
    +-------+ block                |
            |                      |
            +----------------------+


Anonymous Hyperlinks
....................

The `World Wide Web Consortium`_ recommends in its `HTML Techniques
for Web Content Accessibility Guidelines`_ that authors should
"clearly identify the target of each link."  Hyperlink references
should be as verbose as possible, but duplicating a verbose hyperlink
name in the target is onerous and error-prone.  Anonymous hyperlinks
are designed to allow convenient verbose hyperlink references, and are
analogous to `Auto-Numbered Footnotes`_.  They are particularly useful
in short or one-off documents.  However, this feature is easily abused
and can result in unreadable plaintext and/or unmaintainable
documents.  Caution is advised.

Anonymous `hyperlink references`_ are specified with two underscores
instead of one::

    See `the web site of my favorite programming language`__.

Anonymous targets begin with ".. __:"; no reference name is required
or allowed::

    .. __: https://www.python.org

As a convenient alternative, anonymous targets may begin with "__"
only::

    __ https://www.python.org

The reference name of the reference is not used to match the reference
to its target.  Instead, the order of anonymous hyperlink references
and targets within the document is significant: the first anonymous
reference will link to the first anonymous target.  The number of
anonymous hyperlink references in a document must match the number of
anonymous targets.  For readability, it is recommended that targets be
kept close to references.  Take care when editing text containing
anonymous references; adding, removing, and rearranging references
require attention to the order of corresponding targets.


Directives
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Doctree elements: depend on the directive.

Directives are an extension mechanism for reStructuredText, a way of
adding support for new constructs without adding new primary syntax
(directives may support additional syntax locally).  All standard
directives (those implemented and registered in the reference
reStructuredText parser) are described in the `reStructuredText
Directives`_ document, and are always available.  Any other directives
are domain-specific, and may require special action to make them
available when processing the document.

For example, here's how an image_ may be placed::

    .. image:: mylogo.jpeg

A figure_ (a graphic with a caption) may placed like this::

    .. figure:: larch.png

       The larch.

An admonition_ (note, caution, etc.) contains other body elements::

    .. note:: This is a paragraph

       - Here is a bullet list.

Directives are indicated by an explicit markup start (".. ") followed
by the directive type, two colons, and whitespace (together called the
"directive marker").  Directive types are case-insensitive single
words (alphanumerics plus isolated internal hyphens, underscores,
plus signs, colons, and periods; no whitespace).  Two colons are used
after the directive type for these reasons:

- Two colons are distinctive, and unlikely to be used in common text.

- Two colons avoids clashes with common comment text like::

      .. Danger: modify at your own risk!

- If an implementation of reStructuredText does not recognize a
  directive (i.e., the directive-handler is not installed), a level-3
  (error) system message is generated, and the entire directive block
  (including the directive itself) will be included as a literal
  block.  Thus "::" is a natural choice.

The directive block consists of any text on the first line of the
directive after the directive marker, and any subsequent indented
text.  The interpretation of the directive block is up to the
directive code.  There are three logical parts to the directive block:

1. Directive arguments.
2. Directive options.
3. Directive content.

Individual directives can employ any combination of these parts.
Directive arguments can be filesystem paths, URLs, title text, etc.
Directive options are indicated using `field lists`_; the field names
and contents are directive-specific.  Arguments and options must form
a contiguous block beginning on the first or second line of the
directive; a blank line indicates the beginning of the directive
content block.  If either arguments and/or options are employed by the
directive, a blank line must separate them from the directive content.
The "figure" directive employs all three parts::

    .. figure:: larch.png
       :scale: 50

       The larch.

Simple directives may not require any content.  If a directive that
does not employ a content block is followed by indented text anyway,
it is an error.  If a block quote should immediately follow a
directive, use an empty comment in-between (see Comments_ below).

Actions taken in response to directives and the interpretation of text
in the directive content block or subsequent text block(s) are
directive-dependent.  See `reStructuredText Directives`_ for details.

Directives are meant for the arbitrary processing of their contents,
which can be transformed into something possibly unrelated to the
original text.  It may also be possible for directives to be used as
pragmas, to modify the behavior of the parser, such as to experiment
with alternate syntax.  There is no parser support for this
functionality at present; if a reasonable need for pragma directives
is found, they may be supported.

Directives do not generate "directive" elements; they are a *parser
construct* only, and have no intrinsic meaning outside of
reStructuredText.  Instead, the parser will transform recognized
directives into (possibly specialized) document elements.  Unknown
directives will trigger level-3 (error) system messages.

Syntax diagram::

    +-------+-------------------------------+
    | ".. " | directive type "::" directive |
    +-------+ block                         |
            |                               |
            +-------------------------------+


Substitution Definitions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Doctree element: substitution_definition_.

Substitution definitions are indicated by an explicit markup start
(".. ") followed by a vertical bar, the substitution text, another
vertical bar, whitespace, and the definition block.  Substitution text
may not begin or end with whitespace.  A substitution definition block
contains an embedded inline-compatible directive (without the leading
".. "), such as "image_" or "replace_".  For example::

    The |biohazard| symbol must be used on containers used to
    dispose of medical waste.

    .. |biohazard| image:: biohazard.png

It is an error for a substitution definition block to directly or
indirectly contain a circular substitution reference.

`Substitution references`_ are replaced in-line by the processed
contents of the corresponding definition (linked by matching
substitution text).  Matches are case-sensitive but forgiving; if no
exact match is found, a case-insensitive comparison is attempted.

Substitution definitions allow the power and flexibility of
block-level directives_ to be shared by inline text.  They are a way
to include arbitrarily complex inline structures within text, while
keeping the details out of the flow of text.  They are the equivalent
of SGML/XML's named entities or programming language macros.

Without the substitution mechanism, every time someone wants an
application-specific new inline structure, they would have to petition
for a syntax change.  In combination with existing directive syntax,
any inline structure can be coded without new syntax (except possibly
a new directive).

Syntax diagram::

    +-------+-----------------------------------------------------+
    | ".. " | "|" substitution text "| " directive type "::" data |
    +-------+ directive block                                     |
            |                                                     |
            +-----------------------------------------------------+

Following are some use cases for the substitution mechanism.  Please
note that most of the embedded directives shown are examples only and
have not been implemented.

Objects
    Substitution references may be used to associate ambiguous text
    with a unique object identifier.

    For example, many sites may wish to implement an inline "user"
    directive::

        |Michael| and |Jon| are our widget-wranglers.

        .. |Michael| user:: mjones
        .. |Jon|     user:: jhl

    Depending on the needs of the site, this may be used to index the
    document for later searching, to hyperlink the inline text in
    various ways (mailto, homepage, mouseover Javascript with profile
    and contact information, etc.), or to customize presentation of
    the text (include username in the inline text, include an icon
    image with a link next to the text, make the text bold or a
    different color, etc.).

    The same approach can be used in documents which frequently refer
    to a particular type of objects with unique identifiers but
    ambiguous common names.  Movies, albums, books, photos, court
    cases, and laws are possible.  For example::

        |The Transparent Society| offers a fascinating alternate view
        on privacy issues.

        .. |The Transparent Society| book:: isbn=0738201448

    Classes or functions, in contexts where the module or class names
    are unclear and/or interpreted text cannot be used, are another
    possibility::

        4XSLT has the convenience method |runString|, so you don't
        have to mess with DOM objects if all you want is the
        transformed output.

        .. |runString| function:: module=xml.xslt class=Processor

Images
    Images are a common use for substitution references::

        West led the |H| 3, covered by dummy's |H| Q, East's |H| K,
        and trumped in hand with the |S| 2.

        .. |H| image:: /images/heart.png
           :height: 11
           :width: 11
        .. |S| image:: /images/spade.png
           :height: 11
           :width: 11

        * |Red light| means stop.
        * |Green light| means go.
        * |Yellow light| means go really fast.

        .. |Red light|    image:: red_light.png
        .. |Green light|  image:: green_light.png
        .. |Yellow light| image:: yellow_light.png

        |-><-| is the official symbol of POEE_.

        .. |-><-| image:: discord.png
        .. _POEE: http://www.poee.org/

    The "image_" directive has been implemented.

Styles [#]_
    Substitution references may be used to associate inline text with
    an externally defined presentation style::

        Even |the text in Texas| is big.

        .. |the text in Texas| style:: big

    The style name may be meaningful in the context of some particular
    output format (CSS class name for HTML output, LaTeX style name
    for LaTeX, etc), or may be ignored for other output formats (such
    as plaintext).

    .. @@@ This needs to be rethought & rewritten or removed:

       Interpreted text is unsuitable for this purpose because the set
       of style names cannot be predefined - it is the domain of the
       content author, not the author of the parser and output
       formatter - and there is no way to associate a style name
       argument with an interpreted text style role.  Also, it may be
       desirable to use the same mechanism for styling blocks::

           .. style:: motto
              At Bob's Underwear Shop, we'll do anything to get in
              your pants.

           .. style:: disclaimer
              All rights reversed.  Reprint what you like.

    .. [#] There may be sufficient need for a "style" mechanism to
       warrant simpler syntax such as an extension to the interpreted
       text role syntax.  The substitution mechanism is cumbersome for
       simple text styling.

Templates
    Inline markup may be used for later processing by a template
    engine.  For example, a Zope_ author might write::

        Welcome back, |name|!

        .. |name| tal:: replace user/getUserName

    After processing, this ZPT output would result::

        Welcome back,
        <span tal:replace="user/getUserName">name</span>!

    Zope would then transform this to something like "Welcome back,
    David!" during a session with an actual user.

Replacement text
    The substitution mechanism may be used for simple macro
    substitution.  This may be appropriate when the replacement text
    is repeated many times throughout one or more documents,
    especially if it may need to change later.  A short example is
    unavoidably contrived::

        |RST|_ is a little annoying to type over and over, especially
        when writing about |RST| itself, and spelling out the
        bicapitalized word |RST| every time isn't really necessary for
        |RST| source readability.

        .. |RST| replace:: reStructuredText
        .. _RST: https://docutils.sourceforge.io/rst.html

    Note the trailing underscore in the first use of a substitution
    reference.  This indicates a reference to the corresponding
    hyperlink target.

    Substitution is also appropriate when the replacement text cannot
    be represented using other inline constructs, or is obtrusively
    long::

        But still, that's nothing compared to a name like
        |j2ee-cas|__.

        .. |j2ee-cas| replace::
           the Java `TM`:super: 2 Platform, Enterprise Edition Client
           Access Services
        __ http://developer.java.sun.com/developer/earlyAccess/
           j2eecas/

    The "replace_" directive has been implemented.


Comments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Doctree element: comment_.

`Explicit markup blocks`_ that are not recognized as citations_,
directives_, footnotes_, `hyperlink targets`_, or `substitution
definitions`_ will be processed as a comment element. Arbitrary
indented text may be used on the lines following the explicit markup
start. To ensure that none of the other explicit markup constructs is
recognized, leave the ".." on a line by itself::

    .. This is a comment
    ..
       _so: is this!
    ..
       [and] this!
    ..
       this:: too!
    ..
       |even| this:: !

    .. [this] however, is a citation.

Apart from removing the maximum common indentation, no further
processing is done on the content; a comment contains a single "text
blob".  Depending on the output formatter, comments may be removed
from the processed output.

Syntax diagram::

    +-------+----------------------+
    | ".. " | comment              |
    +-------+ block                |
            |                      |
            +----------------------+

Empty Comments
..............

An explicit markup start followed by a blank line and nothing else
(apart from whitespace) is an "_`empty comment`".  It serves to
terminate a preceding construct, and does **not** consume any indented
text following.  To have a block quote follow a list or any indented
construct, insert an unindented empty comment in-between::

    This is
      a definition list.

    ..

      This is a block quote.

Implicit Hyperlink Targets
==========================

Implicit hyperlink targets are generated by section titles, footnotes,
and citations, and may also be generated by extension constructs.
Implicit hyperlink targets otherwise behave identically to explicit
`hyperlink targets`_.

Problems of ambiguity due to conflicting duplicate implicit and
explicit reference names are avoided by following this procedure:

1. `Explicit hyperlink targets`_ override any implicit targets having
   the same reference name.  The implicit hyperlink targets are
   removed, and level-1 (info) system messages are inserted.

2. Duplicate implicit hyperlink targets are removed, and level-1
   (info) system messages inserted.  For example, if two or more
   sections have the same title (such as "Introduction" subsections of
   a rigidly-structured document), there will be duplicate implicit
   hyperlink targets.

3. Duplicate explicit hyperlink targets are removed, and level-2
   (warning) system messages are inserted.  Exception: duplicate
   `external hyperlink targets`_ (identical hyperlink names and
   referenced URIs) do not conflict, and are not removed.

System messages are inserted where target links have been removed.
See "Error Handling" in `PEP 258`_.

The parser must return a set of *unique* hyperlink targets.  The
calling software (such as the Docutils_) can warn of unresolvable
links, giving reasons for the messages.


Inline Markup
=============

In reStructuredText, inline markup applies to words or phrases within
a text block.  The same whitespace and punctuation that serves to
delimit words in written text is used to delimit the inline markup
syntax constructs (see the `inline markup recognition rules`_ for
details).  The text within inline markup may not begin or end with
whitespace.  Arbitrary `character-level inline markup`_ is supported
although not encouraged.  Inline markup cannot be nested.

There are nine inline markup constructs.  Five of the constructs use
identical start-strings and end-strings to indicate the markup:

- emphasis_: "*"
- `strong emphasis`_: "**"
- `interpreted text`_: "`"
- `inline literals`_: "``"
- `substitution references`_: "|"

Three constructs use different start-strings and end-strings:

- `inline internal targets`_: "_`" and "`"
- `footnote references`_: "[" and "]_"
- `hyperlink references`_: "`" and "\`_" (phrases), or just a
  trailing "_" (single words)

`Standalone hyperlinks`_ are recognized implicitly, and use no extra
markup.

Inline comments are not supported.


Inline markup recognition rules
-------------------------------

Inline markup start-strings and end-strings are only recognized if
the following conditions are met:

1. Inline markup start-strings must be immediately followed by
   non-whitespace.

2. Inline markup end-strings must be immediately preceded by
   non-whitespace.

3. The inline markup end-string must be separated by at least one
   character from the start-string.

4. Both, inline markup start-string and end-string must not be preceded by
   an unescaped backslash (except for the end-string of `inline literals`_).
   See `Escaping Mechanism`_ above for details.

5. If an inline markup start-string is immediately preceded by one of the
   ASCII characters ``' " < ( [ {`` or a similar
   non-ASCII character [#openers]_, it must not be followed by the
   corresponding closing character from ``' " > ) ] }`` or a similar
   non-ASCII character [#closers]_. (For quotes, matching characters can
   be any of the `quotation marks in international usage`_.)

If the configuration setting `character-level-inline-markup`_ is False
(default), additional conditions apply to the characters "around" the
inline markup:

6. Inline markup start-strings must start a text block or be
   immediately preceded by

   * whitespace,
   * one of the ASCII characters ``- : / ' " < ( [ {``
   * or a similar non-ASCII punctuation character. [#pre-chars]_

7. Inline markup end-strings must end a text block or be immediately
   followed by

   * whitespace,
   * one of the ASCII characters ``- . , : ; ! ? \ / ' " ) ] } >``
   * or a similar non-ASCII punctuation character. [#post-chars]_

.. [#openers]    `Unicode categories`_ `Ps` (Open), `Pi` (Initial quote),
                 or `Pf` (Final quote). [#uni-version]_
.. [#closers]    Unicode categories `Pe` (Close), `Pi` (Initial quote),
                 or `Pf` (Final quote). [#uni-version]_
.. [#pre-chars]  Unicode categories `Ps` (Open), `Pi` (Initial quote),
                 `Pf` (Final quote), `Pd` (Dash), or `Po` (Other). [#uni-version]_
.. [#post-chars] Unicode categories  `Pe` (Close), `Pi` (Initial quote),
                 `Pf` (Final quote), `Pd` (Dash), or `Po` (Other). [#uni-version]_

.. [#uni-version] The category of some characters changed with the
   development of the Unicode standard.
   Docutils 0.13 uses `Unicode version 5.2.0`_.

.. _Unicode categories:
   https://www.unicode.org/Public/5.1.0/ucd/UCD.html#General_Category_Values
.. _Unicode version 5.2.0: https://www.unicode.org/Public/5.2.0/
.. _quotation marks in international usage:
   https://en.wikipedia.org/wiki/Quotation_mark,_non-English_usage

The inline markup recognition rules were devised to allow 90% of non-markup
uses of "*", "`", "_", and "|" without escaping. For example, none of the
following terms are recognized as containing inline markup strings:

- 2 * x  a ** b  (* BOM32_* ` `` _ __ | (breaks rule 1)
- || (breaks rule 3)
- "*" '|' (*) [*] {*} <*>
  ‘*’ ‚*‘ ‘*‚ ’*’ ‚*’
  “*” „*“ “*„ ”*” „*”
  »*« ›*‹ «*» »*» ›*› (breaks rule 5)
- 2*x a**b O(N**2) e**(x*y) f(x)*f(y) a|b file*.*
  __init__ __init__()  (breaks rule 6)

No escaping is required inside the following inline markup examples:

- ``*2 * x  *a **b *.txt*`` (breaks rule 2; renders as "*2 * x  *a **b *.txt*")
- ``*2*x a**b O(N**2) e**(x*y) f(x)*f(y) a*(1+2)*``
  (breaks rule 7; renders as "*2*x a**b O(N**2) e**(x*y) f(x)*f(y) a*(1+2)*")

It may be desirable to use `inline literals`_ for some of these anyhow,
especially if they represent code snippets.  It's a judgment call.

The following terms *do* require either literal-quoting or escaping to avoid
misinterpretation::

    *4, class_, *args, **kwargs, `TeX-quoted', *ML, *.txt

In most use cases, `inline literals`_ or `literal blocks`_ are the best
choice (by default, this also selects a monospaced font). Alternatively, the
inline markup characters can be escaped::

    \*4, class\_, \*args, \**kwargs, \`TeX-quoted', \*ML, \*.txt


For languages that don't use whitespace between words (e.g. Japanese or
Chinese) it is recommended to set `character-level-inline-markup`_ to
True and eventually escape inline markup characters.
The examples breaking rules 6 and 7 above show which constructs may need
special attention.

.. _character-level-inline-markup:
   ../../user/config.html#character-level-inline-markup


Recognition order
-----------------

Inline markup delimiter characters are used for multiple constructs,
so to avoid ambiguity there must be a specific recognition order for
each character.  The inline markup recognition order is as follows:

- Asterisks: `Strong emphasis`_ ("**") is recognized before emphasis_
  ("*").

- Backquotes: `Inline literals`_ ("``"), `inline internal targets`_
  (leading "_`", trailing "`"), are mutually independent, and are
  recognized before phrase `hyperlink references`_ (leading "`",
  trailing "\`_") and `interpreted text`_ ("`").

- Trailing underscores: Footnote references ("[" + label + "]_") and
  simple `hyperlink references`_ (name + trailing "_") are mutually
  independent.

- Vertical bars: `Substitution references`_ ("|") are independently
  recognized.

- `Standalone hyperlinks`_ are the last to be recognized.


Character-Level Inline Markup
-----------------------------

It is possible to mark up individual characters within a word with
backslash escapes (see `Escaping Mechanism`_ above).  Backslash
escapes can be used to allow arbitrary text to immediately follow
inline markup::

    Python ``list``\s use square bracket syntax.

The backslash will disappear from the processed document.  The word
"list" will appear as inline literal text, and the letter "s" will
immediately follow it as normal text, with no space in-between.

Arbitrary text may immediately precede inline markup using
backslash-escaped whitespace::

    Possible in *re*\ ``Structured``\ *Text*, though not encouraged.

The backslashes and spaces separating "re", "Structured", and "Text"
above will disappear from the processed document.

.. CAUTION::

   The use of backslash-escapes for character-level inline markup is
   not encouraged.  Such use is ugly and detrimental to the
   unprocessed document's readability.  Please use this feature
   sparingly and only where absolutely necessary.


Emphasis
--------

Doctree element: emphasis_.

Start-string = end-string = "*".

Text enclosed by single asterisk characters is emphasized::

    This is *emphasized text*.

Emphasized text is typically displayed in italics.


Strong Emphasis
---------------

Doctree element: strong_.

Start-string = end-string = "**".

Text enclosed by double-asterisks is emphasized strongly::

    This is **strong text**.

Strongly emphasized text is typically displayed in boldface.


Interpreted Text
----------------

Doctree element: depends on the explicit or implicit role and
processing.

Start-string = end-string = "`".

Interpreted text is text that is meant to be related, indexed, linked,
summarized, or otherwise processed, but the text itself is typically
left alone.  Interpreted text is enclosed by single backquote
characters::

    This is `interpreted text`.

The "role" of the interpreted text determines how the text is
interpreted.  The role may be inferred implicitly (as above; the
"default role" is used) or indicated explicitly, using a role marker.
A role marker consists of a colon, the role name, and another colon.
A role name is a single word consisting of alphanumerics plus isolated
internal hyphens, underscores, plus signs, colons, and periods;
no whitespace or other characters are allowed.  A role marker is
either a prefix or a suffix to the interpreted text, whichever reads
better; it's up to the author::

    :role:`interpreted text`

    `interpreted text`:role:

Interpreted text allows extensions to the available inline descriptive
markup constructs.  To emphasis_, `strong emphasis`_, `inline
literals`_, and `hyperlink references`_, we can add "title reference",
"index entry", "acronym", "class", "red", "blinking" or anything else
we want (as long as it is a simple `reference name`_).
Only pre-determined roles are recognized; unknown roles will
generate errors.  A core set of standard roles is implemented in the
reference parser; see `reStructuredText Interpreted Text Roles`_ for
individual descriptions.  The role_ directive can be used to define
custom interpreted text roles.  In addition, applications may support
specialized roles.

In `field lists`_, care must be taken when using interpreted text with
explicit roles in field names: the role must be a suffix to the
interpreted text. The following are recognized as field list items::

    :`field name`:code:: interpreted text with explicit role as suffix

    :a `complex`:code:\  field name: a backslash-escaped space
                                     is necessary

The following are **not** recognized as field list items::

    ::code:`not a field name`: paragraph with interpreted text

    :code:`not a field name`: paragraph with interpreted text

Edge cases::

    :field\:`name`: interpreted text (standard role) requires
                    escaping the leading colon in a field name

    :field:\`name`: not interpreted text


Inline Literals
---------------

Doctree element: literal_.

Start-string = end-string = "``".

Text enclosed by double-backquotes is treated as inline literals::

    This text is an example of ``inline literals``.

Inline literals may contain any characters except two adjacent
backquotes in an end-string context (according to the recognition
rules above).  No markup interpretation (including backslash-escape
interpretation) is done within inline literals.

Line breaks and sequences of whitespace characters
are *not* protected in inline literals.
Although a reStructuredText parser will preserve them in its output,
the final representation of the processed document depends on the
output formatter, thus the preservation of whitespace cannot be
guaranteed.  If the preservation of line breaks and/or other
whitespace is important, `literal blocks`_ should be used.

Inline literals are useful for short code snippets.  For example::

    The regular expression ``[+-]?(\d+(\.\d*)?|\.\d+)`` matches
    floating-point numbers (without exponents).


Hyperlink References
--------------------

Doctree element: reference_.

- Named hyperlink references:

  - No start-string, end-string = "_".
  - Start-string = "`", end-string = "\`_".  (Phrase references.)

- Anonymous hyperlink references:

  - No start-string, end-string = "__".
  - Start-string = "`", end-string = "\`__".  (Phrase references.)

Hyperlink references are indicated by a trailing underscore, "_",
except for `standalone hyperlinks`_ which are recognized
independently.  The underscore can be thought of as a right-pointing
arrow.  The trailing underscores point away from hyperlink references,
and the leading underscores point toward `hyperlink targets`_.

Hyperlinks consist of two parts.  In the text body, there is a source
link, a reference name with a trailing underscore (or two underscores
for `anonymous hyperlinks`_)::

    See the Python_ home page for info.

A target link with a matching reference name must exist somewhere else
in the document.  See `Hyperlink Targets`_ for a full description).

`Anonymous hyperlinks`_ (which see) do not use reference names to
match references to targets, but otherwise behave similarly to named
hyperlinks.


Embedded URIs and Aliases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A hyperlink reference may directly embed a target URI or (since
Docutils 0.11) a hyperlink reference within angle brackets ("<...>")
as follows::

    See the `Python home page <https://www.python.org>`_ for info.

    This `link <Python home page_>`_ is an alias to the link above.

This is exactly equivalent to::

    See the `Python home page`_ for info.

    This link_ is an alias to the link above.

    .. _Python home page: https://www.python.org
    .. _link: `Python home page`_

The bracketed URI must be preceded by whitespace and be the last text
before the end string.

With a single trailing underscore, the reference is named and the same
target URI may be referred to again.
With two trailing underscores, the reference and target are both
anonymous, and the target cannot be referred to again.  These are
"one-off" hyperlinks.  For example::

    `RFC 2396 <https://www.rfc-editor.org/rfc/rfc2396.txt>`__ and `RFC
    2732 <https://www.rfc-editor.org/rfc/rfc2732.txt>`__ together
    define the syntax of URIs.

Equivalent to::

    `RFC 2396`__ and `RFC 2732`__ together define the syntax of URIs.

    __ https://www.rfc-editor.org/rfc/rfc2396.txt
    __ https://www.rfc-editor.org/rfc/rfc2732.txt

`Standalone hyperlinks`_ are treated as URIs, even if they end with an
underscore like in the example of a Python function documentation::

    `__init__ <http:example.py.html#__init__>`__

If a target URI that is not recognized as `standalone hyperlink`_ happens
to end with an underscore, this needs to be backslash-escaped to avoid
being parsed as hyperlink reference. For example ::

    Use the `source <parrots.txt\_>`__.

creates an anonymous reference to the file ``parrots.txt_``.

If the reference text happens to end with angle-bracketed text that is
*not* a URI or hyperlink reference, at least one angle-bracket needs to
be backslash-escaped or an escaped space should follow. For example, here
are three references to titles describing a tag::

    See `HTML Element: \<a>`_, `HTML Element: <b\> `_, and
    `HTML Element: <c>\ `_.

The reference text may also be omitted, in which case the URI will be
duplicated for use as the reference text.  This is useful for relative
URIs where the address or file name is also the desired reference
text::

    See `<a_named_relative_link>`_ or `<an_anonymous_relative_link>`__
    for details.

.. CAUTION::

   This construct offers easy authoring and maintenance of hyperlinks
   at the expense of general readability.  Inline URIs, especially
   long ones, inevitably interrupt the natural flow of text.  For
   documents meant to be read in source form, the use of independent
   block-level `hyperlink targets`_ is **strongly recommended**.  The
   embedded URI construct is most suited to documents intended *only*
   to be read in processed form.


Inline Internal Targets
------------------------

Doctree element: target_.

Start-string = "_`", end-string = "`".

Inline internal targets are the equivalent of explicit `internal
hyperlink targets`_, but may appear within running text.  The syntax
begins with an underscore and a backquote, is followed by a hyperlink
name or phrase, and ends with a backquote.  Inline internal targets
may not be anonymous.

For example, the following paragraph contains a hyperlink target named
"Norwegian Blue"::

    Oh yes, the _`Norwegian Blue`.  What's, um, what's wrong with it?

See `Implicit Hyperlink Targets`_ for the resolution of duplicate
reference names.


Footnote References
-------------------

See also: Footnotes_

Doctree element: footnote_reference_.

Configuration settings:
`footnote_references <footnote_references setting_>`_,
trim_footnote_reference_space_.

.. _trim_footnote_reference_space:
   ../../user/config.html#trim-footnote-reference-space

Start-string = "[", end-string = "]_".

Each footnote reference consists of a square-bracketed label followed
by a trailing underscore.  Footnote labels are one of:

- one or more digits (i.e., a number),

- a single "#" (denoting `auto-numbered footnotes`_),

- a "#" followed by a simple `reference name`_ (an `autonumber label`_),
  or

- a single "*" (denoting `auto-symbol footnotes`_).

For example::

    Please RTFM [1]_.

    .. [1] Read The Fine Manual

`Inline markup recognition rules`_ may require whitespace in front of the
footnote reference. To remove the whitespace from the output, use an
escaped whitespace character (see `Escaping Mechanism`_) or set the
trim_footnote_reference_space_ configuration setting. Leading whitespace
is removed by default, if the `footnote_references setting`_ is
"superscript".


Citation References
-------------------

See also: Citations_

Doctree element: citation_reference_.

Start-string = "[", end-string = "]_".

Each citation reference consists of a square-bracketed label followed
by a trailing underscore.  Citation labels are simple `reference
names`_ (case-insensitive single words, consisting of alphanumerics
plus internal hyphens, underscores, and periods; no whitespace).

For example::

    Here is a citation reference: [CIT2002]_.


Substitution References
-----------------------

Doctree elements: substitution_reference_, reference_.

Start-string = "|", end-string = "|" (optionally followed by "_" or
"__").

Vertical bars are used to bracket the substitution reference text.  A
substitution reference may also be a hyperlink reference by appending
a "_" (named) or "__" (anonymous) suffix; the substitution text is
used for the reference text in the named case.

The processing system replaces substitution references with the
processed contents of the corresponding `substitution definitions`_
(which see for the definition of "correspond").  Substitution
definitions produce inline-compatible elements.

Examples::

    This is a simple |substitution reference|.  It will be replaced by
    the processing system.

    This is a combination |substitution and hyperlink reference|_.  In
    addition to being replaced, the replacement text or element will
    refer to the "substitution and hyperlink reference" target.

.. _standalone hyperlink:

Standalone Hyperlinks
---------------------

Doctree element: reference_.

No start-string or end-string.

A URI (absolute URI [#URI]_ or standalone email address) within a text
block is treated as a general external hyperlink with the URI itself
as the link's text.  For example::

    See https://www.python.org for info.

would be marked up in HTML as::

    See <a href="https://www.python.org">https://www.python.org</a> for
    info.

Two forms of URI are recognized:

1. Absolute URIs.  These consist of a scheme, a colon (":"), and a
   scheme-specific part whose interpretation depends on the scheme.

   The scheme is the name of the protocol, such as "http", "ftp",
   "mailto", or "telnet".  The scheme consists of an initial letter,
   followed by letters, numbers, and/or "+", "-", ".".  Recognition is
   limited to known schemes, per the `Official IANA Registry of URI
   Schemes`_ and the W3C's `Retired Index of WWW Addressing Schemes`_.

   The scheme-specific part of the resource identifier may be either
   hierarchical or opaque:

   - Hierarchical identifiers begin with one or two slashes and may
     use slashes to separate hierarchical components of the path.
     Examples are web pages and FTP sites::

         https://www.python.org

         ftp://ftp.python.org/pub/python

   - Opaque identifiers do not begin with slashes.  Examples are
     email addresses and newsgroups::

         mailto:someone@somewhere.com

         news:comp.lang.python

   With queries, fragments, and %-escape sequences, URIs can become
   quite complicated.  A reStructuredText parser must be able to
   recognize any absolute URI, as defined in RFC2396_ and RFC2732_.

2. Standalone email addresses, which are treated as if they were
   absolute URIs with a "mailto:" scheme.  Example::

       someone@somewhere.com

Punctuation at the end of a URI is not considered part of the URI,
unless the URI is terminated by a closing angle bracket (">").
Backslashes may be used in URIs to escape markup characters,
specifically asterisks ("*") and underscores ("_") which are valid URI
characters (see `Escaping Mechanism`_ above).

.. [#URI] Uniform Resource Identifier.  URIs are a general form of
   URLs (Uniform Resource Locators).  For the syntax of URIs see
   RFC2396_ and RFC2732_.


Units
=====

(New in Docutils 0.3.10.)

All measures consist of a positive floating point number in standard
(non-scientific) notation and a unit, possibly separated by one or
more spaces.

Units are only supported where explicitly mentioned in the reference
manuals.


Length Units
------------

The following length units are supported by the reStructuredText
parser:

* em (em unit, the element's font size)
* ex (ex unit, x-height of the element’s font)
* mm (millimeters; 1 mm = 1/1000 m)
* cm (centimeters; 1 cm = 10 mm)
* in (inches; 1 in = 2.54 cm = 96 px)
* px (pixels, 1 px = 1/96 in) [#]_
* pt (points; 1 pt = 1/72 in)
* pc (picas; 1 pc = 1/6 in = 12 pt)

This set corresponds to the `length units in CSS2`_ (a subset of `length
units in CSS3`_).

.. [#] In LaTeX, the default definition is 1 px = 1/72 in (cf. `How to
   configure the size of a pixel`_ in the LaTeX writer documentation).

The following are all valid length values: "1.5em", "20 mm", ".5in".

Length values without unit are completed with a writer-dependent
default (e.g. "px" with HTML, "pt" with `latex2e`). See the writer
specific documentation in the `user doc`__ for details.

.. _length units in CSS2:
   https://www.w3.org/TR/CSS2/syndata.html#length-units
.. _length units in CSS3:
   https://www.w3.org/TR/css-values-3/#absolute-lengths
.. _How to configure the size of a pixel:
   ../../user/latex.html#size-of-a-pixel
__ ../../user/


Percentage Units
----------------

Percentage values have a percent sign ("%") as unit.  Percentage
values are relative to other values, depending on the context in which
they occur.


===================================================
 Error Handling
===================================================

Doctree elements: system_message_, problematic_.

Markup errors are handled according to the specification in `PEP
258`_.


.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _Docutils: https://docutils.sourceforge.io/
.. _Docutils Generic DTD: ../docutils.dtd
.. _transforms:
   https://docutils.sourceforge.io/docutils/transforms/
.. _Grouch: http://www.mems-exchange.org/software/grouch/
.. _RFC822: https://www.rfc-editor.org/rfc/rfc822.txt
.. _DocTitle transform:
.. _DocInfo transform:
   https://docutils.sourceforge.io/docutils/transforms/frontmatter.py
.. _getopt.py:
   https://docs.python.org/3/library/getopt.html
.. _GNU libc getopt_long():
   https://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Options.html
.. _doctest module:
   https://docs.python.org/3/library/doctest.html
.. _Emacs table mode: http://table.sourceforge.net/
.. _Official IANA Registry of URI Schemes:
   http://www.iana.org/assignments/uri-schemes
.. _Retired Index of WWW Addressing Schemes:
   https://www.w3.org/Addressing/schemes.html
.. _World Wide Web Consortium: https://www.w3.org/
.. _HTML Techniques for Web Content Accessibility Guidelines:
   https://www.w3.org/TR/WCAG10-HTML-TECHS/#link-text
.. _RFC2396: https://www.rfc-editor.org/rfc/rfc2396.txt
.. _RFC2732: https://www.rfc-editor.org/rfc/rfc2732.txt
.. _Zope: http://www.zope.com/
.. _PEP 258: ../../peps/pep-0258.html
.. _writers: ../../peps/pep-0258.html#writers

.. _reStructuredText Directives: directives.html
.. _admonition: directives.html#admonitions
.. _code: directives.html#code
.. _math: directives.html#math
.. _raw: directives.html#raw
.. _figure: directives.html#figure
.. _image: directives.html#image
.. _meta: directives.html#metadata
.. _replace: directives.html#replace
.. _role: directives.html#custom-interpreted-text-roles
.. _table directive: directives.html#table
.. _list table: directives.html#list-table
.. _CSV table: directives.html#csv-table
.. _custom roles: directives.html#role
.. _reStructuredText Interpreted Text Roles: roles.html
.. _"raw" role: roles.html#raw

.. _Document Tree:
.. _The Docutils Document Tree: ../doctree.html
.. _"classes" attribute:  ../doctree.html#classes
.. _topic: ../doctree.html#topic
.. _address: ../doctree.html#address
.. _author: ../doctree.html#author
.. _authors: ../doctree.html#authors
.. _contact: ../doctree.html#contact
.. _copyright: ../doctree.html#copyright
.. _date: ../doctree.html#date
.. _topic: ../doctree.html#topic
.. _organization: ../doctree.html#organization
.. _revision: ../doctree.html#revision
.. _status: ../doctree.html#status
.. _version: ../doctree.html#version
.. _docinfo: ../doctree.html#docinfo
.. _field: ../doctree.html#field
.. _section: ../doctree.html#section
.. _bullet_list: ../doctree.html#bullet-list
.. _list_item: ../doctree.html#list-item
.. _enumerated_list: ../doctree.html#enumerated-list
.. _list_item: ../doctree.html#list-item
.. _definition_list: ../doctree.html#definition-list
.. _definition_list_item: ../doctree.html#definition-list-item
.. _term: ../doctree.html#term
.. _classifier: ../doctree.html#classifier
.. _definition: ../doctree.html#definition
.. _field_list: ../doctree.html#field-list
.. _field_name: ../doctree.html#field-name
.. _field_body: ../doctree.html#field-body
.. _option_list: ../doctree.html#option-list
.. _option_list_item: ../doctree.html#option-list-item
.. _option_group: ../doctree.html#option-group
.. _option: ../doctree.html#option
.. _option_string: ../doctree.html#option-string
.. _option_argument: ../doctree.html#option-argument
.. _description: ../doctree.html#description
.. _line_block: ../doctree.html#line-block
.. _line: ../doctree.html#line
.. _table: ../doctree.html#table
.. _tgroup: ../doctree.html#tgroup
.. _colspec: ../doctree.html#colspec
.. _thead: ../doctree.html#thead
.. _tbody: ../doctree.html#tbody
.. _title: ../doctree.html#title
.. _row: ../doctree.html#row
.. _entry: ../doctree.html#entry
.. _identifier key: ../doctree.html#identifier-keys
.. _document element: ../doctree.html#document
.. _footnote: ../doctree.html#footnote
.. _label: ../doctree.html#label
.. _citation: ../doctree.html#citation
.. _target: ../doctree.html#target
.. _footnote_reference: ../doctree.html#footnote-reference
.. _citation_reference: ../doctree.html#citation-reference
.. _transition: ../doctree.html#transition
.. _paragraph: ../doctree.html#paragraph
.. _literal_block: ../doctree.html#literal-block
.. _block_quote: ../doctree.html#block-quote
.. _attribution: ../doctree.html#attribution
.. _doctest_block: ../doctree.html#doctest-block
.. _substitution_definition: ../doctree.html#substitution-definition
.. _comment: ../doctree.html#comment
.. _strong: ../doctree.html#strong
.. _literal: ../doctree.html#literal
.. _reference: ../doctree.html#reference
.. _substitution_reference: ../doctree.html#substitution-reference
.. _reference: ../doctree.html#reference
.. _reference: ../doctree.html#reference
.. _system_message: ../doctree.html#system-message
.. _problematic: ../doctree.html#problematic




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 1. 014.📜 docutils-0.20.1/docs/ref/rst/roles.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

=========================================
 reStructuredText Interpreted Text Roles
=========================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9118 $
:Date: $Date: 2022-07-29 13:56:58 +0200 (Fr, 29. Jul 2022) $
:Copyright: This document has been placed in the public domain.
:Abstract: 
  This document describes the interpreted text roles implemented in the
  reference reStructuredText parser.

Interpreted text uses backquotes (`) around the text.  An explicit
role marker may optionally appear before or after the text, delimited
with colons.  For example::

    This is `interpreted text` using the default role.

    This is :title:`interpreted text` using an explicit role.

A default role may be defined by applications of reStructuredText; it
is used if no explicit ``:role:`` prefix or suffix is given.  The
"default default role" is `:title-reference:`_.  It can be changed
using the default-role_ directive.

See the `Interpreted Text`_ section in the `reStructuredText Markup
Specification`_ for syntax details.  For details on the hierarchy of
elements, please see `The Docutils Document Tree`_ and the `Docutils
Generic DTD`_ XML document type definition.  For interpreted text role
implementation details, see `Creating reStructuredText Interpreted
Text Roles`_.

.. _"role" directive: directives.html#role
.. _default-role: directives.html#default-role
.. _Interpreted Text: restructuredtext.html#interpreted-text
.. _reStructuredText Markup Specification: restructuredtext.html
.. _The Docutils Document Tree: ../doctree.html
.. _Docutils Generic DTD: ../docutils.dtd
.. _Creating reStructuredText Interpreted Text Roles:
   ../../howto/rst-roles.html


.. .. contents:: Table of Contents


===================================================
 Customization
===================================================

Custom interpreted text roles may be defined in a document with the
`"role" directive`_.  Customization details are listed with each role.

.. _class:

A ``class`` option is recognized by the "role" directive for most
interpreted text roles.  A description__ is provided in the `"role"
directive`_ documentation.

__ directives.html#role-class


===================================================
 Standard Roles
===================================================


abbreviation:
==================

:Aliases: ``:ab:``
:DTD Element: abbreviation_
:Customization:
    :Options: class_.
    :Content: None.

An abbreviation used in the document.
An example of an abbreviation is ‘St’ being used instead of ‘Street’.


acronym:
==================

:Aliases: ``:ac:``
:DTD Element: acronym_
:Customization:
    :Options: class_.
    :Content: None.

An acronym.


code:
==========

:Aliases: None
:DTD Element: literal_
:Customization:
    :Options: class_, language
    :Content: None.

(New in Docutils 0.9.)

The ``code`` role marks its content as code in a formal language.

For syntax highlight of inline code, the `"role" directive`_ can be used to
build custom roles with the code language specified in the "language"
option.

For example, the following creates a LaTeX-specific "latex" role::

  .. role:: latex(code)
     :language: latex

Content of the new role is parsed and tagged by the Pygments_ syntax
highlighter. See the `code directive`_ for more info on parsing and display
of code in reStructuredText.

In addition to "class_", the following option is recognized:

``language`` : text
    Name of the code's language.
    See `supported languages and markup formats`_ for recognized values.

.. _code directive: directives.html#code
.. .. _Pygments: https://pygments.org/
.. _supported languages and markup formats: https://pygments.org/languages/


emphasis:
==============

:Aliases: None
:DTD Element: emphasis_
:Customization:
    :Options: class_.
    :Content: None.

Implements emphasis.  These are equivalent::

    *text*
    :emphasis:`text`


literal:
==============

:Aliases: None
:DTD Element: literal_
:Customization:
    :Options: class_.
    :Content: None.

Implements inline literal text.  These are equivalent::

    ``text``
    :literal:`text`

Care must be taken with backslash-escapes though.  These are *not*
equivalent::

    ``text \ and \ backslashes``
    :literal:`text \ and \ backslashes`

The backslashes in the first line are preserved (and do nothing),
whereas the backslashes in the second line escape the following
spaces.


math:
==========

:Aliases: None
:DTD Element: math_
:Customization:
    :Options: class_
    :Content: None.

(New in Docutils 0.8.)

The ``math`` role marks its content as mathematical notation (inline
formula).

The input format is LaTeX math syntax without the “math delimiters“
(``$ $``), for example::

  The area of a circle is :math:`A_\text{c} = (\pi/4) d^2`.

See the `math directive`_ (producing display formulas) for more info
on mathematical notation in reStructuredText.

.. _math directive: directives.html#math


pep-reference:
===================

:Aliases: ``:PEP:``
:DTD Element: reference_
:Customization:
    :Options: class_.
    :Content: None.

The ``:pep-reference:`` role is used to create an HTTP reference to a
PEP (Python Enhancement Proposal).  The ``:PEP:`` alias is usually
used.  The content must be a number, for example::

    See :PEP:`287` for more information about reStructuredText.

This is equivalent to::

    See `PEP 287`__ for more information about reStructuredText.

    __ https://peps.python.org/pep-0287


rfc-reference:
===================

:Aliases: ``:RFC:``
:DTD Element: reference_
:Customization:
    :Options: class_.
    :Content: None.

The ``:rfc-reference:`` role is used to create an HTTP reference to an
RFC (Internet Request for Comments).  The ``:RFC:`` alias is usually
used.  The content must be a number [#]_, for example::

    See :RFC:`2822` for information about email headers.

This is equivalent to::

    See `RFC 2822`__ for information about email headers.

    __ https://tools.ietf.org/html/rfc2822.html

.. [#] You can link to a specific section by saying
   ``:rfc:`number#anchor```. (New in Docutils 0.15.)

   .. Warning:: The anchor (anything following a ``#``) is appended to
      the reference without any checks and not shown in the link text.

      It is recommended to use `hyperlink references`_ for
      anything more complex than a single RFC number.

.. _hyperlink references: restructuredtext.html#hyperlink-references


strong:
============

:Aliases: None
:DTD Element: strong_
:Customization:
    :Options: class_.
    :Content: None.

Implements strong emphasis.  These are equivalent::

    **text**
    :strong:`text`


subscript:
===============

:Aliases: ``:sub:``
:DTD Element: subscript_
:Customization:
    :Options: class_.
    :Content: None.

Implements subscripts.

.. Tip::

   Whitespace or punctuation is required around interpreted text, but
   often not desired with subscripts & superscripts.
   Backslash-escaped whitespace can be used; the whitespace will be
   removed from the processed document::

       H\ :sub:`2`\ O
       E = mc\ :sup:`2`

   In such cases, readability of the plain text can be greatly
   improved with substitutions::

       The chemical formula for pure water is |H2O|.

       .. |H2O| replace:: H\ :sub:`2`\ O

   See `the reStructuredText spec`__ for further information on
   `character-level markup`__ and `the substitution mechanism`__.

   __ restructuredtext.html
   __ restructuredtext.html#character-level-inline-markup
   __ restructuredtext.html#substitution-references


superscript:
=================

:Aliases: ``:sup:``
:DTD Element: superscript_
:Customization:
    :Options: class_.
    :Content: None.

Implements superscripts.  See the tip in `:subscript:`_ above.


title-reference:
=====================

:Aliases: ``:title:``, ``:t:``.
:DTD Element: title_reference_
:Customization:
    :Options: class_.
    :Content: None.

The ``:title-reference:`` role is used to describe the titles of
books, periodicals, and other materials.  It is the equivalent of the
HTML "cite" element, and it is expected that HTML writers will
typically render "title_reference" elements using "cite".

Since title references are typically rendered with italics, they are
often marked up using ``*emphasis*``, which is misleading and vague.
The "title_reference" element provides accurate and unambiguous
descriptive markup.

Let's assume ``:title-reference:`` is the default interpreted text
role (see below) for this example::

    `Design Patterns` [GoF95]_ is an excellent read.

The following document fragment (pseudo-XML_) will result from
processing::

    <paragraph>
        <title_reference>
            Design Patterns

        <citation_reference refname="gof95">
            GoF95
         is an excellent read.

``:title-reference:`` is the default interpreted text role in the
standard reStructuredText parser.  This means that no explicit role is
required.  Applications of reStructuredText may designate a different
default role, in which case the explicit ``:title-reference:`` role
must be used to obtain a ``title_reference`` element.


.. _pseudo-XML: ../doctree.html#pseudo-xml


===================================================
 Specialized Roles
===================================================

raw
=======

:Aliases: None
:DTD Element: raw_
:Customization:
    :Options: class_, format
    :Content: None

.. WARNING::

   The "raw" role is a stop-gap measure allowing the author to bypass
   reStructuredText's markup.  It is a "power-user" feature that
   should not be overused or abused.  The use of "raw" ties documents
   to specific output formats and makes them less portable.

   If you often need to use "raw"-derived interpreted text roles or
   the "raw" directive, that is a sign either of overuse/abuse or that
   functionality may be missing from reStructuredText.  Please
   describe your situation in a message to the Docutils-users_ mailing
   list.

   .. _Docutils-users: ../../user/mailing-lists.html#docutils-user

The "raw" role indicates non-reStructuredText data that is to be
passed untouched to the Writer.  It is the inline equivalent of the
`"raw" directive`_; see its documentation for details on the
semantics.

.. _"raw" directive: directives.html#raw-directive

The "raw" role cannot be used directly.  The `"role" directive`_ must
first be used to build custom roles based on the "raw" role.  One or
more formats (Writer names) must be provided in a "format" option.

For example, the following creates an HTML-specific "raw-html" role::

    .. role:: raw-html(raw)
       :format: html

This role can now be used directly to pass data untouched to the HTML
Writer.  For example::

    If there just *has* to be a line break here,
    :raw-html:`<br />`
    it can be accomplished with a "raw"-derived role.
    But the line block syntax should be considered first.

.. Tip:: Roles based on "raw" should clearly indicate their origin, so
   they are not mistaken for reStructuredText markup.  Using a "raw-"
   prefix for role names is recommended.

In addition to "class_", the following option is recognized:

``format`` : text
    One or more space-separated output format names (Writer names).


.. References

.. _abbreviation: ../doctree.html#abbreviation
.. _acronym: ../doctree.html#acronym
.. _emphasis: ../doctree.html#emphasis
.. _literal: ../doctree.html#literal
.. _math: ../doctree.html#math
.. _reference: ../doctree.html#reference
.. _strong: ../doctree.html#strong
.. _subscript: ../doctree.html#subscript
.. _superscript: ../doctree.html#superscript
.. _title_reference: ../doctree.html#title-reference


/Part 2. 015.📜 docutils-0.20.1/docs/user/tools.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

==========================
 Docutils Front-End Tools
==========================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9370 $
:Date: $Date: 2023-05-03 13:01:03 +0200 (Mi, 03. Mai 2023) $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents

===================================================
 Introduction
===================================================

In addition to the `generic command line front end`_, Docutils installs
several small front ends, each specialized for a specific "Reader" (which
knows how to interpret a file in context), a "Parser" (which
understands the syntax of the text), and a "Writer" (which knows how
to generate a specific data format).

Most [#]_ front ends have common options and the same command-line usage
pattern::

    <toolname> [options] [<source> [<destination>]]

See `the tools`_ below for concrete examples.

Each tool has a "``--help``" option which lists the
`command-line options`_ and arguments it supports.
Processing can also be customized with `configuration files`_.

The two arguments, "source" and "destination", are optional.  If only
one argument (source) is specified, the standard output (stdout) is
used for the destination.  If no arguments are specified, the standard
input (stdin) is used for the source.

.. [#] The exceptions are buildhtml.py_ and rst2odt_prepstyles.py_.

.. note::
   Docutils front-end tool names, install details and the set of
   auto-installed tools will change in Docutils 0.21.

   The command line usage pattern will change over the next releases.

   See `Future changes`_ in the RELEASE-NOTES.

.. _future changes: ../../RELEASE-NOTES.html#future-changes


Getting Help
============

First, try the "``--help``" option each front-end tool has.

Command line options and their corresponding configuration file entries
are detailed in `Docutils Configuration`_.

Users who have questions or need assistance with Docutils or
reStructuredText should post a message to the Docutils-users_ mailing
list.

.. _Docutils-users: mailing-lists.html#docutils-users


===================================================
 The Tools
===================================================

Generic Command Line Front End
==============================

:CLI name: ``docutils``
:Readers:  Standalone (default), PEP
:Parsers:  reStructuredText (default), Markdown (requires 3rd party packages)
:Writers:  html_, html4css1_, html5_ (default), latex2e_, manpage_,
           odt_, pep_html_, pseudo-xml_, s5_html_, xelatex_, xml_,
:Config_:  `[docutils application]`_

Since Docutils 0.19, you can start the generic front end like::

    docutils test.rst test.html

Alternatively, use Python's ``-m`` option, or the ``docutils-cli.py``
script in the ``tools/`` directory.

The generic front end allows combining "reader", "parser", and
"writer" components from the Docutils package or 3rd party plug-ins.
For example, to process a Markdown_ file "``test.md``" into
Pseudo-XML_::

    docutils --parser=markdown --writer=pseudoxml test.md test.txt

Use the "--help" option together with the component-selection options
to get the correct list of supported command-line options. Example::

    docutils --parser=markdown --writer=xml --help

.. _Markdown: https://www.markdownguide.org/
.. _[docutils application]: config.html#docutils-application


HTML-Generating Tools
=====================

.. _rst2html:

rst2html.py
-----------

:Reader: Standalone
:Parser: reStructuredText
:Writer: html_

`rst2html.py` is the front-end for the default Docutils HTML writer.
The default writer may change with the development of HTML, browsers,
Docutils, and the web.
The current default is html4css1_, it will change to html5_ in Docutils 2.0.

.. caution::
   Use a specific front end like rst2html4.py_ or rst2html5.py_,
   if you depend on stability of the generated HTML code
   (e.g., because you use a custom style sheet or post-processing
   that may break otherwise).

.. _html: html.html#html


.. _rst2html4:

rst2html4.py
------------

:Reader: Standalone
:Parser: reStructuredText
:Writer: html4css1_

The ``rst2html4.py`` front end reads standalone reStructuredText source
files and produces `XHTML 1.0 Transitional`_ output.
A CSS stylesheet is required for proper rendering; a simple but
complete stylesheet is installed and used by default (see Stylesheets_
below).

For example, to process a reStructuredText file "``test.txt``" into
HTML::

    rst2html.py test.txt test.html

Now open the "``test.html``" file in your favorite browser to see the
results.  To get a footer with a link to the source file, date & time
of processing, and links to the Docutils project, add some options::

    rst2html.py -stg test.txt test.html


Stylesheets
~~~~~~~~~~~~~~~~~~

``rst2html.py`` inserts into the generated HTML a cascading stylesheet
(or a link to a stylesheet, when passing the "``--link-stylesheet``"
option).  A stylesheet is required for proper rendering.
The default stylesheet (``docutils/writers/html4css1/html4css1.css``,
located in the installation directory) is provided for basic use.

To use different stylesheet(s), specify the stylesheets' location(s) as
comma-separated list with the "`-\-stylesheet`_"
or "`-\-stylesheet-path`_" options.
To experiment with styles, please see the
`guide to writing HTML (CSS) stylesheets for Docutils`__.

.. _XHTML 1.0 Transitional: https://www.w3.org/TR/xhtml1/
.. _html4css1: html.html#html4css1
.. _link-stylesheet: config.html#embed-stylesheet
.. _--stylesheet: config.html#stylesheet
.. _--stylesheet-path: config.html#stylesheet-path
__ ../howto/html-stylesheets.html


.. _rst2html5:

rst2html5.py
------------

:Reader: Standalone
:Parser: reStructuredText
:Writer: html5_

The ``rst2html5.py`` front end reads standalone reStructuredText source
files and produces `HTML 5`_ output.
Correct rendering of elements not directly supported by HTML depends on a
CSS style sheet. The provided style sheets ``minimal.css`` and ``plain.css``
define required and optional styling rules respectively.

.. _html5: html.html#html5
.. _HTML 5: https://www.w3.org/TR/html5/


rstpep2html.py
--------------

:Reader: PEP
:Parser: reStructuredText
:Writer: pep_html_

``rstpep2html.py`` reads a new-style PEP (marked up with reStructuredText)
and produces `XHTML 1.0 Transitional`_.  It requires a template file and a
stylesheet.  By default, it makes use of a "``pep-html-template``" file and
the "``pep.css``" stylesheet (both in the ``docutils/writers/pep_html/``
directory), but these can be overridden by command-line options or
configuration files.

For example, to process a PEP into HTML::

    cd <path-to-docutils>/docs/peps
    ../../tools/rstpep2html.py pep-0287.txt pep-0287.html

The same result can be achieved with the genric front end::

    docutils --reader=pep --writer=pep_html pep-0287.txt pep-0287.html

The rendering of published PEPs is done by a Sphinx-based build system
(see :PEP:`676`).

.. _pep_html: html.html#pep-html


rst2s5.py
---------

:Reader: Standalone
:Parser: reStructuredText
:Writer: s5_html_

The ``rst2s5.py`` front end reads standalone reStructuredText source
files and produces (X)HTML output compatible with S5_, the "Simple
Standards-based Slide Show System" by Eric Meyer.  A theme is required
for proper rendering; several are distributed with Docutils and others
are available; see Themes_ below.

For example, to process a reStructuredText file "``slides.txt``" into
S5/HTML::

    rst2s5.py slides.txt slides.html

Now open the "``slides.html``" file in your favorite browser, switch
to full-screen mode, and enjoy the results.

.. _S5: http://meyerweb.com/eric/tools/s5/
.. _s5_html: html.html#s5-html

Themes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each S5 theme consists of a directory containing several files:
stylesheets, JavaScript, and graphics.  These are copied into a
``ui/<theme>`` directory beside the generated HTML.  A theme is chosen
using the "``--theme``" option (for themes that come with Docutils) or
the "``--theme-url``" option (for themes anywhere).  For example, the
"medium-black" theme can be specified as follows::

    rst2s5.py --theme medium-black slides.txt slides.html

The theme will be copied to the ``ui/medium-black`` directory.

Several themes are included with Docutils:

``default``
    This is a simplified version of S5's default theme.

    :Main content: black serif text on a white background
    :Text capacity: about 13 lines
    :Headers: light blue, bold sans-serif text on a dark blue
              background; titles are limited to one line
    :Footers: small, gray, bold sans-serif text on a dark blue
              background

``small-white``
    (Small text on a white background.)

    :Main content: black serif text on a white background
    :Text capacity: about 15 lines
    :Headers: black, bold sans-serif text on a white background;
              titles wrap
    :Footers: small, dark gray, bold sans-serif text on a white
              background

``small-black``
    :Main content: white serif text on a black background
    :Text capacity: about 15 lines
    :Headers: white, bold sans-serif text on a black background;
              titles wrap
    :Footers: small, light gray, bold sans-serif text on a black
              background

``medium-white``
    :Main content: black serif text on a white background
    :Text capacity: about 9 lines
    :Headers: black, bold sans-serif text on a white background;
              titles wrap
    :Footers: small, dark gray, bold sans-serif text on a white
              background

``medium-black``
    :Main content: white serif text on a black background
    :Text capacity: about 9 lines
    :Headers: white, bold sans-serif text on a black background;
              titles wrap
    :Footers: small, light gray, bold sans-serif text on a black
              background

``big-white``
    :Main content: black, bold sans-serif text on a white background
    :Text capacity: about 5 lines
    :Headers: black, bold sans-serif text on a white background;
              titles wrap
    :Footers: not displayed

``big-black``
    :Main content: white, bold sans-serif text on a black background
    :Text capacity: about 5 lines
    :Headers: white, bold sans-serif text on a black background;
              titles wrap
    :Footers: not displayed

If a theme directory contains a file named ``__base__``, the name of
the theme's base theme will be read from it.  Files are accumulated
from the named theme, any base themes, and the "default" theme (which
is the implicit base of all themes).

For details, please see `Easy Slide Shows With reStructuredText &
S5 <slide-shows.html>`_.


buildhtml.py
------------

:Readers: Standalone, PEP
:Parser:  reStructuredText
:Writers: html_, html5_, pep_html_
:Config_: `[buildhtml application]`_

The ``buildhtml.py`` script can be found in the ``/tools`` directory of
the "docutils" source. It is not included in binary packages. [#]_

Use ``buildhtml.py`` to generate ``*.html`` from all the ``*.txt`` files
(including PEPs) in each <directory> given, and their subdirectories
too.  (Use the ``--local`` option to skip subdirectories.)

Usage::

    buildhtml.py [options] [<directory> ...]

After unpacking the Docutils source package, the following shell commands
will generate HTML for all included documentation::

    cd docutils/tools
    buildhtml.py ..

For official releases, the directory may be called "docutils-X.Y",
where "X.Y" is the release version.  Alternatively::

    cd docutils
    tools/buildhtml.py --config=tools/docutils.conf

The current directory (and all subdirectories) is chosen by default if
no directory is named.  Some files may generate system messages
(docs/user/rst/demo.txt contains intentional errors); use the
``--quiet`` option to suppress all warnings.  The ``--config`` option
ensures that the correct settings are in place (a ``docutils.conf``
`configuration file`_ in the current directory is picked up
automatically).  Command-line options may be used to override config
file settings or replace them altogether.

.. [#] The Debian package "python3-docutils" includes the script
   under the name ``rst-builthtml``.

.. _[buildhtml application]: config.html#buildhtml-application
.. _configuration file: `configuration files`_


LaTeX-Generating Tools
======================

rst2latex.py
------------

:Reader: Standalone
:Parser: reStructuredText
:Writer: latex2e_

The ``rst2latex.py`` front end reads standalone reStructuredText
source files and produces LaTeX_ output. For example, to process a
reStructuredText file "``test.txt``" into LaTeX::

    rst2latex.py test.txt test.tex

The output file "``test.tex``" should then be processed with ``latex``
or ``pdflatex`` to get a document in DVI, PostScript or PDF format for
printing or on-screen viewing.

For details see `Generating LaTeX with Docutils`_.

.. _latex2e:
.. _Generating LaTeX with Docutils: latex.html


rst2xetex.py
------------

:Reader: Standalone
:Parser: reStructuredText
:Writer: _`xelatex`

The ``rst2xetex.py`` front end reads standalone reStructuredText source
files and produces `LaTeX` output for processing with Unicode-aware
TeX engines (`LuaTeX`_ or `XeTeX`_). For example, to process a
reStructuredText file "``test.txt``" into LaTeX::

    rst2xetex.py test.txt test.tex

The output file "``test.tex``" should then be processed with ``xelatex`` or
``lualatex`` to get a document in PDF format for printing or on-screen
viewing.

For details see `Generating LaTeX with Docutils`_.

.. _LaTeX: https://en.wikipedia.org/wiki/LaTeX
.. _XeTeX: https://en.wikipedia.org/wiki/XeTeX
.. _LuaTeX: https://en.wikipedia.org/wiki/LuaTeX


Man-Page-Generating Tools
=========================

rst2man.py
----------

:Reader: Standalone
:Parser: reStructuredText
:Writer: manpage_

The ``rst2man.py`` front end reads standalone reStructuredText source
files and produces troff_ sources for Unix man pages.

.. _manpage: manpage.html
.. _troff: https://troff.org/


OpenDocument-Generating Tools
=============================

rst2odt.py
----------

:Reader: Standalone
:Parser: reStructuredText
:Writer: odt_

The ``rst2odt.py`` front end reads standalone reStructuredText
source files and produces ODF/.odt files that can be read, edited,
printed, etc with OpenOffice_ ``oowriter`` or LibreOffice_ ``lowriter``.
A stylesheet file is required.  A
stylesheet file is an OpenOffice .odt file containing definitions
of the styles required for ``rst2odt.py``.
For details, see `Odt Writer for Docutils`_.

.. _OpenOffice: https://www.openoffice.org/
.. _LibreOffice: https://www.libreoffice.org/
.. _odt:
.. _Odt Writer for Docutils: odt.html

rst2odt_prepstyles.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A helper tool to prepare a word-processor-generated STYLE_FILE.odt for
use with the "odt" writer: [#]_ ::

  rst2odt_prepstyles.py STYLE_FILE.odt

See `Odt Writer for Docutils`__ for details.

.. [#] The call pattern will change in Docutils 0.20, see
       `Future changes`_ in the RELEASE-NOTES.

__ odt.html#page-size


reStructuredText-Generating Tools
=================================

Currently, there is no reStructuredText writer in Docutils and therefore
an ``rst2rst.py`` tool is still missing.

To generate reStructuredText documents with Docutils, you can use
the XML (Docutils native) writer and the xml2rst_ processor.


XML-Generating Tools
====================

rst2xml.py
----------

:Reader: Standalone
:Parser: reStructuredText
:Writer: _`XML` (Docutils native)

The ``rst2xml.py`` front end produces Docutils-native XML output.
This can be transformed with standard XML tools such as XSLT
processors into arbitrary final forms. An example is the xml2rst_ processor
in the Docutils sandbox.

.. _xml2rst: ../../../sandbox/xml2rst


Testing/Debugging Tools
=======================

rst2pseudoxml.py
----------------

:Reader: Standalone
:Parser: reStructuredText
:Writer: _`Pseudo-XML`

``rst2pseudoxml.py`` is used for debugging the Docutils "Reader to
Transform to Writer" pipeline.  It produces a compact pretty-printed
"pseudo-XML", where nesting is indicated by indentation (no end-tags).
External attributes for all elements are output, and internal
attributes for any leftover "pending" elements are also given.


===================================================
 Customization
===================================================

Most front-end tools support the options/settings from the generic
`configuration file sections`_ plus the sections of their components
(reader, writer, parser). [#]_
Some front-end tools also add application-specific settings.

.. [#] The exception is rst2odt_prepstyles.py_.


Command-Line Options
====================

Command-line options are intended for one-off customization.
They take priority over configuration file settings.

Use the "--help" option on each of the front ends to list the
command-line options it supports.


Configuration Files
===================

Configuration files are used for persistent customization; they can be
set once and take effect every time you use a front-end tool.

Command-line options and their corresponding configuration file entry
names are listed in the `Docutils Configuration`_ document.

.. _Docutils Configuration: config.html
.. _Config:
.. _configuration file sections:
   config.html#configuration-file-sections-entries



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 2. 016.📜 docutils command-line

.. code-block::

Docutils Usage
=============
  docutils [options] [<source> [<destination>]]

Convert documents into useful formats.  Reads from <source> (default is stdin)
and writes to <destination> (default is stdout).  See
https://docutils.sourceforge.io/docs/user/config.html for a detailed settings
reference.

Docutils Options
================
General Docutils Options
------------------------
--output=<destination>  Output destination name. Obsoletes the <destination>
                        positional argument. Default: None (stdout).
--title=<title>         Specify the document title as metadata.
--generator, -g         Include a "Generated by Docutils" credit and link.
--no-generator          Do not include a generator credit.
--date, -d              Include the date at the end of the document (UTC).
--time, -t              Include the time & date (UTC).
--no-datestamp          Do not include a datestamp of any kind.
--source-link, -s       Include a "View document source" link.
--source-url=<URL>      Use <URL> for a source link; implies --source-link.
--no-source-link        Do not include a "View document source" link.
--toc-entry-backlinks   Link from section headers to TOC entries.  (default)
--toc-top-backlinks     Link from section headers to the top of the TOC.
--no-toc-backlinks      Disable backlinks to the table of contents.
--footnote-backlinks    Link from footnotes/citations to references. (default)
--no-footnote-backlinks
                        Disable backlinks from footnotes and citations.
--section-numbering     Enable section numbering by Docutils.  (default)
--no-section-numbering  Disable section numbering by Docutils.
--strip-comments        Remove comment elements from the document tree.
--leave-comments        Leave comment elements in the document tree. (default)
--strip-elements-with-class=<class>
                        Remove all elements with classes="<class>" from the
                        document tree. Warning: potentially dangerous; use
                        with caution. (Multiple-use option.)
--strip-class=<class>   Remove all classes="<class>" attributes from elements
                        in the document tree. Warning: potentially dangerous;
                        use with caution. (Multiple-use option.)
--report=<level>, -r <level>
                        Report system messages at or higher than <level>:
                        "info" or "1", "warning"/"2" (default), "error"/"3",
                        "severe"/"4", "none"/"5"
--verbose, -v           Report all system messages.  (Same as "--report=1".)
--quiet, -q             Report no system messages.  (Same as "--report=5".)
--halt=<level>          Halt execution at system messages at or above <level>.
                        Levels as in --report.  Default: 4 (severe).
--strict                Halt at the slightest problem.  Same as "--halt=info".
--exit-status=<level>   Enable a non-zero exit status for non-halting system
                        messages at or above <level>.  Default: 5 (disabled).
--debug                 Enable debug-level system messages and diagnostics.
--no-debug              Disable debug output.  (default)
--warnings=<file>       Send the output of system messages to <file>.
--traceback             Enable Python tracebacks when Docutils is halted.
--no-traceback          Disable Python tracebacks.  (default)
--input-encoding=<name[:handler]>, -i <name[:handler]>
                        Specify the encoding and optionally the error handler
                        of input text.  Default: <auto-detect>:strict.
--input-encoding-error-handler=INPUT_ENCODING_ERROR_HANDLER
                        Specify the error handler for undecodable characters.
                        Choices: "strict" (default), "ignore", and "replace".
--output-encoding=<name[:handler]>, -o <name[:handler]>
                        Specify the text encoding and optionally the error
                        handler for output.  Default: utf-8:strict.
--output-encoding-error-handler=OUTPUT_ENCODING_ERROR_HANDLER
                        Specify error handler for unencodable output
                        characters; "strict" (default), "ignore", "replace",
                        "xmlcharrefreplace", "backslashreplace".
--error-encoding=<name[:handler]>, -e <name[:handler]>
                        Specify text encoding and optionally error handler for
                        error output.  Default: utf-8:backslashreplace.
--error-encoding-error-handler=ERROR_ENCODING_ERROR_HANDLER
                        Specify the error handler for unencodable characters
                        in error output.  Default: backslashreplace.
--language=<name>, -l <name>
                        Specify the language (as BCP 47 language tag).
                        Default: en.
--record-dependencies=<file>
                        Write output file dependencies to <file>.
--config=<file>         Read configuration settings from <file>, if it exists.
--version, -V           Show this program's version number and exit.
--help, -h              Show this help message and exit.

Generic Parser Options
----------------------
--no-file-insertion     Disable directives that insert the contents of an
                        external file; replaced with a "warning" system
                        message.
--file-insertion-enabled
                        Enable directives that insert the contents of an
                        external file. (default)
--no-raw                Disable the "raw" directive; replaced with a "warning"
                        system message.
--raw-enabled           Enable the "raw" directive. (default)
--line-length-limit=<length>
                        Maximal number of characters in an input line. Default
                        10 000.

reStructuredText Parser Options
-------------------------------
--pep-references        Recognize and link to standalone PEP references (like
                        "PEP 258").
--pep-base-url=<URL>    Base URL for PEP references (default
                        "https://peps.python.org/").
--pep-file-url-template=<URL>
                        Template for PEP file part of URL. (default
                        "pep-%04d")
--rfc-references        Recognize and link to standalone RFC references (like
                        "RFC 822").
--rfc-base-url=<URL>    Base URL for RFC references (default
                        "https://tools.ietf.org/html/").
--tab-width=<width>     Set number of spaces for tab expansion (default 8).
--trim-footnote-reference-space
                        Remove spaces before footnote references.
--leave-footnote-reference-space
                        Leave spaces before footnote references.
--syntax-highlight=<format>
                        Token name set for parsing code with Pygments: one of
                        "long", "short", or "none" (no parsing). Default is
                        "long".
--smart-quotes=<yes/no/alt>
                        Change straight quotation marks to typographic form:
                        one of "yes", "no", "alt[ernative]" (default "no").
--smartquotes-locales=<language:quotes[,language:quotes,...]>
                        Characters to use as "smart quotes" for <language>.
--word-level-inline-markup
                        Inline markup recognized at word boundaries only
                        (adjacent to punctuation or whitespace). Force
                        character-level inline markup recognition with "\ "
                        (backslash + space). Default.
--character-level-inline-markup
                        Inline markup recognized anywhere, regardless of
                        surrounding characters. Backslash-escapes must be used
                        to avoid unwanted markup recognition. Useful for East
                        Asian languages. Experimental.

Standalone Reader Options
-------------------------
--no-doc-title          Disable the promotion of a lone top-level section
                        title to document title (and subsequent section title
                        to document subtitle promotion; enabled by default).
--no-doc-info           Disable the bibliographic field list transform
                        (enabled by default).
--section-subtitles     Activate the promotion of lone subsection titles to
                        section subtitles (disabled by default).
--no-section-subtitles  Deactivate the promotion of lone subsection titles.

HTML Writer Options
-------------------
--template=<file>       Template file. (UTF-8 encoded, default:
                        "C:\Python310\tutorial-env\lib\site-packages\docutils\
                        writers\html5_polyglot\template.txt")
--stylesheet=<URL[,URL,...]>
                        Comma separated list of stylesheet URLs. Overrides
                        previous --stylesheet and --stylesheet-path settings.
--stylesheet-path=<file[,file,...]>
                        Comma separated list of stylesheet paths. Relative
                        paths are expanded if a matching file is found in the
                        --stylesheet-dirs. With --link-stylesheet, the path is
                        rewritten relative to the output HTML file. (default:
                        "minimal.css,plain.css")
--stylesheet-dirs=<dir[,dir,...]>
                        Comma-separated list of directories where stylesheets
                        are found. Used by --stylesheet-path when expanding
                        relative path arguments. (default:
                        ".,C:\Python310\tutorial-env\lib\site-
                        packages\docutils\writers\html5_polyglot")
--embed-stylesheet      Embed the stylesheet(s) in the output HTML file.  The
                        stylesheet files must be accessible during processing.
                        (default)
--link-stylesheet       Link to the stylesheet(s) in the output HTML file.
--initial-header-level=<level>
                        Specify the initial header level. Does not affect
                        document title & subtitle (see --no-doc-title).
                        (default: 2 for "<h2>")
--footnote-references=<format>
                        Format for footnote references: one of "superscript"
                        or "brackets". (default: "brackets")
--attribution=<format>  Format for block quote attributions: one of "dash"
                        (em-dash prefix), "parentheses"/"parens", or "none".
                        (default: "dash")
--compact-lists         Remove extra vertical whitespace between items of
                        "simple" bullet lists and enumerated lists. (default)
--no-compact-lists      Disable compact simple bullet and enumerated lists.
--compact-field-lists   Remove extra vertical whitespace between items of
                        simple field lists. (default)
--no-compact-field-lists
                        Disable compact simple field lists.
--table-style=TABLE_STYLE
                        Added to standard table classes. Defined styles:
                        borderless, booktabs, align-left, align-center, align-
                        right, colwidths-auto, colwidths-grid.
--math-output=MATH_OUTPUT
                        Math output format (one of "MathML", "HTML",
                        "MathJax", or "LaTeX") and option(s). (default: "HTML
                        math.css")
--xml-declaration       Prepend an XML declaration.
--no-xml-declaration    Omit the XML declaration.
--cloak-email-addresses
                        Obfuscate email addresses to confuse harvesters while
                        still keeping email links usable with standards-
                        compliant browsers.

HTML5 Writer Options
--------------------
--image-loading=IMAGE_LOADING
                        Suggest at which point images should be loaded:
                        "embed", "link" (default), or "lazy".
--section-self-link     Append a self-link to section headings.
--no-section-self-link  Do not append a self-link to section headings.
                        (default)

Docutils Application Options
----------------------------
Reader, writer, and parser settings influence the available options.
Example: use `--help --writer=latex` to see LaTeX writer options.

--reader=<reader>       Reader name (currently: "standalone").
--parser=<parser>       Parser name (currently: "rst").
--writer=<writer>       Writer name (currently: "html5").



/Part 2. 017.📜 docutils-0.20.1/docs/user/slide-shows.txt

.. include:: /dl/pl/docutils-0.20.1/docutils/parsers/rst/include/s5defs.txt

=================================
 Easy Slide Shows With reST & S5
=================================

:Authors: David Goodger & Chris Liechti
:Date:    $Date: 2022-06-15 13:31:09 +0200 (Mi, 15. Jun 2022) $

.. This document has been placed in the public domain.

.. container:: handout

   How to create quick, good-looking presentation slide shows with
   Docutils_/reStructuredText_ and S5_.

   This document serves both as a user manual and as a usage example
   of the s5_html.py writer and the rst2s5.py front end.

   To view this document as a slide show see
   https://docutils.sourceforge.io/docs/user/slide-shows.s5.html (or `your
   local copy <slide-shows.s5.html>`__).

.. .. contents:: Table of Contents
   :class: handout

.. class:: tiny

* S5 themes are designed for full-screen display areas with a 4:3
  aspect ratio.  If the slide text doesn't fit in your browser window,
  try decreasing the text size.

* Use the space bar to advance, Page Up/Down & arrow keys to navigate.

* Best viewed in Firefox_, Safari, and Konqueror.  Click the "|mode|"
  button to switch between presentation & handout/outline modes.  Hit
  the "C" key to display the navigation controls, or mouse over the
  lower right-hand corner.

* Functionality is limited in Opera.  Switch to full-screen mode (F11
  key) to activate Opera Show.

* S5 works in Internet Explorer, but it may look ugly.

.. container:: handout

   The first slide of a presentation consists of all visible text up
   to the first section title.  The document title is also added to
   the footer of all slides.

   The "footer" directive is used to specify part of the slide footer
   text.  It is currently limited to one short line (one paragraph).

   There is no support for the "header" directive in the themes
   included with Docutils.

.. _Docutils: https://docutils.sourceforge.io/
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _S5: http://meyerweb.com/eric/tools/s5/
.. _Firefox: http://www.mozilla.com/firefox/
.. |bullet| unicode:: U+02022
.. |mode| unicode:: U+00D8 .. capital o with stroke

.. footer:: Location |bullet| Date


Introduction
============

.. class:: handout

   ``rst2s5.py`` is a Docutils_ front end that outputs HTML for use
   with S5_, a "Simple Standards-based Slide Show System" by Eric
   Meyer.

.. topic:: Installation
   :class: handout

   Prerequisites: Python and the Docutils_ package have to be
   installed.  See the `Docutils README`__ file for installation
   instructions.

   __ https://docutils.sourceforge.io/README.html

* reStructuredText

  .. class:: handout

  Uses normal reStructuredText as input.

* One section per slide

  .. class:: handout

  Each first-level section is converted into a single slide.

* XHTML output

  .. container:: handout

     Presentations can be viewed using most modern graphical web
     browsers.  The browser must support CSS, JavaScript, and XHTML.
     S5 even works with IE!

     S5 was designed to add the functionality of the `Opera Show`_
     standard (without Opera Show's limitations) to non-Opera
     browsers.  Unfortunately, most of S5's CSS and JavaScript
     extensions don't function in the Opera browser.

  .. _Opera Show: http://www.opera.com/support/tutorials/operashow/

* Themes

  .. class:: handout

  A variety of themes are available.  See `Example Themes`_, below.

* ``rst2s5.py``

  .. class:: handout

  The front-end tool to generate S5 slide shows.

.. topic:: Keyboard Controls
   :class: handout

   The following apply in any supporting browser besides Opera, which
   uses the default Opera Show controls instead.

   .. list-table::
      :header-rows: 1

      * - Action
        - Key(s)
      * - Go to the next slide
        - * [Space bar]
          * [Return]
          * [Enter]
          * [Right arrow]
          * [Down arrow]
          * [Page down]
          * Click the left mouse button outside of the control area,
            Flash object, or movie
      * - Go to the previous slide
        - * [Left arrow]
          * [Up arrow]
          * [Page up]
      * - Go to the title (first) slide
        - [Home]
      * - Go to the last slide
        - [End]
      * - Jump directly to a slide
        - Type the slide number, then hit [Return] or [Enter]
      * - Skip forward *n* slides
        - Type the number of slides to skip, then hit any "go to next"
          key (except [Return] or [Enter])
      * - Skip backward *n* slides
        - Type the number of slides to skip, then hit any "go to
          previous" key
      * - Switch between slideshow and outline view
        - * [T]
          * Click the |mode| button
      * - Show/hide slide controls
        - * [C]
          * Move the mouse pointer over the control area

   Further details of the S5 user interface can be found at `Eric
   Meyer's S5 page`__.

   __ S5_


Features (1)
============

.. container:: handout

   The S5/HTML Writer supports all the standard Docutils HTML
   features.  S5 has been released to the Public Domain.

S5-specific features:

.. class:: incremental

* The document title is duplicated on each slide in the S5 footer.

* The ``footer`` directive may be used to define additional text in
  the S5 footer.

  .. container:: handout

     But it is limited to one line of text.

     This is useful for information such as the date of the
     presentation and/or the location.  The field in the footer is
     left blank if no ``footer`` directive is used.

     Example::

         .. footer:: Location - Date

     There is also a progress indicator (slide counter) in the footer
     that can be enabled.  It's disabled by default.

* Incremental display.

  .. class:: handout

  An "incremental" class can be assigned to lists and other elements
  to get one-item-at-a-time behavior (like this list).  Incremental
  display does not work in the Opera browser.

* Text auto-scaling.

  .. class:: handout

  The text size adjusts relative to the size of your browser window
  automatically.  You may need to reload the document after resizing
  the window.  The browser and platform affect the font used; be sure
  to test the slide show on the presentation system.


Features (2): Handouts
======================

.. container:: handout

   The contents of any element with a "class" attribute value of
   "handout" are hidden in the slide presentation, and are only
   visible when the presentation is printed, or viewed in outline
   mode.  "Handout"-class elements can appear anywhere in the text, as
   often as needed.

   This means that the slides and extra handout material can be
   combined in one document.  The handout can be printed directly from
   the browser, and it will contain more than just silly framed
   slides.  This can be used to provide more detailed information, or
   for speaker's notes.

.. class:: incremental

* Use the "class" directive::

      .. class:: handout

  .. container:: handout

     The ``.. class:: handout`` directive can be used to tag
     individual paragraphs and other elements.  The "class" directive
     applies to the first element immediately following::

         .. class:: handout

         This paragraph will get a
         ``class="handout"`` attribute.

         This paragraph will not be affected.

     It also applies to multiple elements in the directive content::

         .. class:: handout

            These paragraphs are the content
            of the "class" directive.  And as such...

            Both paragraphs will *individually* receive
            ``class="handout"`` attributes.

* Use the "container" directive::

      .. container:: handout

  .. container:: handout

     Arbitrary handout blocks can be created using the ``container``
     directive.  The content is treated as one.

* Use the "class" option of directives that support it::

      .. topic:: Extra Material For Handouts
         :class: handout

.. container:: handout

   The following directives support "class" options:

   * all admonition directives ("admonition", "note", "hint", etc.)
   * "image" & "figure"
   * "topic"
   * "sidebar"
   * "line-block"
   * "parsed-literal"
   * "rubric"
   * "compound"
   * "table", "csv-table", & "list-table"
   * "target-notes" (more about that below)
   * "role" (pre-defined; more below)

   Handout contents are also visible on the screen if the S5 view mode
   is toggled from "slide show" to "outline" mode.


Caveats
=======

.. class:: incremental

1. Some Docutils features are not supported by some themes.

   .. container:: handout

      For example, header rendering is not supported by the themes
      supplied with Docutils.

      The "header" directive is used to set header text.  S5
      automatically inserts section/slide titles into the "header"
      area of a slide.  If both Docutils headers and S5 headers (slide
      titles) exist simultaneously, they interfere with each other.

2. Care must be taken with the "contents" directive.

   .. container:: handout

      The ``--no-toc-backlinks`` option is the default for the S5/HTML
      writer (``toc_backlinks=0`` setting).  Other values for this
      setting will change the CSS class of headings such that they
      won't show up correctly in the slide show.

      Use the ``:class: handout`` option on the "contents" directive
      to limit the table of contents to the handout/outline mode
      only::

          .. contents::
             :class: handout


.. class:: incremental

3. Subsections ...
------------------

... may be used, sparingly.

.. container:: handout

   Only first-level sections become slides.  Not many levels of
   subsections can fit on a slide.

   Subsections (of any level) work normally in handouts though.  Add
   "``.. class:: handout``" before a subsection (or sub-subsection, or
   ...), and the entire subsection will only appear in the handout.


Generating a Slide Show (1)
===========================

.. class:: incremental

1. Open a console (terminal, command shell) and go to the folder
   containing your file, ``slides.txt``.

2. Run the command::

       rst2s5.py slides.txt slides.html

3. Specify an S5 theme with the ``--theme`` option.

   .. class:: handout

   Docutils will copy the S5 theme files into a ``ui/<theme>`` folder
   beside the output HTML file.  A slide show can also link to an
   existing theme using the ``--theme-url`` option.


Generating a Slide Show (2)
===========================

.. class:: incremental

4. Include a copy of any linked stylesheet.

   .. class:: handout

   The default Docutils stylesheet, ``html4css1.css``, will normally
   be embedded in the output HTML.  If you choose to link to a
   stylesheet instead of embedding, you must include a copy (suggested
   location: in the ``ui/`` directory).

5. Open ``slides.html`` in a web browser.

6. Expand the browser window to full-screen mode, and speak.

   .. class:: handout

   The `Web Developer`__ extension for Firefox is very useful.  With
   it, you can resize your browser window to the exact dimensions of
   the projector you'll be using, so you can test beforehand.  There
   are many other useful features as well.

   __ http://chrispederick.com/work/webdeveloper/

7. Profit!


Examples (1)
============

.. sidebar:: Hint

   Admonitions, tables, sidebars, and other elements can be used in
   on-screen presentations in handouts.  Images too!

   .. image:: https://docutils.sourceforge.io/docs/user/images/happy_monkey.png
       :alt: sample image

=====  =====  ======
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======


Examples (2): Incremental Text
==============================

.. class:: incremental

   Paragraphs can be displayed one at a time...

   .. container::

      ... or a bunch at a time.

      This second paragraph is displayed together with the previous
      one by grouping them with the "container" directive.

`We can also display` `one` `word` `at` `a` `time,`
`or a phrase` `at a time,`
`or even` `o`\ `n`\ `e` `l`\ `e`\ `t`\ `t`\ `e`\ `r` `at a time!`

`(But the markup ain't pretty.)`


Examples (3): Incr. Graphics
============================

Let's play... Rock, Scissors, Paper

.. container:: animation

   .. image:: https://docutils.sourceforge.io/docs/user/images/rsp-empty.png
      :class: hidden slide-display

   .. class:: incremental hidden slide-display

      .. image:: https://docutils.sourceforge.io/docs/user/images/rsp-objects.png
      .. image:: https://docutils.sourceforge.io/docs/user/images/rsp-cuts.png
      .. image:: https://docutils.sourceforge.io/docs/user/images/rsp-covers.png
      .. image:: https://docutils.sourceforge.io/docs/user/images/rsp-breaks.png

   .. image:: https://docutils.sourceforge.io/docs/user/images/rsp-all.png
      :class: incremental


Themes
======

.. class:: incremental

* Several themes are available, and they're easy to adapt.

  .. container:: handout

     Sites with other S5 themes:

     * http://meyerweb.com/eric/tools/s5/themes/
     * http://mozilla.wikicities.com/wiki/Firefox_S5:Designs
     * http://lachy.id.au/dev/mozilla/firefox/s5/
     * http://www.openlight.com/Python-S5-Theme.tar.gz
     
     Do a web search for "S5
     theme" and you're bound to find plenty of choices.

* "``--theme``" option.

  .. container:: handout

     The theme can be specified with the "``--theme``" command-line
     option.

     Example::

         rst2s5 --theme big-black slides.txt slides.html

     The default theme is "default".

* "``theme``" setting.

  .. class:: handout

  You can set the theme with the "``theme``" configuration file
  setting.

* Copied to ``./ui/<theme>/``.

  .. class:: handout

  Themes are copied into a ``ui/<theme>`` folder inside the folder
  containing the presentation.

* Link with "``--theme-url``" option.

  .. class:: handout

  Link to a theme on the same or another web site, using the
  "``--theme-url``" option or "``theme_url``" configuration file
  setting.


Example Themes
==============

.. class:: handout

   The default theme, "default", is a simplified version of S5's
   default theme.  It accommodates up to 13 lines of text.

.. class:: center

   "default"

   .. image:: https://docutils.sourceforge.io/docs/user/images/default.png
      :align: center


Example Themes: Small Text
==========================

.. class:: handout

   The "small-white" and "small-black" themes are simplifications of
   the default theme (**small** black text on a **white** background,
   and **small** black text on a **white** background, respectively).
   They each accommodate up to 15 lines of text.

.. list-table::
   :class: borderless

   * - "small-white"

       .. image:: https://docutils.sourceforge.io/docs/user/images/small-white.png

     - "small-black"

       .. image:: https://docutils.sourceforge.io/docs/user/images/small-black.png


Example Themes: Large Text
==========================

.. class:: handout

   The "big-white" and "big-black" themes feature very large, bold
   text, with no footers.  Only five short lines fit in a slide.

.. list-table::
   :class: borderless

   * - "big-white"

       .. image:: https://docutils.sourceforge.io/docs/user/images/big-white.png

     - "big-black"

       .. image:: https://docutils.sourceforge.io/docs/user/images/big-black.png


Example Themes: Medium Text
===========================

.. class:: handout

   The "medium-white" and "medium-black" themes feature medium-sized
   text.  Up to 8 lines of text are accommodated.

.. list-table::
   :class: borderless

   * - "medium-white"

       .. image:: https://docutils.sourceforge.io/docs/user/images/medium-white.png

     - "medium-black"

       .. image:: https://docutils.sourceforge.io/docs/user/images/medium-black.png


S5 Theme Files
==============

An S5 theme consists of a directory containing several files --
stylesheets, JavaScript, and graphics:

.. image:: https://docutils.sourceforge.io/docs/user/images/s5-files.png
   :align: center

.. container:: handout

   The generated HTML contains the entire slide show text.  It also
   contains links to the following files:

   * slides.css simply contains import links to:

     - s5-core.css: Default styles critical to the proper functioning
       of the slide show; don't touch this!

     - framing.css: Sets the basic layout of slide components (header,
       footer, controls, etc.  This file is the often edited.

     - pretty.css: Presentation styles that give the slide show a
       unique look and feel.  This is the file that you're most likely
       to edit for a custom theme.  You can make a whole new theme
       just by editing this file, and not touching the others.

   * outline.css: Styles for outline mode.

   * print.css: Styles for printing; hides most layout elements, and
     may display others.

   * opera.css: Styles necessary for the proper functioning of S5 in
     Opera Show.

   * slides.js: the JavaScript that drives the dynamic side of the
     slide show (actions and navigation controls).  It automatically
     IDs the slides when the document loads, builds the navigation
     menu, handles the hiding and showing of slides, and so on.  The
     code also manages the fallback to Opera Show if you're using
     the Opera web browser.


Making a Custom Theme
=====================

.. class:: incremental

1. Run "``rst2s5.py --theme <base-theme> <doc>.txt <doc>.html``".

   .. class:: handout

   This initializes the ``ui`` directory with the base theme files.

2. Copy ``ui/<base-theme>`` to ``ui/<new-theme>``.

3. Edit the styles (save in UTF-8 encoding).

   .. class:: handout

   Start with ``pretty.css``; edit ``framing.css`` if you need to make
   layout changes.

4. Run "``rst2s5.py --theme-url ui/<new-theme> <doc>.txt <doc>.html``".

   .. class:: handout

   We use the ``--theme-url`` option to refer to the new theme.  Open
   your ``<doc>.html`` in a browser to test the new theme.

5. Rinse & repeat.

   .. class:: handout

   Repeat from step 3 until you're satisfied.

.. TODO: What to do next:

   * add a ``__base__`` file
   * create a personal reusable theme (plugin)
   * submit the new theme to Docutils

  ``docutils/writers/s5_html/themes/<theme>``

.. container:: handout

   Resources:

   * W3C's `Learning CSS <https://www.w3.org/Style/CSS/learning>`__

   * `Creating An S5 Theme <http://home.cogeco.ca/~ve3ll/s5themes.htm>`__

   * A short tutorial on how to create themes (in German):
     `Eigenes Theme erstellen <http://yatil.de/s5/dokumentation/9/>`__


Classes: Incremental (1)
========================

.. class:: handout

   Several "class" attribute values have built-in support in the
   themes supplied with Docutils.

.. class:: incremental

   As described earlier,

   * ``.. class:: incremental``

   * ``.. container:: incremental``

   * ::

         .. sidebar:: title
            :class: incremental


Classes: Incremental (2)
========================

The "incremental" interpreted text role is also supported:

.. class:: incremental

   ::

       :incremental:`This will appear first,` `and
       this will appear second.`:incremental:

   Requires "``.. include:: <s5defs.txt>``".

.. container:: handout

   As you can see, this markup is not very convenient.

.. class:: incremental

   | But ``s5defs.txt`` includes this useful definition:
   | "``.. default-role:: incremental``".  So:

   ::

       `This` `is` `all` `we` `need`

`This` `is` `all` `we` `need` `to mark up incremental text.`


Classes: Incremental (3)
========================

.. class:: small

::

    .. container:: animation

       .. image:: images/empty.png
          :class: hidden slide-display

       .. class:: incremental hidden slide-display

          .. image:: images/1.png
          .. image:: images/2.png

       .. image:: images/3.png
          :class: incremental

.. container:: handout

   This is how the example works.

   The animation effects are caused by placing successive images at
   the same location, laying each image over the last.  For best
   results, all images should be the same size, and the positions of
   image elements should be consistent.  Use image transparency (alpha
   channels) to get overlay effects.

   Absolute positioning is used, which means that the images take up
   no space in the flow.  If you want text to follow the images, you
   have to specify the total size of the container via a style.
   Otherwise, the images and any following text will overlap.

   These class values do the work:

   animation
       This wraps the container with styles that position the images
       absolutely, overlaying them over each other.  Only useful on a
       container.

   hidden
       Unless overridden (by "slide-display", for example), these
       elements will not be displayed.  Only the last image will be
       displayed in handout mode, when print, or when processed to
       ordinary HTML, because it does *not* carry a "hidden" class.

   slide-display
       In conjunction with "hidden", these elements will only appear
       on the slide, preventing clutter in the handout.

   incremental
       The second and subsequent images will appear one at a time.
       The first image will already be present when the slide is
       displayed, because it does *not* carry an "incremental" class.


Classes: Text Size
==================

.. class:: incremental

   * :tiny:`tiny` (class & role name: "tiny", e.g. "``:tiny:`text```")
   * :small:`small` ("small")
   * normal (unstyled)
   * :big:`big` ("big")
   * :huge:`huge` ("huge")

   Requires "``.. include:: <s5defs.txt>``".


Classes: Alignment
==================

.. class:: incremental

   .. class:: left

   Left (class name: "left")

   .. class:: center

   Center ("center" & "centre")

   .. class:: right

   Right ("right")

.. class:: handout

   These classes apply to block-level elements only.  They cannot be
   used for inline text (i.e., they're not interpreted text roles).

.. class:: incremental

   Example::

       .. class:: center

       Text to be centered.


Classes: Text Colours
=====================

:black:`black` [black], :gray:`gray`, :silver:`silver`, :white:`white`
[white], :maroon:`maroon`, :red:`red`, :magenta:`magenta`,
:fuchsia:`fuchsia`, :pink:`pink`, :orange:`orange`, :yellow:`yellow`,
:lime:`lime`, :green:`green`, :olive:`olive`, :teal:`teal`,
:cyan:`cyan`, :aqua:`aqua`, :blue:`blue`, :navy:`navy`,
:purple:`purple`

The class names and role names are the same as the colour names.  For
example, "``:orange:`text```" produces ":orange:`text`".

.. class:: incremental

Requires "``.. include:: <s5defs.txt>``".


Classes: Borderless Tables
==========================

.. class:: handout

   Here's an ordinary, unstyled table:

.. class:: incremental

   =========  =======
   Sometimes  borders
   ---------  -------
   are        useful.
   =========  =======

   And after applying "``.. class:: borderless``":

   .. class:: borderless

   =======  ==========  =======
   But      sometimes,  borders
   -------  ----------  -------
   are      **not**     wanted.
   =======  ==========  =======


Classes: Print-Only
===================

.. class:: handout

   Elements with ``class="print"`` attributes display their contents
   when printed, overriding ``class="hidden"``.

.. class:: incremental

   Example: the "target-notes" directive::

       .. topic:: Links
          :class: hidden print

          .. target-notes::
             :class: hidden print

.. container:: handout

   One good example, used in this document, is the "target-notes"
   directive.  For each external target (hyperlink) in the text, this
   directive generates a footnote containing the visible URL as
   content.  Footnote references are placed after each hyperlink
   reference.

   The "topic" directive is given a "class" attribute with values
   "hidden" and "print", so the entire topic will only be displayed
   when printed.  The "target-notes" directive also assigns a "class"
   attributes with values "hidden" and "print" to each of the footnote
   references it inserts throughout the text; they will only show up
   when printed.

.. class:: incremental

   Other uses may require "``.. include:: <s5defs.txt>``".


Useful Extensions For Firefox
=============================

* `Autohide`__

  .. class:: handout

  Automatically hides toolbars in full-screen mode.

  __ http://www.krickelkrackel.de/autohide/autohide.htm

* `Web Developer`__

  .. class:: handout

  Adds a context submenu and a toolbar with a lot of useful
  functionality, including the viewing and live editing of
  stylesheets, and sizing the browser window.

  __ http://chrispederick.com/work/webdeveloper/


To Do
=====

.. class:: incremental

   * Multi-display support:

     - speaker's notes on the laptop screen
     - slides on the projector
     - two views stay in sync
     - presentation controlled from either display

   * Add timeout to incremental style.

     .. class:: handout

     I.e., incremental-specific style should go away (revert to
     normal) after a certain interval.

   These will require some serious JavaScript-fu!


That's All, Folks!
==================

.. class:: huge

   Further information:
   https://docutils.sourceforge.io

   Docutils users' mailing list:
   docutils-users@lists.sourceforge.net

   `Any questions?`


.. topic:: Links
   :class: hidden print

   .. target-notes:: :class: hidden print


/Part 2. 018.📜 docutils-0.20.1/docs/user/smartquotes.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=========================
Smart Quotes for Docutils
=========================

:Author: Günter Milde,
         based on SmartyPants by John Gruber, Brad Choate, and Chad Miller
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:License: Released under the terms of the `2-Clause BSD license`_
:Abstract: This document describes the Docutils `smartquotes` module.

.. _2-Clause BSD license: http://opensource.org/licenses/BSD-2-Clause

.. .. contents:: Table of Contents

Description
===========

The `"smart_quotes" configuration setting`_ triggers the SmartQuotes
transformation on Text nodes that includes the following steps:

- Straight quotes (``"`` and ``'``) into "curly" quote characters
- dashes (``--`` and ``---``) into en- and em-dash entities
- three consecutive dots (``...`` or ``. . .``) into an ellipsis entity.

This means you can write, edit, and save your documents using plain old
ASCII -- straight quotes, plain dashes, and plain dots -- while Docutils
generates documents with typographical quotes, dashes, and ellipses.

Advantages:

* Typing speed (especially when blind-typing).
* The possibility to change the quoting style of the
  complete document with just one configuration option.
* Typographical quotes with just 7-bit ASCII characters in the source.

However, there are `algorithmic shortcomings`_ for 2 reasons:

* Dual use of the "ASCII-apostrophe" (') as single quote and apostrophe.
* Languages that do not use whitespace around words.

So, please consider also
`Why You Might Not Want to Use "Smart" Quotes in Your Documents`_.

.. _"smart_quotes" configuration setting:
.. _"smart_quotes" setting: config.html#smart-quotes


Escaping
========

The `SmartQuotes` transform does not modify characters in literal text
such as source code, maths, or literal blocks.

If you need literal straight quotes (or plain hyphens and periods) in normal
text, you can `backslash escape`_ the characters to preserve
ASCII-punctuation.

.. class:: booktabs

=========  ========= == ========  ==========
Input      Output       Input     Output
=========  ========= == ========  ==========
``\\``     \\           ``\...``  \...
``\"``     \"           ``\--``   \--
``\'``     \'           ``\```    \`
=========  ========= == ========  ==========

This is useful, for example, when you want to use straight quotes as
foot and inch marks:

  6\'2\" tall; a 17\" monitor.

.. _backslash escape: ../ref/rst/restructuredtext.html#escaping-mechanism


Localization
============

Quotation marks have a `variety of forms`__ in different languages and
media.

__ https://en.wikipedia.org/wiki/Quotation_mark#Summary_table

`SmartQuotes` inserts quotation marks depending on the language of the
current block element and the value of the `"smart_quotes" setting`_.\
[#x-altquot]_
There is built-in support for the following languages:\ [#smartquotes-locales]_

.. class:: run-in

:af: .. class:: language-af

    "'Afrikaans' quotes"

:af-x-altquot: .. class:: language-af-x-altquot

    "'Afrikaans' alternative quotes"

:ca: .. class:: language-ca

    "'Catalan' quotes"

:ca-x-altquot: .. class:: language-ca-x-altquot

    "'Catalan' alternative quotes"

:cs: .. class:: language-cs

    "'Czech' quotes"

:cs-x-altquot: .. class:: language-cs-x-altquot

    "'Czech' alternative quotes"

:da: .. class:: language-da

    "'Danish' quotes"

:da-x-altquot: .. class:: language-da-x-altquot

    "'Danish' alternative quotes"

:de: .. class:: language-de

    "'German' quotes"

:de-x-altquot: .. class:: language-de-x-altquot

    "'German' alternative quotes"

:de-ch: .. class:: language-de-ch

    "'Swiss-German' quotes"

:el: .. class:: language-el

    "'Greek' quotes"

:en: .. class:: language-en

    "'English' quotes"

:en-uk-x-altquot: .. class:: language-en-uk-x-altquot

    "'British' alternative quotes" (swaps single and double quotes)

:eo: .. class:: language-eo

    "'Esperanto' quotes"

:es: .. class:: language-es

    "'Spanish' quotes"

:es-x-altquot: .. class:: language-es-x-altquot

    "'Spanish' alternative quotes"

:et: .. class:: language-et

    "'Estonian' quotes" (no secondary quote listed in Wikipedia)

:et-x-altquot: .. class:: language-et-x-altquot

    "'Estonian' alternative quotes"

:eu: .. class:: language-eu

    "'Basque' quotes"

:fi: .. class:: language-fi

    "'Finnish' quotes"

:fi-x-altquot: .. class:: language-fi-x-altquot

    "'Finnish' alternative quotes"

:fr: .. class:: language-fr

    "'French' quotes"

:fr-x-altquot: .. class:: language-fr-x-altquot

    "'French' alternative quotes"

:fr-ch: .. class:: language-fr-ch

    "'Swiss-French' quotes"

:fr-ch-x-altquot: .. class:: language-fr-ch-x-altquot

    "'Swiss-French' alternative quotes" (narrow no-break space, see
    http://typoguide.ch/)

:gl: .. class:: language-gl

    "'Galician' quotes"

:he: .. class:: language-he

    "'Hebrew' quotes"

:he-x-altquot: .. class:: language-he-x-altquot

    "'Hebrew' alternative quotes"

:hr: .. class:: language-hr

    "'Croatian' quotes"

:hr-x-altquot: .. class:: language-hr-x-altquot

    "'Croatian' alternative quotes"

:hsb: .. class:: language-hsb

    "'Upper Sorbian' quotes"

:hsb-x-altquot: .. class:: language-hsb-x-altquot

    "'Upper Sorbian' alternative quotes"

:hu: .. class:: language-hu

    "'Hungarian' quotes"

:is: .. class:: language-is

    "'Icelandic' quotes"

:it: .. class:: language-it

    "'Italian' quotes"

:it-ch: .. class:: language-it-ch

    "'Swiss-Italian' quotes"

:it-x-altquot: .. class:: language-it-x-altquot

    "'Italian' alternative quotes"

:ja: .. class:: language-ja

    "'Japanese' quotes"

:lt: .. class:: language-lt

    "'Lithuanian' quotes"

:lv: .. class:: language-lv

    "'Latvian' quotes"

:nl: .. class:: language-nl

    "'Dutch' quotes"

:nl-x-altquot: .. class:: language-nl-x-altquot

    "'Dutch' alternative quotes"

    .. # 'nl-x-altquot2': '””’’',

:pl: .. class:: language-pl

    "'Polish' quotes"

:pl-x-altquot: .. class:: language-pl-x-altquot

    "'Polish' alternative quotes"

:pt: .. class:: language-pt

    "'Portuguese' quotes"

:pt-br: .. class:: language-pt-br

    "'Portuguese (Brazil)' quotes"

:ro: .. class:: language-ro

    "'Romanian' quotes"

:ru: .. class:: language-ru

    "'Russian' quotes"

:sh: .. class:: language-sh

    "'Serbo-Croatian' quotes"

:sh-x-altquot: .. class:: language-sh-x-altquot

    "'Serbo-Croatian' alternative quotes"

:sk: .. class:: language-sk

    "'Slovak' quotes"

:sk-x-altquot: .. class:: language-sk-x-altquot

    "'Slovak' alternative quotes"

:sl: .. class:: language-sl

    "'Slovenian' quotes"

:sl-x-altquot: .. class:: language-sl-x-altquot

    "'Slovenian' alternative quotes"

:sr: .. class:: language-sr

    "'Serbian' quotes"

:sr-x-altquot: .. class:: language-sr-x-altquot

    "'Serbian' alternative quotes"

:sv: .. class:: language-sv

    "'Swedish' quotes"

:sv-x-altquot: .. class:: language-sv-x-altquot

    "'Swedish' alternative quotes"

:tr: .. class:: language-tr

    "'Turkish' quotes"

:tr-x-altquot: .. class:: language-tr-x-altquot

    "'Turkish' alternative quotes"

.. 'tr-x-altquot2': '“„‘‚', # antiquated?

:uk: .. class:: language-uk

    "'Ukrainian' quotes"

:uk-x-altquot: .. class:: language-uk-x-altquot

    "'Ukrainian' alternative quotes"

:zh-cn: .. class:: language-zh-cn

    "'Chinese (China)' quotes"

:zh-tw: .. class:: language-zh-tw

    "'Chinese (Taiwan)' quotes"

Quotes in text blocks in a non-configured language are kept as plain quotes:

:undefined: .. class:: language-undefined-example

    "'Undefined' quotes"

.. [#x-altquot] Tags with the non-standard extension ``-x-altquot`` define
   the quote set used with the `"smart_quotes" setting`_ value ``"alt"``.

.. [#smartquotes-locales] The definitions for language-dependend
   typographical quotes can be extended or overwritten using the
   `"smartquotes_locales" setting`_.

   The following example ensures a correct leading apostrophe in ``'s
   Gravenhage`` (at the cost of incorrect leading single quotes) in Dutch
   and sets French quotes to double and single guillemets with inner
   spacing::

     smartquote-locales: nl: „”’’
                         fr: « : »:‹ : ›

.. _"smartquotes_locales" setting: config.html#smartquotes-locales


Caveats
=======

Why You Might Not Want to Use "Smart" Quotes in Your Documents
--------------------------------------------------------------

For one thing, you might not care.

Most normal, mentally stable individuals do not take notice of proper
typographic punctuation. Many design and typography nerds, however, break
out in a nasty rash when they encounter, say, a restaurant sign that uses
a straight apostrophe to spell "Joe's".

If you're the sort of person who just doesn't care, you might well want to
continue not caring. Using straight quotes -- and sticking to the 7-bit
ASCII character set in general -- is certainly a simpler way to live.

Even if you *do* care about accurate typography, you still might want to
think twice before "auto-educating" the quote characters in your documents.
As there is always a chance that the algorithm gets it wrong, you may
instead prefer to use the compose key or some other means to insert the
correct Unicode characters into the source.


Algorithmic Shortcomings
------------------------

The ASCII character (u0027 APOSTROPHE) is used for apostrophe and single
quotes. If used inside a word, it is converted into an apostrophe:

   .. class:: language-fr

   Il dit : "C'est 'super' !"

At the beginning or end of a word, it cannot be distinguished from a single
quote by the algorithm.

The `right single quotation mark`_ character -- used to close a secondary
(inner) quote in English -- is also "the preferred character to use for
apostrophe" (Unicode_). Therefore, "educating" works as expected for
apostrophes at the end of a word, e.g.,

  Mr. Hastings' pen; three days' leave; my two cents' worth.

However, when apostrophes are used at the start of leading contractions,
"educating" will turn the apostrophe into an *opening* secondary quote. In
English, this is *not* the apostrophe character, e.g., ``'Twas brillig``
is "miseducated" to

  'Twas brillig.

In other locales (French, Italian, German, ...), secondary closing quotes
differ from the apostrophe. A text like::

   .. class:: language-de-CH

   "Er sagt: 'Ich fass' es nicht.'"

becomes

   «Er sagt: ‹Ich fass› es nicht.›»

with a single closing guillemet in place of the apostrophe.

In such cases, it's best to use the recommended apostrophe character (’) in
the source:

   | ’Twas brillig, and the slithy toves
   | Did gyre and gimble in the wabe;
   | All mimsy were the borogoves,
   | And the mome raths outgrabe.

.. _right single quotation mark:
    http://www.fileformat.info/info/unicode/char/2019/index.htm
.. _Unicode: https://www.unicode.org/charts/PDF/U2000.pdf

History
=======

The smartquotes module is an adaption of "SmartyPants_" to Docutils.

`John Gruber`_ did all of the hard work of writing this software in Perl for
`Movable Type`_ and almost all of this useful documentation.  `Chad Miller`_
ported it to Python to use with Pyblosxom_.

Portions of the SmartyPants original work are based on Brad Choate's nifty
MTRegex plug-in.  `Brad Choate`_ also contributed a few bits of source code to
this plug-in.  Brad Choate is a fine hacker indeed.
`Jeremy Hedley`_ and `Charles Wiltgen`_ deserve mention for exemplary beta
testing of the original SmartyPants.

Internationalization and adaption to Docutils by Günter Milde.

.. _SmartyPants: http://daringfireball.net/projects/smartypants/
.. _Pyblosxom: http://pyblosxom.bluesock.org/
.. _Movable Type: http://www.movabletype.org/
.. _John Gruber: http://daringfireball.net/
.. _Chad Miller: http://web.chad.org/
.. _Brad Choate: http://bradchoate.com/
.. _Jeremy Hedley: http://antipixel.com/
.. _Charles Wiltgen: http://playbacktime.com/
.. _Rael Dornfest: http://raelity.org/


/Part 2. 019.📜 docutils-0.20.1/docs/user/todo-lists.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===================
Docutils TODO lists
===================

TODO lists allow you to create a list of items with checkboxes.
In `extended Markdown`_, they are called `task lists`.

Checkbox variants
=================

[x] ASCII-art checkbox.

[ ] ASCII space character and NBSP are smaller than the x.

[ ] The "figure space" has the correct width but is not easy to type.

You may define substitutions for ballot box and checked ballot box or
other suitable Unicode characters:

.. |-| unicode:: U+2610
.. |x| unicode:: U+2611
.. |y| unicode:: U+1F5F9

|-| U+2610 BALLOT BOX

|x| U+2611 BALLOT BOX WITH CHECK

|y| U+1F5F9 BALLOT BOX WITH BOLD CHECK

List Markup
===========

Paragraphs
----------

|x| Simple *paragraphs* are easy for small lists with short values

|-| but not well suited for complex TODO items.

Line Blocks
-----------

| |x| Line blocks are rendered as "unstyled" lists.
| |y| They don't need additional styling.
| |-| However, you cannot nest block elements.


Description Lists
-----------------

.. class:: description

|x|
    A *description list* works out of the box in HTML5 and XeTeX.

|-|
    It looks suboptimal in the rST source (definition list with class
    value "description").

[x]
    Lists may use ASCII-art or substitutions.

[ ]
    All list markup variants require special styling based on a
    preceding class__ directive.

__ https://docutils.sourceforge.io/docs/ref/rst/directives.html#class

Bullet Lists
------------

.. class:: todo

- |x| bullet lists (similar to the Markdown_ for `task
  lists`) can be styled accordingly.
- |-| They don't look good in the rST source.
- [x] Lists may use ASCII-art or substitutions.
- [ ] The "figure space" has the correct width.

- |x| Another idea: use bullet lists with ``+`` and ``-`` markers.

      + Clean and simple markup in the source.

      - A new marker character starts a new list :-(

      - Requires change to the writer: Pass the "bullet" attribute to
        the output document (use `HTML5 "data-" attriibutes`__?).

__ https://html.spec.whatwg.org/#embedding-custom-non-visible-data-with-the-data-*-attributes

Field Lists
-----------

.. class:: todo

:|x|: Compile this example with ``rst2html5.py``,
:|y|: compare markup variants,
:|-|: select the best.

.. class:: todo monospace

:[x]: ASCII-art checkbox.
:[ ]: The "figure space" has the correct width.
:[ ]: CSS styling can switch to monospace fonts for the ASCII-art boxes,
      so an ASCII space character can be used.

.. class:: todo monospace brackets

:x: ASCII-art checkbox - brackets added by CSS.
: : Simple rST source, easy typing.

.. class:: todo monospace framed

:x: checkbox border added by CSS.
: : Simple rST source, easy typing.

I recommend a field list with class argument and some CSS styling.


.. _Markdown: https://www.markdownguide.org
.. _extended Markdown: https://www.markdownguide.org/extended-syntax/


.. ! The follwing CSS rules are included here as raw HTML to keep the
     example compact. They compromise the HTML validity, as styling is not
     allowed in the document body.
     For production use, place CSS styling rules in a custom style sheet.

.. raw:: html

   <style type="text/css"><!--
    ul.todo {list-style-type: none;
             padding-left: 0;}
    ul.todo > li > p {padding-left: 1.2em;
                      text-indent: -1.2em;}

    dl.todo > dt > .colon {display: none}
    dl.todo > dd {margin-left: 2.5em;}

    dl.monospace > dt {font-family: monospace;}

    dl.brackets > dt:before {content: '[';}
    dl.brackets > dt:after {content: ']';}

    dl.framed > dt {border: solid;
                    border-width: thin;
                    padding: 0 0.2em;
                    margin-top: 0.2em;
                    line-height: 0.9;
                   }

    --></style>


/Part 2. 020.📜 docutils-0.20.1/docs/user/config.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

========================
 Docutils Configuration
========================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9369 $
:Date: $Date: 2023-05-03 01:04:27 +0200 (Mi, 03. Mai 2023) $
:Copyright: This document has been placed in the public domain.

.. sidebar:: Docutils Security for Web Applications

   For details about securing web applications, please see `Deploying
   Docutils Securely <../howto/security.html>`_.

.. .. contents:: Table of Contents


===================================================
Configuration Files
===================================================

Configuration files are used for persistent customization;
they can be set once and take effect every time you use a component,
e.g., via a `front-end tool`_.
Configuration file settings override the built-in defaults, and
command-line options override all.
For the technicalities, see `Docutils Runtime Settings`_.

By default, Docutils checks the following places for configuration
files, in the following order:

1. ``/etc/docutils.conf``: This is a system-wide configuration file,
   applicable to all Docutils processing on the system.

2. ``./docutils.conf``: This is a project-specific configuration file,
   located in the current directory.  The Docutils front end has to be
   executed from the directory containing this configuration file for
   it to take effect (note that this may have nothing to do with the
   location of the source files).  Settings in the project-specific
   configuration file will override corresponding settings in the
   system-wide file.

3. ``~/.docutils``: This is a user-specific configuration file,
   located in the user's home directory.  Settings in this file will
   override corresponding settings in both the system-wide and
   project-specific configuration files.

If more than one configuration file is found, all will be read but
later entries will override earlier ones.  For example, a "stylesheet"
entry in a user-specific configuration file will override a
"stylesheet" entry in the system-wide file.

The default implicit config file paths can be overridden by the
``DOCUTILSCONFIG`` environment variable.  ``DOCUTILSCONFIG`` should
contain a colon-separated (semicolon-separated on Windows) sequence of
config file paths to search for; leave it empty to disable implicit
config files altogether.  Tilde-expansion is performed on paths.
Paths are interpreted relative to the current working directory.
Empty path items are ignored.

In addition, a configuration file may be explicitly specified with the
``--config`` command-line option.  This configuration file is read after
the three implicit ones listed above (or the ones defined by the
``DOCUTILSCONFIG`` environment variable), and its entries will have
priority.


===================================================
Configuration File Syntax
===================================================

Configuration files are UTF-8-encoded text files.  The
ConfigParser.py_ module from Python_'s standard library is used to
read them.  From its documentation:

    The configuration file consists of sections, lead by a "[section]"
    header and followed by "name: value" entries, with continuations
    in the style of `RFC 822`_; "name=value" is also accepted.  Note
    that leading whitespace is removed from values.  ...  Lines
    beginning with "#" or ";" are ignored and may be used to provide
    comments.

.. Note:: No format string interpolation is done.

Configuration file entry names correspond to internal runtime
settings.  Underscores ("_") and hyphens ("-") can be used
interchangeably in entry names; hyphens are automatically converted to
underscores.

For on/off switch settings (_`booleans`), the following values are
recognized:

:On: "true", "yes", "on", "1"
:Off: "false", "no", "off", "0", "" (no value)

.. _list:

List values can be comma- or colon-delimited.

strip_classes_, strip_elements_with_classes_, smartquotes_locales_,
stylesheet, stylesheet_dirs, stylesheet_path, legacy_class_functions_,
and use_bibtex_ use the comma as delimiter,
whitespace around list values is stripped. ::

    strip-classes: ham,eggs,
    strip-elements-with-classes: sugar, salt, flour
    stylesheet: html4css1.css,
                math.css,
                style with spaces.css
    stylesheet-path: ../styles/my.css, ../styles/funny.css

expose_internals_, ignore_ and prune_ use the colon as delimiter and do not
strip whitespace::

    expose_internals: b:c:d


Example
=======

This is from the ``tools/docutils.conf`` configuration file supplied
with Docutils::

    # These entries affect all processing:
    [general]
    source-link: yes
    datestamp: %Y-%m-%d %H:%M UTC
    generator: on

    # These entries affect HTML output:
    [html writers]
    embed-stylesheet: no

    [html4css1 writer]
    stylesheet-path: docutils/writers/html4css1/html4css1.css
    field-name-limit: 20

    [html5 writer]
    stylesheet-dirs: docutils/writers/html5_polyglot/
    stylesheet-path: minimal.css, responsive.css

Individual configuration sections and settings are described in the
following section.


.. _configuration section:
.. _configuration sections:

===================================================
Configuration File Sections & Entries
===================================================

Below are the Docutils runtime settings, listed by config file
section.  **Any setting may be specified in any section, but only
settings from active sections will be used.**  Sections correspond to
Docutils components (module name or alias; section names are always in
lowercase letters).  Each Docutils application_ uses a specific set
of components; corresponding configuration file sections are applied
when the application is used.  Configuration sections are applied in
general-to-specific order, as follows:

1. `[general]`_

2. `[parsers]`_, parser dependencies, and the section specific to the
   Parser used ("[... parser]").

3. `[readers]`_, reader dependencies, and the section specific to the
   Reader used ("[... reader]").  For example, `[pep reader]`_ depends
   on `[standalone reader]`_.

4. `[writers]`_, writer family ("[... writers]"; if applicable),
   writer dependencies, and the section specific to the writer used
   ("[... writer]").  For example, `[pep_html writer]`_ depends
   on `[html writers]`_ and `[html4css1 writer]`_.

5. `[applications]`_, application dependencies, and the section
   specific to the Application (front-end tool) in use
   ("[... application]").

Since any setting may be specified in any section, this ordering
allows component- or application-specific overrides of earlier
settings.  For example, there may be Reader-specific overrides of
general settings; Writer-specific overrides of Parser settings;
Application-specific overrides of Writer settings; and so on.

If multiple configuration files are applicable, the process is
completed (all sections are applied in the order given) for each one
before going on to the next.  For example, a "[pep_html writer]
stylesheet" setting in an earlier configuration file would be
overridden by an "[html4css1 writer] stylesheet" setting in a later
file.

Some knowledge of Python_ is assumed for some attributes.

.. _ConfigParser.py:
   https://docs.python.org/3/library/configparser.html
.. _Python: https://www.python.org/
.. _RFC 822: https://www.rfc-editor.org/rfc/rfc822.txt
.. _front-end tool:
.. _application: tools.html


[general]
=========

Settings in the "[general]" section are always applied.

auto_id_prefix
--------------

Prefix prepended to all auto-generated `identifier keys` generated within
the document, after id_prefix_. Ensure the value conforms to the
restrictions on identifiers in the output format, as it is not subjected to
the `identifier normalization`_.

A trailing "%" is replaced with the tag name (new in Docutils 0.16).

Default: "%" (changed in 0.18 from "id").
Option: ``--auto-id-prefix`` (hidden, intended mainly for programmatic use).

.. _identifier normalization:
   ../ref/rst/directives.html#identifier-normalization

datestamp
---------

Include a time/datestamp in the document footer.  Contains a
format string for Python's `time.strftime()`__.

Default: None.
Options: ``--date, -d, --time, -t, --no-datestamp``.

Configuration file entry examples::

    # Equivalent to --date command-line option, results in
    # ISO 8601 extended format datestamp, e.g. "2001-12-21":
    datestamp: %Y-%m-%d

    # Equivalent to --time command-line option, results in
    # date/timestamp like "2001-12-21 18:43 UTC":
    datestamp: %Y-%m-%d %H:%M UTC

    # Disables datestamp; equivalent to --no-datestamp:
    datestamp:

__ https://docs.python.org/3/library/time.html#time.strftime

debug
-----

Report debug-level system messages.

Default: don't (None).  Options: ``--debug, --no-debug``.

dump_internals
--------------

At the end of processing, write all internal attributes of the
document (``document.__dict__``) to stderr.

Default: don't (None).
Option: ``--dump-internals`` (hidden, for development use only).

dump_pseudo_xml
---------------

At the end of processing, write the pseudo-XML representation of
the document to stderr.

Default: don't (None).
Option: ``--dump-pseudo-xml`` (hidden, for development use only).

dump_settings
-------------

At the end of processing, write all Docutils settings to stderr.

Default: don't (None).
Option: ``--dump-settings`` (hidden, for development use only).

dump_transforms
---------------

At the end of processing, write a list of all transforms applied
to the document to stderr.

Default: don't (None).
Option: ``--dump-transforms`` (hidden, for development use only).

error_encoding
--------------

The text encoding for error output.

Default: "ascii".  Options: ``--error-encoding, -e``.

error_encoding_error_handler
----------------------------

The error handler for unencodable characters in error output.
Acceptable values are the `Error Handlers`_ of Python's "codecs" module.
See also output_encoding_error_handler_.

Default: "backslashreplace"
Options: ``--error-encoding-error-handler, --error-encoding, -e``.

exit_status_level
-----------------

A system message level threshold; non-halting system messages at
or above this level will produce a non-zero exit status at normal
exit.  Exit status is the maximum system message level plus 10 (11
for INFO, etc.).

Default: disabled (5).  Option: ``--exit-status``.

expose_internals
----------------

List_ of internal attributes to expose as external attributes (with
"internal:" namespace prefix).  To specify multiple attributes in
configuration files, use colons to separate names; on the command
line, the option may be used more than once.

Default: don't (None).
Option: ``--expose-internal-attribute`` (hidden, for development use only).

footnote_backlinks
------------------

Enable or disable backlinks from footnotes_ and citations_ to their
references.

Default: enabled (True).
Options: ``--footnote-backlinks, --no-footnote-backlinks``.

generator
---------

Include a "Generated by Docutils" credit and link in the document footer.

Default: off (None).  Options: ``--generator, -g, --no-generator``.

halt_level
----------

The threshold at or above which system messages are converted to
exceptions, halting execution immediately.  If `traceback`_ is set, the
exception will propagate; otherwise, Docutils will exit.

See also report_level_.

Default: severe (4).  Options: ``--halt, --strict``.

id_prefix
---------

Prefix prepended to all identifier keys generated within the document.
Ensure the value conforms to the restrictions on identifiers in the output
format, as it is not subjected to the `identifier normalization`_.
See also auto_id_prefix_.

Default: "" (empty).
Option: ``--id-prefix`` (hidden, intended mainly for programmatic use).

input_encoding
--------------

The text encoding for input (use the empty string to restore the default).

Default: auto-detect_ (None). [#]_  Options: ``--input-encoding, -i``.

.. [#] The default will change to "utf-8" in Docutils 0.22.

.. _auto-detect: ../api/publisher.html#encodings

input_encoding_error_handler
----------------------------

The error handler for undecodable characters in the input.
Acceptable values are the `Error Handlers`_ of Python's "codecs" module,
including:

strict
    Raise an exception in case of an encoding error.
replace
    Replace malformed data with the official Unicode replacement
    character, U+FFFD.
ignore
    Ignore malformed data and continue without further notice.

Default: "strict".
Options: ``--input-encoding-error-handler, --input-encoding, -i``.

language_code
-------------

Case-insensitive `language tag`_ as defined in `BCP 47`_.

Sets the document language, also used for localized directive and
role names as well as Docutils-generated text.

A typical language identifier consists of a 2-letter language code
from `ISO 639`_ (3-letter codes can be used if no 2-letter code
exists). The language identifier can have an optional subtag,
typically for variations based on country (from `ISO 3166`_
2-letter country codes).  Avoid subtags except where they add
useful distinguishing information. Examples of language tags
include "fr", "en-GB", "pt-br" (the same as "pt-BR"), and
"de-1901" (German with pre-1996 spelling).

The language of document parts can be specified with a
"language-<language tag>" `class attribute`_, e.g.
``.. class:: language-el-polyton`` for a quote in polytonic Greek.

Default: English ("en").  Options: ``--language, -l``.

.. _class attribute: ../ref/doctree.html#classes


output
------

The name of the output destination. Use ``-`` for stdout.

Obsoletes the ``<destination>`` positional argument
(cf. `Future changes`_ in the RELEASE-NOTES).

Default: None (stdout). Option: ``--output``.

New in Docutils 0.20.

.. _Future changes: ../../RELEASE-NOTES.html#future-changes

output_encoding
---------------

The text encoding for output.

The "output_encoding" setting may also affect the content of the output
(e.g. an encoding declaration in HTML or XML or the representation of
characters as LaTeX macro vs. literal character).

This setting is ignored by the `ODF/ODT Writer`_

Default: "utf-8".  Options: ``--output-encoding``.

output_encoding_error_handler
-----------------------------

The error handler for unencodable characters in the output.
Acceptable values are the `Error Handlers`_ of Python's "codecs" module,
including:

strict
    Raise an exception in case of an encoding error.
replace
    Replace malformed data with a suitable replacement marker,
    such as "?".
ignore
    Ignore malformed data and continue without further notice.
xmlcharrefreplace
    Replace with the appropriate XML character reference, such as
    "``&#8224;``".
backslashreplace
    Replace with backslash escape sequences, such as "``\u2020``".

Default: "strict".
Options: ``--output-encoding-error-handler, --output-encoding, -o``.

record_dependencies
-------------------

Path to a file where Docutils will write a list of files that were
required to generate the output, e.g. included files or embedded
stylesheets. [#dependencies]_ [#pwd]_ The format is one path per
line with forward slashes as separator, the encoding is UTF-8.

Set to ``-`` in order to write dependencies to stdout.

This option is particularly useful in conjunction with programs like
``make`` using ``Makefile`` rules like::

  ham.html: ham.txt $(shell cat hamdeps.txt)
    rst2html.py --record-dependencies=hamdeps.txt ham.txt ham.html

If the filesystem encoding differs from UTF-8, replace the ``cat``
command with a call to a converter, e.g.

.. code-block::

  $(shell iconv -f utf-8 -t latin1 hamdeps.txt)

Default: None.  Option: ``--record-dependencies``.

.. [#dependencies] Images are only added to the dependency list if they
   are embedded into the output or the reStructuredText parser extracted
   image dimensions from the file.

report_level
------------

Report system messages at or higher than <level>:

1  info
2  warning
3  error
4  severe
5  none

See also halt_level_.

Default: warning (2).
Options: ``--report, -r, --verbose, -v, --quiet, -q``.

sectnum_xform
-------------

Enable or disable automatic section numbering by Docutils
(docutils.transforms.parts.SectNum) associated with the `sectnum directive`_.

If disabled, section numbers might be added to the output by the
renderer (e.g. by LaTeX or via a CSS style definition).

Default: enabled (True).
Options: ``--section-numbering``, ``--no-section-numbering``.

.. _sectnum directive: ../ref/rst/directives.html#sectnum

source_link
-----------

Include a "View document source" link in the document footer.  URL will
be relative to the destination.

Default: don't (None).
Options: ``--source-link, -s, --no-source-link``.

source_url
----------

An explicit URL for a "View document source" link, used verbatim.

Default: compute if source_link (None).
Options: ``--source-url, --no-source-link``.

strict_visitor
--------------

When processing a document tree with the Visitor pattern, raise an
error if a writer does not support a node type listed as optional. For
transitional development use.

Default: disabled (None).
Option: ``--strict-visitor`` (hidden, for development use only).

strip_classes
-------------

Comma-separated list_ of "classes" attribute values to remove from all
elements in the document tree. The command line option may be used more
than once.

.. WARNING:: Potentially dangerous; use with caution.

Default: disabled (None).  Option: ``--strip-class``.

strip_comments
--------------

Enable the removal of comment elements from the document tree.

Default: disabled (None).
Options: ``--strip-comments``, ``--leave-comments``.

strip_elements_with_classes
---------------------------

Comma-separated list_ of "classes" attribute values;
matching elements are removed from the document tree.
The command line option may be used more than once.

.. WARNING:: Potentially dangerous; use with caution.

Default: disabled (None).  Option: ``--strip-element-with-class``.

title
-----

The `document title` as metadata which does not become part of the
document body. Stored as the document's `title attribute`_.
For example, in HTML output the metadata document title
appears in the title bar of the browser window.

This setting overrides a displayed `document title`_ and
is overridden by a `"title" directive`_.

Default: none.  Option: ``--title``.

.. _title attribute: ../ref/doctree.html#title-attribute
.. _document title: ../ref/rst/restructuredtext.html#document-title
.. _"title" directive: ../ref/rst/directives.html#metadata-document-title

toc_backlinks
-------------

Enable backlinks from section titles to table of contents entries
("entry"), to the top of the TOC ("top"), or disable ("none").

Default: "entry".
Options: ``--toc-entry-backlinks, --toc-top-backlinks, --no-toc-backlinks``.

traceback
---------

Enable Python tracebacks when halt-level system messages and other
exceptions occur.  Useful for debugging, and essential for issue
reports.  Exceptions are allowed to propagate, instead of being
caught and reported (in a user-friendly way) by Docutils.

Default: disabled (None) unless Docutils is run programmatically
using the `Publisher Interface`_.
Options: ``--traceback, --no-traceback``.

.. _Publisher Interface: ../api/publisher.html

warning_stream
--------------

Path to a file for the output of system messages (warnings). [#pwd]_

Default: stderr (None).  Option: ``--warnings``.


[parsers]
=========

Generic parser options:

file_insertion_enabled
----------------------

Enable or disable directives inserting the contents of
external files, such as "include_" directive
or the "raw_" and "csv-table_" directives with option "url" or "file".
A "warning" system message (including the directive text) is inserted
instead.  (See also raw_enabled_ for another security-relevant setting.)

Default: enabled (True).
Options: ``--file-insertion-enabled, --no-file-insertion``.

.. _include: ../ref/rst/directives.html#include
.. _raw: ../ref/rst/directives.html#raw
.. _csv-table: ../ref/rst/directives.html#csv-table

line_length_limit
-----------------

Maximal number of characters in an input line or `substitution`_
definition. To prevent extraordinary high processing times or memory
usage for certain input constructs, a "warning" system message is
inserted instead.

Default: 10 000.
Option: ``--line-length-limit``

New in Docutils 0.17.

.. _substitution: ../ref/rst/directives.html#substitution

raw_enabled
-----------

Enable or disable the "raw_" directive.  A "warning" system message
(including the directive text) is inserted instead.  See also
file_insertion_enabled_ for another security-relevant setting.

Default: enabled (True).  Options: ``--raw-enabled, --no-raw``.


[restructuredtext parser]
-------------------------

character_level_inline_markup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Relax the `inline markup recognition rules`_
requiring whitespace or punctuation around inline markup.

Allows character level inline markup without escaped whithespace and is
especially suited for languages that do not use whitespace to separate words
(e.g. Japanese, Chinese).

.. WARNING:: Potentially dangerous; use with caution.

   When changing this setting to "True", inline markup characters in
   URLs, names and formulas must be escaped to prevent recognition and
   possible errors. Examples::

     http://rST_for_all.html (hyperlinks to rST_ and for_)
     x_2, inline_markup      (hyperlinks to x_ and inline_)
     2*x                     (starts emphasised text)
     a|b                     (starts a substitution reference)

Default: disabled (False).
Options: ``--character-level-inline-markup, --word-level-inline-markup``.

New in Docutils 0.13.

pep_references
~~~~~~~~~~~~~~

Recognize and link to standalone PEP references (like "PEP 258").

Default: disabled (None); enabled (True) in PEP Reader.
Option: ``--pep-references``.

pep_base_url
~~~~~~~~~~~~
Base URL for PEP references.

Default: "https://peps.python.org/".
Option: ``--pep-base-url``.

pep_file_url_template
~~~~~~~~~~~~~~~~~~~~~

Template for PEP file part of URL, interpolated with the PEP
number and appended to pep_base_url_.

Default: "pep-%04d".  Option: ``--pep-file-url``.

rfc_references
~~~~~~~~~~~~~~

Recognize and link to standalone RFC references (like "RFC 822").

Default: disabled (None); enabled (True) in PEP Reader.
Option: ``--rfc-references``.

rfc_base_url
~~~~~~~~~~~~

Base URL for RFC references.

Default: "http://www.faqs.org/rfcs/".  Option: ``--rfc-base-url``.

smart_quotes
~~~~~~~~~~~~

Activate the SmartQuotes_ transform to
change straight quotation marks to typographic form. `Quote characters`_
are selected according to the language of the current block element (see
language_code_, smartquotes_locales_, and the `pre-defined quote sets`__).

Also changes consecutive runs of hyphen-minus and full stops (``---``,
``--``, ``...``) to em-dash, en-dash, and ellipsis Unicode characters
respectively.

Supported values:

booleans_ (yes/no)
  Use smart quotes?

alt (or "alternative")
  Use alternative quote set (if defined for the language).

Default: "no". Option: ``--smart-quotes``.

New in Docutils 0.10.

.. _SmartQuotes: smartquotes.html
__ smartquotes.html#localization
.. _quote characters:
   https://en.wikipedia.org/wiki/Non-English_usage_of_quotation_marks


smartquotes_locales
~~~~~~~~~~~~~~~~~~~

Typographical quotes used by the SmartQuotes_ transform.

A comma-separated list_ with language tag and a set of four quotes (primary
open/close, secondary open/close)smartquotes_locales. (If more than one
character shall be used for a quote (e.g. padding in French quotes), a
colon-separated list may be used.)

Example:
  Ensure a correct leading apostrophe in ``'s Gravenhage`` in Dutch (at the
  cost of incorrect opening single quotes) and set French quotes to double
  and single guillemets with inner padding::

          smartquote-locales: nl: „”’’,
                              fr: « : »:‹ : ›

Default: None. Option: ``--smartquotes-locales``.

New in Docutils 0.14.

syntax_highlight
~~~~~~~~~~~~~~~~

Token type names used by Pygments_ when parsing contents of the code_
directive and role.

Supported values:

long
  Use hierarchy of long token type names.
short
  Use short token type names. (For use with
  `Pygments-generated stylesheets`_.)
none
  No code parsing. Use this to avoid the "Pygments not
  found" warning when Pygments is not installed.

Default: "long".  Option: ``--syntax-highlight``.

New in Docutils 0.9.

.. .. _Pygments: https://pygments.org/
.. _code: ../ref/rst/directives.html#code
.. _Pygments-generated stylesheets:
   https://pygments.org/docs/cmdline/#generating-styles

tab_width
~~~~~~~~~

Number of spaces for `hard tab expansion`_.

Default: 8.  Option: ``--tab-width``.

.. _hard tab expansion: ../ref/rst/restructuredtext.html#whitespace

trim_footnote_reference_space
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Remove spaces before `footnote references`_?

Default: None [#]_

Options: ``--trim-footnote-reference-space, --leave-footnote-reference-space``.

.. [#] Depending on the writer-specific `footnote_references setting`_.
   The footnote space is trimmed if the reference style is "superscript",
   and it is left if the reference style is "brackets".


.. _myst:

[myst parser]
-------------

Provided by the 3rd party package `myst-docutils`_.
See `MyST with Docutils`_ and its `Sphinx configuration options`_
(some settings are not available with Docutils).

.. _myst-docutils: https://pypi.org/project/myst-docutils/
.. _MyST with Docutils:
   https://myst-parser.readthedocs.io/en/latest/docutils.html
.. _Sphinx configuration options:
   https://myst-parser.readthedocs.io/en/latest/sphinx/reference.html#sphinx-config-options


.. _pycmark:

[pycmark parser]
----------------

Provided by the 3rd party package `pycmark`__.
Currently no configuration settings.

__ https://pypi.org/project/pycmark/


.. _recommonmark:

[recommonmark parser]
---------------------

Provisional, depends on (deprecated) 3rd-party package recommonmark__.
Currently no configuration settings.

__ https://pypi.org/project/recommonmark/


[readers]
=========


[standalone reader]
-------------------

docinfo_xform
~~~~~~~~~~~~~

Enable or disable the `bibliographic field list`_ transform
(docutils.transforms.frontmatter.DocInfo).

Default: enabled (True).  Options: ``--no-doc-info``.

doctitle_xform
~~~~~~~~~~~~~~

Enable or disable the promotion of a lone top-level section title
to `document title`_ (and subsequent section title to document
subtitle promotion; docutils.transforms.frontmatter.DocTitle).

Default: enabled (True).  Options: ``--no-doc-title``.

sectsubtitle_xform
~~~~~~~~~~~~~~~~~~

Enable or disable the promotion of the title of a lone subsection
to a subtitle (docutils.transforms.frontmatter.SectSubTitle).

Default: disabled (False).
Options: ``--section-subtitles, --no-section-subtitles``.


[pep reader]
------------

The `pep_references`_ and `rfc_references`_ settings
(`[restructuredtext parser]`_) are set on by default.


.. [python reader]
   ---------------

   Not implemented.


[writers]
=========

[docutils_xml writer]
---------------------

.. Caution::

   * The XML declaration carries text encoding information. If the encoding
     is not UTF-8 or ASCII and the XML declaration is missing, standard
     tools may be unable to read the generated XML.

doctype_declaration
~~~~~~~~~~~~~~~~~~~

Generate XML with a DOCTYPE declaration.

Default: do (True).  Options: ``--no-doctype``.

indents
~~~~~~~

Generate XML with indents and newlines.

Default: don't (None).  Options: ``--indents``.

newlines
~~~~~~~~

Generate XML with newlines before and after tags.

Default: don't (None).  Options: ``--newlines``.


.. _xml_declaration [docutils_xml writer]:

xml_declaration
~~~~~~~~~~~~~~~

Generate XML with an XML declaration.
See also `xml_declaration [html writers]`_.

Default: do (True).  Option: ``--no-xml-declaration``.


[html writers]
--------------

.. _attribution [html writers]:

attribution
~~~~~~~~~~~

Format for `block quote`_ attributions: one of "dash" (em-dash
prefix), "parentheses"/"parens", or "none".
See also `attribution [latex writers]`_.

Default: "dash".  Option: ``--attribution``.


cloak_email_addresses
~~~~~~~~~~~~~~~~~~~~~

Scramble email addresses to confuse harvesters.  In the reference
URI, the "@" will be replaced by %-escapes (as of RFC 1738).  In
the visible text (link text) of an email reference, the "@" and
all periods (".") will be surrounded by ``<span>`` tags.
Furthermore, HTML entities are used to encode these characters in
order to further complicate decoding the email address.  For
example, "abc@example.org" will be output as::

    <a class="reference" href="mailto:abc&#37;&#52;&#48;example&#46;org">
    abc<span>&#64;</span>example<span>&#46;</span>org</a>

.. Note:: While cloaking email addresses will have little to no
   impact on the rendering and usability of email links in most
   browsers, some browsers (e.g. the ``links`` browser) may decode
   cloaked email addresses incorrectly.

Default: don't cloak (None).  Option: ``--cloak-email-addresses``.

compact_lists
~~~~~~~~~~~~~

Remove extra vertical whitespace between items of `bullet lists`_ and
`enumerated lists`_, when list items are all "simple" (i.e., items
each contain one paragraph and/or one "simple" sub-list only).  The
behaviour can be specified directly via "class" attributes (values
"compact" and "open") in the document.

Default: enabled (True).
Options: ``--compact-lists, --no-compact-lists``.

compact_field_lists
~~~~~~~~~~~~~~~~~~~

Remove extra vertical whitespace between items of `field lists`_ that
are "simple" (i.e., all field bodies each contain at most one
paragraph).  The behaviour can be specified directly via "class"
attributes (values "compact" and "open") in the document.

Default: enabled (True).
Options: ``--compact-field-lists, --no-compact-field-lists``.


.. _embed_stylesheet [html writers]:

embed_stylesheet
~~~~~~~~~~~~~~~~

Embed the stylesheet in the output HTML file.  The stylesheet file
must specified by the stylesheet_path_ setting and must be
accessible during processing.
See also `embed_stylesheet [latex writers]`_.

Default: enabled.
Options: ``--embed-stylesheet, --link-stylesheet``.


.. _footnote_references setting:
.. _footnote_references [html writers]:

footnote_references
~~~~~~~~~~~~~~~~~~~

Format for `footnote references`_, one of "superscript" or "brackets".
See also `footnote_references [latex writers]`_.

Overrides [#override]_ trim_footnote_reference_space_,
if the parser supports this option.

Default: "brackets".  Option: ``--footnote-references``.

initial_header_level
~~~~~~~~~~~~~~~~~~~~

The initial level for header elements.  This does not affect the
document title & subtitle; see doctitle_xform_.

Default: writer dependent (see `[html4css1 writer]`_, `[html5 writer]`_,
`[pep_html writer]`_).
Option: ``--initial-header-level``.


math_output
~~~~~~~~~~~

The format of mathematical content (`math directive`_ and role) in
the output document. Supported values are (case insensitive):

:HTML:
  Format math in standard HTML enhanced by CSS rules.
  Requires the ``math.css`` stylesheet (in the system
  `stylesheet directory <stylesheet_dirs [html writers]_>`__)

  A `stylesheet_path <stylesheet_path [html writers]_>`__
  can be appended after whitespace. The specified
  stylesheet(s) will only be referenced or embedded if required
  (i.e. if there is mathematical content in the document).

:MathML:
  Embed math content as presentational MathML_.

  Self-contained documents (no JavaScript, no external downloads).
  MathML is part of the HTML5 standard [#mathml-in-html4]_ and
  `supported by all major browsers`__ (since January 2023 also by Chrome).

  .. [#mathml-in-html4] 
    With the "html4css1" writer, the resulting HTML document does
    not validate, as there is no DTD for `MathML + XHTML Transitional`.
    However, MathML-enabled browsers will render it fine.

  Docutil's latex2mathml converter supports a considerable
  `subset of LaTeX math syntax`__.

  An external converter can be appended after whitespace, e.g.,
  ``--math-output="MathML blahtexml"``:

  blahtexml_
    Fast conversion, support for many symbols and environments, but no
    "align" (or other equation-aligning) environment. (C++)

  LaTeXML_
    Comprehensive macro support but *very* slow. (Perl)

  TtM_
    No "matrix", "align" and  "cases" environments. Support may be removed.

  Pandoc_
    Comprehensive macro support, fast, but a large install size. (Haskell)

  __ https://developer.mozilla.org/en-US/docs/Web/MathML#browser_compatibility
  __ ../ref/rst/mathematics.html

:MathJax:
  Format math for display with MathJax_, a JavaScript-based math rendering
  engine.

  Pro:
    Works across multiple browsers and platforms.

    Large set of `supported LaTeX math commands and constructs`__

    __ http://docs.mathjax.org/en/latest/input/tex/macros/index.html

  Con:
    Rendering requires JavaScript and an Internet connection or local
    MathJax installation.

  A URL pointing to a MathJax library should be appended after whitespace.
  A warning is given if this is missing.

  * It is recommended to install__ the MathJax library on the same
    server as the rest of the deployed site files.

    __ https://www.mathjax.org/#installnow

    Example: Install the library at the top level of the web
    server’s hierarchy in the directory ``MathJax`` and set::

      math-output: mathjax /MathJax/MathJax.js

  * The easiest way to use MathJax is to link directly to a public
    installation. In that case, there is no need to install MathJax locally.

    Downside: Downloads JavaScript code from a third-party site --- opens
    the door to cross-site scripting attacks!

    Example: MathJax `getting started`__ documentation uses::

      math-output: mathjax
         https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js

    See https://www.jsdelivr.com/ for details and terms of use.

    __ https://www.mathjax.org/#gettingstarted

  * Use a local MathJax installation on the *client* machine, e.g.
  
  .. code-block::

      math-output: MathJax file:/usr/share/javascript/mathjax/MathJax.js

    This is the fallback if no URL is specified.

:LaTeX:
  Include literal LaTeX code.

  The failsafe fallback.

Default: HTML math.css.  Option: ``--math-output``.

| New in Docutils 0.8. 
| The default for the HTML5 writer will change to
  "MathML" in Docutils 0.22.

.. _math directive: ../ref/rst/directives.html#math
.. _MathJax: http://www.mathjax.org/
.. _MathPlayer: http://www.dessci.com/en/products/mathplayer/
.. _MathML: https://www.w3.org/TR/MathML/
.. _blahtexml: http://gva.noekeon.org/blahtexml/
.. _LaTeXML: http://dlmf.nist.gov/LaTeXML/
.. _TtM: http://hutchinson.belmont.ma.us/tth/mml/
.. _Pandoc: https://pandoc.org/


.. _stylesheet [html writers]:

stylesheet
~~~~~~~~~~

A comma-separated list of CSS stylesheet URLs, used verbatim.
See also `stylesheet [latex writers]`_.

Overrides also stylesheet_path_. [#override]_

Default: None.  Option: ``--stylesheet``.


.. _stylesheet_dirs [html writers]:

stylesheet_dirs
~~~~~~~~~~~~~~~

A comma-separated list of directories where stylesheets can be found.
Used by the stylesheet_path_ setting when expanding relative path arguments.

Note: This setting defines a "search path" (similar to the PATH variable for
executables). However, the term "path" is already used in the
stylesheet_path_ setting with the meaning of a file location.


Default: the working directory of the process at launch and the directory
with default stylesheet files (writer and installation specific).
Use the ``--help`` option to get the exact value.
Option: ``--stylesheet-dirs``.


.. _stylesheet_path:
.. _stylesheet_path [html writers]:

stylesheet_path
~~~~~~~~~~~~~~~

A comma-separated list of paths to CSS stylesheets. Relative paths are
expanded if a matching file is found in the stylesheet_dirs__.
If embed_stylesheet__ is False, paths are rewritten relative to the
output HTML file.
See also `stylesheet_path [latex writers]`_.

Also overrides "stylesheet". [#override]_
Pass an empty string (to either "stylesheet" or "stylesheet_path") to
deactivate stylesheet inclusion.

Default: writer dependent (see `[html4css1 writer]`_, `[html5 writer]`_,
`[pep_html writer]`_).
Option: ``--stylesheet-path``.

__ `embed_stylesheet [html writers]`_
__ `stylesheet_dirs [html writers]`_


.. _table_style [html writers]:

table_style
~~~~~~~~~~~

Class value(s) added to all tables_.
See also `table_style [latex writers]`_.

The default CSS sylesheets define:

  borderless
    No borders around table cells.

  align-left, align-center, align-right
    Align table as indicated.

The HTML5 stylesheets also define:

  booktabs
    Only lines above and below the table and a thin line after the head.

  captionbelow
    Place the table caption below the table
    (New in Docutils 0.17).

In addition, the HTML writers support:

  colwidths-auto
    Delegate the determination of table column widths to the back-end
    (leave out the ``<colgroup>`` column specification).
    Overridden by the "widths" option of the `table directive`_.

  colwidths-grid
    Write column widths determined from the source to the HTML file.
    Overridden by the "widths" option of the `table directive`_.

Default: "".  Option: ``--table-style``.

.. _table directive: ../ref/rst/directives.html#table


.. _template [html writers]:

template
~~~~~~~~

Path to template file, which must be encoded in UTF-8. [#pwd]_
See also `template [latex writers]`_.

Default: "template.txt" in the writer's directory (installed automatically;
for the exact machine-specific path, use the ``--help`` option).
Option: ``--template``.


.. _xml_declaration [html writers]:

xml_declaration
~~~~~~~~~~~~~~~

Prepend an XML declaration.
See also `xml_declaration [docutils_xml writer]`_.

.. Caution:: The XML declaration carries text encoding information.  If the
   encoding is not UTF-8 or ASCII and the XML declaration is missing,
   standard XML tools may be unable to read the generated XHTML.

Default: writer dependent.
Options: ``--xml-declaration``, ``--no-xml-declaration``.


[html4css1 writer]
~~~~~~~~~~~~~~~~~~

The `HTML4/CSS1 Writer`_ generates output that conforms to the
`XHTML 1 Transitional`_ specification.
It shares all settings defined in the `[html writers]`_
`configuration section`_.


Writer Specific Defaults
..................................

`initial_header_level`_
  1 (for "<h1>")

`stylesheet_path <stylesheet_path [html writers]_>`__:
  "html4css1.css"

`xml_declaration <xml_declaration [html writers]_>`__
  enabled (True)

.. _HTML4/CSS1 Writer: html.html#html4css1
.. _XHTML 1 Transitional: https://www.w3.org/TR/xhtml1/


field_name_limit
..................................

The maximum width (in characters) for one-column `field names`_. Longer
field names will span an entire row of the table used to render the field
list.  0 indicates "no limit".  See also option_limit_.

Default: 14 (i.e. 14 characters).  Option: ``--field-name-limit``.


option_limit
..................................

The maximum width (in characters) for options in `option lists`_.
Longer options will span an entire row of the table used to render
the option list.  0 indicates "no limit".
See also field_name_limit_.

Default: 14 (i.e. 14 characters).  Option: ``--option-limit``.


[html5 writer]
~~~~~~~~~~~~~~

The `HTML5 Writer`_ generates valid XML that is compatible with `HTML5`_.
It shares all settings defined in the `[html writers]`_
`configuration section`_.

New in Docutils 0.13.

.. _HTML5 Writer: html.html#html5-polyglot
.. _HTML5: https://www.w3.org/TR/2014/REC-html5-20141028/

Writer Specific Defaults
..................................

`initial_header_level`_
  2 (for "<h2>", cf. the "`The h1, h2, h3, h4, h5, and h6 elements`__"
  in the HTML Standard)

`stylesheet_path <stylesheet_path [html writers]_>`__:
  "minimal.css, plain.css"

__ https://html.spec.whatwg.org/multipage/sections.html
   #the-h1,-h2,-h3,-h4,-h5,-and-h6-elements

embed_images
..................................

Deprecated. Obsoleted by image_loading_.


image_loading
..................................

Suggest at which point images should be loaded.

:embed: If the image can be read from the local file system,
        the image data is embedded into the HTML document.

:link: Link to image in the HTML document (default).

:lazy: Link to image. Specify the `lazy loading attribute`_ to defer
       fetching the image.

Default: "link". Option: ``--image-loading``.

New in Docutils 0.18.

.. _base64: https://en.wikipedia.org/wiki/Base64
.. _data URI: https://en.wikipedia.org/wiki/Data_URI_scheme
.. _lazy loading attribute: https://html.spec.whatwg.org/multipage/
    urls-and-fetching.html#lazy-loading-attributes


section_self_link
..................................

Append an empty anchor element with a ``href`` to the section to
section headings. See ``responsive.css`` for an example how this can be
styled to show a symbol allowing users to copy the section's URL.

Default: disabled (False).
Options: ``--section-self-link``, ``--no-section-self-link``.

New in Docutils 0.18.


[pep_html writer]
~~~~~~~~~~~~~~~~~

The PEP/HTML Writer derives from the HTML4/CSS1 Writer, and shares
all settings defined in the `[html writers]`_ and `[html4css1 writer]`_
`configuration sections`_.

Writer Specific Defaults
..................................

`initial_header_level`_
  1 (for "<h1>")

`stylesheet_path <stylesheet_path [html writers]_>`__:
  "pep.css"

`template <template [html writers]_>`__:
  ``docutils/writers/pep_html/template.txt`` in the installation
  directory.  For the exact machine-specific path, use the ``--help``
  option.

no_random
..................................
Do not use a random banner image.  Mainly used to get predictable
results when testing.

Default: random enabled (None).  Options: ``--no-random`` (hidden).

pep_home
..................................

Home URL prefix for PEPs.

Default: current directory (".").  Option: ``--pep-home``.

python_home
..................................
Python's home URL.

Default: parent directory ("..").  Option: ``--python-home``.


[s5_html writer]
~~~~~~~~~~~~~~~~

The S5/HTML Writer derives from the HTML4/CSS1 Writer, and shares
all settings defined in the `[html writers]`_ and `[html4css1 writer]`_
`configuration sections`_.

Writer Specific Defaults
..................................

compact_lists_:
  disable compact lists.

template__:
  ``docutils/writers/s5_html/template.txt`` in the installation
  directory.  For the exact machine-specific path, use the ``--help``
  option.

__ `template [html writers]`_


hidden_controls
..................................

Auto-hide the presentation controls in slideshow mode, or or keep
them visible at all times.

Default: auto-hide (True).
Options: ``--hidden-controls``, ``--visible-controls``.

current_slide
..................................

Enable or disable the current slide indicator ("1/15").

Default: disabled (None).
Options: ``--current-slide``, ``--no-current-slide``.

overwrite_theme_files
..................................

Allow or prevent the overwriting of existing theme files in the
``ui/<theme>`` directory.  This has no effect if "theme_url_" is
used.

Default: keep existing theme files (None).
Options: ``--keep-theme-files``, ``--overwrite-theme-files``.

theme
..................................

Name of an installed S5 theme, to be copied into a ``ui/<theme>``
subdirectory, beside the destination file (output HTML).  Note
that existing theme files will not be overwritten; the existing
theme directory must be deleted manually.
Also overrides the "theme_url_" setting. [#override]_

Default: "default".  Option: ``--theme``.

theme_url
..................................

The URL of an S5 theme directory.  The destination file (output
HTML) will link to this theme; nothing will be copied.  Also overrides
the "theme_" setting. [#override]_

Default: None.  Option: ``--theme-url``.

view_mode
..................................

The initial view mode, either "slideshow" or "outline".

Default: "slidewhow".  Option: ``--view-mode``.

.. ------------------------------------------------------------

[latex writers]
----------------

Common settings for the `LaTeX writers`_
`[latex2e writer]`_ and `[xetex writer]`_.

.. _LaTeX writers: latex.html


.. _attribution [latex writers]:

attribution
~~~~~~~~~~~

See `attribution [html writers]`_.

compound_enumerators
~~~~~~~~~~~~~~~~~~~~

Enable or disable compound enumerators for nested `enumerated lists`_
(e.g. "1.2.a.ii").

Default: disabled (None).
Options: ``--compound-enumerators``, ``--no-compound-enumerators``.

documentclass
~~~~~~~~~~~~~

Specify LaTeX documentclass.

Default: "article".  Option: ``--documentclass``.

documentoptions
~~~~~~~~~~~~~~~

Specify document options.  Multiple options can be given, separated by
commas.

Default: "a4paper".  Option: ``--documentoptions``.


docutils_footnotes
~~~~~~~~~~~~~~~~~~
Use the Docutils-specific macros ``\DUfootnote`` and
``\DUfootnotetext`` for footnotes_.

TODO: The alternative, "use_latex_footnotes" is not implemented yet.

Default: on.  Option: ``--docutils-footnotes``.


.. _embed_stylesheet [latex writers]:

embed_stylesheet
~~~~~~~~~~~~~~~~

Embed the stylesheet(s) in the header of the output file.  The
stylesheets must be accessible during processing.  Currently, this
fails if the file is not available via the given path (i.e. the
file is *not* searched in the `TeX input path`_).
See also `embed_stylesheet [html writers]`_.

Default: off.  Options: ``--embed-stylesheet, --link-stylesheet``.


.. _footnote_references [latex writers]:

footnote_references
~~~~~~~~~~~~~~~~~~~

Format for `footnote references`_: one of "superscript" or "brackets".
See also `footnote_references [html writers]`_.

Overrides [#override]_ trim_footnote_reference_space_,
if the parser supports this option.

Default: "superscript".  Option: ``--footnote-references``.


graphicx_option
~~~~~~~~~~~~~~~

LaTeX graphicx package option.

Possible values are "dvips", "pdftex", "dvipdfmx".

Default: "".  Option: ``--graphicx-option``.

hyperlink_color
~~~~~~~~~~~~~~~

Color of any hyperlinks embedded in text.

* "0" or "false" disable coloring of links. (Links will be marked
  by red boxes that are not printed),
* "black" results in “invisible“ links,

Set hyperref_options_ to "draft" to completely disable hyperlinking.

Default: "blue".  Option: ``--hyperlink-color``.

hyperref_options
~~~~~~~~~~~~~~~~

Options for the `hyperref TeX package`_. If hyperlink_color_ is
not "false", the expansion of ::

  'colorlinks=true,linkcolor=%s,urlcolor=%s' % (
      hyperlink_color, hyperlink_color)

is prepended.

Default: "".   Option: ``--hyperref-options``.

.. _hyperref TeX package: http://tug.org/applications/hyperref/


latex_preamble
~~~~~~~~~~~~~~

LaTeX code that will be inserted in the document preamble.
Can be used to load packages with options or (re-) define LaTeX
macros without writing a custom style file (new in Docutils 0.7).

Default: writer dependent (see `[latex2e writer]`_, `[xetex writer]`_).
Option: ``--latex-preamble``.


legacy_class_functions
~~~~~~~~~~~~~~~~~~~~~~

Use legacy functions ``\DUtitle`` and ``\DUadmonition`` with a
comma-separated list of class values as optional argument. If `False`, class
values are handled with wrappers and admonitions use the ``DUadmonition``
environment. See `Generating LaTeX with Docutils`__ for details.

Default: False (since Docutils 0.18).
Options: ``--legacy-class-functions``, ``--new-class-functions``.

New in Docutils 0.17.

__ latex.html#classes


legacy_column_widths
~~~~~~~~~~~~~~~~~~~~

Use "legacy algorithm" or new algorithm to determine table column widths.

The new algorithm limits the table width to the text width or specified
table width and keeps the ratio of specified column widths.

Custom table and/or column widths can be set with the respective options
of the `table directive`_. See also `Generating LaTeX with Docutils`__.

Default: True (will change to False in Docutils 1.0).
Options: ``--legacy-column-widths``, ``--new-column-widths``.

New in Docutils 0.18.

__ latex.html#table-style


literal_block_env
~~~~~~~~~~~~~~~~~

When possible\ [#]_, use the specified environment for `literal blocks`_.

Default: "" (quoting of whitespace and special chars).
Option: ``--literal-block-env``.

.. [#] A literal-block element may originate from a `parsed literal`_.
   A LaTeX verbatim environment is only usable it does not contain
   inline elements.

.. _parsed literal: ../ref/rst/directives.html#parsed-literal


reference_label
~~~~~~~~~~~~~~~

Per default the latex-writer puts the reference title into
hyper references. Specify "ref*" or "pageref*" to get the section
number or the page number.

Default: "" (use hyper references).  Option: ``--reference-label``.

section_enumerator_separator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The separator between section number prefix and enumerator for
compound enumerated lists (see `compound_enumerators`_).

Generally it isn't recommended to use both sub-sections and nested
enumerated lists with compound enumerators.  This setting avoids
ambiguity in the situation where a section "1" has a list item
enumerated "1.1", and subsection "1.1" has list item "1".  With a
separator of ".", these both would translate into a final compound
enumerator of "1.1.1".  With a separator of "-", we get the
unambiguous "1-1.1" and "1.1-1".

Default: "-".  Option: ``--section-enumerator-separator``.



section_prefix_for_enumerators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enable or disable section ("." subsection ...) prefixes for
compound enumerators.  This has no effect unless
`compound_enumerators`_ are enabled.

Default: disabled (None).
Options: ``--section-prefix-for-enumerators``,
``--no-section-prefix-for-enumerators``.


.. _stylesheet [latex writers]:

stylesheet
~~~~~~~~~~

A comma-separated list_ of style files.
Used without path adaption (cf. `stylesheet_path [latex writers]`_).
Under Windows, path separators are normalized to forward slashes (``/``).
See also `stylesheet [html writers]`_.

Overrides also stylesheet_path__. [#override]_

If `embed_stylesheet`__ is False (default), the stylesheet files are
referenced with ``\usepackage`` (extension ``.sty`` or no extension) or
``\input`` (any other extension).

LaTeX will search the specified files in the `TeX input path`_.

Default: no stylesheet ("").  Option: ``--stylesheet``.

__ `stylesheet_path [latex writers]`_
__ `embed_stylesheet [latex writers]`_
.. _TeX input path:
   http://www.tex.ac.uk/cgi-bin/texfaq2html?label=what-TDS


.. _stylesheet_dirs [latex writers]:

stylesheet_dirs
~~~~~~~~~~~~~~~

A comma-separated list of directories where stylesheets can be found.
Used by the stylesheet_path__ setting.

Note: This setting defines a "search path" (similar to the PATH variable for
executables). However, the term "path" is already used in the
stylesheet_path__ setting with the meaning of a file location.

__
__ `stylesheet_path [latex writers]`_

Default: the working directory of the process at launch and the directory
with default stylesheet files (writer and installation specific).
Use the ``--help`` option to get the exact value.
Option: ``--stylesheet-dirs``.


.. _stylesheet_path [latex writers]:

stylesheet_path
~~~~~~~~~~~~~~~

A comma-separated list of style files. Relative paths are expanded if a
matching file is found in the stylesheet_dirs__.
If embed_stylesheet__ is False, paths are rewritten relative to the
output file path. Run ``latex`` from the directory containing
the output file.
See also `stylesheet_path [html writers]`_.

For files in the `TeX input path`_, the stylesheet__  option is recommended.

Also overrides stylesheet__. [#override]_

Default: no stylesheet ("").  Option: ``--stylesheet-path``.

__ `stylesheet_dirs [latex writers]`_
__ `embed_stylesheet [latex writers]`_
__
__ `stylesheet [latex writers]`_


.. _table_style [latex writers]:

table_style
~~~~~~~~~~~

Specify the default style for tables_.
See also `table_style [html writers]`_.

Supported values: "booktabs", "borderless", "colwidths-auto", and "standard".
See `Generating LaTeX with Docutils`__ for details.

Default: "standard".  Option: ``--table-style``.

__ latex.html#tables


.. _template [latex writers]:

template
~~~~~~~~

Path [#pwd]_ to template file, which must be encoded in UTF-8.
See also `template [html writers]`_.

Default: writer dependent (see `[latex2e writer]`_, `[xetex writer]`_).
Option: ``--template``.

use_bibtex
~~~~~~~~~~

Provisional, name, values, and behaviour may change in future versions
or the option may be removed.

A comma-separated list of style and database(s) for the experimental
`BibTeX` support, for example::

  --use-bibtex=unsrt,mydb1,mydb2

Default: "" (don't use BibTeX).  Option ``--use-bibtex``.

use_latex_abstract
~~~~~~~~~~~~~~~~~~

Use LaTeX abstract environment for the document's abstract_.

Default: off.  Options: ``--use-latex-abstract, --topic-abstract``.

use_latex_citations
~~~~~~~~~~~~~~~~~~~

Use \cite for citations_ instead of a simulation with figure-floats.

Default: off.  Options: ``--use-latex-citations, --figure-citations``.

use_latex_docinfo
~~~~~~~~~~~~~~~~~

Attach author and date to the `document title`_
instead of the `bibliographic fields`_.

Default: off.  Options: ``--use-latex-docinfo, --use-docutils-docinfo``.

use_latex_toc
~~~~~~~~~~~~~

To get page numbers in the `table of contents`_, it
must be generated by LaTeX. Usually latex must be run twice to get
numbers correct.

Default: on.  Options: ``--use-latex-toc, --use-docutils-toc``.

use_part_section
~~~~~~~~~~~~~~~~

Add parts on top of the section hierarchy.

Default: don't (None).  Option: ``--use-part-section``.

[latex2e writer]
~~~~~~~~~~~~~~~~

The `LaTeX2e writer`_ generates a LaTeX source for compilation with 8-bit
LaTeX (pdfTeX_). It shares all settings defined in the `[latex writers]`_
`configuration section`_.

.. _LaTeX2e writer: latex.html#latex2e-writer
.. _pdfTeX: https://www.tug.org/applications/pdftex/


Writer Specific Defaults
..................................

latex_preamble_
   Load the "PDF standard fonts" (Times, Helvetica, Courier)::

    \usepackage{mathptmx} % Times
    \usepackage[scaled=.90]{helvet}
    \usepackage{courier}

template__
  "default.tex" in the ``docutils/writers/latex2e/`` directory
  (installed automatically).

  __ `template [latex writers]`_


font_encoding
..................................

Specify `LaTeX font encoding`_. Multiple options can be given, separated by
commas. The last value becomes the document default.
Possible values are "", "T1", "OT1", "LGR,T1" or any other combination of
`LaTeX font encodings`_.

Default: "T1".  Option: ``--font-encoding``.

.. _LaTeX font encoding: latex.html#font-encoding
.. _LaTeX font encodings:
   http://mirror.ctan.org/macros/latex/doc/encguide.pdf

[xetex writer]
~~~~~~~~~~~~~~

The `XeTeX writer`_ generates a LaTeX source for compilation with `XeTeX
or LuaTeX`_. It derives from the latex2e writer, and shares all settings
defined in the `[latex writers]`_ `configuration section`_.

.. _XeTeX writer: latex.html#xetex-writer
.. _XeTeX or LuaTeX: https://texfaq.org/FAQ-xetex-luatex

Writer Specific Defaults
..................................

latex_preamble_:
  Font setup for `Linux Libertine`_,::

      % Linux Libertine (free, wide coverage, not only for Linux)
      \setmainfont{Linux Libertine O}
      \setsansfont{Linux Biolinum O}
      \setmonofont[HyphenChar=None]{DejaVu Sans Mono}

  The optional argument ``HyphenChar=None`` to the monospace font
  prevents word hyphenation in literal text.

.. _Linux Libertine: http://www.linuxlibertine.org/

template__:
  "xelatex.tex" in the ``docutils/writers/latex2e/`` directory
  (installed automatically).

  .. TODO: show full path with ``--help`` (like in the HTML writers)
     and add the following line:
     for the exact machine-specific path, use the ``--help`` option).

  __ `template [latex writers]`_


.. _ODF/ODT Writer:

[odf_odt writer]
----------------

The `ODF/ODT Writer`__ generates documents in the 
OpenDocument_ Text format (.odt).

The output_encoding_ setting is ignored, the output encoding is
always "UTF-8".

__
.. _ODT Writer for Docutils: odt.html
.. _OpenDocument: https://en.wikipedia.org/wiki/OpenDocument


stylesheet
~~~~~~~~~~

Specify a stylesheet URL, used verbatim.

Default: writers/odf_odt/styles.odt in the installation directory.

odf-config-file
~~~~~~~~~~~~~~~

Specify a configuration/mapping file relative to the current working
directory for additional ODF options. In particular, this file may
contain a section named "Formats" that maps default style names to names
to be used in the resulting output file allowing for adhering to external
standards. For more info and the format of the configuration/mapping
file, see the `Odt Writer for Docutils`_ document.

cloak-email-addresses
~~~~~~~~~~~~~~~~~~~~~

Obfuscate email addresses to confuse harvesters while still
keeping email links usable with standards-compliant browsers.

no-cloak-email-addresses
~~~~~~~~~~~~~~~~~~~~~~~~

Do not obfuscate email addresses.

table-border-thickness
~~~~~~~~~~~~~~~~~~~~~~

Specify the thickness of table borders in thousands of a cm.
Default is 35.

add-syntax-highlighting
~~~~~~~~~~~~~~~~~~~~~~~

Add syntax highlighting in literal code blocks.

no-syntax-highlighting
~~~~~~~~~~~~~~~~~~~~~~

Do not add syntax highlighting in literal code blocks.
(default)

create-sections
~~~~~~~~~~~~~~~

Create sections for headers.  (default)

no-sections
~~~~~~~~~~~

Do not create sections for headers.

create-links
~~~~~~~~~~~~

Create links.

no-links
~~~~~~~~

Do not create links.  (default)

endnotes-end-doc
~~~~~~~~~~~~~~~~

Generate endnotes at end of document, not footnotes at bottom of page.

no-endnotes-end-doc
~~~~~~~~~~~~~~~~~~~

Generate footnotes at bottom of page, not endnotes at end of
document. (default)

generate-list-toc
~~~~~~~~~~~~~~~~~

Generate a bullet list table of contents, not an
ODF/``oowriter`` table of contents.

generate-oowriter-toc
~~~~~~~~~~~~~~~~~~~~~

Generate an ODF/``oowriter`` table of contents, not a bullet
list.  (default) **Note:** ``odtwriter`` is not able to
determine page numbers, so you will need to open the generated
document in ``oowriter``, then right-click on the table of
contents and select "Update" to insert page numbers.

custom-odt-header
~~~~~~~~~~~~~~~~~

Specify the contents of a custom header line.  For details about
custom headers and about special field character sequences, see
section "Custom header/footers: inserting page numbers, date,
time, etc" in the `Odt Writer for Docutils`_ document for
details.

custom-odt-footer
~~~~~~~~~~~~~~~~~

Specify the contents of a custom footer line.  For details about
custom footers and about special field character sequences, see
section "Custom header/footers: inserting page numbers, date,
time, etc" in the `Odt Writer for Docutils`_ document for
details.


[pseudoxml writer]
------------------

detailed
~~~~~~~~~

Pretty-print <#text> nodes.

Default:  False.  Option: ``--detailed``.


[applications]
==============

[buildhtml application]
-----------------------

dry_run
~~~~~~~

Do not process files, show files that would be processed.

Default:  False.  Option: ``--dry-run``.

ignore
~~~~~~

List_ of wildcard (shell globing) patterns, specifying files to silently
ignore.  To specify multiple patterns, use colon-separated patterns (in
configuration files or on the command line); on the command line, the
option may also be used more than once.

Default: None.  Option: ``--ignore``.

prune
~~~~~

List_ of directories not to process.  To specify multiple
directories, use colon-separated paths (in configuration files or
on the command line); on the command line, the option may also be
used more than once.

Default: ['.hg', '.bzr', '.git', '.svn', 'CVS'].  Option:
``--prune``.

recurse
~~~~~~~

Recursively scan subdirectories, or ignore subdirectories.

Default: recurse (True).  Options: ``--recurse, --local``.

silent
~~~~~~

Work silently (no progress messages).  Independent of
"report_level".

Default: show progress (None).  Option: ``--silent``.

.. _html_writer:
.. _writer [buildhtml application]:

writer
~~~~~~

`HTML writer`_ version. One of "html", "html4", "html5".

Default: "html" (use Docutils' default HTML writer).
Option: ``--writer``

New in 0.17. Obsoletes the ``html_writer`` option.

.. _HTML writer: html.html


[docutils application]
--------------------------

| New in 0.17. Config file support added in 0.18.
| Renamed in 0.19 (the old name "docutils-cli application" is kept as alias).
| Support for reader/parser import names added in 0.19.

reader
~~~~~~
Reader component name.
One of "standalone", "pep",
or the import name of a drop-in reader module.

Default: "standalone".
Option: ``--reader``

parser
~~~~~~
Parser component name.
Either "rst" (default) or the import name of a drop-in parser module.

Parsers for CommonMark_ known to work with Docutils include "pycmark_",
"myst_", and "recommonmark_".

Default: "rst".
Option: ``--parser``

.. _CommonMark: https://spec.commonmark.org/0.30/


.. _writer [docutils application]:

writer
~~~~~~
Writer component name.
One of "html", "html4", "html5", "latex", "xelatex", "odt", "xml",
"pseudoxml", "manpage", "pep_html", "s5", an alias,
or the import name of a drop-in writer module.

Default: "html5".
Option: ``--writer``


Other Settings
==============

Command-Line Only
-----------------

These settings are only effective as command-line options; setting
them in configuration files has no effect.

config
~~~~~~

Path to a configuration file to read (if it exists). [#pwd]_
Settings may override defaults and earlier settings.  The config
file is processed immediately.  Multiple ``--config`` options may
be specified; each will be processed in turn.

Filesystem path settings contained within the config file will be
interpreted relative to the config file's location (*not* relative
to the current working directory).

Default: None.  Option: ``--config``.


Internal Settings
-----------------

These settings are for internal use only; setting them in
configuration files has no effect, and there are no corresponding
command-line options.

_config_files
~~~~~~~~~~~~~

List of paths of applied configuration files.

Default: None.  No command-line options.

_directories
~~~~~~~~~~~~

(``buildhtml.py`` front end.)  List of paths to source
directories, set from positional arguments.

Default: current working directory (None).  No command-line
options.

_disable_config
~~~~~~~~~~~~~~~

Prevent standard configuration files from being read.  For
programmatic use only.

Default: config files enabled (None).  No command-line options.

_destination
~~~~~~~~~~~~

Path to output destination, set from positional arguments.

Default: stdout (None).  No command-line options.

_source
~~~~~~~

Path to input source, set from positional arguments.

Default: stdin (None).  No command-line options.

--------------------------------------------------------------------------

.. _language tag: https://www.w3.org/International/articles/language-tags/
.. _BCP 47: https://www.rfc-editor.org/rfc/bcp/bcp47.txt
.. _ISO 639: http://www.loc.gov/standards/iso639-2/php/English_list.php
.. _ISO 3166: http://www.iso.ch/iso/en/prods-services/iso3166ma/
   02iso-3166-code-lists/index.html

.. [#pwd] Path relative to the working directory of the process at
   launch.

.. [#override] The overridden setting will automatically be set to
   ``None`` for command-line options and config file settings.  Client
   programs which specify defaults that override other settings must
   do the overriding explicitly, by assigning ``None`` to the other
   settings.


===================================================
Old-Format Configuration Files
===================================================

Formerly, Docutils configuration files contained a single "[options]"
section only.  This was found to be inflexible, and in August 2003
Docutils adopted the current component-based configuration file
sections as described above.
Up to version 2.0, Docutils will still recognize the old "[options]"
section, but complain with a deprecation warning.

To convert existing config files, the easiest way is to change the
section title: change "[options]" to "[general]".  Most settings
haven't changed.  The only ones to watch out for are these:

=====================  =====================================
Old-Format Setting     New Section & Setting
=====================  =====================================
pep_stylesheet         [pep_html writer] stylesheet
pep_stylesheet_path    [pep_html writer] stylesheet_path
pep_template           [pep_html writer] template
=====================  =====================================

.. References

.. _abstract:
.. _bibliographic field list:
.. _bibliographic fields:
   ../ref/rst/restructuredtext.html#bibliographic-fields
.. _block quote: ../ref/rst/restructuredtext.html#block-quotes
.. _citations: ../ref/rst/restructuredtext.html#citations
.. _bullet lists: ../ref/rst/restructuredtext.html#bullet-lists
.. _Docutils Runtime Settings: ../api/runtime-settings.html
.. _enumerated lists: ../ref/rst/restructuredtext.html#enumerated-lists
.. _field lists: ../ref/rst/restructuredtext.html#field-lists
.. _field names: ../ref/rst/restructuredtext.html#field-names
.. _footnotes: ../ref/rst/restructuredtext.html#footnotes
.. _footnote references: ../ref/rst/restructuredtext.html#footnote-references
.. _inline markup recognition rules:
    ../ref/rst/restructuredtext.html#inline-markup-recognition-rules
.. _literal blocks: ../ref/rst/restructuredtext.html#literal-blocks
.. _option lists: ../ref/rst/restructuredtext.html#option-lists
.. _tables: ../ref/rst/restructuredtext.html#tables
.. _table of contents: ../ref/rst/directives.html#contents

.. _Error Handlers:
   https://docs.python.org/3/library/codecs.html#error-handlers


/Part 2. 021.📜 docutils-0.20.1/docs/user/emacs.txt

.. -*- coding: utf-8 -*-

.. .. include:: /docutils-0.20.1/docs/header.txt

========================================
   Emacs Support for reStructuredText
========================================

:Authors: Stefan Merten <stefan@merten-home.de>, Martin Blais
          <blais@furius.ca>
:Version: ``rst.el`` V1.4.1
:Abstract:

    High-level description of the existing Emacs_ support for editing
    reStructuredText_ text documents. Suggested setup code and usage
    instructions are provided.

.. .. contents:: Table of Contents

Introduction
============

reStructuredText_ is a syntax for simple text files that allows a
tool set - docutils_ - to extract generic document structure. For
people who use Emacs_, there is a package that adds a major mode that
supports editing the syntax of reStructuredText_: ``rst.el``. This
document describes the features it provides, and how to setup your
Emacs_ to use them and how to invoke them.

Installation
============

Emacs_ support for reStructuredText_ is implemented as an Emacs_ major
mode (``rst-mode``) provided by the ``rst.el`` Emacs_ package.

Emacs_ distributions contain ``rst.el`` since version V23.1. However,
a significantly updated version of ``rst.el`` is contained in Emacs_
V24.3. This document describes the version of ``rst.el`` contained in
Emacs_ V24.3 and later versions. This version of ``rst.el`` has the
internal version V1.4.1.

If you have Emacs_ V24.3 or later you do not need to install anything
to get reST support. If you have an Emacs_ between V23.1 and V24.2 you
may use the version of ``rst.el`` installed with Emacs_ or install a
more recent one locally_ (recommended). In other cases you need to
install ``rst.el`` locally_ to get reST support.

Checking situation
------------------

Here are some steps to check your situation:

#. In Emacs_ switch to an empty buffer and try ::

     M-x rst-mode

   If this works you have ``rst.el`` installed somewhere. You can see
   that it works if you find a string ``ReST`` in Emacs' modeline of
   the current buffer. If this doesn't work you need to install
   ``rst.el`` yourself locally_.

#. In the buffer you just switched to ``rst-mode`` try ::

     C-h v rst-version

   If this fails you have a version of ``rst.el`` older than
   V1.1.0. Either you have an old ``rst.el`` locally or you are using
   an Emacs_ between V23.1 and V24.2. In this case it is recommended
   that you install a more recent version of ``rst.el`` locally_.

   You may also try ::

     C-h v emacs-version

   to find out your Emacs_ version.

#. Check the version of ``rst.el``

   The content of ``rst-version`` gives you the internal version of
   ``rst.el``. The version contained in Emacs_ V24.3 and described here
   is V1.4.0. If you have an older version you may or may not install
   a more recent version of ``rst.el`` locally_.

.. _locally:

Local installation
------------------

If you decided to install locally please follow these steps.

#. Download ``rst.el``

   Download the most recent published version of ``rst.el`` from
   https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/tools/editors/emacs/rst.el

#. Put ``rst.el`` to a directory in ``load-path``

   Use ::

     C-h v load-path

   If in the resulting list you find a directory in your home
   directory put ``rst.el`` in this directory.

   Make sure the directory is one of the first entries in
   ``load-path``. Otherwise a version of ``rst.el`` which came with
   Emacs_ may be found before your local version.

   In Emacs_ see the info node ``Init File Examples`` for more
   information on how to set up your Emacs_ initialization
   machinery. Try ::

     C-h i
     mEmacs<Return>
     sInit File Examples<Return>

#. Enable ``rst-mode``

   Add the following to your Emacs_ initialization setup ::

     (require 'rst)

   After you restarted Emacs_ ``rst.el`` is loaded and ready to be
   used.

Switching ``rst-mode`` on
-------------------------

By default ``rst-mode`` is switched on for files ending in ``.rst`` or
``.rest``. If in a buffer you want to switch ``rst-mode`` on manually
use ::

  M-x rst-mode

If you want to use ``rst-mode`` in files with other extensions modify
``auto-mode-alist`` to automatically turn it on whenever you visit
reStructuredText_ documents::

   (setq auto-mode-alist
         (append '(("\\.txt\\'" . rst-mode)
                   ("\\.rst\\'" . rst-mode)
                   ("\\.rest\\'" . rst-mode)) auto-mode-alist))

Put the extensions you want in the correct place in the example
above. Add more lines if needed.

If have local variables enabled (try ``C-h v enable-local-variables``
to find out), you can also add the following at the top of your
documents to trigger rst-mode::

   .. -*- mode: rst -*-

Or this at the end of your documents::

   ..
      Local Variables:
      mode: rst
      End:

Key bindings
============

``rst-mode`` automatically binds several keys for invoking special
functions for editing reStructuredText_. Since ``rst-mode`` contains a
lot of functionality most key bindings consist of three
keystrokes.

Following the Emacs_ conventions for major modes the key bindings of
``rst-mode`` start with ``C-c C-<letter>``. The second key stroke
selects a group of key bindings:

C-c C-a
  Commands to adjust the section headers and work with the hierarchy
  they build.

C-c C-c
  Commands to compile the current reStructuredText_ document to
  various output formats.

C-c C-l
  Commands to work with lists of various kinds.

C-c C-r
  Commands to manipulate the current region.

C-c C-t
  Commands to create and manipulate a table of contents.

At any stage of typing you may use ``C-h`` to get help on the
available key bindings. I.e. ``C-c C-h`` gives you help on all key
bindings while ``C-c C-r C-h`` gives you help on the commands for
regions. This is handy if you forgot a certain key binding.

Additional key bindings which have a certain meaning in other Emacs_
modes are reused in ``rst-mode`` so you don't have to learn a
different set of key bindings for editing reStructuredText_.

In ``rst-mode`` try ::

  C-h m

to list all mode specific key bindings. Most of the key bindings are
described in this tutorial.

.. note:: The key bindings have been completely revamped in ``rst.el``
          V1.0.0. This was necessary to make room for new
          functionality. Some of the old bindings still work but give
          a warning to use the new binding. In the output of ``C-h m``
          these bindings show up as ``rst-deprecated-...``. The old
          bindings will be removed completely in a later version.

Section Adornments
==================

``rst-mode`` recognizes the section adornments building the section
hierarchy of the document. Section adornments are the underlines or
under- and overlines used to mark a section title. There are a couple
of commands to work with section adornments. These commands are bound
to key bindings starting with ``C-c C-a``.

Adjusting a Section Title
-------------------------

There is a function that helps a great deal to maintain these
adornments: ``rst-adjust`` (bound to ``C-c C-a C-a``, ``C-c C-=``, and
``C-=``). This function is a Swiss army knife that can be invoked
repeatedly and whose behavior depends on context:

#. If there is an incomplete adornment, e.g. ::

      My Section Title
      ==

   invocation will complete the adornment. It can also be used to
   adjust the length of the existing adornment when you need to edit
   the title.

#. If there is no section adornment at all, by default an adornment of
   the same level as the last encountered section level is added. You
   can simply enter a few characters of the title and invoke the
   function to create the section adornment.

   The variable ``rst-new-adornment-down`` can be customized to create
   one level lower adornments than the previous section title instead
   of keeping the level.

#. If there is already a section adornment, it is promoted one level
   up. You can invoke it like this repeatedly to cycle the title
   through the hierarchy of existing adornments.

Invoking the function with a negative prefix argument, e.g. ``C--
C-=``, will effectively reverse the direction of adornment cycling.
To alternate between underline-only and over-and-under styles, you can
use a regular prefix argument, e.g. ``C-u C-=``. See the
documentation of ``rst-adjust`` for more description of the prefix
arguments to alter the behavior of the function.

Promoting and Demoting Many Sections
------------------------------------

When you are re-organizing the structure of a document, it can be
useful to change the level of a number of section titles. The same
key binding can be used to do that: if the region is active when the
binding is invoked, all the section titles that are within the region
are promoted accordingly (or demoted, with negative prefix argument).

Redoing All the Adornments to Your Taste
----------------------------------------

If you open someone else's file and the adornments it contains are
unfamiliar, you may want to readjust them to fit your own preferred
hierarchy of adornments. This can be difficult to perform by hand.
However, you can do this easily by invoking
``rst-straighten-adornments`` (``C-c C-a C-s``), which operates on the
entire buffer.

Customizations for Adornments
-----------------------------

You can customize the variable ``rst-preferred-adornments`` to a list
of the adornments that you like to use for documents.

If you prefer adornments according to
http://sphinx-doc.org/rest.html#sections you may customize it to end
up with a value like this::

  ((35 over-and-under 0) ; ?#
   (42 over-and-under 0) ; ?*
   (61 simple 0) ; ?=
   (45 simple 0) ; ?-
   (94 simple 0) ; ?^
   (34 simple 0)) ; ?"

This will become the default in a later version of ``rst.el``.

If you set ``rst-preferred-adornments`` to nil resembling the empty
list only the section adornment found in the buffer will be used.

Viewing the Hierarchy of Section Adornments
-------------------------------------------

You can visualize the hierarchy of the section adornments in the
current buffer by invoking ``rst-display-adornments-hierarchy``, bound
on ``C-c C-a C-d``. A temporary buffer will appear with fake section
titles rendered in the style of the current document. This can be
useful when editing other people's documents to find out which section
adornments correspond to which levels.

Movement and Selection
======================

Movement and Selection for Sections
-----------------------------------

You can move the cursor between the different section titles by using
the ``rst-backward-section`` (``C-M-a``) and ``rst-forward-section``
(``C-M-e``). To mark the section that cursor lies in, use
``rst-mark-section`` (``C-M-h``).

The key bindings are modeled after other modes with similar
functionality.

Movements and Selection for Text Blocks
---------------------------------------

The understanding of reStructuredText_ of ``rst-mode`` is used to set
all the variables influencing Emacs' understanding of paragraphs. Thus
all operations on paragraphs work as usual. For instance
``forward-paragraph`` (``M-}``) works as usual.

Indenting and Filling
=====================

Indentation of text plays a major role in the syntax of
reStructuredText_. It is tedious to maintain the indentation
manually. ``rst-mode`` understands most of the structure of
reStructuredText_ allowing for sophisticated indentation and filling
support described in this section.

Indenting Text Blocks
---------------------

``rst-mode`` supports indentation of text blocks by the command
``rst-shift-region`` (``C-c C-r TAB``). Mark a region and use ``C-c
C-r TAB`` to indent all blocks one tab to the right. Use ``M-- C-c C-r
TAB`` to indent the region one tab to the left.

You may use arbitrary prefix arguments such as ``M-2`` or ``M-- 2`` to
determine the number of tabs you want to indent. A prefix of ``M-0``
removes all indentation in the active region.

A tab is an indentation making sense for the block at hand in
reStructuredText_ syntax. In some cases the exact indentation depends
on personal taste. You may customize a couple of variables ``M-x
customize-group<RET> rst-indent<RET>`` to match your taste.

Indenting Lines While Typing
----------------------------

In Emacs_ the ``TAB`` key is often used for indenting the current
line. ``rst-mode`` implements this for the sophisticated indentation
rules of reStructuredText_. Pressing ``TAB`` cycles through the
possible tabs for the current line. In the same manner
``newline-and-indent`` (``C-j``) indents the new line properly.

This is very handy while writing lists. Consider this
reStructuredText_ bullet list with the cursor at ``@``::

  * Level 1

    * Level 2@

Type ``C-j`` twice to get this::

  * Level 1

    * Level 2

      @

Now you an enter text at this level, or start a new list item by
typing another ``*``. Or you may type ``TAB`` to reduce the
indentation once::

  * Level 1

    * Level 2

    @

Typing another ``TAB`` gets you to the first level::

  * Level 1

    * Level 2

  @

.. note:: Since Emacs_ V24.4 ``electric-indent-mode`` is globally on.
          This breaks indentation in ``rst-mode`` and renders
          ``rst-mode`` mostly useless. This is fixed in V1.4.1 of
          ``rst-mode``.

          A quick fix for older versions of ``rst.el`` is to add the
          following line at the end of the ``(define-derived-mode
          rst-mode ...`` block in your copy of ``rst.el``::

            (setq electric-indent-inhibit t)

          You may also install V1.4.1 or newer locally_.

Filling
-------

``rst-mode`` understanding the indentation rules of reStructuredText_
also supports filling paragraphs. Just use ``fill-paragraph``
(``M-q``) as you do in other modes.

Operating on Lists
==================

Lists are supported in various flavors in reStructuredText_.
``rst-mode`` understands reStructuredText_ lists and offers some
support for operating on lists. Key bindings for commands for
operating on lists start with ``C-c C-l``.

Please note that so far definition lists are not explicitly supported
by ``rst-mode``.

Bulleted and Enumerated Lists
-----------------------------

If you have a couple of plain lines you want to turn into an
enumerated list you can invoke ``rst-enumerate-region`` (``C-c C-l
C-e``). For example, the following region ::

  Apples

  Oranges

  Bananas

becomes ::

  1. Apples

  2. Oranges

  3. Bananas

``rst-bullet-list-region`` (``C-c C-l C-b``) does the same, but
results in a bullet list ::

  * Apples

  * Oranges

  * Bananas

By default, each paragraph starting on the leftmost line in the
highlighted region will be taken to be a single list or enumeration
item, for example, enumerating the following::

   An apple a day
   keeps the doctor away.

   But oranges
   are tastier than apples.

   If you preferred bananas
   you may be
   a monkey.

Will result in::

   1. An apple a day
      keeps the doctor away.

   2. But oranges
      are tastier than apples.

   3. If you preferred bananas
      you may be
      a monkey.

If you would like to enumerate each of the lines, use a prefix
argument on the preceding commands, e.g.::

  Apples
  Oranges
  Bananas

becomes::

  * Apples
  * Oranges
  * Bananas

Straightening Existing Bullet List Hierarchies
----------------------------------------------

If you invoke ``rst-straighten-bullets-region`` (``C-c C-l C-s``), the
existing bullets in the active region will be replaced to reflect
their respective level. This does not make a difference in the
document structure that reStructuredText_ defines, but looks better
in, for example, if all of the top-level bullet items use the
character ``-``, and all of the 2nd level items use ``*``, etc.

Inserting a List Item
---------------------

To start a new list you may invoke ``rst-insert-list`` (``C-c C-l
C-i``). You may choose from an item style supported by
reStructuredText_.

You may also invoke ``rst-insert-list`` at the end of a list item. In
this case it inserts a new line containing the markup for the a list
item on the same level.

Operating on Other Text Blocks
==============================

Creating and Removing Line Blocks
---------------------------------

To create line blocks, first select the region to convert and invoke
``rst-line-block-region`` ``C-c C-r C-l``. For example, the following
::

  Apples
  Oranges
  Bananas

becomes ::

  | Apples
  | Oranges
  | Bananas

This works even if the region is indented. To remove line blocks,
select a region and invoke with a prefix argument.

Commenting a Region of Text
---------------------------

``rst-mode`` understands reStructuredText_ comments. Use
``comment-dwim`` (``M-;``) to work on comments as usual::

  Apples
  Oranges
  Bananas

becomes::

  ..
     Apples
     Oranges
     Bananas

To remove a comment you have to tell this to ``comment-dwim``
explicitly by using a prefix argument (``C-u M-;``).

Please note that only indented comments are supported properly by the
parts of ``comment-dwim`` working on regions.

.. _Conversion:

Converting Documents from Emacs
===============================

``rst-mode`` provides a number of functions for running documents
being edited through the docutils tools. The key bindings for these
commands start with ``C-c C-c``.

The main generic function is ``rst-compile`` (``C-c C-c C-c``). It
invokes a compilation command with the correct output name for the
current buffer and then invokes Emacs' compile function. It also looks
for the presence of a ``docutils.conf`` configuration file in the
parent directories and adds it to the command line options. There is also
``rst-compile-alt-toolset`` (``C-c C-c C-a``) in case you often need
run your document in a second toolset.

You can customize the commands being used by setting
``rst-compile-primary-toolset`` and ``rst-compile-secondary-toolset``.

Other commands are available for other formats:

* ``rst-compile-pseudo-region`` (``C-c C-c C-x``)

  When crafting documents, it is often convenient to view which data
  structures docutils will parse them into. You can use to run the
  active region through ``rst2pseudoxml.py`` and have the output
  automatically be displayed in a new buffer.

* ``rst-compile-pdf-preview`` (``C-c C-c C-p``)

  Convert the current document to PDF and launch a viewer on the
  results.

* ``rst-compile-slides-preview`` (``C-c C-c C-s``): Convert the
  current document to S5 slides and view in a web browser.

Imenu Support
=============

Using Imenu
-----------

Emacs_ has a package called ``imenu``. ``rst-mode`` supports Imenu by
adding a function to convert the structure of a reStructuredText_
buffer to an Imenu index. Thus you can use invoke ``imenu`` (``M-x
imenu``) to navigate through the section index or invoke
``imenu-add-to-menubar`` (``M-x imenu-add-to-menubar``) to add an
Imenu menu entry to Emacs' menu bar.

Using which function
--------------------

As a side effect of Imenu support the ``which-func`` package is also
supported. Invoke ``which-function-mode`` (``M-x
which-function-mode``) to add the name of the current section to the
mode line. This is especially useful if you navigate through documents
with long sections which do not fit on a single screen.

Using the Table of Contents
===========================

The sections in a reStructuredText_ document can be used to form a
table of contents. ``rst-mode`` can work with such a table of contents
in various forms. Key bindings for these commands start with ``C-c
C-t``.

Navigating Using the Table of Contents
--------------------------------------

When you are editing long documents, it can be a bit difficult to
orient yourself in the structure of your text. To that effect, a
function is provided that presents a hierarchically indented table of
contents of the document in a temporary buffer, in which you can
navigate and press ``Return`` to go to a specific section.

Invoke ``rst-toc`` (``C-c C-t C-t``). It presents a temporary buffer
that looks something like this::

  Table of Contents:
  Debugging Meta-Techniques
    Introduction
    Debugging Solution Patterns
      Recognize That a Bug Exists
      Subdivide and Isolate
      Identify and Verify Assumptions
      Use a Tool for Introspection
      Change one thing at a time
      Learn about the System
    Understanding a bug
    The Basic Steps in Debugging
    Attitude
      Bad Feelings
      Good Feelings
    References

When you move the cursor to a section title and press ``RET`` or ``f``
or click with ``button1`` on a section title, the temporary buffer
disappears and you are left with the cursor positioned at the chosen
section. Clicking with ``button2`` jumps to the respective section but
keeps the toc buffer. You can use this to look at the various section
headers quickly. Use ``q`` in this buffer to just quit it without
moving the cursor in the original document. Use ``z`` to zap the
buffer altogether.

Inserting a Table of Contents
-----------------------------

Oftentimes in long text documents that are meant to be read directly,
a table of contents is inserted at the beginning of the text. In
reStructuredText_ documents, since the table of contents is
automatically generated by the parser with the ``.. contents::``
directive, people generally have not been adding an explicit table of
contents to their source documents, and partly because it is too much
trouble to edit and maintain.

The Emacs_ support for reStructuredText_ provides a function to insert
such a table of contents in your document. Since it is not meant to
be part of the document text, you should place such a table of
contents within a comment, so that it is ignored by the parser. This
is the favored usage::

  .. contents::
  ..
      1  Introduction
      2  Debugging Solution Patterns
        2.1  Recognize That a Bug Exists
        2.2  Subdivide and Isolate
        2.3  Identify and Verify Assumptions
        2.4  Use a Tool for Introspection
        2.5  Change one thing at a time
        2.6  Learn about the System
      3  Understanding a bug
      4  The Basic Steps in Debugging
      5  Attitude
        5.1  Bad Feelings
        5.2  Good Feelings
      6  References

Just place the cursor at the top-left corner where you want to insert
the TOC and invoke the function ``rst-toc-insert`` with ``C-c C-t
C-i``. The table of contents will display all the section titles that
are under the location where the insertion occurs. This way you can
insert local table of contents by placing them in the appropriate
location.

You can use a numeric prefix argument to limit the depth of rendering
of the TOC.

You can customize the look of the TOC by setting the values of the
following variables: ``rst-toc-indent``, ``rst-toc-insert-style``,
``rst-toc-insert-max-level``.

Maintaining the Table of Contents Up-to-date
--------------------------------------------

One issue is that you will probably want to maintain the inserted
table of contents up-to-date. ``rst-toc-update`` (``C-c C-t C-u``)
will automatically update an inserted table of contents following a
``.. contents::`` directive laid out like the example above.

Syntax Highlighting via Font-Lock
=================================

``rst-mode`` provides syntax highlighting for nearly all to
reStructuredText_ constructs.

Use ``customize-group rst-faces`` to customize the faces used for
font-locking.

Customization
=============

Some aspects of ``rst-mode`` can be configured through the
customization feature of Emacs_. Try ::

  M-x customize-group<RETURN>rst

for all customizations or use the respective menu entry. Those
customizations which are useful for many people are described in this
section.

Customizing Section Title Formatting
------------------------------------

For a couple of things the reStructuredText_ syntax offers a choice of
options on how to do things exactly. Some of these choices influence
the operation of ``rst.el`` and thus can be configured. The
customizations are contained in the ``rst-adjust`` group.

Among these things is the exact layout of section adornments. In fact
reStructuredText_ prescribes only the characters and how these
characters must be used but the exact use of concrete adornments may
be different in every source file. Using the customization option
``rst-preferred-adornments`` you can tell ``rst-mode`` on the exact
sequence of adornments you prefer to markup the different levels of
sections headers.

Finally the title text of over-and-under adornments may be indented in
reStructuredText_. ``rst-default-indent`` tells ``rst-mode`` how many
positions a over-and-under adornment should be indented when toggling
from simple adornment and in case a consistent indentation throughout
the whole buffer for such adornment is needed.

Customizing Indentation
-----------------------

reStructuredText_ uses indentation a lot to signify a certain meaning.
In some cases the exact amount of indentation is prescribed by the
syntax while in some cases the exact indentation is not fixed. The
customization group ``rst-indent`` allows to customize the amount of
indentation in these cases.

In field lists the content of a field needs to be indented relative to
the field label. ``rst-indent-field`` tells ``rst-mode`` the amount of
indentation to use for field content. A value of zero always indents
according to the content after the field label.

The indentation of literal blocks is controlled by
``rst-indent-literal-normal`` and ``rst-indent-literal-minimized``.
The first is used when the leading literal tag (``::``) appears alone
on a line. The second is used when the minimized style is used where
the literal tag follows some text.

The indentation of comments is controlled by ``rst-indent-comment``.
Of course this makes only sense for the indented comments of
reStructuredText_.

Customization option ``rst-indent-width`` gives the default
indentation when there are no other hints on what amount of
indentation to use.

Customizing Faces
-----------------

The faces used for font-locking can be defined in the ``rst-faces``
customization group. The customization options ending in ``-face`` are
only there for backward compatibility so please leave them as they
are.

reStructuredText_ sets no limit on the nesting of sections. By default
there are six levels of fontification defined. Section titles deeper
than six level have no special fontification - only the adornments are
fontified. The exact mapping from a level to a face is done by by
``rst-adornment-faces-alist``, however. So if you need fontification
deeper than six levels you may want to customize this option. You may
also want to customize it if you like the general idea of section
title fontification in ``rst-mode`` but for instance prefer a reversed
order.

Customizing Conversion
----------------------

Conversion_ can be customized by the customization options in the
customization group ``rst-compile``.

If some conversion does not work as expected please check
the variable ``rst-compile-toolsets`` ::

  M-x customize-option<RETURN>rst-compile-toolsets

This variable defines the commands and other details used for
conversion. In case of problems please check that the commands are
either available or customize them to what is available in your
environment.

.. note:: There are some options in V1.4.1 of ``rst.el`` which should
          be customization options but are not yet. Customization
          support will be added in a later version.

.. note:: Please note that there is a package ``rst2pdf`` based on the
          ReportLab library. Please note that the command of this
          package requires an additional ``-o`` for naming the output
          file. This breaks the usual conventions employed by Docutils
          tools. ``rst-mode`` V1.4.1 does not support this directly.

Other Customizations
--------------------

``rst-preferred-bullets`` can be customized to hold your preferred set
of bullets to use for bulleted lists.

``rst-mode-hook`` is a normal major mode hook which may be customized.
It is run if you enter ``rst-mode``.

Related aspects
===============

This section covers some general aspects using Emacs_ for editing
reStructuredText_ source. They are not directly related to
``rst-mode`` but may enhance your experience.

``text-mode`` Settings
----------------------

Consult the Emacs_ manual for more ``text-mode`` customizations. In
particular, you may be interested in setting the following variables,
functions and modes that pertain somewhat to ``text-mode``:

* ``indent-tabs-mode``
* ``colon-double-space``
* ``sentence-end-double-space``
* ``auto-fill-mode``
* ``auto-mode-alist``

Editing Tables: Emacs table mode
--------------------------------

You may want to check out `Emacs table mode`_ to create an edit
tables, it allows creating ASCII tables compatible with
reStructuredText_.

.. _Emacs table mode: http://table.sourceforge.net/

Character Processing
--------------------

Since reStructuredText punts on the issue of character processing,
here are some useful resources for Emacs_ users in the Unicode world:

* `xmlunicode.el and unichars.el from Norman Walsh
  <http://nwalsh.com/emacs/xmlchars/index.html>`__

* `An essay by Tim Bray, with example code
  <http://www.tbray.org/ongoing/When/200x/2003/09/27/UniEmacs>`__

* For Emacs_ users on Mac OS X, here are some useful useful additions
  to your .emacs file.

  - To get direct keyboard input of non-ASCII characters (like
    "option-e e" resulting in "é" [eacute]), first enable the option
    key by setting the command key as your meta key::

        (setq mac-command-key-is-meta t) ;; nil for option key

    Next, use one of these lines::

        (set-keyboard-coding-system 'mac-roman)
        (setq mac-keyboard-text-encoding kTextEncodingISOLatin1)

    I prefer the first line, because it enables non-Latin-1 characters
    as well (em-dash, curly quotes, etc.).

  - To enable the display of all characters in the Mac-Roman charset,
    first create a fontset listing the fonts to use for each range of
    characters using charsets that Emacs_ understands::

      (create-fontset-from-fontset-spec
       "-apple-monaco-medium-r-normal--10-*-*-*-*-*-fontset-monaco,
        ascii:-apple-monaco-medium-r-normal--10-100-75-75-m-100-mac-roman,
        latin-iso8859-1:-apple-monaco-medium-r-normal--10-100-75-75-m-100-mac-roman,
        mule-unicode-0100-24ff:-apple-monaco-medium-r-normal--10-100-75-75-m-100-mac-roman")

    Latin-1 doesn't cover characters like em-dash and curly quotes, so
    "mule-unicode-0100-24ff" is needed.

    Next, use that fontset::

        (set-frame-font "fontset-monaco")

  - To enable cooperation between the system clipboard and the Emacs_
    kill ring, add this line::

        (set-clipboard-coding-system 'mac-roman)

  Other useful resources are in `Andrew Choi's Emacs 21 for Mac OS X
  FAQ <http://members.shaw.ca/akochoi-emacs/stories/faq.html>`__.

Credits
=======

Part of the original code of ``rst.el`` has been written by Martin
Blais and David Goodger and Wei-Wei Guo. The font-locking came from
Stefan Merten.

Most of the code has been modified, enhanced and extended by Stefan
Merten who also is the current maintainer of ``rst.el``.

.. _Emacs: https://www.gnu.org/software/emacs/emacs.html
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _Docutils: https://docutils.sourceforge.io/




..  LocalWords:  reST utf Merten Blais rst el docutils modeline emacs
..  LocalWords:  Init mEmacs sInit alist setq txt overlines RET nd py
..  LocalWords:  dwim conf toolset pseudoxml pdf Imenu imenu menubar
..  LocalWords:  func toc xmlunicode unichars eacute charset fontset
..  LocalWords:  kTextEncodingISOLatin charsets monaco ascii latin
..  LocalWords:  iso unicode Choi's Goodger Guo

..
   Local Variables:
   mode: rst
   indent-tabs-mode: nil
   fill-column: 70
   End:


/Part 2. 022.📜 docutils-0.20.1/docs/user/html.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=====================
Docutils HTML writers
=====================

.. .. contents:: Table of Contents

html
=====================

:front-end: rst2html.py_

`html` is an alias for the default Docutils HTML writer.

The default may change with the development of HTML, browsers, Docutils,
and the web.
Currently, `html` is mapped to html4css1_, it will become an alias for
html5_ in Docutils 2.0.

* Use ``get_writer_by_name('html')`` or the rst2html.py_ front end, if you
  want the output to be up-to-date automatically.

* Use a specific writer name or front end, if you depend on stability of the
  generated HTML code, e.g. because you use a custom style sheet or
  post-processing that may break otherwise.


html4css1
=====================

:aliases:    html4, html_
:front-ends: rst2html4.py, rst2html.py_
:config:     `[html4css1 writer]`_

The HTML Writer module, ``docutils/writers/html4css1.py``, was the first
Docutils writer and up to release 0.13 the only official HTML writer.

The output conforms to the `XHTML 1 Transitional`_ specification. It does
not validate as `HTML 4.01 Transitional`_ due to the closing of empty tags
required in XML but not allowed in HTML 4. However, the output follows the
`HTML Compatibility Guidelines`_ for proper rendering on most HTML user
agents.

Correct rendering depends on a CSS_ style sheet. A reference style sheet,
`html4css1.css`_, is provided and used by default.

To support the `Internet Explorer` (with a market share of about 90% around
2002, the time this writer was written), documents contain some hard-coded
formatting hints and are tagged as "text/html" (instead of
"application/xhtml+xml"). [#IE]_

.. [#IE] Conformance to `CSS 2.1`_ has been added in IE 8 (2009), support
   for XHTML in IE 9 (2011).

.. _rst2html.py: tools.html#rst2html-py
.. _[html4css1 writer]: config.html#html4css1-writer
.. _html4css1.css: ../../docutils/writers/html4css1/html4css1.css

pep_html
----------------------

:front-end: rstpep2html.py_
:config:    `[pep_html writer]`_

This is a special writer for the generation of `Python Enhancement
Proposals`_ (PEPs). It inherits from html4css1_ and adds some `PEP-specific
options`_, a style sheet and template. The front-end uses also a specialised
reader.

.. _rstpep2html.py: tools.html#rstpep2html-py
.. _PEP-specific options:
.. _[pep_html writer]: config.html#pep-html-writer
.. _Python Enhancement Proposals: https://peps.python.org/

s5_html
----------------------

:alias:     s5
:front-end: rst2s5.py_
:config:    `[s5_html writer]`_

The `s5` writer inherits from html4css1_. It produces XHTML for use with
S5_, the “Simple Standards-based Slide Show System” by Eric Meyer.  See
`Easy Slide Shows With reST & S5`_ for details.

.. _rst2s5.py: tools.html#rst2s5-py
.. _[s5_html writer]: config.html#s5-html-writer
.. _Easy Slide Shows With reST & S5: slide-shows.html
.. _S5: http://meyerweb.com/eric/tools/s5/
.. _theme: tools.html#themes


html5
=====================

:aliases: _`html5_polyglot`
:front-end: rst2html5.py_
:config: `[html5 writer]`_

The ``html5_polyglot`` writer generates `polyglot HTML`_ [#]_ output, valid
XML [#safetext]_ that is compatible with `HTML5`_. New features and elements
are used if they are widely supported.
See the `HTML5 test page`_ (and the sources `html5-features.txt`_ and
`html5-text-level-tags.txt`_) for further differences to the html4css1_
writer.

There is no hard-coded formatting information in the HTML document.
Correct rendering of elements not directly supported by HTML depends on a
CSS_ style sheet. The provided style sheet minimal.css_ defines required
styling rules; plain.css_ and responsive.css_ add optional rules for
better legibility. Adaption of the layout is possible with `custom style
sheets`_. [#safetext]_

New in Docutils 0.13

.. [#] see also `Benefits of polyglot XHTML5`_
.. [#safetext] The validity of raw HTML and custom stylesheets must be
   ensured by the author.
.. _HTML5 test page: https://docutils.sourceforge.io/test/functional/
    expected/standalone_rst_html5.html#changes-to-the-html4css1-writer
.. _html5-features.txt: https://docutils.sourceforge.io/test/functional/
    input/data/html5-features.txt
.. _html5-text-level-tags.txt: https://docutils.sourceforge.io/test/functional/
    input/data/html5-text-level-tags.txt
.. _rst2html5.py: tools.html#rst2html5-py
.. _[html5 writer]: config.html#html5-writer
.. _minimal.css: ../../docutils/writers/html5_polyglot/minimal.css
.. _plain.css: ../../docutils/writers/html5_polyglot/plain.css
.. _responsive.css: ../../docutils/writers/html5_polyglot/responsive.css
.. _custom style sheets: ../howto/html-stylesheets.html
.. _viewable with any browser: http://www.anybrowser.org/campaign
.. _Benefits of polyglot XHTML5: http://xmlplease.com/xhtml/xhtml5polyglot/


Overview
=====================

================ =========== ============== ================= ===========
name             aliases     `front-end`_   HTML version      CSS version
================ =========== ============== ================= ===========
html4css1_       html4,      rst2html4.py,  `XHTML 1          `CSS 1`_
                 html_       rst2html.py    Transitional`_

pep_html_        ..          rstpep2html.py `XHTML 1          `CSS 1`_
                                            Transitional`_

s5_html_         s5          rst2s5.py      `XHTML 1          `CSS 1`_
                                            Transitional`_

html5_polyglot_  html5       rst2html5.py   `HTML5`_          `CSS 3`_

================ =========== ============== ================= ===========

For additional alternatives, see the `Docutils link list`__ and the
sandbox_.

__ https://docutils.sourceforge.io/docs/user/links.html
   #website-generators-and-html-variants
.. _sandbox: ../dev/policies.html#the-sandbox


References
=====================

_`HTML5`
   `HTML5, A vocabulary and associated APIs for HTML and XHTML`,
   W3C Recommendation, 28 October 2014.
   https://www.w3.org/TR/2014/REC-html5-20141028/

_`XHTML 1.1`
   `XHTML™ 1.1 - Module-based XHTML - Second Edition`,
   W3C Recommendation, 23 November 2010.
   https://www.w3.org/TR/xhtml11/

_`XHTML 1 Transitional`
   `Transitional version`_ of:
   `XHTML™ 1.0 The Extensible HyperText Markup Language (Second
   Edition)`, `A Reformulation of HTML 4 in XML 1.0`,
   W3C Recommendation, 26 January 2000, revised 1 August 2002.
   https://www.w3.org/TR/xhtml1/

_`XHTML Basic`
   `XHTML™ Basic 1.1 - Second Edition`,
   W3C Recommendation, 23 November 2010.
   https://www.w3.org/TR/xhtml-basic/

.. _transitional version:
   https://www.w3.org/TR/xhtml1/#a_dtd_XHTML-1.0-Transitional

_`HTML 4.01 Transitional`
  Transitional version of:
  `HTML 4.01 Specification`, W3C Recommendation 24 December 1999.
  https://www.w3.org/TR/html4/

.. _`CSS 1`:

_`CSS Level 1`:
  The features defined in the `CSS1 specification`_, but using the syntax
  and definitions in the `CSS 2.1`_ specification.

_`CSS 2.1` `Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification`,
  W3C Recommendation 07 June 2011.
  https://www.w3.org/TR/CSS21/

_`CSS 3`:
  CSS Level 3 builds on CSS Level 2 module by module, using the CSS2.1
  specification as its core.

  Specifications: https://www.w3.org/Style/CSS/specs.en.html

  Validator: http://jigsaw.w3.org/css-validator/

.. other references
   ----------------

.. _HTML Compatibility Guidelines: https://www.w3.org/TR/xhtml1/#guidelines
.. _CSS: https://www.w3.org/TR/CSS/
.. _CSS1 specification: https://www.w3.org/TR/2008/REC-CSS1-20080411/
.. _polyglot HTML: https://www.w3.org/TR/html-polyglot/

   .. Beware. This specification is no longer in active maintenance and the
      HTML Working Group does not intend to maintain it further.

.. Appendix


      On the question of Polyglot markup, there seems to be little
      consensus. One line of argument suggests that, to the extent that it
      is practical to obey the Robustness principle, it makes sense to do
      so. That is, if you're generating HTML markup for the web, and you can
      generate Polyglot markup that is also directly consumable as XML, you
      should do so. Another line of argument suggests that even under the
      most optimistic of projections, so tiny a fraction of the web will
      ever be written in Polyglot that there's no practical benefit to
      pursuing it as a general strategy for consuming documents from the
      web. If you want to consume HTML content, use an HTML parser that
      produces an XML-compatible DOM or event stream.

      -- https://www.w3.org/TR/html-xml-tf-report/#conclusions

  Further development

  On 2016-05-25, David Goodger wrote:

  > In addition, I'd actually like to see the HTML writer(s) with
  > fully-parameterized classes, i.e. removing hard-coded *classes* as well as
  > formatting. This way, any user who wants to (e.g.) write reST for use with
  > Bootstrap can easily work around any naming conflicts.

.. _front-end: tools.html


/Part 2. 023.📜 docutils-0.20.1/docs/user/latex.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

================================
 Generating LaTeX with Docutils
================================

:Author: Engelbert Gruber, Günter Milde
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9124 $
:Date: $Date: 2022-09-13 12:29:51 +0200 (Di, 13. Sep 2022) $
:Copyright: This document has been placed in the public domain.
:Abstract: This document covers topics specific to Docutils' LaTeX_ export.

.. .. contents:: Table of Contents
.. .. sectnum::


LaTeX
=====

LaTeX__, is a document preparation system for high-quality typesetting. It
is most often used for medium-to-large technical or scientific documents but
it can be used for almost any form of publishing. There exists a wide
selection of `LaTeX Documentation on the net`_ and `books on LaTeX and
related topics`_. For an introduction to LaTeX see, e.g., `LaTeX2e for
authors`_.

__ http://www.latex-project.org/
.. _LaTeX2e for authors:
   http://www.latex-project.org/guides/usrguide.pdf
.. _LaTeX Documentation on the net:
   http://www.latex-project.org/guides/
.. _books on LaTeX and related topics:
   http://www.latex-project.org/guides/books.html


.. _LaTeX packages:

LaTeX document classes and packages
-----------------------------------

Unlike HTML with CSS, LaTeX uses one common language for markup and style
definitions. Separation of content and style is realized by collecting style
definitions in LaTeX classes and packages, or the
`document preamble <LaTeX preamble_>`_.

LaTeX document classes and packages (similar to Python modules or C
libraries) provide means to extend or modify the LaTeX language by
redefining macros or providing new ones.

Using the `document class`_ and `style sheet`_ configuration options, you
can select from a *huge* selection of classes and packages (standard as well
as user contributed) coming with your TeX distribution or available at
CTAN_ as well as custom style sheets.

.. _CTAN: http://www.ctan.org


Docutils specific LaTeX macros
------------------------------

Some Docutils objects have no LaTeX counterpart, they will be typeset
using a Docutils specific LaTeX *macro* (command, environment, or
length) to allow customization. By convention, special macros use the
prefix ``\DU``\ [#]_.

The `docutils.sty`_ LaTeX package providing required definitions is
part of Docutils ≥ 0.17 and available on CTAN since 2020-09-04.
The generated LaTeX documents should be kept processable by a standard LaTeX
installation. Therefore fallback definitions are included after the `custom
style sheets`_, if a macro is required in the document and
the `stylesheet`_ setting does not include "docutils".

* Custom `style sheets`_ can define alternative implementations with
  ``\newcommand``, ``\newenvironment``, and ``\newlength`` followed by
  ``\setlength``.

* Definitions with `raw LaTeX`_ are part of the document body. Use
  ``\def``, ``\renewcommand`` or ``\renewenvironment``, and ``\setlength``.

See the test output standalone_rst_latex.tex_ for an example of the fallback
definitions and their use in the document.

.. [#] DU for Documentation Utilities = Docutils

.. _docutils.sty: https://ctan.org/pkg/docutils



Length units
------------

LaTeX supports all `length units`_ defined for Docutils plus the
following less common units:

:pt: typewriter's (or LaTeX) point (1 pt = 1/72.27 in)
:dd: didôt (1 dd = 1238/1157 pt)
:cc: cîcero (1 cc = 12 dd)
:sp: scaled point (1sp = 1/65536pt)

.. attention:: Different definitions of the unit "pt"!

   * In Docutils (as well as CSS) the unit symbol "pt" denotes the
     `Postscript point` or `DTP point`.

   * LaTeX uses "pt" for the `LaTeX point`, which is unknown to Docutils and
     0.3 % smaller.

   * The `DTP point` is available in LaTeX as "bp" (big point):

       1 pt = 1/72.25 in < 1 bp  = 1/72 in

   Lengths specified in the document with unit "pt" will be given the
   unit "bp" in the LaTeX source.

   In `raw LaTeX`_ and `custom style sheets`_, the `DTP point` must be
   specified as "bp", while "pt" is interpreted as `LaTeX point`.

The default length unit (added by Docutils to length specifications
without unit) is the "DTP point".

.. _length units: ../ref/rst/restructuredtext.html#length-units


PDF generation
==============

In most cases, LaTeX code is not the desired end-format of the document.
LaTeX offers many ways to generate PDF documents from the LaTeX
source, including:

_`pdflatex`
  Generates a PDF document directly from the LaTeX file.
  Export your document with the _`LaTeX2e writer` (writer
  name "``latex``", frontend tool rst2latex.py_).

_`xelatex` or _`lualatex`
  The `XeTeX`_ and LuaTeX_ engines work with input files in UTF-8 encoding
  and system fonts. Export your document with the _`XeLaTeX writer` (writer
  name "``xetex``", frontend tool rst2xetex.py_).

You may need to call latex two or three times to get internal references
correct.

.. _documentoptions: config.html#documentoptions
.. _xetex: http://tug.org/xetex/
.. _luatex: http://luatex.org/
.. _rst2latex.py: tools.html#rst2latex-py
.. _rst2xetex.py: tools.html#rst2xetex-py

_`rubber`
  The Rubber__ wrapper for LaTeX and friends can be used to automatically
  run all programs the required number of times and delete "spurious" files.
  This includes processing bibliographic references or indices, as well as
  compilation or conversion of figures.

__ https://gitlab.com/latex-rubber/rubber/


Configuration
=============

.. contents:: :local:

.. _option:

Options/Settings
----------------

Options can be specified as

* command-line options, or

* configuration settings.

Run ``rst2latex.py --help`` to get a list of available options;
see `Docutils Configuration`_ for details.

.. _Docutils Configuration: config.html

Classes
-------

The `"classes" attribute`_ is one of the common attributes, shared by all
Docutils elements.
In HTML, the common use is to provide selection criteria for style rules in
CSS stylesheets. As there is no comparable framework for LaTeX, Docutils
emulates some of this behaviour via `Docutils specific LaTeX macros`_.
Due to LaTeX limitations, class arguments are ignored for
some elements (e.g. a rubric_).

*Inline elements*
  are handled via the ``\DUrole{}`` macro that calls the optional styling
  command ``\DUrole«classargument»`` with one argument (the role content).
  See `custom interpreted text roles`_.

*Block level elements*
  are wrapped in "class environments":
  ``\begin{DUclass}`` calls the optional styling command
  ``\DUCLASS«classargument»{}``, ``\end{DUclass}`` tries
  ``\endDUCLASS«classargument»``.

Customization is done by defining matching macros or environments.

Example 1:
  Use small caps font inside elements with class value "custom".

  *Inline elements*
    The LaTeX function ``\textsc`` sets the argument in small caps::

      \newcommand{\DUrolecustom}[1]{\textsc{#1}}

  *Block-level elements*
    The LaTeX directive (macro without argument) ``\scshape`` switches to
    the small caps font. Its effect is confined to the wrapper ``DUclass``
    environment::

      \newcommand*{\DUCLASScustom}{\scshape}

Example 2:
  It is even possible to locally redefine other LaTeX macros, e.g. to
  turn bullet lists with class value "enumerateitems" into enumerated
  lists::

    \newcommand*{\DUCLASSenumerateitems}{%
      \renewenvironment{itemize}{\begin{enumerate}}%
                                {\end{enumerate}}%
    }

.. rubric:: Notes

* Class arguments may contain numbers and hyphens, which need special
  treatment in LaTeX command names (see `class directive`_). The commands
  ``\csname`` and ``\endcsname`` or the special command ``\@namedef`` can
  help with the definition of corresponding macros or environments, e.g.::

    \expandafter\newcommand\csname gg1\endcsname{Definition of gg1.}

  or ::

    \makeatletter
    \@namedef{DUCLASSadmonition-test}{…}
    \makeatother

* Elements can have multiple class arguments. In contrast to HTML/CSS, the
  order of the class arguments cannot be ignored in LaTeX

* Class handling differs for some elements and class values:

  * Class argument values starting with ``align-`` are transformed to
    "align" argument values. Class argument values starting with
    ``language-`` set the elements language property.

  * The table element recognizes some special class values. See section
    `table style`_.

  * If the legacy-class-functions_ setting is True, the special macros
    ``\DUadmonition`` and ``\DUtitle`` are written with a comma separated
    list of class values as optional argument.

.. _"classes" attribute: ../ref/doctree.html#classes
.. _legacy-class-functions: config.html#legacy-class-functions

LaTeX code
----------

Custom LaTeX code can be placed in `style sheets`_, the
`LaTeX preamble`_, the document body (`raw LaTeX`_), or custom templates_.

The functional tests that come with Docutils, can serve as example.

input:
  standalone_rst_latex.txt_ (includes files from `tests/functional/input/data`_)
expected output:
  standalone_rst_latex.tex_

.. _standalone_rst_latex.txt:
  https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/test/functional/input/standalone_rst_latex.txt
.. _tests/functional/input/data:
  https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/test/functional/input/data
.. _standalone_rst_latex.tex:
   https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/test/functional/expected/standalone_rst_latex.tex


.. _style sheet:
.. _custom style sheets:

Style sheets
----------------------

A common way of LaTeX customization is the preparation of custom style
sheets, either as simple files with LaTeX code snippets or as home-made
`LaTeX packages`_ (see the clsguide_ for an introduction on LaTeX
package writing).

Options:
  stylesheet_

  It is possible to specify multiple style sheets and mix `LaTeX
  packages`_ with custom style sheets.

You cannot specify package options with the stylesheet_ setting. If
you need to pass options to the package, use the ``\usepackage``
command in the `LaTeX preamble`_ or a custom style sheet.

Example 1:
  Select Latin Modern fonts with the `lmodern` package::

    --stylesheet=lmodern

Example 2:
  Use the `preamble.tex` home-made custom style sheet together with
  the package `kerkis` (Bookman fonts)::

    --stylesheet=kerkis,preamble.tex

Example 3:
  Select Palatino fonts with old-style numbers and true small-caps
  with the LaTeX command ::

    \usepackage[osf,sc]{mathpazo}

  in the `LaTeX preamble`_ or `custom style sheets`_.

Stylesheet Repository
  There is a `repository of user-contributed style sheets`_ in the
  Docutils Sandbox_.

.. _clsguide: https://mirrors.ctan.org/macros/latex/base/clsguide.pdf
.. _stylesheet: config.html#stylesheet-latex-writers
.. _embed-stylesheet: config.html#embed-stylesheet-latex-writers
.. _repository of user-contributed style sheets:
   ../../../sandbox/stylesheets/
.. _sandbox: ../../../sandbox/


LaTeX preamble
----------------------

Configuration by LaTeX code in the document preamble is also possible
without a separate stylesheet. This way, packages can be loaded with
options or commands re-defined without the need to create a separate
file (new in Docutils 0.7).

Option:
  latex-preamble_

Default:
  used for `font setup`_

Example:
  To use the better looking ``txtt`` font for monospaced text define the
  latex-preamble_ setting in a configuration file::

     latex-preamble: \renewcommand{\ttdefault}{txtt}
                     \usepackage{mathptmx}          % Times
                     \usepackage[scaled=.92]{helvet}  % Helvetica

.. _latex-preamble: config.html#latex-preamble
.. _PDF standard fonts: https://en.wikipedia.org/wiki/PDF#Standard_Type_1_Fonts
.. _Linux Libertine: http://www.linuxlibertine.org


Templates
----------------------

Some customizations require commands at places other than the insertion
point of stylesheets or depend on the deletion/replacement of parts of the
document. This can be done via a custom template. See the `publisher
documentation`_ for a description of the document parts available in a
template file.

Option:
  template_

In addition to the 'default.tex' template, the latex writer directory
contains the alternatives 'titlepage.tex' (separate title page) and
'titlingpage.tex'" (separate title page with the `memoir`_
`document class`_).

Example:
  Print a title page including docinfo, dedication, and abstract::

    --template=titlepage.tex

.. _publisher documentation: ../api/publisher.html
.. _template: config.html#template-latex-writers

Raw LaTeX
----------------------

By means of the `raw directive`_ or a derived `custom role`_, one can
give commands directly to LaTeX. These can be both, styling as well as
printing commands.

Example:
  Math formula::

    .. raw:: latex

       \[x^3 + 3x^2a + 3xa^2 + a^3,\]

  (Drawback: the formula will be invisible in other output formats. Better
  use the `math directive`_)

Most LaTeX code examples also work as raw LaTeX inside the document.
An exception are commands that need to be given in the document
preamble (e.g. package loading with ``\usepackage``, which can be
achieved with the ``--style-sheet`` or ``--latex-preamble`` command
line options instead). Remember to use *re-defining* commands for
customizing `Docutils specific LaTeX macros`_ with raw LaTeX.

Example:
  Define the transition command as page break::

    .. raw:: latex

      \renewcommand*{\DUtransition}{\pagebreak[4]}

See also:
  * Defining a macro for a `custom role`_.
  * Forcing `page breaks`_.

.. _raw directive: ../ref/rst/directives.html#raw
.. _math directive: ../ref/rst/directives.html#math


How to configure the ...
========================

admonitions
-----------

Admonitions__ are specially marked "topics" that can appear anywhere an
ordinary body element can.

__ ../ref/rst/directives.html#admonitions

Environment:
  ``DUadmonition``

  (Command ``\DUadmonition`` with legacy-class-functions_.)

Default:
  Typeset in a frame (90 % of text width).

The admonition title is typeset with the ``\DUtitle`` command (see `titles`_).

Example 1:
  A lighter layout without the frame::

    \newenvironment{DUadmonition}%
      {\begin{quote}}
      {\end{quote}}

Example 2:
  Print all admonitions in the margin::

    \usepackage{environ}
    \NewEnviron{DUadmonition}{\marginpar{\BODY}}

Example 3:
  Use the ``.. note::`` admonition for a margin note::

    \usepackage{environ}
    \newcommand{\DUCLASSnote}{%
      \RenewEnviron{DUadmonition}{\marginpar{\BODY}}%
      \renewcommand{\DUtitle}[1]{}% suppress title ("Note")
    }

.. caution:: Make sure there is enough space in the margin.
   ``\marginpar`` fails in some places or with some content. See also the
   environ_ and marginnote_ packages.

.. _environ: https://ctan.org/pkg/environ
.. _marginnote: https://ctan.org/pkg/marginnote


.. _custom role:

custom interpreted text roles
-----------------------------

The rst `role directive`_ allows defining custom `text roles`_ that mark
parts of inline text (spans) with class arguments (see section classes_).

Commands:
  ``\DUrole``: dispatcher command

  ``\DUrole«classargument»``: optional styling command with 1 argument (the
  role content).

Default:
  The default definition of ``\DUrole{«classargument»}{}`` calls the macro
  named ``\DUrole«classargument»{}`` if it is defined and silently ignores
  this class argument if not.

Example 1:
  Typeset text in small caps::

    .. role:: smallcaps

    :smallcaps:`Fourier` transformation

  This is transformed to the LaTeX code::

    \DUrole{smallcaps}{Fourier} transformation

  The definition ::

    \newcommand{\DUrolesmallcaps}{\textsc}

  as `raw LaTeX`_ or in the custom `style sheet`_ will give the expected
  result (if the text font_ supports small caps).

Example 2:
  Subscript text in normal size and *italic* shape::

  .. role:: sub(subscript)

  As "sub" inherits from the standard "subscript" role, the LaTeX macro
  only needs to set the size and shape::

    \newcommand{\DUrolesub}{\normalsize\itshape}

Example 3:
  A role with several classes and a converted class name::

    .. role:: custom4
       :class: argI argII arg_3

  is translated to the nested commands::

    \DUrole{argi}{\DUrole{argii}{\DUrole{arg-3}{<content>}}}

  With the definitions::

    \newcommand{\DUroleargi}[1]{\textsc}
    \newcommand{\DUroleargii}[1]{{\large #1}}
    \makeatletter
    \@namedef{DUrolearg-3}{\textbf}
    \makeatother

  in a `style sheet`_\ [#]_ or as `raw LaTeX`_ in the document source,
  text styled with ``:custom4:`large bold small-caps``` will be typeset
  accordingly.

.. [#] Leave out the ``\makeatletter`` - ``\makeatother`` pair if the style
   sheet is a LaTeX package (``*.sty``).

.. _role directive: ../ref/rst/directives.html#role
.. _text roles: ../ref/rst/roles.html
.. _class directive: ../ref/rst/directives.html#class

definition lists
----------------

ReStructuredText `definition lists`__ correspond to HTML ``<dl>`` list
objects.

Environment:
  ``description``: LaTeX standard environment

Command:
  ``\descriptionlabel``: styling macro for the description term

Default:
  bold label text, hanging indent

Example:
  A non-bold label can be achieved with::

    \renewcommand\descriptionlabel[1]{\hspace\labelsep \normalfont #1}

__ ../ref/rst/restructuredtext.html#definition-lists


document class
--------------

There are hundreds of LaTeX document classes installed by modern
LaTeX distributions, provided by publishers, or available at CTAN_.

Popular document classes:
  * article, report, book: standard document classes
  * scrartcl, scrrprt, scrbook: KOMA-script_ classes
  * memoir_: highly configurable class for larger documents

Option:
  documentclass_

.. _KOMA-script: https://ctan.org/pkg/koma-script
.. _memoir: https://ctan.org/pkg/memoir
.. _documentclass: config.html#documentclass


document info
-------------

Content of the `bibliographic fields`__ at the top of a document.
By default, docinfo items are typeset as a table.

Options:
  use-latex-docinfo_, use-latex-abstract_

Length:
  ``\DUdocinfowidth``: the width for the `docinfo` table.

Default:
  90 % of text width: ``0.9\textwidth``

Example:
  set to 70 % of text width::

    \newlength{\DUdocinfowidth}
    \setlength{\DUdocinfowidth}{0.7\textwidth}

__ ../ref/rst/restructuredtext.html#bibliographic-fields

.. _use-latex-docinfo: config.html#use-latex-docinfo
.. _use-latex-abstract: config.html#use-latex-abstract


document title
--------------

A lone top-level section title is (usually) transformed to the document title
(see `section structure`_).

The format of the document title is defined by the `document class`_. The
"article" document class uses an in-page title and the "report" and "book"
classes write a separate title page. See the `TeX FAQ`_ on how to customize
the `style of document titles`_.

The default title page shows only title and subtitle, date and author
are shown in the `document info`_ table.

Options:
  use-latex-docinfo_

  ``--template=titlepage.tex`` Put docinfo and abstract into the title page.
  A separate title page is used also with the "abstract" document class.

.. _section structure: rst/quickref.html#section-structure
.. _TeX FAQ: http://www.tex.ac.uk/faq
.. _style of document titles:
   http://www.tex.ac.uk/cgi-bin/texfaq2html?label=titlsty


field lists
-----------

`Field lists`__ may be used as generic two-column table constructs in
documents.

Environment:
   ``DUfieldlist``

Default:
   Indented description list.

Example:
   Use a description list customized with enumitem_::

     \usepackage{enumitem}
     \newenvironment{DUfieldlist}%
       {\description[font=,style=sameline,leftmargin=8em]}
       {\enddescription}
     }

   The `KOMA-script`_ classes provide a similar environment under the name
   `labeling`.

.. _enumitem: https://ctan.org/pkg/enumitem
__ ../ref/rst/restructuredtext.html#field-lists


figure and table captions
-------------------------

The caption_ package provides many ways to customise the captions in
floating environments like figure and table.

The chngcntr_ package helps to configure the numbering of figure and table
caption numberings.

Some document classes (e.g. KOMA-script_) provide additional configuration.
Also see the related `LaTeX FAQ entry`__

Example
  ::

    \usepackage{caption}
    \captionsetup{justification=raggedleft,singlelinecheck=false}

.. _caption: https://ctan.org/pkg/caption
.. _chngcntr: https://ctan.org/pkg/chngcntr
__ http://www.tex.ac.uk/cgi-bin/texfaq2html?label=running-nos


figure placement
----------------

Figures_ might be typeset at the place of definition (default) or "float"
to a suitable place at the top or bottom of a page. This is implemented
using the float_ package.

Command:
  ``\floatplacement``

The placement setting is valid from the point of definition until the next
``\floatplacement`` command or the end of the document. See float.pdf_ for
details.

Default:
  ``\floatplacement{figure}{H}`` (here definitely). This corresponds most
  closely to the source and HTML placement (principle of least surprise).

Example 1:
  In a custom `style sheet`_, set the default to let LaTeX find a suitable
  place for figure floats::

    \usepackage{float}
    \floatplacement{figure}{htbp} % here, top, bottom, extra-page

Example 2:
  To move all following figures to the top or bottom of the page write in
  the document source::

    .. raw:: latex

        \floatplacement{figure}{tb}

.. _figures: ../ref/rst/directives.html#figure
.. _float: https://ctan.org/pkg/float
.. _float.pdf: https://mirrors.ctan.org/macros/latex/contrib/float/float.pdf


.. _font setup:

font
----

The selected text font influences the *look*, the *feel*,
and the *readability* of the document (cf.
http://www.csarven.ca/web-typography).
Selecting a suitable font also solves the problem with `bad looking
PDF output`_.

Font selection is one of the main differences between LaTeX and XeTeX/LuaTeX:

LaTeX
  cannot use the fonts of the operating system directly but needs
  specially installed fonts with additional supporting files.

XeTeX/LuaTeX
  can use system fonts and provides access to the full feature set of
  modern OpenType_ fonts.

.. _OpenType: https://en.wikipedia.org/wiki/OpenType

The default font setup is done in the latex-preamble_:

LaTeX
  `PDF standard fonts`_ (Times, Helvetica, Courier)

XeTeX/LuaTeX
  `Linux Libertine`_, a free, high quality alternative to Times with a
  wide coverage of glyphs, styles, and OpenType features.

  Despite its name, Linux Libertine can be used on any operating
  system that can handle OpenType fonts.

Alternative fonts can be selected by

LaTeX
  a) specifying the corresponding LaTeX package(s) as argument to the
     stylesheet_ option_ or with the ``\usepackage`` LaTeX command.

     * packages can be combined,
     * passing options to a package is only possible in a `style sheet`_
       or the `LaTeX preamble`_.

  b) changing the font-default macros ``\rmdefault``, ``\sfdefault``
     and/or ``\ttdefault`` in a custom `style sheet`_, the `LaTeX
     preamble`_ or `raw LaTeX`_.

  Example 1:
    Use `Latin Modern`_. `LaTeX code`_::

      \usepackage{lmodern}

    Command line argument::

      --stylesheet=lmodern

  Example 2:
    The _`Times/Helvetica/Courier` `PDF standard fonts`_ are
    selected by the LaTeX code [#]_::

      \usepackage{mathptmx}            % Times for serif and math
      \usepackage[scaled=.90]{helvet}  % downscaled Helvetica for sans serif
      \usepackage{courier}             % Courier for teletype (mono-space)

    Since Docutils 0.7, this is the default value of the
    `latex-preamble`_ option.

  .. [#] When generating PDF-files from LaTeX, the `PDF standard
     fonts`_ do not need to be embedded in the document. While this
     results in smaller files, the actually used fonts on screen and in
     print might differ! (For details see, e.g., the testflow_ package
     documentation.)


  Example 3:
    Use the teletype font from the txfonts_ package. As there is no
    package for this, we re-define the font macro with the `LaTeX code`_::

      \renewcommand{\ttdefault}{txtt}


XeTeX/LuaTeX
  using the macros of the fontspec_ package. Use some font-viewer or
  -manager (e.g. fontmatrix_) to find out the correct names of the
  fonts on your system.

  Example:
    DejaVu_, very wide coverage, screen optimized. As this font
    runs wide, add ``DIV=10`` to the `documentoptions`_::

      \setmainfont{DejaVu Serif}
      \setsansfont{DejaVu Sans}
      \setmonofont[HyphenChar=None]{DejaVu Sans Mono}

.. _fontspec: https://ctan.org/pkg/fontspec
.. _fontmatrix: http://fontmatrix.net/
.. _DejaVu: http://dejavu-fonts.org/
.. _documentoptions: config.html#documentoptions

choice of suitable fonts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

High quality free fonts suitable for use with XeTeX/LuaTeX are, e.g., listed
at `Good Libre Fonts`_, `25 Best Free Quality Fonts`_ and the update
`19 More Free Quality Fonts`_.

The `LaTeX Font Catalogue`_ provides information and examples for a wide
range of fonts available for use with LaTeX. Here is just a selection:

a) The `Latin Modern`_ (LM) fonts are extended outline versions of the
   standard TeX font Computer Modern (CM).

   +1  simple invocation:  ``--stylesheet=lmodern``

   +1  keeps the traditional TeX "look and feel":

       +1  generally accepted as high quality CM replacement,
       +1  comprehensive math support,
       +1  including optical sizes,
       +1  compatible with extensions made to match CM,
       -1  modern types are hard to read at low (screen) resolutions.

   -1  not part of a minimal standard TeX installation

b) CM-Super_ is another outline CM replacement.

   +1  simple invocation: modern LaTeX distributions use CM-Super
       automatically instead of CM if it is installed.

   -1  said to be of inferior quality compared to LM.

   -1  not part of a minimal standard TeX installation,
       bigger download size than Latin Modern (64 MB).

c) `Bera`_ (Bitstream Vera)

   +1  simple invocation:  ``--stylesheet=bera``

   +1  optimized for on-screen viewing with goot hinting

   -1  not part of a minimal standard TeX installation

d) PSNFSS_ Postscript fonts

   +1  part of every standard TeX installation

   +1  smaller PDF/Postscript document size if standard fonts are not
       embedded

   -1  restricted set of glyphs in the free versions [#]_

   -1  different fonts for roman, sans-serif and typewriter fonts.

   -1  invocation somewhat more complex, as several packages are
       required for a complete font set, sometimes including package
       options.

   Roman (serif) PSNFSS fonts:

   Bookman
     good legibility but very wide.

   Charter
     bread-and-butter type optimized for printing on low-resolution
     printers

   New Century Schoolbook
     good legibility but very wide.

   Palatino
     +1  recommended by font experts
     +1  good LaTeX support including matching math fonts, small caps,
           old-style figures
     -1  bad rendering in xpdf viewer (auto-hinting leads to different
         x-hight for different characters at some magnifications)
         (this is fixed in recent versions).

   Times
     +1  the serif `PDF Standard Font`_,
     -1  overused and quite narrow (devised for multi-column layouts).

   Utopia
     recommended by font experts


   .. table:: Font packages for standard Postscript fonts
              (cf. `Using common Postscript fonts with LaTeX`_)

     ========= ============ ============= ============= =========
     Package   Roman        Sans Serif    Typewriter    Math
     ========= ============ ============= ============= =========
     (none)    CM Roman     CM Sans Serif CM Typewriter CM Math

     mathpazo  Palatino                                 Palatino

     mathptmx  Times                                    Times

     helvet                 Helvetica

     avant                  Avant Garde

     courier                              Courier

     chancery  Zapf
               Chancery

     bookman   Bookman      Avant Garde   Courier

     newcent   New Century  Avant Garde   Courier
               Schoolbook

     charter   Charter

     utopia    Utopia

     fourier   Utopia                                   Fourier
     ========= ============ ============= ============= =========

.. [#] Extended versions of the standard Postscript fonts including
       accented chars, as well as real small-caps
       and old-style numbers are available with the `TeX Gyre`_ bundle
       which is part of, e.g., `TeX Live`_.


.. _LaTeX Font Catalogue: http://www.tug.dk/FontCatalogue/
.. _Latin Modern: https://ctan.org/pkg/lm
.. _CM-Super: https://ctan.org/pkg/cm-super
.. _bera: https://ctan.org/pkg/bera
.. _TeX Gyre: http://www.gust.org.pl/projects/e-foundry/tex-gyre
.. _PSNFSS: https://ctan.org/pkg/psnfss
.. _Using common PostScript fonts with LaTeX:
   https://mirrors.ctan.org/macros/latex/required/psnfss/psnfss2e.pdf
.. _TeX Live: http://tug.org/texlive/
.. _txfonts: https://ctan.org/pkg/txfonts
.. _PDF Standard Font:
   https://en.wikipedia.org/wiki/PDF#Standard_Type_1_Fonts
.. _testflow:
   http://www.tex.ac.uk/tex-archive/help/Catalogue/entries/testflow.html
.. _Good Libre Fonts: http://typophile.com/node/18207
.. _25 Best Free Quality Fonts:
   http://www.alvit.de/blog/article/20-best-license-free-official-fonts
.. _19 More Free Quality Fonts:
   http://www.smashingmagazine.com/2006/10/11/17-more-free-quality-fonts/


font encoding
-------------

LaTeX font encodings are described in detail in the encguide_ which is
part of the LaTeX base documentation.

Option:
  font-encoding_

Default:
  "T1"

Example 1:
  Use the (obsolete) LaTeX default encoding "OT1"::

    --font-encoding=OT1

  or (without loading the fontenc_ package)::

    --font-encoding=""

  This will improve the look on screen with the default Computer Modern
  fonts at the expense of problems with `search and text extraction`_
  The recommended way is to select a T1-encoded "Type 1" (vector)
  font, for example `Latin Modern`_

Example 2:
  Support for characters in the Unicode blocks Latin, Latin-1 Supplement,
  and Greek together with a T1-encoded "Type 1" (vector) font, for example
  `Latin Modern`_::

    --font-encoding=LGR,T1 --stylesheet=lmodern

.. _encguide: https://mirrors.ctan.org/macros/latex/base/encguide.pdf
.. _font-encoding: config.html#font-encoding
.. _fontenc: https://ctan.org/pkg/fontenc


font size
---------

Add font size in points to the document options, e.g.
``--documentoptions=12``, use e.g. the document classes provided by
extsizes_ for values other than [10,11,12].

.. _extsizes: https://ctan.org/pkg/extsizes


footnotes
---------

By default, footnotes are set with Docutils-specific wrappers around
the standard ``\footnotemark`` and ``\footnotetext`` commands.  You
can configure the footnote layout similar to standard LaTeX footnotes
in a custom `style sheet`_ or the `LaTeX preamble`_.

Further configuration is possible by alternative definitions of
``\DUfootnotemark`` and ``\DUfootnotetext``

Example 1:
  Set footnote text with a hanging indent.

  * This is the default with KOMA-script_ classes, e.g::

      --documentclass=scrartcl

    (for further configuration, see the `KOMA-script Guide`_),

  * with package footmisc_::

      \usepackage[hang]{footmisc}
      \setlength{\footnotemargin}{0em}

    (play with the ``\footnotemargin`` setting),

  * redefine ``\DUfootnotetext`` inserting `\hangindent`::

      \newcommand{\DUfootnotetext}[4]{%
        \begingroup%
        \renewcommand{\thefootnote}{%
          \protect\raisebox{1em}{\protect\hypertarget{#1}{}}%
          \protect\hyperlink{#2}{#3}}%
          \footnotetext{\hangindent=2em #4}%
        \endgroup%
      }

    (adapt the ``\hangindent`` value).

Example 2:
  Footnote marks in normal font size, not superscript::

    \usepackage{scrextend} % not required with KOMA-script document classes
    \deffootnote{1em}{1em}{\thefootnotemark\ }

  (See the `KOMA-script Guide`_ for details and other options.)

Example 3:
  Place the footnote text where it appears in the source document (instead
  of at the page bottom). This can be used to get the effect of endnotes
  (needs the hanging_ package)::

     \usepackage{hanging}
     \newcommand{\DUfootnotetext}[4]{%
       \par\noindent\raisebox{1em}{\hypertarget{#1}{}}%
       \hyperlink{#2}{#3}%
       \hangpara{\parindent}{1}#4%
     }

.. _footmisc: https://ctan.org/pkg/footmisc
.. _hanging: https://ctan.org/pkg/hanging


hyphenation
-----------

The amount of hyphenation is influenced by ``\hyphenpenalty``, setting it to
10000 almost prevents hyphenation. As this produces lines with more space
between words one should increase Latex's ``\tolerance`` for this.

Example:
  ::

    \hyphenpenalty=5000
    \tolerance=1000


hyperlinks
----------

Options:
  hyperlink-color_, hyperref-options_

Hyperlinks are realized using the hyperref_ package. As it re-defines many
standard LaTeX macros, this package is loaded last, *after* the style
sheets.

However, you can load hyperref before a package that requires its
presence in a `style sheet`_ or the `LaTeX preamble`_ (see example
below). This will ignore options set with hyperlink-color_ and
hyperref-options_.

URLs are typeset with the "url" package (loaded implicitly by "hyperref").
The font of URLs can be defined with the ``\urlstyle`` command. Valid
arguments are

:same:  normal text font, Docutils default,
:tt:    teletype (monospaced), LaTeX default,
:rm:    roman,
:sf:    sans serif

Example:
  Custom loading of the hyperref package also switches to
  the LaTeX default (monospaced fonts for URLs). Reset to use the text
  font::

   \usepackage[unicode,colorlinks=true,linkcolor=green]{hyperref}
   \urlstyle{same}

See also `non-breaking hyperlinks`_.

.. _hyperlink-color: config.html#hyperlink-color
.. _hyperref-options: config.html#hyperref-options


disable hyperlinks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To suppress the hyper-linking completely (e.g. for printing or to
avoid clashes with other packages), set hyperref-options_ to "draft"
or load the "nohyperref" package that comes with the "hyperref"
bundle.

Option:
  ``--hyperref-options=draft``

`LaTeX code`_::

  \usepackage{nohyperref,url}
  \urlstyle{same}

.. _hyperref: https://ctan.org/pkg/hyperref


language
--------

The global document language can be set with the language-code_
configuration setting. The language of text parts can be set adding the
language tag prefixed by "language-" to an element's classes_
attribute, e.g. ``language-el`` for a Greek text part.

.. _language-code: config.html#language-code


line blocks
-----------

In `line blocks`__, newlines and leading whitespace are respected.

Environment:
  ``DUlineblock``: special list environment for line blocks

Length:
  ``\DUlineblockindent``: indentation of indented lineblock parts.

Default:
   2.5 times the font height: ``2.5em``

Example:
  set to the paragraph indentation::

    \newlength{\DUlineblockindent}
    \setlength{\DUlineblockindent}{\parindent}

__ ../ref/rst/restructuredtext.html#line-blocks


line spacing
------------

Commands:
  ``\linespread``: for small adjustments

  ``\singlespacing``, ``\onehalfspacing``, and ``\doublespacing``: from
  package `setspace`

Example 1:
  Get document wide double spacing::

    \usepackage{setspace}
    \doublespacing

Example 2:
  Increase line spacing by five percent for better readability::

    \linespread{1.05}


literal blocks
--------------

No markup processing is done within a `literal block`__. It is left as-is,
and is typically rendered in a monospaced typeface

Option:
  literal-block-env_

Example:

  ``--literal-block-env=lstlisting``

  The ``lstlisting`` environment is highly configurable (as documented in
  listings.pdf_) and provides syntax highlight for many programming languages,
  for instance ::

    \renewcommand{\ttdefault}{txtt}
    \lstset{language=Python, morekeywords=[1]{yield}}
    \lstloadlanguages{Python}
    \lstset{
      basicstyle=\ttfamily,
      keywordstyle=\bfseries,
      commentstyle=\rmfamily\itshape,
      stringstyle=\slshape,
    }
    \lstset{showstringspaces=false}
    \lstset{columns=fullflexible,
         basewidth={0.5em,0.4em}}

  and to get LaTeX syntax highlight for a code block with "listings"::

    \lstloadlanguages{[LaTeX]TeX} %  comma separated list of languages
    \newcommand{\DUCLASSlatex}{\lstset{language=[LaTeX]TeX}}

  The indentation of literal blocks can be reset with ::

    \lstset{resetmargins=true}

  and/or configured with e. g.::

    \lstset{xleftmargin=-2em}

__ ../ref/rst/restructuredtext.html#literal-blocks
.. _literal-block-env: config.html#literal-block-env
.. _listings.pdf:
   https://mirrors.ctan.org/macros/latex/contrib/listings/listings.pdf


lists
-----

Remove extra vertical whitespace between items of bullet lists and
enumerated lists.

Example:
  Pass the class argument "compact" to the list::

    .. class:: compact

    * first item
    * second item

  The following lines for the `LaTeX preamble`_ use the enumitem_ package to
  remove spacing from all lists with class argument "compact"::

    \usepackage{enumitem}
    \newcommand*{\DUCLASScompact}{\setlist{noitemsep}}


list of figures/tables
----------------------

Docutils does not support lists of figures or tables.

However, with LaTeX, they can be generated using `raw LaTeX`_ in the
document source.

Commands:
  ``\listoffigures``: a list of figures

  ``\listoftables``: a list of tables

Example:
  ::

    .. raw:: latex

       \listoffigures


option list
-----------

`Option lists`__ are two-column lists of command-line options and
descriptions, documenting a program's options.

Environment:
  ``DUoptionlist``: environment for option lists,

Command:
  ``\DUoptionlistlabel``: set appearance of the options

Example:
  set command options with a bold monospace font::

    \newcommand{\DUoptionlistlabel}{\texttt{\textbf{#1}} \hfill}

__ ../ref/rst/restructuredtext.html#option-lists


page breaks
-----------

* Page breaks before top-level sections are the default with a
  documentclass that provides "chapters", e.g.  "book", "memoir" or
  "scrbook".

* Redefining the \section or \section* command in a
  style sheet is possible too.

* `Raw LaTeX`_ or a `custom role`_ can be used.

* The transition element can be re-defined to produce a page break,

Commands
  ``\newpage``:  hard pagebreak at exactly this position

  ``\pagebreak[2]``: recommended page break after line end (precedence 1...4)

Example:
  Define the transition command as page break with the `LaTeX code`_::

    \newcommand*{\DUtransition}{\pagebreak[4]}

  (use ``\renewcommand`` with `raw LaTeX`_).

page layout
-----------

By default, paper size and margin settings are determined by the document
class.

The following packages help to configure the page layout:

a) The `typearea`_ package (part of the `KOMA-script`_ bundle) calculates a
   *good* page layout (based on rules and recommendations of typography
   experts).

   See the `KOMA-Script Guide`_ for details on what is a *good* layout and
   how this is achieved.

b) The `geometry`_ package is recommended if you have to follow guidelines
   with fixed values for the margins.
   For details see the `geometry manual`_.

Example 1:
  Let `typearea` determine the type area with ``DIV=calc`` in the
  documentoptions::

    --documentoptions='a4paper,DIV=calc'

  The ``DIV`` option can also be specified, like ``DIV=10``. It defines how
  "crowded" a page will be: larger values mean larger text area (at the
  expense of readability).

Example 2:
  `LaTeX code`_ to set margins with the geometry_ package::

    \usepackage{geometry}
    \geometry{hmargin={3cm,0.8in},height=8in}
    \geometry{height=10in}.

.. _typearea: https://ctan.org/pkg/typearea
.. _geometry: https://ctan.org/pkg/geometry
.. _KOMA-Script Guide:
   https://mirrors.ctan.org/macros/latex/contrib/koma-script/doc/scrguien.pdf
.. _geometry manual:
   https://mirrors.ctan.org/macros/latex/contrib/geometry/geometry.pdf


page headers and footers
------------------------

With the fancyhdr_ package or the `KOMA-script`_ classes, you can define
custom page head- and foot-lines.

The `"header" and "footer" directives`_ save their content in the macros
``\DUheader`` rsp. ``\DUfooter``. The macros can be used in LaTeX code and
will be replaced by LaTeX with the content of the directives.

Example:
  `LaTeX code`_ to place left-aligned "header" and "footer" on every
  page with fancyhdr_::

    \usepackage{fancyhdr}
    \fancyhead[L]{\DUheader}
    \fancyfoot{} % reset
    \fancyfoot[L]{\DUfooter}
    \pagestyle{fancy}


.. _fancyhdr: http://www.ctan.org/pkg/fancyhdr
.. _"header" and "footer" directives: ../ref/rst/directives.html#header


page numbering
--------------

Example:
  Number pages by chapter (using the chappg_ package)::

    \usepackage{chappg}

  See the `chappg documentation`_ for details.

.. _chappg: https://ctan.org/pkg/chappg
.. _chappg documentation:
   https://mirrors.ctan.org/macros/latex/contrib/chappg/chappg.pdf


paper size
----------

Paper geometry can be changed using ``--documentoptions`` or with the
`geometry`_ package.

`LaTeX code`_::

  \usepackage{geometry}
  \geometry{OPTIONLIST}

Default:
  a4paper

Some possibilities:

* a4paper, b3paper, letterpaper, executivepaper, legalpaper
* landscape, portrait, twoside.

Example:
  Choose A5 pager in landscape orientation with command line argument::

    --documentoptions=a5paper,landscape

  The same with LaTeX commands in the `style sheet`_::

    \usepackage{geometry}
    \geometry{a5paper,landscape}

  For details see the `geometry manual`_.

paragraph indent
----------------

Default (in most document classes):
  Indent the first line in a paragraph unless it is the first line of a
  chapter, section, subsection, or subsubsection.

Example 1:
  To set paragraph indentation to zero but add a vertical space between
  load the `parskip` package with the command line argument::

    --stylesheet=parskip

  or in a custom `style sheet`_ with::

    \usepackage{parskip}

Example 2:
  To suppress the indentation of a specific paragraph, you may give it the
  class "noindent" with, e.g. ::

    .. class:: noindent

    This paragraph should not be indented.

  and define the `custom role`_ command::

    \newcommand{\DUrolenoindent}[1]{\noindent #1}

rubric
------

A rubric__ is like an informal heading that doesn't correspond to the
document's structure.

Command:
  ``\DUrubric``

Default:
  subsubsection style (unnumbered), italic

Example1:
  Set centred and red::

    \newcommand*{\DUrubric}[1]{%
       \subsubsection*{\centerline{\color{red}#1}}}

.. note::
  Class attribute values are ignored because the "classes_ wrapper"
  interferes with LaTeX's formatting (spacing/indentation) of text following
  a section heading. Consider using a `topic element`_ or a container_.

__ ../ref/rst/directives.html#rubric
.. _container: ../ref/rst/directives.html#container

section headings
----------------

Options: documentclass_, use-part-section_

Section headings are converted into LaTeX macros according to their level,
the document class and the value of the use-part-section_ setting:

=====  =============  ================== =============  ==============
Level  article        article with part  book [#]_      book with part
=====  =============  ================== =============  ==============
  1    section        part               chapter        part
  2    subsection     section            section        chapter
  3    subsubsection  subsection         subsection     section
  4    paragraph      subsubsection      subsubsection  subsection
  5    subparagraph   paragraph          paragraph      subsubsection
  6    DUtitle        subparagraph       subparagraph   paragraph
  7    DUtitle        DUtitle            DUtitle        subparagraph
=====  =============  ================== =============  ==============


.. [#] One of the document classes 'book', 'memoir', 'report 'scrbook',
       or 'scrreprt'.

.. _use-part-section: config.html#use-part-section

section numbering
-----------------

Sections are numbered if there is a `sectnum directive`_ in the document.

Option: sectnum_xform_
  ``--section-numbering``, ``--no-section-numbering``

If sectnum_xform_ is False, section numbers are generated by LaTeX. In this
case the "prefix" and "suffix" arguments of the `sectnum directive`_ are
ignored. The section number style is determined by the `document class`_
and can be configured in a LaTeX `style sheet`_, e.g.::

  \setcounter{secnumdepth}{5}

.. note:: The LaTeX name is 'secnumdepth' (without 't').

.. _sectnum directive: ../ref/rst/directives.html#sectnum
.. _sectnum_xform: config.html#sectnum-xform


sidebar
-------

Sidebars__ are like miniature, parallel documents that occur inside other
documents, providing related or reference material. They can be likened to
super-footnotes; their content is outside of the flow of the document's main
text.

Command:
  ``DUsidebar``

Default:
  Box with grey background.

Example:
  Use margin notes::

    \newcommand{\DUsidebar}[1]{\marginpar{\flushleft #1}}

  * Make sure the margin is wide enough to hold the note.
  * This fails with some constructs inside the `side bar` and where
    \marginpar cannot be used, e.g., inside floats, footnotes, or in frames
    made with the framed package (see marginnote_).

__ https://docutils.sourceforge.io/docutils/docs/ref/rst/directives.html#sidebar

size of a pixel
---------------

The *physical size* of a pixel depends on the resolution of the output
device and is usually specified in *dots per inch* (DPI).

The *length unit* "px" is defined by the output format. For LaTeX, it is
`defined in pdfTeX and LuaTeX`__ (the `xetex` writer emulates this
definition).

Default:
  72 DPI, i.e. 1 px = 1/72 in. [#]_

Example:
  Set the value to match the CSS definition
  with the `LaTeX code`_::

    \pdfpxdimen=1in
    \divide\pdfpxdimen by 96 % 1/96 inch

.. [#] The `CSS length unit ``px```_ defaults to 1/96 inch.

__ https://tex.stackexchange.com/questions/41370/
   what-are-the-possible-dimensions-sizes-units-latex-understands
.. _CSS length unit ``px``: https://www.w3.org/TR/css-values-3/#px
.. _reference pixel: https://www.w3.org/TR/css-values-3/#reference-pixel

table style
------------

A pre-configured *table style* can be globally selected via the table_style_
setting or set for individual tables via a `class directive`_ or the class
option of the `table directive`_.

Supported values:

standard
  Borders around all cells.

booktabs
  A line above and below the table and one after the head.

borderless
  No borders around table cells.

colwidths-auto
  Column width determination by LaTeX.
  Overridden by the `table directive`_'s "widths" option.

  .. warning::

    ``colwidths-auto`` is only suited for tables with simple cell content.

    LaTeX puts the content of auto-sized columns on one line (merging
    paragraphs) and may fail with complex content.

.. eventually in future

   align-left, align-center, align-right
     Align tables.

By default, *column widths* are computed from the source column widths.
The `legacy_column_widths`_ setting selects the conversion algorithm.
Custom column widths can be set with the "widths" option of the `table
directive`_.

See also the section on problems with tables_ below.

.. _new_column_widths:
.. _legacy_column_widths: config.html#legacy-column-widths
.. _table_style: config.html#table-style-latex-writers
.. _"widths" option:
.. _table directive: ../ref/rst/directives.html#table


table of contents
-----------------

A `contents directive`_ is replaced by a table of contents (ToC).

Option: use-latex-toc_
  ``--use-latex-toc``, ``--use-docutils-toc``

With use-latex-toc (default since release 0.6):

* The ToC is generated by LaTeX (via the ``\tableofcontents`` command).

  The layout depends on the chosen document class and can be configured in
  a custom `style sheet`_ (see e.g. the `KOMA-Script Guide`_ for the
  `KOMA-script`_ classes).

* The depth of the ToC and PDF-bookmarks can be configured

  + with the "depth" argument of the `contents directive`_, or

  + in a style sheet with e.g. ``\setcounter{tocdepth}{5}``.

* Local ToCs are done with the minitoc_ package. See the `minitoc
  documentation`_ for the numerous configuration options.

.. note::
   Minitoc supports local ToCs only at "part" and top section level
   ("chapter" or "section"). Local `contents` directives at lower levels
   are ignored (a warning is issued).

   This is an intended feature of the minitoc_ package. If you really
   require local ToCs at lower level, turn off the use-latex-toc_ option.

.. _use-latex-toc: config.html#use-latex-toc
.. _contents directive: ../ref/rst/directives.html#contents
.. _minitoc: https://ctan.org/pkg/minitoc
.. _minitoc documentation:
   https://mirrors.ctan.org/macros/latex/contrib/minitoc/minitoc.pdf


title reference role
--------------------

`Title reference`_ is the default `default role`_ for `interpreted text`_.

Command:
  ``\DUroletitlereference``

Default:
  use slanted font (``\textsl``)

Example:
  set title references with a bold monospace font::

    \newcommand{\DUroletitlereference}[1]{\texttt{\textbf{#1}}}

.. _title reference: ../ref/rst/roles.html#title-reference
.. _default role:
   ../ref/rst/directives.html#setting-the-default-interpreted-text-role
.. _interpreted text: ../ref/rst/restructuredtext.html#interpreted-text


titles
------

The titles of admonitions_, sidebar_, and `topic element`_ use
the ``\DUtitle`` command.

Example 1:
  a centered and somewhat larger title for topcis::

     \newcommand*{\DUCLASStopic}{
       \renewcommand*{\DUtitle}[1]{\subsection*{\centering #1}
     }

Example 2:
  a right-pointing hand as title for the "attention" directive::

    \usepackage{pifont}
    \newcommand*{\DUCLASSattention}{
      \renewcommand*{\DUtitle}[1]{\ding{43}}
    }

  The title argument is "swallowed" by the command.
  To have both, hand and title use::

    \usepackage{pifont}
    \newcommand*{\DUCLASSattention}{
      \newcommand*{\DUtitle}[1]{\ding{43} #1}
    }


text encoding
-------------

The encoding of the LaTeX source file is Docutils' *output* encoding
but LaTeX' *input* encoding.

Option: output-encoding_
    ``--output-encoding=OUTPUT-ENCODING``

Default:
  "utf-8"

Example:
  Encode the LaTeX source file with the ISO `latin-1` (west european)
  8-bit encoding (the default in Docutils versions up to 0.6.)::

    --output-encoding=latin-1

Note:
  8-bit LaTeX comes with two options for UTF-8 support,

  :utf8:  by the standard `inputenc`_ package with only limited coverage
          (mainly accented characters).

  :utf8x: supported by the `ucs`_ package covers a wider range of Unicode
          characters than does "utf8".  It is, however, a non-standard
          extension and no longer developed.

  Currently, the "latex2e" writer inserts ``\usepackage[utf8]{inputenc}``
  into the LaTeX source if it is UTF-8 encoded.

.. with utf8x:
   If LaTeX issues a Warning about unloaded/unknown characters adding ::

     \PreloadUnicodePage{n}

   (where *n* is the Unicode page-number) to the style sheet might help.

.. _LaTeX Unicode: http://www.unruh.de/DniQ/latex/unicode/
.. _output-encoding: config.html#output-encoding
.. _inputenc: https://ctan.org/pkg/inputenc
.. _ucs: https://ctan.org/pkg/unicode


topic element
-------------

A topic_ is like a block quote with a title, or a self-contained section
with no subsections. Topics and rubrics can be used at places where a
`section title`_ is not allowed (e.g. inside a directive).

Example:
  Use a standard paragraph for a topic::

    \newcommand{\DUCLASStopic}{%
      \renewenvironment{quote}{}{}%
    }

.. _topic: ../ref/rst/directives.html#topic
.. _section title: ../ref/rst/restructuredtext.html#sections


transition element
------------------

Transitions__ are commonly seen in novels and short fiction, as a gap
spanning one or more lines, marking text divisions or signaling changes in
subject, time, point of view, or emphasis.

Command:
  ``\DUtransition``

Default:
  A horizontal line, 1/3 of text width

Example 1:
  Use three stars::

    \newcommand*{\DUtransition}{\centering{}*\quad*\quad*}

  Alternatively use the more elaborated version in `transition-stars.sty`_.

Example 2:
  If paragraphs are separated by indentation, you can simply use a vertical
  space::

    \newcommand*{\DUtransition}{\vspace{2ex}}

__ https://docutils.sourceforge.io/docutils/docs/ref/rst/restructuredtext.html#transitions
.. _transition-stars.sty: ../../../sandbox/stylesheets/transition-stars.sty


Changes
=======

* The Docutils HISTORY_ lists all changes during the history of docutils.
  Important changes are summarized in the RELEASE-NOTES_.

.. _HISTORY: ../../HISTORY.html
.. _RELEASE-NOTES: ../../RELEASE-NOTES.html


Problems
========

Troubleshooting
---------------

Bad looking PDF output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  What I am looking for when I try Docutils is if the PDF files I can get
  are of high quality. Unfortunately that never is the case.

  So am I just stupid or is there a way to get really high quality pdf from
  Docutils?

Make sure the default font is not a bitmap font.

There is `Latin Modern`_ if you like the look of the standard font on paper,
but want nice pdf. Or select something else like Times, Palatino, ... via
configuration `options/settings`_. See font_ and font-encoding_.


footnote mark and text at different pages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Docutils stores the footnote text in a separate node, at the position where
it is specified in the input document. With the default settings, the
footnote is put at the bottom of the page where the footnote text is located,
maybe far away from the footnote mark (see e.g. `<rst/demo.txt>`_).

To get footnote mark and text at the same page, keep footnote mark and
footnote text close together.


non-breaking hyperlinks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you convert with ``latex`` (as opposed to ``pdflatex``), hyperlinks will
not wrap and sometimes stick into the margin.

Wrong:
  ::

     \usepackage[breaklinks=true]{hyperref}

  "breaklinks" is an internal option that indicates whether the chosen
  driver can handle split links. (It might work to *disable* link breaking.)

Right:
  Use one of the following:

  a) compile with pdflatex_,

  b) use the package breakurl_,

  c) (for printout) `disable hyperlinks`_ using the package "nohyperref".

See also the `Link text doesn’t break at end line`_ LaTeX FAQ entry.

.. _breakurl: https://ctan.org/pkg/breakurl
.. _Link text doesn’t break at end line:
   http://www.tex.ac.uk/cgi-bin/texfaq2html?label=breaklinks


Glyph not defined in PD1 encoding
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a section title or other link contains non-Latin (e.g. Cyrillic)
characters, the LaTeX log contains lots of warnings like::

  Package hyperref Warning: Glyph not defined in PD1 encoding,
  (hyperref)                removing `\CYRZ' on input line 6.
  ...

This can be solved with the "unicode" hyperref_option_ setting::

  --hyperref-option=unicode

(works also with non-unicode input/output encoding (e.g. "koi8r" or
"latin1"). Newer versions of hyperref default to "unicode=true".

.. _hyperref_option: config.html#stylesheet-latex-writers


image inclusion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Images__ are included in LaTeX with the help of the `graphicx` package. The
supported file formats depend on the used driver:

* pdflatex_, lualatex, and xelatex_ work with PNG, JPG, or PDF,
  but **not EPS**.
* Standard latex_ can include **only EPS** graphics, no other format.
* latex + dvipdfmx works with EPS and JPG (add 'dvipdfmx' to the
  documentoptions_ or graphicx-option_ setting
  and 'bmpsize' to the stylesheet_ setting).

If PDF-image inclusion in PDF files fails, specifying
``--graphicx-option=pdftex`` might help.

For details see grfguide.pdf_.

The Rubber_ wrapper can be used for automatic image conversion.

Docutils expects an URI as pointer to the image file. The latex writer
transforms this URI to a local path. By default, LaTeX does not accept
spaces and more than one dot in the filename. If using "traditional"
filenames is not an option, adding grffile_ to the `style sheets`_
can help.

__ ../ref/rst/directives.html#images
.. _grfguide.pdf:
   https://mirrors.ctan.org/macros/latex/required/graphics/grfguide.pdf
.. _grffile: https://ctan.org/pkg/grffile
.. _graphicx-option: config.html#graphicx-option


Why are my images too big?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HTML-browsers use the actual screen resolution (usually around
100 DPI).

The CSS specification suggests:

  It is recommended that the reference pixel be the visual angle of one
  pixel on a device with a pixel density of 96 DPI and a distance from the
  reader of an arm's length.

  -- https://www.w3.org/TR/CSS2/syndata.html#length-units

This is why pixmap images without size specification or objects with a size
specified in ``px`` tend to come too large in the PDF.

Solution:
  Specify the image size in fixed units (``pt``, ``cm``, ``in``) or
  configure the `size of a pixel`_ (length unit px).


Error ``illegal unit px``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you convert the LaTeX source with a legacy program, you might get this
error.

The unit "px" was introduced by the `pdfTeX` converter on 2005-02-04.
`pdfTeX` is used also for conversion into DVI format in all modern LaTeX
distributions (since ca. 2006).

If updating LaTeX is not an option, just remove the "px" from the length
specification. HTML/CSS will default to "px" while the `latexe2` writer
will add the fallback unit "bp".


Error ``Symbol \textcurrency not provided`` ...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The currency sign (\\u00a4) is not supported by all fonts (some have
an Euro sign at its place). You might see an error like::

    ! Package textcomp Error: Symbol \textcurrency not provided by
    (textcomp)                font family ptm in TS1 encoding.
    (textcomp)                Default family used instead.

(which in case of font family "ptm" is a false positive). Add either

:warn: turn the error in a warning, use the default symbol (bitmap), or
:force,almostfull: use the symbol provided by the font at the users
                     risk,

to the document options or use a different font package.


Warning: language … not supported
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The "latex" writer uses the LaTeX package Babel_ and the "xetex" writer
uses Polyglossia_ for language_ support (hyphenation rules, auto-text
localisations and typographic rules). Polyglossia_ supports more
languages, so switching to the "xetex_" writer may help.

For short quotes or if language support is provided by the user via other
`LaTeX document classes and packages`_, the warning can be ignored.

.. _Babel: https://ctan.org/pkg/babel
.. _Polyglossia: https://ctan.org/pkg/polyglossia


Search and text extraction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Search for text that contains characters outside the ASCII range might
fail.  See font_ and `font encoding`_ (as well as `Searching PDF files`_
for background information).

It may help to load the `cmap` package (via `style sheets`_ or the custom
`LaTeX preamble`_ (see also `Proper use of cmap and mmmap`_).

.. _Searching PDF files:
   http://www.tex.ac.uk/cgi-bin/texfaq2html?label=srchpdf
.. _Proper use of cmap and mmmap:
   https://tex.stackexchange.com/questions/64409/proper-use-of-cmap-and-mmap


Unicode box drawing and block characters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The easiest solution is to use xelatex_ for `PDF generation`_.

With "traditional" TeX engines (e.g. pdflatex_):

- Generate LaTeX code with `output-encoding`_ "utf-8".

- Add the pmboxdraw_ package to the `style sheets`_.
  (For shaded boxes also add the `color` package.)

Unfortunately, this defines only a subset of the characters
(see pmboxdraw.pdf_ for a list).

.. _pmboxdraw: https://ctan.org/pkg/pmboxdraw
.. _pmboxdraw.pdf:
   https://mirrors.ctan.org/macros/latex/contrib/pmboxdraw/pmboxdraw.pdf


Bugs and open issues
--------------------

Open to be fixed or open to discussion.

See also the entries in the `Docutils TODO list`_,
the BUGS_ documentation and the `SourceForge Bug Tracker`_.

.. _Docutils TODO list: ../dev/todo.html#latex-writer
.. _bugs: ../../BUGS.html
.. _SourceForge Bug Tracker: https://sourceforge.net/p/docutils/bugs/


Footnotes and citations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Initially both were implemented using figure floats, because hyperlinking
back and forth seemed to be impossible. Later the `figure` directive was
added that puts images into figure floats.

This results in footnotes, citations, and figures possibly being mixed at
page foot.

Workaround:
  Select citation handling with the use_latex_citations_ option.

If ``use-latex-citations`` is used, a bibliography is inserted right at
the end of the document. *This should be customizable*.

If ``use-latex-citations`` is used adjacent citation references (separated
only by a single space or a newline) are combined to a single citation
group, i.e. ``[cite1]_ [cite2]_`` results in ``\cite{cite1,cite2}``.
The appearance in the output can be configured in a `style sheet`_.

.. _use_latex_citations: config.html#use-latex-citations


Tables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Too wide tables (cf. `bug #422`_):

  Try the new_column_widths_ algorithm or use the `"widths" option`_ to
  manually set the table column widths.

* Table cells with both multirow and multicolumn are currently not possible.

.. _bug #422: https://sourceforge.net/p/docutils/bugs/422/


Figures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Figures are always as wide as the containing text. The "figwidth" argument
  is currently not supported. As a consequence, the "align" argument has no
  effect.

* Wrapping text around figures is currently not supported. (Requires the
  `wrapfig`_ package.)

.. _wrapfig: https://ctan.org/pkg/wrapfig


Miscellaneous
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Pdfbookmark level 4 (and greater) does not work (might be settable but
  complicated).

* Hyperlinks are not hyphenated; this leads to bad spacing. See
  docs/user/rst/demo.txt 2.14 directives.

* Pagestyle headings does not work, when sections are starred. Use LaTeX for
  the section numbering with the `options/settings`_
  ``--no-section-numbers`` (command line) or ``sectnum_xform: False``
  (config file).


/Part 2. 024.📜 docutils-0.20.1/docs/user/links.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=====================
 Docutils_ Link List
=====================

:Author: Lea Wiemann, the Docutils team
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9107 $
:Date: $Date: 2022-07-06 15:59:57 +0200 (Mi, 06. Jul 2022) $
:Copyright: This document has been placed in the public domain.

.. title:: Docutils Links

.. .. contents:: Table of Contents

This document contains links users of Docutils and reStructuredText
may find useful.  Many of the projects
listed here are hosted in the `Docutils Sandbox`_.  If you have
something to publish, you can get write access, too!

The most current version of this link list can always be found at
https://docutils.sourceforge.io/docs/user/links.html.

.. _Docutils: https://docutils.sourceforge.io/
.. _Docutils Sandbox: https://docutils.sourceforge.io/sandbox/README.html


Editors
==============================

Advanced text editors with reStructuredText support, IDEs, and docutils GUIs:

* Emacs `rst mode <https://docutils.sourceforge.io/tools/editors/emacs>`__.

* `Vim <https://www.vim.org/index.php>`__:

  - `reStructuredText syntax highlighting mode
    <https://www.vim.org/scripts/script.php?script_id=973>`__,

  - `VST <https://www.vim.org/scripts/script.php?script_id=1334>`__ (Vim
    reStructuredText) plugin for Vim7 with folding.

  - `VOoM <https://www.vim.org/scripts/script.php?script_id=2657>`__
    plugin for Vim that emulates two-pane outliner with
    support for reStructuredText (since version 4.0b2).

  - `Riv: Take notes in rst <https://github.com/Rykka/riv.vim>`__ Vim
    plugin to take notes in reStructured text.

* `reStructuredText Language Support for Visual Studio Code`__

  __ https://github.com/vscode-restructuredtext/vscode-restructuredtext

* `reStructuredText editor plug-in for Eclipse`__

  __ http://resteditor.sourceforge.net/

* `JED <https://www.jedsoft.org/jed/>`__ programmers editor with
  `rst mode <httpss://jedmodes.sourceforge.io/mode/rst/>`__

* Gnome's gedit offers syntax highlighting and a reST preview pane.

  Latest version of the plugin is available from `bittner @ github`_
  (See also: `Gedit third party plugins`__).

  .. _bittner @ github:  https://github.com/bittner/gedit-reST-plugin
  __ https://wiki.gnome.org/Apps/Gedit/ThirdPartyPlugins-v3.8


* Gunnar Schwant's DocFactory_ is a wxPython GUI application for
  Docutils.

  .. _DocFactory: https://docutils.sourceforge.io/sandbox/gschwant/docfactory/doc/

* ReSTedit_ by Bill Bumgarner is a Docutils GUI for Mac OS X.

  .. _ReSTedit: https://svn.red-bean.com/restedit/trunk/README.html

* `ReText <https://pypi.org/project/ReText/>`_ is a simple but powerful
  editor for Markdown and reStructuredText markup languages.
  It is written in Python using PyQt libraries.

* Leo_ is an outliner_, written in Python using PyQt. It can be used as IDE
  for literal programming, as a filing cabinet holding any kind of data and
  as `document editor`__ with outlines containing reStructuredText markup.

  .. _Leo: https://leoeditor.com/
  .. _outliner: https://en.wikipedia.org/wiki/Outliner
  __ https://leoeditor.com/tutorial-rst3.html

* `NoTex <https://notex.ch>`_ is a browser-based reStructuredText editor
  with syntax highlighting and PDF/HTML export functionality using Sphinx.

* `rsted <https://github.com/anru/rsted>`_ is a "simple online editor for
  reStructuredText on Flask". You can try it on http://rst.ninjs.org/


Export
==============================

Projects providing additional export routes.

PDF
------------------------

* `rst2pdf (reportlab)`__ is a tool to go directly from
  reStructuredText to PDF, via ReportLab__. No LaTeX installation
  is required.

  __ https://pypi.org/project/rst2pdf/
  __ https://pypi.org/project/reportlab/

* `rst2pdf (pdflatex)`__ by Martin Blais is a minimal front end
  producing LaTeX, compiling the LaTeX file, getting the produced
  output to the destination location and finally deleting all the
  messy temporary files that this process generates.

  __ https://docutils.sourceforge.io/sandbox/blais/rst2pdf/

* `rst2pdf (rubber)`__ is a front end for the generation of PDF
  documents from a reStructuredText source via LaTeX in one step
  cleaning up intermediate files. It uses the rubber__ Python wrapper
  for LaTeX and friends.

  __ https://docutils.sourceforge.io/sandbox/rst2pdf/README.html
  __ https://launchpad.net/rubber

* rlpdf_ is another PDF Writer based on ReportLabs.

  .. _rlpdf: https://docutils.sourceforge.io/sandbox/dreamcatcher/rlpdf/

* RinohType_ is a pure Python PDF Writer based on a document template and a
  style sheet (beta).

  .. _RinohType: https://pypi.python.org/pypi/RinohType

website generators and HTML variants
------------------------------------

* The Sphinx_ Python Documentation Generator by Georg Brandl was
  originally created to translate the `Python documentation`_.
  In the meantime, there is a wide range of `Projects using Sphinx`__

  It can generate complete web sites (interlinked and indexed HTML pages),
  ePub, LaTeX, and others from a set of rST source files.

  .. _Sphinx: https://www.sphinx-doc.org
  __ https://www.sphinx-doc.org/en/master/examples.html

* The Nikola_ static site generator, uses reStructuredText by
  default.

  .. _nikola:  https://getnikola.com/

* Pelican_ is a static site generator (mainly for blogs). Articles/pages can
  be written in reStructuredText or Markdown_ format.

  .. _pelican: https://docs.getpelican.com

* tinkerer_ is a static bloggin framework based on Sphinx_.

  .. _tinkerer: https://pypi.org/project/Tinkerer/

* htmlnav_ by Gunnar Schwant, is an HTML writer which supports navigation
  bars.

  .. _htmlnav: https://docutils.sourceforge.io/sandbox/gschwant/htmlnav/

* rest2web, by Michael Foord, is a tool for creating web sites with
  reStructuredText. Development stalled, there is a fork at
  https://gitlab.com/wavexx/rest2web

* `html4trans <https://docutils.sourceforge.io/sandbox/html4trans/>`__
  produces XHTML conforming to the version 1.0 Transitional DTD that
  contains enough formatting information to be viewed by a lightweight HTML
  browser without CSS support.

* A `simple HTML writer`_ by Bill Bumgarner that doesn't rely on CSS
  stylesheets.

  .. _simple HTML writer: https://docutils.sourceforge.io/sandbox/bbum/DocArticle/

ePub
------------------------

* rst2epub2_ by Matt Harrison includes the epublib (originally by Tim
  Tambin) and a rst2epub.py executable for the conversion.

  .. _rst2epub2: https://github.com/mattharrison/rst2epub2

* Sphinx_ provides ePub as output option, too.


Others
------------------------

* Pandoc_ is a document converter that can write Markdown_,
  reStructuredText, HTML, LaTeX, RTF, DocBook XML, and S5.

  .. _Pandoc: https://pandoc.org/

* restxsl_ by Michael Alyn Miller, lets you transform reStructuredText
  documents into XML/XHTML files using XSLT stylesheets.

  .. _restxsl: http://www.strangeGizmo.com/products/restxsl/

* An `XSLT script`__ by Ladislav Lhotka enables reStructuredText annotations
  to be included in RELAG NG XML schemas.

  __ https://www.cesnet.cz/doc/techzpravy/2006/rngrest/

* `DocBook Writer`_ by Oliver Rutherfurd.

  .. _DocBook Writer: https://docutils.sourceforge.io/sandbox/oliverr/docbook/

* Nabu_, written by Martin Blais, is a publishing system which
  extracts information from reStructuredText documents and stores it
  in a database.  Python knowledge is required to write extractor
  functions and to retrieve the data from the database again.

  .. _Nabu: https://github.com/blais/nabu

* The `pickle writer`_ by Martin Blais pickles the document tree to a binary
  string. Later unpickling will allow you to publish with other Writers.

  .. _pickle writer: https://docutils.sourceforge.io/sandbox/blais/pickle_writer/

* The `Texinfo Writer`_, by Jon Waltman converts reStructuredText to
  Texinfo, the documentation format used by the GNU project and the
  Emacs text editor.  Texinfo can be used to produce multiple output
  formats, including HTML, PDF, and Info.

  .. _Texinfo Writer: https://docutils.sourceforge.io/sandbox/texinfo-writer/README.html

* For `confluence CMS`_ see https://github.com/netresearch/rst2confluence.

  .. _confluence CMS: https://www.atlassian.com/software/confluence

* Deploying into wikis might be aided by deploy-rst_.

  .. _deploy-rst: https://github.com/netresearch/deploy-rst


Import
==============================

Convert other formats to reStructuredText:

* recommonmark_ is a Markdown_ (CommonMark_) parser for
  docutils originally created by Luca Barbato.

  Docutils "markdown" parser (new in Docutils 0.17) is a wrapper
  around recommonmark.

  .. _recommonmark: https://github.com/rtfd/recommonmark
  .. _Markdown: https://daringfireball.net/projects/markdown/syntax
  .. _CommonMark: https://commonmark.org/


* sxw2rest_, by Trent W. Buck, converts StarOffice XML Writer (SXW)
  files to reStructuredText. (link down)

  .. _sxw2rest: https://twb.ath.cx/~twb/darcs/sxw2rest/

* xml2rst_, an XSLT stylesheet written by Stefan Merten, converts XML
  dumps of the document tree (e.g. created with rst2xml.py) back to
  reStructuredText.

  .. _xml2rst: http://www.merten-home.de/FreeSoftware/xml2rst/index.html

* xhtml2rest_, written by Antonios Christofides, is a simple utility
  to convert XHTML to reStructuredText.

  .. _xhtml2rest: https://docutils.sourceforge.io/sandbox/wiemann/xhtml2rest/

* DashTable_ by Gustav Klopp converts HTML tables into reStructuredText.
  Colspan and Rowspan supported!

  .. _DashTable: https://github.com/gustavklopp/DashTable

* Sphinx_ includes a `LaTeX to Rst converter
  <https://svn.python.org/projects/doctools/converter/>`__ in its source code
  (trimmed to importing the old Python docs).

* Pandoc_ can read Markdown_ and (subsets of) HTML, and LaTeX and
  export to (amongst others) reStructuredText.

* PySource_, by Tony Ibbs, is an experimental Python source Reader.
  There is some related code in David Goodger's sandbox
  (pysource_reader_) and a `Python Source Reader`_ document.

  .. _PySource: https://docutils.sourceforge.io/sandbox/tibs/pysource/
  .. _pysource_reader: https://docutils.sourceforge.io/sandbox/davidg/pysource_reader/
  .. _Python Source Reader: https://docutils.sourceforge.io/docs/dev/pysource.html


Extensions
==============================

Extend the reStructuredText syntax or the features of Docutils.
More extensions are in the `Docutils Sandbox`_.

* Beni Cherniavsky has written a generic `preprocessing module`_ for
  roles and/or directives and built preprocessors for TeX math for
  both LaTeX and HTML output on top of it.

  .. _preprocessing module: https://docutils.sourceforge.io/sandbox/cben/rolehack/

* Beni Cherniavsky maintains a Makefile_ for driving Docutils, hoping
  to handle everything one might do with Docutils.

  .. _Makefile: https://docutils.sourceforge.io/sandbox/cben/make/

* The `ASCII art to SVG converter`_ (aafigure) developed by
  Chris Liechti can parse ASCII art images, embedded in reST documents and
  output an image. This would mean that simple illustrations could be
  embedded as ASCII art in the reST source and still look nice when
  converted to e.g. HTML

  .. _ASCII art to SVG converter:
     https://docutils.sourceforge.io/sandbox/cliechti/aafigure/

* Quick and easy publishing reStructuredText source files as blog posts
  on blogger.com is possible with `rst2blogger`_ .

  .. _rst2blogger: https://github.com/dhellmann/rst2blogger#readme


Related Applications
==============================

Applications using docutils/reStructuredText and helper applications.

* For Wikis, please see the `FAQ entry about Wikis`_.

* For Blogs (Weblogs), please see the `FAQ entry about Blogs`_.

* `Project Gutenberg`_ uses  Docutils for its "ebookmaker_"
  xetex, nroff, and epub generator (with some `extensions to rST`__).

  __ http://pgrst.pglaf.org/publish/181/181-h.html


* Text-Restructured_ at CPAN is a set of modules to parse
  reStructuredText documents and output them in various formats written
  in Perl_.
  Up to January 2021, the sources were stored in the Docutils repository_.
  After long inactivity (the last commit was r6498__
  2010-12-08), ``trunk/prest/`` was moved to the attic.

  __ https://sourceforge.net/p/docutils/code/6498/

.. _FAQ entry about Wikis: http://docutils.sf.net/FAQ.html
    #are-there-any-wikis-that-use-restructuredtext-syntax
.. _FAQ entry about Blogs: https://docutils.sourceforge.io/FAQ.html
    #are-there-any-weblog-blog-projects-that-use-restructuredtext-syntax
.. _Project Gutenberg: http://www.gutenberg.org
.. _ebookmaker: https://pypi.org/project/ebookmaker/
.. _Perl: https://www.perl.org
.. _Text-Restructured: https://metacpan.org/dist/Text-Restructured
.. _repository: ../dev/repository.html


Tools
------------------------

* rstcheck_ Checks syntax of reStructuredText and code blocks nested within
  it. (Using the Sphinx syntax "code-block" for the "code" directive.)

  .. _rstcheck: https://pypi.python.org/pypi/rstcheck

* restview_ is a viewer for ReStructuredText documents.

  Pass the name of a ReStructuredText document to restview, and it will
  launch a web server on localhost:random-port and open a web browser. It
  will also watch for changes in that file and automatically reload and
  rerender it. This is very convenient for previewing a document while
  you're editing it.

  .. _restview: https://mg.pov.lt/restview/


Development
------------------------

* Sphinx_ extends the ReStructuredText syntax to better support the
  documentation of Software projects (but other documents
  can be written with it too).

* `Sphinx Extensions`_ allow automatic testing of code snippets,
  inclusion of docstrings from Python modules (API docs), and more.

* Trac_, a project management and bug/issue tracking system, supports
  `using reStructuredText
  <https://trac.edgewall.org/wiki/WikiRestructuredText>`__ as an
  alternative to wiki markup.


* PyLit_ provides a bidirectional text <--> code converter for *literate
  programming with reStructuredText*.

.. _Sphinx extensions: https://www.sphinx-doc.org/en/master/usage/extensions/
.. _Python documentation: https://docs.python.org/
.. _Trac: https://trac.edgewall.org/
.. _PyLit: https://codeberg.org/milde/pylit


CMS Systems
------------------------

* Plone_ and Zope_ both support reStructuredText markup.

* ZReST_, by Richard Jones, is a "ReStructuredText Document for Zope_"
  application that is complete and ready to install.

.. _Plone: https://plone.org/
.. _Zope: https://www.zope.dev/
.. _ZReST: https://docutils.sourceforge.io/sandbox/richard/ZReST/


Presentations
------------------------

* rst2html5_ transform restructuredtext documents to html5 + twitter's
  bootstrap css, deck.js or reveal.js

  .. _rst2html5: https://github.com/marianoguerra/rst2html5

* landslide_ generates HTML5 slideshows from markdown, ReST, or textile.

  .. _landslide: https://github.com/adamzap/landslide

* `native support for S5 <slide-shows.s5.html>`_.

* The `PythonPoint interface`_ by Richard Jones produces PDF
  presentations using ReportLabs' PythonPoint.

  .. _PythonPoint interface:
     https://docutils.sourceforge.io/sandbox/richard/pythonpoint/

* rst2beamer_ generates a LaTeX source that uses the `Beamer` document class.
  Can be converted to PDF slides with pdfLaTeX/XeLaTeX/LuaLaTeX.

  .. _rst2beamer: https://docutils.sourceforge.io/sandbox/rst2beamer/

* InkSlide_ quick and easy presentations using Inkscape_. InkSlide uses
  reStructuredText for markup, although it renders only a subset of rst.

  .. _InkSlide: http://wiki.inkscape.org/wiki/index.php/InkSlide
  .. _Inkscape: http://inkscape.org/

* rst2outline_ translates a reStructuredText document to a plain text
  outline. This can then be transformed to PowerPoint.

  .. _rst2outline: https://docutils.sourceforge.io/sandbox/rst2outline/

* Pandoc_ can also be used to produce slides


/Part 2. 025.📜 docutils-0.20.1/docs/user/mailing-lists.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=========================
 Docutils_ Mailing Lists
=========================

:Author: Lea Wiemann
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.


.. Gmane went down 2016 and is only partially restored.
   http://home.gmane.org/2016/08/29/next-steps-gmane/

.. raw:: html

   <div class="sidebar">
   <p class="first sidebar-title">Search the list archives</p>
   <form method="get" action="https://sourceforge.net/p/docutils/mailman/search/">
   <p style="margin-bottom: 3px;"><input type="text" name="q" style="width: 100%;" /></p>
   <p>Search in <select name="mail_list">
       <option value="all">all mailing lists</option>
       <option value="docutils-users">Docutils-users</option>
       <option value="docutils-develop">Docutils-develop</option>
       <option value="docutils-checkins">Docutils-checkins</option>
       </select></p>
   <p class="last"><input type="submit" value="Search" /></p>
   </form>
   </div>

All discussion about Docutils takes place on mailing lists.

There are four different lists with traffic related to Docutils.
For an oversight, see https://sourceforge.net/p/docutils/mailman/.
If unsure, use the **Docutils-users** mailing list:


Docutils-users
==============================

The `Docutils-users mailing list`_ is a place to discuss any issues
related to the usage of Docutils and reStructuredText.  (Please be
sure to check the FAQ_ first.)

There are several possibilities to **read and post** messages on the
mailing lists; use the one you feel most comfortable with.

* Using an `email subscription`__.  This is the traditional way; you
  will receive all messages sent to the mailing list via email.

  __ `docutils-users mailing list`_

* Use a newsreader with Gmane's `NNTP interface`__
  (gmane.text.docutils.user on news.gmane.org).

  __ nntp://news.gmane.org/gmane.text.docutils.user

* **If you do not wish to subscribe,** you can also just send an email
  message with your question or comment to
  Docutils-users@lists.sourceforge.net.

  Note in your message that you are not subscribed (to make sure that you
  receive copies [CCs] of any replies) or check for answers in the
  `Docutils-users Archives`_.

The first time you post a message without being subscribed
you will receive an automatic response with the subject
"Your message to Docutils-users awaits moderator approval"; this is done to
prevent spam to the mailing lists.  Your message will usually be approved
within a few hours.  To avoid duplicates, please do not resend your message
using a different email address.  After your first message has been
approved, your email address will be added to the whitelist and future
messages will be posted to the mailing list without moderation.

To see the collection of prior postings to the list, visit the
`Docutils-users Archives`_.


Docutils-develop
==============================

Discussions about developing and extending Docutils take place on the
`Docutils-develop mailing list`_.

You can access this list via `email subscription`__ or news__
(gmane.text.docutils.devel); the posting address is
Docutils-develop@lists.sourceforge.net.

To see the collection of prior postings to the list, visit the
`Docutils-develop Archives`__.

__ `Docutils-develop mailing list`_
__ nntp://news.gmane.org/gmane.text.docutils.devel
__ https://sourceforge.net/mailarchive/forum.php?forum_name=docutils-develop

Docutils-checkins
==============================

All check-ins to the `Subversion repository`_ cause a "check-in email"
to the `Docutils-checkins list`_.  In order to stay informed about
current development, developers are advised to monitor this mailing
list.

This mailing list is for reading only; please direct any discussion
about the check-ins to Docutils-develop.  (For your convenience, the
Reply-To header of all check-in emails points to Docutils-develop.)

This mailing list is accessible via `email subscription`__ or
news__ (gmane.text.docutils.cvs) as well.

If you are using an email subscription and you would prefer to only
receive check-in messages for changes that affect the main Docutils
distribution (i.e. ``trunk/docutils/*``), go to the `list options`_
page and select the "Docutils core" topic.

__ `Docutils-checkins list`_
__ nntp://news.gmane.org/gmane.text.docutils.cvs
.. _list options: https://lists.sourceforge.net/lists/options/docutils-checkins

Doc-SIG
==============================

The "Python Documentation Special Interest Group" (`Doc-SIG`_) mailing list
is occasionally used to discuss the usage of Docutils for Python
documentation.

This mailing list can be accessed via `email subscription`__ or
news__ (gmane.comp.python.documentation) as well.  You must be
subscribed in order to post messages to this mailing list.

__ `Doc-SIG`_
__ nntp://news.gmane.org/gmane.comp.python.documentation


.. _Docutils-users mailing list:
   https://lists.sourceforge.net/lists/listinfo/docutils-users
.. _Docutils-users Archives:
   https://sourceforge.net/mailarchive/forum.php?forum_name=docutils-users
.. _Docutils-develop mailing list:
   https://lists.sourceforge.net/lists/listinfo/docutils-develop
.. _Docutils-develop Archives:
   https://sourceforge.net/mailarchive/forum.php?forum_name=docutils-develop
.. _Docutils-checkins list:
   https://lists.sourceforge.net/lists/listinfo/docutils-checkins
.. _Doc-SIG:
   https://mail.python.org/mailman/listinfo/doc-sig

.. _Subversion repository: ../dev/repository.html
.. _Docutils: https://docutils.sourceforge.io/
.. _FAQ: ../../FAQ.html


/Part 2. 026.📜 docutils-0.20.1/docs/user/manpage.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

==============================
 manpage writer for Docutils_
==============================

:Author: Engelbert Gruber
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9059 $
:Date: $Date: 2022-05-30 18:54:24 +0200 (Mo, 30. Mai 2022) $
:Copyright: This document has been placed in the public domain.

This writer explores the possibilities to generate man-pages from
reStructuredText. Man pages are the way for Unix systems to provide
help to the user. GNU does this with (TeX)info-pages.

.. .. contents:: Table of Contents


Module information
=========================

Unix man page belong into a numbered section, 1 is user commands, 8 contains
administrator commands, the headlines of all manpages are collected into a
database, queryable with the program ``apropos``, therefore the headline
should contain a short text describing into which group this command belongs.

That information is collected from the title, subtitle and docinfo.

Also man pages have a defined set of sections, that are more or less
mandatory, see References_.

man pages look like::

   man(1)     Man Pager Utils     man(1)

   NAME
       man - an interface to the on-line reference manuals

   SYNOPSIS
       man [-c|-w|-tZT device] [-adhu7V] [-m system[,...]] [-L locale]

in roff formatting::

     .TH man 1 "14 May 2001" "2.3.19" "Manual pager utils"
     .SH NAME
     man \- an interface to the on-line reference manuals
     .SH SYNOPSIS
     .\" The general command line
     .B man
     .RB [\| \-c \||\| \-w \||\| \-tZT
     .IR device \|]

This means we have

* a title "man"
* a subtitle "an interface to the on-line reference manuals"
* a manual section "1"
* a manual group "Manual pager utils"
* a date "14 May 2001"
* a version "2.3.19"

References
=========================

man pages from section 7, ``man`` and ``man-pages``.

.. [LMHT] `Linux Man Page Howto <https://tldp.org/HOWTO/Man-Page/>`__.

Conventions
=========================

* man pages have a special structure and organization. From the manpage
  to *man*::

    The table below shows the section numbers of the manual followed  by  the
    types of pages they contain.

    1   Executable programs or shell commands
    2   System calls (functions provided by the kernel)
    3   Library calls (functions within program libraries)
    4   Special files (usually found in /dev)
    5   File formats and conventions eg /etc/passwd
    6   Games
    7   Miscellaneous  (including  macro  packages and conven-
        tions), e.g. man(7), groff(7)
    8   System administration commands (usually only for root)
    9   Kernel routines [Non standard]

    A manual page consists of several parts.

    They  may  be  labelled  NAME,  SYNOPSIS,  DESCRIPTION,  OPTIONS,  FILES,
    SEE ALSO, BUGS, and AUTHOR.

    The  following  conventions apply to the SYNOPSIS section and can be used
    as a guide in other sections.

    bold text          type exactly as shown.
    italic text        replace with appropriate argument.
    [-abc]             any or all arguments within [ ] are optional.
    -a|-b              options delimited by | cannot be used together.
    argument ...       argument is repeatable.
    [expression] ...   entire expression within [ ] is repeatable.

    The command or function illustration is a pattern that should  match  all
    possible  invocations.   In some cases it is advisable to illustrate sev-
    eral exclusive invocations as is shown in the SYNOPSIS  section  of  this
    manual page.

* new lines in general.

  Consecutive blank lines are merged by the viewer but not on printouts.
  So one has to be cautious. This is most disturbing when printing
  postscript.

  .. NOTE::

    1. Roff requests only work when at line start.
    2. But consecutive blank lines are merged by the viewer but not on
       printouts.

    So try the rule start new lines in ``visit_``-functions, but only if
    necessary. E.g. ``field-names`` are already on a new line because of
    docutils structure.

* Indentation, left margin:

  - The writer includes two macros ``.INDENT`` and ``.UNINDENT`` that
    keep track of the indentation in roff-code, for line-blocks python
    keeps track of it. WHAT should be the preferred way ?

    But standard macros like ``.PP`` might reset it.

  - Why do ``.RE`` and ``.RS`` not work?

  .. Note::
     Current indent is in register ``.i``.

* [LMHT]_ Filenames are always in italics, except in the SYNOPSIS section,
  use::

    .I /usr/include/stdio.h

  and::

    .B #include <stdio.h>

* Tables are possible, via the external processor tbl, although one should
  avoid them.

TODO - Open issues
=========================

* How to escape double quotes in macro arguments ?
* Typeset URLs : ``man 7 man`` on linux says use ``.UR`` and ``.UE``.
* How to typeset command/manpage names in text.
* How to write long syntax lines.
* Line ends around email or web addresses in texts.
  How to distinguish something is inline or not ?

* Images and equations are discouraged.
* Lists in admonitions are not intended.
* Encoding declaration ``'\" t -*- coding: ISO-8859-1 -*-``
  in first line.

  BUT if UTF-8 is declared tables are no longer processed.

* Input and output encoding are problematic at least.

.. _Docutils: https://docutils.sourceforge.io/


/Part 2. 027.📜 docutils-0.20.1/docs/user/odt.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=======================
ODT Writer for Docutils
=======================

:Author: Dave Kuhlman
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9387 $
:Date: $Date: 2023-05-16 16:49:41 +0200 (Di, 16. Mai 2023) $
:Copyright: This document has been placed in the public domain.

:abstract: This document describes the Docutils writer for
           OpenDocument Text (.odt) documents.

.. .. sectnum::
.. .. contents:: Table of Contents


Introduction
============

The Docutils front end rst2odt.py_ translates reStructuredText_ into an
`OpenDocument Text`_ (.odt) file.
OpenDocument files `can be opened by most modern office software`__.
It is the native file format for LibreOffice_ Writer.

__ https://en.wikipedia.org/wiki/OpenDocument#Software


Requirements
============

In addition to the Docutils standard requirements, ``odtwriter``
requires:

- Optional -- `Pygments`_ is required if you want syntax
  highlighting of code in literal blocks.  See section `Syntax
  highlighting`_.

- Optional -- `Python Imaging Library`_ (PIL) is required if on an
  image or figure directive, you specify ``scale`` but not ``width``
  and ``height``.  See section `Images and figures`_.



How to Use It
=============

Run it from the command line as follows::

    $ rst2odt.py myinput.txt > myoutput.odt

To see usage information and to learn about command line options
that you can use, run the following::

    $ rst2odt.py --help

Examples::

    $ rst2odt.py -s -g python_comments.txt > python_comments.odt

    $ rst2odt.py --source-url=odtwriter.txt --generator \
        --stylesheet=/myconfigs/styles.odt odtwriter.txt > odtwriter.odt


Configuration file
------------------

The options described below can also be set in a `configuration file`_.
Use section `[odf_odt writer]`_ to set options specific to the
``odtwriter``.  For example::

    [odf_odt writer]
    stylesheet: styles1.odt

See the `Docutils Configuration`_ document for more information on
Docutils configuration files, including locations which are
searched.

.. _Docutils Configuration: config.html
.. _configuration file: config.html#configuration-files
.. _[odf_odt writer]: config.html#odf-odt-writer


Command line options
--------------------

The following command line options are specific to ``odtwriter``:

--stylesheet=<URL>      Specify a stylesheet URL, used verbatim.
                        Default: writers/odf_odt/styles.odt in the
                        installation directory.
--odf-config-file=<file>
                        Specify a configuration/mapping file relative to the
                        current working directory for additional ODF options.
                        In particular, this file may contain a section named
                        "Formats" that maps default style names to names to be
                        used in the resulting output file allowing for
                        adhering to external standards. For more info and the
                        format of the configuration/mapping file, see the
                        odtwriter doc.
--cloak-email-addresses
                        Obfuscate email addresses to confuse harvesters while
                        still keeping email links usable with standards-
                        compliant browsers.
--no-cloak-email-addresses
                        Do not obfuscate email addresses.
--table-border-thickness=TABLE_BORDER_THICKNESS
                        Specify the thickness of table borders in thousands of
                        a cm.  Default is 35.
--add-syntax-highlighting
                        Add syntax highlighting in literal code blocks.
--no-syntax-highlighting
                        Do not add syntax highlighting in literal code blocks.
                        (default)
--create-sections       Create sections for headers.  (default)
--no-sections           Do not create sections for headers.
--create-links          Create links.
--no-links              Do not create links.  (default)
--endnotes-end-doc      Generate endnotes at end of document, not footnotes at
                        bottom of page.
--no-endnotes-end-doc   Generate footnotes at bottom of page, not endnotes at
                        end of document. (default)
--generate-list-toc     Generate a bullet list table of contents, not an
                        ODF/``oowriter`` table of contents.
--generate-oowriter-toc
                        Generate an ODF/``oowriter`` table of contents,
                        not a bullet list.  (default) **Note:**
                        ``odtwriter`` is not able to determine page
                        numbers, so you will need to open the
                        generated document in ``oowriter``, then
                        right-click on the table of contents and
                        select "Update" to insert page numbers.
--custom-odt-header=CUSTOM_HEADER
                        Specify the contents of an custom header line.  See
                        odf_odt writer documentation for details about special
                        field character sequences.  See section
                        `Custom header/footers: inserting page numbers, date, time, etc`_
                        for details
--custom-odt-footer=CUSTOM_FOOTER
                        Specify the contents of an custom footer line.  See
                        odf_odt writer documentation for details about special
                        field character sequences.  See section
                        `Custom header/footers: inserting page numbers, date, time, etc`_
                        for details



Styles and Classes
==================

``odtwriter`` uses a number of styles that are defined in
``styles.xml`` in the default ``styles.odt``.  This section
describes those styles.

Note that with the ``--stylesheet`` command line option, you can
use either ``styles.odt`` or ``styles.xml``, as described below.
Use of ``styles.odt`` is recommended over ``styles.xml``.

You can modify the look of documents generated by ``odtwriter`` in
several ways:

- Open (a copy of) ``styles.odt`` in ``OpenOffice/oowriter`` and
  modify the style you wish to change. Now, save this document,
  then generate your documents using this modified copy of
  ``styles.odt``.

  In my version of ``oowriter``, to modify styles, either (1)
  press F11 or (2) use menu item "Format/Styles and Formatting",
  then right-click on the relevant style and select "Modify".
  Modify the style, then save your document.

- Open a document generated by ``odtwriter`` in `oowriter``.  Now,
  edit the style you are interested in modifying.  Now, you
  can extract the styles.xml file from your document and either
  (1) use this as your default styles file or (2) copy and paste
  the relevant style definition into your styles.xml.

- Extract ``styles.xml`` from ``styles.odt`` using your favorite
  ``zip/unzip`` tool.  Then modify ``styles.xml`` with a text
  editor.  Now re-zip it back into your own ``styles.odt``, or use
  it directly by specifying it with the ``--stylesheet`` command
  line option.  **Hint:** If you intend to extract ``styles.xml``
  from an ``.odt`` file (and then "re-zip" it), you should turn off
  XML optimization/compression in ``oowriter``.  In order to this
  in ``oowriter``, use Tools --> Options...  --> Load-Save -->
  General and turn off "Size optimization for XML format".

- Open an empty (or new) document in ``oowriter``.  Define all of
  the styles described in this section.  Then, use that document (a
  .odt file) as your stylesheet.  ``odtwriter`` will extract the
  ``styles.xml`` file from that document and insert it into the
  output document.

- Some combination of the above.


Styles used by odtwriter
------------------------

This section describes the styles used by ``odtwriter``.

Note that we do not describe the "look" of these styles.  That can
be easily changed by using ``oowriter`` to edit the document
``styles.odt`` (or a copy of it), and modifying any of the styles
described here.

To change the definition and appearance of these styles, open
``styles.odt`` in ``oowriter`` and open the Styles and Formatting
window by using the following menu item::

    Format --> Styles and Formatting

Then, click on the Paragraph Styles button or the Character Styles
button at the top of the Styles and Formatting window.  You may
also need to select "All Styles" from the drop-down selection list
at the bottom of the Styles and Formatting window in order to see
the styles used by ``odtwriter``.

Notice that you can make a copy of file ``styles.odt``, modify it
using ``oowriter``, and then use your copy with the
``--stylesheet=<file>`` command line option.  Example::

    $ rst2odt.py --stylesheet=mystyles.odt test2.txt test2.odt


Paragraph styles
~~~~~~~~~~~~~~~~

rststyle-attribution
    The style for attributions, for example, the attribution in a
    ``.. epigraph::`` directive.  Derived from
    ``rststyle-blockquote``.

rststyle-blockindent
    An indented block.

rststyle-blockquote
    A block quote.

rststyle-blockquote-bulletitem
    The style for bullet list items inside block quote.

rststyle-blockquote-enumitem
    The style for enumerated list items inside block quote.

rststyle-bodyindent
    An indented block.

rststyle-bulletitem
    An item in an bullet list.

rststyle-caption
    The caption in a figure or image.  Also see
    ``rststyle-legend``.

rststyle-codeblock
    Literal code blocks -- A block of example code.  Created with
    double colon ("::") followed by an indented block or with the
    ``.. parsed-literal::`` directive.  Derived from the
    ``Preformatted Text`` style in ``oowriter``.

rststyle-enumitem
    An item in an enumerated list.

rststyle-epigraph
    The style for epigraphs, for example, the body of an
    ``.. epigraph::`` directive.  Derived from
    ``rststyle-blockquote``.

rststyle-epigraph-bulletitem
    The style for bullet list items inside epigraphs.

rststyle-epigraph-enumitem
    The style for enumerated list items inside epigraphs.

rststyle-footer
    The style for footers.  The footer content originates from the
    ``..footer::`` directive and in response to the command line
    flags for generator (``--generator``), date/time generated
    (``--date`` and ``--time``), and view source link
    (``--source-link`` and ``--source-url=URL``).

rststyle-header
    The style for headers.  The header content originates from the
    ``..header::`` directive.

rststyle-highlights
    The style for highlightss, for example, the body of an
    ``.. highlights::`` directive.  Derived from
    ``rststyle-blockquote``.

rststyle-highlights-bulletitem
    The style for bullet list items inside highlights.

rststyle-highlights-enumitem
    The style for enumerated list items inside highlights.

rststyle-horizontalline
    A horizontal line, e.g. used for transitions.

rststyle-legend
    The legend in a figure.  See the Docutils figure directive.  Also
    see ``rststyle-caption``.

rststyle-table-title
    The style for titles of tables.  See section `The table
    directive`_.

rststyle-textbody
    Normal text.  The style for paragraphs.  Derived from the ``Text
    body`` style in ``oowriter``.


Character styles
~~~~~~~~~~~~~~~~

rststyle-emphasis
    Emphasis.  Normally rendered as italics.

rststyle-inlineliteral
    An inline literal.

rststyle-strong
    Strong emphasis.  Normally rendered as boldface.

rststyle-quotation
    In-line quoted material.

rststyle-codeblock-classname
    Syntax highlighting in literal code blocks -- class names.

rststyle-codeblock-comment
    Syntax highlighting in literal code blocks -- comments.

rststyle-codeblock-functionname
    Syntax highlighting in literal code blocks -- function names.

rststyle-codeblock-keyword
    Syntax highlighting in literal code blocks -- Python language
    keywords.

rststyle-codeblock-name
    Syntax highlighting in literal code blocks -- other names, for
    example, variables.

rststyle-codeblock-number
    Syntax highlighting in literal code blocks -- literal numbers,
    including integers, floats, hex numbers, and octal numbers.

rststyle-codeblock-operator
    Syntax highlighting in literal code blocks -- Python operators.

rststyle-codeblock-string
    Syntax highlighting in literal code blocks -- literal strings.


List styles
~~~~~~~~~~~

rststyle-bulletlist
    Bullet lists (but not in the table of contents)

rststyle-blockquote-bulletlist
    Bullet lists in block quotes.

rststyle-blockquote-enumlist
    Enumerated lists in block quotes.

rststyle-enumlist-arabic
    Enumerated lists, arabic (but not in the table of contents)

rststyle-enumlist-loweralpha
    Enumerated lists, lower alpha (but not in the table of contents)

rststyle-enumlist-lowerroman
    Enumerated lists, lower roman (but not in the table of contents)

rststyle-enumlist-upperalpha
    Enumerated lists, upper alpha (but not in the table of contents)

rststyle-enumlist-upperroman
    Enumerated lists, upper roman (but not in the table of contents)

rststyle-epigraph-bulletlist
    Bullet lists in epigraphs.  See the ``.. epigraph::``
    directive.

rststyle-epigraph-enumlist
    Enumerated lists in epigraphs.  See the ``.. epigraph::``
    directive.

rststyle-highlights-bulletlist
    Bullet lists in highlights blocks.  See the ``.. highlights::``
    directive.

rststyle-highlights-enumlist
    Enumerated lists in highlights blocks.  See the ``.. highlights::``
    directive.

rststyle-tocbulletlist
    Lists in the table of contents when section numbering is off.

rststyle-tocenumlist
    Lists in the table of contents when section numbering is on.


Admonition styles
~~~~~~~~~~~~~~~~~

rststyle-admon-attention-hdr
    The style for the attention admonition header/title.

rststyle-admon-attention-body
    The style for the attention admonition body/paragraph.

rststyle-admon-caution-hdr
    The style for the caution admonition header/title.

rststyle-admon-caution-body
    The style for the caution admonition body/paragraph.

rststyle-admon-danger-hdr
    The style for the  admonition header/title.

rststyle-admon-danger-body
    The style for the danger admonition body/paragraph.

rststyle-admon-error-hdr
    The style for the error admonition header/title.

rststyle-admon-error-body
    The style for the error admonition body/paragraph.

rststyle-admon-hint-hdr
    The style for the hint admonition header/title.

rststyle-admon-hint-body
    The style for the hint admonition body/paragraph.

rststyle-admon-hint-hdr
    The style for the hint admonition header/title.

rststyle-admon-hint-body
    The style for the hint admonition body/paragraph.

rststyle-admon-important-hdr
    The style for the important admonition header/title.

rststyle-admon-important-body
    The style for the important admonition body/paragraph.

rststyle-admon-note-hdr
    The style for the note admonition header/title.

rststyle-admon-note-hdr
    The style for the note admonition header/title.

rststyle-admon-tip-body
    The style for the tip admonition body/paragraph.

rststyle-admon-tip-hdr
    The style for the tip admonition header/title.

rststyle-admon-warning-body
    The style for the warning admonition body/paragraph.

rststyle-admon-warning-hdr
    The style for the warning admonition header/title.

rststyle-admon-generic-body
    The style for the generic admonition body/paragraph.

rststyle-admon-generic-hdr
    The style for the generic admonition header/title.


Rubric style
~~~~~~~~~~~~

rststyle-rubric
    The style for the text in a rubric directive.

The rubric directive recognizes a "class" option.  If entered,
odtwriter uses the value of that option instead of the
``rststyle-rubric`` style.  Here is an example which which attaches
the ``rststyle-heading1`` style to the generated rubric::

    .. rubric:: This is my first rubric
       :class: rststyle-heading1


Table styles
~~~~~~~~~~~~

A table style is generated by ``oowriter`` for each table that you
create.  Therefore, ``odtwriter`` attempts to do something similar.
These styles are created in the ``content.xml`` document in the
generated ``.odt`` file.  These styles have names prefixed with
"rststyle-table-".

There are two ways in which you can control the styles of your
tables: one simple, the other a bit more complex, but more
powerful.

First, you can change the thickness of the borders of all tables
generated in a document using the "--table-border-thickness"
command line option.

Second, you can control additional table properties and you can
apply different styles to different tables within the same document
by customizing and using tables in your stylesheet: ``styles.odt``
or whatever you name your copy of it using the --stylesheet command
line option.  Then, follow these rules to apply a table style to
the tables in your document:

- The default table style -- Optionally, alter and customize the
  style applied by default to tables in your document by modifying
  table "rststyle-table-0" in your stylesheet (``styles.odt`` or a
  copy).  Caution: Do not change the name of this table.

- User-created table styles -- Add one or more new table styles to
  be applied selectively to tables in your document by doing the
  following:

  1. Using ``oowriter``, add a table to your stylesheet and give it
     a name that starts with the prefix "rststyle-table-", for
     example "rststyle-table-vegetabledata".  Customize the table's
     border thickness, border color, and table background color.

  2. In your reStructuredText document, apply your new table style
     to a specific table by placing the "..  class::" directive
     immediately before the table, for example::

         .. class:: rststyle-table-vegetabledata

The default table style will be applied to all tables for which you
do not specify a style with the "..  class::" directive.

Customize the table properties in ``oowriter`` using the table
properties dialog for the table (style) that you wish to customize.

Note that "--table-border-thickness" command line option overrides
the border thickness specified in the stylesheet.

The specific properties that you can control with this second
method are the following:

- Border thickness and border color.

- Background color -- When you change the background color of a
  table to be used as a style (in ``styles.odt`` or whatever you
  name it), make sure you change the background color for the
  *table* and *not* for a cell in the table.  ``odtwriter`` picks
  the background color from the table, not from a cell within the
  table.


Line block styles
~~~~~~~~~~~~~~~~~~

The line block styles wrap the various nested levels of line
blocks.  There is one line block style for each indent level.

rststyle-lineblock1
    Line block style for line block with no indent.

rststyle-lineblock2
    Line block style for line block indented 1 level.

rststyle-lineblock3
    Line block style for line block indented 2 levels.

rststyle-lineblock4
    Line block style for line block indented 3 levels.

rststyle-lineblock5
    Line block style for line block indented 4 levels.

rststyle-lineblock6
    Line block style for line block indented 5 levels.

Notes:

- ``odtwriter`` does not check for a maximum level of indents
  within line blocks.  Therefore, you can define additional line
  block styles for additional levels if you need them.  Define
  these styles with the names ``rststyle-lineblock7``,
  ``rststyle-lineblock8``, ...

- Since the line block style is used to create indentation, a line
  block that is inside a block quote will use
  ``rststyle-lineblock2`` as its first level of indentation.


Footnote and citation styles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

rststyle-footnote
    The style for footnotes.  This style affects the footnote
    content, *not* the footnote reference in the body of the document.

rststyle-citation
    The style for citations.  This style affects the citation
    content, *not* the citation reference in the body of the document.
    You might need to adjust the indentation in this style
    depending on the length of the label used in your citations.


Heading and title styles
~~~~~~~~~~~~~~~~~~~~~~~~~

rststyle-heading{1|2|3|4|5}
    The styles for headings (section titles and sub-titles).  Five
    levels of sub-headings are provided: rststyle-heading1 through
    rststyle-heading5.

rststyle-title
    The style for the document title.

rststyle-subtitle
    The style for the document sub-title.


Image and figure styles
~~~~~~~~~~~~~~~~~~~~~~~~~

rststyle-image
    The style applied to an image, either an image by itself or an
    image in a figure.

rststyle-figureframe
    The style applied to a figure (actually to the frame that
    surrounds a figure).



Defining and using a custom stylesheet
---------------------------------------

You can create your own custom stylesheet.  Here is how:

1. Make a copy of ``styles.odt``, which is in the distribution.

2. Open your copy of ``styles.odt`` in ``oowriter``.  Modify styles
   in that document.  Then, save it.

3. When you run ``rst2odt.py``, use the ``--stylesheet`` command
   line option to use your custom stylesheet.  Run ``rst2odt.py
   --help`` to learn more about these options.


Why custom stylesheets
~~~~~~~~~~~~~~~~~~~~~~~

Here are a few reasons and ideas:

- The `page size`_ is stored in the style sheet.  The default page
  size is ``US Letter``.  You can change the page size (for example,
  to ``A4``) in your custom stylesheet by opening it in
  ``oowriter``, then clicking on menu: ``Format/Page...``, then
  clicking on the ``Page`` tab.


Defining and using custom style names
-------------------------------------

[Credits: Stefan Merten designed and implemented the custom style names
capability.  Thank you, Stefan.]

You can also instruct ``odtwriter`` to use style names of your own
choice.


Why custom style names
~~~~~~~~~~~~~~~~~~~~~~

Here are a few reasons and ideas:

- Suppose that your organization has a standard set of styles in
  OOo ``oowriter`` and suppose that the use of these styles is
  required. You would like to generate ODF documents from
  reST text files, and you want the generated documents to contain
  these styles.

- Suppose that your company or organization has a policy of using a
  certain MS Word template for some set of documents.  You would
  like to generate ODF documents that use these custom style names,
  so that you can export these documents from ODF ``oowriter`` to MS
  Word documents that use these style names.

- Suppose that your documents are written in a language other than
  English.  You would like the style names visible in the "Styles
  and Formatting" window in OOo ``oowriter`` (menu item
  ``Format/Styles and Formatting``) to be understandable in the
  language of your users.

- ``odtwriter`` maps single asterisks/stars (for example, \*stuff\*)
  to emphasis and double stars to strong.  You'd like to reverse
  these.  Or, you would like to generate headings level 3 and 4
  where headings level 1 and 2 would normally be produced.


How to use custom style names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to define custom style names and to generate documents that
contain them, do the following:


1. Create a configuration file containing a "Formats" section.  The
   configuration file obeys the file format supported by the Python
   ConfigParser module:
   `ConfigParser -- Configuration file parser --
   https://docs.python.org/3/library/configparser.html
   <https://docs.python.org/3/library/configparser.html>`_.

2. In the "Formats" section of the configuration file, create one
   option (a name-value pair) for each custom style name that you
   wish to define.  The option name is the standard ``odtwriter``
   style name (without "rststyle-"), and the value is your custom
   style name.  Here is an example::

       [Formats]
       textbody: mytextbody
       bulletitem: mybulletitem
       heading1: myheading1
           o
           o
           o

3. Create a styles document that defines the styles generated by
   ``odtwriter``.  You can create and edit the styles in OOo
   ``oowriter``.  It may be helpful to begin by making a copy of the
   styles document that is part of the ``odtwriter`` distribution
   (``styles.odt``).

4. When you run ``odtwriter``, specify the ``--odf-config-file``
   option.  You might also want to specify your styles document
   using the ``--stylesheet`` option in order to include your
   custom style definitions.  For example::

       rst2odt.py --odf-config-file=mymappingfile.ini \
         --stylesheet=mystyles.odt mydoc.txt mydoc.odt


Classes
-------

``odtwriter`` uses the following Docutils class to provide additional
control of the generation of ODF content:

- Class ``wrap`` -- Use this to cause the wrapping of text around
  an image.  The default is *not* to wrap text around images.
  Here is an example::

      .. class:: wrap
      .. image:: images/flower01.png
          :alt: A bright yellow flower
          :height: 55
          :width: 60


Roles
-------

You can use a Docutils custom interpreted text role to attach a
character style to an inline area of text.  This capability also
enables you to attach a new character style (with a new name) that
you define yourself.  Do this by defining your role in a stylesheet
as a character style with "rststyle-" prefixed to your role name,
then use the ``role`` directive and inline markup to apply your
role.

In order to use this capability, do the following:

- Define the character style for your custom role in a stylesheet
  (a copy of ``styles.odt``) with the prefix "rststyle-".
  Remember: (1) If the name of your custom role is "pretty", then
  define a character style named "rststyle-pretty".  (2) Define the
  style as a *character* style, and *not*, for example as a
  paragraph style.

- Declare your role in the source reStructuredText document in a
  ``role`` directive.  Example::

      .. role:: pretty

- Use inline markup to apply your role to text.  Example::

      We have :pretty:`very nice` apples.

Here is another example::

    .. role:: fancy

    Here is some :fancy:`pretty text` that looks fancy.

For more on roles see:
`Custom Interpreted Text Roles --
https://docutils.sourceforge.io/docs/ref/rst/directives.html#custom-interpreted-text-roles
<https://docutils.sourceforge.io/docs/ref/rst/directives.html#custom-interpreted-text-roles>`_.

**Note:** The ability to base a role on another existing role is
*not* supported by ``odtwriter``.


Hints and Suggestions and Features
==================================

Table of contents
-----------------

The ``..contents::`` directive causes ``odtwriter`` to generate
either:

1. A static, outline style table of contents, if the
   ``--generate-list-toc`` command line option is specified, or

2. An ODF/``oowriter`` style table of contents containing
   dynamically updated page numbers and with the formatting control
   that ``oowriter`` gives you.  This is the default, or use the
   command line option ``--generate-list-toc``.  **Note:**
   ``odtwriter`` is not able to determine page numbers, so you will
   need to open the generated document in ``oowriter``, then
   right-click on the table of contents and select "Update" to
   insert correct page numbers.


Syntax highlighting
-------------------

``odtwriter`` can add syntax highlighting to code in code
blocks.  In order to activate this, do all of the following:

1. Install `Pygments`_ and ...

2. Use the command line option ``--add-syntax-highlighting``.
   Example::

       $ rst2odt.py --add-syntax-highlight test.txt test.odt

The following styles are defined in styles.odt and are used for
literal code blocks and syntax highlighting:

- Paragraph styles:

  - rststyle-codeblock -- The style for the code block as a whole.

- Character styles:

  - rststyle-codeblock-classname -- class names.

  - rststyle-codeblock-comment -- comments.

  - rststyle-codeblock-functionname -- function names.

  - rststyle-codeblock-keyword -- Python language keywords.

  - rststyle-codeblock-name -- other names, for example,
    variables.

  - rststyle-codeblock-number -- literal numbers, including
    integers, floats, hex numbers, and octal numbers.

  - rststyle-codeblock-operator -- Python operators.

  - rststyle-codeblock-string -- literal strings.

Each of the above styles has a default appearance that is defined
in ``styles.odt``.  To change that definition and appearance, open
``styles.odt`` in ``oowriter`` and use menu item::

    Format --> Styles and Formatting

Then, click on the Paragraph Styles button or the Character Styles
button at the top of the Styles and Formatting window.  You may
also need to select "All Styles" from the drop-down selection list
at the bottom of the Styles and Formatting window.



The container directive
-----------------------

There is limited support for the ``container`` directive.  The
limitations and rules for the container directive are the following:

- Only the first class in the list of classes (arguments) is used.

- That class/style must be a paragraph style and not (for example) a
  character style.

- The style/class given to the container directive will have a
  "rststyle-" prefix in the odt file.

So, for example::

    .. container:: style-1 style-2 style-3

        a block of text

- Only ``style-1`` is used; ``style-2`` and ``style-3`` are ignored.

- ``rststyle-style-1`` must be defined.  It should be an existing,
  predefined style, or you should define it in your stylesheet
  (``styles.odt`` or the argument to the ``--stylesheet`` command
  line option).

- ``rststyle-style-1`` must be a paragraph style.

To define a paragraph style, use the following menu item in
``oowriter``::

    Format --> Styles and Formatting

Then, click on the Paragraph Styles button.

The following example attaches the ``rststyle-heading2`` style (a
predefined style) to each paragraph/line in the container::

    .. container:: heading2

       Line 1 of container.

       Line 2 of container.

More information on how to define a new style (for example, in your
``styles.odt``) can be found in section
`Defining and using custom style names`_.



The table directive
-------------------

The ``table`` directive can be used to add a title to a table.
Example::

    .. table:: A little test table

        =========== =============
        Name        Value
        =========== =============
        Dave        Cute
        Mona        Smart
        =========== =============

The above will insert the title "A little test table" at the top of the
table.  You can modify the appearance of the title by modifying the
paragraph style ``rststyle-table-title``.


Footnotes and citations
-----------------------

Footnotes and citations are supported.

There are additional styles ``rststyle-footnote`` and
``rststyle-citation`` for footnotes and citations. See
`Footnote and citation styles`_.

You may need to modify the citation style to fit the length of your
citation references.

Endnotes -- There are command line options that control whether
``odtwriter`` creates endnotes instead of footnotes.  Endnotes
appear at the end of the document instead of at the bottom of the
page.  See flags ``--endnotes-end-doc`` and
``--no-endnotes-end-doc`` in section `Command line options`_.


Images and figures
------------------

If on the image or the figure directive you provide the scale option
but do not provide the width and height options, then ``odtwriter``
will attempt to determine the size of the image using the `Python
Imaging Library`_ (PIL).  If ``odtwriter`` cannot find and import
Python Imaging Library, it will raise an exception.  If this
ocurrs, you can fix it by doing one of the following:

- Install the Python Imaging Library or

- Remove the ``scale`` option or

- Add both the ``width`` and the ``height`` options.

So, the rule is: if on any image or figure, you specify scale but
not both width and height, you must install the `Python Imaging
Library`_ library.

For more information about PIL, see: `Python Imaging Library`_.


The raw directive
-----------------

The ``raw`` directive is supported.  Use output format type "odt".

You will need to be careful about the formatting of the raw
content.  In particular, introduced whitespace might be a problem.

In order to produce content for the raw directive for use by
``odtwriter``, you might want to extract the file ``content.xml``
from a ``.odt`` file (using some Zip tool), and then clip, paste,
and modify a selected bit of it.

Here is an example::

    .. raw:: odt

        <text:p text:style-name="rststyle-textbody">Determining
        <text:span text:style-name="rststyle-emphasis">which</text:span>
        namespace a name is in is static.  It can be determined by a
        lexical scan of the code.  If a variable is assigned a value
        <text:span text:style-name="rststyle-emphasis">anywhere</text:span>
        in a scope (specifically within a function or method body),
        then that variable is local to that scope.  If Python does
        not find a variable in the local scope, then it looks next
        in the global scope (also sometimes called the module scope)
        and then in the built-ins scope.  But, the
        <text:span text:style-name="rststyle-inlineliteral">global</text:span>
        statement can be used to force Python to find and use a global
        variable (a variable defined at top level in a module) rather
        than create a local one.</text:p>


The meta directive
------------------

``odtwriter`` supports the ``meta`` directive.  "keywords"
and "description" are set in their respective odt fields.
Other meta fields are set as "Custom Properties".
Here is an example::

    .. meta::
       :keywords: reStructuredText, docutils, formatting
       :description lang=en: A reST document, contains formatted
           text in a formatted style.
       :custom_var: Value

To see the results of the ``meta`` directive in ``oowriter``,
select menu item "File/Properties...", then click on the
"Description" tab ("keywords" and "description" fields) and the
"Custom Properties" tab.


Footnote references inside footnotes
------------------------------------

Not supported.

Get a grip.  Be serious.  Try a dose of reality.

``odtwriter`` ignores them.

They cause ``oowriter`` to croak.


Page size
---------

The default page size, in documents generated by the ODT writer is
"US Letter".  You can change this (for example to ``A4``) by using a
custom stylesheet.  See `Defining and using a custom stylesheet`_
for instructions on how to do this.

On machines which support ``paperconf``, the ODT writer can insert
the default page size for your locale.  In order for this to work,
the following conditions must be met:

1. The program ``paperconf`` must be available on your system.
   ``odtwriter`` uses ``paperconf -s`` to obtain the paper size.
   See ``man paperconf`` for more information.

2. The page height and width settings must be absent from the stylesheet
   used to generate the document.
   
   You can use the Python script ``prepstyles.py`` distributed with
   Docutils to remove the page height and width settings from a
   stylesheet file ``STYLES.odt`` with ::

       $ python3 -m docutils.writers.odf_odt.prepstyles STYLES.odt
   
   (the command changed in Docutils 0.20.1).

.. warning:: If you edit your stylesheet in ``oowriter`` and then
    save it, ``oowriter`` automatically inserts a page height and
    width in the styles for that (stylesheet) document.  If that is
    not the page size that you want and you want ``odtwriter`` to
    insert a default page size using ``paperconf``, then you will
    need to strip the page size from your stylesheet each time you
    edit that stylesheet with ``oowriter``.



Custom header/footers: inserting page numbers, date, time, etc
----------------------------------------------------------------

You can specify custom headers and footers for your document from
the command line.  These headers and footers can be used to insert
fields such as the page number, page count, date, time, etc.  See
below for a complete list.

To insert a custom header or footer, use the "--custom-odt-header"
or "--custom-odt-footer" command line options.  For example, the
following inserts a footer containing the page number and page
count::

    $ rst2odt.py --custom-odt-footer="Page %p% of %P%" f1.txt f1.odt


Field specifiers
~~~~~~~~~~~~~~~~~~

You can use the following field specifiers to insert ``oowriter``
fields in your custom headers and footers:

%p%
    The current page number.

%P%
    The number of pages in the document.

%d1%
    The current date in format 12/31/99.

%d2%
    The current date in format 12/31/1999.

%d3%
    The current date in format Dec 31, 1999.

%d4%
    The current date in format December 31, 1999.

%d5%
    The current date in format 1999-12-31.

%t1%
    The current time in format 14:22.

%t2%
    The current time in format 14:22:33.

%t3%
    The current time in format 02:22 PM.

%t4%
    The current time in format 02:22:33 PM.

%a%
    The author of the document (actually the initial creator).

%t%
    The document title.

%s%
    The document subject.


**Note:** The use of the above field specifiers in the body of your
reStructuredText document is **not** supported, because these
specifiers are not standard across Docutils writers.



Credits
=======

Stefan Merten designed and implemented the custom style names
capability.  Thank you, Stefan.

Michael Schutte supports the Debian GNU/Linux distribution of
``odtwriter``.  Thank you, Michael, for providing and supporting
the Debian package.

Michael Schutte implemented the fix that enables ``odtwriter`` to
pick up the default paper size on platforms where the program
``paperconf`` is available.  Thank you.



.. _rst2odt.py:
    tools.html#rst2odt-py
.. _reStructuredText:
    ../ref/rst/restructuredtext.html
.. _`OpenDocument Text`:
    https://en.wikipedia.org/wiki/OpenDocument
.. _LibreOffice:
    https://libreoffice.org/
.. _`Pygments`:
    https://pygments.org/
.. _`Python Imaging Library`:
    https://en.wikipedia.org/wiki/Python_Imaging_Library


/Part 2. 028.📜 docutils-0.20.1/tools/editors/README.txt

======================================
 Editor Support for reStructuredText_
======================================

:Date: $Date: 2022-01-20 11:10:45 +0100 (Do, 20. Jän 2022) $

The files in this directory contain support code for reStructuredText
editing for the following editors:

* `Emacs <emacs>`__: see the `README <emacs/README.html>`__ and `Emacs
  Support for reStructuredText <../../docs/user/emacs.html>`_.

External links:

* `reStructuredText syntax highlighting mode for vim
  <http://www.vim.org/scripts/script.php?script_id=973>`__

* `VST (Vim reStructured Text) is a plugin for Vim7 with folding for
  reST <http://www.vim.org/scripts/script.php?script_id=1334>`__

* `rst mode <https://jedmodes.sourceforge.io/mode/rst/>`__ for the `JED`_
  programmers editor

Additions are welcome.

.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _JED: http://www.jedsoft.org/jed/


/Part 2. 029.📜 docutils-0.20.1/tools/editors/emacs/README.txt

.. -*- coding: utf-8 -*-

=====================
 Emacs Support Files
=====================

:Date: $Date: 2022-01-29 23:26:10 +0100 (Sa, 29. Jän 2022) $

This directory contains the following Emacs lisp package files:

* `<rst.el>`_: Emacs support for reStructuredText_.  This file contains a
  major mode that provides:

  * Section decoration/adornment creation and updating (M. Blais);
  * Table-of-contents mode and insertion (M. Blais);
  * Font-lock syntax highlighting (S. Merten);
  * Some handy editing functions (D. Goodger).
  * Some functions for converting rest documents from within emacs (M. Blais).

* `<tests/>`_ subdirectory: automated tests for some of the features in rst.el.
  Please make sure the tests pass if you change the LISP code.  Just type "make"
  to run the tests.

To install the package, put a copy of the package file in a directory on your
``load-path`` (use ``C-h v load-path`` to check).

For setup and usage details, see `Emacs Support for reStructuredText
<../../../docs/user/emacs.html>`_.

.. _reStructuredText: https://docutils.sourceforge.io/rst.html


/Part 3. 030.📜 docutils-0.20.1/docs/howto/cmdline-tool.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===============================================
 Inside A Docutils Command-Line Front-End Tool
===============================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

`The Docutils Publisher`_ class was set up to make building
command-line tools easy.  All that's required is to choose components
and supply settings for variations.  Let's take a look at a typical
command-line front-end tool, ``tools/rst2html.py``, from top to
bottom.

On Unixish systems, it's best to make the file executable (``chmod +x
file``), and supply an interpreter on the first line, the "shebang" or
"hash-bang" line::

    #!/usr/bin/env python

Windows systems can be set up to associate the Python interpreter with
the ``.py`` extension.

Next are some comments providing metadata::

    # $Id: cmdline-tool.txt 9051 2022-04-02 21:59:06Z milde $
    # Author: David Goodger <goodger@python.org>
    # Copyright: This module has been placed in the public domain.

The module docstring describes the purpose of the tool::

    """
    A minimal front end to the Docutils Publisher, producing HTML.
    """

This next block attempts to invoke locale support for
internationalization services, specifically text encoding.  It's not
supported on all platforms though, so it's forgiving::

    try:
        import locale
        locale.setlocale(locale.LC_ALL, '')
    except:
        pass

The real work will be done by the code that's imported here::

    from docutils.core import publish_cmdline, default_description

We construct a description of the tool, for command-line help::

    description = ('Generates (X)HTML documents from standalone '
                   'reStructuredText sources.  ' + default_description)

Now we call the Publisher convenience function, which takes over.
Most of its defaults are used ("standalone" Reader,
"reStructuredText" Parser, etc.).  The HTML Writer is chosen by name,
and a description for command-line help is passed in::

    publish_cmdline(writer_name='html', description=description)

That's it!  `The Docutils Publisher`_ takes care of the rest.

.. _The Docutils Publisher: ./publisher.html


/Part 3. 031.📜 docutils-0.20.1/docs/howto/html-stylesheets.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

==============================================
 Writing HTML (CSS) Stylesheets for Docutils_
==============================================

:Author: Lea Wiemann
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

.. _Docutils: https://docutils.sourceforge.io/


The look of Docutils' HTML output is customizable via CSS stylesheets.
The default stylesheets can be found in the
``docutils/writers/html*/`` directories of the ``html4css1`` and
``html-base`` writers in the Docutils installation.  Use the front-end
command (``rst2html.py`` or ``rst2html5.py``) with the
``--help`` option and look at the description of the ``--stylesheet-path``
command-line option for the exact machine-specific location.

To customize the look of HTML documents, you can override the settings
of the default stylesheet in your own stylesheet. Specify both, the
default stylesheet and your stylesheet to the ``--stylesheet`` or
``--stylesheet-path`` command line option (or the corresponding
settings in a configuration_ file), e.g. ::

  rst2html.py --stylesheet=html4css1.css,transition-stars.css

This is the preferable approach if you want to embed the stylesheet(s), as
this ensures that an up-to-date version of ``html4css1.css`` is embedded.

Alternatively, copy the default style sheet to the same place as your
output HTML files will go and place a new file (e.g. called
``my-docutils.css``) in the same directory and use the following
template::

    /*
    :Author: Your Name
    :Contact: Your Email Address
    :Copyright: This stylesheet has been placed in the public domain.

    Stylesheet for use with Docutils.  [Optionally place a more
    detailed description here.]
    */

    @import url(html4css1.css);

    /* Your customizations go here.  For example: */

    h1, h2, h3, h4, h5, h6, p.topic-title {
      font-family: sans-serif }

For help on the CSS syntax, see, e.g., the `W3C Specification`_, the
`WDG's guide to Cascading Style Sheets`__, or the `MDN Web Docs`__.

.. _W3C Specification: https://www.w3.org/Style/CSS/#specs
__ http://www.htmlhelp.com/reference/css/
__ https://developer.mozilla.org/en-US/docs/Web/CSS

It is important that you do not edit a copy of ``html4css1.css``
directly because ``html4css1.css`` is frequently updated with each new
release of Docutils.

Also make sure that you import ``html4css1.css`` (using "``@import
url(html4css1.css);``") because the definitions contained in the
default stylesheet are required for correct rendering (margins,
alignment, etc.).

If you think your stylesheet is fancy and you would like to let others
benefit from your efforts, you are encouraged to post the stylesheet to the
Docutils-users_ mailing list. It might find its place in the `stylesheet
collection`_ in the Docutils Sandbox_.

If you decide to share your stylesheet with other users of Docutils,
please keep website-specific customizations not applicable to
Docutils' HTML code in a separate stylesheet.

.. base for relative links is /docutils/docs/howto/

.. _Docutils-users: ../user/mailing-lists.html#docutils-users
.. _configuration: ../user/config.txt
.. _sandbox: ../../../sandbox
.. _stylesheet collection: ../../../sandbox/stylesheets/




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 032.📜 docutils-0.20.1/docs/howto/i18n.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

================================
 Docutils_ Internationalization
================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-07-29 13:56:58 +0200 (Fr, 29. Jul 2022) $
:Revision: $Revision: 9118 $
:Copyright: This document has been placed in the public domain.


.. .. contents:: Table of Contents


This document describes the internationalization facilities of the
Docutils_ project.  `Introduction to i18n`_ by Tomohiro KUBOTA is a
good general reference.  "Internationalization" is often abbreviated
as "i18n": "i" + 18 letters + "n".

.. Note::

   The i18n facilities of Docutils should be considered a "first
   draft".  They work so far, but improvements are welcome.
   Specifically, standard i18n facilities like "gettext" have yet to
   be explored.

Docutils is designed to work flexibly with text in multiple languages
(one language at a time).  Language-specific features are (or should
be [#]_) fully parameterized.  To enable a new language, two modules
have to be added to the project: one for Docutils itself (the
`Docutils Language Module`_) and one for the reStructuredText parser
(the `reStructuredText Language Module`_). Users may add local language
support via a module in the PYTHONPATH root (e.g. the working directory).

.. [#] If anything in Docutils is insufficiently parameterized, it
   should be considered a bug.  Please report bugs to the Docutils
   project bug tracker on SourceForge at
   https://sourceforge.net/p/docutils/bugs/

.. _Docutils: https://docutils.sourceforge.io/
.. _Introduction to i18n:
   http://www.debian.org/doc/manuals/intro-i18n/


Language Module Names
=====================

Language modules are named using `language tags`_ as defined in
`BCP 47`_. [#]_ in lowercase, converting hyphens to underscores [#]_.

A typical language identifier consists of a 2-letter language code
from `ISO 639`_ (3-letter codes can be used if no 2-letter code
exists). The language identifier can have an optional subtag,
typically for variations based on country (from `ISO 3166`_ 2-letter
country codes).  If no language identifier is specified, the default
is "en" for English.  Examples of module names include ``en.py``,
``fr.py``, ``ja.py``, and ``pt_br.py``.

.. [#] BCP stands for 'Best Current Practice', and is a persistent
   name for a series of RFCs whose numbers change as they are updated.
   The latest RFC describing language tag syntax is RFC 5646, Tags for
   the Identification of Languages, and it obsoletes the older RFCs
   4646, 3066 and 1766.

.. [#] Subtags are separated from primary tags by underscores instead
   of hyphens, to conform to Python naming rules.

.. _language tags: https://www.w3.org/International/articles/language-tags/
.. _BCP 47: https://www.rfc-editor.org/rfc/bcp/bcp47.txt
.. _ISO 639: http://www.loc.gov/standards/iso639-2/php/English_list.php
.. _ISO 3166: http://www.iso.ch/iso/en/prods-services/iso3166ma/
   02iso-3166-code-lists/index.html


Docutils Language Module
========================

Modules in ``docutils/languages`` contain language mappings for
markup-independent language-specific features of Docutils.  To make a
new language module, just copy the ``en.py`` file, rename it with the
code for your language (see `Language Module Names`_ above), and
translate the terms as described below.

Each Docutils language module contains three module attributes:

``labels``
    This is a mapping of node class names to language-dependent
    boilerplate label text.  The label text is used by Writer
    components when they encounter `document tree`_ elements whose
    `class names`_ are the mapping keys.

    The entry **values** (*not* the keys) should be translated to the
    target language.

``bibliographic_fields``
    This is a mapping of language-dependent field names (converted to
    lower case) to canonical field names (keys of
    ``DocInfo.biblio_notes`` in ``docutils.transforms.frontmatter``).
    It is used when transforming `bibliographic fields`_.

    The **keys** should be translated to the target language.

``author_separators``
    This is a list of strings used to parse the 'Authors_'
    bibliographic field.  They separate individual authors' names, and
    are tried in order (i.e., earlier items take priority, and the
    first item that matches wins).  The English-language module
    defines them as ``[';', ',']``; semi-colons can be used to
    separate names like "Arthur Pewtie, Esq.".

    Most languages won't have to "translate" this list.

.. _document tree:
    ../ref/doctree.html
.. _class names:
    ../ref/doctree.html#element-reference
.. _authors:
    .. ref/doctree.html#authors
.. _bibliographic fields:
    ../ref/rst/restructuredtext.html#bibliographic-fields


reStructuredText Language Module
================================

Modules in ``docutils/parsers/rst/languages`` contain language
mappings for language-specific features of the reStructuredText
parser.  To make a new language module, just copy the ``en.py`` file,
rename it with the code for your language (see `Language Module
Names`_ above), and translate the terms as described below.

Each reStructuredText language module contains two module attributes:

``directives``
    This is a mapping from language-dependent directive names to
    canonical directive names.  The canonical directive names are
    registered in ``docutils/parsers/rst/directives/__init__.py``,
    in ``_directive_registry`` and documented in
    `reStructuredText Directives`_.

    The keys should be translated to the target language.  Synonyms
    (multiple keys with the same values) are allowed; this is useful
    for abbreviations.

``roles``
    This is a mapping language-dependent role names to canonical role
    names for interpreted text.  The canonical role names are
    registered in ``docutils/parsers/rst/states.py``, in
    ``Inliner._interpreted_roles`` (this may change) and documented
    in `reStructuredText Interpreted Text Roles`_.

    The keys should be translated to the target language.  Synonyms
    (multiple keys with the same values) are allowed; this is useful
    for abbreviations.

.. _reStructuredText Directives: ../ref/rst/directives.html
.. _reStructuredText Interpreted Text Roles: ../ref/rst/roles.html


Testing the Language Modules
============================

Whenever a new language module is added or an existing one modified,
the unit tests should be run.  The test modules can be found in the
docutils/test directory from code_ or from the `latest snapshot`_.

The ``test_language.py`` module can be run as a script.  With no
arguments, it will test all language modules.  With one or more
language codes, it will test just those languages.  For example::

    $ python test_language.py en
    ..
    ----------------------------------------
    Ran 2 tests in 0.095s

    OK

Use the "alltests.py" script to run all test modules, exhaustively
testing the parser and other parts of the Docutils system.

.. _code: https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/
.. _latest snapshot: https://sourceforge.net/p/docutils/code/HEAD/tarball


Submitting the Language Modules
===============================

If you do not have repository write access and want to contribute your
language modules, feel free to submit them via the `SourceForge patch
tracker`__.

__ https://sourceforge.net/p/docutils/patches/


/Part 3. 033.📜 docutils-0.20.1/docs/howto/rst-directives.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=======================================
 Creating reStructuredText_ Directives
=======================================

:Authors: Dethe Elza, David Goodger, Lea Wiemann
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

.. _reStructuredText: https://docutils.sourceforge.io/rst.html


Directives are the primary extension mechanism of reStructuredText.
This document aims to make the creation of new directives as easy and
understandable as possible.  There are only a couple of
reStructuredText-specific features the developer needs to know to
create a basic directive.

The syntax of directives is detailed in the `reStructuredText Markup
Specification`_, and standard directives are described in
`reStructuredText Directives`_.

Directives are a reStructuredText markup/parser concept.  There is no
"directive" document tree element, no single element that corresponds
exactly to the concept of directives.  Instead, choose the most
appropriate elements from the existing Docutils elements.  Directives
build structures using the existing building blocks.  See `The
Docutils Document Tree`_ and the ``docutils.nodes`` module for more
about the building blocks of Docutils documents.

.. _reStructuredText Markup Specification:
   ../ref/rst/restructuredtext.html#directives
.. _reStructuredText Directives: ../ref/rst/directives.html
.. _The Docutils Document Tree: ../ref/doctree.html


.. .. contents:: Table of Contents


The Directive Class
===================

Directives are created by defining a directive class that inherits
from ``docutils.parsers.rst.Directive``::

    from docutils.parsers import rst

    class MyDirective(rst.Directive):

        ...

To understand how to implement the directive, let's have a look at the
docstring of the ``Directive`` base class::

    >>> from docutils.parsers import rst
    >>> print rst.Directive.__doc__

        Base class for reStructuredText directives.

        The following attributes may be set by subclasses.  They are
        interpreted by the directive parser (which runs the directive
        class):

        - `required_arguments`: The number of required arguments (default:
          0).

        - `optional_arguments`: The number of optional arguments (default:
          0).

        - `final_argument_whitespace`: A boolean, indicating if the final
          argument may contain whitespace (default: False).

        - `option_spec`: A dictionary, mapping known option names to
          conversion functions such as `int` or `float` (default: {}, no
          options).  Several conversion functions are defined in the
          directives/__init__.py module.

          Option conversion functions take a single parameter, the option
          argument (a string or ``None``), validate it and/or convert it
          to the appropriate form.  Conversion functions may raise
          `ValueError` and `TypeError` exceptions.

        - `has_content`: A boolean; True if content is allowed.  Client
          code must handle the case where content is required but not
          supplied (an empty content list will be supplied).

        Arguments are normally single whitespace-separated words.  The
        final argument may contain whitespace and/or newlines if
        `final_argument_whitespace` is True.

        If the form of the arguments is more complex, specify only one
        argument (either required or optional) and set
        `final_argument_whitespace` to True; the client code must do any
        context-sensitive parsing.

        When a directive implementation is being run, the directive class
        is instantiated, and the `run()` method is executed.  During
        instantiation, the following instance variables are set:

        - ``name`` is the directive type or name (string).

        - ``arguments`` is the list of positional arguments (strings).

        - ``options`` is a dictionary mapping option names (strings) to
          values (type depends on option conversion functions; see
          `option_spec` above).

        - ``content`` is a list of strings, the directive content line by line.

        - ``lineno`` is the line number of the first line of the directive.

        - ``content_offset`` is the line offset of the first line of the content from
          the beginning of the current input.  Used when initiating a nested parse.

        - ``block_text`` is a string containing the entire directive.

        - ``state`` is the state which called the directive function.

        - ``state_machine`` is the state machine which controls the state which called
          the directive function.

        Directive functions return a list of nodes which will be inserted
        into the document tree at the point where the directive was
        encountered.  This can be an empty list if there is nothing to
        insert.

        For ordinary directives, the list must contain body elements or
        structural elements.  Some directives are intended specifically
        for substitution definitions, and must return a list of `Text`
        nodes and/or inline elements (suitable for inline insertion, in
        place of the substitution reference).  Such directives must verify
        substitution definition context, typically using code like this::

            if not isinstance(state, states.SubstitutionDef):
                error = state_machine.reporter.error(
                    'Invalid context: the "%s" directive can only be used '
                    'within a substitution definition.' % (name),
                    nodes.literal_block(block_text, block_text), line=lineno)
                return [error]

    >>>


Option Conversion Functions
===========================

An option specification (``Directive.option_spec``) must be defined
detailing the options available to the directive.  An option spec is a
mapping of option name to conversion function; conversion functions
are applied to each option value to check validity and convert them to
the expected type.  Python's built-in conversion functions are often
usable for this, such as ``int``, ``float``.  Other useful conversion
functions are included in the ``docutils.parsers.rst.directives``
package (in the ``__init__.py`` module):

- ``flag``: For options with no option arguments.  Checks for an
  argument (raises ``ValueError`` if found), returns ``None`` for
  valid flag options.

- ``unchanged_required``: Returns the text argument, unchanged.
  Raises ``ValueError`` if no argument is found.

- ``unchanged``: Returns the text argument, unchanged.  Returns an
  empty string ("") if no argument is found.

- ``path``: Returns the path argument unwrapped (with newlines
  removed).  Raises ``ValueError`` if no argument is found.

- ``uri``: Returns the URI argument with whitespace removed.  Raises
  ``ValueError`` if no argument is found.

- ``nonnegative_int``: Checks for a nonnegative integer argument,
  and raises ``ValueError`` if not.

- ``class_option``: Converts the argument into an ID-compatible
  string and returns it.  Raises ``ValueError`` if no argument is
  found.

- ``unicode_code``: Convert a Unicode character code to a Unicode
  character.

- ``single_char_or_unicode``: A single character is returned as-is.
  Unicode characters codes are converted as in ``unicode_code``.

- ``single_char_or_whitespace_or_unicode``: As with
  ``single_char_or_unicode``, but "tab" and "space" are also
  supported.

- ``positive_int``: Converts the argument into an integer.  Raises
  ValueError for negative, zero, or non-integer values.

- ``positive_int_list``: Converts a space- or comma-separated list
  of integers into a Python list of integers.  Raises ValueError for
  non-positive-integer values.

- ``encoding``: Verifies the encoding argument by lookup.  Raises
  ValueError for unknown encodings.

A further utility function, ``choice``, is supplied to enable
options whose argument must be a member of a finite set of possible
values.  A custom conversion function must be written to use it.
For example::

    from docutils.parsers.rst import directives

    def yesno(argument):
        return directives.choice(argument, ('yes', 'no'))

For example, here is an option spec for a directive which allows two
options, "name" and "value", each with an option argument::

    option_spec = {'name': unchanged, 'value': int}


Error Handling
==============

If your directive implementation encounters an error during
processing, you should call ``self.error()`` inside the ``run()``
method::

    if error_condition:
        raise self.error('Error message.')

The ``self.error()`` method will immediately raise an exception that
will be caught by the reStructuredText directive handler.  The
directive handler will then insert an error-level system message in
the document at the place where the directive occurred.

Instead of ``self.error``, you can also use ``self.severe`` and
``self.warning`` for more or less severe problems.

If you want to return a system message *and* document contents, you need to
create the system message yourself instead of using the ``self.error``
convenience method:

.. code-block:: py

    def run(self):
        # Create node(s).
        node = nodes.paragraph(...)
        # Node list to return.
        node_list = [node]
        if error_condition:
             # Create system message.
             error = self.reporter.error(
                 'Error in "%s" directive: Your error message.' % self.name,
                 nodes.literal_block(block_text, block_text), line=lineno)
             node_list.append(error)
        return node_list


Register the Directive
======================

* If the directive is a general-use **addition to the Docutils core**,
  it must be registered with the parser and language mappings added:

  1. Register the new directive using its canonical name in
     ``docutils/parsers/rst/directives/__init__.py``, in the
     ``_directive_registry`` dictionary.  This allows the
     reStructuredText parser to find and use the directive.

  2. Add an entry to the ``directives`` dictionary in
     ``docutils/parsers/rst/languages/en.py`` for the directive, mapping
     the English name to the canonical name (both lowercase).  Usually
     the English name and the canonical name are the same.

  3. Update all the other language modules as well.  For languages in
     which you are proficient, please add translations.  For other
     languages, add the English directive name plus "(translation
     required)".

* If the directive is **application-specific**, use the
  ``register_directive`` function::

      from docutils.parsers.rst import directives
      directives.register_directive(directive_name, directive_class)


Examples
========

For the most direct and accurate information, "Use the Source, Luke!".
All standard directives are documented in `reStructuredText
Directives`_, and the source code implementing them is located in the
``docutils/parsers/rst/directives`` package.  The ``__init__.py``
module contains a mapping of directive name to module and function
name.  Several representative directives are described below.


Admonitions
-----------

`Admonition directives`__, such as "note" and "caution", are quite
simple.  They have no directive arguments or options.  Admonition
directive content is interpreted as ordinary reStructuredText.

__ ../ref/rst/directives.html#specific-admonitions

The resulting document tree for a simple reStructuredText line
"``.. note:: This is a note.``" looks as follows:

    <note>
        <paragraph>
            This is a note.

The directive class for the "note" directive simply derives from a
generic admonition directive class:

.. code-block:: py

    class Note(BaseAdmonition):

        node_class = nodes.note

Note that the only thing distinguishing the various admonition
directives is the element (node class) generated.  In the code above,
the node class is set as a class attribute and is read by the
``run()`` method of ``BaseAdmonition``, where the actual processing
takes place::

    # Import Docutils document tree nodes module.
    from docutils import nodes
    # Import Directive base class.
    from docutils.parsers.rst import Directive

    class BaseAdmonition(Directive):

        required_arguments = 0
        optional_arguments = 0
        final_argument_whitespace = True
        option_spec = {}
        has_content = True

        node_class = None
        """Subclasses must set this to the appropriate admonition node class."""

        def run(self):
            # Raise an error if the directive does not have contents.
            self.assert_has_content()
            text = '\n'.join(self.content)
            # Create the admonition node, to be populated by `nested_parse`.
            admonition_node = self.node_class(rawsource=text)
            # Parse the directive contents.
            self.state.nested_parse(self.content, self.content_offset,
                                    admonition_node)
            return [admonition_node]

Three things are noteworthy in the ``run()`` method above:

* The ``admonition_node = self.node_class(text)`` line creates the
  wrapper element, using the class set by the specific admonition
  subclasses (as in note, ``node_class = nodes.note``).

* The call to ``state.nested_parse()`` is what does the actual
  processing.  It parses the directive content and adds any generated
  elements as child elements of ``admonition_node``.

* If there was no directive content, the ``assert_has_content()``
  convenience method raises an error exception by calling
  ``self.error()`` (see `Error Handling`_ above).


"image"
-------

.. _image: ../ref/rst/directives.html#image

The "image_" directive is used to insert a picture into a document.
This directive has one argument, the path to the image file, and
supports several options.  There is no directive content.  Here's an
early version of the image directive class::

    # Import Docutils document tree nodes module.
    from docutils import nodes
    # Import ``directives`` module (contains conversion functions).
    from docutils.parsers.rst import directives
    # Import Directive base class.
    from docutils.parsers.rst import Directive

    def align(argument):
        """Conversion function for the "align" option."""
        return directives.choice(argument, ('left', 'center', 'right'))

    class Image(Directive):

        required_arguments = 1
        optional_arguments = 0
        final_argument_whitespace = True
        option_spec = {'alt': directives.unchanged,
                       'height': directives.nonnegative_int,
                       'width': directives.nonnegative_int,
                       'scale': directives.nonnegative_int,
                       'align': align,
                       }
        has_content = False

        def run(self):
            reference = directives.uri(self.arguments[0])
            self.options['uri'] = reference
            image_node = nodes.image(rawsource=self.block_text,
                                     **self.options)
            return [image_node]

Several things are noteworthy in the code above:

* The "image" directive requires a single argument, which is allowed
  to contain whitespace (``final_argument_whitespace = True``).  This
  is to allow for long URLs which may span multiple lines.  The first
  line of the ``run()`` method joins the URL, discarding any embedded
  whitespace.

* The reference is added to the ``options`` dictionary under the
  "uri" key; this becomes an attribute of the ``nodes.image`` element
  object.  Any other attributes have already been set explicitly in
  the reStructuredText source text.


The Pending Element
-------------------

Directives that cause actions to be performed *after* the complete
document tree has been generated can be implemented using a
``pending`` node.  The ``pending`` node causes a transform_ to be run
after the document has been parsed.

For an example usage of the ``pending`` node, see the implementation
of the ``contents`` directive in
docutils.parsers.rst.directives.parts__.

.. _transform: ../api/transforms.html
__ https://docutils.sourceforge.io/docutils/parsers/rst/directives/parts.py


/Part 3. 034.📜 docutils-0.20.1/docs/howto/rst-roles.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

==================================================
 Creating reStructuredText Interpreted Text Roles
==================================================

:Authors: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

Interpreted text roles are an extension mechanism for inline markup in
reStructuredText.  This document aims to make the creation of new
roles as easy and understandable as possible.

Standard roles are described in `reStructuredText Interpreted Text
Roles`_.  See the `Interpreted Text`_ section in the `reStructuredText
Markup Specification`_ for syntax details.

.. _reStructuredText Interpreted Text Roles: ../ref/rst/roles.html
.. _Interpreted Text:
   ../ref/rst/restructuredtext.html#interpreted-text
.. _reStructuredText Markup Specification:
   ../ref/rst/restructuredtext.html


.. .. contents:: Table of Contents


Define the Role Function
========================

The role function creates and returns inline elements (nodes) and does
any additional processing required.  Its signature is as follows::

    def role_fn(name, rawtext, text, lineno, inliner,
                options=None, content=None):
        code...

    # Optional function attributes for customization:
    role_fn.options = ...
    role_fn.content = ...

Function attributes are described below (see `Specify Role Function
Options and Content`_).  The role function parameters are as follows:

* ``name``: The local name of the interpreted role, the role name
  actually used in the document.

* ``rawtext``: A string containing the entire interpreted text input,
  including the role and markup.  Return it as a ``problematic`` node
  linked to a system message if a problem is encountered.

* ``text``: The interpreted text content.

* ``lineno``: The line number where the text block containing the
  interpreted text begins.

* ``inliner``: The ``docutils.parsers.rst.states.Inliner`` object that
  called role_fn.  It contains the several attributes useful for error
  reporting and document tree access.

* ``options``: A dictionary of directive options for customization
  (from the `"role" directive`_), to be interpreted by the role
  function.  Used for additional attributes for the generated elements
  and other functionality.

* ``content``: A list of strings, the directive content for
  customization (from the `"role" directive`_).  To be interpreted by
  the role function.

Role functions return a tuple of two values:

* A list of nodes which will be inserted into the document tree at the
  point where the interpreted role was encountered (can be an empty
  list).

* A list of system messages, which will be inserted into the document tree
  immediately after the end of the current block (can also be empty).


Specify Role Function Options and Content
=========================================

Function attributes are for customization, and are interpreted by the
`"role" directive`_.  If unspecified, role function attributes are
assumed to have the value ``None``.  Two function attributes are
recognized:

- ``options``: The option specification.  All role functions
  implicitly support the "class" option, unless disabled with an
  explicit ``{'class': None}``.

  An option specification must be defined detailing the options
  available to the "role" directive.  An option spec is a mapping of
  option name to conversion function; conversion functions are applied
  to each option value to check validity and convert them to the
  expected type.  Python's built-in conversion functions are often
  usable for this, such as ``int``, ``float``, and ``bool`` (included
  in Python from version 2.2.1).  Other useful conversion functions
  are included in the ``docutils.parsers.rst.directives`` package.
  For further details, see `Creating reStructuredText Directives`_.

- ``content``: A boolean; true if "role" directive content is allowed.
  Role functions must handle the case where content is required but
  not supplied (an empty content list will be supplied).

  As of this writing, no roles accept directive content.

Note that unlike directives, the "arguments" function attribute is not
supported for role customization.  Directive arguments are handled by
the "role" directive itself.

.. _"role" directive: ../ref/rst/directives.html#role
.. _Creating reStructuredText Directives:
   rst-directives.html#specify-directive-arguments-options-and-content


Register the Role
=================

If the role is a general-use addition to the Docutils core, it must be
registered with the parser and language mappings added:

1. Register the new role using the canonical name::

       from docutils.parsers.rst import roles
       roles.register_canonical_role(name, role_function)

   This code is normally placed immediately after the definition of
   the role function.

2. Add an entry to the ``roles`` dictionary in
   ``docutils/parsers/rst/languages/en.py`` for the role, mapping the
   English name to the canonical name (both lowercase).  Usually the
   English name and the canonical name are the same.  Abbreviations
   and other aliases may also be added here.

3. Update all the other language modules as well.  For languages in
   which you are proficient, please add translations.  For other
   languages, add the English role name plus "(translation required)".

If the role is application-specific, use the ``register_local_role``
function::

    from docutils.parsers.rst import roles
    roles.register_local_role(name, role_function)


Examples
========

For the most direct and accurate information, "Use the Source, Luke!".
All standard roles are documented in `reStructuredText Interpreted
Text Roles`_, and the source code implementing them is located in the
``docutils/parsers/rst/roles.py`` module.  Several representative
roles are described below.


Generic Roles
-------------

Many roles simply wrap a given element around the text.  There's a
special helper function, ``register_generic_role``, which generates a
role function from the canonical role name and node class::

    register_generic_role('emphasis', nodes.emphasis)

For the implementation of ``register_generic_role``, see the
``docutils.parsers.rst.roles`` module.


RFC Reference Role
------------------

This role allows easy references to RFCs_ (Request For Comments
documents) by automatically providing the base URL,
http://www.faqs.org/rfcs/, and appending the RFC document itself
(rfcXXXX.html, where XXXX is the RFC number).  For example::

    See :RFC:`2822` for information about email headers.

This is equivalent to::

    See `RFC 2822`__ for information about email headers.

    __ http://www.faqs.org/rfcs/rfc2822.html

Here is the implementation of the role::

    def rfc_reference_role(role, rawtext, text, lineno, inliner,
                           options=None, content=None):
        if "#" in text:
            rfcnum, section = utils.unescape(text).split("#", 1)
        else:
            rfcnum, section  = utils.unescape(text), None
        try:
            rfcnum = int(rfcnum)
            if rfcnum < 1:
                raise ValueError
        except ValueError:
            msg = inliner.reporter.error(
                'RFC number must be a number greater than or equal to 1; '
                '"%s" is invalid.' % text, line=lineno)
            prb = inliner.problematic(rawtext, rawtext, msg)
            return [prb], [msg]
        # Base URL mainly used by inliner.rfc_reference, so this is correct:
        ref = inliner.document.settings.rfc_base_url + inliner.rfc_url % rfcnum
        if section is not None:
            ref += "#"+section
        options = normalize_role_options(options)
        node = nodes.reference(rawtext, 'RFC ' + str(rfcnum), refuri=ref,
                               **options)
        return [node], []

    register_canonical_role('rfc-reference', rfc_reference_role)

Noteworthy in the code above are:

1. The interpreted text itself should contain the RFC number.  The
   ``try`` clause verifies by converting it to an integer.  If the
   conversion fails, the ``except`` clause is executed: a system
   message is generated, the entire interpreted text construct (in
   ``rawtext``) is wrapped in a ``problematic`` node (linked to the
   system message), and the two are returned.

2. The RFC reference itself is constructed from a stock URI, set as
   the "refuri" attribute of a "reference" element.

3. The ``options`` function parameter, a dictionary, may contain a
   "class" customization attribute; it is interpreted and replaced
   with a "classes" attribute by the ``set_classes()`` function.  The
   resulting "classes" attribute is passed through to the "reference"
   element node constructor.

.. _RFCs: http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?query=rfc&action=Search&sourceid=Mozilla-search


/Part 3. 035.📜 docutils-0.20.1/docs/howto/security.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=============================
 Deploying Docutils Securely
=============================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents

Introduction
============

Initially, Docutils was intended for command-line tools and
single-user applications.  Through-the-web editing and processing was
not envisaged, therefore web security was not a consideration.  Once
Docutils/reStructuredText started being incorporated into an
ever-increasing number of web applications (blogs__, wikis__, content
management systems, and others), several security issues arose and
have been addressed.  Still, **Docutils does not come in a
through-the-web secure state**, because this would inconvenience
ordinary users.  This document provides pointers to help you secure
the Docutils software in your applications.

__ ../../FAQ.html#are-there-any-weblog-blog-projects-that-use-restructuredtext-syntax
__ ../../FAQ.html#are-there-any-wikis-that-use-restructuredtext-syntax


The Issues
==========

File Creation
-------------

Docutils does not do any checks before writing to a file:

* Existing **files are overwritten** without asking!
* Files may be **written to any location** accessible to the process.
* There are **no restrictions to** the **file names**.

Special care must be taken when allowing users to configure the *output
destination* or the `warning_stream`_, `record_dependencies`_, or
`_destination`_ settings.

.. _warning_stream: ../user/config.html#warning-stream
.. _record_dependencies: ../user/config.html#record-dependencies
.. _`_destination`: ../user/config.html#destination


External Data Insertion
-----------------------

There are several `reStructuredText directives`_ that can insert
external data (files and URLs) into the output document.  These
directives are:

* "include_", by its very nature,
* "raw_", through its ``:file:`` and ``:url:`` options,
* "csv-table_", through its ``:file:`` and ``:url:`` options,
* "image_", if `embed_images`_ is true.

The "include_" directive and the other directives' file insertion
features can be disabled by setting "file_insertion_enabled_" to
"false__".

__ ../user/config.html#configuration-file-syntax
.. _reStructuredText directives: ../ref/rst/directives.html
.. _include: ../ref/rst/directives.html#include
.. _raw: ../ref/rst/directives.html#raw-directive
.. _csv-table: ../ref/rst/directives.html#csv-table
.. _image: ../ref/rst/directives.html#image
.. _embed_images: ../user/config.html#embed-images
.. _file_insertion_enabled: ../user/config.html#file-insertion-enabled


Raw HTML Insertion
------------------

The "raw_" directive is intended for the insertion of
non-reStructuredText data that is passed untouched to the Writer.
This directive can be abused to bypass site features or insert
malicious JavaScript code into a web page.  The "raw_" directive can
be disabled by setting "raw_enabled_" to "false".

.. _raw_enabled: ../user/config.html#raw-enabled


CPU and memory utilization
--------------------------

Parsing **complex reStructuredText documents may require high
processing resources**. This enables `Denial of Service` attacks using
specially crafted input.

It is recommended to enforce limits for the computation time and
resource utilization of the Docutils process when processing
untrusted input. In addition, the "line_length_limit_" can be
adapted.

.. _line_length_limit: ../user/config.html#line-length-limit


Securing Docutils
=================

Programmatically Via Application Default Settings
-------------------------------------------------

If your application calls Docutils via one of the `convenience
functions`_, you can pass a dictionary of default settings that
override the component defaults::

    defaults = {'file_insertion_enabled': False,
                'raw_enabled': False}
    output = docutils.core.publish_string(
        ..., settings_overrides=defaults)

Note that these defaults can be overridden by configuration files (and
command-line options if applicable).  If this is not desired, you can
disable configuration file processing with the ``_disable_config``
setting::

    defaults = {'file_insertion_enabled': False,
                'raw_enabled': False,
                '_disable_config': True}
    output = docutils.core.publish_string(
        ..., settings_overrides=defaults)

.. _convenience functions: ../api/publisher.html


Via a Configuration File
------------------------

You may secure Docutils via a configuration file:

* if your application executes one of the `Docutils front-end tools`_
  as a separate process;
* if you cannot or choose not to alter the source code of your
  application or the component that calls Docutils; or
* if you want to secure all Docutils deployments system-wide.

If you call Docutils programmatically, it may be preferable to use the
methods described in the section above.

Docutils automatically looks in three places for a configuration file:

* ``/etc/docutils.conf``, for system-wide configuration,
* ``./docutils.conf`` (in the current working directory), for
  project-specific configuration, and
* ``~/.docutils`` (in the user's home directory), for user-specific
  configuration.

These locations can be overridden by the ``DOCUTILSCONFIG``
environment variable.  Details about configuration files, the purpose
of the various locations, and ``DOCUTILSCONFIG`` are available in the
`"Configuration Files"`_ section of `Docutils Configuration`_.

To fully secure a recent Docutils installation, the configuration file
should contain the following lines ::

    [general]
    file-insertion-enabled: off
    raw-enabled: no

and untrusted users must be prevented to modify or create local
configuration files that overwrite these settings.

.. _Docutils front-end tools: ../user/tools.html
.. _"Configuration Files": ../user/config.html#configuration-files
.. _Docutils Configuration: ../user/config.html


Version Applicability
=====================

The "file_insertion_enabled_" and "raw_enabled_" settings were added
to Docutils 0.3.9; previous versions will ignore these settings.

A bug existed in the configuration file handling of these settings in
Docutils 0.4 and earlier: the right-hand-side needed to be left blank
(no values)::

       [general]
       file-insertion-enabled:
       raw-enabled:

The bug was fixed with the 0.4.1 release on 2006-11-12.

The "line_length_limit_" is new in Docutils 0.17.


Related Documents
=================

`Docutils Runtime Settings`_ explains the relationship between
component settings specifications, application settings
specifications, configuration files, and command-line options

`Docutils Configuration`_ describes configuration files (locations,
structure, and syntax), and lists all settings and command-line
options.

.. _Docutils Runtime Settings: ../api/runtime-settings.html


/Part 3. 036.📜 docutils-0.20.1/docs/api/publisher.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

========================
 The Docutils Publisher
========================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2023-05-03 01:04:27 +0200 (Mi, 03. Mai 2023) $
:Revision: $Revision: 9369 $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents


The ``docutils.core.Publisher`` class is the core of Docutils,
managing all the processing and relationships between components.  See
`PEP 258`_ for an overview of Docutils components.
Configuration is done via `runtime settings`_ assembled from several sources.
The *Publisher convenience functions* are the normal entry points for
using Docutils as a library.

.. _PEP 258: ../peps/pep-0258.html


Publisher Convenience Functions
===============================

There are several convenience functions in the ``docutils.core`` module.
Each of these functions sets up a `docutils.core.Publisher` object,
then calls its ``publish()`` method.  ``docutils.core.Publisher.publish()``
handles everything else.

See the module docstring, ``help(docutils.core)``, and the function
docstrings, e.g., ``help(docutils.core.publish_string)``, for details and
a description of the function arguments.

.. TODO: generate API documentation with Sphinx and add links to it.


publish_cmdline()
-----------------

Function for command-line front-end tools, like ``rst2html.py`` or
`"console_scripts" entry points`_ like `core.rst2html()` with file I/O.
In addition to writing the output document to a file-like object, also
returns it as `str` instance (rsp. `bytes` for binary output document
formats).

There are several examples in the ``tools/`` directory of the Docutils
repository. A detailed analysis of one such tool is `Inside A Docutils
Command-Line Front-End Tool`_.

.. _"console_scripts" entry points:
    https://packaging.python.org/en/latest/specifications/entry-points/
.. _Inside A Docutils Command-Line Front-End Tool: ../howto/cmdline-tool.html


publish_file()
--------------

For programmatic use with file I/O. In addition to writing the output
document to a file-like object, also returns it as `str` instance
(rsp. `bytes` for binary output document formats).


publish_string()
----------------

For programmatic use with _`string I/O`:

Input
  can be a `str` or `bytes` instance.
  `bytes` are decoded with input_encoding_.

Output
  * is a `bytes` instance, if output_encoding_ is set to an encoding
    registered with Python's "codecs_" module (default: "utf-8"),
  * a `str` instance, if output_encoding_ is set to the special value
    ``"unicode"``.

.. Caution::
   The "output_encoding" and "output_encoding_error_handler" `runtime
   settings`_ may affect the content of the output document:
   Some document formats contain an *encoding declaration*,
   some formats use substitutions for non-encodable characters.

   Use `publish_parts()`_ to get a `str` instance of the output document
   as well as the values of the output_encoding_ and
   output_encoding_error_handler_ runtime settings.

*This function is provisional* because in Python 3 the name and behaviour
no longer match.

.. _codecs: https://docs.python.org/3/library/codecs.html


publish_doctree()
-----------------

Parse string input (cf. `string I/O`_) into a `Docutils document tree`_ data
structure (doctree). The doctree can be modified, pickled & unpickled,
etc., and then reprocessed with `publish_from_doctree()`_.


publish_from_doctree()
----------------------

Render from an existing `document tree`_ data structure (doctree).
Returns the output document as a memory object (cf. `string I/O`_).

*This function is provisional* because in Python 3 the name and behaviour
of the *string output* interface no longer match.


publish_programmatically()
--------------------------

Auxilliary function used by `publish_file()`_, `publish_string()`_,
`publish_doctree()`_, and `publish_parts()`_.
Applications should not need to call this function directly.

.. _publish-parts-details:

publish_parts()
---------------

For programmatic use with string input (cf. `string I/O`_).
Returns a dictionary of document parts as `str` instances. [#binary-output]_
Dictionary keys are the part names.
Each Writer component may publish a different set of document parts,
described below.

Example: post-process the output document with a custom function
``post_process()`` before encoding with user-customizable encoding
and errors :

.. code-block:: py

       def publish_bytes_with_postprocessing(*args, **kwargs):
           parts = publish_parts(*args, **kwargs)
           out_str = post_process(parts['whole'])
           return out_str.encode(parts['encoding'], parts['errors'])

There are more usage examples in the `docutils/examples.py`_ module.

.. _docutils/examples.py: ../../docutils/examples.py
.. _ODT: ../user/odt.html


Parts Provided By All Writers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_`encoding`
    The `output_encoding`_ setting.

_`errors`
    The `output_encoding_error_handler`_ setting.

_`version`
    The version of Docutils used.

_`whole`
    Contains the entire formatted document. [#binary-output]_

    .. [#binary-output] Output documents in binary formats (e.g. ODT_)
       are stored as a `bytes` instance.


Parts Provided By the HTML Writers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HTML4 Writer
................................

_`body`
    ``parts['body']`` is equivalent to parts['fragment_'].  It is
    *not* equivalent to parts['html_body_'].

_`body_prefix`
    ``parts['body_prefix']`` contains::

        </head>
        <body>
        <div class="document" ...>

    and, if applicable::

        <div class="header">
        ...
        </div>

_`body_pre_docinfo`
    ``parts['body_pre_docinfo]`` contains (as applicable)::

        <h1 class="title">...</h1>
        <h2 class="subtitle" id="...">...</h2>

_`body_suffix`
    ``parts['body_suffix']`` contains::

        </div>

    (the end-tag for ``<div class="document">``), the footer division
    if applicable::

        <div class="footer">
        ...
        </div>

    and::

        </body>
        </html>

_`docinfo`
    ``parts['docinfo']`` contains the document bibliographic data, the
    docinfo field list rendered as a table.

_`footer`
    ``parts['footer']`` contains the document footer content, meant to
    appear at the bottom of a web page, or repeated at the bottom of
    every printed page.

_`fragment`
    ``parts['fragment']`` contains the document body (*not* the HTML
    ``<body>``).  In other words, it contains the entire document,
    less the document title, subtitle, docinfo, header, and footer.

_`head`
    ``parts['head']`` contains ``<meta ... />`` tags and the document
    ``<title>...</title>``.

_`head_prefix`
    ``parts['head_prefix']`` contains the XML declaration, the DOCTYPE
    declaration, the ``<html ...>`` start tag and the ``<head>`` start
    tag.

_`header`
    ``parts['header']`` contains the document header content, meant to
    appear at the top of a web page, or repeated at the top of every
    printed page.

_`html_body`
    ``parts['html_body']`` contains the HTML ``<body>`` content, less
    the ``<body>`` and ``</body>`` tags themselves.

_`html_head`
    ``parts['html_head']`` contains the HTML ``<head>`` content, less
    the stylesheet link and the ``<head>`` and ``</head>`` tags
    themselves.  Since `publish_parts()` returns `str` instances which
    do not know about the output encoding, the "Content-Type" meta
    tag's "charset" value is left unresolved, as "%s"::

        <meta http-equiv="Content-Type" content="text/html; charset=%s" />

    The interpolation should be done by client code.

_`html_prolog`
    ``parts['html_prolog]`` contains the XML declaration and the
    doctype declaration.  The XML declaration's "encoding" attribute's
    value is left unresolved, as "%s"::

        <?xml version="1.0" encoding="%s" ?>

    The interpolation should be done by client code.

_`html_subtitle`
    ``parts['html_subtitle']`` contains the document subtitle,
    including the enclosing ``<h2 class="subtitle">`` and ``</h2>``
    tags.

_`html_title`
    ``parts['html_title']`` contains the document title, including the
    enclosing ``<h1 class="title">`` and ``</h1>`` tags.

_`meta`
    ``parts['meta']`` contains all ``<meta ... />`` tags.

_`stylesheet`
    ``parts['stylesheet']`` contains the embedded stylesheet or
    stylesheet link.

_`subtitle`
    ``parts['subtitle']`` contains the document subtitle text and any
    inline markup.  It does not include the enclosing ``<h2>`` and
    ``</h2>`` tags.

_`title`
    ``parts['title']`` contains the document title text and any inline
    markup.  It does not include the enclosing ``<h1>`` and ``</h1>``
    tags.


PEP/HTML Writer
................................

The PEP/HTML writer provides the same parts as the `HTML4 writer`_,
plus the following:

_`pepnum`
    ``parts['pepnum']`` contains the PEP number
    (extracted from the `header preamble`__).

    __ https://peps.python.org/pep-0001/#pep-header-preamble


S5/HTML Writer
................................

The S5/HTML writer provides the same parts as the `HTML4 writer`_.


HTML5 Writer
................................

The HTML5 writer provides the same parts as the `HTML4 writer`_.
However, it uses semantic HTML5 elements for the document, header and
footer.


Parts Provided by the "LaTeX2e" and "XeTeX" Writers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

See the template files default.tex_, titlepage.tex_, titlingpage.tex_,
and xelatex.tex_ for examples how these parts can be combined
into a valid LaTeX document.

abstract
    ``parts['abstract']`` contains the formatted content of the
    'abstract' docinfo field.

body
    ``parts['body']`` contains the document's content. In other words, it
    contains the entire document, except the document title, subtitle, and
    docinfo.

    This part can be included into another LaTeX document body using the
    ``\input{}`` command.

body_pre_docinfo
    ``parts['body_pre_docinfo]`` contains the ``\maketitle`` command.

dedication
    ``parts['dedication']`` contains the formatted content of the
    'dedication' docinfo field.

docinfo
    ``parts['docinfo']`` contains the document bibliographic data, the
    docinfo field list rendered as a table.

    With ``--use-latex-docinfo`` 'author', 'organization', 'contact',
    'address' and 'date' info is moved to titledata.

    'dedication' and 'abstract' are always moved to separate parts.

fallbacks
    ``parts['fallbacks']`` contains fallback definitions for
    Docutils-specific commands and environments.

head_prefix
    ``parts['head_prefix']`` contains the declaration of
    documentclass and document options.

latex_preamble
    ``parts['latex_preamble']`` contains the argument of the
    ``--latex-preamble`` option.

pdfsetup
     ``parts['pdfsetup']`` contains the PDF properties
     ("hyperref" package setup).

requirements
    ``parts['requirements']`` contains required packages and setup
    before the stylesheet inclusion.

stylesheet
    ``parts['stylesheet']`` contains the embedded stylesheet(s) or
    stylesheet loading command(s).

subtitle
    ``parts['subtitle']`` contains the document subtitle text and any
    inline markup.

title
    ``parts['title']`` contains the document title text and any inline
    markup.

titledata
    ``parts['titledata]`` contains the combined title data in
    ``\title``, ``\author``, and ``\date`` macros.

    With ``--use-latex-docinfo``, this includes the 'author',
    'organization', 'contact', 'address' and 'date' docinfo items.

.. _default.tex:
   https://docutils.sourceforge.io/docutils/writers/latex2e/default.tex
.. _titlepage.tex:
   https://docutils.sourceforge.io/docutils/writers/latex2e/titlepage.tex
.. _titlingpage.tex:
   https://docutils.sourceforge.io/docutils/writers/latex2e/titlingpage.tex
.. _xelatex.tex:
   https://docutils.sourceforge.io/docutils/writers/latex2e/xelatex.tex


.. _runtime settings:

Configuration
=============

Docutils is configured by *runtime settings* assembled from several
sources:

* *settings specifications* of the selected components (reader, parser,
  writer),
* the ``settings_overrides`` argument of the `Publisher convenience
  functions`_ (see below),
* *configuration files* (unless disabled), and
* *command-line options* (if enabled).

Docutils overlays default and explicitly specified values from these
sources such that settings behave the way we want and expect them to
behave. For details, see `Docutils Runtime Settings`_.
The individual settings are described in `Docutils Configuration`_.

To pass application-specific setting defaults to the Publisher
convenience functions, use the ``settings_overrides`` parameter.  Pass
a dictionary of setting names & values, like this::

    app_defaults = {'input_encoding': 'ascii',
                    'output_encoding': 'latin-1'}
    output = publish_string(..., settings_overrides=app_defaults)

Settings from command-line options override configuration file
settings, and they override application defaults.

See `Docutils Runtime Settings`_ or the docstring of 
`publish_programmatically()` for a description of all `configuration 
arguments`_ of the Publisher convenience functions.

.. _configuration arguments: runtime-settings.html#convenience-functions


Encodings
=========

.. important:: Details will change over the next Docutils versions.
   See RELEASE-NOTES_

The default **input encoding** is UTF-8. A different encoding can be
specified with the `input_encoding`_ setting.

The encoding of a reStructuredText source can also be given by a
`Unicode byte order mark` (BOM_) or a "magic comment" [#magic-comment]_
similar to :PEP:`263`. This makes the input encoding both *visible* and
*changeable* on a per-source basis.

If the encoding is unspecified and decoding with UTF-8 fails, the locale's
`preferred encoding`_ is used as a fallback (if it maps to a valid codec
and differs from UTF-8).

The default behaviour differs from Python's `open()`:

- The UTF-8 encoding is tried before the `preferred encoding`_.
  (This is almost sure to fail if the actual source encoding differs.)
- An `explicit encoding declaration` [#magic-comment]_ in the source
  takes precedence over the `preferred encoding`_.
- An optional BOM_ is removed from UTF-8 encoded sources.

The default **output encoding** is UTF-8.
A different encoding can be specified with the `output_encoding`_ setting.

.. Caution:: Docutils may introduce non-ASCII text if you use
   `auto-symbol footnotes`_ or the `"contents" directive`_.
   In non-English documents, also auto-generated labels
   may contain non-ASCII characters.

.. [#magic-comment] A comment like ::

     .. text encoding: <encoding name>

   on the first or second line of a reStructuredText source
   defines `<encoding name>` as the source's input encoding.

   Examples: (using formats recognized by popular editors) ::

       .. -*- mode: rst -*-
          -*- coding: latin1 -*-

   or::

       .. vim: set fileencoding=cp737 :

   More precisely, the first and second line are searched for the following
   regular expression::

       coding[:=]\s*([-\w.]+)

   The first group of this expression is then interpreted as encoding name.
   If the first line matches the second line is ignored.

   This feature is scheduled to be removed in Docutils 1.0.
   See the `inspecting_codecs`_ package for a possible replacement.


.. _Inside A Docutils Command-Line Front-End Tool: ../howto/cmdline-tool.html
.. _RELEASE-NOTES: ../../RELEASE-NOTES.html#future-changes
.. _input_encoding: ../user/config.html#input-encoding
.. _preferred encoding:
   https://docs.python.org/3/library/locale.html#locale.getpreferredencoding
.. _BOM: https://docs.python.org/3/library/codecs.html#codecs.BOM
.. _output_encoding: ../user/config.html#output-encoding
.. _output_encoding_error_handler:
   ../user/config.html#output-encoding-error-handler
.. _auto-symbol footnotes:
   ../ref/rst/restructuredtext.html#auto-symbol-footnotes
.. _"contents" directive:
   ../ref/rst/directives.html#table-of-contents
.. _document tree:
.. _Docutils document tree: ../ref/doctree.html
.. _Docutils Runtime Settings: ./runtime-settings.html
.. _Docutils Configuration: ../user/config.html
.. _inspecting_codecs: https://codeberg.org/milde/inspecting-codecs


/Part 3. 037.📜 docutils-0.20.1/docs/api/runtime-settings.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===========================
 Docutils Runtime Settings
===========================

:Author: David Goodger, Günter Milde
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents


Introduction
============

Docutils runtime settings are assembled from several sources:

* Settings specifications of the selected components_,
* `configuration files`_ (if enabled), and
* command-line options (if enabled).

Docutils overlays default and explicitly specified values from these
sources such that settings behave the way we want and expect them to
behave.


Settings priority
=================

The sources are overlaid in the following order (later sources
overwrite earlier ones):

1. Defaults specified in the `settings_spec`__ and
   `settings_defaults`__ attributes for each component_.

   __ SettingsSpec.settings_spec_
   __ SettingsSpec.settings_defaults_

2. Defaults specified in the `settings_default_overrides`__ attribute
   for each component_.

   __ SettingsSpec.settings_default_overrides_

3. Settings specified in the `settings_overrides`__ parameter of the
   `convenience functions`_ resp. the `settings_overrides` attribute of
   a `Publisher`_ instance.

   __ `settings_overrides parameter`_

4. Settings specified in `active sections`_ of the `configuration files`_
   in the order described in `Configuration File Sections & Entries`_
   (if enabled).

5. Command line options (if enabled).

For details see the ``docutils/__init__.py``, ``docutils/core.py``, and
``docutils.frontend.py`` modules and the implementation description in
`Runtime Settings Processing`_.


.. _SettingsSpec:

SettingsSpec base class
=======================

.. note::
   Implementation details will change with the move to replace the
   deprecated optparse_ module with argparse_.

The `docutils.SettingsSpec` base class is inherited by Docutils
components_ and `frontend.OptionParser`.
It defines the following six **attributes**:

.. _SettingsSpec.settings_spec:

`settings_spec`
   a sequence of

   1. option group title (string or None)

   2. description (string or None)

   3. option tuples with

      a) help text
      b) options string(s)
      c) dictionary with keyword arguments for `OptionParser.add_option()`_
         and an optional "validator", a `frontend.validate_*()` function
         that processes the values (e.g. convert to other data types).

   For examples, see the source of ``frontend.OptionParser.settings_spec``
   or the `settings_spec` attributes of the Docutils components_.

   .. _SettingsSpec.settings_defaults:

`settings_defaults`
   for purely programmatic settings
   (not accessible from command line and configuration files).

   .. _SettingsSpec.settings_default_overrides:

`settings_default_overrides`
   to override defaults for settings
   defined in other components' `setting_specs`.

`relative_path_settings`
   listing settings containing filesystem paths.

   .. _active sections:

`config_section`
   the configuration file section specific to this
   component.

`config_section_dependencies`
   lists configuration files sections
   that should also be read (before the `config_section`).

The last two attributes define which configuration file sections are
"active". See also `Configuration File Sections & Entries`_.


Glossary
========

.. _component:

components
----------

Docutils front-ends and applications combine a selection of
*components* of the `Docutils Project Model`_.

All components inherit the `SettingsSpec`_ base class.
This means that all instances of ``readers.Reader``, ``parsers.Parser``, and
``writers.Writer`` are also instances of ``docutils.SettingsSpec``.

For the determination of runtime settings, ``frontend.OptionParser`` and
the `settings_spec parameter`_ in application settings specifications
are treated as components as well.


.. _convenience function:

convenience functions
---------------------

Applications usually deploy Docutils by one of the
`Publisher convenience functions`_.

All convenience functions accept the following optional parameters:

.. _settings parameter:

`settings`
  a ``frontend.Values`` instance.
  If present, it must be complete.

  No further runtime settings processing is done and the
  following parameters have no effect.

  .. _settings_spec parameter:

`settings_spec`
  a `SettingsSpec`_ subclass or instance containing the settings
  specification for the "Application" itself.
  The instance is added to the components_ (after the generic
  settings, parser, reader, and writer).

  .. _settings_overrides parameter:

`settings_overrides`
  a dictionary which is used to update the
  defaults of the components' settings specifications.

  .. _config_section parameter:

`config_section`
  the name of an application-specific
  `configuration file section`_ for this application.

  Can be specified instead of a `settings_spec` (a new SettingsSpec_
  instance that just defines a configuration section will be created)
  or in addition to a `settings_spec`
  (overriding its `config_section` attribute).


settings_spec
-------------

The name ``settings_spec`` may refer to

a) an instance of the SettingsSpec_ class, or
b) the data structure `SettingsSpec.settings_spec`_ which is used to
   store settings details.


.. References:

.. _Publisher: publisher.html
.. _Publisher convenience functions:
    publisher.html#publisher-convenience-functions
.. _front-end tools: ../user/tools.html
.. _configuration files:
.. _Docutils Configuration: ../user/config.html#configuration-files
.. _configuration file section:
.. _Configuration File Sections & Entries:
    ../user/config.html#configuration-file-sections-entries
.. _Docutils Project Model: ../peps/pep-0258.html#docutils-project-model
.. _Reader: ../peps/pep-0258.html#reader
.. _Runtime Settings Processing: ../dev/runtime-settings-processing.html

.. _optparse: https://docs.python.org/dev/library/optparse.html
.. _argparse: https://docs.python.org/dev/library/argparse.html
.. _OptionParser.add_option():
    https://docs.python.org/dev/library/optparse.html
    #optparse.OptionParser.add_option


/Part 3. 038.📜 docutils-0.20.1/docs/api/transforms.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=====================
 Docutils Transforms
=====================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9259 $
:Date: $Date: 2022-11-21 21:51:23 +0100 (Mo, 21. Nov 2022) $
:Copyright: This document has been placed in the public domain.


.. .. contents:: Table of Contents

Transforms change the document tree in-place, add to the tree, or prune it.
Transforms resolve references and footnote numbers, process interpreted
text, and do other context-sensitive processing. Each transform is a
subclass of ``docutils.transforms.Transform``.

There are `transforms added by components`_, others (e.g.
``parts.Contents``) are added by the parser, if a corresponding directive is
found in the document.

To add a transform, components (objects inheriting from
Docutils.Component like Readers, Parsers, Writers, Input, Output) overwrite
the ``get_transforms()`` method of their base class. After the Reader has
finished processing, the Publisher calls
``Transformer.populate_from_components()`` with a list of components and all
transforms returned by the component's ``get_transforms()`` method are
stored in a `transformer object` attached to the document tree.


For more about transforms and the Transformer object, see also `PEP
258`_. (The ``default_transforms()`` attribute of component classes mentioned
there is deprecated. Use the ``get_transforms()`` method instead.)

.. _PEP 258: ../peps/pep-0258.html#transformer


Transforms Listed in Priority Order
===================================

Transform classes each have a default_priority attribute which is used by
the Transformer to apply transforms in order (low to high). The default
priority can be overridden when adding transforms to the Transformer object.


==============================  ============================  ========
Transform: module.Class         Added By                      Priority
==============================  ============================  ========
misc.class                      "class" (d/p)                 210

references.Substitutions        standalone (r), pep (r)       220

references.PropagateTargets     standalone (r), pep (r)       260

frontmatter.DocTitle            standalone (r)                320

frontmatter.DocInfo             standalone (r)                340

frontmatter.SectSubTitle        standalone (r)                350

peps.Headers                    pep (r)                       360

peps.Contents                   pep (r)                       380

universal.StripClasses...       Writer (w)                    420

references.AnonymousHyperlinks  standalone (r), pep (r)       440

references.IndirectHyperlinks   standalone (r), pep (r)       460

peps.TargetNotes                pep (r)                       520

references.TargetNotes          peps.TargetNotes (t/p)        0

misc.CallBack                   peps.TargetNotes (t/p)        1

references.TargetNotes          "target-notes" (d/p)          540

references.Footnotes            standalone (r), pep (r)       620

references.ExternalTargets      standalone (r), pep (r)       640

references.InternalTargets      standalone (r), pep (r)       660

parts.SectNum                   "sectnum" (d/p)               710

parts.Contents                  "contents" (d/p),             720
                                peps.Contents (t/p)

universal.StripComments         Reader (r)                    740

peps.PEPZero                    peps.Headers (t/p)            760

components.Filter               *not used*                    780

universal.Decorations           Reader (r)                    820

misc.Transitions                standalone (r), pep (r)       830

universal.ExposeInternals       Reader (r)                    840

references.DanglingReferences   standalone (r), pep (r)       850

universal.SmartQuotes           Parser                        855

universal.Messages              Writer (w)                    860

universal.FilterMessages        Writer (w)                    870

universal.TestMessages          DocutilsTestSupport           880

writer_aux.Compound             *not used, to be removed*     910

writer_aux.Admonitions          _html_base (w),               920
                                latex2e (w)

misc.CallBack                   n/a                           990
==============================  ============================  ========

Key:

* (r): Reader
* (w): Writer
* (d): Directive
* (t): Transform
* (/p): Via a "pending" node


Transform Priority Range Categories
===================================

====  ====  ================================================
 Priority
----------  ------------------------------------------------
From   To   Category
====  ====  ================================================
   0    99  immediate execution (added by another transform)
 100   199  very early (non-standard)
 200   299  very early
 300   399  early
 400   699  main
 700   799  late
 800   899  very late
 900   999  very late (non-standard)
====  ====  ================================================


Transforms added by components
===============================


readers.Reader:
  | universal.Decorations,
  | universal.ExposeInternals,
  | universal.StripComments

readers.ReReader:
  None

readers.standalone.Reader:
  | references.Substitutions,
  | references.PropagateTargets,
  | frontmatter.DocTitle,
  | frontmatter.SectionSubTitle,
  | frontmatter.DocInfo,
  | references.AnonymousHyperlinks,
  | references.IndirectHyperlinks,
  | references.Footnotes,
  | references.ExternalTargets,
  | references.InternalTargets,
  | references.DanglingReferences,
  | misc.Transitions

readers.pep.Reader:
  | references.Substitutions,
  | references.PropagateTargets,
  | references.AnonymousHyperlinks,
  | references.IndirectHyperlinks,
  | references.Footnotes,
  | references.ExternalTargets,
  | references.InternalTargets,
  | references.DanglingReferences,
  | misc.Transitions,
  | peps.Headers,
  | peps.Contents,
  | peps.TargetNotes

parsers.rst.Parser
  universal.SmartQuotes

writers.Writer:
  | universal.Messages,
  | universal.FilterMessages,
  | universal.StripClassesAndElements

writers.UnfilteredWriter
  None

writers.latex2e.Writer
  writer_aux.Admonitions

writers._html_base.Writer:
  writer_aux.Admonitions

writers.odf_odt.Writer:
  removes references.DanglingReferences


/Part 3. 039.📜 docutils-0.20.1/docs/dev/distributing.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===============================
 Docutils_ Distributor's Guide
===============================

:Author: Lea Wiemann
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

.. _Docutils: https://docutils.sourceforge.io/

.. .. contents:: Table of Contents

This document describes how to create packages of Docutils (e.g. for
shipping with a Linux distribution).  If you have any questions,
please direct them to the Docutils-develop_ mailing list.

First, please download the most current `release tarball`_ and unpack
it.

.. _Docutils-develop: ../user/mailing-lists.html#docutils-develop
.. _release tarball: https://docutils.sourceforge.io/#download


Dependencies
============

Docutils has the following dependencies:

* Python 3.7 or later is required.
  Use ">= Python 3.7" in the dependencies.

* Docutils may optionally make use of the PIL (`Python Imaging
  Library`_ or Pillow_).  If PIL is present, it is automatically
  detected by Docutils.

* Docutils recommends the `Pygments`_ syntax hightlighter. If available, it
  is used for highlighting the content of `code directives`_ and roles as
  well as included source code files (with the "code" option to the include_
  directive).

* Docutils can use the `recommonmark`_ parser to parse input in
  the Markdown format (new in 0.17).

.. _Python Imaging Library:
    https://en.wikipedia.org/wiki/Python_Imaging_Library
.. _Pillow: https://pypi.org/project/Pillow/
.. .. _Pygments: https://pygments.org/
.. _recommonmark: https://pypi.org/project/recommonmark/

.. _code directives: ../ref/rst/directives.html#code
.. _include: ../ref/rst/directives.html#include


Python Files
============

The Docutils Python files must be installed into the
``site-packages/`` directory of Python.  Running ``python setup.py
install`` should do the trick, but if you want to place the files
yourself, you can just install the ``docutils/`` directory of the
Docutils tarball to ``/usr/lib/python/site-packages/docutils/``.  In
this case you should also compile the Python files to ``.pyc`` and/or
``.pyo`` files so that Docutils doesn't need to be recompiled every
time it's executed.


Executables
===========

The executable front-end tools are located in the ``tools/`` directory
of the Docutils tarball.

The ``rst2*.py`` tools are intended for end-users. You should install them
to ``/usr/bin/``.  You do not need to change the names (e.g. to
``docutils-rst2html.py``) because the ``rst2`` prefix is unique.


Documentation
=============

The documentation should be generated using ``buildhtml.py``.  To
generate HTML for all documentation files, go to the ``tools/``
directory and run::

    # Place html4css1.css in base directory.
    cp ../docutils/writers/html4css1/html4css1.css ..
    ./buildhtml.py --stylesheet-path=../html4css1.css ..

Then install the following files to ``/usr/share/doc/docutils/`` (or
wherever you install documentation):

* All ``.html`` and ``.txt`` files in the base directory.

* The ``docs/`` directory.

  Do not install the contents of the ``docs/`` directory directly to
  ``/usr/share/doc/docutils/``; it's incomplete and would contain
  invalid references!

* The ``licenses/`` directory.

* ``html4css1.css`` in the base directory.


Removing the ``.txt`` Files
---------------------------

If you are tight with disk space, you can remove all ``.txt`` files in
the tree except for:

* those in the ``licenses/`` directory because they have not been
  processed to HTML and

* ``user/rst/cheatsheet.txt`` and ``user/rst/demo.txt``, which should
  be readable in source form.

Before you remove the ``.txt`` files you should rerun ``buildhtml.py``
with the ``--no-source-link`` switch to avoid broken references to the
source files.


Other Files
===========

You may want to install the Emacs-Lisp files
``tools/editors/emacs/*.el`` into the appropriate directory.


Configuration File
==================

It is possible to have a system-wide configuration file at
``/etc/docutils.conf``.  However, this is usually not necessary.  You
should *not* install ``tools/docutils.conf`` into ``/etc/``.


Tests
=====

While you probably do not need to ship the tests with your
distribution, you can test your package by installing it and then
running ``alltests.py`` from the ``tests/`` directory of the Docutils
tarball.

For more information on testing, view the `Docutils Testing`_ page.

.. _Docutils Testing: https://docutils.sourceforge.io/docs/dev/testing.html


/Part 3. 040.📜 docutils-0.20.1/docs/dev/enthought-plan.txt

===========================================
 Plan for Enthought API Documentation Tool
===========================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
:Revision: $Revision: 8956 $
:Copyright: 2004 by `Enthought, Inc. <http://www.enthought.com>`_
:License: `Enthought License`_ (BSD-style)

.. _Enthought License: https://docutils.sourceforge.io/licenses/enthought.txt

This document should be read in conjunction with the `Enthought API
Documentation Tool RFP`__ prepared by Janet Swisher.

__ enthought-rfp.html

.. .. contents:: Table of Contents
.. .. sectnum::


Introduction
============

In March 2004 at I met Eric Jones, president and CTO of `Enthought,
Inc.`_, at `PyCon 2004`_ in Washington DC.  He told me that Enthought
was using reStructuredText_ for source code documentation, but they
had some issues.  He asked if I'd be interested in doing some work on
a customized API documentation tool.  Shortly after PyCon, Janet
Swisher, Enthought's senior technical writer, contacted me to work out
details.  Some email, a trip to Austin in May, and plenty of Texas
hospitality later, we had a project.  This document will record the
details, milestones, and evolution of the project.

In a nutshell, Enthought is sponsoring the implementation of an open
source API documentation tool that meets their needs.  Fortuitously,
their needs coincide well with the "Python Source Reader" description
in `PEP 258`_.  In other words, Enthought is funding some significant
improvements to Docutils, improvements that were planned but never
implemented due to time and other constraints.  The implementation
will take place gradually over several months, on a part-time basis.

This is an ideal example of cooperation between a corporation and an
open-source project.  The corporation, the project, I personally, and
the community all benefit.  Enthought, whose commitment to open source
is also evidenced by their sponsorship of SciPy_, benefits by
obtaining a useful piece of software, much more quickly than would
have been possible without their support.  Docutils benefits directly
from the implementation of one of its core subsystems.  I benefit from
the funding, which allows me to justify the long hours to my wife and
family.  All the corporations, projects, and individuals that make up
the community will benefit from the end result, which will be great.

All that's left now is to actually do the work!

.. _PyCon 2004: http://pycon.org/dc2004/
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _SciPy: http://www.scipy.org/


Development Plan
================

1. Analyze prior art, most notably Epydoc_ and HappyDoc_, to see how
   they do what they do.  I have no desire to reinvent wheels
   unnecessarily.  I want to take the best ideas from each tool,
   combined with the outline in `PEP 258`_ (which will evolve), and
   build at least the foundation of the definitive Python
   auto-documentation tool.

   .. _Epydoc: http://epydoc.sourceforge.net/
   .. _HappyDoc: http://happydoc.sourceforge.net/
   .. _PEP 258:
      https://docutils.sourceforge.io/docs/peps/pep-0258.html#python-source-reader

2. Decide on a base platform.  The best way to achieve Enthought's
   goals in a reasonable time frame may be to extend Epydoc or
   HappyDoc.  Or it may be necessary to start fresh.

3. Extend the reStructuredText parser.  See `Proposed Changes to
   reStructuredText`_ below.

4. Depending on the base platform chosen, build or extend the
   docstring & doc comment extraction tool.  This may be the biggest
   part of the project, but I won't be able to break it down into
   details until more is known.


Repository
==========

If possible, all software and documentation files will be stored in
the Subversion repository of Docutils and/or the base project, which
are all publicly-available via anonymous pserver access.

The Docutils project is very open about granting Subversion write
access; so far, everyone who asked has been given access.  Any
Enthought staff member who would like Subversion write access will get
it.

If either Epydoc or HappyDoc is chosen as the base platform, I will
ask the project's administrator for CVS access for myself and any
Enthought staff member who wants it.  If sufficient access is not
granted -- although I doubt that there would be any problem -- we may
have to begin a fork, which could be hosted on SourceForge, on
Enthought's Subversion server, or anywhere else deemed appropriate.


Copyright & License
===================

Most existing Docutils files have been placed in the public domain, as
follows::

    :Copyright: This document has been placed in the public domain.

This is in conjunction with the "Public Domain Dedication" section of
COPYING.txt__.

__ https://docutils.sourceforge.io/COPYING.html

The code and documentation originating from Enthought funding will
have Enthought's copyright and license declaration.  While I will try
to keep Enthought-specific code and documentation separate from the
existing files, there will inevitably be cases where it makes the most
sense to extend existing files.

I propose the following:

1. New files related to this Enthought-funded work will be identified
   with the following field-list headers::

       :Copyright: 2004 by Enthought, Inc.
       :License: Enthought License (BSD Style)

   The license field text will be linked to the license file itself.

2. For significant or major changes to an existing file (more than 10%
   change), the headers shall change as follows (for example)::

       :Copyright: 2001-2004 by David Goodger
       :Copyright: 2004 by Enthought, Inc.
       :License: BSD-style

   If the Enthought-funded portion becomes greater than the previously
   existing portion, Enthought's copyright line will be shown first.

3. In cases of insignificant or minor changes to an existing file
   (less than 10% change), the public domain status shall remain
   unchanged.

A section describing all of this will be added to the Docutils
`COPYING`__ instructions file.

If another project is chosen as the base project, similar changes
would be made to their files, subject to negotiation.

__ https://docutils.sourceforge.io/COPYING.html


Proposed Changes to reStructuredText
====================================

Doc Comment Syntax
------------------

The "traits" construct is implemented as dictionaries, where
standalone strings would be Python syntax errors.  Therefore traits
require documentation in comments.  We also need a way to
differentiate between ordinary "internal" comments and documentation
comments (doc comments).

Javadoc uses the following syntax for doc comments::

    /**
     * The first line of a multi-line doc comment begins with a slash
     * and *two* asterisks.  The doc comment ends normally.
     */

Python doesn't have multi-line comments; only single-line.  A similar
convention in Python might look like this::

    ##
    # The first line of a doc comment begins with *two* hash marks.
    # The doc comment ends with the first non-comment line.
    'data' : AnyValue,

    ## The double-hash-marks could occur on the first line of text,
    #  saving a line in the source.
    'data' : AnyValue,

How to indicate the end of the doc comment? ::

    ##
    # The first line of a doc comment begins with *two* hash marks.
    # The doc comment ends with the first non-comment line, or another
    # double-hash-mark.
    ##
    # This is an ordinary, internal, non-doc comment.
    'data' : AnyValue,

    ## First line of a doc comment, terse syntax.
    #  Second (and last) line.  Ends here: ##
    # This is an ordinary, internal, non-doc comment.
    'data' : AnyValue,

Or do we even need to worry about this case?  A simple blank line
could be used::

    ## First line of a doc comment, terse syntax.
    #  Second (and last) line.  Ends with a blank line.

    # This is an ordinary, internal, non-doc comment.
    'data' : AnyValue,

Other possibilities::

    #" Instead of double-hash-marks, we could use a hash mark and a
    #  quotation mark to begin the doc comment.
    'data' : AnyValue,

    ## We could require double-hash-marks on every line.  This has the
    ## added benefit of delimiting the *end* of the doc comment, as
    ## well as working well with line wrapping in Emacs
    ## ("fill-paragraph" command).
    # Ordinary non-doc comment.
    'data' : AnyValue,

    #" A hash mark and a quotation mark on each line looks funny, and
    #" it doesn't work well with line wrapping in Emacs.
    'data' : AnyValue,

These styles (repeated on each line) work well with line wrapping in
Emacs::

    ##  #>  #|  #-  #%  #!  #*

These styles do *not* work well with line wrapping in Emacs::

    #"  #'  #:  #)  #.  #/  #@  #$  #^  #=  #+  #_  #~

The style of doc comment indicator used could be a runtime, global
and/or per-module setting.  That may add more complexity than it's
worth though.


Recommendation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I recommend adopting "#*" on every line::

    # This is an ordinary non-doc comment.

    #* This is a documentation comment, with an asterisk after the
    #* hash marks on every line.
    'data' : AnyValue,

I initially recommended adopting double-hash-marks::

    # This is an ordinary non-doc comment.

    ## This is a documentation comment, with double-hash-marks on
    ## every line.
    'data' : AnyValue,

But Janet Swisher rightly pointed out that this could collide with
ordinary comments that are then block-commented.  This applies to
double-hash-marks on the first line only as well.  So they're out.

On the other hand, the JavaDoc-comment style ("##" on the first line
only, "#" after that) is used in Fredrik Lundh's PythonDoc_.  It may
be worthwhile to conform to this syntax, reinforcing it as a standard.
PythonDoc does not support terse doc comments (text after "##" on the
first line).

.. _PythonDoc: http://effbot.org/zone/pythondoc.htm


Update
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enthought's Traits system has switched to a metaclass base, and traits
are now defined via ordinary attributes.  Therefore doc comments are
no longer absolutely necessary; attribute docstrings will suffice.
Doc comments may still be desirable though, since they allow
documentation to precede the thing being documented.


Docstring Density & Whitespace Minimization
-------------------------------------------

One problem with extensively documented classes & functions, is that
there is a lot of screen space wasted on whitespace.  Here's some
current Enthought code (from lib/cp/fluids/gassmann.py):

.. code-block:: py

    def max_gas(temperature, pressure, api, specific_gravity=.56):
        """
        Computes the maximum dissolved gas in oil using Batzle and
        Wang (1992).

        Parameters
        ----------
        temperature : sequence
            Temperature in degrees Celsius
        pressure : sequence
            Pressure in MPa
        api : sequence
            Stock tank oil API
        specific_gravity : sequence
            Specific gravity of gas at STP, default is .56

        Returns
        -------
        max_gor : sequence
            Maximum dissolved gas in liters/liter

        Description
        -----------
        This estimate is based on equations given by Mavko, Mukerji,
        and Dvorkin, (1998, pp. 218-219, or 2003, p. 236) obtained
        originally from Batzle and Wang (1992).
        """
        code...

The docstring is 24 lines long.

Rather than using subsections, field lists (which exist now) can save
6 lines:

.. code-block:: py

    def max_gas(temperature, pressure, api, specific_gravity=.56):
        """
        Computes the maximum dissolved gas in oil using Batzle and
        Wang (1992).

        :Parameters:
            temperature : sequence
                Temperature in degrees Celsius
            pressure : sequence
                Pressure in MPa
            api : sequence
                Stock tank oil API
            specific_gravity : sequence
                Specific gravity of gas at STP, default is .56
        :Returns:
            max_gor : sequence
                Maximum dissolved gas in liters/liter
        :Description: This estimate is based on equations given by
            Mavko, Mukerji, and Dvorkin, (1998, pp. 218-219, or 2003,
            p. 236) obtained originally from Batzle and Wang (1992).
        """
        code...

As with the "Description" field above, field bodies may begin on the
same line as the field name, which also saves space.

The output for field lists is typically a table structure.  For
example:

    :Parameters:
        temperature : sequence
            Temperature in degrees Celsius
        pressure : sequence
            Pressure in MPa
        api : sequence
            Stock tank oil API
        specific_gravity : sequence
            Specific gravity of gas at STP, default is .56
    :Returns:
        max_gor : sequence
            Maximum dissolved gas in liters/liter
    :Description:
        This estimate is based on equations given by Mavko,
        Mukerji, and Dvorkin, (1998, pp. 218-219, or 2003, p. 236)
        obtained originally from Batzle and Wang (1992).

But the definition lists describing the parameters and return values
are still wasteful of space.  There are a lot of half-filled lines.

Definition lists are currently defined as::

    term : classifier
        definition

Where the classifier part is optional.  Ideas for improvements:

1. We could allow multiple classifiers::

       term : classifier one : two : three ...
           definition

2. We could allow the definition on the same line as the term, using
   some embedded/inline markup:

   * "--" could be used, but only in limited and well-known contexts::

         term -- definition

     This is the syntax used by StructuredText (one of
     reStructuredText's predecessors).  It was not adopted for
     reStructuredText because it is ambiguous -- people often use "--"
     in their text, as I just did.  But given a constrained context,
     the ambiguity would be acceptable (or would it?).  That context
     would be: in docstrings, within a field list, perhaps only with
     certain well-defined field names (parameters, returns).

   * The "constrained context" above isn't really enough to make the
     ambiguity acceptable.  Instead, a slightly more verbose but far
     less ambiguous syntax is possible::

         term === definition

     This syntax has advantages.  Equals signs lend themselves to the
     connotation of "definition".  And whereas one or two equals signs
     are commonly used in program code, three equals signs in a row
     have no conflicting meanings that I know of.  (Update: there
     *are* uses out there.)

   The problem with this approach is that using inline markup for
   structure is inherently ambiguous in reStructuredText.  For
   example, writing *about* definition lists would be difficult::

       ``term === definition`` is an example of a compact definition list item

   The parser checks for structural markup before it does inline
   markup processing.  But the "===" should be protected by its inline
   literal context.

3. We could allow the definition on the same line as the term, using
   structural markup.  A variation on bullet lists would work well::

       : term :: definition
       : another term :: and a definition that
         wraps across lines

   Some ambiguity remains::

       : term ``containing :: double colons`` :: definition

   But the likelihood of such cases is negligible, and they can be
   covered in the documentation.

   Other possibilities for the definition delimiter include::

       : term : classifier -- definition
       : term : classifier --- definition
       : term : classifier : : definition
       : term : classifier === definition

The third idea currently has the best chance of being adopted and
implemented.


Recommendation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Combining these ideas, the function definition becomes:

.. code-block:: py

    def max_gas(temperature, pressure, api, specific_gravity=.56):
        """
        Computes the maximum dissolved gas in oil using Batzle and
        Wang (1992).

        :Parameters:
            : temperature : sequence :: Temperature in degrees Celsius
            : pressure : sequence :: Pressure in MPa
            : api : sequence :: Stock tank oil API
            : specific_gravity : sequence :: Specific gravity of gas at
              STP, default is .56
        :Returns:
            : max_gor : sequence :: Maximum dissolved gas in liters/liter
        :Description: This estimate is based on equations given by
            Mavko, Mukerji, and Dvorkin, (1998, pp. 218-219, or 2003,
            p. 236) obtained originally from Batzle and Wang (1992).
        """
        code...

The docstring is reduced to 14 lines, from the original 24.  For
longer docstrings with many parameters and return values, the
difference would be more significant.


/Part 3. 041.📜 docutils-0.20.1/docs/dev/enthought-rfp.txt

==================================
 Enthought API Documentation Tool
==================================

Request for Proposals
=====================

:Author: Janet Swisher, Senior Technical Writer
:Organization: `Enthought, Inc. <http://www.enthought.com>`_
:Copyright: 2004 by Enthought, Inc.
:License: `Enthought License`_ (BSD Style)

.. _Enthought License: https://docutils.sourceforge.io/licenses/enthought.txt

The following is excerpted from the full RFP, and is published here
with permission from `Enthought, Inc.`_  See the `Plan for Enthought
API Documentation Tool`__.

__ enthought-plan.html

.. .. contents:: Table of Contents
.. .. sectnum::


Requirements
============

The documentation tool will address the following high-level goals:


Documentation Extraction
------------------------

1. Documentation will be generated directly from Python source code,
   drawing from the code structure, docstrings, and possibly other
   comments.

2. The tool will extract logical constructs as appropriate, minimizing
   the need for comments that are redundant with the code structure.
   The output should reflect both documented and undocumented
   elements.


Source Format
-------------

1. The docstrings will be formatted in as terse syntax as possible.
   Required tags, syntax, and white space should be minimized.

2. The tool must support the use of Traits.  Special comment syntax
   for Traits may be necessary.  Information about the Traits package
   is available at http://code.enthought.com/traits/.  In the
   following example, each trait definition is prefaced by a plain
   comment::

       __traits__ = {

       # The current selection within the frame.
       'selection' : Trait([], TraitInstance(list)),

       # The frame has been activated or deactivated.
       'activated' : TraitEvent(),

       'closing' : TraitEvent(),

       # The frame is closed.
       'closed' : TraitEvent(),
       }

3. Support for ReStructuredText (ReST) format is desirable, because
   much of the existing docstrings uses ReST.  However, the complete
   ReST specification need not be supported, if a subset can achieve
   the project goals.  If the tool does not support ReST, the
   contractor should also provide a tool or path to convert existing
   docstrings.


Output Format
-------------

1. Documentation will be output as a navigable suite of HTML
   files.

2. The style of the HTML files will be customizable by a cascading
   style sheet and/or a customizable template.

3. Page elements such as headers and footer should be customizable, to
   support differing requirements from one documentation project to
   the next.


Output Structure and Navigation
-------------------------------

1. The navigation scheme for the HTML files should not rely on frames,
   and should harmonize with conversion to Microsoft HTML Help (.chm)
   format.

2. The output should be structured to make navigable the architecture
   of the Python code.  Packages, modules, classes, traits, and
   functions should be presented in clear, logical hierarchies.
   Diagrams or trees for inheritance, collaboration, sub-packaging,
   etc. are desirable but not required.

3. The output must include indexes that provide a comprehensive view
   of all packages, modules, and classes.  These indexes will provide
   readers with a clear and exhaustive view of the code base.  These
   indexes should be presented in a way that is easily accessible and
   allows easy navigation.

4. Cross-references to other documented elements will be used
   throughout the documentation, to enable the reader to move quickly
   relevant information.  For example, where type information for an
   element is available, the type definition should be
   cross-referenced.

5. The HTML suite should provide consistent navigation back to the
   home page, which will include the following information:

   * Bibliographic information

     - Author
     - Copyright
     - Release date
     - Version number

   * Abstract

   * References

     - Links to related internal docs (i.e., other docs for the same
       product)

     - Links to related external docs (e.g., supporting development
       docs, Python support docs, docs for included packages)

   It should be possible to specify similar information at the top
   level of each package, so that packages can be included as
   appropriate for a given application.


License
=======

Enthought intends to release the software under an open-source
("BSD-style") license.


/Part 3. 042.📜 docutils-0.20.1/docs/dev/hacking.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

==========================
 Docutils_ Hacker's Guide
==========================

:Author: Lea Wiemann
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9255 $
:Date: $Date: 2022-11-18 14:49:33 +0100 (Fr, 18. Nov 2022) $
:Copyright: This document has been placed in the public domain.

:Abstract: This is the introduction to Docutils for all persons who
    want to extend Docutils in some way.
:Prerequisites: You have used reStructuredText_ and played around with
    the `Docutils front-end tools`_ before.  Some (basic) Python
    knowledge is certainly helpful (though not necessary, strictly
    speaking).

.. _Docutils: https://docutils.sourceforge.io/
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _Docutils front-end tools: ../user/tools.html

.. .. contents:: Table of Contents


Overview of the Docutils Architecture
=====================================

To give you an understanding of the Docutils architecture, we'll dive
right into the internals using a practical example.

Consider the following reStructuredText file::

    My *favorite* language is Python_.

    .. _Python: https://www.python.org/

Using the ``rst2html.py`` front-end tool, you would get an HTML output
which looks like this::

    [uninteresting HTML code removed]
    <body>
    <div class="document">
    <p>My <em>favorite</em> language is <a class="reference" href="https://www.python.org/">Python</a>.</p>
    </div>
    </body>
    </html>

While this looks very simple, it's enough to illustrate all internal
processing stages of Docutils.  Let's see how this document is
processed from the reStructuredText source to the final HTML output:


Reading the Document
--------------------

The **Reader** reads the document from the source file and passes it
to the parser (see below).  The default reader is the standalone
reader (``docutils/readers/standalone.py``) which just reads the input
data from a single text file.  Unless you want to do really fancy
things, there is no need to change that.

Since you probably won't need to touch readers, we will just move on
to the next stage:


Parsing the Document
--------------------

The **Parser** analyzes the the input document and creates a **node
tree** representation.  In this case we are using the
**reStructuredText parser**:

.. code:: python

    from docutils import frontend, utils
    from docutils.parsers.rst import Parser
    settings = frontend.get_default_settings(Parser)
    with open('test.txt', encoding='utf-8') as file:
        document = utils.new_document(file.name, settings)
        Parser().parse(file.read(), document)

Let us now examine the node tree.
With ``print(document.pformat())`` we get::

    <document source="test.txt">
        <paragraph>
            My
            <emphasis>
                favorite
             language is
            <reference name="Python" refname="python">
                Python
            .
        <target ids="python" names="python" refuri="https://www.python.org/">

The top-level node is ``document``.  It has a ``source`` attribute
whose value is ``text.txt``.  There are two children: A ``paragraph``
node and a ``target`` node.  The ``paragraph`` in turn has children: A
text node ("My "), an ``emphasis`` node, a text node (" language is "),
a ``reference`` node, and again a ``Text`` node (".").

These node types (``document``, ``paragraph``, ``emphasis``, etc.) are
all defined in ``docutils/nodes.py``.  The node types are internally
arranged as a class hierarchy (for example, both ``emphasis`` and
``reference`` have the common superclass ``Inline``).  To get an
overview of the node class hierarchy, use epydoc (type ``epydoc
nodes.py``) and look at the class hierarchy tree.

.. tip:: While rst2pseudoxml_ shows the node tree after `transforming the
   document`_, the script quicktest.py_ (in the ``tools/dev/`` directory
   of the Docutils distribution) shows the direct result of parsing a
   reStructuredText sample.

.. _quicktest.py: https://docutils.sourceforge.io/tools/dev/quicktest.py


Transforming the Document
-------------------------

In the node tree above, the ``reference`` node does not contain the
target URI (``https://www.python.org/``) yet.

Assigning the target URI (from the ``target`` node) to the
``reference`` node is *not* done by the parser (the parser only
translates the input document into a node tree).

Instead, it's done by a **Transform**.  In this case (resolving a
reference), it's done by the ``ExternalTargets`` transform in
``docutils/transforms/references.py``.

The Transforms are applied after parsing.  To see how the node tree
has changed after applying the Transforms, we use the
rst2pseudoxml_ tool [#]_::

    $ rst2pseudoxml.py test.txt
    <document source="test.txt">
        <paragraph>
            My
            <emphasis>
                favorite
             language is
            <reference name="Python" **refuri="https://www.python.org/"**>
                Python
            .
        <target ids="python" names="python" ``refuri="https://www.python.org/"``>

For our small test document, the only change is that the ``refname``
attribute of the reference has been replaced by a ``refuri``
attribute |---| the reference has been resolved.

While this does not look very exciting, transforms are a powerful tool
to apply any kind of transformation on the node tree.
In fact, there are quite a lot of Transforms, which do various useful
things like creating the table of contents, applying substitution
references or resolving auto-numbered footnotes. For details, see
`Docutils Transforms`_.

.. [#] You can also get a standard XML representation of the
       node tree by using rst2xml_ instead of rst2pseudoxml_.

.. _Docutils Transforms: ../api/transforms.html
.. _rst2pseudoxml: ../user/tools.html#rst2pseudoxml
.. _rst2xml: ../user/tools.html#rst2xml


Writing the Document
--------------------

To get an HTML document out of the node tree, we use a **Writer**, the
HTML writer in this case (``docutils/writers/html4css1.py``).

The writer receives the node tree and returns the output document.
For HTML output, we can test this using the ``rst2html.py`` tool::

    $ rst2html.py --link-stylesheet test.txt
    <?xml version="1.0" encoding="utf-8" ?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="https://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="generator" content="Docutils 0.3.10: https://docutils.sourceforge.io/" />
    <title></title>
    <link rel="stylesheet" href="../docutils/writers/html4css1/html4css1.css" type="text/css" />
    </head>
    <body>
    <div class="document">
    <p>My <em>favorite</em> language is <a class="reference" href="https://www.python.org/">Python</a>.</p>
    </div>
    </body>
    </html>

So here we finally have our HTML output.  The actual document contents
are in the fourth-last line.  Note, by the way, that the HTML writer
did not render the (invisible) ``target`` node |---| only the
``paragraph`` node and its children appear in the HTML output.


Extending Docutils
==================

Now you'll ask, "how do I actually extend Docutils?"

First of all, once you are clear about *what* you want to achieve, you
have to decide *where* to implement it |---| in the Parser (e.g. by
adding a directive or role to the reStructuredText parser), as a
Transform, or in the Writer.  There is often one obvious choice among
those three (Parser, Transform, Writer).  If you are unsure, ask on
the Docutils-develop_ mailing list.

In order to find out how to start, it is often helpful to look at
similar features which are already implemented.  For example, if you
want to add a new directive to the reStructuredText parser, look at
the implementation of a similar directive in
``docutils/parsers/rst/directives/``.


Modifying the Document Tree Before It Is Written
------------------------------------------------

You can modify the document tree right before the writer is called.
One possibility is to use the publish_doctree_ and
publish_from_doctree_ functions.

To retrieve the document tree, call::

    document = docutils.core.publish_doctree(...)

Please see the docstring of publish_doctree for a list of parameters.

.. XXX Need to write a well-readable list of (commonly used) options
   of the publish_* functions.  Probably in api/publisher.txt.

``document`` is the root node of the document tree.  You can now
change the document by accessing the ``document`` node and its
children |---| see `The Node Interface`_ below.

When you're done with modifying the document tree, you can write it
out by calling::

    output = docutils.core.publish_from_doctree(document, ...)

.. _publish_doctree: ../api/publisher.html#publish_doctree
.. _publish_from_doctree: ../api/publisher.html#publish_from_doctree


The Node Interface
------------------

As described in the overview above, Docutils' internal representation
of a document is a tree of nodes.  We'll now have a look at the
interface of these nodes.

(To be completed.)


What Now?
=========

This document is not complete.  Many topics could (and should) be
covered here.  To find out with which topics we should write about
first, we are awaiting *your* feedback.  So please ask your questions
on the Docutils-develop_ mailing list.

.. _Docutils-develop: ../user/mailing-lists.html#docutils-develop

.. |---| unicode:: 8212 .. em-dash
   :trim:



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 043.📜 docutils-0.20.1/docs/dev/policies.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===========================
 Docutils Project Policies
===========================

:Author: David Goodger; open to all Docutils developers
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2023-01-10 09:58:28 +0100 (Di, 10. Jän 2023) $
:Revision: $Revision: 9313 $
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents

The Docutils project group is a meritocracy based on code contribution
and lots of discussion [#bcs]_.  A few quotes sum up the policies of
the Docutils project.  The IETF's classic credo (by MIT professor Dave
Clark) is an ideal we can aspire to:

    We reject: kings, presidents, and voting.  We believe in: rough
    consensus and running code.

As architect, chief cook and bottle-washer, David Goodger currently
functions as BDFN (Benevolent Dictator For Now).  (But he would
happily abdicate the throne given a suitable candidate.  Any takers?)

Eric S. Raymond, anthropologist of the hacker subculture, writes in
his essay `The Magic Cauldron`_:

    The number of contributors [to] projects is strongly and inversely
    correlated with the number of hoops each project makes a user go
    through to contribute.

We will endeavour to keep the barrier to entry as low as possible.
The policies below should not be thought of as barriers, but merely as
a codification of experience to date.  These are "best practices";
guidelines, not absolutes.  Exceptions are expected, tolerated, and
used as a source of improvement.  Feedback and criticism is welcome.

As for control issues, Emmett Plant (CEO of the Xiph.org Foundation,
originators of Ogg Vorbis) put it well when he said:

    Open source dictates that you lose a certain amount of control
    over your codebase, and that's okay with us.

.. [#bcs] Phrase borrowed from `Ben Collins-Sussman of the Subversion
   project <http://www.red-bean.com/sussman/svn-anti-fud.html>`__.

.. _The Magic Cauldron:
   http://www.catb.org/~esr/writings/magic-cauldron/


Python Coding Conventions
=========================

Contributed code will not be refused merely because it does not
strictly adhere to these conditions; as long as it's internally
consistent, clean, and correct, it probably will be accepted.  But
don't be surprised if the "offending" code gets fiddled over time to
conform to these conventions.

The Docutils project shall follow the generic coding conventions as
specified in the `Style Guide for Python Code` (:PEP:`8`) and `Docstring
Conventions` (:PEP:`257`), summarized, clarified, and extended as follows:

* 4 spaces per indentation level.  No hard tabs.

* Use UTF-8 encoding (no encoding declaration).
  Identifiers must use ASCII only.

* No one-liner compound statements (i.e., no ``if x: return``: use two
  lines & indentation), except for degenerate class or method
  definitions (i.e., ``class X: pass`` is OK.).

* Lines should be no more than 78 characters long.

* Use "StudlyCaps" for class names (except for element classes in
  docutils.nodes).

* Use "lowercase" or "lowercase_with_underscores" for function,
  method, and variable names.  For short names, maximum two words,
  joined lowercase may be used (e.g. "tagname").  For long names with
  three or more words, or where it's hard to parse the split between
  two words, use lowercase_with_underscores (e.g.,
  "note_explicit_target", "explicit_target").  If in doubt, use
  underscores.

* Avoid lambda expressions, which are inherently difficult to
  understand.  Named functions are preferable and superior: they're
  faster (no run-time compilation), and well-chosen names serve to
  document and aid understanding.

* Avoid functional constructs (filter, map, etc.).  Use list
  comprehensions instead.

* Avoid ``from __future__ import`` constructs.  They are inappropriate
  for production code.

* Use 'single quotes' for string literals, and """triple double
  quotes""" for docstrings.

.. _Docutils Internationalization: ../howto/i18n.html#python-code


Documentation Conventions
=========================

* Docutils documentation is written using reStructuredText, of course.

* The encoding of the documentation files is UTF-8.

* Use the following section title adornment styles::

      ================
       Document Title
      ================

      --------------------------------------------
       Document Subtitle, or Major Division Title
      --------------------------------------------

      Section
      =======

      Subsection
      ----------

      Sub-Subsection
      ``````````````

      Sub-Sub-Subsection
      ..................

* Use two blank lines before each section/subsection/etc. title.  One
  blank line is sufficient between immediately adjacent titles.

* Add a bibliographic field list immediately after the document
  title/subtitle.  See the beginning of this document for an example.

* Add an Emacs "local variables" block in a comment at the end of the
  document.  See the end of this document for an example.


Copyrights and Licensing
========================

The majority of the Docutils project code and documentation has been
placed in the public domain (see `Copying Docutils`_).

Unless clearly and explicitly indicated
otherwise, any patches (modifications to existing files) submitted to
the project for inclusion (via Subversion, SourceForge trackers,
mailing lists, or private email) are assumed to be in the public
domain as well.

Any new files contributed to the project should clearly state their
intentions regarding copyright, in one of the following ways:

* Public domain (preferred): include the statement "This
  module/document has been placed in the public domain."

* Copyright & open source license: include a copyright notice, along
  with either an embedded license statement, a reference to an
  accompanying license file, or a license URL.

  The license should be well known, simple and compatible with other
  open source software licenses. To keep the number of different
  licenses at a minimum, using the `2-Clause BSD license`_
  (`local copy`__) is recommended.

  .. Rationale:
     + clear wording, structured text
     + license used by the closely related Sphinx project

.. _Copying Docutils: ../../COPYING.html
.. _2-Clause BSD license: http://opensource.org/licenses/BSD-2-Clause
__ ../../licenses/BSD-2-Clause.txt


.. _Subversion Repository:

Repository
==========

Please see the `repository documentation`_ for details on how to
access Docutils' Subversion repository.  Anyone can access the
repository anonymously.  Only project developers can make changes.
(If you would like to become a project developer, just ask!)  Also see
`Setting Up For Docutils Development`_ below for some useful info.

Unless you really *really* know what you're doing, please do *not* use
``svn import``.  It's quite easy to mess up the repository with an
import.

.. _repository documentation: repository.html


Branches
--------

(These branch policies go into effect with Docutils 0.4.)

The "docutils" directory of the **trunk** (a.k.a. the **Docutils
core**) is used for active -- but stable, fully tested, and reviewed
-- development.

If we need to cut a bugfix release, we'll create a **maintenance branch**
based on the latest feature release.  For example, when Docutils 0.5 is
released, this would be ``branches/docutils-0.5``, and any existing 0.4.x
maintenance branches may be retired.  Maintenance branches will receive bug
fixes only; no new features will be allowed here.

Obvious and uncontroversial bug fixes *with tests* can be checked in
directly to the core and to the maintenance branches.  Don't forget to
add test cases!  Many (but not all) bug fixes will be applicable both
to the core and to the maintenance branches; these should be applied
to both.  No patches or dedicated branches are required for bug fixes,
but they may be used.  It is up to the discretion of project
developers to decide which mechanism to use for each case.

.. _feature branches:
.. _feature branch:

Feature additions and API changes will be done in **feature
branches**.  Feature branches will not be managed in any way.
Frequent small check-ins are encouraged here.  Feature branches must be
discussed on the `docutils-develop mailing list`_ and reviewed before
being merged into the core.

.. _docutils-develop mailing list:
   https://lists.sourceforge.net/lists/listinfo/docutils-develop


Review Criteria
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before a new feature, an API change, or a complex, disruptive, or
controversial bug fix can be checked in to the core or into a
maintenance branch, it must undergo review.  These are the criteria:

* The branch must be complete, and include full documentation and
  tests.

* There should ideally be one branch merge commit per feature or
  change.  In other words, each branch merge should represent a
  coherent change set.

* The code must be stable and uncontroversial.  Moving targets and
  features under debate are not ready to be merged.

* The code must work.  The test suite must complete with no failures.
  See `Docutils Testing`_.

The review process will ensure that at least one other set of eyeballs
& brains sees the code before it enters the core.  In addition to the
above, the general `Check-ins`_ policy (below) also applies.

.. _Docutils testing: testing.html


Check-ins
---------

Changes or additions to the Docutils core and maintenance branches
carry a commitment to the Docutils user community.  Developers must be
prepared to fix and maintain any code they have committed.

The Docutils core (``trunk/docutils`` directory) and maintenance
branches should always be kept in a stable state (usable and as
problem-free as possible).  All changes to the Docutils core or
maintenance branches must be in `good shape`_, usable_, documented_,
tested_, and `reasonably complete`_. Starting with version 1.0, they must
also comply with the `backwards compatibility policy`_.

* _`Good shape` means that the code is clean, readable, and free of
  junk code (unused legacy code; by analogy to "junk DNA").

* _`Usable` means that the code does what it claims to do.  An "XYZ
  Writer" should produce reasonable XYZ output.

* _`Documented`: The more complete the documentation the better.
  Modules & files must be at least minimally documented internally.
  `Docutils Front-End Tools`_ should have a new section for any
  front-end tool that is added.  `Docutils Configuration Files`_
  should be modified with any settings/options defined.  For any
  non-trivial change, the HISTORY.txt_ file should be updated.

* _`Tested` means that unit and/or functional tests, that catch all
  bugs fixed and/or cover all new functionality, have been added to
  the test suite.  These tests must be checked by running the test
  suite under all supported Python versions, and the entire test suite
  must pass.  See `Docutils Testing`_.

* _`Reasonably complete` means that the code must handle all input.
  Here "handle" means that no input can cause the code to fail (cause
  an exception, or silently and incorrectly produce nothing).
  "Reasonably complete" does not mean "finished" (no work left to be
  done).  For example, a writer must handle every standard element
  from the Docutils document model; for unimplemented elements, it
  must *at the very least* warn that "Output for element X is not yet
  implemented in writer Y".

If you really want to check code directly into the Docutils core,
you can, but you must ensure that it fulfills the above criteria
first.  People will start to use it and they will expect it to work!
If there are any issues with your code, or if you only have time for
gradual development, you should put it on a branch or in the sandbox
first.  It's easy to move code over to the Docutils core once it's
complete.

It is the responsibility and obligation of all developers to keep the
Docutils core and maintenance branches stable.  If a commit is made to
the core or maintenance branch which breaks any test, the solution is
simply to revert the change.  This is not vindictive; it's practical.
We revert first, and discuss later.

Docutils will pursue an open and trusting policy for as long as
possible, and deal with any aberrations if (and hopefully not when)
they happen.  We'd rather see a torrent of loose contributions than
just a trickle of perfect-as-they-stand changes.  The occasional
mistake is easy to fix.  That's what version control is for!

.. _Docutils Front-End Tools: ../user/tools.html
.. _Docutils Configuration Files: ../user/config.html
.. _HISTORY.txt: ../../HISTORY.txt


.. _`Version Numbering`:

Version Identification
======================

The state of development of the current Docutils codebase is stored in
two forms: the sequence `docutils.__version_info__`_ and the
`PEP 440`_ conformant text string `docutils.__version__`_.
See also the `Docutils Release Procedure`_

.. _Docutils Release Procedure: release.html#version-numbers


``docutils.__version_info__``
-----------------------------

``docutils.__version_info__`` is an instance of ``docutils.VersionInfo``
based on collections.namedtuple_. It is modelled on `sys.version_info`_
and has the following attributes:

major : non-negative integer
    **Major releases** (x.0, e.g. 1.0) will be rare, and will
    represent major changes in API, functionality, or commitment.  The
    major number will be bumped to 1 when the project is
    feature-complete, and may be incremented later if there is a major
    change in the design or API.  When Docutils reaches version 1.0,
    the major APIs will be considered frozen.
    For details, see the `backwards compatibility policy`_.

minor : non-negative integer
    Releases that change the minor number (x.y, e.g. 0.5) will be
    **feature releases**; new features from the `Docutils core`_ will
    be included.

micro : non-negative integer
    Releases that change the micro number (x.y.z, e.g. 0.4.1) will be
    **bug-fix releases**.  No new features will be introduced in these
    releases; only bug fixes will be included.

    The micro number is omitted from `docutils.__version__`_ when it
    equals zero.

_`releaselevel` : text string
    The release level indicates the `development status`_ (or phase)
    of the project's codebase:

    =============  ==========  ===============================================
    Release Level  Label [#]_  Description
    =============  ==========  ===============================================
    alpha          ``a``       Reserved for use after major experimental
                               changes, to indicate an unstable codebase.

    beta           ``b``       Indicates active development, between releases.

    candidate      ``rc``      Release candidate: indicates that the
                               codebase is ready to release unless
                               significant bugs emerge.

    final                      Indicates an official project release.
    =============  ==========  ===============================================

    .. [#] The labels are used in the `docutils.__version__`_ pre-release
       segment.

    .. _development status:
       https://en.wikipedia.org/wiki/Software_release_life_cycle

_`serial` : non-negative integer
    The serial number is zero for final releases and incremented
    whenever a new pre-release is begun.

_`release` : boolean
    True for official releases and pre-releases, False during
    development.

* One of *{major, minor, micro, serial}* is incremented after each
  release, and the lower-order numbers are reset to 0.

* The default state of the repository during active development is
  release level = "beta", serial = 0, release = False.

``docutils.__version_info__`` can be used to test for a minimally
required version, e.g. ::

    docutils.__version_info__ >= (0, 13)

is True for all versions after ``"0.13"``.

.. _collections.namedtuple:
   https://docs.python.org/3/library/collections.html#collections.namedtuple
.. _sys.version_info:
   https://docs.python.org/3/library/sys.html#sys.version_info

``docutils.__version__``
------------------------

The text string ``docutils.__version__`` is a human readable,
`PEP 440`_-conforming version specifier.  For version comparison
operations, use `docutils.__version_info__`_.

``docutils.__version__`` takes the following form::

    "<major>.<minor>[.<micro>][<releaselevel>[<serial>]][.dev]"
     <--- release segment ---><-- pre-release segment -><- development ->

* The *pre-release segment* contains a label representing the
  releaselevel_ ("a", "b", or "rc") and eventually a serial_ number
  (omitted, if zero).

* The *development segment* is ``".dev"`` during active development
  (release_ == False) and omitted for official releases and pre-releases.

Examples of ``docutils.__version__`` identifiers, over the course of
normal development (without branches), in ascending order:

==============================  =============================
Release Level                   Version Identifier
==============================  =============================
final (release)                 0.14
beta (development) [#dev]_      0.15b.dev
beta (release)  [#skip]_        0.15b
candidate 1 (dev.)              0.15rc1.dev
candidate 1 (release)           0.15rc1
candidate 2 (dev.) [#skip]_     0.15rc2.dev
candidate 2 (release) [#skip]_  0.15rc2
...
final (release)                 0.15
beta (development) [#dev]_      0.16b.dev
==============================  =============================

.. [#dev] Default active development state between releases.
.. [#skip] These steps may be skipped.

.. _PEP 440: https://peps.python.org/pep-0440/

Policy History
--------------

* Prior to version 0.4, Docutils didn't have an official version
  numbering policy, and micro releases contained both bug fixes and
  new features.

* An earlier version of this policy was adopted in October 2005, and
  took effect with Docutils version 0.4.

* This policy was updated in June 2017 for Docutils version 0.14. See
  `Feature Request #50`_ and the `discussion on docutils-devel`__ from
  May 28 to June 20 2017.

  .. _Feature Request #50:
     https://sourceforge.net/p/docutils/feature-requests/50/
  __ https://sourceforge.net/p/docutils/mailman/message/35903816/


Backwards Compatibility Policy
==============================

.. note:: The backwards compatibility policy outlined below is a stub.

Docutils' backwards compatibility policy follows the rules for Python in
:PEP:`387`.

* The scope of the public API is laid out at the start of the `backwards
  compatibility rules`_.

* The rules for `making incompatible changes`_ apply.

A majority of projects depends on Docutils indirectly, via the Sphinx_
document processor.

* Sphinx developers should be given the chance to fix or work around a
  DeprecationWarning_ in the Sphinx development version before a new
  Docutils version is released. Otherwise, use a PendingDeprecationWarning_.

Changes that may affect end-users (e.g. by requiring changes to the
configuration file or potentially breaking custom style sheets) should be
announced with a FutureWarning_.

.. _backwards compatibility rules:
   https://peps.python.org/pep-0387/#backwards-compatibility-rules
.. _making incompatible changes:
   https://peps.python.org/pep-0387/#making-incompatible-changes
.. _Sphinx: https://www.sphinx-doc.org/
.. _DeprecationWarning:
   https://docs.python.org/3/library/exceptions.html#DeprecationWarning
.. _PendingDeprecationWarning:
   https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning
.. _FutureWarning:
   https://docs.python.org/3/library/exceptions.html#FutureWarning


Snapshots
=========

Snapshot tarballs can be downloaded from the repository (see the "download
snapshot" button in the head of the code listing table).

* the `Docutils core`_, representing the current cutting-edge state of
  development;

* the `sandbox directory`_ with contributed projects and extensions from
  `the Sandbox`_;

.. * maintenance branches, for bug fixes;

   TODO: do we have active maintenance branches?
   (the only branch looking like a maintenance branch is
   https://sourceforge.net/p/docutils/code/HEAD/tree/branches/docutils-0.4)

* `development branches`_, representing ongoing development efforts to bring
  new features into Docutils.

.. _Docutils core:
   https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils
.. _development branches:
   https://sourceforge.net/p/docutils/code/HEAD/tree/branches/


Setting Up For Docutils Development
===================================

When making changes to the code, testing_ is a must.  The code should
be run to verify that it produces the expected results, and the entire
test suite should be run too.  The modified Docutils code has to be
accessible to Python for the tests to have any meaning.
See `editable installs`_ for ways to keep the Docutils code
accessible during development.

.. _testing: tested_
.. _editable installs: repository.html#editable-installs


Mailing Lists
=============

Developers are recommended to subscribe to all `Docutils mailing
lists`_.

.. _Docutils mailing lists: ../user/mailing-lists.html


.. The Wiki
   ========

   The development wiki at http://docutils.python-hosting.com/
   is no longer active.


Extensions and Related Projects
===============================

The Sandbox
-----------

The `sandbox directory`_ is a place to play around, to try out and
share ideas.  It's a part of the Subversion repository but it isn't
distributed as part of Docutils releases.  Feel free to check in code
to the sandbox; that way people can try it out but you won't have to
worry about it working 100% error-free, as is the goal of the Docutils
core.  A project-specific subdirectory should be created for each new
project.  Any developer who wants to play in the sandbox may do so,
but project directories are recommended over personal directories,
which discourage collaboration.  It's OK to make a mess in the
sandbox!  But please, play nice.

Please update the `sandbox README`_ file with links and a brief
description of your work.

In order to minimize the work necessary for others to install and try
out new, experimental components, the following sandbox directory
structure is recommended::

    sandbox/
        project_name/ # For a collaborative project.
            README.txt  # Describe the requirements, purpose/goals, usage,
                        # and list the maintainers.
            docs/
                ...
            component.py    # The component is a single module.
                            # *OR* (but *not* both)
            component/      # The component is a package.
                __init__.py  # Contains the Reader/Writer class.
                other1.py    # Other modules and data files used
                data.txt     # by this component.
                ...
            test/       # Test suite.
                ...
            tools/      # For front ends etc.
                ...
            setup.py    # Install the component code and tools/ files
                        # into the right places.
        userid/       # For *temporary* personal space.

Some sandbox projects are destined to move to the Docutils core once
completed.  Others, such as add-ons to Docutils or applications of
Docutils, may graduate to become `parallel projects`_.

.. _sandbox README: https://docutils.sourceforge.io/sandbox/README.html
.. _sandbox directory:
   https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/sandbox/


.. _parallel project:

Parallel Projects
-----------------

Parallel projects contain useful code that is not central to the
functioning of Docutils.  Examples are specialized add-ons or
plug-ins, and applications of Docutils.  They use Docutils, but
Docutils does not require their presence to function.

An official parallel project will have its own directory beside (or
parallel to) the main ``docutils`` directory in the Subversion
repository.  It can have its own web page in the
docutils.sourceforge.io domain, its own file releases and
downloadable snapshots, and even a mailing list if that proves useful.
However, an official parallel project has implications: it is expected
to be maintained and continue to work with changes to the core
Docutils.

A parallel project requires a project leader, who must commit to
coordinate and maintain the implementation:

* Answer questions from users and developers.
* Review suggestions, bug reports, and patches.
* Monitor changes and ensure the quality of the code and
  documentation.
* Coordinate with Docutils to ensure interoperability.
* Put together official project releases.

Of course, related projects may be created independently of Docutils.
The advantage of a parallel project is that the SourceForge
environment and the developer and user communities are already
established.  Core Docutils developers are available for consultation
and may contribute to the parallel project.  It's easier to keep the
projects in sync when there are changes made to the core Docutils
code.

Other related projects
----------------------

Many related but independent projects are listed in the Docutils
`link list`_. If you want your project to appear there, drop a note at
the Docutils-develop_ mailing list.

.. _link list: https://docutils.sourceforge.io/docs/user/links.html
.. _docutils-develop: docs/user/mailing-lists.html#docutils-develop



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 044.📜 docutils-0.20.1/docs/dev/pysource.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

======================
 Python Source Reader
======================
:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

This document explores issues around extracting and processing
docstrings from Python modules.

For definitive element hierarchy details, see the "Python Plaintext
Document Interface DTD" XML document type definition, pysource.dtd_
(which modifies the generic docutils.dtd_).  Descriptions below list
'DTD elements' (XML 'generic identifiers' or tag names) corresponding
to syntax constructs.


.. .. contents:: Table of Contents


Model
=====

The Python Source Reader ("PySource") model that's evolving in my mind
goes something like this:

1. Extract the docstring/namespace [#]_ tree from the module(s) and/or
   package(s).

   .. [#] See `Docstring Extractor`_ below.

2. Run the parser on each docstring in turn, producing a forest of
   doctrees (per nodes.py).

3. Join the docstring trees together into a single tree, running
   transforms:

   - merge hyperlinks
   - merge namespaces
   - create various sections like "Module Attributes", "Functions",
     "Classes", "Class Attributes", etc.; see pysource.dtd_
   - convert the above special sections to ordinary doctree nodes

4. Run transforms on the combined doctree.  Examples: resolving
   cross-references/hyperlinks (including interpreted text on Python
   identifiers); footnote auto-numbering; first field list ->
   bibliographic elements.

   (Or should step 4's transforms come before step 3?)

5. Pass the resulting unified tree to the writer/builder.

I've had trouble reconciling the roles of input parser and output
writer with the idea of modes ("readers" or "directors").  Does the
mode govern the transformation of the input, the output, or both?
Perhaps the mode should be split into two.

For example, say the source of our input is a Python module.  Our
"input mode" should be the "Python Source Reader".  It discovers (from
``__docformat__``) that the input parser is "reStructuredText".  If we
want HTML, we'll specify the "HTML" output formatter.  But there's a
piece missing.  What *kind* or *style* of HTML output do we want?
PyDoc-style, LibRefMan style, etc.  (many people will want to specify
and control their own style).  Is the output style specific to a
particular output format (XML, HTML, etc.)?  Is the style specific to
the input mode?  Or can/should they be independent?

I envision interaction between the input parser, an "input mode" , and
the output formatter.  The same intermediate data format would be used
between each of these, being transformed as it progresses.


Docstring Extractor
===================

We need code that scans a parsed Python module, and returns an ordered
tree containing the names, docstrings (including attribute and
additional docstrings), and additional info (in parentheses below) of
all of the following objects:

- packages
- modules
- module attributes (+ values)
- classes (+ inheritance)
- class attributes (+ values)
- instance attributes (+ values)
- methods (+ formal parameters & defaults)
- functions (+ formal parameters & defaults)

(Extract comments too?  For example, comments at the start of a module
would be a good place for bibliographic field lists.)

In order to evaluate interpreted text cross-references, namespaces for
each of the above will also be required.

See python-dev/docstring-develop thread "AST mining", started on
2001-08-14.


Interpreted Text
================

DTD elements: package, module, class, method, function, 
module_attribute, class_attribute, instance_attribute, variable, 
parameter, type, exception_class, warning_class.

To classify identifiers explicitly, the role is given along with the
identifier in either prefix or suffix form::

    Use :method:`Keeper.storedata` to store the object's data in
    `Keeper.data`:instance_attribute:.

The role may be one of 'package', 'module', 'class', 'method',
'function', 'module_attribute', 'class_attribute',
'instance_attribute', 'variable', 'parameter', 'type',
'exception_class', 'exception', 'warning_class', or 'warning'.  Other
roles may be defined.

.. _pysource.dtd: pysource.dtd
.. _docutils.dtd: ../ref/docutils.dtd




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   fill-column: 70
   End:


/Part 3. 045.📜 docutils-0.20.1/docs/dev/release.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=============================
 Docutils_ Release Procedure
=============================

:Authors: David Goodger; Lea Wiemann; open to all Docutils developers
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2023-05-11 16:23:48 +0200 (Do, 11. Mai 2023) $
:Revision: $Revision: 9382 $
:Copyright: This document has been placed in the public domain.

.. _Docutils: https://docutils.sourceforge.io/

Steps to take and watch
=======================

* Make a clean checkout of svn.code.sf.net/p/docutils/code/trunk/docutils
  to avoid having development files in the released packages.

  Test, package and release this checkout.

* Announce the upcoming release on docutils-develop list.

  Consider **feature freeze** or/and **check-in freeze** .

* Update RELEASE-NOTES.txt add section ``Release <version>``.

  Consult HISTORY.txt for important changes.

* Change HISTORY.txt title ``Changes Since <previous release>`` to ``Release <version>``.

* Set new version (replace ``<version>`` with the new version indentifier
  and ``<docutils-repository-root>`` with the dir containing
  ``HISTORY.txt`` and ``RELEASE-NOTES.txt``)::

      cd <docutils-repository-root>
      ../sandbox/infrastructure/set_version.sh <version>

  Check what was changed by ``set_version.sh``.

  Run tests ::

    export PYTHONWARNINGS=default
    python3 test/alltests.py

  or use tox.
  In case of errors, clearing ``docutils/__pycache__`` may help.

  ``export PYTHONWARNINGS=default`` prints DeprecationWarnings in python3.

* Generate wheel and source-distribution::

    python3 setup.py sdist
    python3 setup.py bdist_wheel

* check sdist for html-files in docutils.egg-info.
* Upload wheel and source to test.pypi::

    python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

  Test in venv. NOTE use --pre for prereleases::

    python3 -m venv du3 ; cd du3
    export PYTHONPATH= ; . bin/activate

    python -m pip install --index-url https://test.pypi.org/simple/ --no-deps docutils

    cp -Lr ../docutils-code/docutils/test .
    python test/alltests.py

    python -m pip uninstall docutils
    deactivate ; cd .. ; rm -r du3

* Commit changes ... the changed version number.

* tag #.# (Note: only directory docutils is copied)::

    svn copy svn+ssh://grubert@svn.code.sf.net/p/docutils/code/trunk/docutils \
             svn+ssh://grubert@svn.code.sf.net/p/docutils/code/tags/docutils-#.# \
             -m "tagging release #.#"

* Update your source directory.
* Rebuild wheel and source-distribution ::

    python3 setup.py sdist
    python3 setup.py bdist_wheel

* Now upload to pypi::

    python3 -m twine upload  dist/docutils-#.#*

* Remove previous package from local cache::

    find .cache/pip/wheels -name docutils\*whl -exec rm -v -i {} \;

* and test::

    python3 -m venv du3 ; cd du3
    export PYTHONPATH= ; . bin/activate

    pip install --no-deps docutils
    cp -Lr ../docutils-code/docutils/test .
    python test/alltests.py

    deactivate ; cd .. ; rm -r du3

* Notify to docutils-developer and user.

* upload source and generated html to sf-htdocs/#.# ::

    mkdir tmp1
    cd tmp1
    tar xzvf ../dist/docutils-#.#.tar.gz
    cd docutils-#.#/
    python3 tools/buildhtml.py .
    find . -name \*.pyc -exec rm -v {} \;
    find . -name __pycache__ -exec rmdir -v {} \;
    rm -r docutils.egg-info
    rsync -e ssh -r -t ./ web.sourceforge.net:/home/project-web/docutils/htdocs/#.#

* Check web/index.txt for necessary corrections.
* Run sandbox/infrastructure/docutils-update.local to update web-content.
* Release to sourceforge.

  - Upload docutils-#.#.tar.gz and release notes to sourceforge.
  - Select docutils-#.#.tar.gz as default for all OS.

* set_version #.{#+1}b.dev
* test with py3
* docutils/HISTORY.txt: add title "Changes Since #.#"
* run sandbox/infrastructure/docutils-update.local



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 046.📜 docutils-0.20.1/docs/dev/repository.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=====================================
 The Docutils_ Version Repository
=====================================

:Author: Lea Wiemann, Docutils developers
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9290 $
:Date: $Date: 2022-12-01 22:12:57 +0100 (Do, 01. Dez 2022) $
:Copyright: This document has been placed in the public domain.

.. _Docutils: https://docutils.sourceforge.io/

.. admonition:: Quick Instructions

   To get a checkout of the Docutils source tree (with the
   sandboxes) with SVN_, type ::

       svn checkout https://svn.code.sf.net/p/docutils/code/trunk docutils-code

   Users of Git_ can clone a mirror of the docutils repository with ::

      git clone git://repo.or.cz/docutils.git

   If you are going to commit changes to the repository, please read
   the **whole document**, especially the section "`Information for
   Developers`_"!

Docutils uses a Subversion_ (SVN) repository located at 
``docutils.svn.sourceforge.net``.

While Unix and Mac OS X users will probably prefer the standard
Subversion command line interface, Windows user may want to try
TortoiseSVN_, a convenient explorer extension.  The instructions apply
analogously.

There is a Git_ mirror at http://repo.or.cz/docutils.git providing
`web access`_ and the base for `creating a local Git clone`_.
[#github-mirrors]_

For the project policy on repository use (check-in requirements,
branching, etc.), please see the `Docutils Project Policies`__.

__ policies.html#subversion-repository

.. _SVN:
.. _Subversion: https://subversion.apache.org/
.. _TortoiseSVN: https://tortoisesvn.net/
.. _SourceForge.net: https://sourceforge.net/
.. _Git: http://git-scm.com/

.. .. contents:: Table of Contents


Accessing the Repository
========================

Web Access
----------

The repository can be browsed and examined via the web at
https://sourceforge.net/p/docutils/code.

Alternatively, use the web interface at http://repo.or.cz/docutils.git.
[#github-mirrors]_

.. [#github-mirrors] There are also 3rd-party mirrors and forks at
   GitHub, some of them orphaned. At the time of this writing (2021-11-03),
   https://github.com/live-clones/docutils/tree/master/docutils
   provides an hourly updated clone.

Repository Access Methods
-------------------------

To get a checkout, first determine the root of the repository depending
on your preferred protocol:

anonymous access: (read only)
    Subversion_: ``https://svn.code.sf.net/p/docutils/code``

    Git_: ``git://repo.or.cz/docutils.git``

`developer access`_: (read and write)
    ``svn+ssh://<USERNAME>@svn.code.sf.net/p/docutils/code``

Checking Out the Repository
---------------------------

.. _creating a local Git clone:

Git_ users can clone a mirror of the docutils repository with ::

      git clone git://repo.or.cz/docutils.git

and proceed according to the `Git documentation`_.
Developer access (read and write) is possible with `git svn`_.

.. _Git documentation: https://git.wiki.kernel.org/index.php/GitDocumentation
.. _git svn: https://git.wiki.kernel.org/index.php/Git-svn

Subversion_ users can use the following commands 
(substitute your preferred repository root for ROOT):

* To check out only the current main source tree of Docutils, type ::

    svn checkout ROOT/trunk/docutils

* To check out everything (main tree, sandboxes, web site, and parallel
  projects), type ::

    svn checkout ROOT/trunk docutils

  This will create a working copy of the whole trunk in a new directory
  called ``docutils``.

Note that you probably do *not* want to check out the ROOT itself
(without "/trunk"), because then you'd end up fetching the whole
Docutils tree for every branch and tag over and over again.

To update your working copy later on, ``cd`` into the working copy and
type ::

    svn update

Switching the Repository Root
-----------------------------

If you changed your mind and want to use a different repository root,
``cd`` into your working copy and type::

    svn switch --relocate OLDROOT NEWROOT


Editable installs
=================

There are several ways to ensure that edits to the Docutils code are
picked up by Python.

We'll assume that the Docutils "trunk" is checked out under the
``~/projects/`` directory.

1. Do an `editable install`__ with pip_::

     python3 -m pip install -e ~/projects/docutils/docutils

   __ https://pip.pypa.io/en/stable/topics/local-project-installs/
      #editable-installs

2. Install "manually".

   Ensure that the "docutils" package is in the module search path
   (``sys.path``) by one of the following actions:

   a) Set the ``PYTHONPATH`` environment variable.

      For the bash shell, add this to your ``~/.profile``::

         PYTHONPATH=$HOME/projects/docutils/docutils
         export PYTHONPATH

      The first line points to the directory containing the ``docutils``
      package, the second line exports the environment variable.

   b) Create a symlink to the docutils package directory somewhere in the
      ``sys.path``, e.g., ::

         ln -s ~/projects/docutils/docutils \
               /usr/local/lib/python3.9/dist-packages/

   c) Use a `path configuration file`__.

      __ https://docs.python.org/library/site.html

   Optionally, add some or all `front-end tools`_ to the binary search
   path, e.g.:

   a) add the ``tools`` directory to the ``PATH`` variable::

         PATH=$PATH:$HOME/projects/docutils/docutils/tools
         export PATH

      or

   b) link idividual front-end tools to a suitable place in the binary
      path:

         ln -s ~/projects/docutils/docutils/tools/docutils-cli.py \
               /usr/local/bin/docutils

3. Do a regular install. Repeat after any change. ::

       ./setup.py install

   .. CAUTION::

      This method is **not** recommended for day-to-day development!

      If you ever forget to reinstall the "docutils" package, Python
      won't see your latest changes. Confusion inevitably ensues.

Tip: 
  A useful addition to the ``docutils`` top-level directory in
  *SVN branches* and *alternate copies* of the code is a ``set-PATHS``
  shell script containing the following lines::

      # source this file
      export PYTHONPATH=$PWD:$PWD
      export PATH=$PWD/tools:$PATH

  Open a shell for this branch, ``cd`` to the ``docutils`` top-level
  directory, and "source" this file.  For example, using the bash
  shell::

    $ cd some-branch/docutils
    $ . set-PATHS

.. _pip: https://pypi.org/project/pip/
.. _setuptools: https://pypi.org/project/setuptools/
.. _front-end tools: ../user/tools.html


.. _developer access:

Information for Developers
==========================

If you would like to have write access to the repository, register
with SourceForge.net_ and send your SourceForge.net
user names to docutils-develop@lists.sourceforge.net.
(Note that there may be a delay of several hours until you can commit
changes to the repository.)

Sourceforge SVN access is documented `here`__

__ https://sourceforge.net/p/forge/documentation/svn/


Ensure any changes comply with the `Docutils Project Policies`_
before `checking in`_,

.. _Docutils Project Policies: policies.html
.. _checking in: policies.html#check-ins


Setting Up Your Subversion Client For Development
-------------------------------------------------

Before committing changes to the repository, please ensure that the
following lines are contained (and uncommented) in your local
~/.subversion/config file, so that new files are added with the
correct properties set::

    [miscellany]
    # For your convenience:
    global-ignores = ... *.pyc ...
    # For correct properties:
    enable-auto-props = yes

    [auto-props]
    *.py = svn:eol-style=native;svn:keywords=Author Date Id Revision
    *.txt = svn:eol-style=native;svn:keywords=Author Date Id Revision
    *.html = svn:eol-style=native;svn:keywords=Author Date Id Revision
    *.xml = svn:eol-style=native;svn:keywords=Author Date Id Revision
    *.tex = svn:eol-style=native;svn:keywords=Author Date Id Revision
    *.css = svn:eol-style=native;svn:keywords=Author Date Id Revision
    *.patch = svn:eol-style=native
    *.sh = svn:eol-style=native;svn:executable;svn:keywords=Author Date Id Revision
    *.png = svn:mime-type=image/png
    *.jpg = svn:mime-type=image/jpeg
    *.gif = svn:mime-type=image/gif


Repository Layout
=================

The following tree shows the repository layout::

    docutils/
    |-- branches/
    |   |-- branch1/
    |   |   |-- docutils/
    |   |   |-- sandbox/
    |   |   `-- web/
    |   `-- branch2/
    |       |-- docutils/
    |       |-- sandbox/
    |       `-- web/
    |-- tags/
    |   |-- tag1/
    |   |   |-- docutils/
    |   |   |-- sandbox/
    |   |   `-- web/
    |   `-- tag2/
    |       |-- docutils/
    |       |-- sandbox/
    |       `-- web/
    `-- trunk/
        |-- docutils/
        |-- sandbox/
        `-- web/

The main source tree lives at ``docutils/trunk/docutils/``, next to
the sandboxes (``docutils/trunk/sandbox/``) and the web site files
(``docutils/trunk/web/``).

``docutils/branches/`` and ``docutils/tags/`` contain (shallow) copies
of either the whole trunk or only the main source tree
(``docutils/trunk/docutils``).


/Part 3. 047.📜 docutils-0.20.1/docs/dev/rst/alternatives.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

==================================================
 A Record of reStructuredText Syntax Alternatives
==================================================

:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

The following are ideas, alternatives, and justifications that were
considered for reStructuredText syntax, which did not originate with
Setext_ or StructuredText_.  For an analysis of constructs which *did*
originate with StructuredText or Setext, please see `Problems With
StructuredText`_.  See the `reStructuredText Markup Specification`_
for full details of the established syntax.

The ideas are divided into sections: 

* Implemented_: already done.  The issues and alternatives are
  recorded here for posterity.

* `Not Implemented`_: these ideas won't be implemented.

* Tabled_: these ideas should be revisited in the future.

* `To Do`_: these ideas should be implemented.  They're just waiting
  for a champion to resolve issues and get them done.

* `... Or Not To Do?`_: possible but questionable.  These probably
  won't be implemented, but you never know.

.. _Setext: https://docutils.sourceforge.io/mirror/setext.html
.. _StructuredText: https://zopestructuredtext.readthedocs.org/
.. _Problems with StructuredText: problems.html
.. _reStructuredText Markup Specification:
   ../../ref/rst/restructuredtext.html


.. .. contents:: Table of Contents

=============
 Implemented
=============

Field Lists
===========

Prior to the syntax for field lists being finalized, several
alternatives were proposed.

1. Unadorned RFC822_ everywhere::

       Author: Me
       Version: 1

   Advantages: clean, precedent (RFC822-compliant).  Disadvantage:
   ambiguous (these paragraphs are a prime example).

   Conclusion: rejected.

2. Special case: use unadorned RFC822_ for the very first or very last
   text block of a document::

       """
       Author: Me
       Version: 1

       The rest of the document...
       """

   Advantages: clean, precedent (RFC822-compliant).  Disadvantages:
   special case, flat (unnested) field lists only, still ambiguous::

       """
       Usage: cmdname [options] arg1 arg2 ...

       We obviously *don't* want the like above to be interpreted as a
       field list item.  Or do we?
       """

   Conclusion: rejected for the general case, accepted for specific
   contexts (PEPs, email).

3. Use a directive::

       .. fields::

          Author: Me
          Version: 1

   Advantages: explicit and unambiguous, RFC822-compliant.
   Disadvantage: cumbersome.

   Conclusion: rejected for the general case (but such a directive
   could certainly be written).

4. Use Javadoc-style::

       @Author: Me
       @Version: 1
       @param a: integer

   Advantages: unambiguous, precedent, flexible.  Disadvantages:
   non-intuitive, ugly, not RFC822-compliant.

   Conclusion: rejected.

5. Use leading colons::

       :Author: Me
       :Version: 1

   Advantages: unambiguous, obvious (*almost* RFC822-compliant),
   flexible, perhaps even elegant.  Disadvantages: no precedent, not
   quite RFC822-compliant.

   Conclusion: accepted!

6. Use double colons::

       Author:: Me
       Version:: 1

   Advantages: unambiguous, obvious? (*almost* RFC822-compliant),
   flexible, similar to syntax already used for literal blocks and
   directives.  Disadvantages: no precedent, not quite
   RFC822-compliant, similar to syntax already used for literal blocks
   and directives.

   Conclusion: rejected because of the syntax similarity & conflicts.

Why is RFC822 compliance important?  It's a universal Internet
standard, and super obvious.  Also, I'd like to support the PEP format
(ulterior motive: get PEPs to use reStructuredText as their standard).
But it *would* be easy to get used to an alternative (easy even to
convert PEPs; probably harder to convert python-deviants ;-).

Unfortunately, without well-defined context (such as in email headers:
RFC822 only applies before any blank lines), the RFC822 format is
ambiguous.  It is very common in ordinary text.  To implement field
lists unambiguously, we need explicit syntax.

The following question was posed in a footnote: 

   Should "bibliographic field lists" be defined at the parser level,
   or at the DPS transformation level?  In other words, are they
   reStructuredText-specific, or would they also be applicable to
   another (many/every other?) syntax?

The answer is that bibliographic fields are a 
reStructuredText-specific markup convention.  Other syntaxes may 
implement the bibliographic elements explicitly.  For example, there 
would be no need for such a transformation for an XML-based markup
syntax.

.. _RFC822: https://www.rfc-editor.org/rfc/rfc822.txt


Interpreted Text "Roles"
========================

The original purpose of interpreted text was as a mechanism for
descriptive markup, to describe the nature or role of a word or
phrase.  For example, in XML we could say "<function>len</function>"
to mark up "len" as a function.  It is envisaged that within Python
docstrings (inline documentation in Python module source files, the
primary market for reStructuredText) the role of a piece of
interpreted text can be inferred implicitly from the context of the
docstring within the program source.  For other applications, however,
the role may have to be indicated explicitly.

Interpreted text is enclosed in single backquotes (`).

1. Initially, it was proposed that an explicit role could be indicated
   as a word or phrase within the enclosing backquotes:

   - As a prefix, separated by a colon and whitespace::

         `role: interpreted text`

   - As a suffix, separated by whitespace and a colon::

         `interpreted text :role`

   There are problems with the initial approach:

   - There could be ambiguity with interpreted text containing colons.
     For example, an index entry of "Mission: Impossible" would
     require a backslash-escaped colon.

   - The explicit role is descriptive markup, not content, and will
     not be visible in the processed output.  Putting it inside the
     backquotes doesn't feel right; the *role* isn't being quoted.

2. Tony Ibbs suggested that the role be placed outside the
   backquotes::

       role:`prefix` or `suffix`:role

   This removes the embedded-colons ambiguity, but limits the role
   identifier to be a single word (whitespace would be illegal).
   Since roles are not meant to be visible after processing, the lack
   of whitespace support is not important.

   The suggested syntax remains ambiguous with respect to ratios and
   some writing styles.  For example, suppose there is a "signal"
   identifier, and we write::

       ...calculate the `signal`:noise ratio.

   "noise" looks like a role.

3. As an improvement on #2, we can bracket the role with colons::

       :role:`prefix` or `suffix`:role:

   This syntax is similar to that of field lists, which is fine since
   both are doing similar things: describing.

   This is the syntax chosen for reStructuredText.

4. Another alternative is two colons instead of one::

       role::`prefix` or `suffix`::role

   But this is used for analogies ("A:B::C:D": "A is to B as C is to
   D").

   Both alternative #2 and #4 lack delimiters on both sides of the
   role, making it difficult to parse (by the reader).

5. Some kind of bracketing could be used:

   - Parentheses::

         (role)`prefix` or `suffix`(role)

   - Braces::

         {role}`prefix` or `suffix`{role}

   - Square brackets::

         [role]`prefix` or `suffix`[role]

   - Angle brackets::

         <role>`prefix` or `suffix`<role>

     (The overlap of \*ML tags with angle brackets would be too
     confusing and precludes their use.)

Syntax #3 was chosen for reStructuredText.


Comments
========

A problem with comments (actually, with all indented constructs) is
that they cannot be followed by an indented block -- a block quote --
without swallowing it up.

I thought that perhaps comments should be one-liners only.  But would
this mean that footnotes, hyperlink targets, and directives must then
also be one-liners?  Not a good solution.

Tony Ibbs suggested a "comment" directive.  I added that we could
limit a comment to a single text block, and that a "multi-block
comment" could use "comment-start" and "comment-end" directives.  This
would remove the indentation incompatibility.  A "comment" directive
automatically suggests "footnote" and (hyperlink) "target" directives
as well.  This could go on forever!  Bad choice.

Garth Kidd suggested that an "empty comment", a ".." explicit markup
start with nothing on the first line (except possibly whitespace) and
a blank line immediately following, could serve as an "unindent".  An
empty comment does **not** swallow up indented blocks following it,
so block quotes are safe.  "A tiny but practical wart."  Accepted.


Anonymous Hyperlinks
====================

Alan Jaffray came up with this idea, along with the following syntax::

    Search the `Python DOC-SIG mailing list archives`{}_.

    .. _: https://mail.python.org/pipermail/doc-sig/

The idea is sound and useful.  I suggested a "double underscore"
syntax::

    Search the `Python DOC-SIG mailing list archives`__.

    .. __: https://mail.python.org/pipermail/doc-sig/

But perhaps single underscores are okay?  The syntax looks better, but
the hyperlink itself doesn't explicitly say "anonymous"::

    Search the `Python DOC-SIG mailing list archives`_.

    .. _: https://mail.python.org/pipermail/doc-sig/

Mixing anonymous and named hyperlinks becomes confusing.  The order of
targets is not significant for named hyperlinks, but it is for
anonymous hyperlinks::

    Hyperlinks: anonymous_, named_, and another anonymous_.

    .. _named: named
    .. _: anonymous1
    .. _: anonymous2

Without the extra syntax of double underscores, determining which
hyperlink references are anonymous may be difficult.  We'd have to
check which references don't have corresponding targets, and match
those up with anonymous targets.  Keeping to a simple consistent
ordering (as with auto-numbered footnotes) seems simplest.

reStructuredText will use the explicit double-underscore syntax for
anonymous hyperlinks.  An alternative (see `Reworking Explicit Markup
(Round 1)`_ below) for the somewhat awkward ".. __:" syntax is "__"::

    An anonymous__ reference.

    __ http://anonymous


Reworking Explicit Markup (Round 1)
===================================

Alan Jaffray came up with the idea of `anonymous hyperlinks`_, added
to reStructuredText.  Subsequently it was asserted that hyperlinks
(especially anonymous hyperlinks) would play an increasingly important
role in reStructuredText documents, and therefore they require a
simpler and more concise syntax.  This prompted a review of the
current and proposed explicit markup syntaxes with regards to
improving usability.

1. Original syntax::

       .. _blah:                     internal hyperlink target
       .. _blah: http://somewhere    external hyperlink target
       .. _blah: blahblah_           indirect hyperlink target
       .. __:                        anonymous internal target
       .. __: http://somewhere       anonymous external target
       .. __: blahblah_              anonymous indirect target
       .. [blah] http://somewhere    footnote
       .. blah:: http://somewhere    directive
       .. blah: http://somewhere     comment

   .. Note::

      The comment text was intentionally made to look like a hyperlink
      target.

   Origins:

   * Except for the colon (a delimiter necessary to allow for
     phrase-links), hyperlink target ``.. _blah:`` comes from Setext.
   * Comment syntax from Setext.
   * Footnote syntax from StructuredText ("named links").
   * Directives and anonymous hyperlinks original to reStructuredText.

   Advantages:

   + Consistent explicit markup indicator: "..".
   + Consistent hyperlink syntax: ".. _" & ":".

   Disadvantages:

   - Anonymous target markup is awkward: ".. __:".
   - The explicit markup indicator ("..") is excessively overloaded?
   - Comment text is limited (can't look like a footnote, hyperlink,
     or directive).  But this is probably not important.

2. Alan Jaffray's proposed syntax #1::

       __ _blah                      internal hyperlink target
       __ blah: http://somewhere     external hyperlink target
       __ blah: blahblah_            indirect hyperlink target
       __                            anonymous internal target
       __ http://somewhere           anonymous external target
       __ blahblah_                  anonymous indirect target
       __ [blah] http://somewhere    footnote
       .. blah:: http://somewhere    directive
       .. blah: http://somewhere     comment

   The hyperlink-connoted underscores have become first-level syntax.

   Advantages:

   + Anonymous targets are simpler.
   + All hyperlink targets are one character shorter.

   Disadvantages:

   - Inconsistent internal hyperlink targets.  Unlike all other named
     hyperlink targets, there's no colon.  There's an extra leading
     underscore, but we can't drop it because without it, "blah" looks
     like a relative URI.  Unless we restore the colon::

         __ blah:                      internal hyperlink target

   - Obtrusive markup?

3. Alan Jaffray's proposed syntax #2::

       .. _blah                      internal hyperlink target
       .. blah: http://somewhere     external hyperlink target
       .. blah: blahblah_            indirect hyperlink target
       ..                            anonymous internal target
       .. http://somewhere           anonymous external target
       .. blahblah_                  anonymous indirect target
       .. [blah] http://somewhere    footnote
       !! blah: http://somewhere     directive
       ## blah: http://somewhere     comment

   Leading underscores have been (almost) replaced by "..", while
   comments and directives have gained their own syntax.

   Advantages:

   + Anonymous hyperlinks are simpler.
   + Unique syntax for comments.  Connotation of "comment" from
     some programming languages (including our favorite).
   + Unique syntax for directives.  Connotation of "action!".

   Disadvantages:

   - Inconsistent internal hyperlink targets.  Again, unlike all other
     named hyperlink targets, there's no colon.  There's a leading
     underscore, matching the trailing underscores of references,
     which no other hyperlink targets have.  We can't drop that one
     leading underscore though: without it, "blah" looks like a
     relative URI.  Again, unless we restore the colon::

         .. blah:                      internal hyperlink target

   - All (except for internal) hyperlink targets lack their leading
     underscores, losing the "hyperlink" connotation.

   - Obtrusive syntax for comments.  Alternatives::

         ;; blah: http://somewhere
            (also comment syntax in Lisp & others)
         ,, blah: http://somewhere
            ("comma comma": sounds like "comment"!)

   - Iffy syntax for directives.  Alternatives?

4. Tony Ibbs' proposed syntax::

       .. _blah:                     internal hyperlink target
       .. _blah: http://somewhere    external hyperlink target
       .. _blah: blahblah_           indirect hyperlink target
       ..                            anonymous internal target
       .. http://somewhere           anonymous external target
       .. blahblah_                  anonymous indirect target
       .. [blah] http://somewhere    footnote
       .. blah:: http://somewhere    directive
       .. blah: http://somewhere     comment

   This is the same as the current syntax, except for anonymous
   targets which drop their "__: ".

   Advantage:

   + Anonymous targets are simpler.

   Disadvantages:

   - Anonymous targets lack their leading underscores, losing the
     "hyperlink" connotation.
   - Anonymous targets are almost indistinguishable from comments.
     (Better to know "up front".)

5. David Goodger's proposed syntax: Perhaps going back to one of
   Alan's earlier suggestions might be the best solution.  How about
   simply adding "__ " as a synonym for ".. __: " in the original
   syntax?  These would become equivalent::

       .. __:                        anonymous internal target
       .. __: http://somewhere       anonymous external target
       .. __: blahblah_              anonymous indirect target

       __                            anonymous internal target
       __ http://somewhere           anonymous external target
       __ blahblah_                  anonymous indirect target

Alternative 5 has been adopted.


Backquotes in Phrase-Links
==========================

[From a 2001-06-05 Doc-SIG post in reply to questions from Doug
Hellmann.]

The first draft of the spec, posted to the Doc-SIG in November 2000,
used square brackets for phrase-links.  I changed my mind because:

1. In the first draft, I had already decided on single-backquotes for
   inline literal text.

2. However, I wanted to minimize the necessity for backslash escapes,
   for example when quoting Python repr-equivalent syntax that uses
   backquotes.

3. The processing of identifiers (function/method/attribute/module
   etc. names) into hyperlinks is a useful feature.  PyDoc recognizes
   identifiers heuristically, but it doesn't take much imagination to
   come up with counter-examples where PyDoc's heuristics would result
   in embarrassing failure.  I wanted to do it deterministically, and
   that called for syntax.  I called this construct "interpreted
   text".

4. Leveraging off the ``*emphasis*/**strong**`` syntax, lead to the
   idea of using double-backquotes as syntax.

5. I worked out some rules for inline markup recognition.

6. In combination with #5, double backquotes lent themselves to inline
   literals, neatly satisfying #2, minimizing backslash escapes.  In
   fact, the spec says that no interpretation of any kind is done
   within double-backquote inline literal text; backslashes do *no*
   escaping within literal text.

7. Single backquotes are then freed up for interpreted text.

8. I already had square brackets required for footnote references.

9. Since interpreted text will typically turn into hyperlinks, it was
   a natural fit to use backquotes as the phrase-quoting syntax for
   trailing-underscore hyperlinks.

The original inspiration for the trailing underscore hyperlink syntax
was Setext.  But for phrases Setext used a very cumbersome
``underscores_between_words_like_this_`` syntax.

The underscores can be viewed as if they were right-pointing arrows:
``-->``.  So ``hyperlink_`` points away from the reference, and
``.. _hyperlink:`` points toward the target.


Substitution Mechanism
======================

Substitutions arose out of a Doc-SIG thread begun on 2001-10-28 by
Alan Jaffray, "reStructuredText inline markup".  It reminded me of a
missing piece of the reStructuredText puzzle, first referred to in my
contribution to "Documentation markup & processing / PEPs" (Doc-SIG
2001-06-21).

Substitutions allow the power and flexibility of directives to be
shared by inline text.  They are a way to allow arbitrarily complex
inline objects, while keeping the details out of the flow of text.
They are the equivalent of SGML/XML's named entities.  For example, an
inline image (using reference syntax alternative 4d (vertical bars)
and definition alternative 3, the alternatives chosen for inclusion in
the spec)::

    The |biohazard| symbol must be used on containers used to dispose
    of medical waste.

    .. |biohazard| image:: biohazard.png
       [height=20 width=20]

The ``|biohazard|`` substitution reference will be replaced in-line by
whatever the ``.. |biohazard|`` substitution definition generates (in
this case, an image).  A substitution definition contains the
substitution text bracketed with vertical bars, followed by a an
embedded inline-compatible directive, such as "image".  A transform is
required to complete the substitution.

Syntax alternatives for the reference:

1. Use the existing interpreted text syntax, with a predefined role
   such as "sub"::

       The `biohazard`:sub: symbol...

   Advantages: existing syntax, explicit.  Disadvantages: verbose,
   obtrusive.

2. Use a variant of the interpreted text syntax, with a new suffix
   akin to the underscore in phrase-link references::

       (a) `name`@
       (b) `name`#
       (c) `name`&
       (d) `name`/
       (e) `name`<
       (f) `name`::
       (g) `name`:


   Due to incompatibility with other constructs and ordinary text
   usage, (f) and (g) are not possible.

3. Use interpreted text syntax with a fixed internal format::

       (a) `:name:`
       (b) `name:`
       (c) `name::`
       (d) `::name::`
       (e) `%name%`
       (f) `#name#`
       (g) `/name/`
       (h) `&name&`
       (i) `|name|`
       (j) `[name]`
       (k) `<name>`
       (l) `&name;`
       (m) `'name'`

   To avoid ML confusion (k) and (l) are definitely out.  Square
   brackets (j) won't work in the target (the substitution definition
   would be indistinguishable from a footnote).

   The ```/name/``` syntax (g) is reminiscent of "s/find/sub"
   substitution syntax in ed-like languages.  However, it may have a
   misleading association with regexps, and looks like an absolute
   POSIX path.  (i) is visually equivalent and lacking the
   connotations.

   A disadvantage of all of these is that they limit interpreted text,
   albeit only slightly.

4. Use specialized syntax, something new::

       (a) #name#
       (b) @name@
       (c) /name/
       (d) |name|
       (e) <<name>>
       (f) //name//
       (g) ||name||
       (h) ^name^
       (i) [[name]]
       (j) ~name~
       (k) !name!
       (l) =name=
       (m) ?name?
       (n) >name<

   "#" (a) and "@" (b) are obtrusive.  "/" (c) without backquotes
   looks just like a POSIX path; it is likely for such usage to appear
   in text.

   "|" (d) and "^" (h) are feasible.

5. Redefine the trailing underscore syntax.  See definition syntax
   alternative 4, below.

Syntax alternatives for the definition:

1. Use the existing directive syntax, with a predefined directive such
   as "sub".  It contains a further embedded directive resolving to an
   inline-compatible object::

       .. sub:: biohazard
          .. image:: biohazard.png
             [height=20 width=20]

       .. sub:: parrot
          That bird wouldn't *voom* if you put 10,000,000 volts
          through it!

   The advantages and disadvantages are the same as in inline
   alternative 1.

2. Use syntax as in #1, but with an embedded directivecompressed::

       .. sub:: biohazard image:: biohazard.png
          [height=20 width=20]

   This is a bit better than alternative 1, but still too much.

3. Use a variant of directive syntax, incorporating the substitution
   text, obviating the need for a special "sub" directive name.  If we
   assume reference alternative 4d (vertical bars), the matching
   definition would look like this::

       .. |biohazard| image:: biohazard.png
          [height=20 width=20]

4. (Suggested by Alan Jaffray on Doc-SIG from 2001-11-06.)

   Instead of adding new syntax, redefine the trailing underscore
   syntax to mean "substitution reference" instead of "hyperlink
   reference".  Alan's example::

       I had lunch with Jonathan_ today.  We talked about Zope_.

       .. _Jonathan: lj [user=jhl]
       .. _Zope: https://www.zope.dev/

   A problem with the proposed syntax is that URIs which look like
   simple reference names (alphanum plus ".", "-", "_") would be
   indistinguishable from substitution directive names.  A more
   consistent syntax would be::

       I had lunch with Jonathan_ today.  We talked about Zope_.

       .. _Jonathan: lj:: user=jhl
       .. _Zope: https://www.zope.dev/

   (``::`` after ``.. _Jonathan: lj``.)

   The "Zope" target is a simple external hyperlink, but the
   "Jonathan" target contains a directive.  Alan proposed is that the
   reference text be replaced by whatever the referenced directive
   (the "directive target") produces.  A directive reference becomes a
   hyperlink reference if the contents of the directive target resolve
   to a hyperlink.  If the directive target resolves to an icon, the
   reference is replaced by an inline icon.  If the directive target
   resolves to a hyperlink, the directive reference becomes a
   hyperlink reference.

   This seems too indirect and complicated for easy comprehension.

   The reference in the text will sometimes become a link, sometimes
   not.  Sometimes the reference text will remain, sometimes not.  We
   don't know *at the reference*::

       This is a `hyperlink reference`_; its text will remain.
       This is an `inline icon`_; its text will disappear.

   That's a problem.

The syntax that has been incorporated into the spec and parser is
reference alternative 4d with definition alternative 3::

    The |biohazard| symbol...

    .. |biohazard| image:: biohazard.png
       [height=20 width=20]

We can also combine substitution references with hyperlink references,
by appending a "_" (named hyperlink reference) or "__" (anonymous
hyperlink reference) suffix to the substitution reference.  This
allows us to click on an image-link::

    The |biohazard|_ symbol...

    .. |biohazard| image:: biohazard.png
       [height=20 width=20]
    .. _biohazard: https://www.cdc.gov/

There have been several suggestions for the naming of these
constructs, originally called "substitution references" and
"substitutions".

1. Candidate names for the reference construct:

   (a) substitution reference
   (b) tagging reference
   (c) inline directive reference
   (d) directive reference
   (e) indirect inline directive reference
   (f) inline directive placeholder
   (g) inline directive insertion reference
   (h) directive insertion reference
   (i) insertion reference
   (j) directive macro reference
   (k) macro reference
   (l) substitution directive reference

2. Candidate names for the definition construct:

   (a) substitution
   (b) substitution directive
   (c) tag
   (d) tagged directive
   (e) directive target
   (f) inline directive
   (g) inline directive definition
   (h) referenced directive
   (i) indirect directive
   (j) indirect directive definition
   (k) directive definition
   (l) indirect inline directive
   (m) named directive definition
   (n) inline directive insertion definition
   (o) directive insertion definition
   (p) insertion definition
   (q) insertion directive
   (r) substitution definition
   (s) directive macro definition
   (t) macro definition
   (u) substitution directive definition
   (v) substitution definition

"Inline directive reference" (1c) seems to be an appropriate term at
first, but the term "inline" is redundant in the case of the
reference.  Its counterpart "inline directive definition" (2g) is
awkward, because the directive definition itself is not inline.

"Directive reference" (1d) and "directive definition" (2k) are too
vague.  "Directive definition" could be used to refer to any
directive, not just those used for inline substitutions.

One meaning of the term "macro" (1k, 2s, 2t) is too
programming-language-specific.  Also, macros are typically simple text
substitution mechanisms: the text is substituted first and evaluated
later.  reStructuredText substitution definitions are evaluated in
place at parse time and substituted afterwards.

"Insertion" (1h, 1i, 2n-2q) is almost right, but it implies that
something new is getting added rather than one construct being
replaced by another.

Which brings us back to "substitution".  The overall best names are
"substitution reference" (1a) and "substitution definition" (2v).  A
long way to go to add one word!


Inline External Targets
=======================

Currently reStructuredText has two hyperlink syntax variations:

* Named hyperlinks::

      This is a named reference_ of one word ("reference").  Here is
      a `phrase reference`_.  Phrase references may even cross `line
      boundaries`_.

      .. _reference: https://www.example.org/reference/
      .. _phrase reference: https://www.example.org/phrase_reference/
      .. _line boundaries: https://www.example.org/line_boundaries/

  + Advantages:

    - The plaintext is readable.
    - Each target may be reused multiple times (e.g., just write
      ``"reference_"`` again).
    - No synchronized ordering of references and targets is necessary.

  + Disadvantages:

    - The reference text must be repeated as target names; could lead
      to mistakes.
    - The target URLs may be located far from the references, and hard
      to find in the plaintext.

* Anonymous hyperlinks (in current reStructuredText)::

      This is an anonymous reference__.  Here is an anonymous
      `phrase reference`__.  Phrase references may even cross `line
      boundaries`__.

      __ https://www.example.org/reference/
      __ https://www.example.org/phrase_reference/
      __ https://www.example.org/line_boundaries/

  + Advantages:

    - The plaintext is readable.
    - The reference text does not have to be repeated.

  + Disadvantages:

    - References and targets must be kept in sync.
    - Targets cannot be reused.
    - The target URLs may be located far from the references.

For comparison and historical background, StructuredText also has two
syntaxes for hyperlinks:

* First, ``"reference text":URL``::

      This is a "reference":https://www.example.org/reference/
      of one word ("reference").  Here is a "phrase
      reference":https://www.example.org/phrase_reference/.

* Second, ``"reference text", https://example.org/absolute_URL``::

      This is a "reference", https://www.example.org/reference/
      of one word ("reference").  Here is a "phrase reference",
      https://www.example.org/phrase_reference/.

Both syntaxes share advantages and disadvantages:

+ Advantages:

  - The target is specified immediately adjacent to the reference.

+ Disadvantages:

  - Poor plaintext readability.
  - Targets cannot be reused.
  - Both syntaxes use double quotes, common in ordinary text.
  - In the first syntax, the URL and the last word are stuck
    together, exacerbating the line wrap problem.
  - The second syntax is too magical; text could easily be written
    that way by accident (although only absolute URLs are recognized
    here, perhaps because of the potential for ambiguity).

A new type of "inline external hyperlink" has been proposed.

1. On 2002-06-28, Simon Budig proposed__ a new syntax for
   reStructuredText hyperlinks::

       This is a reference_(https://www.example.org/reference/) of one
       word ("reference").  Here is a `phrase
       reference`_(https://www.example.org/phrase_reference/).  Are
       these examples, (single-underscore), named?  If so, `anonymous
       references`__(https://www.example.org/anonymous/) using two
       underscores would probably be preferable.

   __ https://mail.python.org/pipermail/doc-sig/2002-June/002648.html

   The syntax, advantages, and disadvantages are similar to those of
   StructuredText.

   + Advantages:

     - The target is specified immediately adjacent to the reference.

   + Disadvantages:

     - Poor plaintext readability.
     - Targets cannot be reused (unless named, but the semantics are
       unclear).

   + Problems:

     - The ``"`ref`_(URL)"`` syntax forces the last word of the
       reference text to be joined to the URL, making a potentially
       very long word that can't be wrapped (URLs can be very long).
       The reference and the URL should be separate.  This is a
       symptom of the following point:

     - The syntax produces a single compound construct made up of two
       equally important parts, *with syntax in the middle*, *between*
       the reference and the target.  This is unprecedented in
       reStructuredText.

     - The "inline hyperlink" text is *not* a named reference (there's
       no lookup by name), so it shouldn't look like one.

     - According to the IETF standards RFC 2396 and RFC 2732,
       parentheses are legal URI characters and curly braces are legal
       email characters, making their use prohibitively difficult.

     - The named/anonymous semantics are unclear.

2. After an analysis__ of the syntax of (1) above, we came up with the
   following compromise syntax::

       This is an anonymous reference__
       __<https://www.example.org/reference/> of one word
       ("reference").  Here is a `phrase reference`__
       __<https://www.example.org/phrase_reference/>.  `Named
       references`_ _<https://www.example.org/anonymous/> use single
       underscores.

   __ https://mail.python.org/pipermail/doc-sig/2002-July/002670.html

   The syntax builds on that of the existing "inline internal
   targets": ``an _`inline internal target`.``

   + Advantages:

     - The target is specified immediately adjacent to the reference,
       improving maintainability:

       - References and targets are easily kept in sync.
       - The reference text does not have to be repeated.

     - The construct is executed in two parts: references identical to
       existing references, and targets that are new but not too big a
       stretch from current syntax.

     - There's overwhelming precedent for quoting URLs with angle
       brackets [#]_.

   + Disadvantages:

     - Poor plaintext readability.
     - Lots of "line noise".
     - Targets cannot be reused (unless named; see below).

   To alleviate the readability issue slightly, we could allow the
   target to appear later, such as after the end of the sentence::

       This is a named reference__ of one word ("reference").
       __<https://www.example.org/reference/>  Here is a `phrase
       reference`__.  __<https://www.example.org/phrase_reference/>

   Problem: this could only work for one reference at a time
   (reference/target pairs must be proximate [refA trgA refB trgB],
   not interleaved [refA refB trgA trgB] or nested [refA refB trgB
   trgA]).  This variation is too problematic; references and inline
   external targets will have to be kept immediately adjacent (see (3)
   below).

   The ``"reference__ __<target>"`` syntax is actually for "anonymous
   inline external targets", emphasized by the double underscores.  It
   follows that single trailing and leading underscores would lead to
   *implicitly named* inline external targets.  This would allow the
   reuse of targets by name.  So after ``"reference_ _<target>"``,
   another ``"reference_"`` would point to the same target.

   .. [#]
      From RFC 2396 (URI syntax):

          The angle-bracket "<" and ">" and double-quote (")
          characters are excluded [from URIs] because they are often
          used as the delimiters around URI in text documents and
          protocol fields.

          Using <> angle brackets around each URI is especially
          recommended as a delimiting style for URI that contain
          whitespace.

      From RFC 822 (email headers):

          Angle brackets ("<" and ">") are generally used to indicate
          the presence of a one machine-usable reference (e.g.,
          delimiting mailboxes), possibly including source-routing to
          the machine.

3. If it is best for references and inline external targets to be
   immediately adjacent, then they might as well be integrated.
   Here's an alternative syntax embedding the target URL in the
   reference::

       This is an anonymous `reference <https://www.example.org
       /reference/>`__ of one word ("reference").  Here is a `phrase
       reference <https://www.example.org/phrase_reference/>`__.

   Advantages and disadvantages are similar to those in (2).
   Readability is still an issue, but the syntax is a bit less
   heavyweight (reduced line noise).  Backquotes are required, even
   for one-word references; the target URL is included within the
   reference text, forcing a phrase context.

   We'll call this variant "embedded URIs".

   Problem: how to refer to a title like "HTML Anchors: <a>" (which
   ends with an HTML/SGML/XML tag)?  We could either require more
   syntax on the target (like ``"`reference text
   __<https://example.org/>`__"``), or require the odd conflicting
   title to be escaped (like ``"`HTML Anchors: \<a>`__"``).  The
   latter seems preferable, and not too onerous.

   Similarly to (2) above, a single trailing underscore would convert
   the reference & inline external target from anonymous to implicitly
   named, allowing reuse of targets by name.

   I think this is the least objectionable of the syntax alternatives.

Other syntax variations have been proposed (by Brett Cannon and Benja
Fallenstein)::

    `phrase reference`->https://www.example.org

    `phrase reference`@https://www.example.org

    `phrase reference`__ ->https://www.example.org

    `phrase reference` [-> https://www.example.org]

    `phrase reference`__ [-> https://www.example.org]

    `phrase reference` <https://www.example.org>_

None of these variations are clearly superior to #3 above.  Some have
problems that exclude their use.

With any kind of inline external target syntax it comes down to the
conflict between maintainability and plaintext readability.  I don't
see a major problem with reStructuredText's maintainability, and I
don't want to sacrifice plaintext readability to "improve" it.

The proponents of inline external targets want them for easily
maintainable web pages.  The arguments go something like this:

- Named hyperlinks are difficult to maintain because the reference
  text is duplicated as the target name.

  To which I said, "So use anonymous hyperlinks."

- Anonymous hyperlinks are difficult to maintain because the
  references and targets have to be kept in sync.

  "So keep the targets close to the references, grouped after each
  paragraph.  Maintenance is trivial."

- But targets grouped after paragraphs break the flow of text.

  "Surely less than URLs embedded in the text!  And if the intent is
  to produce web pages, not readable plaintext, then who cares about
  the flow of text?"

Many participants have voiced their objections to the proposed syntax:

    Garth Kidd: "I strongly prefer the current way of doing it.
    Inline is spectactularly messy, IMHO."

    Tony Ibbs: "I vehemently agree... that the inline alternatives
    being suggested look messy - there are/were good reasons they've
    been taken out...  I don't believe I would gain from the new
    syntaxes."

    Paul Moore: "I agree as well.  The proposed syntax is far too
    punctuation-heavy, and any of the alternatives discussed are
    ambiguous or too subtle."

Others have voiced their support:

    fantasai: "I agree with Simon.  In many cases, though certainly
    not in all, I find parenthesizing the url in plain text flows
    better than relegating it to a footnote."

    Ken Manheimer: "I'd like to weigh in requesting some kind of easy,
    direct inline reference link."

(Interesting that those *against* the proposal have been using
reStructuredText for a while, and those *for* the proposal are either
new to the list ["fantasai", background unknown] or longtime
StructuredText users [Ken Manheimer].)

I was initially ambivalent/against the proposed "inline external
targets".  I value reStructuredText's readability very highly, and
although the proposed syntax offers convenience, I don't know if the
convenience is worth the cost in ugliness.  Does the proposed syntax
compromise readability too much, or should the choice be left up to
the author?  Perhaps if the syntax is *allowed* but its use strongly
*discouraged*, for aesthetic/readability reasons?

After a great deal of thought and much input from users, I've decided
that there are reasonable use cases for this construct.  The
documentation should strongly caution against its use in most
situations, recommending independent block-level targets instead.
Syntax #3 above ("embedded URIs") will be used.


Doctree Representation of Transitions
=====================================

(Although not reStructuredText-specific, this section fits best in
this document.)

Having added the "horizontal rule" construct to the `reStructuredText
Markup Specification`_, a decision had to be made as to how to reflect
the construct in the implementation of the document tree.  Given this
source::

    Document
    ========

    Paragraph 1

    --------

    Paragraph 2

The horizontal rule indicates a "transition" (in prose terms) or the
start of a new "division".  Before implementation, the parsed document
tree would be::

    <document>
        <section names="document">
            <title>
                Document
            <paragraph>
                Paragraph 1
            --------               <--- error here
            <paragraph>
                Paragraph 2

There are several possibilities for the implementation:

1. Implement horizontal rules as "divisions" or segments.  A
   "division" is a title-less, non-hierarchical section.  The first
   try at an implementation looked like this::

       <document>
           <section names="document">
               <title>
                   Document
               <paragraph>
                   Paragraph 1
               <division>
                   <paragraph>
                       Paragraph 2

   But the two paragraphs are really at the same level; they shouldn't
   appear to be at different levels.  There's really an invisible
   "first division".  The horizontal rule splits the document body
   into two segments, which should be treated uniformly.

2. Treating "divisions" uniformly brings us to the second
   possibility::

       <document>
           <section names="document">
               <title>
                   Document
               <division>
                   <paragraph>
                       Paragraph 1
               <division>
                   <paragraph>
                       Paragraph 2

   With this change, documents and sections will directly contain
   divisions and sections, but not body elements.  Only divisions will
   directly contain body elements.  Even without a horizontal rule
   anywhere, the body elements of a document or section would be
   contained within a division element.  This makes the document tree
   deeper.  This is similar to the way HTML_ treats document contents:
   grouped within a ``<body>`` element.

3. Implement them as "transitions", empty elements::

       <document>
           <section names="document">
               <title>
                   Document
               <paragraph>
                   Paragraph 1
               <transition>
               <paragraph>
                   Paragraph 2

   A transition would be a "point element", not containing anything,
   only identifying a point within the document structure.  This keeps
   the document tree flatter, but the idea of a "point element" like
   "transition" smells bad.  A transition isn't a thing itself, it's
   the space between two divisions.  However, transitions are a
   practical solution.

Solution 3 was chosen for incorporation into the document tree model.

.. _HTML: https://www.w3.org/MarkUp/


Syntax for Line Blocks
======================

* An early idea: How about a literal-block-like prefix, perhaps
  "``;;``"?  (It is, after all, a *semi-literal* literal block, no?)
  Example::

      Take it away, Eric the Orchestra Leader!  ;;

          A one, two, a one two three four

          Half a bee, philosophically,
          must, *ipso facto*, half not be.
          But half the bee has got to be,
          *vis a vis* its entity.  D'you see?

          But can a bee be said to be
          or not to be an entire bee,
          when half the bee is not a bee,
          due to some ancient injury?

          Singing...

  Kinda lame.

* Another idea: in an ordinary paragraph, if the first line ends with
  a backslash (escaping the newline), interpret the entire paragraph
  as a verse block?  For example::

      Add just one backslash\
      And this paragraph becomes
      An awful haiku

  (Awful, and arguably invalid, since in Japanese the word "haiku"
  contains three syllables not two.)

  This idea was superseded by the rules for escaped whitespace, useful
  for `character-level inline markup`_.

* In a `2004-02-22 docutils-develop message`__, Jarno Elonen proposed
  a "plain list" syntax (and also provided a patch)::

       | John Doe
       | President, SuperDuper Corp.
       | jdoe@example.org

  __ https://thread.gmane.org/gmane.text.docutils.devel/1187

  This syntax is very natural.  However, these "plain lists" seem very
  similar to line blocks, and I see so little intrinsic "list-ness"
  that I'm loathe to add a new object.  I used the term "blurbs" to
  remove the "list" connotation from the originally proposed name.
  Perhaps line blocks could be refined to add the two properties they
  currently lack:

  A) long lines wrap nicely
  B) HTML output doesn't look like program code in non-CSS web
     browsers

  (A) is an issue of all 3 aspects of Docutils: syntax (construct
  behaviour), internal representation, and output.  (B) is partly an
  issue of internal representation but mostly of output.

ReStructuredText will redefine line blocks with the "|"-quoting
syntax.  The following is my current thinking.


Syntax
------

Perhaps line block syntax like this would do::

     | M6: James Bond
     | MIB: Mr. J.
     | IMF: not decided yet, but probably one of the following:
     |   Ethan Hunt
     |   Jim Phelps
     |   Claire Phelps
     | CIA: Lea Leiter

Note that the "nested" list does not have nested syntax (the "|" are
not further indented); the leading whitespace would still be
significant somehow (more below).  As for long lines in the input,
this could suffice::

     | John Doe
     | Founder, President, Chief Executive Officer, Cook, Bottle
       Washer, and All-Round Great Guy
     | SuperDuper Corp.
     | jdoe@example.org

The lack of "|" on the third line indicates that it's a continuation
of the second line, wrapped.

I don't see much point in allowing arbitrary nested content.  Multiple
paragraphs or bullet lists inside a "blurb" doesn't make sense to me.
Simple nested line blocks should suffice.


Internal Representation
-----------------------

Line blocks are currently represented as text blobs as follows::

     <!ELEMENT line_block %text.model;>
     <!ATTLIST line_block
         %basic.atts;
         %fixedspace.att;>

Instead, we could represent each line by a separate element::

     <!ELEMENT line_block (line+)>
     <!ATTLIST line_block %basic.atts;>

     <!ELEMENT line %text.model;>
     <!ATTLIST line %basic.atts;>

We'd keep the significance of the leading whitespace of each line
either by converting it to non-breaking spaces at output, or with a
per-line margin.  Non-breaking spaces are simpler (for HTML, anyway)
but kludgey, and wouldn't support indented long lines that wrap.  But
should inter-word whitespace (i.e., not leading whitespace) be
preserved?  Currently it is preserved in line blocks.

Representing a more complex line block may be tricky::

     | But can a bee be said to be
     |     or not to be an entire bee,
     |         when half the bee is not a bee,
     |             due to some ancient injury?

Perhaps the representation could allow for nested line blocks::

     <!ELEMENT line_block (line | line_block)+>

With this model, leading whitespace would no longer be significant.
Instead, left margins are implied by the nesting.  The example above
could be represented as follows::

     <line_block>
         <line>
             But can a bee be said to be
         <line_block>
             <line>
                  or not to be an entire bee,
             <line_block>
                 <line>
                     when half the bee is not a bee,
                 <line_block>
                     <line>
                         due to some ancient injury?

I wasn't sure what to do about even more complex line blocks::

     |     Indented
     | Not indented
     |   Indented a bit
     |     A bit more
     |  Only one space

How should that be parsed and nested?  Should the first line have
the same nesting level (== indentation in the output) as the fourth
line, or the same as the last line?  Mark Nodine suggested that such
line blocks be parsed similarly to complexly-nested block quotes,
which seems reasonable.  In the example above, this would result in
the nesting of first line matching the last line's nesting.  In
other words, the nesting would be relative to neighboring lines
only.


Output
------

In HTML, line blocks are currently output as "<pre>" blocks, which
gives us significant whitespace and line breaks, but doesn't allow
long lines to wrap and causes monospaced output without stylesheets.
Instead, we could output "<div>" elements parallelling the
representation above, where each nested <div class="line_block"> would
have an increased left margin (specified in the stylesheet).

Jarno suggested the following HTML output::

    <div class="line_block">
       <span class="line">First, top level line</span><br class="hidden"/>
       <div class="line_block"><span class="hidden">&nbsp;</span>
          <span class="line">Second, once nested</span><br class="hidden"/>
          <span class="line">Third, once nested</span><br class="hidden"/>
          ...
       </div>
       ...
    </div>

The ``<br class="hidden" />`` and ``<span
class="hidden">&nbsp;</span>`` are meant to support non-CSS and
non-graphical browsers.  I understand the case for "br", but I'm not
so sure about hidden "&nbsp;".  I question how much effort should be
put toward supporting non-graphical and especially non-CSS browsers,
at least for html4css1.py output.

Should the lines themselves be ``<span>`` or ``<div>``?  I don't like
mixing inline and block-level elements.


Implementation Plan
-------------------

We'll leave the old implementation in place (via the "line-block"
directive only) until all Writers have been updated to support the new
syntax & implementation.  The "line-block" directive can then be
updated to use the new internal representation, and its documentation
will be updated to recommend the new syntax.


List-Driven Tables
==================

The original idea came from Dylan Jay:

    ... to use a two level bulleted list with something to
    indicate it should be rendered as a table ...

It's an interesting idea.  It could be implemented in as a directive
which transforms a uniform two-level list into a table.  Using a
directive would allow the author to explicitly set the table's
orientation (by column or by row), the presence of row headers, etc.

Alternatives:

1. (Implemented in Docutils 0.3.8).

   Bullet-list-tables might look like this::

       .. list-table::

          * - Treat
            - Quantity
            - Description
          * - Albatross!
            - 299
            - On a stick!
          * - Crunchy Frog!
            - 1499
            - If we took the bones out, it wouldn't be crunchy,
              now would it?
          * - Gannet Ripple!
            - 199
            - On a stick!

   This list must be written in two levels.  This wouldn't work::

       .. list-table::

          * Treat
          * Albatross!
          * Gannet!
          * Crunchy Frog!

          * Quantity
          * 299
          * 199
          * 1499

          * Description
          * On a stick!
          * On a stick!
          * If we took the bones out...

   The above is a single list of 12 items.  The blank lines are not
   significant to the markup.  We'd have to explicitly specify how
   many columns or rows to use, which isn't a good idea.

2. Beni Cherniavsky suggested a field list alternative.  It could look
   like this::

       .. field-list-table::
          :headrows: 1

          - :treat: Treat
            :quantity: Quantity
            :descr: Description

          - :treat: Albatross!
            :quantity: 299
            :descr: On a stick!

          - :treat: Crunchy Frog!
            :quantity: 1499
            :descr: If we took the bones out, it wouldn't be
                    crunchy, now would it?

   Column order is determined from the order of fields in the first
   row.  Field order in all other rows is ignored.  As a side-effect,
   this allows trivial re-arrangement of columns.  By using named
   fields, it becomes possible to omit fields in some rows without
   losing track of things, which is important for spans.

3. An alternative to two-level bullet lists would be to use enumerated
   lists for the table cells::

       .. list-table::

           * 1. Treat
             2. Quantity
             3. Description
           * 1. Albatross!
             2. 299
             3. On a stick!
           * 1. Crunchy Frog!
             2. 1499
             3. If we took the bones out, it wouldn't be crunchy,
                now would it?

   That provides better correspondence between cells in the same
   column than does bullet-list syntax, but not as good as field list
   syntax.  I think that were only field-list-tables available, a lot
   of users would use the equivalent degenerate case::

       .. field-list-table::
           - :1: Treat
             :2: Quantity
             :3: Description
           ...

4. Another natural variant is to allow a description list with field
   lists as descriptions::

       .. list-table::
           :headrows: 1

           Treat
               :quantity: Quantity
               :descr: Description
           Albatross!
               :quantity: 299
               :descr: On a stick!
           Crunchy Frog!
               :quantity: 1499
               :descr: If we took the bones out, it wouldn't be
                       crunchy, now would it?

   This would make the whole first column a header column ("stub").
   It's limited to a single column and a single paragraph fitting on
   one source line.  Also it wouldn't allow for empty cells or row
   spans in the first column.  But these are limitations that we could
   live with, like those of simple tables.

The List-driven table feature could be done in many ways.  Each user
will have their preferred usage.  Perhaps a single "list-table"
directive could handle them all, depending on which options and
content are present.

Issues:

* How to indicate that there's 1 header row?  Perhaps two lists?  ::

      .. list-table::

         + - Treat
           - Quantity
           - Description

         * - Albatross!
           - 299
           - On a stick!

  This is probably too subtle though.  Better would be a directive
  option, like ``:headrows: 1``.  An early suggestion for the header
  row(s) was to use a directive option::

      .. field-list-table::
         :header:
             - :treat: Treat
               :quantity: Quantity
               :descr: Description
         - :treat: Albatross!
           :quantity: 299
           :descr: On a stick!

  But the table data is at two levels and looks inconsistent.

  In general, we cannot extract the header row from field lists' field
  names because field names cannot contain everything one might put in
  a table cell.  A separate header row also allows shorter field names
  and doesn't force one to rewrite the whole table when the header
  text changes.  But for simpler cases, we can offer a ":header:
  fields" option, which does extract header cells from field names::

      .. field-list-table::
          :header: fields

          - :Treat: Albatross!
            :Quantity: 299
            :Description: On a stick!

* How to indicate the column widths?  A directive option? ::

      .. list-table::
         :widths: 15 10 35

  Automatic defaults from the text used?

* How to handle row and/or column spans?

  In a field list, column-spans can be indicated by specifying the
  first and last fields, separated by space-dash-space or ellipsis::

      - :foo - baz: quuux
      - :foo ... baz: quuux

  Commas were proposed for column spans::

      - :foo, bar: quux

  But non-adjacent columns become problematic.  Should we report an
  error, or duplicate the value into each span of adjacent columns (as
  was suggested)?  The latter suggestion is appealing but may be too
  clever.  Best perhaps to simply specify the two ends.

  It was suggested that comma syntax should be allowed, too, in order
  to allow the user to avoid trouble when changing the column order.
  But changing the column order of a table with spans is not trivial;
  we shouldn't make it easier to mess up.

  One possible syntax for row-spans is to simply treat any row where a
  field is missing as a row-span from the last row where it appeared.
  Leaving a field empty would still be possible by writing a field
  with empty content.  But this is too implicit.

  Another way would be to require an explicit continuation marker
  (``...``/``-"-``/``"``?) in all but the first row of a spanned
  field.  Empty comments could work ("..").  If implemented, the same
  marker could also be supported in simple tables, which lack
  row-spanning abilities.

  Explicit markup like ":rowspan:" and ":colspan:" was also suggested.

  Sometimes in a table, the first header row contains spans.  It may
  be necessary to provide a way to specify the column field names
  independently of data rows.  A directive option would do it.

* We could specify "column-wise" or "row-wise" ordering, with the same
  markup structure.  For example, with definition data::

      .. list-table::
         :column-wise:

         Treat
             - Albatross!
             - Crunchy Frog!
         Quantity
             - 299
             - 1499
         Description
             - On a stick!
             - If we took the bones out, it wouldn't be
               crunchy, now would it?

* A syntax for _`stubs in grid tables` is easy to imagine::

      +------------------------++------------+----------+
      | Header row, column 1   || Header 2   | Header 3 |
      +========================++============+==========+
      | body row 1, column 1   || column 2   | column 3 |
      +------------------------++------------+----------+

  Or this idea from Nick Moffitt::

      +-----+---+---+
      | XOR # T | F |
      +=====+===+===+
      |   T # F | T |
      +-----+---+---+
      |   F # T | F |
      +-----+---+---+


Auto-Enumerated Lists
=====================

Implemented 2005-03-24: combination of variation 1 & 2.

The advantage of auto-numbered enumerated lists would be similar to
that of auto-numbered footnotes: lists could be written and rearranged
without having to manually renumber them.  The disadvantages are also
the same: input and output wouldn't match exactly; the markup may be
ugly or confusing (depending on which alternative is chosen).

1. Use the "#" symbol.  Example::

       #. Item 1.
       #. Item 2.
       #. Item 3.

   Advantages: simple, explicit.  Disadvantage: enumeration sequence
   cannot be specified (limited to arabic numerals); ugly.

2. As a variation on #1, first initialize the enumeration sequence?
   For example::

       a) Item a.
       #) Item b.
       #) Item c.

   Advantages: simple, explicit, any enumeration sequence possible.
   Disadvantages: ugly; perhaps confusing with mixed concrete/abstract
   enumerators.

3. Alternative suggested by Fred Bremmer, from experience with MoinMoin::

       1. Item 1.
       1. Item 2.
       1. Item 3.

   Advantages: enumeration sequence is explicit (could be multiple
   "a." or "(I)" tokens).  Disadvantages: perhaps confusing; otherwise
   erroneous input (e.g., a duplicate item "1.") would pass silently,
   either causing a problem later in the list (if no blank lines
   between items) or creating two lists (with blanks).

   Take this input for example::

       1. Item 1.

       1. Unintentional duplicate of item 1.

       2. Item 2.

   Currently the parser will produce two list, "1" and "1,2" (no
   warnings, because of the presence of blank lines).  Using Fred's
   notation, the current behavior is "1,1,2 -> 1 1,2" (without blank
   lines between items, it would be "1,1,2 -> 1 [WARNING] 1,2").  What
   should the behavior be with auto-numbering?

   Fred has produced a patch__, whose initial behavior is as follows::

       1,1,1   -> 1,2,3
       1,2,2   -> 1,2,3
       3,3,3   -> 3,4,5
       1,2,2,3 -> 1,2,3 [WARNING] 3
       1,1,2   -> 1,2 [WARNING] 2

   (After the "[WARNING]", the "3" would begin a new list.)

   I have mixed feelings about adding this functionality to the spec &
   parser.  It would certainly be useful to some users (myself
   included; I often have to renumber lists).  Perhaps it's too
   clever, asking the parser to guess too much.  What if you *do* want
   three one-item lists in a row, each beginning with "1."?  You'd
   have to use empty comments to force breaks.  Also, I question
   whether "1,2,2 -> 1,2,3" is optimal behavior.

   In response, Fred came up with "a stricter and more explicit rule
   [which] would be to only auto-number silently if *all* the
   enumerators of a list were identical".  In that case::

       1,1,1   -> 1,2,3
       1,2,2   -> 1,2 [WARNING] 2
       3,3,3   -> 3,4,5
       1,2,2,3 -> 1,2 [WARNING] 2,3
       1,1,2   -> 1,2 [WARNING] 2

   Should any start-value be allowed ("3,3,3"), or should
   auto-numbered lists be limited to begin with ordinal-1 ("1", "A",
   "a", "I", or "i")?

   __ https://sourceforge.net/tracker/index.php?func=detail&aid=548802
      &group_id=38414&atid=422032

4. Alternative proposed by Tony Ibbs::

       #1. First item.
       #3. Aha - I edited this in later.
       #2. Second item.

   The initial proposal required unique enumerators within a list, but
   this limits the convenience of a feature of already limited
   applicability and convenience.  Not a useful requirement; dropped.

   Instead, simply prepend a "#" to a standard list enumerator to
   indicate auto-enumeration.  The numbers (or letters) of the
   enumerators themselves are not significant, except:

   - as a sequence indicator (arabic, roman, alphabetic; upper/lower),

   - and perhaps as a start value (first list item).

   Advantages: explicit, any enumeration sequence possible.
   Disadvantages: a bit ugly.


Adjacent citation references
============================

A special case for inline markup was proposed and implemented:
multiple citation references could be joined into one::

   [cite1]_[cite2]_ instead of requiring [cite1]_ [cite2]_

However, this was rejected as an unwarranted exception to the rules
for inline markup.
(The main motivation for the proposal, grouping citations in the latex writer,
was implemented by recognising the second group in the example above and
transforming it into ``\cite{cite1,cite2}``.)


Inline markup recognition
=========================

Implemented 2011-12-05 (version 0.9):
Extended `inline markup recognition rules`_.

Non-ASCII whitespace, punctuation characters and "international" quotes are
allowed around inline markup (based on `Unicode categories`_). The rules for
ASCII characters were not changed.

Rejected alternatives:

a) Use `Unicode categories`_ for all chars (ASCII or not)

   +1  comprehensible, standards based,
   -1  many "false positives" need escaping,
   -1  not backwards compatible.

b) full backwards compatibility

   :Pi: only before start-string
   :Pf: only behind end-string
   :Po: "conservative" sorting of other punctuation:

        :``.,;!?\\``: Close
        :``¡¿``:   Open

   +1  backwards compatible,
   +1  logical extension of the existing rules,
   -1  exception list for "other" punctuation needed,
   -1  rules even more complicated,
   -1  not clear how to sort "other" punctuation that is currently not
       recognized,
   -2  international quoting convention like
       »German ›angular‹ quotes« not recognized.

.. _Inline markup recognition rules:
   ../../ref/rst/restructuredtext.html#inline-markup-recognition-rules
.. _Unicode categories:
   https://www.unicode.org/Public/5.1.0/ucd/UCD.html#General_Category_Values


=================
 Not Implemented
=================

Reworking Footnotes
===================

As a further wrinkle (see `Reworking Explicit Markup (Round 1)`_
above), in the wee hours of 2002-02-28 I posted several ideas for
changes to footnote syntax:

    - Change footnote syntax from ``.. [1]`` to ``_[1]``? ...
    - Differentiate (with new DTD elements) author-date "citations"
      (``[GVR2002]``) from numbered footnotes? ...
    - Render footnote references as superscripts without "[]"? ...

These ideas are all related, and suggest changes in the
reStructuredText syntax as well as the docutils tree model.

The footnote has been used for both true footnotes (asides expanding
on points or defining terms) and for citations (references to external
works).  Rather than dealing with one amalgam construct, we could
separate the current footnote concept into strict footnotes and
citations.  Citations could be interpreted and treated differently
from footnotes.  Footnotes would be limited to numerical labels:
manual ("1") and auto-numbered (anonymous "#", named "#label").

The footnote is the only explicit markup construct (starts with ".. ")
that directly translates to a visible body element.  I've always been
a little bit uncomfortable with the ".. " marker for footnotes because
of this; ".. " has a connotation of "special", but footnotes aren't
especially "special".  Printed texts often put footnotes at the bottom
of the page where the reference occurs (thus "foot note").  Some HTML
designs would leave footnotes to be rendered the same positions where
they're defined.  Other online and printed designs will gather
footnotes into a section near the end of the document, converting them
to "endnotes" (perhaps using a directive in our case); but this
"special processing" is not an intrinsic property of the footnote
itself, but a decision made by the document author or processing
system.

Citations are almost invariably collected in a section at the end of a
document or section.  Citations "disappear" from where they are
defined and are magically reinserted at some well-defined point.
There's more of a connection to the "special" connotation of the ".. "
syntax.  The point at which the list of citations is inserted could be
defined manually by a directive (e.g., ".. citations::"), and/or have
default behavior (e.g., a section automatically inserted at the end of
the document) that might be influenced by options to the Writer.

Syntax proposals:

+ Footnotes:

  - Current syntax::

        .. [1] Footnote 1
        .. [#] Auto-numbered footnote.
        .. [#label] Auto-labeled footnote.

  - The syntax proposed in the original 2002-02-28 Doc-SIG post:
    remove the ".. ", prefix a "_"::

        _[1] Footnote 1
        _[#] Auto-numbered footnote.
        _[#label] Auto-labeled footnote.

    The leading underscore syntax (earlier dropped because
    ``.. _[1]:`` was too verbose) is a useful reminder that footnotes
    are hyperlink targets.

  - Minimal syntax: remove the ".. [" and "]", prefix a "_", and
    suffix a "."::

        _1. Footnote 1.
        _#. Auto-numbered footnote.
        _#label. Auto-labeled footnote.

                 ``_1.``, ``_#.``, and ``_#label.`` are markers,
                 like list markers.

    Footnotes could be rendered something like this in HTML

        | 1. This is a footnote.  The brackets could be dropped
        |    from the label, and a vertical bar could set them
        |    off from the rest of the document in the HTML.

    Two-way hyperlinks on the footnote marker ("1." above) would also
    help to differentiate footnotes from enumerated lists.

    If converted to endnotes (by a directive/transform), a horizontal
    half-line might be used instead.  Page-oriented output formats
    would typically use the horizontal line for true footnotes.

+ Footnote references:

  - Current syntax::

        [1]_, [#]_, [#label]_

  - Minimal syntax to match the minimal footnote syntax above::

        1_, #_, #label_

    As a consequence, pure-numeric hyperlink references would not be
    possible; they'd be interpreted as footnote references.

+ Citation references: no change is proposed from the current footnote
  reference syntax::

      [GVR2001]_

+ Citations:

  - Current syntax (footnote syntax)::

        .. [GVR2001] Python Documentation; van Rossum, Drake, et al.;
           https://www.python.org/doc/

  - Possible new syntax::

        _[GVR2001] Python Documentation; van Rossum, Drake, et al.;
                   https://www.python.org/doc/

        _[DJG2002]
            Docutils: Python Documentation Utilities project; Goodger
            et al.; https://docutils.sourceforge.io/

    Without the ".. " marker, subsequent lines would either have to
    align as in one of the above, or we'd have to allow loose
    alignment (I'd rather not)::

        _[GVR2001] Python Documentation; van Rossum, Drake, et al.;
            https://www.python.org/doc/

I proposed adopting the "minimal" syntax for footnotes and footnote
references, and adding citations and citation references to
reStructuredText's repertoire.  The current footnote syntax for
citations is better than the alternatives given.

From a reply by Tony Ibbs on 2002-03-01:

    However, I think easier with examples, so let's create one::

        Fans of Terry Pratchett are perhaps more likely to use
        footnotes [1]_ in their own writings than other people
        [2]_.  Of course, in *general*, one only sees footnotes
        in academic or technical writing - it's use in fiction
        and letter writing is not normally considered good
        style [4]_, particularly in emails (not a medium that
        lends itself to footnotes).

        .. [1] That is, little bits of referenced text at the
           bottom of the page.
        .. [2] Because Terry himself does, of course [3]_.
        .. [3] Although he has the distinction of being
           *funny* when he does it, and his fans don't always
           achieve that aim.
        .. [4] Presumably because it detracts from linear
           reading of the text - this is, of course, the point.

    and look at it with the second syntax proposal::

        Fans of Terry Pratchett are perhaps more likely to use
        footnotes [1]_ in their own writings than other people
        [2]_.  Of course, in *general*, one only sees footnotes
        in academic or technical writing - it's use in fiction
        and letter writing is not normally considered good
        style [4]_, particularly in emails (not a medium that
        lends itself to footnotes).

        _[1] That is, little bits of referenced text at the
             bottom of the page.
        _[2] Because Terry himself does, of course [3]_.
        _[3] Although he has the distinction of being
             *funny* when he does it, and his fans don't always
             achieve that aim.
        _[4] Presumably because it detracts from linear
             reading of the text - this is, of course, the point.

    (I note here that if I have gotten the indentation of the
    footnotes themselves correct, this is clearly not as nice.  And if
    the indentation should be to the left margin instead, I like that
    even less).

    and the third (new) proposal::

        Fans of Terry Pratchett are perhaps more likely to use
        footnotes 1_ in their own writings than other people
        2_.  Of course, in *general*, one only sees footnotes
        in academic or technical writing - it's use in fiction
        and letter writing is not normally considered good
        style 4_, particularly in emails (not a medium that
        lends itself to footnotes).

        _1. That is, little bits of referenced text at the
            bottom of the page.
        _2. Because Terry himself does, of course 3_.
        _3. Although he has the distinction of being
            *funny* when he does it, and his fans don't always
            achieve that aim.
        _4. Presumably because it detracts from linear
            reading of the text - this is, of course, the point.

    I think I don't, in practice, mind the targets too much (the use
    of a dot after the number helps a lot here), but I do have a
    problem with the body text, in that I don't naturally separate out
    the footnotes as different than the rest of the text - instead I
    keep wondering why there are numbers interspered in the text.  The
    use of brackets around the numbers ([ and ]) made me somehow parse
    the footnote references as "odd" - i.e., not part of the body text
    - and thus both easier to skip, and also (paradoxically) easier to
    pick out so that I could follow them.

    Thus, for the moment (and as always susceptable to argument), I'd
    say -1 on the new form of footnote reference (i.e., I much prefer
    the existing ``[1]_`` over the proposed ``1_``), and ambivalent
    over the proposed target change.

    That leaves David's problem of wanting to distinguish footnotes
    and citations - and the only thing I can propose there is that
    footnotes are numeric or # and citations are not (which, as a
    human being, I can probably cope with!).

From a reply by Paul Moore on 2002-03-01:

    I think the current footnote syntax ``[1]_`` is *exactly* the
    right balance of distinctness vs unobtrusiveness.  I very
    definitely don't think this should change.

    On the target change, it doesn't matter much to me.

From a further reply by Tony Ibbs on 2002-03-01, referring to the
"[1]" form and actual usage in email:

    Clearly this is a form people are used to, and thus we should
    consider it strongly (in the same way that the usage of ``*..*``
    to mean emphasis was taken partly from email practise).

    Equally clearly, there is something "magical" for people in the
    use of a similar form (i.e., ``[1]``) for both footnote reference
    and footnote target - it seems natural to keep them similar.

    ...

    I think that this established plaintext usage leads me to strongly
    believe we should retain square brackets at both ends of a
    footnote.  The markup of the reference end (a single trailing
    underscore) seems about as minimal as we can get away with.  The
    markup of the target end depends on how one envisages the thing -
    if ".." means "I am a target" (as I tend to see it), then that's
    good, but one can also argue that the "_[1]" syntax has a neat
    symmetry with the footnote reference itself, if one wishes (in
    which case ".." presumably means "hidden/special" as David seems
    to think, which is why one needs a ".." *and* a leading underline
    for hyperlink targets.

Given the persuading arguments voiced, we'll leave footnote & footnote
reference syntax alone.  Except that these discussions gave rise to
the "auto-symbol footnote" concept, which has been added.  Citations
and citation references have also been added.


Syntax for Questions & Answers
==============================

Implement as a generic two-column marked list?  As a standalone
(non-directive) construct?  (Is the markup ambiguous?)  Add support to
parts.contents?

New elements would be required.  Perhaps::

    <!ELEMENT question_list (question_list_item+)>
    <!ATTLIST question_list
        numbering  (none | local | global)
                            #IMPLIED
        start     NUMBER    #IMPLIED>
    <!ELEMENT question_list_item (question, answer*)>
    <!ELEMENT question %text.model;>
    <!ELEMENT answer (%body.elements;)+>

Originally I thought of implementing a Q&A list with special syntax::

    Q: What am I?

    A: You are a question-and-answer
       list.

    Q: What are you?

    A: I am the omniscient "we".

Where each "Q" and "A" could also be numbered (e.g., "Q1").  However,
a simple enumerated or bulleted list will do just fine for syntax.  A
directive could treat the list specially; e.g. the first paragraph
could be treated as a question, the remainder as the answer (multiple
answers could be represented by nested lists).  Without special
syntax, this directive becomes low priority.

As described in the FAQ__, no special syntax or directive is needed
for this application.

__ https://docutils.sourceforge.io/FAQ.html
   #how-can-i-mark-up-a-faq-or-other-list-of-questions-answers


========
 Tabled
========

Reworking Explicit Markup (Round 2)
===================================

See `Reworking Explicit Markup (Round 1)`_ for an earlier discussion.

In April 2004, a new thread becan on docutils-develop: `Inconsistency
in RST markup`__.  Several arguments were made; the first argument
begat later arguments.  Below, the arguments are paraphrased "in
quotes", with responses.

__ https://thread.gmane.org/gmane.text.docutils.devel/1386

1. References and targets take this form::

       targetname_

       .. _targetname: stuff

   But footnotes, "which generate links just like targets do", are
   written as::

       [1]_

       .. [1] stuff

   "Footnotes should be written as"::

       [1]_

       .. _[1]: stuff

   But they're not the same type of animal.  That's not a "footnote
   target", it's a *footnote*.  Being a target is not a footnote's
   primary purpose (an arguable point).  It just happens to grow a
   target automatically, for convenience.  Just as a section title::

       Title
       =====

   isn't a "title target", it's a *title*, which happens to grow a
   target automatically.  The consistency is there, it's just deeper
   than at first glance.

   Also, ".. [1]" was chosen for footnote syntax because it closely
   resembles one form of actual footnote rendering.  ".. _[1]:" is too
   verbose; excessive punctuation is required to get the job done.

   For more of the reasoning behind the syntax, see `Problems With
   StructuredText (Hyperlinks) <problems.html#hyperlinks>`__ and
   `Reworking Footnotes`_.

2. "I expect directives to also look like ``.. this:`` [one colon]
   because that also closely parallels the link and footnote target
   markup."

   There are good reasons for the two-colon syntax:

       Two colons are used after the directive type for these reasons:

       - Two colons are distinctive, and unlikely to be used in common
         text.

       - Two colons avoids clashes with common comment text like::

             .. Danger: modify at your own risk!

       - If an implementation of reStructuredText does not recognize a
         directive (i.e., the directive-handler is not installed), a
         level-3 (error) system message is generated, and the entire
         directive block (including the directive itself) will be
         included as a literal block.  Thus "::" is a natural choice.

       -- `restructuredtext.html#directives
       <../../ref/rst/restructuredtext.html#directives>`__

   The last reason is not particularly compelling; it's more of a
   convenient coincidence or mnemonic.

3. "Comments always seemed too easy.  I almost never write comments.
   I'd have no problem writing '.. comment:' in front of my comments.
   In fact, it would probably be more readable, as comments *should*
   be set off strongly, because they are very different from normal
   text."

   Many people do use comments though, and some applications of
   reStructuredText require it.  For example, all reStructuredText
   PEPs (and this document!) have an Emacs stanza at the bottom, in a
   comment.  Having to write ".. comment::" would be very obtrusive.

   Comments *should* be dirt-easy to do.  It should be easy to
   "comment out" a block of text.  Comments in programming languages
   and other markup languages are invariably easy.

   Any author is welcome to preface their comments with "Comment:" or
   "Do Not Print" or "Note to Editor" or anything they like.  A
   "comment" directive could easily be implemented.  It might be
   confused with admonition directives, like "note" and "caution"
   though.  In unrelated (and unpublished and unfinished) work, adding
   a "comment" directive as a true document element was considered::

       If structure is necessary, we could use a "comment" directive
       (to avoid nonsensical DTD changes, the "comment" directive
       could produce an untitled topic element).

4. "One of the goals of reStructuredText is to be *readable* by people
   who don't know it.  This construction violates that: it is not at
   all obvious to the uninitiated that text marked by '..' is a
   comment.  On the other hand, '.. comment:' would be totally
   transparent."

   Totally transparent, perhaps, but also very obtrusive.  Another of
   `reStructuredText's goals`_ is to be unobtrusive, and
   ".. comment::" would violate that.  The goals of reStructuredText
   are many, and they conflict.  Determining the right set of goals
   and finding solutions that best fit is done on a case-by-case
   basis.

   Even readability is has two aspects.  Being readable without any
   prior knowledge is one.  Being as easily read in raw form as in
   processed form is the other.  ".." may not contribute to the former
   aspect, but ".. comment::" would certainly detract from the latter.

   .. _author's note:
   .. _reStructuredText's goals: ../../ref/rst/introduction.html#goals

5. "Recently I sent someone an rst document, and they got confused; I
   had to explain to them that '..' marks comments, *unless* it's a
   directive, etc..."

   The explanation of directives *is* roundabout, defining comments in
   terms of not being other things.  That's definitely a wart.

6. "Under the current system, a mistyped directive (with ':' instead
   of '::') will be silently ignored.  This is an error that could
   easily go unnoticed."

   A parser option/setting like "--comments-on-stderr" would help.

7. "I'd prefer to see double-dot-space / command / double-colon as the
   standard Docutils markup-marker.  It's unusual enough to avoid
   being accidentally used.  Everything that starts with a double-dot
   should end with a double-colon."

   That would increase the punctuation verbosity of some constructs
   considerably.

8. Edward Loper proposed the following plan for backwards
   compatibility:

       1. ".. foo" will generate a deprecation warning to stderr, and
          nothing in the output (no system messages).
       2. ".. foo: bar" will be treated as a directive foo.  If there
          is no foo directive, then do the normal error output.
       3. ".. foo:: bar" will generate a deprecation warning to
          stderr, and be treated as a directive.  Or leave it valid?

       So some existing documents might start printing deprecation
       warnings, but the only existing documents that would *break*
       would be ones that say something like::

           .. warning: this should be a comment

       instead of::

           .. warning:: this should be a comment

       Here, we're trading fairly common a silent error (directive
       falsely treated as a comment) for a fairly uncommon explicitly
       flagged error (comment falsely treated as directive).  To make
       things even easier, we could add a sentence to the
       unknown-directive error.  Something like "If you intended to
       create a comment, please use '.. comment:' instead".

On one hand, I understand and sympathize with the points raised.  On
the other hand, I think the current syntax strikes the right balance
(but I acknowledge a possible lack of objectivity).  On the gripping
hand, the comment and directive syntax has become well established, so
even if it's a wart, it may be a wart we have to live with.

Making any of these changes would cause a lot of breakage or at least
deprecation warnings.  I'm not sure the benefit is worth the cost.

For now, we'll treat this as an unresolved legacy issue.


=========
 To Do
=========

Nested Inline Markup
====================

These are collected notes on a long-discussed issue.  The original
mailing list messages should be referred to for details.

* In a 2001-10-31 discussion I wrote:

      Try, for example, `Ed Loper's 2001-03-21 post`_, which details
      some rules for nested inline markup. I think the complexity is
      prohibitive for the marginal benefit. (And if you can understand
      that tree without going mad, you're a better man than I. ;-)

      Inline markup is already fragile. Allowing nested inline markup
      would only be asking for trouble IMHO. If it proves absolutely
      necessary, it can be added later. The rules for what can appear
      inside what must be well thought out first though.

      .. _Ed Loper's 2001-03-21 post:
         https://mail.python.org/pipermail/doc-sig/2001-March/001487.html

      -- https://mail.python.org/pipermail/doc-sig/2001-October/002354.html

* In a 2001-11-09 Doc-SIG post, I wrote:

      The problem is that in the
      what-you-see-is-more-or-less-what-you-get markup language that
      is reStructuredText, the symbols used for inline markup ("*",
      "**", "`", "``", etc.) may preclude nesting.

  I've rethought this position.  Nested markup is not precluded, just
  tricky.  People and software parse "double and 'single' quotes" all
  the time.  Continuing,

      I've thought over how we might implement nested inline
      markup. The first algorithm ("first identify the outer inline
      markup as we do now, then recursively scan for nested inline
      markup") won't work; counterexamples were given in my `last post
      <https://mail.python.org/pipermail/doc-sig/2001-November/002363.html>`__.

      The second algorithm makes my head hurt::

          while 1:
              scan for start-string
              if found:
                  push on stack
                  scan for start or end string
                  if new start string found:
                      recurse
                  elif matching end string found:
                      pop stack
                  elif non-matching end string found:
                      if its a markup error:
                          generate warning
                      elif the initial start-string was misinterpreted:
                          # e.g. in this case: ***strong** in emphasis*
                          restart with the other interpretation
                          # but it might be several layers back ...
              ...

      This is similar to how the parser does section title
      recognition, but sections are much more regular and
      deterministic.

      Bottom line is, I don't think the benefits are worth the effort,
      even if it is possible. I'm not going to try to write the code,
      at least not now. If somebody codes up a consistent, working,
      general solution, I'll be happy to consider it.

      -- https://mail.python.org/pipermail/doc-sig/2001-November/002388.html

* In a `2003-05-06 Docutils-Users post`__ Paul Tremblay proposed a new
  syntax to allow for easier nesting.  It eventually evolved into
  this::

      :role:[inline text]

  The duplication with the existing interpreted text syntax is
  problematic though.

  __ https://article.gmane.org/gmane.text.docutils.user/317

* Could the parser be extended to parse nested interpreted text? ::

      :emphasis:`Some emphasized text with :strong:`some more
      emphasized text` in it and **perhaps** :reference:`a link``

* In a `2003-06-18 Docutils-Develop post`__, Mark Nodine reported on
  his implementation of a form of nested inline markup in his
  Perl-based parser (unpublished).  He brought up some interesting
  ideas.  The implementation was flawed, however, by the change in
  semantics required for backslash escapes.

  __ https://article.gmane.org/gmane.text.docutils.devel/795

* Docutils-develop threads between David Abrahams, David Goodger, and
  Mark Nodine (beginning 2004-01-16__ and 2004-01-19__) hashed out
  many of the details of a potentially successful implementation, as
  described below.  David Abrahams checked in code to the "nesting"
  branch of CVS, awaiting thorough review.

  __ https://thread.gmane.org/gmane.text.docutils.devel/1102
  __ https://thread.gmane.org/gmane.text.docutils.devel/1125

It may be possible to accomplish nested inline markup in general with
a more powerful inline markup parser.  There may be some issues, but
I'm not averse to the idea of nested inline markup in general.  I just
don't have the time or inclination to write a new parser now.  Of
course, a good patch would be welcome!

I envisage something like this.  Explicit-role interpreted text must
be nestable.  Prefix-based is probably preferred, since suffix-based
will look like inline literals::

    ``text`:role1:`:role2:

But it can be disambiguated, so it ought to be left up to the author::

    `\ `text`:role1:`:role2:

In addition, other forms of inline markup may be nested if
unambiguous::

    *emphasized ``literal`` and |substitution ref| and link_*

IOW, the parser ought to be as permissive as possible.


Index Entries & Indexes
=======================

Were I writing a book with an index, I guess I'd need two
different kinds of index targets: inline/implicit and
out-of-line/explicit.  For example::

    In this `paragraph`:index:, several words are being
    `marked`:index: inline as implicit `index`:index:
    entries.

    .. index:: markup
    .. index:: syntax

    The explicit index directives above would refer to
    this paragraph.  It might also make sense to allow multiple
    entries in an ``index`` directive:

    .. index::
        markup
        syntax

The words "paragraph", "marked", and "index" would become index
entries pointing at the words in the first paragraph.  The index
entry words appear verbatim in the text.  (Don't worry about the
ugly ":index:" part; if indexing is the only/main application of
interpreted text in your documents, it can be implicit and
omitted.)  The two directives provide manual indexing, where the
index entry words ("markup" and "syntax") do not appear in the
main text.  We could combine the two directives into one::

    .. index:: markup; syntax

Semicolons instead of commas because commas could *be* part of the
index target, like::

    .. index:: van Rossum, Guido

Another reason for index directives is because other inline markup
wouldn't be possible within inline index targets.

Sometimes index entries have multiple levels.  Given::

    .. index:: statement syntax: expression statements

In a hypothetical index, combined with other entries, it might
look like this::

    statement syntax
        expression statements ..... 56
        assignment ................ 57
        simple statements ......... 58
        compound statements ....... 60

Inline multi-level index targets could be done too.  Perhaps
something like::

    When dealing with `expression statements <statement syntax:>`,
    we must remember ...

The opposite sense could also be possible::

    When dealing with `index entries <:multi-level>`, there are
    many permutations to consider.

Also "see / see also" index entries.

Given::

    Here's a paragraph.

    .. index:: paragraph

(The "index" directive above actually targets the *preceding*
object.)  The directive should produce something like this XML::

    <paragraph>
    <index_entry text="paragraph"/>
    Here's a paragraph.
    </paragraph>

This kind of content model would also allow true inline
index-entries::

    Here's a `paragraph`:index:.

If the "index" role were the default for the application, it could be
dropped::

    Here's a `paragraph`.

Both of these would result in this XML::

    <paragraph>
    Here's a <index_entry>paragraph</index_entry>.
    </paragraph>


from 2002-06-24 docutils-develop posts
--------------------------------------

    If all of your index entries will appear verbatim in the text,
    this should be sufficient.  If not (e.g., if you want "Van Rossum,
    Guido" in the index but "Guido van Rossum" in the text), we'll
    have to figure out a supplemental mechanism, perhaps using
    substitutions.

I've thought a bit more on this, and I came up with two possibilities:

1. Using interpreted text, embed the index entry text within the
   interpreted text::

       ... by `Guido van Rossum [Van Rossum, Guido]` ...

   The problem with this is obvious: the text becomes cluttered and
   hard to read.  The processed output would drop the text in
   brackets, which goes against the spirit of interpreted text.

2. Use substitutions::

       ... by |Guido van Rossum| ...

       .. |Guido van Rossum| index:: Van Rossum, Guido

   A problem with this is that each substitution definition must have
   a unique name.  A subsequent ``.. |Guido van Rossum| index:: BDFL``
   would be illegal.  Some kind of anonymous substitution definition
   mechanism would be required, but I think that's going too far.

Both of these alternatives are flawed.  Any other ideas?


===================
 ... Or Not To Do?
===================

This is the realm of the possible but questionably probable.  These
ideas are kept here as a record of what has been proposed, for
posterity and in case any of them prove to be useful.


Compound Enumerated Lists
=========================

Allow for compound enumerators, such as "1.1." or "1.a." or "1(a)", to
allow for nested enumerated lists without indentation?


Indented Lists
==============

Allow for variant styles by interpreting indented lists as if they
weren't indented?  For example, currently the list below will be
parsed as a list within a block quote::

    paragraph

      * list item 1
      * list item 2

But a lot of people seem to write that way, and HTML browsers make it
look as if that's the way it should be.  The parser could check the
contents of block quotes, and if they contain only a single list,
remove the block quote wrapper.  There would be two problems:

1. What if we actually *do* want a list inside a block quote?

2. What if such a list comes immediately after an indented construct,
   such as a literal block?

Both could be solved using empty comments (problem 2 already exists
for a block quote after a literal block).  But that's a hack.

Perhaps a runtime setting, allowing or disabling this convenience,
would be appropriate.  But that raises issues too:

    User A, who writes lists indented (and their config file is set up
    to allow it), sends a file to user B, who doesn't (and their
    config file disables indented lists).  The result of processing by
    the two users will be different.

It may seem minor, but it adds ambiguity to the parser, which is bad.

See the `Doc-SIG discussion starting 2001-04-18`__ with Ed Loper's
"Structuring: a summary; and an attempt at EBNF", item 4 (and
follow-ups, here__ and here__).  Also `docutils-users, 2003-02-17`__
and `beginning 2003-08-04`__.

__ https://mail.python.org/pipermail/doc-sig/2001-April/001776.html
__ https://mail.python.org/pipermail/doc-sig/2001-April/001789.html
__ https://mail.python.org/pipermail/doc-sig/2001-April/001793.html
__ https://sourceforge.net/mailarchive/message.php?msg_id=3838913
__ https://sf.net/mailarchive/forum.php?thread_id=2957175&forum_id=11444


Sloppy Indentation of List Items
================================

Perhaps the indentation shouldn't be so strict.  Currently, this is
required::

    1. First line,
       second line.

Anything wrong with this? ::

    1. First line,
     second line.

Problem? ::

    1. First para.

       Block quote.  (no good: requires some indent relative to first
       para)

     Second Para.

    2. Have to carefully define where the literal block ends::

         Literal block

       Literal block?

Hmm...  Non-strict indentation isn't such a good idea.


Lazy Indentation of List Items
==============================

Another approach: Going back to the first draft of reStructuredText
(2000-11-27 post to Doc-SIG)::

    - This is the fourth item of the main list (no blank line above).
    The second line of this item is not indented relative to the
    bullet, which precludes it from having a second paragraph.

Change that to *require* a blank line above and below, to reduce
ambiguity.  This "loosening" may be added later, once the parser's
been nailed down.  However, a serious drawback of this approach is to
limit the content of each list item to a single paragraph.


David's Idea for Lazy Indentation
---------------------------------

Consider a paragraph in a word processor.  It is a single logical line
of text which ends with a newline, soft-wrapped arbitrarily at the
right edge of the page or screen.  We can think of a plaintext
paragraph in the same way, as a single logical line of text, ending
with two newlines (a blank line) instead of one, and which may contain
arbitrary line breaks (newlines) where it was accidentally
hard-wrapped by an application.  We can compensate for the accidental
hard-wrapping by "unwrapping" every unindented second and subsequent
line.  The indentation of the first line of a paragraph or list item
would determine the indentation for the entire element.  Blank lines
would be required between list items when using lazy indentation.

The following example shows the lazy indentation of multiple body
elements::

    - This is the first paragraph
    of the first list item.

      Here is the second paragraph
    of the first list item.

    - This is the first paragraph
    of the second list item.

      Here is the second paragraph
    of the second list item.

A more complex example shows the limitations of lazy indentation::

    - This is the first paragraph
    of the first list item.

      Next is a definition list item:

      Term
          Definition.  The indentation of the term is
    required, as is the indentation of the definition's
    first line.

          When the definition extends to more than
    one line, lazy indentation may occur.  (This is the second
    paragraph of the definition.)

    - This is the first paragraph
    of the second list item.

      - Here is the first paragraph of
    the first item of a nested list.

      So this paragraph would be outside of the nested list,
    but inside the second list item of the outer list.

    But this paragraph is not part of the list at all.

And the ambiguity remains::

    - Look at the hyphen at the beginning of the next line
    - is it a second list item marker, or a dash in the text?

    Similarly, we may want to refer to numbers inside enumerated
    lists:

    1. How many socks in a pair? There are
    2. How many pants in a pair? Exactly
    1. Go figure.

Literal blocks and block quotes would still require consistent
indentation for all their lines.  For block quotes, we might be able
to get away with only requiring that the first line of each contained
element be indented.  For example::

    Here's a paragraph.

        This is a paragraph inside a block quote.
    Second and subsequent lines need not be indented at all.

        - A bullet list inside
    the block quote.

          Second paragraph of the
    bullet list inside the block quote.

Although feasible, this form of lazy indentation has problems.  The
document structure and hierarchy is not obvious from the indentation,
making the source plaintext difficult to read.  This will also make
keeping track of the indentation while writing difficult and
error-prone.  However, these problems may be acceptable for Wikis and
email mode, where we may be able to rely on less complex structure
(few nested lists, for example).


Multiple Roles in Interpreted Text
==================================

In reStructuredText, inline markup cannot be nested (yet; `see
above`__).  This also applies to interpreted text.  In order to
simultaneously combine multiple roles for a single piece of text, a
syntax extension would be necessary.  Ideas:

1. Initial idea::

       `interpreted text`:role1,role2:

2. Suggested by Jason Diamond::

       `interpreted text`:role1:role2:

If a document is so complex as to require nested inline markup,
perhaps another markup system should be considered.  By design,
reStructuredText does not have the flexibility of XML.

__ `Nested Inline Markup`_


Parameterized Interpreted Text
==============================

In some cases it may be expedient to pass parameters to interpreted
text, analogous to function calls.  Ideas:

1. Parameterize the interpreted text role itself (suggested by Jason
   Diamond)::

       `interpreted text`:role1(foo=bar):

   Positional parameters could also be supported::

       `CSS`:acronym(Cascading Style Sheets): is used for HTML, and
       `CSS`:acronym(Content Scrambling System): is used for DVDs.

   Technical problem: current interpreted text syntax does not
   recognize roles containing whitespace.  Design problem: this smells
   like programming language syntax, but reStructuredText is not a
   programming language.

2. Put the parameters inside the interpreted text::

       `CSS (Cascading Style Sheets)`:acronym: is used for HTML, and
       `CSS (Content Scrambling System)`:acronym: is used for DVDs.

   Although this could be defined on an individual basis (per role),
   we ought to have a standard.  Hyperlinks with embedded URIs already
   use angle brackets; perhaps they could be used here too::

       `CSS <Cascading Style Sheets>`:acronym: is used for HTML, and
       `CSS <Content Scrambling System>`:acronym: is used for DVDs.

   Do angle brackets connote URLs too much for this to be acceptable?
   How about the "tag" connotation -- does it save them or doom them?

3. `Nested inline markup`_ could prove useful here::

       `CSS :def:`Cascading Style Sheets``:acronym: is used for HTML,
       and `CSS :def:`Content Scrambling System``:acronym: is used for
       DVDs.

   Inline markup roles could even define the default roles of nested
   inline markup, allowing this cleaner syntax::

       `CSS `Cascading Style Sheets``:acronym: is used for HTML, and
       `CSS `Content Scrambling System``:acronym: is used for DVDs.

Does this push inline markup too far?  Readability becomes a serious
issue.  Substitutions may provide a better alternative (at the expense
of verbosity and duplication) by pulling the details out of the text
flow::

    |CSS| is used for HTML, and |CSS-DVD| is used for DVDs.

    .. |CSS| acronym:: Cascading Style Sheets
    .. |CSS-DVD| acronym:: Content Scrambling System
       :text: CSS

----------------------------------------------------------------------

This whole idea may be going beyond the scope of reStructuredText.
Documents requiring this functionality may be better off using XML or
another markup system.

This argument comes up regularly when pushing the envelope of
reStructuredText syntax.  I think it's a useful argument in that it
provides a check on creeping featurism.  In many cases, the resulting
verbosity produces such unreadable plaintext that there's a natural
desire *not* to use it unless absolutely necessary.  It's a matter of
finding the right balance.


Syntax for Interpreted Text Role Bindings
=========================================

The following syntax (idea from Jeffrey C. Jacobs) could be used to
associate directives with roles::

    .. :rewrite: class:: rewrite

    `She wore ribbons in her hair and it lay with streaks of
    grey`:rewrite:

The syntax is similar to that of substitution declarations, and the
directive/role association may resolve implementation issues.  The
semantics, ramifications, and implementation details would need to be
worked out.

The example above would implement the "rewrite" role as adding a
``class="rewrite"`` attribute to the interpreted text ("inline"
element).  The stylesheet would then pick up on the "class" attribute
to do the actual formatting.

The advantage of the new syntax would be flexibility.  Uses other than
"class" may present themselves.  The disadvantage is complexity:
having to implement new syntax for a relatively specialized operation,
and having new semantics in existing directives ("class::" would do
something different).

The `"role" directive`__ has been implemented.

__ ../../ref/rst/directives.html#role


Character Processing
====================

Several people have suggested adding some form of character processing
to reStructuredText:

* Some sort of automated replacement of ASCII sequences:

  - ``--`` to em-dash (or ``--`` to en-dash, and ``---`` to em-dash).
  - Convert quotes to curly quote entities.  (Essentially impossible
    for HTML?  Unnecessary for TeX.)
  - Various forms of ``:-)`` to smiley icons.
  - ``"\ "`` to &nbsp;.  Problem with line-wrapping though: it could
    end up escaping the newline.
  - Escaped newlines to <BR>.
  - Escaped period or quote or dash as a disappearing catalyst to
    allow character-level inline markup?

* XML-style character entities, such as "&copy;" for the copyright
  symbol.

Docutils has no need of a character entity subsystem.  Supporting
Unicode and text encodings, character entities should be directly
represented in the text: a copyright symbol should be represented by
the copyright symbol character.  If this is not possible in an
authoring environment, a pre-processing stage can be added, or a table
of substitution definitions can be devised.

A "unicode" directive has been implemented to allow direct
specification of esoteric characters.  In combination with the
substitution construct, "include" files defining common sets of
character entities can be defined and used.  `A set of character
entity set definition files have been defined`__ (`tarball`__).
There's also `a description and instructions for use`__.

__ https://docutils.sourceforge.io/tmp/charents/
__ https://docutils.sourceforge.io/tmp/charents.tgz
__ https://docutils.sourceforge.io/tmp/charents/README.html

To allow for `character-level inline markup`_, a limited form of
character processing has been added to the spec and parser: escaped
whitespace characters are removed from the processed document.  Any
further character processing will be of this functional type, rather
than of the character-encoding type.

.. _character-level inline markup:
   ../../ref/rst/restructuredtext.html#character-level-inline-markup

* Directive idea::

      .. text-replace:: "pattern" "replacement"

  - Support Unicode "U+XXXX" codes.
  - Support regexps, perhaps with alternative "regexp-replace"
    directive.
  - Flags for regexps; ":flags:" option, or individuals.
  - Specifically, should the default be case-sensistive or
    -insensitive?


Page Or Line Breaks
===================

* Should ^L (or something else in reST) be defined to mean
  force/suggest page breaks in whatever output we have?

  A "break" or "page-break" directive would be easy to add.  A new
  doctree element would be required though (perhaps "break").  The
  final behavior would be up to the Writer.  The directive argument
  could be one of page/column/recto/verso for added flexibility.

  Currently ^L (Python's ``\f``) characters are treated as whitespace.
  They're converted to single spaces, actually, as are vertical tabs
  (^K, Python's ``\v``).  It would be possible to recognize form feeds
  as markup, but it requires some thought and discussion first.  Are
  there any downsides?  Many editing environments do not allow the
  insertion of control characters.  Will it cause any harm?  It would
  be useful as a shorthand for the directive.

  It's common practice to use ^L before Emacs "Local Variables"
  lists::

      ^L
      ..
         Local Variables:
         mode: indented-text
         indent-tabs-mode: nil
         sentence-end-double-space: t
         fill-column: 70
         End:

  These are already present in many PEPs and Docutils project
  documents.  From the Emacs manual (info):

      A "local variables list" goes near the end of the file, in the
      last page.  (It is often best to put it on a page by itself.)

  It would be unfortunate if this construct caused a final blank page
  to be generated (for those Writers that recognize the page breaks).
  We'll have to add a transform that looks for a "break" plus zero or
  more comments at the end of a document, and removes them.

  Probably a bad idea because there is no such thing as a page in a
  generic document format.

* Could the "break" concept above be extended to inline forms?
  E.g. "^L" in the middle of a sentence could cause a line break.
  Only recognize it at the end of a line (i.e., ``\f\n``)?

  Or is formfeed inappropriate?  Perhaps vertical tab (``\v``), but
  even that's a stretch.  Can't use carriage returns, since they're
  commonly used for line endings.

  Probably a bad idea as well because we do not want to use control
  characters for well-readable and well-writable markup, and after all
  we have the line block syntax for line breaks.


Superscript Markup
==================

Add ``^superscript^`` inline markup?  The only common non-markup uses
of "^" I can think of are as short hand for "superscript" itself and
for describing control characters ("^C to cancel").  The former
supports the proposed syntax, and it could be argued that the latter
ought to be literal text anyhow (e.g. "``^C`` to cancel").

However, superscripts are seldom needed, and new syntax would break
existing documents.  When it's needed, the ``:superscript:``
(``:sup:``) role can we used as well.


Code Execution
==============

Add the following directives?

- "exec": Execute Python code & insert the results.  Call it
  "python" to allow for other languages?

- "system": Execute an ``os.system()`` call, and insert the results
  (possibly as a literal block).  Definitely dangerous!  How to make
  it safe?  Perhaps such processing should be left outside of the
  document, in the user's production system (a makefile or a script or
  whatever).  Or, the directive could be disabled by default and only
  enabled with an explicit command-line option or config file setting.
  Even then, an interactive prompt may be useful, such as:

      The file.txt document you are processing contains a "system"
      directive requesting that the ``sudo rm -rf /`` command be
      executed.  Allow it to execute?  (y/N)

- "eval": Evaluate an expression & insert the text.  At parse
  time or at substitution time?  Dangerous?  Perhaps limit to canned
  macros; see text.date_.

  .. _text.date: ../todo.html#text-date

It's too dangerous (or too complicated in the case of "eval").  We do
not want to have such things in the core.


``encoding`` Directive
======================

Add an "encoding" directive to specify the character encoding of the
input data?  Not a good idea for the following reasons:

- When it sees the directive, the parser will already have read the
  input data, and encoding determination will already have been done.

- If a file with an "encoding" directive is edited and saved with
  a different encoding, the directive may cause data corruption.


Support for Annotations
=======================

Add an "annotation" role, as the equivalent of the HTML "title"
attribute?  This is secondary information that may "pop up" when the
pointer hovers over the main text.  A corresponding directive would be
required to associate annotations with the original text (by name, or
positionally as in anonymous targets?).

There have not been many requests for such feature, though.  Also,
cluttering WYSIWYG plaintext with annotations may not seem like a good
idea, and there is no "tool tip" in formats other than HTML.


``term`` Role
=============

Add a "term" role for unfamiliar or specialized terminology?  Probably
not; there is no real use case, and emphasis is enough for most cases.


Object references
=================

We need syntax for `object references`_.

  - Parameterized substitutions?  For example::

        See |figure (figure name)| on |page (figure name)|.

        .. |figure (name)| figure-ref:: (name)
        .. |page (name)| page-ref:: (name)

    The result would be::

        See figure 3.11 on page 157.

    But this would require substitution directives to be processed at
    reference-time, not at definition-time as they are now.  Or,
    perhaps the directives could just leave ``pending`` elements
    behind, and the transforms do the work?  How to pass the data
    through? Too complicated. Use interpreted text roles.

.. _object references:
   ../todo.html#object-numbering-and-object-references



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 048.📜 docutils-0.20.1/docs/dev/rst/problems.txt

.. .. include:: /docutils-0.20.1/docs/header2.txt

==============================
 Problems With StructuredText
==============================
:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

There are several problems, unresolved issues, and areas of
controversy within StructuredText_ (Classic and Next Generation).  In
order to resolve all these issues, this analysis brings all of the
issues out into the open, enumerates all the alternatives, and
proposes solutions to be incorporated into the reStructuredText_
specification.


.. .. contents:: Table of Contents


Formal Specification
====================

The description in the original StructuredText.py has been criticized
for being vague.  For practical purposes, "the code *is* the spec."
Tony Ibbs has been working on deducing a `detailed description`_ from
the documentation and code of StructuredTextNG_.  Edward Loper's
STMinus_ is another attempt to formalize a spec.

For this kind of a project, the specification should always precede
the code.  Otherwise, the markup is a moving target which can never be
adopted as a standard.  Of course, a specification may be revised
during lifetime of the code, but without a spec there is no visible
control and thus no confidence.


Understanding and Extending the Code
====================================

The original StructuredText_ is a dense mass of sparsely commented
code and inscrutable regular expressions.  It was not designed to be
extended and is very difficult to understand.  StructuredTextNG_ has
been designed to allow input (syntax) and output extensions, but its
documentation (both internal [comments & docstrings], and external) is
inadequate for the complexity of the code itself.

For reStructuredText to become truly useful, perhaps even part of
Python's standard library, it must have clear, understandable
documentation and implementation code.  For the implementation of
reStructuredText to be taken seriously, it must be a sterling example
of the potential of docstrings; the implementation must practice what
the specification preaches.


Section Structure via Indentation
=================================

Setext_ required that body text be indented by 2 spaces.  The original
StructuredText_ and StructuredTextNG_ require that section structure
be indicated through indentation, as "inspired by Python".  For
certain structures with a very limited, local extent (such as lists,
block quotes, and literal blocks), indentation naturally indicates
structure or hierarchy.  For sections (which may have a very large
extent), structure via indentation is unnecessary, unnatural and
ambiguous.  Rather, the syntax of the section title *itself* should
indicate that it is a section title.

The original StructuredText states that "A single-line paragraph whose
immediately succeeding paragraphs are lower level is treated as a
header." Requiring indentation in this way is:

- Unnecessary.  The vast majority of docstrings and standalone
  documents will have no more than one level of section structure.
  Requiring indentation for such docstrings is unnecessary and
  irritating.

- Unnatural.  Most published works use title style (type size, face,
  weight, and position) and/or section/subsection numbering rather
  than indentation to indicate hierarchy.  This is a tradition with a
  very long history.

- Ambiguous.  A StructuredText header is indistinguishable from a
  one-line paragraph followed by a block quote (precluding the use of
  block quotes).  Enumerated section titles are ambiguous (is it a
  header? is it a list item?).  Some additional adornment must be
  required to confirm the line's role as a title, both to a parser and
  to the human reader of the source text.

Python's use of significant whitespace is a wonderful (if not
original) innovation, however requiring indentation in ordinary
written text is hypergeneralization.

reStructuredText_ indicates section structure through title adornment
style (as exemplified by this document).  This is far more natural.
In fact, it is already in widespread use in plain text documents,
including in Python's standard distribution (such as the toplevel
README_ file).


Character Escaping Mechanism
============================

No matter what characters are chosen for markup, some day someone will
want to write documentation *about* that markup or using markup
characters in a non-markup context.  Therefore, any complete markup
language must have an escaping or encoding mechanism.  For a
lightweight markup system, encoding mechanisms like SGML/XML's '&ast;'
are out.  So an escaping mechanism is in.  However, with carefully
chosen markup, it should be necessary to use the escaping mechanism
only infrequently.

reStructuredText_ needs an escaping mechanism: a way to treat
markup-significant characters as the characters themselves.  Currently
there is no such mechanism (although ZWiki uses '!').  What are the
candidates?

1. ``!``
   (http://www.zope.org/DevHome/Members/jim/StructuredTextWiki/NGEscaping)
2. ``\``
3. ``~``
4. doubling of characters

The best choice for this is the backslash (``\``).  It's "the single
most popular escaping character in the world!", therefore familiar and
unsurprising.  Since characters only need to be escaped under special
circumstances, which are typically those explaining technical
programming issues, the use of the backslash is natural and
understandable.  Python docstrings can be raw (prefixed with an 'r',
as in 'r""'), which would obviate the need for gratuitous doubling-up
of backslashes.

(On 2001-03-29 on the Doc-SIG mailing list, GvR endorsed backslash
escapes, saying, "'nuff said.  Backslash it is." Although neither
legally binding nor irrevocable nor any kind of guarantee of anything,
it is a good sign.)

The rule would be: An unescaped backslash followed by any markup
character escapes the character.  The escaped character represents the
character itself, and is prevented from playing a role in any markup
interpretation.  The backslash is removed from the output.  A literal
backslash is represented by an "escaped backslash," two backslashes in
a row.

A carefully constructed set of recognition rules for inline markup
will obviate the need for backslash-escapes in almost all cases; see
`Delimitation of Inline Markup`_ below.

When an expression (requiring backslashes and other characters used
for markup) becomes too complicated and therefore unreadable, a
literal block may be used instead.  Inside literal blocks, no markup
is recognized, therefore backslashes (for the purpose of escaping
markup) become unnecessary.

We could allow backslashes preceding non-markup characters to remain
in the output.  This would make describing regular expressions and
other uses of backslashes easier.  However, this would complicate the
markup rules and would be confusing.


Blank Lines in Lists
====================

Oft-requested in Doc-SIG (the earliest reference is dated 1996-08-13)
is the ability to write lists without requiring blank lines between
items.  In docstrings, space is at a premium.  Authors want to convey
their API or usage information in as compact a form as possible.
StructuredText_ requires blank lines between all body elements,
including list items, even when boundaries are obvious from the markup
itself.

In reStructuredText, blank lines are optional between list items.
However, in order to eliminate ambiguity, a blank line is required
before the first list item and after the last.  Nested lists also
require blank lines before the list start and after the list end.


Bullet List Markup
==================

StructuredText_ includes 'o' as a bullet character.  This is dangerous
and counter to the language-independent nature of the markup.  There
are many languages in which 'o' is a word.  For example, in Spanish::

    Llamame a la casa
    o al trabajo.

    (Call me at home or at work.)

And in Japanese (when romanized)::

    Senshuu no doyoubi ni tegami
    o kakimashita.

    ([I] wrote a letter on Saturday last week.)

If a paragraph containing an 'o' word wraps such that the 'o' is the
first text on a line, or if a paragraph begins with such a word, it
could be misinterpreted as a bullet list.

In reStructuredText_, 'o' is not used as a bullet character.  '-',
'*', and '+' are the possible bullet characters.


Enumerated List Markup
======================

StructuredText enumerated lists are allowed to begin with numbers and
letters followed by a period or right-parenthesis, then whitespace.
This has surprising consequences for writing styles.  For example,
this is recognized as an enumerated list item by StructuredText::

    Mr. Creosote.

People will write enumerated lists in all different ways.  It is folly
to try to come up with the "perfect" format for an enumerated list,
and limit the docstring parser's recognition to that one format only.

Rather, the parser should recognize a variety of enumerator styles.
It is also recommended that the enumerator of the first list item be
ordinal-1 ('1', 'A', 'a', 'I', or 'i'), as output formats may not be
able to begin a list at an arbitrary enumeration.

An initial idea was to require two or more consistent enumerated list
items in a row.  This idea proved impractical and was dropped.  In
practice, the presence of a proper enumerator is enough to reliably
recognize an enumerated list item; any ambiguities are reported by the
parser.  Here's the original idea for posterity:

    The parser should recognize a variety of enumerator styles, mark
    each block as a potential enumerated list item (PELI), and
    interpret the enumerators of adjacent PELIs to decide whether they
    make up a consistent enumerated list.

    If a PELI is labeled with a "1.", and is immediately followed by a
    PELI labeled with a "2.", we've got an enumerated list.  Or "(A)"
    followed by "(B)".  Or "i)" followed by "ii)", etc.  The chances
    of accidentally recognizing two adjacent and consistently labeled
    PELIs, are acceptably small.

    For an enumerated list to be recognized, the following must be
    true:

    - the list must consist of multiple adjacent list items (2 or
      more)
    - the enumerators must all have the same format
    - the enumerators must be sequential


Definition List Markup
======================

StructuredText uses ' -- ' (whitespace, two hyphens, whitespace) on
the first line of a paragraph to indicate a definition list item.  The
' -- ' serves to separate the term (on the left) from the definition
(on the right).

Many people use ' -- ' as an em-dash in their text, conflicting with
the StructuredText usage.  Although the Chicago Manual of Style says
that spaces should not be used around an em-dash, Peter Funk pointed
out that this is standard usage in German (according to the Duden, the
official German reference), and possibly in other languages as well.
The widespread use of ' -- ' precludes its use for definition lists;
it would violate the "unsurprising" criterion.

A simpler, and at least equally visually distinctive construct
(proposed by Guido van Rossum, who incidentally is a frequent user of
' -- ') would do just as well::

    term 1
        Definition.

    term 2
        Definition 2, paragraph 1.

        Definition 2, paragraph 2.

A reStructuredText definition list item consists of a term and a
definition.  A term is a simple one-line paragraph.  A definition is a
block indented relative to the term, and may contain multiple
paragraphs and other body elements.  No blank line precedes a
definition (this distinguishes definition lists from block quotes).


Literal Blocks
==============

The StructuredText_ specification has literal blocks indicated by
'example', 'examples', or '::' ending the preceding paragraph.  STNG
only recognizes '::'; 'example'/'examples' are not implemented.  This
is good; it fixes an unnecessary language dependency.  The problem is
what to do with the sometimes- unwanted '::'.

In reStructuredText_ '::' at the end of a paragraph indicates that
subsequent *indented* blocks are treated as literal text.  No further
markup interpretation is done within literal blocks (not even
backslash-escapes).  If the '::' is preceded by whitespace, '::' is
omitted from the output; if '::' was the sole content of a paragraph,
the entire paragraph is removed (no 'empty' paragraph remains).  If
'::' is preceded by a non-whitespace character, '::' is replaced by
':' (i.e., the extra colon is removed).

Thus, a section could begin with a literal block as follows::

    Section Title
    -------------

    ::

        print "this is example literal"


Tables
======

The table markup scheme in classic StructuredText was horrible.  Its
omission from StructuredTextNG is welcome, and its markup will not be
repeated here.  However, tables themselves are useful in
documentation.  Alternatives:

1. This format is the most natural and obvious.  It was independently
   invented (no great feat of creation!), and later found to be the
   format supported by the `Emacs table mode`_::

       +------------+------------+------------+--------------+
       |  Header 1  |  Header 2  |  Header 3  |  Header 4    |
       +============+============+============+==============+
       |  Column 1  |  Column 2  | Column 3 & 4 span (Row 1) |
       +------------+------------+------------+--------------+
       |    Column 1 & 2 span    |  Column 3  | - Column 4   |
       +------------+------------+------------+ - Row 2 & 3  |
       |      1     |      2     |      3     | - span       |
       +------------+------------+------------+--------------+

   Tables are described with a visual outline made up of the
   characters '-', '=', '|', and '+':

   - The hyphen ('-') is used for horizontal lines (row separators).
   - The equals sign ('=') is optionally used as a header separator
     (as of version 1.5.24, this is not supported by the Emacs table
     mode).
   - The vertical bar ('|') is used for for vertical lines (column
     separators).
   - The plus sign ('+') is used for intersections of horizontal and
     vertical lines.

   Row and column spans are possible simply by omitting the column or
   row separators, respectively.  The header row separator must be
   complete; in other words, a header cell may not span into the table
   body.  Each cell contains body elements, and may have multiple
   paragraphs, lists, etc.  Initial spaces for a left margin are
   allowed; the first line of text in a cell determines its left
   margin.

2. Below is a simpler table structure.  It may be better suited to
   manual input than alternative #1, but there is no Emacs editing
   mode available.  One disadvantage is that it resembles section
   titles; a one-column table would look exactly like section &
   subsection titles. ::

       ============ ============ ============ ==============
         Header 1     Header 2     Header 3     Header 4
       ============ ============ ============ ==============
         Column 1     Column 2    Column 3 & 4 span (Row 1)
       ------------ ------------ ---------------------------
           Column 1 & 2 span       Column 3    - Column 4
       ------------------------- ------------  - Row 2 & 3
             1            2            3       - span
       ============ ============ ============ ==============

   The table begins with a top border of equals signs with a space at
   each column boundary (regardless of spans).  Each row is
   underlined.  Internal row separators are underlines of '-', with
   spaces at column boundaries.  The last of the optional head rows is
   underlined with '=', again with spaces at column boundaries.
   Column spans have no spaces in their underline.  Row spans simply
   lack an underline at the row boundary.  The bottom boundary of the
   table consists of '=' underlines.  A blank line is required
   following a table.

3. A minimalist alternative is as follows::

       ====  =====  ========  ========  =======  ====  =====  =====
       Old State    Input     Action             New State    Notes
       -----------  --------  -----------------  -----------
       ids   types  new type  sys.msg.  dupname  ids   types
       ====  =====  ========  ========  =======  ====  =====  =====
       --    --     explicit  --        --       new   True
       --    --     implicit  --        --       new   False
       None  False  explicit  --        --       new   True
       old   False  explicit  implicit  old      new   True
       None  True   explicit  explicit  new      None  True
       old   True   explicit  explicit  new,old  None  True   [1]
       None  False  implicit  implicit  new      None  False
       old   False  implicit  implicit  new,old  None  False
       None  True   implicit  implicit  new      None  True
       old   True   implicit  implicit  new      old   True
       ====  =====  ========  ========  =======  ====  =====  =====

   The table begins with a top border of equals signs with one or more
   spaces at each column boundary (regardless of spans).  There must
   be at least two columns in the table (to differentiate it from
   section headers).  Each line starts a new row.  The rightmost
   column is unbounded; text may continue past the edge of the table.
   Each row/line must contain spaces at column boundaries, except for
   explicit column spans.  Underlines of '-' can be used to indicate
   column spans, but should be used sparingly if at all.  Lines
   containing column span underlines may not contain any other text.
   The last of the optional head rows is underlined with '=', again
   with spaces at column boundaries.  The bottom boundary of the table
   consists of '=' underlines.  A blank line is required following a
   table.

   This table sums up the features.  Using all the features in such a
   small space is not pretty though::

       ========  ========  ========
                 Header 2 & 3 Span
                 ------------------
       Header 1  Header 2  Header 3
       ========  ========  ========
       Each      line is   a new row.
       Each row  consists  of one line only.
       Row       spans     are not possible.
       The last  column    may spill over to the right.
       Column spans are possible with an underline joining columns.
       ----------------------------
       The span  is        limited to the row above the underline.
       ========  ========  ========

4. As a variation of alternative 3, bullet list syntax in the first
   column could be used to indicate row starts.  Multi-line rows are
   possible, but row spans are not.  For example::

       ===== =====
       col 1 col 2
       ===== =====
       - 1   Second column of row 1.
       - 2   Second column of row 2.
             Second line of paragraph.
       - 3   Second column of row 3.

             Second paragraph of row 3,
             column 2
       ===== =====

   Column spans would be indicated on the line after the last line of
   the row.  To indicate a real bullet list within a first-column
   cell, simply nest the bullets.

5. In a further variation, we could simply assume that whitespace in
   the first column implies a multi-line row; the text in other
   columns is continuation text.  For example::

       ===== =====
       col 1 col 2
       ===== =====
       1     Second column of row 1.
       2     Second column of row 2.
             Second line of paragraph.
       3     Second column of row 3.

             Second paragraph of row 3,
             column 2
       ===== =====

   Limitations of this approach:

   - Cells in the first column are limited to one line of text.

   - Cells in the first column *must* contain some text; blank cells
     would lead to a misinterpretation.  An empty comment ("..") is
     sufficient.

6. Combining alternative 3 and 4, a bullet list in the first column
   could mean multi-line rows, and no bullet list means single-line
   rows only.

Alternatives 1 and 5 has been adopted by reStructuredText.


Delimitation of Inline Markup
=============================

StructuredText specifies that inline markup must begin with
whitespace, precluding such constructs as parenthesized or quoted
emphatic text::

    "**What?**" she cried.  (*exit stage left*)

The `reStructuredText markup specification`_ allows for such
constructs and disambiguates inline markup through a set of
recognition rules.  These recognition rules define the context of
markup start-strings and end-strings, allowing markup characters to be
used in most non-markup contexts without a problem (or a backslash).
So we can say, "Use asterisks (*) around words or phrases to
*emphasisze* them." The '(*)' will not be recognized as markup.  This
reduces the need for markup escaping to the point where an escape
character is *almost* (but not quite!) unnecessary.


Underlining
===========

StructuredText uses '_text_' to indicate underlining.  To quote David
Ascher in his 2000-01-21 Doc-SIG mailing list post, "Docstring
grammar: a very revised proposal":

    The tagging of underlined text with _'s is suboptimal.  Underlines
    shouldn't be used from a typographic perspective (underlines were
    designed to be used in manuscripts to communicate to the
    typesetter that the text should be italicized -- no well-typeset
    book ever uses underlines), and conflict with double-underscored
    Python variable names (__init__ and the like), which would get
    truncated and underlined when that effect is not desired.  Note
    that while *complete* markup would prevent that truncation
    ('__init__'), I think of docstring markups much like I think of
    type annotations -- they should be optional and above all do no
    harm.  In this case the underline markup does harm.

Underlining is not part of the reStructuredText specification.


Inline Literals
===============

StructuredText's markup for inline literals (text left as-is,
verbatim, usually in a monospaced font; as in HTML <TT>) is single
quotes ('literals').  The problem with single quotes is that they are
too often used for other purposes:

- Apostrophes: "Don't blame me, 'cause it ain't mine, it's Chris'.";

- Quoting text:

      First Bruce: "Well Bruce, I heard the prime minister use it.
      'S'hot enough to boil a monkey's bum in 'ere your Majesty,' he
      said, and she smiled quietly to herself."

  In the UK, single quotes are used for dialogue in published works.

- String literals: s = ''

Alternatives::

    'text'    \'text\'    ''text''    "text"    \"text\"    ""text""
    #text#     @text@      `text`     ^text^    ``text''    ``text``

The examples below contain inline literals, quoted text, and
apostrophes.  Each example should evaluate to the following HTML::

    Some <TT>code</TT>, with a 'quote', "double", ain't it grand?
    Does <TT>a[b] = 'c' + "d" + `2^3`</TT> work?

    0. Some code, with a quote, double, ain't it grand?
       Does a[b] = 'c' + "d" + `2^3` work?
    1. Some 'code', with a \'quote\', "double", ain\'t it grand?
       Does 'a[b] = \'c\' + "d" + `2^3`' work?
    2. Some \'code\', with a 'quote', "double", ain't it grand?
       Does \'a[b] = 'c' + "d" + `2^3`\' work?
    3. Some ''code'', with a 'quote', "double", ain't it grand?
       Does ''a[b] = 'c' + "d" + `2^3`'' work?
    4. Some "code", with a 'quote', \"double\", ain't it grand?
       Does "a[b] = 'c' + "d" + `2^3`" work?
    5. Some \"code\", with a 'quote', "double", ain't it grand?
       Does \"a[b] = 'c' + "d" + `2^3`\" work?
    6. Some ""code"", with a 'quote', "double", ain't it grand?
       Does ""a[b] = 'c' + "d" + `2^3`"" work?
    7. Some #code#, with a 'quote', "double", ain't it grand?
       Does #a[b] = 'c' + "d" + `2^3`# work?
    8. Some @code@, with a 'quote', "double", ain't it grand?
       Does @a[b] = 'c' + "d" + `2^3`@ work?
    9. Some `code`, with a 'quote', "double", ain't it grand?
       Does `a[b] = 'c' + "d" + \`2^3\`` work?
    10. Some ^code^, with a 'quote', "double", ain't it grand?
        Does ^a[b] = 'c' + "d" + `2\^3`^ work?
    11. Some ``code'', with a 'quote', "double", ain't it grand?
        Does ``a[b] = 'c' + "d" + `2^3`'' work?
    12. Some ``code``, with a 'quote', "double", ain't it grand?
        Does ``a[b] = 'c' + "d" + `2^3\``` work?

Backquotes (#9 & #12) are the best choice.  They are unobtrusive and
relatviely rarely used (more rarely than ' or ", anyhow).  Backquotes
have the connotation of 'quotes', which other options (like carets,
#10) don't.

Analogously with ``*emph*`` & ``**strong**``, double-backquotes (#12)
could be used for inline literals.  If single-backquotes are used for
'interpreted text' (context-sensitive domain-specific descriptive
markup) such as function name hyperlinks in Python docstrings, then
double-backquotes could be used for absolute-literals, wherein no
processing whatsoever takes place.  An advantage of double-backquotes
would be that backslash-escaping would no longer be necessary for
embedded single-backquotes; however, embedded double-backquotes (in an
end-string context) would be illegal.  See `Backquotes in
Phrase-Links`__ in `Record of reStructuredText Syntax Alternatives`__.

__ alternatives.html#backquotes-in-phrase-links
__ alternatives.html

Alternative choices are carets (#10) and TeX-style quotes (#11).  For
examples of TeX-style quoting, see
http://www.zope.org/Members/jim/StructuredTextWiki/CustomizingTheDocumentProcessor.

Some existing uses of backquotes:

1. As a synonym for repr() in Python.
2. For command-interpolation in shell scripts.
3. Used as open-quotes in TeX code (and carried over into plaintext
   by TeXies).

The inline markup start-string and end-string recognition rules
defined by the `reStructuredText markup specification`_ would allow
all of these cases inside inline literals, with very few exceptions.
As a fallback, literal blocks could handle all cases.

Outside of inline literals, the above uses of backquotes would require
backslash-escaping.  However, these are all prime examples of text
that should be marked up with inline literals.

If either backquotes or straight single-quotes are used as markup,
TeX-quotes are too troublesome to support, so no special-casing of
TeX-quotes should be done (at least at first).  If TeX-quotes have to
be used outside of literals, a single backslash-escaped would suffice:
\``TeX quote''.  Ugly, true, but very infrequently used.

Using literal blocks is a fallback option which removes the need for
backslash-escaping::

    like this::

        Here, we can do ``absolutely'' anything `'`'\|/|\ we like!

No mechanism for inline literals is perfect, just as no escaping
mechanism is perfect.  No matter what we use, complicated inline
expressions involving the inline literal quote and/or the backslash
will end up looking ugly.  We can only choose the least often ugly
option.

reStructuredText will use double backquotes for inline literals, and
single backqoutes for interpreted text.


Hyperlinks
==========

There are three forms of hyperlink currently in StructuredText_:

1. (Absolute & relative URIs.)  Text enclosed by double quotes
   followed by a colon, a URI, and concluded by punctuation plus white
   space, or just white space, is treated as a hyperlink::

       "Python":http://www.python.org/

2. (Absolute URIs only.)  Text enclosed by double quotes followed by a
   comma, one or more spaces, an absolute URI and concluded by
   punctuation plus white space, or just white space, is treated as a
   hyperlink::

       "mail me", mailto:me@mail.com

3. (Endnotes.)  Text enclosed by brackets link to an endnote at the
   end of the document: at the beginning of the line, two dots, a
   space, and the same text in brackets, followed by the end note
   itself::

       Please refer to the fine manual [GVR2001].

       .. [GVR2001] Python Documentation, Release 2.1, van Rossum,
          Drake, et al., http://www.python.org/doc/

The problem with forms 1 and 2 is that they are neither intuitive nor
unobtrusive (they break design goals 5 & 2).  They overload
double-quotes, which are too often used in ordinary text (potentially
breaking design goal 4).  The brackets in form 3 are also too common
in ordinary text (such as [nested] asides and Python lists like [12]).

Alternatives:

1. Have no special markup for hyperlinks.

2. A. Interpret and mark up hyperlinks as any contiguous text
      containing '://' or ':...@' (absolute URI) or '@' (email
      address) after an alphanumeric word.  To de-emphasize the URI,
      simply enclose it in parentheses:

          Python (http://www.python.org/)

   B. Leave special hyperlink markup as a domain-specific extension.
      Hyperlinks in ordinary reStructuredText documents would be
      required to be standalone (i.e. the URI text inline in the
      document text).  Processed hyperlinks (where the URI text is
      hidden behind the link) are important enough to warrant syntax.

3. The original Setext_ introduced a mechanism of indirect hyperlinks.
   A source link word ('hot word') in the text was given a trailing
   underscore::

       Here is some text with a hyperlink_ built in.

   The hyperlink itself appeared at the end of the document on a line
   by itself, beginning with two dots, a space, the link word with a
   leading underscore, whitespace, and the URI itself::

       .. _hyperlink http://www.123.xyz

   Setext used ``underscores_instead_of_spaces_`` for phrase links.

With some modification, alternative 3 best satisfies the design goals.
It has the advantage of being readable and relatively unobtrusive.
Since each source link must match up to a target, the odd variable
ending in an underscore can be spared being marked up (although it
should generate a "no such link target" warning).  The only
disadvantage is that phrase-links aren't possible without some
obtrusive syntax.

We could achieve phrase-links if we enclose the link text:

1. in double quotes::

       "like this"_

2. in brackets::

       [like this]_

3. or in backquotes::

       `like this`_

Each gives us somewhat obtrusive markup, but that is unavoidable.  The
bracketed syntax (#2) is reminiscent of links on many web pages
(intuitive), although it is somewhat obtrusive.  Alternative #3 is
much less obtrusive, and is consistent with interpreted text: the
trailing underscore indicates the interpretation of the phrase, as a
hyperlink.  #3 also disambiguates hyperlinks from footnote references.
Alternative #3 wins.

The same trailing underscore markup can also be used for footnote and
citation references, removing the problem with ordinary bracketed text
and Python lists::

    Please refer to the fine manual [GVR2000]_.

    .. [GVR2000] Python Documentation, van Rossum, Drake, et al.,
       http://www.python.org/doc/

The two-dots-and-a-space syntax was generalized by Setext for
comments, which are removed from the (visible) processed output.
reStructuredText uses this syntax for comments, footnotes, and link
target, collectively termed "explicit markup".  For link targets, in
order to eliminate ambiguity with comments and footnotes,
reStructuredText specifies that a colon always follow the link target
word/phrase.  The colon denotes 'maps to'.  There is no reason to
restrict target links to the end of the document; they could just as
easily be interspersed.

Internal hyperlinks (links from one point to another within a single
document) can be expressed by a source link as before, and a target
link with a colon but no URI.  In effect, these targets 'map to' the
element immediately following.

As an added bonus, we now have a perfect candidate for
reStructuredText directives, a simple extension mechanism: explicit
markup containing a single word followed by two colons and whitespace.
The interpretation of subsequent data on the directive line or
following is directive-dependent.

To summarize::

    .. This is a comment.

    .. The line below is an example of a directive.
    .. version:: 1

    This is a footnote [1]_.

    This internal hyperlink will take us to the footnotes_ area below.

    Here is a one-word_ external hyperlink.

    Here is `a hyperlink phrase`_.

    .. _footnotes:
    .. [1] Footnote text goes here.

    .. external hyperlink target mappings:
    .. _one-word: http://www.123.xyz
    .. _a hyperlink phrase: http://www.123.xyz

The presence or absence of a colon after the target link
differentiates an indirect hyperlink from a footnote, respectively.  A
footnote requires brackets.  Backquotes around a target link word or
phrase are required if the phrase contains a colon, optional
otherwise.

Below are examples using no markup, the two StructuredText hypertext
styles, and the reStructuredText hypertext style.  Each example
contains an indirect link, a direct link, a footnote/endnote, and
bracketed text.  In HTML, each example should evaluate to::

    <P>A <A HREF="http://spam.org">URI</A>, see <A HREF="#eggs2000">
    [eggs2000]</A> (in Bacon [Publisher]).  Also see
    <A HREF="http://eggs.org">http://eggs.org</A>.</P>

    <P><A NAME="eggs2000">[eggs2000]</A> "Spam, Spam, Spam, Eggs,
    Bacon, and Spam"</P>

1. No markup::

       A URI http://spam.org, see eggs2000 (in Bacon [Publisher]).
       Also see http://eggs.org.

       eggs2000 "Spam, Spam, Spam, Eggs, Bacon, and Spam"

2. StructuredText absolute/relative URI syntax
   ("text":http://www.url.org)::

       A "URI":http://spam.org, see [eggs2000] (in Bacon [Publisher]).
       Also see "http://eggs.org":http://eggs.org.

       .. [eggs2000] "Spam, Spam, Spam, Eggs, Bacon, and Spam"

   Note that StructuredText does not recognize standalone URIs,
   forcing doubling up as shown in the second line of the example
   above.

3. StructuredText absolute-only URI syntax
   ("text", mailto:you@your.com)::

       A "URI", http://spam.org, see [eggs2000] (in Bacon
       [Publisher]).  Also see "http://eggs.org", http://eggs.org.

       .. [eggs2000] "Spam, Spam, Spam, Eggs, Bacon, and Spam"

4. reStructuredText syntax::

    4. A URI_, see [eggs2000]_ (in Bacon [Publisher]).
       Also see http://eggs.org.

       .. _URI: http:/spam.org
       .. [eggs2000] "Spam, Spam, Spam, Eggs, Bacon, and Spam"

The bracketed text '[Publisher]' may be problematic with
StructuredText (syntax 2 & 3).

reStructuredText's syntax (#4) is definitely the most readable.  The
text is separated from the link URI and the footnote, resulting in
cleanly readable text.

.. _StructuredText: https://zopestructuredtext.readthedocs.org/
.. _Setext: https://docutils.sourceforge.io/mirror/setext.html
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _detailed description:
   http://homepage.ntlworld.com/tibsnjoan/docutils/STNG-format.html
.. _STMinus: http://www.cis.upenn.edu/~edloper/pydoc/stminus.html
.. _StructuredTextNG:
   http://www.zope.org/DevHome/Members/jim/StructuredTextWiki/StructuredTextNG
.. _README: http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/~checkout~/
   python/python/dist/src/README
.. _Emacs table mode: http://table.sourceforge.net/
.. _reStructuredText Markup Specification:
   ../../ref/rst/restructuredtext.html



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 049.📜 docutils-0.20.1/docs/dev/runtime-settings-processing.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=============================
 Runtime Settings Processing
=============================

:Author: David Goodger, Günter Milde
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

:Abstract: A detailled description of Docutil's settings processing
           framework.

.. .. contents:: Table of Contents


The ``docutils/__init__.py``, ``docutils/core.py``, and
``docutils.frontend.py`` modules are described.
Following along with the actual code is recommended.

See `Docutils Runtime Settings`_ for a high-level description of the core
API and `Docutils Configuration`_ for a description of the individual
settings.

.. note::
   This document is informal.
   It describes the state in Docutils 0.18.1.
   Implementation details will change with the move to replace the
   deprecated optparse_ module with argparse_.


Settings priority
=================

Docutils overlays default and explicitly specified values from various
sources such that settings behave the way we want and expect them to
behave.

The souces are overlaid in the following order (later sources
overwrite earlier ones):

1. Defaults specified in `settings_spec`__ and
   `settings_defaults`__ attributes for each component_.
   (details__)

   __ ../api/runtime-settings.html#settingsspec-settings-spec
   __ ../api/runtime-settings.html#settingsspec-settings-defaults
   __ `OptionParser.populate_from_components()`_

2. Defaults specified in `settings_default_overrides`__ attribute for
   each component_.
   (details__)

   __ ../api/runtime-settings.html#settingsspec-settings-default-overrides
   __ component.settings_default_overrides_

3. Settings specified in the `settings_overrides parameter`_ of the
   `convenience functions`_ rsp. the `settings_overrides` attribute of
   a `core.Publisher` instance.
   (details__)

   __ OptionParser.defaults_

4. If enabled, settings specified in `active sections`_ of the
   `configuration files`_ in the order described in
   `Configuration File Sections & Entries`_. (details__)

   See also `Configuration File Sections & Entries`_.

   __ `OptionParser.get_standard_config_settings()`_

5. If enabled, command line arguments (details__).

   __ `Publisher.process_command_line()`_


Settings assigned to the `settings parameter`_ of the
`convenience functions`_ or the ``Publisher.settings`` attribute
are used **instead of** the above sources
(see below for details for `command-line tools`__ and
`other applications`__).

__ `publisher.publish()`_
__ `publisher.process_programmatic_settings()`_

.. _command-line tools:

Runtime settings processing for command-line tools
==================================================

The command-line `front-end tools`_ usually import and call
the `convenience function`_ ``docutils.core.publish_cmdline()``.

1. ``docutils.core.publish_cmdline()`` creates a `Publisher`_ instance::

       publisher = core.Publisher(…, settings)

   eventually sets the components_ from the respective names, and calls ::

       publisher.publish(argv, …, settings_spec,
                         settings_overrides, config_section, …)

   .. _publisher.publish():

2. If `publisher.settings` is None, ``publisher.publish()`` calls::

       publisher.process_command_line(…,
           settings_spec, config_section, **defaults)

   with `defaults` taken from `publisher.settings_overrides`.

   If `publisher.settings` is defined, steps 3 to 5 are skipped.

3. ``publisher.process_command_line()`` calls::

       optpar = publisher.setup_option_parser(…,
                    settings_spec, config_section, **defaults)

   .. _publisher.setup_option_parser():

4. ``publisher.setup_option_parser()``

   - merges the value of the `config_section parameter`_ into
     `settings_spec` and

   - creates an `OptionParser` instance ::

        optpar = docutils.frontend.OptionParser(components, defaults)

     with `components` the tuple of the `SettingsSpec`_ instances
     ``(publisher.parser, publisher.reader, publisher.writer, settings_spec)``

   .. _OptionParser.populate_from_components():

5. The `OptionParser` instance prepends itself to the `components` tuple
   and calls ``self.populate_from_components(components)``, which updates
   the attribute ``self.defaults`` in two steps:

   a) For each component passed, ``component.settings_spec`` is processed
      and ``component.settings_defaults`` is applied.

      .. _component.settings_default_overrides:

   b) In a second loop, for each component
      ``component.settings_default_overrides`` is applied. This way,
      ``component.settings_default_overrides`` can override the default
      settings of any other component.

   .. _OptionParser.defaults:

6. Back in ``OptionParser.__init__()``, ``self.defaults`` is updated with
   the `defaults` argument passed to ``OptionParser(…)`` in step 5.

   This means that the `settings_overrides` argument of the
   `convenience functions`_ has priority over all
   ``SettingsSpec.settings_spec`` defaults.

   .. _OptionParser.get_standard_config_settings():

7. If configuration files are enabled,
   ``self.get_standard_config_settings()`` is called.

   This reads the Docutils `configuration files`_, and returns a
   dictionary of settings in `active sections`_ which is used to update
   ``optpar.defaults``. So configuration file settings have priority over
   all software-defined defaults.

   .. _Publisher.process_command_line():

8. ``publisher.process_command_line()`` calls ``optpar.parse_args()``.
   The OptionParser parses all command line options and returns a
   `docutils.frontend.Values` object.
   This is assigned to ``publisher.settings``.
   So command-line options have priority over configuration file
   settings.

9. The `<source>` and `<destination>` command-line arguments
   are also parsed, and assigned to ``publisher.settings._source``
   and ``publisher.settings._destination`` respectively.

10. ``publisher.publish()`` calls ``publisher.set_io()`` with no arguments.
    If either ``publisher.source`` or ``publisher.destination`` are not
    set, the corresponding ``publisher.set_source()`` and
    ``publisher.set_destination()`` are called:

    ``publisher.set_source()``
      checks for a ``source_path`` argument, and if there is none (which
      is the case for command-line use), it is taken from
      ``publisher.settings._source``.  ``publisher.source`` is set by
      instantiating a ``publisher.source_class`` object.
      For command-line front-end tools, the default
      ``publisher.source_class`` (i.e. ``docutils.io.FileInput``)
      is used.

    ``publisher.set_destination()``
      does the same job for the destination. (the default
      ``publisher.destination_class`` is ``docutils.io.FileOutput``).

    .. _accessing the runtime settings:

11. ``publisher.publish()`` passes ``publisher.settings`` to the reader_
    component's ``read()`` method.

12. The reader component creates a new `document root node`__.
    ``nodes.document.__init__()`` adds the settings to the internal
    attributes.

    __ ../ref/doctree.html#document

    All components acting on the Document Tree are handed the
    ``document`` root node and can access the runtime settings as
    ``document.settings``.


Runtime settings processing for other applications
==================================================

The `convenience functions`_ , ``core.publish_file()``,
``core.publish_string()``, or ``core.publish_parts()`` do not parse the
command line for settings.

1. The convenience functions call the generic programmatic interface
   function ``core.publish_programmatically()`` that creates a
   `core.Publisher` instance ::

       pub = core.Publisher(…, settings)

   eventually sets the components_ from the respective names, and calls ::

       publisher.process_programmatic_settings(
           settings_spec, settings_overrides, config_section)

   .. _publisher.process_programmatic_settings():

2. If `publisher.settings` is None,
   ``publisher.process_programmatic_settings()`` calls::

       publisher.get_settings(settings_spec, config_section, **defaults)

   with `defaults` taken from `publisher.settings_overrides`.

   If `publisher.settings` is defined, the following steps are skipped.

3. ``publisher.get_settings()`` calls::

       optpar = publisher.setup_option_parser(…,
                    settings_spec, config_section, **defaults)

4. The OptionParser instance determines setting defaults
   as described in `steps 4 to 7`__ in the previous section.

   __ `publisher.setup_option_parser()`_

5. Back in ``publisher.get_settings()``, the ``frontend.Values`` instance
   returned by ``optpar.get_default_values()`` is stored in
   ``publisher.settings``.

6. ``publish_programmatically()`` continues with setting
   ``publisher.source`` and ``publisher.destination``.

7. Finally, ``publisher.publish()`` is called. As ``publisher.settings``
   is not None, no further command line processing takes place.

8. All components acting on the Document Tree are handed the
   ``document`` root node and can access the runtime settings as
   ``document.settings`` (cf. `steps 11 and 12`__ in the previous section).

   __ `accessing the runtime settings`_


.. References:

.. _optparse: https://docs.python.org/dev/library/optparse.html
.. _argparse: https://docs.python.org/dev/library/argparse.html

.. _Docutils Runtime Settings:
   ../api/runtime-settings.html
.. _active sections:
   ../api/runtime-settings.html#active-sections
.. _SettingsSpec:
   ../api/runtime-settings.html#settingsspec
.. _component:
.. _components:
    ../api/runtime-settings.html#components
.. _application settings specifications:
.. _convenience function:
.. _convenience functions:
    ../api/runtime-settings.html#convenience-functions
.. _settings_overrides parameter:
    ../api/runtime-settings.html#settings-overrides-parameter
.. _settings parameter:
   ../api/runtime-settings.html#settings-parameter
.. _config_section parameter:
   ../api/runtime-settings.html#config-section-parameter

.. _Publisher convenience functions:
    ../api/publisher.html#publisher-convenience-functions
.. _front-end tools: ../user/tools.html
.. _configuration file:
.. _configuration files:
.. _Docutils Configuration: ../user/config.html#configuration-files
.. _Configuration File Sections & Entries:
    ../user/config.html#configuration-file-sections-entries
.. _Docutils Project Model: ../peps/pep-0258.html#docutils-project-model
.. _Publisher: ../peps/pep-0258.html#publisher
.. _Reader: ../peps/pep-0258.html#reader


/Part 3. 050.📜 docutils-0.20.1/docs/dev/semantics.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

=====================
 Docstring Semantics
=====================
:Author: David Goodger
:Contact: docutils-develop@lists.sourceforge.net
:Revision: $Revision: 9051 $
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Copyright: This document has been placed in the public domain.

These are notes for a possible future PEP providing the final piece of
the Python docstring puzzle: docstring semantics or documentation
methodology.  `PEP 257`_, Docstring Conventions, sketches out some
guidelines, but does not get into methodology details.

I haven't explored documentation methodology more because, in my
opinion, it is a completely separate issue from syntax, and it's even
more controversial than syntax.  Nobody wants to be told how to lay
out their documentation, a la JavaDoc_.  I think the JavaDoc way is
butt-ugly, but it *is* an established standard for the Java world.
Any standard documentation methodology has to be formal enough to be
useful but remain light enough to be usable.  If the methodology is
too strict, too heavy, or too ugly, many/most will not want to use it.

I think a standard methodology could benefit the Python community, but
it would be a hard sell.  A PEP would be the place to start.  For most
human-readable documentation needs, the free-form text approach is
adequate.  We'd only need a formal methodology if we want to extract
the parameters into a data dictionary, index, or summary of some kind.


PythonDoc
=========

(Not to be confused with Daniel Larsson's pythondoc_ project.)

A Python version of the JavaDoc_ semantics (not syntax).  A set of
conventions which are understood by the Docutils.  What JavaDoc has
done is to establish a syntax that enables a certain documentation
methodology, or standard *semantics*.  JavaDoc is not just syntax; it
prescribes a methodology.

- Use field lists or definition lists for "tagged blocks".  By this I
  mean that field lists can be used similarly to JavaDoc's ``@tag``
  syntax.  That's actually one of the motivators behind field lists.
  For example, we could have::

      """
      :Parameters:
          - `lines`: a list of one-line strings without newlines.
          - `until_blank`: Stop collecting at the first blank line if
            true (1).
          - `strip_indent`: Strip common leading indent if true (1,
            default).

      :Return:
          - a list of indented lines with minimum indent removed;
          - the amount of the indent;
          - whether or not the block finished with a blank line or at
            the end of `lines`.
      """

  This is taken straight out of docutils/statemachine.py, in which I
  experimented with a simple documentation methodology.  Another
  variation I've thought of exploits the Grouch_-compatible
  "classifier" element of definition lists.  For example::

      :Parameters:
          `lines` : [string]
              List of one-line strings without newlines.
          `until_blank` : boolean
              Stop collecting at the first blank line if true (1).
          `strip_indent` : boolean
              Strip common leading indent if true (1, default).

- Field lists could even be used in a one-to-one correspondence with
  JavaDoc ``@tags``, although I doubt if I'd recommend it.  Several
  ports of JavaDoc's ``@tag`` methodology exist in Python, most
  recently Ed Loper's "epydoc_".


Other Ideas
===========

- Can we extract comments from parsed modules?  Could be handy for
  documenting function/method parameters::

      def method(self,
                 source,        # path of input file
                 dest           # path of output file
                ):

  This would save having to repeat parameter names in the docstring.

  Idea from Mark Hammond's 1998-06-23 Doc-SIG post, "Re: [Doc-SIG]
  Documentation tool":

      it would be quite hard to add a new param to this method without
      realising you should document it

- Frederic Giacometti's `iPhrase Python documentation conventions`_ is
  an attachment to his Doc-SIG post of 2001-05-30.


.. _PEP 257: https://peps.python.org/pep-0257
.. _JavaDoc: http://java.sun.com/j2se/javadoc/
.. _pythondoc: http://starship.python.net/crew/danilo/pythondoc/
.. _Grouch: http://www.mems-exchange.org/software/grouch/
.. _epydoc: http://epydoc.sourceforge.net/
.. _iPhrase Python documentation conventions:
   https://mail.python.org/pipermail/doc-sig/2001-May/001840.html



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 051.📜 docutils-0.20.1/docs/dev/testing.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===================
 Docutils_ Testing
===================

:Authors: Lea Wiemann <LeWiemann@gmail.com>;
          David Goodger <goodger@python.org>;
          Docutils developers <docutils-developers@lists.sourceforge.net>
:Revision: $Revision: 9308 $
:Date: $Date: 2022-12-13 22:45:23 +0100 (Di, 13. Dez 2022) $
:Copyright: This document has been placed in the public domain.

:Abstract: This document describes how to run the Docutils test suite,
           how the tests are organized and how to add new tests or modify
           existing tests.

.. _Docutils: https://docutils.sourceforge.io/

.. .. contents:: Table of Contents

When adding new functionality (or fixing bugs), be sure to add test
cases to the test suite.  Practise test-first programming; it's fun,
it's addictive, and it works!


Running the Test Suite
======================

Before checking in any changes, run the entire Docutils test suite to
be sure that you haven't broken anything.  From a shell do::

    cd docutils/test
    python -u alltests.py

Before `checking in`__ changes to the Docutils core, run the tests on
all `supported Python versions`_ (see below for details).
In a pinch, the edge cases should cover most of it.

.. note::
   The ``alltests.py`` test runner is based on the standard library's unittest_
   framework.
   Since Docutils 0.19, running ``python -m unittest`` and the pytest_
   framework no longer result in spurious failures (cf. `bug #270`_).
   However, there are differences in the reported number of tests
   (``alltests.py`` also counts sub-tests).
   In future, running the test suite may require pytest_.

__ policies.html#check-ins
.. _unittest: https://docs.python.org/3/library/unittest.html
.. _pytest: https://pypi.org/project/pytest
.. _`bug #270`: https://sourceforge.net/p/docutils/bugs/270/


.. _Python versions:

Testing across multiple Python versions
---------------------------------------

A Docutils release has a commitment to support a minimum Python version
and beyond (see dependencies__ in README.txt). Before a release is cut,
tests must pass in all `supported versions`_. [#]_

__ ../../README.html#dependencies

You can use `tox`_ to test with all supported versions in one go.
From the shell::

    cd docutils
    tox

To test a specific version, use the ``pyNN`` environment. For example::

    tox -e py37

`pyenv`_ can be installed and configured (see `installing pyenv`_) to
get multiple Python versions::

    # assuming your system runs 3.9.x
    pyenv install 3.7.12
    pyenv install 3.8.12
    pyenv install 3.10.1
    pyenv global system 3.7.12 3.8.12 3.10.1 3.11.0

    # reset your shims
    rm -rf ~/.pyenv/shims && pyenv rehash

This will give you ``python3.7`` through ``python3.11``.
Then run::

    python3.7 -u alltests.py
    [...]
    python3.11 -u alltests.py

.. note::
   When using the `Python launcher for Windows`__, specify the Python version
   as option, e.g., ``py -3.9 -u alltests.py`` for Python 3.9.

   .. cf. https://sourceforge.net/p/docutils/bugs/434/
   __ https://docs.python.org/3/using/windows.html#python-launcher-for-windows


.. [#] Good resources covering the differences between Python versions
   are the `What's New` documents (`What's New in Python 3.11`__ and
   similar).

   __ https://docs.python.org/3/whatsnew/3.11.html


.. _supported versions:
.. _supported Python versions: ../../README.html#requirements
.. _pyenv: https://github.com/yyuu/pyenv
.. _installing pyenv: https://github.com/yyuu/pyenv#installation
.. _tox: https://pypi.org/project/tox/


Unit Tests
==========

Unit tests test single functions or modules (i.e. whitebox testing).

If you are implementing a new feature, be sure to write a test case
covering its functionality.  It happens very frequently that your
implementation (or even only a part of it) doesn't work with an older
(or even newer) Python version, and the only reliable way to detect
those cases is using tests.

Often, it's easier to write the test first and then implement the
functionality required to make the test pass.


Writing New Tests
-----------------

When writing new tests, it very often helps to see how a similar test
is implemented.  For example, the files in the
``test_parsers/test_rst/`` directory all look very similar.  So when
adding a test, you don't have to reinvent the wheel.

If there is no similar test, you can write a new test from scratch
using Python's ``unittest`` module.  For an example, please have a
look at the following imaginary ``test_square.py``::

    #! /usr/bin/env python3

    # $Id: testing.txt 9308 2022-12-13 21:45:23Z milde $
    # Author: Your Name <your_email_address@example.org>
    # Copyright: This module has been placed in the public domain.

    """
    Test module for docutils.square.
    """

    import unittest
    if __name__ == '__main__':
        # prepend the "docutils root" to the Python library path
        # so we import the local `docutils` package.
        sys.path.insert(0, str(Path(__file__).resolve().parents[1]))

    import docutils.square


    class SquareTest(unittest.TestCase):

        def test_square(self):
            self.assertEqual(docutils.square.square(0), 0)
            self.assertEqual(docutils.square.square(5), 25)
            self.assertEqual(docutils.square.square(7), 49)

        def test_square_root(self):
            self.assertEqual(docutils.square.sqrt(49), 7)
            self.assertEqual(docutils.square.sqrt(0), 0)
            self.assertRaises(docutils.square.SquareRootError,
                              docutils.square.sqrt, 20)


    if __name__ == '__main__':
        unittest.main()

For more details on how to write tests, please refer to the
documentation of the ``unittest`` module.

.. Note::

   Unit tests and functional test should generally disable configuration
   files, setting the `_disable_config`__ setting to True ::

     settings_overrides['_disable_config'] = True

   in order to be independent on the users local configuration.

   __ ../user/config.html#disable-config

.. _functional:

Functional Tests
================

The directory ``test/functional/`` contains data for functional tests.

Performing functional testing means testing the Docutils system as a
whole (i.e. blackbox testing).


Directory Structure
-------------------

+ ``functional/`` The main data directory.

  + ``input/`` The input files.

    - ``some_test.txt``, for example.

  + ``output/`` The actual output.

    - ``some_test.html``, for example.

  + ``expected/`` The expected output.

    - ``some_test.html``, for example.

  + ``tests/`` The config files for processing the input files.

    - ``some_test.py``, for example.


The Testing Process
-------------------

When running ``test_functional.py``, all config files in
``functional/tests/`` are processed.  (Config files whose names begin
with an underscore are ignored.)  The current working directory is
always Docutils' main test directory (``test/``).

For example, ``functional/tests/some_test.py`` could read like this::

    # Source and destination file names.
    test_source = "some_test.txt"
    test_destination = "some_test.html"

    # Keyword parameters passed to publish_file.
    reader_name = "standalone"
    parser_name = "rst"
    writer_name = "html"
    settings_overrides['output-encoding'] = 'utf-8'
    # Relative to main ``test/`` directory.
    settings_overrides['stylesheet_path'] = '../docutils/writers/html4css1/html4css1.css'

The two variables ``test_source`` and ``test_destination`` contain the
input file name (relative to ``functional/input/``) and the output
file name (relative to ``functional/output/`` and
``functional/expected/``).  Note that the file names can be chosen
arbitrarily.  However, the file names in ``functional/output/`` *must*
match the file names in ``functional/expected/``.

``test_source`` and ``test_destination`` are removed from the
namespace, as are all variables whose names begin with an underscore
("_").  The remaining names are passed as keyword arguments to
``docutils.core.publish_file``, so you can set reader, parser, writer
and anything else you want to configure.  Note that
``settings_overrides`` is already initialized as a dictionary *before*
the execution of the config file.


Creating New Tests
------------------

In order to create a new test, put the input test file into
``functional/input/``.  Then create a config file in
``functional/tests/`` which sets at least input and output file names,
reader, parser and writer.

Now run ``test_functional.py``.  The test will fail, of course,
because you do not have an expected output yet.  However, an output
file will have been generated in ``functional/output/``.  Check this
output file for validity [#]_ and correctness.  Then copy the file to
``functional/expected/``.

If you rerun ``test_functional.py`` now, it should pass.

If you run ``test_functional.py`` later and the actual output doesn't
match the expected output anymore, the test will fail.

If this is the case and you made an intentional change, check the
actual output for validity and correctness, copy it to
``functional/expected/`` (overwriting the old expected output), and
commit the change.

.. [#] The validity of `Docutils XML` can be tested with
   ``xmllint <document-referencing-local-Docutils-DTD>.xml --valid --noout``.

   .. note: the ``--dtdvalid`` and ``--nonet`` options do not help override
     a reference to the PUBLIC "docutils.dtd" if there is a local version
     on the system (e.g. /usr/share/xml/docutils/docutils.dtd in Debian).


/Part 3. 052.📜 docutils-0.20.1/docs/dev/todo.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

======================
 Docutils_ To Do List
======================

:Author: David Goodger (with input from many); open to all Docutils
         developers
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-11-02 23:39:16 +0100 (Mi, 02. Nov 2022) $
:Revision: $Revision: 9201 $
:Copyright: This document has been placed in the public domain.

.. _Docutils: https://docutils.sourceforge.io/

.. .. contents:: Table of Contents


Priority items are marked with "@" symbols.  The more @s, the higher
the priority.  Items in question form (containing "?") are ideas which
require more thought and debate; they are potential to-do's.

Many of these items are awaiting champions.  If you see something
you'd like to tackle, please do!
Please see also the Bugs_ document for a list of bugs in Docutils.

.. _bugs: ../../BUGS.html


Minimum Requirements for Python Standard Library Candidacy
==========================================================

Below are action items that must be added and issues that must be
addressed before Docutils can be considered suitable to be proposed
for inclusion in the Python standard library.

Many of these are now handled by Sphinx_

* Support for `document splitting`_.  May require some major code
  rework.

* Support for subdocuments (see `large documents`_).

* `Object numbering and object references`_.

* `Nested inline markup`_.

* `Python Source Reader`_.

* The HTML writer needs to be rewritten (or a second HTML writer
  added) to allow for custom classes, and for arbitrary splitting
  (stack-based?).

* Documentation_ of the architecture.  Other docs too.

* Plugin support.

* Suitability for `Python module documentation
  <https://docutils.sourceforge.io/sandbox/README.html#documenting-python>`_.

.. _Sphinx: http://www.sphinx-doc.org/

Repository
==========

Move to a Git repository.

* This is a long standing `feature request`__
  (with pointers to Sphinx issues and discussion).

  __ https://sourceforge.net/p/docutils/feature-requests/58/

* From a `post by David Goodger`__

    An absolute requirement, for me, is that such a change be complete.
    We can't lose any data or have to refer to the old system as an
    "archive". So all the SVN history, all branches, and the full sandbox
    need to be converted at the same time.

  __ https://sourceforge.net/p/docutils/mailman/message/31878077/

Convert with reposurgeon_?

  If you are doing a full import rather than gatewaying, reposurgeon is
  probably what you want. It has been tested against a lot of large, old,
  nasty repositories and is thus known to be robust in the presence of
  repository malformations (a property regularly checked by a test suite
  that is a rogue's gallery of Subversion botches).

  -- `Git Wiki`__

The comprehensive `Reposurgeon documentation`_ comes with
`a guide to repository conversion`__
as well as info about `reading Subversion repositories`__.
Converting from an SVN dump file is faster than from a checkout.

.. _reposurgeon: http://www.catb.org/esr/reposurgeon/
.. _reposurgeon documentation:
    http://www.catb.org/esr/reposurgeon/repository-editing.html
__ https://git.wiki.kernel.org/index.php/
   Interfaces,_frontends,_and_tools#Subversion
__ http://www.catb.org/esr/reposurgeon/repository-editing.html#conversion   
__ http://www.catb.org/esr/reposurgeon/repository-editing.html
   #_reading_subversion_repositories   


Adam Turner wrote a conversion Makefile and ``.lift`` scripts that
downloads the repo from SF with rsync, converts it to a SVN mirror and
finally to Git, splitting sandbox, prest, and web from docutils.


Sourceforge supports multiple Git repositories per project, so we can
switch the version control system independent of the decision on an
eventual switch of the host.
Cf. https://sourceforge.net/p/forge/documentation/Git/


General
=======

Miscellaneous
-------------

Code cleanup and modernization:
  Use flake8_? See also the configuration in `<../../tox.ini>`__.

  Check and solve issue from  :PEP:`290` - Code Migration and Modernization.
  (Covers issues up to Python 2.4, is there an equivalent for more recent
  modernizations?)

  Ensure `backwards compatibility`_!

  .. _flake8: https://pypi.org/project/flake8/
  .. _backwards compatibility: policies.html#backwards-compatibility-policy

* Improve handling on Windows:

  - Get graphical installer.
  - Make rst2html.py an .exe file using py2exe.

* .. _GUI:

  The user interface is very difficult to use for most Windows users;
  you can't really expect them to use the command line.  We need some
  kind of GUI that can launch rst2html.py, and save the HTML output to
  a file, and launch a browser.  What's important is that we get
  settings to work with the GUI.  So we need some way to dynamically
  generate a list of settings for the GUI.  The current settings_spec
  for OptionParser doesn't seem to be usable for this for the
  following reasons:

  - It's biased toward the command line -- there are *two* options for
    one boolean setting.

  - You cannot have both a one-line description and a longer
    description for tooltips/help-texts.

  - It doesn't provide hints for the input type.  You cannot easily
    infer the type of a setting from its validator, because any
    component can add new validators.  In fact, it may be necessary to
    have both a hint about the input type (e.g. string) and a
    validator (valid ID), or it may be necessary to have a different
    set of choices for the CLI (1, INFO, 2, ...) and for the GUI
    (INFO, WARNING, ...).

  - It's coupled to the OptionParser.  We want to be able to change
    the underlying system without breaking everything.

  - It's a bunch of primitive structures.  We want an extensible (thus
    object-oriented) interface.

  So we probably need to create a class for storing all the settings,
  and auto-generate the OptionParser data from that.

  I talked to Stephan Deibel about getting Docutils integrated into
  Wing IDE.  He said it's possible, and he'd be willing to help.
  There's a scripting interface to Wing, which we'd use.  We can
  dynamically generate a list of preferences and not worry too much
  about the rendering (from what I understood); Wing's whole GUI is
  dynamic anyway.  The interface could be made usable for other GUIs.
  For example, we could try to get option support for DocFactory.  //
  FW

* Allow different report levels for STDERR and system_messages inside
  the document?

* Change the docutils-update script (in sandbox/infrastructure), to
  support arbitrary branch snapshots.

* Move some general-interest sandboxes out of individuals'
  directories, into subprojects?

* Add option for file (and URL) access restriction to make Docutils
  usable in Wikis and similar applications.

  2005-03-21: added ``file_insertion_enabled`` & ``raw_enabled``
  settings.  These partially solve the problem, allowing or disabling
  **all** file accesses, but not limited access.

* Configuration_ file handling needs discussion:

  - There should be some error checking on the contents of config
    files.  How much checking should be done?  How loudly should
    Docutils complain if it encounters an error/problem?

  - Docutils doesn't complain when it doesn't find a configuration
    file supplied with the ``--config`` option.  Should it?  (If yes,
    error or warning?)

* Internationalization:

  - I18n needs refactoring, the language dictionaries are difficult to
    maintain.  Maybe have a look at gettext or similar tools.

    (This would make a nice Google Summer of Code project)

  - Language modules: in accented languages it may be useful to have
    both accented and unaccented entries in the
    ``bibliographic_fields`` mapping for versatility.

  - Add a "--strict-language" option & setting: no English fallback
    for language-dependent features.

    Make this the default for output (as opposed to input)?
    Throw an error with a helpful message, e.g.

      Default "contents" title for language %s missing, please specify
      an explicit title.

    or

     "attention" title for language %s missing, please use a generic
     admonition with explicit title.

  - Add internationalization to _`footer boilerplate text` (resulting
    from "--generator", "--source-link", and "--date" etc.), allowing
    translations.


* Add validation?  See http://pytrex.sourceforge.net, RELAX NG, pyRXP.

* In ``docutils.readers.get_reader_class`` (& ``parsers`` &
  ``writers`` too), should we be importing "standalone" or
  "docutils.readers.standalone"?  (This would avoid importing
  top-level modules if the module name is not in docutils/readers.
  Potential nastiness.)

* Perhaps store a _`name-to-id mapping file`?  This could be stored
  permanently, read by subsequent processing runs, and updated with
  new entries.  ("Persistent ID mapping"?)

* Perhaps the ``Component.supports`` method should deal with
  individual features ("meta" etc.) instead of formats ("html" etc.)?
  Currently, it is not used at all.

  Do we need it at all?  Or rather let the writers just ignore some
  nodes (like we already do for "class" values)?

  The current implementation of the framework also leads to bug
  `bug #241`__ "doctree-based publishing != publish_string".
  The "components.Filter" transform is run by publish_doctree(). When
  filtering based on the output format, it should be run by
  publish_from_doctree() instead because only then the writer is
  known.

  So we need to either remove or fix the framework.

  __ https://sourceforge.net/p/docutils/bugs/241/


* Think about _`large documents` made up of multiple subdocument
  files.  Issues: continuity (`persistent sequences`_ above),
  cross-references (`name-to-id mapping file`_ above and `targets in
  other documents`_ below), splitting (`document splitting`_ below).

  When writing a book, the author probably wants to split it up into
  files, perhaps one per chapter (but perhaps even more detailed).
  However, we'd like to be able to have references from one chapter to
  another, and have continuous numbering (pages and chapters, as
  applicable).  Of course, none of this is implemented yet.  There has
  been some thought put into some aspects; see `the "include"
  directive`__ and the `Reference Merging`_ transform below.

  When I was working with SGML in Japan, we had a system where there
  was a top-level coordinating file, book.sgml, which contained the
  top-level structure of a book: the <book> element, containing the
  book <title> and empty component elements (<preface>, <chapter>,
  <appendix>, etc.), each with filename attributes pointing to the
  actual source for the component.  Something like this::

      <book id="bk01">
      <title>Title of the Book</title>
      <preface inrefid="pr01"></preface>
      <chapter inrefid="ch01"></chapter>
      <chapter inrefid="ch02"></chapter>
      <chapter inrefid="ch03"></chapter>
      <appendix inrefid="ap01"></appendix>
      </book>

  (The "inrefid" attribute stood for "insertion reference ID".)

  The processing system would process each component separately, but
  it would recognize and use the book file to coordinate chapter and
  page numbering, and keep a persistent ID to (title, page number)
  mapping database for cross-references.  Docutils could use a similar
  system for large-scale, multipart documents.

  __ ../ref/rst/directives.html#including-an-external-document-fragment

  Aahz's idea:

      First the ToC::

          .. ToC-list::
              Introduction.txt
              Objects.txt
              Data.txt
              Control.txt

      Then a sample use::

          .. include:: ToC.txt

          As I said earlier in chapter :chapter:`Objects.txt`, the
          reference count gets increased every time a binding is made.

      Which produces::

          As I said earlier in chapter 2, the
          reference count gets increased every time a binding is made.

      The ToC in this form doesn't even need to be references to actual
      reST documents; I'm simply doing it that way for a minimum of
      future-proofing, in case I do want to add the ability to pick up
      references within external chapters.

  Perhaps, instead of ToC (which would overload the "contents"
  directive concept already in use), we could use "manifest".  A
  "manifest" directive might associate local reference names with
  files::

      .. manifest::
         intro: Introduction.txt
         objects: Objects.txt
         data: Data.txt
         control: Control.txt

  Then the sample becomes::

      .. include:: manifest.txt

      As I said earlier in chapter :chapter:`objects`, the
      reference count gets increased every time a binding is made.

* Add support for _`multiple output files` and _`generic data
  handling`:

  It should be possible for a component to **emit or reference** data
  to be either **included or referenced** in the output document.
  Examples of such data are stylesheets or images.

  For this, we need a "data" object which stores the data either
  inline or by referring to a file.  The Docutils framework is
  responsible for either:

  * storing the data in the appropriate location (e.g. in the
    directory of the output file, or in a user-specified directory)
    and providing the paths of the stored files to the writer, *or*

  * providing the data itself to the writer so that it can be embedded
    in the output document.

  This approach decouples data handling from the data source (which
  can either be embedded or referenced) and the destination (which can
  either be embedded or referenced as well).

  See <http://article.gmane.org/gmane.text.docutils.devel/3631>.

* Add testing for Docutils' front end tools?

* Publisher: "Ordinary setup" shouldn't require specific ordering; at
  the very least, there ought to be error checking higher up in the
  call chain.  [Aahz]

  ``Publisher.get_settings`` requires that all components be set up
  before it's called.  Perhaps the I/O *objects* shouldn't be set, but
  I/O *classes*.  Then options are set up (``.set_options``), and
  ``Publisher.set_io`` (or equivalent code) is called with source &
  destination paths, creating the I/O objects.

  Perhaps I/O objects shouldn't be instantiated until required.  For
  split output, the Writer may be called multiple times, once for each
  doctree, and each doctree should have a separate Output object (with
  a different path).  Is the "Builder" pattern applicable here?

* Perhaps I/O objects should become full-fledged components (i.e.
  subclasses of ``docutils.Component``, as are Readers, Parsers, and
  Writers now), and thus have associated option/setting specs and
  transforms.

* Multiple file I/O suggestion from Michael Hudson: use a file-like
  object or something you can iterate over to get file-like objects.

* Add an "--input-language" option & setting?  Specify a different
  language module for input (bibliographic fields, directives) than
  for output.  The "--language" option would set both input & output
  languages.

* Auto-generate reference tables for language-dependent features?
  Could be generated from the source modules.  A special command-line
  option could be added to Docutils front ends to do this.  (Idea from
  Engelbert Gruber.)

* Enable feedback of some kind from internal decisions, such as
  reporting the successful input encoding.  Modify runtime settings?
  System message?  Simple stderr output?

* Rationalize Writer settings (HTML/LaTeX/PEP) -- share settings.

* Add an "--include file" command-line option (config setting too?),
  equivalent to ".. include:: file" as the first line of the doc text?
  Especially useful for character entity sets, text transform specs,
  boilerplate, etc.

* Support "include" as embedded inline-compatible directive in substitution
  definitions, e.g. ::

    .. |version| include:: version.txt

    This document describes version |version| of ...

  (cf. Grzegorz Adam Hankiewicz's post from 2014-10-01 in docutils-devel)

* Add an ``:optional: <replacement text>`` option to the "include"
  directive? This would not throw an error for a missing file, instead a
  warning is given and ``<replacement text>`` is used instead. It would be
  the responsibility of the author to ensure the missing file does not lead
  to problems later in the document.

  Use cases:

  + Standard rST syntax to replace Sphinx's "literalinclude"::

      .. include:: blah.cpp
         :literal:
         :optional: file ``blah.cpp`` not found

  + Variable content taken from a file, e.g.

    version.txt::

       .. |version| replace:: 3.1

    optionally used as::

       .. include:: version.txt
          :optional: .. |version| replace:: unknown

       This document describes version |version| of ...

    (cf. Grzegorz Adam Hankiewicz's post from 2014-10-01 in docutils-devel)

* Parameterize the Reporter object or class?  See the `2004-02-18
  "rest checking and source path"`_ thread.

  .. _2004-02-18 "rest checking and source path":
     http://thread.gmane.org/gmane.text.docutils.user/1112

* Add a "disable_transforms" setting? Would allow for easy syntax
  checking. Where ("null" writer, generic, parser(s))?
  Cf. the `2004-02-18 "rest checking and source path"`_ thread.

* Add a generic meta-stylesheet mechanism?  An external file could
  associate style names ("class" attributes) with specific elements.
  Could be generalized to arbitrary output attributes; useful for HTML
  & XMLs.  Aahz implemented something like this in
  sandbox/aahz/Effective/EffMap.py.

* .. _classes for table cells:

  William Dode suggested that table cells be assigned "class"
  attributes by columns, so that stylesheets can affect text
  alignment.  Unfortunately, there doesn't seem to be a way (in HTML
  at least) to leverage the "colspec" elements (HTML "col" tags) by
  adding classes to them.  The resulting HTML is very verbose::

      <td class="col1">111</td>
      <td class="col2">222</td>
      ...

  At the very least, it should be an option.  People who don't use it
  shouldn't be penalized by increases in their HTML file sizes.

  Table rows could also be assigned classes (like odd/even).  That
  would be easier to implement.

  How should it be implemented?

  * There could be writer options (column classes & row classes) with
    standard values.

  * The table directive could grow some options.  Something like
    ":cell-classes: col1 col2 col3" (either must match the number of
    columns, or repeat to fill?)  and ":row-classes: odd even" (repeat
    to fill; body rows only, or header rows too?).

  Probably per-table directive options are best.  The "class" values
  could be used by any writer, and applying such classes to all tables
  in a document with writer options is too broad.

  See also the `table_styling Sphinx extension`_ which defines

  :widths: also in Docutils core (but different implementation)
  :column-alignment: Sets per-column text alignment
  :column-wrapping:  Sets per-column text wrapping
  :column-dividers:  Add dividers between columns
  :column-classes:   Add per-column css classes.
  :header-columns:   Specify number of “stub” columns

  .. _table_styling Sphinx extension: https://pythonhosted.org/cloud_sptheme/
                                      lib/cloud_sptheme.ext.table_styling.html

* Add file-specific settings support to config files, like::

      [file index.txt]
      compact-lists: no

  Is this even possible?  Should the criterion be the name of the
  input file or the output file?  Alternative (more explicit) syntax::

      [source_file index.txt]
      ...

      [dest_file index.html]
      ...

  Or rather allow settings configuration from the rst source file
  (see misc.settings_ directive)?

* The "validator" support added to OptionParser is very similar to
  "traits_" in SciPy_.  Perhaps something could be done with them?
  (Had I known about traits when I was implementing docutils.frontend,
  I may have used them instead of rolling my own.)

  .. _traits: http://code.enthought.com/traits/
  .. _SciPy: http://www.scipy.org/

* tools/buildhtml.py: Extend the --prune option ("prune" config
  setting) to accept file names (generic path) in addition to
  directories (e.g. --prune=docs/user/rst/cheatsheet.txt, which should
  *not* be converted to HTML).

* Add support for _`plugins`.

* _`Config directories`: Currently, ~/.docutils, ./docutils.conf/, &
  /etc/docutils.conf are read as configuration_ files.  Proposal: allow
  ~/.docutils to be a a configuration *directory*, along with
  /etc/docutils/ and ./docutils.conf/.  Within these directories,
  check for config.txt files.  We can also have subdirectories here,
  for plugins, S5 themes, components (readers/writers/parsers) etc.

  Docutils will continue to support configuration files for backwards
  compatibility.

* Add support for document decorations other than headers & footers?
  For example, top/bottom/side navigation bars for web pages.  Generic
  decorations?

  Seems like a bad idea as long as it isn't independent from the output
  format (for example, navigation bars are only useful for web pages).

* docutils_update: Check for a ``Makefile`` in a directory, and run
  ``make`` if found?  This would allow for variant processing on
  specific source files, such as running rst2s5.py instead of
  rst2html.py.

* Add a "disable table of contents" setting?  The S5 writer could set
  it as a default.  Rationale:

      The ``contents`` (table of contents) directive must not be used
      [in S5/HTML documents].  It changes the CSS class of headings
      and they won't show up correctly in the screen presentation.

      -- `Easy Slide Shows With reStructuredText & S5
      <../user/slide-shows.html>`_

  Analogue to the ``sectnum_xform`` setting, it could be used by the
  latex writer to switch to a LaTeX generated ToC (currently, the latex
  writer calls it "use_latex_toc").

object numbering and object references
--------------------------------------

For equations, tables & figures.

These would be the equivalent of DocBook's "formal" elements.

In LaTeX, automatic counters are implemented for sections, equations and
floats (figures, tables) (configurable via stylesheets or in the
latex-preamble). Objects can be given `reference names`_ with the
``\label{<refname}`` command, ``\ref{<refname>}`` inserts the
corresponding number.

No such mechanism exists in HTML.

* We need _`persistent sequences`, similar to chapter and footnote
  numbers. See `OpenOffice.org XML`_ "fields".

  - Should the sequences be automatic or manual (user-specifyable)?

* It is already possible to give `reference names`_ to objects via
  internal hyperlink targets or the "name" directive option::

      .. _figure name:

      .. figure:: image.png

  or ::

      .. figure:: image.png
         :name: figure name

  Improve the mapping of "phrase references" to IDs/labels with Literal
  transcription (i.e. ü -> ue, ß -> ss, å -> aa) instead of just
  stripping the accents and other non-ASCII chars. See also the feature
  request `allow more characters when transforming "names" to "ids"`__.

  A "table" directive has been implemented, supporting table titles.

  Perhaps the name could derive from the title/caption?

  .. _reference names: ../ref/rst/restructuredtext.html#reference-names
  __ https://sourceforge.net/p/docutils/feature-requests/66/

* We need syntax for object references.  Cf. `OpenOffice.org XML`_
  "reference fields":

  - Parameterized substitutions are too complicated
    (cf. `or not to do`: `object references`_)

  - An interpreted text approach is simpler and better::

      See Figure :ref:`figure name` and Equation :ref:`eq:identity`.

  - "equation", "figure", and "page" roles could generate appropriate
    boilerplate text::

        See :figure:`figure name` on :page:`figure name`.

    See `Interpreted Text`_ below.

    Reference boilerplate could be specified in the document
    (defaulting to nothing)::

        .. fignum::
           :prefix-ref: "Figure "
           :prefix-caption: "Fig. "
           :suffix-caption: :

    The position of the role (prefix or suffix) could also be utilized

  .. _OpenOffice.org XML: http://xml.openoffice.org/
  .. _object references: rst/alternatives.html#object-references

See also the `Modified rst2html
<http://www.loria.fr/~rougier/coding/article/rst2html.py>`__
by Nicolas Rougier for a sample implementation.


Documentation
=============

User Docs
---------

* Add a FAQ entry about using Docutils (with reStructuredText) on a
  server and that it's terribly slow.  See the first paragraphs in
  <http://article.gmane.org/gmane.text.docutils.user/1584>.

* Add document about what Docutils has previously been used for
  (web/use-cases.txt?).

* Improve index in docs/user/config.txt.


Developer Docs
--------------

* Improve the internal module documentation (docstrings in the code).
  Specific deficiencies listed below.

  - docutils.parsers.rst.states.State.build_table: data structure
    required (including StringList).

  - docutils.parsers.rst.states: more complete documentation of parser
    internals.

* docs/ref/doctree.txt: DTD element structural relationships,
  semantics, and attributes.  In progress; element descriptions to be
  completed.

* Document the ``pending`` elements, how they're generated and what
  they do.

* Document the transforms_ (perhaps in docstrings?): how they're used,
  what they do, dependencies & order considerations.

* Document the HTML classes used by html4css1.py.

* Write an overview of the Docutils architecture, as an introduction
  for developers.  What connects to what, why, and how.  Either update
  PEP 258 (see PEPs_ below) or as a separate doc.

* Give information about unit tests.  Maybe as a howto?

* Document the docutils.nodes APIs.

* Complete the docs/api/publisher.txt docs.


How-Tos
-------

* Creating Docutils Writers

* Creating Docutils Readers

* Creating Docutils Transforms_

* Creating Docutils Parsers

* Using Docutils as a Library


PEPs
----

* Complete PEP 258 Docutils Design Specification.

  - Fill in the blanks in API details.

  - Specify the nodes.py internal data structure implementation?

        [Tibs:] Eventually we need to have direct documentation in
        there on how it all hangs together - the DTD is not enough
        (indeed, is it still meant to be correct?  [Yes, it is.
        --DG]).

* Rework PEP 257, separating style from spec from tools, wrt Docutils?
  See Doc-SIG from 2001-06-19/20.


Python Source Reader
====================

General:

* Analyze Tony Ibbs' PySource code.

* Analyze Doug Hellmann's HappyDoc project.

* Investigate how POD handles literate programming.

* Take the best ideas and integrate them into Docutils.

Miscellaneous ideas:

* Ask Python-dev for opinions (GvR for a pronouncement) on special
  variables (__author__, __version__, etc.): convenience vs. namespace
  pollution.  Ask opinions on whether or not Docutils should recognize
  & use them.

* If we can detect that a comment block begins with ``##``, a la
  JavaDoc, it might be useful to indicate interspersed section headers
  & explanatory text in a module.  For example::

      """Module docstring."""

      ##
      # Constants
      # =========

      a = 1
      b = 2

      ##
      # Exception Classes
      # =================

      class MyException(Exception): pass

      # etc.

* Should standalone strings also become (module/class) docstrings?
  Under what conditions?  We want to prevent arbitrary strings from
  becoming docstrings of prior attribute assignments etc.  Assume
  that there must be no blank lines between attributes and attribute
  docstrings?  (Use lineno of NEWLINE token.)

  Triple-quotes are sometimes used for multi-line comments (such as
  commenting out blocks of code).  How to reconcile?

* HappyDoc's idea of using comment blocks when there's no docstring
  may be useful to get around the conflict between `additional
  docstrings`_ and ``from __future__ import`` for module docstrings.
  A module could begin like this::

      #!/usr/bin/env python
      # :Author: Me
      # :Copyright: whatever

      """This is the public module docstring (``__doc__``)."""

      # More docs, in comments.
      # All comments at the beginning of a module could be
      # accumulated as docstrings.
      # We can't have another docstring here, because of the
      # ``__future__`` statement.

      from __future__ import division

  Using the JavaDoc convention of a doc-comment block beginning with
  ``##`` is useful though.  It allows doc-comments and implementation
  comments.

  .. _additional docstrings:
     ../peps/pep-0258.html#additional-docstrings

* HappyDoc uses an initial comment block to set "parser configuration
  values".  Do the same thing for Docutils, to set runtime settings on
  a per-module basis?  I.e.::

      # Docutils:setting=value

  Could be used to turn on/off function parameter comment recognition
  & other marginal features.  Could be used as a general mechanism to
  augment config files and command-line options (but which takes
  precedence?).

* Multi-file output should be divisible at arbitrary level.

* Support all forms of ``import`` statements:

  - ``import module``: listed as "module"
  - ``import module as alias``: "alias (module)"
  - ``from module import identifier``: "identifier (from module)"
  - ``from module import identifier as alias``: "alias (identifier
    from module)"
  - ``from module import *``: "all identifiers (``*``) from module"

* Have links to colorized Python source files from API docs?  And
  vice-versa: backlinks from the colorized source files to the API
  docs!

* In summaries, use the first *sentence* of a docstring if the first
  line is not followed by a blank line.


reStructuredText Parser
=======================

Also see the `... Or Not To Do?`__ list.

__ rst/alternatives.html#or-not-to-do

Bugs
----

* A container directive with ``:class:`` option gets the spurious
  class value "class".

Misc
----

* Another list problem::

      * foo
            * bar
            * baz

  This ends up as a definition list.  This is more of a usability
  issue.

* This case is probably meant to be a nested list, but it ends up as a
  list inside a block-quote without an error message::

      - foo

       - bar

  It should probably just be an error.

  The problem with this is that you don't notice easily in HTML that
  it's not a nested list but a block-quote -- there's not much of a
  visual difference.

* Treat enumerated lists that are not arabic and consist of only one
  item in a single line as ordinary paragraphs.  See
  <http://article.gmane.org/gmane.text.docutils.user/2635>.

* The citation syntax could use some improvements.  See
  <http://thread.gmane.org/gmane.text.docutils.user/2499> (and the
  sub-thread at
  <http://thread.gmane.org/gmane.text.docutils.user/2499/focus=3028>,
  and the follow-ups at
  <http://thread.gmane.org/gmane.text.docutils.user/3087>,
  <http://thread.gmane.org/gmane.text.docutils.user/3110>,
  <http://thread.gmane.org/gmane.text.docutils.user/3114>),
  <http://thread.gmane.org/gmane.text.docutils.user/2443>,
  <http://thread.gmane.org/gmane.text.docutils.user/2715>,
  <http://thread.gmane.org/gmane.text.docutils.user/3027>,
  <http://thread.gmane.org/gmane.text.docutils.user/3120>,
  <http://thread.gmane.org/gmane.text.docutils.user/3253>.

* The current list-recognition logic has too many false positives, as
  in ::

      * Aorta
      * V. cava superior
      * V. cava inferior

  Here ``V.`` is recognized as an enumerator, which leads to
  confusion.  We need to find a solution that resolves such problems
  without complicating the spec to much.

  See <http://thread.gmane.org/gmane.text.docutils.user/2524>.

* Add indirect links via citation references & footnote references.
  Example::

      `Goodger (2005)`_ is helpful.

      .. _Goodger (2005): [goodger2005]_
      .. [goodger2005] citation text

  See <http://thread.gmane.org/gmane.text.docutils.user/2499>.

* Complain about bad URI characters
  (http://article.gmane.org/gmane.text.docutils.user/2046) and
  disallow internal whitespace
  (http://article.gmane.org/gmane.text.docutils.user/2214).

* Create ``info``-level system messages for unnecessarily
  backslash-escaped characters (as in ``"\something"``, rendered as
  "something") to allow checking for errors which silently slipped
  through.

* Add (functional) tests for untested roles.

* Add test for ":figwidth: image" option of "figure" directive.  (Test
  code needs to check if PIL is available on the system.)

* Add support for CJK double-width whitespace (indentation) &
  punctuation characters (markup; e.g. double-width "*", "-", "+")?

* Add motivation sections for constructs in spec.

* Support generic hyperlink references to _`targets in other
  documents`?  Not in an HTML-centric way, though (it's trivial to say
  ``https://www.example.org/doc#name``, and useless in non-HTML
  contexts).  XLink/XPointer?  ``.. baseref::``?  See Doc-SIG
  2001-08-10.

* Implement the header row separator modification to table.el.  (Wrote
  to Takaaki Ota & the table.el mailing list on 2001-08-12, suggesting
  support for "=====" header rows.  On 2001-08-17 he replied, saying
  he'd put it on his to-do list, but "don't hold your breath".)

* Fix the parser's indentation handling to conform with the stricter
  definition in the spec.  (Explicit markup blocks should be strict or
  forgiving?)

  .. XXX What does this mean?  Can you elaborate, David?

* Make the parser modular.  Allow syntax constructs to be added or
  disabled at run-time.  Subclassing is probably not enough because it
  makes it difficult to apply multiple extensions.

* Generalize the "doctest block" construct (which is overly
  Python-centric) to other interactive sessions?  "Doctest block"
  could be renamed to "I/O block" or "interactive block", and each of
  these could also be recognized as such by the parser:

  - Shell sessions::

        $ cat example1.txt
        A block beginning with a "$ " prompt is interpreted as a shell
        session interactive block.  As with Doctest blocks, the
        interactive block ends with the first blank line, and wouldn't
        have to be indented.

  - Root shell sessions::

        # cat example2.txt
        A block beginning with a "# " prompt is interpreted as a root
        shell session (the user is or has to be logged in as root)
        interactive block.  Again, the block ends with a blank line.

  Other standard (and unambiguous) interactive session prompts could
  easily be added (such as "> " for WinDOS).

  Tony Ibbs spoke out against this idea (2002-06-14 Doc-SIG thread
  "docutils feedback").

* Add support for pragma (syntax-altering) directives.

  Some pragma directives could be local-scope unless explicitly
  specified as global/pragma using ":global:" options.

* Support whitespace in angle-bracketed standalone URLs according to
  Appendix E ("Recommendations for Delimiting URI in Context") of `RFC
  2396`_.

  .. _RFC 2396: https://www.rfc-editor.org/rfc/rfc2396.txt

* Use the vertical spacing of the source text to determine the
  corresponding vertical spacing of the output?

* [From Mark Nodine]  For cells in simple tables that comprise a
  single line, the justification can be inferred according to the
  following rules:

  1. If the text begins at the leftmost column of the cell,
     then left justification, ELSE
  2. If the text begins at the rightmost column of the cell,
     then right justification, ELSE
  3. Center justification.

  The onus is on the author to make the text unambiguous by adding
  blank columns as necessary.  There should be a parser setting to
  turn off justification-recognition (normally on would be fine).

  Decimal justification?

  All this shouldn't be done automatically.  Only when it's requested
  by the user, e.g. with something like this::

      .. table::
         :auto-indent:

         (Table goes here.)

  Otherwise it will break existing documents.

* Generate a warning or info message for paragraphs which should have
  been lists, like this one::

      1. line one
      3. line two

* Generalize the "target-notes" directive into a command-line option
  somehow?  See docutils-develop 2003-02-13.

* Allow a "::"-only paragraph (first line, actually) to introduce a
  _`literal block without a blank line`?  (Idea from Paul Moore.) ::

      ::
          This is a literal block

  Is indentation enough to make the separation between a paragraph
  which contains just a ``::`` and the literal text unambiguous?
  (There's one problem with this concession: If one wants a definition
  list item which defines the term "::", we'd have to escape it.)  It
  would only be reasonable to apply it to "::"-only paragraphs though.
  I think the blank line is visually necessary if there's text before
  the "::"::

      The text in this paragraph needs separation
      from the literal block following::
          This doesn't look right.

* Add new syntax for _`nested inline markup`?  Or extend the parser to
  parse nested inline markup somehow?  See the `collected notes
  <rst/alternatives.html#nested-inline-markup>`__.

* Drop the backticks from embedded URIs with omitted reference text?
  Should the angle brackets be kept in the output or not? ::

      <file_name>_

  Probably not worth the trouble.

* How about a syntax for alternative hyperlink behavior, such as "open
  in a new window" (as in HTML's ``<a target="_blank">``)?

  The MoinMoin wiki uses a caret ("^") at the beginning of the URL
  ("^" is not a legal URI character).  That could work for both inline
  and explicit targets::

      The `reference docs <^url>`__ may be handy.

      .. _name: ^url

  This may be too specific to HTML.  It hasn't been requested very
  often either.

* Add an option to add URI schemes at runtime.

* _`Segmented lists`::

      : segment : segment : segment
      : segment : segment : very long
        segment
      : segment : segment : segment

  The initial colon (":") can be thought of as a type of bullet

  We could even have segment titles::

      :: title  : title   : title
      : segment : segment : segment
      : segment : segment : segment

  This would correspond well to DocBook's SegmentedList.  Output could
  be tabular or "name: value" pairs, as described in DocBook's docs.

* Enable grid _`tables inside XML comments`, where "``--``" ends comments.

  Implementation possibilities:

  1. Make the table syntax characters into "table" directive options.
     This is the most flexible but most difficult, and we probably
     don't need that much flexibility.

  2. Substitute "~" for "-" with a specialized directive option
     (e.g. ":tildes:").

  3. Make the standard table syntax recognize "~" as well as "-", even
     without a directive option.  Individual tables would have to be
     internally consistent.

  4. Allow Unicode box characters for table markup
     (`feature request [6]`_)

  Directive options are preferable to configuration settings, because
  tables are document-specific.  A pragma directive would be another
  approach, to set the syntax once for a whole document.

  Unicode box character markup would kill two birds with one stone.

  In the meantime, the list-table_ directive is a good replacement for
  grid tables inside XML comments.

  .. _feature request [6]:
      https://sourceforge.net/p/docutils/feature-requests/6
  .. _list-table: ../ref/rst/directives.html#list-table


* Generalize docinfo contents (bibliographic fields): remove specific
  fields, and have only a single generic "field"?

* _`Line numbers` and "source" in system messages:

  - Add "source" and "line" keyword arguments to all Reporter calls?
    This would require passing source/line arguments along all
    intermediate functions (where currently only `line` is used).

    Or rather specify "line" only if actually needed?

    Currently, `document.reporter` uses a state machine instance to
    determine the "source" and "line" info from
    `statemachine.input_lines` if not given explicitly. Except for
    special cases, the "line" argument is not needed because,
    `document.statemachine` keeps record of the current line number.

  - For system messages generated after the parsing is completed (i.e. by
    transforms or the writer) "line" info must be present in the doctree
    elements.

    Elements' .line assignments should be checked.  (Assign to .source
    too?  Add a set_info method?  To what?)

    The "source" (and line number in the source) can either be added
    explicitly to the elements or determined from the “raw” line
    number by `document.statemachine.get_source_and_line`.

  - Some line numbers in elements are not being set properly
    (explicitly), just implicitly/automatically.  See rev. 1.74 of
    docutils/parsers/rst/states.py for an example of how to set.

  - The line numbers of definition list items are wrong::

        $ rst2pseudoxml.py --expose-internal-attribute line
        1
          2
          3

        5
          6
          7

        <document source="<stdin>">
            <definition_list>
                <definition_list_item internal:line="3">
                    <term>
                        1
                    <definition>
                        <paragraph internal:line="2">
                            2
                            3
                <definition_list_item internal:line="6">
                    <term>
                        5
                    <definition>
                        <paragraph internal:line="6">
                            6
                            7

* .. _none source:

  Quite a few nodes are getting a "None" source attribute as well.  In
  particular, see the bodies of definition lists.


Adaptable file extensions
-------------------------

Questions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Should Docutils support adaptable file extensions in hyperlinks?

  In the rST source, sister documents are ".txt" files. If we're
  generating HTML, then ".html" is appropriate; if PDF, then ".pdf";
  etc.

Handle documents only, or objects (images, etc.) also?

  Different output formats support different sets of image formats (HTML
  supports ".svg" but not ".pdf", pdfLaTeX supports ".pdf" but not ".svg",
  LaTeX supports only ".eps").

  This is less urgent 2020 than 2004, as `pdflatex` and `lualatex` are
  now standard and support most image formats. Also, a wrapper like
  `rubber`__ that provides on-the-fly image conversion depends on the
  "wrong" extension in the LaTeX source.

  __ https://pypi.org/project/rubber/

At what point should the extensions be substituted?

  Transforms_:
    Fits well in the `Reader → Transformer → Writer`__ processing framework.

    * Filename/URL extension replacement can be done walking over the
      Document tree transforming the document tree from a valid state
      to another valid state.

    * Writer-specific configuration is still possible in the
      respective sections of the configuration_ file.

    __ ../peps/pep-0258.html#id24

  Pre- or post-processing:
    Can be implemented independent of Docutils -- keeps Docutils simple.

      ... those who need more sophisticated filename extension
      tweaking can simply use regular expressions, which isn't too
      difficult due to the determinability of the writers.  So there
      is no need to add a complex filename-extension-handling feature
      to Docutils.

      --- `Lea Wiemann in docutils-users 2004-06-04`__

  __ https://sourceforge.net/p/docutils/mailman/message/6918089/


Proposals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How about using ".*" to indicate "choose the most appropriate filename
extension"?  For example::

    .. _Another Document: another.*

* My point about using ``.*`` is that any other mechanism inside reST
  leads to too many ambiguities in reading reST documents; at least
  with ``.*`` it's clear that some kind of substitution is going on.

  --- Aahz

* What is to be done for output formats that don't *have* hyperlinks?
  For example, LaTeX targeted at print.  Hyperlinks may be "called
  out", as footnotes with explicit URLs.  (Don't convert the links.)

  But then there's also LaTeX targeted at PDFs, which *can* have
  links.  Perhaps a runtime setting for "*" could explicitly provide
  the extension, defaulting to the output file's extension.

* If this handles images also, how to differentiate between document
  and image links?  Element context (within "image")?  Which image
  extension to use for which document format? For HTML output, there
  is no reliable way of determining which extension to use (svg, png,
  jpg, jpeg, gif, ...).

  Should the system check for existing files?  No, not practical (the
  image files may be not available when the document is processed to HTML).

  Mailing list threads: `Images in both HTML and LaTeX`__ (especially
  `this summary of Lea's objections`__).

  __ https://sourceforge.net/p/docutils/mailman/docutils-users/thread/40BAA4B7.5020801%40python.org/#msg6918066
  __ https://sourceforge.net/p/docutils/mailman/message/6918089/

Chris Liechti suggests a new ``:link:`` role in `more-universal
links?`__::

    .. role:: link(rewrite)
       :transform: .txt|.html

  and then to use it::

    for more information see :link:`README.txt`

  it would be useful if it supported an additional option
  ``:format: html`` so that separate rules for each format can be
  defined. (like the "raw" role)

__ https://sourceforge.net/p/docutils/mailman/message/6919484/


Idea from Jim Fulton: an external lookup table of targets:

    I would like to specify the extension (e.g. .txt) [in the
    source, rather than ``filename.*``], but tell the converter to
    change references to the files anticipating that the files will
    be converted too.

    For example::

      .. _Another Document: another.txt

      rst2html.py --convert-links "another.txt bar.txt" foo.txt

    That is, name the files for which extensions should be converted.

    Note that I want to refer to original files in the original text
    (another.txt rather than another.*) because I want the
    unconverted text to stand on its own.

    Note that in most cases, people will be able to use globs::

      rst2html.py --convert-link-extensions-for "`echo *.txt`" foo.txt

    It might be nice to be able to use multiple arguments, as in::

      rst2html.py --convert-link-extensions-for *.txt -- foo.txt

    > Handle documents only, or objects (images, etc.) also?

    No, documents only, but there really is no need for guesswork.
    Just get the file names as command-line arguments.  EIBTI
    [explicit is better than implicit].

In `Patch #169`__ `Hyperlink extension rewriting`, John L. Clark
suggests command line options that map to-be-changed file extensions, e.g.::

     rst2html --map-extension rst html --map-extension jpg png \
        input-filename.rst

__ https://sourceforge.net/p/docutils/patches/169/

  Specifying the mapping as regular expressions would make this
  approach more generic and easier to implement (use ``re.replace``
  and refer to the "re" module's documentation instead of coding and
  documenting a home-grown extraction and mapping procedure).


Math Markup
-----------

Since Docutils 0.8, a "math" role and directive using LaTeX math
syntax as input format is part of reStructuredText.

Open issues:

* Use a "Transform" for math format conversions as extensively discussed in
  the "math directive issues" thread in May 2008
  (http://osdir.com/ml/text.docutils.devel/2008-05/threads.html)?

* Generic `math-output setting`_ (currently specific to HTML).
  (List of math-output preferences?)

* Try to be compatible with `Math support in Sphinx`_?

  * The ``:label:`` option selects a label for the equation, by which it
    can be cross-referenced, and causes an equation number to be issued.
    In Docutils, the option ``:name:`` sets the label.
    Equation numbering is not implemented yet.

  * Option ``:nowrap:`` prevents wrapping of the given math in a
    math environment (you have to specify the math environment in the
    content).

  .. _Math support in Sphinx: http://sphinx.pocoo.org/ext/math.html

* Equation numbering and references. (see the section on
  `object numbering and object references` for equations,
  formal tables, and images.)

.. _math-output setting: ../user/config.html#math-output


alternative input formats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use a directive option to specify an alternative input format, e.g. (but not
limited to):

MathML_
  Not for hand-written code but maybe useful when pasted in (or included
  from a file)

  For an overview of MathML implementations and tests, see, e.g.,
  the `mathweb wiki`_ or the `ConTeXT MathML page`_.

  .. _MathML: https://www.w3.org/TR/MathML2/
  .. _mathweb wiki: http://www.mathweb.org/wiki/MathML
  .. _ConTeXT MathML page: http://wiki.contextgarden.net/MathML

  A MathML to LaTeX XSLT sheet:
  https://github.com/davidcarlisle/web-xslt/tree/master/pmml2tex


ASCIIMath_
  Simple, ASCII based math input language (see also `ASCIIMath tutorial`_).

  * The Python module ASCIIMathML_ translates a string with ASCIIMath into a
    MathML tree. Used, e.g., by MultiMarkdown__.

    A more comprehensive implementation is ASCIIMathPython_ by
    Paul Trembley (also used in his sandbox projects).

  * For conversion to LaTeX, there is

    - a JavaScript script at
      http://dlippman.imathas.com/asciimathtex/ASCIIMath2TeX.js

    - The javascript `asciimath-to-latex` AsciiMath to LaTex converter at
      the node package manager
      https://www.npmjs.com/package/asciimath-to-latex
      and at GitHub https://github.com/tylerlong/asciimath-to-latex

    - a javascript and a PHP converter script at GitHub
      https://github.com/asciimath/asciimathml/tree/master/asciimath-based

  .. _ASCIIMath: http://www1.chapman.edu/~jipsen/mathml/asciimath.html
  .. _ASCIIMath tutorial:
     http://www.wjagray.co.uk/maths/ASCIIMathTutorial.html
  .. _ASCIIMathML: http://pypi.python.org/pypi/asciimathml/
  .. _ASCIIMathPython: https://github.com/paulhtremblay/asciimathml
  __ http://fletcherpenney.net/multimarkdown/

`Unicode Nearly Plain Text Encoding of Mathematics`_
   format for lightly marked-up representation of mathematical
   expressions in Unicode.

   (Unicode Technical Note. Sole responsibility for its contents rests
   with the author(s). Publication does not imply any endorsement by
   the Unicode Consortium.)

   .. _Unicode Nearly Plain Text Encoding of Mathematics:
      https://www.unicode.org/notes/tn28/

itex
  See `the culmination of a relevant discussion in 2003
  <http://article.gmane.org/gmane.text.docutils.user/118>`__.



LaTeX output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Which equation environments should be supported by the math directive?

* one line:

  + numbered: `equation`
  + unnumbered: `equation*`

* multiline (test for ``\\`` outside of a nested environment
  (e.g. `array` or `cases`)

  + numbered: `align` (number every line)

    (To give one common number to all lines, put them in a `split`
    environment. Docutils then places it in an `equation` environment.)

  + unnumbered: `align*`

  + Sphinx math also supports `gather` (checking for blank lines in
    the content). Docutils puts content blocks separated by blank
    lines in separate math-block doctree nodes. (The only difference of
    `gather` to two consecutive "normal" environments seems to be that
    page-breaks between the two are prevented.)

See http://www.math.uiuc.edu/~hildebr/tex/displays.html.


HTML output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is no native math support in HTML.
For supported math output variants see the `math-output setting`_.
Add more/better alternatives?

MathML_
  Converters from LaTeX to MathML include

  * TtM_ (C), ``--math-output=MathML ttm``, undocumented, may be removed.

    No "matrix", "align" and  "cases" environments.

  * MathToWeb_ (Java)
  * TeX4ht_ (TeX based)
  * itex_ (also `used in Abiword`__)
  * `Steve’s LATEX-to-MathML translator`_
    ('mini-language', javascript, Python)
  * `MathJax for Node`_

  * Write a new converter? E.g. based on:

    * a generic tokenizer (see e.g. a `latex-codec recipe`_,
      `updated latex-codec`_, )
    * the Unicode-Char <-> LaTeX mappings database unimathsymbols_

  __ http://msevior.livejournal.com/26377.html
  .. _MathML: https://www.w3.org/TR/MathML2/
  .. _ttm: http://hutchinson.belmont.ma.us/tth/mml/
  .. _TeX4ht: http://www.tug.org/applications/tex4ht/mn.html
  .. _MathToWeb:  http://www.mathtoweb.com/
  .. _itex: http://golem.ph.utexas.edu/~distler/blog/itex2MMLcommands.html
  .. _Steve’s LATEX-to-MathML translator:
     http://www.gold-saucer.org/mathml/greasemonkey/dist/display-latex
  .. _latex-codec recipe:
     http://code.activestate.com/recipes/252124-latex-codec/
  .. _updated latex-codec:
     http://mirror.ctan.org/biblio/bibtex/utils/mab2bib/latex.py
  .. _unimathsymbols: http://milde.users.sourceforge.net/LUCR/Math/
  .. _MathJax for Node: https://github.com/mathjax/MathJax-node

.. URL seems down:
   .. _itex: http://pear.math.pitt.edu/mathzilla/itex2mmlItex.html


HTML/CSS
  format math in standard HTML enhanced by CSS rules
  (Overview__, `Examples and experiments`__).
  The ``math-output=html`` option uses the converter from eLyXer_
  (included with Docutils).

  Alternatives: LaTeX-math to HTML/CSS converters include

  * TtH_ (C)
  * Hevea_ (Objective Caml)
  * `MathJax for Node`_
  * KaTeX_

  __ http://www.cs.tut.fi/~jkorpela/math/
  __ http://www.zipcon.net/~swhite/docs/math/math.html
  .. _elyxer: http://elyxer.nongnu.org/
  .. _TtH: ttp://hutchinson.belmont.ma.us/tth/index.html
  .. _Hevea: http://para.inria.fr/~maranget/hevea/
  .. _KaTeX: https://katex.org

images
  (PNG or SVG) like e.g. Wikipedia.

  * dvisvgm_
  * the pure-python MathML->SVG converter SVGMath_)
  * `MathJax for Node`_

  .. _dvisvgm: http://dvisvgm.sourceforge.net/
  .. _SVGMath: http://www.grigoriev.ru/svgmath/


client side JavaScript conversion
  Use TeX notation in the web page and JavaScript in the displaying browser.
  (implemented as `math-output setting`_ "mathjax").

  * jqMath_ (faster and lighter than MathJax_)

  .. _MathJax: http://www.mathjax.org/
  .. _jqMath: http://mathscribe.com/author/jqmath.html

OpenOffice output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* The `OpenDocument standard`_ version 1.1 says:

    Mathematical content is represented by MathML 2.0

  However, putting MathML into an ODP file seems tricky as these
  (maybe outdated) links suppose:
  http://idippedut.dk/post/2008/01/25/Do-your-math-ODF-and-MathML.aspx
  http://idippedut.dk/post/2008/03/03/Now-I-get-it-ODF-and-MathML.aspx

  .. _OpenDocument standard:
    http://www.oasis-open.org/standards#opendocumentv1.1

* OOoLaTeX__:  "a set of macros designed to bring the power of LaTeX
  into OpenOffice."

  __ http://ooolatex.sourceforge.net/


Directives
----------

Directives below are often referred to as "module.directive", the
directive function.  The "module." is not part of the directive name
when used in a document.

* Allow for field lists in list tables.  See
  <http://thread.gmane.org/gmane.text.docutils.devel/3392>.

* .. _unify tables:

  Unify table implementations and unify options of table directives
  (http://article.gmane.org/gmane.text.docutils.user/1857).

* Allow directives to be added at run-time?

* Use the language module for directive option names?

* Add "substitution_only" and "substitution_ok" function attributes,
  and automate context checking?

* Implement options or features on existing directives:

  - All directives that produce titled elements should grow implicit
    reference names based on the titles.

  - Allow the _`:trim:` option for all directives when they occur in a
    substitution definition, not only the unicode_ directive.

    .. _unicode: ../ref/rst/directives.html#unicode-character-codes

  - Add the "class" option to the unicode_ directive.  For example, you
    might want to get characters or strings with borders around them.

  - _`images.figure`: "title" and "number", to indicate a formal
    figure?

  - _`parts.sectnum`: "local"?, "refnum"

    A "local" option could enable numbering for sections from a
    certain point down, and sections in the rest of the document are
    not numbered.  For example, a reference section of a manual might
    be numbered, but not the rest.  OTOH, an all-or-nothing approach
    would probably be enough.

    The "sectnum" directive should be usable multiple times in a
    single document.  For example, in a long document with "chapter"
    and "appendix" sections, there could be a second "sectnum" before
    the first appendix, changing the sequence used (from 1,2,3... to
    A,B,C...).  This is where the "local" concept comes in.  This part
    of the implementation can be left for later.

    A "refnum" option (better name?) would insert reference names
    (targets) consisting of the reference number.  Then a URL could be
    of the form ``http://host/document.html#2.5`` (or "2-5"?).  Allow
    internal references by number?  Allow name-based *and*
    number-based ids at the same time, or only one or the other (which
    would the table of contents use)?  Usage issue: altering the
    section structure of a document could render hyperlinks invalid.

  - _`parts.contents`: Add a "suppress" or "prune" option?  It would
    suppress contents display for sections in a branch from that point
    down.  Or a new directive, like "prune-contents"?

    Add an option to include topics in the TOC?  Another for sidebars?
    The "topic" directive could have a "contents" option, or the
    "contents" directive" could have an "include-topics" option.  See
    docutils-develop 2003-01-29.

  - _`parts.header` & _`parts.footer`: Support multiple, named headers
    & footers?  For example, separate headers & footers for odd, even,
    and the first page of a document.

    This may be too specific to output formats which have a notion of
    "pages".

  - _`misc.class`:

    - Add a ``:parent:`` option for setting the parent's class
      (http://article.gmane.org/gmane.text.docutils.devel/3165).

  - _`misc.include`:

    - Option to label lines?

    - How about an environment variable, say RSTINCLUDEPATH or
      RSTPATH, for standard includes (as in ``.. include:: <name>``)?
      This could be combined with a setting/option to allow
      user-defined include directories.

    - Add support for inclusion by URL? ::

          .. include::
             :url: https://www.example.org/inclusion.txt

    - Strip blank lines from begin and end of a literal included file or
      file section. This would correspond to the way a literal block is
      handled.

      As nodes.literal_block expects (and we have) the text as a string
      (rather than a list of lines), using a regexp seems the way.

  - _`misc.raw`: add a "destination" option to the "raw" directive? ::

        .. raw:: html
           :destination: head

           <link ...>

    It needs thought & discussion though, to come up with a consistent
    set of destination labels and consistent behavior.

    And placing HTML code inside the <head> element of an HTML
    document is rather the job of a templating system.

  - _`body.sidebar`: Allow internal section structure?  Adornment
    styles would be independent of the main document.

    That is really complicated, however, and the document model
    greatly benefits from its simplicity.

* Implement directives.  Each of the list items below begins with an
  identifier of the form, "module_name.directive_function_name".  The
  directive name itself could be the same as the
  directive_function_name, or it could differ.

  - _`html.imagemap`

    It has the disadvantage that it's only easily implementable for
    HTML, so it's specific to one output format.

    (For non-HTML writers, the imagemap would have to be replaced with
    the image only.)

  - _`parts.endnotes` (or "footnotes"): See `Footnote & Citation Gathering`_.

  - _`parts.citations`: See `Footnote & Citation Gathering`_.

  - _`misc.language`: Specify (= change) the language of a document at
    parse time?

    * The misc.settings_ directive suggested below offers a more generic
      approach.

    * The language of document parts can be indicated by the "special class
      value" ``"language-"`` + `BCP 47`_ language code. Class arguments to
      the title are attached to the document's base node - hence titled
      documents can be given a different language at parse time. However,
      "language by class attribute" does not change parsing (localized
      directives etc.), only supporting writers.

    .. _BCP 47: https://www.rfc-editor.org/rfc/bcp/bcp47.txt


  - _`misc.settings`: Set any(?) Docutils runtime setting from within
    a document?  Needs much thought and discussion.

    Security concerns need to be taken into account (it shouldn't be
    possible to enable ``file_insertion_enabled`` from within a
    document), and settings that only would have taken effect before
    the directive (like ``tab-width``) shouldn't be accessible either.

    See this sub-thread:
    <http://thread.gmane.org/gmane.text.docutils.user/3620/focus=3649>

  - _`misc.gather`: Gather (move, or copy) all instances of a specific
    element.  A generalization of the `Footnote & Citation Gathering`_
    ideas.

  - Add a custom "directive" directive, equivalent to "role"?  For
    example::

        .. directive:: incr

           .. class:: incremental

        .. incr::

        "``.. incr::``" above is equivalent to "``.. class:: incremental``".

    Another example::

        .. directive:: printed-links

           .. topic:: Links
              :class: print-block

              .. target-notes::
                 :class: print-inline

    This acts like macros.  The directive contents will have to be
    evaluated when referenced, not when defined.

    * Needs a better name?  "Macro", "substitution"?
    * What to do with directive arguments & options when the
      macro/directive is referenced?

  - Make the meaning of block quotes overridable?  Only a 1-shot
    though; doesn't solve the general problem.

  - _`conditional directives`:

    .. note:: See also the implementation in Sphinx_.

    Docutils already has the ability to say "use this content for
    Writer X" via the "raw" directive. It also does have the ability
    to say "use this content for any Writer other than X" via the
    "strip-elements with class" config value.  However, using "raw"
    input just to select a special writer is inconvenient in many
    cases.
    It wouldn't be difficult to get more straightforward support, though.

    My first idea would be to add a set of conditional directives.
    Let's call them "writer-is" and "writer-is-not" for discussion
    purposes (don't worry about implementation details).  We might
    have::

         .. writer-is:: text-only

            ::

                +----------+
                |   SNMP   |
                +----------+
                |   UDP    |
                +----------+
                |    IP    |
                +----------+
                | Ethernet |
                +----------+

         .. writer-is:: pdf

            .. figure:: protocol_stack.eps

         .. writer-is-not:: text-only pdf

            .. figure:: protocol_stack.png

    This could be an interface to the Filter transform
    (docutils.transforms.components.Filter).

    The ideas in the `adaptable file extensions`_ section above may
    also be applicable here.

    SVG's "switch" statement may provide inspiration.

    Here's an example of a directive that could produce multiple
    outputs (*both* raw troff pass-through *and* a GIF, for example)
    and allow the Writer to select. ::

        .. eqn::

           .EQ
           delim %%
           .EN
           %sum from i=o to inf c sup i~=~lim from {m -> inf}
           sum from i=0 to m sup i%
           .EQ
           delim off
           .EN

  - _`body.example`: Examples; suggested by Simon Hefti.  Semantics as
    per Docbook's "example"; admonition-style, numbered, reference,
    with a caption/title.

  - _`body.index`: Index targets.

    See `Index Entries & Indexes
    <./rst/alternatives.html#index-entries-indexes>`__.

  - _`body.literal`: Literal block, possibly "formal" (see `object
    numbering and object references`_ above).  Possible options:

    - "highlight" a range of lines

    - include only a specified range of lines

    - "number" or "line-numbers"? (since 0.9 available with "code" directive)

    - "styled" could indicate that the directive should check for
      style comments at the end of lines to indicate styling or
      markup.

      Specific derivatives (i.e., a "python-interactive" directive)
      could interpret style based on cues, like the ">>> " prompt and
      "input()"/"raw_input()" calls.

    See docutils-users 2003-03-03.

  - _`body.listing`: Code listing with title (to be numbered
    eventually), equivalent of "figure" and "table" directives.

  - _`pysource.usage`: Extract a usage message from the program,
    either by running it at the command line with a ``--help`` option
    or through an exposed API.  [Suggestion for Optik.]

  - _`body.float`: Generic float that can be used for figures, tables,
    code listings, flowcharts, ...

    There is a Sphinx extension by Ignacio Fernández Galván <jellby@gmail.com>

       I implemented something for generic floats in sphinx, and submitted a
       pull request that is still waiting::

        .. float::
           :type: figure
           :caption: My caption

      https://github.com/sphinx-doc/sphinx/pull/1858


Interpreted Text
----------------

Interpreted text is entirely a reStructuredText markup construct, a
way to get around built-in limitations of the medium.  Some roles are
intended to introduce new doctree elements, such as "title-reference".
Others are merely convenience features, like "RFC".

All supported interpreted text roles must already be known to the
Parser when they are encountered in a document.  Whether pre-defined
in core/client code, or in the document, doesn't matter; the roles
just need to have already been declared.  Adding a new role may
involve adding a new element to the DTD and may require extensive
support, therefore such additions should be well thought-out.  There
should be a limited number of roles.

The only place where no limit is placed on variation is at the start,
at the Reader/Parser interface.  Transforms are inserted by the Reader
into the Transformer's queue, where non-standard elements are
converted.  Once past the Transformer, no variation from the standard
Docutils doctree is possible.

An example is the Python Source Reader, which will use interpreted
text extensively.  The default role will be "Python identifier", which
will be further interpreted by namespace context into <class>,
<method>, <module>, <attribute>, etc. elements (see pysource.dtd),
which will be transformed into standard hyperlink references, which
will be processed by the various Writers.  No Writer will need to have
any knowledge of the Python-Reader origin of these elements.

* Add explicit interpreted text roles for the rest of the implicit
  inline markup constructs: named-reference, anonymous-reference,
  footnote-reference, citation-reference, substitution-reference,
  target, uri-reference (& synonyms).

* Add directives for each role as well?  This would allow indirect
  nested markup::

      This text contains |nested inline markup|.

      .. |nested inline markup| emphasis::

         nested ``inline`` markup

* Implement roles:

  - "_`raw-wrapped`" (or "_`raw-wrap`"): Base role to wrap raw text
    around role contents.

    For example, the following reStructuredText source ... ::

        .. role:: red(raw-formatting)
           :prefix:
               :html: <font color="red">
               :latex: {\color{red}
           :suffix:
               :html: </font>
               :latex: }

        colored :red:`text`

    ... will yield the following document fragment::

        <paragraph>
            colored
            <inline classes="red">
                <raw format="html">
                    <font color="red">
                <raw format="latex">
                    {\color{red}
                <inline classes="red">
                    text
                <raw format="html">
                    </font>
                <raw format="latex">
                    }

    Possibly without the intermediate "inline" node.

  - _`"acronym" and "abbreviation"`: Associate the full text with a
    short form.  Jason Diamond's description:

        I want to translate ```reST`:acronym:`` into ``<acronym
        title='reStructuredText'>reST</acronym>``.  The value of the
        title attribute has to be defined out-of-band since you can't
        parameterize interpreted text.  Right now I have them in a
        separate file but I'm experimenting with creating a directive
        that will use some form of reST syntax to let you define them.

    Should Docutils complain about undefined acronyms or
    abbreviations?

    What to do if there are multiple definitions?  How to
    differentiate between CSS (Content Scrambling System) and CSS
    (Cascading Style Sheets) in a single document?  David Priest
    responds,

        The short answer is: you don't.  Anyone who did such a thing
        would be writing very poor documentation indeed.  (Though I
        note that `somewhere else in the docs`__, there's mention of
        allowing replacement text to be associated with the
        abbreviation.  That takes care of the duplicate
        acronyms/abbreviations problem, though a writer would be
        foolish to ever need it.)

        __ `inline parameter syntax`_

    How to define the full text?  Possibilities:

    1. With a directive and a definition list? ::

           .. acronyms::

              reST
                  reStructuredText
              DPS
                  Docstring Processing System

       Would this list remain in the document as a glossary, or would
       it simply build an internal lookup table?  A "glossary"
       directive could be used to make the intention clear.
       Acronyms/abbreviations and glossaries could work together.

       Then again, a glossary could be formed by gathering individual
       definitions from around the document.

    2. Some kind of `inline parameter syntax`_? ::

           `reST <reStructuredText>`:acronym: is `WYSIWYG <what you
           see is what you get>`:acronym: plaintext markup.

       .. _inline parameter syntax:
          rst/alternatives.html#parameterized-interpreted-text

    3. A combination of 1 & 2?

       The multiple definitions issue could be handled by establishing
       rules of priority.  For example, directive-based lookup tables
       have highest priority, followed by the first inline definition.
       Multiple definitions in directive-based lookup tables would
       trigger warnings, similar to the rules of `implicit hyperlink
       targets`__.

       __ ../ref/rst/restructuredtext.html#implicit-hyperlink-targets

    4. Using substitutions? ::

           .. |reST| acronym:: reST
              :text: reStructuredText

    What do we do for other formats than HTML which do not support
    tool tips?  Put the full text in parentheses?

  - "figure", "table", "listing", "chapter", "page", etc: See `object
    numbering and object references`_ above.

  - "glossary-term": This would establish a link to a glossary.  It
    would require an associated "glossary-entry" directive, whose
    contents could be a definition list::

        .. glossary-entry::

           term1
               definition1
           term2
               definition2

    This would allow entries to be defined anywhere in the document,
    and collected (via a "glossary" directive perhaps) at one point.


Doctree pruning
---------------

[DG 2017-01-02: These are not definitive to-dos, just one developer's
opinion. Added 2009-10-13 by Günter Milde, in r6178.]
[Updated by GM 2017-02-04]

The number of doctree nodes can be reduced by "normalizing" some related
nodes. This makes the document model and the writers somewhat simpler.

* The "doctest" element can be replaced by literal blocks with a class
  attribute (similar to the "code" directive output).
  The syntax shall be left in reST.

  [DG 2017-01-02:] +0.

  Discussion
    The syntax could be left in reST (for a set period of time?).

    [DG 2017-01-02:] The syntax must be left in reST, practically
    forever. Removing it would introduce a huge backwards
    incompatibility. Any syntax removal must be preceded by a thorough
    review and planning, including a deprecation warning process. My
    opinion: it's not worth it.

* "Normalize" special admonitions (note, hint, warning, ...) during parsing
  (similar to _`transforms.writer_aux.Admonitions`). There is no need to
  keep them as distinct elements in the doctree specification.

  [DG 2017-01-02:] -1: <note>{body}</> is much more concise and
  expressive than <admonition><title>Note</>{body}</>, and the title
  translation can be put off until much later in the process.

  [GM 2017-02-04]:

  -0 for <admonition class=note><title>Note</>... instead of <note>:
     a document is rarely printed/used as doctree or XML.

  +1 reduce the complexity of the doctree
     (there is no 1:1 rST syntax element <-> doctree node mapping anyway).

  +2 every writer needs 9 visit_*/depart_* method pairs to handle the 9
     subtypes of an admonition, i.e. we could but also remove 36 redundant
     methods (HTML, LaTeX, Manpage, ODF).

  -1 the most unfortunately named of these directives will survive. [#]_

     .. [#] with "biblical touch" and hard to translate:

            :admonition: | Ermahnung; Verweis; Warnung; Rüge
                         | (exhortation; censure; warning; reprimand, rebuke)


  Keep the special admonition directives in reStructuredText syntax.

  [DG 2017-01-02:] We must definitely keep the syntax. Removing it
  would introduce a huge backwards incompatibility.


Unimplemented Transforms
========================

* _`Footnote & Citation Gathering`

  Collect and move footnotes & citations to the end of a document or the
  place of a "footnotes" or "citations" directive
  (see `<./ref/rst/directives.html>_`)

  Footnotes:
    Collect all footnotes that are referenced in the document before the
    directive (and after an eventually preceding ``.. footnotes::``
    directive) and insert at this place.

    Allows "endnotes" at a configurable place.

  Citations:
    Collect citations that are referenced ...

    Citations can be:

    a) defined in the document as citation elements

    b) auto-generated from entries in a bibliographic database.

       + based on bibstuff_?
       + also have a look at

         * CrossTeX_, a backwards-compatible, improved bibtex
           re-implementation in Python (including HTML export).
           (development stalled since 2 years)

         * Pybtex_,a drop-in replacement for BibTeX written in Python.

           * BibTeX styles & (experimental) pythonic style API.
           * Database in BibTeX, BibTeXML and YAML formats.
           * full Unicode support.
           * Write to TeX, HTML and plain text.

         * `Zotero plain <http://e6h.org/%7Eegh/hg/zotero-plain/>`__
           supports Zotero databases and CSL_ styles with Docutils with an
           ``xcite`` role.

         * `sphinxcontrib-bibtex`_ Sphinx extension with "bibliography"
           directive and "cite" role supporting BibTeX databases.

         * `Modified rst2html
           <http://www.loria.fr/~rougier/coding/article/rst2html.py>`__ by
           Nicolas Rougier.


    * Automatically insert a "References" heading?

.. _CrossTeX: http://www.cs.cornell.edu/people/egs/crosstex/
.. _Pybtex:   http://pybtex.sourceforge.net/
.. _CSL: http://www.citationstyles.org/
.. _sphinxcontrib-bibtex: http://sphinxcontrib-bibtex.readthedocs.org/

* _`Reference Merging`

  When merging two or more subdocuments (such as docstrings),
  conflicting references may need to be resolved.  There may be:

  * duplicate reference and/or substitution names that need to be made
    unique; and/or
  * duplicate footnote numbers that need to be renumbered.

  Should this be done before or after reference-resolving transforms
  are applied?  What about references from within one subdocument to
  inside another?

* _`Document Splitting`

  If the processed document is written to multiple files (possibly in
  a directory tree), it will need to be split up.  Internal references
  will have to be adjusted.

  (HTML only?  Initially, yes.  Eventually, anything should be
  splittable.)

  Ideas:

  - Insert a "destination" attribute into the root element of each
    split-out document, containing the path/filename.  The Output
    object or Writer will recognize this attribute and split out the
    files accordingly.  Must allow for common headers & footers,
    prev/next, breadcrumbs, etc.

  - Transform a single-root document into a document containing
    multiple subdocuments, recursively.  The content model of the
    "document" element would have to change to::

        <!ELEMENT document
            ( (title, subtitle?)?,
              decoration?,
              (docinfo, transition?)?,
              %structure.model;,
              document* )>

    (I.e., add the last line -- 0 or more document elements.)

    Let's look at the case of hierarchical (directories and files)
    HTML output.  Each document element containing further document
    elements would correspond to a directory (with an index.html file
    for the content preceding the subdocuments).  Each document
    element containing no subdocuments (i.e., structure model elements
    only) corresponds to a concrete file with no directory.

    The natural transform would be to map sections to subdocuments,
    but possibly only a given number of levels deep.

* _`Navigation`

  If a document is split up, each segment will need navigation links:
  parent, children (small TOC), previous (preorder), next (preorder).
  Part of `Document Splitting`_?

* _`List of System Messages`

  The ``system_message`` elements are inserted into the document tree,
  adjacent to the problems themselves where possible.  Some (those
  generated post-parse) are kept until later, in
  ``document.messages``, and added as a special final section,
  "Docutils System Messages".

  Docutils could be made to generate hyperlinks to all known
  system_messages and add them to the document, perhaps to the end of
  the "Docutils System Messages" section.

  Fred L. Drake, Jr. wrote:

      I'd like to propose that both parse- and transformation-time
      messages are included in the "Docutils System Messages" section.
      If there are no objections, I can make the change.

  The advantage of the current way of doing things is that parse-time
  system messages don't require a transform; they're already in the
  document.  This is valuable for testing (unit tests,
  tools/dev/quicktest.py).  So if we do decide to make a change, I think
  the insertion of parse-time system messages ought to remain as-is
  and the Messages transform ought to move all parse-time system
  messages (remove from their originally inserted positions, insert in
  System Messages section).

* _`Index Generation`


HTML Writer
===========

* Make the _`list compacting` logic more generic: For example, allow
  for literal blocks or line blocks inside of compact list items.

  This is not implementable as long as list compacting is done by
  omitting ``<p>`` tags.  List compacting would need to be done by
  adjusting CSS margins instead.

  :2015-04-02: The new html writer no longer strips <p> tags but adds the
               class value ``simple`` to the list.
               Formatting is done by CSS --- configurable by a custom style
               sheet.

               Auto-compactization can be overridden by the ``open`` vs.
               ``compact`` class arguments.

* Idea for field-list rendering: hanging indent::

      Field name (bold): First paragraph of field body begins
          with the field name inline.

          If the first item of a field body is not a paragraph,
          it would begin on the following line.

  :2015-04-02: The new html writer writes field-lists as definition lists
               with class ``field-list``.
               Formatting is done by CSS --- configurable by a custom style
               sheet. The default style sheet has some examples, including a
               run-in field-list style.

* Add more support for <link> elements, especially for navigation
  bars.

  The framework does not have a notion of document relationships, so
  probably raw.destination_ should be used.

  We'll have framework support for document relationships when support
  for `multiple output files`_ is added.  The HTML writer could
  automatically generate <link> elements then.

  .. _raw.destination: misc.raw_

* Base list compaction on the spacing of source list?  Would require
  parser support.  (Idea: fantasai, 16 Dec 2002, doc-sig.)

* Add a tool tip ("title" attribute?) to footnote back-links
  identifying them as such.  Text in Docutils language module.


PEP/HTML Writer
===============

* Remove the generic style information (duplicated from html4css1.css)
  from pep.css to avoid redundancy.

  Set ``stylesheet-path`` to "html4css.css,pep.css" and the
  ``stylesheet-dirs`` accordingly instead. (See the xhtml11 writer for an
  example.)


S5/HTML Writer
==============

* Add a way to begin an untitled slide.

* Add a way to begin a new slide, continuation, using the same title
  as the previous slide?  (Unnecessary?)  You need that if you have a
  lot of items in one section which don't fit on one slide.

  Maybe either this item or the previous one can be realized using
  transitions.

* Have a timeout on incremental items, so the colour goes away after 1
  second.

* Add an empty, black last slide (optionally).  Currently the handling
  of the last slide is not very nice, it re-cycles through the
  incremental items on the last slide if you hit space-bar after the
  last item.

* Add a command-line option to disable advance-on-click.

* Add a speaker's master document, which would contain a small version
  of the slide text with speaker's notes interspersed.  The master
  document could use ``target="whatever"`` to direct links to a
  separate window on a second monitor (e.g., a projector).

  .. Note:: This item and the following items are partially
     accomplished by the S5 1.2 code (currently in alpha), which has
     not yet been integrated into Docutils.

* Speaker's notes -- how to intersperse?  Could use reST comments
  (".."), but make them visible in the speaker's master document.  If
  structure is necessary, we could use a "comment" directive (to avoid
  nonsensical DTD changes, the "comment" directive could produce an
  untitled topic element).

  The speaker's notes could (should?) be separate from S5's handout
  content.

* The speaker's master document could use frames for easy navigation:
  TOC on the left, content on the right.

  - It would be nice if clicking in the TOC frame simultaneously
    linked to both the speaker's notes frame and to the slide window,
    synchronizing both.  Needs JavaScript?

  - TOC would have to be tightly formatted -- minimal indentation.

  - TOC auto-generated, as in the PEP Reader.  (What if there already
    is a "contents" directive in the document?)

  - There could be another frame on the left (top-left or bottom-left)
    containing a single "Next" link, always pointing to the next slide
    (synchronized, of course).  Also "Previous" link?  FF/Rew go to
    the beginning of the next/current parent section?  First/Last
    also?  Tape-player-style buttons like ``|<<  <<  <  >  >>  >>|``?

Epub/HTML Writer
================

Add epub as an output format.

  epub is an open file format for ebooks based on HTML, specified by the
  `International Digital Publishing Forum`_. Thus, documents in epub
  format are suited to be read with `electronic reading devices`_.

Pack the output of a HTML writer and supporting files (e.g. images)
into one single epub document.

There are `links to two 3rd party ePub writers`__ in the Docutils link list.
Test and consider moving the better one into the docutils core.

__ ../user/links.html#ePub
.. _International Digital Publishing Forum: http://www.idpf.org/
.. _electronic reading devices:
   https://en.wikipedia.org/wiki/List_of_e-book_readers


LaTeX writer
============

Also see the Problems__ section in the `latex writer documentation`_.

__ ../user/latex.html#problems

.. _latex writer documentation: ../user/latex.html

.. _latex-variants:
   ../../../sandbox/latex-variants/README.html

Bug fixes
---------

* Too deeply nested lists fail: generate a warning and provide
  a workaround.

  2017-02-09 this is fixed for enumeration in 0.13.1

  for others, cf. sandbox/latex-variants/tests/rst-levels.txt

* File names of included graphics (see also `grffile` package).

* Paragraph following field-list or table in compound is indented.

  This is a problem with the current DUfieldlist definition and with the
  use of "longtable" for tables. See `other LaTeX constructs and packages
  instead of re-implementations`_ for alternatives.


Generate clean and configurable LaTeX source
----------------------------------------------

Which packages do we want to use?

+ base and "recommended" packages

  (packages that should be in a "reasonably sized and reasonably modern
  LaTeX installation like the `texlive-latex-recommended` Debian package,
  say):

+ No "fancy" or "exotic" requirements.

+ pointers to advanced packages and their use in the `latex writer
  documentation`_.

Configurable placement of figure and table floats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Special class argument to individually place figures?

  Example::

    .. figure:: foo.pdf
       :class: place-here-if-possible place-top place-bottom

  would be written as ``\figure[htb]{...}`` with
  the optional args:

  :H: place-here
  :h: place-here-if-possible
  :t: place-top
  :b: place-bottom
  :p: place-on-extra-page

  Alternative: class value = "place-" + optional arg, e.g. ``:class:
  place-htb``.

Footnotes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+ True footnotes with LaTeX auto-numbering (as option ``--latex-footnotes``)
  (also for target-footnotes):
  Write ``\footnote{<footnote content>}`` at the place of the
  ``<footnote_reference>`` node.

+ Open questions:

  - Load hyperref_ with option "hyperfootnotes" and/or
    package footnotebackref_ or leave this to the user?

  - Consider cases where LaTeX does not support footnotes
    (inside tables__, headings__, caption, ...).
    Use ftnxtra_, tabularx_, tabulary_, longtable_?

    __ http://www.tex.ac.uk/cgi-bin/texfaq2html?label=footintab
    __ http://www.tex.ac.uk/cgi-bin/texfaq2html?label=ftnsect

  - Consider `multiple footnote refs to common footnote text`__.

    KOMA-script classes and the KOMA scrextend_ package provide
    ``\footref`` that can be used for additional references to a
    ``\label``-ed footnote. Since 2021-05-01, ``\footref`` is provided
    by the LaTeX core, too.

    __ http://www.tex.ac.uk/cgi-bin/texfaq2html?label=multfoot

  - Consider numbered vs. symbolic footnotes.

+ document customization (links to how-to and packages)

.. Footnote packages at CTAN (www.ctan.org/pkg/<packagename>):

   :footnote: provides a "savenotes" environment which collects all
              footnotes and emits them at ``end{savenotes}``
              (texlive-latex-recommended)

   :ftnxtra_: fixes the issue of footnote inside \caption{},
             tabular environment and \section{} like commands.

   :footnotebackref_: bidirectional links to/from footnote mark to
                      footnote text.

.. Footnote Discussion:

   `German tutorial
   <http://www2.informatik.hu-berlin.de/~ahamann/studies/footnotes.pdf>`__

   `wikibooks: footnote workarounds
   <https://en.wikibooks.org/wiki/LaTeX/Footnotes_and_Margin_Notes#Common_problems_and_workarounds>`__

.. _footnotebackref: https://www.ctan.org/pkg/footnotebackref
.. _ftnxtra: https://www.ctan.org/pkg/ftnxtra
.. _hyperref: https://www.ctan.org/pkg/hyperref
.. _longtable: https://www.ctan.org/pkg/longtable
.. _scrextend: https://www.ctan.org/pkg/longtable
.. _tabularx: https://www.ctan.org/pkg/tabularx


Other LaTeX constructs and packages instead of re-implementations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Check the generated source with package `nag`.

* enumitem_ (texlive-latex-extra) for field-lists?

.. _enumitem: https://www.ctan.org/pkg/enumitem

Default layout
--------------

* Use italic instead of slanted for titlereference?

* Start a new paragraph after lists (as currently)
  or continue (no blank line in source, no parindent in output)?

  Overriding:

  * continue if the `compound paragraph`_ directive is used (as currently),
    or
  * force a new paragraph with an empty comment.

* Sidebar handling (environment with `framed`, `marginnote`, `wrapfig`,
  ...)?

* Use optionlist for docinfo?

* Keep literal-blocks together on a page, avoid pagebreaks.

  Failed experiments up to now: samepage, minipage, pagebreak 1 to 4 before
  the block.

  Should be possible with ``--literal-block-env==lstlistings`` and some
  configuration...

* More space between title and subtitle? ::

     -  \\ % subtitle%
     +  \\[0.5em] % subtitle%

.. _compound paragraph:
   ../ref/rst/directives.html#compound-paragraph

Tables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Improve/simplify logic to set the column width in the output.

  + Assumed reST line length for table width setting configurable, or
  + use `ltxtable` (a combination of `tabularx` (auto-width) and
    `longtable` (page breaks)), or
  + use tabularx column type ``X`` and let LaTeX decide width, or
  + use tabulary_?

  .. _tabulary: https://www.ctan.org/pkg/tabulary

* From comp.text.tex (13. 4. 2011):

    When using fixed width columns, you should ensure that the total
    width does not exceed \linewidth: if the first column is p{6cm}
    the second one should be p{\dimexpr\linewidth-6cm-4\tabcolsep}
    because the glue \tabcolsep is added twice at every column edge.
    You may also consider to set \tabcolsep to a different value...

* csv-tables do not have a colwidth.

* Add more classes or options, e.g. for

  + horizontal alignment and rules.
  + long table vs. tabular (see next item).

* Use tabular instead of longtable for tables in legends or generally
  inside a float?

  Alternatively, default to tabular and use longtable only if specified
  by config setting or class argument (analogue to booktable)?

* Table heads and footer for longtable (firstpage lastpage ..)?

* In tools.txt the option tables right column, there should be some more
  spacing between the description and the next paragraph "Default:".

* Paragraph separation in tables is hairy.
  see http://www.tex.ac.uk/cgi-bin/texfaq2html?label=struttab

  - The strut solution did not work.
  - setting extrarowheight added ad top of row not between paragraphs in
    a cell. ALTHOUGH i set it to 2pt because, text is too close to the topline.
  - baselineskip/stretch does not help.

* Should there be two hlines after table head and on table end?

* Place titled tables in a float ('table' environment)?

  The 'table', 'csv-table', and 'list-table' directives support an (optional)
  table title. In analogy to the 'figure' directive this should map to a
  table float.

Image and figure directives
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* compare the test case in:

  + `<../../test/functional/input/data/standard.txt>`__
  + `<../../test/functional/expected/standalone_rst_html4css1.html>`__
  + `<../../test/functional/expected/standalone_rst_latex.tex>`__

* The default CSS styling for HTML output (plain.css, default.css) lets
  text following a right- or left-aligned image float to the side of the
  image/figure.

  + Use this default also for LaTeX?

  + Wrap text around figures/images with class argument "wrap"
    (like the odt writer)?

  Use `wrapfig` (or other recommended) package.

* support more graphic formats (especially SVG, the only standard
  vector format for HTML)


Missing features
----------------

* support "figwidth" argument for figures.

  As the 'figwidth' argument is still ignored and the "natural width" of
  a figure in LaTeX is 100 % of the text width, setting the 'align'
  argument has currently no effect on the LaTeX output.

* Multiple author entries in docinfo (same thing as in html).

* Consider supporting the "compact" option and class argument (from
  rst2html) as some lists look better compact and others need the space.

* Better citation support
  (see `Footnote & Citation Gathering`_).

* If ``use-latex-citations`` is used, a bibliography is inserted right at the
  end of the document.

  Put in place of the to-be-implemented "citations" directive
  (see `Footnote & Citation Gathering`_).


Unicode to LaTeX
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `LyX <http://www.lyx.org>`_ document processor has a comprehensive
Unicode to LaTeX conversion feature with a file called ``unicodesymbols``
that lists LaTeX counterparts for a wide range of Unicode characters.

* Use this in the LaTeXTranslator?
  Think of copyright issues!

* The "ucs" package has many translations in ...doc/latex/ucs/config/

* The bibstuff_ tool ships a `latex_codec` Python module!

.. _bibstuff: http://code.google.com/p/bibstuff/


XeTeX writer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Glyphs missing in the font are left out in the PDF without warning
  (e.g. ⇔ left-right double arrow in the functional test output).

* Disable word-wrap (hyphenation) in literal text locally with
  ``providecommand{\nohyphenation}{\addfontfeatures{HyphenChar=None}}``?


problematic URLs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* ^^ LaTeX's special syntax for characters results in "strange" replacements
  (both with \href and \url).

  `file with ^^ <../strange^^name>`__:
  `<../strange^^name>`__

* Unbalanced braces, { or }, will fail (both with \href and \url)::

    `file with { <../strange{name>`__
    `<../strange{name>`__

Currently, a warning is written to the error output stream.

For correct printing, we can

* use the \href command with "normal" escaped name argument, or
* define a url-command in the preamble ::

    \urldef{\fragileURLi}\nolinkurl{myself%node@gateway.net}

but need to find a way to insert it as href argument.

The following fails::

    \href{https://www.w3.org/XML/Schema^^dev}{\fragileURLi}

Use %-replacement like http://nowhere/url_with%28parens%29 ?

-> does not work for file paths (with pdflatex and xpdf).


add-stylesheet option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From http://article.gmane.org/gmane.text.docutils.devel/3429/

The problem is that since we have a default value, we have to
differentiate between adding another stylesheet and replacing the
default.  I suggest that the existing --stylesheet & --stylesheet-path
options keep their semantics to replace the existing settings.  We
could introduce new --add-stylesheet & --add-stylesheet-path options,
which accumulate; further --stylesheet/--stylesheet-path options would
clear these lists.  The stylesheet or stylesheet_path setting (only
one may be set), plus the added_stylesheets and added_stylesheet_paths
settings, describe the combined styles.

For example, this run will have only one custom stylesheet:

    rstpep2html.py --stylesheet-path custom.css ...

This run will use the default stylesheet, and the custom one:

    rstpep2html.py --add-stylesheet-path custom.css ...

This run will use the default stylesheet, a custom local stylesheet,
and an external stylesheet:

    rstpep2html.py --add-stylesheet-path custom.css \
        --add-stylesheet https://www.example.org/external.css ...

This run will use only the second custom stylesheet:

    rstpep2html.py --add-stylesheet-path custom.css \
        --stylesheet-path second.css ...




Front-End Tools
===============

* Parameterize help text & defaults somehow?  Perhaps a callback?  Or
  initialize ``settings_spec`` in ``__init__`` or ``init_options``?

* Disable common options that don't apply?
  (This should now be easier with ``frontend.filter_settings_spec``.)

* Add ``--section-numbering`` command line option.  The "sectnum"
  directive should override the ``--no-section-numbering`` command
  line option then.

* Implement the following suggestions from clig.dev?

     Display output on success, but keep it brief.
     provide a --quiet option to suppress all non-essential output.
   
     Consider chaining several args as input and use --output
     (or redirection) for output.
   
     -- https://clig.dev/#help

.. _partial parsing:
   https://docs.python.org/3/library/argparse.html#partial-parsing

.. _configuration: ../user/config.html
.. _transforms: ../api/transforms.html




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 053.📜 docutils-0.20.1/docs/dev/website.txt

.. .. include:: /docutils-0.20.1/docs/header.txt

===================
 Docutils Web Site
===================

:Author: David Goodger; open to all Docutils developers
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2022-04-02 23:59:06 +0200 (Sa, 02. Apr 2022) $
:Revision: $Revision: 9051 $
:Copyright: This document has been placed in the public domain.

The Docutils web site, <https://docutils.sourceforge.io/>, is
maintained by the ``docutils-update.local`` script, run by project
maintainers on their local machines.  The script
will process any .txt file which is newer than the corresponding .html
file in the local copy of the project's web directory and upload the changes
to the web site at SourceForge.

..  .. old instructions, for cron job:

    The Docutils web site, <https://docutils.sourceforge.io/>, is
    maintained automatically by the ``docutils-update`` script, run as an
    hourly cron job on shell.berlios.de (by user "wiemann").  The script
    will process any .txt file which is newer than the corresponding .html
    file in the project's web directory on shell.berlios.de
    (``/home/groups/docutils/htdocs/aux/htdocs/``) and upload the changes
    to the web site at SourceForge.

Please **do not** add any generated .html files to the Docutils
repository.  They will be generated automatically after a one-time
setup (`described below`__).

__ `Adding .txt Files`_

The docutils-update.local__ script is located at
``sandbox/infrastructure/docutils-update.local``.

__ https://docutils.sourceforge.io/sandbox/infrastructure/docutils-update.local

If you want to share files via the web, you can upload them using the
uploaddocutils.sh__ script
(``sandbox/infrastructure/uploaddocutils.sh``).

__ https://docutils.sourceforge.io/sandbox/infrastructure/uploaddocutils.sh


Setting Up
==========

(TBA)

.. hint::
  Anyone with checkin privileges can be a web-site maintainer. You need to
  set up the directories for a local website build.

  The procedure for that was on the docutils-devel list a while ago.


Adding .txt Files
=================

User/Contributor
----------------

When adding a new .txt file that should be converted to HTML:

#. Edit sandbox/infrastructure/htmlfiles.lst, and add the .html file
   corresponding to the new .txt file (please keep the sorted order).

#. Commit the edited version to the SVN repository.

Maintainer
----------

#. If there are new directories in the SVN, allow the update script to run
   once to create the directories in the filesystem before preparing for
   HTML processing.

#. Run the sandbox/infrastructure/update-htmlfiles shell script to generate
   .html files::

      cd <DOCUTILS-ROOT>/docutils/
      sandbox/infrastructure/update-htmlfiles \
      sandbox/infrastructure/htmlfiles.lst

   (Maybe this should become part of docutils-update.local.)


Removing Files & Directories
============================

#. Remove from SVN

#. Remove to-be-generated HTML files from
   ``sandbox/infrastructure/htmlfiles.lst``.

#. Removing files and directories from SVN will not trigger their removal
   from the web site.  Files and directories must be manually removed from
   sourceforge.net (under ``/home/project-web/docutils/htdocs/``).



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 054.📜 docutils-0.20.1/docs/dev/pysource.dtd

.. code-block:: text

  <!--
  ======================================================================
      Docutils Python Source DTD
  ======================================================================
  :Author: David Goodger
  :Contact: docutils-develop@lists.sourceforge.net
  :Revision: $Revision: 8956 $
  :Date: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
  :Copyright: This DTD has been placed in the public domain.
  :Filename: pysource.dtd

  This DTD (document type definition) extends the Generic DTD (see
  below).

  More information about this DTD and the Docutils project can be found
  at https://docutils.sourceforge.io/.  The latest version of this DTD
  is available from
  https://docutils.sourceforge.io/docs/dev/pysource.dtd.

  The formal public identifier for this DTD is::

      +//IDN docutils.sourceforge.net//DTD Docutils Python Source//EN//XML
  -->

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Parameter Entity Overrides
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!ENTITY % additional.section.elements
    " | package_section | module_section | class_section
      | method_section | function_section
      | module_attribute_section | function_attribute_section
      | class_attribute_section | instance_attribute_section ">

  <!ENTITY % additional.inline.elements
    " | package | module | class | method | function
      | variable | parameter | type | attribute
      | module_attribute | class_attribute | instance_attribute
      | exception_class | warning_class ">

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Generic DTD
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  This DTD extends the Docutils Generic DTD, available from
  https://docutils.sourceforge.io/docs/ref/docutils.dtd.
  -->

  <!ENTITY % docutils PUBLIC
      "+//IDN python.org//DTD Docutils Generic//EN//XML"
      "docutils.dtd">
  %docutils;

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Additional Section Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!-- package's namespace == __init__.py module's namespace -->
  <!ELEMENT package_section
      (package, fullname?, import_list?, %structure.model;)>
  <!ATTLIST package_section %basic.atts;>

  <!ELEMENT module_section
      (module, fullname?, import_list?, %structure.model;)>
  <!ATTLIST module_section %basic.atts;>

  <!ELEMENT class_section
      (class, inheritance_list?, fullname?, subclasses?,
       %structure.model;)>
  <!ATTLIST class_section %basic.atts;>

  <!ELEMENT method_section
      (method, parameter_list?, fullname?, overrides?,
       %structure.model;)>
  <!ATTLIST method_section %basic.atts;>

  <!ELEMENT function_section
      (function, parameter_list?, fullname?, %structure.model;)>
  <!ATTLIST function_section %basic.atts;>

  <!ELEMENT module_attribute_section
      (attribute, initial_value?, fullname?, %structure.model;)>
  <!ATTLIST module_attribute_section %basic.atts;>

  <!ELEMENT function_attribute_section
      (attribute, initial_value?, fullname?, %structure.model;)>
  <!ATTLIST function_attribute_section %basic.atts;>

  <!ELEMENT class_attribute_section
      (attribute, initial_value?, fullname?, overrides?,
       %structure.model;)>
  <!ATTLIST class_attribute_section %basic.atts;>

  <!ELEMENT instance_attribute_section
      (attribute, initial_value?, fullname?, overrides?,
       %structure.model;)>
  <!ATTLIST instance_attribute_section %basic.atts;>

  <!--
      Section Subelements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!ELEMENT fullname
      (package | module | class | method | function | attribute)+>
  <!ATTLIST fullname %basic.atts;>

  <!ELEMENT import_list (import_item+)>
  <!ATTLIST import_list %basic.atts;>

  <!--
  Support ``import module``, ``import module as alias``, ``from module
  import identifier``, and ``from module import identifier as alias``.
  -->
  <!ELEMENT import_item (fullname, identifier?, alias?)>
  <!ATTLIST import_item %basic.atts;>

  <!ELEMENT inheritance_list (class+)>
  <!ATTLIST inheritance_list %basic.atts;>

  <!ELEMENT subclasses (class+)>
  <!ATTLIST subclasses %basic.atts;>

  <!ELEMENT parameter_list
      ((parameter_item+, optional_parameters*) | optional_parameters+)>
  <!ATTLIST parameter_list %basic.atts;>

  <!ELEMENT parameter_item
      ((parameter | parameter_tuple), parameter_default?)>
  <!ATTLIST parameter_item %basic.atts;>

  <!ELEMENT optional_parameters (parameter_item+, optional_parameters*)>
  <!ATTLIST optional_parameters %basic.atts;>

  <!ELEMENT parameter_tuple (parameter | parameter_tuple)+>
  <!ATTLIST parameter_tuple %basic.atts;>

  <!ELEMENT parameter_default (#PCDATA)>
  <!ATTLIST parameter_default %basic.atts;>

  <!ELEMENT overrides (fullname+)>
  <!ATTLIST overrides %basic.atts;>

  <!ELEMENT initial_value (#PCDATA)>
  <!ATTLIST initial_value %basic.atts;>

  <!--
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Additional Inline Elements
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->

  <!-- Also used as the `package_section` identifier/title. -->
  <!ELEMENT package (#PCDATA)>
  <!ATTLIST package
      %basic.atts;
      %reference.atts;>

  <!-- Also used as the `module_section` identifier/title. -->
  <!ELEMENT module (#PCDATA)>
  <!ATTLIST module
      %basic.atts;
      %reference.atts;>

  <!--
  Also used as the `class_section` identifier/title, and in the
  `inheritance` element.
  -->
  <!ELEMENT class (#PCDATA)>
  <!ATTLIST class
      %basic.atts;
      %reference.atts;>

  <!-- Also used as the `method_section` identifier/title. -->
  <!ELEMENT method (#PCDATA)>
  <!ATTLIST method
      %basic.atts;
      %reference.atts;>

  <!-- Also used as the `function_section` identifier/title. -->
  <!ELEMENT function (#PCDATA)>
  <!ATTLIST function
      %basic.atts;
      %reference.atts;>

  <!--
  ??? Use this instead of the ``*_attribute`` elements below?  Add a
  "type" attribute to differentiate?

  Also used as the identifier/title for `module_attribute_section`,
  `class_attribute_section`, and `instance_attribute_section`.
  -->
  <!ELEMENT attribute (#PCDATA)>
  <!ATTLIST attribute
      %basic.atts;
      %reference.atts;>

  <!--
  Also used as the `module_attribute_section` identifier/title. A module
  attribute is an exported module-level global variable.
  -->
  <!ELEMENT module_attribute (#PCDATA)>
  <!ATTLIST module_attribute
      %basic.atts;
      %reference.atts;>

  <!-- Also used as the `class_attribute_section` identifier/title. -->
  <!ELEMENT class_attribute (#PCDATA)>
  <!ATTLIST class_attribute
      %basic.atts;
      %reference.atts;>

  <!--
  Also used as the `instance_attribute_section` identifier/title.
  -->
  <!ELEMENT instance_attribute (#PCDATA)>
  <!ATTLIST instance_attribute
      %basic.atts;
      %reference.atts;>

  <!ELEMENT variable (#PCDATA)>
  <!ATTLIST variable
      %basic.atts;
      %reference.atts;>

  <!-- Also used in `parameter_list`. -->
  <!ELEMENT parameter (#PCDATA)>
  <!ATTLIST parameter
      %basic.atts;
      %reference.atts;
      excess_positional  %yesorno;  #IMPLIED
      excess_keyword     %yesorno;  #IMPLIED>

  <!ELEMENT type (#PCDATA)>
  <!ATTLIST type
      %basic.atts;
      %reference.atts;>

  <!ELEMENT exception_class (#PCDATA)>
  <!ATTLIST exception_class
      %basic.atts;
      %reference.atts;>

  <!ELEMENT warning_class (#PCDATA)>
  <!ATTLIST warning_class
      %basic.atts;
      %reference.atts;>

  <!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  fill-column: 70
  End:
  -->


/Part 3. 055.📜 docutils-0.20.1/docs/peps/pep-0256.txt

:PEP: 256
:Title: Docstring Processing System Framework
:Version: $Revision: 8956 $
:Last-Modified: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
:Author: David Goodger <goodger@python.org>
:Discussions-To: <doc-sig@python.org>
:Status: Rejected
:Type: Standards Track
:Content-Type: text/x-rst
:Created: 01-Jun-2001
:Post-History: 13-Jun-2001


Rejection Notice
================

This proposal seems to have run out of steam.


Abstract
========

Python lends itself to inline documentation.  With its built-in
docstring syntax, a limited form of `Literate Programming`_ is easy to
do in Python.  However, there are no satisfactory standard tools for
extracting and processing Python docstrings.  The lack of a standard
toolset is a significant gap in Python's infrastructure; this PEP aims
to fill the gap.

The issues surrounding docstring processing have been contentious and
difficult to resolve.  This PEP proposes a generic Docstring
Processing System (DPS) framework, which separates out the components
(program and conceptual), enabling the resolution of individual issues
either through consensus (one solution) or through divergence (many).
It promotes standard interfaces which will allow a variety of plug-in
components (input context readers, markup parsers, and output format
writers) to be used.

The concepts of a DPS framework are presented independently of
implementation details.


Road Map to the Docstring PEPs
==============================

There are many aspects to docstring processing.  The "Docstring PEPs"
have broken up the issues in order to deal with each of them in
isolation, or as close as possible.  The individual aspects and
associated PEPs are as follows:

* Docstring syntax.  PEP 287, "reStructuredText Docstring Format"
  [#PEP-287]_, proposes a syntax for Python docstrings, PEPs, and
  other uses.

* Docstring semantics consist of at least two aspects:

  - Conventions: the high-level structure of docstrings.  Dealt with
    in PEP 257, "Docstring Conventions" [#PEP-257]_.

  - Methodology: rules for the informational content of docstrings.
    Not addressed.

* Processing mechanisms.  This PEP (PEP 256) outlines the high-level
  issues and specification of an abstract docstring processing system
  (DPS).  PEP 258, "Docutils Design Specification" [#PEP-258]_, is an
  overview of the design and implementation of one DPS under
  development.

* Output styles: developers want the documentation generated from
  their source code to look good, and there are many different ideas
  about what that means.  PEP 258 touches on "Stylist Transforms".
  This aspect of docstring processing has yet to be fully explored.

By separating out the issues, we can form consensus more easily
(smaller fights ;-), and accept divergence more readily.


Rationale
=========

There are standard inline documentation systems for some other
languages.  For example, Perl has POD_ ("Plain Old Documentation") and
Java has Javadoc_, but neither of these mesh with the Pythonic way.
POD syntax is very explicit, but takes after Perl in terms of
readability.  Javadoc is HTML-centric; except for "``@field``" tags,
raw HTML is used for markup.  There are also general tools such as
Autoduck_ and Web_ (Tangle & Weave), useful for multiple languages.

There have been many attempts to write auto-documentation systems
for Python (not an exhaustive list):

- Marc-Andre Lemburg's doc.py_

- Daniel Larsson's pythondoc_ & gendoc_

- Doug Hellmann's HappyDoc_

- Laurence Tratt's Crystal (no longer available on the web)

- Ka-Ping Yee's pydoc_ (pydoc.py is now part of the Python standard
  library; see below)

- Tony Ibbs' docutils_ (Tony has donated this name to the `Docutils
  project`_)

- Edward Loper's STminus_ formalization and related efforts

These systems, each with different goals, have had varying degrees of
success.  A problem with many of the above systems was over-ambition
combined with inflexibility.  They provided a self-contained set of
components: a docstring extraction system, a markup parser, an
internal processing system and one or more output format writers with
a fixed style.  Inevitably, one or more aspects of each system had
serious shortcomings, and they were not easily extended or modified,
preventing them from being adopted as standard tools.

It has become clear (to this author, at least) that the "all or
nothing" approach cannot succeed, since no monolithic self-contained
system could possibly be agreed upon by all interested parties.  A
modular component approach designed for extension, where components
may be multiply implemented, may be the only chance for success.
Standard inter-component APIs will make the DPS components
comprehensible without requiring detailed knowledge of the whole,
lowering the barrier for contributions, and ultimately resulting in a
rich and varied system.

Each of the components of a docstring processing system should be
developed independently.  A "best of breed" system should be chosen,
either merged from existing systems, and/or developed anew.  This
system should be included in Python's standard library.


PyDoc & Other Existing Systems
------------------------------

PyDoc became part of the Python standard library as of release 2.1.
It extracts and displays docstrings from within the Python interactive
interpreter, from the shell command line, and from a GUI window into a
web browser (HTML).  Although a very useful tool, PyDoc has several
deficiencies, including:

- In the case of the GUI/HTML, except for some heuristic hyperlinking
  of identifier names, no formatting of the docstrings is done.  They
  are presented within ``<p><small><tt>`` tags to avoid unwanted line
  wrapping.  Unfortunately, the result is not attractive.

- PyDoc extracts docstrings and structural information (class
  identifiers, method signatures, etc.) from imported module objects.
  There are security issues involved with importing untrusted code.
  Also, information from the source is lost when importing, such as
  comments, "additional docstrings" (string literals in non-docstring
  contexts; see PEP 258 [#PEP-258]_), and the order of definitions.

The functionality proposed in this PEP could be added to or used by
PyDoc when serving HTML pages.  The proposed docstring processing
system's functionality is much more than PyDoc needs in its current
form.  Either an independent tool will be developed (which PyDoc may
or may not use), or PyDoc could be expanded to encompass this
functionality and *become* the docstring processing system (or one
such system).  That decision is beyond the scope of this PEP.

Similarly for other existing docstring processing systems, their
authors may or may not choose compatibility with this framework.
However, if this framework is accepted and adopted as the Python
standard, compatibility will become an important consideration in
these systems' future.


Specification
=============

The docstring processing system framework is broken up as follows:

1. Docstring conventions.  Documents issues such as:

   - What should be documented where.

   - First line is a one-line synopsis.

   PEP 257 [#PEP-257]_ documents some of these issues.

2. Docstring processing system design specification.  Documents
   issues such as:

   - High-level spec: what a DPS does.

   - Command-line interface for executable script.

   - System Python API.

   - Docstring extraction rules.

   - Readers, which encapsulate the input context.

   - Parsers.

   - Document tree: the intermediate internal data structure.  The
     output of the Parser and Reader, and the input to the Writer all
     share the same data structure.

   - Transforms, which modify the document tree.

   - Writers for output formats.

   - Distributors, which handle output management (one file, many
     files, or objects in memory).

   These issues are applicable to any docstring processing system
   implementation.  PEP 258 [#PEP-258]_ documents these issues.

3. Docstring processing system implementation.

4. Input markup specifications: docstring syntax.  PEP 287 [#PEP-287]_
   proposes a standard syntax.

5. Input parser implementations.

6. Input context readers ("modes": Python source code, PEP, standalone
   text file, email, etc.) and implementations.

7. Stylists: certain input context readers may have associated
   stylists which allow for a variety of output document styles.

8. Output formats (HTML, XML, TeX, DocBook, info, etc.) and writer
   implementations.

Components 1, 2/3/5, and 4 are the subject of individual companion
PEPs.  If there is another implementation of the framework or
syntax/parser, additional PEPs may be required.  Multiple
implementations of each of components 6 and 7 will be required; the
PEP mechanism may be overkill for these components.


Project Web Site
================

A SourceForge project has been set up for this work at 
https://docutils.sourceforge.io/.


References and Footnotes
========================

.. [#PEP-287] PEP 287, reStructuredText Docstring Format, Goodger
   (http://www.python.org/peps/pep-0287.html)

.. [#PEP-257] PEP 257, Docstring Conventions, Goodger, Van Rossum
   (http://www.python.org/peps/pep-0257.html)

.. [#PEP-258] PEP 258, Docutils Design Specification, Goodger
   (http://www.python.org/peps/pep-0258.html)

.. _Literate Programming: http://www.literateprogramming.com/

.. _POD: http://perldoc.perl.org/perlpod.html

.. _Javadoc: http://java.sun.com/j2se/javadoc/

.. _Autoduck:
   http://www.helpmaster.com/hlp-developmentaids-autoduck.htm

.. _Web: http://www-cs-faculty.stanford.edu/~knuth/cweb.html

.. _doc.py:
   http://www.egenix.com/files/python/SoftwareDescriptions.html#doc.py

.. _pythondoc:
.. _gendoc: http://starship.python.net/crew/danilo/pythondoc/

.. _HappyDoc: http://happydoc.sourceforge.net/

.. _pydoc: http://www.python.org/doc/current/lib/module-pydoc.html

.. _docutils: http://www.tibsnjoan.co.uk/docutils.html

.. _Docutils project: https://docutils.sourceforge.io/

.. _STMinus: http://www.cis.upenn.edu/~edloper/pydoc/

.. _Python Doc-SIG: http://www.python.org/sigs/doc-sig/


Copyright
=========

This document has been placed in the public domain.


Acknowledgements
================

This document borrows ideas from the archives of the `Python
Doc-SIG`_.  Thanks to all members past & present.




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 056.📜 docutils-0.20.1/docs/peps/pep-0257.txt

:PEP: 257
:Title: Docstring Conventions
:Version: $Revision: 8956 $
:Last-Modified: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
:Authors: David Goodger <goodger@python.org>,
        Guido van Rossum <guido@python.org>
:Discussions-To: doc-sig@python.org
:Status: Active
:Type: Informational
:Content-Type: text/x-rst
:Created: 29-May-2001
:Post-History: 13-Jun-2001


Abstract
========

This PEP documents the semantics and conventions associated with
Python docstrings.


Rationale
=========

The aim of this PEP is to standardize the high-level structure of
docstrings: what they should contain, and how to say it (without
touching on any markup syntax within docstrings).  The PEP contains
conventions, not laws or syntax.

    "A universal convention supplies all of maintainability, clarity,
    consistency, and a foundation for good programming habits too.
    What it doesn't do is insist that you follow it against your will.
    That's Python!"

    -- Tim Peters on comp.lang.python, 2001-06-16

If you violate these conventions, the worst you'll get is some dirty
looks.  But some software (such as the Docutils_ docstring processing
system [1]_ [2]_) will be aware of the conventions, so following them
will get you the best results.


Specification
=============

What is a Docstring?
--------------------

A docstring is a string literal that occurs as the first statement in
a module, function, class, or method definition.  Such a docstring
becomes the ``__doc__`` special attribute of that object.

All modules should normally have docstrings, and all functions and
classes exported by a module should also have docstrings.  Public
methods (including the ``__init__`` constructor) should also have
docstrings.  A package may be documented in the module docstring of
the ``__init__.py`` file in the package directory.

String literals occurring elsewhere in Python code may also act as
documentation.  They are not recognized by the Python bytecode
compiler and are not accessible as runtime object attributes (i.e. not
assigned to ``__doc__``), but two types of extra docstrings may be
extracted by software tools:

1. String literals occurring immediately after a simple assignment at
   the top level of a module, class, or ``__init__`` method are called
   "attribute docstrings".

2. String literals occurring immediately after another docstring are
   called "additional docstrings".

Please see PEP 258, "Docutils Design Specification" [2]_, for a
detailed description of attribute and additional docstrings.

XXX Mention docstrings of 2.2 properties.

For consistency, always use ``"""triple double quotes"""`` around
docstrings.  Use ``r"""raw triple double quotes"""`` if you use any
backslashes in your docstrings.  For Unicode docstrings, use
``u"""Unicode triple-quoted strings"""``.

There are two forms of docstrings: one-liners and multi-line
docstrings.


One-line Docstrings
--------------------

One-liners are for really obvious cases.  They should really fit on
one line.  For example:

.. code-block:: py

    def kos_root():
        """Return the pathname of the KOS root directory."""
        global _kos_root
        if _kos_root: return _kos_root
        ...

Notes:

- Triple quotes are used even though the string fits on one line.
  This makes it easy to later expand it.

- The closing quotes are on the same line as the opening quotes.  This
  looks better for one-liners.

- There's no blank line either before or after the docstring.

- The docstring is a phrase ending in a period.  It prescribes the
  function or method's effect as a command ("Do this", "Return that"),
  not as a description; e.g. don't write "Returns the pathname ...".

- The one-line docstring should NOT be a "signature" reiterating the
  function/method parameters (which can be obtained by introspection).
  Don't do:

.. code-block:: py

      def function(a, b):
          """function(a, b) -> list"""

  This type of docstring is only appropriate for C functions (such as
  built-ins), where introspection is not possible.  However, the
  nature of the *return value* cannot be determined by introspection,
  so it should be mentioned.  The preferred form for such a docstring
  would be something like:

.. code-block:: py

      def function(a, b):
          """Do X and return a list."""

  (Of course "Do X" should be replaced by a useful description!)


Multi-line Docstrings
----------------------

Multi-line docstrings consist of a summary line just like a one-line
docstring, followed by a blank line, followed by a more elaborate
description.  The summary line may be used by automatic indexing
tools; it is important that it fits on one line and is separated from
the rest of the docstring by a blank line.  The summary line may be on
the same line as the opening quotes or on the next line.  The entire
docstring is indented the same as the quotes at its first line (see
example below).

Insert a blank line before and after all docstrings (one-line or
multi-line) that document a class -- generally speaking, the class's
methods are separated from each other by a single blank line, and the
docstring needs to be offset from the first method by a blank line;
for symmetry, put a blank line between the class header and the
docstring.  Docstrings documenting functions or methods generally
don't have this requirement, unless the function or method's body is
written as a number of blank-line separated sections -- in this case,
treat the docstring as another section, and precede it with a blank
line.

The docstring of a script (a stand-alone program) should be usable as
its "usage" message, printed when the script is invoked with incorrect
or missing arguments (or perhaps with a "-h" option, for "help").
Such a docstring should document the script's function and command
line syntax, environment variables, and files.  Usage messages can be
fairly elaborate (several screens full) and should be sufficient for a
new user to use the command properly, as well as a complete quick
reference to all options and arguments for the sophisticated user.

The docstring for a module should generally list the classes,
exceptions and functions (and any other objects) that are exported by
the module, with a one-line summary of each.  (These summaries
generally give less detail than the summary line in the object's
docstring.)  The docstring for a package (i.e., the docstring of the
package's ``__init__.py`` module) should also list the modules and
subpackages exported by the package.

The docstring for a function or method should summarize its behavior
and document its arguments, return value(s), side effects, exceptions
raised, and restrictions on when it can be called (all if applicable).
Optional arguments should be indicated.  It should be documented
whether keyword arguments are part of the interface.

The docstring for a class should summarize its behavior and list the
public methods and instance variables.  If the class is intended to be
subclassed, and has an additional interface for subclasses, this
interface should be listed separately (in the docstring).  The class
constructor should be documented in the docstring for its ``__init__``
method.  Individual methods should be documented by their own
docstring.

If a class subclasses another class and its behavior is mostly
inherited from that class, its docstring should mention this and
summarize the differences.  Use the verb "override" to indicate that a
subclass method replaces a superclass method and does not call the
superclass method; use the verb "extend" to indicate that a subclass
method calls the superclass method (in addition to its own behavior).

*Do not* use the Emacs convention of mentioning the arguments of
functions or methods in upper case in running text.  Python is case
sensitive and the argument names can be used for keyword arguments, so
the docstring should document the correct argument names.  It is best
to list each argument on a separate line.  For example:

.. code-block:: py

    def complex(real=0.0, imag=0.0):
        """Form a complex number.

        Keyword arguments:
        real -- the real part (default 0.0)
        imag -- the imaginary part (default 0.0)

        """
        if imag == 0.0 and real == 0.0: return complex_zero
        ...

The BDFL [3]_ recommends inserting a blank line between the last
paragraph in a multi-line docstring and its closing quotes, placing
the closing quotes on a line by themselves.  This way, Emacs'
``fill-paragraph`` command can be used on it.


Handling Docstring Indentation
------------------------------

Docstring processing tools will strip a uniform amount of indentation
from the second and further lines of the docstring, equal to the
minimum indentation of all non-blank lines after the first line.  Any
indentation in the first line of the docstring (i.e., up to the first
newline) is insignificant and removed.  Relative indentation of later
lines in the docstring is retained.  Blank lines should be removed
from the beginning and end of the docstring.

Since code is much more precise than words, here is an implementation
of the algorithm:

.. code-block:: py

    def trim(docstring):
        if not docstring:
            return ''
        # Convert tabs to spaces (following the normal Python rules)
        # and split into a list of lines:
        lines = docstring.expandtabs().splitlines()
        # Determine minimum indentation (first line doesn't count):
        indent = sys.maxint
        for line in lines[1:]:
            stripped = line.lstrip()
            if stripped:
                indent = min(indent, len(line) - len(stripped))
        # Remove indentation (first line is special):
        trimmed = [lines[0].strip()]
        if indent < sys.maxint:
            for line in lines[1:]:
                trimmed.append(line[indent:].rstrip())
        # Strip off trailing and leading blank lines:
        while trimmed and not trimmed[-1]:
            trimmed.pop()
        while trimmed and not trimmed[0]:
            trimmed.pop(0)
        # Return a single string:
        return '\n'.join(trimmed)

The docstring in this example contains two newline characters and is
therefore 3 lines long.  The first and last lines are blank:

.. code-block:: py

    def foo():
        """
        This is the second line of the docstring.
        """

To illustrate::

    >>> print repr(foo.__doc__)
    '\n    This is the second line of the docstring.\n    '
    >>> foo.__doc__.splitlines()
    ['', '    This is the second line of the docstring.', '    ']
    >>> trim(foo.__doc__)
    'This is the second line of the docstring.'

Once trimmed, these docstrings are equivalent:

.. code-block:: py

    def foo():
        """A multi-line
        docstring.
        """

    def bar():
        """
        A multi-line
        docstring.
        """


References and Footnotes
========================

.. [1] PEP 256, Docstring Processing System Framework, Goodger
   (http://www.python.org/peps/pep-0256.html)

.. [2] PEP 258, Docutils Design Specification, Goodger
   (http://www.python.org/peps/pep-0258.html)

.. [3] Guido van Rossum, Python's creator and Benevolent Dictator For
   Life.

.. _Docutils: https://docutils.sourceforge.io/

.. _Python Style Guide:
   http://www.python.org/doc/essays/styleguide.html

.. _Doc-SIG: http://www.python.org/sigs/doc-sig/


Copyright
=========

This document has been placed in the public domain.


Acknowledgements
================

The "Specification" text comes mostly verbatim from the `Python Style
Guide`_ essay by Guido van Rossum.

This document borrows ideas from the archives of the Python Doc-SIG_.
Thanks to all members past and present.




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   fill-column: 70
   sentence-end-double-space: t
   End:


/Part 3. 057.📜 docutils-0.20.1/docs/peps/pep-0258.txt

:PEP: 258
:Title: Docutils Design Specification
:Version: $Revision: 8995 $
:Last-Modified: $Date: 2022-01-29 23:26:10 +0100 (Sa, 29. Jän 2022) $
:Author: David Goodger <goodger@python.org>
:Discussions-To: <doc-sig@python.org>
:Status: Rejected
:Type: Standards Track
:Content-Type: text/x-rst
:Requires: 256, 257
:Created: 31-May-2001
:Post-History: 13-Jun-2001


================
Rejection Notice
================

While this may serve as an interesting design document for the
now-independent docutils, it is no longer slated for inclusion in the
standard library.


==========
 Abstract
==========

This PEP documents design issues and implementation details for
Docutils, a Python Docstring Processing System (DPS).  The rationale
and high-level concepts of a DPS are documented in PEP 256, "Docstring
Processing System Framework" [#PEP-256]_.  Also see PEP 256 for a
"Road Map to the Docstring PEPs".

Docutils is being designed modularly so that any of its components can
be replaced easily.  In addition, Docutils is not limited to the
processing of Python docstrings; it processes standalone documents as
well, in several contexts.

No changes to the core Python language are required by this PEP.  Its
deliverables consist of a package for the standard library and its
documentation.


===============
 Specification
===============

Docutils Project Model
======================

Project components and data flow::

                     .---------------------------.
                     |        Docutils:          |
                     | docutils.core.Publisher,  |
                     | docutils.core.publish_*() |
                     +---------------------------+
                      /            |            \
                     /             |             \
            1,3,5   /        6     |              \ 7
           +--------+       +-------------+       +--------+
           | READER | ----> | TRANSFORMER | ====> | WRITER |
           +--------+       +-------------+       +--------+
            /     \\                                  |
           /       \\                                 |
     2    /      4  \\                             8  |
    +-------+   +--------+                        +--------+
    | INPUT |   | PARSER |                        | OUTPUT |
    +-------+   +--------+                        +--------+

The numbers above each component indicate the path a document's data
takes.  Double-width lines between Reader & Parser and between
Transformer & Writer indicate that data sent along these paths should
be standard (pure & unextended) Docutils doc trees.  Single-width
lines signify that internal tree extensions or completely unrelated
representations are possible, but they must be supported at both ends.


Publisher
---------

The ``docutils.core`` module contains a "Publisher" facade class and
several convenience functions: "publish_cmdline()" (for command-line
front ends), "publish_file()" (for programmatic use with file-like
I/O), and "publish_string()" (for programmatic use with string I/O).
The Publisher class encapsulates the high-level logic of a Docutils
system.  The Publisher class has overall responsibility for
processing, controlled by the ``Publisher.publish()`` method:

1. Set up internal settings (may include config files & command-line
   options) and I/O objects.

2. Call the Reader object to read data from the source Input object
   and parse the data with the Parser object.  A document object is
   returned.

3. Set up and apply transforms via the Transformer object attached to
   the document.

4. Call the Writer object which translates the document to the final
   output format and writes the formatted data to the destination
   Output object.  Depending on the Output object, the output may be
   returned from the Writer, and then from the ``publish()`` method.

Calling the "publish" function (or instantiating a "Publisher" object)
with component names will result in default behavior.  For custom
behavior (customizing component settings), create custom component
objects first, and pass *them* to the Publisher or ``publish_*``
convenience functions.


Readers
-------

Readers understand the input context (where the data is coming from),
send the whole input or discrete "chunks" to the parser, and provide
the context to bind the chunks together back into a cohesive whole.

Each reader is a module or package exporting a "Reader" class with a
"read" method.  The base "Reader" class can be found in the
``docutils/readers/__init__.py`` module.

Most Readers will have to be told what parser to use.  So far (see the
list of examples below), only the Python Source Reader ("PySource";
still incomplete) will be able to determine the parser on its own.

Responsibilities:

* Get input text from the source I/O.

* Pass the input text to the parser, along with a fresh `document
  tree`_ root.

Examples:

* Standalone (Raw/Plain): Just read a text file and process it.
  The reader needs to be told which parser to use.

  The "Standalone Reader" has been implemented in module
  ``docutils.readers.standalone``.

* Python Source: See `Python Source Reader`_ below.  This Reader is
  currently in development in the Docutils sandbox.

* Email: RFC-822 headers, quoted excerpts, signatures, MIME parts.

* PEP: RFC-822 headers, "PEP xxxx" and "RFC xxxx" conversion to URIs.
  The "PEP Reader" has been implemented in module
  ``docutils.readers.pep``; see PEP 287 and PEP 12.

* Wiki: Global reference lookups of "wiki links" incorporated into
  transforms.  (CamelCase only or unrestricted?)  Lazy
  indentation?

* Web Page: As standalone, but recognize meta fields as meta tags.
  Support for templates of some sort?  (After ``<body>``, before
  ``</body>``?)

* FAQ: Structured "question & answer(s)" constructs.

* Compound document: Merge chapters into a book.  Master manifest
  file?


Parsers
-------

Parsers analyze their input and produce a Docutils `document tree`_.
They don't know or care anything about the source or destination of
the data.

Each input parser is a module or package exporting a "Parser" class
with a "parse" method.  The base "Parser" class can be found in the
``docutils/parsers/__init__.py`` module.

Responsibilities: Given raw input text and a doctree root node,
populate the doctree by parsing the input text.

Example: The only parser implemented so far is for the
reStructuredText markup.  It is implemented in the
``docutils/parsers/rst/`` package.

The development and integration of other parsers is possible and
encouraged.


.. _transforms:

Transformer
-----------

The Transformer class, in ``docutils/transforms/__init__.py``, stores
transforms and applies them to documents.  A transformer object is
attached to every new document tree.  The Publisher_ calls
``Transformer.apply_transforms()`` to apply all stored transforms to
the document tree.  Transforms change the document tree from one form
to another, add to the tree, or prune it.  Transforms resolve
references and footnote numbers, process interpreted text, and do
other context-sensitive processing.

Some transforms are specific to components (Readers, Parser, Writers,
Input, Output).  Standard component-specific transforms are specified
in the ``default_transforms`` attribute of component classes.  After
the Reader has finished processing, the Publisher_ calls
``Transformer.populate_from_components()`` with a list of components
and all default transforms are stored.

Each transform is a class in a module in the ``docutils/transforms/``
package, a subclass of ``docutils.tranforms.Transform``.  Transform
classes each have a ``default_priority`` attribute which is used by
the Transformer to apply transforms in order (low to high).  The
default priority can be overridden when adding transforms to the
Transformer object.

Transformer responsibilities:

* Apply transforms to the document tree, in priority order.

* Store a mapping of component type name ('reader', 'writer', etc.) to
  component objects.  These are used by certain transforms (such as
  "components.Filter") to determine suitability.

Transform responsibilities:

* Modify a doctree in-place, either purely transforming one structure
  into another, or adding new structures based on the doctree and/or
  external data.

Examples of transforms (in the ``docutils/transforms/`` package):

* frontmatter.DocInfo: Conversion of document metadata (bibliographic
  information).

* references.AnonymousHyperlinks: Resolution of anonymous references
  to corresponding targets.

* parts.Contents: Generates a table of contents for a document.

* document.Merger: Combining multiple populated doctrees into one.
  (Not yet implemented or fully understood.)

* document.Splitter: Splits a document into a tree-structure of
  subdocuments, perhaps by section.  It will have to transform
  references appropriately.  (Neither implemented not remotely
  understood.)

* components.Filter: Includes or excludes elements which depend on a
  specific Docutils component.


Writers
-------

Writers produce the final output (HTML, XML, TeX, etc.).  Writers
translate the internal `document tree`_ structure into the final data
format, possibly running Writer-specific transforms_ first.

By the time the document gets to the Writer, it should be in final
form.  The Writer's job is simply (and only) to translate from the
Docutils doctree structure to the target format.  Some small
transforms may be required, but they should be local and
format-specific.

Each writer is a module or package exporting a "Writer" class with a
"write" method.  The base "Writer" class can be found in the
``docutils/writers/__init__.py`` module.

Responsibilities:

* Translate doctree(s) into specific output formats.

  - Transform references into format-native forms.

* Write the translated output to the destination I/O.

Examples:

* XML: Various forms, such as:

  - Docutils XML (an expression of the internal document tree,
    implemented as ``docutils.writers.docutils_xml``).

  - DocBook (being implemented in the Docutils sandbox).

* HTML (XHTML 1.4 transitional implemented as ``docutils.writers.html4css1``).

* PDF (a ReportLabs interface is being developed in the Docutils
  sandbox).

* LaTeX (implemented as ``docutils.writers.latex2e``).

* Docutils-native pseudo-XML (implemented as
  ``docutils.writers.pseudoxml``, used for testing).

* Plain text

* reStructuredText?


Input/Output
------------

I/O classes provide a uniform API for low-level input and output.
Subclasses will exist for a variety of input/output mechanisms.
However, they can be considered an implementation detail.  Most
applications should be satisfied using one of the convenience
functions associated with the Publisher_.

I/O classes are currently in the preliminary stages; there's a lot of
work yet to be done.  Issues:

* How to represent multi-file input (files & directories) in the API?

* How to represent multi-file output?  Perhaps "Writer" variants, one
  for each output distribution type?  Or Output objects with
  associated transforms?

Responsibilities:

* Read data from the input source (Input objects) or write data to the
  output destination (Output objects).

Examples of input sources:

* A single file on disk or a stream (implemented as
  ``docutils.io.FileInput``).

* Multiple files on disk (``MultiFileInput``?).

* Python source files: modules and packages.

* Python strings, as received from a client application
  (implemented as ``docutils.io.StringInput``).

Examples of output destinations:

* A single file on disk or a stream (implemented as
  ``docutils.io.FileOutput``).

* A tree of directories and files on disk.

* A Python string, returned to a client application (implemented as
  ``docutils.io.StringOutput``).

* No output; useful for programmatic applications where only a portion
  of the normal output is to be used (implemented as
  ``docutils.io.NullOutput``).

* A single tree-shaped data structure in memory.

* Some other set of data structures in memory.


Docutils Package Structure
==========================

* Package "docutils".

  - Module "__init__.py" contains: class "Component", a base class for
    Docutils components; class "SettingsSpec", a base class for
    specifying runtime settings (used by docutils.frontend); and class
    "TransformSpec", a base class for specifying transforms.

  - Module "docutils.core" contains facade class "Publisher" and
    convenience functions.  See `Publisher`_ above.

  - Module "docutils.frontend" provides runtime settings support, for
    programmatic use and front-end tools (including configuration file
    support, and command-line argument and option processing).

  - Module "docutils.io" provides a uniform API for low-level input
    and output.  See `Input/Output`_ above.

  - Module "docutils.nodes" contains the Docutils document tree
    element class library plus tree-traversal Visitor pattern base
    classes.  See `Document Tree`_ below.

  - Module "docutils.statemachine" contains a finite state machine
    specialized for regular-expression-based text filters and parsers.
    The reStructuredText parser implementation is based on this
    module.

  - Module "docutils.urischemes" contains a mapping of known URI
    schemes ("http", "ftp", "mail", etc.).

  - Module "docutils.utils" contains utility functions and classes,
    including a logger class ("Reporter"; see `Error Handling`_
    below).

  - Package "docutils.parsers": markup parsers_.

    - Function "get_parser_class(parser_name)" returns a parser module
      by name.  Class "Parser" is the base class of specific parsers.
      (``docutils/parsers/__init__.py``)

    - Package "docutils.parsers.rst": the reStructuredText parser.

    - Alternate markup parsers may be added.

    See `Parsers`_ above.

  - Package "docutils.readers": context-aware input readers.

    - Function "get_reader_class(reader_name)" returns a reader module
      by name or alias.  Class "Reader" is the base class of specific
      readers.  (``docutils/readers/__init__.py``)

    - Module "docutils.readers.standalone" reads independent document
      files.

    - Module "docutils.readers.pep" reads PEPs (Python Enhancement
      Proposals).

    - Module "docutils.readers.doctree" is used to re-read a
      previously stored document tree for reprocessing.

    - Readers to be added for: Python source code (structure &
      docstrings), email, FAQ, and perhaps Wiki and others.

    See `Readers`_ above.

  - Package "docutils.writers": output format writers.

    - Function "get_writer_class(writer_name)" returns a writer module
      by name.  Class "Writer" is the base class of specific writers.
      (``docutils/writers/__init__.py``)

    - Package "docutils.writers.html4css1" is a simple HyperText
      Markup Language document tree writer for HTML 4.01 and CSS1.

    - Package "docutils.writers.pep_html" generates HTML from
      reStructuredText PEPs.

    - Package "docutils.writers.s5_html" generates S5/HTML slide
      shows.

    - Package "docutils.writers.latex2e" writes LaTeX.

    - Package "docutils.writers.newlatex2e" also writes LaTeX; it is a
      new implementation.

    - Module "docutils.writers.docutils_xml" writes the internal
      document tree in XML form.

    - Module "docutils.writers.pseudoxml" is a simple internal
      document tree writer; it writes indented pseudo-XML.

    - Module "docutils.writers.null" is a do-nothing writer; it is
      used for specialized purposes such as storing the internal
      document tree.

    - Writers to be added: HTML 3.2 or 4.01-loose, XML (various forms,
      such as DocBook), PDF, plaintext, reStructuredText, and perhaps
      others.

    Subpackages of "docutils.writers" contain modules and data files
    (such as stylesheets) that support the individual writers.

    See `Writers`_ above.

  - Package "docutils.transforms": tree transform classes.

    - Class "Transformer" stores transforms and applies them to
      document trees.  (``docutils/transforms/__init__.py``)

    - Class "Transform" is the base class of specific transforms.
      (``docutils/transforms/__init__.py``)

    - Each module contains related transform classes.

    See `Transforms`_ above.

  - Package "docutils.languages": Language modules contain
    language-dependent strings and mappings.  They are named for their
    language identifier (as defined in `Choice of Docstring Format`_
    below), converting dashes to underscores.

    - Function "get_language(language_code)", returns matching
      language module.  (``docutils/languages/__init__.py``)

    - Modules: en.py (English), de.py (German), fr.py (French), it.py
      (Italian), sk.py (Slovak), sv.py (Swedish).

    - Other languages to be added.

* Third-party modules: "extras" directory.  These modules are
  installed only if they're not already present in the Python
  installation.

  - ``extras/roman.py`` contains Roman numeral conversion routines.


Front-End Tools
===============

The ``tools/`` directory contains several front ends for common
Docutils processing.  See `Docutils Front-End Tools`_ for details.

.. _Docutils Front-End Tools:
   https://docutils.sourceforge.io/docs/user/tools.html


Document Tree
=============

A single intermediate data structure is used internally by Docutils,
in the interfaces between components; it is defined in the
``docutils.nodes`` module.  It is not required that this data
structure be used *internally* by any of the components, just
*between* components as outlined in the diagram in the `Docutils
Project Model`_ above.

Custom node types are allowed, provided that either (a) a transform
converts them to standard Docutils nodes before they reach the Writer
proper, or (b) the custom node is explicitly supported by certain
Writers, and is wrapped in a filtered "pending" node.  An example of
condition (a) is the `Python Source Reader`_ (see below), where a
"stylist" transform converts custom nodes.  The HTML ``<meta>`` tag is
an example of condition (b); it is supported by the HTML Writer but
not by others.  The reStructuredText "meta" directive creates a
"pending" node, which contains knowledge that the embedded "meta" node
can only be handled by HTML-compatible writers.  The "pending" node is
resolved by the ``docutils.transforms.components.Filter`` transform,
which checks that the calling writer supports HTML; if it doesn't, the
"pending" node (and enclosed "meta" node) is removed from the
document.

The document tree data structure is similar to a DOM tree, but with
specific node names (classes) instead of DOM's generic nodes. The
schema is documented in an XML DTD (eXtensible Markup Language
Document Type Definition), which comes in two parts:

* the Docutils Generic DTD, docutils.dtd_, and

* the OASIS Exchange Table Model, soextbl.dtd_.

The DTD defines a rich set of elements, suitable for many input and
output formats.  The DTD retains all information necessary to
reconstruct the original input text, or a reasonable facsimile
thereof.

See `The Docutils Document Tree`_ for details (incomplete).


Error Handling
==============

When the parser encounters an error in markup, it inserts a system
message (DTD element "system_message").  There are five levels of
system messages:

* Level-0, "DEBUG": an internal reporting issue.  There is no effect
  on the processing.  Level-0 system messages are handled separately
  from the others.

* Level-1, "INFO": a minor issue that can be ignored.  There is little
  or no effect on the processing.  Typically level-1 system messages
  are not reported.

* Level-2, "WARNING": an issue that should be addressed.  If ignored,
  there may be minor problems with the output.  Typically level-2
  system messages are reported but do not halt processing.

* Level-3, "ERROR": a major issue that should be addressed.  If
  ignored, the output will contain unpredictable errors.  Typically
  level-3 system messages are reported but do not halt processing.

* Level-4, "SEVERE": a critical error that must be addressed.
  Typically level-4 system messages are turned into exceptions which
  do halt processing.  If ignored, the output will contain severe
  errors.

Although the initial message levels were devised independently, they
have a strong correspondence to `VMS error condition severity
levels`_; the names in quotes for levels 1 through 4 were borrowed
from VMS.  Error handling has since been influenced by the `log4j
project`_.


Python Source Reader
====================

The Python Source Reader ("PySource") is the Docutils component that
reads Python source files, extracts docstrings in context, then
parses, links, and assembles the docstrings into a cohesive whole.  It
is a major and non-trivial component, currently under experimental
development in the Docutils sandbox.  High-level design issues are
presented here.


Processing Model
----------------

This model will evolve over time, incorporating experience and
discoveries.

1. The PySource Reader uses an Input class to read in Python packages
   and modules, into a tree of strings.

2. The Python modules are parsed, converting the tree of strings into
   a tree of abstract syntax trees with docstring nodes.

3. The abstract syntax trees are converted into an internal
   representation of the packages/modules.  Docstrings are extracted,
   as well as code structure details.  See `AST Mining`_ below.
   Namespaces are constructed for lookup in step 6.

4. One at a time, the docstrings are parsed, producing standard
   Docutils doctrees.

5. PySource assembles all the individual docstrings' doctrees into a
   Python-specific custom Docutils tree paralleling the
   package/module/class structure; this is a custom Reader-specific
   internal representation (see the `Docutils Python Source DTD`_).
   Namespaces must be merged: Python identifiers, hyperlink targets.

6. Cross-references from docstrings (interpreted text) to Python
   identifiers are resolved according to the Python namespace lookup
   rules.  See `Identifier Cross-References`_ below.

7. A "Stylist" transform is applied to the custom doctree (by the
   Transformer_), custom nodes are rendered using standard nodes as
   primitives, and a standard document tree is emitted.  See `Stylist
   Transforms`_ below.

8. Other transforms are applied to the standard doctree by the
   Transformer_.

9. The standard doctree is sent to a Writer, which translates the
   document into a concrete format (HTML, PDF, etc.).

10. The Writer uses an Output class to write the resulting data to its
    destination (disk file, directories and files, etc.).


AST Mining
----------

Abstract Syntax Tree mining code will be written (or adapted) that
scans a parsed Python module, and returns an ordered tree containing
the names, docstrings (including attribute and additional docstrings;
see below), and additional info (in parentheses below) of all of the
following objects:

* packages
* modules
* module attributes (+ initial values)
* classes (+ inheritance)
* class attributes (+ initial values)
* instance attributes (+ initial values)
* methods (+ parameters & defaults)
* functions (+ parameters & defaults)

(Extract comments too?  For example, comments at the start of a module
would be a good place for bibliographic field lists.)

In order to evaluate interpreted text cross-references, namespaces for
each of the above will also be required.

See the python-dev/docstring-develop thread "AST mining", started on
2001-08-14.


Docstring Extraction Rules
--------------------------

1. What to examine:

   a) If the "``__all__``" variable is present in the module being
      documented, only identifiers listed in "``__all__``" are
      examined for docstrings.

   b) In the absence of "``__all__``", all identifiers are examined,
      except those whose names are private (names begin with "_" but
      don't begin and end with "__").

   c) 1a and 1b can be overridden by runtime settings.

2. Where:

   Docstrings are string literal expressions, and are recognized in
   the following places within Python modules:

   a) At the beginning of a module, function definition, class
      definition, or method definition, after any comments.  This is
      the standard for Python ``__doc__`` attributes.

   b) Immediately following a simple assignment at the top level of a
      module, class definition, or ``__init__`` method definition,
      after any comments.  See `Attribute Docstrings`_ below.

   c) Additional string literals found immediately after the
      docstrings in (a) and (b) will be recognized, extracted, and
      concatenated.  See `Additional Docstrings`_ below.

   d) @@@ 2.2-style "properties" with attribute docstrings?  Wait for
      syntax?

3. How:

   Whenever possible, Python modules should be parsed by Docutils, not
   imported.  There are several reasons:

   - Importing untrusted code is inherently insecure.

   - Information from the source is lost when using introspection to
     examine an imported module, such as comments and the order of
     definitions.

   - Docstrings are to be recognized in places where the byte-code
     compiler ignores string literal expressions (2b and 2c above),
     meaning importing the module will lose these docstrings.

   Of course, standard Python parsing tools such as the "parser"
   library module should be used.

   When the Python source code for a module is not available
   (i.e. only the ``.pyc`` file exists) or for C extension modules, to
   access docstrings the module can only be imported, and any
   limitations must be lived with.

Since attribute docstrings and additional docstrings are ignored by
the Python byte-code compiler, no namespace pollution or runtime bloat
will result from their use.  They are not assigned to ``__doc__`` or
to any other attribute.  The initial parsing of a module may take a
slight performance hit.


Attribute Docstrings
~~~~~~~~~~~~~~~~~~~~

(This is a simplified version of PEP 224 [#PEP-224]_.)

A string literal immediately following an assignment statement is
interpreted by the docstring extraction machinery as the docstring of
the target of the assignment statement, under the following
conditions:

1. The assignment must be in one of the following contexts:

   a) At the top level of a module (i.e., not nested inside a compound
      statement such as a loop or conditional): a module attribute.

   b) At the top level of a class definition: a class attribute.

   c) At the top level of the "``__init__``" method definition of a
      class: an instance attribute.  Instance attributes assigned in
      other methods are assumed to be implementation details.  (@@@
      ``__new__`` methods?)

   d) A function attribute assignment at the top level of a module or
      class definition.

   Since each of the above contexts are at the top level (i.e., in the
   outermost suite of a definition), it may be necessary to place
   dummy assignments for attributes assigned conditionally or in a
   loop.

2. The assignment must be to a single target, not to a list or a tuple
   of targets.

3. The form of the target:

   a) For contexts 1a and 1b above, the target must be a simple
      identifier (not a dotted identifier, a subscripted expression,
      or a sliced expression).

   b) For context 1c above, the target must be of the form
      "``self.attrib``", where "``self``" matches the "``__init__``"
      method's first parameter (the instance parameter) and "attrib"
      is a simple identifier as in 3a.

   c) For context 1d above, the target must be of the form
      "``name.attrib``", where "``name``" matches an already-defined
      function or method name and "attrib" is a simple identifier as
      in 3a.

Blank lines may be used after attribute docstrings to emphasize the
connection between the assignment and the docstring.

Examples::

    g = 'module attribute (module-global variable)'
    """This is g's docstring."""

    class AClass:

        c = 'class attribute'
        """This is AClass.c's docstring."""

        def __init__(self):
            """Method __init__'s docstring."""

            self.i = 'instance attribute'
            """This is self.i's docstring."""

    def f(x):
        """Function f's docstring."""
        return x**2

    f.a = 1
    """Function attribute f.a's docstring."""


Additional Docstrings
~~~~~~~~~~~~~~~~~~~~~

(This idea was adapted from PEP 216 [#PEP-216]_.)

Many programmers would like to make extensive use of docstrings for
API documentation.  However, docstrings do take up space in the
running program, so some programmers are reluctant to "bloat up" their
code.  Also, not all API documentation is applicable to interactive
environments, where ``__doc__`` would be displayed.

Docutils' docstring extraction tools will concatenate all string
literal expressions which appear at the beginning of a definition or
after a simple assignment.  Only the first strings in definitions will
be available as ``__doc__``, and can be used for brief usage text
suitable for interactive sessions; subsequent string literals and all
attribute docstrings are ignored by the Python byte-code compiler and
may contain more extensive API information.

Example:

.. code-block:: py

    def function(arg):
        """This is __doc__, function's docstring."""
        """
        This is an additional docstring, ignored by the byte-code
        compiler, but extracted by Docutils.
        """
        pass

.. topic:: Issue: ``from __future__ import``

   This would break "``from __future__ import``" statements introduced
   in Python 2.1 for multiple module docstrings (main docstring plus
   additional docstring(s)).  The Python Reference Manual specifies:

       A future statement must appear near the top of the module.  The
       only lines that can appear before a future statement are:

       * the module docstring (if any),
       * comments,
       * blank lines, and
       * other future statements.

   Resolution?

   1. Should we search for docstrings after a ``__future__``
      statement?  Very ugly.

   2. Redefine ``__future__`` statements to allow multiple preceding
      string literals?

   3. Or should we not even worry about this?  There probably
      shouldn't be ``__future__`` statements in production code, after
      all.  Perhaps modules with ``__future__`` statements will simply
      have to put up with the single-docstring limitation.


Choice of Docstring Format
--------------------------

Rather than force everyone to use a single docstring format, multiple
input formats are allowed by the processing system.  A special
variable, ``__docformat__``, may appear at the top level of a module
before any function or class definitions.  Over time or through
decree, a standard format or set of formats should emerge.

A module's ``__docformat__`` variable only applies to the objects
defined in the module's file.  In particular, the ``__docformat__``
variable in a package's ``__init__.py`` file does not apply to objects
defined in subpackages and submodules.

The ``__docformat__`` variable is a string containing the name of the
format being used, a case-insensitive string matching the input
parser's module or package name (i.e., the same name as required to
"import" the module or package), or a registered alias.  If no
``__docformat__`` is specified, the default format is "plaintext" for
now; this may be changed to the standard format if one is ever
established.

The ``__docformat__`` string may contain an optional second field,
separated from the format name (first field) by a single space: a
case-insensitive language identifier as defined in RFC 1766.  A
typical language identifier consists of a 2-letter language code from
`ISO 639`_ (3-letter codes used only if no 2-letter code exists; RFC
1766 is currently being revised to allow 3-letter codes).  If no
language identifier is specified, the default is "en" for English.
The language identifier is passed to the parser and can be used for
language-dependent markup features.


Identifier Cross-References
---------------------------

In Python docstrings, interpreted text is used to classify and mark up
program identifiers, such as the names of variables, functions,
classes, and modules.  If the identifier alone is given, its role is
inferred implicitly according to the Python namespace lookup rules.
For functions and methods (even when dynamically assigned),
parentheses ('()') may be included::

    This function uses `another()` to do its work.

For class, instance and module attributes, dotted identifiers are used
when necessary.  For example (using reStructuredText markup):

.. code-block:: py

    class Keeper(Storer):

        """
        Extend `Storer`.  Class attribute `instances` keeps track
        of the number of `Keeper` objects instantiated.
        """

        instances = 0
        """How many `Keeper` objects are there?"""

        def __init__(self):
            """
            Extend `Storer.__init__()` to keep track of instances.

            Keep count in `Keeper.instances`, data in `self.data`.
            """
            Storer.__init__(self)
            Keeper.instances += 1

            self.data = []
            """Store data in a list, most recent last."""

        def store_data(self, data):
            """
            Extend `Storer.store_data()`; append new `data` to a
            list (in `self.data`).
            """
            self.data = data

Each of the identifiers quoted with backquotes ("`") will become
references to the definitions of the identifiers themselves.


Stylist Transforms
------------------

Stylist transforms are specialized transforms specific to the PySource
Reader.  The PySource Reader doesn't have to make any decisions as to
style; it just produces a logically constructed document tree, parsed
and linked, including custom node types.  Stylist transforms
understand the custom nodes created by the Reader and convert them
into standard Docutils nodes.

Multiple Stylist transforms may be implemented and one can be chosen
at runtime (through a "--style" or "--stylist" command-line option).
Each Stylist transform implements a different layout or style; thus
the name.  They decouple the context-understanding part of the Reader
from the layout-generating part of processing, resulting in a more
flexible and robust system.  This also serves to "separate style from
content", the SGML/XML ideal.

By keeping the piece of code that does the styling small and modular,
it becomes much easier for people to roll their own styles.  The
"barrier to entry" is too high with existing tools; extracting the
stylist code will lower the barrier considerably.


==========================
 References and Footnotes
==========================

.. [#PEP-256] PEP 256, Docstring Processing System Framework, Goodger
   (http://www.python.org/peps/pep-0256.html)

.. [#PEP-224] PEP 224, Attribute Docstrings, Lemburg
   (http://www.python.org/peps/pep-0224.html)

.. [#PEP-216] PEP 216, Docstring Format, Zadka
   (http://www.python.org/peps/pep-0216.html)

.. _docutils.dtd:
   https://docutils.sourceforge.io/docs/ref/docutils.dtd

.. _soextbl.dtd:
   https://docutils.sourceforge.io/docs/ref/soextblx.dtd

.. _The Docutils Document Tree:
   https://docutils.sourceforge.io/docs/ref/doctree.html

.. _VMS error condition severity levels:
   http://www.openvms.compaq.com:8000/73final/5841/841pro_027.html
   #error_cond_severity

.. _log4j project: http://logging.apache.org/log4j/docs/index.html

.. _Docutils Python Source DTD:
   https://docutils.sourceforge.io/docs/dev/pysource.dtd

.. _ISO 639: http://www.loc.gov/standards/iso639-2/englangn.html

.. _Python Doc-SIG: http://www.python.org/sigs/doc-sig/



==================
 Project Web Site
==================

A SourceForge project has been set up for this work at
https://docutils.sourceforge.io/.


===========
 Copyright
===========

This document has been placed in the public domain.


==================
 Acknowledgements
==================

This document borrows ideas from the archives of the `Python
Doc-SIG`_.  Thanks to all members past & present.




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 058.📜 docutils-0.20.1/docs/peps/pep-0287.txt

:PEP: 287
:Title: reStructuredText Docstring Format
:Version: $Revision: 8956 $
:Last-Modified: $Date: 2022-01-20 11:11:44 +0100 (Do, 20. Jän 2022) $
:Author: David Goodger <goodger@python.org>
:Discussions-To: <doc-sig@python.org>
:Status: Draft
:Type: Informational
:Content-Type: text/x-rst
:Created: 25-Mar-2002
:Post-History: 02-Apr-2002
:Replaces: 216


Abstract
========

When plaintext hasn't been expressive enough for inline documentation,
Python programmers have sought out a format for docstrings.  This PEP
proposes that the `reStructuredText markup`_ be adopted as a standard
markup format for structured plaintext documentation in Python
docstrings, and for PEPs and ancillary documents as well.
reStructuredText is a rich and extensible yet easy-to-read,
what-you-see-is-what-you-get plaintext markup syntax.

Only the low-level syntax of docstrings is addressed here.  This PEP
is not concerned with docstring semantics or processing at all (see
PEP 256 for a "Road Map to the Docstring PEPs").  Nor is it an attempt
to deprecate pure plaintext docstrings, which are always going to be
legitimate.  The reStructuredText markup is an alternative for those
who want more expressive docstrings.


Benefits
========

Programmers are by nature a lazy breed.  We reuse code with functions,
classes, modules, and subsystems.  Through its docstring syntax,
Python allows us to document our code from within.  The "holy grail"
of the Python Documentation Special Interest Group (Doc-SIG_) has been
a markup syntax and toolset to allow auto-documentation, where the
docstrings of Python systems can be extracted in context and processed
into useful, high-quality documentation for multiple purposes.

Document markup languages have three groups of customers: the authors
who write the documents, the software systems that process the data,
and the readers, who are the final consumers and the most important
group.  Most markups are designed for the authors and software
systems; readers are only meant to see the processed form, either on
paper or via browser software.  ReStructuredText is different: it is
intended to be easily readable in source form, without prior knowledge
of the markup.  ReStructuredText is entirely readable in plaintext
format, and many of the markup forms match common usage (e.g.,
``*emphasis*``), so it reads quite naturally.  Yet it is rich enough
to produce complex documents, and extensible so that there are few
limits.  Of course, to write reStructuredText documents some prior
knowledge is required.

The markup offers functionality and expressivity, while maintaining
easy readability in the source text.  The processed form (HTML etc.)
makes it all accessible to readers: inline live hyperlinks; live links
to and from footnotes; automatic tables of contents (with live
links!); tables; images for diagrams etc.; pleasant, readable styled
text.

The reStructuredText parser is available now, part of the Docutils_
project.  Standalone reStructuredText documents and PEPs can be
converted to HTML; other output format writers are being worked on and
will become available over time.  Work is progressing on a Python
source "Reader" which will implement auto-documentation from
docstrings.  Authors of existing auto-documentation tools are
encouraged to integrate the reStructuredText parser into their
projects, or better yet, to join forces to produce a world-class
toolset for the Python standard library.

Tools will become available in the near future, which will allow
programmers to generate HTML for online help, XML for multiple
purposes, and eventually PDF, DocBook, and LaTeX for printed
documentation, essentially "for free" from the existing docstrings.
The adoption of a standard will, at the very least, benefit docstring
processing tools by preventing further "reinventing the wheel".

Eventually PyDoc, the one existing standard auto-documentation tool,
could have reStructuredText support added.  In the interim it will
have no problem with reStructuredText markup, since it treats all
docstrings as preformatted plaintext.


Goals
=====

These are the generally accepted goals for a docstring format, as
discussed in the Doc-SIG:

1. It must be readable in source form by the casual observer.

2. It must be easy to type with any standard text editor.

3. It must not need to contain information which can be deduced from
   parsing the module.

4. It must contain sufficient information (structure) so it can be
   converted to any reasonable markup format.

5. It must be possible to write a module's entire documentation in
   docstrings, without feeling hampered by the markup language.

reStructuredText meets and exceeds all of these goals, and sets its
own goals as well, even more stringent.  See `Docstring-Significant
Features`_ below.

The goals of this PEP are as follows:

1. To establish reStructuredText as a standard structured plaintext
   format for docstrings (inline documentation of Python modules and
   packages), PEPs, README-type files and other standalone documents.
   "Accepted" status will be sought through Python community consensus
   and eventual BDFL pronouncement.

   Please note that reStructuredText is being proposed as *a*
   standard, not *the only* standard.  Its use will be entirely
   optional.  Those who don't want to use it need not.

2. To solicit and address any related concerns raised by the Python
   community.

3. To encourage community support.  As long as multiple competing
   markups are out there, the development community remains fractured.
   Once a standard exists, people will start to use it, and momentum
   will inevitably gather.

4. To consolidate efforts from related auto-documentation projects.
   It is hoped that interested developers will join forces and work on
   a joint/merged/common implementation.

Once reStructuredText is a Python standard, effort can be focused on
tools instead of arguing for a standard.  Python needs a standard set
of documentation tools.

With regard to PEPs, one or both of the following strategies may be
applied:

a) Keep the existing PEP section structure constructs (one-line
   section headers, indented body text).  Subsections can either be
   forbidden, or supported with reStructuredText-style underlined
   headers in the indented body text.

b) Replace the PEP section structure constructs with the
   reStructuredText syntax.  Section headers will require underlines,
   subsections will be supported out of the box, and body text need
   not be indented (except for block quotes).

Strategy (b) is recommended, and its implementation is complete.

Support for RFC 2822 headers has been added to the reStructuredText
parser for PEPs (unambiguous given a specific context: the first
contiguous block of the document).  It may be desired to concretely
specify what over/underline styles are allowed for PEP section
headers, for uniformity.


Rationale
=========

The lack of a standard syntax for docstrings has hampered the
development of standard tools for extracting and converting docstrings
into documentation in standard formats (e.g., HTML, DocBook, TeX).
There have been a number of proposed markup formats and variations,
and many tools tied to these proposals, but without a standard
docstring format they have failed to gain a strong following and/or
floundered half-finished.

Throughout the existence of the Doc-SIG, consensus on a single
standard docstring format has never been reached.  A lightweight,
implicit markup has been sought, for the following reasons (among
others):

1. Docstrings written within Python code are available from within the
   interactive interpreter, and can be "print"ed.  Thus the use of
   plaintext for easy readability.

2. Programmers want to add structure to their docstrings, without
   sacrificing raw docstring readability.  Unadorned plaintext cannot
   be transformed ("up-translated") into useful structured formats.

3. Explicit markup (like XML or TeX) is widely considered unreadable
   by the uninitiated.

4. Implicit markup is aesthetically compatible with the clean and
   minimalist Python syntax.

Many alternative markups for docstrings have been proposed on the
Doc-SIG over the years; a representative sample is listed below.  Each
is briefly analyzed in terms of the goals stated above.  Please note
that this is *not* intended to be an exclusive list of all existing
markup systems; there are many other markups (Texinfo, Doxygen, TIM,
YODL, AFT, ...) which are not mentioned.

- XML_, SGML_, DocBook_, HTML_, XHTML_

  XML and SGML are explicit, well-formed meta-languages suitable for
  all kinds of documentation.  XML is a variant of SGML.  They are
  best used behind the scenes, because to untrained eyes they are
  verbose, difficult to type, and too cluttered to read comfortably as
  source.  DocBook, HTML, and XHTML are all applications of SGML
  and/or XML, and all share the same basic syntax and the same
  shortcomings.

- TeX_

  TeX is similar to XML/SGML in that it's explicit, but not very easy
  to write, and not easy for the uninitiated to read.

- `Perl POD`_

  Most Perl modules are documented in a format called POD (Plain Old
  Documentation).  This is an easy-to-type, very low level format with
  strong integration with the Perl parser.  Many tools exist to turn
  POD documentation into other formats: info, HTML and man pages,
  among others.  However, the POD syntax takes after Perl itself in
  terms of readability.

- JavaDoc_

  Special comments before Java classes and functions serve to document
  the code.  A program to extract these, and turn them into HTML
  documentation is called javadoc, and is part of the standard Java
  distribution.  However, JavaDoc has a very intimate relationship
  with HTML, using HTML tags for most markup.  Thus it shares the
  readability problems of HTML.

- Setext_, StructuredText_

  Early on, variants of Setext (Structure Enhanced Text), including
  Zope Corp's StructuredText, were proposed for Python docstring
  formatting.  Hereafter these variants will collectively be called
  "STexts".  STexts have the advantage of being easy to read without
  special knowledge, and relatively easy to write.

  Although used by some (including in most existing Python
  auto-documentation tools), until now STexts have failed to become
  standard because:

  - STexts have been incomplete.  Lacking "essential" constructs that
    people want to use in their docstrings, STexts are rendered less
    than ideal.  Note that these "essential" constructs are not
    universal; everyone has their own requirements.

  - STexts have been sometimes surprising.  Bits of text are
    unexpectedly interpreted as being marked up, leading to user
    frustration.

  - SText implementations have been buggy.

  - Most STexts have have had no formal specification except for the
    implementation itself.  A buggy implementation meant a buggy spec,
    and vice-versa.

  - There has been no mechanism to get around the SText markup rules
    when a markup character is used in a non-markup context.  In other
    words, no way to escape markup.

Proponents of implicit STexts have vigorously opposed proposals for
explicit markup (XML, HTML, TeX, POD, etc.), and the debates have
continued off and on since 1996 or earlier.

reStructuredText is a complete revision and reinterpretation of the
SText idea, addressing all of the problems listed above.


Specification
=============

The specification and user documentaton for reStructuredText is
quite extensive.  Rather than repeating or summarizing it all
here, links to the originals are provided.

Please first take a look at `A ReStructuredText Primer`_, a short and
gentle introduction.  The `Quick reStructuredText`_ user reference
quickly summarizes all of the markup constructs.  For complete and
extensive details, please refer to the following documents:

- `An Introduction to reStructuredText`_

- `reStructuredText Markup Specification`_

- `reStructuredText Directives`_

In addition, `Problems With StructuredText`_ explains many markup
decisions made with regards to StructuredText, and `A Record of
reStructuredText Syntax Alternatives`_ records markup decisions made
independently.


Docstring-Significant Features
==============================

- A markup escaping mechanism.

  Backslashes (``\``) are used to escape markup characters when needed
  for non-markup purposes.  However, the inline markup recognition
  rules have been constructed in order to minimize the need for
  backslash-escapes.  For example, although asterisks are used for
  *emphasis*, in non-markup contexts such as "*" or "(*)" or "x * y",
  the asterisks are not interpreted as markup and are left unchanged.
  For many non-markup uses of backslashes (e.g., describing regular
  expressions), inline literals or literal blocks are applicable; see
  the next item.

- Markup to include Python source code and Python interactive
  sessions: inline literals, literal blocks, and doctest blocks.

  Inline literals use ``double-backquotes`` to indicate program I/O or
  code snippets.  No markup interpretation (including backslash-escape
  [``\``] interpretation) is done within inline literals.

  Literal blocks (block-level literal text, such as code excerpts or
  ASCII graphics) are indented, and indicated with a double-colon
  ("::") at the end of the preceding paragraph (right here -->)::

      if literal_block:
          text = 'is left as-is'
          spaces_and_linebreaks = 'are preserved'
          markup_processing = None

  Doctest blocks begin with ">>> " and end with a blank line.  Neither
  indentation nor literal block double-colons are required.  For
  example::

      Here's a doctest block:

      >>> print 'Python-specific usage examples; begun with ">>>"'
      Python-specific usage examples; begun with ">>>"
      >>> print '(cut and pasted from interactive sessions)'
      (cut and pasted from interactive sessions)

- Markup that isolates a Python identifier: interpreted text.

  Text enclosed in single backquotes is recognized as "interpreted
  text", whose interpretation is application-dependent.  In the
  context of a Python docstring, the default interpretation of
  interpreted text is as Python identifiers.  The text will be marked
  up with a hyperlink connected to the documentation for the
  identifier given.  Lookup rules are the same as in Python itself:
  LGB namespace lookups (local, global, builtin).  The "role" of the
  interpreted text (identifying a class, module, function, etc.) is
  determined implicitly from the namespace lookup.  For example:

  .. code-block:: py

      class Keeper(Storer):

          """
          Keep data fresher longer.

          Extend `Storer`.  Class attribute `instances` keeps track
          of the number of `Keeper` objects instantiated.
          """

          instances = 0
          """How many `Keeper` objects are there?"""

          def __init__(self):
              """
              Extend `Storer.__init__()` to keep track of
              instances.  Keep count in `self.instances` and data
              in `self.data`.
              """
              Storer.__init__(self)
              self.instances += 1

              self.data = []
              """Store data in a list, most recent last."""

          def storedata(self, data):
              """
              Extend `Storer.storedata()`; append new `data` to a
              list (in `self.data`).
              """
              self.data = data

  Each piece of interpreted text is looked up according to the local
  namespace of the block containing its docstring.

- Markup that isolates a Python identifier and specifies its type:
  interpreted text with roles.

  Although the Python source context reader is designed not to require
  explicit roles, they may be used.  To classify identifiers
  explicitly, the role is given along with the identifier in either
  prefix or suffix form::

      Use :method:`Keeper.storedata` to store the object's data in
      `Keeper.data`:instance_attribute:.

  The syntax chosen for roles is verbose, but necessarily so (if
  anyone has a better alternative, please post it to the Doc-SIG_).
  The intention of the markup is that there should be little need to
  use explicit roles; their use is to be kept to an absolute minimum.

- Markup for "tagged lists" or "label lists": field lists.

  Field lists represent a mapping from field name to field body.
  These are mostly used for extension syntax, such as "bibliographic
  field lists" (representing document metadata such as author, date,
  and version) and extension attributes for directives (see below).
  They may be used to implement methodologies (docstring semantics),
  such as identifying parameters, exceptions raised, etc.; such usage
  is beyond the scope of this PEP.

  A modified RFC 2822 syntax is used, with a colon *before* as well as
  *after* the field name.  Field bodies are more versatile as well;
  they may contain multiple field bodies (even nested field lists).
  For example::

      :Date: 2002-03-22
      :Version: 1
      :Authors:
          - Me
          - Myself
          - I

  Standard RFC 2822 header syntax cannot be used for this construct
  because it is ambiguous.  A word followed by a colon at the
  beginning of a line is common in written text.

- Markup extensibility: directives and substitutions.

  Directives are used as an extension mechanism for reStructuredText,
  a way of adding support for new block-level constructs without
  adding new syntax.  Directives for images, admonitions (note,
  caution, etc.), and tables of contents generation (among others)
  have been implemented.  For example, here's how to place an image::

      .. image:: mylogo.png

  Substitution definitions allow the power and flexibility of
  block-level directives to be shared by inline text.  For example::

      The |biohazard| symbol must be used on containers used to
      dispose of medical waste.

      .. |biohazard| image:: biohazard.png

- Section structure markup.

  Section headers in reStructuredText use adornment via underlines
  (and possibly overlines) rather than indentation.  For example::

      This is a Section Title
      =======================

      This is a Subsection Title
      --------------------------

      This paragraph is in the subsection.

      This is Another Section Title
      =============================

      This paragraph is in the second section.


Questions & Answers
===================

1. Is reStructuredText rich enough?

   Yes, it is for most people.  If it lacks some construct that is
   required for a specific application, it can be added via the
   directive mechanism.  If a useful and common construct has been
   overlooked and a suitably readable syntax can be found, it can be
   added to the specification and parser.

2. Is reStructuredText *too* rich?

   For specific applications or individuals, perhaps.  In general, no.

   Since the very beginning, whenever a docstring markup syntax has
   been proposed on the Doc-SIG_, someone has complained about the
   lack of support for some construct or other.  The reply was often
   something like, "These are docstrings we're talking about, and
   docstrings shouldn't have complex markup."  The problem is that a
   construct that seems superfluous to one person may be absolutely
   essential to another.

   reStructuredText takes the opposite approach: it provides a rich
   set of implicit markup constructs (plus a generic extension
   mechanism for explicit markup), allowing for all kinds of
   documents.  If the set of constructs is too rich for a particular
   application, the unused constructs can either be removed from the
   parser (via application-specific overrides) or simply omitted by
   convention.

3. Why not use indentation for section structure, like StructuredText
   does?  Isn't it more "Pythonic"?

   Guido van Rossum wrote the following in a 2001-06-13 Doc-SIG post:

       I still think that using indentation to indicate sectioning is
       wrong.  If you look at how real books and other print
       publications are laid out, you'll notice that indentation is
       used frequently, but mostly at the intra-section level.
       Indentation can be used to offset lists, tables, quotations,
       examples, and the like.  (The argument that docstrings are
       different because they are input for a text formatter is wrong:
       the whole point is that they are also readable without
       processing.)

       I reject the argument that using indentation is Pythonic: text
       is not code, and different traditions and conventions hold.
       People have been presenting text for readability for over 30
       centuries.  Let's not innovate needlessly.

   See `Section Structure via Indentation`__ in `Problems With
   StructuredText`_ for further elaboration.

   __ https://docutils.sourceforge.io/docs/dev/rst/problems.html
      #section-structure-via-indentation

4. Why use reStructuredText for PEPs?  What's wrong with the existing
   standard?

   The existing standard for PEPs is very limited in terms of general
   expressibility, and referencing is especially lacking for such a
   reference-rich document type.  PEPs are currently converted into
   HTML, but the results (mostly monospaced text) are less than
   attractive, and most of the value-added potential of HTML
   (especially inline hyperlinks) is untapped.

   Making reStructuredText a standard markup for PEPs will enable much
   richer expression, including support for section structure, inline
   markup, graphics, and tables.  In several PEPs there are ASCII
   graphics diagrams, which are all that plaintext documents can
   support.  Since PEPs are made available in HTML form, the ability
   to include proper diagrams would be immediately useful.

   Current PEP practices allow for reference markers in the form "[1]"
   in the text, and the footnotes/references themselves are listed in
   a section toward the end of the document.  There is currently no
   hyperlinking between the reference marker and the
   footnote/reference itself (it would be possible to add this to
   pep2html.py, but the "markup" as it stands is ambiguous and
   mistakes would be inevitable).  A PEP with many references (such as
   this one ;-) requires a lot of flipping back and forth.  When
   revising a PEP, often new references are added or unused references
   deleted.  It is painful to renumber the references, since it has to
   be done in two places and can have a cascading effect (insert a
   single new reference 1, and every other reference has to be
   renumbered; always adding new references to the end is suboptimal).
   It is easy for references to go out of sync.

   PEPs use references for two purposes: simple URL references and
   footnotes.  reStructuredText differentiates between the two.  A PEP
   might contain references like this::

       Abstract

           This PEP proposes adding frungible doodads [1] to the core.
           It extends PEP 9876 [2] via the BCA [3] mechanism.

       ...

       References and Footnotes

           [1] http://www.example.org/

           [2] PEP 9876, Let's Hope We Never Get Here
               http://www.python.org/peps/pep-9876.html

           [3] "Bogus Complexity Addition"

   Reference 1 is a simple URL reference.  Reference 2 is a footnote
   containing text and a URL.  Reference 3 is a footnote containing
   text only.  Rewritten using reStructuredText, this PEP could look
   like this::

       Abstract
       ========

       This PEP proposes adding `frungible doodads`_ to the core.  It
       extends PEP 9876 [#pep9876]_ via the BCA [#]_ mechanism.

       ...

       References & Footnotes
       ======================

       .. _frungible doodads: http://www.example.org/

       .. [#pep9876] PEP 9876, Let's Hope We Never Get Here

       .. [#] "Bogus Complexity Addition"

   URLs and footnotes can be defined close to their references if
   desired, making them easier to read in the source text, and making
   the PEPs easier to revise.  The "References and Footnotes" section
   can be auto-generated with a document tree transform.  Footnotes
   from throughout the PEP would be gathered and displayed under a
   standard header.  If URL references should likewise be written out
   explicitly (in citation form), another tree transform could be
   used.

   URL references can be named ("frungible doodads"), and can be
   referenced from multiple places in the document without additional
   definitions.  When converted to HTML, references will be replaced
   with inline hyperlinks (HTML <a> tags).  The two footnotes are
   automatically numbered, so they will always stay in sync.  The
   first footnote also contains an internal reference name, "pep9876",
   so it's easier to see the connection between reference and footnote
   in the source text.  Named footnotes can be referenced multiple
   times, maintaining consistent numbering.

   The "#pep9876" footnote could also be written in the form of a
   citation::

       It extends PEP 9876 [PEP9876]_ ...

       .. [PEP9876] PEP 9876, Let's Hope We Never Get Here

   Footnotes are numbered, whereas citations use text for their
   references.

5. Wouldn't it be better to keep the docstring and PEP proposals
   separate?

   The PEP markup proposal may be removed if it is deemed that there
   is no need for PEP markup, or it could be made into a separate PEP.
   If accepted, PEP 1, PEP Purpose and Guidelines [#PEP-1]_, and PEP
   9, Sample PEP Template [#PEP-9]_ will be updated.

   It seems natural to adopt a single consistent markup standard for
   all uses of structured plaintext in Python, and to propose it all
   in one place.

6. The existing pep2html.py script converts the existing PEP format to
   HTML.  How will the new-format PEPs be converted to HTML?

   A new version of pep2html.py with integrated reStructuredText
   parsing has been completed.  The Docutils project supports PEPs
   with a "PEP Reader" component, including all functionality
   currently in pep2html.py (auto-recognition of PEP & RFC references,
   email masking, etc.).

7. Who's going to convert the existing PEPs to reStructuredText?

   PEP authors or volunteers may convert existing PEPs if they like,
   but there is no requirement to do so.  The reStructuredText-based
   PEPs will coexist with the old PEP standard.  The pep2html.py
   mentioned in answer 6 processes both old and new standards.

8. Why use reStructuredText for README and other ancillary files?

   The reasoning given for PEPs in answer 4 above also applies to
   README and other ancillary files.  By adopting a standard markup,
   these files can be converted to attractive cross-referenced HTML
   and put up on python.org.  Developers of other projects can also
   take advantage of this facility for their own documentation.

9. Won't the superficial similarity to existing markup conventions
   cause problems, and result in people writing invalid markup (and
   not noticing, because the plaintext looks natural)?  How forgiving
   is reStructuredText of "not quite right" markup?

   There will be some mis-steps, as there would be when moving from
   one programming language to another.  As with any language,
   proficiency grows with experience.  Luckily, reStructuredText is a
   very little language indeed.

   As with any syntax, there is the possibility of syntax errors.  It
   is expected that a user will run the processing system over their
   input and check the output for correctness.

   In a strict sense, the reStructuredText parser is very unforgiving
   (as it should be; "In the face of ambiguity, refuse the temptation
   to guess" [#Zen]_ applies to parsing markup as well as computer
   languages).  Here's design goal 3 from `An Introduction to
   reStructuredText`_:

       Unambiguous.  The rules for markup must not be open for
       interpretation.  For any given input, there should be one and
       only one possible output (including error output).

   While unforgiving, at the same time the parser does try to be
   helpful by producing useful diagnostic output ("system messages").
   The parser reports problems, indicating their level of severity
   (from least to most: debug, info, warning, error, severe).  The
   user or the client software can decide on reporting thresholds;
   they can ignore low-level problems or cause high-level problems to
   bring processing to an immediate halt.  Problems are reported
   during the parse as well as included in the output, often with
   two-way links between the source of the problem and the system
   message explaining it.

10. Will the docstrings in the Python standard library modules be
    converted to reStructuredText?

    No.  Python's library reference documentation is maintained
    separately from the source.  Docstrings in the Python standard
    library should not try to duplicate the library reference
    documentation.  The current policy for docstrings in the Python
    standard library is that they should be no more than concise
    hints, simple and markup-free (although many *do* contain ad-hoc
    implicit markup).

11. I want to write all my strings in Unicode.  Will anything
    break?

    The parser fully supports Unicode.  Docutils supports arbitrary
    input and output encodings.

12. Why does the community need a new structured text design?

    The existing structured text designs are deficient, for the
    reasons given in "Rationale" above.  reStructuredText aims to be a
    complete markup syntax, within the limitations of the "readable
    plaintext" medium.

13. What is wrong with existing documentation methodologies?

    What existing methodologies?  For Python docstrings, there is
    **no** official standard markup format, let alone a documentation
    methodology akin to JavaDoc.  The question of methodology is at a
    much higher level than syntax (which this PEP addresses).  It is
    potentially much more controversial and difficult to resolve, and
    is intentionally left out of this discussion.


References & Footnotes
======================

.. [#PEP-1] PEP 1, PEP Guidelines, Warsaw, Hylton
   (http://www.python.org/peps/pep-0001.html)

.. [#PEP-9] PEP 9, Sample PEP Template, Warsaw
   (http://www.python.org/peps/pep-0009.html)

.. [#Zen] From `The Zen of Python (by Tim Peters)`__ (or just
   "``import this``" in Python)

__ http://www.python.org/doc/Humor.html#zen

.. [#PEP-216] PEP 216, Docstring Format, Zadka
   (http://www.python.org/peps/pep-0216.html)

.. _reStructuredText markup: https://docutils.sourceforge.io/rst.html

.. _Doc-SIG: http://www.python.org/sigs/doc-sig/

.. _XML: http://www.w3.org/XML/

.. _SGML: http://www.oasis-open.org/cover/general.html

.. _DocBook: http://docbook.org/tdg/en/html/docbook.html

.. _HTML: http://www.w3.org/MarkUp/

.. _XHTML: http://www.w3.org/MarkUp/#xhtml1

.. _TeX: http://www.tug.org/interest.html

.. _Perl POD: http://perldoc.perl.org/perlpod.html

.. _JavaDoc: http://java.sun.com/j2se/javadoc/

.. _Setext: https://docutils.sourceforge.io/mirror/setext.html

.. _StructuredText:
   http://www.zope.org/DevHome/Members/jim/StructuredTextWiki/FrontPage

.. _A ReStructuredText Primer:
   https://docutils.sourceforge.io/docs/user/rst/quickstart.html

.. _Quick reStructuredText:
   https://docutils.sourceforge.io/docs/user/rst/quickref.html

.. _An Introduction to reStructuredText:
   https://docutils.sourceforge.io/docs/ref/rst/introduction.html

.. _reStructuredText Markup Specification:
   https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html

.. _reStructuredText Directives:
   https://docutils.sourceforge.io/docs/ref/rst/directives.html

.. _Problems with StructuredText:
   https://docutils.sourceforge.io/docs/dev/rst/problems.html

.. _A Record of reStructuredText Syntax Alternatives:
   https://docutils.sourceforge.io/docs/dev/rst/alternatives.html

.. _Docutils: https://docutils.sourceforge.io/


Copyright
=========

This document has been placed in the public domain.


Acknowledgements
================

Some text is borrowed from PEP 216, Docstring Format [#PEP-216]_, by
Moshe Zadka.

Special thanks to all members past & present of the Python Doc-SIG_.




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 3. 059.📜 docutils-0.20.1/docs/header.txt

.. code-block:: text

  .. Minimal menu bar for inclusion in documentation sources
     in ``docutils/docs/*/`` sub-diretories.

     Attention: this is not a standalone document.

  .. header::
     Docutils__ | Overview__ | About__ | Users__ | Reference__ | Developers__

     __ https://docutils.sourceforge.io
     __ ../index.html
     __ ../index.html#project-fundamentals
     __ ../index.html#user
     __ ../index.html#ref
     __ ../index.html#howto


/Part 3. 060.📜 docutils-0.20.1/docs/header0.txt

.. code-block:: text


  .. Minimal menu bar for inclusion in documentation sources
     in the ``docutils/`` parent diretory.

     Attention: this is not a standalone document.

  .. header::
     Docutils__ | Overview__ | About__ | Users__ | Reference__ | Developers__

     __ https://docutils.sourceforge.io
     __ docs/index.html
     __ docs/index.html#project-fundamentals
     __ docs/index.html#user
     __ docs/index.html#ref
     __ docs/index.html#howto


/Part 3. 061.📜 docutils-0.20.1/docs/header2.txt

.. code-block:: text


  .. Minimal menu bar for inclusion in documentation sources
     in ``docutils/docs/*/`` sub-sub-diretories.

     Attention: this is not a standalone document.

  .. header::
     Docutils__ | Overview__ | About__ | Users__ | Reference__ | Developers__

     __ https://docutils.sourceforge.io

     __ ../../index.html
     __ ../../index.html#project-fundamentals
     __ ../../index.html#user
     __ ../../index.html#ref
     __ ../../index.html#howto


/Part 4. 062.📜 docutils-0.20.1/docutils.conf

.. code-block::

  # These entries affect all processing:
  [general]
  source-link: yes
  datestamp: %Y-%m-%d %H:%M UTC
  generator: on

  # These entries affect HTML output:
  [html writers]
  embed-stylesheet: no

  [html4css1 writer]
  stylesheet-path: docutils/writers/html4css1/html4css1.css
  field-name-limit: 20

  [html5 writer]
  math-output: MathML
  # MathML will become the default for HTML5 in Docutils 0.22
  stylesheet-dirs: docutils/writers/html5_polyglot/
  stylesheet-path: minimal.css, responsive.css
  section-self-link: yes
  table-style: colwidths-grid

  [buildhtml application]
  writer: html5
  # Prevent tools/buildhtml.py from processing certain text files.
  ignore: GPL2.txt:header.txt:header0.txt:header2.txt:cheatsheet.txt
  prune: .svn:.hg:build:dist:docs/.svn:docutils:docutils.egg-info:licenses:test:tools


/Part 4. 063.📜 docutils-0.20.1/docutils/docutils.conf

.. code-block::

  # This configuration file is to prevent tools/buildhtml.py from
  # processing text files in and below this directory.

  [buildhtml application]
  prune: .


/Part 4. 064.📜 docutils-0.20.1/docutils/parsers/rst/include/README.txt

============================================
 ``docutils/parsers/rst/include`` Directory
============================================

This directory contains standard data files intended for inclusion in
reStructuredText documents.  To access these files, use the "include"
directive with the special syntax for standard "include" data files,
angle brackets around the file name::

    .. include:: <isonum.txt>

See the documentation for the `"include" directive`__ and
`reStructuredText Standard Definition Files`__ for
details.

__ https://docutils.sourceforge.io/docs/ref/rst/directives.html#include
__ https://docutils.sourceforge.io/docs/ref/rst/definitions.html


/Part 4. 065.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsa.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |angzarr|  unicode:: U+0237C .. RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW
  .. |cirmid|   unicode:: U+02AEF .. VERTICAL LINE WITH CIRCLE ABOVE
  .. |cudarrl|  unicode:: U+02938 .. RIGHT-SIDE ARC CLOCKWISE ARROW
  .. |cudarrr|  unicode:: U+02935 .. ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS
  .. |cularr|   unicode:: U+021B6 .. ANTICLOCKWISE TOP SEMICIRCLE ARROW
  .. |cularrp|  unicode:: U+0293D .. TOP ARC ANTICLOCKWISE ARROW WITH PLUS
  .. |curarr|   unicode:: U+021B7 .. CLOCKWISE TOP SEMICIRCLE ARROW
  .. |curarrm|  unicode:: U+0293C .. TOP ARC CLOCKWISE ARROW WITH MINUS
  .. |Darr|     unicode:: U+021A1 .. DOWNWARDS TWO HEADED ARROW
  .. |dArr|     unicode:: U+021D3 .. DOWNWARDS DOUBLE ARROW
  .. |darr2|    unicode:: U+021CA .. DOWNWARDS PAIRED ARROWS
  .. |ddarr|    unicode:: U+021CA .. DOWNWARDS PAIRED ARROWS
  .. |DDotrahd| unicode:: U+02911 .. RIGHTWARDS ARROW WITH DOTTED STEM
  .. |dfisht|   unicode:: U+0297F .. DOWN FISH TAIL
  .. |dHar|     unicode:: U+02965 .. DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT
  .. |dharl|    unicode:: U+021C3 .. DOWNWARDS HARPOON WITH BARB LEFTWARDS
  .. |dharr|    unicode:: U+021C2 .. DOWNWARDS HARPOON WITH BARB RIGHTWARDS
  .. |dlarr|    unicode:: U+02199 .. SOUTH WEST ARROW
  .. |drarr|    unicode:: U+02198 .. SOUTH EAST ARROW
  .. |duarr|    unicode:: U+021F5 .. DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW
  .. |duhar|    unicode:: U+0296F .. DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT
  .. |dzigrarr| unicode:: U+027FF .. LONG RIGHTWARDS SQUIGGLE ARROW
  .. |erarr|    unicode:: U+02971 .. EQUALS SIGN ABOVE RIGHTWARDS ARROW
  .. |hArr|     unicode:: U+021D4 .. LEFT RIGHT DOUBLE ARROW
  .. |harr|     unicode:: U+02194 .. LEFT RIGHT ARROW
  .. |harrcir|  unicode:: U+02948 .. LEFT RIGHT ARROW THROUGH SMALL CIRCLE
  .. |harrw|    unicode:: U+021AD .. LEFT RIGHT WAVE ARROW
  .. |hoarr|    unicode:: U+021FF .. LEFT RIGHT OPEN-HEADED ARROW
  .. |imof|     unicode:: U+022B7 .. IMAGE OF
  .. |lAarr|    unicode:: U+021DA .. LEFTWARDS TRIPLE ARROW
  .. |Larr|     unicode:: U+0219E .. LEFTWARDS TWO HEADED ARROW
  .. |larr2|    unicode:: U+021C7 .. LEFTWARDS PAIRED ARROWS
  .. |larrbfs|  unicode:: U+0291F .. LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND
  .. |larrfs|   unicode:: U+0291D .. LEFTWARDS ARROW TO BLACK DIAMOND
  .. |larrhk|   unicode:: U+021A9 .. LEFTWARDS ARROW WITH HOOK
  .. |larrlp|   unicode:: U+021AB .. LEFTWARDS ARROW WITH LOOP
  .. |larrpl|   unicode:: U+02939 .. LEFT-SIDE ARC ANTICLOCKWISE ARROW
  .. |larrsim|  unicode:: U+02973 .. LEFTWARDS ARROW ABOVE TILDE OPERATOR
  .. |larrtl|   unicode:: U+021A2 .. LEFTWARDS ARROW WITH TAIL
  .. |lAtail|   unicode:: U+0291B .. LEFTWARDS DOUBLE ARROW-TAIL
  .. |latail|   unicode:: U+02919 .. LEFTWARDS ARROW-TAIL
  .. |lBarr|    unicode:: U+0290E .. LEFTWARDS TRIPLE DASH ARROW
  .. |lbarr|    unicode:: U+0290C .. LEFTWARDS DOUBLE DASH ARROW
  .. |ldca|     unicode:: U+02936 .. ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS
  .. |ldrdhar|  unicode:: U+02967 .. LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN
  .. |ldrushar| unicode:: U+0294B .. LEFT BARB DOWN RIGHT BARB UP HARPOON
  .. |ldsh|     unicode:: U+021B2 .. DOWNWARDS ARROW WITH TIP LEFTWARDS
  .. |lfisht|   unicode:: U+0297C .. LEFT FISH TAIL
  .. |lHar|     unicode:: U+02962 .. LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN
  .. |lhard|    unicode:: U+021BD .. LEFTWARDS HARPOON WITH BARB DOWNWARDS
  .. |lharu|    unicode:: U+021BC .. LEFTWARDS HARPOON WITH BARB UPWARDS
  .. |lharul|   unicode:: U+0296A .. LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH
  .. |llarr|    unicode:: U+021C7 .. LEFTWARDS PAIRED ARROWS
  .. |llhard|   unicode:: U+0296B .. LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH
  .. |loarr|    unicode:: U+021FD .. LEFTWARDS OPEN-HEADED ARROW
  .. |lrarr|    unicode:: U+021C6 .. LEFTWARDS ARROW OVER RIGHTWARDS ARROW
  .. |lrarr2|   unicode:: U+021C6 .. LEFTWARDS ARROW OVER RIGHTWARDS ARROW
  .. |lrhar|    unicode:: U+021CB .. LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON
  .. |lrhar2|   unicode:: U+021CB .. LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON
  .. |lrhard|   unicode:: U+0296D .. RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH
  .. |lsh|      unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS
  .. |lurdshar| unicode:: U+0294A .. LEFT BARB UP RIGHT BARB DOWN HARPOON
  .. |luruhar|  unicode:: U+02966 .. LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP
  .. |Map|      unicode:: U+02905 .. RIGHTWARDS TWO-HEADED ARROW FROM BAR
  .. |map|      unicode:: U+021A6 .. RIGHTWARDS ARROW FROM BAR
  .. |midcir|   unicode:: U+02AF0 .. VERTICAL LINE WITH CIRCLE BELOW
  .. |mumap|    unicode:: U+022B8 .. MULTIMAP
  .. |nearhk|   unicode:: U+02924 .. NORTH EAST ARROW WITH HOOK
  .. |neArr|    unicode:: U+021D7 .. NORTH EAST DOUBLE ARROW
  .. |nearr|    unicode:: U+02197 .. NORTH EAST ARROW
  .. |nesear|   unicode:: U+02928 .. NORTH EAST ARROW AND SOUTH EAST ARROW
  .. |nhArr|    unicode:: U+021CE .. LEFT RIGHT DOUBLE ARROW WITH STROKE
  .. |nharr|    unicode:: U+021AE .. LEFT RIGHT ARROW WITH STROKE
  .. |nlArr|    unicode:: U+021CD .. LEFTWARDS DOUBLE ARROW WITH STROKE
  .. |nlarr|    unicode:: U+0219A .. LEFTWARDS ARROW WITH STROKE
  .. |nrArr|    unicode:: U+021CF .. RIGHTWARDS DOUBLE ARROW WITH STROKE
  .. |nrarr|    unicode:: U+0219B .. RIGHTWARDS ARROW WITH STROKE
  .. |nrarrc|   unicode:: U+02933 U+00338 .. WAVE ARROW POINTING DIRECTLY RIGHT with slash
  .. |nrarrw|   unicode:: U+0219D U+00338 .. RIGHTWARDS WAVE ARROW with slash
  .. |nvHarr|   unicode:: U+02904 .. LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE
  .. |nvlArr|   unicode:: U+02902 .. LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE
  .. |nvrArr|   unicode:: U+02903 .. RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE
  .. |nwarhk|   unicode:: U+02923 .. NORTH WEST ARROW WITH HOOK
  .. |nwArr|    unicode:: U+021D6 .. NORTH WEST DOUBLE ARROW
  .. |nwarr|    unicode:: U+02196 .. NORTH WEST ARROW
  .. |nwnear|   unicode:: U+02927 .. NORTH WEST ARROW AND NORTH EAST ARROW
  .. |olarr|    unicode:: U+021BA .. ANTICLOCKWISE OPEN CIRCLE ARROW
  .. |orarr|    unicode:: U+021BB .. CLOCKWISE OPEN CIRCLE ARROW
  .. |origof|   unicode:: U+022B6 .. ORIGINAL OF
  .. |rAarr|    unicode:: U+021DB .. RIGHTWARDS TRIPLE ARROW
  .. |Rarr|     unicode:: U+021A0 .. RIGHTWARDS TWO HEADED ARROW
  .. |rarr2|    unicode:: U+021C9 .. RIGHTWARDS PAIRED ARROWS
  .. |rarrap|   unicode:: U+02975 .. RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO
  .. |rarrbfs|  unicode:: U+02920 .. RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND
  .. |rarrc|    unicode:: U+02933 .. WAVE ARROW POINTING DIRECTLY RIGHT
  .. |rarrfs|   unicode:: U+0291E .. RIGHTWARDS ARROW TO BLACK DIAMOND
  .. |rarrhk|   unicode:: U+021AA .. RIGHTWARDS ARROW WITH HOOK
  .. |rarrlp|   unicode:: U+021AC .. RIGHTWARDS ARROW WITH LOOP
  .. |rarrpl|   unicode:: U+02945 .. RIGHTWARDS ARROW WITH PLUS BELOW
  .. |rarrsim|  unicode:: U+02974 .. RIGHTWARDS ARROW ABOVE TILDE OPERATOR
  .. |Rarrtl|   unicode:: U+02916 .. RIGHTWARDS TWO-HEADED ARROW WITH TAIL
  .. |rarrtl|   unicode:: U+021A3 .. RIGHTWARDS ARROW WITH TAIL
  .. |rarrw|    unicode:: U+0219D .. RIGHTWARDS WAVE ARROW
  .. |rAtail|   unicode:: U+0291C .. RIGHTWARDS DOUBLE ARROW-TAIL
  .. |ratail|   unicode:: U+0291A .. RIGHTWARDS ARROW-TAIL
  .. |RBarr|    unicode:: U+02910 .. RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW
  .. |rBarr|    unicode:: U+0290F .. RIGHTWARDS TRIPLE DASH ARROW
  .. |rbarr|    unicode:: U+0290D .. RIGHTWARDS DOUBLE DASH ARROW
  .. |rdca|     unicode:: U+02937 .. ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS
  .. |rdldhar|  unicode:: U+02969 .. RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN
  .. |rdsh|     unicode:: U+021B3 .. DOWNWARDS ARROW WITH TIP RIGHTWARDS
  .. |rfisht|   unicode:: U+0297D .. RIGHT FISH TAIL
  .. |rHar|     unicode:: U+02964 .. RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN
  .. |rhard|    unicode:: U+021C1 .. RIGHTWARDS HARPOON WITH BARB DOWNWARDS
  .. |rharu|    unicode:: U+021C0 .. RIGHTWARDS HARPOON WITH BARB UPWARDS
  .. |rharul|   unicode:: U+0296C .. RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH
  .. |rlarr|    unicode:: U+021C4 .. RIGHTWARDS ARROW OVER LEFTWARDS ARROW
  .. |rlarr2|   unicode:: U+021C4 .. RIGHTWARDS ARROW OVER LEFTWARDS ARROW
  .. |rlhar|    unicode:: U+021CC .. RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON
  .. |rlhar2|   unicode:: U+021CC .. RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON
  .. |roarr|    unicode:: U+021FE .. RIGHTWARDS OPEN-HEADED ARROW
  .. |rrarr|    unicode:: U+021C9 .. RIGHTWARDS PAIRED ARROWS
  .. |rsh|      unicode:: U+021B1 .. UPWARDS ARROW WITH TIP RIGHTWARDS
  .. |ruluhar|  unicode:: U+02968 .. RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP
  .. |searhk|   unicode:: U+02925 .. SOUTH EAST ARROW WITH HOOK
  .. |seArr|    unicode:: U+021D8 .. SOUTH EAST DOUBLE ARROW
  .. |searr|    unicode:: U+02198 .. SOUTH EAST ARROW
  .. |seswar|   unicode:: U+02929 .. SOUTH EAST ARROW AND SOUTH WEST ARROW
  .. |simrarr|  unicode:: U+02972 .. TILDE OPERATOR ABOVE RIGHTWARDS ARROW
  .. |slarr|    unicode:: U+02190 .. LEFTWARDS ARROW
  .. |srarr|    unicode:: U+02192 .. RIGHTWARDS ARROW
  .. |swarhk|   unicode:: U+02926 .. SOUTH WEST ARROW WITH HOOK
  .. |swArr|    unicode:: U+021D9 .. SOUTH WEST DOUBLE ARROW
  .. |swarr|    unicode:: U+02199 .. SOUTH WEST ARROW
  .. |swnwar|   unicode:: U+0292A .. SOUTH WEST ARROW AND NORTH WEST ARROW
  .. |Uarr|     unicode:: U+0219F .. UPWARDS TWO HEADED ARROW
  .. |uArr|     unicode:: U+021D1 .. UPWARDS DOUBLE ARROW
  .. |uarr2|    unicode:: U+021C8 .. UPWARDS PAIRED ARROWS
  .. |Uarrocir| unicode:: U+02949 .. UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE
  .. |udarr|    unicode:: U+021C5 .. UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW
  .. |udhar|    unicode:: U+0296E .. UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT
  .. |ufisht|   unicode:: U+0297E .. UP FISH TAIL
  .. |uHar|     unicode:: U+02963 .. UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT
  .. |uharl|    unicode:: U+021BF .. UPWARDS HARPOON WITH BARB LEFTWARDS
  .. |uharr|    unicode:: U+021BE .. UPWARDS HARPOON WITH BARB RIGHTWARDS
  .. |uuarr|    unicode:: U+021C8 .. UPWARDS PAIRED ARROWS
  .. |vArr|     unicode:: U+021D5 .. UP DOWN DOUBLE ARROW
  .. |varr|     unicode:: U+02195 .. UP DOWN ARROW
  .. |xhArr|    unicode:: U+027FA .. LONG LEFT RIGHT DOUBLE ARROW
  .. |xharr|    unicode:: U+027F7 .. LONG LEFT RIGHT ARROW
  .. |xlArr|    unicode:: U+027F8 .. LONG LEFTWARDS DOUBLE ARROW
  .. |xlarr|    unicode:: U+027F5 .. LONG LEFTWARDS ARROW
  .. |xmap|     unicode:: U+027FC .. LONG RIGHTWARDS ARROW FROM BAR
  .. |xrArr|    unicode:: U+027F9 .. LONG RIGHTWARDS DOUBLE ARROW
  .. |xrarr|    unicode:: U+027F6 .. LONG RIGHTWARDS ARROW
  .. |zigrarr|  unicode:: U+021DD .. RIGHTWARDS SQUIGGLE ARROW


/Part 4. 066.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsb.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |ac|       unicode:: U+0223E .. INVERTED LAZY S
  .. |acE|      unicode:: U+0223E U+00333 .. INVERTED LAZY S with double underline
  .. |amalg|    unicode:: U+02A3F .. AMALGAMATION OR COPRODUCT
  .. |barvee|   unicode:: U+022BD .. NOR
  .. |Barwed|   unicode:: U+02306 .. PERSPECTIVE
  .. |barwed|   unicode:: U+02305 .. PROJECTIVE
  .. |bsolb|    unicode:: U+029C5 .. SQUARED FALLING DIAGONAL SLASH
  .. |Cap|      unicode:: U+022D2 .. DOUBLE INTERSECTION
  .. |capand|   unicode:: U+02A44 .. INTERSECTION WITH LOGICAL AND
  .. |capbrcup| unicode:: U+02A49 .. INTERSECTION ABOVE BAR ABOVE UNION
  .. |capcap|   unicode:: U+02A4B .. INTERSECTION BESIDE AND JOINED WITH INTERSECTION
  .. |capcup|   unicode:: U+02A47 .. INTERSECTION ABOVE UNION
  .. |capdot|   unicode:: U+02A40 .. INTERSECTION WITH DOT
  .. |caps|     unicode:: U+02229 U+0FE00 .. INTERSECTION with serifs
  .. |ccaps|    unicode:: U+02A4D .. CLOSED INTERSECTION WITH SERIFS
  .. |ccups|    unicode:: U+02A4C .. CLOSED UNION WITH SERIFS
  .. |ccupssm|  unicode:: U+02A50 .. CLOSED UNION WITH SERIFS AND SMASH PRODUCT
  .. |coprod|   unicode:: U+02210 .. N-ARY COPRODUCT
  .. |Cup|      unicode:: U+022D3 .. DOUBLE UNION
  .. |cupbrcap| unicode:: U+02A48 .. UNION ABOVE BAR ABOVE INTERSECTION
  .. |cupcap|   unicode:: U+02A46 .. UNION ABOVE INTERSECTION
  .. |cupcup|   unicode:: U+02A4A .. UNION BESIDE AND JOINED WITH UNION
  .. |cupdot|   unicode:: U+0228D .. MULTISET MULTIPLICATION
  .. |cupor|    unicode:: U+02A45 .. UNION WITH LOGICAL OR
  .. |cups|     unicode:: U+0222A U+0FE00 .. UNION with serifs
  .. |cuvee|    unicode:: U+022CE .. CURLY LOGICAL OR
  .. |cuwed|    unicode:: U+022CF .. CURLY LOGICAL AND
  .. |Dagger|   unicode:: U+02021 .. DOUBLE DAGGER
  .. |dagger|   unicode:: U+02020 .. DAGGER
  .. |diam|     unicode:: U+022C4 .. DIAMOND OPERATOR
  .. |divonx|   unicode:: U+022C7 .. DIVISION TIMES
  .. |eplus|    unicode:: U+02A71 .. EQUALS SIGN ABOVE PLUS SIGN
  .. |hercon|   unicode:: U+022B9 .. HERMITIAN CONJUGATE MATRIX
  .. |intcal|   unicode:: U+022BA .. INTERCALATE
  .. |iprod|    unicode:: U+02A3C .. INTERIOR PRODUCT
  .. |loplus|   unicode:: U+02A2D .. PLUS SIGN IN LEFT HALF CIRCLE
  .. |lotimes|  unicode:: U+02A34 .. MULTIPLICATION SIGN IN LEFT HALF CIRCLE
  .. |lthree|   unicode:: U+022CB .. LEFT SEMIDIRECT PRODUCT
  .. |ltimes|   unicode:: U+022C9 .. LEFT NORMAL FACTOR SEMIDIRECT PRODUCT
  .. |midast|   unicode:: U+0002A .. ASTERISK
  .. |minusb|   unicode:: U+0229F .. SQUARED MINUS
  .. |minusd|   unicode:: U+02238 .. DOT MINUS
  .. |minusdu|  unicode:: U+02A2A .. MINUS SIGN WITH DOT BELOW
  .. |ncap|     unicode:: U+02A43 .. INTERSECTION WITH OVERBAR
  .. |ncup|     unicode:: U+02A42 .. UNION WITH OVERBAR
  .. |oast|     unicode:: U+0229B .. CIRCLED ASTERISK OPERATOR
  .. |ocir|     unicode:: U+0229A .. CIRCLED RING OPERATOR
  .. |odash|    unicode:: U+0229D .. CIRCLED DASH
  .. |odiv|     unicode:: U+02A38 .. CIRCLED DIVISION SIGN
  .. |odot|     unicode:: U+02299 .. CIRCLED DOT OPERATOR
  .. |odsold|   unicode:: U+029BC .. CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN
  .. |ofcir|    unicode:: U+029BF .. CIRCLED BULLET
  .. |ogt|      unicode:: U+029C1 .. CIRCLED GREATER-THAN
  .. |ohbar|    unicode:: U+029B5 .. CIRCLE WITH HORIZONTAL BAR
  .. |olcir|    unicode:: U+029BE .. CIRCLED WHITE BULLET
  .. |olt|      unicode:: U+029C0 .. CIRCLED LESS-THAN
  .. |omid|     unicode:: U+029B6 .. CIRCLED VERTICAL BAR
  .. |ominus|   unicode:: U+02296 .. CIRCLED MINUS
  .. |opar|     unicode:: U+029B7 .. CIRCLED PARALLEL
  .. |operp|    unicode:: U+029B9 .. CIRCLED PERPENDICULAR
  .. |oplus|    unicode:: U+02295 .. CIRCLED PLUS
  .. |osol|     unicode:: U+02298 .. CIRCLED DIVISION SLASH
  .. |Otimes|   unicode:: U+02A37 .. MULTIPLICATION SIGN IN DOUBLE CIRCLE
  .. |otimes|   unicode:: U+02297 .. CIRCLED TIMES
  .. |otimesas| unicode:: U+02A36 .. CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT
  .. |ovbar|    unicode:: U+0233D .. APL FUNCTIONAL SYMBOL CIRCLE STILE
  .. |plusacir| unicode:: U+02A23 .. PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE
  .. |plusb|    unicode:: U+0229E .. SQUARED PLUS
  .. |pluscir|  unicode:: U+02A22 .. PLUS SIGN WITH SMALL CIRCLE ABOVE
  .. |plusdo|   unicode:: U+02214 .. DOT PLUS
  .. |plusdu|   unicode:: U+02A25 .. PLUS SIGN WITH DOT BELOW
  .. |pluse|    unicode:: U+02A72 .. PLUS SIGN ABOVE EQUALS SIGN
  .. |plussim|  unicode:: U+02A26 .. PLUS SIGN WITH TILDE BELOW
  .. |plustwo|  unicode:: U+02A27 .. PLUS SIGN WITH SUBSCRIPT TWO
  .. |prod|     unicode:: U+0220F .. N-ARY PRODUCT
  .. |race|     unicode:: U+029DA .. LEFT DOUBLE WIGGLY FENCE
  .. |roplus|   unicode:: U+02A2E .. PLUS SIGN IN RIGHT HALF CIRCLE
  .. |rotimes|  unicode:: U+02A35 .. MULTIPLICATION SIGN IN RIGHT HALF CIRCLE
  .. |rthree|   unicode:: U+022CC .. RIGHT SEMIDIRECT PRODUCT
  .. |rtimes|   unicode:: U+022CA .. RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT
  .. |sdot|     unicode:: U+022C5 .. DOT OPERATOR
  .. |sdotb|    unicode:: U+022A1 .. SQUARED DOT OPERATOR
  .. |setmn|    unicode:: U+02216 .. SET MINUS
  .. |simplus|  unicode:: U+02A24 .. PLUS SIGN WITH TILDE ABOVE
  .. |smashp|   unicode:: U+02A33 .. SMASH PRODUCT
  .. |solb|     unicode:: U+029C4 .. SQUARED RISING DIAGONAL SLASH
  .. |sqcap|    unicode:: U+02293 .. SQUARE CAP
  .. |sqcaps|   unicode:: U+02293 U+0FE00 .. SQUARE CAP with serifs
  .. |sqcup|    unicode:: U+02294 .. SQUARE CUP
  .. |sqcups|   unicode:: U+02294 U+0FE00 .. SQUARE CUP with serifs
  .. |ssetmn|   unicode:: U+02216 .. SET MINUS
  .. |sstarf|   unicode:: U+022C6 .. STAR OPERATOR
  .. |subdot|   unicode:: U+02ABD .. SUBSET WITH DOT
  .. |sum|      unicode:: U+02211 .. N-ARY SUMMATION
  .. |supdot|   unicode:: U+02ABE .. SUPERSET WITH DOT
  .. |timesb|   unicode:: U+022A0 .. SQUARED TIMES
  .. |timesbar| unicode:: U+02A31 .. MULTIPLICATION SIGN WITH UNDERBAR
  .. |timesd|   unicode:: U+02A30 .. MULTIPLICATION SIGN WITH DOT ABOVE
  .. |top|      unicode:: U+022A4 .. DOWN TACK
  .. |tridot|   unicode:: U+025EC .. WHITE UP-POINTING TRIANGLE WITH DOT
  .. |triminus| unicode:: U+02A3A .. MINUS SIGN IN TRIANGLE
  .. |triplus|  unicode:: U+02A39 .. PLUS SIGN IN TRIANGLE
  .. |trisb|    unicode:: U+029CD .. TRIANGLE WITH SERIFS AT BOTTOM
  .. |tritime|  unicode:: U+02A3B .. MULTIPLICATION SIGN IN TRIANGLE
  .. |uplus|    unicode:: U+0228E .. MULTISET UNION
  .. |veebar|   unicode:: U+022BB .. XOR
  .. |wedbar|   unicode:: U+02A5F .. LOGICAL AND WITH UNDERBAR
  .. |wreath|   unicode:: U+02240 .. WREATH PRODUCT
  .. |xcap|     unicode:: U+022C2 .. N-ARY INTERSECTION
  .. |xcirc|    unicode:: U+025EF .. LARGE CIRCLE
  .. |xcup|     unicode:: U+022C3 .. N-ARY UNION
  .. |xdtri|    unicode:: U+025BD .. WHITE DOWN-POINTING TRIANGLE
  .. |xodot|    unicode:: U+02A00 .. N-ARY CIRCLED DOT OPERATOR
  .. |xoplus|   unicode:: U+02A01 .. N-ARY CIRCLED PLUS OPERATOR
  .. |xotime|   unicode:: U+02A02 .. N-ARY CIRCLED TIMES OPERATOR
  .. |xsqcup|   unicode:: U+02A06 .. N-ARY SQUARE UNION OPERATOR
  .. |xuplus|   unicode:: U+02A04 .. N-ARY UNION OPERATOR WITH PLUS
  .. |xutri|    unicode:: U+025B3 .. WHITE UP-POINTING TRIANGLE
  .. |xvee|     unicode:: U+022C1 .. N-ARY LOGICAL OR
  .. |xwedge|   unicode:: U+022C0 .. N-ARY LOGICAL AND


/Part 4. 067.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsc.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |dlcorn|  unicode:: U+0231E .. BOTTOM LEFT CORNER
  .. |drcorn|  unicode:: U+0231F .. BOTTOM RIGHT CORNER
  .. |gtlPar|  unicode:: U+02995 .. DOUBLE LEFT ARC GREATER-THAN BRACKET
  .. |langd|   unicode:: U+02991 .. LEFT ANGLE BRACKET WITH DOT
  .. |lbrke|   unicode:: U+0298B .. LEFT SQUARE BRACKET WITH UNDERBAR
  .. |lbrksld| unicode:: U+0298F .. LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER
  .. |lbrkslu| unicode:: U+0298D .. LEFT SQUARE BRACKET WITH TICK IN TOP CORNER
  .. |lceil|   unicode:: U+02308 .. LEFT CEILING
  .. |lfloor|  unicode:: U+0230A .. LEFT FLOOR
  .. |lmoust|  unicode:: U+023B0 .. UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION
  .. |lpargt|  unicode:: U+029A0 .. SPHERICAL ANGLE OPENING LEFT
  .. |lparlt|  unicode:: U+02993 .. LEFT ARC LESS-THAN BRACKET
  .. |ltrPar|  unicode:: U+02996 .. DOUBLE RIGHT ARC LESS-THAN BRACKET
  .. |rangd|   unicode:: U+02992 .. RIGHT ANGLE BRACKET WITH DOT
  .. |rbrke|   unicode:: U+0298C .. RIGHT SQUARE BRACKET WITH UNDERBAR
  .. |rbrksld| unicode:: U+0298E .. RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER
  .. |rbrkslu| unicode:: U+02990 .. RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER
  .. |rceil|   unicode:: U+02309 .. RIGHT CEILING
  .. |rfloor|  unicode:: U+0230B .. RIGHT FLOOR
  .. |rmoust|  unicode:: U+023B1 .. UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION
  .. |rpargt|  unicode:: U+02994 .. RIGHT ARC GREATER-THAN BRACKET
  .. |ulcorn|  unicode:: U+0231C .. TOP LEFT CORNER
  .. |urcorn|  unicode:: U+0231D .. TOP RIGHT CORNER


/Part 4. 068.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsn.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |gnap|     unicode:: U+02A8A .. GREATER-THAN AND NOT APPROXIMATE
  .. |gnE|      unicode:: U+02269 .. GREATER-THAN BUT NOT EQUAL TO
  .. |gne|      unicode:: U+02A88 .. GREATER-THAN AND SINGLE-LINE NOT EQUAL TO
  .. |gnsim|    unicode:: U+022E7 .. GREATER-THAN BUT NOT EQUIVALENT TO
  .. |gvnE|     unicode:: U+02269 U+0FE00 .. GREATER-THAN BUT NOT EQUAL TO - with vertical stroke
  .. |lnap|     unicode:: U+02A89 .. LESS-THAN AND NOT APPROXIMATE
  .. |lnE|      unicode:: U+02268 .. LESS-THAN BUT NOT EQUAL TO
  .. |lne|      unicode:: U+02A87 .. LESS-THAN AND SINGLE-LINE NOT EQUAL TO
  .. |lnsim|    unicode:: U+022E6 .. LESS-THAN BUT NOT EQUIVALENT TO
  .. |lvnE|     unicode:: U+02268 U+0FE00 .. LESS-THAN BUT NOT EQUAL TO - with vertical stroke
  .. |nap|      unicode:: U+02249 .. NOT ALMOST EQUAL TO
  .. |napE|     unicode:: U+02A70 U+00338 .. APPROXIMATELY EQUAL OR EQUAL TO with slash
  .. |napid|    unicode:: U+0224B U+00338 .. TRIPLE TILDE with slash
  .. |ncong|    unicode:: U+02247 .. NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO
  .. |ncongdot| unicode:: U+02A6D U+00338 .. CONGRUENT WITH DOT ABOVE with slash
  .. |nequiv|   unicode:: U+02262 .. NOT IDENTICAL TO
  .. |ngE|      unicode:: U+02267 U+00338 .. GREATER-THAN OVER EQUAL TO with slash
  .. |nge|      unicode:: U+02271 .. NEITHER GREATER-THAN NOR EQUAL TO
  .. |nges|     unicode:: U+02A7E U+00338 .. GREATER-THAN OR SLANTED EQUAL TO with slash
  .. |nGg|      unicode:: U+022D9 U+00338 .. VERY MUCH GREATER-THAN with slash
  .. |ngsim|    unicode:: U+02275 .. NEITHER GREATER-THAN NOR EQUIVALENT TO
  .. |nGt|      unicode:: U+0226B U+020D2 .. MUCH GREATER THAN with vertical line
  .. |ngt|      unicode:: U+0226F .. NOT GREATER-THAN
  .. |nGtv|     unicode:: U+0226B U+00338 .. MUCH GREATER THAN with slash
  .. |nlE|      unicode:: U+02266 U+00338 .. LESS-THAN OVER EQUAL TO with slash
  .. |nle|      unicode:: U+02270 .. NEITHER LESS-THAN NOR EQUAL TO
  .. |nles|     unicode:: U+02A7D U+00338 .. LESS-THAN OR SLANTED EQUAL TO with slash
  .. |nLl|      unicode:: U+022D8 U+00338 .. VERY MUCH LESS-THAN with slash
  .. |nlsim|    unicode:: U+02274 .. NEITHER LESS-THAN NOR EQUIVALENT TO
  .. |nLt|      unicode:: U+0226A U+020D2 .. MUCH LESS THAN with vertical line
  .. |nlt|      unicode:: U+0226E .. NOT LESS-THAN
  .. |nltri|    unicode:: U+022EA .. NOT NORMAL SUBGROUP OF
  .. |nltrie|   unicode:: U+022EC .. NOT NORMAL SUBGROUP OF OR EQUAL TO
  .. |nLtv|     unicode:: U+0226A U+00338 .. MUCH LESS THAN with slash
  .. |nmid|     unicode:: U+02224 .. DOES NOT DIVIDE
  .. |npar|     unicode:: U+02226 .. NOT PARALLEL TO
  .. |npr|      unicode:: U+02280 .. DOES NOT PRECEDE
  .. |nprcue|   unicode:: U+022E0 .. DOES NOT PRECEDE OR EQUAL
  .. |npre|     unicode:: U+02AAF U+00338 .. PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash
  .. |nrtri|    unicode:: U+022EB .. DOES NOT CONTAIN AS NORMAL SUBGROUP
  .. |nrtrie|   unicode:: U+022ED .. DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL
  .. |nsc|      unicode:: U+02281 .. DOES NOT SUCCEED
  .. |nsccue|   unicode:: U+022E1 .. DOES NOT SUCCEED OR EQUAL
  .. |nsce|     unicode:: U+02AB0 U+00338 .. SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash
  .. |nsim|     unicode:: U+02241 .. NOT TILDE
  .. |nsime|    unicode:: U+02244 .. NOT ASYMPTOTICALLY EQUAL TO
  .. |nsmid|    unicode:: U+02224 .. DOES NOT DIVIDE
  .. |nspar|    unicode:: U+02226 .. NOT PARALLEL TO
  .. |nsqsube|  unicode:: U+022E2 .. NOT SQUARE IMAGE OF OR EQUAL TO
  .. |nsqsupe|  unicode:: U+022E3 .. NOT SQUARE ORIGINAL OF OR EQUAL TO
  .. |nsub|     unicode:: U+02284 .. NOT A SUBSET OF
  .. |nsubE|    unicode:: U+02AC5 U+00338 .. SUBSET OF ABOVE EQUALS SIGN with slash
  .. |nsube|    unicode:: U+02288 .. NEITHER A SUBSET OF NOR EQUAL TO
  .. |nsup|     unicode:: U+02285 .. NOT A SUPERSET OF
  .. |nsupE|    unicode:: U+02AC6 U+00338 .. SUPERSET OF ABOVE EQUALS SIGN with slash
  .. |nsupe|    unicode:: U+02289 .. NEITHER A SUPERSET OF NOR EQUAL TO
  .. |ntgl|     unicode:: U+02279 .. NEITHER GREATER-THAN NOR LESS-THAN
  .. |ntlg|     unicode:: U+02278 .. NEITHER LESS-THAN NOR GREATER-THAN
  .. |nvap|     unicode:: U+0224D U+020D2 .. EQUIVALENT TO with vertical line
  .. |nVDash|   unicode:: U+022AF .. NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE
  .. |nVdash|   unicode:: U+022AE .. DOES NOT FORCE
  .. |nvDash|   unicode:: U+022AD .. NOT TRUE
  .. |nvdash|   unicode:: U+022AC .. DOES NOT PROVE
  .. |nvge|     unicode:: U+02265 U+020D2 .. GREATER-THAN OR EQUAL TO with vertical line
  .. |nvgt|     unicode:: U+0003E U+020D2 .. GREATER-THAN SIGN with vertical line
  .. |nvle|     unicode:: U+02264 U+020D2 .. LESS-THAN OR EQUAL TO with vertical line
  .. |nvlt|     unicode:: U+0003C U+020D2 .. LESS-THAN SIGN with vertical line
  .. |nvltrie|  unicode:: U+022B4 U+020D2 .. NORMAL SUBGROUP OF OR EQUAL TO with vertical line
  .. |nvrtrie|  unicode:: U+022B5 U+020D2 .. CONTAINS AS NORMAL SUBGROUP OR EQUAL TO with vertical line
  .. |nvsim|    unicode:: U+0223C U+020D2 .. TILDE OPERATOR with vertical line
  .. |parsim|   unicode:: U+02AF3 .. PARALLEL WITH TILDE OPERATOR
  .. |prnap|    unicode:: U+02AB9 .. PRECEDES ABOVE NOT ALMOST EQUAL TO
  .. |prnE|     unicode:: U+02AB5 .. PRECEDES ABOVE NOT EQUAL TO
  .. |prnsim|   unicode:: U+022E8 .. PRECEDES BUT NOT EQUIVALENT TO
  .. |rnmid|    unicode:: U+02AEE .. DOES NOT DIVIDE WITH REVERSED NEGATION SLASH
  .. |scnap|    unicode:: U+02ABA .. SUCCEEDS ABOVE NOT ALMOST EQUAL TO
  .. |scnE|     unicode:: U+02AB6 .. SUCCEEDS ABOVE NOT EQUAL TO
  .. |scnsim|   unicode:: U+022E9 .. SUCCEEDS BUT NOT EQUIVALENT TO
  .. |simne|    unicode:: U+02246 .. APPROXIMATELY BUT NOT ACTUALLY EQUAL TO
  .. |solbar|   unicode:: U+0233F .. APL FUNCTIONAL SYMBOL SLASH BAR
  .. |subnE|    unicode:: U+02ACB .. SUBSET OF ABOVE NOT EQUAL TO
  .. |subne|    unicode:: U+0228A .. SUBSET OF WITH NOT EQUAL TO
  .. |supnE|    unicode:: U+02ACC .. SUPERSET OF ABOVE NOT EQUAL TO
  .. |supne|    unicode:: U+0228B .. SUPERSET OF WITH NOT EQUAL TO
  .. |vnsub|    unicode:: U+02282 U+020D2 .. SUBSET OF with vertical line
  .. |vnsup|    unicode:: U+02283 U+020D2 .. SUPERSET OF with vertical line
  .. |vsubnE|   unicode:: U+02ACB U+0FE00 .. SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members
  .. |vsubne|   unicode:: U+0228A U+0FE00 .. SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members
  .. |vsupnE|   unicode:: U+02ACC U+0FE00 .. SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members
  .. |vsupne|   unicode:: U+0228B U+0FE00 .. SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members


/Part 4. 069.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamso.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |ang|      unicode:: U+02220 .. ANGLE
  .. |ange|     unicode:: U+029A4 .. ANGLE WITH UNDERBAR
  .. |angmsd|   unicode:: U+02221 .. MEASURED ANGLE
  .. |angmsdaa| unicode:: U+029A8 .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT
  .. |angmsdab| unicode:: U+029A9 .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT
  .. |angmsdac| unicode:: U+029AA .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT
  .. |angmsdad| unicode:: U+029AB .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT
  .. |angmsdae| unicode:: U+029AC .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP
  .. |angmsdaf| unicode:: U+029AD .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP
  .. |angmsdag| unicode:: U+029AE .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN
  .. |angmsdah| unicode:: U+029AF .. MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN
  .. |angrtvb|  unicode:: U+022BE .. RIGHT ANGLE WITH ARC
  .. |angrtvbd| unicode:: U+0299D .. MEASURED RIGHT ANGLE WITH DOT
  .. |bbrk|     unicode:: U+023B5 .. BOTTOM SQUARE BRACKET
  .. |bbrktbrk| unicode:: U+023B6 .. BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET
  .. |bemptyv|  unicode:: U+029B0 .. REVERSED EMPTY SET
  .. |beth|     unicode:: U+02136 .. BET SYMBOL
  .. |boxbox|   unicode:: U+029C9 .. TWO JOINED SQUARES
  .. |bprime|   unicode:: U+02035 .. REVERSED PRIME
  .. |bsemi|    unicode:: U+0204F .. REVERSED SEMICOLON
  .. |cemptyv|  unicode:: U+029B2 .. EMPTY SET WITH SMALL CIRCLE ABOVE
  .. |cirE|     unicode:: U+029C3 .. CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT
  .. |cirscir|  unicode:: U+029C2 .. CIRCLE WITH SMALL CIRCLE TO THE RIGHT
  .. |comp|     unicode:: U+02201 .. COMPLEMENT
  .. |daleth|   unicode:: U+02138 .. DALET SYMBOL
  .. |demptyv|  unicode:: U+029B1 .. EMPTY SET WITH OVERBAR
  .. |ell|      unicode:: U+02113 .. SCRIPT SMALL L
  .. |empty|    unicode:: U+02205 .. EMPTY SET
  .. |emptyv|   unicode:: U+02205 .. EMPTY SET
  .. |gimel|    unicode:: U+02137 .. GIMEL SYMBOL
  .. |iiota|    unicode:: U+02129 .. TURNED GREEK SMALL LETTER IOTA
  .. |image|    unicode:: U+02111 .. BLACK-LETTER CAPITAL I
  .. |imath|    unicode:: U+00131 .. LATIN SMALL LETTER DOTLESS I
  .. |inodot|   unicode:: U+00131 .. LATIN SMALL LETTER DOTLESS I
  .. |jmath|    unicode:: U+0006A .. LATIN SMALL LETTER J
  .. |jnodot|   unicode:: U+0006A .. LATIN SMALL LETTER J
  .. |laemptyv| unicode:: U+029B4 .. EMPTY SET WITH LEFT ARROW ABOVE
  .. |lltri|    unicode:: U+025FA .. LOWER LEFT TRIANGLE
  .. |lrtri|    unicode:: U+022BF .. RIGHT TRIANGLE
  .. |mho|      unicode:: U+02127 .. INVERTED OHM SIGN
  .. |nang|     unicode:: U+02220 U+020D2 .. ANGLE with vertical line
  .. |nexist|   unicode:: U+02204 .. THERE DOES NOT EXIST
  .. |oS|       unicode:: U+024C8 .. CIRCLED LATIN CAPITAL LETTER S
  .. |planck|   unicode:: U+0210F .. PLANCK CONSTANT OVER TWO PI
  .. |plankv|   unicode:: U+0210F .. PLANCK CONSTANT OVER TWO PI
  .. |raemptyv| unicode:: U+029B3 .. EMPTY SET WITH RIGHT ARROW ABOVE
  .. |range|    unicode:: U+029A5 .. REVERSED ANGLE WITH UNDERBAR
  .. |real|     unicode:: U+0211C .. BLACK-LETTER CAPITAL R
  .. |sbsol|    unicode:: U+0FE68 .. SMALL REVERSE SOLIDUS
  .. |tbrk|     unicode:: U+023B4 .. TOP SQUARE BRACKET
  .. |trpezium| unicode:: U+0FFFD .. REPLACEMENT CHARACTER
  .. |ultri|    unicode:: U+025F8 .. UPPER LEFT TRIANGLE
  .. |urtri|    unicode:: U+025F9 .. UPPER RIGHT TRIANGLE
  .. |vprime|   unicode:: U+02032 .. PRIME
  .. |vzigzag|  unicode:: U+0299A .. VERTICAL ZIGZAG LINE
  .. |weierp|   unicode:: U+02118 .. SCRIPT CAPITAL P


/Part 4. 070.📜 docutils-0.20.1/docutils/parsers/rst/include/isoamsr.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |apE|      unicode:: U+02A70 .. APPROXIMATELY EQUAL OR EQUAL TO
  .. |ape|      unicode:: U+0224A .. ALMOST EQUAL OR EQUAL TO
  .. |apid|     unicode:: U+0224B .. TRIPLE TILDE
  .. |asymp|    unicode:: U+02248 .. ALMOST EQUAL TO
  .. |Barv|     unicode:: U+02AE7 .. SHORT DOWN TACK WITH OVERBAR
  .. |bcong|    unicode:: U+0224C .. ALL EQUAL TO
  .. |bepsi|    unicode:: U+003F6 .. GREEK REVERSED LUNATE EPSILON SYMBOL
  .. |bowtie|   unicode:: U+022C8 .. BOWTIE
  .. |bsim|     unicode:: U+0223D .. REVERSED TILDE
  .. |bsime|    unicode:: U+022CD .. REVERSED TILDE EQUALS
  .. |bsolhsub| unicode:: U+0005C U+02282 .. REVERSE SOLIDUS, SUBSET OF
  .. |bump|     unicode:: U+0224E .. GEOMETRICALLY EQUIVALENT TO
  .. |bumpE|    unicode:: U+02AAE .. EQUALS SIGN WITH BUMPY ABOVE
  .. |bumpe|    unicode:: U+0224F .. DIFFERENCE BETWEEN
  .. |cire|     unicode:: U+02257 .. RING EQUAL TO
  .. |Colon|    unicode:: U+02237 .. PROPORTION
  .. |Colone|   unicode:: U+02A74 .. DOUBLE COLON EQUAL
  .. |colone|   unicode:: U+02254 .. COLON EQUALS
  .. |congdot|  unicode:: U+02A6D .. CONGRUENT WITH DOT ABOVE
  .. |csub|     unicode:: U+02ACF .. CLOSED SUBSET
  .. |csube|    unicode:: U+02AD1 .. CLOSED SUBSET OR EQUAL TO
  .. |csup|     unicode:: U+02AD0 .. CLOSED SUPERSET
  .. |csupe|    unicode:: U+02AD2 .. CLOSED SUPERSET OR EQUAL TO
  .. |cuepr|    unicode:: U+022DE .. EQUAL TO OR PRECEDES
  .. |cuesc|    unicode:: U+022DF .. EQUAL TO OR SUCCEEDS
  .. |cupre|    unicode:: U+0227C .. PRECEDES OR EQUAL TO
  .. |Dashv|    unicode:: U+02AE4 .. VERTICAL BAR DOUBLE LEFT TURNSTILE
  .. |dashv|    unicode:: U+022A3 .. LEFT TACK
  .. |easter|   unicode:: U+02A6E .. EQUALS WITH ASTERISK
  .. |ecir|     unicode:: U+02256 .. RING IN EQUAL TO
  .. |ecolon|   unicode:: U+02255 .. EQUALS COLON
  .. |eDDot|    unicode:: U+02A77 .. EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW
  .. |eDot|     unicode:: U+02251 .. GEOMETRICALLY EQUAL TO
  .. |efDot|    unicode:: U+02252 .. APPROXIMATELY EQUAL TO OR THE IMAGE OF
  .. |eg|       unicode:: U+02A9A .. DOUBLE-LINE EQUAL TO OR GREATER-THAN
  .. |egs|      unicode:: U+02A96 .. SLANTED EQUAL TO OR GREATER-THAN
  .. |egsdot|   unicode:: U+02A98 .. SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE
  .. |el|       unicode:: U+02A99 .. DOUBLE-LINE EQUAL TO OR LESS-THAN
  .. |els|      unicode:: U+02A95 .. SLANTED EQUAL TO OR LESS-THAN
  .. |elsdot|   unicode:: U+02A97 .. SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE
  .. |equest|   unicode:: U+0225F .. QUESTIONED EQUAL TO
  .. |equivDD|  unicode:: U+02A78 .. EQUIVALENT WITH FOUR DOTS ABOVE
  .. |erDot|    unicode:: U+02253 .. IMAGE OF OR APPROXIMATELY EQUAL TO
  .. |esdot|    unicode:: U+02250 .. APPROACHES THE LIMIT
  .. |Esim|     unicode:: U+02A73 .. EQUALS SIGN ABOVE TILDE OPERATOR
  .. |esim|     unicode:: U+02242 .. MINUS TILDE
  .. |fork|     unicode:: U+022D4 .. PITCHFORK
  .. |forkv|    unicode:: U+02AD9 .. ELEMENT OF OPENING DOWNWARDS
  .. |frown|    unicode:: U+02322 .. FROWN
  .. |gap|      unicode:: U+02A86 .. GREATER-THAN OR APPROXIMATE
  .. |gE|       unicode:: U+02267 .. GREATER-THAN OVER EQUAL TO
  .. |gEl|      unicode:: U+02A8C .. GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN
  .. |gel|      unicode:: U+022DB .. GREATER-THAN EQUAL TO OR LESS-THAN
  .. |ges|      unicode:: U+02A7E .. GREATER-THAN OR SLANTED EQUAL TO
  .. |gescc|    unicode:: U+02AA9 .. GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL
  .. |gesdot|   unicode:: U+02A80 .. GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE
  .. |gesdoto|  unicode:: U+02A82 .. GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE
  .. |gesdotol| unicode:: U+02A84 .. GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT
  .. |gesl|     unicode:: U+022DB U+0FE00 .. GREATER-THAN slanted EQUAL TO OR LESS-THAN
  .. |gesles|   unicode:: U+02A94 .. GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL
  .. |Gg|       unicode:: U+022D9 .. VERY MUCH GREATER-THAN
  .. |gl|       unicode:: U+02277 .. GREATER-THAN OR LESS-THAN
  .. |gla|      unicode:: U+02AA5 .. GREATER-THAN BESIDE LESS-THAN
  .. |glE|      unicode:: U+02A92 .. GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL
  .. |glj|      unicode:: U+02AA4 .. GREATER-THAN OVERLAPPING LESS-THAN
  .. |gsdot|    unicode:: U+022D7 .. GREATER-THAN WITH DOT
  .. |gsim|     unicode:: U+02273 .. GREATER-THAN OR EQUIVALENT TO
  .. |gsime|    unicode:: U+02A8E .. GREATER-THAN ABOVE SIMILAR OR EQUAL
  .. |gsiml|    unicode:: U+02A90 .. GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN
  .. |Gt|       unicode:: U+0226B .. MUCH GREATER-THAN
  .. |gtcc|     unicode:: U+02AA7 .. GREATER-THAN CLOSED BY CURVE
  .. |gtcir|    unicode:: U+02A7A .. GREATER-THAN WITH CIRCLE INSIDE
  .. |gtdot|    unicode:: U+022D7 .. GREATER-THAN WITH DOT
  .. |gtquest|  unicode:: U+02A7C .. GREATER-THAN WITH QUESTION MARK ABOVE
  .. |gtrarr|   unicode:: U+02978 .. GREATER-THAN ABOVE RIGHTWARDS ARROW
  .. |homtht|   unicode:: U+0223B .. HOMOTHETIC
  .. |lap|      unicode:: U+02A85 .. LESS-THAN OR APPROXIMATE
  .. |lat|      unicode:: U+02AAB .. LARGER THAN
  .. |late|     unicode:: U+02AAD .. LARGER THAN OR EQUAL TO
  .. |lates|    unicode:: U+02AAD U+0FE00 .. LARGER THAN OR slanted EQUAL
  .. |ldot|     unicode:: U+022D6 .. LESS-THAN WITH DOT
  .. |lE|       unicode:: U+02266 .. LESS-THAN OVER EQUAL TO
  .. |lEg|      unicode:: U+02A8B .. LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN
  .. |leg|      unicode:: U+022DA .. LESS-THAN EQUAL TO OR GREATER-THAN
  .. |les|      unicode:: U+02A7D .. LESS-THAN OR SLANTED EQUAL TO
  .. |lescc|    unicode:: U+02AA8 .. LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL
  .. |lesdot|   unicode:: U+02A7F .. LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE
  .. |lesdoto|  unicode:: U+02A81 .. LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE
  .. |lesdotor| unicode:: U+02A83 .. LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT
  .. |lesg|     unicode:: U+022DA U+0FE00 .. LESS-THAN slanted EQUAL TO OR GREATER-THAN
  .. |lesges|   unicode:: U+02A93 .. LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL
  .. |lg|       unicode:: U+02276 .. LESS-THAN OR GREATER-THAN
  .. |lgE|      unicode:: U+02A91 .. LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL
  .. |Ll|       unicode:: U+022D8 .. VERY MUCH LESS-THAN
  .. |lsim|     unicode:: U+02272 .. LESS-THAN OR EQUIVALENT TO
  .. |lsime|    unicode:: U+02A8D .. LESS-THAN ABOVE SIMILAR OR EQUAL
  .. |lsimg|    unicode:: U+02A8F .. LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN
  .. |Lt|       unicode:: U+0226A .. MUCH LESS-THAN
  .. |ltcc|     unicode:: U+02AA6 .. LESS-THAN CLOSED BY CURVE
  .. |ltcir|    unicode:: U+02A79 .. LESS-THAN WITH CIRCLE INSIDE
  .. |ltdot|    unicode:: U+022D6 .. LESS-THAN WITH DOT
  .. |ltlarr|   unicode:: U+02976 .. LESS-THAN ABOVE LEFTWARDS ARROW
  .. |ltquest|  unicode:: U+02A7B .. LESS-THAN WITH QUESTION MARK ABOVE
  .. |ltrie|    unicode:: U+022B4 .. NORMAL SUBGROUP OF OR EQUAL TO
  .. |mcomma|   unicode:: U+02A29 .. MINUS SIGN WITH COMMA ABOVE
  .. |mDDot|    unicode:: U+0223A .. GEOMETRIC PROPORTION
  .. |mid|      unicode:: U+02223 .. DIVIDES
  .. |mlcp|     unicode:: U+02ADB .. TRANSVERSAL INTERSECTION
  .. |models|   unicode:: U+022A7 .. MODELS
  .. |mstpos|   unicode:: U+0223E .. INVERTED LAZY S
  .. |Pr|       unicode:: U+02ABB .. DOUBLE PRECEDES
  .. |pr|       unicode:: U+0227A .. PRECEDES
  .. |prap|     unicode:: U+02AB7 .. PRECEDES ABOVE ALMOST EQUAL TO
  .. |prcue|    unicode:: U+0227C .. PRECEDES OR EQUAL TO
  .. |prE|      unicode:: U+02AB3 .. PRECEDES ABOVE EQUALS SIGN
  .. |pre|      unicode:: U+02AAF .. PRECEDES ABOVE SINGLE-LINE EQUALS SIGN
  .. |prsim|    unicode:: U+0227E .. PRECEDES OR EQUIVALENT TO
  .. |prurel|   unicode:: U+022B0 .. PRECEDES UNDER RELATION
  .. |ratio|    unicode:: U+02236 .. RATIO
  .. |rtrie|    unicode:: U+022B5 .. CONTAINS AS NORMAL SUBGROUP OR EQUAL TO
  .. |rtriltri| unicode:: U+029CE .. RIGHT TRIANGLE ABOVE LEFT TRIANGLE
  .. |samalg|   unicode:: U+02210 .. N-ARY COPRODUCT
  .. |Sc|       unicode:: U+02ABC .. DOUBLE SUCCEEDS
  .. |sc|       unicode:: U+0227B .. SUCCEEDS
  .. |scap|     unicode:: U+02AB8 .. SUCCEEDS ABOVE ALMOST EQUAL TO
  .. |sccue|    unicode:: U+0227D .. SUCCEEDS OR EQUAL TO
  .. |scE|      unicode:: U+02AB4 .. SUCCEEDS ABOVE EQUALS SIGN
  .. |sce|      unicode:: U+02AB0 .. SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN
  .. |scsim|    unicode:: U+0227F .. SUCCEEDS OR EQUIVALENT TO
  .. |sdote|    unicode:: U+02A66 .. EQUALS SIGN WITH DOT BELOW
  .. |sfrown|   unicode:: U+02322 .. FROWN
  .. |simg|     unicode:: U+02A9E .. SIMILAR OR GREATER-THAN
  .. |simgE|    unicode:: U+02AA0 .. SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN
  .. |siml|     unicode:: U+02A9D .. SIMILAR OR LESS-THAN
  .. |simlE|    unicode:: U+02A9F .. SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN
  .. |smid|     unicode:: U+02223 .. DIVIDES
  .. |smile|    unicode:: U+02323 .. SMILE
  .. |smt|      unicode:: U+02AAA .. SMALLER THAN
  .. |smte|     unicode:: U+02AAC .. SMALLER THAN OR EQUAL TO
  .. |smtes|    unicode:: U+02AAC U+0FE00 .. SMALLER THAN OR slanted EQUAL
  .. |spar|     unicode:: U+02225 .. PARALLEL TO
  .. |sqsub|    unicode:: U+0228F .. SQUARE IMAGE OF
  .. |sqsube|   unicode:: U+02291 .. SQUARE IMAGE OF OR EQUAL TO
  .. |sqsup|    unicode:: U+02290 .. SQUARE ORIGINAL OF
  .. |sqsupe|   unicode:: U+02292 .. SQUARE ORIGINAL OF OR EQUAL TO
  .. |ssmile|   unicode:: U+02323 .. SMILE
  .. |Sub|      unicode:: U+022D0 .. DOUBLE SUBSET
  .. |subE|     unicode:: U+02AC5 .. SUBSET OF ABOVE EQUALS SIGN
  .. |subedot|  unicode:: U+02AC3 .. SUBSET OF OR EQUAL TO WITH DOT ABOVE
  .. |submult|  unicode:: U+02AC1 .. SUBSET WITH MULTIPLICATION SIGN BELOW
  .. |subplus|  unicode:: U+02ABF .. SUBSET WITH PLUS SIGN BELOW
  .. |subrarr|  unicode:: U+02979 .. SUBSET ABOVE RIGHTWARDS ARROW
  .. |subsim|   unicode:: U+02AC7 .. SUBSET OF ABOVE TILDE OPERATOR
  .. |subsub|   unicode:: U+02AD5 .. SUBSET ABOVE SUBSET
  .. |subsup|   unicode:: U+02AD3 .. SUBSET ABOVE SUPERSET
  .. |Sup|      unicode:: U+022D1 .. DOUBLE SUPERSET
  .. |supdsub|  unicode:: U+02AD8 .. SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET
  .. |supE|     unicode:: U+02AC6 .. SUPERSET OF ABOVE EQUALS SIGN
  .. |supedot|  unicode:: U+02AC4 .. SUPERSET OF OR EQUAL TO WITH DOT ABOVE
  .. |suphsol|  unicode:: U+02283 U+0002F .. SUPERSET OF, SOLIDUS
  .. |suphsub|  unicode:: U+02AD7 .. SUPERSET BESIDE SUBSET
  .. |suplarr|  unicode:: U+0297B .. SUPERSET ABOVE LEFTWARDS ARROW
  .. |supmult|  unicode:: U+02AC2 .. SUPERSET WITH MULTIPLICATION SIGN BELOW
  .. |supplus|  unicode:: U+02AC0 .. SUPERSET WITH PLUS SIGN BELOW
  .. |supsim|   unicode:: U+02AC8 .. SUPERSET OF ABOVE TILDE OPERATOR
  .. |supsub|   unicode:: U+02AD4 .. SUPERSET ABOVE SUBSET
  .. |supsup|   unicode:: U+02AD6 .. SUPERSET ABOVE SUPERSET
  .. |thkap|    unicode:: U+02248 .. ALMOST EQUAL TO
  .. |thksim|   unicode:: U+0223C .. TILDE OPERATOR
  .. |topfork|  unicode:: U+02ADA .. PITCHFORK WITH TEE TOP
  .. |trie|     unicode:: U+0225C .. DELTA EQUAL TO
  .. |twixt|    unicode:: U+0226C .. BETWEEN
  .. |Vbar|     unicode:: U+02AEB .. DOUBLE UP TACK
  .. |vBar|     unicode:: U+02AE8 .. SHORT UP TACK WITH UNDERBAR
  .. |vBarv|    unicode:: U+02AE9 .. SHORT UP TACK ABOVE SHORT DOWN TACK
  .. |VDash|    unicode:: U+022AB .. DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE
  .. |Vdash|    unicode:: U+022A9 .. FORCES
  .. |vDash|    unicode:: U+022A8 .. TRUE
  .. |vdash|    unicode:: U+022A2 .. RIGHT TACK
  .. |Vdashl|   unicode:: U+02AE6 .. LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL
  .. |veebar|   unicode:: U+022BB .. XOR
  .. |vltri|    unicode:: U+022B2 .. NORMAL SUBGROUP OF
  .. |vprop|    unicode:: U+0221D .. PROPORTIONAL TO
  .. |vrtri|    unicode:: U+022B3 .. CONTAINS AS NORMAL SUBGROUP
  .. |Vvdash|   unicode:: U+022AA .. TRIPLE VERTICAL BAR RIGHT TURNSTILE


/Part 4. 071.📜 docutils-0.20.1/docutils/parsers/rst/include/isobox.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |boxDL| unicode:: U+02557 .. BOX DRAWINGS DOUBLE DOWN AND LEFT
  .. |boxDl| unicode:: U+02556 .. BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
  .. |boxdL| unicode:: U+02555 .. BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
  .. |boxdl| unicode:: U+02510 .. BOX DRAWINGS LIGHT DOWN AND LEFT
  .. |boxDR| unicode:: U+02554 .. BOX DRAWINGS DOUBLE DOWN AND RIGHT
  .. |boxDr| unicode:: U+02553 .. BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
  .. |boxdR| unicode:: U+02552 .. BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
  .. |boxdr| unicode:: U+0250C .. BOX DRAWINGS LIGHT DOWN AND RIGHT
  .. |boxH|  unicode:: U+02550 .. BOX DRAWINGS DOUBLE HORIZONTAL
  .. |boxh|  unicode:: U+02500 .. BOX DRAWINGS LIGHT HORIZONTAL
  .. |boxHD| unicode:: U+02566 .. BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
  .. |boxHd| unicode:: U+02564 .. BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
  .. |boxhD| unicode:: U+02565 .. BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
  .. |boxhd| unicode:: U+0252C .. BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
  .. |boxHU| unicode:: U+02569 .. BOX DRAWINGS DOUBLE UP AND HORIZONTAL
  .. |boxHu| unicode:: U+02567 .. BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
  .. |boxhU| unicode:: U+02568 .. BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
  .. |boxhu| unicode:: U+02534 .. BOX DRAWINGS LIGHT UP AND HORIZONTAL
  .. |boxUL| unicode:: U+0255D .. BOX DRAWINGS DOUBLE UP AND LEFT
  .. |boxUl| unicode:: U+0255C .. BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
  .. |boxuL| unicode:: U+0255B .. BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
  .. |boxul| unicode:: U+02518 .. BOX DRAWINGS LIGHT UP AND LEFT
  .. |boxUR| unicode:: U+0255A .. BOX DRAWINGS DOUBLE UP AND RIGHT
  .. |boxUr| unicode:: U+02559 .. BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
  .. |boxuR| unicode:: U+02558 .. BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
  .. |boxur| unicode:: U+02514 .. BOX DRAWINGS LIGHT UP AND RIGHT
  .. |boxV|  unicode:: U+02551 .. BOX DRAWINGS DOUBLE VERTICAL
  .. |boxv|  unicode:: U+02502 .. BOX DRAWINGS LIGHT VERTICAL
  .. |boxVH| unicode:: U+0256C .. BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
  .. |boxVh| unicode:: U+0256B .. BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE
  .. |boxvH| unicode:: U+0256A .. BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE
  .. |boxvh| unicode:: U+0253C .. BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
  .. |boxVL| unicode:: U+02563 .. BOX DRAWINGS DOUBLE VERTICAL AND LEFT
  .. |boxVl| unicode:: U+02562 .. BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
  .. |boxvL| unicode:: U+02561 .. BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
  .. |boxvl| unicode:: U+02524 .. BOX DRAWINGS LIGHT VERTICAL AND LEFT
  .. |boxVR| unicode:: U+02560 .. BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
  .. |boxVr| unicode:: U+0255F .. BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
  .. |boxvR| unicode:: U+0255E .. BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
  .. |boxvr| unicode:: U+0251C .. BOX DRAWINGS LIGHT VERTICAL AND RIGHT


/Part 4. 072.📜 docutils-0.20.1/docutils/parsers/rst/include/isocyr1.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Acy|    unicode:: U+00410 .. CYRILLIC CAPITAL LETTER A
  .. |acy|    unicode:: U+00430 .. CYRILLIC SMALL LETTER A
  .. |Bcy|    unicode:: U+00411 .. CYRILLIC CAPITAL LETTER BE
  .. |bcy|    unicode:: U+00431 .. CYRILLIC SMALL LETTER BE
  .. |CHcy|   unicode:: U+00427 .. CYRILLIC CAPITAL LETTER CHE
  .. |chcy|   unicode:: U+00447 .. CYRILLIC SMALL LETTER CHE
  .. |Dcy|    unicode:: U+00414 .. CYRILLIC CAPITAL LETTER DE
  .. |dcy|    unicode:: U+00434 .. CYRILLIC SMALL LETTER DE
  .. |Ecy|    unicode:: U+0042D .. CYRILLIC CAPITAL LETTER E
  .. |ecy|    unicode:: U+0044D .. CYRILLIC SMALL LETTER E
  .. |Fcy|    unicode:: U+00424 .. CYRILLIC CAPITAL LETTER EF
  .. |fcy|    unicode:: U+00444 .. CYRILLIC SMALL LETTER EF
  .. |Gcy|    unicode:: U+00413 .. CYRILLIC CAPITAL LETTER GHE
  .. |gcy|    unicode:: U+00433 .. CYRILLIC SMALL LETTER GHE
  .. |HARDcy| unicode:: U+0042A .. CYRILLIC CAPITAL LETTER HARD SIGN
  .. |hardcy| unicode:: U+0044A .. CYRILLIC SMALL LETTER HARD SIGN
  .. |Icy|    unicode:: U+00418 .. CYRILLIC CAPITAL LETTER I
  .. |icy|    unicode:: U+00438 .. CYRILLIC SMALL LETTER I
  .. |IEcy|   unicode:: U+00415 .. CYRILLIC CAPITAL LETTER IE
  .. |iecy|   unicode:: U+00435 .. CYRILLIC SMALL LETTER IE
  .. |IOcy|   unicode:: U+00401 .. CYRILLIC CAPITAL LETTER IO
  .. |iocy|   unicode:: U+00451 .. CYRILLIC SMALL LETTER IO
  .. |Jcy|    unicode:: U+00419 .. CYRILLIC CAPITAL LETTER SHORT I
  .. |jcy|    unicode:: U+00439 .. CYRILLIC SMALL LETTER SHORT I
  .. |Kcy|    unicode:: U+0041A .. CYRILLIC CAPITAL LETTER KA
  .. |kcy|    unicode:: U+0043A .. CYRILLIC SMALL LETTER KA
  .. |KHcy|   unicode:: U+00425 .. CYRILLIC CAPITAL LETTER HA
  .. |khcy|   unicode:: U+00445 .. CYRILLIC SMALL LETTER HA
  .. |Lcy|    unicode:: U+0041B .. CYRILLIC CAPITAL LETTER EL
  .. |lcy|    unicode:: U+0043B .. CYRILLIC SMALL LETTER EL
  .. |Mcy|    unicode:: U+0041C .. CYRILLIC CAPITAL LETTER EM
  .. |mcy|    unicode:: U+0043C .. CYRILLIC SMALL LETTER EM
  .. |Ncy|    unicode:: U+0041D .. CYRILLIC CAPITAL LETTER EN
  .. |ncy|    unicode:: U+0043D .. CYRILLIC SMALL LETTER EN
  .. |numero| unicode:: U+02116 .. NUMERO SIGN
  .. |Ocy|    unicode:: U+0041E .. CYRILLIC CAPITAL LETTER O
  .. |ocy|    unicode:: U+0043E .. CYRILLIC SMALL LETTER O
  .. |Pcy|    unicode:: U+0041F .. CYRILLIC CAPITAL LETTER PE
  .. |pcy|    unicode:: U+0043F .. CYRILLIC SMALL LETTER PE
  .. |Rcy|    unicode:: U+00420 .. CYRILLIC CAPITAL LETTER ER
  .. |rcy|    unicode:: U+00440 .. CYRILLIC SMALL LETTER ER
  .. |Scy|    unicode:: U+00421 .. CYRILLIC CAPITAL LETTER ES
  .. |scy|    unicode:: U+00441 .. CYRILLIC SMALL LETTER ES
  .. |SHCHcy| unicode:: U+00429 .. CYRILLIC CAPITAL LETTER SHCHA
  .. |shchcy| unicode:: U+00449 .. CYRILLIC SMALL LETTER SHCHA
  .. |SHcy|   unicode:: U+00428 .. CYRILLIC CAPITAL LETTER SHA
  .. |shcy|   unicode:: U+00448 .. CYRILLIC SMALL LETTER SHA
  .. |SOFTcy| unicode:: U+0042C .. CYRILLIC CAPITAL LETTER SOFT SIGN
  .. |softcy| unicode:: U+0044C .. CYRILLIC SMALL LETTER SOFT SIGN
  .. |Tcy|    unicode:: U+00422 .. CYRILLIC CAPITAL LETTER TE
  .. |tcy|    unicode:: U+00442 .. CYRILLIC SMALL LETTER TE
  .. |TScy|   unicode:: U+00426 .. CYRILLIC CAPITAL LETTER TSE
  .. |tscy|   unicode:: U+00446 .. CYRILLIC SMALL LETTER TSE
  .. |Ucy|    unicode:: U+00423 .. CYRILLIC CAPITAL LETTER U
  .. |ucy|    unicode:: U+00443 .. CYRILLIC SMALL LETTER U
  .. |Vcy|    unicode:: U+00412 .. CYRILLIC CAPITAL LETTER VE
  .. |vcy|    unicode:: U+00432 .. CYRILLIC SMALL LETTER VE
  .. |YAcy|   unicode:: U+0042F .. CYRILLIC CAPITAL LETTER YA
  .. |yacy|   unicode:: U+0044F .. CYRILLIC SMALL LETTER YA
  .. |Ycy|    unicode:: U+0042B .. CYRILLIC CAPITAL LETTER YERU
  .. |ycy|    unicode:: U+0044B .. CYRILLIC SMALL LETTER YERU
  .. |YUcy|   unicode:: U+0042E .. CYRILLIC CAPITAL LETTER YU
  .. |yucy|   unicode:: U+0044E .. CYRILLIC SMALL LETTER YU
  .. |Zcy|    unicode:: U+00417 .. CYRILLIC CAPITAL LETTER ZE
  .. |zcy|    unicode:: U+00437 .. CYRILLIC SMALL LETTER ZE
  .. |ZHcy|   unicode:: U+00416 .. CYRILLIC CAPITAL LETTER ZHE
  .. |zhcy|   unicode:: U+00436 .. CYRILLIC SMALL LETTER ZHE


/Part 4. 073.📜 docutils-0.20.1/docutils/parsers/rst/include/isocyr2.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |DJcy|   unicode:: U+00402 .. CYRILLIC CAPITAL LETTER DJE
  .. |djcy|   unicode:: U+00452 .. CYRILLIC SMALL LETTER DJE
  .. |DScy|   unicode:: U+00405 .. CYRILLIC CAPITAL LETTER DZE
  .. |dscy|   unicode:: U+00455 .. CYRILLIC SMALL LETTER DZE
  .. |DZcy|   unicode:: U+0040F .. CYRILLIC CAPITAL LETTER DZHE
  .. |dzcy|   unicode:: U+0045F .. CYRILLIC SMALL LETTER DZHE
  .. |GJcy|   unicode:: U+00403 .. CYRILLIC CAPITAL LETTER GJE
  .. |gjcy|   unicode:: U+00453 .. CYRILLIC SMALL LETTER GJE
  .. |Iukcy|  unicode:: U+00406 .. CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I
  .. |iukcy|  unicode:: U+00456 .. CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
  .. |Jsercy| unicode:: U+00408 .. CYRILLIC CAPITAL LETTER JE
  .. |jsercy| unicode:: U+00458 .. CYRILLIC SMALL LETTER JE
  .. |Jukcy|  unicode:: U+00404 .. CYRILLIC CAPITAL LETTER UKRAINIAN IE
  .. |jukcy|  unicode:: U+00454 .. CYRILLIC SMALL LETTER UKRAINIAN IE
  .. |KJcy|   unicode:: U+0040C .. CYRILLIC CAPITAL LETTER KJE
  .. |kjcy|   unicode:: U+0045C .. CYRILLIC SMALL LETTER KJE
  .. |LJcy|   unicode:: U+00409 .. CYRILLIC CAPITAL LETTER LJE
  .. |ljcy|   unicode:: U+00459 .. CYRILLIC SMALL LETTER LJE
  .. |NJcy|   unicode:: U+0040A .. CYRILLIC CAPITAL LETTER NJE
  .. |njcy|   unicode:: U+0045A .. CYRILLIC SMALL LETTER NJE
  .. |TSHcy|  unicode:: U+0040B .. CYRILLIC CAPITAL LETTER TSHE
  .. |tshcy|  unicode:: U+0045B .. CYRILLIC SMALL LETTER TSHE
  .. |Ubrcy|  unicode:: U+0040E .. CYRILLIC CAPITAL LETTER SHORT U
  .. |ubrcy|  unicode:: U+0045E .. CYRILLIC SMALL LETTER SHORT U
  .. |YIcy|   unicode:: U+00407 .. CYRILLIC CAPITAL LETTER YI
  .. |yicy|   unicode:: U+00457 .. CYRILLIC SMALL LETTER YI


/Part 4. 074.📜 docutils-0.20.1/docutils/parsers/rst/include/isodia.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |acute| unicode:: U+000B4 .. ACUTE ACCENT
  .. |breve| unicode:: U+002D8 .. BREVE
  .. |caron| unicode:: U+002C7 .. CARON
  .. |cedil| unicode:: U+000B8 .. CEDILLA
  .. |circ|  unicode:: U+002C6 .. MODIFIER LETTER CIRCUMFLEX ACCENT
  .. |dblac| unicode:: U+002DD .. DOUBLE ACUTE ACCENT
  .. |die|   unicode:: U+000A8 .. DIAERESIS
  .. |dot|   unicode:: U+002D9 .. DOT ABOVE
  .. |grave| unicode:: U+00060 .. GRAVE ACCENT
  .. |macr|  unicode:: U+000AF .. MACRON
  .. |ogon|  unicode:: U+002DB .. OGONEK
  .. |ring|  unicode:: U+002DA .. RING ABOVE
  .. |tilde| unicode:: U+002DC .. SMALL TILDE
  .. |uml|   unicode:: U+000A8 .. DIAERESIS


/Part 4. 075.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk1.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Agr|  unicode:: U+00391 .. GREEK CAPITAL LETTER ALPHA
  .. |agr|  unicode:: U+003B1 .. GREEK SMALL LETTER ALPHA
  .. |Bgr|  unicode:: U+00392 .. GREEK CAPITAL LETTER BETA
  .. |bgr|  unicode:: U+003B2 .. GREEK SMALL LETTER BETA
  .. |Dgr|  unicode:: U+00394 .. GREEK CAPITAL LETTER DELTA
  .. |dgr|  unicode:: U+003B4 .. GREEK SMALL LETTER DELTA
  .. |EEgr| unicode:: U+00397 .. GREEK CAPITAL LETTER ETA
  .. |eegr| unicode:: U+003B7 .. GREEK SMALL LETTER ETA
  .. |Egr|  unicode:: U+00395 .. GREEK CAPITAL LETTER EPSILON
  .. |egr|  unicode:: U+003B5 .. GREEK SMALL LETTER EPSILON
  .. |Ggr|  unicode:: U+00393 .. GREEK CAPITAL LETTER GAMMA
  .. |ggr|  unicode:: U+003B3 .. GREEK SMALL LETTER GAMMA
  .. |Igr|  unicode:: U+00399 .. GREEK CAPITAL LETTER IOTA
  .. |igr|  unicode:: U+003B9 .. GREEK SMALL LETTER IOTA
  .. |Kgr|  unicode:: U+0039A .. GREEK CAPITAL LETTER KAPPA
  .. |kgr|  unicode:: U+003BA .. GREEK SMALL LETTER KAPPA
  .. |KHgr| unicode:: U+003A7 .. GREEK CAPITAL LETTER CHI
  .. |khgr| unicode:: U+003C7 .. GREEK SMALL LETTER CHI
  .. |Lgr|  unicode:: U+0039B .. GREEK CAPITAL LETTER LAMDA
  .. |lgr|  unicode:: U+003BB .. GREEK SMALL LETTER LAMDA
  .. |Mgr|  unicode:: U+0039C .. GREEK CAPITAL LETTER MU
  .. |mgr|  unicode:: U+003BC .. GREEK SMALL LETTER MU
  .. |Ngr|  unicode:: U+0039D .. GREEK CAPITAL LETTER NU
  .. |ngr|  unicode:: U+003BD .. GREEK SMALL LETTER NU
  .. |Ogr|  unicode:: U+0039F .. GREEK CAPITAL LETTER OMICRON
  .. |ogr|  unicode:: U+003BF .. GREEK SMALL LETTER OMICRON
  .. |OHgr| unicode:: U+003A9 .. GREEK CAPITAL LETTER OMEGA
  .. |ohgr| unicode:: U+003C9 .. GREEK SMALL LETTER OMEGA
  .. |Pgr|  unicode:: U+003A0 .. GREEK CAPITAL LETTER PI
  .. |pgr|  unicode:: U+003C0 .. GREEK SMALL LETTER PI
  .. |PHgr| unicode:: U+003A6 .. GREEK CAPITAL LETTER PHI
  .. |phgr| unicode:: U+003C6 .. GREEK SMALL LETTER PHI
  .. |PSgr| unicode:: U+003A8 .. GREEK CAPITAL LETTER PSI
  .. |psgr| unicode:: U+003C8 .. GREEK SMALL LETTER PSI
  .. |Rgr|  unicode:: U+003A1 .. GREEK CAPITAL LETTER RHO
  .. |rgr|  unicode:: U+003C1 .. GREEK SMALL LETTER RHO
  .. |sfgr| unicode:: U+003C2 .. GREEK SMALL LETTER FINAL SIGMA
  .. |Sgr|  unicode:: U+003A3 .. GREEK CAPITAL LETTER SIGMA
  .. |sgr|  unicode:: U+003C3 .. GREEK SMALL LETTER SIGMA
  .. |Tgr|  unicode:: U+003A4 .. GREEK CAPITAL LETTER TAU
  .. |tgr|  unicode:: U+003C4 .. GREEK SMALL LETTER TAU
  .. |THgr| unicode:: U+00398 .. GREEK CAPITAL LETTER THETA
  .. |thgr| unicode:: U+003B8 .. GREEK SMALL LETTER THETA
  .. |Ugr|  unicode:: U+003A5 .. GREEK CAPITAL LETTER UPSILON
  .. |ugr|  unicode:: U+003C5 .. GREEK SMALL LETTER UPSILON
  .. |Xgr|  unicode:: U+0039E .. GREEK CAPITAL LETTER XI
  .. |xgr|  unicode:: U+003BE .. GREEK SMALL LETTER XI
  .. |Zgr|  unicode:: U+00396 .. GREEK CAPITAL LETTER ZETA
  .. |zgr|  unicode:: U+003B6 .. GREEK SMALL LETTER ZETA


/Part 4. 076.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk2.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Aacgr|  unicode:: U+00386 .. GREEK CAPITAL LETTER ALPHA WITH TONOS
  .. |aacgr|  unicode:: U+003AC .. GREEK SMALL LETTER ALPHA WITH TONOS
  .. |Eacgr|  unicode:: U+00388 .. GREEK CAPITAL LETTER EPSILON WITH TONOS
  .. |eacgr|  unicode:: U+003AD .. GREEK SMALL LETTER EPSILON WITH TONOS
  .. |EEacgr| unicode:: U+00389 .. GREEK CAPITAL LETTER ETA WITH TONOS
  .. |eeacgr| unicode:: U+003AE .. GREEK SMALL LETTER ETA WITH TONOS
  .. |Iacgr|  unicode:: U+0038A .. GREEK CAPITAL LETTER IOTA WITH TONOS
  .. |iacgr|  unicode:: U+003AF .. GREEK SMALL LETTER IOTA WITH TONOS
  .. |idiagr| unicode:: U+00390 .. GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
  .. |Idigr|  unicode:: U+003AA .. GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
  .. |idigr|  unicode:: U+003CA .. GREEK SMALL LETTER IOTA WITH DIALYTIKA
  .. |Oacgr|  unicode:: U+0038C .. GREEK CAPITAL LETTER OMICRON WITH TONOS
  .. |oacgr|  unicode:: U+003CC .. GREEK SMALL LETTER OMICRON WITH TONOS
  .. |OHacgr| unicode:: U+0038F .. GREEK CAPITAL LETTER OMEGA WITH TONOS
  .. |ohacgr| unicode:: U+003CE .. GREEK SMALL LETTER OMEGA WITH TONOS
  .. |Uacgr|  unicode:: U+0038E .. GREEK CAPITAL LETTER UPSILON WITH TONOS
  .. |uacgr|  unicode:: U+003CD .. GREEK SMALL LETTER UPSILON WITH TONOS
  .. |udiagr| unicode:: U+003B0 .. GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
  .. |Udigr|  unicode:: U+003AB .. GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
  .. |udigr|  unicode:: U+003CB .. GREEK SMALL LETTER UPSILON WITH DIALYTIKA


/Part 4. 077.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk3.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |alpha|  unicode:: U+003B1 .. GREEK SMALL LETTER ALPHA
  .. |beta|   unicode:: U+003B2 .. GREEK SMALL LETTER BETA
  .. |chi|    unicode:: U+003C7 .. GREEK SMALL LETTER CHI
  .. |Delta|  unicode:: U+00394 .. GREEK CAPITAL LETTER DELTA
  .. |delta|  unicode:: U+003B4 .. GREEK SMALL LETTER DELTA
  .. |epsi|   unicode:: U+003F5 .. GREEK LUNATE EPSILON SYMBOL
  .. |epsis|  unicode:: U+003F5 .. GREEK LUNATE EPSILON SYMBOL
  .. |epsiv|  unicode:: U+003B5 .. GREEK SMALL LETTER EPSILON
  .. |eta|    unicode:: U+003B7 .. GREEK SMALL LETTER ETA
  .. |Gamma|  unicode:: U+00393 .. GREEK CAPITAL LETTER GAMMA
  .. |gamma|  unicode:: U+003B3 .. GREEK SMALL LETTER GAMMA
  .. |Gammad| unicode:: U+003DC .. GREEK LETTER DIGAMMA
  .. |gammad| unicode:: U+003DD .. GREEK SMALL LETTER DIGAMMA
  .. |iota|   unicode:: U+003B9 .. GREEK SMALL LETTER IOTA
  .. |kappa|  unicode:: U+003BA .. GREEK SMALL LETTER KAPPA
  .. |kappav| unicode:: U+003F0 .. GREEK KAPPA SYMBOL
  .. |Lambda| unicode:: U+0039B .. GREEK CAPITAL LETTER LAMDA
  .. |lambda| unicode:: U+003BB .. GREEK SMALL LETTER LAMDA
  .. |mu|     unicode:: U+003BC .. GREEK SMALL LETTER MU
  .. |nu|     unicode:: U+003BD .. GREEK SMALL LETTER NU
  .. |Omega|  unicode:: U+003A9 .. GREEK CAPITAL LETTER OMEGA
  .. |omega|  unicode:: U+003C9 .. GREEK SMALL LETTER OMEGA
  .. |Phi|    unicode:: U+003A6 .. GREEK CAPITAL LETTER PHI
  .. |phi|    unicode:: U+003D5 .. GREEK PHI SYMBOL
  .. |phis|   unicode:: U+003D5 .. GREEK PHI SYMBOL
  .. |phiv|   unicode:: U+003C6 .. GREEK SMALL LETTER PHI
  .. |Pi|     unicode:: U+003A0 .. GREEK CAPITAL LETTER PI
  .. |pi|     unicode:: U+003C0 .. GREEK SMALL LETTER PI
  .. |piv|    unicode:: U+003D6 .. GREEK PI SYMBOL
  .. |Psi|    unicode:: U+003A8 .. GREEK CAPITAL LETTER PSI
  .. |psi|    unicode:: U+003C8 .. GREEK SMALL LETTER PSI
  .. |rho|    unicode:: U+003C1 .. GREEK SMALL LETTER RHO
  .. |rhov|   unicode:: U+003F1 .. GREEK RHO SYMBOL
  .. |Sigma|  unicode:: U+003A3 .. GREEK CAPITAL LETTER SIGMA
  .. |sigma|  unicode:: U+003C3 .. GREEK SMALL LETTER SIGMA
  .. |sigmav| unicode:: U+003C2 .. GREEK SMALL LETTER FINAL SIGMA
  .. |tau|    unicode:: U+003C4 .. GREEK SMALL LETTER TAU
  .. |Theta|  unicode:: U+00398 .. GREEK CAPITAL LETTER THETA
  .. |theta|  unicode:: U+003B8 .. GREEK SMALL LETTER THETA
  .. |thetas| unicode:: U+003B8 .. GREEK SMALL LETTER THETA
  .. |thetav| unicode:: U+003D1 .. GREEK THETA SYMBOL
  .. |Upsi|   unicode:: U+003D2 .. GREEK UPSILON WITH HOOK SYMBOL
  .. |upsi|   unicode:: U+003C5 .. GREEK SMALL LETTER UPSILON
  .. |Xi|     unicode:: U+0039E .. GREEK CAPITAL LETTER XI
  .. |xi|     unicode:: U+003BE .. GREEK SMALL LETTER XI
  .. |zeta|   unicode:: U+003B6 .. GREEK SMALL LETTER ZETA


/Part 4. 078.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk4-wide.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |b.alpha|  unicode:: U+1D6C2 .. MATHEMATICAL BOLD SMALL ALPHA
  .. |b.beta|   unicode:: U+1D6C3 .. MATHEMATICAL BOLD SMALL BETA
  .. |b.chi|    unicode:: U+1D6D8 .. MATHEMATICAL BOLD SMALL CHI
  .. |b.Delta|  unicode:: U+1D6AB .. MATHEMATICAL BOLD CAPITAL DELTA
  .. |b.delta|  unicode:: U+1D6C5 .. MATHEMATICAL BOLD SMALL DELTA
  .. |b.epsi|   unicode:: U+1D6C6 .. MATHEMATICAL BOLD SMALL EPSILON
  .. |b.epsiv|  unicode:: U+1D6DC .. MATHEMATICAL BOLD EPSILON SYMBOL
  .. |b.eta|    unicode:: U+1D6C8 .. MATHEMATICAL BOLD SMALL ETA
  .. |b.Gamma|  unicode:: U+1D6AA .. MATHEMATICAL BOLD CAPITAL GAMMA
  .. |b.gamma|  unicode:: U+1D6C4 .. MATHEMATICAL BOLD SMALL GAMMA
  .. |b.Gammad| unicode:: U+003DC .. GREEK LETTER DIGAMMA
  .. |b.gammad| unicode:: U+003DD .. GREEK SMALL LETTER DIGAMMA
  .. |b.iota|   unicode:: U+1D6CA .. MATHEMATICAL BOLD SMALL IOTA
  .. |b.kappa|  unicode:: U+1D6CB .. MATHEMATICAL BOLD SMALL KAPPA
  .. |b.kappav| unicode:: U+1D6DE .. MATHEMATICAL BOLD KAPPA SYMBOL
  .. |b.Lambda| unicode:: U+1D6B2 .. MATHEMATICAL BOLD CAPITAL LAMDA
  .. |b.lambda| unicode:: U+1D6CC .. MATHEMATICAL BOLD SMALL LAMDA
  .. |b.mu|     unicode:: U+1D6CD .. MATHEMATICAL BOLD SMALL MU
  .. |b.nu|     unicode:: U+1D6CE .. MATHEMATICAL BOLD SMALL NU
  .. |b.Omega|  unicode:: U+1D6C0 .. MATHEMATICAL BOLD CAPITAL OMEGA
  .. |b.omega|  unicode:: U+1D6DA .. MATHEMATICAL BOLD SMALL OMEGA
  .. |b.Phi|    unicode:: U+1D6BD .. MATHEMATICAL BOLD CAPITAL PHI
  .. |b.phi|    unicode:: U+1D6D7 .. MATHEMATICAL BOLD SMALL PHI
  .. |b.phiv|   unicode:: U+1D6DF .. MATHEMATICAL BOLD PHI SYMBOL
  .. |b.Pi|     unicode:: U+1D6B7 .. MATHEMATICAL BOLD CAPITAL PI
  .. |b.pi|     unicode:: U+1D6D1 .. MATHEMATICAL BOLD SMALL PI
  .. |b.piv|    unicode:: U+1D6E1 .. MATHEMATICAL BOLD PI SYMBOL
  .. |b.Psi|    unicode:: U+1D6BF .. MATHEMATICAL BOLD CAPITAL PSI
  .. |b.psi|    unicode:: U+1D6D9 .. MATHEMATICAL BOLD SMALL PSI
  .. |b.rho|    unicode:: U+1D6D2 .. MATHEMATICAL BOLD SMALL RHO
  .. |b.rhov|   unicode:: U+1D6E0 .. MATHEMATICAL BOLD RHO SYMBOL
  .. |b.Sigma|  unicode:: U+1D6BA .. MATHEMATICAL BOLD CAPITAL SIGMA
  .. |b.sigma|  unicode:: U+1D6D4 .. MATHEMATICAL BOLD SMALL SIGMA
  .. |b.sigmav| unicode:: U+1D6D3 .. MATHEMATICAL BOLD SMALL FINAL SIGMA
  .. |b.tau|    unicode:: U+1D6D5 .. MATHEMATICAL BOLD SMALL TAU
  .. |b.Theta|  unicode:: U+1D6AF .. MATHEMATICAL BOLD CAPITAL THETA
  .. |b.thetas| unicode:: U+1D6C9 .. MATHEMATICAL BOLD SMALL THETA
  .. |b.thetav| unicode:: U+1D6DD .. MATHEMATICAL BOLD THETA SYMBOL
  .. |b.Upsi|   unicode:: U+1D6BC .. MATHEMATICAL BOLD CAPITAL UPSILON
  .. |b.upsi|   unicode:: U+1D6D6 .. MATHEMATICAL BOLD SMALL UPSILON
  .. |b.Xi|     unicode:: U+1D6B5 .. MATHEMATICAL BOLD CAPITAL XI
  .. |b.xi|     unicode:: U+1D6CF .. MATHEMATICAL BOLD SMALL XI
  .. |b.zeta|   unicode:: U+1D6C7 .. MATHEMATICAL BOLD SMALL ZETA


/Part 4. 079.📜 docutils-0.20.1/docutils/parsers/rst/include/isogrk4.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |b.Gammad| unicode:: U+003DC .. GREEK LETTER DIGAMMA
  .. |b.gammad| unicode:: U+003DD .. GREEK SMALL LETTER DIGAMMA


/Part 4. 080.📜 docutils-0.20.1/docutils/parsers/rst/include/isolat1.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Aacute| unicode:: U+000C1 .. LATIN CAPITAL LETTER A WITH ACUTE
  .. |aacute| unicode:: U+000E1 .. LATIN SMALL LETTER A WITH ACUTE
  .. |Acirc|  unicode:: U+000C2 .. LATIN CAPITAL LETTER A WITH CIRCUMFLEX
  .. |acirc|  unicode:: U+000E2 .. LATIN SMALL LETTER A WITH CIRCUMFLEX
  .. |AElig|  unicode:: U+000C6 .. LATIN CAPITAL LETTER AE
  .. |aelig|  unicode:: U+000E6 .. LATIN SMALL LETTER AE
  .. |Agrave| unicode:: U+000C0 .. LATIN CAPITAL LETTER A WITH GRAVE
  .. |agrave| unicode:: U+000E0 .. LATIN SMALL LETTER A WITH GRAVE
  .. |Aring|  unicode:: U+000C5 .. LATIN CAPITAL LETTER A WITH RING ABOVE
  .. |aring|  unicode:: U+000E5 .. LATIN SMALL LETTER A WITH RING ABOVE
  .. |Atilde| unicode:: U+000C3 .. LATIN CAPITAL LETTER A WITH TILDE
  .. |atilde| unicode:: U+000E3 .. LATIN SMALL LETTER A WITH TILDE
  .. |Auml|   unicode:: U+000C4 .. LATIN CAPITAL LETTER A WITH DIAERESIS
  .. |auml|   unicode:: U+000E4 .. LATIN SMALL LETTER A WITH DIAERESIS
  .. |Ccedil| unicode:: U+000C7 .. LATIN CAPITAL LETTER C WITH CEDILLA
  .. |ccedil| unicode:: U+000E7 .. LATIN SMALL LETTER C WITH CEDILLA
  .. |Eacute| unicode:: U+000C9 .. LATIN CAPITAL LETTER E WITH ACUTE
  .. |eacute| unicode:: U+000E9 .. LATIN SMALL LETTER E WITH ACUTE
  .. |Ecirc|  unicode:: U+000CA .. LATIN CAPITAL LETTER E WITH CIRCUMFLEX
  .. |ecirc|  unicode:: U+000EA .. LATIN SMALL LETTER E WITH CIRCUMFLEX
  .. |Egrave| unicode:: U+000C8 .. LATIN CAPITAL LETTER E WITH GRAVE
  .. |egrave| unicode:: U+000E8 .. LATIN SMALL LETTER E WITH GRAVE
  .. |ETH|    unicode:: U+000D0 .. LATIN CAPITAL LETTER ETH
  .. |eth|    unicode:: U+000F0 .. LATIN SMALL LETTER ETH
  .. |Euml|   unicode:: U+000CB .. LATIN CAPITAL LETTER E WITH DIAERESIS
  .. |euml|   unicode:: U+000EB .. LATIN SMALL LETTER E WITH DIAERESIS
  .. |Iacute| unicode:: U+000CD .. LATIN CAPITAL LETTER I WITH ACUTE
  .. |iacute| unicode:: U+000ED .. LATIN SMALL LETTER I WITH ACUTE
  .. |Icirc|  unicode:: U+000CE .. LATIN CAPITAL LETTER I WITH CIRCUMFLEX
  .. |icirc|  unicode:: U+000EE .. LATIN SMALL LETTER I WITH CIRCUMFLEX
  .. |Igrave| unicode:: U+000CC .. LATIN CAPITAL LETTER I WITH GRAVE
  .. |igrave| unicode:: U+000EC .. LATIN SMALL LETTER I WITH GRAVE
  .. |Iuml|   unicode:: U+000CF .. LATIN CAPITAL LETTER I WITH DIAERESIS
  .. |iuml|   unicode:: U+000EF .. LATIN SMALL LETTER I WITH DIAERESIS
  .. |Ntilde| unicode:: U+000D1 .. LATIN CAPITAL LETTER N WITH TILDE
  .. |ntilde| unicode:: U+000F1 .. LATIN SMALL LETTER N WITH TILDE
  .. |Oacute| unicode:: U+000D3 .. LATIN CAPITAL LETTER O WITH ACUTE
  .. |oacute| unicode:: U+000F3 .. LATIN SMALL LETTER O WITH ACUTE
  .. |Ocirc|  unicode:: U+000D4 .. LATIN CAPITAL LETTER O WITH CIRCUMFLEX
  .. |ocirc|  unicode:: U+000F4 .. LATIN SMALL LETTER O WITH CIRCUMFLEX
  .. |Ograve| unicode:: U+000D2 .. LATIN CAPITAL LETTER O WITH GRAVE
  .. |ograve| unicode:: U+000F2 .. LATIN SMALL LETTER O WITH GRAVE
  .. |Oslash| unicode:: U+000D8 .. LATIN CAPITAL LETTER O WITH STROKE
  .. |oslash| unicode:: U+000F8 .. LATIN SMALL LETTER O WITH STROKE
  .. |Otilde| unicode:: U+000D5 .. LATIN CAPITAL LETTER O WITH TILDE
  .. |otilde| unicode:: U+000F5 .. LATIN SMALL LETTER O WITH TILDE
  .. |Ouml|   unicode:: U+000D6 .. LATIN CAPITAL LETTER O WITH DIAERESIS
  .. |ouml|   unicode:: U+000F6 .. LATIN SMALL LETTER O WITH DIAERESIS
  .. |szlig|  unicode:: U+000DF .. LATIN SMALL LETTER SHARP S
  .. |THORN|  unicode:: U+000DE .. LATIN CAPITAL LETTER THORN
  .. |thorn|  unicode:: U+000FE .. LATIN SMALL LETTER THORN
  .. |Uacute| unicode:: U+000DA .. LATIN CAPITAL LETTER U WITH ACUTE
  .. |uacute| unicode:: U+000FA .. LATIN SMALL LETTER U WITH ACUTE
  .. |Ucirc|  unicode:: U+000DB .. LATIN CAPITAL LETTER U WITH CIRCUMFLEX
  .. |ucirc|  unicode:: U+000FB .. LATIN SMALL LETTER U WITH CIRCUMFLEX
  .. |Ugrave| unicode:: U+000D9 .. LATIN CAPITAL LETTER U WITH GRAVE
  .. |ugrave| unicode:: U+000F9 .. LATIN SMALL LETTER U WITH GRAVE
  .. |Uuml|   unicode:: U+000DC .. LATIN CAPITAL LETTER U WITH DIAERESIS
  .. |uuml|   unicode:: U+000FC .. LATIN SMALL LETTER U WITH DIAERESIS
  .. |Yacute| unicode:: U+000DD .. LATIN CAPITAL LETTER Y WITH ACUTE
  .. |yacute| unicode:: U+000FD .. LATIN SMALL LETTER Y WITH ACUTE
  .. |yuml|   unicode:: U+000FF .. LATIN SMALL LETTER Y WITH DIAERESIS


/Part 4. 081.📜 docutils-0.20.1/docutils/parsers/rst/include/isolat2.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Abreve| unicode:: U+00102 .. LATIN CAPITAL LETTER A WITH BREVE
  .. |abreve| unicode:: U+00103 .. LATIN SMALL LETTER A WITH BREVE
  .. |Amacr|  unicode:: U+00100 .. LATIN CAPITAL LETTER A WITH MACRON
  .. |amacr|  unicode:: U+00101 .. LATIN SMALL LETTER A WITH MACRON
  .. |Aogon|  unicode:: U+00104 .. LATIN CAPITAL LETTER A WITH OGONEK
  .. |aogon|  unicode:: U+00105 .. LATIN SMALL LETTER A WITH OGONEK
  .. |Cacute| unicode:: U+00106 .. LATIN CAPITAL LETTER C WITH ACUTE
  .. |cacute| unicode:: U+00107 .. LATIN SMALL LETTER C WITH ACUTE
  .. |Ccaron| unicode:: U+0010C .. LATIN CAPITAL LETTER C WITH CARON
  .. |ccaron| unicode:: U+0010D .. LATIN SMALL LETTER C WITH CARON
  .. |Ccirc|  unicode:: U+00108 .. LATIN CAPITAL LETTER C WITH CIRCUMFLEX
  .. |ccirc|  unicode:: U+00109 .. LATIN SMALL LETTER C WITH CIRCUMFLEX
  .. |Cdot|   unicode:: U+0010A .. LATIN CAPITAL LETTER C WITH DOT ABOVE
  .. |cdot|   unicode:: U+0010B .. LATIN SMALL LETTER C WITH DOT ABOVE
  .. |Dcaron| unicode:: U+0010E .. LATIN CAPITAL LETTER D WITH CARON
  .. |dcaron| unicode:: U+0010F .. LATIN SMALL LETTER D WITH CARON
  .. |Dstrok| unicode:: U+00110 .. LATIN CAPITAL LETTER D WITH STROKE
  .. |dstrok| unicode:: U+00111 .. LATIN SMALL LETTER D WITH STROKE
  .. |Ecaron| unicode:: U+0011A .. LATIN CAPITAL LETTER E WITH CARON
  .. |ecaron| unicode:: U+0011B .. LATIN SMALL LETTER E WITH CARON
  .. |Edot|   unicode:: U+00116 .. LATIN CAPITAL LETTER E WITH DOT ABOVE
  .. |edot|   unicode:: U+00117 .. LATIN SMALL LETTER E WITH DOT ABOVE
  .. |Emacr|  unicode:: U+00112 .. LATIN CAPITAL LETTER E WITH MACRON
  .. |emacr|  unicode:: U+00113 .. LATIN SMALL LETTER E WITH MACRON
  .. |ENG|    unicode:: U+0014A .. LATIN CAPITAL LETTER ENG
  .. |eng|    unicode:: U+0014B .. LATIN SMALL LETTER ENG
  .. |Eogon|  unicode:: U+00118 .. LATIN CAPITAL LETTER E WITH OGONEK
  .. |eogon|  unicode:: U+00119 .. LATIN SMALL LETTER E WITH OGONEK
  .. |gacute| unicode:: U+001F5 .. LATIN SMALL LETTER G WITH ACUTE
  .. |Gbreve| unicode:: U+0011E .. LATIN CAPITAL LETTER G WITH BREVE
  .. |gbreve| unicode:: U+0011F .. LATIN SMALL LETTER G WITH BREVE
  .. |Gcedil| unicode:: U+00122 .. LATIN CAPITAL LETTER G WITH CEDILLA
  .. |gcedil| unicode:: U+00123 .. LATIN SMALL LETTER G WITH CEDILLA
  .. |Gcirc|  unicode:: U+0011C .. LATIN CAPITAL LETTER G WITH CIRCUMFLEX
  .. |gcirc|  unicode:: U+0011D .. LATIN SMALL LETTER G WITH CIRCUMFLEX
  .. |Gdot|   unicode:: U+00120 .. LATIN CAPITAL LETTER G WITH DOT ABOVE
  .. |gdot|   unicode:: U+00121 .. LATIN SMALL LETTER G WITH DOT ABOVE
  .. |Hcirc|  unicode:: U+00124 .. LATIN CAPITAL LETTER H WITH CIRCUMFLEX
  .. |hcirc|  unicode:: U+00125 .. LATIN SMALL LETTER H WITH CIRCUMFLEX
  .. |Hstrok| unicode:: U+00126 .. LATIN CAPITAL LETTER H WITH STROKE
  .. |hstrok| unicode:: U+00127 .. LATIN SMALL LETTER H WITH STROKE
  .. |Idot|   unicode:: U+00130 .. LATIN CAPITAL LETTER I WITH DOT ABOVE
  .. |IJlig|  unicode:: U+00132 .. LATIN CAPITAL LIGATURE IJ
  .. |ijlig|  unicode:: U+00133 .. LATIN SMALL LIGATURE IJ
  .. |Imacr|  unicode:: U+0012A .. LATIN CAPITAL LETTER I WITH MACRON
  .. |imacr|  unicode:: U+0012B .. LATIN SMALL LETTER I WITH MACRON
  .. |inodot| unicode:: U+00131 .. LATIN SMALL LETTER DOTLESS I
  .. |Iogon|  unicode:: U+0012E .. LATIN CAPITAL LETTER I WITH OGONEK
  .. |iogon|  unicode:: U+0012F .. LATIN SMALL LETTER I WITH OGONEK
  .. |Itilde| unicode:: U+00128 .. LATIN CAPITAL LETTER I WITH TILDE
  .. |itilde| unicode:: U+00129 .. LATIN SMALL LETTER I WITH TILDE
  .. |Jcirc|  unicode:: U+00134 .. LATIN CAPITAL LETTER J WITH CIRCUMFLEX
  .. |jcirc|  unicode:: U+00135 .. LATIN SMALL LETTER J WITH CIRCUMFLEX
  .. |Kcedil| unicode:: U+00136 .. LATIN CAPITAL LETTER K WITH CEDILLA
  .. |kcedil| unicode:: U+00137 .. LATIN SMALL LETTER K WITH CEDILLA
  .. |kgreen| unicode:: U+00138 .. LATIN SMALL LETTER KRA
  .. |Lacute| unicode:: U+00139 .. LATIN CAPITAL LETTER L WITH ACUTE
  .. |lacute| unicode:: U+0013A .. LATIN SMALL LETTER L WITH ACUTE
  .. |Lcaron| unicode:: U+0013D .. LATIN CAPITAL LETTER L WITH CARON
  .. |lcaron| unicode:: U+0013E .. LATIN SMALL LETTER L WITH CARON
  .. |Lcedil| unicode:: U+0013B .. LATIN CAPITAL LETTER L WITH CEDILLA
  .. |lcedil| unicode:: U+0013C .. LATIN SMALL LETTER L WITH CEDILLA
  .. |Lmidot| unicode:: U+0013F .. LATIN CAPITAL LETTER L WITH MIDDLE DOT
  .. |lmidot| unicode:: U+00140 .. LATIN SMALL LETTER L WITH MIDDLE DOT
  .. |Lstrok| unicode:: U+00141 .. LATIN CAPITAL LETTER L WITH STROKE
  .. |lstrok| unicode:: U+00142 .. LATIN SMALL LETTER L WITH STROKE
  .. |Nacute| unicode:: U+00143 .. LATIN CAPITAL LETTER N WITH ACUTE
  .. |nacute| unicode:: U+00144 .. LATIN SMALL LETTER N WITH ACUTE
  .. |napos|  unicode:: U+00149 .. LATIN SMALL LETTER N PRECEDED BY APOSTROPHE
  .. |Ncaron| unicode:: U+00147 .. LATIN CAPITAL LETTER N WITH CARON
  .. |ncaron| unicode:: U+00148 .. LATIN SMALL LETTER N WITH CARON
  .. |Ncedil| unicode:: U+00145 .. LATIN CAPITAL LETTER N WITH CEDILLA
  .. |ncedil| unicode:: U+00146 .. LATIN SMALL LETTER N WITH CEDILLA
  .. |Odblac| unicode:: U+00150 .. LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
  .. |odblac| unicode:: U+00151 .. LATIN SMALL LETTER O WITH DOUBLE ACUTE
  .. |OElig|  unicode:: U+00152 .. LATIN CAPITAL LIGATURE OE
  .. |oelig|  unicode:: U+00153 .. LATIN SMALL LIGATURE OE
  .. |Omacr|  unicode:: U+0014C .. LATIN CAPITAL LETTER O WITH MACRON
  .. |omacr|  unicode:: U+0014D .. LATIN SMALL LETTER O WITH MACRON
  .. |Racute| unicode:: U+00154 .. LATIN CAPITAL LETTER R WITH ACUTE
  .. |racute| unicode:: U+00155 .. LATIN SMALL LETTER R WITH ACUTE
  .. |Rcaron| unicode:: U+00158 .. LATIN CAPITAL LETTER R WITH CARON
  .. |rcaron| unicode:: U+00159 .. LATIN SMALL LETTER R WITH CARON
  .. |Rcedil| unicode:: U+00156 .. LATIN CAPITAL LETTER R WITH CEDILLA
  .. |rcedil| unicode:: U+00157 .. LATIN SMALL LETTER R WITH CEDILLA
  .. |Sacute| unicode:: U+0015A .. LATIN CAPITAL LETTER S WITH ACUTE
  .. |sacute| unicode:: U+0015B .. LATIN SMALL LETTER S WITH ACUTE
  .. |Scaron| unicode:: U+00160 .. LATIN CAPITAL LETTER S WITH CARON
  .. |scaron| unicode:: U+00161 .. LATIN SMALL LETTER S WITH CARON
  .. |Scedil| unicode:: U+0015E .. LATIN CAPITAL LETTER S WITH CEDILLA
  .. |scedil| unicode:: U+0015F .. LATIN SMALL LETTER S WITH CEDILLA
  .. |Scirc|  unicode:: U+0015C .. LATIN CAPITAL LETTER S WITH CIRCUMFLEX
  .. |scirc|  unicode:: U+0015D .. LATIN SMALL LETTER S WITH CIRCUMFLEX
  .. |Tcaron| unicode:: U+00164 .. LATIN CAPITAL LETTER T WITH CARON
  .. |tcaron| unicode:: U+00165 .. LATIN SMALL LETTER T WITH CARON
  .. |Tcedil| unicode:: U+00162 .. LATIN CAPITAL LETTER T WITH CEDILLA
  .. |tcedil| unicode:: U+00163 .. LATIN SMALL LETTER T WITH CEDILLA
  .. |Tstrok| unicode:: U+00166 .. LATIN CAPITAL LETTER T WITH STROKE
  .. |tstrok| unicode:: U+00167 .. LATIN SMALL LETTER T WITH STROKE
  .. |Ubreve| unicode:: U+0016C .. LATIN CAPITAL LETTER U WITH BREVE
  .. |ubreve| unicode:: U+0016D .. LATIN SMALL LETTER U WITH BREVE
  .. |Udblac| unicode:: U+00170 .. LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
  .. |udblac| unicode:: U+00171 .. LATIN SMALL LETTER U WITH DOUBLE ACUTE
  .. |Umacr|  unicode:: U+0016A .. LATIN CAPITAL LETTER U WITH MACRON
  .. |umacr|  unicode:: U+0016B .. LATIN SMALL LETTER U WITH MACRON
  .. |Uogon|  unicode:: U+00172 .. LATIN CAPITAL LETTER U WITH OGONEK
  .. |uogon|  unicode:: U+00173 .. LATIN SMALL LETTER U WITH OGONEK
  .. |Uring|  unicode:: U+0016E .. LATIN CAPITAL LETTER U WITH RING ABOVE
  .. |uring|  unicode:: U+0016F .. LATIN SMALL LETTER U WITH RING ABOVE
  .. |Utilde| unicode:: U+00168 .. LATIN CAPITAL LETTER U WITH TILDE
  .. |utilde| unicode:: U+00169 .. LATIN SMALL LETTER U WITH TILDE
  .. |Wcirc|  unicode:: U+00174 .. LATIN CAPITAL LETTER W WITH CIRCUMFLEX
  .. |wcirc|  unicode:: U+00175 .. LATIN SMALL LETTER W WITH CIRCUMFLEX
  .. |Ycirc|  unicode:: U+00176 .. LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
  .. |ycirc|  unicode:: U+00177 .. LATIN SMALL LETTER Y WITH CIRCUMFLEX
  .. |Yuml|   unicode:: U+00178 .. LATIN CAPITAL LETTER Y WITH DIAERESIS
  .. |Zacute| unicode:: U+00179 .. LATIN CAPITAL LETTER Z WITH ACUTE
  .. |zacute| unicode:: U+0017A .. LATIN SMALL LETTER Z WITH ACUTE
  .. |Zcaron| unicode:: U+0017D .. LATIN CAPITAL LETTER Z WITH CARON
  .. |zcaron| unicode:: U+0017E .. LATIN SMALL LETTER Z WITH CARON
  .. |Zdot|   unicode:: U+0017B .. LATIN CAPITAL LETTER Z WITH DOT ABOVE
  .. |zdot|   unicode:: U+0017C .. LATIN SMALL LETTER Z WITH DOT ABOVE


/Part 4. 082.📜 docutils-0.20.1/docutils/parsers/rst/include/isomfrk-wide.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Afr| unicode:: U+1D504 .. MATHEMATICAL FRAKTUR CAPITAL A
  .. |afr| unicode:: U+1D51E .. MATHEMATICAL FRAKTUR SMALL A
  .. |Bfr| unicode:: U+1D505 .. MATHEMATICAL FRAKTUR CAPITAL B
  .. |bfr| unicode:: U+1D51F .. MATHEMATICAL FRAKTUR SMALL B
  .. |Cfr| unicode:: U+0212D .. BLACK-LETTER CAPITAL C
  .. |cfr| unicode:: U+1D520 .. MATHEMATICAL FRAKTUR SMALL C
  .. |Dfr| unicode:: U+1D507 .. MATHEMATICAL FRAKTUR CAPITAL D
  .. |dfr| unicode:: U+1D521 .. MATHEMATICAL FRAKTUR SMALL D
  .. |Efr| unicode:: U+1D508 .. MATHEMATICAL FRAKTUR CAPITAL E
  .. |efr| unicode:: U+1D522 .. MATHEMATICAL FRAKTUR SMALL E
  .. |Ffr| unicode:: U+1D509 .. MATHEMATICAL FRAKTUR CAPITAL F
  .. |ffr| unicode:: U+1D523 .. MATHEMATICAL FRAKTUR SMALL F
  .. |Gfr| unicode:: U+1D50A .. MATHEMATICAL FRAKTUR CAPITAL G
  .. |gfr| unicode:: U+1D524 .. MATHEMATICAL FRAKTUR SMALL G
  .. |Hfr| unicode:: U+0210C .. BLACK-LETTER CAPITAL H
  .. |hfr| unicode:: U+1D525 .. MATHEMATICAL FRAKTUR SMALL H
  .. |Ifr| unicode:: U+02111 .. BLACK-LETTER CAPITAL I
  .. |ifr| unicode:: U+1D526 .. MATHEMATICAL FRAKTUR SMALL I
  .. |Jfr| unicode:: U+1D50D .. MATHEMATICAL FRAKTUR CAPITAL J
  .. |jfr| unicode:: U+1D527 .. MATHEMATICAL FRAKTUR SMALL J
  .. |Kfr| unicode:: U+1D50E .. MATHEMATICAL FRAKTUR CAPITAL K
  .. |kfr| unicode:: U+1D528 .. MATHEMATICAL FRAKTUR SMALL K
  .. |Lfr| unicode:: U+1D50F .. MATHEMATICAL FRAKTUR CAPITAL L
  .. |lfr| unicode:: U+1D529 .. MATHEMATICAL FRAKTUR SMALL L
  .. |Mfr| unicode:: U+1D510 .. MATHEMATICAL FRAKTUR CAPITAL M
  .. |mfr| unicode:: U+1D52A .. MATHEMATICAL FRAKTUR SMALL M
  .. |Nfr| unicode:: U+1D511 .. MATHEMATICAL FRAKTUR CAPITAL N
  .. |nfr| unicode:: U+1D52B .. MATHEMATICAL FRAKTUR SMALL N
  .. |Ofr| unicode:: U+1D512 .. MATHEMATICAL FRAKTUR CAPITAL O
  .. |ofr| unicode:: U+1D52C .. MATHEMATICAL FRAKTUR SMALL O
  .. |Pfr| unicode:: U+1D513 .. MATHEMATICAL FRAKTUR CAPITAL P
  .. |pfr| unicode:: U+1D52D .. MATHEMATICAL FRAKTUR SMALL P
  .. |Qfr| unicode:: U+1D514 .. MATHEMATICAL FRAKTUR CAPITAL Q
  .. |qfr| unicode:: U+1D52E .. MATHEMATICAL FRAKTUR SMALL Q
  .. |Rfr| unicode:: U+0211C .. BLACK-LETTER CAPITAL R
  .. |rfr| unicode:: U+1D52F .. MATHEMATICAL FRAKTUR SMALL R
  .. |Sfr| unicode:: U+1D516 .. MATHEMATICAL FRAKTUR CAPITAL S
  .. |sfr| unicode:: U+1D530 .. MATHEMATICAL FRAKTUR SMALL S
  .. |Tfr| unicode:: U+1D517 .. MATHEMATICAL FRAKTUR CAPITAL T
  .. |tfr| unicode:: U+1D531 .. MATHEMATICAL FRAKTUR SMALL T
  .. |Ufr| unicode:: U+1D518 .. MATHEMATICAL FRAKTUR CAPITAL U
  .. |ufr| unicode:: U+1D532 .. MATHEMATICAL FRAKTUR SMALL U
  .. |Vfr| unicode:: U+1D519 .. MATHEMATICAL FRAKTUR CAPITAL V
  .. |vfr| unicode:: U+1D533 .. MATHEMATICAL FRAKTUR SMALL V
  .. |Wfr| unicode:: U+1D51A .. MATHEMATICAL FRAKTUR CAPITAL W
  .. |wfr| unicode:: U+1D534 .. MATHEMATICAL FRAKTUR SMALL W
  .. |Xfr| unicode:: U+1D51B .. MATHEMATICAL FRAKTUR CAPITAL X
  .. |xfr| unicode:: U+1D535 .. MATHEMATICAL FRAKTUR SMALL X
  .. |Yfr| unicode:: U+1D51C .. MATHEMATICAL FRAKTUR CAPITAL Y
  .. |yfr| unicode:: U+1D536 .. MATHEMATICAL FRAKTUR SMALL Y
  .. |Zfr| unicode:: U+02128 .. BLACK-LETTER CAPITAL Z
  .. |zfr| unicode:: U+1D537 .. MATHEMATICAL FRAKTUR SMALL Z


/Part 4. 083.📜 docutils-0.20.1/docutils/parsers/rst/include/isomfrk.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Cfr| unicode:: U+0212D .. BLACK-LETTER CAPITAL C
  .. |Hfr| unicode:: U+0210C .. BLACK-LETTER CAPITAL H
  .. |Ifr| unicode:: U+02111 .. BLACK-LETTER CAPITAL I
  .. |Rfr| unicode:: U+0211C .. BLACK-LETTER CAPITAL R
  .. |Zfr| unicode:: U+02128 .. BLACK-LETTER CAPITAL Z


/Part 4. 084.📜 docutils-0.20.1/docutils/parsers/rst/include/isomopf-wide.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Aopf| unicode:: U+1D538 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL A
  .. |Bopf| unicode:: U+1D539 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL B
  .. |Copf| unicode:: U+02102 .. DOUBLE-STRUCK CAPITAL C
  .. |Dopf| unicode:: U+1D53B .. MATHEMATICAL DOUBLE-STRUCK CAPITAL D
  .. |Eopf| unicode:: U+1D53C .. MATHEMATICAL DOUBLE-STRUCK CAPITAL E
  .. |Fopf| unicode:: U+1D53D .. MATHEMATICAL DOUBLE-STRUCK CAPITAL F
  .. |Gopf| unicode:: U+1D53E .. MATHEMATICAL DOUBLE-STRUCK CAPITAL G
  .. |Hopf| unicode:: U+0210D .. DOUBLE-STRUCK CAPITAL H
  .. |Iopf| unicode:: U+1D540 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL I
  .. |Jopf| unicode:: U+1D541 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL J
  .. |Kopf| unicode:: U+1D542 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL K
  .. |Lopf| unicode:: U+1D543 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL L
  .. |Mopf| unicode:: U+1D544 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL M
  .. |Nopf| unicode:: U+02115 .. DOUBLE-STRUCK CAPITAL N
  .. |Oopf| unicode:: U+1D546 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL O
  .. |Popf| unicode:: U+02119 .. DOUBLE-STRUCK CAPITAL P
  .. |Qopf| unicode:: U+0211A .. DOUBLE-STRUCK CAPITAL Q
  .. |Ropf| unicode:: U+0211D .. DOUBLE-STRUCK CAPITAL R
  .. |Sopf| unicode:: U+1D54A .. MATHEMATICAL DOUBLE-STRUCK CAPITAL S
  .. |Topf| unicode:: U+1D54B .. MATHEMATICAL DOUBLE-STRUCK CAPITAL T
  .. |Uopf| unicode:: U+1D54C .. MATHEMATICAL DOUBLE-STRUCK CAPITAL U
  .. |Vopf| unicode:: U+1D54D .. MATHEMATICAL DOUBLE-STRUCK CAPITAL V
  .. |Wopf| unicode:: U+1D54E .. MATHEMATICAL DOUBLE-STRUCK CAPITAL W
  .. |Xopf| unicode:: U+1D54F .. MATHEMATICAL DOUBLE-STRUCK CAPITAL X
  .. |Yopf| unicode:: U+1D550 .. MATHEMATICAL DOUBLE-STRUCK CAPITAL Y
  .. |Zopf| unicode:: U+02124 .. DOUBLE-STRUCK CAPITAL Z


/Part 4. 085.📜 docutils-0.20.1/docutils/parsers/rst/include/isomopf.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Copf| unicode:: U+02102 .. DOUBLE-STRUCK CAPITAL C
  .. |Hopf| unicode:: U+0210D .. DOUBLE-STRUCK CAPITAL H
  .. |Nopf| unicode:: U+02115 .. DOUBLE-STRUCK CAPITAL N
  .. |Popf| unicode:: U+02119 .. DOUBLE-STRUCK CAPITAL P
  .. |Qopf| unicode:: U+0211A .. DOUBLE-STRUCK CAPITAL Q
  .. |Ropf| unicode:: U+0211D .. DOUBLE-STRUCK CAPITAL R
  .. |Zopf| unicode:: U+02124 .. DOUBLE-STRUCK CAPITAL Z


/Part 4. 086.📜 docutils-0.20.1/docutils/parsers/rst/include/isomscr-wide.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Ascr| unicode:: U+1D49C .. MATHEMATICAL SCRIPT CAPITAL A
  .. |ascr| unicode:: U+1D4B6 .. MATHEMATICAL SCRIPT SMALL A
  .. |Bscr| unicode:: U+0212C .. SCRIPT CAPITAL B
  .. |bscr| unicode:: U+1D4B7 .. MATHEMATICAL SCRIPT SMALL B
  .. |Cscr| unicode:: U+1D49E .. MATHEMATICAL SCRIPT CAPITAL C
  .. |cscr| unicode:: U+1D4B8 .. MATHEMATICAL SCRIPT SMALL C
  .. |Dscr| unicode:: U+1D49F .. MATHEMATICAL SCRIPT CAPITAL D
  .. |dscr| unicode:: U+1D4B9 .. MATHEMATICAL SCRIPT SMALL D
  .. |Escr| unicode:: U+02130 .. SCRIPT CAPITAL E
  .. |escr| unicode:: U+0212F .. SCRIPT SMALL E
  .. |Fscr| unicode:: U+02131 .. SCRIPT CAPITAL F
  .. |fscr| unicode:: U+1D4BB .. MATHEMATICAL SCRIPT SMALL F
  .. |Gscr| unicode:: U+1D4A2 .. MATHEMATICAL SCRIPT CAPITAL G
  .. |gscr| unicode:: U+0210A .. SCRIPT SMALL G
  .. |Hscr| unicode:: U+0210B .. SCRIPT CAPITAL H
  .. |hscr| unicode:: U+1D4BD .. MATHEMATICAL SCRIPT SMALL H
  .. |Iscr| unicode:: U+02110 .. SCRIPT CAPITAL I
  .. |iscr| unicode:: U+1D4BE .. MATHEMATICAL SCRIPT SMALL I
  .. |Jscr| unicode:: U+1D4A5 .. MATHEMATICAL SCRIPT CAPITAL J
  .. |jscr| unicode:: U+1D4BF .. MATHEMATICAL SCRIPT SMALL J
  .. |Kscr| unicode:: U+1D4A6 .. MATHEMATICAL SCRIPT CAPITAL K
  .. |kscr| unicode:: U+1D4C0 .. MATHEMATICAL SCRIPT SMALL K
  .. |Lscr| unicode:: U+02112 .. SCRIPT CAPITAL L
  .. |lscr| unicode:: U+1D4C1 .. MATHEMATICAL SCRIPT SMALL L
  .. |Mscr| unicode:: U+02133 .. SCRIPT CAPITAL M
  .. |mscr| unicode:: U+1D4C2 .. MATHEMATICAL SCRIPT SMALL M
  .. |Nscr| unicode:: U+1D4A9 .. MATHEMATICAL SCRIPT CAPITAL N
  .. |nscr| unicode:: U+1D4C3 .. MATHEMATICAL SCRIPT SMALL N
  .. |Oscr| unicode:: U+1D4AA .. MATHEMATICAL SCRIPT CAPITAL O
  .. |oscr| unicode:: U+02134 .. SCRIPT SMALL O
  .. |Pscr| unicode:: U+1D4AB .. MATHEMATICAL SCRIPT CAPITAL P
  .. |pscr| unicode:: U+1D4C5 .. MATHEMATICAL SCRIPT SMALL P
  .. |Qscr| unicode:: U+1D4AC .. MATHEMATICAL SCRIPT CAPITAL Q
  .. |qscr| unicode:: U+1D4C6 .. MATHEMATICAL SCRIPT SMALL Q
  .. |Rscr| unicode:: U+0211B .. SCRIPT CAPITAL R
  .. |rscr| unicode:: U+1D4C7 .. MATHEMATICAL SCRIPT SMALL R
  .. |Sscr| unicode:: U+1D4AE .. MATHEMATICAL SCRIPT CAPITAL S
  .. |sscr| unicode:: U+1D4C8 .. MATHEMATICAL SCRIPT SMALL S
  .. |Tscr| unicode:: U+1D4AF .. MATHEMATICAL SCRIPT CAPITAL T
  .. |tscr| unicode:: U+1D4C9 .. MATHEMATICAL SCRIPT SMALL T
  .. |Uscr| unicode:: U+1D4B0 .. MATHEMATICAL SCRIPT CAPITAL U
  .. |uscr| unicode:: U+1D4CA .. MATHEMATICAL SCRIPT SMALL U
  .. |Vscr| unicode:: U+1D4B1 .. MATHEMATICAL SCRIPT CAPITAL V
  .. |vscr| unicode:: U+1D4CB .. MATHEMATICAL SCRIPT SMALL V
  .. |Wscr| unicode:: U+1D4B2 .. MATHEMATICAL SCRIPT CAPITAL W
  .. |wscr| unicode:: U+1D4CC .. MATHEMATICAL SCRIPT SMALL W
  .. |Xscr| unicode:: U+1D4B3 .. MATHEMATICAL SCRIPT CAPITAL X
  .. |xscr| unicode:: U+1D4CD .. MATHEMATICAL SCRIPT SMALL X
  .. |Yscr| unicode:: U+1D4B4 .. MATHEMATICAL SCRIPT CAPITAL Y
  .. |yscr| unicode:: U+1D4CE .. MATHEMATICAL SCRIPT SMALL Y
  .. |Zscr| unicode:: U+1D4B5 .. MATHEMATICAL SCRIPT CAPITAL Z
  .. |zscr| unicode:: U+1D4CF .. MATHEMATICAL SCRIPT SMALL Z


/Part 4. 087.📜 docutils-0.20.1/docutils/parsers/rst/include/isomscr.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Bscr| unicode:: U+0212C .. SCRIPT CAPITAL B
  .. |Escr| unicode:: U+02130 .. SCRIPT CAPITAL E
  .. |escr| unicode:: U+0212F .. SCRIPT SMALL E
  .. |Fscr| unicode:: U+02131 .. SCRIPT CAPITAL F
  .. |gscr| unicode:: U+0210A .. SCRIPT SMALL G
  .. |Hscr| unicode:: U+0210B .. SCRIPT CAPITAL H
  .. |Iscr| unicode:: U+02110 .. SCRIPT CAPITAL I
  .. |Lscr| unicode:: U+02112 .. SCRIPT CAPITAL L
  .. |Mscr| unicode:: U+02133 .. SCRIPT CAPITAL M
  .. |oscr| unicode:: U+02134 .. SCRIPT SMALL O
  .. |Rscr| unicode:: U+0211B .. SCRIPT CAPITAL R


/Part 4. 088.📜 docutils-0.20.1/docutils/parsers/rst/include/isonum.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |amp|    unicode:: U+00026 .. AMPERSAND
  .. |apos|   unicode:: U+00027 .. APOSTROPHE
  .. |ast|    unicode:: U+0002A .. ASTERISK
  .. |brvbar| unicode:: U+000A6 .. BROKEN BAR
  .. |bsol|   unicode:: U+0005C .. REVERSE SOLIDUS
  .. |cent|   unicode:: U+000A2 .. CENT SIGN
  .. |colon|  unicode:: U+0003A .. COLON
  .. |comma|  unicode:: U+0002C .. COMMA
  .. |commat| unicode:: U+00040 .. COMMERCIAL AT
  .. |copy|   unicode:: U+000A9 .. COPYRIGHT SIGN
  .. |curren| unicode:: U+000A4 .. CURRENCY SIGN
  .. |darr|   unicode:: U+02193 .. DOWNWARDS ARROW
  .. |deg|    unicode:: U+000B0 .. DEGREE SIGN
  .. |divide| unicode:: U+000F7 .. DIVISION SIGN
  .. |dollar| unicode:: U+00024 .. DOLLAR SIGN
  .. |equals| unicode:: U+0003D .. EQUALS SIGN
  .. |excl|   unicode:: U+00021 .. EXCLAMATION MARK
  .. |frac12| unicode:: U+000BD .. VULGAR FRACTION ONE HALF
  .. |frac14| unicode:: U+000BC .. VULGAR FRACTION ONE QUARTER
  .. |frac18| unicode:: U+0215B .. VULGAR FRACTION ONE EIGHTH
  .. |frac34| unicode:: U+000BE .. VULGAR FRACTION THREE QUARTERS
  .. |frac38| unicode:: U+0215C .. VULGAR FRACTION THREE EIGHTHS
  .. |frac58| unicode:: U+0215D .. VULGAR FRACTION FIVE EIGHTHS
  .. |frac78| unicode:: U+0215E .. VULGAR FRACTION SEVEN EIGHTHS
  .. |gt|     unicode:: U+0003E .. GREATER-THAN SIGN
  .. |half|   unicode:: U+000BD .. VULGAR FRACTION ONE HALF
  .. |horbar| unicode:: U+02015 .. HORIZONTAL BAR
  .. |hyphen| unicode:: U+02010 .. HYPHEN
  .. |iexcl|  unicode:: U+000A1 .. INVERTED EXCLAMATION MARK
  .. |iquest| unicode:: U+000BF .. INVERTED QUESTION MARK
  .. |laquo|  unicode:: U+000AB .. LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
  .. |larr|   unicode:: U+02190 .. LEFTWARDS ARROW
  .. |lcub|   unicode:: U+0007B .. LEFT CURLY BRACKET
  .. |ldquo|  unicode:: U+0201C .. LEFT DOUBLE QUOTATION MARK
  .. |lowbar| unicode:: U+0005F .. LOW LINE
  .. |lpar|   unicode:: U+00028 .. LEFT PARENTHESIS
  .. |lsqb|   unicode:: U+0005B .. LEFT SQUARE BRACKET
  .. |lsquo|  unicode:: U+02018 .. LEFT SINGLE QUOTATION MARK
  .. |lt|     unicode:: U+0003C .. LESS-THAN SIGN
  .. |micro|  unicode:: U+000B5 .. MICRO SIGN
  .. |middot| unicode:: U+000B7 .. MIDDLE DOT
  .. |nbsp|   unicode:: U+000A0 .. NO-BREAK SPACE
  .. |not|    unicode:: U+000AC .. NOT SIGN
  .. |num|    unicode:: U+00023 .. NUMBER SIGN
  .. |ohm|    unicode:: U+02126 .. OHM SIGN
  .. |ordf|   unicode:: U+000AA .. FEMININE ORDINAL INDICATOR
  .. |ordm|   unicode:: U+000BA .. MASCULINE ORDINAL INDICATOR
  .. |para|   unicode:: U+000B6 .. PILCROW SIGN
  .. |percnt| unicode:: U+00025 .. PERCENT SIGN
  .. |period| unicode:: U+0002E .. FULL STOP
  .. |plus|   unicode:: U+0002B .. PLUS SIGN
  .. |plusmn| unicode:: U+000B1 .. PLUS-MINUS SIGN
  .. |pound|  unicode:: U+000A3 .. POUND SIGN
  .. |quest|  unicode:: U+0003F .. QUESTION MARK
  .. |quot|   unicode:: U+00022 .. QUOTATION MARK
  .. |raquo|  unicode:: U+000BB .. RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
  .. |rarr|   unicode:: U+02192 .. RIGHTWARDS ARROW
  .. |rcub|   unicode:: U+0007D .. RIGHT CURLY BRACKET
  .. |rdquo|  unicode:: U+0201D .. RIGHT DOUBLE QUOTATION MARK
  .. |reg|    unicode:: U+000AE .. REGISTERED SIGN
  .. |rpar|   unicode:: U+00029 .. RIGHT PARENTHESIS
  .. |rsqb|   unicode:: U+0005D .. RIGHT SQUARE BRACKET
  .. |rsquo|  unicode:: U+02019 .. RIGHT SINGLE QUOTATION MARK
  .. |sect|   unicode:: U+000A7 .. SECTION SIGN
  .. |semi|   unicode:: U+0003B .. SEMICOLON
  .. |shy|    unicode:: U+000AD .. SOFT HYPHEN
  .. |sol|    unicode:: U+0002F .. SOLIDUS
  .. |sung|   unicode:: U+0266A .. EIGHTH NOTE
  .. |sup1|   unicode:: U+000B9 .. SUPERSCRIPT ONE
  .. |sup2|   unicode:: U+000B2 .. SUPERSCRIPT TWO
  .. |sup3|   unicode:: U+000B3 .. SUPERSCRIPT THREE
  .. |times|  unicode:: U+000D7 .. MULTIPLICATION SIGN
  .. |trade|  unicode:: U+02122 .. TRADE MARK SIGN
  .. |uarr|   unicode:: U+02191 .. UPWARDS ARROW
  .. |verbar| unicode:: U+0007C .. VERTICAL LINE
  .. |yen|    unicode:: U+000A5 .. YEN SIGN


/Part 4. 089.📜 docutils-0.20.1/docutils/parsers/rst/include/isopub.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |blank|  unicode:: U+02423 .. OPEN BOX
  .. |blk12|  unicode:: U+02592 .. MEDIUM SHADE
  .. |blk14|  unicode:: U+02591 .. LIGHT SHADE
  .. |blk34|  unicode:: U+02593 .. DARK SHADE
  .. |block|  unicode:: U+02588 .. FULL BLOCK
  .. |bull|   unicode:: U+02022 .. BULLET
  .. |caret|  unicode:: U+02041 .. CARET INSERTION POINT
  .. |check|  unicode:: U+02713 .. CHECK MARK
  .. |cir|    unicode:: U+025CB .. WHITE CIRCLE
  .. |clubs|  unicode:: U+02663 .. BLACK CLUB SUIT
  .. |copysr| unicode:: U+02117 .. SOUND RECORDING COPYRIGHT
  .. |cross|  unicode:: U+02717 .. BALLOT X
  .. |Dagger| unicode:: U+02021 .. DOUBLE DAGGER
  .. |dagger| unicode:: U+02020 .. DAGGER
  .. |dash|   unicode:: U+02010 .. HYPHEN
  .. |diams|  unicode:: U+02666 .. BLACK DIAMOND SUIT
  .. |dlcrop| unicode:: U+0230D .. BOTTOM LEFT CROP
  .. |drcrop| unicode:: U+0230C .. BOTTOM RIGHT CROP
  .. |dtri|   unicode:: U+025BF .. WHITE DOWN-POINTING SMALL TRIANGLE
  .. |dtrif|  unicode:: U+025BE .. BLACK DOWN-POINTING SMALL TRIANGLE
  .. |emsp|   unicode:: U+02003 .. EM SPACE
  .. |emsp13| unicode:: U+02004 .. THREE-PER-EM SPACE
  .. |emsp14| unicode:: U+02005 .. FOUR-PER-EM SPACE
  .. |ensp|   unicode:: U+02002 .. EN SPACE
  .. |female| unicode:: U+02640 .. FEMALE SIGN
  .. |ffilig| unicode:: U+0FB03 .. LATIN SMALL LIGATURE FFI
  .. |fflig|  unicode:: U+0FB00 .. LATIN SMALL LIGATURE FF
  .. |ffllig| unicode:: U+0FB04 .. LATIN SMALL LIGATURE FFL
  .. |filig|  unicode:: U+0FB01 .. LATIN SMALL LIGATURE FI
  .. |flat|   unicode:: U+0266D .. MUSIC FLAT SIGN
  .. |fllig|  unicode:: U+0FB02 .. LATIN SMALL LIGATURE FL
  .. |frac13| unicode:: U+02153 .. VULGAR FRACTION ONE THIRD
  .. |frac15| unicode:: U+02155 .. VULGAR FRACTION ONE FIFTH
  .. |frac16| unicode:: U+02159 .. VULGAR FRACTION ONE SIXTH
  .. |frac23| unicode:: U+02154 .. VULGAR FRACTION TWO THIRDS
  .. |frac25| unicode:: U+02156 .. VULGAR FRACTION TWO FIFTHS
  .. |frac35| unicode:: U+02157 .. VULGAR FRACTION THREE FIFTHS
  .. |frac45| unicode:: U+02158 .. VULGAR FRACTION FOUR FIFTHS
  .. |frac56| unicode:: U+0215A .. VULGAR FRACTION FIVE SIXTHS
  .. |hairsp| unicode:: U+0200A .. HAIR SPACE
  .. |hearts| unicode:: U+02665 .. BLACK HEART SUIT
  .. |hellip| unicode:: U+02026 .. HORIZONTAL ELLIPSIS
  .. |hybull| unicode:: U+02043 .. HYPHEN BULLET
  .. |incare| unicode:: U+02105 .. CARE OF
  .. |ldquor| unicode:: U+0201E .. DOUBLE LOW-9 QUOTATION MARK
  .. |lhblk|  unicode:: U+02584 .. LOWER HALF BLOCK
  .. |loz|    unicode:: U+025CA .. LOZENGE
  .. |lozf|   unicode:: U+029EB .. BLACK LOZENGE
  .. |lsquor| unicode:: U+0201A .. SINGLE LOW-9 QUOTATION MARK
  .. |ltri|   unicode:: U+025C3 .. WHITE LEFT-POINTING SMALL TRIANGLE
  .. |ltrif|  unicode:: U+025C2 .. BLACK LEFT-POINTING SMALL TRIANGLE
  .. |male|   unicode:: U+02642 .. MALE SIGN
  .. |malt|   unicode:: U+02720 .. MALTESE CROSS
  .. |marker| unicode:: U+025AE .. BLACK VERTICAL RECTANGLE
  .. |mdash|  unicode:: U+02014 .. EM DASH
  .. |mldr|   unicode:: U+02026 .. HORIZONTAL ELLIPSIS
  .. |natur|  unicode:: U+0266E .. MUSIC NATURAL SIGN
  .. |ndash|  unicode:: U+02013 .. EN DASH
  .. |nldr|   unicode:: U+02025 .. TWO DOT LEADER
  .. |numsp|  unicode:: U+02007 .. FIGURE SPACE
  .. |phone|  unicode:: U+0260E .. BLACK TELEPHONE
  .. |puncsp| unicode:: U+02008 .. PUNCTUATION SPACE
  .. |rdquor| unicode:: U+0201D .. RIGHT DOUBLE QUOTATION MARK
  .. |rect|   unicode:: U+025AD .. WHITE RECTANGLE
  .. |rsquor| unicode:: U+02019 .. RIGHT SINGLE QUOTATION MARK
  .. |rtri|   unicode:: U+025B9 .. WHITE RIGHT-POINTING SMALL TRIANGLE
  .. |rtrif|  unicode:: U+025B8 .. BLACK RIGHT-POINTING SMALL TRIANGLE
  .. |rx|     unicode:: U+0211E .. PRESCRIPTION TAKE
  .. |sext|   unicode:: U+02736 .. SIX POINTED BLACK STAR
  .. |sharp|  unicode:: U+0266F .. MUSIC SHARP SIGN
  .. |spades| unicode:: U+02660 .. BLACK SPADE SUIT
  .. |squ|    unicode:: U+025A1 .. WHITE SQUARE
  .. |squf|   unicode:: U+025AA .. BLACK SMALL SQUARE
  .. |star|   unicode:: U+02606 .. WHITE STAR
  .. |starf|  unicode:: U+02605 .. BLACK STAR
  .. |target| unicode:: U+02316 .. POSITION INDICATOR
  .. |telrec| unicode:: U+02315 .. TELEPHONE RECORDER
  .. |thinsp| unicode:: U+02009 .. THIN SPACE
  .. |uhblk|  unicode:: U+02580 .. UPPER HALF BLOCK
  .. |ulcrop| unicode:: U+0230F .. TOP LEFT CROP
  .. |urcrop| unicode:: U+0230E .. TOP RIGHT CROP
  .. |utri|   unicode:: U+025B5 .. WHITE UP-POINTING SMALL TRIANGLE
  .. |utrif|  unicode:: U+025B4 .. BLACK UP-POINTING SMALL TRIANGLE
  .. |vellip| unicode:: U+022EE .. VERTICAL ELLIPSIS


/Part 4. 090.📜 docutils-0.20.1/docutils/parsers/rst/include/isotech.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |acd|      unicode:: U+0223F .. SINE WAVE
  .. |aleph|    unicode:: U+02135 .. ALEF SYMBOL
  .. |And|      unicode:: U+02A53 .. DOUBLE LOGICAL AND
  .. |and|      unicode:: U+02227 .. LOGICAL AND
  .. |andand|   unicode:: U+02A55 .. TWO INTERSECTING LOGICAL AND
  .. |andd|     unicode:: U+02A5C .. LOGICAL AND WITH HORIZONTAL DASH
  .. |andslope| unicode:: U+02A58 .. SLOPING LARGE AND
  .. |andv|     unicode:: U+02A5A .. LOGICAL AND WITH MIDDLE STEM
  .. |ang90|    unicode:: U+0221F .. RIGHT ANGLE
  .. |angrt|    unicode:: U+0221F .. RIGHT ANGLE
  .. |angsph|   unicode:: U+02222 .. SPHERICAL ANGLE
  .. |angst|    unicode:: U+0212B .. ANGSTROM SIGN
  .. |ap|       unicode:: U+02248 .. ALMOST EQUAL TO
  .. |apacir|   unicode:: U+02A6F .. ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT
  .. |awconint| unicode:: U+02233 .. ANTICLOCKWISE CONTOUR INTEGRAL
  .. |awint|    unicode:: U+02A11 .. ANTICLOCKWISE INTEGRATION
  .. |becaus|   unicode:: U+02235 .. BECAUSE
  .. |bernou|   unicode:: U+0212C .. SCRIPT CAPITAL B
  .. |bne|      unicode:: U+0003D U+020E5 .. EQUALS SIGN with reverse slash
  .. |bnequiv|  unicode:: U+02261 U+020E5 .. IDENTICAL TO with reverse slash
  .. |bNot|     unicode:: U+02AED .. REVERSED DOUBLE STROKE NOT SIGN
  .. |bnot|     unicode:: U+02310 .. REVERSED NOT SIGN
  .. |bottom|   unicode:: U+022A5 .. UP TACK
  .. |cap|      unicode:: U+02229 .. INTERSECTION
  .. |Cconint|  unicode:: U+02230 .. VOLUME INTEGRAL
  .. |cirfnint| unicode:: U+02A10 .. CIRCULATION FUNCTION
  .. |compfn|   unicode:: U+02218 .. RING OPERATOR
  .. |cong|     unicode:: U+02245 .. APPROXIMATELY EQUAL TO
  .. |Conint|   unicode:: U+0222F .. SURFACE INTEGRAL
  .. |conint|   unicode:: U+0222E .. CONTOUR INTEGRAL
  .. |ctdot|    unicode:: U+022EF .. MIDLINE HORIZONTAL ELLIPSIS
  .. |cup|      unicode:: U+0222A .. UNION
  .. |cwconint| unicode:: U+02232 .. CLOCKWISE CONTOUR INTEGRAL
  .. |cwint|    unicode:: U+02231 .. CLOCKWISE INTEGRAL
  .. |cylcty|   unicode:: U+0232D .. CYLINDRICITY
  .. |disin|    unicode:: U+022F2 .. ELEMENT OF WITH LONG HORIZONTAL STROKE
  .. |Dot|      unicode:: U+000A8 .. DIAERESIS
  .. |DotDot|   unicode:: U+020DC .. COMBINING FOUR DOTS ABOVE
  .. |dsol|     unicode:: U+029F6 .. SOLIDUS WITH OVERBAR
  .. |dtdot|    unicode:: U+022F1 .. DOWN RIGHT DIAGONAL ELLIPSIS
  .. |dwangle|  unicode:: U+029A6 .. OBLIQUE ANGLE OPENING UP
  .. |elinters| unicode:: U+0FFFD .. REPLACEMENT CHARACTER
  .. |epar|     unicode:: U+022D5 .. EQUAL AND PARALLEL TO
  .. |eparsl|   unicode:: U+029E3 .. EQUALS SIGN AND SLANTED PARALLEL
  .. |equiv|    unicode:: U+02261 .. IDENTICAL TO
  .. |eqvparsl| unicode:: U+029E5 .. IDENTICAL TO AND SLANTED PARALLEL
  .. |exist|    unicode:: U+02203 .. THERE EXISTS
  .. |fltns|    unicode:: U+025B1 .. WHITE PARALLELOGRAM
  .. |fnof|     unicode:: U+00192 .. LATIN SMALL LETTER F WITH HOOK
  .. |forall|   unicode:: U+02200 .. FOR ALL
  .. |fpartint| unicode:: U+02A0D .. FINITE PART INTEGRAL
  .. |ge|       unicode:: U+02265 .. GREATER-THAN OR EQUAL TO
  .. |hamilt|   unicode:: U+0210B .. SCRIPT CAPITAL H
  .. |iff|      unicode:: U+021D4 .. LEFT RIGHT DOUBLE ARROW
  .. |iinfin|   unicode:: U+029DC .. INCOMPLETE INFINITY
  .. |imped|    unicode:: U+001B5 .. LATIN CAPITAL LETTER Z WITH STROKE
  .. |infin|    unicode:: U+0221E .. INFINITY
  .. |infintie| unicode:: U+029DD .. TIE OVER INFINITY
  .. |Int|      unicode:: U+0222C .. DOUBLE INTEGRAL
  .. |int|      unicode:: U+0222B .. INTEGRAL
  .. |intlarhk| unicode:: U+02A17 .. INTEGRAL WITH LEFTWARDS ARROW WITH HOOK
  .. |isin|     unicode:: U+02208 .. ELEMENT OF
  .. |isindot|  unicode:: U+022F5 .. ELEMENT OF WITH DOT ABOVE
  .. |isinE|    unicode:: U+022F9 .. ELEMENT OF WITH TWO HORIZONTAL STROKES
  .. |isins|    unicode:: U+022F4 .. SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  .. |isinsv|   unicode:: U+022F3 .. ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  .. |isinv|    unicode:: U+02208 .. ELEMENT OF
  .. |lagran|   unicode:: U+02112 .. SCRIPT CAPITAL L
  .. |Lang|     unicode:: U+0300A .. LEFT DOUBLE ANGLE BRACKET
  .. |lang|     unicode:: U+02329 .. LEFT-POINTING ANGLE BRACKET
  .. |lArr|     unicode:: U+021D0 .. LEFTWARDS DOUBLE ARROW
  .. |lbbrk|    unicode:: U+03014 .. LEFT TORTOISE SHELL BRACKET
  .. |le|       unicode:: U+02264 .. LESS-THAN OR EQUAL TO
  .. |loang|    unicode:: U+03018 .. LEFT WHITE TORTOISE SHELL BRACKET
  .. |lobrk|    unicode:: U+0301A .. LEFT WHITE SQUARE BRACKET
  .. |lopar|    unicode:: U+02985 .. LEFT WHITE PARENTHESIS
  .. |lowast|   unicode:: U+02217 .. ASTERISK OPERATOR
  .. |minus|    unicode:: U+02212 .. MINUS SIGN
  .. |mnplus|   unicode:: U+02213 .. MINUS-OR-PLUS SIGN
  .. |nabla|    unicode:: U+02207 .. NABLA
  .. |ne|       unicode:: U+02260 .. NOT EQUAL TO
  .. |nedot|    unicode:: U+02250 U+00338 .. APPROACHES THE LIMIT with slash
  .. |nhpar|    unicode:: U+02AF2 .. PARALLEL WITH HORIZONTAL STROKE
  .. |ni|       unicode:: U+0220B .. CONTAINS AS MEMBER
  .. |nis|      unicode:: U+022FC .. SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE
  .. |nisd|     unicode:: U+022FA .. CONTAINS WITH LONG HORIZONTAL STROKE
  .. |niv|      unicode:: U+0220B .. CONTAINS AS MEMBER
  .. |Not|      unicode:: U+02AEC .. DOUBLE STROKE NOT SIGN
  .. |notin|    unicode:: U+02209 .. NOT AN ELEMENT OF
  .. |notindot| unicode:: U+022F5 U+00338 .. ELEMENT OF WITH DOT ABOVE with slash
  .. |notinE|   unicode:: U+022F9 U+00338 .. ELEMENT OF WITH TWO HORIZONTAL STROKES with slash
  .. |notinva|  unicode:: U+02209 .. NOT AN ELEMENT OF
  .. |notinvb|  unicode:: U+022F7 .. SMALL ELEMENT OF WITH OVERBAR
  .. |notinvc|  unicode:: U+022F6 .. ELEMENT OF WITH OVERBAR
  .. |notni|    unicode:: U+0220C .. DOES NOT CONTAIN AS MEMBER
  .. |notniva|  unicode:: U+0220C .. DOES NOT CONTAIN AS MEMBER
  .. |notnivb|  unicode:: U+022FE .. SMALL CONTAINS WITH OVERBAR
  .. |notnivc|  unicode:: U+022FD .. CONTAINS WITH OVERBAR
  .. |nparsl|   unicode:: U+02AFD U+020E5 .. DOUBLE SOLIDUS OPERATOR with reverse slash
  .. |npart|    unicode:: U+02202 U+00338 .. PARTIAL DIFFERENTIAL with slash
  .. |npolint|  unicode:: U+02A14 .. LINE INTEGRATION NOT INCLUDING THE POLE
  .. |nvinfin|  unicode:: U+029DE .. INFINITY NEGATED WITH VERTICAL BAR
  .. |olcross|  unicode:: U+029BB .. CIRCLE WITH SUPERIMPOSED X
  .. |Or|       unicode:: U+02A54 .. DOUBLE LOGICAL OR
  .. |or|       unicode:: U+02228 .. LOGICAL OR
  .. |ord|      unicode:: U+02A5D .. LOGICAL OR WITH HORIZONTAL DASH
  .. |order|    unicode:: U+02134 .. SCRIPT SMALL O
  .. |oror|     unicode:: U+02A56 .. TWO INTERSECTING LOGICAL OR
  .. |orslope|  unicode:: U+02A57 .. SLOPING LARGE OR
  .. |orv|      unicode:: U+02A5B .. LOGICAL OR WITH MIDDLE STEM
  .. |par|      unicode:: U+02225 .. PARALLEL TO
  .. |parsl|    unicode:: U+02AFD .. DOUBLE SOLIDUS OPERATOR
  .. |part|     unicode:: U+02202 .. PARTIAL DIFFERENTIAL
  .. |permil|   unicode:: U+02030 .. PER MILLE SIGN
  .. |perp|     unicode:: U+022A5 .. UP TACK
  .. |pertenk|  unicode:: U+02031 .. PER TEN THOUSAND SIGN
  .. |phmmat|   unicode:: U+02133 .. SCRIPT CAPITAL M
  .. |pointint| unicode:: U+02A15 .. INTEGRAL AROUND A POINT OPERATOR
  .. |Prime|    unicode:: U+02033 .. DOUBLE PRIME
  .. |prime|    unicode:: U+02032 .. PRIME
  .. |profalar| unicode:: U+0232E .. ALL AROUND-PROFILE
  .. |profline| unicode:: U+02312 .. ARC
  .. |profsurf| unicode:: U+02313 .. SEGMENT
  .. |prop|     unicode:: U+0221D .. PROPORTIONAL TO
  .. |qint|     unicode:: U+02A0C .. QUADRUPLE INTEGRAL OPERATOR
  .. |qprime|   unicode:: U+02057 .. QUADRUPLE PRIME
  .. |quatint|  unicode:: U+02A16 .. QUATERNION INTEGRAL OPERATOR
  .. |radic|    unicode:: U+0221A .. SQUARE ROOT
  .. |Rang|     unicode:: U+0300B .. RIGHT DOUBLE ANGLE BRACKET
  .. |rang|     unicode:: U+0232A .. RIGHT-POINTING ANGLE BRACKET
  .. |rArr|     unicode:: U+021D2 .. RIGHTWARDS DOUBLE ARROW
  .. |rbbrk|    unicode:: U+03015 .. RIGHT TORTOISE SHELL BRACKET
  .. |roang|    unicode:: U+03019 .. RIGHT WHITE TORTOISE SHELL BRACKET
  .. |robrk|    unicode:: U+0301B .. RIGHT WHITE SQUARE BRACKET
  .. |ropar|    unicode:: U+02986 .. RIGHT WHITE PARENTHESIS
  .. |rppolint| unicode:: U+02A12 .. LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE
  .. |scpolint| unicode:: U+02A13 .. LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE
  .. |sim|      unicode:: U+0223C .. TILDE OPERATOR
  .. |simdot|   unicode:: U+02A6A .. TILDE OPERATOR WITH DOT ABOVE
  .. |sime|     unicode:: U+02243 .. ASYMPTOTICALLY EQUAL TO
  .. |smeparsl| unicode:: U+029E4 .. EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE
  .. |square|   unicode:: U+025A1 .. WHITE SQUARE
  .. |squarf|   unicode:: U+025AA .. BLACK SMALL SQUARE
  .. |strns|    unicode:: U+000AF .. MACRON
  .. |sub|      unicode:: U+02282 .. SUBSET OF
  .. |sube|     unicode:: U+02286 .. SUBSET OF OR EQUAL TO
  .. |sup|      unicode:: U+02283 .. SUPERSET OF
  .. |supe|     unicode:: U+02287 .. SUPERSET OF OR EQUAL TO
  .. |tdot|     unicode:: U+020DB .. COMBINING THREE DOTS ABOVE
  .. |there4|   unicode:: U+02234 .. THEREFORE
  .. |tint|     unicode:: U+0222D .. TRIPLE INTEGRAL
  .. |top|      unicode:: U+022A4 .. DOWN TACK
  .. |topbot|   unicode:: U+02336 .. APL FUNCTIONAL SYMBOL I-BEAM
  .. |topcir|   unicode:: U+02AF1 .. DOWN TACK WITH CIRCLE BELOW
  .. |tprime|   unicode:: U+02034 .. TRIPLE PRIME
  .. |utdot|    unicode:: U+022F0 .. UP RIGHT DIAGONAL ELLIPSIS
  .. |uwangle|  unicode:: U+029A7 .. OBLIQUE ANGLE OPENING DOWN
  .. |vangrt|   unicode:: U+0299C .. RIGHT ANGLE VARIANT WITH SQUARE
  .. |veeeq|    unicode:: U+0225A .. EQUIANGULAR TO
  .. |Verbar|   unicode:: U+02016 .. DOUBLE VERTICAL LINE
  .. |wedgeq|   unicode:: U+02259 .. ESTIMATES
  .. |xnis|     unicode:: U+022FB .. CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE


/Part 4. 091.📜 docutils-0.20.1/docutils/parsers/rst/include/mmlalias.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |angle|                           unicode:: U+02220 .. ANGLE
  .. |ApplyFunction|                   unicode:: U+02061 .. FUNCTION APPLICATION
  .. |approx|                          unicode:: U+02248 .. ALMOST EQUAL TO
  .. |approxeq|                        unicode:: U+0224A .. ALMOST EQUAL OR EQUAL TO
  .. |Assign|                          unicode:: U+02254 .. COLON EQUALS
  .. |backcong|                        unicode:: U+0224C .. ALL EQUAL TO
  .. |backepsilon|                     unicode:: U+003F6 .. GREEK REVERSED LUNATE EPSILON SYMBOL
  .. |backprime|                       unicode:: U+02035 .. REVERSED PRIME
  .. |backsim|                         unicode:: U+0223D .. REVERSED TILDE
  .. |backsimeq|                       unicode:: U+022CD .. REVERSED TILDE EQUALS
  .. |Backslash|                       unicode:: U+02216 .. SET MINUS
  .. |barwedge|                        unicode:: U+02305 .. PROJECTIVE
  .. |Because|                         unicode:: U+02235 .. BECAUSE
  .. |because|                         unicode:: U+02235 .. BECAUSE
  .. |Bernoullis|                      unicode:: U+0212C .. SCRIPT CAPITAL B
  .. |between|                         unicode:: U+0226C .. BETWEEN
  .. |bigcap|                          unicode:: U+022C2 .. N-ARY INTERSECTION
  .. |bigcirc|                         unicode:: U+025EF .. LARGE CIRCLE
  .. |bigcup|                          unicode:: U+022C3 .. N-ARY UNION
  .. |bigodot|                         unicode:: U+02A00 .. N-ARY CIRCLED DOT OPERATOR
  .. |bigoplus|                        unicode:: U+02A01 .. N-ARY CIRCLED PLUS OPERATOR
  .. |bigotimes|                       unicode:: U+02A02 .. N-ARY CIRCLED TIMES OPERATOR
  .. |bigsqcup|                        unicode:: U+02A06 .. N-ARY SQUARE UNION OPERATOR
  .. |bigstar|                         unicode:: U+02605 .. BLACK STAR
  .. |bigtriangledown|                 unicode:: U+025BD .. WHITE DOWN-POINTING TRIANGLE
  .. |bigtriangleup|                   unicode:: U+025B3 .. WHITE UP-POINTING TRIANGLE
  .. |biguplus|                        unicode:: U+02A04 .. N-ARY UNION OPERATOR WITH PLUS
  .. |bigvee|                          unicode:: U+022C1 .. N-ARY LOGICAL OR
  .. |bigwedge|                        unicode:: U+022C0 .. N-ARY LOGICAL AND
  .. |bkarow|                          unicode:: U+0290D .. RIGHTWARDS DOUBLE DASH ARROW
  .. |blacklozenge|                    unicode:: U+029EB .. BLACK LOZENGE
  .. |blacksquare|                     unicode:: U+025AA .. BLACK SMALL SQUARE
  .. |blacktriangle|                   unicode:: U+025B4 .. BLACK UP-POINTING SMALL TRIANGLE
  .. |blacktriangledown|               unicode:: U+025BE .. BLACK DOWN-POINTING SMALL TRIANGLE
  .. |blacktriangleleft|               unicode:: U+025C2 .. BLACK LEFT-POINTING SMALL TRIANGLE
  .. |blacktriangleright|              unicode:: U+025B8 .. BLACK RIGHT-POINTING SMALL TRIANGLE
  .. |bot|                             unicode:: U+022A5 .. UP TACK
  .. |boxminus|                        unicode:: U+0229F .. SQUARED MINUS
  .. |boxplus|                         unicode:: U+0229E .. SQUARED PLUS
  .. |boxtimes|                        unicode:: U+022A0 .. SQUARED TIMES
  .. |Breve|                           unicode:: U+002D8 .. BREVE
  .. |bullet|                          unicode:: U+02022 .. BULLET
  .. |Bumpeq|                          unicode:: U+0224E .. GEOMETRICALLY EQUIVALENT TO
  .. |bumpeq|                          unicode:: U+0224F .. DIFFERENCE BETWEEN
  .. |CapitalDifferentialD|            unicode:: U+02145 .. DOUBLE-STRUCK ITALIC CAPITAL D
  .. |Cayleys|                         unicode:: U+0212D .. BLACK-LETTER CAPITAL C
  .. |Cedilla|                         unicode:: U+000B8 .. CEDILLA
  .. |CenterDot|                       unicode:: U+000B7 .. MIDDLE DOT
  .. |centerdot|                       unicode:: U+000B7 .. MIDDLE DOT
  .. |checkmark|                       unicode:: U+02713 .. CHECK MARK
  .. |circeq|                          unicode:: U+02257 .. RING EQUAL TO
  .. |circlearrowleft|                 unicode:: U+021BA .. ANTICLOCKWISE OPEN CIRCLE ARROW
  .. |circlearrowright|                unicode:: U+021BB .. CLOCKWISE OPEN CIRCLE ARROW
  .. |circledast|                      unicode:: U+0229B .. CIRCLED ASTERISK OPERATOR
  .. |circledcirc|                     unicode:: U+0229A .. CIRCLED RING OPERATOR
  .. |circleddash|                     unicode:: U+0229D .. CIRCLED DASH
  .. |CircleDot|                       unicode:: U+02299 .. CIRCLED DOT OPERATOR
  .. |circledR|                        unicode:: U+000AE .. REGISTERED SIGN
  .. |circledS|                        unicode:: U+024C8 .. CIRCLED LATIN CAPITAL LETTER S
  .. |CircleMinus|                     unicode:: U+02296 .. CIRCLED MINUS
  .. |CirclePlus|                      unicode:: U+02295 .. CIRCLED PLUS
  .. |CircleTimes|                     unicode:: U+02297 .. CIRCLED TIMES
  .. |ClockwiseContourIntegral|        unicode:: U+02232 .. CLOCKWISE CONTOUR INTEGRAL
  .. |CloseCurlyDoubleQuote|           unicode:: U+0201D .. RIGHT DOUBLE QUOTATION MARK
  .. |CloseCurlyQuote|                 unicode:: U+02019 .. RIGHT SINGLE QUOTATION MARK
  .. |clubsuit|                        unicode:: U+02663 .. BLACK CLUB SUIT
  .. |coloneq|                         unicode:: U+02254 .. COLON EQUALS
  .. |complement|                      unicode:: U+02201 .. COMPLEMENT
  .. |complexes|                       unicode:: U+02102 .. DOUBLE-STRUCK CAPITAL C
  .. |Congruent|                       unicode:: U+02261 .. IDENTICAL TO
  .. |ContourIntegral|                 unicode:: U+0222E .. CONTOUR INTEGRAL
  .. |Coproduct|                       unicode:: U+02210 .. N-ARY COPRODUCT
  .. |CounterClockwiseContourIntegral| unicode:: U+02233 .. ANTICLOCKWISE CONTOUR INTEGRAL
  .. |CupCap|                          unicode:: U+0224D .. EQUIVALENT TO
  .. |curlyeqprec|                     unicode:: U+022DE .. EQUAL TO OR PRECEDES
  .. |curlyeqsucc|                     unicode:: U+022DF .. EQUAL TO OR SUCCEEDS
  .. |curlyvee|                        unicode:: U+022CE .. CURLY LOGICAL OR
  .. |curlywedge|                      unicode:: U+022CF .. CURLY LOGICAL AND
  .. |curvearrowleft|                  unicode:: U+021B6 .. ANTICLOCKWISE TOP SEMICIRCLE ARROW
  .. |curvearrowright|                 unicode:: U+021B7 .. CLOCKWISE TOP SEMICIRCLE ARROW
  .. |dbkarow|                         unicode:: U+0290F .. RIGHTWARDS TRIPLE DASH ARROW
  .. |ddagger|                         unicode:: U+02021 .. DOUBLE DAGGER
  .. |ddotseq|                         unicode:: U+02A77 .. EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW
  .. |Del|                             unicode:: U+02207 .. NABLA
  .. |DiacriticalAcute|                unicode:: U+000B4 .. ACUTE ACCENT
  .. |DiacriticalDot|                  unicode:: U+002D9 .. DOT ABOVE
  .. |DiacriticalDoubleAcute|          unicode:: U+002DD .. DOUBLE ACUTE ACCENT
  .. |DiacriticalGrave|                unicode:: U+00060 .. GRAVE ACCENT
  .. |DiacriticalTilde|                unicode:: U+002DC .. SMALL TILDE
  .. |Diamond|                         unicode:: U+022C4 .. DIAMOND OPERATOR
  .. |diamond|                         unicode:: U+022C4 .. DIAMOND OPERATOR
  .. |diamondsuit|                     unicode:: U+02666 .. BLACK DIAMOND SUIT
  .. |DifferentialD|                   unicode:: U+02146 .. DOUBLE-STRUCK ITALIC SMALL D
  .. |digamma|                         unicode:: U+003DD .. GREEK SMALL LETTER DIGAMMA
  .. |div|                             unicode:: U+000F7 .. DIVISION SIGN
  .. |divideontimes|                   unicode:: U+022C7 .. DIVISION TIMES
  .. |doteq|                           unicode:: U+02250 .. APPROACHES THE LIMIT
  .. |doteqdot|                        unicode:: U+02251 .. GEOMETRICALLY EQUAL TO
  .. |DotEqual|                        unicode:: U+02250 .. APPROACHES THE LIMIT
  .. |dotminus|                        unicode:: U+02238 .. DOT MINUS
  .. |dotplus|                         unicode:: U+02214 .. DOT PLUS
  .. |dotsquare|                       unicode:: U+022A1 .. SQUARED DOT OPERATOR
  .. |doublebarwedge|                  unicode:: U+02306 .. PERSPECTIVE
  .. |DoubleContourIntegral|           unicode:: U+0222F .. SURFACE INTEGRAL
  .. |DoubleDot|                       unicode:: U+000A8 .. DIAERESIS
  .. |DoubleDownArrow|                 unicode:: U+021D3 .. DOWNWARDS DOUBLE ARROW
  .. |DoubleLeftArrow|                 unicode:: U+021D0 .. LEFTWARDS DOUBLE ARROW
  .. |DoubleLeftRightArrow|            unicode:: U+021D4 .. LEFT RIGHT DOUBLE ARROW
  .. |DoubleLeftTee|                   unicode:: U+02AE4 .. VERTICAL BAR DOUBLE LEFT TURNSTILE
  .. |DoubleLongLeftArrow|             unicode:: U+027F8 .. LONG LEFTWARDS DOUBLE ARROW
  .. |DoubleLongLeftRightArrow|        unicode:: U+027FA .. LONG LEFT RIGHT DOUBLE ARROW
  .. |DoubleLongRightArrow|            unicode:: U+027F9 .. LONG RIGHTWARDS DOUBLE ARROW
  .. |DoubleRightArrow|                unicode:: U+021D2 .. RIGHTWARDS DOUBLE ARROW
  .. |DoubleRightTee|                  unicode:: U+022A8 .. TRUE
  .. |DoubleUpArrow|                   unicode:: U+021D1 .. UPWARDS DOUBLE ARROW
  .. |DoubleUpDownArrow|               unicode:: U+021D5 .. UP DOWN DOUBLE ARROW
  .. |DoubleVerticalBar|               unicode:: U+02225 .. PARALLEL TO
  .. |DownArrow|                       unicode:: U+02193 .. DOWNWARDS ARROW
  .. |Downarrow|                       unicode:: U+021D3 .. DOWNWARDS DOUBLE ARROW
  .. |downarrow|                       unicode:: U+02193 .. DOWNWARDS ARROW
  .. |DownArrowUpArrow|                unicode:: U+021F5 .. DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW
  .. |downdownarrows|                  unicode:: U+021CA .. DOWNWARDS PAIRED ARROWS
  .. |downharpoonleft|                 unicode:: U+021C3 .. DOWNWARDS HARPOON WITH BARB LEFTWARDS
  .. |downharpoonright|                unicode:: U+021C2 .. DOWNWARDS HARPOON WITH BARB RIGHTWARDS
  .. |DownLeftVector|                  unicode:: U+021BD .. LEFTWARDS HARPOON WITH BARB DOWNWARDS
  .. |DownRightVector|                 unicode:: U+021C1 .. RIGHTWARDS HARPOON WITH BARB DOWNWARDS
  .. |DownTee|                         unicode:: U+022A4 .. DOWN TACK
  .. |DownTeeArrow|                    unicode:: U+021A7 .. DOWNWARDS ARROW FROM BAR
  .. |drbkarow|                        unicode:: U+02910 .. RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW
  .. |Element|                         unicode:: U+02208 .. ELEMENT OF
  .. |emptyset|                        unicode:: U+02205 .. EMPTY SET
  .. |eqcirc|                          unicode:: U+02256 .. RING IN EQUAL TO
  .. |eqcolon|                         unicode:: U+02255 .. EQUALS COLON
  .. |eqsim|                           unicode:: U+02242 .. MINUS TILDE
  .. |eqslantgtr|                      unicode:: U+02A96 .. SLANTED EQUAL TO OR GREATER-THAN
  .. |eqslantless|                     unicode:: U+02A95 .. SLANTED EQUAL TO OR LESS-THAN
  .. |EqualTilde|                      unicode:: U+02242 .. MINUS TILDE
  .. |Equilibrium|                     unicode:: U+021CC .. RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON
  .. |Exists|                          unicode:: U+02203 .. THERE EXISTS
  .. |expectation|                     unicode:: U+02130 .. SCRIPT CAPITAL E
  .. |ExponentialE|                    unicode:: U+02147 .. DOUBLE-STRUCK ITALIC SMALL E
  .. |exponentiale|                    unicode:: U+02147 .. DOUBLE-STRUCK ITALIC SMALL E
  .. |fallingdotseq|                   unicode:: U+02252 .. APPROXIMATELY EQUAL TO OR THE IMAGE OF
  .. |ForAll|                          unicode:: U+02200 .. FOR ALL
  .. |Fouriertrf|                      unicode:: U+02131 .. SCRIPT CAPITAL F
  .. |geq|                             unicode:: U+02265 .. GREATER-THAN OR EQUAL TO
  .. |geqq|                            unicode:: U+02267 .. GREATER-THAN OVER EQUAL TO
  .. |geqslant|                        unicode:: U+02A7E .. GREATER-THAN OR SLANTED EQUAL TO
  .. |gg|                              unicode:: U+0226B .. MUCH GREATER-THAN
  .. |ggg|                             unicode:: U+022D9 .. VERY MUCH GREATER-THAN
  .. |gnapprox|                        unicode:: U+02A8A .. GREATER-THAN AND NOT APPROXIMATE
  .. |gneq|                            unicode:: U+02A88 .. GREATER-THAN AND SINGLE-LINE NOT EQUAL TO
  .. |gneqq|                           unicode:: U+02269 .. GREATER-THAN BUT NOT EQUAL TO
  .. |GreaterEqual|                    unicode:: U+02265 .. GREATER-THAN OR EQUAL TO
  .. |GreaterEqualLess|                unicode:: U+022DB .. GREATER-THAN EQUAL TO OR LESS-THAN
  .. |GreaterFullEqual|                unicode:: U+02267 .. GREATER-THAN OVER EQUAL TO
  .. |GreaterLess|                     unicode:: U+02277 .. GREATER-THAN OR LESS-THAN
  .. |GreaterSlantEqual|               unicode:: U+02A7E .. GREATER-THAN OR SLANTED EQUAL TO
  .. |GreaterTilde|                    unicode:: U+02273 .. GREATER-THAN OR EQUIVALENT TO
  .. |gtrapprox|                       unicode:: U+02A86 .. GREATER-THAN OR APPROXIMATE
  .. |gtrdot|                          unicode:: U+022D7 .. GREATER-THAN WITH DOT
  .. |gtreqless|                       unicode:: U+022DB .. GREATER-THAN EQUAL TO OR LESS-THAN
  .. |gtreqqless|                      unicode:: U+02A8C .. GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN
  .. |gtrless|                         unicode:: U+02277 .. GREATER-THAN OR LESS-THAN
  .. |gtrsim|                          unicode:: U+02273 .. GREATER-THAN OR EQUIVALENT TO
  .. |gvertneqq|                       unicode:: U+02269 U+0FE00 .. GREATER-THAN BUT NOT EQUAL TO - with vertical stroke
  .. |Hacek|                           unicode:: U+002C7 .. CARON
  .. |hbar|                            unicode:: U+0210F .. PLANCK CONSTANT OVER TWO PI
  .. |heartsuit|                       unicode:: U+02665 .. BLACK HEART SUIT
  .. |HilbertSpace|                    unicode:: U+0210B .. SCRIPT CAPITAL H
  .. |hksearow|                        unicode:: U+02925 .. SOUTH EAST ARROW WITH HOOK
  .. |hkswarow|                        unicode:: U+02926 .. SOUTH WEST ARROW WITH HOOK
  .. |hookleftarrow|                   unicode:: U+021A9 .. LEFTWARDS ARROW WITH HOOK
  .. |hookrightarrow|                  unicode:: U+021AA .. RIGHTWARDS ARROW WITH HOOK
  .. |hslash|                          unicode:: U+0210F .. PLANCK CONSTANT OVER TWO PI
  .. |HumpDownHump|                    unicode:: U+0224E .. GEOMETRICALLY EQUIVALENT TO
  .. |HumpEqual|                       unicode:: U+0224F .. DIFFERENCE BETWEEN
  .. |iiiint|                          unicode:: U+02A0C .. QUADRUPLE INTEGRAL OPERATOR
  .. |iiint|                           unicode:: U+0222D .. TRIPLE INTEGRAL
  .. |Im|                              unicode:: U+02111 .. BLACK-LETTER CAPITAL I
  .. |ImaginaryI|                      unicode:: U+02148 .. DOUBLE-STRUCK ITALIC SMALL I
  .. |imagline|                        unicode:: U+02110 .. SCRIPT CAPITAL I
  .. |imagpart|                        unicode:: U+02111 .. BLACK-LETTER CAPITAL I
  .. |Implies|                         unicode:: U+021D2 .. RIGHTWARDS DOUBLE ARROW
  .. |in|                              unicode:: U+02208 .. ELEMENT OF
  .. |integers|                        unicode:: U+02124 .. DOUBLE-STRUCK CAPITAL Z
  .. |Integral|                        unicode:: U+0222B .. INTEGRAL
  .. |intercal|                        unicode:: U+022BA .. INTERCALATE
  .. |Intersection|                    unicode:: U+022C2 .. N-ARY INTERSECTION
  .. |intprod|                         unicode:: U+02A3C .. INTERIOR PRODUCT
  .. |InvisibleComma|                  unicode:: U+02063 .. INVISIBLE SEPARATOR
  .. |InvisibleTimes|                  unicode:: U+02062 .. INVISIBLE TIMES
  .. |langle|                          unicode:: U+02329 .. LEFT-POINTING ANGLE BRACKET
  .. |Laplacetrf|                      unicode:: U+02112 .. SCRIPT CAPITAL L
  .. |lbrace|                          unicode:: U+0007B .. LEFT CURLY BRACKET
  .. |lbrack|                          unicode:: U+0005B .. LEFT SQUARE BRACKET
  .. |LeftAngleBracket|                unicode:: U+02329 .. LEFT-POINTING ANGLE BRACKET
  .. |LeftArrow|                       unicode:: U+02190 .. LEFTWARDS ARROW
  .. |Leftarrow|                       unicode:: U+021D0 .. LEFTWARDS DOUBLE ARROW
  .. |leftarrow|                       unicode:: U+02190 .. LEFTWARDS ARROW
  .. |LeftArrowBar|                    unicode:: U+021E4 .. LEFTWARDS ARROW TO BAR
  .. |LeftArrowRightArrow|             unicode:: U+021C6 .. LEFTWARDS ARROW OVER RIGHTWARDS ARROW
  .. |leftarrowtail|                   unicode:: U+021A2 .. LEFTWARDS ARROW WITH TAIL
  .. |LeftCeiling|                     unicode:: U+02308 .. LEFT CEILING
  .. |LeftDoubleBracket|               unicode:: U+0301A .. LEFT WHITE SQUARE BRACKET
  .. |LeftDownVector|                  unicode:: U+021C3 .. DOWNWARDS HARPOON WITH BARB LEFTWARDS
  .. |LeftFloor|                       unicode:: U+0230A .. LEFT FLOOR
  .. |leftharpoondown|                 unicode:: U+021BD .. LEFTWARDS HARPOON WITH BARB DOWNWARDS
  .. |leftharpoonup|                   unicode:: U+021BC .. LEFTWARDS HARPOON WITH BARB UPWARDS
  .. |leftleftarrows|                  unicode:: U+021C7 .. LEFTWARDS PAIRED ARROWS
  .. |LeftRightArrow|                  unicode:: U+02194 .. LEFT RIGHT ARROW
  .. |Leftrightarrow|                  unicode:: U+021D4 .. LEFT RIGHT DOUBLE ARROW
  .. |leftrightarrow|                  unicode:: U+02194 .. LEFT RIGHT ARROW
  .. |leftrightarrows|                 unicode:: U+021C6 .. LEFTWARDS ARROW OVER RIGHTWARDS ARROW
  .. |leftrightharpoons|               unicode:: U+021CB .. LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON
  .. |leftrightsquigarrow|             unicode:: U+021AD .. LEFT RIGHT WAVE ARROW
  .. |LeftTee|                         unicode:: U+022A3 .. LEFT TACK
  .. |LeftTeeArrow|                    unicode:: U+021A4 .. LEFTWARDS ARROW FROM BAR
  .. |leftthreetimes|                  unicode:: U+022CB .. LEFT SEMIDIRECT PRODUCT
  .. |LeftTriangle|                    unicode:: U+022B2 .. NORMAL SUBGROUP OF
  .. |LeftTriangleEqual|               unicode:: U+022B4 .. NORMAL SUBGROUP OF OR EQUAL TO
  .. |LeftUpVector|                    unicode:: U+021BF .. UPWARDS HARPOON WITH BARB LEFTWARDS
  .. |LeftVector|                      unicode:: U+021BC .. LEFTWARDS HARPOON WITH BARB UPWARDS
  .. |leq|                             unicode:: U+02264 .. LESS-THAN OR EQUAL TO
  .. |leqq|                            unicode:: U+02266 .. LESS-THAN OVER EQUAL TO
  .. |leqslant|                        unicode:: U+02A7D .. LESS-THAN OR SLANTED EQUAL TO
  .. |lessapprox|                      unicode:: U+02A85 .. LESS-THAN OR APPROXIMATE
  .. |lessdot|                         unicode:: U+022D6 .. LESS-THAN WITH DOT
  .. |lesseqgtr|                       unicode:: U+022DA .. LESS-THAN EQUAL TO OR GREATER-THAN
  .. |lesseqqgtr|                      unicode:: U+02A8B .. LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN
  .. |LessEqualGreater|                unicode:: U+022DA .. LESS-THAN EQUAL TO OR GREATER-THAN
  .. |LessFullEqual|                   unicode:: U+02266 .. LESS-THAN OVER EQUAL TO
  .. |LessGreater|                     unicode:: U+02276 .. LESS-THAN OR GREATER-THAN
  .. |lessgtr|                         unicode:: U+02276 .. LESS-THAN OR GREATER-THAN
  .. |lesssim|                         unicode:: U+02272 .. LESS-THAN OR EQUIVALENT TO
  .. |LessSlantEqual|                  unicode:: U+02A7D .. LESS-THAN OR SLANTED EQUAL TO
  .. |LessTilde|                       unicode:: U+02272 .. LESS-THAN OR EQUIVALENT TO
  .. |ll|                              unicode:: U+0226A .. MUCH LESS-THAN
  .. |llcorner|                        unicode:: U+0231E .. BOTTOM LEFT CORNER
  .. |Lleftarrow|                      unicode:: U+021DA .. LEFTWARDS TRIPLE ARROW
  .. |lmoustache|                      unicode:: U+023B0 .. UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION
  .. |lnapprox|                        unicode:: U+02A89 .. LESS-THAN AND NOT APPROXIMATE
  .. |lneq|                            unicode:: U+02A87 .. LESS-THAN AND SINGLE-LINE NOT EQUAL TO
  .. |lneqq|                           unicode:: U+02268 .. LESS-THAN BUT NOT EQUAL TO
  .. |LongLeftArrow|                   unicode:: U+027F5 .. LONG LEFTWARDS ARROW
  .. |Longleftarrow|                   unicode:: U+027F8 .. LONG LEFTWARDS DOUBLE ARROW
  .. |longleftarrow|                   unicode:: U+027F5 .. LONG LEFTWARDS ARROW
  .. |LongLeftRightArrow|              unicode:: U+027F7 .. LONG LEFT RIGHT ARROW
  .. |Longleftrightarrow|              unicode:: U+027FA .. LONG LEFT RIGHT DOUBLE ARROW
  .. |longleftrightarrow|              unicode:: U+027F7 .. LONG LEFT RIGHT ARROW
  .. |longmapsto|                      unicode:: U+027FC .. LONG RIGHTWARDS ARROW FROM BAR
  .. |LongRightArrow|                  unicode:: U+027F6 .. LONG RIGHTWARDS ARROW
  .. |Longrightarrow|                  unicode:: U+027F9 .. LONG RIGHTWARDS DOUBLE ARROW
  .. |longrightarrow|                  unicode:: U+027F6 .. LONG RIGHTWARDS ARROW
  .. |looparrowleft|                   unicode:: U+021AB .. LEFTWARDS ARROW WITH LOOP
  .. |looparrowright|                  unicode:: U+021AC .. RIGHTWARDS ARROW WITH LOOP
  .. |LowerLeftArrow|                  unicode:: U+02199 .. SOUTH WEST ARROW
  .. |LowerRightArrow|                 unicode:: U+02198 .. SOUTH EAST ARROW
  .. |lozenge|                         unicode:: U+025CA .. LOZENGE
  .. |lrcorner|                        unicode:: U+0231F .. BOTTOM RIGHT CORNER
  .. |Lsh|                             unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS
  .. |lvertneqq|                       unicode:: U+02268 U+0FE00 .. LESS-THAN BUT NOT EQUAL TO - with vertical stroke
  .. |maltese|                         unicode:: U+02720 .. MALTESE CROSS
  .. |mapsto|                          unicode:: U+021A6 .. RIGHTWARDS ARROW FROM BAR
  .. |measuredangle|                   unicode:: U+02221 .. MEASURED ANGLE
  .. |Mellintrf|                       unicode:: U+02133 .. SCRIPT CAPITAL M
  .. |MinusPlus|                       unicode:: U+02213 .. MINUS-OR-PLUS SIGN
  .. |mp|                              unicode:: U+02213 .. MINUS-OR-PLUS SIGN
  .. |multimap|                        unicode:: U+022B8 .. MULTIMAP
  .. |napprox|                         unicode:: U+02249 .. NOT ALMOST EQUAL TO
  .. |natural|                         unicode:: U+0266E .. MUSIC NATURAL SIGN
  .. |naturals|                        unicode:: U+02115 .. DOUBLE-STRUCK CAPITAL N
  .. |nearrow|                         unicode:: U+02197 .. NORTH EAST ARROW
  .. |NegativeMediumSpace|             unicode:: U+0200B .. ZERO WIDTH SPACE
  .. |NegativeThickSpace|              unicode:: U+0200B .. ZERO WIDTH SPACE
  .. |NegativeThinSpace|               unicode:: U+0200B .. ZERO WIDTH SPACE
  .. |NegativeVeryThinSpace|           unicode:: U+0200B .. ZERO WIDTH SPACE
  .. |NestedGreaterGreater|            unicode:: U+0226B .. MUCH GREATER-THAN
  .. |NestedLessLess|                  unicode:: U+0226A .. MUCH LESS-THAN
  .. |nexists|                         unicode:: U+02204 .. THERE DOES NOT EXIST
  .. |ngeq|                            unicode:: U+02271 .. NEITHER GREATER-THAN NOR EQUAL TO
  .. |ngeqq|                           unicode:: U+02267 U+00338 .. GREATER-THAN OVER EQUAL TO with slash
  .. |ngeqslant|                       unicode:: U+02A7E U+00338 .. GREATER-THAN OR SLANTED EQUAL TO with slash
  .. |ngtr|                            unicode:: U+0226F .. NOT GREATER-THAN
  .. |nLeftarrow|                      unicode:: U+021CD .. LEFTWARDS DOUBLE ARROW WITH STROKE
  .. |nleftarrow|                      unicode:: U+0219A .. LEFTWARDS ARROW WITH STROKE
  .. |nLeftrightarrow|                 unicode:: U+021CE .. LEFT RIGHT DOUBLE ARROW WITH STROKE
  .. |nleftrightarrow|                 unicode:: U+021AE .. LEFT RIGHT ARROW WITH STROKE
  .. |nleq|                            unicode:: U+02270 .. NEITHER LESS-THAN NOR EQUAL TO
  .. |nleqq|                           unicode:: U+02266 U+00338 .. LESS-THAN OVER EQUAL TO with slash
  .. |nleqslant|                       unicode:: U+02A7D U+00338 .. LESS-THAN OR SLANTED EQUAL TO with slash
  .. |nless|                           unicode:: U+0226E .. NOT LESS-THAN
  .. |NonBreakingSpace|                unicode:: U+000A0 .. NO-BREAK SPACE
  .. |NotCongruent|                    unicode:: U+02262 .. NOT IDENTICAL TO
  .. |NotDoubleVerticalBar|            unicode:: U+02226 .. NOT PARALLEL TO
  .. |NotElement|                      unicode:: U+02209 .. NOT AN ELEMENT OF
  .. |NotEqual|                        unicode:: U+02260 .. NOT EQUAL TO
  .. |NotEqualTilde|                   unicode:: U+02242 U+00338 .. MINUS TILDE with slash
  .. |NotExists|                       unicode:: U+02204 .. THERE DOES NOT EXIST
  .. |NotGreater|                      unicode:: U+0226F .. NOT GREATER-THAN
  .. |NotGreaterEqual|                 unicode:: U+02271 .. NEITHER GREATER-THAN NOR EQUAL TO
  .. |NotGreaterFullEqual|             unicode:: U+02266 U+00338 .. LESS-THAN OVER EQUAL TO with slash
  .. |NotGreaterGreater|               unicode:: U+0226B U+00338 .. MUCH GREATER THAN with slash
  .. |NotGreaterLess|                  unicode:: U+02279 .. NEITHER GREATER-THAN NOR LESS-THAN
  .. |NotGreaterSlantEqual|            unicode:: U+02A7E U+00338 .. GREATER-THAN OR SLANTED EQUAL TO with slash
  .. |NotGreaterTilde|                 unicode:: U+02275 .. NEITHER GREATER-THAN NOR EQUIVALENT TO
  .. |NotHumpDownHump|                 unicode:: U+0224E U+00338 .. GEOMETRICALLY EQUIVALENT TO with slash
  .. |NotLeftTriangle|                 unicode:: U+022EA .. NOT NORMAL SUBGROUP OF
  .. |NotLeftTriangleEqual|            unicode:: U+022EC .. NOT NORMAL SUBGROUP OF OR EQUAL TO
  .. |NotLess|                         unicode:: U+0226E .. NOT LESS-THAN
  .. |NotLessEqual|                    unicode:: U+02270 .. NEITHER LESS-THAN NOR EQUAL TO
  .. |NotLessGreater|                  unicode:: U+02278 .. NEITHER LESS-THAN NOR GREATER-THAN
  .. |NotLessLess|                     unicode:: U+0226A U+00338 .. MUCH LESS THAN with slash
  .. |NotLessSlantEqual|               unicode:: U+02A7D U+00338 .. LESS-THAN OR SLANTED EQUAL TO with slash
  .. |NotLessTilde|                    unicode:: U+02274 .. NEITHER LESS-THAN NOR EQUIVALENT TO
  .. |NotPrecedes|                     unicode:: U+02280 .. DOES NOT PRECEDE
  .. |NotPrecedesEqual|                unicode:: U+02AAF U+00338 .. PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash
  .. |NotPrecedesSlantEqual|           unicode:: U+022E0 .. DOES NOT PRECEDE OR EQUAL
  .. |NotReverseElement|               unicode:: U+0220C .. DOES NOT CONTAIN AS MEMBER
  .. |NotRightTriangle|                unicode:: U+022EB .. DOES NOT CONTAIN AS NORMAL SUBGROUP
  .. |NotRightTriangleEqual|           unicode:: U+022ED .. DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL
  .. |NotSquareSubsetEqual|            unicode:: U+022E2 .. NOT SQUARE IMAGE OF OR EQUAL TO
  .. |NotSquareSupersetEqual|          unicode:: U+022E3 .. NOT SQUARE ORIGINAL OF OR EQUAL TO
  .. |NotSubset|                       unicode:: U+02282 U+020D2 .. SUBSET OF with vertical line
  .. |NotSubsetEqual|                  unicode:: U+02288 .. NEITHER A SUBSET OF NOR EQUAL TO
  .. |NotSucceeds|                     unicode:: U+02281 .. DOES NOT SUCCEED
  .. |NotSucceedsEqual|                unicode:: U+02AB0 U+00338 .. SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash
  .. |NotSucceedsSlantEqual|           unicode:: U+022E1 .. DOES NOT SUCCEED OR EQUAL
  .. |NotSuperset|                     unicode:: U+02283 U+020D2 .. SUPERSET OF with vertical line
  .. |NotSupersetEqual|                unicode:: U+02289 .. NEITHER A SUPERSET OF NOR EQUAL TO
  .. |NotTilde|                        unicode:: U+02241 .. NOT TILDE
  .. |NotTildeEqual|                   unicode:: U+02244 .. NOT ASYMPTOTICALLY EQUAL TO
  .. |NotTildeFullEqual|               unicode:: U+02247 .. NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO
  .. |NotTildeTilde|                   unicode:: U+02249 .. NOT ALMOST EQUAL TO
  .. |NotVerticalBar|                  unicode:: U+02224 .. DOES NOT DIVIDE
  .. |nparallel|                       unicode:: U+02226 .. NOT PARALLEL TO
  .. |nprec|                           unicode:: U+02280 .. DOES NOT PRECEDE
  .. |npreceq|                         unicode:: U+02AAF U+00338 .. PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash
  .. |nRightarrow|                     unicode:: U+021CF .. RIGHTWARDS DOUBLE ARROW WITH STROKE
  .. |nrightarrow|                     unicode:: U+0219B .. RIGHTWARDS ARROW WITH STROKE
  .. |nshortmid|                       unicode:: U+02224 .. DOES NOT DIVIDE
  .. |nshortparallel|                  unicode:: U+02226 .. NOT PARALLEL TO
  .. |nsimeq|                          unicode:: U+02244 .. NOT ASYMPTOTICALLY EQUAL TO
  .. |nsubset|                         unicode:: U+02282 U+020D2 .. SUBSET OF with vertical line
  .. |nsubseteq|                       unicode:: U+02288 .. NEITHER A SUBSET OF NOR EQUAL TO
  .. |nsubseteqq|                      unicode:: U+02AC5 U+00338 .. SUBSET OF ABOVE EQUALS SIGN with slash
  .. |nsucc|                           unicode:: U+02281 .. DOES NOT SUCCEED
  .. |nsucceq|                         unicode:: U+02AB0 U+00338 .. SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash
  .. |nsupset|                         unicode:: U+02283 U+020D2 .. SUPERSET OF with vertical line
  .. |nsupseteq|                       unicode:: U+02289 .. NEITHER A SUPERSET OF NOR EQUAL TO
  .. |nsupseteqq|                      unicode:: U+02AC6 U+00338 .. SUPERSET OF ABOVE EQUALS SIGN with slash
  .. |ntriangleleft|                   unicode:: U+022EA .. NOT NORMAL SUBGROUP OF
  .. |ntrianglelefteq|                 unicode:: U+022EC .. NOT NORMAL SUBGROUP OF OR EQUAL TO
  .. |ntriangleright|                  unicode:: U+022EB .. DOES NOT CONTAIN AS NORMAL SUBGROUP
  .. |ntrianglerighteq|                unicode:: U+022ED .. DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL
  .. |nwarrow|                         unicode:: U+02196 .. NORTH WEST ARROW
  .. |oint|                            unicode:: U+0222E .. CONTOUR INTEGRAL
  .. |OpenCurlyDoubleQuote|            unicode:: U+0201C .. LEFT DOUBLE QUOTATION MARK
  .. |OpenCurlyQuote|                  unicode:: U+02018 .. LEFT SINGLE QUOTATION MARK
  .. |orderof|                         unicode:: U+02134 .. SCRIPT SMALL O
  .. |parallel|                        unicode:: U+02225 .. PARALLEL TO
  .. |PartialD|                        unicode:: U+02202 .. PARTIAL DIFFERENTIAL
  .. |pitchfork|                       unicode:: U+022D4 .. PITCHFORK
  .. |PlusMinus|                       unicode:: U+000B1 .. PLUS-MINUS SIGN
  .. |pm|                              unicode:: U+000B1 .. PLUS-MINUS SIGN
  .. |Poincareplane|                   unicode:: U+0210C .. BLACK-LETTER CAPITAL H
  .. |prec|                            unicode:: U+0227A .. PRECEDES
  .. |precapprox|                      unicode:: U+02AB7 .. PRECEDES ABOVE ALMOST EQUAL TO
  .. |preccurlyeq|                     unicode:: U+0227C .. PRECEDES OR EQUAL TO
  .. |Precedes|                        unicode:: U+0227A .. PRECEDES
  .. |PrecedesEqual|                   unicode:: U+02AAF .. PRECEDES ABOVE SINGLE-LINE EQUALS SIGN
  .. |PrecedesSlantEqual|              unicode:: U+0227C .. PRECEDES OR EQUAL TO
  .. |PrecedesTilde|                   unicode:: U+0227E .. PRECEDES OR EQUIVALENT TO
  .. |preceq|                          unicode:: U+02AAF .. PRECEDES ABOVE SINGLE-LINE EQUALS SIGN
  .. |precnapprox|                     unicode:: U+02AB9 .. PRECEDES ABOVE NOT ALMOST EQUAL TO
  .. |precneqq|                        unicode:: U+02AB5 .. PRECEDES ABOVE NOT EQUAL TO
  .. |precnsim|                        unicode:: U+022E8 .. PRECEDES BUT NOT EQUIVALENT TO
  .. |precsim|                         unicode:: U+0227E .. PRECEDES OR EQUIVALENT TO
  .. |primes|                          unicode:: U+02119 .. DOUBLE-STRUCK CAPITAL P
  .. |Proportion|                      unicode:: U+02237 .. PROPORTION
  .. |Proportional|                    unicode:: U+0221D .. PROPORTIONAL TO
  .. |propto|                          unicode:: U+0221D .. PROPORTIONAL TO
  .. |quaternions|                     unicode:: U+0210D .. DOUBLE-STRUCK CAPITAL H
  .. |questeq|                         unicode:: U+0225F .. QUESTIONED EQUAL TO
  .. |rangle|                          unicode:: U+0232A .. RIGHT-POINTING ANGLE BRACKET
  .. |rationals|                       unicode:: U+0211A .. DOUBLE-STRUCK CAPITAL Q
  .. |rbrace|                          unicode:: U+0007D .. RIGHT CURLY BRACKET
  .. |rbrack|                          unicode:: U+0005D .. RIGHT SQUARE BRACKET
  .. |Re|                              unicode:: U+0211C .. BLACK-LETTER CAPITAL R
  .. |realine|                         unicode:: U+0211B .. SCRIPT CAPITAL R
  .. |realpart|                        unicode:: U+0211C .. BLACK-LETTER CAPITAL R
  .. |reals|                           unicode:: U+0211D .. DOUBLE-STRUCK CAPITAL R
  .. |ReverseElement|                  unicode:: U+0220B .. CONTAINS AS MEMBER
  .. |ReverseEquilibrium|              unicode:: U+021CB .. LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON
  .. |ReverseUpEquilibrium|            unicode:: U+0296F .. DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT
  .. |RightAngleBracket|               unicode:: U+0232A .. RIGHT-POINTING ANGLE BRACKET
  .. |RightArrow|                      unicode:: U+02192 .. RIGHTWARDS ARROW
  .. |Rightarrow|                      unicode:: U+021D2 .. RIGHTWARDS DOUBLE ARROW
  .. |rightarrow|                      unicode:: U+02192 .. RIGHTWARDS ARROW
  .. |RightArrowBar|                   unicode:: U+021E5 .. RIGHTWARDS ARROW TO BAR
  .. |RightArrowLeftArrow|             unicode:: U+021C4 .. RIGHTWARDS ARROW OVER LEFTWARDS ARROW
  .. |rightarrowtail|                  unicode:: U+021A3 .. RIGHTWARDS ARROW WITH TAIL
  .. |RightCeiling|                    unicode:: U+02309 .. RIGHT CEILING
  .. |RightDoubleBracket|              unicode:: U+0301B .. RIGHT WHITE SQUARE BRACKET
  .. |RightDownVector|                 unicode:: U+021C2 .. DOWNWARDS HARPOON WITH BARB RIGHTWARDS
  .. |RightFloor|                      unicode:: U+0230B .. RIGHT FLOOR
  .. |rightharpoondown|                unicode:: U+021C1 .. RIGHTWARDS HARPOON WITH BARB DOWNWARDS
  .. |rightharpoonup|                  unicode:: U+021C0 .. RIGHTWARDS HARPOON WITH BARB UPWARDS
  .. |rightleftarrows|                 unicode:: U+021C4 .. RIGHTWARDS ARROW OVER LEFTWARDS ARROW
  .. |rightleftharpoons|               unicode:: U+021CC .. RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON
  .. |rightrightarrows|                unicode:: U+021C9 .. RIGHTWARDS PAIRED ARROWS
  .. |rightsquigarrow|                 unicode:: U+0219D .. RIGHTWARDS WAVE ARROW
  .. |RightTee|                        unicode:: U+022A2 .. RIGHT TACK
  .. |RightTeeArrow|                   unicode:: U+021A6 .. RIGHTWARDS ARROW FROM BAR
  .. |rightthreetimes|                 unicode:: U+022CC .. RIGHT SEMIDIRECT PRODUCT
  .. |RightTriangle|                   unicode:: U+022B3 .. CONTAINS AS NORMAL SUBGROUP
  .. |RightTriangleEqual|              unicode:: U+022B5 .. CONTAINS AS NORMAL SUBGROUP OR EQUAL TO
  .. |RightUpVector|                   unicode:: U+021BE .. UPWARDS HARPOON WITH BARB RIGHTWARDS
  .. |RightVector|                     unicode:: U+021C0 .. RIGHTWARDS HARPOON WITH BARB UPWARDS
  .. |risingdotseq|                    unicode:: U+02253 .. IMAGE OF OR APPROXIMATELY EQUAL TO
  .. |rmoustache|                      unicode:: U+023B1 .. UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION
  .. |Rrightarrow|                     unicode:: U+021DB .. RIGHTWARDS TRIPLE ARROW
  .. |Rsh|                             unicode:: U+021B1 .. UPWARDS ARROW WITH TIP RIGHTWARDS
  .. |searrow|                         unicode:: U+02198 .. SOUTH EAST ARROW
  .. |setminus|                        unicode:: U+02216 .. SET MINUS
  .. |ShortDownArrow|                  unicode:: U+02193 .. DOWNWARDS ARROW
  .. |ShortLeftArrow|                  unicode:: U+02190 .. LEFTWARDS ARROW
  .. |shortmid|                        unicode:: U+02223 .. DIVIDES
  .. |shortparallel|                   unicode:: U+02225 .. PARALLEL TO
  .. |ShortRightArrow|                 unicode:: U+02192 .. RIGHTWARDS ARROW
  .. |ShortUpArrow|                    unicode:: U+02191 .. UPWARDS ARROW
  .. |simeq|                           unicode:: U+02243 .. ASYMPTOTICALLY EQUAL TO
  .. |SmallCircle|                     unicode:: U+02218 .. RING OPERATOR
  .. |smallsetminus|                   unicode:: U+02216 .. SET MINUS
  .. |spadesuit|                       unicode:: U+02660 .. BLACK SPADE SUIT
  .. |Sqrt|                            unicode:: U+0221A .. SQUARE ROOT
  .. |sqsubset|                        unicode:: U+0228F .. SQUARE IMAGE OF
  .. |sqsubseteq|                      unicode:: U+02291 .. SQUARE IMAGE OF OR EQUAL TO
  .. |sqsupset|                        unicode:: U+02290 .. SQUARE ORIGINAL OF
  .. |sqsupseteq|                      unicode:: U+02292 .. SQUARE ORIGINAL OF OR EQUAL TO
  .. |Square|                          unicode:: U+025A1 .. WHITE SQUARE
  .. |SquareIntersection|              unicode:: U+02293 .. SQUARE CAP
  .. |SquareSubset|                    unicode:: U+0228F .. SQUARE IMAGE OF
  .. |SquareSubsetEqual|               unicode:: U+02291 .. SQUARE IMAGE OF OR EQUAL TO
  .. |SquareSuperset|                  unicode:: U+02290 .. SQUARE ORIGINAL OF
  .. |SquareSupersetEqual|             unicode:: U+02292 .. SQUARE ORIGINAL OF OR EQUAL TO
  .. |SquareUnion|                     unicode:: U+02294 .. SQUARE CUP
  .. |Star|                            unicode:: U+022C6 .. STAR OPERATOR
  .. |straightepsilon|                 unicode:: U+003F5 .. GREEK LUNATE EPSILON SYMBOL
  .. |straightphi|                     unicode:: U+003D5 .. GREEK PHI SYMBOL
  .. |Subset|                          unicode:: U+022D0 .. DOUBLE SUBSET
  .. |subset|                          unicode:: U+02282 .. SUBSET OF
  .. |subseteq|                        unicode:: U+02286 .. SUBSET OF OR EQUAL TO
  .. |subseteqq|                       unicode:: U+02AC5 .. SUBSET OF ABOVE EQUALS SIGN
  .. |SubsetEqual|                     unicode:: U+02286 .. SUBSET OF OR EQUAL TO
  .. |subsetneq|                       unicode:: U+0228A .. SUBSET OF WITH NOT EQUAL TO
  .. |subsetneqq|                      unicode:: U+02ACB .. SUBSET OF ABOVE NOT EQUAL TO
  .. |succ|                            unicode:: U+0227B .. SUCCEEDS
  .. |succapprox|                      unicode:: U+02AB8 .. SUCCEEDS ABOVE ALMOST EQUAL TO
  .. |succcurlyeq|                     unicode:: U+0227D .. SUCCEEDS OR EQUAL TO
  .. |Succeeds|                        unicode:: U+0227B .. SUCCEEDS
  .. |SucceedsEqual|                   unicode:: U+02AB0 .. SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN
  .. |SucceedsSlantEqual|              unicode:: U+0227D .. SUCCEEDS OR EQUAL TO
  .. |SucceedsTilde|                   unicode:: U+0227F .. SUCCEEDS OR EQUIVALENT TO
  .. |succeq|                          unicode:: U+02AB0 .. SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN
  .. |succnapprox|                     unicode:: U+02ABA .. SUCCEEDS ABOVE NOT ALMOST EQUAL TO
  .. |succneqq|                        unicode:: U+02AB6 .. SUCCEEDS ABOVE NOT EQUAL TO
  .. |succnsim|                        unicode:: U+022E9 .. SUCCEEDS BUT NOT EQUIVALENT TO
  .. |succsim|                         unicode:: U+0227F .. SUCCEEDS OR EQUIVALENT TO
  .. |SuchThat|                        unicode:: U+0220B .. CONTAINS AS MEMBER
  .. |Sum|                             unicode:: U+02211 .. N-ARY SUMMATION
  .. |Superset|                        unicode:: U+02283 .. SUPERSET OF
  .. |SupersetEqual|                   unicode:: U+02287 .. SUPERSET OF OR EQUAL TO
  .. |Supset|                          unicode:: U+022D1 .. DOUBLE SUPERSET
  .. |supset|                          unicode:: U+02283 .. SUPERSET OF
  .. |supseteq|                        unicode:: U+02287 .. SUPERSET OF OR EQUAL TO
  .. |supseteqq|                       unicode:: U+02AC6 .. SUPERSET OF ABOVE EQUALS SIGN
  .. |supsetneq|                       unicode:: U+0228B .. SUPERSET OF WITH NOT EQUAL TO
  .. |supsetneqq|                      unicode:: U+02ACC .. SUPERSET OF ABOVE NOT EQUAL TO
  .. |swarrow|                         unicode:: U+02199 .. SOUTH WEST ARROW
  .. |Therefore|                       unicode:: U+02234 .. THEREFORE
  .. |therefore|                       unicode:: U+02234 .. THEREFORE
  .. |thickapprox|                     unicode:: U+02248 .. ALMOST EQUAL TO
  .. |thicksim|                        unicode:: U+0223C .. TILDE OPERATOR
  .. |ThinSpace|                       unicode:: U+02009 .. THIN SPACE
  .. |Tilde|                           unicode:: U+0223C .. TILDE OPERATOR
  .. |TildeEqual|                      unicode:: U+02243 .. ASYMPTOTICALLY EQUAL TO
  .. |TildeFullEqual|                  unicode:: U+02245 .. APPROXIMATELY EQUAL TO
  .. |TildeTilde|                      unicode:: U+02248 .. ALMOST EQUAL TO
  .. |toea|                            unicode:: U+02928 .. NORTH EAST ARROW AND SOUTH EAST ARROW
  .. |tosa|                            unicode:: U+02929 .. SOUTH EAST ARROW AND SOUTH WEST ARROW
  .. |triangle|                        unicode:: U+025B5 .. WHITE UP-POINTING SMALL TRIANGLE
  .. |triangledown|                    unicode:: U+025BF .. WHITE DOWN-POINTING SMALL TRIANGLE
  .. |triangleleft|                    unicode:: U+025C3 .. WHITE LEFT-POINTING SMALL TRIANGLE
  .. |trianglelefteq|                  unicode:: U+022B4 .. NORMAL SUBGROUP OF OR EQUAL TO
  .. |triangleq|                       unicode:: U+0225C .. DELTA EQUAL TO
  .. |triangleright|                   unicode:: U+025B9 .. WHITE RIGHT-POINTING SMALL TRIANGLE
  .. |trianglerighteq|                 unicode:: U+022B5 .. CONTAINS AS NORMAL SUBGROUP OR EQUAL TO
  .. |TripleDot|                       unicode:: U+020DB .. COMBINING THREE DOTS ABOVE
  .. |twoheadleftarrow|                unicode:: U+0219E .. LEFTWARDS TWO HEADED ARROW
  .. |twoheadrightarrow|               unicode:: U+021A0 .. RIGHTWARDS TWO HEADED ARROW
  .. |ulcorner|                        unicode:: U+0231C .. TOP LEFT CORNER
  .. |Union|                           unicode:: U+022C3 .. N-ARY UNION
  .. |UnionPlus|                       unicode:: U+0228E .. MULTISET UNION
  .. |UpArrow|                         unicode:: U+02191 .. UPWARDS ARROW
  .. |Uparrow|                         unicode:: U+021D1 .. UPWARDS DOUBLE ARROW
  .. |uparrow|                         unicode:: U+02191 .. UPWARDS ARROW
  .. |UpArrowDownArrow|                unicode:: U+021C5 .. UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW
  .. |UpDownArrow|                     unicode:: U+02195 .. UP DOWN ARROW
  .. |Updownarrow|                     unicode:: U+021D5 .. UP DOWN DOUBLE ARROW
  .. |updownarrow|                     unicode:: U+02195 .. UP DOWN ARROW
  .. |UpEquilibrium|                   unicode:: U+0296E .. UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT
  .. |upharpoonleft|                   unicode:: U+021BF .. UPWARDS HARPOON WITH BARB LEFTWARDS
  .. |upharpoonright|                  unicode:: U+021BE .. UPWARDS HARPOON WITH BARB RIGHTWARDS
  .. |UpperLeftArrow|                  unicode:: U+02196 .. NORTH WEST ARROW
  .. |UpperRightArrow|                 unicode:: U+02197 .. NORTH EAST ARROW
  .. |upsilon|                         unicode:: U+003C5 .. GREEK SMALL LETTER UPSILON
  .. |UpTee|                           unicode:: U+022A5 .. UP TACK
  .. |UpTeeArrow|                      unicode:: U+021A5 .. UPWARDS ARROW FROM BAR
  .. |upuparrows|                      unicode:: U+021C8 .. UPWARDS PAIRED ARROWS
  .. |urcorner|                        unicode:: U+0231D .. TOP RIGHT CORNER
  .. |varepsilon|                      unicode:: U+003B5 .. GREEK SMALL LETTER EPSILON
  .. |varkappa|                        unicode:: U+003F0 .. GREEK KAPPA SYMBOL
  .. |varnothing|                      unicode:: U+02205 .. EMPTY SET
  .. |varphi|                          unicode:: U+003C6 .. GREEK SMALL LETTER PHI
  .. |varpi|                           unicode:: U+003D6 .. GREEK PI SYMBOL
  .. |varpropto|                       unicode:: U+0221D .. PROPORTIONAL TO
  .. |varrho|                          unicode:: U+003F1 .. GREEK RHO SYMBOL
  .. |varsigma|                        unicode:: U+003C2 .. GREEK SMALL LETTER FINAL SIGMA
  .. |varsubsetneq|                    unicode:: U+0228A U+0FE00 .. SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members
  .. |varsubsetneqq|                   unicode:: U+02ACB U+0FE00 .. SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members
  .. |varsupsetneq|                    unicode:: U+0228B U+0FE00 .. SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members
  .. |varsupsetneqq|                   unicode:: U+02ACC U+0FE00 .. SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members
  .. |vartheta|                        unicode:: U+003D1 .. GREEK THETA SYMBOL
  .. |vartriangleleft|                 unicode:: U+022B2 .. NORMAL SUBGROUP OF
  .. |vartriangleright|                unicode:: U+022B3 .. CONTAINS AS NORMAL SUBGROUP
  .. |Vee|                             unicode:: U+022C1 .. N-ARY LOGICAL OR
  .. |vee|                             unicode:: U+02228 .. LOGICAL OR
  .. |Vert|                            unicode:: U+02016 .. DOUBLE VERTICAL LINE
  .. |vert|                            unicode:: U+0007C .. VERTICAL LINE
  .. |VerticalBar|                     unicode:: U+02223 .. DIVIDES
  .. |VerticalTilde|                   unicode:: U+02240 .. WREATH PRODUCT
  .. |VeryThinSpace|                   unicode:: U+0200A .. HAIR SPACE
  .. |Wedge|                           unicode:: U+022C0 .. N-ARY LOGICAL AND
  .. |wedge|                           unicode:: U+02227 .. LOGICAL AND
  .. |wp|                              unicode:: U+02118 .. SCRIPT CAPITAL P
  .. |wr|                              unicode:: U+02240 .. WREATH PRODUCT
  .. |zeetrf|                          unicode:: U+02128 .. BLACK-LETTER CAPITAL Z


/Part 4. 092.📜 docutils-0.20.1/docutils/parsers/rst/include/mmlextra-wide.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |af|                      unicode:: U+02061 .. FUNCTION APPLICATION
  .. |aopf|                    unicode:: U+1D552 .. MATHEMATICAL DOUBLE-STRUCK SMALL A
  .. |asympeq|                 unicode:: U+0224D .. EQUIVALENT TO
  .. |bopf|                    unicode:: U+1D553 .. MATHEMATICAL DOUBLE-STRUCK SMALL B
  .. |copf|                    unicode:: U+1D554 .. MATHEMATICAL DOUBLE-STRUCK SMALL C
  .. |Cross|                   unicode:: U+02A2F .. VECTOR OR CROSS PRODUCT
  .. |DD|                      unicode:: U+02145 .. DOUBLE-STRUCK ITALIC CAPITAL D
  .. |dd|                      unicode:: U+02146 .. DOUBLE-STRUCK ITALIC SMALL D
  .. |dopf|                    unicode:: U+1D555 .. MATHEMATICAL DOUBLE-STRUCK SMALL D
  .. |DownArrowBar|            unicode:: U+02913 .. DOWNWARDS ARROW TO BAR
  .. |DownBreve|               unicode:: U+00311 .. COMBINING INVERTED BREVE
  .. |DownLeftRightVector|     unicode:: U+02950 .. LEFT BARB DOWN RIGHT BARB DOWN HARPOON
  .. |DownLeftTeeVector|       unicode:: U+0295E .. LEFTWARDS HARPOON WITH BARB DOWN FROM BAR
  .. |DownLeftVectorBar|       unicode:: U+02956 .. LEFTWARDS HARPOON WITH BARB DOWN TO BAR
  .. |DownRightTeeVector|      unicode:: U+0295F .. RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR
  .. |DownRightVectorBar|      unicode:: U+02957 .. RIGHTWARDS HARPOON WITH BARB DOWN TO BAR
  .. |ee|                      unicode:: U+02147 .. DOUBLE-STRUCK ITALIC SMALL E
  .. |EmptySmallSquare|        unicode:: U+025FB .. WHITE MEDIUM SQUARE
  .. |EmptyVerySmallSquare|    unicode:: U+025AB .. WHITE SMALL SQUARE
  .. |eopf|                    unicode:: U+1D556 .. MATHEMATICAL DOUBLE-STRUCK SMALL E
  .. |Equal|                   unicode:: U+02A75 .. TWO CONSECUTIVE EQUALS SIGNS
  .. |FilledSmallSquare|       unicode:: U+025FC .. BLACK MEDIUM SQUARE
  .. |FilledVerySmallSquare|   unicode:: U+025AA .. BLACK SMALL SQUARE
  .. |fopf|                    unicode:: U+1D557 .. MATHEMATICAL DOUBLE-STRUCK SMALL F
  .. |gopf|                    unicode:: U+1D558 .. MATHEMATICAL DOUBLE-STRUCK SMALL G
  .. |GreaterGreater|          unicode:: U+02AA2 .. DOUBLE NESTED GREATER-THAN
  .. |Hat|                     unicode:: U+0005E .. CIRCUMFLEX ACCENT
  .. |hopf|                    unicode:: U+1D559 .. MATHEMATICAL DOUBLE-STRUCK SMALL H
  .. |HorizontalLine|          unicode:: U+02500 .. BOX DRAWINGS LIGHT HORIZONTAL
  .. |ic|                      unicode:: U+02063 .. INVISIBLE SEPARATOR
  .. |ii|                      unicode:: U+02148 .. DOUBLE-STRUCK ITALIC SMALL I
  .. |iopf|                    unicode:: U+1D55A .. MATHEMATICAL DOUBLE-STRUCK SMALL I
  .. |it|                      unicode:: U+02062 .. INVISIBLE TIMES
  .. |jopf|                    unicode:: U+1D55B .. MATHEMATICAL DOUBLE-STRUCK SMALL J
  .. |kopf|                    unicode:: U+1D55C .. MATHEMATICAL DOUBLE-STRUCK SMALL K
  .. |larrb|                   unicode:: U+021E4 .. LEFTWARDS ARROW TO BAR
  .. |LeftDownTeeVector|       unicode:: U+02961 .. DOWNWARDS HARPOON WITH BARB LEFT FROM BAR
  .. |LeftDownVectorBar|       unicode:: U+02959 .. DOWNWARDS HARPOON WITH BARB LEFT TO BAR
  .. |LeftRightVector|         unicode:: U+0294E .. LEFT BARB UP RIGHT BARB UP HARPOON
  .. |LeftTeeVector|           unicode:: U+0295A .. LEFTWARDS HARPOON WITH BARB UP FROM BAR
  .. |LeftTriangleBar|         unicode:: U+029CF .. LEFT TRIANGLE BESIDE VERTICAL BAR
  .. |LeftUpDownVector|        unicode:: U+02951 .. UP BARB LEFT DOWN BARB LEFT HARPOON
  .. |LeftUpTeeVector|         unicode:: U+02960 .. UPWARDS HARPOON WITH BARB LEFT FROM BAR
  .. |LeftUpVectorBar|         unicode:: U+02958 .. UPWARDS HARPOON WITH BARB LEFT TO BAR
  .. |LeftVectorBar|           unicode:: U+02952 .. LEFTWARDS HARPOON WITH BARB UP TO BAR
  .. |LessLess|                unicode:: U+02AA1 .. DOUBLE NESTED LESS-THAN
  .. |lopf|                    unicode:: U+1D55D .. MATHEMATICAL DOUBLE-STRUCK SMALL L
  .. |mapstodown|              unicode:: U+021A7 .. DOWNWARDS ARROW FROM BAR
  .. |mapstoleft|              unicode:: U+021A4 .. LEFTWARDS ARROW FROM BAR
  .. |mapstoup|                unicode:: U+021A5 .. UPWARDS ARROW FROM BAR
  .. |MediumSpace|             unicode:: U+0205F .. MEDIUM MATHEMATICAL SPACE
  .. |mopf|                    unicode:: U+1D55E .. MATHEMATICAL DOUBLE-STRUCK SMALL M
  .. |nbump|                   unicode:: U+0224E U+00338 .. GEOMETRICALLY EQUIVALENT TO with slash
  .. |nbumpe|                  unicode:: U+0224F U+00338 .. DIFFERENCE BETWEEN with slash
  .. |nesim|                   unicode:: U+02242 U+00338 .. MINUS TILDE with slash
  .. |NewLine|                 unicode:: U+0000A .. LINE FEED (LF)
  .. |NoBreak|                 unicode:: U+02060 .. WORD JOINER
  .. |nopf|                    unicode:: U+1D55F .. MATHEMATICAL DOUBLE-STRUCK SMALL N
  .. |NotCupCap|               unicode:: U+0226D .. NOT EQUIVALENT TO
  .. |NotHumpEqual|            unicode:: U+0224F U+00338 .. DIFFERENCE BETWEEN with slash
  .. |NotLeftTriangleBar|      unicode:: U+029CF U+00338 .. LEFT TRIANGLE BESIDE VERTICAL BAR with slash
  .. |NotNestedGreaterGreater| unicode:: U+02AA2 U+00338 .. DOUBLE NESTED GREATER-THAN with slash
  .. |NotNestedLessLess|       unicode:: U+02AA1 U+00338 .. DOUBLE NESTED LESS-THAN with slash
  .. |NotRightTriangleBar|     unicode:: U+029D0 U+00338 .. VERTICAL BAR BESIDE RIGHT TRIANGLE with slash
  .. |NotSquareSubset|         unicode:: U+0228F U+00338 .. SQUARE IMAGE OF with slash
  .. |NotSquareSuperset|       unicode:: U+02290 U+00338 .. SQUARE ORIGINAL OF with slash
  .. |NotSucceedsTilde|        unicode:: U+0227F U+00338 .. SUCCEEDS OR EQUIVALENT TO with slash
  .. |oopf|                    unicode:: U+1D560 .. MATHEMATICAL DOUBLE-STRUCK SMALL O
  .. |OverBar|                 unicode:: U+000AF .. MACRON
  .. |OverBrace|               unicode:: U+0FE37 .. PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET
  .. |OverBracket|             unicode:: U+023B4 .. TOP SQUARE BRACKET
  .. |OverParenthesis|         unicode:: U+0FE35 .. PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS
  .. |planckh|                 unicode:: U+0210E .. PLANCK CONSTANT
  .. |popf|                    unicode:: U+1D561 .. MATHEMATICAL DOUBLE-STRUCK SMALL P
  .. |Product|                 unicode:: U+0220F .. N-ARY PRODUCT
  .. |qopf|                    unicode:: U+1D562 .. MATHEMATICAL DOUBLE-STRUCK SMALL Q
  .. |rarrb|                   unicode:: U+021E5 .. RIGHTWARDS ARROW TO BAR
  .. |RightDownTeeVector|      unicode:: U+0295D .. DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR
  .. |RightDownVectorBar|      unicode:: U+02955 .. DOWNWARDS HARPOON WITH BARB RIGHT TO BAR
  .. |RightTeeVector|          unicode:: U+0295B .. RIGHTWARDS HARPOON WITH BARB UP FROM BAR
  .. |RightTriangleBar|        unicode:: U+029D0 .. VERTICAL BAR BESIDE RIGHT TRIANGLE
  .. |RightUpDownVector|       unicode:: U+0294F .. UP BARB RIGHT DOWN BARB RIGHT HARPOON
  .. |RightUpTeeVector|        unicode:: U+0295C .. UPWARDS HARPOON WITH BARB RIGHT FROM BAR
  .. |RightUpVectorBar|        unicode:: U+02954 .. UPWARDS HARPOON WITH BARB RIGHT TO BAR
  .. |RightVectorBar|          unicode:: U+02953 .. RIGHTWARDS HARPOON WITH BARB UP TO BAR
  .. |ropf|                    unicode:: U+1D563 .. MATHEMATICAL DOUBLE-STRUCK SMALL R
  .. |RoundImplies|            unicode:: U+02970 .. RIGHT DOUBLE ARROW WITH ROUNDED HEAD
  .. |RuleDelayed|             unicode:: U+029F4 .. RULE-DELAYED
  .. |sopf|                    unicode:: U+1D564 .. MATHEMATICAL DOUBLE-STRUCK SMALL S
  .. |Tab|                     unicode:: U+00009 .. CHARACTER TABULATION
  .. |ThickSpace|              unicode:: U+02009 U+0200A U+0200A .. space of width 5/18 em
  .. |topf|                    unicode:: U+1D565 .. MATHEMATICAL DOUBLE-STRUCK SMALL T
  .. |UnderBar|                unicode:: U+00332 .. COMBINING LOW LINE
  .. |UnderBrace|              unicode:: U+0FE38 .. PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET
  .. |UnderBracket|            unicode:: U+023B5 .. BOTTOM SQUARE BRACKET
  .. |UnderParenthesis|        unicode:: U+0FE36 .. PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS
  .. |uopf|                    unicode:: U+1D566 .. MATHEMATICAL DOUBLE-STRUCK SMALL U
  .. |UpArrowBar|              unicode:: U+02912 .. UPWARDS ARROW TO BAR
  .. |Upsilon|                 unicode:: U+003A5 .. GREEK CAPITAL LETTER UPSILON
  .. |VerticalLine|            unicode:: U+0007C .. VERTICAL LINE
  .. |VerticalSeparator|       unicode:: U+02758 .. LIGHT VERTICAL BAR
  .. |vopf|                    unicode:: U+1D567 .. MATHEMATICAL DOUBLE-STRUCK SMALL V
  .. |wopf|                    unicode:: U+1D568 .. MATHEMATICAL DOUBLE-STRUCK SMALL W
  .. |xopf|                    unicode:: U+1D569 .. MATHEMATICAL DOUBLE-STRUCK SMALL X
  .. |yopf|                    unicode:: U+1D56A .. MATHEMATICAL DOUBLE-STRUCK SMALL Y
  .. |ZeroWidthSpace|          unicode:: U+0200B .. ZERO WIDTH SPACE
  .. |zopf|                    unicode:: U+1D56B .. MATHEMATICAL DOUBLE-STRUCK SMALL Z


/Part 4. 093.📜 docutils-0.20.1/docutils/parsers/rst/include/mmlextra.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |af|                      unicode:: U+02061 .. FUNCTION APPLICATION
  .. |asympeq|                 unicode:: U+0224D .. EQUIVALENT TO
  .. |Cross|                   unicode:: U+02A2F .. VECTOR OR CROSS PRODUCT
  .. |DD|                      unicode:: U+02145 .. DOUBLE-STRUCK ITALIC CAPITAL D
  .. |dd|                      unicode:: U+02146 .. DOUBLE-STRUCK ITALIC SMALL D
  .. |DownArrowBar|            unicode:: U+02913 .. DOWNWARDS ARROW TO BAR
  .. |DownBreve|               unicode:: U+00311 .. COMBINING INVERTED BREVE
  .. |DownLeftRightVector|     unicode:: U+02950 .. LEFT BARB DOWN RIGHT BARB DOWN HARPOON
  .. |DownLeftTeeVector|       unicode:: U+0295E .. LEFTWARDS HARPOON WITH BARB DOWN FROM BAR
  .. |DownLeftVectorBar|       unicode:: U+02956 .. LEFTWARDS HARPOON WITH BARB DOWN TO BAR
  .. |DownRightTeeVector|      unicode:: U+0295F .. RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR
  .. |DownRightVectorBar|      unicode:: U+02957 .. RIGHTWARDS HARPOON WITH BARB DOWN TO BAR
  .. |ee|                      unicode:: U+02147 .. DOUBLE-STRUCK ITALIC SMALL E
  .. |EmptySmallSquare|        unicode:: U+025FB .. WHITE MEDIUM SQUARE
  .. |EmptyVerySmallSquare|    unicode:: U+025AB .. WHITE SMALL SQUARE
  .. |Equal|                   unicode:: U+02A75 .. TWO CONSECUTIVE EQUALS SIGNS
  .. |FilledSmallSquare|       unicode:: U+025FC .. BLACK MEDIUM SQUARE
  .. |FilledVerySmallSquare|   unicode:: U+025AA .. BLACK SMALL SQUARE
  .. |GreaterGreater|          unicode:: U+02AA2 .. DOUBLE NESTED GREATER-THAN
  .. |Hat|                     unicode:: U+0005E .. CIRCUMFLEX ACCENT
  .. |HorizontalLine|          unicode:: U+02500 .. BOX DRAWINGS LIGHT HORIZONTAL
  .. |ic|                      unicode:: U+02063 .. INVISIBLE SEPARATOR
  .. |ii|                      unicode:: U+02148 .. DOUBLE-STRUCK ITALIC SMALL I
  .. |it|                      unicode:: U+02062 .. INVISIBLE TIMES
  .. |larrb|                   unicode:: U+021E4 .. LEFTWARDS ARROW TO BAR
  .. |LeftDownTeeVector|       unicode:: U+02961 .. DOWNWARDS HARPOON WITH BARB LEFT FROM BAR
  .. |LeftDownVectorBar|       unicode:: U+02959 .. DOWNWARDS HARPOON WITH BARB LEFT TO BAR
  .. |LeftRightVector|         unicode:: U+0294E .. LEFT BARB UP RIGHT BARB UP HARPOON
  .. |LeftTeeVector|           unicode:: U+0295A .. LEFTWARDS HARPOON WITH BARB UP FROM BAR
  .. |LeftTriangleBar|         unicode:: U+029CF .. LEFT TRIANGLE BESIDE VERTICAL BAR
  .. |LeftUpDownVector|        unicode:: U+02951 .. UP BARB LEFT DOWN BARB LEFT HARPOON
  .. |LeftUpTeeVector|         unicode:: U+02960 .. UPWARDS HARPOON WITH BARB LEFT FROM BAR
  .. |LeftUpVectorBar|         unicode:: U+02958 .. UPWARDS HARPOON WITH BARB LEFT TO BAR
  .. |LeftVectorBar|           unicode:: U+02952 .. LEFTWARDS HARPOON WITH BARB UP TO BAR
  .. |LessLess|                unicode:: U+02AA1 .. DOUBLE NESTED LESS-THAN
  .. |mapstodown|              unicode:: U+021A7 .. DOWNWARDS ARROW FROM BAR
  .. |mapstoleft|              unicode:: U+021A4 .. LEFTWARDS ARROW FROM BAR
  .. |mapstoup|                unicode:: U+021A5 .. UPWARDS ARROW FROM BAR
  .. |MediumSpace|             unicode:: U+0205F .. MEDIUM MATHEMATICAL SPACE
  .. |nbump|                   unicode:: U+0224E U+00338 .. GEOMETRICALLY EQUIVALENT TO with slash
  .. |nbumpe|                  unicode:: U+0224F U+00338 .. DIFFERENCE BETWEEN with slash
  .. |nesim|                   unicode:: U+02242 U+00338 .. MINUS TILDE with slash
  .. |NewLine|                 unicode:: U+0000A .. LINE FEED (LF)
  .. |NoBreak|                 unicode:: U+02060 .. WORD JOINER
  .. |NotCupCap|               unicode:: U+0226D .. NOT EQUIVALENT TO
  .. |NotHumpEqual|            unicode:: U+0224F U+00338 .. DIFFERENCE BETWEEN with slash
  .. |NotLeftTriangleBar|      unicode:: U+029CF U+00338 .. LEFT TRIANGLE BESIDE VERTICAL BAR with slash
  .. |NotNestedGreaterGreater| unicode:: U+02AA2 U+00338 .. DOUBLE NESTED GREATER-THAN with slash
  .. |NotNestedLessLess|       unicode:: U+02AA1 U+00338 .. DOUBLE NESTED LESS-THAN with slash
  .. |NotRightTriangleBar|     unicode:: U+029D0 U+00338 .. VERTICAL BAR BESIDE RIGHT TRIANGLE with slash
  .. |NotSquareSubset|         unicode:: U+0228F U+00338 .. SQUARE IMAGE OF with slash
  .. |NotSquareSuperset|       unicode:: U+02290 U+00338 .. SQUARE ORIGINAL OF with slash
  .. |NotSucceedsTilde|        unicode:: U+0227F U+00338 .. SUCCEEDS OR EQUIVALENT TO with slash
  .. |OverBar|                 unicode:: U+000AF .. MACRON
  .. |OverBrace|               unicode:: U+0FE37 .. PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET
  .. |OverBracket|             unicode:: U+023B4 .. TOP SQUARE BRACKET
  .. |OverParenthesis|         unicode:: U+0FE35 .. PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS
  .. |planckh|                 unicode:: U+0210E .. PLANCK CONSTANT
  .. |Product|                 unicode:: U+0220F .. N-ARY PRODUCT
  .. |rarrb|                   unicode:: U+021E5 .. RIGHTWARDS ARROW TO BAR
  .. |RightDownTeeVector|      unicode:: U+0295D .. DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR
  .. |RightDownVectorBar|      unicode:: U+02955 .. DOWNWARDS HARPOON WITH BARB RIGHT TO BAR
  .. |RightTeeVector|          unicode:: U+0295B .. RIGHTWARDS HARPOON WITH BARB UP FROM BAR
  .. |RightTriangleBar|        unicode:: U+029D0 .. VERTICAL BAR BESIDE RIGHT TRIANGLE
  .. |RightUpDownVector|       unicode:: U+0294F .. UP BARB RIGHT DOWN BARB RIGHT HARPOON
  .. |RightUpTeeVector|        unicode:: U+0295C .. UPWARDS HARPOON WITH BARB RIGHT FROM BAR
  .. |RightUpVectorBar|        unicode:: U+02954 .. UPWARDS HARPOON WITH BARB RIGHT TO BAR
  .. |RightVectorBar|          unicode:: U+02953 .. RIGHTWARDS HARPOON WITH BARB UP TO BAR
  .. |RoundImplies|            unicode:: U+02970 .. RIGHT DOUBLE ARROW WITH ROUNDED HEAD
  .. |RuleDelayed|             unicode:: U+029F4 .. RULE-DELAYED
  .. |Tab|                     unicode:: U+00009 .. CHARACTER TABULATION
  .. |ThickSpace|              unicode:: U+02009 U+0200A U+0200A .. space of width 5/18 em
  .. |UnderBar|                unicode:: U+00332 .. COMBINING LOW LINE
  .. |UnderBrace|              unicode:: U+0FE38 .. PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET
  .. |UnderBracket|            unicode:: U+023B5 .. BOTTOM SQUARE BRACKET
  .. |UnderParenthesis|        unicode:: U+0FE36 .. PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS
  .. |UpArrowBar|              unicode:: U+02912 .. UPWARDS ARROW TO BAR
  .. |Upsilon|                 unicode:: U+003A5 .. GREEK CAPITAL LETTER UPSILON
  .. |VerticalLine|            unicode:: U+0007C .. VERTICAL LINE
  .. |VerticalSeparator|       unicode:: U+02758 .. LIGHT VERTICAL BAR
  .. |ZeroWidthSpace|          unicode:: U+0200B .. ZERO WIDTH SPACE


/Part 4. 094.📜 docutils-0.20.1/docutils/parsers/rst/include/s5defs.txt

.. code-block:: text

  .. Definitions of interpreted text roles (classes) for S5/HTML data.
  .. This data file has been placed in the public domain.

  .. Colours
     =======

  .. role:: black
  .. role:: gray
  .. role:: silver
  .. role:: white

  .. role:: maroon
  .. role:: red
  .. role:: magenta
  .. role:: fuchsia
  .. role:: pink
  .. role:: orange
  .. role:: yellow
  .. role:: lime
  .. role:: green
  .. role:: olive
  .. role:: teal
  .. role:: cyan
  .. role:: aqua
  .. role:: blue
  .. role:: navy
  .. role:: purple


  .. Text Sizes
     ==========

  .. role:: huge
  .. role:: big
  .. role:: small
  .. role:: tiny


  .. Display in Slides (Presentation Mode) Only
     ==========================================

  .. role:: slide
     :class: slide-display


  .. Display in Outline Mode Only
     ============================

  .. role:: outline


  .. Display in Print Only
     =====================

  .. role:: print


  .. Display in Handout Mode Only
     ============================

  .. role:: handout


  .. Incremental Display
     ===================

  .. role:: incremental
  .. default-role:: incremental


/Part 4. 095.📜 docutils-0.20.1/docutils/parsers/rst/include/xhtml1-lat1.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |Aacute| unicode:: U+000C1 .. LATIN CAPITAL LETTER A WITH ACUTE
  .. |aacute| unicode:: U+000E1 .. LATIN SMALL LETTER A WITH ACUTE
  .. |Acirc|  unicode:: U+000C2 .. LATIN CAPITAL LETTER A WITH CIRCUMFLEX
  .. |acirc|  unicode:: U+000E2 .. LATIN SMALL LETTER A WITH CIRCUMFLEX
  .. |acute|  unicode:: U+000B4 .. ACUTE ACCENT
  .. |AElig|  unicode:: U+000C6 .. LATIN CAPITAL LETTER AE
  .. |aelig|  unicode:: U+000E6 .. LATIN SMALL LETTER AE
  .. |Agrave| unicode:: U+000C0 .. LATIN CAPITAL LETTER A WITH GRAVE
  .. |agrave| unicode:: U+000E0 .. LATIN SMALL LETTER A WITH GRAVE
  .. |Aring|  unicode:: U+000C5 .. LATIN CAPITAL LETTER A WITH RING ABOVE
  .. |aring|  unicode:: U+000E5 .. LATIN SMALL LETTER A WITH RING ABOVE
  .. |Atilde| unicode:: U+000C3 .. LATIN CAPITAL LETTER A WITH TILDE
  .. |atilde| unicode:: U+000E3 .. LATIN SMALL LETTER A WITH TILDE
  .. |Auml|   unicode:: U+000C4 .. LATIN CAPITAL LETTER A WITH DIAERESIS
  .. |auml|   unicode:: U+000E4 .. LATIN SMALL LETTER A WITH DIAERESIS
  .. |brvbar| unicode:: U+000A6 .. BROKEN BAR
  .. |Ccedil| unicode:: U+000C7 .. LATIN CAPITAL LETTER C WITH CEDILLA
  .. |ccedil| unicode:: U+000E7 .. LATIN SMALL LETTER C WITH CEDILLA
  .. |cedil|  unicode:: U+000B8 .. CEDILLA
  .. |cent|   unicode:: U+000A2 .. CENT SIGN
  .. |copy|   unicode:: U+000A9 .. COPYRIGHT SIGN
  .. |curren| unicode:: U+000A4 .. CURRENCY SIGN
  .. |deg|    unicode:: U+000B0 .. DEGREE SIGN
  .. |divide| unicode:: U+000F7 .. DIVISION SIGN
  .. |Eacute| unicode:: U+000C9 .. LATIN CAPITAL LETTER E WITH ACUTE
  .. |eacute| unicode:: U+000E9 .. LATIN SMALL LETTER E WITH ACUTE
  .. |Ecirc|  unicode:: U+000CA .. LATIN CAPITAL LETTER E WITH CIRCUMFLEX
  .. |ecirc|  unicode:: U+000EA .. LATIN SMALL LETTER E WITH CIRCUMFLEX
  .. |Egrave| unicode:: U+000C8 .. LATIN CAPITAL LETTER E WITH GRAVE
  .. |egrave| unicode:: U+000E8 .. LATIN SMALL LETTER E WITH GRAVE
  .. |ETH|    unicode:: U+000D0 .. LATIN CAPITAL LETTER ETH
  .. |eth|    unicode:: U+000F0 .. LATIN SMALL LETTER ETH
  .. |Euml|   unicode:: U+000CB .. LATIN CAPITAL LETTER E WITH DIAERESIS
  .. |euml|   unicode:: U+000EB .. LATIN SMALL LETTER E WITH DIAERESIS
  .. |frac12| unicode:: U+000BD .. VULGAR FRACTION ONE HALF
  .. |frac14| unicode:: U+000BC .. VULGAR FRACTION ONE QUARTER
  .. |frac34| unicode:: U+000BE .. VULGAR FRACTION THREE QUARTERS
  .. |Iacute| unicode:: U+000CD .. LATIN CAPITAL LETTER I WITH ACUTE
  .. |iacute| unicode:: U+000ED .. LATIN SMALL LETTER I WITH ACUTE
  .. |Icirc|  unicode:: U+000CE .. LATIN CAPITAL LETTER I WITH CIRCUMFLEX
  .. |icirc|  unicode:: U+000EE .. LATIN SMALL LETTER I WITH CIRCUMFLEX
  .. |iexcl|  unicode:: U+000A1 .. INVERTED EXCLAMATION MARK
  .. |Igrave| unicode:: U+000CC .. LATIN CAPITAL LETTER I WITH GRAVE
  .. |igrave| unicode:: U+000EC .. LATIN SMALL LETTER I WITH GRAVE
  .. |iquest| unicode:: U+000BF .. INVERTED QUESTION MARK
  .. |Iuml|   unicode:: U+000CF .. LATIN CAPITAL LETTER I WITH DIAERESIS
  .. |iuml|   unicode:: U+000EF .. LATIN SMALL LETTER I WITH DIAERESIS
  .. |laquo|  unicode:: U+000AB .. LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
  .. |macr|   unicode:: U+000AF .. MACRON
  .. |micro|  unicode:: U+000B5 .. MICRO SIGN
  .. |middot| unicode:: U+000B7 .. MIDDLE DOT
  .. |nbsp|   unicode:: U+000A0 .. NO-BREAK SPACE
  .. |not|    unicode:: U+000AC .. NOT SIGN
  .. |Ntilde| unicode:: U+000D1 .. LATIN CAPITAL LETTER N WITH TILDE
  .. |ntilde| unicode:: U+000F1 .. LATIN SMALL LETTER N WITH TILDE
  .. |Oacute| unicode:: U+000D3 .. LATIN CAPITAL LETTER O WITH ACUTE
  .. |oacute| unicode:: U+000F3 .. LATIN SMALL LETTER O WITH ACUTE
  .. |Ocirc|  unicode:: U+000D4 .. LATIN CAPITAL LETTER O WITH CIRCUMFLEX
  .. |ocirc|  unicode:: U+000F4 .. LATIN SMALL LETTER O WITH CIRCUMFLEX
  .. |Ograve| unicode:: U+000D2 .. LATIN CAPITAL LETTER O WITH GRAVE
  .. |ograve| unicode:: U+000F2 .. LATIN SMALL LETTER O WITH GRAVE
  .. |ordf|   unicode:: U+000AA .. FEMININE ORDINAL INDICATOR
  .. |ordm|   unicode:: U+000BA .. MASCULINE ORDINAL INDICATOR
  .. |Oslash| unicode:: U+000D8 .. LATIN CAPITAL LETTER O WITH STROKE
  .. |oslash| unicode:: U+000F8 .. LATIN SMALL LETTER O WITH STROKE
  .. |Otilde| unicode:: U+000D5 .. LATIN CAPITAL LETTER O WITH TILDE
  .. |otilde| unicode:: U+000F5 .. LATIN SMALL LETTER O WITH TILDE
  .. |Ouml|   unicode:: U+000D6 .. LATIN CAPITAL LETTER O WITH DIAERESIS
  .. |ouml|   unicode:: U+000F6 .. LATIN SMALL LETTER O WITH DIAERESIS
  .. |para|   unicode:: U+000B6 .. PILCROW SIGN
  .. |plusmn| unicode:: U+000B1 .. PLUS-MINUS SIGN
  .. |pound|  unicode:: U+000A3 .. POUND SIGN
  .. |raquo|  unicode:: U+000BB .. RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
  .. |reg|    unicode:: U+000AE .. REGISTERED SIGN
  .. |sect|   unicode:: U+000A7 .. SECTION SIGN
  .. |shy|    unicode:: U+000AD .. SOFT HYPHEN
  .. |sup1|   unicode:: U+000B9 .. SUPERSCRIPT ONE
  .. |sup2|   unicode:: U+000B2 .. SUPERSCRIPT TWO
  .. |sup3|   unicode:: U+000B3 .. SUPERSCRIPT THREE
  .. |szlig|  unicode:: U+000DF .. LATIN SMALL LETTER SHARP S
  .. |THORN|  unicode:: U+000DE .. LATIN CAPITAL LETTER THORN
  .. |thorn|  unicode:: U+000FE .. LATIN SMALL LETTER THORN
  .. |times|  unicode:: U+000D7 .. MULTIPLICATION SIGN
  .. |Uacute| unicode:: U+000DA .. LATIN CAPITAL LETTER U WITH ACUTE
  .. |uacute| unicode:: U+000FA .. LATIN SMALL LETTER U WITH ACUTE
  .. |Ucirc|  unicode:: U+000DB .. LATIN CAPITAL LETTER U WITH CIRCUMFLEX
  .. |ucirc|  unicode:: U+000FB .. LATIN SMALL LETTER U WITH CIRCUMFLEX
  .. |Ugrave| unicode:: U+000D9 .. LATIN CAPITAL LETTER U WITH GRAVE
  .. |ugrave| unicode:: U+000F9 .. LATIN SMALL LETTER U WITH GRAVE
  .. |uml|    unicode:: U+000A8 .. DIAERESIS
  .. |Uuml|   unicode:: U+000DC .. LATIN CAPITAL LETTER U WITH DIAERESIS
  .. |uuml|   unicode:: U+000FC .. LATIN SMALL LETTER U WITH DIAERESIS
  .. |Yacute| unicode:: U+000DD .. LATIN CAPITAL LETTER Y WITH ACUTE
  .. |yacute| unicode:: U+000FD .. LATIN SMALL LETTER Y WITH ACUTE
  .. |yen|    unicode:: U+000A5 .. YEN SIGN
  .. |yuml|   unicode:: U+000FF .. LATIN SMALL LETTER Y WITH DIAERESIS


/Part 4. 096.📜 docutils-0.20.1/docutils/parsers/rst/include/xhtml1-special.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |bdquo|  unicode:: U+0201E .. DOUBLE LOW-9 QUOTATION MARK
  .. |circ|   unicode:: U+002C6 .. MODIFIER LETTER CIRCUMFLEX ACCENT
  .. |Dagger| unicode:: U+02021 .. DOUBLE DAGGER
  .. |dagger| unicode:: U+02020 .. DAGGER
  .. |emsp|   unicode:: U+02003 .. EM SPACE
  .. |ensp|   unicode:: U+02002 .. EN SPACE
  .. |euro|   unicode:: U+020AC .. EURO SIGN
  .. |gt|     unicode:: U+0003E .. GREATER-THAN SIGN
  .. |ldquo|  unicode:: U+0201C .. LEFT DOUBLE QUOTATION MARK
  .. |lrm|    unicode:: U+0200E .. LEFT-TO-RIGHT MARK
  .. |lsaquo| unicode:: U+02039 .. SINGLE LEFT-POINTING ANGLE QUOTATION MARK
  .. |lsquo|  unicode:: U+02018 .. LEFT SINGLE QUOTATION MARK
  .. |lt|     unicode:: U+0003C .. LESS-THAN SIGN
  .. |mdash|  unicode:: U+02014 .. EM DASH
  .. |ndash|  unicode:: U+02013 .. EN DASH
  .. |OElig|  unicode:: U+00152 .. LATIN CAPITAL LIGATURE OE
  .. |oelig|  unicode:: U+00153 .. LATIN SMALL LIGATURE OE
  .. |permil| unicode:: U+02030 .. PER MILLE SIGN
  .. |quot|   unicode:: U+00022 .. QUOTATION MARK
  .. |rdquo|  unicode:: U+0201D .. RIGHT DOUBLE QUOTATION MARK
  .. |rlm|    unicode:: U+0200F .. RIGHT-TO-LEFT MARK
  .. |rsaquo| unicode:: U+0203A .. SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
  .. |rsquo|  unicode:: U+02019 .. RIGHT SINGLE QUOTATION MARK
  .. |sbquo|  unicode:: U+0201A .. SINGLE LOW-9 QUOTATION MARK
  .. |Scaron| unicode:: U+00160 .. LATIN CAPITAL LETTER S WITH CARON
  .. |scaron| unicode:: U+00161 .. LATIN SMALL LETTER S WITH CARON
  .. |thinsp| unicode:: U+02009 .. THIN SPACE
  .. |tilde|  unicode:: U+002DC .. SMALL TILDE
  .. |Yuml|   unicode:: U+00178 .. LATIN CAPITAL LETTER Y WITH DIAERESIS
  .. |zwj|    unicode:: U+0200D .. ZERO WIDTH JOINER
  .. |zwnj|   unicode:: U+0200C .. ZERO WIDTH NON-JOINER


/Part 4. 097.📜 docutils-0.20.1/docutils/parsers/rst/include/xhtml1-symbol.txt

.. code-block:: text

  .. This data file has been placed in the public domain.
  .. Derived from the Unicode character mappings available from
     <http://www.w3.org/2003/entities/xml/>.
     Processed by unicode2rstsubs.py, part of Docutils:
     <https://docutils.sourceforge.io>.

  .. |alefsym|  unicode:: U+02135 .. ALEF SYMBOL
  .. |Alpha|    unicode:: U+00391 .. GREEK CAPITAL LETTER ALPHA
  .. |alpha|    unicode:: U+003B1 .. GREEK SMALL LETTER ALPHA
  .. |and|      unicode:: U+02227 .. LOGICAL AND
  .. |ang|      unicode:: U+02220 .. ANGLE
  .. |asymp|    unicode:: U+02248 .. ALMOST EQUAL TO
  .. |Beta|     unicode:: U+00392 .. GREEK CAPITAL LETTER BETA
  .. |beta|     unicode:: U+003B2 .. GREEK SMALL LETTER BETA
  .. |bull|     unicode:: U+02022 .. BULLET
  .. |cap|      unicode:: U+02229 .. INTERSECTION
  .. |Chi|      unicode:: U+003A7 .. GREEK CAPITAL LETTER CHI
  .. |chi|      unicode:: U+003C7 .. GREEK SMALL LETTER CHI
  .. |clubs|    unicode:: U+02663 .. BLACK CLUB SUIT
  .. |cong|     unicode:: U+02245 .. APPROXIMATELY EQUAL TO
  .. |crarr|    unicode:: U+021B5 .. DOWNWARDS ARROW WITH CORNER LEFTWARDS
  .. |cup|      unicode:: U+0222A .. UNION
  .. |dArr|     unicode:: U+021D3 .. DOWNWARDS DOUBLE ARROW
  .. |darr|     unicode:: U+02193 .. DOWNWARDS ARROW
  .. |Delta|    unicode:: U+00394 .. GREEK CAPITAL LETTER DELTA
  .. |delta|    unicode:: U+003B4 .. GREEK SMALL LETTER DELTA
  .. |diams|    unicode:: U+02666 .. BLACK DIAMOND SUIT
  .. |empty|    unicode:: U+02205 .. EMPTY SET
  .. |Epsilon|  unicode:: U+00395 .. GREEK CAPITAL LETTER EPSILON
  .. |epsilon|  unicode:: U+003B5 .. GREEK SMALL LETTER EPSILON
  .. |equiv|    unicode:: U+02261 .. IDENTICAL TO
  .. |Eta|      unicode:: U+00397 .. GREEK CAPITAL LETTER ETA
  .. |eta|      unicode:: U+003B7 .. GREEK SMALL LETTER ETA
  .. |exist|    unicode:: U+02203 .. THERE EXISTS
  .. |fnof|     unicode:: U+00192 .. LATIN SMALL LETTER F WITH HOOK
  .. |forall|   unicode:: U+02200 .. FOR ALL
  .. |frasl|    unicode:: U+02044 .. FRACTION SLASH
  .. |Gamma|    unicode:: U+00393 .. GREEK CAPITAL LETTER GAMMA
  .. |gamma|    unicode:: U+003B3 .. GREEK SMALL LETTER GAMMA
  .. |ge|       unicode:: U+02265 .. GREATER-THAN OR EQUAL TO
  .. |hArr|     unicode:: U+021D4 .. LEFT RIGHT DOUBLE ARROW
  .. |harr|     unicode:: U+02194 .. LEFT RIGHT ARROW
  .. |hearts|   unicode:: U+02665 .. BLACK HEART SUIT
  .. |hellip|   unicode:: U+02026 .. HORIZONTAL ELLIPSIS
  .. |image|    unicode:: U+02111 .. BLACK-LETTER CAPITAL I
  .. |infin|    unicode:: U+0221E .. INFINITY
  .. |int|      unicode:: U+0222B .. INTEGRAL
  .. |Iota|     unicode:: U+00399 .. GREEK CAPITAL LETTER IOTA
  .. |iota|     unicode:: U+003B9 .. GREEK SMALL LETTER IOTA
  .. |isin|     unicode:: U+02208 .. ELEMENT OF
  .. |Kappa|    unicode:: U+0039A .. GREEK CAPITAL LETTER KAPPA
  .. |kappa|    unicode:: U+003BA .. GREEK SMALL LETTER KAPPA
  .. |Lambda|   unicode:: U+0039B .. GREEK CAPITAL LETTER LAMDA
  .. |lambda|   unicode:: U+003BB .. GREEK SMALL LETTER LAMDA
  .. |lang|     unicode:: U+02329 .. LEFT-POINTING ANGLE BRACKET
  .. |lArr|     unicode:: U+021D0 .. LEFTWARDS DOUBLE ARROW
  .. |larr|     unicode:: U+02190 .. LEFTWARDS ARROW
  .. |lceil|    unicode:: U+02308 .. LEFT CEILING
  .. |le|       unicode:: U+02264 .. LESS-THAN OR EQUAL TO
  .. |lfloor|   unicode:: U+0230A .. LEFT FLOOR
  .. |lowast|   unicode:: U+02217 .. ASTERISK OPERATOR
  .. |loz|      unicode:: U+025CA .. LOZENGE
  .. |minus|    unicode:: U+02212 .. MINUS SIGN
  .. |Mu|       unicode:: U+0039C .. GREEK CAPITAL LETTER MU
  .. |mu|       unicode:: U+003BC .. GREEK SMALL LETTER MU
  .. |nabla|    unicode:: U+02207 .. NABLA
  .. |ne|       unicode:: U+02260 .. NOT EQUAL TO
  .. |ni|       unicode:: U+0220B .. CONTAINS AS MEMBER
  .. |notin|    unicode:: U+02209 .. NOT AN ELEMENT OF
  .. |nsub|     unicode:: U+02284 .. NOT A SUBSET OF
  .. |Nu|       unicode:: U+0039D .. GREEK CAPITAL LETTER NU
  .. |nu|       unicode:: U+003BD .. GREEK SMALL LETTER NU
  .. |oline|    unicode:: U+0203E .. OVERLINE
  .. |Omega|    unicode:: U+003A9 .. GREEK CAPITAL LETTER OMEGA
  .. |omega|    unicode:: U+003C9 .. GREEK SMALL LETTER OMEGA
  .. |Omicron|  unicode:: U+0039F .. GREEK CAPITAL LETTER OMICRON
  .. |omicron|  unicode:: U+003BF .. GREEK SMALL LETTER OMICRON
  .. |oplus|    unicode:: U+02295 .. CIRCLED PLUS
  .. |or|       unicode:: U+02228 .. LOGICAL OR
  .. |otimes|   unicode:: U+02297 .. CIRCLED TIMES
  .. |part|     unicode:: U+02202 .. PARTIAL DIFFERENTIAL
  .. |perp|     unicode:: U+022A5 .. UP TACK
  .. |Phi|      unicode:: U+003A6 .. GREEK CAPITAL LETTER PHI
  .. |phi|      unicode:: U+003D5 .. GREEK PHI SYMBOL
  .. |Pi|       unicode:: U+003A0 .. GREEK CAPITAL LETTER PI
  .. |pi|       unicode:: U+003C0 .. GREEK SMALL LETTER PI
  .. |piv|      unicode:: U+003D6 .. GREEK PI SYMBOL
  .. |Prime|    unicode:: U+02033 .. DOUBLE PRIME
  .. |prime|    unicode:: U+02032 .. PRIME
  .. |prod|     unicode:: U+0220F .. N-ARY PRODUCT
  .. |prop|     unicode:: U+0221D .. PROPORTIONAL TO
  .. |Psi|      unicode:: U+003A8 .. GREEK CAPITAL LETTER PSI
  .. |psi|      unicode:: U+003C8 .. GREEK SMALL LETTER PSI
  .. |radic|    unicode:: U+0221A .. SQUARE ROOT
  .. |rang|     unicode:: U+0232A .. RIGHT-POINTING ANGLE BRACKET
  .. |rArr|     unicode:: U+021D2 .. RIGHTWARDS DOUBLE ARROW
  .. |rarr|     unicode:: U+02192 .. RIGHTWARDS ARROW
  .. |rceil|    unicode:: U+02309 .. RIGHT CEILING
  .. |real|     unicode:: U+0211C .. BLACK-LETTER CAPITAL R
  .. |rfloor|   unicode:: U+0230B .. RIGHT FLOOR
  .. |Rho|      unicode:: U+003A1 .. GREEK CAPITAL LETTER RHO
  .. |rho|      unicode:: U+003C1 .. GREEK SMALL LETTER RHO
  .. |sdot|     unicode:: U+022C5 .. DOT OPERATOR
  .. |Sigma|    unicode:: U+003A3 .. GREEK CAPITAL LETTER SIGMA
  .. |sigma|    unicode:: U+003C3 .. GREEK SMALL LETTER SIGMA
  .. |sigmaf|   unicode:: U+003C2 .. GREEK SMALL LETTER FINAL SIGMA
  .. |sim|      unicode:: U+0223C .. TILDE OPERATOR
  .. |spades|   unicode:: U+02660 .. BLACK SPADE SUIT
  .. |sub|      unicode:: U+02282 .. SUBSET OF
  .. |sube|     unicode:: U+02286 .. SUBSET OF OR EQUAL TO
  .. |sum|      unicode:: U+02211 .. N-ARY SUMMATION
  .. |sup|      unicode:: U+02283 .. SUPERSET OF
  .. |supe|     unicode:: U+02287 .. SUPERSET OF OR EQUAL TO
  .. |Tau|      unicode:: U+003A4 .. GREEK CAPITAL LETTER TAU
  .. |tau|      unicode:: U+003C4 .. GREEK SMALL LETTER TAU
  .. |there4|   unicode:: U+02234 .. THEREFORE
  .. |Theta|    unicode:: U+00398 .. GREEK CAPITAL LETTER THETA
  .. |theta|    unicode:: U+003B8 .. GREEK SMALL LETTER THETA
  .. |thetasym| unicode:: U+003D1 .. GREEK THETA SYMBOL
  .. |trade|    unicode:: U+02122 .. TRADE MARK SIGN
  .. |uArr|     unicode:: U+021D1 .. UPWARDS DOUBLE ARROW
  .. |uarr|     unicode:: U+02191 .. UPWARDS ARROW
  .. |upsih|    unicode:: U+003D2 .. GREEK UPSILON WITH HOOK SYMBOL
  .. |Upsilon|  unicode:: U+003A5 .. GREEK CAPITAL LETTER UPSILON
  .. |upsilon|  unicode:: U+003C5 .. GREEK SMALL LETTER UPSILON
  .. |weierp|   unicode:: U+02118 .. SCRIPT CAPITAL P
  .. |Xi|       unicode:: U+0039E .. GREEK CAPITAL LETTER XI
  .. |xi|       unicode:: U+003BE .. GREEK SMALL LETTER XI
  .. |Zeta|     unicode:: U+00396 .. GREEK CAPITAL LETTER ZETA
  .. |zeta|     unicode:: U+003B6 .. GREEK SMALL LETTER ZETA


/Part 4. 098.📜 docutils-0.20.1/docutils/writers/html4css1/template.txt

.. code-block:: text

    %(head_prefix)s
    %(head)s
    %(stylesheet)s
    %(body_prefix)s
    %(body_pre_docinfo)s
    %(docinfo)s
    %(body)s
    %(body_suffix)s


/Part 4. 099.📜 docutils-0.20.1/docutils/writers/html5_polyglot/template.txt

.. code-block:: text

    %(head_prefix)s
    %(head)s
    %(stylesheet)s
    %(body_prefix)s
    %(body_pre_docinfo)s
    %(docinfo)s
    %(body)s
    %(body_suffix)s


/Part 4. 100.📜 docutils-0.20.1/docutils/writers/pep_html/template.txt

.. code-block:: text

    <?xml version="1.0" encoding="%(encoding)s"?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <!--
    This HTML is auto-generated.  DO NOT EDIT THIS FILE!  If you are writing a new
    PEP, see http://peps.python.org/pep-0001 for instructions and links
    to templates.  DO NOT USE THIS HTML FILE AS YOUR TEMPLATE!
    -->
    <head>
      <meta http-equiv="Content-Type" content="text/html; charset=%(encoding)s" />
      <meta name="generator" content="Docutils %(version)s: https://docutils.sourceforge.io/" />
      <title>PEP %(pep)s - %(title)s</title>
      %(stylesheet)s
    </head>
    <body bgcolor="white">
    <div class="header">
    <strong>Python Enhancement Proposals</strong>
    | <a href="%(pyhome)s/">Python</a>
    &raquo; <a href="https://peps.python.org/pep-0000/">PEP Index</a>
    &raquo; PEP %(pep)s &ndash; %(title)s
    <hr class="header"/>
    </div>
    <div class="document">
    %(body)s
    %(body_suffix)s


/Part 5. 101.📜 docutils-0.20.1/licenses/BSD-2-Clause.txt

.. code-block:: text

  2-Clause BSD license / FreeBSD license
  ======================================

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/Part 5. 102.📜 docutils-0.20.1/licenses/gpl-3-0.txt

.. code-block:: text

                      GNU GENERAL PUBLIC LICENSE
                         Version 3, 29 June 2007

   Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
   Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.

                              Preamble

    The GNU General Public License is a free, copyleft license for
  software and other kinds of works.

    The licenses for most software and other practical works are designed
  to take away your freedom to share and change the works.  By contrast,
  the GNU General Public License is intended to guarantee your freedom to
  share and change all versions of a program--to make sure it remains free
  software for all its users.  We, the Free Software Foundation, use the
  GNU General Public License for most of our software; it applies also to
  any other work released this way by its authors.  You can apply it to
  your programs, too.

    When we speak of free software, we are referring to freedom, not
  price.  Our General Public Licenses are designed to make sure that you
  have the freedom to distribute copies of free software (and charge for
  them if you wish), that you receive source code or can get it if you
  want it, that you can change the software or use pieces of it in new
  free programs, and that you know you can do these things.

    To protect your rights, we need to prevent others from denying you
  these rights or asking you to surrender the rights.  Therefore, you have
  certain responsibilities if you distribute copies of the software, or if
  you modify it: responsibilities to respect the freedom of others.

    For example, if you distribute copies of such a program, whether
  gratis or for a fee, you must pass on to the recipients the same
  freedoms that you received.  You must make sure that they, too, receive
  or can get the source code.  And you must show them these terms so they
  know their rights.

    Developers that use the GNU GPL protect your rights with two steps:
  (1) assert copyright on the software, and (2) offer you this License
  giving you legal permission to copy, distribute and/or modify it.

    For the developers' and authors' protection, the GPL clearly explains
  that there is no warranty for this free software.  For both users' and
  authors' sake, the GPL requires that modified versions be marked as
  changed, so that their problems will not be attributed erroneously to
  authors of previous versions.

    Some devices are designed to deny users access to install or run
  modified versions of the software inside them, although the manufacturer
  can do so.  This is fundamentally incompatible with the aim of
  protecting users' freedom to change the software.  The systematic
  pattern of such abuse occurs in the area of products for individuals to
  use, which is precisely where it is most unacceptable.  Therefore, we
  have designed this version of the GPL to prohibit the practice for those
  products.  If such problems arise substantially in other domains, we
  stand ready to extend this provision to those domains in future versions
  of the GPL, as needed to protect the freedom of users.

    Finally, every program is threatened constantly by software patents.
  States should not allow patents to restrict development and use of
  software on general-purpose computers, but in those that do, we wish to
  avoid the special danger that patents applied to a free program could
  make it effectively proprietary.  To prevent this, the GPL assures that
  patents cannot be used to render the program non-free.

    The precise terms and conditions for copying, distribution and
  modification follow.

                         TERMS AND CONDITIONS

    0. Definitions.

    "This License" refers to version 3 of the GNU General Public License.

    "Copyright" also means copyright-like laws that apply to other kinds of
  works, such as semiconductor masks.

    "The Program" refers to any copyrightable work licensed under this
  License.  Each licensee is addressed as "you".  "Licensees" and
  "recipients" may be individuals or organizations.

    To "modify" a work means to copy from or adapt all or part of the work
  in a fashion requiring copyright permission, other than the making of an
  exact copy.  The resulting work is called a "modified version" of the
  earlier work or a work "based on" the earlier work.

    A "covered work" means either the unmodified Program or a work based
  on the Program.

    To "propagate" a work means to do anything with it that, without
  permission, would make you directly or secondarily liable for
  infringement under applicable copyright law, except executing it on a
  computer or modifying a private copy.  Propagation includes copying,
  distribution (with or without modification), making available to the
  public, and in some countries other activities as well.

    To "convey" a work means any kind of propagation that enables other
  parties to make or receive copies.  Mere interaction with a user through
  a computer network, with no transfer of a copy, is not conveying.

    An interactive user interface displays "Appropriate Legal Notices"
  to the extent that it includes a convenient and prominently visible
  feature that (1) displays an appropriate copyright notice, and (2)
  tells the user that there is no warranty for the work (except to the
  extent that warranties are provided), that licensees may convey the
  work under this License, and how to view a copy of this License.  If
  the interface presents a list of user commands or options, such as a
  menu, a prominent item in the list meets this criterion.

    1. Source Code.

    The "source code" for a work means the preferred form of the work
  for making modifications to it.  "Object code" means any non-source
  form of a work.

    A "Standard Interface" means an interface that either is an official
  standard defined by a recognized standards body, or, in the case of
  interfaces specified for a particular programming language, one that
  is widely used among developers working in that language.

    The "System Libraries" of an executable work include anything, other
  than the work as a whole, that (a) is included in the normal form of
  packaging a Major Component, but which is not part of that Major
  Component, and (b) serves only to enable use of the work with that
  Major Component, or to implement a Standard Interface for which an
  implementation is available to the public in source code form.  A
  "Major Component", in this context, means a major essential component
  (kernel, window system, and so on) of the specific operating system
  (if any) on which the executable work runs, or a compiler used to
  produce the work, or an object code interpreter used to run it.

    The "Corresponding Source" for a work in object code form means all
  the source code needed to generate, install, and (for an executable
  work) run the object code and to modify the work, including scripts to
  control those activities.  However, it does not include the work's
  System Libraries, or general-purpose tools or generally available free
  programs which are used unmodified in performing those activities but
  which are not part of the work.  For example, Corresponding Source
  includes interface definition files associated with source files for
  the work, and the source code for shared libraries and dynamically
  linked subprograms that the work is specifically designed to require,
  such as by intimate data communication or control flow between those
  subprograms and other parts of the work.

    The Corresponding Source need not include anything that users
  can regenerate automatically from other parts of the Corresponding
  Source.

    The Corresponding Source for a work in source code form is that
  same work.

    2. Basic Permissions.

    All rights granted under this License are granted for the term of
  copyright on the Program, and are irrevocable provided the stated
  conditions are met.  This License explicitly affirms your unlimited
  permission to run the unmodified Program.  The output from running a
  covered work is covered by this License only if the output, given its
  content, constitutes a covered work.  This License acknowledges your
  rights of fair use or other equivalent, as provided by copyright law.

    You may make, run and propagate covered works that you do not
  convey, without conditions so long as your license otherwise remains
  in force.  You may convey covered works to others for the sole purpose
  of having them make modifications exclusively for you, or provide you
  with facilities for running those works, provided that you comply with
  the terms of this License in conveying all material for which you do
  not control copyright.  Those thus making or running the covered works
  for you must do so exclusively on your behalf, under your direction
  and control, on terms that prohibit them from making any copies of
  your copyrighted material outside their relationship with you.

    Conveying under any other circumstances is permitted solely under
  the conditions stated below.  Sublicensing is not allowed; section 10
  makes it unnecessary.

    3. Protecting Users' Legal Rights From Anti-Circumvention Law.

    No covered work shall be deemed part of an effective technological
  measure under any applicable law fulfilling obligations under article
  11 of the WIPO copyright treaty adopted on 20 December 1996, or
  similar laws prohibiting or restricting circumvention of such
  measures.

    When you convey a covered work, you waive any legal power to forbid
  circumvention of technological measures to the extent such circumvention
  is effected by exercising rights under this License with respect to
  the covered work, and you disclaim any intention to limit operation or
  modification of the work as a means of enforcing, against the work's
  users, your or third parties' legal rights to forbid circumvention of
  technological measures.

    4. Conveying Verbatim Copies.

    You may convey verbatim copies of the Program's source code as you
  receive it, in any medium, provided that you conspicuously and
  appropriately publish on each copy an appropriate copyright notice;
  keep intact all notices stating that this License and any
  non-permissive terms added in accord with section 7 apply to the code;
  keep intact all notices of the absence of any warranty; and give all
  recipients a copy of this License along with the Program.

    You may charge any price or no price for each copy that you convey,
  and you may offer support or warranty protection for a fee.

    5. Conveying Modified Source Versions.

    You may convey a work based on the Program, or the modifications to
  produce it from the Program, in the form of source code under the
  terms of section 4, provided that you also meet all of these conditions:

      a) The work must carry prominent notices stating that you modified
      it, and giving a relevant date.

      b) The work must carry prominent notices stating that it is
      released under this License and any conditions added under section
      7.  This requirement modifies the requirement in section 4 to
      "keep intact all notices".

      c) You must license the entire work, as a whole, under this
      License to anyone who comes into possession of a copy.  This
      License will therefore apply, along with any applicable section 7
      additional terms, to the whole of the work, and all its parts,
      regardless of how they are packaged.  This License gives no
      permission to license the work in any other way, but it does not
      invalidate such permission if you have separately received it.

      d) If the work has interactive user interfaces, each must display
      Appropriate Legal Notices; however, if the Program has interactive
      interfaces that do not display Appropriate Legal Notices, your
      work need not make them do so.

    A compilation of a covered work with other separate and independent
  works, which are not by their nature extensions of the covered work,
  and which are not combined with it such as to form a larger program,
  in or on a volume of a storage or distribution medium, is called an
  "aggregate" if the compilation and its resulting copyright are not
  used to limit the access or legal rights of the compilation's users
  beyond what the individual works permit.  Inclusion of a covered work
  in an aggregate does not cause this License to apply to the other
  parts of the aggregate.

    6. Conveying Non-Source Forms.

    You may convey a covered work in object code form under the terms
  of sections 4 and 5, provided that you also convey the
  machine-readable Corresponding Source under the terms of this License,
  in one of these ways:

      a) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by the
      Corresponding Source fixed on a durable physical medium
      customarily used for software interchange.

      b) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by a
      written offer, valid for at least three years and valid for as
      long as you offer spare parts or customer support for that product
      model, to give anyone who possesses the object code either (1) a
      copy of the Corresponding Source for all the software in the
      product that is covered by this License, on a durable physical
      medium customarily used for software interchange, for a price no
      more than your reasonable cost of physically performing this
      conveying of source, or (2) access to copy the
      Corresponding Source from a network server at no charge.

      c) Convey individual copies of the object code with a copy of the
      written offer to provide the Corresponding Source.  This
      alternative is allowed only occasionally and noncommercially, and
      only if you received the object code with such an offer, in accord
      with subsection 6b.

      d) Convey the object code by offering access from a designated
      place (gratis or for a charge), and offer equivalent access to the
      Corresponding Source in the same way through the same place at no
      further charge.  You need not require recipients to copy the
      Corresponding Source along with the object code.  If the place to
      copy the object code is a network server, the Corresponding Source
      may be on a different server (operated by you or a third party)
      that supports equivalent copying facilities, provided you maintain
      clear directions next to the object code saying where to find the
      Corresponding Source.  Regardless of what server hosts the
      Corresponding Source, you remain obligated to ensure that it is
      available for as long as needed to satisfy these requirements.

      e) Convey the object code using peer-to-peer transmission, provided
      you inform other peers where the object code and Corresponding
      Source of the work are being offered to the general public at no
      charge under subsection 6d.

    A separable portion of the object code, whose source code is excluded
  from the Corresponding Source as a System Library, need not be
  included in conveying the object code work.

    A "User Product" is either (1) a "consumer product", which means any
  tangible personal property which is normally used for personal, family,
  or household purposes, or (2) anything designed or sold for incorporation
  into a dwelling.  In determining whether a product is a consumer product,
  doubtful cases shall be resolved in favor of coverage.  For a particular
  product received by a particular user, "normally used" refers to a
  typical or common use of that class of product, regardless of the status
  of the particular user or of the way in which the particular user
  actually uses, or expects or is expected to use, the product.  A product
  is a consumer product regardless of whether the product has substantial
  commercial, industrial or non-consumer uses, unless such uses represent
  the only significant mode of use of the product.

    "Installation Information" for a User Product means any methods,
  procedures, authorization keys, or other information required to install
  and execute modified versions of a covered work in that User Product from
  a modified version of its Corresponding Source.  The information must
  suffice to ensure that the continued functioning of the modified object
  code is in no case prevented or interfered with solely because
  modification has been made.

    If you convey an object code work under this section in, or with, or
  specifically for use in, a User Product, and the conveying occurs as
  part of a transaction in which the right of possession and use of the
  User Product is transferred to the recipient in perpetuity or for a
  fixed term (regardless of how the transaction is characterized), the
  Corresponding Source conveyed under this section must be accompanied
  by the Installation Information.  But this requirement does not apply
  if neither you nor any third party retains the ability to install
  modified object code on the User Product (for example, the work has
  been installed in ROM).

    The requirement to provide Installation Information does not include a
  requirement to continue to provide support service, warranty, or updates
  for a work that has been modified or installed by the recipient, or for
  the User Product in which it has been modified or installed.  Access to a
  network may be denied when the modification itself materially and
  adversely affects the operation of the network or violates the rules and
  protocols for communication across the network.

    Corresponding Source conveyed, and Installation Information provided,
  in accord with this section must be in a format that is publicly
  documented (and with an implementation available to the public in
  source code form), and must require no special password or key for
  unpacking, reading or copying.

    7. Additional Terms.

    "Additional permissions" are terms that supplement the terms of this
  License by making exceptions from one or more of its conditions.
  Additional permissions that are applicable to the entire Program shall
  be treated as though they were included in this License, to the extent
  that they are valid under applicable law.  If additional permissions
  apply only to part of the Program, that part may be used separately
  under those permissions, but the entire Program remains governed by
  this License without regard to the additional permissions.

    When you convey a copy of a covered work, you may at your option
  remove any additional permissions from that copy, or from any part of
  it.  (Additional permissions may be written to require their own
  removal in certain cases when you modify the work.)  You may place
  additional permissions on material, added by you to a covered work,
  for which you have or can give appropriate copyright permission.

    Notwithstanding any other provision of this License, for material you
  add to a covered work, you may (if authorized by the copyright holders of
  that material) supplement the terms of this License with terms:

      a) Disclaiming warranty or limiting liability differently from the
      terms of sections 15 and 16 of this License; or

      b) Requiring preservation of specified reasonable legal notices or
      author attributions in that material or in the Appropriate Legal
      Notices displayed by works containing it; or

      c) Prohibiting misrepresentation of the origin of that material, or
      requiring that modified versions of such material be marked in
      reasonable ways as different from the original version; or

      d) Limiting the use for publicity purposes of names of licensors or
      authors of the material; or

      e) Declining to grant rights under trademark law for use of some
      trade names, trademarks, or service marks; or

      f) Requiring indemnification of licensors and authors of that
      material by anyone who conveys the material (or modified versions of
      it) with contractual assumptions of liability to the recipient, for
      any liability that these contractual assumptions directly impose on
      those licensors and authors.

    All other non-permissive additional terms are considered "further
  restrictions" within the meaning of section 10.  If the Program as you
  received it, or any part of it, contains a notice stating that it is
  governed by this License along with a term that is a further
  restriction, you may remove that term.  If a license document contains
  a further restriction but permits relicensing or conveying under this
  License, you may add to a covered work material governed by the terms
  of that license document, provided that the further restriction does
  not survive such relicensing or conveying.

    If you add terms to a covered work in accord with this section, you
  must place, in the relevant source files, a statement of the
  additional terms that apply to those files, or a notice indicating
  where to find the applicable terms.

    Additional terms, permissive or non-permissive, may be stated in the
  form of a separately written license, or stated as exceptions;
  the above requirements apply either way.

    8. Termination.

    You may not propagate or modify a covered work except as expressly
  provided under this License.  Any attempt otherwise to propagate or
  modify it is void, and will automatically terminate your rights under
  this License (including any patent licenses granted under the third
  paragraph of section 11).

    However, if you cease all violation of this License, then your
  license from a particular copyright holder is reinstated (a)
  provisionally, unless and until the copyright holder explicitly and
  finally terminates your license, and (b) permanently, if the copyright
  holder fails to notify you of the violation by some reasonable means
  prior to 60 days after the cessation.

    Moreover, your license from a particular copyright holder is
  reinstated permanently if the copyright holder notifies you of the
  violation by some reasonable means, this is the first time you have
  received notice of violation of this License (for any work) from that
  copyright holder, and you cure the violation prior to 30 days after
  your receipt of the notice.

    Termination of your rights under this section does not terminate the
  licenses of parties who have received copies or rights from you under
  this License.  If your rights have been terminated and not permanently
  reinstated, you do not qualify to receive new licenses for the same
  material under section 10.

    9. Acceptance Not Required for Having Copies.

    You are not required to accept this License in order to receive or
  run a copy of the Program.  Ancillary propagation of a covered work
  occurring solely as a consequence of using peer-to-peer transmission
  to receive a copy likewise does not require acceptance.  However,
  nothing other than this License grants you permission to propagate or
  modify any covered work.  These actions infringe copyright if you do
  not accept this License.  Therefore, by modifying or propagating a
  covered work, you indicate your acceptance of this License to do so.

    10. Automatic Licensing of Downstream Recipients.

    Each time you convey a covered work, the recipient automatically
  receives a license from the original licensors, to run, modify and
  propagate that work, subject to this License.  You are not responsible
  for enforcing compliance by third parties with this License.

    An "entity transaction" is a transaction transferring control of an
  organization, or substantially all assets of one, or subdividing an
  organization, or merging organizations.  If propagation of a covered
  work results from an entity transaction, each party to that
  transaction who receives a copy of the work also receives whatever
  licenses to the work the party's predecessor in interest had or could
  give under the previous paragraph, plus a right to possession of the
  Corresponding Source of the work from the predecessor in interest, if
  the predecessor has it or can get it with reasonable efforts.

    You may not impose any further restrictions on the exercise of the
  rights granted or affirmed under this License.  For example, you may
  not impose a license fee, royalty, or other charge for exercise of
  rights granted under this License, and you may not initiate litigation
  (including a cross-claim or counterclaim in a lawsuit) alleging that
  any patent claim is infringed by making, using, selling, offering for
  sale, or importing the Program or any portion of it.

    11. Patents.

    A "contributor" is a copyright holder who authorizes use under this
  License of the Program or a work on which the Program is based.  The
  work thus licensed is called the contributor's "contributor version".

    A contributor's "essential patent claims" are all patent claims
  owned or controlled by the contributor, whether already acquired or
  hereafter acquired, that would be infringed by some manner, permitted
  by this License, of making, using, or selling its contributor version,
  but do not include claims that would be infringed only as a
  consequence of further modification of the contributor version.  For
  purposes of this definition, "control" includes the right to grant
  patent sublicenses in a manner consistent with the requirements of
  this License.

    Each contributor grants you a non-exclusive, worldwide, royalty-free
  patent license under the contributor's essential patent claims, to
  make, use, sell, offer for sale, import and otherwise run, modify and
  propagate the contents of its contributor version.

    In the following three paragraphs, a "patent license" is any express
  agreement or commitment, however denominated, not to enforce a patent
  (such as an express permission to practice a patent or covenant not to
  sue for patent infringement).  To "grant" such a patent license to a
  party means to make such an agreement or commitment not to enforce a
  patent against the party.

    If you convey a covered work, knowingly relying on a patent license,
  and the Corresponding Source of the work is not available for anyone
  to copy, free of charge and under the terms of this License, through a
  publicly available network server or other readily accessible means,
  then you must either (1) cause the Corresponding Source to be so
  available, or (2) arrange to deprive yourself of the benefit of the
  patent license for this particular work, or (3) arrange, in a manner
  consistent with the requirements of this License, to extend the patent
  license to downstream recipients.  "Knowingly relying" means you have
  actual knowledge that, but for the patent license, your conveying the
  covered work in a country, or your recipient's use of the covered work
  in a country, would infringe one or more identifiable patents in that
  country that you have reason to believe are valid.

    If, pursuant to or in connection with a single transaction or
  arrangement, you convey, or propagate by procuring conveyance of, a
  covered work, and grant a patent license to some of the parties
  receiving the covered work authorizing them to use, propagate, modify
  or convey a specific copy of the covered work, then the patent license
  you grant is automatically extended to all recipients of the covered
  work and works based on it.

    A patent license is "discriminatory" if it does not include within
  the scope of its coverage, prohibits the exercise of, or is
  conditioned on the non-exercise of one or more of the rights that are
  specifically granted under this License.  You may not convey a covered
  work if you are a party to an arrangement with a third party that is
  in the business of distributing software, under which you make payment
  to the third party based on the extent of your activity of conveying
  the work, and under which the third party grants, to any of the
  parties who would receive the covered work from you, a discriminatory
  patent license (a) in connection with copies of the covered work
  conveyed by you (or copies made from those copies), or (b) primarily
  for and in connection with specific products or compilations that
  contain the covered work, unless you entered into that arrangement,
  or that patent license was granted, prior to 28 March 2007.

    Nothing in this License shall be construed as excluding or limiting
  any implied license or other defenses to infringement that may
  otherwise be available to you under applicable patent law.

    12. No Surrender of Others' Freedom.

    If conditions are imposed on you (whether by court order, agreement or
  otherwise) that contradict the conditions of this License, they do not
  excuse you from the conditions of this License.  If you cannot convey a
  covered work so as to satisfy simultaneously your obligations under this
  License and any other pertinent obligations, then as a consequence you may
  not convey it at all.  For example, if you agree to terms that obligate you
  to collect a royalty for further conveying from those to whom you convey
  the Program, the only way you could satisfy both those terms and this
  License would be to refrain entirely from conveying the Program.

    13. Use with the GNU Affero General Public License.

    Notwithstanding any other provision of this License, you have
  permission to link or combine any covered work with a work licensed
  under version 3 of the GNU Affero General Public License into a single
  combined work, and to convey the resulting work.  The terms of this
  License will continue to apply to the part which is the covered work,
  but the special requirements of the GNU Affero General Public License,
  section 13, concerning interaction through a network will apply to the
  combination as such.

    14. Revised Versions of this License.

    The Free Software Foundation may publish revised and/or new versions of
  the GNU General Public License from time to time.  Such new versions will
  be similar in spirit to the present version, but may differ in detail to
  address new problems or concerns.

    Each version is given a distinguishing version number.  If the
  Program specifies that a certain numbered version of the GNU General
  Public License "or any later version" applies to it, you have the
  option of following the terms and conditions either of that numbered
  version or of any later version published by the Free Software
  Foundation.  If the Program does not specify a version number of the
  GNU General Public License, you may choose any version ever published
  by the Free Software Foundation.

    If the Program specifies that a proxy can decide which future
  versions of the GNU General Public License can be used, that proxy's
  public statement of acceptance of a version permanently authorizes you
  to choose that version for the Program.

    Later license versions may give you additional or different
  permissions.  However, no additional obligations are imposed on any
  author or copyright holder as a result of your choosing to follow a
  later version.

    15. Disclaimer of Warranty.

    THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
  APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
  HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
  IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
  ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

    16. Limitation of Liability.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
  THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
  GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
  USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
  DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
  PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
  EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGES.

    17. Interpretation of Sections 15 and 16.

    If the disclaimer of warranty and limitation of liability provided
  above cannot be given local legal effect according to their terms,
  reviewing courts shall apply local law that most closely approximates
  an absolute waiver of all civil liability in connection with the
  Program, unless a warranty or assumption of liability accompanies a
  copy of the Program in return for a fee.

                       END OF TERMS AND CONDITIONS

              How to Apply These Terms to Your New Programs

    If you develop a new program, and you want it to be of the greatest
  possible use to the public, the best way to achieve this is to make it
  free software which everyone can redistribute and change under these terms.

    To do so, attach the following notices to the program.  It is safest
  to attach them to the start of each source file to most effectively
  state the exclusion of warranty; and each file should have at least
  the "copyright" line and a pointer to where the full notice is found.

      <one line to give the program's name and a brief idea of what it does.>
      Copyright (C) <year>  <name of author>

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.

      You should have received a copy of the GNU General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.

  Also add information on how to contact you by electronic and paper mail.

    If the program does terminal interaction, make it output a short
  notice like this when it starts in an interactive mode:

      <program>  Copyright (C) <year>  <name of author>
      This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
      This is free software, and you are welcome to redistribute it
      under certain conditions; type `show c' for details.

  The hypothetical commands `show w' and `show c' should show the appropriate
  parts of the General Public License.  Of course, your program's commands
  might be different; for a GUI interface, you would use an "about box".

    You should also get your employer (if you work as a programmer) or school,
  if any, to sign a "copyright disclaimer" for the program, if necessary.
  For more information on this, and how to apply and follow the GNU GPL, see
  <https://www.gnu.org/licenses/>.

    The GNU General Public License does not permit incorporating your program
  into proprietary programs.  If your program is a subroutine library, you
  may consider it more useful to permit linking proprietary applications with
  the library.  If this is what you want to do, use the GNU Lesser General
  Public License instead of this License.  But first, please read
  <https://www.gnu.org/philosophy/why-not-lgpl.html>.


/Part 5. 103.📜 docutils-0.20.1/licenses/python-2-1-1.txt

.. code-block:: text

  A. HISTORY OF THE SOFTWARE
  ==========================

  Python was created in the early 1990s by Guido van Rossum at Stichting
  Mathematisch Centrum (CWI) in the Netherlands as a successor of a
  language called ABC.  Guido is Python's principal author, although it
  includes many contributions from others.  The last version released
  from CWI was Python 1.2.  In 1995, Guido continued his work on Python
  at the Corporation for National Research Initiatives (CNRI) in Reston,
  Virginia where he released several versions of the software.  Python
  1.6 was the last of the versions released by CNRI.  In 2000, Guido and
  the Python core development team moved to BeOpen.com to form the
  BeOpen PythonLabs team.  Python 2.0 was the first and only release
  from BeOpen.com.

  Following the release of Python 1.6, and after Guido van Rossum left
  CNRI to work with commercial software developers, it became clear that
  the ability to use Python with software available under the GNU Public
  License (GPL) was very desirable.  CNRI and the Free Software
  Foundation (FSF) interacted to develop enabling wording changes to the
  Python license.  Python 1.6.1 is essentially the same as Python 1.6,
  with a few minor bug fixes, and with a different license that enables
  later versions to be GPL-compatible.  Python 2.1 is a derivative work
  of Python 1.6.1, as well as of Python 2.0.

  After Python 2.0 was released by BeOpen.com, Guido van Rossum and the
  other PythonLabs developers joined Digital Creations.  All
  intellectual property added from this point on, starting with Python
  2.1 and its alpha and beta releases, is owned by the Python Software
  Foundation (PSF), a non-profit modeled after the Apache Software
  Foundation.  See https://www.python.org/psf/ for more information about
  the PSF.

  Thanks to the many outside volunteers who have worked under Guido's
  direction to make these releases possible.


  B. TERMS AND CONDITIONS FOR ACCESSING OR OTHERWISE USING PYTHON
  ===============================================================

  PSF LICENSE AGREEMENT
  ---------------------

  1. This LICENSE AGREEMENT is between the Python Software Foundation
  ("PSF"), and the Individual or Organization ("Licensee") accessing and
  otherwise using Python 2.1.1 software in source or binary form and its
  associated documentation.

  2. Subject to the terms and conditions of this License Agreement, PSF
  hereby grants Licensee a nonexclusive, royalty-free, world-wide
  license to reproduce, analyze, test, perform and/or display publicly,
  prepare derivative works, distribute, and otherwise use Python 2.1.1
  alone or in any derivative version, provided, however, that PSF's
  License Agreement and PSF's notice of copyright, i.e., "Copyright (c)
  2001 Python Software Foundation; All Rights Reserved" are retained in
  Python 2.1.1 alone or in any derivative version prepared by Licensee.

  3. In the event Licensee prepares a derivative work that is based on
  or incorporates Python 2.1.1 or any part thereof, and wants to make
  the derivative work available to others as provided herein, then
  Licensee hereby agrees to include in any such work a brief summary of
  the changes made to Python 2.1.1.

  4. PSF is making Python 2.1.1 available to Licensee on an "AS IS"
  basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
  IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
  DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
  FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.1.1 WILL NOT
  INFRINGE ANY THIRD PARTY RIGHTS.

  5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
  2.1.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
  A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.1.1,
  OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
  breach of its terms and conditions.

  7. Nothing in this License Agreement shall be deemed to create any
  relationship of agency, partnership, or joint venture between PSF and
  Licensee.  This License Agreement does not grant permission to use PSF
  trademarks or trade name in a trademark sense to endorse or promote
  products or services of Licensee, or any third party.

  8. By copying, installing or otherwise using Python 2.1.1, Licensee
  agrees to be bound by the terms and conditions of this License
  Agreement.


  BEOPEN.COM TERMS AND CONDITIONS FOR PYTHON 2.0
  ----------------------------------------------

  BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

  1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an
  office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
  Individual or Organization ("Licensee") accessing and otherwise using
  this software in source or binary form and its associated
  documentation ("the Software").

  2. Subject to the terms and conditions of this BeOpen Python License
  Agreement, BeOpen hereby grants Licensee a non-exclusive,
  royalty-free, world-wide license to reproduce, analyze, test, perform
  and/or display publicly, prepare derivative works, distribute, and
  otherwise use the Software alone or in any derivative version,
  provided, however, that the BeOpen Python License is retained in the
  Software, alone or in any derivative version prepared by Licensee.

  3. BeOpen is making the Software available to Licensee on an "AS IS"
  basis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
  IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND
  DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
  FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT
  INFRINGE ANY THIRD PARTY RIGHTS.

  4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
  SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
  AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY
  DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

  5. This License Agreement will automatically terminate upon a material
  breach of its terms and conditions.

  6. This License Agreement shall be governed by and interpreted in all
  respects by the law of the State of California, excluding conflict of
  law provisions.  Nothing in this License Agreement shall be deemed to
  create any relationship of agency, partnership, or joint venture
  between BeOpen and Licensee.  This License Agreement does not grant
  permission to use BeOpen trademarks or trade names in a trademark
  sense to endorse or promote products or services of Licensee, or any
  third party.  As an exception, the "BeOpen Python" logos available at
  http://www.pythonlabs.com/logos.html may be used according to the
  permissions granted on that web page.

  7. By copying, installing or otherwise using the software, Licensee
  agrees to be bound by the terms and conditions of this License
  Agreement.


  CNRI OPEN SOURCE GPL-COMPATIBLE LICENSE AGREEMENT
  -------------------------------------------------

  1. This LICENSE AGREEMENT is between the Corporation for National
  Research Initiatives, having an office at 1895 Preston White Drive,
  Reston, VA 20191 ("CNRI"), and the Individual or Organization
  ("Licensee") accessing and otherwise using Python 1.6.1 software in
  source or binary form and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, CNRI
  hereby grants Licensee a nonexclusive, royalty-free, world-wide
  license to reproduce, analyze, test, perform and/or display publicly,
  prepare derivative works, distribute, and otherwise use Python 1.6.1
  alone or in any derivative version, provided, however, that CNRI's
  License Agreement and CNRI's notice of copyright, i.e., "Copyright (c)
  1995-2001 Corporation for National Research Initiatives; All Rights
  Reserved" are retained in Python 1.6.1 alone or in any derivative
  version prepared by Licensee.  Alternately, in lieu of CNRI's License
  Agreement, Licensee may substitute the following text (omitting the
  quotes): "Python 1.6.1 is made available subject to the terms and
  conditions in CNRI's License Agreement.  This Agreement together with
  Python 1.6.1 may be located on the Internet using the following
  unique, persistent identifier (known as a handle): 1895.22/1013.  This
  Agreement may also be obtained from a proxy server on the Internet
  using the following URL: http://hdl.handle.net/1895.22/1013".

  3. In the event Licensee prepares a derivative work that is based on
  or incorporates Python 1.6.1 or any part thereof, and wants to make
  the derivative work available to others as provided herein, then
  Licensee hereby agrees to include in any such work a brief summary of
  the changes made to Python 1.6.1.

  4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS"
  basis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
  IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
  DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS
  FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT
  INFRINGE ANY THIRD PARTY RIGHTS.

  5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
  1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS
  A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1,
  OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
  breach of its terms and conditions.

  7. This License Agreement shall be governed by the federal
  intellectual property law of the United States, including without
  limitation the federal copyright law, and, to the extent such
  U.S. federal law does not apply, by the law of the Commonwealth of
  Virginia, excluding Virginia's conflict of law provisions.
  Notwithstanding the foregoing, with regard to derivative works based
  on Python 1.6.1 that incorporate non-separable material that was
  previously distributed under the GNU General Public License (GPL), the
  law of the Commonwealth of Virginia shall govern this License
  Agreement only as to issues arising under or with respect to
  Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in this
  License Agreement shall be deemed to create any relationship of
  agency, partnership, or joint venture between CNRI and Licensee.  This
  License Agreement does not grant permission to use CNRI trademarks or
  trade name in a trademark sense to endorse or promote products or
  services of Licensee, or any third party.

  8. By clicking on the "ACCEPT" button where indicated, or by copying,
  installing or otherwise using Python 1.6.1, Licensee agrees to be
  bound by the terms and conditions of this License Agreement.

          ACCEPT


  CWI PERMISSIONS STATEMENT AND DISCLAIMER
  ----------------------------------------

  Copyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
  The Netherlands.  All rights reserved.

  Permission to use, copy, modify, and distribute this software and its
  documentation for any purpose and without fee is hereby granted,
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in
  supporting documentation, and that the name of Stichting Mathematisch
  Centrum or CWI not be used in advertising or publicity pertaining to
  distribution of the software without specific, written prior
  permission.

  STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
  THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
  FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
  FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
  OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


/Part 5. 104.📜 docutils-0.20.1/BUGS.txt

.. .. include:: /docutils-0.20.1/docs/header0.txt

================
 Docutils_ Bugs
================

:Author: David Goodger; open to all Docutils developers
:Contact: goodger@python.org
:Date: $Date: 2022-11-29 00:55:25 +0100 (Di, 29. Nov 2022) $
:Revision: $Revision: 9280 $
:Copyright: This document has been placed in the public domain.

.. _Docutils: https://docutils.sourceforge.io/


Bugs in Docutils?!?  Yes, we do have a few.  Some are old-timers that
tend to stay in the shadows and don't bother anybody.  Once in a while
new bugs are born.  From time to time some bugs (new and old) crawl
out into the light and must be dealt with.  Icky.

This document describes how to report a bug, and lists known bugs.

.. .. contents:: Table of Contents


How To Report A Bug
===================

If you think you've discovered a bug, please read through these
guidelines before reporting it.

First, make sure it's a new bug:

* Please check the list of `known bugs`_ below and the `SourceForge
  Bug Tracker`_ to see if it has already been reported.

* Are you using the very latest version of Docutils?  The bug may have
  already been fixed.  Please get the latest version of Docutils from
  the repository_ or from the current snapshot_ and check again.  Even
  if your bug has not been fixed, others probably have, and you're
  better off with the most up-to-date code.

  If you don't have time to check the latest snapshot, please report
  the bug anyway.  We'd rather tell you that it's already fixed than
  miss reports of unfixed bugs.

* If Docutils does not behave the way you expect, look in the
  documentation_ (don't forget the FAQ_!) and `mailing list archives`_
  for evidence that it should behave the way you expect.

If you're not sure, please ask on the Docutils-users_ mailing list
first.

---------------------------------------------------------------------

If it's a new bug, the most important thing you can do is to write a
simple description and a recipe that reproduces the bug.  Try to
create a `minimal example`_ that demonstrates the bug.  The easier you
make it to understand and track down the bug, the more likely a fix
will be.

.. _minimal example:

.. sidebar:: minimal example

  A `minimal working example` is a complete example which is as as small and
  simple as possible. It should be complete and working, so that

  * you cannot accidentally omit information important to diagnosing
    the problem and
  * the person responding can just copy-and-paste the code to try it out.

  To construct an example which is as small as possible, the rule
  quite simple: *remove/leave out anything which is not necessary*.

  See also: `What is a minimal working example?`__, `LaTeX FAQ`__

  __ http://www.minimalbeispiel.de/mini-en.html
  __ http://www.tex.ac.uk/cgi-bin/texfaq2html?label=minxampl

Now you're ready to write the bug report.  Please include:

* A clear description of the bug.  Describe how you expected Docutils
  to behave, and contrast that with how it actually behaved.  While
  the bug may seem obvious to you, it may not be so obvious to someone
  else, so it's best to avoid a guessing game.

* A complete description of the environment in which you reproduced
  the bug:

  - Your operating system & version.
  - The version of Python (``python -V``).
  - The version of Docutils (use the "-V" option to most Docutils
    front-end tools).
  - Any private modifications you made to Docutils.
  - Anything else that could possibly be relevant.  Err on the side
    of too much information, rather than too little.

* A literal transcript of the *exact* command you ran, and the *exact*
  output.  Use the "--traceback" option to get a complete picture.

* The exact input and output files.  Create a `minimal example`_
  of the failing behaviour — it is better to attach complete files
  to your bug report than to include just a summary or excerpt.

* If you also want to include speculation as to the cause, and even a
  patch to fix the bug, that would be great!

The best place to send your bug report is to the `SourceForge Bug
Tracker`_.  That way, it won't be misplaced or forgotten.  In fact, an
open bug report on SourceForge is a constant irritant that begs to be
squashed.

Thank you!

(This section was inspired by the `Subversion project's`__ BUGS__
file.)

__ http://subversion.tigris.org/
__ http://svn.collab.net/viewcvs/svn/trunk/BUGS?view=markup

.. _repository: docs/dev/repository.html
.. _snapshot: https://docutils.sourceforge.io/#download
.. _documentation: docs/
.. _FAQ: FAQ.html
.. _mailing list archives: https://docutils.sourceforge.io/#mailing-lists
.. _Docutils-users: docs/user/mailing-lists.html#docutils-users
.. _SourceForge Bug Tracker:
   https://sourceforge.net/p/docutils/bugs/


Known Bugs
==========

Also see the `SourceForge Bug Tracker`_.

* .. _error reporting:

  Calling rst2s5.py with a non-existent theme (``--theme
  does_not_exist``)
  causes exceptions.  Such errors should be handled more gracefully.

* The "stylesheet" setting (a URL, to be used verbatim) should be
  allowed to be combined with "embed_stylesheet".  The stylesheet data
  should be read in using urllib.  There was an assumption that a
  stylesheet to be embedded should exist as a file on the local
  system, and only the "stylesheet_path" setting should be used.

* ``utils.relative_path()`` sometimes returns absolute _`paths on
  Windows` (like ``C:/test/foo.css``) where it could have chosen a
  relative path.

  Furthermore, absolute pathnames are inserted verbatim, like
  ``href="C:/test/foo.css"`` instead of
  ``href="file:///C:/test/foo.css"``.

  .. gmane web interface is down.
     TODO: find this article in the Sourceforge mail archives
     For details, see `this posting by Alan G. Isaac
     <http://article.gmane.org/gmane.text.docutils.user/1569>`_.

* Footnote label "5" should be "4" when processing the following
  input::

      ref [#abc]_ [#]_ [1]_ [#4]_

      .. [#abc] footnote
      .. [#] two
      .. [1] one
      .. [#4] four

  Output::

      <document source="<stdin>">
          <paragraph>
              ref
              <footnote_reference auto="1" ids="id1" refid="abc">
                  2

              <footnote_reference auto="1" ids="id2" refid="id5">
                  3

              <footnote_reference ids="id3" refid="id6">
                  1

              <footnote_reference auto="1" ids="id4" refid="id7">
                  5
          <footnote auto="1" backrefs="id1" ids="abc" names="abc">
              <label>
                  2
              <paragraph>
                  footnote
          <footnote auto="1" backrefs="id2" ids="id5" names="3">
              <label>
                  3
              <paragraph>
                  two
          <footnote backrefs="id3" ids="id6" names="1">
              <label>
                  1
              <paragraph>
                  one
          <footnote auto="1" backrefs="id4" ids="id7" names="4">
              <label>
                  5
              <paragraph>
                  four

* IDs are based on names.  Explicit hyperlink targets have priority
  over implicit targets.  But if an explicit target comes after an
  implicit target with the same name, the ID of the first (implicit)
  target remains based on the implicit name.  Since HTML fragment
  identifiers are based on the IDs, the first target keeps the name. 
  For example::

      .. contents::

      Section
      =======

      .. _contents:

      Subsection
      ----------

      text with a reference to contents_ and section_

      .. _section:

      This paragraph is explicitly targeted with the name "section".

  When processed to HTML, the 2 internal hyperlinks (to "contents" &
  "section") will work fine, but hyperlinks from outside the document
  using ``href="...#contents"`` and ``href="...#section"`` won't work.
  Such external links will connect to the implicit targets (table of
  contents and "Section" title) instead of the explicit targets
  ("Subsection" title and last paragraph).

  Hyperlink targets with duplicate names should be assigned new IDs
  unrelated to the target names (i.e., "id"-prefix serial IDs).

* The "contents" ID of the local table of contents in
  ``test/functional/expected/standalone_rst_pseudoxml.txt`` is lost in
  the HTML output at
  ``test/functional/expected/standalone_rst_html4css1.html``.

* _`Blank first columns` in simple tables with explicit row separators
  silently swallow their input.  They should at least produce system
  error messages.  But, with explicit row separators, the meaning is
  unambiguous and ought to be supported::

      ==============  ==========
      Table with row  separators
      ==============  ==========
                      and blank
      --------------  ----------
                      entries
      --------------  ----------
                      in first
      --------------  ----------
                      columns.
      ==============  ==========

  Added a commented-out test case to
  test/test_parsers/test_rst/test_SimpleTableParser.py.

* _`Footnote references with hyperlink targets` cause a possibly
  invalid node tree and make the HTML writer crash::

      $ rst2pseudoxml.py
      [1]_

      .. _1: URI
      <document source="<stdin>">
          <paragraph>
              <footnote_reference ids="id1" refuri="URI">
                  1
          <target ids="id2" names="1" refuri="URI">

* Anonymous references have "name" attributes.  Should they?  Are they
  used?  See ``test/test_parsers/test_rst/test_inline_markup.py``.

* <reference> elements have a "name" attribute, not "names".  The
  attribute should be "names"; this is an inconsistency.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 5. 105.📜 docutils-0.20.1/COPYING.txt

.. .. include:: /docutils-0.20.1/docs/header0.txt

==================
 Copying Docutils
==================

:Author: David Goodger
:Contact: goodger@python.org
:Date: $Date: 2022-11-29 00:55:25 +0100 (Di, 29. Nov 2022) $
:Web site: https://docutils.sourceforge.io/
:Copyright: This document has been placed in the public domain.

Most of the files included in this project have been placed in the
public domain, and therefore have no license requirements and no
restrictions on copying or usage; see the `Public Domain Dedication`_
below.  There are exceptions_, listed below.
Files in the Sandbox_ are not distributed with Docutils releases and
may have different license terms.


Public Domain Dedication
========================

The persons who have associated their work with this project (the
"Dedicator": David Goodger and the many contributors to the Docutils
project) hereby dedicate the entire copyright, less the exceptions_
listed below, in the work of authorship known as "Docutils" identified
below (the "Work") to the public domain.

The primary repository for the Work is the Internet World Wide Web
site <https://docutils.sourceforge.io/>.  The Work consists of the
files within the "docutils" module of the Docutils project Subversion
repository (http://svn.code.sf.net/p/docutils/code/),
whose Internet web interface is located at
<https://sourceforge.net/p/docutils/code>.  Files dedicated to the
public domain may be identified by the inclusion, near the beginning
of each file, of a declaration of the form::

    Copyright: This document/module/DTD/stylesheet/file/etc. has been
               placed in the public domain.

Dedicator makes this dedication for the benefit of the public at large
and to the detriment of Dedicator's heirs and successors.  Dedicator
intends this dedication to be an overt act of relinquishment in
perpetuity of all present and future rights under copyright law,
whether vested or contingent, in the Work.  Dedicator understands that
such relinquishment of all rights includes the relinquishment of all
rights to enforce (by lawsuit or otherwise) those copyrights in the
Work.

Dedicator recognizes that, once placed in the public domain, the Work
may be freely reproduced, distributed, transmitted, used, modified,
built upon, or otherwise exploited by anyone for any purpose,
commercial or non-commercial, and in any way, including by methods
that have not yet been invented or conceived.

(This dedication is derived from the text of the `Creative Commons
Public Domain Dedication`. [#]_)

.. [#] Creative Commons has `retired this legal tool`__ and does not
   recommend that it be applied to works: This tool is based on United
   States law and may not be applicable outside the US. For dedicating new
   works to the public domain, Creative Commons recommend the replacement
   Public Domain Dedication CC0_ (CC zero, "No Rights Reserved"). So does
   the Free Software Foundation in its license-list_.

   __  http://creativecommons.org/retiredlicenses
   .. _CC0: http://creativecommons.org/about/cc0

Exceptions
==========

The exceptions to the `Public Domain Dedication`_ above are:

* docutils/utils/smartquotes.py

  Copyright © 2011 Günter Milde,
  based on `SmartyPants`_ © 2003 John Gruber
  (released under a "revised" `BSD 3-Clause License`_ included in the file)
  and smartypants.py © 2004, 2007 Chad Miller.
  Released under the terms of the `BSD 2-Clause License`_
  (`local copy <licenses/BSD-2-Clause.txt>`__).

  .. _SmartyPants: http://daringfireball.net/projects/smartypants/

* docutils/utils/math/latex2mathml.py

  Copyright © Jens Jørgen Mortensen, Günter Milde.
  Released under the terms of the `BSD 2-Clause License`_
  (`local copy <licenses/BSD-2-Clause.txt>`__).

* | docutils/utils/math/math2html.py,
  | docutils/writers/html5_polyglot/math.css

  Copyright © 2009,2010 Alex Fernández; 2021 Günter Milde

  These files were part of eLyXer_, released under the `GNU
  General Public License`_ version 3 or later. The author relicensed
  them for Docutils under the terms of the `BSD 2-Clause License`_
  (`local copy <licenses/BSD-2-Clause.txt>`__).

  .. _eLyXer: https://github.com/alexfernandez/elyxer

* | docutils/__main__.py,
  | docutils/parsers/commonmark_wrapper.py,
  | docutils/parsers/recommonmark_wrapper.py,
  | docutils/utils/error_reporting.py,
  | docutils/utils/math/__init__.py,
  | docutils/utils/math/latex2mathml.py,
  | docutils/utils/math/tex2mathml_extern.py,
  | docutils/utils/punctuation_chars.py,
  | docutils/utils/smartquotes.py,
  | docutils/writers/html5_polyglot/__init__.py,
  | docutils/writers/html5_polyglot/\*.css,
  | docutils/writers/latex2e/docutils.sty,
  | docutils/writers/xetex/__init__.py,
  | test/test_parsers/test_recommonmark/\*.py,
  | test/test_parsers/test_rst/test_directives/test__init__.py,
  | test/test_parsers/test_rst/test_directives/test_code_parsing.py,
  | test/test_parsers/test_rst/test_line_length_limit_default.py,
  | test/test_parsers/test_rst/test_line_length_limit.py,
  | test/test_writers/test_latex2e_misc.py,
  | test/transforms/test_smartquotes.py,
  | tools/docutils-cli.py,
  | tools/rst2html5.py

  Copyright © Günter Milde.
  Released under the terms of the `BSD 2-Clause License`_
  (`local copy <licenses/BSD-2-Clause.txt>`__).

* docutils/utils/roman.py

  copyright by Mark Pilgrim, released under the
  `Python 2.1.1 license`_ (`local copy`__).

  __ licenses/python-2-1-1.txt

* tools/editors/emacs/rst.el

  copyright by Free Software Foundation, Inc.,
  released under the `GNU General Public License`_ version 3 or later
  (`local copy`__).

  __ licenses/gpl-3-0.txt

All used licenses are OSI-approved_ and GPL-compatible_.

Plaintext versions of all the linked-to licenses are provided in the
licenses_ directory.

.. _sandbox: https://docutils.sourceforge.io/sandbox/README.html
.. _licenses: licenses/
.. _Python 2.1.1 license: https://docs.python.org/3/license.html
.. _GNU General Public License: https://www.gnu.org/copyleft/gpl.html
.. _BSD 2-Clause License: http://opensource.org/licenses/BSD-2-Clause
.. _BSD 3-Clause License: https://opensource.org/licenses/BSD-3-Clause
.. _OSI-approved: http://opensource.org/licenses/
.. _license-list:
.. _GPL-compatible: https://www.gnu.org/licenses/license-list.html


/Part 5. 106.📜 docutils-0.20.1/FAQ.txt

.. .. include:: /docutils-0.20.1/docs/header0.txt

.. NOTE TO MAINTAINERS: Please add new questions to the end of their
   sections, so section/question numbers remain stable.

===========================================
 Docutils FAQ (Frequently Asked Questions)
===========================================

:Date: $Date: 2022-11-29 00:55:25 +0100 (Di, 29. Nov 2022) $
:Revision: $Revision: 9280 $
:Web site: https://docutils.sourceforge.io/
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents
.. .. sectnum::


This is a work in progress.  If you are reading a local copy, the
`master copy`_ might be newer.  This document uses relative links;
if they don't work, please use the master copy.

Please feel free to ask questions and/or provide answers; send email
to the `Docutils-users`_ mailing list.  Project members should feel
free to edit the source text file directly.

.. _master copy: https://docutils.sourceforge.io/FAQ.html
.. _let us know:
.. _Docutils-users: docs/user/mailing-lists.html#docutils-users



Docutils
========

What is Docutils?
-----------------

Docutils_ is a system for processing plaintext documentation into
useful formats, such as HTML, XML, and LaTeX.  It supports multiple
types of input, such as standalone files, `PEPs (Python Enhancement
Proposals)`_, and string input. Client code may add other input types,
e.g. Sphinx_ comes with an extension to extract inline documentation
from Python modules and packages.

The Docutils distribution consists of:

* a library (the "docutils" package), which `can be used by client
  code`_;
* several `front-end tools`_ (such as ``rst2html.py``, which converts
  reStructuredText input into HTML output);
* a `test suite`_; and
* documentation_.

For an overview of the Docutils project implementation,
see :PEP:`258`, "Docutils Design Specification".

Docutils is implemented in Python_.

.. _Docutils: https://docutils.sourceforge.io/
.. _PEPs (Python Enhancement Proposals):
   https://peps.python.org/pep-0012
.. _can be used by client code: docs/api/publisher.html
.. _front-end tools: docs/user/tools.html
.. _test suite: docs/dev/testing.html
.. _documentation: docs/index.html
.. _Python: https://www.python.org/


Why is it called "Docutils"?
----------------------------

Docutils is short for "Python Documentation Utilities".  The name
"Docutils" was inspired by "Distutils", the Python Distribution
Utilities architected by Greg Ward, a component of Python's standard
library.

The earliest known use of the term "docutils" in a Python context was
a `fleeting reference`__ in a message by Fred Drake on 1999-12-02 in
the Python Doc-SIG mailing list.  It was suggested `as a project
name`__ on 2000-11-27 on Doc-SIG, again by Fred Drake, in response to
a question from Tony "Tibs" Ibbs: "What do we want to *call* this
thing?".  This was shortly after David Goodger first `announced
reStructuredText`__ on Doc-SIG.

Tibs used the name "Docutils" for `his effort`__ "to document what the
Python docutils package should support, with a particular emphasis on
documentation strings".  Tibs joined the current project (and its
predecessors) and graciously donated the name.

For more history of reStructuredText and the Docutils project, see `An
Introduction to reStructuredText`_.

Please note that the name is "Docutils", not "DocUtils" or "Doc-Utils"
or any other variation.  It is pronounced as in "DOCumentation
UTILitieS", with emphasis on the first syllable.

.. _An Introduction to reStructuredText: docs/ref/rst/introduction.html
__ https://mail.python.org/pipermail/doc-sig/1999-December/000878.html
__ https://mail.python.org/pipermail/doc-sig/2000-November/001252.html
__ https://mail.python.org/pipermail/doc-sig/2000-November/001239.html
__ http://homepage.ntlworld.com/tibsnjoan/docutils/STpy.html


Is there a GUI authoring environment for Docutils?
--------------------------------------------------

See the links to editors_ supporting reStructuredText.

.. _editors: docs/user/links.html#editors


What is the status of the Docutils project?
-------------------------------------------

Docutils is mainly stable, with documented APIs and architecture
subject to change after announcement and a transition period.

We fix bugs as they are reported.  This means the code from the
repository_ (or the snapshots_) is the most stable as well as the most
featureful most of the time.


What is the Docutils project release policy?
--------------------------------------------

Besides the regular releases_, we provide automatically-generated
snapshots_ which always contain the latest code from the repository_.
As the project matures, we may formalize on a
stable/development-branch scheme, but we're not using anything like
that yet.

.. _releases: https://pypi.org/project/docutils/#history
.. _snapshots: https://sourceforge.net/p/docutils/code/HEAD/tree/trunk/docutils/
.. _repository: docs/dev/repository.html


How can I get a new feature into Docutils?
------------------------------------------

* Present your idea at the docutils-develop_ mailing list or file a
  ticket at Docutils' `feature request tracker`_.
  Convince the Docutils developers that this is a valuable addition.

* Contribute_.

* Be patient, and be persistent.  None of us are paid to do this,
  it's all in our spare time, which is precious and rare.

.. _docutils-develop: docs/user/mailing-lists.html#docutils-develop
.. _extensions and related projects:
   docs/dev/policies.html#extensions-and-related-projects
.. _feature request tracker:
    https://sourceforge.net/p/docutils/feature-requests/


reStructuredText
================

What is reStructuredText?
-------------------------

reStructuredText_ is an easy-to-read, what-you-see-is-what-you-get
plaintext markup syntax and parser system.  The reStructuredText
parser is a component of Docutils_.  reStructuredText is a revision
and reinterpretation of the StructuredText_ and Setext_ lightweight
markup systems.

If you are reading this on the web, you can see for yourself.  `The
source for this FAQ <FAQ.txt>`_ is written in reStructuredText; open
it in another window and compare them side by side.

`A ReStructuredText Primer`_ and the `Quick reStructuredText`_ user
reference are a good place to start.  The `reStructuredText Markup
Specification`_ is a detailed technical specification.

.. _A ReStructuredText Primer: docs/user/rst/quickstart.html
.. _Quick reStructuredText: docs/user/rst/quickref.html
.. _reStructuredText Markup Specification:
   docs/ref/rst/restructuredtext.html
.. _reStructuredText: https://docutils.sourceforge.io/rst.html
.. _StructuredText:
   http://dev.zope.org/Members/jim/StructuredTextWiki/FrontPage/
.. _Setext: https://docutils.sourceforge.io/mirror/setext.html


Why is it called "reStructuredText"?
------------------------------------

The name came from a combination of "StructuredText", one of
reStructuredText's predecessors, with "re": "revised", "reworked", and
"reinterpreted", and as in the ``re.py`` regular expression module.
For a detailed history of reStructuredText and the Docutils project,
see `An Introduction to reStructuredText`_.

"reStructuredText" is **ONE** word, *not two!*


What's the standard abbreviation for "reStructuredText"?
--------------------------------------------------------

"RST" and "ReST" (or "reST") are both acceptable.  Care should be
taken with capitalization, to avoid confusion with "REST__", an
acronym for "Representational State Transfer".

The abbreviations "reSTX" and "rSTX"/"rstx" should **not** be used;
they overemphasize reStructuredText's predecessor, Zope's
StructuredText.

__ https://en.wikipedia.org/wiki/Representational_State_Transfer


What's the standard filename extension for a reStructuredText file?
-------------------------------------------------------------------

It's ".txt".  ReStructuredText source files are meant to be readable as
plaintext, and most operating systems already associate ".txt" with text
files.

That said, we see an increasing number of projects settling on
the extension ".rst".

Also see `What's the official MIME type for reStructuredText data?`_


Are there any reStructuredText editor extensions?
-------------------------------------------------

See the list of editors_ supporting reStructuredText.


How can I indicate the document title?  Subtitle?
-------------------------------------------------

A uniquely-adorned section title at the beginning of a document is
treated specially, as the document title.  Similarly, a
uniquely-adorned section title immediately after the document title
becomes the document subtitle.  For example::

    This is the Document Title
    ==========================

    This is the Document Subtitle
    -----------------------------

    Here's an ordinary paragraph.

Counterexample::

    Here's an ordinary paragraph.

    This is *not* a Document Title
    ==============================

    The "ordinary paragraph" above the section title
    prevents it from becoming the document title.

Another counterexample::

    This is not the Document Title,  because...
    ===========================================

    Here's an ordinary paragraph.

    ... the title adornment is not unique
    =====================================

    Another ordinary paragraph.


How can I represent esoteric characters (e.g. character entities) in a document?
--------------------------------------------------------------------------------

For example, say you want an em-dash (XML character entity &mdash;,
Unicode character U+2014) in your document: use a real em-dash.
Insert literal characters (e.g. type a *real* em-dash) into your
input file, using whatever encoding suits your application, and tell
Docutils the input encoding.  Docutils uses Unicode internally, so the
em-dash character is U+2014 internally.

Emacs users should refer to the `Emacs Support for reStructuredText`__
document.  Tips for other editors are welcome.

__ tools/editors/emacs/README.html

ReStructuredText has no character entity subsystem; it doesn't know
anything about XML character entities.
To Docutils, "&mdash;" in input text is
7 discrete characters; no interpretation happens.  When writing HTML,
the "&" is converted to "&amp;", so in the raw output you'd see
"&amp;mdash;".  There's no difference in interpretation for text
inside or outside inline literals or literal blocks -- there's no
character entity interpretation in either case.

If you can't use a Unicode-compatible encoding and must rely on 7-bit
ASCII, there is a workaround:
`Standard Substitution Definition Sets`_ provide equivalents of
XML & HTML character entity sets as substitution definitions. [#]_
For example, the Japanese yen currency symbol can be used as follows::

    .. include:: <xhtml1-lat1.txt>

    |yen| 600 for a complete meal?  That's cheap!

.. [#] Thanks to David Priest for the original idea.

You can create custom `substitution definitions`_ in your document
using the "unicode_" directive, e.g.::

    .. |--| unicode:: U+2013   .. en dash
    .. |---| unicode:: U+2014  .. em dash, trimming surrounding whitespace
       :trim:

.. |--| unicode:: U+2013   .. en dash
.. |---| unicode:: U+2014  .. em dash, trimming surrounding whitespace
   :trim:

Now you can write dashes using pure ASCII: "``foo |--| bar; foo |---|
bar``", rendered as "foo |--| bar; foo |---| bar".
The ``:trim:`` option for
the em dash is necessary because you cannot write "``foo|---|bar``";
thus you need to add spaces ("``foo |---| bar``") and advise the
reStructuredText parser to trim the spaces.

.. _Standard Substitution Definition Sets: docs/ref/rst/definitions.html
.. _substitution definitions: docs/ref/rst/restructuredtext.html
                              #substitution-definitions
.. _unicode: docs/ref/rst/directives.html#unicode-character-codes


How can I generate backticks using a Scandinavian keyboard?
-----------------------------------------------------------

The use of backticks in reStructuredText is a bit awkward with
Scandinavian keyboards, where the backtick is a "dead" key.  To get
one ` character one must press SHIFT-` + SPACE.

Unfortunately, with all the variations out there, there's no way to
please everyone.  For Scandinavian programmers and technical writers,
this is not limited to reStructuredText but affects many languages and
environments.

Possible solutions include

* If you have to input a lot of backticks, simply type one in the
  normal/awkward way, select it, copy and then paste the rest (CTRL-V
  is a lot faster than SHIFT-` + SPACE).

* Use keyboard macros.

* Remap the keyboard.  The Scandinavian keyboard layout is awkward for
  other programming/technical characters too; for example, []{}
  etc. are a bit awkward compared to US keyboards.

  According to Axel Kollmorgen,

      Under Windows, you can use the `Microsoft Keyboard Layout Creator
      <http://www.microsoft.com/globaldev/tools/msklc.mspx>`__ to easily
      map the backtick key to a real backtick (no dead key). took me
      five minutes to load my default (german) keyboard layout, untick
      "Dead Key?" from the backtick key properties ("in all shift
      states"), "build dll and setup package", install the generated
      .msi, and add my custom keyboard layout via Control Panel >
      Regional and Language Options > Languages > Details > Add
      Keyboard layout (and setting it as default "when you start your
      computer").

* Use a virtual/screen keyboard or character palette, such as:

  - `Web-based keyboards <http://keyboard.lab.co.il/>`__ (IE only
    unfortunately).
  - Windows: `Click-N-Type <http://www.lakefolks.org/cnt/>`__.
  - Mac OS X: the Character Palette can store a set of favorite
    characters for easy input.  Open System Preferences,
    International, Input Menu tab, enable "Show input menu in menu
    bar", and be sure that Character Palette is enabled in the list.

If anyone knows of other/better solutions, please `let us know`_.


Are there any tools for HTML/XML-to-reStructuredText?  (Round-tripping)
-----------------------------------------------------------------------

People have tossed the idea around, and some implementations of
reStructuredText-generating tools can be found in the `Docutils Link
List`_.

There's no reason why reStructuredText should not be round-trippable
to/from XML; any technicalities which prevent round-tripping would be
considered bugs.  Whitespace would not be identical, but paragraphs
shouldn't suffer.  The tricky parts would be the smaller details, like
links and IDs and other bookkeeping.

For HTML, true round-tripping may not be possible.  Even adding lots
of extra "class" attributes may not be enough.  A "simple HTML" to RST
filter is possible -- for some definition of "simple HTML" -- but HTML
is used as dumb formatting so much that such a filter may not be
particularly useful.  An 80/20 approach should work though: build a
tool that does 80% of the work automatically, leaving the other 20%
for manual tweaks.

.. _Docutils Link List: docs/user/links.html


Are there any Wikis that use reStructuredText syntax?
-----------------------------------------------------

There are several, with various degrees of completeness.  With no
implied endorsement or recommendation, and in no particular order:

* `Ian Bicking's experimental code
  <https://docutils.sourceforge.io/sandbox/ianb/wiki/Wiki.py>`__

* `MoinMoin <http://moinmoin.wikiwikiweb.de/>`__ has some support;
  `here's a sample <http://moinmoin.wikiwikiweb.de/RestSample>`__

* Zope-based `Zwiki <http://zwiki.org/>`__

* Zope3-based Zwiki (in the Zope 3 source tree as
  ``zope.products.zwiki``)

* `StikiWiki <http://mithrandr.moria.org/code/stikiwiki/>`__

* `Trac <http://trac.edgewall.com//>`__ `supports using
  reStructuredText
  <http://trac.edgewall.com//wiki/WikiRestructuredText>`__ as
  an alternative to wiki markup. This includes support for `TracLinks
  <http://trac.edgewall.com//wiki/TracLinks>`__ from within
  RST text via a custom RST reference-directive or, even easier, an
  interpreted text role 'trac'

Please `let us know`_ of any other reStructuredText Wikis.

.. dead link
.. The example application for the `Web Framework Shootout
.. <http://colorstudy.com/docs/shootout.html>`__ article is a Wiki using
.. reStructuredText.


Are there any Weblog (Blog) projects that use reStructuredText syntax?
----------------------------------------------------------------------

With no implied endorsement or recommendation, and in no particular
order:

* `Firedrop <http://www.voidspace.org.uk/python/firedrop2/>`__
* `PyBloxsom <http://pyblosxom.github.io/>`__
* `Lino WebMan <http://lino.sourceforge.net/webman.html>`__
* `Pelican <http://blog.getpelican.com/>`__
  (also  listed `on PyPi <http://pypi.python.org/pypi/pelican>`__)

Please `let us know`_ of any other reStructuredText Blogs.


.. _Can lists be indented without generating block quotes?:

How should I mark up lists?
---------------------------

Bullet_ & enumerated_ list markup is very intuitive but there are 2
points that must be noted:

.. _bullet: docs/ref/rst/restructuredtext.html#bullet-lists
.. _enumerated: docs/ref/rst/restructuredtext.html#enumerated-lists

1. Lists should **not** be indented.  This is correct::

       paragraph

       * list item 1

         * nested item 1.1
         * nested item 1.2

       * list item 2

   while this is probably incorrect::

       paragraph

         * list item 1

             * nested item 1.1
             * nested item 1.2

         * list item 2

   The extra indentation (of the list containing items 1.1 and 1.2) is
   recognized as a block quote.  This is usually not what you mean and
   it causes the list in the output to be indented too much.

2. There **must** be blank lines around list items, except between
   items of the same level, where blank lines are optional.  The
   example above shows this.

Note that formatting of the *output* is independent of the input, and
is decided by the writer and the stylesheet.  For instance, lists
*are* indented in HTML output by default.  See `How are lists
formatted in HTML?`_ for details.


Could lists be indented without generating block quotes?
--------------------------------------------------------

Some people like to write lists with indentation but don't intend a
blockquote context.  There has been a lot of discussion about allowing
this in reStructuredText, but there are some issues that would need to
be resolved before it could be implemented.  There is a summary of the
issues and pointers to the discussions in `the to-do list`__.

__ docs/dev/todo.html#indented-lists


Could the requirement for blank lines around lists be relaxed?
--------------------------------------------------------------

Short answer: no.

In reStructuredText, it would be impossible to unambiguously mark up
and parse lists without blank lines before and after.  Deeply nested
lists may look ugly with so many blank lines, but it's a price we pay
for unambiguous markup.  Some other plaintext markup systems do not
require blank lines in nested lists, but they have to compromise
somehow, either accepting ambiguity or requiring extra complexity.
For example, `Epytext <http://epydoc.sourceforge.net/epytext.html#list>`__ does
not require blank lines around lists, but it does require that lists
be indented and that ambiguous cases be escaped.


How can I include mathematical equations in documents?
------------------------------------------------------

Use `LaTeX math syntax`_ in a `math directive`_ or `math role`_.

.. _LaTeX math syntax: docs/ref/rst/mathematics.html
.. _math directive: docs/ref/rst/directives.html#math
.. _math role: docs/ref/rst/roles.html#math


Is nested inline markup possible?
---------------------------------

Not currently, no.  It's on the `to-do list`__ (`details here`__), and
hopefully will be part of the reStructuredText parser soon.  At that
time, markup like this will become possible::

    Here is some *emphasized text containing a `hyperlink`_ and
    ``inline literals``*.

__ docs/dev/todo.html#nested-inline-markup
__ docs/dev/rst/alternatives.html#nested-inline-markup

There are workarounds, but they are either convoluted or ugly or both.
They are not recommended.

* Inline markup can be combined with hyperlinks using `substitution
  definitions`__ and references__ with the `"replace" directive`__.
  For example::

      Here is an |emphasized hyperlink|_.

      .. |emphasized hyperlink| replace:: *emphasized hyperlink*
      .. _emphasized hyperlink: https://example.org

  It is not possible for just a portion of the replacement text to be
  a hyperlink; it's the entire replacement text or nothing.

  __ docs/ref/rst/restructuredtext.html#substitution-definitions
  __ docs/ref/rst/restructuredtext.html#substitution-references
  __ docs/ref/rst/directives.html#replace

* The `"raw" directive`__ can be used to insert raw HTML into HTML
  output::

      Here is some |stuff|.

      .. |stuff| raw:: html

         <em>emphasized text containing a
         <a href="https://example.org">hyperlink</a> and
         <tt>inline literals</tt></em>

  Raw LaTeX is supported for LaTeX output, etc.

  __ docs/ref/rst/directives.html#raw


How to indicate a line break or a significant newline?
------------------------------------------------------

`Line blocks`__ are designed for address blocks, verse, and other
cases where line breaks are significant and must be preserved.  Unlike
literal blocks, the typeface is not changed, and inline markup is
recognized.  For example::

    | A one, two, a one two three four
    |
    | Half a bee, philosophically,
    |     must, *ipso facto*, half not be.
    | But half the bee has got to be,
    |     *vis a vis* its entity.  D'you see?
    |
    | But can a bee be said to be
    |     or not to be an entire bee,
    |         when half the bee is not a bee,
    |             due to some ancient injury?
    |
    | Singing...

__ docs/ref/rst/restructuredtext.html#line-blocks

Here's a workaround for manually inserting explicit line breaks in
HTML output::

    .. |br| raw:: html

       <br />

    I want to break this line here: |br| this is after the break.

    If the extra whitespace bothers you, |br|\ backslash-escape it.


A URL containing asterisks doesn't work.  What to do?
-----------------------------------------------------

Asterisks are valid URL characters (see :RFC:`2396`), sometimes used
in URLs.  For example::

    http://cvs.example.org/viewcvs.py/*checkout*/module/file

Unfortunately, the parser thinks the asterisks are indicating
emphasis.  The slashes serve as delineating punctuation, allowing the
asterisks to be recognized as markup.  The example above is separated
by the parser into a truncated URL, an emphasized word, and some
regular text::

    http://cvs.example.org/viewcvs.py/
    *checkout*
    /module/file

To turn off markup recognition, use a backslash to escape at least the
first asterisk, like this::

    http://cvs.example.org/viewcvs.py/\*checkout*/module/file

Escaping the second asterisk doesn't hurt, but it isn't necessary.


How can I make a literal block with *some* formatting?
------------------------------------------------------

Use the `parsed-literal`_ directive.

.. _parsed-literal: docs/ref/rst/directives.html#parsed-literal

Scenario: a document contains some source code, which calls for a
literal block to preserve linebreaks and whitespace.  But part of the
source code should be formatted, for example as emphasis or as a
hyperlink.  This calls for a *parsed* literal block::

    .. parsed-literal::

       print "Hello world!"  # *tricky* code [1]_

The emphasis (``*tricky*``) and footnote reference (``[1]_``) will be
parsed.


Can reStructuredText be used for web or generic templating?
-----------------------------------------------------------

Docutils and reStructuredText can be used with or as a component of a
templating system, but they do not themselves include templating
functionality.  Templating should simply be left to dedicated
templating systems.  Users can choose a templating system to apply to
their reStructuredText documents as best serves their interests.

There are many good templating systems for Python (ht2html_, YAPTU_,
Quixote_'s PTL, Cheetah_, etc.; see this non-exhaustive list of `some
other templating systems`_), and many more for other languages, each
with different approaches.  We invite you to try several and find one
you like.  If you adapt it to use Docutils/reStructuredText, please
consider contributing the code to Docutils or `let us know`_ and we'll
keep a list here.

One reST-specific web templating system is `rest2web
<http://www.voidspace.org.uk/python/rest2web>`_, a tool for
automatically building websites, or parts of websites.

.. _ht2html: http://ht2html.sourceforge.net/
.. _YAPTU:
   http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52305
.. _Quixote: http://www.mems-exchange.org/software/quixote/
.. _Cheetah: http://www.cheetahtemplate.org/
.. _some other templating systems:
   http://webware.sourceforge.net/Papers/Templates/


How can I mark up a FAQ or other list of questions & answers?
-------------------------------------------------------------

There is no specific syntax for FAQs and Q&A lists.  Here are two
options:

1. For a FAQ (Frequently Asked Questions, usually with answers), a
   convenient way to mark up the questions is as section titles, with
   the answer(s) as section content.  This document is marked up in
   this way.

   The advantages of using section titles for questions are: sections
   can be numbered automatically, and a table of contents can be
   generated automatically.  One limitation of this format is that
   questions must fit on one line (section titles may not wrap, in the
   source text).  For very long questions, the title may be a summary
   of the question, with the full question in the section body.

2. Field lists work well as Q&A lists::

       :Q: What kind of questions can we
           put here?

       :A: Any kind we like!

   In order to separate questions, lists can be used:

       1. :Q: What kind of question can we
              put here?
          :A: Any kind we like!

       2. :Q: How many answers can a question have?
          :A: It can have one,
          :A: or more.
          :A3: Answers can be numbered like this.
          :A: 1. Or like this.
              2. We're flexible!

   If you don't want to number or otherwise mark questions, you can
   use an empty comment between individual field lists to separate
   them::

       :Q: First question?
       :A: Answer.

       ..

       :Q: Second question?
       :A: Answer.


.. _bidi:

Can I produce documents in right-to-left languages?
---------------------------------------------------

Languages written from right to left, such as Arabic and Hebrew, must
be reordered according to the `Unicode Bidi Algorithm`_.  This
requires support from the editor and special markup in the output
format.

The source format of reStructuredText is relatively bidi-friendly:
most constructs are denoted by punctuation without intrusion of
English and when you must write in English, it's usually on a separate
line.  So any editor that auto-detects direction per-line (like gedit
or geresh_) will suffice.

Moreover, it's possible to translate_ all reStructuredText keywords.
Docutils 0.17 includes translations for Arab, Hebrew, and
Persian/Farsi.  This should allow reasonable use of editors limited to
a single base direction for the whole document (like Notepad, Vim and
text boxes in Firefox).

.. _Unicode Bidi Algorithm: https://www.unicode.org/reports/tr9/
.. _geresh: http://www.typo.co.il/~mooffie/geresh/
.. _translate: docs/howto/i18n.html

The second problem is bidi markup of the output.  There is an almost
transparent implicit solution for HTML:

* Grab http://cben-hacks.sourceforge.net/bidi/hibidi.py and
  http://cben-hacks.sourceforge.net/bidi/rst2html_hibidi.py.
  Put them both in the same directory and make them executable.

* Use ``rst2html_hibidi.py`` instead of ``rst2html.py``.

* It infers dir attributes in the HTML from the text.  It does it
  hierachically, giving much better results than usual.  You can still
  use LRM/RLM and LRE/RLE/PDF control codes to help it.

  * If you want the gory details: See the full theory_, and note the
    incomplete practice_ (this is still a partial implementation - but
    sufficient for most needs).

    .. _theory: http://cben-hacks.sourceforge.net/bidi/hibidi.html
    .. _practice: http://cben-hacks.sourceforge.net/bidi/hibidi.html#practice

There is also an explicit way to set directions through CSS and
classes in the HTML:

* Copy ``default.css`` to a new file and add relevant parts of the
  following::

      /* Use these two if the main document direction is RTL */
      body { direction: rtl; }
      div.sidebar { float: left !important; }

      /* The next 3 rules are very useful in documents containing pieces
      of code in english */
      /* Use this if you all your literal blocks (::) are LTR */
      pre {direction: ltr; unicode-bidi: embed; }
      /* Use this if you all your inline literals (``) are LTR */
      tt {direction: ltr; unicode-bidi: embed; }
      /* Use this if you all your interpreted text (`) is LTR */
      cite {direction: ltr; unicode-bidi: embed; }

      /* Allow manual direction override by class directive and roles */
      .rtl { direction: rtl; }
      .ltr { direction: ltr; }

* Select this new stylesheet with ``--stylesheet=<file>`` or the
  stylesheet_ setting.

* Now if you need to override the direction of some element (from a
  paragraph to a whole section), write::

      .. class:: rtl

  or::

      .. class:: ltr

  before it (see the class_ directive for details).

* To change the direction of some inline text fragment, you can use
  RLE/LRE/PDF control characters, or write ``:rtl:`RTL text``` /
  ``:ltr:`RTL text```.  To use the latter syntax, you must write this
  once at the beginning of your document::

      .. role:: ltr
      .. role:: rtl

.. _stylesheet: docs/user/config.html#stylesheet
.. _class: docs/ref/rst/directives.txt#class

LaTeX is quite hard to implement (it doesn't support the bidi
algorithm, so all direction changes - even numbers in RTL text - must
be explicitly marked).  Other formats are more-or-less easy.

If you have any questions/problems/bugs related to bidi with docutils,
ask `Beni Cherniavsky`__ directly or the `Docutils-users`_ mailing
list.

__ mailto:cben@users.sf.net


What's the official MIME type for reStructuredText data?
--------------------------------------------------------

While there is no registered MIME type for reStructuredText, the
"official unofficial" standard MIME type is "text/x-rst". [#]_  This was
invented for the build system for PEPs (Python Enhancement Proposals),
and it's used by the python.org web site build system.

Also see `What's the standard filename extension for a
reStructuredText file?`_

.. [#] The "x-" prefix means it's an unregistered MIME type.


How can I mark up a TODO list?
------------------------------

You may use a field list with class argument and some CSS styling.
For an example see `Docutils TODO lists`_ and its source todo-lists.txt_.

.. _Docutils TODO lists: docs/user/todo-lists.html
.. _todo-lists.txt: docs/user/todo-lists.txt


How can I specify an image grid?
--------------------------------

In order to arrange images (or other content) in a grid,
a borderless `list table`_ can be used. For example::

    .. list-table::
       :class: borderless
     
       * - .. image:: rst/images/title-scaling.svg
         - .. image:: rst/images/biohazard.svg
       * - .. image:: rst/images/biohazard.svg
         - .. image:: rst/images/biohazard.svg
    
Use figures, if you want also captions::
    
    .. list-table:: 
      :class: borderless
    
      * - .. figure:: rst/images/title-scaling.svg
    
            Figure 1/1
    
        - .. figure:: rst/images/biohazard.svg
    
            Figure 1/2

.. _list table: docs/ref/rst/directives.html#list-table


HTML Writer
===========

What is the status of the HTML Writer?
--------------------------------------

The default HTML Writer module, `html4css1`_, is
a proof-of-concept reference implementation.  While it is a complete
implementation, some aspects of the HTML it produces may be outdated or
incompatible with older browsers or specialized applications (such as
web templating).

The `html5 writer`_ generates semantic HTML output compatible with HTML5.
For the full selection see `Docutils HTML writers`_

.. _html4css1: docs/user/html.html#html4css1
.. _HTML5 writer: docs/user/html.html#html5
.. _Docutils HTML writers: docs/user/html.html


What browsers are supported?
----------------------------

No specific browser is targeted; all modern graphical browsers should
work.  Some older browsers, text-only browsers, and browsers without
full CSS support are known to produce inferior results.  Firefox,
Safari, Opera, Chrome, Edge, and MS Internet Explorer (version 5.0 and up)
are known to give good results.  Reports of experiences with other
browsers are welcome.


Unexpected results from tools/rst2html.py: H1, H1 instead of H1, H2.  Why?
--------------------------------------------------------------------------

This only regards output from the `html4css1`_ writer.
The `html5 writer`_ uses H1, H2, ...

.. class:: details

details
    Here's the question in full:

        I have this text::

            Heading 1
            =========

            All my life, I wanted to be H1.

            Heading 1.1
            -----------

            But along came H1, and so shouldn't I be H2?
            No!  I'm H1!

            Heading 1.1.1
            *************

            Yeah, imagine me, I'm stuck at H3!  No?!?

        When I run it through tools/rst2html.py, I get unexpected results
        (below).  I was expecting H1, H2, then H3; instead, I get H1, H1,
        H2::

            ...
            <html lang="en">
            <head>
            ...
            <title>Heading 1</title>
            </head>
            <body>
            <div class="document" id="heading-1">
            <h1 class="title">Heading 1</h1>                <-- first H1
            <p>All my life, I wanted to be H1.</p>
            <div class="section" id="heading-1-1">
            <h1><a name="heading-1-1">Heading 1.1</a></h1>        <-- H1
            <p>But along came H1, and so now I must be H2.</p>
            <div class="section" id="heading-1-1-1">
            <h2><a name="heading-1-1-1">Heading 1.1.1</a></h2>
            <p>Yeah, imagine me, I'm stuck at H3!</p>
            ...

        What gives?

    Check the "class" attribute on the H1 tags, and you will see a
    difference.  The first H1 is actually ``<h1 class="title">``; this is
    the document title, and the default stylesheet renders it centered.
    There can also be an ``<h2 class="subtitle">`` for the document
    subtitle.

    If there's only one highest-level section title at the beginning of a
    document, it is treated specially, as the document title.  (Similarly, a
    lone second-highest-level section title may become the document
    subtitle.)  See `How can I indicate the document title?  Subtitle?`_ for
    details.  Rather than use a plain H1 for the document title, we use ``<h1
    class="title">`` so that we can use H1 again within the document.  Why
    do we do this?  HTML only has H1-H6, so by making H1 do double duty, we
    effectively reserve these tags to provide 6 levels of heading beyond the
    single document title.

    With "html4css1", HTML is being used for dumb formatting for nothing
    but final display. A stylesheet *is required*, and one is provided;
    see `Docutils HTML writers`_.  Of course, you're
    welcome to roll your own.  The default stylesheet provides rules to
    format ``<h1 class="title">`` and ``<h2 class="subtitle">``
    differently from ordinary ``<h1>`` and ``<h2>``::

        h1.title {
          text-align: center }

        h2.subtitle {
          text-align: center }

    If you don't want the top section heading to be interpreted as a
    title at all, disable the `doctitle_xform`_ setting
    (``--no-doc-title`` option).  This will interpret your document
    differently from the standard settings, which might not be a good
    idea.  If you don't like the reuse of the H1 in the HTML output, you
    can tweak the `initial_header_level`_ setting
    (``--initial-header-level`` option) -- but unless you match its value
    to your specific document, you might end up with bad HTML (e.g. H3
    without H2).

    .. _doctitle_xform: docs/user/config.html#doctitle-xform
    .. _initial_header_level: docs/user/config.html#initial-header-level

    (Thanks to Mark McEahern for the question and much of the answer.)

    .. note:: For the `html5 writer`_, `initial_header_level`_ defaults to
       ``2`` because this is what the `HTML5 standard`__ expects as
       start value for headings nested in <section> elements.

       .. Sectioning content elements are always considered subsections of
          their nearest ancestor *sectioning root* [#]_ or their nearest
          ancestor element of *sectioning content*  [#]_, whichever is nearest,
          [...]

          .. [#] <blockquote>, <body>, <details>, <dialog>, <fieldset>,
                 <figure>, <td>
          .. [#] <article>, <aside>, <nav>, <section>

          I.e., a top-level <section> is a subsection of <body>.

       __ https://www.w3.org/TR/html53/sections.html#headings-and-sections



How are lists formatted in HTML?
--------------------------------

If list formatting looks strange, first check that you understand
`list markup`__.

__ `How should I mark up lists?`_

* By default, HTML browsers indent lists relative to their context.
  This follows a long tradition in browsers (but isn't so established
  in print).  If you don't like it, you should change the stylesheet.

  This is different from how lists look in reStructuredText source.
  Extra indentation in the source indicates a blockquote, resulting in
  too much indentation in the browser.

* A list item can contain multiple paragraphs etc.  In complex cases
  list items are separated by vertical space.  By default this spacing
  is omitted in "simple" lists.  A list is simple if every item
  contains a simple paragraph and/or a "simple" nested list.  For
  example:

      * text

        * simple

          * simple
          * simple

        * simple

        text after a nested list

      * multiple

        paragraphs

  In this example the nested lists are simple (and should appear
  compacted) but the outer list is not.

  If you want all lists to have equal spacing, disable the
  `compact_lists`_ setting (``--no-compact-lists`` option).  The
  precise spacing can be controlled in the stylesheet.

  Note again that this is not exactly WYSIWYG: it partially resembles
  the rules about blank lines being optional between list items in
  reStructuredText -- but adding/removing optional blank lines does
  not affect spacing in the output!  It's a feature, not a bug: you
  write it as you like but the output is styled consistently.

  .. _compact_lists: docs/user/config.html#compact-lists


Why do enumerated lists only use numbers (no letters or roman numerals)?
------------------------------------------------------------------------

The rendering of enumerators (the numbers or letters acting as list
markers) is completely governed by the stylesheet, so either the
browser can't find the stylesheet (try enabling the
`embed_stylesheet`_ setting [``--embed-stylesheet`` option]), or the
browser can't understand it (try a not too old Firefox, Chrome, Opera,
Safari, Edge, or even MSIE).

.. _embed_stylesheet: docs/user/config.html#embed-stylesheet


There appear to be garbage characters in the HTML.  What's up?
--------------------------------------------------------------

What you're seeing is most probably not garbage, but the result of a
mismatch between the actual encoding of the HTML output and the
encoding your browser is expecting.  Your browser is misinterpreting
the HTML data, which is encoded text.  A discussion of text encodings
is beyond the scope of this FAQ; see one or more of these documents
for more info:

* `UTF-8 and Unicode FAQ for Unix/Linux
  <http://www.cl.cam.ac.uk/~mgk25/unicode.html>`_

* Chapters 3 and 4 of `Introduction to i18n [Internationalization]
  <http://www.debian.org/doc/manuals/intro-i18n/>`_

* `Python Unicode Tutorial
  <http://www.reportlab.com/i18n/python_unicode_tutorial.html>`_

The common case is with the default output encoding (UTF-8), when
either numbered sections are used (via the "sectnum_" directive) or
symbol-footnotes.  Three non-breaking spaces are inserted in each numbered
section title, between the generated number and the title text.  Most
footnote symbols are not available in ASCII, nor are non-breaking
spaces.  When encoded with UTF-8 and viewed with ordinary ASCII tools,
these characters will appear to be multi-character garbage.

You may have an decoding problem in your browser (or editor, etc.).
The encoding of the output is set to UTF-8, but your browser isn't
recognizing that.  You can either try to fix your browser (enable
"UTF-8 character set", sometimes called "Unicode"), or choose a
different `output-encoding`_.  You can also try
``--output-encoding=ascii:xmlcharrefreplace`` for HTML or XML, but not
applicable to non-XMLish outputs.

If you're generating document fragments, the "Content-Type" metadata
(between the HTML ``<head>`` and ``</head>`` tags) must agree with the
encoding of the rest of the document.  For UTF-8, it should be::

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

Also, Docutils normally generates an XML declaration as the first line
of the output.  It must also match the document encoding.  For UTF-8::

    <?xml version="1.0" encoding="utf-8" ?>

.. _sectnum: docs/ref/rst/directives.html#sectnum
.. _output-encoding: docs/user/config.html#output-encoding


How can I retrieve the body of the HTML document?
-------------------------------------------------

(This is usually needed when using Docutils in conjunction with a
templating system.)

You can use the `docutils.core.publish_parts()`_ function, which
returns a dictionary containing an 'html_body_' entry.

.. _docutils.core.publish_parts(): docs/api/publisher.html#publish-parts
.. _html_body: docs/api/publisher.html#html-body


Why is the Docutils XHTML served as "Content-type: text/html"?
--------------------------------------------------------------

Full question:

    Docutils' HTML output looks like XHTML and is advertised as such::

      <?xml version="1.0" encoding="utf-8" ?>
      <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "https://www.w3.org/TR/xht ml1/DTD/xhtml1-transitional.dtd">

    But this is followed by::

      <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    Shouldn't this be "application/xhtml+xml" instead of "text/html"?

Short answer: if we didn't serve XHTML as "text/html" (which is a
perfectly valid thing to do), it couldn't be viewed in Internet
Explorer.

Long answer: In a perfect web, the Docutils XHTML output would be 100%
strict XHTML.  But it's not a perfect web, and a major source of
imperfection is Internet Explorer.  When the "html4css1"
writer was created, IE represented the overwhelming majority of web
browsers "in the wild".
The behaviour is kept for backwards compatibility while
modern, semantic HTML output is available with the "html5" writer.

(Thanks to Martin F. Krafft, Robert Kern, Michael Foord, and Alan
G. Isaac.)


Python Source Reader
====================

Can I use Docutils for Python auto-documentation?
-------------------------------------------------

Yes, in conjunction with other projects.

The Sphinx_ documentation generator includes an autodoc module.

.. _Sphinx: http://www.sphinx-doc.org

Version 2.0 of Ed Loper's `Epydoc <http://epydoc.sourceforge.net/>`_
supports reStructuredText-format docstrings for HTML output.  Docutils
0.3 or newer is required.

Development of a Docutils-specific auto-documentation tool is suspended.

.. Epydoc works by importing
   Python modules to be documented, whereas the Docutils-specific tool,
   described above, will parse modules without importing them (as with
   `HappyDoc <http://happydoc.sourceforge.net/>`_, which doesn't support
   reStructuredText).

   The advantages of parsing over importing are security and flexibility;
   the disadvantage is complexity/difficulty.

   * Security: untrusted code that shouldn't be executed can be parsed;
     importing a module executes its top-level code.
   * Flexibility: comments and unofficial docstrings (those not supported
     by Python syntax) can only be processed by parsing.
   * Complexity/difficulty: it's a lot harder to parse and analyze a
     module than it is to ``import`` and analyze one.

   For more details, please see "Docstring Extraction Rules"
   in :PEP:`258`, item 3 ("How").


Miscellaneous
=============

Is the Docutils document model based on any existing XML models?
----------------------------------------------------------------

Not directly, no.  It borrows bits from DocBook, HTML, and others.  I
(David Goodger) have designed several document models over the years,
and have my own biases.  The Docutils document model is designed for
simplicity and extensibility, and has been influenced by the needs of
the reStructuredText markup.


.. _contribute:

How to make code contributions that are easily accepted
-------------------------------------------------------

* Follow the `Python coding conventions`_ and `documentation
  conventions`_ in the Docutils Policies.
  Ensure the addition works with all `supported Python versions`_.

  Look at the Docutils sources to see how similar features are
  implemented, learn to do it "the Docutils way".

* Prepare tests_. Test cases are also examples and showcases for new
  features.

* Include documentation.

* For larger changes, consider creating a `feature branch`_ in a
  Docutils repository_ checkout. [#]_

* Mail your patch to the Docutils-develop_ mailing list or attach it to the
  relevant ticket at Docutils' `bug tracker`_ or `feature request tracker`_.
  We accept patches created with diff, SVN, or Git.

The developers will make sure that contributions fit nicely into Docutils.
This might involve discussing (and compromising on) design and
implementation details. It might also lead to the conclusion that the
addition fits better in the `extensions and related projects`_.

.. [#] Working with branches is much easier with Git_. You can get a Git
   clone of the repository from http://repo.or.cz/w/docutils.git or with
   git-svn.

.. _Python coding conventions: docs/dev/policies.html#python-coding-conventions
.. _documentation conventions: docs/dev/policies.html#documentation-conventions
.. _tests: docs/dev/testing.html
.. _supported Python versions: README.html#requirements
.. _feature branch: docs/dev/policies.html#feature-branch
.. _Git: http://git-scm.com/
.. _bug tracker: https://sourceforge.net/p/docutils/bugs/




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:

.. Here's a code css to make a table colourful::

   /* Table: */

   th {
       background-color: #ede;
   }

   /* alternating colors in table rows */
   table.docutils tr:nth-child(even) {
       background-color: #F3F3FF;
   }
   table.docutils tr:nth-child(odd) {
       background-color: #FFFFEE;
   }

   table.docutils tr {
       border-style: solid none solid none;
       border-width: 1px 0 1px 0;
       border-color: #AAAAAA;
   }


/Part 5. 107.📜 docutils-0.20.1/HISTORY.txt

.. .. include:: /docutils-0.20.1/docs/header0.txt

==================
 Docutils History
==================

:Author: David Goodger; open to all Docutils developers
:Contact: docutils-develop@lists.sourceforge.net
:Date: $Date: 2023-05-16 16:49:41 +0200 (Di, 16. Mai 2023) $
:Revision: $Revision: 9387 $
:Web site: https://docutils.sourceforge.io/
:Copyright: This document has been placed in the public domain.

.. .. contents:: Table of Contents


Release 0.20.1 (2023-05-17)
===========================

* docutils/MANIFEST.in

  - Include tox.ini and docutils.conf in the source package
    (cf. bug #467 and bug #461).

* tools/rst2odt_prepstyles.py

  - Moved to ``docutils/writers/odf_odt/prepstyles.py``.
    Replaced with a provisional backwards compatibility script.


Release 0.20 (2023-05-09)
=========================

* General

  - Docutils 0.20 is the last version supporting Python 3.7 and 3.8.
  - Support Python 3.11 (patch #198 by Hugo van Kemenade).

* docutils/core.py

  - New functions `rst2…()` for use as "console_scripts" `entry points`_.
    (cf. `Future changes` in the RELEASE-NOTES_).

* docutils/frontend.py

  - New configuration setting "output_". Obsoletes the ``<destination>``
    positional argument (cf. `Future changes` in the RELEASE-NOTES_).

* docutils/languages/
  docutils/parsers/rst/languages/

  - Support Ukrainian. Patch by Dmytro Kazanzhy.

* docutils/nodes.py

  - Fix `previous_sibling()` method that led to invalid HTML in some cases
    (cf. patch #195).
  - Fix bug #463. Spurious comma in deprecation warning.

* docutils/parsers/recommonmark_wrapper.py

  - Improved mock Sphinx module.

* docutils/transforms/__init__.py

  - `Transformer.populate_from_components()` now silently ignores
    components that are not instances of `docutils.TransformSpec`.

* docutils/transforms/frontmatter.py

  - Accept author names with initials like ``A. Einstein`` in the "author"
    `bibliographic field`_ instead of rising an error
    (generally, such names are `parsed as enumerated list`__).

    .. _bibliographic field:
        docs/ref/rst/restructuredtext.html#bibliographic-fields
    __ docs/ref/rst/restructuredtext.html#enumerated-lists

* docutils/transforms/references.py

  - `DanglingReferences` ignores `citation_reference` nodes if the
    "use_bibex" setting is active. (In this case, citations are provided
    by LaTeX/BibTeX.) Fixes bug #384.

* docutils/utils/__init__.py

  - New utility function `xml_declaration()`.
  - `DependencyList.add()` accepts `pathlib.Path` instances.
  - `find_file_in_dirs()` now returns a POSIX path also on Windows;
    `get_stylesheet_list()` no longer converts ``\`` to ``/``.

* docutils/utils/math/latex2mathml.py

  - Support "mod" notation for modulo operation / modulus arithmetic.

* docutils/utils/math/tex2mathml_extern.py

  - Support `Pandoc` as alternative LaTeX to MathML converter.
    Patch by Ximin Luo.

* docutils/writers/_html_base.py

  - Refactoring of `HTMLTranslator` initialization and collecting of
    document "parts". Adapt HTML writers importing `_html_base`.

    Changes to the HTML output (no space character before closing tag of
    XML declaration, order of metadata elements)
    don't affect the HTML semantics, styling, and rendering.

  - Wrap definition lists with "details" class argument in a <div>
    with the "id" and "class" values of the list node.

  - Use dpub-ARIA role "doc-footnote__" (instead of ARIA role "note")
    for footnotes.

    __ https://www.w3.org/TR/dpub-aria-1.1/#doc-footnote

* docutils/writers/latex2e/__init__.py

  - Do not load the `inputenc` package in UTF-8 encoded LaTeX sources.
    (UTF-8 is the default encoding for LaTeX2e since 2018).
  - Fix behaviour of the use_bibtex_ setting.
  - Outsource parts of `depart_document()` to new auxiliary methods
    `make_title()` and `append_bibliography()`.
  - Ensure POSIX paths in stylesheet loading macros.

* docutils/writers/latex2e/titlepage.tex

  - Drop ``\usepackage{fixltx2e}`` from template.
    (Obsolete since 2015 and dropped from other templates in Docutils 0.14.)

* docutils/writers/manpage.py

  - Do not output empty "manual" in ``.TH``.

* docutils/writers/xetex/__init__.py

  - Ignore settings in the [latex2e writer] configuration file section.
    Place common settings in section [latex writers].

* setup.py

  - Fix SetuptoolsDeprecationWarning: ``Installing '' as data is deprecated``
    by adding data directories to package_data.packages list.

* tox.ini

  - Extracted flake8 configuration and moved to ``.flake8``.
  - changedir to directory ``test`` to avoid path problems.

* test/

  - Refactored tests to use common `unittest` idioms.
    Fixes errors when running the test suite with ``python -m unittest``
    or external test frameworks, such as Pytest_.

  .. _pytest: https://pypi.org/project/pytest/

* test/coverage.sh

  - Removed. Use the coverage.py_ project instead,
    ``coverage run test/alltests.py`` and ``coverage report``.

  .. _coverage.py: https://pypi.org/project/coverage/

* tools/

  - Moved ``quicktest.py`` to ``tools/dev/``.


Release 0.19 (2022-07-05)
=========================

* General

  - Dropped support for Python 2.7, 3.5, and 3.6. and removed compatibility
    hacks from code and tests.
  - Code cleanup,
    check PEP 8 conformity with `flake8` (exceptions in file tox.ini).

* docutils/__main__.py

  - New module. Support for ``python -m docutils``.
    Also used for the ``docutils`` console script `entry point`_.

* docutils/core.py

  - Let `Publisher.publish()` print info and prompt when waiting for input
    from a terminal (cf. https://clig.dev/#interactivity).
  - Respect `input_encoding_error_handler`_ setting when opening a source.

* docutils/io.py

  - New function `error_string()`
    obsoletes `utils.error_reporting.ErrorString`.
  - Class `ErrorOutput` moved here from `utils.error_reporting` module.
  - Use "utf-8-sig" instead of Python's default encoding if the
    `input_encoding`_ setting is None.
  - Fix error when reading of UTF-16 encoded source without trailing newline.
  - Suppress deprecation warning (fixes bug #464).

* docutils/parsers/__init__.py

  - Aliases "markdown" and "commonmark" point to "commonmark_wrapper".
  - Alias for the "myst" parser (https://pypi.org/project/myst-docutils).
  - Use absolute module names in `_parser_aliases` instead of two
    import attempts. (Keeps details if the `recommonmark_wrapper` module
    raises an `ImportError`.)
  - Prepend parser name to `ImportError` if importing a parser class fails.

* docutils/parsers/commonmark_wrapper.py

  - New module for parsing CommonMark input. Selects a locally installed
    3rd-party parser (`pycmark`, `myst`, or `recommonmark`).

* docutils/parsers/recommonmark_wrapper.py

  - Raise `ImportError`, if import of the upstream parser module fails.
    If called from an `"include" directive`_,
    the system-message now has source/line info.
  - Adapt to and test with `recommonmark` versions 0.6.0 and 0.7.1.

  .. _"include" directive: docs/ref/rst/directives.html#include

* docutils/parsers/rst/__init__.py

  - Update PEP base URL (fixes bug #445),
    use "https:" scheme in RFC base URL.
  - Add `reporter` to `Directive` class attributes.

* docutils/parsers/rst/directives/__init__.py

  - `parser_name()` keeps details if converting  `ImportError` to  `ValueError`.

* docutils/parsers/rst/roles.py

  - Don't use mutable default values for function arguments. Fixes bug #430.

* docutils/transforms/universal.py

  - Fix bug #435: invalid references in `problematic` nodes
    with report_level=4.

* docutils/utils/__init__.py

  - `decode_path()` returns `str` instance instead of `nodes.reprunicode`.

* docutils/utils/error_reporting.py

  - Add deprecation warning.

* docutils/writers/_html_base.py

  - Add "html writers" to `config_section_dependencies`. Fixes bug #443.
  - Write table column widths with 3 digits precision. Fixes bug #444.

* docutils/writers/html5_polyglot/__init__.py

  - Add space before "charset" meta tag closing sequence.
  - Remove class value "controls" from an `image` node with video content
    after converting it to a "control" attribute of the <video> tag.
  - Wrap groups of footnotes in an ``<aside>`` for easier styling.

* docutils/writers/pep_html/

  - Use "https:" scheme in "python_home" URL default.
  - Fix links in template.txt.

* setup.py

  - New ``docutils``" console script `entry point`_. Fixes bug #447.

* test/alltests.py

  - Always encode the log file ``alltests.out`` using "utf-8".

* test/DocutilsTestSupport.py

  - `exception_data()` now returns None if no exception was raised.
  - `recommonmark_wrapper` only imported if upstream parser is present.

* test/test_parsers/test_rst/test_directives/test_tables.py

  - Fix bug #436: Null char valid in CSV since Python 3.11.

* tools/docutils-cli.py

  - Allow 3rd-party drop-in components for reader and parser, too.
  - Fix help output.
  - Actual code moved to docutils.__main__.py.

* tools/rst2odt_prepstyles.py

  - Options ``-h`` and ``--help`` print short usage message.

.. _entry point:
.. _entry points:
    https://packaging.python.org/en/latest/specifications/entry-points/


Release 0.18.1 (2021-11-23)
===========================

* docutils/nodes.py

  - `Node.traverse()` returns a list again to restore backwards
    compatibility. Fixes bug #431.

  - New method `Node.findall()`: like `Node.traverse()` but returns an
    iterator. Obsoletes `Node.traverse()`.

* docutils/utils/__init__.py

  - Fix behaviour of `get_stylesheet_list()`: do not look up stylesheets
    given as `stylesheet`_ setting. Cf. bug #434.

* docutils/writers/_html_base.py

  - Fix handling of ``footnote_backlinks == False`` (report Alan G Isaac).

* docutils/writers/html5_polyglot/math.css

  - Fix typo (bug #432).

* docutils/writers/odf_odt/__init__.py

  - Fix spurious output with Windows (bug #350).

* test/test_error_reporting.py

  - Fix a false positive (bug #434).


Release 0.18 (2021-10-26)
=========================

* docutils/frontend.py
  - Mark as provisional (will switch from using `optparse` to `argparse`).
  - Remove hack for the now obsolete "mod_python" Apache module.
  - New function `get_default_settings()`.

* docutils/nodes.py

  - Don't change a list while looping over it (in
    `document.set_name_id_map()`). Thanks to Mickey Endito.

* docutils/parsers/recommonmark_wrapper.py

  - Test and update to work with `recommonmark` version 0.6.0.
    Still provisional.

    Unfortunately, recommonmark_ is `no longer maintained`__.

    __ https://github.com/readthedocs/recommonmark/issues/221

* docutils/parsers/rst/directives/misc.py

  - Fix bug #424 Wrong circular inclusion detection.
    Use a "magic" comment instead of line numbers
    to keep a log of recursive inclusions.

* docutils/parsers/rst/states.py

  -  Use a "magic" comment to update the log of recursive inclusions.

* docutils/writers/html5_polyglot/__init__.py

  - New option `image_loading`_. Support "lazy" loading of images.
    Obsoletes `embed_images`_.

* docutils/writers/pseudoxml.py

  - Fix spelling of setting `detailed`_.

* tools/docutils-cli.py

  - Read settings from standard configuration files.

Fix spelling errors in documentation and docstrings.
Thanks to Dimitri Papadopoulos.


Release 0.18b1 (2021-10-05)
===========================

* docutils/frontend.py

  - The default value for the `auto_id_prefix`_ setting changed to "%":
    auto-generated IDs use the tag name as prefix.

* docutils/nodes.py

  - Make meta__ a standard Docutils doctree node. Writers may ignore
    `meta` nodes if they are not supported by the output format.

    __ docs/ref/doctree.html#meta

  - document.make_id(): Do not strip leading number and hyphen characters
    from `name` if the `id_prefix`_ setting is non-empty.

  - `Node.traverse()` returns an iterator instead of a list.

* docutils/parsers/rst/directives/html.py

  - Removed. (Meta directive moved to ``misc.py``.)

* docutils/parsers/rst/directives/misc.py

  - `Meta` directive class (moved from html.py) inserts `meta`
    (instead of `pending`) nodes.

  - Add `class` option to `Raw` directive.

* docutils/parsers/rst/directives/tables.py

  - Unify behaviour of `"widths" option`_: check that the length of an
    integer list equals the number of table columns also for the "table"
    directive.

* docutils/tools/math/math2html.py,
  docutils/tools/math/tex2unicode.py,
  docutils/writers/html5/math.css

  - Fork from elyxer and remove code that is not required
    for math conversion.
  - Scale variable sized operators and big delimiters with CSS
  - Support more commands, fix mapping of commands to Unicode characters
    (cf. `LaTeX syntax for mathematics`_).
  - Fix bug #244 Wrong subscript/superscript order.
  - Don't use <tt> element (deprecated in HTML5).
  - Use STIX fonts if available.

  .. _LaTeX syntax for mathematics: docs/ref/rst/mathematics.html

* docutils/parsers/rst/states.py

  - Fix source location (line number) for attribution elements.
    Patch by Mickey Endito.
  - Add line, source, and rawsource internal attributes for blockquote
    elements. Patch by Mickey Endito.

* docutils/transforms/references.py

  - Skip system_messages when propagating targets. Fixes bug #425.

* docutils/utils/__init__.py

  - Removed `unique_combinations()` (obsoleted by `itertools.combinations()`).

* docutils/utils/latex2mathml.py

  - Major update (fixes and support for additional commands and symbols).
    Fixes bug #407.

* docutils/writers/_html_base.py

  - Write footnote brackets and field term colons to HTML, so that
    they are present also without CSS and when copying text.
    Adapt ``minimal.css``.

  - Use semantic tags <aside> for footnote text, topics, admonitions,
    and system-messages and <nav> for the table of contents. Use <div>
    for citations.

  - Only specify table column widths, if the `"widths" option`_ is set
    and is not "auto" (fixes bug #426).
    The `table_style`_ setting "colwidths-grid" restores the current default.

    .. _"widths" option: docs/ref/rst/directives.html#column-widths

  - Use ARIA roles to enable accessible HTML for abstract, dedication,
    the table of contents, footnote, references, footnotes, citations,
    and backlinks.

  - Use "aria-level" attribute instead of invalid tags <h7>, <h8>, ...
    for headings of deeply nested sections.

  - Do not set classes "compound-first", "compound-middle", or
    "compound-last" to elements nested in a compound.
    Use class value "backrefs" instead of "fn-backref" for a span of
    back-references.

  - Do not write class values handled by the HTML writer ("colwidths-auto",
    "colwidths-given", "colwidths-grid") to the output.

  - Move space character between section number and heading into
    "sectnum" span.

  - Removed attribute `HTMLTranslator.topic_classes`

  - Items of a definition list with class argument "details" are
    converted to <details> disclosure elements.

* docutils/writers/html4css1/__init__.py

  - Overwrite methods in _html_base.HTMLTranslator that use HTML5 tags
    (details, aside, nav, ...) and attributes (role, aria-level).

* docutils/writers/latex2e/__init__.py

  - The setting `legacy_class_functions`_ now defaults to "False".
    Adapt stylesheets modifying ``\DUadmonition`` and/or ``\DUtitle``.

  - Apply patch #181 "Fix tocdepth when chapter/part in use" by
    John Thorvald Wodder II.

  - Fix newlines after/before `ids_to_labels()` (cf. patch #183).

  - Refactor/revise ToC writing.

  - Don't add ``\phantomsection`` to labels in math-blocks.

  - Improve spacing and allow customization of Docutils-generated table
    of contents.

  - New algorithm for table column widths. Fixes bug #422.
    New configuration setting `legacy_column_widths`_.

    `Table.set_table_style()` arguments changed.

    Only write "continued on next page..." if it fits
    without making the table columns wider.

    Table "width" option overrides conflicting "auto" column "widths".

* docutils/writers/latex2e/docutils.sty

  - Fix excessive padding above sidebar titles.

* docutils/writers/pseudoxml.py

  - Fix option `detailed`_ under Python 2.7.

* docutils/writers/s5_html/themes/default

  - Remove IE 6 compatibility workarounds ``iepngfix.htc`` and
    ``blank.gif`` (fixes bug #169).

* docutils/writers/manpage.py

  - Fix: double quotes need to be escaped on macro invocation.
    Done everywhere.


Release 0.17.1 (2021-04-16)
===========================

* docutils/utils/math/latex2mathml.py

  - Fix bug #406 (MathML translation of ``\mathbf``).

* docutils/writers/latex2e/__init__.py

  - Open ``docutils.sty`` with encoding set to "utf-8".
    Fixes bug #414: error with Py3k when locale encoding is "ascii".

* docutils/parsers/*.py, docutils/transforms/*.py

  - Provide fallbacks for parser config settings
    to facilitate programmatic use.

* docutils/writers/manpage.py

  - Apply patch #160: move macro defs above ``.TH``
    (thanks Willie and sorry for the delay).


Release 0.17 (2021-04-03)
=========================

* General

  - Installing with ``setup.py`` now requires `setuptools`.
    Alternatively, install with `pip`_ (or "manually").
  - Use `importlib.import_module()` to programmatically import modules.
  - Fix bug #385: Import of language modules.

  .. _pip: https://pypi.org/project/pip/

* docutils/MANIFEST.in

  - Exclude test outputs.

* docutils/__init__.py

  - VersionInfo:  `ValueError` for invalid values, fix comparison to tuples.

* docutils/languages/
  docutils/parsers/rst/languages/

  - Apply patch # 177 Arabic mappings by Shahin.
  - Apply patch for bug #399 Fixes in Korean translation by Shinjo Park.

* docutils/nodes.py

  - Apply patch #165 "Fix error when copying `system_message` node"
    by Takeshi KOMIYA.
  - Apply version of patch #167 "Let `document.set_id()` register all
    existing IDs". Thanks to Takeshi KOMIYA.
  - Fix bug #410: Use a "property" function to recursively fetch
    `Node.document` value from parent node.

* docutils/parsers/recommonmark_wrapper.py

  - New, **experimental** wrapper to integrate the
    `recommonmark`_ Markdown parser for use with Docutils.
    Currently only tested with `recommonmark` version 0.4.0.

    .. _recommonmark: https://pypi.org/project/recommonmark/

* docutils/parsers/rst/directives/body.py

  - Make the sidebar's "title" argument optional (feature request #69).

* docutils/parsers/rst/directives/html.py

  - Make `meta` elements available for "latex" and "odt" writers.

* docutils/parsers/rst/directives/misc.py

  - Prevent infinite inclusion loops.

* docutils/parsers/rst/roles.py

  - Apply patch #174 "Lowercase new role names on registration"
    by John Thorvald Wodder II.

* docutils/utils/smartquotes.py

  - Fix bug #383: Smart quotes around opening and separator characters.

* docutils/transforms/components.py

  - Allow a comma-separated list of formats for the Filter transform.

* docutils/writers/html*

  - Implement feature request #40 "Option to embed images as data URI".

* docutils/writers/html5_polyglot/__init__.py

  - Use the new semantic tags <main>, <section>, <header>,
    <footer>, <aside>, <figure>, and <figcaption>.
    See ``minimal.css`` and ``plain.css`` for styling rule examples.

    Change the `initial_header_level`_ setting default to "2", as browsers
    use the `same style for <h1> and <h2> when nested in a <section\>`__.

    __ https://stackoverflow.com/questions/39547412/same-font-size-for-h1-and-h2-in-article

  - Use HTML text-level tags <small>, <s>, <q>, <dfn>, <var>, <samp>, <kbd>,
    <i>, <b>, <u>, <mark>, and <bdi> if a unique, matching class value
    is found in `inline`__ and `literal`__ elements.
    Use <ins> and <del> if a unique matching class value
    is found in `inline`, `literal`, or `container` elements.
    Use <small> for generated code line numbers.

    __ docs/ref/doctree.html#inline
    __ docs/ref/doctree.html#literal

  - Fix bug #398: properly close link tag to "schema.dcterms".

  - Add a `viewport meta tag`__ to fix rendering in mobile browsers.

    __ https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag

  - Use <video> for images with video MIME types supported by HTML5.

* docutils/writers/html5_polyglot/minimal.css

  - Move non-essential styling to ``plain.css``.
    Small fixes and tweaks.

  - Support "captionbelow" class value for tables.

  - Display code line numbers as pseudo-elements which are skipped
    when copying text from code blocks. Solves feature request #32.

* docutils/writers/html5_polyglot/plain.css

  - Support numbered figures.

* docutils/writers/html5_polyglot/responsive.css

  - New optional style that adapts to different screen sizes.

* docutils/writers/latex2e/__init__.py

  - Use LaTeX environments for admonitions and "class wrappers" for styling
    admonitions and titles if the new configuration setting
    `legacy_class_functions`_ is False.

  - Remove backwards compatibility code for the deprecated
    `styling command`__ prefix ``\docutilsrole``.

    __ docs/user/latex.html#custom-interpreted-text-roles

  - Remove legacy LaTeX stylesheet ``docutils-05-compat.sty``.

  - Support the `memoir` LaTeX document class.
    Fixes bugs #390, #391, and #392. Thanks to John Thorvald Wodder II.

  - The special value "auto" for the `graphicx_option`_ setting
    is no longer supported (it never worked for xetex/luatex).

  - Most helper commands and element definitions are now defined in the
    LaTeX package `docutils.sty`_ and only inserted in the document
    preamble if the `stylesheet`__ setting does not list "docutils".

    .. _docutils.sty: https://ctan.org/pkg/docutils
    __ docs/user/config.html#stylesheet-latex-writers

  - Apply patch #173 "Make \*TeX writers convert nonstandard table
    classes to DUclass environments" by John Thorvald Wodder II.

  - Fix bug #408 "Incorrect assert in latex writer
    for multiple citation references".

  - Apply patch #175 "Fix alignment of nested tables"
    by John Thorvald Wodder II. Additional fixes to table alignment.

  - Do not write Docutils-generated ToC, when ``use_latex_toc == True``.
    (This did happen when publishing from a doctree.)

  - Set PDF document properties from "meta" directive content.

  - Apply version of patch #176 "LaTeX writer: Append ``\leavevmode`` to
    non-docinfo field names" by John Thorvald Wodder II.

* docutils/writers/manpage.py

  - Fix #394 fix missing new line after rubric.
  - Patch #168 fix crashing on empty citation (by Takeshi KOMIYA).
  - Fix #126 manpage title with spaces.
  - Fix #380 command line option problem in sphinx.

* docutils/writers/odf_odt/__init__.py

  - Fix/improve metadata handling:
    fix "keyword" splitting,
    allow generic fields (stored as "Custom Properties").

* docutils/writers/pseudoxml.py

  - New option `detailled`_.

* test/DocutilsTestSupport.py

  - Run python3 test like python2 against source not the build/-directory

* tools/docutils-cli.py

  - New generic command line front end that allows the free selection of
    reader, parser, and writer components.


Release 0.16 (2020-01-16)
=========================

* General

  - Dropped support for Python 2.6, 3.3 and 3.4
  - Docutils now supports Python 2.7 and Python 3.5+ natively
    (without conversion by `2to3`).
  - Keep `backslash escapes`__ in the document tree. Backslash characters in
    text are be represented by NULL characters in the `text` attribute of
    Doctree nodes and removed in the writing stage by the node's
    `astext()` method.

  __ https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#escaping-mechanism

* docutils/io.py

  - Remove the `handle_io_errors` option from io.FileInput/Output.

* docutils/nodes.py

  - Speed up Node.next_node().
  - If `auto_id_prefix`_ ends with "%", this is replaced with the tag name.
  - Warn about `Node.traverse()` returning an iterator instead of a list
    in future.

* docutils/statemachine.py

  - Patch [ 158 ]: Speed up patterns by saving compiled versions (eric89gxl)

* docutils/transforms/universal.py

  - Fix [ 332 ]: Standard backslash escape for smartquotes.
  - Fix [ 342 ]: No escape in roles descending from `inline literal`.

* docutils/utils/__init__.py

  - `unescape()` definition moved to `nodes` to avoid circular import
    dependency. Fixes [ 366 ].

* docutils/writers/latex2e/__init__.py

  - Fix topic subtitle.
  - Make "rubric" bold-italic and left aligned.
  - Fix [ 339 ] don't use "alltt" or literal-block-environment
    in admonitions and footnotes.
  - Deprecation warning for ``\docutilsrole``-prefixed styling commands.
  - Add "latex writers" to the `config_section_dependencies`.
  - Ignore classes for `rubric` elements
    (class wrapper interferes with LaTeX formatting).

* docutils/writers/manpage.py

  - Apply fix for [ 287 ] comma after option is bold.
  - Apply fix for [ 289 ], line starting with ``.`` in a text.

* docutils/writers/odf_odt/__init__.py

  - Fix: ElementTree.getchildren deprecated warning

* docutils/writers/xetex/__init__.py

  - Add "latex writers" to the `config_section_dependencies`.

* test/alltests.py

  - Fix: 377 ResourceWarning: unclosed file python3.8
    Close alltests.out with atexit.

* test/functional/*

  - Fix: 377 ResourceWarning: unclosed file python3.8
    Read defaults file with context.

  - Set `auto_id_prefix`_ to "%" (expands to tag-names).
    Results in descriptive links in HTML and more localized changes when
    editions to the input add or remove auto-ids.

* test/test_io.py

  - Apply patch #157: avoid test failure because of a `ResourceWarning`.

* test/test_writers/test_odt.py

  - Fix [ 359 ]: Test suite fails on Python 3.8. odt XML sorting.
    Use ElementTree instead of minidom.

* tools/buildhtml.py

  - New option `html_writer`_.


Release 0.15.1 (2019-07-24)
===========================

source: branches/rel-0.15

Bugs #366 fix release for python2 only.


Release 0.15 (2019-07-20)
=========================

* General

  - Dropped support for Python 2.4, 2.5, 3.1, and 3.2.
  - Infrastructure automation.

* docs/ref/rst/restructuredtext.txt

  - Document rST syntax change: Tokens like ``:this:example:`` are now valid
    field list names (instead of ordinary text).

* docutils/io.py

  - Fix [ 348 ] Since Python 3.4, the 'U' universal newlines mode has been
    deprecated. Thanks to hugovk.

* docutils/languages/ko.py, docutils/parsers/rst/languages/ko.py

  - Apply [ 153 ] Korean mappings by Thomas Sungjin Kang.

* docutils/nodes.py

  - Fix [ 251 ] `system_message.copy()`  `TypeError`.
  - `Element.copy()` also copies `document`, `line`, and `source` attributes.

* docutils/parsers/rst/__init__.py

  - Apply [ 152 ] reset `default role` at end of document.

* docutils/parsers/rst/states.py

  - Allow embedded colons in field list field names.

* docutils/parsers/rst/directives/html.py

  - Fix bug #281: Remove escaping backslashes in meta directive content.

* docutils/parsers/rst/directives/misc.py

  - Don't convert tabs to spaces, if `tab_width` is negative in
    "include" directive with "code" option.

* docutils/parsers/rst/directives/tables.py

  - Apply patch #121: Add "width" option for the table directives.

* docutils/transforms/frontmatter.py

  - Add field name as class argument to generic docinfo fields unconditionally.

* docutils/transforms/references.py

  - Fix bug #331: fixed the "trim" options of the "unicode" directive.

* docutils/utils/__init__.py

  - Deprecate `unique_combination()` (obsoleted by `itertools.combination()`.

* docutils/utils/smartquotes.py

  - Fix bug #332: use open quote after whitespace, ZWSP, and ZWNJ.

* docutils/writers/html5_polyglot/

  - automatically add HTML5-compatible meta tags for docinfo items
    "authors", "date", and "copyright".

* docutils/writers/_html_base.py

  - Fix bug #358: Non-breaking space removed from fixed-width literal.

* docutils/writers/latex2e/__init__.py

  - Fix bug #323: spurious ``\phantomsection`` and whitespace in
    ``parts['title']``.
  - Fix bug #324: Invalid LaTeX for table with empty multi-column cell.
  - Fixes to literal block handling.


Release 0.14 (2017-08-03)
=========================

* docs/ref/docutils.dtd

  - Enable validation of Docutils XML documents against the DTD:

    Use attribute type NMTOKEN instead of REFID for the `refid` attribute
    and NMTOKENS for `backrefs`: REFID refers to an ID type instance,
    however, the `ids` attribute cannot use the ID type because `XML only
    allows one ID per Element Type`__ and doesn't support a multiple-ID
    "IDS" attribute type.

  __ https://www.w3.org/TR/REC-xml/#sec-attribute-types

* docs/ref/rst/restructuredtext.txt

  - Added documentation for escaped whitespace in URI contexts.
  - Clarify use of Unicode character categories.

* docutils/parsers/rst/states.py

  - Added functionality: escaped whitespace in URI contexts.
  - Consistent handling of all whitespace characters in inline markup
    recognition. Fixes [ 307 ] and [ 3402314 ] (now [ 173 ]).

* docutils/parsers/rst/directives/images.py

  - Added support for escaped whitespace in URI contexts.

* docutils/parsers/rst/directives/tables.py

  - Rework patch [ 120 ] (revert change to Table.get_column_widths()
    that led to problems in an application with a custom table directive).

* docutils/transforms/frontmatter.py

  - Fix [ 320 ] Russian docinfo fields not recognized.

* docutils/transforms/references.py

  - Don't add a second ID to problematic references.

* docutils/transforms/universal.py

  Fix `SmartQuotes`: warn only once if language is unsupported,
  keep "rawsource" when "educating" quotes.

* docutils/utils/__init__.py

  - Added `split_escaped_whitespac()` function, support for escaped
    whitespace in URI contexts.

* docutils/utils/error_reporting.py

  - Fix [ 321 ] Import block might cause name error.

* docutils/utils/smartquotes.py

  - Update quote definitions for languages et, fi, fr, ro, sv, tr, uk.
  - New quote definitions for hr, hsb, hu, lv, sh, sl, sr.
  - Fix [ 313 ] Differentiate apostrophe from closing single quote
    (if possible).
  - Fix [ 317 ] Extra space inserted with French smartquotes.
  - Add command line interface for stand-alone use (requires 2.7).

* docutils/writers/_html_base.py

  - Provide default title in metadata (required by HTML5).
  - Fix [ 312 ] HTML writer generates invalid HTML if the table has two tags.
  - Fix [ 319 ] The MathJax CDN shut down on April 30, 2017. For security
    reasons, we don't use a third party public installation as default but
    warn if `math_output`_ is set to MathJax without specifying a URL.

* docutils/writers/html4css1/__init__.py

  - Apply [ 125 ] HTML writer: respect automatic table column sizing.

* docutils/writers/latex2e/__init__.py

  - Handle class arguments for block-level elements by wrapping them
    in a "DUclass" environment. This replaces the special handling for
    `epigraph` and `topic` elements.

* docutils/writers/manpage.py

  - Apply [ 141 ] Handling inline in manpage writer.

* docutils/writers/odf_odt/__init__.py

  - Command line setting `language`_ now sets the default language
    of the generated ODF document.
  - The use of image directive options :width: (%), :scale:, etc now
    set the width/height/size of images in the generated ODF
    documents.
  - The heading/title of admonitions now reflects the language
    specified by the `language`_ setting.
  - Fixed [ 306 ] only first of multiple "image" directives with the same URL
    shown in output.
  - Fixed [ 282 ] python3:  `AttributeError`.

* tools/rst2html4.py: New front-end.

* tools/dev/generate_punctuation_chars.py: New script
  to test and update utils.punctuation_chars.


Release 0.13.1 (2016-12-09)
===========================

* docutils/languages/fa.py
  docutils/parsers/rst/languages/fa.py
  docutils/languages/la.py
  docutils/parsers/rst/languages/la.py:

  - Apply [ 133 ] Persian mappings by Shahin Azad.
  - Apply [ 135 ] Language modules for Latvian by Alexander Smishlajev

* docutils/nodes.py

  - Fix [ 253 ] Attribute key without value not allowed in XML.

* docutils/parsers/

  - Apply [ 103 ] Recognize inline markups without word boundaries.
  - Enable escaping in embedded URIs and aliases (fixes [ 284 ]).

* docutils/parsers/rst/__init__.py

  - Fix [ 233 ] Change the base URL for the :rfc: role.

* docutils/parsers/rst/directives/tables.py

  - Apply [ 120 ] tables accept option widths: list of relative widths, 'auto'
    or 'grid'.

  - Implement feature request [ 48 ]
    Add :align: option to the table directives.
    Thanks to Takeshi KOMIYA for the patch.

* docutils/parsers/rst/roles.py

  - Fix [ 295 ] Class argument for custom role inheriting from math.

* docutils/parsers/rst/tableparser.py

  - Really fix [ 159 ] Spurious table column alignment errors.

* docutils/transforms/frontmatter.py

  - Add name of generic bibliographic fields as a "classes" attribute value
    (after conversion to a valid identifier form).

* docutils/utils/error_reporting.py

  - Fix [ 130 ] support streams expecting byte-strings in ErrorOutput.

* docutils/utils/math/math2html.py

  - Add ``\colon`` macro, fix spacing around colons. Fixes [ 246 ].
  - New upstream version (additional macros, piece-wise integrals and sums).

* docutils/writers/_html_base.py

  - New auxiliary module for definitions common to all HTML writers.

* docutils/writers/html5_polyglot/

  - New HTML writer generating clean, polyglot_ markup conforming to
    `HTML 5`_.

    The CSS stylesheets ``minimal.css`` and ``plain.css`` contain required
    and recommended layout rules.

* docutils/writers/html4css1/__init__.py

  - Add "docutils" to class values for "container" object to address [ 267 ].
  - Apply patch [ 119 ] by Anatoly Techtonik: use absolute paths for
    `default_stylesheet_path` and `default_template_path`.
  - Fix [ 266 ] creating labels/class values in description list items.
  - Do not use <sup> and <sub> tags inside <pre> (parsed-literal blocks).
  - Fix footnotes with content that does not start with a paragraph.
  - Use https in default MathJax URL (report Alan G Isaac).
  - Outsourcing of common code to _html_base.py.

* docutils/writers/latex2e/__init__.py

  - Fix [ 262 ] Use ``\linewidth`` instead of ``\textwidth`` for figures,
    admonitions and docinfo.

  - Use absolute path for `default_template_path`.

  - Removed deprecated options ``--use-latex-footnotes`` and
    ``--figure-footnotes``.

  - Cleaner LaTeX code for enumerations and literal blocks.

  - Use `hyperref` package together with `bookmark` (improved hyperlinking
    by the same author).

  - Fix [ 286 ] Empty column title cause invalid latex file.

  - Fix [ 224 ] Fix rowspan support for tables.

  - Let LaTeX determine the column widths in tables with "colwidths-auto".
    Not suited for multi-paragraph cells!

* docutils/writers/odf_odt/__init__.py

  - remove decode.encode of filename stored in zip.

* docutils/writers/xetex/__init__.py

  - LuaLaTex compatibility: do not load `xunicode` package.

* tools/

  - New front-end ``rst2html5.py``.

* tox.ini

  - Test py26, py27, py33 and py34.

    To use, install the `tox` package via pip or easy_install and use
    tox from the project root directory.

.. _polyglot: https://www.w3.org/TR/html-polyglot/
.. _HTML 5: https://www.w3.org/TR/html5/
.. _XHTML 1.0: https://www.w3.org/TR/xhtml1/


Release 0.12 (2014-07-06)
=========================

* docs/ref/rst/directives.txt

  - Update "math" and "csv-table" descriptions.

* docutils/parsers/rst/directives/images.py

  - Fix [ 258 ] ``figwidth="image"`` generates unitless width value.

* docutils/parsers/rst/states.py

  - Improve error report when a non-ASCII character is specified as
    delimiter, quote or escape character under Python 2.
    Fixes [ 249 ] and [ 250 ].

* docutils/writers/html4css1/__init__.py

  - Don't add newline after inline math.
    Thanks to Yury G. Kudryashov for the patch.

* docutils/writers/latex2e/__init__.py

  - Fix [ 239 ] Latex writer glues paragraphs with figure floats.
  - Apply [ 116 ] by Kirill Smelkov. Don't hard code \large for subtitle.

* docutils/writers/odf_odt/__init__.py

  - Apply patch by Jakub Wilk to fix bug [ 100 ].

* test/test_error_reporting.py

  - Fix [ 223 ] by removing redundant tests we do not have control over.

* test/test_nodes.py

  - Apply [ 115 ] respect fixed 2to3 string literal conversion behaviour.


Release 0.11 (2013-07-22)
=========================

* General

  - Apply [ 2714873 ] Fix for the overwriting of document attributes.
  - Support embedded aliases within hyperlink references.
  - Fix [ 228 ] try local import of docutils components (reader, writer, parser,
    language module) before global search.

* docutils/nodes.py

  - Fix [ 3601607 ] `node.__repr__()` must return `str` instance.

* docutils/parsers/rst/directives/__init__.py

  - Fix [ 3606028 ] `assert` is skipped with ``python -O``.

* docutils/parsers/rst/directives/images.py

  - Apply [ 3599485 ] node source/line information for sphinx translation.

* docutils/parsers/rst/directives/tables.py

  - Fix [ 210 ] Python 3.3 checks CVS syntax only if "strict" is True.

* docutils/parsers/rst/states.py

  - Fix [ 157 ] Line block parsing doesn't like system message.
  - Always import our local copy of roman.py (report Larry Hastings).

* docutils/transforms/references.py

  - Fix [ 3607029 ] traceback with embedded alias pointing to missing target.

* docutils/utils/__init__.py

  - Fix [ 3596884 ] exception importing `docutils.io`.

* docutils/writers/html4css1/__init__.py

  - Fix [ 3600051 ] for tables in a list, table cells are not compacted.
  - New setting `stylesheet_dirs`_: Comma-separated list of directories
    where stylesheets are found. Used by `stylesheet_path` when expanding
    relative path arguments.
  - New default for `math_output`_: ``HTML math.css``.
  - Avoid repeated class declarations in html4css1 writer
    (modified version of patch [ 104 ]).


* docutils/writers/latex2e/__init__.py

  - Drop the simple algorithm replacing straight double quotes with
    English typographic ones.
    Use the `smart_quotes`_ setting to activate this feature.
  - Fix literal use of babel shorthands (straight quote, tilde, ...).
  - Fix [ 3603246 ] Bug in option ``--graphicx-option=auto``.
  - New setting `stylesheet_dirs`__.

    __ docs/user/config.html#stylesheet-dirs-latex-writers


* docutils/writers/manpage.py

  - Fix [3607063] handle lines starting with a period.
  - Fix option separating comma was bold (thanks to Bill Morris).


Release 0.10 (2012-12-16)
=========================

* General

  - Dropped support for Python 2.3.
  - ``docutils/math``, ``docutils/error_reporting.py``, and
    ``docutils/urischemes.py`` moved to the utils package.
  - Fix [3541369] Relative __import__ also with Python 3.3.
  - Fix [3559988] and [3560841] __import__ local writer, reader, languages
    and parsers for Python 2.7 up.
  - Fix import of PIL.Image.
  - Change default of `syntax_highlight`_ option to "long",
    basic syntax highlight styles for LaTeX and HTML.

* docutils/io.py

  - FileInput/FileOutput: no system-exit on IOError.  The `handle_io_errors`
    option is ignored and will be removed in a future release.
  - Fix Py3k error writing to stdout with encoding differing from default.
  - Fix opening binary files under Py3k (thanks to Dominic Fitzpatrick).

* docutils/parsers/rst/directives/misc.py

  - Fix [ 3546533 ] Unicode error with "date" directive.

* docutils/transforms/universal.py

  - SmartQuotes transform for typographic quotes and dashes.

* docutils/utils/__init__.py

  - `normalize_language_tag()` now returns `BCP 47`_ conforming tags
    with sub-tags separated by ``-``.

* docutils/writers/html4css1/__init__.py

  - Use ``<code>`` tag for inline "code",
    do not drop nested inline nodes (syntax highlight tokens).
  - Customizable MathJax URL (based on patch by Dmitry Shachnev).
  - No line break after opening inline math tag.

* docutils/writers/manpage.py

  - Apply [ 3527401 ] admonition's don't preserve indentation
  - Apply [ 3527397 ] Add indentation to literal blocks in manpage writer.

* docutils/writers/xetex/__init__.py

  - Apply [ 3555160 ] ensure order of "otherlanguages".
  - Fix section numbering by LaTeX.

* docutils/writers/s5_html/__init__.py

  - Fix [ 3556388 ] MathJax does not work with rst2s5.

* docutils/writers/docutils_xml.py

  - Fix [ 3552403 ] Prevent broken PyXML replacing stdlibs xml module.
  - Fix/improve output with `indents`_ setting.

* setup.py

  - Tag ``math.css`` stylesheet as data file (patch by Dmitry Shachnev).

* tools/test/test_buildhtml.py

  - Fix [ 3521167 ] allow running in any directory.
  - Fix [ 3521168 ] allow running with Python 3.


Release 0.9.1 (2012-06-17)
==========================

* setup.py

  - Fix [ 3527842 ]. Under Python 3, converted tests and tools were
    installed in the PYTHONPATH. Converted tests are now
    stored in ``test3/``, tools no longer need conversion.

    If you installed one of Docutils versions 0.7 ... 0.9 with
    ``setup.py install`` under Python 3, remove the spurious
    ``test/`` and ``tools/`` directories in the site library root.

* test/

  - Make tests independent from the location of the ``test/`` directory.
  - Use converted sources (from the ``build/`` directory) for tests under
    Python 3.

* tools/

  - Make tools compatible with both, Python 2 and 3 without 2to3-conversion.

* docutils/io.py

  - Fix writing binary data to sys.stdout under Python 3 (allows
    ``rst2odt.py`` to be used with output redirection).

* docutils/parsers/rst/directives/misc.py

  - Fix [ 3525847 ]. Catch and report UnicodeEncodeError with
    ``locale == C`` and 8-bit char in path argument of `include` directive.

* test/alltests.py

  - class `Tee`: catch  `UnicodeError` when writing to "ascii" stream or
    file under Python 3.


Release 0.9 (2012-05-02)
========================

* General:

  - New reStructuredText "code" role and directive and "code" option
    of the "include" directive with syntax highlighting by Pygments_.
  - Fix parse_option_marker for option arguments containing ``=``.
  - Fix [ 2993756 ]: import Python Imaging Library's Image module
    via ``import PIL`` as starting with PIL 1.2,
    "PIL lives in the PIL namespace only" (announcement__).

.. .. _Pygments: https://pygments.org/
__ https://mail.python.org/pipermail/image-sig/2011-January/006650.html

* setup.py

  - Fix [ 2971827 ] and [ 3442827 ]
    extras/roman.py moved to docutils/utils/roman.py

* docutils/frontend.py

  - Fix [ 3481980 ] Use `os.getcwdu()` in `make_paths_absolute()`.

* docutils/io.py

  - Fix [ 3395948 ] (Work around encoding problems in Py3k).
  - `mode` argument for FileOutput avoids code replication in
    BinaryFileOutput.
  - New exceptions  `InputError` and  `OutputError` for IO errors in
    FileInput/FileOutput.

* docutils/core.py

  - No "hard" system exit on file IO errors: catch and report them in
    `Publisher.reportException` instead. Allows handling by a calling
    application if the configuration setting `traceback`_ is True.

* docutils/utils.py -> docutils/utils/__init__.py

  - docutils.utils is now a package (providing a place for sub-modules)

  - DependencyList uses io.FileOutput and 'utf-8' encoding to prevent
    errors recording non-ASCII filenames (fixes [ 3434355 ]).

  - Fix `relative_path()` with source=None and `unicode` target.

* docutils/parsers/rst/states.py

  - Fix [ 3402314 ] allow non-ASCII whitespace, punctuation
    characters and "international" quotes around inline markup.
  - Use `field_marker` pattern to look for start of a
    directive option block (fixes [ 3484857 ]).

* docutils/parsers/rst/tableparser.py

  - Fix [ 2926161 ] for simple tables.
    (Combining chars in grid tables still contribute to cell width.)

* docutils/writers/latex2e/__init__.py

  - Support the `abbreviation` and `acronym` standard roles.
  - Record only files required to generate the LaTeX source as dependencies.
  - Fix handling of missing stylesheets.
  - Use ``\setcounter{secnumdepth}{0}`` instead of ``*``-versions
    when suppressing LaTeX section numbering.
  - Use ``\DUtitle`` for unsupported section levels.
  - Apply [ 3512791 ] do not compare string literals with "is".

* docutils/writers/xetex/__init__.py

  - Avoid code duplication with latex2e writer (solves [ 3512728 ]).

* docutils/writers/html4css1/__init__.py

  - Change default for `math_output`_ setting to MathJax.
  - Fix handling of missing stylesheets.

* docutils/writers/docutils_xml.py

  - Use the visitor pattern with `default_visit()`/`default_depart()` methods
    instead of minidom to facilitate special handling of selected nodes.
  - Support raw XML (inserted as-is inside a <raw></raw> node).

* docutils/writers/manpage.py

  - Do not emit comment line with trailing blank. Problematic for VCS.


Release 0.8.1 (2011-08-30)
==========================

* General:

  - Fix [ 3364658 ] (Change last file with Apache license to BSD-2-Clause)
    and [ 3395920 ] (correct copyright info for rst.el).

* test/

  -  Apply [ 3303733 ] and [ 3365041 ] to fix tests under Py3k.

* docutils/writers/latex2e/__init__.py

  - Clean up Babel language setting. Restores Sphinx compatibility.


Release 0.8 (2011-07-07)
========================

* General:

  - Handle language codes according to `BCP 47`_.
  - If the specified language is not supported by Docutils,
    warn and fall back to English.
  - Math support: reStructuredText "math" role and directive,
    `math` and `math_block` doctree elements.
  - Decode command line arguments with the locale's preferred encoding
    (to allow, e.g., ``--title=Dornröschen``).
  - Orphaned `python` reader and `newlatex2e` writer moved to the sandbox.
  - New sub-module `error_reporting`: handle encoding/decoding errors
    when reporting exceptions.
  - Some additions to the Docutils core are released under the 2-Clause BSD
    license, see COPYING_ for details.

  .. _BCP 47: https://www.rfc-editor.org/rfc/bcp/bcp47.txt
  .. _COPYING: COPYING.html

* reStructuredText:

  - Most directives now support a "name" option that attaches a
    reference name.

  - Directive content may start on the first line also when the directive
    type accepts options.

* docs/dev/policies.txt

  - Recommend the 2-Clause BSD license
    (http://opensource.org/licenses/BSD-2-Clause)
    for code that is kept under the author's copyright.

* tools/buildhtml.py

  - Fix ``--local`` switch.

* Fix [ 3018371 ] Added Lithuanian mappings by Dalius Dobravolskas.

* docutils/writers/html4css1/__init__.py

  - Set "lang" argument for objects with class argument
    "language-<language tag>".
  - New setting `math_output`_ with support for HTML, MathML, and LaTeX.

* docutils/writers/latex2e/__init__.py

  - Fix [ 3043986 ]  `AttributeError` using :local: with table of content.
  - Place title data in the document preamble.
  - Load `babel` package only if required.
  - Update list of supported languages.
  - New config setting `hyperref_options`_.
    No hard-coded "unicode" hyperref option (clash with xetex).
  - Set language for custom roles, paragraphs, block-quotes, and
    line-quotes with class argument "language-<language tag>".
  - Fix [ 3095603 ] wrong quotes output for Russian and other languages.
  - Convert image URI to a local file path.
  - Apply [ 3148141 ] fix multicolumn support when a colspanning cell
    has more than one paragraph (Wolfgang Scherer).
  - \leavevmode before longtable only when needed (prevents spurious vspace)
  - do not advance table counter for tables without caption

* docutils/writers/xetex/__init__.py

  - New writer generating LaTeX code for compiling with ``xelatex``.

    A separate writer (inheriting from latex2e) instead of a ``--xetex``
    option allows separate config options for XeTeX vs. LaTeX2e.

* docutils/writers/manpage.py

  - Fix: BUG#3219183 - vertical space in definition lists containing markup.
  - Fix: vertical space cleaning for option group ``.``.

* tools/editors/emacs/rst.el

  - Fix [ 3001100 ] does not handle spaces in filenames.
    Thanks to Jakub Wilk.

* docutils/utils.py

  - strip whitespace from stylesheet arguments
  - exclude combining chars from column_width()
    (partial fix for [ 2926161 ])

* docutils/parsers/rst/directives/misc.py

  - Fix [ 1830389 ] Replace not breaking on getting system_messages from
    nested_parse

* docutils/io.py

  - Do not ``close()`` `sys.stdin`, `sys.stdout`, or `sys.stderr`. Prevents
    ``Exception ValueError: 'I/O operation on closed file.'`` with Python 3.


Release 0.7 (2010-07-07)
========================

* General:

  - Fix [ 2881769 ] setup configuration.
  - Fix [ 2788716 ] reporting problems in included files.

* docutils/io.py

  - FileInput opens files as text files with universal newline support
    (mode "rU", configurable with the new optional argument "mode").

* docutils/nodes.py

  - Fix [ 2975987 ] repr(Text) failed with long string (Jeffrey C. Jacobs).

* docutils/utils.py

  - Fix [ 2923723 ] let `decode_path()` tolerate ``path == None``.

* docutils/writers/html4css1/__init__.py

  - Support SVG and SWF images (thanks to Stefan Rank).
  - Generate valid XHTML for centred images with targets.
    Use CSS classes instead of "align" tags for image alignment.

* docutils/writers/latex2e/__init__.py

  - Use `transforms.writer_aux.Admonitions` to "normalize" special
    admonitions.
  - Use the ``\url`` command for URLs (breaks long URLs instead of
    writing into the margin).
  - Preserve runs of spaces in `inline literals`__.
  - Deprecate `figure_footnotes`_ setting.
  - Rename `use_latex_footnotes`_ setting to `docutils_footnotes`_.
  - New `latex_preamble`_ setting.
  - Use PDF standard fonts (Times/Helvetica/Courier) as default.
  - Fix hyperlink targets (labels) for images, figures, and tables.
  - Apply [ 2961988 ] Load babel after inputenc and fontenc.
  - Apply [ 2961991 ] Call hyperref with unicode option.
  - Drop the special `output_encoding`_ default ("latin-1").
    The Docutils wide default (usually "UTF-8") is used instead.
  - Render inline markup in document title and subtitle.
  - Fix numbering depth with LaTeX section numbering.
  - Update Unicode -> LaTeX translations.
  - Fix bug with topic directive (thanks to Alan G Isaac for reporting).

__ docs/ref/restructuredtext.html#inline-literals

* docutils/writers/manpage.py

  - Fix: supported attribute (thanks to peter2108).
  - Remove trailing blanks in code (keep in sync with mercurial version).
  - Titles level 1, that is ``.SH``, always uppercase.
  - Apply patch from mg: literal text should be bold in man-pages.

* docutils/nodes.py

  - Fix: encoding ``'ascii'`` must be lowercase to prevent problems for
    Turkish locale.

* setup.py

  - Python 3 support: copy test/ and tools/ to the build-dir
    and convert Python sources with 2to3.


Release 0.6 (2009-10-11)
========================

* General:

  - Docutils is now compatible with Python versions from 2.3 up to 2.6
    and convertible to 3.1 code.

    + Node.__nonzero__ returns True instead of 1.
    + use os.walk instead os.path.walk.
    + minimize `types` module where possible.
    + Backwards-compatible changes to remove python2.6 -3 deprecation warnings
    + Text nodes now subclass unicode rather than UserString
      (which is gone in python 3.0).
    + 3.0 compatibility module docutils._compat

    + Drop 2.2 compatibility workarounds.
    + Drop extras/optparse.py and extras/textwrap.py
      (stdlib modules since 2.3).

  - OpenOffice export: ODT writer moved from sandbox to Docutils core.
  - Unix man page export: manpage writer moved from sandbox to Docutils
    core.

  - Apply [ 1719345 ] Galician translation
  - Apply [ 1905741 ] Polish translation
  - Apply [ 1878977 ] make_id(): deaccent characters.
  - Apply [ 2029251 ] return nonzero when tests fail.
  - Fix [ 1692788 ] allow UTF-8 in style sheets.
  - Fix [ 2781629 ] support non-ASCII chars in file names.
  - Apply [ 2845002 ] let ``--no-raw`` disable raw *roles* too.
  - Fix [ 2831643 ] renaming `DirectiveError.message` to `DirectiveError.msg`
  - Fix [ 2821266 ] ``--strict`` option works now like ``--halt=info``.
  - Fix [ 2788716 ]  `DirectiveError` now correctly reports source and line.
  - Fix [ 1627229 ] hyperlink references in substitutions.

  - The `newlatex` writer is orphaned.

* reStructuredText:

  - Documented Unicode characters allowed as inline markup openers,
    closers, and delimiters.
  - Allow units for all length specifications.
  - Allow percent sign in "scale" argument of "figure" and "image" directives.
  - Bugfix: The "figalign" argument of a figure now works as intended
    (aligning the figure, not its contents).
  - Align images with class "align-[right|center|left]"
    (allows setting the alignment of an image in a figure).

* docutils/nodes.py:

  - Added `Element.__contains_()` method, for the in-operator.

* docutils/parsers/rst/states.py:

  - Apply [ 1994493 ] Patch to support all kinds of quotes in inline markup.
  - Added support for Unicode inline markup delimiters "‐ ‑ ‒ – —" and
    " " (non-breaking space), and "¡ ¿" openers.

* docutils/parsers/directives/misc.py:

  - Added ``start-line`` and ``end-line`` options to "include"
    directive to select a range of lines.
  - Hard tabs in literal inclusions are replaced by spaces. This is
    configurable via the new ``tab-width`` option of the "include" directive
    (a negative tab-width prevents tab expansion).

* docutils/utils.py:

  - Add `get_stylesheet_lis()` function.
  - Apply [ 2834836 ] print info at halt

* docutils/transforms/universal.py:

  - Raise default priority of StripClasses to exclude stripped classes from
    the ToC.

* docutils/writers/html4css1/__init__.py:

  - `stylesheet`_ and `stylesheet_path`_ settings support a comma
    separated list of stylesheets.
  - Address [ 1938891 ] Inline literal text creates "pre" span only when
    needed to prevent inter-word line wraps.
  - Use `translate()` method instead of repeated `replace()` calls.
  - Fix [ 1757105 ] New `table_style`_ setting. Added to standard table
    classes to allow CSS styling that does not interfere with other
    table-using constructs (field lists, citations, ...).

* docutils/writers/newlatex2e/__init__.py:

  - Apply [ 1612821 ] Double quotes in literal text in Italian/German

* docutils/writers/latex2e/__init__.py:

  - Add `embed_stylesheet`_ setting.
  - Apply [ 1474017 ] image vertical alignment is reversed.
  - Apply [ 2051599 ] multi-page tables in latex writer (from pabigot).
  - Change: has_key for dictionaries (not Nodes) to in-operator.
  - Merge adjacent citations into one latex cite command.
  - Failsafe implementation of custom roles. LaTeX compilation now ignores
    unknown classes instead of aborting with an error.
  - Support custom roles based on standard roles.
  - LaTeX packages can be used as `stylesheet`_ arguments without
    restriction. (A style sheet is now referenced with the ``\usepackage``
    command, if it ends with ``.sty`` or has no extension.)
  - Add ``bp`` to lengths without unit (prevents LaTeX errors).
  - Correctly write length unit ``pt`` as ``bp`` in LaTeX.
  - Do not convert ``px`` to ``pt`` (``px`` is supported by pdfTeX since
    2005-02-04 as a configurable length unit).
  - Do not use fontenc, nor the obsolete 'ae' and 'aeguill' packages
    if font-encoding is set to ''. LaTeX defaults to OT1 then.
  - Set sub- and superscript role argument in text mode not as math.
    Use a custom role based on sub-/superscript if you want italic shape.
  - Shorter preamble and less dependencies: Load packages and define macros
    only if required in the document.
  - Use the name prefix ``DU`` for all Docutils specific LaTeX macros.
  - New custom environments and commands with optional "classes" argument.
  - Simpler LaTeX encoding, e.g. "\%" instead of "{\%}".
  - Better conformance to Docutils specifications with `use_latex_toc`_.
    Support for LaTeX generated ToC also with unnumbered sections.
  - If 'sectnum_xform' is False, the 'sectnum' directive triggers
    section numbering by LaTeX.
  - Use default font in admonitions and sidebar.
  - Align of image in a figure defaults to 'center'.
  - Bugfix: Newlines around targets and references prevent run-together
    paragraphs.
  - Fix internal hyperlinks.
  - Use class defaults for page margins ('typearea' now optional).
  - Float placement made configurable, default changed to "here definitely".
  - Typeset generic topic as "quote block with title".
  - Use template (file and configuration option).
  - In the default template, load cmap.sty (fix text extraction in PDF) and
    fixltx2e.sty (LaTeX patches, \textsubscript).
  - Render doctest blocks as literal blocks (fixes [ 1586058 ]).
  - Use `translate()` instead of repeated `replace()` calls for text encoding.
  - Hyperlinked footnotes and support for symbol footnotes and
    ``--footnote-references=brackets`` with ``--use-latex-footnotes``.
  - Complete pairs of binary options
    (``--figure-footnotes, --figure-citations, --link-stylesheet``,
    ``--use-docutils-toc, --use-docutils-docinfo, --topic-abstract``)
  - New defaults:
    - font-encoding: "T1" (formerly implicitly set by 'ae').
    - use-latex-toc: true (ToC with page numbers).
    - use-latex-footnotes: true (no mixup with figures).

* docutils/writers/manpage.py

  - Do not print version at document end, this is done by the viewer.
  - Do not print date at document end, this is done by the viewer.
  - Fix storage of docinfo fields for none standard fields.

* docutils/tools/rst2man.py


Release 0.5 (2008-06-25)
========================

* docutils/languages/he.py: Added to project: Hebrew mappings by
  Meir Kriheli.

* docutils/parsers/rst/languages/he.py: Added to project: Hebrew
  mappings by Meir Kriheli.

* docutils/frontend.py:

  - Configuration files are now assumed and required to be
    UTF-8-encoded.
  - Paths of applied configuration files are now recorded in the
    runtime setting `_config_files`_ (accessible via `dump_settings`_).
  - Added `strip_elements_with_classes`_ and `strip_classes`_ settings.

* docutils/io.py:

  - Added code to determine the input encoding from data: encoding
    declarations or the presence of byte order marks (UTF-8 & UTF-16).
  - Added support for IronPython 1.0.

* docutils/nodes.py:

  - Added `document.__getstate_()` method, for pickling.

* docutils/parsers/rst/states.py:

  - Allow ``+`` and ``:`` in reference names.
  - Unquoted targets beginning with an underscore (``.. __target:
    URI``) are no longer accepted.
  - Added support for multiple attributions in a physical block quote
    (indented text block), dividing it into multiple logical block
    quotes.
  - Added support for unicode bullets in bullet lists: "•", "‣", and
    "⁃".
  - Added support for new object-oriented directive interface,
    retaining compatibility to the old functional interface.
  - Added support for throwing `DirectiveError`'s from within
    directive code.

* docutils/parsers/rst/__init__.py:

  - Added `Directive` base class.
  - Added `DirectiveError` base class.
  - Fixed `file_insertion_enabled`_ & `raw_enabled`_ setting
    definitions.

* docutils/parsers/directives/:

  - Refactored all reStructuredText directives to use the new
    object-oriented directive interface.  Errors are now (mostly)
    thrown using the new `DirectiveError` class.

* docutils/parsers/directives/misc.py:

  - Added ``start-after`` and ``end-before`` options to ``include``
    directive; thanks to Stefan Rank.

* docutils/transforms/universal.py:

  - Added `StripClassesAndElements` transform to remove from the
    document tree all elements with classes in
    `strip_elements_with_classes`_ and all "classes"
    attribute values in `strip_classes`_

* docutils/transforms/writer_aux.py:

  - Added `Admonitions` transform to transform specific admonitions
    (like "note", "warning", etc.) into generic admonitions with a
    localized title.

* docutils/writers/html4css1/__init__.py:

  - Moved template functionality from the PEP/HTML writer here.
  - Expanded the fragments available in the ``parts`` attribute.
  - Moved ``id`` attributes from titles to surrounding ``div``
    elements.
  - Dropped all ``name`` attributes of ``a`` elements (``id`` is
    universally supported now).
  - ``template.txt`` is now opened in text mode instead of binary mode
    (to ensure Windows compatibility).
  - ``a`` elements now have an "internal" or "external" class,
    depending on reference type.

* docutils/writers/html4css1/template.txt: Added to project.

* docutils/writers/pep_html/:

  - Moved template functionality to the HTML writer.

* docutils/writers/s5_html/__init__.py:

  - Added `view_mode`_ & `hidden_controls`_ settings.

* docutils/writers/latex2e/__init__.py:

  - Add `literal_block_env`_.
  - Fix: escaping ``%`` in href urls.
  - Move usepackage hyperref after stylesheet inclusion.
  - Fix: scrartcl does not have chapter but scrreprt.
  - Add newline after ``\end{verbatim}``.
  - Merge smaller differences from latex2e_adaptive_preamble.
  - Add ``use-part-section``.
  - Put leavevmode before longtable to avoid having it moved before sub/pargraph.
  - Using leavemode option_list no longer needs to check if parent
    is a definition list.
  - Append ``\leavemode`` to definition list terms.
  - No longer write visit\_/depart_definition_list_item comments to
    output.
  - Table column width with 3 decimal places.
  - Add table stubs support (boldfont).
  - Add assemble_parts to writer.
  - Add simply support for nested tables.
  - Fix verbatim in tables if use-verbatim-when-possible.
  - Use section commands down to subparagraph.
  - Put ensuremath around some latin1 chars.
  - Set ``usepackage[utf8x]{inputenc}`` for utf-8.
  - New experimental setting `use_bibtex`_.
  - New setting `reference_label`_ to allow usage of LaTeX ref for
    labels in section references.
  - Add a label after every section to support sectionnumbers as reference
    labels.
  - Fix: bug# 1605376 rst2latex: bad options group list
  - Remove inactive code for use_optionlist_for_option_list.
  - Remove latex comments from option_list output.
  - Fix: bug# 1612270 double quotes in italian literal.
  - Fix: output ``hypertarget{ node.get(refid) }{}`` from visit_target.
  - Add setting `use_latex_abstract`_.
  - Image width unit ``px`` is translated to ``pt``.
  - Add image height support.
  - Fix: image width ``70%`` is converted ``0.700\linewidth``.
    bug #1457388
  - Fix: Do not escape underscores in citation reference labels if
    use-latex-citations is set.
  - Use centering instead of center for figure contents, to avoid vertical
    space.
  - Recognize table class: borderless, nolines, booktabs, standard.
  - Fix: Renaming contents section does not work with latex writer; SF
    bug #1487405.
  - Applied patch for custom roles with classes from Edward Loper.
  - Fixed bug that caused crashes with more than 256 lists.

* docutils/writers/pep_html/__init__.py:

  - Changed to support new python.org website structure and
    pep2pyramid.py.

* docs/howto/security.txt: "Deploying Docutils Securely", added to
  project.

* tools/buildhtml.py:

  - Add `ignore`_ setting to exclude a list of shell patterns
    (default: ``.svn:CVS``).

* tools/editors/emacs/rst.el:

  - Changed license to "GPL".
  - Added ``rst-straighten-decorations`` function.
  - The ``compile`` module is now always loaded.
  - Added ``rst-toggle-line-block`` function.
  - Headings consisting only of non-ASCII characters are now
    recognized by ``rst-toc`` and ``rst-adjust``.
  - Added font-lock support for multi-line comments where the first
    comment line is empty.
  - Added ``(require 'font-lock)``.

* setup.py:

  - Provide descriptive error message if distutils is missing.


Release 0.4 (2006-01-09)
========================

* General:

  - Updated the project policies for trunk/branch development &
    version numbering.

* docutils/__init__.py:

  - Added ``__version_details__`` attribute to describe code source
    (repository/snapshot/release).
  - Replaced ``default_transforms`` attribute of ``TransformSpec`` with
    ``get_transforms()`` method.

* docutils/core.py:

  - Added ``publish_doctree`` and ``publish_from_doctree`` convenience
    functions, for document tree extraction and reprocessing.

* docutils/io.py:

  - Added ``DocTreeInput`` class, for reprocessing existing documents.
  - Added support for non-Unicode (e.g. binary) writer output.

* docutils/nodes.py:

  - Re-introduced ``Targetable.indirect_reference_name``, for
    MoinMoin/reST compatibility (removed in r3124/r3129).
  - Added ``serial_escape`` function; escapes string values that are
    elements of a list, for serialization.  Modified Docutils-XML
    writing (``Element._dom_node``) and pseudo-XML writing
    (``Element.starttag``) to use ``serial_escape``.
  - Added ``Node.deepcopy()`` method.
  - Removed the internal lists ``document.substitution_refs``,
    ``document.anonymous_refs``, and ``document.anonymous_targets``.
  - Added a "container" element.
  - Fixed bug where values of list-valued attributes of elements
    originating from custom interpreted text roles (i.e., with custom
    classes) were being shared between element instances.  Reported by
    Shmuel Zeigerman.

* docutils/statemachine.py:

  - Added trailing whitespace stripping to ``string2lines()``.
  - Added ``StringList.pad_double_width()`` & ``.replace()`` for East
    Asian double-width character support.

* docutils/utils.py:

  - Added ``east_asian_column_width()`` for double-width character
    support.

* docutils/languages/ja.py: Added to project: Japanese mappings by
  Hisashi Morita.

* docutils/languages/zh_cn.py: Added to project: Simplified Chinese
  mappings by Panjunyong.

* docutils/parsers/null.py: Added to project; a do-nothing parser.

* docutils/parsers/rst/__init__.py:

  - Added validator to "tab_width" setting, with test.  Closes SF bug
    #1212515, report from Wu Wei.

* docutils/parsers/rst/states.py:

  - Fixed bug with escaped colons indicating a literal block.
  - Fixed bug with enumerated lists (SF#1254145).
  - Backslash-escaped colons inside of field names are now allowed.
  - Targets (implicit and explicit), anonymous hyperlink references
    and auto-numbered footnote references inside of substitution
    definitions are now disallowed.
  - Fixed bug: list items with blank first lines.
  - Fixed bug: block quote attributions with indented second lines.
  - Added East Asian double-width character support (Python 2.4 only).

* docutils/parsers/rst/tableparser.py:

  - Added East Asian double-width character support (Python 2.4 only).

* docutils/parsers/rst/directives/body.py:

  - Added the "container" directive.

* docutils/parsers/rst/directives/misc.py:

  - Added the "default-role", "title", and "date" directives.
  - Added standard data file syntax to the "include" directive.
  - Added support for "class" directive content.

* docutils/parsers/rst/directives/images.py:

  - Added ``indirect_reference_name`` support for images with a target
    option.
  - Added support for image width and height units.
  - Fixed bug with image "target" options.

* docutils/parsers/rst/directives/references.py:

  - Added "class" attribute to "target-notes" directive, for
    footnote_reference classes.

* docutils/parsers/rst/include/: Directory added to project; contains
  standard data files for the "include" directive.  Initial contents:
  character entity substitution definition sets, and a set of
  definitions for S5/HTML presentations.

* docutils/parsers/rst/languages/ja.py: Added to project: Japanese
  mappings by David Goodger.

* docutils/parsers/rst/languages/zh_cn.py: Added to project:
  Simplified Chinese mappings by Panjunyong.

* docutils/readers/__init__.py:

  - Added universal.Decorations and universal.ExposeInternals
    transforms as default transforms for all readers.
  - Added ``ReReader`` base class for readers that reread an existing
    document tree.

* docutils/readers/doctree.py: Added to project; a reader for existing
  document trees.

* docutils/transforms/frontmatter.py:

  - Fixed the DocInfo transform to handle SVN-style expansion of the
    "Date" keyword.
  - In ``DocInfo.extract_authors``, treat the contents of "authors"
    fields uniformly.

* docutils/transforms/misc.py:

  - Added misc.Transitions transform, extracted from
    universal.FinalChecks.

* docutils/transforms/references.py:

  - Added references.DanglingReferences transform, extracted from
    universal.FinalChecks.
  - Fixed bug with doubly-indirect substitutions.
  - Added footnote_reference classes attribute to "TargetNotes".
  - Fixed bug with circular substitution definitions that put Docutils
    into an infinite loop.

* docutils/transforms/universal.py:

  - Added universal.ExposeInternals transform, extracted from
    universal.FinalChecks.
  - Removed universal.FinalChecks transform (logic has been moved to
    several new transforms).
  - Fixed bug with the "expose_internals" setting and Text nodes
    (exposed by the "rawsource" internal attribute).
  - Added the universal.StripComments transform, implementation of the
    "strip_comments" setting.

* docutils/transforms/writer_aux.py: Added to project; auxiliary
  transforms for writers.

  - Added ``Compound`` transform, which flattens compound paragraphs.

* docutils/writers/: Several writer modules (html4css1.py) were
  converted into packages.  Support modules and data files have been
  moved into the packages.  The stylesheets for the HTML writers are
  now installed along with the code, the code knows where to find
  them, and the default is to use them (actually, to embed them).
  Some adjustments to configuration files may be necessary.  The
  easiest way to obtain the new default behavior is to remove all
  settings whose name includes "stylesheet".

* docutils/writers/__init__.py:

  - Added universal.Messages and universal.FilterMessages transforms
    as default transforms for all writers.
  - Added ``UnfilteredWriter`` base class for writers that pass the
    document tree on unchanged.

* docutils/writers/docutils_xml.py:

  - Made ``xmlcharrefreplace`` the default output encoding error
    handler.

* docutils/writers/html4css1/:

  - Added support for image width and height units.
  - Made ``xmlcharrefreplace`` the default output encoding error
    handler.
  - Made ``--embed-stylesheet`` the default rather than
    ``--link-stylesheet``.
  - Moved "id" attribute from container (section etc.) to title's <a>
    tag, to be on the same tag as "name".
    (!!! To be reverted in Docutils 0.5.)
  - Added vertical space between fields of field lists.
  - Added ``--compact-field-lists`` option to remove vertical space in
    simple field lists.
  - Made cloaking of email addresses with ``--cloak-email-addresses``
    less obtrusive.
  - Fixed support for centered images.
  - Added support for class="compact" & class="open" lists.

* docutils/writers/latex2e/:

  - Underscores in citekeys are no longer escaped.

* docutils/writers/newlatex2e/unicode_map.py: Added to project;
  mapping of Unicode characters to LaTeX equivalents.

* docutils/writers/s5_html/: Package added to project; writer for
  S5/HTML slide shows.

* docs/dev/distributing.txt: Added to project; guide for distributors
  (package maintainers).

* docs/dev/hacking.txt: Added to project; guide for developers.

* docs/ref/doctree.txt:

  - Updated for plural attributes "classes", "ids", "names",
    "dupnames".
  - Added the "container" element.

* docs/ref/docutils.dtd:

  - Updated for plural attributes "classes", "ids", "names",
    "dupnames".

* docs/user/emacs.txt: Added to project; a document about Emacs
  support for reStructuredText and Docutils.

* docs/user/links.txt: Added to project; lists of Docutils-related
  links.

* docs/user/mailing-lists.txt: Added to project; information about
  Docutils-related mailing lists and how to access them.

* docs/user/slide-shows.txt: Added to project; example of and docs for
  the S5/HTML writer (``rst2s5.py`` front end).

* docs/ref/rst/definitions.txt: "reStructuredText Standard Definition
  Files", added to project.

* test/coverage.sh: Added to project; test coverage script.

* test/DocutilsTestSupport.py:

  - Added support for specifying runtime settings at the suite level.

* test/test_functional.py:

  - Added the ``clear_output_directory`` function.
  - Added support for ``_test_more`` functions in functional test
    config files.

* tools/rst2s5.py: Added to project; front end for the S5/HTML writer.

* tools/rstpep2html.py: Renamed from pep.py.

* tools/dev/create_unimap.py: Added to project; script to create the
  docutils/writers/unimap_latex.py mapping file.

* tools/dev/profile_docutils.py: Added to project; profiler script.

* tools/dev/unicode2rstsubs.py: Moved from tools/unicode2rstsubs.py.

* tools/editors/emacs/restructuredtext.el,
  tools/editors/emacs/rst-html.el, tools/editors/emacs/rst-mode.el:
  Removed from project; the functionality is now contained in rst.el.

* tools/editors/emacs/rst.el: Added to project.  Added many features
  and fixed many bugs.  See docs/user/emacs.txt for details.

* tools/stylesheets: Removed from project.  Stylesheets have been
  renamed and moved into writer packages.


Release 0.3.9 (2005-05-26)
==========================

* General:

  - Eliminated and replaced all uses of the old string attributes
    ``id``, ``name``, ``dupname`` and ``class`` with references to the
    new list attributes ``ids``, ``names``, ``dupnames`` and
    ``classes`` throughout the whole source tree.

* docutils/core.py:

  - Enabled ``--dump-*`` options when ``--traceback`` specified,
    allowing for easier debugging.
  - In ``Publisher.publish()``, expanded the generic top-level
    exception catching.

* docutils/examples.py:

  - Added ``internals`` function for exploration.

* docutils/io.py:

  - Fixed ``Input.decode`` method to apply heuristics only if no
    encoding is explicitly given, and to provide better reporting of
    decoding errors.
  - The ``Input.decode`` method now removes byte order marks (BOMs)
    from input streams.

* docutils/nodes.py:

  - ``image`` element class changed to subclass of Element, not
    TextElement (it's an empty element, and cannot contain text).
  - Added ``attr_defaults`` dictionary for default attribute values.
  - Added empty list as default value for the following attributes:
    ``ids``, ``names``, ``dupnames``, ``classes``, and ``backrefs``.
  - Added ``document.decoration`` attribute,
    ``document.get_decoration`` method, and ``decoration.get_header``
    & ``.get_footer`` methods.
  - Added ``Element.update_basic_atts()`` and ``Element.substitute()``
    methods.

* docutils/utils.py:

  - Removed ``docutils.utils.Reporter.categories``,
    ``docutils.utils.ConditionSet``, and all references to them, to
    simplify error reporting.

* docutils/languages/nl.py: Added to project; Dutch mappings by
  Martijn Pieters.

* docutils/parsers/rst/__init__.py:

  - Added settings: ``file_insertion_enabled`` & ``raw_enabled``.

* docutils/parsers/rst/states.py:

  - Added check for escaped at-mark to prevent email address recognition.
  - Fixed option lists to allow spaces inside ``<angle-bracketed option
    arguments>``.
  - Allowed whitespace in paths and URLs.
  - Added auto-enumerated list items.
  - Fixed bug that assumed ``.. _`` and ``.. |`` were invariably
    followed by text.
  - Added support for table stub columns.

* docutils/parsers/rst/directives/__init__.py:

  - Allowed whitespace in paths (``path`` function).
  - Added ``uri`` directive option conversion function.

* docutils/parsers/rst/directives/body.py:

  - Fixed illegal context bug with "topic" directive (allowed within
    sidebars; not within body elements).

* docutils/parsers/rst/directives/images.py:

  - Allowed whitespace (stripped) in "image" & "figure" directive URLs.
  - Added support for the ``file_insertion_enabled`` setting in the
    "figure" directive (disables "figwidth" option).
  - "image" directive: added checks for valid values of "align" option,
    depending on context.  "figure" directive: added specialized
    "align" option and attribute on "figure" element.
  - Made ":figwidth: image" option of "figure" directive work again.
  - Fixed bug with reference names containing uppercase letters
    (e.g. ``Name_``) in "target" option of "image" directive.

* docutils/parsers/rst/directives/misc.py:

  - Fixed "include" and "raw" directives to catch text decoding
    errors.
  - Allowed whitespace in "include" & "raw" directive paths.
  - Added support for ``file_insertion_enabled`` & ``raw_enabled``
    settings in "include" & "raw" directives.

* docutils/parsers/rst/directives/parts.py:

  - Added "header" & "footer" directives.
  - Fixed illegal context bug with "contents" directive (topics
    allowed within sidebars; not within body elements).

* docutils/parsers/rst/directives/tables.py:

  - Added "list-table" directive.
  - Caught empty CSV table bug.
  - Added support for the ``file_insertion_enabled`` setting in the
    "csv-table" directive.
  - Added ``stub-columns`` option to "csv-table" and "list-table"
    directives.

* docutils/parsers/rst/languages/nl.py: Added to project; Dutch
  mappings by Martijn Pieters.

* docutils/readers/standalone.py:

  - Added ``section_subtitles`` setting to activate or deactivate the
    ``SectSubTitle`` transform.

* docutils/transforms/frontmatter.py:

  - Added SectSubTitle transform to promote titles of lone
    subsections to subtitles.

* docutils/transforms/references.py:

  - Fixed mislocated internal targets bug, by propagating internal
    targets to the next node, making use of the newly added support
    for multiple names and IDs.
  - Fixed duplicate footnote label bug.
  - Replaced ``ChainedTargets`` with more generic ``PropagateTargets``
    transform.

* docutils/writers/html4css1.py:

  - Fixed unencoded stylesheet reference bug (characters like "&" in
    stylesheet references).
  - ``target`` nodes now appear as ``span`` tags (instead of ``a``
    tags).
  - Added support for multiple IDs per node by creating empty ``span``
    tags.
  - Added the ``field_name_limit`` & ``option_limit`` settings &
    support.
  - Added support for table stub columns.
  - Added support for the ``align`` attribute on ``figure`` elements.
  - Added the ``cloak_email_addresses`` setting & support.
  - Added ``html_prolog``, ``html_head``, ``html_body``,
    ``html_title``, & ``html_subtitle`` to parts dictionary exposed by
    ``docutils.core.publish_parts``.
  - Added support for section subtitles.

* docutils/writers/latex2e.py:

  - Fixed tables starting with more than one multirow cell.
  - Improved ``--use-latex-docinfo`` so that organization/contact/address
    fields are lumped with the last author field and appear on the
    titlepage.
  - Made sure the titlepage is always shown with ``--use-latex-docinfo``,
    even if the document has no title.
  - Made sure that latex doesn't fill in today's date if no date field
    was given.
  - Added support for section subtitles.

* docutils/writers/newlatex2e.py: Added to project; a new LaTeX writer
  (under development).

* docutils/writers/null.py: Added to project; a do-nothing Writer.

* docs/api/publisher.txt:

  - Added "``publish_parts`` Details" section.

* docutils/dev/repository.txt: Added to project; information about the
  Docutils Subversion repository.

* docs/ref/docutils.dtd:

  - Added a ``stub`` attribute to the ``colspec`` element via the
    ``tbl.colspec.att`` parameter entity.
  - Allowed topic elements within sidebars
  - Added an ``align`` attribute to the ``figure`` element.

* tools/rst2newlatex.py: Added to project; front end for the new LaTeX
  writer.


Release 0.3.7 (2004-12-24)
==========================

* docutils/frontend.py:

  - Added options: ``--input-encoding-error-handler``,
    ``--record-dependencies``, ``--leave-footnote-reference-space``,
    ``--strict-visitor``.
  - Added command-line and config file support for "overrides" setting
    parameter.

* docutils/io.py:

  - Added support for input encoding error handler.

* docutils/nodes.py:

  - Added dispatch_visit and dispatch_departure methods to
    NodeVisitor; useful as a hook for Visitors.
  - Changed structure of ``line_block``; added ``line``.
  - Added ``compound`` node class.
  - Added a mechanism for Visitors to transitionally ignore new node
    classes.

* docutils/utils.py:

  - Moved ``escape2null`` and ``unescape`` functions from
    docutils/parsers/rst/states.py.

* docutils/parsers/rst/roles.py:

  - Added "raw" role.
  - Changed role function API: the "text" parameter now takes
    null-escaped interpreted text content.

* docutils/parsers/rst/states.py:

  - Fixed bug where a "role" directive in a nested parse would crash
    the parser; the state machine's "language" attribute was not being
    copied over.
  - Added support for line block syntax.
  - Fixed directive parsing bug: argument-less directives didn't
    notice that arguments were present.
  - Removed error checking for transitions.
  - Added support for multiple classifiers in definition list items.
  - Moved ``escape2null`` and ``unescape`` functions to docutils/utils.py.
  - Changed role function API: the "text" parameter now takes
    null-escaped interpreted text content.
  - Empty sections and documents are allowed now.

* docutils/parsers/rst/directives/__init__.py:

  - Added ``encoding`` directive option conversion function.
  - Allow multiple class names in class_option conversion function.

* docutils/parsers/rst/directives/body.py:

  - Converted the line-block directive to use the new structure.
  - Extracted the old line-block functionality to the ``block``
    function (still used).
  - Added ``compound`` directive (thanks to Lea Wiemann).

* docutils/parsers/rst/directives/misc.py:

  - Added "encoding" option to "include" and "raw" directives.
  - Added "trim", "ltrim", and "rtrim" options to "unicode" directive.
  - Allow multiple class names in the "class" directive.

* docutils/parsers/rst/directives/parts.py:

  - Directive "sectnum" now accepts "prefix", "suffix", and "start"
    options.  Thanks to Lele Gaifax.

* docutils/parsers/rst/directives/tables.py:

  - Added "encoding" directive to "csv-table" directive.
  - Added workaround for lack of Unicode support in csv.py, for
    non-ASCII CSV input.

* docutils/transforms/misc.py:

  - Fixed bug when multiple "class" directives are applied to a single
    element.
  - Enabled multiple format names for "raw" directive.

* docutils/transforms/references.py:

  - Added support for trimming whitespace from beside substitution
    references.

* docutils/transforms/universal.py:

  - FinalChecks now checks for illegal transitions and moves
    transitions between sections.

* docutils/writers/html4css1.py:

  - HTMLTranslator.encode now converts U+00A0 to "&nbsp;".
  - "stylesheet" and "stylesheet_path" settings are now mutually
    exclusive.
  - Added support for the new line_block/line structure.
  - ``--footnote-references`` now overrides
    ``--trim-footnote-reference-space``, if applicable.
  - Added support for ``compound`` elements.
  - Enabled multiple format names for "raw" directive.
  - ``<p>`` tags of a paragraph which is the only visible child of the
    document node are no longer stripped.
  - Moved paragraph-compacting logic (for stripping ``<p>`` tags) to
    new method ``should_be_compact_paragraph()``.
  - Added class="docutils" to ``dl``, ``hr``, ``table`` and ``tt``
    elements.
  - "raw" elements are now surrounded by ``span`` or ``div`` tags in
    the output if they have their ``class`` attribute set.
  - The whole document is now surrounded by a ``<div
    class="document">`` element.
  - Body-level images are now wrapped by their own ``<div>`` elements,
    with image classes copied to the wrapper, and for images which
    have the ``:align:`` option set, the surrounding ``<div>`` now
    receives a class attribute (like ``class="align-left"``).

* docutils/writers/latex2e.py:

  - no newline after depart_term.
  - Added translations for some Unicode quotes.
  - Added option "font-encoding", made package AE the default.
  - `stylesheet`_ and `stylesheet_path`_ settings are now mutually
    exclusive.
  - ``--footnote-references`` now overrides
    ``--trim-footnote-reference-space``, if applicable.
  - The footnote label style now matches the footnote reference style
    ("brackets" or "superscript").
  - Added support for ``compound`` elements.
  - Enabled multiple format names for "raw" directive.

* docs/ref/docutils.dtd:

  - Changed structure of the ``line_block`` element; added ``line``.
  - Added ``compound`` element.
  - Added "ltrim" and "rtrim" attributes to
    ``substitution_definition`` element.
  - Enabled multiple format names for ``raw`` element.
  - Enabled multiple classifiers in ``definition_list_item`` elements.

* docs/ref/rst/directives.txt

  - Marked "line-block" as deprecated.
  - "Class" directive now allows multiple class names.
  - Added "Rationale for Class Attribute Value Conversion".
  - Added warning about "raw" overuse/abuse.

* docs/ref/rst/restructuredtext.txt:

  - Added syntax for line blocks.
  - Definition list items may have multiple classifiers.

* docs/ref/rst/roles.txt:

  - Added "raw" role.

* tools/stylesheets/default.css:

  - Added support for the new line_block structure.
  - Added "docutils" class to ``dl``, ``hr``, ``table`` and ``tt``.


Release 0.3.5 (2004-07-29)
==========================

General:

* _`Documentation cleanup/reorganization`.

  - Created new subdirectories of docs/:

    * ``docs/user/``: introductory/tutorial material for end-users
    * ``docs/dev/``: for core-developers (development notes, plans, etc.)
    * ``docs/api/``: API reference material for client-developers
    * ``docs/ref/``: reference material for all groups
    * ``docs/howto/``: for component-developers and core-developers
    * ``docs/peps/``: Python Enhancement Proposals

  - Moved ``docs/*`` to ``docs/user/``.
  - Moved ``pysource.dtd``, ``pysource.txt``, ``semantics.txt`` from
    ``spec/`` to ``docs/dev``.
  - Moved ``doctree.txt``, ``docutils.dtd``, ``soextblx.dtd``,
    ``transforms.txt`` from ``spec/`` to ``docs/ref/``.
  - Moved ``alternatives.txt``, and ``problems.txt`` from
    ``spec/rst/`` to ``docs/dev/rst/``.
  - Moved ``reStructuredText.txt``, ``directives.txt``,
    ``interpreted.txt``, and ``introduction.txt`` from ``spec/rst/``
    to ``docs/ref/rst/``.  Renamed ``interpreted.txt`` to
    ``roles.txt``, ``reStructuredText.txt`` to
    ``restructuredtext.txt``.
  - Moved ``spec/howto/`` to ``docs/howto``.

  In order to keep the CVS history of moved files, we supplied
  SourceForge with a script for modifying the Docutils CVS repository.

  After running the cleanup script:

  - Added ``docs/index.txt``.
  - Added a ``.htaccess`` file to the ``web`` module, containing
    redirects for all old paths to new paths.  They'll preserve
    fragments (the "#name" part of a URL), and won't clutter up the
    file system, and will correct the URL in the user's browser.
  - Added ``BUGS.txt``, ``docs/dev/policies.txt``,
    ``docs/dev/website.txt``, ``docs/dev/release.txt`` from all but
    the "To Do" list itself in ``docs/dev/todo.txt``.
  - Moved "Future Plans" from ``HISTORY.txt`` to new "Priorities"
    section of ``docs/dev/todo.txt``.
  - Added ``THANKS.txt`` from "Acknowledgements" in ``HISTORY.txt``.
  - Added "How To Report Bugs" to ``BUGS.txt``.
  - Went through all the sources and docs (including under web/) and
    updated links.  Mostly done by Lea Wiemann; thanks Lea!
    (Still need to update links in the sandboxes.)

Specific:

* BUGS.txt: Added to project.

* THANKS.txt: Added to project.

* docutils/__init__.py:

  - 0.3.4: Post-release.

* docutils/core.py:

  - Added special error handling & advice for UnicodeEncodeError.
  - Refactored Publisher.publish (simplified exception handling &
    extracted debug dumps).
  - Renamed "enable_exit" parameter of convenience functions to
    "enable_exit_status".
  - Enabled traceback (exception propagation) by default in
    programmatic convenience functions.
  - Now publish_file and publish_cmdline convenience functions return
    the encoded string results in addition to their regular I/O.
  - Extracted common code from publish_file, publish_string, and
    publish_parts, into new publish_programmatically.  Extracted
    settings code to ``Publisher.process_programmatic_settings``.
  - In Publisher.publish, disabled ``settings_overrides`` when
    ``settings`` is supplied; redundant.

* docutils/frontend.py:

  - Added help text for ``--output-encoding-error-handler`` and
    ``--error-encoding-error-handler``.
  - Renamed ``--exit`` to ``--exit-status``.
  - Simplified default-setting code.

* docutils/parsers/rst/__init__.py:

  - Added ``--pep-base-url`` and ``--rfc-base-url`` options.

* docutils/parsers/rst/states.py:

  - Made URI recognition more aggressive and intelligent.

* docutils/parsers/rst/directives/__init__.py:

  - Added several directive option conversion functions.

* docutils/parsers/rst/directives/body.py:

  - Moved "table" directive to tables.py.

* docutils/parsers/rst/directives/tables.py: Table-related directives,
  added to project.

* docutils/writers/latex2e.py:

  - Added ``--table-style=(standard|booktabs|nolines)``
  - figures get "here" option (LaTeX per default puts them at bottom),
    and figure content is centered.
  - Rowspan support for tables.
  - Fix: admonition titles before first section.
  - Replace ``--`` in literal by ``-{}-`` because fontencoding T1 has endash.
  - Replave ``_`` in literal by an underlined blank, because it has the correct
    width.
  - Fix: encode pdfbookmark titles, ``#`` broke pdflatex.
  - A few unicode replacements, if output_encoding != utf
  - Add `graphicx_option`_ setting.
  - Indent literal-blocks.
  - Fix: omit ``\maketitle`` when there is no document title.

* docs/index.txt: "Docutils Project Documentation Overview", added to
  project.

* docs/api/cmdline-tool.txt: "Inside A Docutils Command-Line Front-End
  Tool", added to project.

* docs/api/publisher.txt: "The Docutils Publisher", added to project.

* docs/api/runtime-settings.txt: "Docutils Runtime Settings", added to project.

* docs/dev/policies.txt: Added to project (extracted from
  ``docs/dev/todo.txt``, formerly ``spec/notes.txt``).

* docs/dev/release.txt: Added to project (extracted from
  ``docs/dev/todo.txt``, formerly ``spec/notes.txt``).

* docs/dev/testing.txt: Added to project.

* docs/dev/website.txt: Added to project (extracted from
  ``docs/dev/todo.txt``, formerly ``spec/notes.txt``).

* docs/ref/rst/directives.txt:

  - Added directives: "table", "csv-table".

* docs/user/rst/cheatsheet.txt: "The reStructuredText Cheat Sheet"
  added to project.  1 page for syntax, and a 1 page reference for
  directives and roles.  Source text to be used as-is; not meant to be
  converted to HTML.

* docs/user/rst/demo.txt: Added to project; moved from tools/test.txt
  with a change of title.

* test/functional/, contents, and test/test_functional.py: Added to
  project.

* tools/buildhtml.py: Fixed bug with config file handling.

* tools/html.py: Removed from project (duplicate of rst2html.py).

* tools/pep2html.py: Removed from project (duplicate of Python's
  nondist/peps/pep2html.py; Docutils' tools/pep.py can be used for
  Docutils-related PEPs in docs/peps/).

* tools/rst2pseudoxml.py: Renamed from publish.py.

* tools/rst2xml.py: Renamed from docutils-xml.py.

* tools/test.txt: Removed from project; moved to
  docs/user/rst/demo.txt.

* setup.py: Now also installs ``rst2latex.py``.


Release 0.3.3 (2004-05-09)
==========================

* docutils/__init__.py:

  - 0.3.1: Reorganized config file format (multiple sections); see
    docs/config.txt.
  - Added unknown_reference_resolvers attribute to TransformSpec.
  - 0.3.2: Interpreted text reorganization.
  - 0.3.3: Released.

* docutils/core.py:

  - Catch system messages to stop tracebacks from parsing errors.
  - Catch exceptions during processing report & exit without
    tracebacks, except when ``--traceback`` used.
  - Reordered components for OptionParser; application comes last.
  - Added "config_section" parameter to several methods and functions,
    allowing front ends to easily specify their config file sections.
  - Added publish_parts convenience function to allow access to individual
    parts of a document.

* docutils/examples.py: Added to project; practical examples of
  Docutils client code, to be used as-is or as models for variations.

* docutils/frontend.py:

  - Added "traceback" setting.
  - Implemented support for config file reorganization:
    ``standard_config_files`` moved from ``ConfigParser`` to
    ``OptionParser``; added
    ``OptionParser.get_config_file_settings()`` and
    ``.get_standard_config_settings()``; support for old "[options]"
    section (with deprecation warning) and mapping from old to new
    settings.
  - Reimplemented setting validation.
  - Enabled flexible boolean values: yes/no, true/false, on/off.
  - Added ``Values``, a subclass of ``optparse.Values``, with support
    for list setting attributes.
  - Added support for new ``DOCUTILSCONFIG`` environment variable;
    thanks to Beni Cherniavsky.
  - Added ``--no-section-numbering`` option.

* docutils/io.py:

  - Catch IOErrors when opening source & destination files, report &
    exit without tracebacks.  Added ``handle_io_errors`` parameter to
    ``FileInput`` & ``FileOutput`` to enable caller error handling.

* docutils/nodes.py:

  - Changed ``SparseNodeVisitor`` and ``GenericNodeVisitor`` dynamic
    method definitions (via ``exec``) to dynamic assignments (via
    ``setattr``); thanks to Roman Suzi.
  - Encapsulated visitor dynamic assignments in a function; thanks to
    Ian Bicking.
  - Added indirect_reference_name attribute to the Targetable
    class. This attribute holds the whitespace_normalized_name
    (contains mixed case) of a target.

* docutils/statemachine.py:

  - Renamed ``StringList.strip_indent`` to ``.trim_left``.
  - Added ``StringList.get_2D_block``.

* docutils/utils.py:

  - Added "level" attribute to SystemMessage exceptions.

* docutils/languages/af.py: Added to project; Afrikaans mappings by
  Jannie Hofmeyr.

* docutils/languages/cs.py: Added to project; Czech mappings by Marek
  Blaha.

* docutils/languages/eo.py: Added to project; Esperanto mappings by
  Marcelo Huerta San Martin.

* docutils/languages/pt_br.py: Added to project; Brazilian Portuguese
  mappings by Lalo Martins.

* docutils/languages/ru.py: Added to project; Russian mappings by
  Roman Suzi.

* docutils/parsers/rst/roles.py: Added to project.  Contains
  interpreted text role functions, a registry for interpreted text
  roles, and an API for adding to and retrieving from the registry.
  Contributed by Edward Loper.

* docutils/parsers/rst/states.py:

  - Updated ``RSTState.nested_parse`` for "include" in table cells.
  - Allowed true em-dash character and "``---``" as block quote
    attribution marker.
  - Added support for <angle-bracketed> complex option arguments
    (option lists).
  - Fixed handling of backslashes in substitution definitions.
  - Fixed off-by-1 error with extra whitespace after substitution
    definition directive.
  - Added inline markup parsing to field lists' field names.
  - Added support for quoted (and unindented) literal blocks.
    Driven in part by a bribe from Frank Siebenlist (thanks!).
  - Parser now handles escapes in URIs correctly.
  - Made embedded-URIs' reference text omittable.  Idea from Beni
    Cherniavsky.
  - Refactored explicit target processing code.
  - Added name attribute to references containing the reference name only
    through whitespace_normalize_name (no case changes).
  - parse_target no longer returns the refname after going through
    normalize_name. This is now handled in make_target.
  - Fixed bug relating to role-less interpreted text in non-English
    contexts.
  - Reorganized interpreted text processing; moved code into the new
    roles.py module.  Contributed by Edward Loper.
  - Refactored ``Body.parse_directive`` into ``run_directive`` and
    ``parse_directive_block``.

* docutils/parsers/rst/tableparser.py:

  - Reworked for ``StringList``, to support "include" directives in
    table cells.

* docutils/parsers/rst/directives/__init__.py:

  - Renamed ``unchanged()`` directive option conversion function to
    ``unchanged_required``, and added a new ``unchanged``.
  - Catch unicode value too high error; fixes bug 781766.
  - Beefed up directive error reporting.

* docutils/parsers/rst/directives/body.py:

  - Added basic "table" directive.

* docutils/parsers/rst/directives/images.py:

  - Added "target" option to "image" directive.
  - Added name attribute to references containing the reference name only
    through whitespace_normalize_name (no case changes).

* docutils/parsers/rst/directives/misc.py:

  - Isolated the import of the ``urllib2`` module; was causing
    problems on SourceForge (``libssl.so.2`` unavailable?).
  - Added the "role" directive for declaring custom interpreted text
    roles.

* docutils/parsers/rst/directives/parts.py:

  - The "contents" directive does more work up-front, creating the
    "topic" and "title", and leaving the "pending" node for the
    transform.  Allows earlier reference resolution; fixes subtle bug.

* docutils/parsers/rst/languages/af.py: Added to project; Afrikaans
  mappings by Jannie Hofmeyr.

* docutils/parsers/rst/languages/cs.py: Added to project; Czech
  mappings by Marek Blaha.

* docutils/parsers/rst/languages/eo.py: Added to project; Esperanto
  mappings by Marcelo Huerta San Martin.

* docutils/parsers/rst/languages/pt_br.py: Added to project; Brazilian
  Portuguese mappings by Lalo Martins.

* docutils/parsers/rst/languages/ru.py: Added to project; Russian
  mappings by Roman Suzi.

* docutils/transforms/parts.py:

  - The "contents" directive does more work up-front, creating the
    "topic" and "title", and leaving the "pending" node for the
    transform.  Allows earlier reference resolution; fixes subtle bug.
  - Added support for disabling of section numbering.

* docutils/transforms/references.py:

  - Verifying that external targets are truly targets and not indirect
    references. This is because we are now adding a "name" attribute to
    references in addition to targets. Note sure if this is correct!
  - Added code to hook into the unknown_reference_resolvers list for a
    transformer in resolve_indirect_target. This allows the
    unknown_reference_resolvers to keep around indirect targets which
    docutils doesn't know about.
  - Added specific error message for duplicate targets.

* docutils/transforms/universal.py:

  - Added FilterMessages transform (removes system messages below the
    verbosity threshold).
  - Added hook (via docutils.TransformSpec.unknown_reference_resolvers)
    to FinalCheckVisitor for application-specific handling of
    unresolvable references.
  - Added specific error message for duplicate targets.

* docutils/writers/__init__.py:

  - Added assemble_parts method to the Writer class to allow for
    access to a documents individual parts.
  - Documented & set default for ``Writer.output`` attribute.

* docutils/writers/html4css1.py:

  - Fixed unicode handling of attribute values (bug 760673).
  - Prevent duplication of "class" attribute values (bug report from
    Kirill Lapshin).
  - Improved table grid/border handling (prompted by report from Bob
    Marshall).
  - Added support for table titles.
  - Added "<title />" for untitled docs, for XHTML conformance; thanks
    to Darek Suchojad.
  - Added functionality to keep track of individual parts of a document
    and store them in a dictionary as the "parts" attribute of the writer.
    Contributed by Reggie Dugard at the Docutils sprint at PyCon DC 2004.
  - Added proper support for the "scale" attribute of the "image"
    element.  Contributed by Brent Cook.
  - Added ``--initial-header-level`` option.
  - Fixed bug: the body_pre_docinfo segment depended on there being a
    docinfo; if no docinfo, the document title was incorporated into
    the body segment.  Adversely affected the publish_parts interface.

* docutils/writers/latex2e.py:

  - Changed default stylesheet to "no stylesheet" to avoid latex complaining
    about a missing file.
  - Added options and support: ``--compound-enumerators``,
    ``--section-prefix-for-enumerators``, and
    ``--section-enumerator-separator``.  By John F Meinel Jr (SF patch
    934322).
  - Added option ``--use-verbatim-when-possible``, to avoid
    problematic characters (eg, '~' in italian) in literal blocks.
  - It's now possible to use four section levels in the `book` and
    `report` LaTeX document classes.  The default `article` class still has
    three levels limit.

* docs/config.txt: "Docutils Configuration Files", added to project.
  Moved config file entry descriptions from tools.txt.

* docs/tools.txt:

  - Moved config file entry descriptions to config.txt.

* spec/notes.txt: Continual updates.  Added "Setting Up For Docutils
  Development".

* spec/howto/rst-roles.txt: "Creating reStructuredText Interpreted
  Text Roles", added to project.

* spec/rst/reStructuredText.txt:

  - Added description of support for <angle-bracketed> complex option
    arguments to option lists.
  - Added subsections for indented and quoted literal blocks.

* test: Continually adding & updating tests.

  - Added test/test_settings.py & test/data/config_*.txt support
    files.
  - Added test/test_writers/test_htmlfragment.py.

* test/DocutilsTestSupport.py:

  - Refactored LaTeX publisher test suite/case class names to make
    testing other writers easier.
  - Added HtmlWriterPublishTestCase and HtmlFragmentTestSuite classes
    to test the processing of HTML fragments which use the new
    publish_parts convenience function.

* tools/buildhtml.py:

  - Added support for the ``--prune`` option.
  - Removed dependency on pep2html.py; plaintext PEPs no longer
    supported.

* tools/docutils.conf:

  - Updated for configuration file reorganization.

* tools/rst2html.py:

  - copied from tools/html.py

* setup.py:

  - added a 'scripts' section to configuration
  - added 'tools/rst2html.py' to the scripts section


Release 0.3 (2003-06-24)
========================

General:

* Renamed "attribute" to "option" for directives/extensions.

* Renamed transform method "transform" to "apply".

* Renamed "options" to "settings" for runtime settings (as set by
  command-line options).  Sometimes "option" (singular) became
  "settings" (plural).  Some variations below:

  - document.options -> document.settings (stored in other objects as
    well)
  - option_spec -> settings_spec (not directives though)
  - OptionSpec -> SettingsSpec
  - cmdline_options -> settings_spec
  - relative_path_options -> relative_path_settings
  - option_default_overrides -> settings_default_overrides
  - Publisher.set_options -> Publisher.get_settings

Specific:

* COPYING.txt: Added "Public Domain Dedication".

* FAQ.txt: Frequently asked questions, added to project.

* setup.py:

  - Updated with PyPI Trove classifiers.
  - Conditional installation of third-party modules.

* docutils/__init__.py:

  - Bumped version to 0.2.1 to reflect changes to I/O classes.
  - Bumped version to 0.2.2 to reflect changes to stylesheet options.
  - Factored ``SettingsSpec`` out of ``Component``; separately useful.
  - Bumped version to 0.2.3 because of the new ``--embed-stylesheet``
    option and its effect on the PEP template & writer.
  - Bumped version to 0.2.4 due to changes to the PEP template &
    stylesheet.
  - Bumped version to 0.2.5 to reflect changes to Reporter output.
  - Added ``TransformSpec`` class for new transform system.
  - Bumped version to 0.2.6 for API changes (renaming).
  - Bumped version to 0.2.7 for new ``docutils.core.publish_*``
    convenience functions.
  - Added ``Component.component_type`` attribute.
  - Bumped version to 0.2.8 because of the internal parser switch from
    plain lists to the docutils.statemachine.StringList objects.
  - Bumped version to 0.2.9 because of the frontend.py API changes.
  - Bumped version to 0.2.10 due to changes to the project layout
    (third-party modules removed from the "docutils" package), and
    signature changes in ``io.Input``/``io.Output``.
  - Changed version to 0.3.0 for release.

* docutils/core.py:

  - Made ``publish()`` a bit more convenient.
  - Generalized ``Publisher.set_io``.
  - Renamed ``publish()`` to ``publish_cmdline()``; rearranged its
    parameters; improved its docstring.
  - Added ``publish_file()`` and ``publish_string()``.
  - Factored ``Publisher.set_source()`` and ``.set_destination()``
    out of ``.set_io``.
  - Added support for ``--dump-pseudo-xml``, ``--dump-settings``, and
    ``--dump-transforms`` hidden options.
  - Added ``Publisher.apply_transforms()`` method.
  - Added ``Publisher.set_components()`` method; support for
    ``publish_*()`` conveninece functions.
  - Moved config file processing to docutils/frontend.py.
  - Added support for exit status ("exit_level" setting &
    ``enable_exit`` parameter for Publisher.publish() and convenience
    functions).

* docutils/frontend.py:

  - Check for & exit on identical source & destination paths.
  - Fixed bug with absolute paths & ``--config``.
  - Set non-command-line defaults in ``OptionParser.__init__()``:
    ``_source`` & ``_destination``.
  - Distributed ``relative_path_settings`` to components; updated
    ``OptionParser.populate_from_components()`` to combine it all.
  - Require list of keys in ``make_paths_absolute`` (was implicit in
    global ``relative_path_settings``).
  - Added ``--expose-internal-attribute``, ``--dump-pseudo-xml``,
    ``--dump-settings``, and ``--dump-transforms`` hidden options.
  - Removed nasty internals-fiddling ``ConfigParser.get_section``
    code, replaced with correct code.
  - Added validation functionality for config files.
  - Added ``--error-encoding`` option/setting, "_disable_config"
    internal setting.
  - Added encoding validation; updated ``--input-encoding`` and
    ``--output-encoding``; added ``--error-encoding-error-handler`` and
    ``--output-encoding-error-handler``.
  - Moved config file processing from docutils/core.py.
  - Updated ``OptionParser.populate_from_components`` to handle new
    ``SettingsSpec.settings_defaults`` dict.
  - Added support for "-" => stdin/stdout.
  - Added "exit_level" setting (``--exit`` option).

* docutils/io.py:

  - Split ``IO`` classes into subclasses of ``Input`` and ``Output``.
  - Added automatic closing to ``FileInput`` and ``FileOutput``.
  - Delayed opening of ``FileOutput`` file until ``write()`` called.
  - ``FileOutput.write()`` now returns the encoded output string.
  - Try to get path/stream name automatically in ``FileInput`` &
    ``FileOutput``.
  - Added defaults for source & destination paths.
  - Allow for Unicode I/O with an explicit "unicode" encoding.
  - Added ``Output.encode()``.
  - Removed dependency on runtime settings; pass encoding directly.
  - Recognize Unicode strings in ``Input.decode()``.
  - Added support for output encoding error handlers.

* docutils/nodes.py:

  - Added "Invisible" element category class.
  - Changed ``Node.walk()`` & ``.walkabout()`` to permit more tree
    modification during a traversal.
  - Added element classes: ``line_block``, ``generated``, ``address``,
    ``sidebar``, ``rubric``, ``attribution``, ``admonition``,
    ``superscript``, ``subscript``, ``inline``
  - Added support for lists of nodes to ``Element.insert()``.
  - Fixed parent linking in ``Element.replace()``.
  - Added new abstract superclass ``FixedTextElement``; adds
    "xml:space" attribute.
  - Added support for "line" attribute of ``system_message`` nodes.
  - Added support for the observer pattern from ``utils.Reporter``.
    Added ``parse_messages`` and ``transform_messages`` attributes to
    ``document``, removed ``messages``.  Added ``note_parse_message``
    and ``note_transform_message`` methods.
  - Added support for improved diagnostics:

    - Added "document", "source", and "line" internal attributes to
      ``Node``, set by ``Node.setup_child()``.
    - Converted variations on ``node.parent = self`` to
      ``self.setup_child(node)``.
    - Added ``document.current_source`` & ``.current_line``
      attributes, and ``.note_source`` observer method.
    - Changed "system_message" output to GNU-Tools format.

  - Added a "rawsource" attribute to the ``Text`` class, for text
    before backslash-escape resolution.
  - Support for new transform system.
  - Reworked ``pending`` element.
  - Fixed XML DOM bug (SF #660611).
  - Removed the ``interpeted`` element class and added
    ``title_reference``, ``abbreviation``, ``acronym``.
  - Made substitutions case-sensitive-but-forgiving; moved some code
    from the parser.
  - Fixed Unicode bug on element attributes (report: William Dode).

* docutils/optik.py: Removed from project; replaced with
  extras/optparse.py and extras/textwrap.py.  These will be installed
  only if they're not already present in the Python installation.

* docutils/roman.py: Moved to extras/roman.py; this will be installed
  only if it's not already present in the Python installation.

* docutils/statemachine.py:

  - Factored out ``State.add_initial_transitions()`` so it can be
    extended.
  - Converted whitespace-specific "blank" and "indent" transitions
    from special-case code to ordinary transitions: removed
    ``StateMachineWS.check_line()`` & ``.check_whitespace()``, added
    ``StateWS.add_initial_transitions()`` method, ``ws_patterns`` &
    ``ws_initial_transitions`` attributes.
  - Removed ``State.match_transition()`` after merging it into
    ``.check_line()``.
  - Added ``StateCorrection`` exception.
  - Added support for ``StateCorrection`` in ``StateMachine.run()``
    (moved ``TransitionCorrection`` support there too.)
  - Changed ``StateMachine.next_line()`` and ``.goto_line()`` to raise
    ``EOFError`` instead of ``IndexError``.
  - Added ``State.no_match`` method.
  - Added support for the Observer pattern, triggered by input line
    changes.
  - Added ``strip_top`` parameter to
    ``StateMachineWS.get_first_known_indented``.
  - Made ``context`` a parameter to ``StateMachine.run()``.
  - Added ``ViewList`` & ``StringList`` classes;
    ``extract_indented()`` becomes ``StringList.get_indented()``.
  - Added ``StateMachine.insert_input()``.
  - Fixed ViewList slice handling for Python 2.3.  Patch from (and
    thanks to) Fred Drake.

* docutils/utils.py:

  - Added a ``source`` attribute to Reporter instances and
    ``system_message`` elements.
  - Added an observer pattern to ``utils.Reporter`` to keep track of
    system messages.
  - Fixed bugs in ``relative_path()``.
  - Added support for improved diagnostics.
  - Moved ``normalize_name()`` to nodes.py (``fully_normalize_name``).
  - Added support for encoding Reporter stderr output, and encoding
    error handlers.
  - Reporter keeps track of the highest level system message yet
    generated.

* docutils/languages: Fixed bibliographic field language lookups.

* docutils/languages/es.py: Added to project; Spanish mappings by
  Marcelo Huerta San Martin.

* docutils/languages/fr.py: Added to project; French mappings by
  Stefane Fermigier.

* docutils/languages/it.py: Added to project; Italian mappings by
  Nicola Larosa.

* docutils/languages/sk.py: Added to project; Slovak mappings by
  Miroslav Vasko.

* docutils/parser/__init__.py:

  - Added ``Parser.finish_parse()`` method.

* docutils/parser/rst/__init__.py:

  - Added options: ``--pep-references``, ``--rfc-references``,
    ``--tab-width``, ``--trim-footnote-reference-space``.

* docutils/parsers/rst/states.py:

  - Changed "title under/overline too short" system messages from INFO
    to WARNING, and fixed its insertion location.
  - Fixed enumerated list item parsing to allow paragraphs & section
    titles to begin with enumerators.
  - Converted system messages to use the new "line" attribute.
  - Fixed a substitution reference edge case.
  - Added support for ``--pep-references`` and ``--rfc-references``
    options; reworked ``Inliner`` code to make customization easier.
  - Removed field argument parsing.
  - Added support for short section title over/underlines.
  - Fixed "simple reference name" regexp to ignore text like
    "object.__method__"; not an anonymous reference.
  - Added support for improved diagnostics.
  - Reworked directive API, based on Dethe Elza's contribution.  Added
    ``Body.parse_directive()``, ``.parse_directive_options()``,
    ``.parse_directive_arguments()`` methods.
  - Added ``ExtensionOptions`` class, to parse directive options
    without parsing field bodies.  Factored
    ``Body.parse_field_body()`` out of ``Body.field()``, overridden in
    ``ExtensionOptions``.
  - Improved definition list term/classifier parsing.
  - Added warnings for unknown directives.
  - Renamed ``Stuff`` to ``Struct``.
  - Now flagged as errors: transitions at the beginning or end of
    sections, empty sections (except title), and empty documents.
  - Updated for ``statemachine.StringList``.
  - Enabled recognition of schemeless email addresses in targets.
  - Added support for embedded URIs in hyperlink references.
  - Added backslash-escapes to inline markup end-string suffix.
  - Added support for correct interpreted text processing.
  - Fixed nested title parsing (topic, sidebar directives).
  - Added special processing of backslash-escaped whitespace (idea
    from David Abrahams).
  - Made substitutions case-sensitive-but-forgiving; moved some code
    to ``docutils.nodes``.
  - Added support for block quote attributions.
  - Added a kludge to work-around a conflict between the bubble-up
    parser strategy and short titles (<= 3 char-long over- &
    underlines).  Fixes SF bug #738803 "infinite loop with multiple
    titles" submitted by Jason Diamond.
  - Added explicit interpreted text roles for standard inline markup:
    "emphasis", "strong", "literal".
  - Implemented "superscript" and "subscript" interpreted text roles.
  - Added initial support for "abbreviation" and "acronym" roles;
    incomplete.
  - Added support for ``--trim-footnote-reference-space`` option.
  - Optional space before colons in directives & hyperlink targets.

* docutils/parsers/rst/tableparser.py:

  - Fixed a bug that was producing unwanted empty rows in "simple"
    tables.
  - Detect bad column spans in "simple" tables.

* docutils/parsers/rst/directives: Updated all directive functions to
  new API.

* docutils/parsers/rst/directives/__init__.py:

  - Added ``flag()``, ``unchanged()``, ``path()``,
    ``nonnegative_int()``, ``choice()``, and ``class_option()``
    directive option helper functions.
  - Added warnings for unknown directives.
  - Return ``None`` for missing directives.
  - Added ``register_directive()``, thanks to William Dode and Paul
    Moore.

* docutils/parsers/rst/directives/admonitions.py:

  - Added "admonition" directive.

* docutils/parsers/rst/directives/body.py: Added to project.  Contains
  the "topic", "sidebar" (from Patrick O'Brien), "line-block",
  "parsed-literal", "rubric", "epigraph", "highlights" and
  "pull-quote" directives.

* docutils/parsers/rst/directives/images.py:

  - Added an "align" attribute to the "image" & "figure" directives
    (by Adam Chodorowski).
  - Added "class" option to "image", and "figclass" to "figure".

* docutils/parsers/rst/directives/misc.py:

  - Added "include", "raw", and "replace" directives, courtesy of
    Dethe Elza.
  - Added "unicode" and "class" directives.

* docutils/parsers/rst/directives/parts.py:

  - Added the "sectnum" directive; by Dmitry Jemerov.
  - Added "class" option to "contents" directive.

* docutils/parsers/rst/directives/references.py: Added to project.
  Contains the "target-notes" directive.

* docutils/parsers/rst/languages/__init__.py:

  - Return ``None`` from get_language() for missing language modules.

* docutils/parsers/rst/languages/de.py: Added to project; German
  mappings by Engelbert Gruber.

* docutils/parsers/rst/languages/en.py:

  - Added interpreted text roles mapping.

* docutils/parsers/rst/languages/es.py: Added to project; Spanish
  mappings by Marcelo Huerta San Martin.

* docutils/parsers/rst/languages/fr.py: Added to project; French
  mappings by William Dode.

* docutils/parsers/rst/languages/it.py: Added to project; Italian
  mappings by Nicola Larosa.

* docutils/parsers/rst/languages/sk.py: Added to project; Slovak
  mappings by Miroslav Vasko.

* docutils/readers/__init__.py:

  - Added support for the observer pattern from ``utils.Reporter``, in
    ``Reader.parse`` and ``Reader.transform``.
  - Removed ``Reader.transform()`` method.
  - Added default parameter values to ``Reader.__init__()`` to make
    instantiation easier.
  - Removed bogus aliases: "restructuredtext" is *not* a Reader.

* docutils/readers/pep.py:

  - Added the ``peps.TargetNotes`` transform to the Reader.
  - Removed PEP & RFC reference detection code; moved to
    parsers/rst/states.py as options (enabled here by default).
  - Added support for pre-acceptance PEPs (no PEP number yet).
  - Moved ``Inliner`` & made it a class attribute of ``Reader`` for
    easy subclassing.

* docutils/readers/python: Python Source Reader subpackage added to
  project, including preliminary versions of:

  - __init__.py
  - moduleparser.py: Parser for Python modules.

* docutils/transforms/__init__.py:

  - Added ``Transformer`` class and completed transform reform.
  - Added unknown_reference_resolvers list for each transformer. This list holds
    the list of functions provided by each component of the transformer that
    help resolve references.

* docutils/transforms/frontmatter.py:

  - Improved support for generic fields.
  - Fixed bibliographic field language lookups.

* docutils/transforms/misc.py: Added to project.  Miscellaneous
  transforms.

* docutils/transforms/parts.py:

  - Moved the "id" attribute from TOC list items to the references
    (``Contents.build_contents()``).
  - Added the ``SectNum`` transform; by Dmitry Jemerov.
  - Added "class" attribute support to ``Contents``.

* docutils/transforms/peps.py:

  - Added ``mask_email()`` function, updating to pep2html.py's
    functionality.
  - Linked "Content-Type: text/x-rst" to PEP 12.
  - Added the ``TargetNotes`` PEP-specific transform.
  - Added ``TargetNotes.cleanup_callback``.
  - Added title check to ``Headers``.

* docutils/transforms/references.py:

  - Added the ``TargetNotes`` generic transform.
  - Split ``Hyperlinks`` into multiple transforms.
  - Fixed bug with multiply-indirect references (report: Bruce Smith).
  - Added check for circular indirect references.
  - Made substitutions case-sensitive-but-forgiving.

* docutils/transforms/universal.py:

  - Added support for the ``--expose-internal-attributes`` option.
  - Removed ``Pending`` transform classes & data.

* docutils/writers/__init__.py:

  - Removed ``Writer.transform()`` method.

* docutils/writers/docutils-xml.py:

  - Added XML and doctype declarations.
  - Added ``--no-doctype`` and ``--no-xml-declaration`` options.

* docutils/writers/html4css1.py:

  - "name" attributes only on these tags: a, applet, form, frame,
    iframe, img, map.
  - Added "name" attribute to <a> in section titles for Netscape 4
    support (bug report: Pearu Peterson).
  - Fixed targets (names) on footnote, citation, topic title,
    problematic, and system_message nodes (for Netscape 4).
  - Changed field names from "<td>" to "<th>".
  - Added "@" to "&#64;" encoding to thwart address harvesters.
  - Improved the vertical whitespace optimization; ignore "invisible"
    nodes (targets, comments, etc.).
  - Improved inline literals with ``<span class="pre">`` around chunks
    of text and ``&nbsp;`` for runs of spaces.
  - Improved modularity of output; added ``self.body_pre_docinfo`` and
    ``self.docinfo`` segments.
  - Added support for "line_block", "address" elements.
  - Improved backlinks (footnotes & system_messages).
  - Improved system_message output.
  - Redefined ``--stylesheet`` as containing an invariant URL, used
    verbatim.  Added ``--stylesheet-path``, interpreted w.r.t. the
    working directory.
  - Added ``--footnote-references`` option (superscript or brackets).
  - Added ``--compact-lists`` and ``--no-compact-lists`` options.
  - Added ``--embed-stylesheet`` and ``--link-stylesheet`` options;
    factored out ``HTMLTranslator.get_stylesheet_reference()``.
  - Improved field list rendering.
  - Added Docutils version to "generator" meta tag.
  - Fixed a bug with images; they must be inline, so wrapped in <p>.
  - Improved layout of <pre> HTML source.
  - Fixed attribute typo on <colspec>.
  - Refined XML prologue.
  - Support for no stylesheet.
  - Removed "interpreted" element support.
  - Added support for "title_reference", "sidebar", "attribution",
    "rubric", and generic "admonition" elements.
  - Added ``--attribution`` option.
  - Added support for "inline", "subscript", "superscript" elements.
  - Added initial support for "abbreviation" and "acronym";
    incomplete.

* docutils/writers/latex2e.py: LaTeX Writer, added by Engelbert Gruber
  (from the sandbox).

  - Added french.
  - Double quotes in literal blocks (special treatment for de/ngerman).
  - Added ``--hyperlink-color`` option ('0' turns off coloring of links).
  - Added ``--attribution`` option.
  - Right align attributions.

* docutils/writers/pep_html.py:

  - Parameterized output encoding in PEP template.
  - Reworked substitutions from ``locals()`` into ``subs`` dict.
  - Redefined ``--pep-stylesheet`` as containing an invariant URL, used
    verbatim.  Added ``--pep-stylesheet-path``, interpreted w.r.t. the
    working directory.
  - Added an override on the ``--footnote-references`` option.
  - Factored out ``HTMLTranslator.get_stylesheet_reference()``.
  - Added Docutils version to "generator" meta tag.
  - Added a "DO NOT EDIT THIS FILE" comment to generated HTML.

* docs/tools.txt:

  - Added a "silent" setting for ``buildhtml.py``.
  - Added a "Getting Help" section.
  - Rearranged the structure.
  - Kept up to date, with new settings, command-line options etc.
  - Added section for ``rst2latex.py`` (Engelbert Gruber).
  - Converted settings table into a definition list.

* docs/rst/quickstart.txt:

  - Added a table of contents.
  - Added feedback information.
  - Added mention of minimum section title underline lengths.
  - Removed the 4-character minimum for section title underlines.

* docs/rst/quickref.html:

  - Added a "Getting Help" section.
  - Added a style to make section title backlinks more subtle.
  - Added mention of minimum section title underline lengths.
  - Removed the 4-character minimum for section title underlines.

* extras: Directory added to project; contains third-party modules
  that Docutils depends on (optparse, textwrap, roman).  These are
  only installed if they're not already present.

* licenses: Directory added to project; contains copies of license
  files for non-public-domain files.

* spec/doctree.txt:

  - Changed the focus.  It's about DTD elements:  structural
    relationships, semantics, and external (public) attributes.  Not
    about the element class library.
  - Moved some implementation-specific stuff into ``docutils.nodes``
    docstrings.
  - Wrote descriptions of all common attributes and parameter
    entities.  Filled in introductory material.
  - Working through the element descriptions: 55 down, 37 to go.
  - Removed "Representation of Horizontal Rules" to
    spec/rst/alternatives.txt.

* spec/docutils.dtd:

  - Added "generated" inline element.
  - Added "line_block" body element.
  - Added "auto" attribute to "title".
  - Changed content models of "literal_block" and "doctest_block" to
    ``%text.model``.
  - Added ``%number;`` attribute type parameter entity.
  - Changed ``%structural.elements;`` to ``%section.elements``.
  - Updated attribute types; made more specific.
  - Added "address" bibliographic element.
  - Added "line" attribute to ``system_message`` element.
  - Removed "field_argument" element; "field_name" may contain
    multiple words and whitespace.
  - Changed public identifier to docutils.sf.net.
  - Removed "interpreted" element; added "title_reference",
    "abbreviation", "acronym".
  - Removed "refuri" attribute from "footnote_reference" and
    "citation_reference".
  - Added "sidebar", "rubric", "attribution", "admonition",
    "superscript", "subscript", and "inline" elements.

* spec/pep-0256.txt: Converted to reStructuredText & updated.

* spec/pep-0257.txt: Converted to reStructuredText & updated.

* spec/pep-0258.txt: Converted to reStructuredText & updated.

* spec/semantics.txt: Updated with text from a Doc-SIG response to
  Dallas Mahrt.

* spec/transforms.txt: Added to project.

* spec/howto: Added subdirectory, for developer how-to docs.

* spec/howto/rst-directives.txt: Added to project.  Original by Dethe
  Elza, edited & extended by David Goodger.

* spec/howto/i18n.txt: Docutils Internationalization.  Added to
  project.

* spec/rst/alternatives.txt:

  - Added "Doctree Representation of Transitions" from
    spec/doctree.txt.
  - Updated "Inline External Targets" & closed the debate.
  - Added ideas for interpreted text syntax extensions.
  - Added "Nested Inline Markup" section.

* spec/rst/directives.txt:

  - Added directives: "topic", "sectnum", "target-notes",
    "line-block", "parsed-literal", "include", "replace", "sidebar",
    "admonition", "rubric", "epigraph", "highlights", "unicode" and
    "class".
  - Formalized descriptions of directive details.
  - Added an "align" attribute to the "image" & "figure" directives
    (by Adam Chodorowski).
  - Added "class" options to "topic", "sidebar", "line-block",
    "parsed-literal", "contents", and "image"; and "figclass" to
    "figure".

* spec/rst/interpreted.txt: Added to project.  Descriptions of
  interpreted text roles.

* spec/rst/introduction.txt:

  - Added pointers to material for new users.

* spec/rst/reStructuredText.txt:

  - Disambiguated comments (just add a newline after the "::").
  - Updated enumerated list description; added a discussion of the
    second-line validity checking.
  - Updated directive description.
  - Added a note redirecting newbies to the user docs.
  - Expanded description of inline markup start-strings in non-markup
    contexts.
  - Removed field arguments and made field lists a generic construct.
  - Removed the 4-character minimum for section title underlines.
  - Clarified term/classifier delimiter & inline markup ambiguity
    (definition lists).
  - Added "Embedded URIs".
  - Updated "Interpreted Text" section.
  - Added "Character-Level Inline Markup" section.

* test: Continually adding & updating tests.

  - Moved test/test_rst/ to test/test_parsers/test_rst/.
  - Moved test/test_pep/ to test/test_readers/test_pep/.
  - Added test/test_readers/test_python/.
  - Added test/test_writers/ (Engelbert Gruber).

* tools:

  - Made the ``locale.setlocale()`` calls in front ends
    fault-tolerant.

* tools/buildhtml.py:

  - Added ``--silent`` option.
  - Fixed bug with absolute paths & ``--config``.
  - Updated for new I/O classes.
  - Added some exception handling.
  - Separated publishers' setting defaults; prevents interference.
  - Updated for new ``publish_file()`` convenience function.

* tools/pep-html-template:

  - Allow for ``--embed-stylesheet``.
  - Added Docutils version to "generator" meta tag.
  - Added a "DO NOT EDIT THIS FILE" comment to generated HTML.
  - Conform to XHTML spec.

* tools/pep2html.py:

  - Made ``argv`` a parameter to ``main()``.
  - Added support for "Content-Type:" header & arbitrary PEP formats.
  - Linked "Content-Type: text/plain" to PEP 9.
  - Files skipped (due to an error) are not pushed onto the server.
  - Updated for new I/O classes.
  - Added ``check_requirements()`` & ``pep_type_error()``.
  - Added some exception handling.
  - Updated for new ``publish_string()`` convenience function.
  - Added a "DO NOT EDIT THIS FILE" comment to generated HTML.

* tools/quicktest.py:

  - Added ``-V``/``--version`` option.

* tools/rst2latex.py: LaTeX front end, added by Engelbert Gruber.

* tools/unicode2rstsubs.py: Added to project.  Produces character
  entity files (reSructuredText substitutions) from the MathML master
  unicode.xml file.

* tools/editors: Support code for editors, added to project.  Contains
  ``emacs/restructuredtext.el``.

* tools/stylesheets/default.css: Moved into the stylesheets directory.

  - Added style for chunks of inline literals.
  - Removed margin for first child of table cells.
  - Right-aligned field list names.
  - Support for auto-numbered section titles in TOCs.
  - Increased the size of inline literals (<tt>) in titles.
  - Restored the light gray background for inline literals.
  - Added support for "line_block" elements.
  - Added style for "address" elements.
  - Removed "a.footnote-reference" style; doing it with ``<sup>`` now.
  - Improved field list rendering.
  - Vertical whitespace improvements.
  - Removed "a.target" style.

* tools/stylesheets/pep.css:

  - Fixed nested section margins.
  - Other changes parallel those of ``../default.css``.


Release 0.2 (2002-07-31)
========================

General:

- The word "component" was being used ambiguously.  From now on,
  "component" will be used to mean "Docutils component", as in Reader,
  Writer, Parser, or Transform.  Portions of documents (Table of
  Contents, sections, etc.)  will be called "document parts".
- Did a grand renaming: a lot of ``verylongnames`` became
  ``very_long_names``.
- Cleaned up imports: no more relative package imports or
  comma-separated lists of top-level modules.
- Added support for an option values object which carries default
  settings and overrides (from command-line options and library use).
- Added internal Unicode support, and support for both input and
  output encodings.
- Added support for the ``docutils.io.IO`` class & subclasses.

Specific:

* docutils/__init__.py:

  - Added ``ApplicationError`` and ``DataError``, for use throughout
    the package.
  - Added ``Component`` base class for Docutils components; implements
    the ``supports`` method.
  - Added ``__version__`` (thus, ``docutils.__version__``).

* docutils/core.py:

  - Removed many keyword parameters to ``Publisher.__init__()`` and
    ``publish()``; bundled into an option values object.  Added
    "argv", "usage", "description", and "option_spec" parameters for
    command-line support.
  - Added ``Publisher.process_command_line()`` and ``.set_options()``
    methods.
  - Reworked I/O model for ``docutils.io`` wrappers.
  - Updated ``Publisher.set_options()``; now returns option values
    object.
  - Added support for configuration files (/etc/docutils.conf,
    ./docutils.conf, ~/.docutils).
  - Added ``Publisher.setup_option_parser()``.
  - Added default usage message and description.

* docutils/frontend.py: Added to project; support for front-end
  (command-line) scripts.  Option specifications may be augmented by
  components.  Requires Optik (http://optik.sourceforge.net/) for option
  processing (installed locally as docutils/optik.py).

* docutils/io.py: Added to project; uniform API for a variety of input
  output mechanisms.

* docutils/nodes.py:

  - Added ``TreeCopyVisitor`` class.
  - Added a ``copy`` method to ``Node`` and subclasses.
  - Added a ``SkipDeparture`` exception for visitors.
  - Renamed ``TreePruningException`` from ``VisitorException``.
  - Added docstrings to ``TreePruningException``, subclasses, and
    ``Nodes.walk()``.
  - Improved docstrings.
  - Added ``SparseNodeVisitor``, refined ``NodeVisitor``.
  - Moved ``utils.id()`` to ``nodes.make_id()`` to avoid circular
    imports.
  - Added ``decoration``, ``header``, and ``footer`` node classes, and
    ``PreDecorative`` mixin.
  - Reworked the name/id bookkeeping; to ``document``, removed
    ``explicit_targets`` and ``implicit_targets`` attributes, added
    ``nametypes`` attribute and ``set_name_id_map`` method.
  - Added ``NodeFound`` exception, for use with ``NodeVisitor``
    traversals.
  - Added ``document.has_name()`` method.
  - Fixed DOM generation for list-attributes.
  - Added category class ``Labeled`` (used by footnotes & citations).
  - Added ``Element.set_class()`` method (sets "class" attribute).

* docutils/optik.py: Added to project.  Combined from the Optik
  package, with added option groups and other modifications.  The use
  of this module is probably only temporary.

* docutils/statemachine.py:

  - Added ``runtime_init`` method to ``StateMachine`` and ``State``.
  - Added underscores to improve many awkward names.
  - In ``string2lines()``, changed whitespace normalizing translation
    table to regexp; restores Python 2.0 compatibility with Unicode.

* docutils/urischemes.py:

  - Filled in some descriptions.
  - Added "shttp" scheme.

* docutils/utils.py:

  - Added ``clean_rcs_keywords`` function (moved from
    docutils/transforms/frontmatter.py
    ``DocInfo.filter_rcs_keywords``).
  - Added underscores to improve many awkward names.
  - Changed names of Reporter's thresholds:
    warning_level -> report_level; error_level -> halt_level.
  - Moved ``utils.id()`` to ``nodes.make_id()``.
  - Added ``relative_path(source, target)``.

* docutils/languages/de.py: German mappings; added to project.  Thanks
  to Gunnar Schwant for the translations.

* docutils/languages/en.py: Added "Dedication" bibliographic field
  mappings.

* docutils/languages/sv.py: Swedish mappings; added to project by Adam
  Chodorowski.

* docutils/parsers/rst/states.py:

  - Added underscores to improve many awkward names.
  - Added RFC-2822 header support.
  - Extracted the inline parsing code from ``RSTState`` to a separate
    class, ``Inliner``, which will allow easy subclassing.
  - Made local bindings for ``memo`` container & often-used contents
    (reduces code complexity a lot).  See ``RSTState.runtime_init()``.
  - ``RSTState.parent`` replaces ``RSTState.statemachine.node``.
  - Added ``MarkupMismatch`` exception; for late corrections.
  - Added ``-/:`` characters to inline markup's start string prefix,
    ``/`` to end string suffix.
  - Fixed a footnote bug.
  - Fixed a bug with literal blocks.
  - Applied patch from Simon Budig: simplified regexps with symbolic
    names, removed ``Inliner.groups`` and ``Body.explicit.groups``.
  - Converted regexps from ``'%s' % var`` to ``'%(var)s' % locals()``.
  - Fixed a bug in ``Inliner.interpreted_or_phrase_ref()``.
  - Allowed non-ASCII in "simple names" (directive names, field names,
    references, etc.).
  - Converted ``Inliner.patterns.initial`` to be dynamically built
    from parts with ``build_regexp()`` function.
  - Changed ``Inliner.inline_target`` to ``.inline_internal_target``.
  - Updated docstrings.
  - Changed "table" to "grid_table"; added "simple_table" support.

* docutils/parsers/rst/tableparser.py:

  - Changed ``TableParser`` to ``GridTableParser``.
  - Added ``SimpleTableParser``.
  - Refactored naming.

* docutils/parsers/rst/directives/__init__.py: Added "en" (English) as
  a fallback language for directive names.

* docutils/parsers/rst/directives/html.py: Changed the ``meta``
  directive to use a ``pending`` element, used only by HTML writers.

* docutils/parsers/rst/directives/parts.py: Renamed from
  components.py.

  - Added "backlinks" attribute to "contents" directive.

* docutils/parsers/rst/languages/sv.py: Swedish mappings; added to
  project by Adam Chodorowski.

* docutils/readers/__init__.py: Gave Readers more control over
  choosing and instantiating Parsers.

* docutils/readers/pep.py: Added to project; for PEP processing.

* docutils/transforms/__init__.py: ``Transform.__init__()`` now
  requires a ``component`` parameter.

* docutils/transforms/components.py: Added to project; transforms
  related to Docutils components.

* docutils/transforms/frontmatter.py:

  - In ``DocInfo.extract_authors``, check for a single "author" in an
    "authors" group, and convert it to a single "author" element.
  - Added support for "Dedication" and generic bibliographic fields.

* docutils/transforms/peps.py: Added to project; PEP-specific.

* docutils/transforms/parts.py: Renamed from old components.py.

  - Added filter for ``Contents``, to use alt-text for inline images,
    and to remove inline markup that doesn't make sense in the ToC.
  - Added "name" attribute to TOC topic depending on its title.
  - Added support for optional TOC backlinks.

* docutils/transforms/references.py: Fixed indirect target resolution
  in ``Hyperlinks`` transform.

* docutils/transforms/universal.py:

  - Changed ``Messages`` transform to properly filter out system
    messages below the warning threshold.
  - Added ``Decorations`` transform (support for ``--generator``,
    ``--date``, ``--time``, ``--source-link`` options).

* docutils/writers/__init__.py: Added "pdf" alias in anticipation of
  Engelbert Gruber's PDF writer.

* docutils/writers/html4css1.py:

  - Made XHTML-compatible (switched to lowercase element & attribute
    names; empty tag format).
  - Escape double-dashes in comment text.
  - Improved boilerplate & modularity of output.
  - Exposed modular output in Writer class.
  - Added a "generator" meta tag to <head>.
  - Added support for the ``--stylesheet`` option.
  - Added support for ``decoration``, ``header``, and ``footer``
    elements.
  - In ``HTMLTranslator.attval()``, changed whitespace normalizing
    translation table to regexp; restores Python 2.0 compatibility
    with Unicode.
  - Added the translator class as instance variable to the Writer, to
    make it easily subclassable.
  - Improved option list spacing (thanks to Richard Jones).
  - Modified field list output.
  - Added backlinks to footnotes & citations.
  - Added percentage widths to "<col>" tags (from colspec).
  - Option lists: "<code>" changed to "<kbd>", ``option_argument``
    "<span>" changed to "<var>".
  - Inline literals: "<code>" changed to "<tt>".
  - Many changes to optimize vertical space: compact simple lists etc.
  - Add a command-line options & directive attributes to control TOC
    and footnote/citation backlinks.
  - Added support for optional footnote/citation backlinks.
  - Added support for generic bibliographic fields.
  - Identify backrefs.
  - Relative URLs for stylesheet links.

* docutils/writers/pep_html.py: Added to project; HTML Writer for
  PEPs (subclass of ``html4css1.Writer``).

* docutils/writers/pseudoxml.py: Renamed from pprint.py.

* docutils/writers/docutils_xml.py: Added to project; trivial writer
  of the Docutils internal doctree in XML.

* docs/tools.txt: "Docutils Front-End Tools", added to project.

* spec/doctree.txt:

  - Changed the title to "The Docutils Document Tree".
  - Added "Hyperlink Bookkeeping" section.

* spec/docutils.dtd:

  - Added ``decoration``, ``header``, and ``footer`` elements.
  - Brought ``interpreted`` element in line with the parser: changed
    attribute "type" to "role", added "position".
  - Added support for generic bibliographic fields.

* spec/notes.txt: Continual updates.  Added "Project Policies".

* spec/pep-0256.txt:  Updated.  Added "Roadmap to the Doctring PEPs"
  section.

* spec/pep-0257.txt: Clarified prohibition of signature repetition.

* spec/pep-0258.txt: Updated.  Added text from pysource.txt and
  mailing list discussions.

* spec/pep-0287.txt:

  - Renamed to "reStructuredText Docstring Format".
  - Minor edits.
  - Reworked Q&A as an enumerated list.
  - Converted to reStructuredText format.

* spec/pysource.dtd:

  - Reworked structural elements, incorporating ideas from Tony Ibbs.

* spec/pysource.txt: Removed from project.  Moved much of its contents
  to pep-0258.txt.

* spec/rst/alternatives.txt:

  - Expanded auto-enumerated list idea; thanks to Fred Bremmer.
  - Added "Inline External Targets" section.

* spec/rst/directives.txt:

  - Added "backlinks" attribute to "contents" directive.

* spec/rst/problems.txt:

  - Updated the Enumerated List Markup discussion.
  - Added new alternative table markup syntaxes.

* spec/rst/reStructuredText.txt:

  - Clarified field list usage.
  - Updated enumerated list description.
  - Clarified purpose of directives.
  - Added ``-/:`` characters to inline markup's start string prefix,
    ``/`` to end string suffix.
  - Updated "Authors" bibliographic field behavior.
  - Changed "inline hyperlink targets" to "inline internal targets".
  - Added "simple table" syntax to supplement the existing but
    newly-renamed "grid tables".
  - Added cautions for anonymous hyperlink use.
  - Added "Dedication" and generic bibliographic fields.

* test: Made test modules standalone (subdirectories became packages).

* test/DocutilsTestSupport.py:

  - Added support for PEP extensions to reStructuredText.
  - Added support for simple tables.
  - Refactored naming.

* test/package_unittest.py: Renamed from UnitTestFolder.py.

  - Now supports true packages containing test modules
    (``__init__.py`` files required); fixes duplicate module name bug.

* test/test_pep/: Subpackage added to project; PEP testing.

* test/test_rst/test_SimpleTableParser.py: Added to project.

* tools:

  - Updated html.py and publish.py front-end tools to use the new
    command-line processing facilities of ``docutils.frontend``
    (exposed in ``docutils.core.Publisher``), reducing each to just a
    few lines of code.
  - Added ``locale.setlocale()`` calls to front-end tools.

* tools/buildhtml.py: Added to project; batch-generates .html from all
  the .txt files in directories and subdirectories.

* tools/default.css:

  - Added support for ``header`` and ``footer`` elements.
  - Added styles for "Dedication" topics (biblio fields).

* tools/docutils.conf: A configuration file; added to project.

* tools/docutils-xml.py: Added to project.

* tools/pep.py: Added to project; PEP to HTML front-end tool.

* tools/pep-html-template: Added to project.

* tools/pep2html.py: Added to project from Python (nondist/peps).
  Added support for Docutils (reStructuredText PEPs).

* tools/quicktest.py:

  - Added the ``--attributes`` option, hacked a bit.
  - Added a second command-line argument (output file); cleaned up.

* tools/stylesheets/: Subdirectory added to project.

* tools/stylesheets/pep.css: Added to project; stylesheet for PEPs.


Release 0.1 (2002-04-20)
========================

This is the first release of Docutils, merged from the now inactive
reStructuredText__ and `Docstring Processing System`__ projects.  For
the pre-Docutils history, see the `reStructuredText HISTORY`__ and the
`DPS HISTORY`__ files.

__ http://structuredtext.sourceforge.net/
__ http://docstring.sourceforge.net/
__ http://structuredtext.sourceforge.net/HISTORY.html
__ http://docstring.sourceforge.net/HISTORY.html

General changes: renamed 'dps' package to 'docutils'; renamed
'restructuredtext' subpackage to 'rst'; merged the codebases; merged
the test suites (reStructuredText's test/test_states renamed to
test/test_rst); and all modifications required to make it all work.

* docutils/parsers/rst/states.py:

  - Improved diagnostic system messages for missing blank lines.
  - Fixed substitution_reference bug.

.. References
   ==========

.. _RELEASE-NOTES: RELEASE-NOTES.html
.. _`_config_files`: docs/user/config.html#config-files
.. _auto_id_prefix: docs/user/config.html#auto-id-prefix
.. _detailled:
.. _detailed: docs/user/config.html#detailed
.. _docutils_footnotes: docs/user/config.html#docutils-footnotes
.. _dump_settings: docs/user/config.html#dump-settings
.. _embed_images: docs/user/config.html#embed-images
.. _embed_stylesheet: docs/user/config.html#embed-stylesheet
.. _figure_footnotes: docs/user/config.html#figure-footnotes
.. _file_insertion_enabled: docs/user/config.html#file-insertion-enabled
.. _graphicx_option: docs/user/config.html#graphicx-option
.. _hidden_controls: docs/user/config.html#hidden-controls
.. _html_writer: docs/user/config.html#html-writer
.. _hyperref_options: docs/user/config.html#hyperref-options
.. _id_prefix: docs/user/config.html#id-prefix
.. _ignore: docs/user/config.html#ignore
.. _image_loading: docs/user/config.html#image-loading
.. _indents: docs/user/config.html#indents
.. _initial_header_level: docs/user/config.html#initial-header-level
.. _input_encoding: docs/user/config.html#input-encoding
.. _input_encoding_error_handler: docs/user/config.html#input-encoding-error-handler
.. _language: docs/user/config.html#language
.. _latex_preamble: docs/user/config.html#latex-preamble
.. _legacy_class_functions: docs/user/config.html#legacy-class-functions
.. _legacy_column_widths: docs/user/config.html#legacy-column-widths
.. _literal_block_env: docs/user/config.html#literal-block-env
.. _math_output: docs/user/config.html#math-output
.. _output: docs/user/config.html#output
.. _output_encoding: docs/user/config.html#output-encoding
.. _raw_enabled: docs/user/config.html#raw-enabled
.. _reference_label: docs/user/config.html#reference-label
.. _smart_quotes: docs/user/config.html#smart-quotes
.. _strip_classes: docs/user/config.html#strip-classes
.. _strip_elements_with_classes: docs/user/config.html#strip-elements-with-classes
.. _stylesheet: docs/user/config.html#stylesheet
.. _stylesheet_dirs: docs/user/config.html#stylesheet-dirs
.. _stylesheet_path: docs/user/config.html#stylesheet-path
.. _syntax_highlight: docs/user/config.html#syntax-highlight
.. _table_style: docs/user/config.html#table-style
.. _traceback: docs/user/config.html#traceback
.. _use_bibtex: docs/user/config.html#use-bibtex
.. _use_latex_abstract: docs/user/config.html#use-latex-abstract
.. _use_latex_footnotes: docs/user/config.html#use-latex-footnotes
.. _use_latex_toc: docs/user/config.html#use-latex-toc
.. _view_mode: docs/user/config.html#view-mode


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:


/Part 5. 108.📜 docutils-0.20.1/RELEASE-NOTES.txt

.. .. include:: /docutils-0.20.1/docs/header0.txt

========================
 Docutils Release Notes
========================

:Contact: grubert@users.sourceforge.net
:Maintainer: docutils-develop@lists.sourceforge.net
:Date: $Date: 2023-05-16 16:49:41 +0200 (Di, 16. Mai 2023) $
:Revision: $Revision: 9387 $
:Web site: https://docutils.sourceforge.io/
:Copyright: This document has been placed in the public domain.


This document summarizes the major changes in previous and upcoming releases.
For a more detailed list of changes, please see the Docutils `HISTORY`_.

.. .. contents:: Table of Contents

Future changes
==============

Drop support for Python 3.7 and 3.8 in Docutils 0.21.

Command line interface
----------------------

* Docutils 0.21 will provide ``rst2*`` "console_scripts" `entry points`_
  (without the ``.py`` extension) instead of installing the
  ``rst2*.py`` `front end tools`_ in the binary PATH. [#]_

  You may use the ``docutils`` `generic command line front end tool`_
  as a future-proof command, for example:

  .. code:: diff

     - rst2latex.py --use-latex-abstract FAQ.txt > FAQ.tex
     + docutils --writer=latex --use-latex-abstract FAQ.txt > FAQ.tex

  Exceptions:
    The ``rstpep2html.py`` and ``rst2odt_prepstyles.py`` scripts
    will be retired.

    Use ``docutils --reader=pep --writer=pep_html`` for a PEP preview. [#]_

    Use ``python -m docutils.writers.odf_odt.prepstyles``
    to `strip the page size`__ from an ODT writer stylesheet.

    __ docs/user/odt.html#page-size

  .. [#] Some Linux distributions already use the short names.
  .. [#] The final rendering is done by a Sphinx-based build system
         (cf. :PEP:`676`).


* The _`command-line usage pattern` will change:

  .. code:: diff

       - COMMAND [OPTIONS] [SOURCE [DESTINATION]]
       + COMMAND [OPTIONS] [SOURCE [SOURCE2 [...]]] [>DESTINATION]

  * Remove short options ``-i`` and ``-o`` in Docutils 0.22.
    Use the long equivalents ``--input-encoding`` and ``--output-encoding``.

  * Stop accepting the DESTINATION positional argument in Docutils 1.0.
    Use output redirection or the option ``--output=DESTINATION``
    (available since Docutils 0.20).

  * Accept more than one source document and the short option
    ``-o`` for ``--output`` in Docutils 2.0

  For the rationale, see https://clig.dev/#arguments-and-flags.

.. _entry points:
    https://packaging.python.org/en/latest/specifications/entry-points/


`Input encoding`_
-----------------

* Raise `UnicodeError` (instead of falling back to the locale encoding)
  if decoding the source with the default encoding (UTF-8) fails and
  Python is started in `UTF-8 mode`_. (Docutils 0.21)

  Raise `UnicodeError` (instead of falling back to "latin1") if both,
  default and locale encoding, fail. (Docutils 0.21)

* Only remove BOM (U+FEFF ZWNBSP at start of data), no other ZWNBSPs.
  Only remove BOM with `input_encoding`_ values None, '', 'utf-8-sig',
  'utf-16', and 'utf-32'. (Docutils 0.21)

* Change the default input encoding from ``None`` (auto-detect) to
  "utf-8" in Docutils 0.22.

* Remove the input encoding auto-detection code in Docutils 1.0 or later.

Writers
-------

* The `default HTML writer`__  will change in Docutils 2.0:

  The rst2html_ front end and ``get_writer_by_name('html')`` select
  "html4css1" now and will select "html5" in Docutils 2.0 and later.

  - Use rst2html4_, ``docutils --writer=html4``, or
    ``get_writer_by_name('html4')`` if you depend on stability of the
    generated HTML code, e.g. because you use a custom style sheet or
    post-processing that may break otherwise.
  - Use rst2html5_, ``docutils`` or ``get_writer_by_name('html5')``
    if you want a HTML5 document.

  __ docs/user/html.html#html

* "html5" writer:

  - Stop setting the "footnote-reference" class value for footnote
    references in Docutils 0.21.
    Since 0.18, you can use the CSS selector
    ``[role="doc-noteref"]`` instead of ``.footnote-reference``
    (see minimal.css for examples).

  - Move attribution behind the blockquote to comply with the `"living
    standard"`__. (HTML5__ allows <cite> elements inside a blockquote.)

    __ https://html.spec.whatwg.org/#the-blockquote-element
    __ https://www.w3.org/TR/2014/REC-html5-20141028/grouping-content.html
       #the-blockquote-element

  - Change the default value for math_output_ to "MathML" in Docutils 0.22.

  - Remove option ``--embed-images`` (obsoleted by "image_loading_")
    in Docutils 2.0.

* "latex2e" writer:

  - Change default of use_latex_citations_ setting to True
    in Docutils 1.0.

  - Change default of legacy_column_widths_ setting to False
    in Docutils 1.0.

  - Remove ``use_verbatim_when_possible`` setting
    (use literal_block_env_: verbatim) in Docutils 2.0.

* "null" writer: output will change to the empty string in Docutils 0.22.

Misc
----

* "csv-table_" directive:

  - Use the same CSV format for the main CSV data and the :header: option
    (as specified in the documentation since addition of "csv-table_")
    in Docutils 0.21.

  - Move `parsers.rst.directives.Table.process_header_option()` to
    `parsers.rst.directives.CSVTable` in Docutils 0.21.

  - Remove `parsers.rst.directives.CSVTable.HeaderDialect`
    in Docutils 0.22.

* Remove the compatibility hacks `nodes.reprunicode` and `nodes.ensure_str()`
  in Docutils 0.21 or later. They are not required with Python 3.x.

* Remove file ``install.py`` in Docutils 0.21.
  See README.txt__ for alternatives.

  __ README.html#installation

* Remove the "rawsource" argument from `nodes.Text.__init__()`
  in Docutils 2.0.

* Drop support for `old-format configuration files`_ in Docutils 2.0.

* Remove the ``--html-writer`` option of the `buildhtml.py`_ application
  (obsoleted by the `"writer" setting`_ since Docutils 0.18)
  in Docutils 2.0.

* Revise the `String I/O`__ interface used by the `publish_string()`
  and `publish_from_doctree()` publisher convenience functions.
  (In Python 3, name and behaviour no longer match.)

  __ docs/api/publisher.html#string-i-o

* Move math format conversion from docutils/utils/math (called from
  docutils/writers/_html_base.py) to a transform__.

  __ docs/ref/transforms.html

* docutils/parsers/rst/languages/

  Fix mistranslated localizations of the "admonition" directive name in
  Docutils 0.21 (or later). In Docutils, "admonition" is used as a
  generic term for "advice"/"caveat"/"remark", not a reprimand.
  Use the English term (or specific admonitions) instead of "aanmaning",
  "ammonizione", "Ermahnung", "exhortacion", "formaning", "upomnienie",
  or "vermaning" to avoid errors in future conversions.

.. _front end tools: docs/user/tools.html
.. _input encoding:
.. _input_encoding: docs/user/config.html#input-encoding
.. _math_output: docs/user/config.html#math-output
.. _UTF-8 mode: https://docs.python.org/3/library/os.html#utf8-mode
.. _image_loading: docs/user/config.html#image-loading
.. _old-format configuration files:
   docs/user/config.html#old-format-configuration-files
.. _rst2html.py:
.. _rst2html: docs/user/tools.html#rst2html
.. _rst2html4: docs/user/tools.html#rst2html4
.. _rst2html5: docs/user/tools.html#rst2html5
.. _reference name: docs/ref/rst/restructuredtext.html#reference-names
.. _literal_block_env: docs/user/config.html#literal-block-env
.. _use_latex_citations: docs/user/config.html#use-latex-citations
.. _buildhtml.py: docs/user/tools.html#buildhtml-py
.. _csv-table: docs/ref/rst/directives.html#csv-table


Release 0.20.1 (2023-05-17)
===========================

Bugfix release. See HISTORY_ for details.


Release 0.20 (2023-05-04)
=========================

.. Note::

   Docutils 0.20 is the last version supporting Python 3.7 and 3.8.

* General

  - Support Python 3.11 (patch #198 by Hugo van Kemenade).

* Output changes:

  HTML5:
    Use dpub-ARIA role "doc-footnote" (instead of ARIA role "note")
    for footnotes.

  LaTeX:
    Do not load the `inputenc` package in UTF-8 encoded LaTeX sources.
    (UTF-8 is the default encoding for LaTeX2e since 2018).

* Configuration changes:

  - Settings in the [latex2e writer] configuration file section
    are now ignored by the "xetex" writer.
    Place common settings in section `[latex writers]`_.

    .. _[latex writers]: docs/user/config.html#latex-writers

  - New command line setting output_. Obsoletes the ``<destination>``
    positional argument (cf. `future changes`__).

    __ `command-line usage pattern`_

* `utils.find_file_in_dirs()` now returns a POSIX path also on Windows;
  `utils.get_stylesheet_list()` no longer converts ``\`` to ``/``.

* docutils/languages/
  docutils/parsers/rst/languages/

  - Support Ukrainian. Patch by Dmytro Kazanzhy.

* test/coverage.sh

  - Removed. Use the coverage.py_ project instead,
    ``coverage run test/alltests.py`` and ``coverage report``.

  .. _coverage.py: https://pypi.org/project/coverage/

* tools/

  - Moved ``quicktest.py`` to ``tools/dev/``.

* Bugfixes and improvements (see HISTORY_).

.. _output: docs/user/config.html#output


Release 0.19 (2022-07-05)
=========================

(Release 0.19b1 (2022-06-21))

* Drop support for Python 2.7, 3.5, and 3.6.

* Output changes:

  HTML5:
    Wrap groups of footnotes in an ``<aside>`` for easier styling.

    The CSS rule ``.footnote-list { display: contents; }`` can be used to
    restore the behaviour of custom CSS styles.

* After package installation, the CLI commands ``python -m docutils`` and
  ``docutils`` start the `generic command line front end tool`_.

  .. _generic command line front end tool:
      docs/user/tools.html#generic-command-line-front-end

* Support parsing "Markdown" input with 3rd party parsers
  myst_, pycmark_, or recommonmark_.

* The default values for the "pep-references", "rfc-base-url",
  and "python-home" `configuration settings`_ now use the "https:" scheme.
  The PEP-writer template's header is updated to fix links and
  resemble the header of official PEPs.

* Various bugfixes and improvements (see HISTORY_).

.. _myst: https://pypi.org/project/myst-docutils
.. _pycmark: https://pypi.org/project/pycmark/
.. _recommonmark: https://pypi.org/project/recommonmark/
.. _configuration settings: docs/user/config.html


Release 0.18.1 (2021-12-23)
===========================

.. Note::

   Docutils 0.18.1 is the last version supporting Python 2.7, 3.5, and 3.6.

* ``nodes.Node.traverse()`` returns a list again to restore backwards
  compatibility (fixes bug #431).
  Use ``nodes.Node.findall()`` to get an iterator.

* re-add module ``parsers.rst.directives.html``
  (stub, emits deprecation warning and loads
  "Meta" directive from its new place at ``parsers.rst.directives.misc``.)

* Small bugfixes (see HISTORY_).


Release 0.18 (2021-10-26)
=========================

* Output changes:

  Identifiers:
    - During `identifier normalization`_, leading number and hyphen
      characters are no longer stripped from a `reference name`_, if the
      id_prefix_ setting is non-empty.

      Example:
        with ``--id-prefix="DU-"``, a section with title "34. May"
        currently gets the identifier key ``DU-may`` and after the
        change the identifier key ``DU-34-may``.

    - The default value for the auto_id_prefix_ setting changed to ``%``:
      "use the tag name as prefix for auto-generated IDs".
      Set auto_id_prefix_ to ``id`` for unchanged auto-IDs.

  HTML5:
    - Use the semantic tag <aside> for footnote text and citations, topics
      (except abstract and toc), admonitions, and system messages.
      Use <nav> for the Table of Contents.

    - Make "auto" table column widths the default: Only specify column
      widths, if the `"widths" option`_ is set and not "auto".
      The table-style__ setting "colwidths-grid" restores the current default.

      .. _"widths" option: __ docs/ref/rst/directives.html#table
      __ docs/user/config.html#table-style

    - Items of a definition list with class argument "details" are
      converted to `details disclosure elements`_. Example::

        ..class:: details

        Summary
          This additional information should be hidden.

    - Do not add "compound-first", "compound-middle", or "compound-last" to
      elements nested in a compound. Use child selector and ":first-child",
      ":last-child" pseudo classes instead.

    - Use class value "backrefs" instead of "fn-backref" for a span of
      back-references.

    - Write footnote brackets and field term colons to HTML, so that they
      are present also without CSS and when copying text.

    - Move space character between section number and heading into
      "sectnum" span.

  `math-output`_: html
    - Support more commands, fix mapping of commands to Unicode characters.
    - Scale variable sized operators and big delimiters with CSS.
    - Don't use <tt> element (deprecated in HTML5).
    - Use STIX fonts if available.

  LaTeX:
     `legacy_class_functions`_ setting default changed to "False",
     admonitions are now environments.

* New standard Docutils doctree node: <meta__>.

* New configuration settings:

  - [latex writers] legacy_column_widths_ and
  - [html5 writer] image_loading_.

* Removed files:
  ``iepngfix.htc`` and ``blank.gif`` (IE 6 workaround for `s5_html`).

* Removed sub-module:
  ``parsers.rst.directives.html``
  (reversed in release 0.18.1).

* Removed function: utils.unique_combinations()
  (obsoleted by itertools.combinations()).

* Removed attributes:

  - ``HTMLTranslator.topic_classes``: check ``node.parent.classes`` instead.
  - ``nodes.Text.rawsource``: we store the null-escaped text in Text
    nodes since 0.16 so there is no additional information in the
    rawsource.

* Major refactoring and fixes/additions in
  ``docutils/utils/math/math2html.py`` and
  ``docutils/utils/math/latex2mathml.py``
  (mathematical notation in HTML, cf. `LaTeX syntax for mathematics`_).

* nodes.Node.traverse() returns an iterator instead of a list
  (reversed in release 0.18.1).

* Various bugfixes and improvements (see HISTORY_).

  Fix spelling errors in documentation and docstrings.
  Thanks to Dimitri Papadopoulos.

__ docs/ref/doctree.html#meta
.. _identifier normalization:
   docs/ref/rst/directives.html#identifier-normalization
.. _id_prefix: docs/user/config.html#id-prefix
.. _auto_id_prefix: docs/user/config.html#auto-id-prefix
.. _details disclosure elements:
    https://www.w3.org/TR/html52/interactive-elements.html#the-details-element
.. _LaTeX syntax for mathematics: docs/ref/rst/mathematics.html
.. _legacy_column_widths: docs/user/config.html#legacy-column-widths


Release 0.17.1 (2021-04-16)
===========================

* Bug fixes (for details see the Docutils `HISTORY`_).

Release 0.17 (2021-04-03)
=========================

* Numerous bug fixes and improvements
  (for details see the Docutils `HISTORY`_).

* Installing with ``setup.py`` now requires setuptools_.
  Alternatively, install with pip_.

* The generic command line front end tool docutils-cli.py_ allows
  the free selection of reader, parser, and writer components.

* Support Arabic language.

* New, **experimental** wrapper to integrate the `recommonmark`__
  Markdown parser for use with Docutils.
  Currently only tested with recommonmark version 0.4.0.

  __ https://pypi.org/project/recommonmark/

* HTML5 writer:

  - New option embed_images_.

  - Use semantic tags (for details see the Docutils `HISTORY`_).

  - Change the `initial_header_level`_ setting's default to "2", as browsers
    use the `same style for <h1> and <h2> when nested in a section`__.

  - New optional style ``responsive.css``, adapts to different screen
    sizes.

  - Move non-essential styling from ``minimal.css`` to ``plain.css``
    rsp. ``responsive.css``.

  - Show code line numbers as pseudo-elements so they are skipped when
    copying the code block from the page.

  .. _initial_header_level: docs/user/config.html#initial-header-level
  __ https://stackoverflow.com/questions/39547412/same-font-size-for-h1-and-h2-in-article
  .. _embed_images: docs/user/config.html#embed-images

* LaTeX writer:

  - New configuration setting `legacy_class_functions`_.

  - The special value "auto" for the `graphicx_option`_ setting
    is no longer supported (it never worked for xetex/luatex).

  - `Styling commands`__ using the legacy ``\docutilsrole`` prefix are
    now ignored. Use ``\DUrole``.

    __ docs/user/latex.html#classes

  - Most helper commands and element definitions are now defined in the
    LaTeX package `docutils.sty`_ and only inserted in the document
    preamble if the stylesheet__ setting does not lists "docutils".

    __ docs/user/config.html#stylesheet-latex-writers

  - Remove legacy LaTeX stylesheet ``docutils-05-compat.sty``.

.. _setuptools: https://pypi.org/project/setuptools/
.. _pip: https://pypi.org/project/pip/
.. _docutils-cli.py: docs/user/tools.html#docutils-cli-py
.. _legacy_class_functions: docs/user/config.html#legacy-class-functions
.. _graphicx_option: docs/user/config.html#graphicx-option
.. _docutils.sty: https://ctan.org/pkg/docutils


Release 0.16 (2020-01-12)
=========================

Docutils 0.16.x supports Python 2.7 and Python >= 3.5 natively,
without the use of the ``2to3`` tool.

* reStructuredText:

  - Keep `backslash escapes`__ in the document tree. This allows, e.g.,
    escaping of author-separators in `bibliographic fields`__.

  __ https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#escaping-mechanism
  __ docs/ref/rst/restructuredtext.html#bibliographic-fields

* LaTeX writer:

  - Informal titles of type "rubric" default to bold-italic and left aligned.
  - Deprecate ``\docutilsrole`` prefix for styling commands:
    use ``\DUrole`` instead.
  - Fix topic subtitle.
  - Add "latex writers" to the `config_section_dependencies`.
  - Ignore classes for `rubric` elements
    (class wrapper interferes with LaTeX formatting).

* tools/buildhtml.py

  - New option ``--html-writer`` allows to select "html" (default),
    "html4" or "html5" (deprecated in favour of the `"writer" setting`_
    in Docutils 0.18).

  .. _"writer" setting:
     docs/user/config.html#writer-buildhtml-application

* docutils/io.py

  - Remove the `handle_io_errors` argument from io.FileInput/Output.

* docutils/nodes.py

  - If `auto_id_prefix`_ ends with "%", this is replaced with the tag name.

  .. _auto_id_prefix: docs/user/config.html#auto-id-prefix

* Various bugfixes and improvements (see HISTORY_).


Release 0.15 (2019-07-20)
=========================

Docutils 0.15.x is compatible with Python versions 2.6, 2.7 and 3.3 to 3.5.

.. Note::

   Docutils 0.15.x is the last version supporting Python 2.6, 3.3 and 3.4.

* reStructuredText:

  - Allow embedded colons in field list field names (before, tokens like
    ``:this:example:`` were considered ordinary text).

  - Fixed a bug with the "trim" options of the "unicode" directive.

* languages: Added Korean localisation (ko).


Release 0.14 (2017-08-03)
=========================

.. Note::

   Docutils 0.14.x is the last version supporting Python 2.4, 2.5,
   3.1, and 3.2.

* docutils/docs/ref/docutils.dtd:

  - Enable validation of Docutils XML documents against the DTD:

* docutils/parsers/rst/:

  - Added functionality: escaped whitespace in URI contexts.
  - Consistent handling of all whitespace characters in inline markup
    recognition. (May break documents that relied on some whitespace
    characters (NBSP, ...) *not* to be recognized as whitespace.)

* docutils/utils/smartquotes.py:

  - Update quote definitions for et, fi, fr, ro, sv, tr, uk.
  - Add quote definitions for hr, hsb, hu, lv, sh, sl, sr.
  - Differentiate apostrophe from closing single quote (if possible).
  - Add command line interface for stand-alone use (requires 2.7).

* docutils/writers/_html_base:

  - Provide default title in metadata.
  - The MathJax CDN shut down on April 30, 2017. For security reasons, we
    don't use a third party public installation as default but warn
    if `math-output` is set to MathJax without specifying a URL.
    See math-output_ for details.

* docutils/writers/html4css1:

  - Respect automatic table column sizing.

* docutils/writers/latex2e/__init__.py

  - Handle class arguments for block-level elements by wrapping them
    in a "DUclass" environment. This replaces the special handling for
    "epigraph" and "topic" elements.

* docutils/writers/odf_odt:

  - Language option sets ODF document's default language
  - Image width, scale, ... set image size in generated ODF.

* tools/

  - New front-end ``rst2html4.py``.


Release 0.13.1 (2016-12-09)
===========================

* docutils/writers/html5_polyglot

  - New HTML writer generating `HTML 5`_.

  .. _HTML 5: https://www.w3.org/TR/html5/

* tools/

  - New front-end ``rst2html5.py``.

* languages: persian/farsi (fa) and latvian (la) mappings.

* change default base url for :rfc: to http://tools.ietf.org/html/

* tables accept widths, a list and align

* latex2e: Fix admonition width, remove deprecated options,
  better tablewidth auto, ...

* rst.el: The problem with ``electric-indent-mode`` has been fixed.


Release 0.12 (2014-07-06)
=========================

Small changes only, release current state


Release 0.11 (2013-07-22)
=========================

* General

  - Apply [ 2714873 ] Fix for the overwriting of document attributes.
  - Support embedded aliases within hyperlink references.
  - Fix [ 228 ] try local import of docutils components (reader, writer, parser,
    language module) before global search.

* docutils/parsers/rst/directives/tables.py

  - Fix [ 210 ] Python 3.3 checks CVS syntax only if "strict" is True.

* docutils/writers/html4css1/__init__.py
  - Fix [ 3600051 ] for tables in a list, table cells are not compacted.
  - New setting `stylesheet_dirs` (see above).

    Now, it is easy to add a custom stylesheet to Docutils' default
    stylesheet with, e.g., ``--stylesheet_path='html4css1.css, mystyle.css'``

    Changed behaviour of the default settings:
      if there is a file ``html4css1.css`` in the working directory of the
      process at launch, it is used instead of the one provided by Docutils
      in the writer source directory.

  - New default for math-output_: ``HTML math.css``.
  - Avoid repeated class declarations in html4css1 writer
    (modified version of patch [ 104 ]).

  .. _math-output: docs/user/config.html#math-output

* docutils/writers/latex2e/__init__.py

  - Drop the simple algorithm replacing straight double quotes with
    English typographic ones.
    Activate the SmartQuotes_ transform if you want this feature.
  - New setting `stylesheet_dirs`: Comma-separated list of directories
    where stylesheets are found. Used by `stylesheet_path` when expanding
    relative path arguments.

  .. _SmartQuotes: docs/user/config.html#smart-quotes

* docutils/writers/manpage.py

  - Fix [3607063] handle lines starting with a period.
  - Fix option separating comma was bold (thanks to Bill Morris).

Release 0.10 (2012-12-16)
=========================

Docutils 0.10 is compatible with Python versions from 2.4 to 3.2.

* General:

  - SmartQuotes transform for typographic quotes and dashes.

  - ``docutils/math``, ``docutils/error_reporting.py``, and
    ``docutils/urischemes.py`` moved to the utils package.
    Code importing these modules needs to adapt, e.g.::

      try:
          import docutils.math as math
      except ImportError:
          import docutils.utils.math as math

  - enhanced math and error handling.

* docutils/io.py

  - FileInput/FileOutput: no system-exit on IOError.
    The `handle_io_errors` argument is ignored.

* docutils/writers/html4css1/__init__.py

  - Use ``<code>`` tag for inline "code",
    do not drop nested inline nodes (syntax highlight tokens).
  - Customizable MathJax URL (based on patch by Dmitry Shachnev).
  - No line break after opening inline math tag.

* docutils/writers/latex2e/__init__.py, docutils/writers/xetex/__init__.py

  - Fix section numbering by LaTeX.

* docutils/writers/s5_html/__init__.py

  - Fix [ 3556388 ] Mathjax does not work with rst2s5.


Release 0.9.1 (2012-06-17)
==========================

.. Note::

   Docutils 0.9.1 is the last version supporting Python 2.3.

* General:

  Several fixes for Python 3 usage.

* docutils/setup.py

  - Fix [ 3527842 ]. Under Python 3, converted tests and tools were
    installed in the PYTHONPATH. Converted tests are now
    stored in ``docutils/test3/``, tools no longer need conversion.

    If you installed one of Docutils versions 0.7 ... 0.9 with
    ``setup.py install`` under Python 3, remove the spurious
    ``test/`` and ``tools/`` directories in the site library root.


Release 0.9 (2012-05-02)
=========================

* General:

  - reStructuredText "code" role and directive with syntax highlighting
    by Pygments_.
  - "code" option of the "include" directive.

  .. _Pygments: https://pygments.org/

  - Fix [ 3402314 ] allow non-ASCII whitespace, punctuation
    characters and "international" quotes around inline markup.

  - Fix handling of missing stylesheets.

* setup.py

  - Fix [ 2971827 ] and [ 3442827 ]
    extras/roman.py moved to docutils/utils/roman.py

* docutils/utils.py -> docutils/utils/__init__.py

  - docutils.utils is now a package (providing a place for sub-modules)

* docutils/writers/html4css1/__init__.py

  - change default for `math-output` setting to MathJax

* docutils/writers/latex2e/__init__.py

  - Support the `abbreviation` and `acronym` standard roles.
  - Record only files required to generate the LaTeX source as dependencies.
  - Use ``\setcounter{secnumdepth}{0}`` instead of ``*``-versions
    when suppressing LaTeX section numbering.


Release 0.8.1 (2011-08-30)
==========================

* General:

  - Fix [ 3364658 ] (Change last file with Apache license to BSD-2-Clause)
    and [ 3395920 ] (correct copyright info for rst.el).

* docutils/writers/latex2e/__init__.py

  - Clean up Babel language setting. Restores Sphinx compatibility.


Release 0.8 (2011-07-07)
========================

* COPYING:

  - Some additions to the Docutils core are released under the 2-Clause BSD
    license.

* General:

  - Handle language codes according to `BCP 47`_.
  - If the specified language is not supported by Docutils,
    warn and fall back to English.
  - Math support: reStructuredText "math" role and directive,
    ``math`` and ``math_block`` doctree elements.
  - Orphaned "python" reader and "newlatex2e" writer moved to the sandbox.

  .. _BCP 47: https://www.rfc-editor.org/rfc/bcp/bcp47.txt

* reStructuredText:

  - most directives now support a "name" option that attaches a
    reference name. So you can write ::

      .. figure:: image.png
         :name: figure name

    as a short form of ::

      .. _figure name:

      .. figure:: image.png

Internationalization:

* Added lithuanian mappings.

Components:

* HTML writer:

  - New setting "math-output" with support for HTML, MathML, and LaTeX.

* LaTeX2e writer:

  - Convert image URI to a local file path.
  - Apply [ 3148141 ] fix multicolumn support when a colspanning cell
    has more than one paragraph (Wolfgang Scherer).

* XeTeX writer:

  - New writer generating LaTeX code for compiling with ``xelatex``.

    XeTeX uses unicode and modern font technologies.

* and fixes and enhancements here and there.


Release 0.7 (2010-07-07)
========================

Components:

* HTML writer:

  - Support SVG and SWF images (thanks to Stefan Rank).
  - Generate valid XHTML for centered images with targets.
    Use CSS classes instead of "align" tags for image alignment.

* LaTeX2e writer:

  - Use the ``\url`` command for URLs (breaks long URLs instead of writing
    into the margin).
  - Preserve runs of spaces in 'inline literals'.
  - Deprecate ``figure_footnotes`` setting.
  - Rename ``use_latex_footnotes`` setting to `docutils_footnotes`__.
  - New ``latex_preamble`` setting.
  - Use PDF standard fonts (Times/Helvetica/Courier) as default.
  - `hyperref` package called with ``unicode`` option (see the
    `hyperref config tips`__ for how to override).
  - Drop the special `output_encoding`__ default ("latin-1").
    The Docutils wide default (usually "UTF-8") is used instead.

__ docs/user/config.html#docutils-footnotes
__ docs/user/latex.html#hyperlinks
__ docs/user/latex.html#output-encoding

* manpage writer:

  - Titles level 1, that is ``.SH``, always uppercase.
  - Apply patch from mg: literal text should be bold in man-pages.

General:

* io.FileInput opens files as text files with universal newline support
  (mode "rU", configurable with the new optional argument "mode").

* setup.py:

  - Python 3 support: copy test/ and tools/ to the build-dir
    and convert Python sources with 2to3.


Release 0.6 (2009-10-11)
========================

Docutils 0.6 is compatible with Python versions from 2.3 up to 2.6
and convertible to 3.1 code.

.. note::

   The "newlatex" writer is orphaned.

   The recommended way to generate PDF output is to use either the
   LaTeX2e writer or one of the alternatives listed at
   https://docutils.sourceforge.io/docs/user/links.html#pdf.

* reStructuredText:

  - Allow length units for all length specifications.
  - Allow percent sign in "scale" argument of "figure" and "image" directives.
  - Bugfix: The "figalign" argument of a figure now works as intended
    (aligning the figure not its contents).
  - Align images with class "align-[right|center|left]"
    (allows setting the alignment of an image in a figure).
  - Hard tabs in literal inclusions are replaced by spaces. This is
    configurable via the new "tab-width" option of the "include" directive
    (a negative tab-width prevents tab expansion).

* HTML writer:

  - ``--stylesheet`` and ``--stylesheet-path`` options now support a comma
    separated list of stylesheets.

* LaTeX2e writer:

  - New defaults:
    - font-encoding: "T1" (formerly implicitly set by 'ae').
    - use-latex-toc: true (ToC with page numbers).
    - use-latex-footnotes: true (no mixup with figures).
    - Float placement defaults to "here definitely" (configurable).
    - Align of image in a figure defaults to 'center'.
    - Use class defaults for page margins ('typearea' now optional).
  - Support LaTeX packages as ``--stylesheet`` arguments.
  - Use ``bp`` for lengths without unit or unit ``pt``,
    do not convert ``px`` to ``pt``.
  - Do not use 'ae' and 'aeguill' packages if font-encoding is set to ''.
  - Set sub- and superscript role argument as text not math.
  - Support custom roles based on standard roles.
  - Load packages and define macros only if required in the document.
  - All Docutils specific LaTeX macros are prefixed with ``DU``.
  - Better conformance to Docutils specifications with "use_latex_toc".
  - If 'sectnum_xform' is False, the 'sectnum' directive triggers
    section numbering by LaTeX.
  - Use default font in admonitions and sidebar.
  - Typeset generic topic as "quote with title".
  - Use template (file and configuration option).
  - Render doctest blocks as literal blocks (indented).

* ODT writer:

  - moved from sandbox to Doctutils core.

* manpage writer:

  - moved from sandbox to Doctutils core.


Release 0.5 (2008-06-25)
========================

.. Note::

   Docutils 0.5 is the last version supporting Python 2.2.

Components:

* HTML writer.

  - Dropped all ``name`` attributes of ``a`` elements (``id`` is
    universally supported now).

* LaTeX2e writer:

  - Better bibTeX citation support.
  - Add ``--literal-block-env``

* PEP writer:

  - Changed to support new python.org website structure and
    pep2pyramid.py.

reStructuredText:

* Changed the directive API to a new object-oriented system.
  (Compatibility for the old, functional-style directive interface is
  retained.)  See the updated `Creating reStructuredText Directives`__
  how-to.

  __ docs/howto/rst-directives.html

* Allow ``+`` and ``:`` in reference names requested for citations.

Documentation:

* Added `Deploying Docutils Securely`__

  __ docs/howto/security.txt

Internationalization:

* Added hebrew mappings.

General:

* Configuration files are now assumed and required to be
  UTF-8-encoded.

* Added docutils/writers/html4css1/template.txt.

* Enhance emacs support.


Release 0.4 (2006-01-09)
========================

.. Note::

   Docutils 0.4 is the last version supporting Python 2.1.

   It is also the last version that will make compromises in
   its HTML output for Netscape Navigator 4.  Docutils 0.5 will
   require more up-to-date browsers (the exact definition is to be
   determined).

Components:

* Added an `S5/HTML writer`__ and the rst2s5.py__ front end:
  multi-platform, multi-browser HTML slide shows.

  __ docs/user/slide-shows.html
  __ docs/user/tools.html#rst2s5-py

* The newlatex2e writer is nearing completion.

* Added a DocTree reader, ``publish_doctree`` and
  ``publish_from_doctree`` convenience functions, for document tree
  extraction and reprocessing.

reStructuredText:

* Added directives: "container__" (generic block-level container),
  "default-role__" (role used for \`backtick\` syntax), "title__"
  (document title metadata), and "date__" (generate the current local
  date, for substitution definitions).

  __ docs/ref/rst/directives.html#container
  __ docs/ref/rst/directives.html#default-role
  __ docs/ref/rst/directives.html#title
  __ docs/ref/rst/directives.html#date

* Length units are now supported for image__ sizes.

  __ docs/ref/rst/directives.html#image

* Added `standard definition files`__ for special characters etc.

  __ docs/ref/rst/definitions.html

Internationalization:

* Added Japanese and Simplified Chinese language mappings, and support
  for double-width CJK-characters in tables and section titles.

Documentation:

* Added a `guide for distributors`__ (package maintainers) and a
  `guide for developers`__.

  __ docs/dev/distributing.html
  __ docs/dev/hacking.html

General:

* Added significant `Emacs support for reST`__.

  __ docs/user/emacs.html

* Added a `--strip-comments`__ option.

  __ docs/user/config.html#strip-comments

* `--embed-stylesheet`__ is now the default for the HTML writer
  (rather than --link-stylesheet).

  __ docs/user/config.html#embed-stylesheet


Release 0.3.9 (2005-05-26)
==========================

* Added "file_insertion_enabled__" and "raw_enabled__" settings.

  __ docs/user/config.html#file-insertion-enabled
  __ docs/user/config.html#raw-enabled

* Added `auto-enumerated lists`__.

  __ docs/ref/rst/restructuredtext.html#enumerated-lists

* Added `"header" and "footer"`__ directives.

  __ docs/ref/rst/directives.html#document-header-footer

* Added "list-table__" directive.

  __ docs/ref/rst/directives.html#list-table

* Added support for `section subtitles`__.

  __ docs/user/config.html#sectsubtitle-xform

* Added "field_name_limit__" and "option_limit__" settings to HTML writer.

  __ docs/user/config.html#field-name-limit
  __ docs/user/config.html#option-limit

* Added "cloak_email_addresses__" setting to HTML writer.

  __ docs/user/config.html#cloak-email-addresses

* UTF-8 BOMs are now removed from the input stream.


Release 0.3.7 (2004-12-24)
==========================

* A special "`line block`__" syntax has been added.  (Also see the
  `quick reference`__.)

  __ docs/ref/rst/restructuredtext.html#line-blocks
  __ docs/user/rst/quickref.html#line-blocks

* Empty sections are now allowed.

* A "raw__" role has been added.

  __ docs/ref/rst/roles.html#raw

* The LaTeX writer now escapes consecutive dashes (like "--" or "---")
  so that they are no longer transformed by LaTeX to en or em dashes.
  (Please see the FAQ__ for how to represent such dashes.)

  __ FAQ.html#how-can-i-represent-esoteric-characters-e-g-character-entities-in-a-document

* A `dependency recorder`__ has been added.

  __ docs/user/config.html#record-dependencies

* A directive has been added for `compound paragraphs`__.

  __ docs/ref/rst/directives.html#compound-paragraph


Release 0.3.5 (2004-07-29)
==========================

* Improved, extended and reorganized the documentation__.

  __ docs/index.html

* Added "csv-table__" directive.

  __ docs/ref/rst/directives.html#csv-table

.. _HISTORY: HISTORY.html
.. _Python 3 compatibility: README.html#python-3-compatibility


/Part 5. 109.📜 docutils-0.20.1/THANKS.txt

.. .. include:: /docutils-0.20.1/docs/header0.txt

Acknowledgements
================

:Author: David Goodger
:Contact: goodger@python.org
:Date: $Date: 2022-11-29 00:55:25 +0100 (Di, 29. Nov 2022) $
:Revision: $Revision: 9280 $
:Copyright: This document has been placed in the public domain.

I would like to acknowledge the people who have made a direct impact
on the Docutils project, knowingly or not, in terms of encouragement,
suggestions, criticism, bug reports, code contributions, cash
donations, tasty treats, and related projects:

* Aahz
* David Abrahams
* Guy D. Alcos
* David Ascher
* Ned Batchelder
* Heiko Baumann
* Anthony Baxter
* Eric Bellot
* Frank Bennett
* Ian Bicking
* Marek Blaha
* Martin Blais
* Stephen Boulet
* Fred Bremmer
* Simon Budig
* Bill Bumgarner
* Brett Cannon
* Greg Chapman
* Nicolas Chauveau
* Beni Cherniavsky
* Adam Chodorowski
* Brent Cook
* Laura Creighton
* Artur de Sousa Rocha
* Stephan Deibel & `Wing IDE <http://wingide.com/>`__
* Jason Diamond
* William Dode
* Fred Drake
* Reggie Dugard
* Dethe Elza
* Marcus Ertl
* Benja Fallenstein
* fantasai
* Stefane Fermigier
* Michael Foord
* Jim Fulton
* Peter Funk
* Lele Gaifax
* Dinu C. Gherman
* Matt Gilbert
* Jorge Gonzalez
* Engelbert Gruber
* Jacob Hallen
* Simon Hefti
* Doug Hellmann
* Marc Herbert
* Juergen Hermann
* Jannie Hofmeyr
* Steve Holden
* Michael Hudson
* Marcelo Huerta San Martin
* Ludger Humbert
* Jeremy Hylton
* Tony Ibbs
* Alan G. Isaac
* Alan Jaffray
* Joe YS Jaw
* Dmitry Jemerov
* Richard Jones
* Andreas Jung
* Robert Kern
* Garth Kidd
* Philipp Knüsel
* Axel Kollmorgen
* Jeff Kowalczyk
* Martin F. Krafft
* Meir Kriheli
* Dave Kuhlman
* Lloyd Kvam
* Kirill Lapshin
* Nicola Larosa
* Daniel Larsson
* Marc-Andre Lemburg
* Julien Letessier
* Chris Liechti
* Wolfgang Lipp
* Edward Loper
* Dallas Mahrt
* Brecht Machiels
* Mikolaj Machowski
* Ken Manheimer
* Bob Marshall
* Mark McEahern
* Vincent McIntyre
* John F Meinel Jr
* Ivan Mendez for Free Software Office of the University of A Coruña
* Eric Meyer
* Günter Milde
* Skip Montanaro
* Paul Moore
* Nigel W. Moriarty
* Hisashi Morita
* Mark Nodine
* Omidyar Network (Pierre Omidyar & Doug Solomon)
* Panjunyong
* Patrick K. O'Brien
* Michel Pelletier
* Toshio Kuratomi
* Sam Penrose
* Tim Peters
* Pearu Peterson
* Martijn Pieters
* Mark Pilgrim
* Brett g Porter
* David Priest
* Jens Quade
* Stefan Rank
* Edward K. Ream
* Andy Robinson
* Tavis Rudd
* Tracy Ruggles
* Oliver Rutherfurd
* Luc Saffre
* Seo Sanghyeon
* Kenichi Sato
* Ueli Schlaepfer
* Gunnar Schwant
* Bill Sconce
* Frank Siebenlist
* Bruce Smith
* Nir Soffer
* Asko Soukka
* Darek Suchojad
* Roman Suzi
* Janet Swisher
* tav
* Kent Tenney
* Bob Tolbert
* Paul Tremblay
* Laurence Tratt
* Adrian van den Dries
* Guido van Rossum
* Miroslav Vasko
* Paul Viren
* Martin von Loewis
* Greg Ward
* Barry Warsaw
* Wu Wei
* Edward Welbourne
* Lea Wiemann
* Anthony Williams
* Robert Wojciechowicz
* Ka-Ping Yee
* Moshe Zadka
* Shmuel Zeigerman

Thank you!

Special thanks to `SourceForge <https://sourceforge.net>`__ and the
`Python Software Foundation <https://www.python.org/psf/>`__.

Hopefully I haven't forgotten anyone or misspelled any names;
apologies (and please let me know!) if I have.
