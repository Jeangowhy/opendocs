This is auth.info, produced by makeinfo version 7.0.3 from auth.texi.

This file describes the Emacs auth-source library.

   Copyright © 2008–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License”.

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”
INFO-DIR-SECTION Emacs lisp libraries
START-INFO-DIR-ENTRY
* Auth-source: (auth).          The Emacs auth-source library.
END-INFO-DIR-ENTRY


File: auth.info,  Node: Top,  Next: Overview,  Up: (dir)

# /. Emacs auth-source
*********************

This manual describes the Emacs auth-source library.

   It is a way for multiple applications to share a single configuration
(in Emacs and in files) for user convenience.

   This file describes the Emacs auth-source library.

   Copyright © 2008–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License”.

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

* Menu:

* Overview::                    Overview of the auth-source library.
* Help for users::
* Multiple GMail accounts with Gnus::
* Secret Service API::
* The Unix password store::
* Help for developers::
* GnuPG and EasyPG Assistant Configuration::
* GNU Free Documentation License::  The license for this documentation.
* Index::
* Function Index::
* Variable Index::


File: auth.info,  Node: Overview,  Next: Help for users,  Prev: Top,  Up: Top

# /. 1 Overview
**************

The auth-source library is simply a way for Emacs and Gnus, among
others, to answer the old burning question “What are my user name and
password?”

   (This is different from the old question about burning “Where is the
fire extinguisher, please?”.)

   The auth-source library supports more than just the user name or the
password (known as the secret).

   Similarly, the auth-source library supports multiple storage backend,
currently either the classic “netrc” backend, examples of which you can
see later in this document, JSON files, the Secret Service API, and
pass, the standard unix password manager.  This is done with EIEIO-based
backends and you can write your own if you want.


File: auth.info,  Node: Help for users,  Next: Multiple GMail accounts with Gnus,  Prev: Overview,  Up: Top

# /. 2 Help for users
********************

“Netrc” files are a de facto standard.  They look like this:

     machine MYMACHINE login MYLOGINNAME password MYPASSWORD port MYPORT

   The ‘machine’ is the server (either a DNS name or an IP address).
It’s known as :HOST in ‘auth-source-search’ queries.

   The ‘port’ is the connection port or protocol.  It’s known as :PORT
in ‘auth-source-search’ queries.

   The ‘user’ is the user name.  It’s known as :USER in
‘auth-source-search’ queries.  You can also use ‘login’ and ‘account’.

   Matching entries are usually used in the order they appear, so
placing the most specific entries first in the file is a good idea.  For
instance:

     machine example.com login foobar password geheimnis port smtp
     machine example.com login foobar password hemmelig

   Here we’re using one password for the ‘smtp’ service, and a different
one for all the other services.

   You can also use this file to specify client certificates to use when
setting up TLS connections.  The format is:

     machine MYMACHINE port MYPORT key KEY cert CERT

   KEY and CERT are filenames containing the key and certificate to use
respectively.  In order to make network connections use them
automatically, either pass ‘:client-certificate t’ to
‘open-network-stream’, or customize
‘network-stream-use-client-certificates’ to ‘t’.

   You can use spaces inside a password or other token by surrounding
the token with either single or double quotes.

   You can use apostrophes inside a password or other token by
surrounding it with double quotes, e.g., ‘"he'llo"’.  Similarly you can
use double quotes inside a password or other token by surrounding it
with apostrophes, e.g., ‘'he"llo'’.  You can’t mix both (so a password
or other token can’t have both apostrophes and double quotes).

   All this is optional.  You could just say (but we don’t recommend it,
we’re just showing that it’s possible)

     password MYPASSWORD

   to use the same password everywhere.  Again, _DO NOT DO THIS_ or you
will be pwned as the kids say.

   “Netrc” files are usually called ‘.authinfo’ or ‘.netrc’; nowadays
‘.authinfo’ seems to be more popular and the auth-source library
encourages this confusion by accepting both, as you’ll see later.

   If you have problems with the search, set ‘auth-source-debug’ to
‘'trivia’ and see what host, port, and user the library is checking in
the ‘*Messages*’ buffer.  Ditto for any other problems, your first step
is always to see what’s being checked.  The second step, of course, is
to write a blog entry about it and wait for the answer in the comments.

   You can customize the variable ‘auth-sources’.  The following may be
needed if you are using an older version of Emacs or if the auth-source
library is not loaded for some other reason.

     (require 'auth-source)             ;; probably not necessary
     (customize-variable 'auth-sources) ;; optional, do it once

 -- Variable: auth-sources

     The ‘auth-sources’ variable tells the auth-source library where
     your netrc files, Secret Service API collection items, or your
     password store live for a particular host and protocol.  While you
     can get fancy, the default and simplest configuration is:

          ;;; old default: required :host and :port, not needed anymore
          (setq auth-sources '((:source "~/.authinfo.gpg" :host t :port t)))
          ;;; mostly equivalent (see below about fallbacks) but shorter:
          (setq auth-sources '((:source "~/.authinfo.gpg")))
          ;;; even shorter and the _default_:
          (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
          ;;; use the Secrets API LOGIN collection
          ;;; (*note Secret Service API::)
          (setq auth-sources '("secrets:Login"))
          ;;; use pass (~/.password-store)
          ;;; (*note The Unix password store::)
          (auth-source-pass-enable)
          ;;; JSON data in format [{ "machine": "SERVER",
          ;;; "login": "USER", "password": "PASSWORD" }...]
          (setq auth-sources '("~/.authinfo.json.gpg"))

     By adding multiple entries to ‘auth-sources’ with a particular host
     or protocol, you can have specific netrc files for that host or
     protocol.  Usually this is unnecessary but may make sense if you
     have shared netrc files or some other unusual setup (90% of Emacs
     users have unusual setups and the remaining 10% are _really_
     unusual).

     Here’s a mixed example using two sources:

          (setq auth-sources '((:source (:secrets default)
                                :host "myserver" :user "joe")
                               "~/.authinfo.gpg"))

   If you don’t customize ‘auth-sources’, you’ll have to live with the
defaults: the unencrypted netrc file ‘~/.authinfo’ will be used for any
host and any port.

   If that fails, any host and any port are looked up in the netrc file
‘~/.authinfo.gpg’, which is a GnuPG encrypted file (*note GnuPG and
EasyPG Assistant Configuration::).

   Finally, the unencrypted netrc file ‘~/.netrc’ will be used for any
host and any port.

   The typical netrc line example is without a port.

     machine YOURMACHINE login YOU password YOURPASSWORD

   This will match any authentication port.  Simple, right?  But what if
there’s a SMTP server on port 433 of that machine that needs a different
password from the IMAP server?

     machine YOURMACHINE login YOU password SMTPPASSWORD port 433
     machine YOURMACHINE login YOU password GENERALPASSWORD

   If you wish to specify a particular SMTP authentication method to use
with a machine, you can use the ‘smtp-auth’ keyword.  *Note
Authentication: (smtpmail)Authentication, for available methods.

   For url-auth authentication (HTTP/HTTPS), you need to put this in
your netrc file:

     machine yourmachine.com:80 port http login testuser password testpass

   This will match any realm and authentication method (basic or digest)
over HTTP.  HTTPS is set up similarly.  If you want finer controls,
explore the url-auth source code and variables.

   For Tramp authentication, use:

     machine yourmachine.com port scp login testuser password testpass

   Note that the port denotes the Tramp connection method.  When you
don’t use a port entry, you match any Tramp method, as explained
earlier.  Since Tramp has about 88 connection methods, this may be
necessary if you have an unusual (see earlier comment on those) setup.

   The netrc format is directly translated into JSON, if you are into
that sort of thing.  Just point to a JSON file with entries like this:

     [
      { "machine": "yourmachine.com", "port": "http",
         "login": "testuser", "password": "testpass" }
     ]


File: auth.info,  Node: Multiple GMail accounts with Gnus,  Next: Secret Service API,  Prev: Help for users,  Up: Top

# /. 3 Multiple GMail accounts with Gnus
***************************************

For multiple GMail accounts with Gnus, you have to make two nnimap
entries in your ‘gnus-secondary-select-methods’ with distinct names:

     (setq gnus-secondary-select-methods '((nnimap "gmail"
                                              (nnimap-address "imap.gmail.com"))
                                           (nnimap "gmail2"
                                              (nnimap-address "imap.gmail.com"))))

   Your netrc entries will then be:

     machine gmail login account@gmail.com password "account password" port imap
     machine gmail2 login account2@gmail.com password "account2 password" port imap


File: auth.info,  Node: Secret Service API,  Next: The Unix password store,  Prev: Multiple GMail accounts with Gnus,  Up: Top

# /. 4 Secret Service API
************************

The “Secret Service API” is a standard from freedesktop.org to securely
store passwords and other confidential information.  This API is
implemented by system daemons such as the GNOME Keyring and the KDE
Wallet (these are GNOME and KDE packages respectively and should be
available on most modern GNU/Linux systems).  It has been tested also
with KeePassXC.

   The auth-source library uses the ‘secrets.el’ library to connect
through the Secret Service API.  You can also use that library in other
packages, it’s not exclusive to auth-source.

 -- Variable: secrets-enabled
     After loading ‘secrets.el’, a non-‘nil’ value of this variable
     indicates the existence of a daemon providing the Secret Service
     API.

 -- Command: secrets-show-secrets
     This command shows all collections, items, and their attributes.

   The atomic objects managed by the Secret Service API are “secret
items”, which contain things an application wishes to store securely,
like a password.  Secret items have a label (a name), the “secret”
(which is the string we want, like a password), and a set of lookup
attributes.  The attributes can be used to search and retrieve a secret
item at a later date.

   Secret items are grouped in “collections”.  A collection is sometimes
called a ‘keyring’ or ‘wallet’ in GNOME Keyring and KDE Wallet but it’s
the same thing, a group of secrets.  Collections are personal and
protected so only the owner can open them.

   The most common collection is called ‘"login"’.

   A collection can have an alias.  The alias ‘"default"’ is commonly
used so the clients don’t have to know the specific name of the
collection they open.  Other aliases are not supported yet.  Since
aliases are globally accessible, set the ‘"default"’ alias only when
you’re sure it’s appropriate.

 -- Function: secrets-list-collections
     This function returns all the collection names as a list.

 -- Function: secrets-set-alias collection alias
     Set ALIAS as alias of collection labeled COLLECTION.  Currently
     only the alias ‘"default"’ is supported.

 -- Function: secrets-get-alias alias
     Return the collection name ALIAS is referencing to.  Currently only
     the alias ‘"default"’ is supported.

   Collections can be created and deleted by the functions
‘secrets-create-collection’ and ‘secrets-delete-collection’.  Usually,
this is not done from within Emacs.  Do not delete standard collections
such as ‘"login"’.

   With GNOME Keyring, there exists a special collection called
‘"session"’, which has the lifetime of the user being logged in.  Its
data are not stored on disk and go away when the user logs out.
Therefore, it can be used to store and retrieve secret items
temporarily.  The ‘"session"’ collection is better than a persistent
collection when the secret items should not live permanently.  The
‘"session"’ collection can be addressed either by the string
‘"session"’, or by ‘nil’, whenever a collection parameter is needed.

   However, other Secret Service provider don’t create this temporary
‘"session"’ collection.  You shall check first that this collection
exists, before you use it.

 -- Function: secrets-list-items collection
     Returns all the item labels of COLLECTION as a list.

 -- Function: secrets-create-item collection item password &rest
          attributes
     This function creates a new item in COLLECTION with label ITEM and
     password PASSWORD.  The label ITEM does not have to be unique in
     COLLECTION.  ATTRIBUTES are key-value pairs set for the created
     item.  The keys are keyword symbols, starting with a colon; values
     are strings.  Example:

          ;;; The collection is "session", the label is "my item"
          ;;; and the secret (password) is "geheim".
          (secrets-create-item "session" "my item" "geheim"
           :method "sudo" :user "joe" :host "remote-host")

     The key ‘:xdg:schema’ determines the scope of the item to be
     generated, i.e. for which applications the item is intended for.
     This is just a string like "org.freedesktop.NetworkManager.Mobile"
     or "org.gnome.OnlineAccounts", the other required keys are
     determined by this.  If no ‘:xdg:schema’ is given,
     "org.freedesktop.Secret.Generic" is used by default.

 -- Function: secrets-get-secret collection item
     Return the secret of item labeled ITEM in COLLECTION.  If there are
     several items labeled ITEM, it is undefined which one is returned.
     If there is no such item, return ‘nil’.

 -- Function: secrets-delete-item collection item
     This function deletes item ITEM in COLLECTION.  If there are
     several items labeled ITEM, it is undefined which one is deleted.

   The lookup attributes, which are specified during creation of a
secret item, must be a key-value pair.  Keys are keyword symbols,
starting with a colon; values are strings.  They can be retrieved from a
given secret item and they can be used for searching of items.

 -- Function: secrets-get-attribute collection item attribute
     Returns the value of key ATTRIBUTE of item labeled ITEM in
     COLLECTION.  If there are several items labeled ITEM, it is
     undefined which one is returned.  If there is no such item, or the
     item doesn’t own this key, the function returns ‘nil’.

 -- Function: secrets-get-attributes collection item
     Return the lookup attributes of item labeled ITEM in COLLECTION.
     If there are several items labeled ITEM, it is undefined which one
     is returned.  If there is no such item, or the item has no
     attributes, it returns ‘nil’.  Example:

          (secrets-get-attributes "session" "my item")
               ⇒ ((:user . "joe") (:host . "remote-host"))

 -- Function: secrets-search-items collection &rest attributes
     Search for the items in COLLECTION with matching ATTRIBUTES.  The
     ATTRIBUTES are key-value pairs, as used in ‘secrets-create-item’.
     Example:

          (secrets-search-items "session" :user "joe")
               ⇒ ("my item" "another item")

   The auth-source library uses the ‘secrets.el’ library and thus the
Secret Service API when you specify a source matching
‘"secrets:COLLECTION"’.  For instance, you could use ‘"secrets:session"’
to use the ‘"session"’ collection, open only for the lifetime of Emacs.
Or you could use ‘"secrets:Login"’ to open the ‘"Login"’ collection.  As
a special case, you can use the symbol ‘default’ in ‘auth-sources’ (not
a string, but a symbol) to specify the ‘"default"’ alias.  Here is a
contrived example that sets ‘auth-sources’ to search three collections
and then fall back to ‘~/.authinfo.gpg’.

     (setq auth-sources '(default
                          "secrets:session"
                          "secrets:Login"
                          "~/.authinfo.gpg"))

   Attribute values in the auth-source spec, which are not strings (like
port numbers), are stringified prior calling the ‘secrets.el’ functions.


File: auth.info,  Node: The Unix password store,  Next: Help for developers,  Prev: Secret Service API,  Up: Top

# /. 5 The Unix password store
*****************************

The standard unix password manager (or just ‘pass’) stores your
passwords in ‘gpg’-protected files following the Unix philosophy.  The
store location (any directory) must be specified in the
‘auth-source-pass-filename’ variable which defaults to
‘~/.password-store’.

   Emacs integration of ‘pass’ follows the approach suggested by the
pass project itself for data organization to find data.  In particular,
to store a password for the user ‘rms’ on the host ‘gnu.org’ and port
‘22’, you should use one of the following filenames.

‘gnu.org.gpg’
     No username or port in the filename means that any username and
     port will match.

‘gnu.org/rms.gpg’
     The username to match can be expressed as filename inside a
     directory whose name matches the host.  This is useful if the store
     has passwords for several users on the same host.

‘rms@gnu.org.gpg’
     The username can also be expressed as a prefix, separated from the
     host with an at-sign (‘@’).

‘gnu.org:22.gpg’
     The port (aka.  service) to match can only be expressed after the
     host and separated with a colon (‘:’).  The separator can be
     changed through the ‘auth-source-pass-port-separator’ variable.

‘gnu.org:22/rms.gpg’

‘rms@gnu.org:22.gpg’

‘a/b/gnu.org.gpg’
     Entries can be stored in arbitrary directories.

‘a/b/gnu.org/rms.gpg’

‘a/b/rms@gnu.org.gpg’

‘a/b/gnu.org:22.gpg’

‘a/b/gnu.org:22/rms.gpg’

‘a/b/rms@gnu.org:22.gpg’

   If several entries match, the one matching the most items (where an
“item” is one of username, port or host) is preferred.  For example,
while searching for an entry matching the ‘rms’ user on host ‘gnu.org’
and port ‘22’, then the entry ‘gnu.org:22/rms.gpg’ is preferred over
‘gnu.org.gpg’.  However, such processing is not applied when the option
‘auth-source-pass-extra-parameters’ is set to ‘t’.

   Users of ‘pass’ may also be interested in functionality provided by
other Emacs packages:

   • password-store: library wrapping ‘pass’;
   • pass: major mode to manipulate the store and edit entries;
   • helm-pass: helm interface for pass.

 -- Variable: auth-source-pass-filename
     Set this variable to a string locating the password store on the
     disk.  Defaults to ‘~/.password-store’.

 -- Variable: auth-source-pass-port-separator
     Set this variable to a string that should separate an host name
     from a port in an entry.  Defaults to ‘:’.

 -- Variable: auth-source-pass-extra-query-keywords
     This expands the selection of available keywords to include ‘:max’
     and ‘:require’ and tells more of them to accept a list of query
     parameters as an argument.  When searching, it also favors the
     ‘rms@gnu.org.gpg’ form for usernames over the ‘gnu.org/rms.gpg’
     form, regardless of whether a ‘:user’ param was provided.

     In general, if you prefer idiosyncrasies traditionally exhibited by
     this backend, such as prioritizing field count in a filename or
     matching against subdomain labels, keep this option set to ‘nil’
     (the default).  But, if you experience problems predicting the
     outcome of searches relative to other auth-source backends or
     encounter code expecting to query multiple backends uniformly, try
     flipping it to ‘t’.


File: auth.info,  Node: Help for developers,  Next: GnuPG and EasyPG Assistant Configuration,  Prev: The Unix password store,  Up: Top

# /. 6 Help for developers
*************************

The auth-source library lets you control logging output easily.

 -- Variable: auth-source-debug
     Set this variable to ‘'trivia’ to see lots of output in
     ‘*Messages*’, or set it to a function that behaves like ‘message’
     to do your own logging.

   The auth-source library only has a few functions for external use.

 -- Function: auth-source-search &rest spec &key type max host user port
          secret require create delete &allow-other-keys
     This function searches (or modifies) authentication backends
     according to SPEC.  See the function’s doc-string for details.

   Let’s take a look at an example of using ‘auth-source-search’ from
Gnus’s ‘nnimap.el’.

     (defun nnimap-credentials (address ports)
       (let* ((auth-source-creation-prompts
               '((user  . "IMAP user at %h: ")
                 (secret . "IMAP password for %u@%h: ")))
              (found (nth 0 (auth-source-search :max 1
                                                :host address
                                                :port ports
                                                :require '(:user :secret)
                                                :create t))))
         (if found
             (list (plist-get found :user)
                   (auth-info-password found)
                   (plist-get found :save-function))
           nil)))

   This call requires the user and password (secret) to be in the
results.  It also requests that an entry be created if it doesn’t exist
already.  While the created entry is being assembled, the shown prompts
will be used to interact with the user.  The caller can also pass data
in ‘auth-source-creation-defaults’ to supply defaults for any of the
prompts.

   Note that the password needs to be evaluated if it’s a function.
It’s wrapped in a function to provide some security.

   Later, after a successful login, ‘nnimap.el’ calls the
‘:save-function’ like so:

     (when (functionp (nth 2 credentials))
       (funcall (nth 2 credentials)))

   This will work whether the ‘:save-function’ was provided or not.
‘:save-function’ will be provided only when a new entry was created, so
this effectively says “after a successful login, save the authentication
information we just used, if it was newly created.”

   After the first time it’s called, the ‘:save-function’ will not run
again (but it will log something if you have set ‘auth-source-debug’ to
‘'trivia’).  This is so it won’t ask the same question again, which is
annoying.  This is so it won’t ask the same question again, which is
annoying.  This is so it won’t ask the same question again, which is
annoying.

   So the responsibility of the API user that specified ‘:create t’ is
to call the ‘:save-function’ if it’s provided.

 -- Function: auth-source-delete &rest spec &key delete
          &allow-other-keys
     This function deletes entries matching SPEC from the authentication
     backends.  It returns the entries that were deleted.  The backend
     may not actually delete the entries.

 -- Function: auth-source-forget spec
     This function forgets any cached data that exactly matches SPEC.
     It returns ‘t’ if it forget some data, and ‘nil’ if no matching
     data was found.

 -- Function: auth-source-forget+ &rest spec &allow-other-keys
     This function forgets any cached data matching SPEC.  It returns
     the number of items forgotten.

 -- Function: auth-source-pick-first-password &rest spec
     This function returns the password of the first record found by
     applying ‘auth-source-search’ to SPEC.

 -- Function: auth-info-password auth-info
     This function extracts the password string from the AUTH-INFO
     record.


File: auth.info,  Node: GnuPG and EasyPG Assistant Configuration,  Next: GNU Free Documentation License,  Prev: Help for developers,  Up: Top

# /. Appendix A GnuPG and EasyPG Assistant Configuration
*******************************************************

If the ‘auth-sources’ variable contains ‘~/.authinfo.gpg’ before
‘~/.authinfo’, the auth-source library will try to read the GnuPG
encrypted ‘.gpg’ file first, before the unencrypted file.

   The EasyPG Assistant, which comes bundled with Emacs, handles
decryption of encrypted files automatically, see *note Top: (epa)Top.
It is an Emacs user interface to GnuPG (GNU Privacy Guard), see *note
Top: (gnupg)Top.  To get started with these quickly, see *note Quick
Start: (epa)Quick start.


File: auth.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: GnuPG and EasyPG Assistant Configuration,  Up: Top

# /. Appendix B GNU Free Documentation License
*********************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

# /. ADDENDUM: How to use this License for your documents
========================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: auth.info,  Node: Index,  Next: Function Index,  Prev: GNU Free Documentation License,  Up: Top

# /. Index
*********


File: auth.info,  Node: Function Index,  Next: Variable Index,  Prev: Index,  Up: Top

# /. Function Index
******************

 [index ]
* Menu:

* auth-info-password:                    Help for developers. (line  88)
* auth-source-delete:                    Help for developers. (line  69)
* auth-source-forget:                    Help for developers. (line  75)
* auth-source-forget+:                   Help for developers. (line  80)
* auth-source-pick-first-password:       Help for developers. (line  84)
* auth-source-search:                    Help for developers. (line  15)
* secrets-create-item:                   Secret Service API.  (line  77)
* secrets-delete-item:                   Secret Service API.  (line 102)
* secrets-get-alias:                     Secret Service API.  (line  52)
* secrets-get-attribute:                 Secret Service API.  (line 111)
* secrets-get-attributes:                Secret Service API.  (line 117)
* secrets-get-secret:                    Secret Service API.  (line  97)
* secrets-list-collections:              Secret Service API.  (line  45)
* secrets-list-items:                    Secret Service API.  (line  74)
* secrets-search-items:                  Secret Service API.  (line 126)
* secrets-set-alias:                     Secret Service API.  (line  48)
* secrets-show-secrets:                  Secret Service API.  (line  22)


File: auth.info,  Node: Variable Index,  Prev: Function Index,  Up: Top

# /. Variable Index
******************

 [index ]
* Menu:

* auth-source-debug:                     Help for developers.  (line  8)
* auth-source-pass-extra-query-keywords: The Unix password store.
                                                               (line 74)
* auth-source-pass-filename:             The Unix password store.
                                                               (line 66)
* auth-source-pass-port-separator:       The Unix password store.
                                                               (line 70)
* auth-sources:                          Help for users.       (line 74)
* secrets-enabled:                       Secret Service API.   (line 17)



Tag Table:
Node: Top896
Node: Overview2230
Node: Help for users3038
Node: Multiple GMail accounts with Gnus10017
Node: Secret Service API10839
Node: The Unix password store18134
Node: Help for developers21721
Node: GnuPG and EasyPG Assistant Configuration25709
Node: GNU Free Documentation License26465
Node: Index51843
Node: Function Index51961
Node: Variable Index53344

End Tag Table


Local Variables:
coding: utf-8
