This is gnus.info, produced by makeinfo version 7.0.3 from gnus.texi.

Copyright © 1995–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual”, and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License”.

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”
INFO-DIR-SECTION Emacs network features
START-INFO-DIR-ENTRY
* Gnus: (gnus).                 The newsreader Gnus.
END-INFO-DIR-ENTRY


File: gnus.info,  Node: Top,  Next: Don't Panic,  Up: (dir)

# /. The Gnus Newsreader
***********************

You can read news (and mail) from within Emacs by using Gnus.  The news
can be gotten by any nefarious means you can think of—NNTP, local spool
or your mbox file.  All at the same time, if you want to push your luck.

   This manual corresponds to Gnus v5.13

   Copyright © 1995–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual”, and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License”.

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

* Menu:

* Don't Panic::                 Your first 20 minutes with Gnus.
* Starting Up::                 Finding news can be a pain.
* Group Buffer::                Selecting, subscribing and killing groups.
* Summary Buffer::              Reading, saving and posting articles.
* Article Buffer::              Displaying and handling articles.
* Composing Messages::          Information on sending mail and news.
* Select Methods::              Gnus reads all messages from various select methods.
* Scoring::                     Assigning values to articles.
* Searching::                   Mail and News search engines.
* Various::                     General purpose settings.
* The End::                     Farewell and goodbye.
* Appendices::                  Terminology, Emacs intro, FAQ, History, Internals.
* GNU Free Documentation License::  The license for this documentation.
* Index::                       Variable, function and concept index.
* Key Index::                   Key Index.

Other related manuals

* Message:(message).         Composing messages.
* Emacs-MIME:(emacs-mime).   Composing messages; MIME-specific parts.
* Sieve:(sieve).             Managing Sieve scripts in Emacs.
* EasyPG:(epa).              PGP/MIME with Gnus.
* SASL:(sasl).               SASL authentication in Emacs.

 — The Detailed Node Listing —

Starting Gnus

* Finding the News::            Choosing a method for getting news.
* The Server is Down::          How can I read my mail then?
* Child Gnusae::                You can have more than one Gnus active at a time.
* Fetching a Group::            Starting Gnus just to read a group.
* New Groups::                  What is Gnus supposed to do with new groups?
* Changing Servers::            You may want to move from one server to another.
* Startup Files::               Those pesky startup files—‘.newsrc’.
* Auto Save::                   Recovering from a crash.
* The Active File::             Reading the active file over a slow line Takes Time.
* Startup Variables::           Other variables you might change.

New Groups

* Checking New Groups::         Determining what groups are new.
* Subscription Methods::        What Gnus should do with new groups.
* Filtering New Groups::        Making Gnus ignore certain new groups.

Group Buffer

* Group Buffer Format::         Information listed and how you can change it.
* Group Maneuvering::           Commands for moving in the group buffer.
* Selecting a Group::           Actually reading news.
* Subscription Commands::       Unsubscribing, killing, subscribing.
* Group Data::                  Changing the info for a group.
* Group Levels::                Levels?  What are those, then?
* Group Score::                 A mechanism for finding out what groups you like.
* Marking Groups::              You can mark groups for later processing.
* Foreign Groups::              Creating and editing groups.
* Group Parameters::            Each group may have different parameters set.
* Listing Groups::              Gnus can list various subsets of the groups.
* Sorting Groups::              Re-arrange the group order.
* Group Maintenance::           Maintaining a tidy ‘.newsrc’ file.
* Browse Foreign Server::       You can browse a server.  See what it has to offer.
* Exiting Gnus::                Stop reading news and get some work done.
* Group Topics::                A folding group mode divided into topics.
* Non-ASCII Group Names::       Accessing groups of non-English names.
* Misc Group Stuff::            Other stuff that you can to do.

Group Buffer Format

* Group Line Specification::    Deciding how the group buffer is to look.
* Group Mode Line Specification::  The group buffer mode line.
* Group Highlighting::          Having nice colors in the group buffer.

Group Topics

* Topic Commands::              Interactive E-Z commands.
* Topic Variables::             How to customize the topics the Lisp Way.
* Topic Sorting::               Sorting each topic individually.
* Topic Topology::              A map of the world.
* Topic Parameters::            Parameters that apply to all groups in a topic.

Misc Group Stuff

* Scanning New Messages::       Asking Gnus to see whether new messages have arrived.
* Group Information::           Information and help on groups and Gnus.
* Group Timestamp::             Making Gnus keep track of when you last read a group.
* File Commands::               Reading and writing the Gnus files.
* Sieve Commands::              Managing Sieve scripts.

Summary Buffer

* Summary Buffer Format::       Deciding how the summary buffer is to look.
* Summary Maneuvering::         Moving around the summary buffer.
* Choosing Articles::           Reading articles.
* Paging the Article::          Scrolling the current article.
* Reply Followup and Post::     Posting articles.
* Delayed Articles::            Send articles at a later time.
* Marking Articles::            Marking articles as read, expirable, etc.
* Limiting::                    You can limit the summary buffer.
* Threading::                   How threads are made.
* Sorting the Summary Buffer::  How articles and threads are sorted.
* Asynchronous Fetching::       Gnus might be able to pre-fetch articles.
* Article Caching::             You may store articles in a cache.
* Persistent Articles::         Making articles expiry-resistant.
* Sticky Articles::             Article buffers that are not reused.
* Article Backlog::             Having already read articles hang around.
* Saving Articles::             Ways of customizing article saving.
* Decoding Articles::           Gnus can treat series of (uu)encoded articles.
* Article Treatment::           The article buffer can be mangled at will.
* MIME Commands::               Doing MIMEy things with the articles.
* Charsets::                    Character set issues.
* Article Commands::            Doing various things with the article buffer.
* Summary Sorting::             Sorting the summary buffer in various ways.
* Finding the Parent::          No child support?  Get the parent.
* Alternative Approaches::      Reading using non-default summaries.
* Tree Display::                A more visual display of threads.
* Mail Group Commands::         Some commands can only be used in mail groups.
* Various Summary Stuff::       What didn’t fit anywhere else.
* Exiting the Summary Buffer::  Returning to the Group buffer,
                                or reselecting the current group.
* Crosspost Handling::          How crossposted articles are dealt with.
* Duplicate Suppression::       An alternative when crosspost handling fails.
* Security::                    Decrypt and Verify.
* Mailing List::                Mailing list minor mode.

Summary Buffer Format

* Summary Buffer Lines::        You can specify how summary lines should look.
* To From Newsgroups::          How to not display your own name.
* Summary Buffer Mode Line::    You can say how the mode line should look.
* Summary Highlighting::        Making the summary buffer all pretty and nice.

Choosing Articles

* Choosing Commands::           Commands for choosing articles.
* Choosing Variables::          Variables that influence these commands.

Reply, Followup and Post

* Summary Mail Commands::       Sending mail.
* Summary Post Commands::       Sending news.
* Summary Message Commands::    Other Message-related commands.
* Canceling and Superseding::

Marking Articles

* Unread Articles::             Marks for unread articles.
* Read Articles::               Marks for read articles.
* Other Marks::                 Marks that do not affect readedness.
* Setting Marks::               How to set and remove marks.
* Generic Marking Commands::    How to customize the marking.
* Setting Process Marks::       How to mark articles for later processing.

Threading

* Customizing Threading::       Variables you can change to affect the threading.
* Thread Commands::             Thread based commands in the summary buffer.

Customizing Threading

* Loose Threads::               How Gnus gathers loose threads into bigger threads.
* Filling In Threads::          Making the threads displayed look fuller.
* More Threading::              Even more variables for fiddling with threads.
* Low-Level Threading::         You thought it was over... but you were wrong!

Decoding Articles

* Uuencoded Articles::          Uudecode articles.
* Shell Archives::              Unshar articles.
* PostScript Files::            Split PostScript.
* Other Files::                 Plain save and binhex.
* Decoding Variables::          Variables for a happy decoding.
* Viewing Files::               You want to look at the result of the decoding?

Decoding Variables

* Rule Variables::              Variables that say how a file is to be viewed.
* Other Decode Variables::      Other decode variables.
* Uuencoding and Posting::      Variables for customizing uuencoding.

Article Treatment

* Article Highlighting::        You want to make the article look like fruit salad.
* Article Fontifying::          Making emphasized text look nice.
* Article Hiding::              You also want to make certain info go away.
* Article Washing::             Lots of way-neat functions to make life better.
* Article Header::              Doing various header transformations.
* Article Buttons::             Click on URLs, Message-IDs, addresses and the like.
* Article Button Levels::       Controlling appearance of buttons.
* Article Date::                Grumble, UT!
* Article Display::             Display various stuff:
                                X-Face, Picons, Gravatars, Smileys.
* Article Signature::           What is a signature?
* Article Miscellanea::         Various other stuff.

Alternative Approaches

* Pick and Read::               First mark articles and then read them.
* Binary Groups::               Auto-decode all articles.

Various Summary Stuff

* Summary Group Information::   Information oriented commands.
* Searching for Articles::      Multiple article commands.
* Summary Generation Commands::
* Really Various Summary Commands::  Those pesky non-conformant commands.

Article Buffer

* Hiding Headers::              Deciding what headers should be displayed.
* Using MIME::                  Pushing articles through MIME before reading them.
* HTML::                        Reading HTML messages.
* Customizing Articles::        Tailoring the look of the articles.
* Article Keymap::              Keystrokes available in the article buffer.
* Misc Article::                Other stuff.

Composing Messages

* Mail::                        Mailing and replying.
* Posting Server::              What server should you post and mail via?
* POP before SMTP::             You cannot send a mail unless you read a mail.
* Mail and Post::               Mailing and posting at the same time.
* Archived Messages::           Where Gnus stores the messages you’ve sent.
* Posting Styles::              An easier way to specify who you are.
* Drafts::                      Postponing messages and rejected messages.
* Rejected Articles::           What happens if the server doesn’t like your article?
* Signing and encrypting::      How to compose secure messages.

Select Methods

* Server Buffer::               Making and editing virtual servers.
* Getting News::                Reading USENET news with Gnus.
* Using IMAP::                  Reading mail from IMAP.
* Getting Mail::                Reading your personal mail with Gnus.
* Browsing the Web::            Getting messages from a plethora of Web sources.
* Other Sources::               Reading directories, files.
* Virtual Groups::              Combining articles and groups together.
* Email Based Diary::           Using mails to manage diary events in Gnus.
* Gnus Unplugged::              Reading news and mail offline.

Server Buffer

* Server Buffer Format::        You can customize the look of this buffer.
* Server Commands::             Commands to manipulate servers.
* Example Methods::             Examples server specifications.
* Creating a Virtual Server::   An example session.
* Server Variables::            Which variables to set.
* Servers and Methods::         You can use server names as select methods.
* Unavailable Servers::         Some servers you try to contact may be down.

Getting News

* NNTP::                        Reading news from an NNTP server.
* News Spool::                  Reading news from the local spool.

NNTP

* Direct Functions::            Connecting directly to the server.
* Indirect Functions::          Connecting indirectly to the server.
* Common Variables::            Understood by several connection functions.

Using IMAP

* Connecting to an IMAP Server::  Getting started with IMAP.
* Customizing the IMAP Connection::  Variables for IMAP connection.
* Client-Side IMAP Splitting::  Put mail in the correct mail box.
* Support for IMAP Extensions::  Getting extensions and labels from servers.

Getting Mail

* Mail in a Newsreader::        Important introductory notes.
* Getting Started Reading Mail::  A simple cookbook example.
* Splitting Mail::              How to create mail groups.
* Mail Sources::                How to tell Gnus where to get mail from.
* Mail Back End Variables::     Variables for customizing mail handling.
* Fancy Mail Splitting::        Gnus can do hairy splitting of incoming mail.
* Group Mail Splitting::        Use group customize to drive mail splitting.
* Incorporating Old Mail::      What about the old mail you have?
* Expiring Mail::               Getting rid of unwanted mail.
* Washing Mail::                Removing cruft from the mail you get.
* Duplicates::                  Dealing with duplicated mail.
* Not Reading Mail::            Using mail back ends for reading other files.
* Choosing a Mail Back End::    Gnus can read a variety of mail formats.

Mail Sources

* Mail Source Specifiers::      How to specify what a mail source is.
* Mail Source Functions::
* Mail Source Customization::   Some variables that influence things.
* Fetching Mail::               Using the mail source specifiers.

Choosing a Mail Back End

* Unix Mail Box::               Using the (quite) standard Un*x mbox.
* Babyl::                       Babyl was used by older versions of Rmail.
* Mail Spool::                  Store your mail in a private spool?
* MH Spool::                    An mhspool-like back end.
* Maildir::                     Another one-file-per-message format.
* nnmaildir Group Parameters::
* Article Identification::
* NOV Data::
* Article Marks::
* Mail Folders::                Having one file for each group.
* Comparing Mail Back Ends::    An in-depth looks at pros and cons.

Browsing the Web

* Web Searches::                Creating groups from articles that match a string.
* RSS::                         Reading RDF site summary.

Other Sources

* Directory Groups::            You can read a directory as if it was a newsgroup.
* Anything Groups::             Dired?  Who needs dired?
* Document Groups::             Single files can be the basis of a group.
* Mail-To-News Gateways::       Posting articles via mail-to-news gateways.
* The Empty Backend::           The backend that never has any news.

Document Groups

* Document Server Internals::   How to add your own document types.

Virtual Groups

* Selection Groups::            Articles selected from many places.
* Combined Groups::             Combining multiple  groups.

Email Based Diary

* The NNDiary Back End::        Basic setup and usage.
* The Gnus Diary Library::      Utility toolkit on top of nndiary.

The NNDiary Back End

* Diary Messages::              What makes a message valid for nndiary.
* Running NNDiary::             NNDiary has two modes of operation.
* Customizing NNDiary::         Bells and whistles.

The Gnus Diary Library

* Diary Summary Line Format::   A nicer summary buffer line format.
* Diary Articles Sorting::      A nicer way to sort messages.
* Diary Headers Generation::    Not doing it manually.
* Diary Group Parameters::      Not handling them manually.

Gnus Unplugged

* Agent Basics::                How it all is supposed to work.
* Agent Categories::            How to tell the Gnus Agent what to download.
* Agent Commands::              New commands for all the buffers.
* Agent Visuals::               Ways that the agent may effect your summary buffer.
* Agent as Cache::              The Agent is a big cache too.
* Agent Expiry::                How to make old articles go away.
* Agent Regeneration::          How to recover from lost connections and other accidents.
* Agent and flags::             How the Agent maintains flags.
* Agent and IMAP::              How to use the Agent with IMAP.
* Outgoing Messages::           What happens when you post/mail something?
* Agent Variables::             Customizing is fun.
* Example Setup::               An example ‘~/.gnus.el’ file for offline people.
* Batching Agents::             How to fetch news from a ‘cron’ job.
* Agent Caveats::               What you think it’ll do and what it does.

Agent Categories

* Category Syntax::             What a category looks like.
* Category Buffer::             A buffer for maintaining categories.
* Category Variables::          Customize’r’Us.

Agent Commands

* Group Agent Commands::        Configure groups and fetch their contents.
* Summary Agent Commands::      Manually select then fetch specific articles.
* Server Agent Commands::       Select the servers that are supported by the agent.

Scoring

* Summary Score Commands::      Adding score entries for the current group.
* Group Score Commands::        General score commands.
* Score Variables::             Customize your scoring.  (My, what terminology).
* Score File Format::           What a score file may contain.
* Score File Editing::          You can edit score files by hand as well.
* Adaptive Scoring::            Big Sister Gnus knows what you read.
* Home Score File::             How to say where new score entries are to go.
* Followups To Yourself::       Having Gnus notice when people answer you.
* Scoring On Other Headers::    Scoring on non-standard headers.
* Scoring Tips::                How to score effectively.
* Reverse Scoring::             That problem child of old is not problem.
* Global Score Files::          Earth-spanning, ear-splitting score files.
* Kill Files::                  They are still here, but they can be ignored.
* Converting Kill Files::       Translating kill files to score files.
* Advanced Scoring::            Using logical expressions to build score rules.
* Score Decays::                It can be useful to let scores wither away.

Advanced Scoring

* Advanced Scoring Syntax::     A definition.
* Advanced Scoring Examples::   What they look like.
* Advanced Scoring Tips::       Getting the most out of it.

Searching

* Search Engines::              Selecting and configuring search engines.
* Creating Search Groups::      How and where.
* Search Queries::              Gnus’ built-in search syntax.
* nnmairix::                    Searching with Mairix.
* nnir::

nnmairix

* About mairix::                About the mairix mail search engine
* nnmairix requirements::       What you will need for using nnmairix
* What nnmairix does::          What does nnmairix actually do?
* Setting up mairix::           Set up your mairix installation
* Configuring nnmairix::        Set up the nnmairix back end
* nnmairix keyboard shortcuts::  List of available keyboard shortcuts
* Propagating marks::           How to propagate marks from nnmairix groups
* nnmairix tips and tricks::    Some tips, tricks and examples
* nnmairix caveats::            Some more stuff you might want to know

Various

* Process/Prefix::              A convention used by many treatment commands.
* Interactive::                 Making Gnus ask you many questions.
* Symbolic Prefixes::           How to supply some Gnus functions with options.
* Formatting Variables::        You can specify what buffers should look like.
* Window Layout::               Configuring the Gnus buffer windows.
* Tabbed Interface::            Configuring the Gnus tabs.
* Faces and Fonts::             How to change how faces look.
* Mode Lines::                  Displaying information in the mode lines.
* Highlighting and Menus::      Making buffers look all nice and cozy.
* Daemons::                     Gnus can do things behind your back.
* Undo::                        Some actions can be undone.
* Predicate Specifiers::        Specifying predicates.
* Moderation::                  What to do if you’re a moderator.
* Image Enhancements::          Emacs can display images.
* Fuzzy Matching::              What’s the big fuzz?
* Thwarting Email Spam::        Simple ways to avoid unsolicited commercial email.
* Spam Package::                A package for filtering and processing spam.
* The Gnus Registry::           A package for tracking messages by Message-ID.
* The Gnus Cloud::              A package for synchronizing Gnus marks.
* D-Bus Integration::           Closing Gnus servers on system sleep.
* Other modes::                 Interaction with other modes.
* Various Various::             Things that are really various.

Formatting Variables

* Formatting Basics::           A formatting variable is basically a format string.
* Mode Line Formatting::        Some rules about mode line formatting variables.
* Advanced Formatting::         Modifying output in various ways.
* User-Defined Specs::          Having Gnus call your own functions.
* Formatting Fonts::            Making the formatting look colorful and nice.
* Positioning Point::           Moving point to a position after an operation.
* Tabulation::                  Tabulating your output.

Image Enhancements

* X-Face::                      Display a funky, teensy black-and-white image.
* Face::                        Display a funkier, teensier colored image.
* Smileys::                     Show all those happy faces the way they were meant to be shown.
* Picons::                      How to display pictures of what you’re reading.
* Gravatars::                   Display the avatar of people you read.

Thwarting Email Spam

* The problem of spam::         Some background, and some solutions
* Anti-Spam Basics::            Simple steps to reduce the amount of spam.
* SpamAssassin::                How to use external anti-spam tools.
* Hashcash::                    Reduce spam by burning CPU time.

Spam Package

* Spam Package Introduction::
* Filtering Incoming Mail::
* Detecting Spam in Groups::
* Spam and Ham Processors::
* Spam Package Configuration Examples::
* Spam Back Ends::
* Extending the Spam package::
* Spam Statistics Package::

Spam Back Ends

* Blacklists and Whitelists::
* BBDB Whitelists::
* Gmane Spam Reporting::
* Anti-spam Hashcash Payments::
* Blackholes::
* Regular Expressions Header Matching::
* Bogofilter::
* SpamAssassin back end::
* ifile spam filtering::
* Spam Statistics Filtering::
* SpamOracle::

Spam Statistics Package

* Creating a spam-stat dictionary::
* Splitting mail using spam-stat::
* Low-level interface to the spam-stat dictionary::

The Gnus Registry

* Gnus Registry Setup::
* Registry Article Refer Method::
* Fancy splitting to parent::
* Store custom flags and keywords::
* Store arbitrary data::

The Gnus Cloud

* Gnus Cloud Setup::
* Gnus Cloud Usage::

Appendices

* History::                     How Gnus got where it is today.
* On Writing Manuals::          Why this is not a beginner’s guide.
* Terminology::                 We use really difficult, like, words here.
* Customization::               Tailoring Gnus to your needs.
* Troubleshooting::             What you might try if things do not work.
* Gnus Reference Guide::        Rilly, rilly technical stuff.
* Emacs for Heathens::          A short introduction to Emacsian terms.
* Frequently Asked Questions::  The Gnus FAQ

History

* Gnus Versions::               What Gnus versions have been released.
* Why?::                        What’s the point of Gnus?
* Conformity::                  Gnus tries to conform to all standards.
* Contributors::                Oodles of people.
* New Features::                Pointers to some of the new stuff in Gnus.

New Features

* ding Gnus::                   New things in Gnus 5.0/5.1, the first new Gnus.
* September Gnus::              The Thing Formally Known As Gnus 5.2/5.3.
* Red Gnus::                    Third time best—Gnus 5.4/5.5.
* Quassia Gnus::                Two times two is four, or Gnus 5.6/5.7.
* Pterodactyl Gnus::            Pentad also starts with P, AKA Gnus 5.8/5.9.
* Oort Gnus::                   It’s big.  It’s far out.  Gnus 5.10/5.11.
* No Gnus::                     Very punny.  Gnus 5.12/5.13.
* Ma Gnus::                     Celebrating 25 years of Gnus.

Customization

* Slow/Expensive Connection::   You run a local Emacs and get the news elsewhere.
* Slow Terminal Connection::    You run a remote Emacs.
* Little Disk Space::           You feel that having large setup files is icky.
* Slow Machine::                You feel like buying a faster machine.

Gnus Reference Guide

* Gnus Utility Functions::      Common functions and variable to use.
* Back End Interface::          How Gnus communicates with the servers.
* Score File Syntax::           A BNF definition of the score file standard.
* Headers::                     How Gnus stores headers internally.
* Ranges::                      A handy format for storing mucho numbers.
* Group Info::                  The group info format.
* Extended Interactive::        Symbolic prefixes and stuff.
* Various File Formats::        Formats of files that Gnus use.

Back End Interface

* Required Back End Functions::  Functions that must be implemented.
* Optional Back End Functions::  Functions that need not be implemented.
* Error Messaging::             How to get messages and report errors.
* Writing New Back Ends::       Extending old back ends.
* Hooking New Back Ends Into Gnus::  What has to be done on the Gnus end.
* Mail-like Back Ends::         Some tips on mail back ends.

Various File Formats

* Active File Format::          Information on articles and groups available.
* Newsgroups File Format::      Group descriptions.

Emacs for Heathens

* Keystrokes::                  Entering text and executing commands.
* Emacs Lisp::                  The built-in Emacs programming language.



File: gnus.info,  Node: Don't Panic,  Next: Starting Up,  Prev: Top,  Up: Top

# /. 1 Don’t Panic
*****************

Welcome, gentle user, to the Gnus newsreader and email client!  Gnus is
unlike most clients, in part because of its endless configurability, in
part because of its historical origins.  Gnus is now a fully-featured
email client, but it began life as a Usenet-style newsreader, and its
genes are still newsreader genes.  Thus it behaves a little differently
than most mail clients.

   The typical assumptions of a newsreader are:

  1. The server offers a potentially enormous number of newsgroups on a
     variety of subjects.  The user may only be interested in some of
     those groups, and more interested in some than others.
  2. Many groups see a high volume of articles, and the user won’t want
     to read all of them.  Mechanisms are needed for foregrounding
     interesting articles, and backgrounding uninteresting articles.
  3. Once a group has been scanned and dealt with by the user, it’s
     unlikely to be of further interest until new articles come in.

   These assumptions lead to certain default Gnus behaviors:

  1. Not all interesting groups are equally interesting, thus groups
     have varying degrees of “subscribedness”, with different behavior
     depending on “how subscribed” a group is.
  2. There are many commands and tools for scoring and sorting articles,
     or otherwise sweeping them under the rug.
  3. Gnus will only show you groups with unread or ticked articles;
     groups with no new articles are hidden.
  4. When entering a group, only unread or ticked articles are shown,
     all other articles are hidden.

   If this seems draconian, think of it as Automatic Inbox Zero.  This
is the way Gnus works by default.  It is possible to make it work more
like an email client (always showing read groups and read articles), but
that takes some effort on the part of the user.

   The brief introduction below should be enough to get you off the
ground.

# /. The Basics of Servers, Groups, and Articles
===============================================

The fundamental building blocks of Gnus are “servers”, “groups”, and
“articles”.  Servers can be local or remote.  Each server maintains a
list of groups, and those groups contain articles.  Because Gnus
presents a unified interface to a wide variety of servers, the
vocabulary doesn’t always quite line up (*note FAQ - Glossary::, for a
more complete glossary).  Thus a local Maildir is referred to as a
“server” (*note Finding the News::) the same as a Usenet or IMAP server
is; “groups” (*note Group Buffer::) might mean an NNTP group, IMAP
folder, or local mail directory; and an “article” (*note Summary
Buffer::) might elsewhere be known as a message or an email.  Gnus
employs unified terms for all these things.

   Servers fall into two general categories: “news-like”, meaning that
the articles are part of a public archive and can’t be manipulated by
the user; and “mail-like”, meaning that the articles are owned by the
user, who can freely edit them, move them around, and delete them.

   For news-like servers, which typically offer hundreds or thousands of
groups, it’s important to be able to subscribe to a subset of those
groups.  For mail-like servers, the user is generally automatically
subscribed to all groups (though IMAP, for example, also allows
selective subscription).  To change group subscription, enter the Server
buffer (with ‘^’) and press ‘<RET>’ on the server in question.  From
here, Gnus provides commands to change or toggle your group
subscriptions (*note Browse Foreign Server::).

   A Gnus installation is basically just a list of one or more servers,
plus the user’s subscribed groups from those servers, plus articles in
those groups.

   Servers can be added and configured in two places: in the user’s
gnus.el startup file, using the ‘gnus-select-method’ and
‘gnus-secondary-select-methods’ options, or within Gnus itself using
interactive commands in the Server buffer.  *Note Finding the News::,
for details.

# /. Fetching Mail
=================

New mail has to come from somewhere.  Some servers, such as NNTP or
IMAP, are themselves responsible for fetching newly-arrived articles.
Others, such as Maildir or mbox servers, only store articles and don’t
fetch them from anywhere.

   In the latter case, Gnus provides for ‘mail sources’: places where
new mail is fetched from.  A mail source might be a local spool, or a
remote POP server, or some other source of incoming articles.  Mail
sources are usually configured globally, but can be specified per-group
(*note Mail Sources:: for more information).

   *Note Scanning New Messages::, for details on fetching new mail.

# /. Viewing Mail
================

By default, Gnus’s Group buffer only displays groups with unread
articles.  It is always possible to display all the groups temporarily
with ‘L’, and to configure Gnus to always display some groups (*note
Listing Groups::).

   *Note Selecting a Group::, for how to enter a group, and *note
Summary Buffer:: for what to do once you’re there.

# /. Sending Mail
================

New message composition can be initiated from the Group buffer (*note
Misc Group Stuff::).  If you’re in a Summary buffer, you can compose
replies and forward emails in addition to starting new messages, see
*note Summary Mail Commands::, for details.

   For information about what happens once you’ve started composing a
message, see *note Composing Messages::.  For information on setting up
SMTP servers in particular, see *note Mail Variables: (message)Mail
Variables.


File: gnus.info,  Node: Starting Up,  Next: Group Buffer,  Prev: Don't Panic,  Up: Top

# /. 2 Starting Gnus
*******************

If you haven’t used Emacs much before using Gnus, read *note Emacs for
Heathens:: first.

   If your system administrator has set things up properly, starting
Gnus and reading news is extremely easy—you just type ‘M-x gnus’ in your
Emacs.  If not, you should customize the variable ‘gnus-select-method’
as described in *note Finding the News::.  For a minimal setup for
posting should also customize the variables ‘user-full-name’ and
‘user-mail-address’.

   If you want to start Gnus in a different frame, you can use the
command ‘M-x gnus-other-frame’ instead.

   If things do not go smoothly at startup, you have to twiddle some
variables in your ‘~/.gnus.el’ file.  This file is similar to
‘~/.emacs’, but is read when Gnus starts.

   If you puzzle at any terms used in this manual, please refer to the
terminology section (*note Terminology::).

* Menu:

* Finding the News::            Choosing a method for getting news.
* The Server is Down::          How can I read my mail then?
* Child Gnusae::                You can have more than one Gnus active at a time.
* New Groups::                  What is Gnus supposed to do with new groups?
* Changing Servers::            You may want to move from one server to another.
* Startup Files::               Those pesky startup files—‘.newsrc’.
* Auto Save::                   Recovering from a crash.
* The Active File::             Reading the active file over a slow line Takes Time.
* Startup Variables::           Other variables you might change.


File: gnus.info,  Node: Finding the News,  Next: The Server is Down,  Up: Starting Up

# /. 2.1 Finding the News
========================

First of all, you should know that there is a special buffer called
‘*Server*’ that lists all the servers Gnus knows about.  You can press
‘^’ from the Group buffer to see it.  In the Server buffer, you can
press ‘<RET>’ on a defined server to see all the groups it serves
(subscribed or not!).  You can also add or delete servers, edit a
foreign server’s definition, agentize or de-agentize a server, and do
many other neat things.  *Note Server Buffer::.  *Note Foreign Groups::.
*Note Agent Basics::.

   The ‘gnus-select-method’ variable says where Gnus should look for
news.  This variable should be a list where the first element says “how”
and the second element says “where”.  This method is your native method.
All groups not fetched with this method are secondary or foreign groups.

   For instance, if the ‘news.somewhere.edu’ NNTP server is where you
want to get your daily dosage of news from, you’d say:

     (setq gnus-select-method '(nntp "news.somewhere.edu"))

   If you want to read directly from the local spool, say:

     (setq gnus-select-method '(nnspool ""))

   If you can use a local spool, you probably should, as it will almost
certainly be much faster.  But do not use the local spool if your server
is running Leafnode (which is a simple, standalone private news server);
in this case, use ‘(nntp "localhost")’.

   If this variable is not set, Gnus will take a look at the
‘NNTPSERVER’ environment variable.  If that variable isn’t set, Gnus
will see whether ‘gnus-nntpserver-file’ (‘/etc/nntpserver’ by default)
has any opinions on the matter.  If that fails as well, Gnus will try to
use the machine running Emacs as an NNTP server.  That’s a long shot,
though.

   However, if you use one NNTP server regularly and are just interested
in a couple of groups from a different server, you would be better
served by using the ‘B’ command in the group buffer.  It will let you
have a look at what groups are available, and you can subscribe to any
of the groups you want to.  This also makes ‘.newsrc’ maintenance much
tidier.  *Note Foreign Groups::.

   A slightly different approach to foreign groups is to set the
‘gnus-secondary-select-methods’ variable.  The select methods listed in
this variable are in many ways just as native as the
‘gnus-select-method’ server.  They will also be queried for active files
during startup (if that’s required), and new newsgroups that appear on
these servers will be subscribed (or not) just as native groups are.

   For instance, if you use the ‘nnmbox’ back end to read your mail, you
would typically set this variable to

     (setq gnus-secondary-select-methods '((nnmbox "")))


File: gnus.info,  Node: The Server is Down,  Next: Child Gnusae,  Prev: Finding the News,  Up: Starting Up

# /. 2.2 The Server is Down
==========================

If the default server is down, Gnus will understandably have some
problems starting.  However, if you have some mail groups in addition to
the news groups, you may want to start Gnus anyway.

   Gnus, being the trusting sort of program, will ask whether to proceed
without a native select method if that server can’t be contacted.  This
will happen whether the server doesn’t actually exist (i.e., you have
given the wrong address) or the server has just momentarily taken ill
for some reason or other.  If you decide to continue and have no foreign
groups, you’ll find it difficult to actually do anything in the group
buffer.  But, hey, that’s your problem.  Blllrph!

   If you know that the server is definitely down, or you just want to
read your mail without bothering with the server at all, you can use the
‘gnus-no-server’ command to start Gnus.  That might come in handy if
you’re in a hurry as well.  This command will not attempt to contact
your primary server—instead, it will just activate all groups on level 1
and 2.  (You should preferably keep no native groups on those two
levels.)  Also *note Group Levels::.


File: gnus.info,  Node: Child Gnusae,  Next: New Groups,  Prev: The Server is Down,  Up: Starting Up

# /. 2.3 Child Gnusae
====================

You might want to run more than one Emacs with more than one Gnus at the
same time.  If you are using different ‘.newsrc’ files (e.g., if you are
using the two different Gnusae to read from two different servers), that
is no problem whatsoever.  You just do it.

   The problem appears when you want to run two Gnusae that use the same
‘.newsrc’ file.

   To work around that problem some, we here at the Think-Tank at the
Gnus Towers have come up with a new concept: “Parents” and “children”.

   Anyway, you start one Gnus up the normal way with ‘M-x gnus’ (or
however you do it).  Each subsequent child Gnusae should be started with
‘M-x gnus-child’.  These children won’t save normal ‘.newsrc’ files, but
instead save “child files” that contain information only on what groups
have been read in the child session.  When a parent Gnus starts, it will
read (and delete) these child files, incorporating all information from
them.  (The child files will be read in the sequence they were created,
so the latest changes will have precedence.)

   Information from the child files has, of course, precedence over the
information in the normal (i.e., parent) ‘.newsrc’ file.

   If the ‘.newsrc*’ files have not been saved in the parent when the
child starts, you may be prompted as to whether to read an auto-save
file.  If you answer “yes”, the unsaved changes to the parent will be
incorporated into the child.  If you answer “no”, the child may see some
messages as unread that have been read in the parent.


File: gnus.info,  Node: New Groups,  Next: Changing Servers,  Prev: Child Gnusae,  Up: Starting Up

# /. 2.4 New Groups
==================

If you are satisfied that you really never want to see any new groups,
you can set ‘gnus-check-new-newsgroups’ to ‘nil’.  This will also save
you some time at startup.  Even if this variable is ‘nil’, you can
always subscribe to the new groups just by pressing ‘U’ in the group
buffer (*note Group Maintenance::).  This variable is ‘ask-server’ by
default.  If you set this variable to ‘always’, then Gnus will query the
back ends for new groups even when you do the ‘g’ command (*note
Scanning New Messages::).

* Menu:

* Checking New Groups::         Determining what groups are new.
* Subscription Methods::        What Gnus should do with new groups.
* Filtering New Groups::        Making Gnus ignore certain new groups.


File: gnus.info,  Node: Checking New Groups,  Next: Subscription Methods,  Up: New Groups

2.4.1 Checking New Groups
-------------------------

Gnus normally determines whether a group is new or not by comparing the
list of groups from the active file(s) with the lists of subscribed and
dead groups.  This isn’t a particularly fast method.  If
‘gnus-check-new-newsgroups’ is ‘ask-server’, Gnus will ask the server
for new groups since the last time.  This is both faster and cheaper.
This also means that you can get rid of the list of killed groups (*note
Group Levels::) altogether, so you may set ‘gnus-save-killed-list’ to
‘nil’, which will save time both at startup, at exit, and all over.
Saves disk space, too.  Why isn’t this the default, then?
Unfortunately, not all servers support this command.

   I bet I know what you’re thinking now: How do I find out whether my
server supports ‘ask-server’?  No?  Good, because I don’t have a
fail-safe answer.  I would suggest just setting this variable to
‘ask-server’ and see whether any new groups appear within the next few
days.  If any do, then it works.  If none do, then it doesn’t work.  I
could write a function to make Gnus guess whether the server supports
‘ask-server’, but it would just be a guess.  So I won’t.  You could
‘telnet’ to the server and say ‘HELP’ and see whether it lists
‘NEWGROUPS’ among the commands it understands.  If it does, then it
might work.  (But there are servers that lists ‘NEWGROUPS’ without
supporting the function properly.)

   This variable can also be a list of select methods.  If so, Gnus will
issue an ‘ask-server’ command to each of the select methods, and
subscribe them (or not) using the normal methods.  This might be handy
if you are monitoring a few servers for new groups.  A side effect is
that startup will take much longer, so you can meditate while waiting.
Use the mantra “dingnusdingnusdingnus” to achieve permanent bliss.


File: gnus.info,  Node: Subscription Methods,  Next: Filtering New Groups,  Prev: Checking New Groups,  Up: New Groups

2.4.2 Subscription Methods
--------------------------

What Gnus does when it encounters a new group is determined by the
‘gnus-subscribe-newsgroup-method’ variable.

   This variable should contain a function.  This function will be
called with the name of the new group as the only parameter.

   Some handy pre-fab functions are:

‘gnus-subscribe-zombies’
     Make all new groups zombies (*note Group Levels::).  This is the
     default.  You can browse the zombies later (with ‘A z’) and either
     kill them all off properly (with ‘S z’), or subscribe to them (with
     ‘u’).

‘gnus-subscribe-randomly’
     Subscribe all new groups in arbitrary order.  This really means
     that all new groups will be added at “the top” of the group buffer.

‘gnus-subscribe-alphabetically’
     Subscribe all new groups in alphabetical order.

‘gnus-subscribe-hierarchically’
     Subscribe all new groups hierarchically.  The difference between
     this function and ‘gnus-subscribe-alphabetically’ is slight.
     ‘gnus-subscribe-alphabetically’ will subscribe new groups in a
     strictly alphabetical fashion, while this function will enter
     groups into its hierarchy.  So if you want to have the ‘rec’
     hierarchy before the ‘comp’ hierarchy, this function will not mess
     that configuration up.  Or something like that.

‘gnus-subscribe-interactively’
     Subscribe new groups interactively.  This means that Gnus will ask
     you about *all* new groups.  The groups you choose to subscribe to
     will be subscribed hierarchically.

‘gnus-subscribe-killed’
     Kill all new groups.

‘gnus-subscribe-topics’
     Put the groups into the topic that has a matching ‘subscribe’ topic
     parameter (*note Topic Parameters::).  For instance, a ‘subscribe’
     topic parameter that looks like

          "nnml"

     will mean that all groups that match that regex will be subscribed
     under that topic.

     If no topics match the groups, the groups will be subscribed in the
     top-level topic.

   A closely related variable is
‘gnus-subscribe-hierarchical-interactive’.  (That’s quite a mouthful.)
If this variable is non-‘nil’, Gnus will ask you in a hierarchical
fashion whether to subscribe to new groups or not.  Gnus will ask you
for each sub-hierarchy whether you want to descend the hierarchy or not.

   One common mistake is to set the variable a few paragraphs above
(‘gnus-subscribe-newsgroup-method’) to
‘gnus-subscribe-hierarchical-interactive’.  This is an error.  This will
not work.  This is ga-ga.  So don’t do it.


File: gnus.info,  Node: Filtering New Groups,  Prev: Subscription Methods,  Up: New Groups

2.4.3 Filtering New Groups
--------------------------

A nice and portable way to control which new newsgroups should be
subscribed (or ignored) is to put an “options” line at the start of the
‘.newsrc’ file.  Here’s an example:

     options -n !alt.all !rec.all sci.all

   This line obviously belongs to a serious-minded intellectual
scientific person (or she may just be plain old boring), because it says
that all groups that have names beginning with ‘alt’ and ‘rec’ should be
ignored, and all groups with names beginning with ‘sci’ should be
subscribed.  Gnus will not use the normal subscription method for
subscribing these groups.  ‘gnus-subscribe-options-newsgroup-method’ is
used instead.  This variable defaults to
‘gnus-subscribe-alphabetically’.

   The “options -n” format is very simplistic.  The syntax above is all
that is supports: you can force-subscribe hierarchies, or you can deny
hierarchies, and that’s it.

   If you don’t want to mess with your ‘.newsrc’ file, you can just set
the two variables ‘gnus-options-subscribe’ and
‘gnus-options-not-subscribe’.  These two variables do exactly the same
as the ‘.newsrc’ ‘options -n’ trick.  Both are regexps, and if the new
group matches the former, it will be unconditionally subscribed, and if
it matches the latter, it will be ignored.

   Yet another variable that meddles here is
‘gnus-auto-subscribed-groups’.  It works exactly like
‘gnus-options-subscribe’, and is therefore really superfluous, but I
thought it would be nice to have two of these.  This variable is more
meant for setting some ground rules, while the other variable is used
more for user fiddling.  By default this variable makes all new groups
that come from mail back ends (‘nnml’, ‘nnbabyl’, ‘nnfolder’, ‘nnmbox’,
‘nnmh’, ‘nnimap’, and ‘nnmaildir’) subscribed.  If you don’t like that,
just set this variable to ‘nil’.

   As if that wasn’t enough, ‘gnus-auto-subscribed-categories’ also
allows you to specify that new groups should be subscribed based on the
category their select methods belong to.  The default is ‘(mail
post-mail)’, meaning that all new groups from mail-like backends should
be subscribed automatically.

   New groups that match these variables are subscribed using
‘gnus-subscribe-options-newsgroup-method’.


File: gnus.info,  Node: Changing Servers,  Next: Startup Files,  Prev: New Groups,  Up: Starting Up

# /. 2.5 Changing Servers
========================

Sometimes it is necessary to move from one NNTP server to another.  This
happens very rarely, but perhaps you change jobs, or one server is very
flaky and you want to use another.

   Changing the server is pretty easy, right?  You just change
‘gnus-select-method’ to point to the new server?

   _Wrong!_

   Article numbers are not (in any way) kept synchronized between
different NNTP servers, and the only way Gnus keeps track of what
articles you have read is by keeping track of article numbers.  So when
you change ‘gnus-select-method’, your ‘.newsrc’ file becomes worthless.

   You can use the ‘M-x gnus-group-clear-data-on-native-groups’ command
to clear out all data that you have on your native groups.  Use with
caution.

   Clear the data from the current group only—nix out marks and the list
of read articles (‘gnus-group-clear-data’).

   After changing servers, you *must* move the cache hierarchy away,
since the cached articles will have wrong article numbers, which will
affect which articles Gnus thinks are read.
‘gnus-group-clear-data-on-native-groups’ will ask you if you want to
have it done automatically; for ‘gnus-group-clear-data’, you can use
‘M-x gnus-cache-move-cache’ (but beware, it will move the cache for all
groups).


File: gnus.info,  Node: Startup Files,  Next: Auto Save,  Prev: Changing Servers,  Up: Starting Up

# /. 2.6 Startup Files
=====================

Most common Unix news readers use a shared startup file called
‘.newsrc’.  This file contains all the information about what groups are
subscribed, and which articles in these groups have been read.

   Things got a bit more complicated with GNUS.  In addition to keeping
the ‘.newsrc’ file updated, it also used a file called ‘.newsrc.el’ for
storing all the information that didn’t fit into the ‘.newsrc’ file.
(Actually, it also duplicated everything in the ‘.newsrc’ file.)  GNUS
would read whichever one of these files was the most recently saved,
which enabled people to swap between GNUS and other newsreaders.

   That was kinda silly, so Gnus went one better: In addition to the
‘.newsrc’ and ‘.newsrc.el’ files, Gnus also has a file called
‘.newsrc.eld’.  It will read whichever of these files that are most
recent, but it will never write a ‘.newsrc.el’ file.  You should never
delete the ‘.newsrc.eld’ file—it contains much information not stored in
the ‘.newsrc’ file.

   You can turn off writing the ‘.newsrc’ file by setting
‘gnus-save-newsrc-file’ to ‘nil’, which means you can delete the file
and save some space, as well as exiting from Gnus faster.  However, this
will make it impossible to use other newsreaders than Gnus.  But hey,
who would want to, right?  Similarly, setting ‘gnus-read-newsrc-file’ to
‘nil’ makes Gnus ignore the ‘.newsrc’ file and any ‘.newsrc-SERVER’
files, which can be convenient if you use a different news reader
occasionally, and you want to read a different subset of the available
groups with that news reader.

   If ‘gnus-save-killed-list’ (default ‘t’) is ‘nil’, Gnus will not save
the list of killed groups to the startup file.  This will save both time
(when starting and quitting) and space (on disk).  It will also mean
that Gnus has no record of what groups are new or old, so the automatic
new groups subscription methods become meaningless.  You should always
set ‘gnus-check-new-newsgroups’ to ‘nil’ or ‘ask-server’ if you set this
variable to ‘nil’ (*note New Groups::).  This variable can also be a
regular expression.  If that’s the case, remove all groups that do not
match this regexp before saving.  This can be useful in certain obscure
situations that involve several servers where not all servers support
‘ask-server’.

   The ‘gnus-startup-file’ variable says where the startup files are.
The default value is ‘~/.newsrc’, with the Gnus (El Dingo) startup file
being whatever that one is, with a ‘.eld’ appended.  If you want to keep
multiple numbered backups of this file, set ‘gnus-backup-startup-file’.
It respects the same values as the ‘version-control’ variable.

   ‘gnus-save-newsrc-hook’ is called before saving any of the newsrc
files, while ‘gnus-save-quick-newsrc-hook’ is called just before saving
the ‘.newsrc.eld’ file, and ‘gnus-save-standard-newsrc-hook’ is called
just before saving the ‘.newsrc’ file.  The latter two are commonly used
to turn version control on or off.  Version control is on by default
when saving the startup files.  If you want to turn backup creation off,
say something like:

     (defun turn-off-backup ()
       (set (make-local-variable 'backup-inhibited) t))

     (add-hook 'gnus-save-quick-newsrc-hook 'turn-off-backup)
     (add-hook 'gnus-save-standard-newsrc-hook 'turn-off-backup)

   When Gnus starts, it will read the ‘gnus-site-init-file’
(‘.../site-lisp/gnus-init’ by default) and ‘gnus-init-file’ (‘~/.gnus’
by default) files.  These are normal Emacs Lisp files and can be used to
avoid cluttering your ‘~/.emacs’ and ‘site-init’ files with Gnus stuff.
Gnus will also check for files with the same names as these, but with
‘.elc’ and ‘.el’ suffixes.  In other words, if you have set
‘gnus-init-file’ to ‘~/.gnus’, it will look for ‘~/.gnus.elc’,
‘~/.gnus.el’, and finally ‘~/.gnus’ (in this order).  If Emacs was
invoked with the ‘-q’ or ‘--no-init-file’ options (*note Initial
Options: (emacs)Initial Options.), Gnus doesn’t read ‘gnus-init-file’.


File: gnus.info,  Node: Auto Save,  Next: The Active File,  Prev: Startup Files,  Up: Starting Up

# /. 2.7 Auto Save
=================

Whenever you do something that changes the Gnus data (reading articles,
catching up, killing/subscribing groups), the change is added to a
special “dribble buffer”.  This buffer is auto-saved the normal Emacs
way.  If your Emacs should crash before you have saved the ‘.newsrc’
files, all changes you have made can be recovered from this file.

   If Gnus detects this file at startup, it will ask the user whether to
read it.  The auto save file is deleted whenever the real startup file
is saved.

   If ‘gnus-use-dribble-file’ is ‘nil’, Gnus won’t create and maintain a
dribble buffer.  The default is ‘t’.

   Gnus will put the dribble file(s) in ‘gnus-dribble-directory’.  If
this variable is ‘nil’, which it is by default, Gnus will dribble into
the directory where the ‘.newsrc’ file is located.  (This is normally
the user’s home directory.)  The dribble file will get the same file
permissions as the ‘.newsrc’ file.

   If ‘gnus-always-read-dribble-file’ is non-‘nil’, Gnus will read the
dribble file on startup without querying the user.


File: gnus.info,  Node: The Active File,  Next: Startup Variables,  Prev: Auto Save,  Up: Starting Up

# /. 2.8 The Active File
=======================

When Gnus starts, or indeed whenever it tries to determine whether new
articles have arrived, it reads the active file.  This is a very large
file that lists all the active groups and articles on the server.

   Before examining the active file, Gnus deletes all lines that match
the regexp ‘gnus-ignored-newsgroups’.  This is done primarily to reject
any groups with bogus names, but you can use this variable to make Gnus
ignore hierarchies you aren’t ever interested in.  However, this is not
recommended.  In fact, it’s highly discouraged.  Instead, *note New
Groups:: for an overview of other variables that can be used instead.

   The active file can be rather Huge, so if you have a slow network,
you can set ‘gnus-read-active-file’ to ‘nil’ to prevent Gnus from
reading the active file.  This variable is ‘some’ by default.

   Gnus will try to make do by getting information just on the groups
that you actually subscribe to.

   Note that if you subscribe to lots and lots of groups, setting this
variable to ‘nil’ will probably make Gnus slower, not faster.  At
present, having this variable ‘nil’ will slow Gnus down considerably,
unless you read news over a 2400 baud modem.

   This variable can also have the value ‘some’.  Gnus will then attempt
to read active info only on the subscribed groups.  On some servers this
is quite fast (on sparkling, brand new INN servers that support the
‘LIST ACTIVE group’ command), on others this isn’t fast at all.  In any
case, ‘some’ should be faster than ‘nil’, and is certainly faster than
‘t’ over slow lines.

   Some news servers (old versions of Leafnode and old versions of INN,
for instance) do not support the ‘LIST ACTIVE group’.  For these
servers, ‘nil’ is probably the most efficient value for this variable.

   If this variable is ‘nil’, Gnus will ask for group info in total
lock-step, which isn’t very fast.  If it is ‘some’ and you use an NNTP
server, Gnus will pump out commands as fast as it can, and read all the
replies in one swoop.  This will normally result in better performance,
but if the server does not support the aforementioned ‘LIST ACTIVE
group’ command, this isn’t very nice to the server.

   If you think that starting up Gnus takes too long, try all the three
different values for this variable and see what works best for you.

   In any case, if you use ‘some’ or ‘nil’, you should definitely kill
all groups that you aren’t interested in to speed things up.

   Note that this variable also affects active file retrieval from
secondary select methods.


File: gnus.info,  Node: Startup Variables,  Prev: The Active File,  Up: Starting Up

# /. 2.9 Startup Variables
=========================

‘gnus-before-startup-hook’
     A hook called as the first thing when Gnus is started.

‘gnus-before-resume-hook’
     A hook called as the first thing when Gnus is resumed after a
     suspend.

‘gnus-startup-hook’
     A hook run as the very last thing after starting up Gnus

‘gnus-started-hook’
     A hook that is run as the very last thing after starting up Gnus
     successfully.

‘gnus-setup-news-hook’
     A hook that is run after reading the ‘.newsrc’ file(s), but before
     generating the group buffer.

‘gnus-check-bogus-newsgroups’
     If non-‘nil’, Gnus will check for and delete all bogus groups at
     startup.  A “bogus group” is a group that you have in your
     ‘.newsrc’ file, but doesn’t exist on the news server.  Checking for
     bogus groups can take quite a while, so to save time and resources
     it’s best to leave this option off, and do the checking for bogus
     groups once in a while from the group buffer instead (*note Group
     Maintenance::).

‘gnus-inhibit-startup-message’
     If non-‘nil’, the startup message won’t be displayed.  That way,
     your boss might not notice as easily that you are reading news
     instead of doing your job.  Note that this variable is used before
     ‘~/.gnus.el’ is loaded, so it should be set in ‘.emacs’ instead.

‘gnus-no-groups-message’
     Message displayed by Gnus when no groups are available.


File: gnus.info,  Node: Group Buffer,  Next: Summary Buffer,  Prev: Starting Up,  Up: Top

# /. 3 Group Buffer
******************

The “group buffer” lists all (or parts) of the available groups.  It is
the first buffer shown when Gnus starts, and will never be killed as
long as Gnus is active.

* Menu:

* Group Buffer Format::         Information listed and how you can change it.
* Group Maneuvering::           Commands for moving in the group buffer.
* Selecting a Group::           Actually reading news.
* Subscription Commands::       Unsubscribing, killing, subscribing.
* Group Data::                  Changing the info for a group.
* Group Levels::                Levels?  What are those, then?
* Group Score::                 A mechanism for finding out what groups you like.
* Marking Groups::              You can mark groups for later processing.
* Foreign Groups::              Creating and editing groups.
* Group Parameters::            Each group may have different parameters set.
* Listing Groups::              Gnus can list various subsets of the groups.
* Sorting Groups::              Re-arrange the group order.
* Group Maintenance::           Maintaining a tidy ‘.newsrc’ file.
* Browse Foreign Server::       You can browse a server.  See what it has to offer.
* Exiting Gnus::                Stop reading news and get some work done.
* Group Topics::                A folding group mode divided into topics.
* Non-ASCII Group Names::       Accessing groups of non-English names.
* Misc Group Stuff::            Other stuff that you can to do.


File: gnus.info,  Node: Group Buffer Format,  Next: Group Maneuvering,  Up: Group Buffer

# /. 3.1 Group Buffer Format
===========================

* Menu:

* Group Line Specification::    Deciding how the group buffer is to look.
* Group Mode Line Specification::  The group buffer mode line.
* Group Highlighting::          Having nice colors in the group buffer.

You can customize the Group Mode tool bar, see ‘M-x customize-apropos
<RET> gnus-group-tool-bar’.

   The tool bar icons are now (de)activated correctly depending on the
cursor position.  Therefore, moving around in the Group Buffer is
slower.  You can disable this via the variable
‘gnus-group-update-tool-bar’.  Its default value depends on your Emacs
version.


File: gnus.info,  Node: Group Line Specification,  Next: Group Mode Line Specification,  Up: Group Buffer Format

3.1.1 Group Line Specification
------------------------------

The default format of the group buffer is nice and dull, but you can
make it as exciting and ugly as you feel like.

   Here’s a couple of example group lines:

          25: news.announce.newusers
      *    0: alt.fan.andrea-dworkin

   Quite simple, huh?

   You can see that there are 25 unread articles in
‘news.announce.newusers’.  There are no unread articles, but some ticked
articles, in ‘alt.fan.andrea-dworkin’ (see that little asterisk at the
beginning of the line?).

   You can change that format to whatever you want by fiddling with the
‘gnus-group-line-format’ variable.  This variable works along the lines
of a ‘format’ specification, which is pretty much the same as a ‘printf’
specifications, for those of you who use (feh!)  C.  *Note Formatting
Variables::.

   ‘%M%S%5y:%B%(%g%)\n’ is the value that produced those lines above.

   There should always be a colon on the line; the cursor always moves
to the colon after performing an operation.  *Note Positioning Point::.
Nothing else is required—not even the group name.  All displayed text is
just window dressing, and is never examined by Gnus.  Gnus stores all
real information it needs using text properties.

   (Note that if you make a really strange, wonderful, spreadsheet-like
layout, everybody will believe you are hard at work with the accounting
instead of wasting time reading news.)

   Here’s a list of all available format characters:

‘M’
     An asterisk if the group only has marked articles.

‘S’
     Whether the group is subscribed.

‘L’
     Level of subscribedness.

‘N’
     Number of unread articles.

‘I’
     Number of dormant articles.

‘T’
     Number of ticked articles.

‘R’
     Number of read articles.

‘U’
     Number of unseen articles.

‘t’
     Estimated total number of articles.  (This is really MAX-NUMBER
     minus MIN-NUMBER plus 1.)

     Gnus uses this estimation because the NNTP protocol provides
     efficient access to MAX-NUMBER and MIN-NUMBER but getting the true
     unread message count is not possible efficiently.  For hysterical
     raisins, even the mail back ends, where the true number of unread
     messages might be available efficiently, use the same limited
     interface.  To remove this restriction from Gnus means that the
     back end interface has to be changed, which is not an easy job.

     The nnml backend (*note Mail Spool::) has a feature called “group
     compaction” which circumvents this deficiency: the idea is to
     renumber all articles from 1, removing all gaps between numbers,
     hence getting a correct total count.  Other backends may support
     this in the future.  In order to keep your total article count
     relatively up to date, you might want to compact your groups (or
     even directly your server) from time to time.  *Note Misc Group
     Stuff::, *Note Server Commands::.

‘y’
     Number of unread, unticked, non-dormant articles.

‘i’
     Number of ticked and dormant articles.

‘g’
     Full group name.

‘G’
     Group name.

‘C’
     Group comment (*note Group Parameters::) or group name if there is
     no comment element in the group parameters.

‘D’
     Newsgroup description.  You need to read the group descriptions
     before these will appear, and to do that, you either have to set
     ‘gnus-read-active-file’ or use the group buffer ‘M-d’ command.

‘o’
     ‘m’ if moderated.

‘O’
     ‘(m)’ if moderated.

‘s’
     Select method.

‘B’
     If the summary buffer for the group is open or not.

‘n’
     Select from where.

‘z’
     A string that looks like ‘<%s:%n>’ if a foreign select method is
     used.

‘P’
     Indentation based on the level of the topic (*note Group Topics::).

‘c’
     Short (collapsed) group name.  The ‘gnus-group-uncollapsed-levels’
     variable says how many levels to leave at the end of the group
     name.  The default is 1—this will mean that group names like
     ‘gnu.emacs.gnus’ will be shortened to ‘g.e.gnus’.

‘m’
     ‘%’ (‘gnus-new-mail-mark’) if there has arrived new mail to the
     group lately.

‘p’
     ‘#’ (‘gnus-process-mark’) if the group is process marked.

‘d’
     A string that says when you last read the group (*note Group
     Timestamp::).

‘F’
     The disk space used by the articles fetched by both the cache and
     agent.  The value is automatically scaled to bytes(B),
     kilobytes(K), megabytes(M), or gigabytes(G) to minimize the column
     width.  A format of %7F is sufficient for a fixed-width column.

‘u’
     User defined specifier.  The next character in the format string
     should be a letter.  Gnus will call the function
     ‘gnus-user-format-function-’‘X’, where ‘X’ is the letter following
     ‘%u’.  The function will be passed a single dummy parameter as
     argument.  The function should return a string, which will be
     inserted into the buffer just like information from any other
     specifier.

   All the “number-of” specs will be filled with an asterisk (‘*’) if no
info is available—for instance, if it is a non-activated foreign group,
or a bogus native group.


File: gnus.info,  Node: Group Mode Line Specification,  Next: Group Highlighting,  Prev: Group Line Specification,  Up: Group Buffer Format

3.1.2 Group Mode Line Specification
-----------------------------------

The mode line can be changed by setting ‘gnus-group-mode-line-format’
(*note Mode Line Formatting::).  It doesn’t understand that many format
specifiers:

‘S’
     The native news server.
‘M’
     The native select method.


File: gnus.info,  Node: Group Highlighting,  Prev: Group Mode Line Specification,  Up: Group Buffer Format

3.1.3 Group Highlighting
------------------------

Highlighting in the group buffer is controlled by the
‘gnus-group-highlight’ variable.  This is an alist with elements that
look like ‘(FORM . FACE)’.  If FORM evaluates to something non-‘nil’,
the FACE will be used on the line.

   Here’s an example value for this variable that might look nice if the
background is dark:

     (cond (window-system
            (setq custom-background-mode 'light)
            (defface my-group-face-1
              '((t (:foreground "Red" :bold t))) "First group face")
            (defface my-group-face-2
              '((t (:foreground "DarkSeaGreen4" :bold t)))
              "Second group face")
            (defface my-group-face-3
              '((t (:foreground "Green4" :bold t))) "Third group face")
            (defface my-group-face-4
              '((t (:foreground "SteelBlue" :bold t))) "Fourth group face")
            (defface my-group-face-5
              '((t (:foreground "Blue" :bold t))) "Fifth group face")))

     (setq gnus-group-highlight
           '(((> unread 200) . my-group-face-1)
             ((and (< level 3) (zerop unread)) . my-group-face-2)
             ((< level 3) . my-group-face-3)
             ((zerop unread) . my-group-face-4)
             (t . my-group-face-5)))

   Also *note Faces and Fonts::.

   Variables that are dynamically bound when the forms are evaluated
include:

‘group’
     The group name.
‘unread’
     The number of unread articles in the group.
‘method’
     The select method.
‘mailp’
     Whether the group is a mail group.
‘level’
     The level of the group.
‘score’
     The score of the group.
‘ticked’
     The number of ticked articles in the group.
‘total’
     The total number of articles in the group.  Or rather, MAX-NUMBER
     minus MIN-NUMBER plus one.
‘topic’
     When using the topic minor mode, this variable is bound to the
     current topic being inserted.

   When the forms are ‘eval’ed, point is at the beginning of the line of
the group in question, so you can use many of the normal Gnus functions
for snarfing info on the group.

   ‘gnus-group-update-hook’ is called when a group line is changed.  It
will not be called when ‘gnus-visual’ is ‘nil’.


File: gnus.info,  Node: Group Maneuvering,  Next: Selecting a Group,  Prev: Group Buffer Format,  Up: Group Buffer

# /. 3.2 Group Maneuvering
=========================

All movement commands understand the numeric prefix and will behave as
expected, hopefully.

‘n’
     Go to the next group that has unread articles
     (‘gnus-group-next-unread-group’).

‘p’
‘<DEL>’
     Go to the previous group that has unread articles
     (‘gnus-group-prev-unread-group’).

‘N’
     Go to the next group (‘gnus-group-next-group’).

‘P’
     Go to the previous group (‘gnus-group-prev-group’).

‘M-n’
     Go to the next unread group on the same (or lower) level
     (‘gnus-group-next-unread-group-same-level’).

‘M-p’
     Go to the previous unread group on the same (or lower) level
     (‘gnus-group-prev-unread-group-same-level’).

   Three commands for jumping to groups:

‘j’
     Jump to a group (and make it visible if it isn’t already)
     (‘gnus-group-jump-to-group’).  Killed groups can be jumped to, just
     like living groups.

‘,’
     Jump to the unread group with the lowest level
     (‘gnus-group-best-unread-group’).

‘.’
     Jump to the first group with unread articles
     (‘gnus-group-first-unread-group’).

   If ‘gnus-group-goto-unread’ is ‘nil’, all the movement commands will
move to the next group, not the next unread group.  Even the commands
that say they move to the next unread group.  The default is ‘t’.

   If ‘gnus-summary-next-group-on-exit’ is ‘t’, when a summary is
exited, the point in the group buffer is moved to the next unread group.
Otherwise, the point is set to the group just exited.  The default is
‘t’.


File: gnus.info,  Node: Selecting a Group,  Next: Subscription Commands,  Prev: Group Maneuvering,  Up: Group Buffer

# /. 3.3 Selecting a Group
=========================

‘<SPC>’
     Select the current group, switch to the summary buffer and display
     the first unread article (‘gnus-group-read-group’).  If there are
     no unread articles in the group, or if you give a non-numerical
     prefix to this command, Gnus will offer to fetch all the old
     articles in this group from the server.  If you give a numerical
     prefix N, N determines the number of articles Gnus will fetch.  If
     N is positive, Gnus fetches the N newest articles, if N is
     negative, Gnus fetches the ‘abs(N)’ oldest articles.

     Thus, ‘<SPC>’ enters the group normally, ‘C-u <SPC>’ offers old
     articles, ‘C-u 4 2 <SPC>’ fetches the 42 newest articles, and ‘C-u
     - 4 2 <SPC>’ fetches the 42 oldest ones.

     When you are in the group (in the Summary buffer), you can type
     ‘M-g’ to fetch new articles, or ‘C-u M-g’ to also show the old
     ones.

‘<RET>’
     Select the current group and switch to the summary buffer
     (‘gnus-group-select-group’).  Takes the same arguments as
     ‘gnus-group-read-group’—the only difference is that this command
     does not display the first unread article automatically upon group
     entry.

‘M-<RET>’
     This does the same as the command above, but tries to do it with
     the minimum amount of fuzz (‘gnus-group-quick-select-group’).  No
     scoring/killing will be performed, there will be no highlights and
     no expunging.  This might be useful if you’re in a real hurry and
     have to enter some humongous group.  If you give a 0 prefix to this
     command (i.e., ‘0 M-<RET>’), Gnus won’t even generate the summary
     buffer, which is useful if you want to toggle threading before
     generating the summary buffer (*note Summary Generation
     Commands::).

‘M-<SPC>’
     This is yet one more command that does the same as the ‘<RET>’
     command, but this one does it without expunging and hiding dormants
     (‘gnus-group-visible-select-group’).

‘C-M-<RET>’
     Finally, this command selects the current group ephemerally without
     doing any processing of its contents
     (‘gnus-group-select-group-ephemerally’).  Even threading has been
     turned off.  Everything you do in the group after selecting it in
     this manner will have no permanent effects.

   The ‘gnus-large-newsgroup’ variable says what Gnus should consider to
be a big group.  If it is ‘nil’, no groups are considered big.  The
default value is 200.  If the group has more (unread and/or ticked)
articles than this, Gnus will query the user before entering the group.
The user can then specify how many articles should be fetched from the
server.  If the user specifies a negative number (−N), the N oldest
articles will be fetched.  If it is positive, the N articles that have
arrived most recently will be fetched.

   ‘gnus-large-ephemeral-newsgroup’ is the same as
‘gnus-large-newsgroup’, but is only used for ephemeral newsgroups.

   In groups in some news servers, there might be a big gap between a
few very old articles that will never be expired and the recent ones.
In such a case, the server will return the data like ‘(1 . 30000000)’
for the ‘LIST ACTIVE group’ command, for example.  Even if there are
actually only the articles 1–10 and 29999900–30000000, Gnus doesn’t know
it at first and prepares for getting 30000000 articles.  However, it
will consume hundreds megabytes of memories and might make Emacs get
stuck as the case may be.  If you use such news servers, set the
variable ‘gnus-newsgroup-maximum-articles’ to a positive number.  The
value means that Gnus ignores articles other than this number of the
latest ones in every group.  For instance, the value 10000 makes Gnus
get only the articles 29990001–30000000 (if the latest article number is
30000000 in a group).  Note that setting this variable to a number might
prevent you from reading very old articles.  The default value of the
variable ‘gnus-newsgroup-maximum-articles’ is ‘nil’, which means Gnus
never ignores old articles.

   If ‘gnus-auto-select-first’ is non-‘nil’, select an article
automatically when entering a group with the ‘<SPC>’ command.  Which
article this is controlled by the ‘gnus-auto-select-subject’ variable.
Valid values for this variable are:

‘unread’
     Place point on the subject line of the first unread article.

‘first’
     Place point on the subject line of the first article.

‘unseen’
     Place point on the subject line of the first unseen article.

‘unseen-or-unread’
     Place point on the subject line of the first unseen article, and if
     there is no such article, place point on the subject line of the
     first unread article.

‘best’
     Place point on the subject line of the highest-scored unread
     article.

   This variable can also be a function.  In that case, that function
will be called to place point on a subject line.

   If you want to prevent automatic selection in some group (say, in a
binary group with Huge articles) you can set the
‘gnus-auto-select-first’ variable to ‘nil’ in ‘gnus-select-group-hook’,
which is called when a group is selected.


File: gnus.info,  Node: Subscription Commands,  Next: Group Data,  Prev: Selecting a Group,  Up: Group Buffer

# /. 3.4 Subscription Commands
=============================

The following commands allow for managing your subscriptions in the
Group buffer.  If you want to subscribe to many groups, it’s probably
more convenient to go to the *note Server Buffer::, and choose the
server there using ‘<RET>’ or ‘<SPC>’.  Then you’ll have the commands
listed in *note Browse Foreign Server:: at hand.

‘S t’
‘u’
     Toggle subscription to group under point
     (‘gnus-group-toggle-subscription-at-point’).

‘S s’
‘U’
     Prompt for group, and toggle its subscription.
     (‘gnus-group-toggle-subscription’).

‘S k’
‘C-k’
     Kill the current group (‘gnus-group-kill-group’).

‘S y’
‘C-y’
     Yank the last killed group (‘gnus-group-yank-group’).

‘C-x C-t’
     Transpose two groups (‘gnus-group-transpose-groups’).  This isn’t
     really a subscription command, but you can use it instead of a
     kill-and-yank sequence sometimes.

‘S w’
‘C-w’
     Kill all groups in the region (‘gnus-group-kill-region’).

‘S z’
     Kill all zombie groups (‘gnus-group-kill-all-zombies’).

‘S C-k’
     Kill all groups on a certain level (‘gnus-group-kill-level’).
     These groups can’t be yanked back after killing, so this command
     should be used with some caution.  The only time where this command
     comes in really handy is when you have a ‘.newsrc’ with lots of
     unsubscribed groups that you want to get rid off.  ‘S C-k’ on level
     7 will kill off all unsubscribed groups that do not have message
     numbers in the ‘.newsrc’ file.

   Also *note Group Levels::.


File: gnus.info,  Node: Group Data,  Next: Group Levels,  Prev: Subscription Commands,  Up: Group Buffer

# /. 3.5 Group Data
==================

‘c’
     Mark all unticked articles in this group as read
     (‘gnus-group-catchup-current’).  ‘gnus-group-catchup-group-hook’ is
     called when catching up a group from the group buffer.

‘C’
     Mark all articles in this group, even the ticked ones, as read
     (‘gnus-group-catchup-current-all’).

‘M-c’
     Clear the data from the current group—nix out marks and the list of
     read articles (‘gnus-group-clear-data’).

‘M-x gnus-group-clear-data-on-native-groups’
     If you have switched from one NNTP server to another, all your
     marks and read ranges have become worthless.  You can use this
     command to clear out all data that you have on your native groups.
     Use with caution.


File: gnus.info,  Node: Group Levels,  Next: Group Score,  Prev: Group Data,  Up: Group Buffer

# /. 3.6 Group Levels
====================

All groups have a level of “subscribedness”.  For instance, if a group
is on level 2, it is more subscribed than a group on level 5.  You can
ask Gnus to just list groups on a given level or lower (*note Listing
Groups::), or to just check for new articles in groups on a given level
or lower (*note Scanning New Messages::).

   Remember: The higher the level of the group, the less important it
is.

‘S l’
     Set the level of the current group.  If a numeric prefix is given,
     the next N groups will have their levels set.  The user will be
     prompted for a level.

   Gnus considers groups from levels 1 to ‘gnus-level-subscribed’
(inclusive) (default 5) to be subscribed, ‘gnus-level-subscribed’
(exclusive) and ‘gnus-level-unsubscribed’ (inclusive) (default 7) to be
unsubscribed, ‘gnus-level-zombie’ to be zombies (walking dead) (default
8) and ‘gnus-level-killed’ to be killed (completely dead) (default 9).
Gnus treats subscribed and unsubscribed groups exactly the same, but
zombie and killed groups store no information on what articles you have
read, etc.  This distinction between dead and living groups isn’t done
because it is nice or clever, it is done purely for reasons of
efficiency.

   It is recommended that you keep all your mail groups (if any) on
quite low levels (e.g., 1 or 2).

   Maybe the following description of the default behavior of Gnus helps
to understand what these levels are all about.  By default, Gnus shows
you subscribed nonempty groups, but by hitting ‘L’ you can have it show
empty subscribed groups and unsubscribed groups, too.  Type ‘l’ to go
back to showing nonempty subscribed groups again.  Thus, unsubscribed
groups are hidden, in a way.

   Zombie and killed groups are similar to unsubscribed groups in that
they are hidden by default.  But they are different from subscribed and
unsubscribed groups in that Gnus doesn’t ask the news server for
information (number of messages, number of unread messages) on zombie
and killed groups.  Normally, you use ‘C-k’ to kill the groups you
aren’t interested in.  If most groups are killed, Gnus is faster.

   Why does Gnus distinguish between zombie and killed groups?  Well,
when a new group arrives on the server, Gnus by default makes it a
zombie group.  This means that you are normally not bothered with new
groups, but you can type ‘A z’ to get a list of all new groups.
Subscribe the ones you like and kill the ones you don’t want.  (‘A k’
shows a list of killed groups.)

   If you want to play with the level variables, you should show some
care.  Set them once, and don’t touch them ever again.  Better yet,
don’t touch them at all unless you know exactly what you’re doing.

   Two closely related variables are ‘gnus-level-default-subscribed’
(default 3) and ‘gnus-level-default-unsubscribed’ (default 6), which are
the levels that new groups will be put on if they are (un)subscribed.
These two variables should, of course, be inside the relevant valid
ranges.

   If ‘gnus-keep-same-level’ is non-‘nil’, some movement commands will
only move to groups of the same level (or lower).  In particular, going
from the last article in one group to the next group will go to the next
group of the same level (or lower).  This might be handy if you want to
read the most important groups before you read the rest.

   If this variable is ‘best’, Gnus will make the next newsgroup the one
with the best level.

   All groups with a level less than or equal to
‘gnus-group-default-list-level’ will be listed in the group buffer by
default.  This variable can also be a function.  In that case, that
function will be called and the result will be used as value.

   If ‘gnus-group-list-inactive-groups’ is non-‘nil’, non-active groups
will be listed along with the unread groups.  This variable is ‘t’ by
default.  If it is ‘nil’, inactive groups won’t be listed.

   If ‘gnus-group-use-permanent-levels’ is non-‘nil’, once you give a
level prefix to ‘g’ or ‘l’, all subsequent commands will use this level
as the “work” level.

   Gnus will normally just activate (i.e., query the server about)
groups on level ‘gnus-activate-level’ or less.  If you don’t want to
activate unsubscribed groups, for instance, you might set this variable
to 5.  The default is 6.


File: gnus.info,  Node: Group Score,  Next: Marking Groups,  Prev: Group Levels,  Up: Group Buffer

# /. 3.7 Group Score
===================

You would normally keep important groups on high levels, but that scheme
is somewhat restrictive.  Don’t you wish you could have Gnus sort the
group buffer according to how often you read groups, perhaps?  Within
reason?

   This is what “group score” is for.  You can have Gnus assign a score
to each group through the mechanism described below.  You can then sort
the group buffer based on this score.  Alternatively, you can sort on
score and then level.  (Taken together, the level and the score is
called the “rank” of the group.  A group that is on level 4 and has a
score of 1 has a higher rank than a group on level 5 that has a score of
300.  (The level is the most significant part and the score is the least
significant part.))

   If you want groups you read often to get higher scores than groups
you read seldom you can add the ‘gnus-summary-bubble-group’ function to
the ‘gnus-summary-exit-hook’ hook.  This will result (after sorting) in
a bubbling sort of action.  If you want to see that in action after each
summary exit, you can add ‘gnus-group-sort-groups-by-rank’ or
‘gnus-group-sort-groups-by-score’ to the same hook, but that will slow
things down somewhat.


File: gnus.info,  Node: Marking Groups,  Next: Foreign Groups,  Prev: Group Score,  Up: Group Buffer

# /. 3.8 Marking Groups
======================

If you want to perform some command on several groups, and they appear
subsequently in the group buffer, you would normally just give a
numerical prefix to the command.  Most group commands will then do your
bidding on those groups.

   However, if the groups are not in sequential order, you can still
perform a command on several groups.  You simply mark the groups first
with the process mark and then execute the command.

‘#’
‘M m’
     Toggle the process mark for the current group
     (‘gnus-group-mark-group’).
     If ‘gnus-process-mark-toggle’ is ‘nil’, set the process mark for
     the current group.

‘M-#’
‘M u’
     Remove the process mark, if any, from the current group
     (‘gnus-group-unmark-group’).

‘M U’
     Remove the process mark from all groups
     (‘gnus-group-unmark-all-groups’).

‘M w’
     Mark groups in region (‘gnus-group-mark-region’).

‘M b’
     Mark all groups in the buffer (‘gnus-group-mark-buffer’).

‘M r’
     Mark all groups that match some regular expression
     (‘gnus-group-mark-regexp’).

   Also *note Process/Prefix::.

   If you want to execute some command on all groups that have been
marked with the process mark, you can use the ‘M-&’
(‘gnus-group-universal-argument’) command.  It will prompt you for the
command to be executed.


File: gnus.info,  Node: Foreign Groups,  Next: Group Parameters,  Prev: Marking Groups,  Up: Group Buffer

# /. 3.9 Foreign Groups
======================

If you recall how to subscribe to servers (*note Finding the News::) you
will remember that ‘gnus-secondary-select-methods’ and
‘gnus-select-method’ let you write a definition in Emacs Lisp of what
servers you want to see when you start up.  The alternate approach is to
use foreign servers and groups.  “Foreign” here means they are not
coming from the select methods.  All foreign server configuration and
subscriptions are stored only in the ‘~/.newsrc.eld’ file.

   Below are some group mode commands for making and editing general
foreign groups, as well as commands to ease the creation of a few
special-purpose groups.  All these commands insert the newly created
groups under point—‘gnus-subscribe-newsgroup-method’ is not consulted.

   Changes from the group editing commands are stored in ‘~/.newsrc.eld’
(‘gnus-startup-file’).  An alternative is the variable
‘gnus-parameters’, *Note Group Parameters::.

‘G m’
     Make a new group (‘gnus-group-make-group’).  Gnus will prompt you
     for a name, a method and possibly an “address”.  For an easier way
     to subscribe to NNTP groups (*note Browse Foreign Server::).

‘G M’
     Make an ephemeral group (‘gnus-group-read-ephemeral-group’).  Gnus
     will prompt you for a name, a method and an “address”.

‘G r’
     Rename the current group to something else
     (‘gnus-group-rename-group’).  This is valid only on some
     groups—mail groups mostly.  This command might very well be quite
     slow on some back ends.

‘G c’
     Customize the group parameters (‘gnus-group-customize’).

‘G e’
     Enter a buffer where you can edit the select method of the current
     group (‘gnus-group-edit-group-method’).

‘G p’
     Enter a buffer where you can edit the group parameters
     (‘gnus-group-edit-group-parameters’).

‘G E’
     Enter a buffer where you can edit the group info
     (‘gnus-group-edit-group’).

‘G d’
     Make a directory group (*note Directory Groups::).  You will be
     prompted for the directory’s name
     (‘gnus-group-make-directory-group’).

‘G h’
     Make the Gnus help group (‘gnus-group-make-help-group’).

‘G D’
     Read an arbitrary directory as if it were a newsgroup with the
     ‘nneething’ back end (‘gnus-group-enter-directory’).  *Note
     Anything Groups::.

‘G f’
     Make a group based on some file or other
     (‘gnus-group-make-doc-group’).  If you give a prefix to this
     command, you will be prompted for a file name and a file type.
     Currently supported types are ‘mbox’, ‘babyl’, ‘digest’, ‘news’,
     ‘rnews’, ‘mmdf’, ‘forward’, ‘rfc934’, ‘rfc822-forward’,
     ‘mime-parts’, ‘standard-digest’, ‘slack-digest’, ‘clari-briefs’,
     ‘nsmail’, ‘outlook’, ‘oe-dbx’, and ‘mailman’.  If you run this
     command without a prefix, Gnus will guess at the file type.  *Note
     Document Groups::.

‘G u’
     Create one of the groups mentioned in ‘gnus-useful-groups’
     (‘gnus-group-make-useful-group’).

‘G w’
     Make an ephemeral group based on a web search
     (‘gnus-group-make-web-group’).  If you give a prefix to this
     command, make a solid group instead.  You will be prompted for the
     search engine type and the search string.  Valid search engine
     types include ‘google’ and ‘dejanews’.  *Note Web Searches::.

     If you use the ‘google’ search engine, you can limit the search to
     a particular group by using a match string like ‘shaving
     group:alt.sysadmin.recovery’.

‘G R’
     Make a group based on an RSS feed (‘gnus-group-make-rss-group’).
     You will be prompted for an URL.  *Note RSS::.

‘G <DEL>’
     This function will delete the current group
     (‘gnus-group-delete-group’).  If given a prefix, this function will
     actually delete all the articles in the group, and forcibly remove
     the group itself from the face of the Earth.  Use a prefix only if
     you are absolutely sure of what you are doing.  This command can’t
     be used on read-only groups (like ‘nntp’ groups), though.

‘G V’
     Make a new, fresh, empty ‘nnvirtual’ group
     (‘gnus-group-make-empty-virtual’).  *Note Virtual Groups::.

‘G v’
     Add the current group to an ‘nnvirtual’ group
     (‘gnus-group-add-to-virtual’).  Uses the process/prefix convention.

   *Note Select Methods::, for more information on the various select
methods.

   If ‘gnus-activate-foreign-newsgroups’ is a positive number, Gnus will
check all foreign groups with this level or lower at startup.  This
might take quite a while, especially if you subscribe to lots of groups
from different NNTP servers.  Also *note Group Levels::;
‘gnus-activate-level’ also affects activation of foreign newsgroups.

   The following commands create ephemeral groups.  They can be called
not only from the Group buffer, but in any Gnus buffer.

‘gnus-read-ephemeral-emacs-bug-group’
     Read an Emacs bug report in an ephemeral group.  Gnus will prompt
     for multiple bug numbers.  The default is the number at point.  The
     URL template is specified in
     ‘gnus-bug-group-download-format-alist’.

‘gnus-read-ephemeral-debian-bug-group’
     Read a Debian bug report in an ephemeral group.  Analog to
     ‘gnus-read-ephemeral-emacs-bug-group’.

   Some of these command are also useful for article buttons, *Note
Article Buttons::.

   Here is an example:
     (require 'gnus-art)
     (add-to-list
      'gnus-button-alist
      '("#\\([0-9]+\\)\\>" 1
        (string-match "\\<emacs\\>" (or gnus-newsgroup-name ""))
        gnus-read-ephemeral-emacs-bug-group 1))


File: gnus.info,  Node: Group Parameters,  Next: Listing Groups,  Prev: Foreign Groups,  Up: Group Buffer

# /. 3.10 Group Parameters
=========================

The group parameters store information local to a particular group.

   Use the ‘G p’ or the ‘G c’ command to edit group parameters of a
group.  (‘G p’ presents you with a Lisp-based interface, ‘G c’ presents
you with a Customize-like interface.  The latter helps avoid silly Lisp
errors.)  You might also be interested in reading about topic parameters
(*note Topic Parameters::).  Additionally, you can set group parameters
via the ‘gnus-parameters’ variable, see below.

   Here’s an example group parameter list:

     ((to-address . "ding@gnus.org")
      (auto-expire . t))

   We see that each element consists of a “dotted pair”—the thing before
the dot is the key, while the thing after the dot is the value.  All the
parameters have this form _except_ local variable specs, which are not
dotted pairs, but proper lists.

   Some parameters have correspondent customizable variables, each of
which is an alist of regexps and values.

   The following group parameters can be used:

‘to-address’
     Address used by when doing followups and new posts.

          (to-address . "some@where.com")

     This is primarily useful in mail groups that represent closed
     mailing lists—mailing lists where it’s expected that everybody that
     writes to the mailing list is subscribed to it.  Since using this
     parameter ensures that the mail only goes to the mailing list
     itself, it means that members won’t receive two copies of your
     followups.

     Using ‘to-address’ will actually work whether the group is foreign
     or not.  Let’s say there’s a group on the server that is called
     ‘fa.4ad-l’.  This is a real newsgroup, but the server has gotten
     the articles from a mail-to-news gateway.  Posting directly to this
     group is therefore impossible—you have to send mail to the mailing
     list address instead.

     See also ‘gnus-parameter-to-address-alist’.

‘to-list’
     Address used when doing ‘a’ in that group.

          (to-list . "some@where.com")

     It is totally ignored when doing a followup—except that if it is
     present in a news group, you’ll get mail group semantics when doing
     ‘f’.

     If you do an ‘a’ command in a mail group and you have neither a
     ‘to-list’ group parameter nor a ‘to-address’ group parameter, then
     a ‘to-list’ group parameter will be added automatically upon
     sending the message if ‘gnus-add-to-list’ is set to ‘t’.

     If this variable is set, ‘gnus-mailing-list-mode’ is turned on when
     entering summary buffer.

‘subscribed’
     If this parameter is set to ‘t’, Gnus will consider the to-address
     and to-list parameters for this group as addresses of mailing lists
     you are subscribed to.  Giving Gnus this information is (only) a
     first step in getting it to generate correct Mail-Followup-To
     headers for your posts to these lists.  The second step is to put
     the following in your ‘.gnus.el’

          (setq message-subscribed-address-functions
                '(gnus-find-subscribed-addresses))

     *Note Mailing Lists: (message)Mailing Lists, for a complete
     treatment of available MFT support.

‘visible’
     If the group parameter list has the element ‘(visible . t)’, that
     group will always be visible in the Group buffer, regardless of
     whether it has any unread articles.

     This parameter cannot be set via ‘gnus-parameters’.  See
     ‘gnus-permanently-visible-groups’ as an alternative.

‘broken-reply-to’
     Elements like ‘(broken-reply-to . t)’ signals that ‘Reply-To’
     headers in this group are to be ignored, and for the header to be
     hidden if ‘reply-to’ is part of ‘gnus-boring-article-headers’.
     This can be useful if you’re reading a mailing list group where the
     listserv has inserted ‘Reply-To’ headers that point back to the
     listserv itself.  That is broken behavior.  So there!

‘to-group’
     Elements like ‘(to-group . "some.group.name")’ means that all posts
     in that group will be sent to ‘some.group.name’.

‘newsgroup’
     If you have ‘(newsgroup . t)’ in the group parameter list, Gnus
     will treat all responses as if they were responses to news
     articles.  This can be useful if you have a mail group that’s
     really a mirror of a news group.

‘gcc-self’
     If ‘(gcc-self . t)’ is present in the group parameter list, newly
     composed messages will be ‘gcc’d to the current group.  If
     ‘(gcc-self . none)’ is present, no ‘Gcc:’ header will be generated,
     if ‘(gcc-self . "group")’ is present, this string will be inserted
     literally as a ‘Gcc:’ header.  It should be a group name.  The
     ‘gcc-self’ value may also be a list of strings and ‘t’, e.g.,
     ‘(gcc-self "group1" "group2" t)’ means to ‘gcc’ the newly composed
     message into the groups ‘"group1"’ and ‘"group2"’, and into the
     current group.  The ‘gcc-self’ parameter takes precedence over any
     default ‘Gcc’ rules as described later (*note Archived Messages::),
     with the exception for messages to resend.

     *Caveat*: Adding ‘(gcc-self . t)’ to the parameter list of ‘nntp’
     groups (or the like) isn’t valid.  An ‘nntp’ server doesn’t accept
     articles.

‘auto-expire’
     If the group parameter has an element that looks like ‘(auto-expire
     . t)’, all articles read will be marked as expirable.  For an
     alternative approach, *note Expiring Mail::.

     See also ‘gnus-auto-expirable-newsgroups’.

‘total-expire’
     If the group parameter has an element that looks like
     ‘(total-expire . t)’, all read articles will be put through the
     expiry process, even if they are not marked as expirable.  Use with
     caution.  Unread, ticked and dormant articles are not eligible for
     expiry.

     See also ‘gnus-total-expirable-newsgroups’.

‘expiry-wait’
     If the group parameter has an element that looks like ‘(expiry-wait
     . 10)’, this value will override any ‘nnmail-expiry-wait’ and
     ‘nnmail-expiry-wait-function’ settings (*note Expiring Mail::) when
     expiring expirable messages.  The value can be either a number of
     days (not necessarily an integer), or one of the symbols ‘never’ or
     ‘immediate’.

‘expiry-target’
     Where expired messages end up.  This parameter overrides
     ‘nnmail-expiry-target’.

‘score-file’
     Elements that look like ‘(score-file . "file")’ will make ‘file’
     into the current score file for the group in question.  All
     interactive score entries will be put into this file.

‘adapt-file’
     Elements that look like ‘(adapt-file . "file")’ will make ‘file’
     into the current adaptive file for the group in question.  All
     adaptive score entries will be put into this file.

‘admin-address’
     When unsubscribing from a mailing list you should never send the
     unsubscription notice to the mailing list itself.  Instead, you’d
     send messages to the administrative address.  This parameter allows
     you to put the admin address somewhere convenient.

‘display’
     Elements that look like ‘(display . MODE)’ say which articles to
     display on entering the group.  Valid values are:

     ‘all’
          Display all articles, both read and unread.

     ‘an integer’
          Display the last INTEGER articles in the group.  This is the
          same as entering the group with ‘C-u INTEGER’.

     ‘default’
          Display the default visible articles, which normally includes
          unread and ticked articles.

     ‘an array’
          Display articles that satisfy a predicate.

          Here are some examples:

          ‘[unread]’
               Display only unread articles.

          ‘[not expire]’
               Display everything except expirable articles.

          ‘[and (not reply) (not expire)]’
               Display everything except expirable and articles you’ve
               already responded to.

          The available operators are ‘not’, ‘and’ and ‘or’.  Predicates
          include ‘tick’, ‘unsend’, ‘undownload’, ‘unread’, ‘dormant’,
          ‘expire’, ‘reply’, ‘killed’, ‘bookmark’, ‘score’, ‘save’,
          ‘cache’, ‘forward’, and ‘unseen’.

     The ‘display’ parameter works by limiting the summary buffer to the
     subset specified.  You can pop the limit by using the ‘/ w’ command
     (*note Limiting::).

‘comment’
     Elements that look like ‘(comment . "This is a comment")’ are
     arbitrary comments on the group.  You can display comments in the
     group line (*note Group Line Specification::).

‘charset’
     Elements that look like ‘(charset . iso-8859-1)’ will make
     ‘iso-8859-1’ the default charset; that is, the charset that will be
     used for all articles that do not specify a charset.

     See also ‘gnus-group-charset-alist’.

‘ignored-charsets’
     Elements that look like ‘(ignored-charsets x-unknown iso-8859-1)’
     will make ‘iso-8859-1’ and ‘x-unknown’ ignored; that is, the
     default charset will be used for decoding articles.

     See also ‘gnus-group-ignored-charsets-alist’.

‘posting-style’
     You can store additional posting style information for this group
     here (*note Posting Styles::).  The format is that of an entry in
     the ‘gnus-posting-styles’ alist, except that there’s no regexp
     matching the group name (of course).  Style elements in this group
     parameter will take precedence over the ones found in
     ‘gnus-posting-styles’.

     For instance, if you want a funky name and signature in this group
     only, instead of hacking ‘gnus-posting-styles’, you could put
     something like this in the group parameters:

          (posting-style
            (name "Funky Name")
            ("X-Message-SMTP-Method" "smtp smtp.example.org 587")
            ("X-My-Header" "Funky Value")
            (signature "Funky Signature"))

     If you’re using topics to organize your group buffer (*note Group
     Topics::), note that posting styles can also be set in the topics
     parameters.  Posting styles in topic parameters apply to all groups
     in this topic.  More precisely, the posting-style settings for a
     group result from the hierarchical merging of all posting-style
     entries in the parameters of this group and all the topics it
     belongs to.

‘post-method’
     If it is set, the value is used as the method for posting message
     instead of ‘gnus-post-method’.

‘mail-source’
     If it is set, and the setting of ‘mail-sources’ includes a ‘group’
     mail source (*note Mail Sources::), the value is a mail source for
     this group.

‘banner’
     An item like ‘(banner . REGEXP)’ causes any part of an article that
     matches the regular expression REGEXP to be stripped.  Instead of
     REGEXP, you can also use the symbol ‘signature’ which strips the
     last signature or any of the elements of the alist
     ‘gnus-article-banner-alist’.

‘sieve’
     This parameter contains a Sieve test that should match incoming
     mail that should be placed in this group.  From this group
     parameter, a Sieve ‘IF’ control structure is generated, having the
     test as the condition and ‘fileinto "group.name";’ as the body.

     For example, if the ‘INBOX.list.sieve’ group has the ‘(sieve
     address "sender" "sieve-admin@extundo.com")’ group parameter, when
     translating the group parameter into a Sieve script (*note Sieve
     Commands::) the following Sieve code is generated:

          if address "sender" "sieve-admin@extundo.com" {
                  fileinto "INBOX.list.sieve";
          }

     To generate tests for multiple email-addresses use a group
     parameter like ‘(sieve address "sender" ("name@one.org"
     else@two.org"))’.  When generating a sieve script (*note Sieve
     Commands::) Sieve code like the following is generated:

          if address "sender" ["name@one.org", "else@two.org"] {
                  fileinto "INBOX.list.sieve";
          }

     You can also use regexp expansions in the rules:

          (sieve header :regex "list-id" "<c++std-\\1.accu.org>")

     *Note Sieve Commands::, for commands and variables that might be of
     interest in relation to the sieve parameter.

     The Sieve language is described in RFC 3028.  *Note Emacs Sieve:
     (sieve)Top.

‘match-list’
     If this parameter is set to ‘t’ and ‘nnmail-split-method’ is set to
     ‘gnus-group-split’, Gnus will match ‘to-address’, ‘to-list’,
     ‘extra-aliases’ and ‘split-regexp’ against the ‘list’ split
     abbreviation.  The split regexp is modified to match either a ‘@’
     or a dot ‘.’ in mail addresses to conform to RFC2919 ‘List-ID’.

     See ‘nnmail-split-abbrev-alist’ for the regular expression matching
     mailing-list headers.

     *Note Group Mail Splitting::, for details on how to automatically
     split on group parameters.

‘(agent parameters)’
     If the agent has been enabled, you can set any of its parameters to
     control the behavior of the agent in individual groups.  See Agent
     Parameters in *note Category Syntax::.  Most users will choose to
     set agent parameters in either an agent category or group topic to
     minimize the configuration effort.

‘(VARIABLE FORM)’
     You can use the group parameters to set variables local to the
     group you are entering.  If you want to turn threading off in
     ‘news.answers’, you could put ‘(gnus-show-threads nil)’ in the
     group parameters of that group.  ‘gnus-show-threads’ will be made
     into a local variable in the summary buffer you enter, and the form
     ‘nil’ will be ‘eval’ed there.

     Note that this feature sets the variable locally to the summary
     buffer if and only if VARIABLE has been bound as a variable.
     Otherwise, only evaluating the form will take place.  So, you may
     want to bind the variable in advance using ‘defvar’ or other if the
     result of the form needs to be set to it.

     But some variables are evaluated in the article buffer, or in the
     message buffer (of a reply or followup or otherwise newly created
     message).  As a workaround, it might help to add the variable in
     question to ‘gnus-newsgroup-variables’.  *Note Various Summary
     Stuff::.  So if you want to set ‘message-from-style’ via the group
     parameters, then you may need the following statement elsewhere in
     your ‘~/.gnus.el’ file:

          (add-to-list 'gnus-newsgroup-variables 'message-from-style)

     A use for this feature is to remove a mailing list identifier tag
     in the subject fields of articles.  E.g., if the news group

          nntp+news.gnus.org:gmane.text.docbook.apps

     has the tag ‘DOC-BOOK-APPS:’ in the subject of all articles, this
     tag can be removed from the article subjects in the summary buffer
     for the group by putting ‘(gnus-list-identifiers "DOCBOOK-APPS:")’
     into the group parameters for the group.

     This can also be used as a group-specific hook function.  If you
     want to hear a beep when you enter a group, you could put something
     like ‘(dummy-variable (ding))’ in the parameters of that group.  If
     ‘dummy-variable’ has been bound (see above), it will be set to the
     (meaningless) result of the ‘(ding)’ form.

     Alternatively, since the VARIABLE becomes local to the group, this
     pattern can be used to temporarily change a hook.  For example, if
     the following is added to a group parameter

          (gnus-summary-prepared-hook
            (lambda nil (local-set-key "d" (local-key-binding "n"))))

     when the group is entered, the ’d’ key will not mark the article as
     expired.

   Group parameters can be set via the ‘gnus-parameters’ variable too.
But some variables, such as ‘visible’, have no effect (For this case see
‘gnus-permanently-visible-groups’ as an alternative.).  For example:

     (setq gnus-parameters
           '(("mail\\..*"
              (gnus-show-threads nil)
              (gnus-use-scoring nil)
              (gnus-summary-line-format
               "%U%R%z%I%(%[%d:%ub%-23,23f%]%) %s\n")
              (gcc-self . t)
              (display . all))

             ("^nnimap:\\(foo.bar\\)$"
              (to-group . "\\1"))

             ("mail\\.me"
              (gnus-use-scoring t))

             ("list\\..*"
              (total-expire . t)
              (broken-reply-to . t))))

   All clauses that match the group name will be used, but the last
setting “wins”.  So if you have two clauses that both match the group
name, and both set, say ‘display’, the last setting will override the
first.

   Parameters that are strings will be subjected to regexp substitution,
as the ‘to-group’ example shows.

   By default, whether comparing the group name and one of those regexps
specified in ‘gnus-parameters’ is done in a case-sensitive manner or a
case-insensitive manner depends on the value of ‘case-fold-search’ at
the time when the comparison is done.  The value of ‘case-fold-search’
is typically ‘t’; it means, for example, the element ‘("INBOX\\.FOO"
(total-expire . t))’ might be applied to both the ‘INBOX.FOO’ group and
the ‘INBOX.foo’ group.  If you want to make those regexps always
case-sensitive, set the value of the ‘gnus-parameters-case-fold-search’
variable to ‘nil’.  Otherwise, set it to ‘t’ if you want to compare them
always in a case-insensitive manner.

   You can define different sorting to different groups via
‘gnus-parameters’.  Here is an example to sort an NNTP group by reverse
date to see the latest news at the top and an RSS group by subject.  In
this example, the first group is the Debian daily news group
‘gmane.linux.debian.user.news’ from news.gmane.org.  The RSS group
corresponds to the Debian weekly news RSS feed
<https://packages.debian.org/unstable/newpkg_main.en.rdf>, *Note RSS::.

     (setq
      gnus-parameters
      '(("nntp.*gmane\\.debian\\.user\\.news"
         (gnus-show-threads nil)
         (gnus-article-sort-functions '((not gnus-article-sort-by-date)))
         (gnus-use-adaptive-scoring nil)
         (gnus-use-scoring nil))
        ("nnrss.*debian"
         (gnus-show-threads nil)
         (gnus-article-sort-functions 'gnus-article-sort-by-subject)
         (gnus-use-adaptive-scoring nil)
         (gnus-use-scoring t)
         (gnus-score-find-score-files-function 'gnus-score-find-single)
         (gnus-summary-line-format "%U%R%z%d %I%(%[ %s %]%)\n"))))


File: gnus.info,  Node: Listing Groups,  Next: Sorting Groups,  Prev: Group Parameters,  Up: Group Buffer

# /. 3.11 Listing Groups
=======================

These commands all list various slices of the groups available.

‘l’
‘A s’
     List all groups that have unread articles
     (‘gnus-group-list-groups’).  If the numeric prefix is used, this
     command will list only groups of level ARG and lower.  By default,
     it only lists groups of level five (i.e.,
     ‘gnus-group-default-list-level’) or lower (i.e., just subscribed
     groups).

‘L’
‘A u’
     List all groups, whether they have unread articles or not
     (‘gnus-group-list-all-groups’).  If the numeric prefix is used,
     this command will list only groups of level ARG and lower.  By
     default, it lists groups of level seven or lower (i.e., just
     subscribed and unsubscribed groups).

‘A l’
     List all unread groups on a specific level
     (‘gnus-group-list-level’).  If given a prefix, also list the groups
     with no unread articles.

‘A k’
     List all killed groups (‘gnus-group-list-killed’).  If given a
     prefix argument, really list all groups that are available, but
     aren’t currently (un)subscribed.  This could entail reading the
     active file from the server.

‘A z’
     List all zombie groups (‘gnus-group-list-zombies’).

‘A m’
     List all unread, subscribed groups with names that match a regexp
     (‘gnus-group-list-matching’).

‘A M’
     List groups that match a regexp (‘gnus-group-list-all-matching’).

‘A A’
     List absolutely all groups in the active file(s) of the server(s)
     you are connected to (‘gnus-group-list-active’).  This might very
     well take quite a while.  It might actually be a better idea to do
     a ‘A M’ to list all matching, and just give ‘.’ as the thing to
     match on.  Also note that this command may list groups that don’t
     exist (yet)—these will be listed as if they were killed groups.
     Take the output with some grains of salt.

‘A a’
     List all groups that have names that match a regexp
     (‘gnus-group-apropos’).

‘A d’
     List all groups that have names or descriptions that match a regexp
     (‘gnus-group-description-apropos’).

‘A c’
     List all groups with cached articles (‘gnus-group-list-cached’).

‘A ?’
     List all groups with dormant articles (‘gnus-group-list-dormant’).

‘A !’
     List all groups with ticked articles (‘gnus-group-list-ticked’).

‘A /’
     Further limit groups within the current selection
     (‘gnus-group-list-limit’).  If you’ve first limited to groups with
     dormant articles with ‘A ?’, you can then further limit with ‘A /
     c’, which will then limit to groups with cached articles, giving
     you the groups that have both dormant articles and cached articles.

‘A f’
     Flush groups from the current selection (‘gnus-group-list-flush’).

‘A p’
     List groups plus the current selection (‘gnus-group-list-plus’).

   Groups that match the ‘gnus-permanently-visible-groups’ regexp will
always be shown, whether they have unread articles or not.  You can also
add the ‘visible’ element to the group parameters in question to get the
same effect.

   Groups that have just ticked articles in it are normally listed in
the group buffer.  If ‘gnus-list-groups-with-ticked-articles’ is ‘nil’,
these groups will be treated just like totally empty groups.  It is ‘t’
by default.


File: gnus.info,  Node: Sorting Groups,  Next: Group Maintenance,  Prev: Listing Groups,  Up: Group Buffer

# /. 3.12 Sorting Groups
=======================

The ‘C-c C-s’ (‘gnus-group-sort-groups’) command sorts the group buffer
according to the function(s) given by the ‘gnus-group-sort-function’
variable.  Available sorting functions include:

‘gnus-group-sort-by-alphabet’
     Sort the group names alphabetically.  This is the default.

‘gnus-group-sort-by-real-name’
     Sort the group alphabetically on the real (unprefixed) group names.

‘gnus-group-sort-by-level’
     Sort by group level.

‘gnus-group-sort-by-score’
     Sort by group score.  *Note Group Score::.

‘gnus-group-sort-by-rank’
     Sort by group score and then the group level.  The level and the
     score are, when taken together, the group’s “rank”.  *Note Group
     Score::.

‘gnus-group-sort-by-unread’
     Sort by number of unread articles.

‘gnus-group-sort-by-method’
     Sort alphabetically on the select method.

‘gnus-group-sort-by-server’
     Sort alphabetically on the Gnus server name.

   ‘gnus-group-sort-function’ can also be a list of sorting functions.
In that case, the most significant sort key function must be the last
one.

   There are also a number of commands for sorting directly according to
some sorting criteria:

‘G S a’
     Sort the group buffer alphabetically by group name
     (‘gnus-group-sort-groups-by-alphabet’).

‘G S u’
     Sort the group buffer by the number of unread articles
     (‘gnus-group-sort-groups-by-unread’).

‘G S l’
     Sort the group buffer by group level
     (‘gnus-group-sort-groups-by-level’).

‘G S v’
     Sort the group buffer by group score
     (‘gnus-group-sort-groups-by-score’).  *Note Group Score::.

‘G S r’
     Sort the group buffer by group rank
     (‘gnus-group-sort-groups-by-rank’).  *Note Group Score::.

‘G S m’
     Sort the group buffer alphabetically by back end name
     (‘gnus-group-sort-groups-by-method’).

‘G S n’
     Sort the group buffer alphabetically by real (unprefixed) group
     name (‘gnus-group-sort-groups-by-real-name’).

   All the commands below obey the process/prefix convention (*note
Process/Prefix::).

   When given a symbolic prefix (*note Symbolic Prefixes::), all these
commands will sort in reverse order.

   You can also sort a subset of the groups:

‘G P a’
     Sort the groups alphabetically by group name
     (‘gnus-group-sort-selected-groups-by-alphabet’).

‘G P u’
     Sort the groups by the number of unread articles
     (‘gnus-group-sort-selected-groups-by-unread’).

‘G P l’
     Sort the groups by group level
     (‘gnus-group-sort-selected-groups-by-level’).

‘G P v’
     Sort the groups by group score
     (‘gnus-group-sort-selected-groups-by-score’).  *Note Group Score::.

‘G P r’
     Sort the groups by group rank
     (‘gnus-group-sort-selected-groups-by-rank’).  *Note Group Score::.

‘G P m’
     Sort the groups alphabetically by back end name
     (‘gnus-group-sort-selected-groups-by-method’).

‘G P n’
     Sort the groups alphabetically by real (unprefixed) group name
     (‘gnus-group-sort-selected-groups-by-real-name’).

‘G P s’
     Sort the groups according to ‘gnus-group-sort-function’.

   And finally, note that you can use ‘C-k’ and ‘C-y’ to manually move
groups around.


File: gnus.info,  Node: Group Maintenance,  Next: Browse Foreign Server,  Prev: Sorting Groups,  Up: Group Buffer

# /. 3.13 Group Maintenance
==========================

‘b’
     Find bogus groups and delete them
     (‘gnus-group-check-bogus-groups’).

‘F’
     Find new groups and process them (‘gnus-group-find-new-groups’).
     With 1 ‘C-u’, use the ‘ask-server’ method to query the server for
     new groups.  With 2 ‘C-u’’s, use most complete method possible to
     query the server for new groups, and subscribe the new groups as
     zombies.

‘C-c C-x’
     Run all expirable articles in the current group through the expiry
     process (if any) (‘gnus-group-expire-articles’).  That is, delete
     all expirable articles in the group that have been around for a
     while.  (*note Expiring Mail::).

‘C-c C-M-x’
     Run all expirable articles in all groups through the expiry process
     (‘gnus-group-expire-all-groups’).


File: gnus.info,  Node: Browse Foreign Server,  Next: Exiting Gnus,  Prev: Group Maintenance,  Up: Group Buffer

# /. 3.14 Browse Foreign Server
==============================

‘B’
     You will be queried for a select method and a server name.  Gnus
     will then attempt to contact this server and let you browse the
     groups there (‘gnus-group-browse-foreign-server’).

   A new buffer with a list of available groups will appear.  This
buffer will use the ‘gnus-browse-mode’.  This buffer looks a bit (well,
a lot) like a normal group buffer.

   Here’s a list of keystrokes available in the browse mode:

‘n’
     Go to the next group (‘gnus-group-next-group’).

‘p’
     Go to the previous group (‘gnus-group-prev-group’).

‘<SPC>’
     Enter the current group and display the first article
     (‘gnus-browse-read-group’).

‘<RET>’
     Enter the current group (‘gnus-browse-select-group’).

‘u’
     Toggle subscription of the current group
     (‘gnus-browse-toggle-subscription’).  You can affect the way the
     new group is entered into the Group buffer using the variable
     ‘gnus-browse-subscribe-newsgroup-method’.  See *note Subscription
     Methods:: for available options.

‘l’
‘q’
     Exit browse mode (‘gnus-browse-exit’).

‘d’
     Describe the current group (‘gnus-browse-describe-group’).

‘?’
     Describe browse mode briefly (well, there’s not much to describe,
     is there) (‘gnus-browse-describe-briefly’).

‘<DEL>’
     This function will delete the current group
     (‘gnus-browse-delete-group’).  If given a prefix, this function
     will actually delete all the articles in the group, and forcibly
     remove the group itself from the face of the Earth.  Use a prefix
     only if you are absolutely sure of what you are doing.


File: gnus.info,  Node: Exiting Gnus,  Next: Group Topics,  Prev: Browse Foreign Server,  Up: Group Buffer

# /. 3.15 Exiting Gnus
=====================

Yes, Gnus is ex(c)iting.

‘z’
     Suspend Gnus (‘gnus-group-suspend’).  This doesn’t really exit
     Gnus, but it kills all buffers except the Group buffer.  I’m not
     sure why this is a gain, but then who am I to judge?

‘q’
     Quit Gnus (‘gnus-group-exit’).

‘Q’
     Quit Gnus without saving the ‘.newsrc’ files (‘gnus-group-quit’).
     The dribble file will be saved, though (*note Auto Save::).

   ‘gnus-suspend-gnus-hook’ is called when you suspend Gnus and
‘gnus-exit-gnus-hook’ is called when you quit Gnus, while
‘gnus-after-exiting-gnus-hook’ is called as the final item when exiting
Gnus.


File: gnus.info,  Node: Group Topics,  Next: Non-ASCII Group Names,  Prev: Exiting Gnus,  Up: Group Buffer

# /. 3.16 Group Topics
=====================

If you read lots and lots of groups, it might be convenient to group
them hierarchically according to topics.  You put your Emacs groups over
here, your sex groups over there, and the rest (what, two groups or so?)
you put in some misc section that you never bother with anyway.  You can
even group the Emacs sex groups as a sub-topic to either the Emacs
groups or the sex groups—or both!  Go wild!

   Here’s an example:

     Gnus
       Emacs -- I wuw it!
          3: comp.emacs
          2: alt.religion.emacs
         Naughty Emacs
          452: alt.sex.emacs
            0: comp.talk.emacs.recovery
       Misc
          8: comp.binaries.fractals
         13: comp.sources.unix

   To get this _fab_ functionality you simply turn on (ooh!)  the
‘gnus-topic’ minor mode—type ‘t’ in the group buffer.  (This is a
toggling command.)

   Go ahead, just try it.  I’ll still be here when you get back.  La de
dum... Nice tune, that... la la la... What, you’re back?  Yes, and now
press ‘l’.  There.  All your groups are now listed under ‘misc’.
Doesn’t that make you feel all warm and fuzzy?  Hot and bothered?

   If you want this permanently enabled, you should add that minor mode
to the hook for the group mode.  Put the following line in your
‘~/.gnus.el’ file:

     (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

* Menu:

* Topic Commands::              Interactive E-Z commands.
* Topic Variables::             How to customize the topics the Lisp Way.
* Topic Sorting::               Sorting each topic individually.
* Topic Topology::              A map of the world.
* Topic Parameters::            Parameters that apply to all groups in a topic.


File: gnus.info,  Node: Topic Commands,  Next: Topic Variables,  Up: Group Topics

3.16.1 Topic Commands
---------------------

When the topic minor mode is turned on, a new ‘T’ submap will be
available.  In addition, a few of the standard keys change their
definitions slightly.

   In general, the following kinds of operations are possible on topics.
First of all, you want to create topics.  Secondly, you want to put
groups in topics and to move them around until you have an order you
like.  The third kind of operation is to show/hide parts of the whole
shebang.  You might want to hide a topic including its subtopics and
groups, to get a better overview of the other groups.

   Here is a list of the basic keys that you might need to set up topics
the way you like.

‘T n’
     Prompt for a new topic name and create it
     (‘gnus-topic-create-topic’).

‘T <TAB>’
‘<TAB>’
     “Indent” the current topic so that it becomes a sub-topic of the
     previous topic (‘gnus-topic-indent’).  If given a prefix,
     “un-indent” the topic instead.

‘M-<TAB>’
     “Un-indent” the current topic so that it becomes a sub-topic of the
     parent of its current parent (‘gnus-topic-unindent’).

   The following two keys can be used to move groups and topics around.
They work like the well-known cut and paste.  ‘C-k’ is like cut and
‘C-y’ is like paste.  Of course, this being Emacs, we use the terms kill
and yank rather than cut and paste.

‘C-k’
     Kill a group or topic (‘gnus-topic-kill-group’).  All groups in the
     topic will be removed along with the topic.

‘C-y’
     Yank the previously killed group or topic
     (‘gnus-topic-yank-group’).  Note that all topics will be yanked
     before all groups.

     So, to move a topic to the beginning of the list of topics, just
     hit ‘C-k’ on it.  This is like the “cut” part of cut and paste.
     Then, move the cursor to the beginning of the buffer (just below
     the “Gnus” topic) and hit ‘C-y’.  This is like the “paste” part of
     cut and paste.  Like I said—E-Z.

     You can use ‘C-k’ and ‘C-y’ on groups as well as on topics.  So you
     can move topics around as well as groups.

   After setting up the topics the way you like them, you might wish to
hide a topic, or to show it again.  That’s why we have the following
key.

‘<RET>’
‘<SPC>’
     Either select a group or fold a topic (‘gnus-topic-select-group’).
     When you perform this command on a group, you’ll enter the group,
     as usual.  When done on a topic line, the topic will be folded (if
     it was visible) or unfolded (if it was folded already).  So it’s
     basically a toggling command on topics.  In addition, if you give a
     numerical prefix, group on that level (and lower) will be
     displayed.

   Now for a list of other commands, in no particular order.

‘T m’
     Move the current group to some other topic
     (‘gnus-topic-move-group’).  This command uses the process/prefix
     convention (*note Process/Prefix::).

‘T j’
     Go to a topic (‘gnus-topic-jump-to-topic’).

‘T c’
     Copy the current group to some other topic
     (‘gnus-topic-copy-group’).  This command uses the process/prefix
     convention (*note Process/Prefix::).

‘T h’
     Hide the current topic (‘gnus-topic-hide-topic’).  If given a
     prefix, hide the topic permanently.

‘T s’
     Show the current topic (‘gnus-topic-show-topic’).  If given a
     prefix, show the topic permanently.

‘T D’
     Remove a group from the current topic (‘gnus-topic-remove-group’).
     This command is mainly useful if you have the same group in several
     topics and wish to remove it from one of the topics.  You may also
     remove a group from all topics, but in that case, Gnus will add it
     to the root topic the next time you start Gnus.  In fact, all new
     groups (which, naturally, don’t belong to any topic) will show up
     in the root topic.

     This command uses the process/prefix convention (*note
     Process/Prefix::).

‘T M’
     Move all groups that match some regular expression to a topic
     (‘gnus-topic-move-matching’).

‘T C’
     Copy all groups that match some regular expression to a topic
     (‘gnus-topic-copy-matching’).

‘T H’
     Toggle hiding empty topics
     (‘gnus-topic-toggle-display-empty-topics’).

‘T #’
     Toggle the process mark for all groups in the current topic
     (‘gnus-topic-mark-topic’).  This command works recursively on
     sub-topics unless given a prefix.
     If ‘gnus-process-mark-toggle’ is ‘nil’, set the process mark for
     the current topic.

‘T M-#’
     Remove the process mark from all groups in the current topic
     (‘gnus-topic-unmark-topic’).  This command works recursively on
     sub-topics unless given a prefix.

‘C-c C-x’
     Run all expirable articles in the current group or topic through
     the expiry process (if any) (‘gnus-topic-expire-articles’).  (*note
     Expiring Mail::).

‘T r’
     Rename a topic (‘gnus-topic-rename’).

‘T <DEL>’
     Delete an empty topic (‘gnus-topic-delete’).

‘A T’
     List all groups that Gnus knows about in a topics-ified way
     (‘gnus-topic-list-active’).

‘T M-n’
     Go to the next topic (‘gnus-topic-goto-next-topic’).

‘T M-p’
     Go to the previous topic (‘gnus-topic-goto-previous-topic’).

‘G p’
     Edit the topic parameters (‘gnus-topic-edit-parameters’).  *Note
     Topic Parameters::.


File: gnus.info,  Node: Topic Variables,  Next: Topic Sorting,  Prev: Topic Commands,  Up: Group Topics

3.16.2 Topic Variables
----------------------

The previous section told you how to tell Gnus which topics to display.
This section explains how to tell Gnus what to display about each topic.

   The topic lines themselves are created according to the
‘gnus-topic-line-format’ variable (*note Formatting Variables::).  Valid
elements are:

‘i’
     Indentation.
‘n’
     Topic name.
‘v’
     Visibility.
‘l’
     Level.
‘g’
     Number of groups in the topic.
‘G’
     Number of groups in the topic and all its subtopics.
‘a’
     Number of unread articles in the topic.
‘A’
     Number of unread articles in the topic and all its subtopics.

   Each sub-topic (and the groups in the sub-topics) will be indented
with ‘gnus-topic-indent-level’ times the topic level number of spaces.
The default is 2.

   ‘gnus-topic-mode-hook’ is called in topic minor mode buffers.

   The ‘gnus-topic-display-empty-topics’ says whether to display even
topics that have no unread articles in them.  The default is ‘t’.

   If ‘gnus-topic-display-predicate’ is non-‘nil’, it should be a
function that says whether the topic is to be displayed or not.  The
function will be called with one parameter (the name of the topic) and
should return non-‘nil’ is the topic is to be displayed.

   For instance, if you don’t even want to be reminded that work exists
outside of office hours, you can gather all the work-related groups into
a topic called ‘"Work"’, and then say something like the following:

     (setq gnus-topic-display-predicate
           (lambda (name)
             (or (not (equal name "Work"))
                 (< 090000
                    (string-to-number (format-time-string "%H%M%S"))
                    170000))))


File: gnus.info,  Node: Topic Sorting,  Next: Topic Topology,  Prev: Topic Variables,  Up: Group Topics

3.16.3 Topic Sorting
--------------------

You can sort the groups in each topic individually with the following
commands:

‘T S a’
     Sort the current topic alphabetically by group name
     (‘gnus-topic-sort-groups-by-alphabet’).

‘T S u’
     Sort the current topic by the number of unread articles
     (‘gnus-topic-sort-groups-by-unread’).

‘T S l’
     Sort the current topic by group level
     (‘gnus-topic-sort-groups-by-level’).

‘T S v’
     Sort the current topic by group score
     (‘gnus-topic-sort-groups-by-score’).  *Note Group Score::.

‘T S r’
     Sort the current topic by group rank
     (‘gnus-topic-sort-groups-by-rank’).  *Note Group Score::.

‘T S m’
     Sort the current topic alphabetically by back end name
     (‘gnus-topic-sort-groups-by-method’).

‘T S e’
     Sort the current topic alphabetically by server name
     (‘gnus-topic-sort-groups-by-server’).

‘T S s’
     Sort the current topic according to the function(s) given by the
     ‘gnus-group-sort-function’ variable (‘gnus-topic-sort-groups’).

   When given a prefix argument, all these commands will sort in reverse
order.  *Note Sorting Groups::, for more information about group
sorting.


File: gnus.info,  Node: Topic Topology,  Next: Topic Parameters,  Prev: Topic Sorting,  Up: Group Topics

3.16.4 Topic Topology
---------------------

So, let’s have a look at an example group buffer:

     Gnus
       Emacs -- I wuw it!
          3: comp.emacs
          2: alt.religion.emacs
         Naughty Emacs
          452: alt.sex.emacs
            0: comp.talk.emacs.recovery
       Misc
          8: comp.binaries.fractals
         13: comp.sources.unix

   So, here we have one top-level topic (‘Gnus’), two topics under that,
and one sub-topic under one of the sub-topics.  (There is always just
one (1) top-level topic).  This topology can be expressed as follows:

     (("Gnus" visible)
      (("Emacs -- I wuw it!" visible)
       (("Naughty Emacs" visible)))
      (("Misc" visible)))

   This is in fact how the variable ‘gnus-topic-topology’ would look for
the display above.  That variable is saved in the ‘.newsrc.eld’ file,
and shouldn’t be messed with manually—unless you really want to.  Since
this variable is read from the ‘.newsrc.eld’ file, setting it in any
other startup files will have no effect.

   This topology shows what topics are sub-topics of what topics
(right), and which topics are visible.  Two settings are currently
allowed—‘visible’ and ‘invisible’.


File: gnus.info,  Node: Topic Parameters,  Prev: Topic Topology,  Up: Group Topics

3.16.5 Topic Parameters
-----------------------

All groups in a topic will inherit group parameters from the parent (and
ancestor) topic parameters.  All valid group parameters are valid topic
parameters (*note Group Parameters::).  When the agent is enabled, all
agent parameters (See Agent Parameters in *note Category Syntax::) are
also valid topic parameters.

   In addition, the following parameters are only valid as topic
parameters:

‘subscribe’
     When subscribing new groups by topic (*note Subscription
     Methods::), the ‘subscribe’ topic parameter says what groups go in
     what topic.  Its value should be a regexp to match the groups that
     should go in that topic.

‘subscribe-level’
     When subscribing new groups by topic (see the ‘subscribe’
     parameter), the group will be subscribed with the level specified
     in the ‘subscribe-level’ instead of
     ‘gnus-level-default-subscribed’.

   Group parameters (of course) override topic parameters, and topic
parameters in sub-topics override topic parameters in super-topics.  You
know.  Normal inheritance rules.  (“Rules” is here a noun, not a verb,
although you may feel free to disagree with me here.)

     Gnus
       Emacs
          3: comp.emacs
          2: alt.religion.emacs
        452: alt.sex.emacs
         Relief
          452: alt.sex.emacs
            0: comp.talk.emacs.recovery
       Misc
          8: comp.binaries.fractals
         13: comp.sources.unix
        452: alt.sex.emacs

   The ‘Emacs’ topic has the topic parameter ‘(score-file .
"emacs.SCORE")’; the ‘Relief’ topic has the topic parameter ‘(score-file
. "relief.SCORE")’; and the ‘Misc’ topic has the topic parameter
‘(score-file . "emacs.SCORE")’.  In addition,
‘alt.religion.emacs’ has the group parameter ‘(score-file .
"religion.SCORE")’.

   Now, when you enter ‘alt.sex.emacs’ in the ‘Relief’ topic, you will
get the ‘relief.SCORE’ home score file.  If you enter the same group in
the ‘Emacs’ topic, you’ll get the ‘emacs.SCORE’ home score file.  If you
enter the group ‘alt.religion.emacs’, you’ll get the ‘religion.SCORE’
home score file.

   This seems rather simple and self-evident, doesn’t it?  Well, yes.
But there are some problems, especially with the ‘total-expiry’
parameter.  Say you have a mail group in two topics; one with
‘total-expiry’ and one without.  What happens when you do ‘M-x
gnus-expire-all-expirable-groups’?  Gnus has no way of telling which one
of these topics you mean to expire articles from, so anything may
happen.  In fact, I hereby declare that it is “undefined” what happens.
You just have to be careful if you do stuff like that.


File: gnus.info,  Node: Non-ASCII Group Names,  Next: Misc Group Stuff,  Prev: Group Topics,  Up: Group Buffer

# /. 3.17 Accessing groups of non-English names
==============================================

There are some news servers that provide groups of which the names are
expressed with their native languages in the world.  For instance, in a
certain news server there are some newsgroups of which the names are
spelled in Chinese, where people are talking in Chinese.  You can, of
course, subscribe to such news groups using Gnus.  Currently Gnus
supports non-ASCII group names not only with the ‘nntp’ back end but
also with the ‘nnml’ back end and the ‘nnrss’ back end.

   Every such group name is encoded by a certain charset in the server
side (in an NNTP server its administrator determines the charset, but
for groups in the other back ends it is determined by you).  Gnus has to
display the decoded ones for you in the group buffer and the article
buffer, and needs to use the encoded ones when communicating with
servers.  However, Gnus doesn’t know what charset is used for each
non-ASCII group name.  The following two variables are just the ones for
telling Gnus what charset should be used for each group:

‘gnus-group-name-charset-method-alist’
     An alist of select methods and charsets.  The default value is
     ‘nil’.  The names of groups in the server specified by that select
     method are all supposed to use the corresponding charset.  For
     example:

          (setq gnus-group-name-charset-method-alist
                '(((nntp "news.com.cn") . cn-gb-2312)))

     Charsets specified for groups with this variable are preferred to
     the ones specified for the same groups with the
     ‘gnus-group-name-charset-group-alist’ variable (see below).

     A select method can be very long, like:

          (nntp "gmane"
                (nntp-address "news.gmane.org")
                (nntp-end-of-line "\n")
                (nntp-open-connection-function
                 nntp-open-via-rlogin-and-telnet)
                (nntp-via-rlogin-command "ssh")
                (nntp-via-rlogin-command-switches
                 ("-C" "-t" "-e" "none"))
                (nntp-via-address ...))

     In that case, you can truncate it into ‘(nntp "gmane")’ in this
     variable.  That is, it is enough to contain only the back end name
     and the server name.

‘gnus-group-name-charset-group-alist’
     An alist of regexp of group name and the charset for group names.
     ‘((".*" . utf-8))’ is the default value if UTF-8 is supported,
     otherwise the default is ‘nil’.  For example:

          (setq gnus-group-name-charset-group-alist
                '(("\\.com\\.cn:" . cn-gb-2312)
                  (".*" . utf-8)))

     Note that this variable is ignored if the match is made with
     ‘gnus-group-name-charset-method-alist’.

   Those two variables are used also to determine the charset for
encoding and decoding non-ASCII group names that are in the back ends
other than ‘nntp’.  It means that it is you who determine it.  If you do
nothing, the charset used for group names in those back ends will all be
‘utf-8’ because of the last element of
‘gnus-group-name-charset-group-alist’.

   There is one more important variable for non-ASCII group names:

‘nnmail-pathname-coding-system’
     The value of this variable should be a coding system or ‘nil’.  The
     default is ‘nil’ in Emacs.

     The ‘nnml’ back end, the ‘nnrss’ back end, the agent, and the cache
     use non-ASCII group names in those files and directories.  This
     variable overrides the value of ‘file-name-coding-system’ which
     specifies the coding system used when encoding and decoding those
     file names and directory names.

     Emacs uses the value of ‘default-file-name-coding-system’ if
     ‘file-name-coding-system’ is ‘nil’ or it is bound to the value of
     ‘nnmail-pathname-coding-system’ which is ‘nil’.

     Normally the value of ‘default-file-name-coding-system’ is
     initialized according to the locale, so you will need to do nothing
     if the value is suitable to encode and decode non-ASCII group
     names.

     The value of this variable (or ‘default-file-name-coding-system’)
     does not necessarily need to be the same value that is determined
     by ‘gnus-group-name-charset-method-alist’ and
     ‘gnus-group-name-charset-group-alist’.

     If ‘default-file-name-coding-system’ or this variable is
     initialized by default to ‘iso-latin-1-unix’ for example, although
     you want to subscribe to the groups spelled in Chinese, that is the
     most typical case where you have to customize
     ‘nnmail-pathname-coding-system’.  The ‘utf-8-unix’ coding system is
     a good candidate for it.  Otherwise, you may change the locale in
     your system so that ‘default-file-name-coding-system’ or this
     variable may be initialized to an appropriate value.

   Note that when you copy or move articles from a non-ASCII group to
another group, the charset used to encode and decode group names should
be the same in both groups.  Otherwise the Newsgroups header will be
displayed incorrectly in the article buffer.


File: gnus.info,  Node: Misc Group Stuff,  Prev: Non-ASCII Group Names,  Up: Group Buffer

# /. 3.18 Misc Group Stuff
=========================

* Menu:

* Scanning New Messages::       Asking Gnus to see whether new messages have arrived.
* Group Information::           Information and help on groups and Gnus.
* Group Timestamp::             Making Gnus keep track of when you last read a group.
* File Commands::               Reading and writing the Gnus files.
* Sieve Commands::              Managing Sieve scripts.

‘v’
     The key ‘v’ is reserved for users.  You can bind it to some command
     or better use it as a prefix key.  For example:

          (define-key gnus-group-mode-map (kbd "v j d")
            (lambda ()
              (interactive)
              (gnus-group-jump-to-group "nndraft:drafts")))

     On keys reserved for users in Emacs and on key bindings in general
     *Note Keymaps: (emacs)Keymaps.

‘^’
     Enter the server buffer (‘gnus-group-enter-server-mode’).  *Note
     Server Buffer::.

‘a’
     Start composing a message (a news by default)
     (‘gnus-group-post-news’).  If given a prefix, post to the group
     under the point.  If the prefix is 1, prompt for a group to post
     to.  Contrary to what the name of this function suggests, the
     prepared article might be a mail instead of a news, if a mail group
     is specified with the prefix argument.  *Note Composing Messages::.

‘m’
     Mail a message somewhere (‘gnus-group-mail’).  If given a prefix,
     use the posting style of the group under the point.  If the prefix
     is 1, prompt for a group name to find the posting style.  *Note
     Composing Messages::.

‘i’
     Start composing a news (‘gnus-group-news’).  If given a prefix,
     post to the group under the point.  If the prefix is 1, prompt for
     group to post to.  *Note Composing Messages::.

     This function actually prepares a news even when using mail groups.
     This is useful for “posting” messages to mail groups without
     actually sending them over the network: they’re just saved directly
     to the group in question.  The corresponding back end must have a
     request-post method for this to work though.

‘G z’

     Compact the group under point (‘gnus-group-compact-group’).
     Currently implemented only in nnml (*note Mail Spool::).  This
     removes gaps between article numbers, hence getting a correct total
     article count.

   Variables for the group buffer:

‘gnus-group-mode-hook’
     is called after the group buffer has been created.

‘gnus-group-prepare-hook’
     is called after the group buffer is generated.  It may be used to
     modify the buffer in some strange, unnatural way.

‘gnus-group-prepared-hook’
     is called as the very last thing after the group buffer has been
     generated.  It may be used to move point around, for instance.

‘gnus-permanently-visible-groups’
     Groups matching this regexp will always be listed in the group
     buffer, whether they are empty or not.


File: gnus.info,  Node: Scanning New Messages,  Next: Group Information,  Up: Misc Group Stuff

3.18.1 Scanning New Messages
----------------------------

‘g’
     Check the server(s) for new articles.  If the numerical prefix is
     used, this command will check only groups of level ARG and lower
     (‘gnus-group-get-new-news’).  If given a non-numerical prefix, this
     command will force a total re-reading of the active file(s) from
     the back end(s).

‘M-g’
     Check whether new articles have arrived in the current group
     (‘gnus-group-get-new-news-this-group’).
     ‘gnus-goto-next-group-when-activating’ says whether this command is
     to move point to the next group or not.  It is ‘t’ by default.

‘C-c M-g’
     Activate absolutely all groups (‘gnus-activate-all-groups’).

‘R’
     Restart Gnus (‘gnus-group-restart’).  This saves the ‘.newsrc’
     file(s), closes the connection to all servers, clears up all
     run-time Gnus variables, and then starts Gnus all over again.

   ‘gnus-get-new-news-hook’ is run just before checking for new news.

   ‘gnus-after-getting-new-news-hook’ is run after checking for new
news.


File: gnus.info,  Node: Group Information,  Next: Group Timestamp,  Prev: Scanning New Messages,  Up: Misc Group Stuff

3.18.2 Group Information
------------------------

‘H d’
‘C-c C-d’
     Describe the current group (‘gnus-group-describe-group’).  If given
     a prefix, force Gnus to re-read the description from the server.

‘M-d’
     Describe all groups (‘gnus-group-describe-all-groups’).  If given a
     prefix, force Gnus to re-read the description file from the server.

‘H v’
‘V’
     Display current Gnus version numbers (‘gnus-version’).

‘?’
     Give a very short help message (‘gnus-group-describe-briefly’).

‘C-c C-i’
     Go to the Gnus info node (‘gnus-info-find-node’).


File: gnus.info,  Node: Group Timestamp,  Next: File Commands,  Prev: Group Information,  Up: Misc Group Stuff

3.18.3 Group Timestamp
----------------------

It can be convenient to let Gnus keep track of when you last read a
group.  To set the ball rolling, you should add
‘gnus-group-set-timestamp’ to ‘gnus-select-group-hook’:

     (add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp)

   After doing this, each time you enter a group, it’ll be recorded.

   This information can be displayed in various ways—the easiest is to
use the ‘%d’ spec in the group line format:

     (setq gnus-group-line-format
           "%M\%S\%p\%P\%5y: %(%-40,40g%) %d\n")

   This will result in lines looking like:

     *        0: mail.ding                                19961002T012943
              0: custom                                   19961002T012713

   As you can see, the date is displayed in compact ISO 8601 format.
This may be a bit too much, so to just display the date, you could say
something like:

     (setq gnus-group-line-format
           "%M\%S\%p\%P\%5y: %(%-40,40g%) %6,6~(cut 2)d\n")

   If you would like greater control of the time format, you can use a
user-defined format spec.  Something like the following should do the
trick:

     (setq gnus-group-line-format
           "%M\%S\%p\%P\%5y: %(%-40,40g%) %ud\n")
     (defun gnus-user-format-function-d (headers)
       (let ((time (gnus-group-timestamp gnus-tmp-group)))
         (if time
             (format-time-string "%b %d  %H:%M" time)
           "")))

   To see what variables are dynamically bound (like ‘gnus-tmp-group’),
you have to look at the source code.  The variable names aren’t
guaranteed to be stable over Gnus versions, either.


File: gnus.info,  Node: File Commands,  Next: Sieve Commands,  Prev: Group Timestamp,  Up: Misc Group Stuff

3.18.4 File Commands
--------------------

‘r’
     Re-read the init file (‘gnus-init-file’, which defaults to
     ‘~/.gnus.el’) (‘gnus-group-read-init-file’).

‘s’
     Save the ‘.newsrc.eld’ file (and ‘.newsrc’ if wanted)
     (‘gnus-group-save-newsrc’).  If given a prefix, force saving the
     file(s) whether Gnus thinks it is necessary or not.


File: gnus.info,  Node: Sieve Commands,  Prev: File Commands,  Up: Misc Group Stuff

3.18.5 Sieve Commands
---------------------

Sieve is a server-side mail filtering language.  In Gnus you can use the
‘sieve’ group parameter (*note Group Parameters::) to specify sieve
rules that should apply to each group.  Gnus provides two commands to
translate all these group parameters into a proper Sieve script that can
be transferred to the server somehow.

   The generated Sieve script is placed in ‘gnus-sieve-file’ (by default
‘~/.sieve’).  The Sieve code that Gnus generate is placed between two
delimiters, ‘gnus-sieve-region-start’ and ‘gnus-sieve-region-end’, so
you may write additional Sieve code outside these delimiters that will
not be removed the next time you regenerate the Sieve script.

   The variable ‘gnus-sieve-crosspost’ controls how the Sieve script is
generated.  If it is non-‘nil’ (the default) articles is placed in all
groups that have matching rules, otherwise the article is only placed in
the group with the first matching rule.  For example, the group
parameter ‘(sieve address "sender" "owner-ding@hpc.uh.edu")’ will
generate the following piece of Sieve code if ‘gnus-sieve-crosspost’ is
‘nil’.  (When ‘gnus-sieve-crosspost’ is non-‘nil’, it looks the same
except that the line containing the call to ‘stop’ is removed.)

     if address "sender" "owner-ding@hpc.uh.edu" {
             fileinto "INBOX.ding";
             stop;
     }

   *Note Emacs Sieve: (sieve)Top.

‘D g’
     Regenerate a Sieve script from the ‘sieve’ group parameters and put
     you into the ‘gnus-sieve-file’ without saving it.

‘D u’
     Regenerates the Gnus managed part of ‘gnus-sieve-file’ using the
     ‘sieve’ group parameters, save the file and upload it to the server
     using the ‘sieveshell’ program.


File: gnus.info,  Node: Summary Buffer,  Next: Article Buffer,  Prev: Group Buffer,  Up: Top

# /. 4 Summary Buffer
********************

A line for each article is displayed in the summary buffer.  You can
move around, read articles, post articles and reply to articles.

   The most common way to a summary buffer is to select a group from the
group buffer (*note Selecting a Group::).

   You can have as many summary buffers open as you wish.

   You can customize the Summary Mode tool bar, see ‘M-x
customize-apropos <RET> gnus-summary-tool-bar’.

   The key ‘v’ is reserved for users.  You can bind it to some command
or better use it as a prefix key.  For example:
     (define-key gnus-summary-mode-map (kbd "v -") "LrS") ;; lower subthread

* Menu:

* Summary Buffer Format::       Deciding how the summary buffer is to look.
* Summary Maneuvering::         Moving around the summary buffer.
* Choosing Articles::           Reading articles.
* Paging the Article::          Scrolling the current article.
* Reply Followup and Post::     Posting articles.
* Delayed Articles::            Send articles at a later time.
* Marking Articles::            Marking articles as read, expirable, etc.
* Limiting::                    You can limit the summary buffer.
* Threading::                   How threads are made.
* Sorting the Summary Buffer::  How articles and threads are sorted.
* Asynchronous Fetching::       Gnus might be able to pre-fetch articles.
* Article Caching::             You may store articles in a cache.
* Persistent Articles::         Making articles expiry-resistant.
* Sticky Articles::             Article buffers that are not reused.
* Article Backlog::             Having already read articles hang around.
* Saving Articles::             Ways of customizing article saving.
* Decoding Articles::           Gnus can treat series of (uu)encoded articles.
* Article Treatment::           The article buffer can be mangled at will.
* MIME Commands::               Doing MIMEy things with the articles.
* Charsets::                    Character set issues.
* Article Commands::            Doing various things with the article buffer.
* Summary Sorting::             Sorting the summary buffer in various ways.
* Finding the Parent::          No child support?  Get the parent.
* Alternative Approaches::      Reading using non-default summaries.
* Tree Display::                A more visual display of threads.
* Mail Group Commands::         Some commands can only be used in mail groups.
* Various Summary Stuff::       What didn’t fit anywhere else.
* Exiting the Summary Buffer::  Returning to the Group buffer,
                                or reselecting the current group.
* Crosspost Handling::          How crossposted articles are dealt with.
* Duplicate Suppression::       An alternative when crosspost handling fails.
* Security::                    Decrypt and Verify.
* Mailing List::                Mailing list minor mode.


File: gnus.info,  Node: Summary Buffer Format,  Next: Summary Maneuvering,  Up: Summary Buffer

# /. 4.1 Summary Buffer Format
=============================

* Menu:

* Summary Buffer Lines::        You can specify how summary lines should look.
* To From Newsgroups::          How to not display your own name.
* Summary Buffer Mode Line::    You can say how the mode line should look.
* Summary Highlighting::        Making the summary buffer all pretty and nice.

Gnus will use the value of the ‘gnus-extract-address-components’
variable as a function for getting the name and address parts of a
‘From’ header.  Two pre-defined functions exist:
‘gnus-extract-address-components’, which is the default, quite fast, and
too simplistic solution; and ‘mail-extract-address-components’, which
works very nicely, but is slower.  The default function will return the
wrong answer in 5% of the cases.  If this is unacceptable to you, use
the other function instead:

     (setq gnus-extract-address-components
           'mail-extract-address-components)

   ‘gnus-summary-same-subject’ is a string indicating that the current
article has the same subject as the previous.  This string will be used
with those specs that require it.  The default is ‘""’.


File: gnus.info,  Node: Summary Buffer Lines,  Next: To From Newsgroups,  Up: Summary Buffer Format

4.1.1 Summary Buffer Lines
--------------------------

You can change the format of the lines in the summary buffer by changing
the ‘gnus-summary-line-format’ variable.  It works along the same lines
as a normal ‘format’ string, with some extensions (*note Formatting
Variables::).

   There should always be a colon or a point position marker on the
line; the cursor always moves to the point position marker or the colon
after performing an operation.  (Of course, Gnus wouldn’t be Gnus if it
wasn’t possible to change this.  Just write a new function
‘gnus-goto-colon’ which does whatever you like with the cursor.)  *Note
Positioning Point::.

   The default string is ‘%U%R%z%I%(%[%4L: %-23,23f%]%) %s\n’.

   The following format specification characters and extended format
specification(s) are understood:

‘N’
     Article number.
‘S’
     Subject string.  List identifiers stripped,
     ‘gnus-list-identifiers’.  *Note Article Hiding::.
‘s’
     Subject if the article is the root of the thread or the previous
     article had a different subject, ‘gnus-summary-same-subject’
     otherwise.  (‘gnus-summary-same-subject’ defaults to ‘""’.)
‘F’
     Full ‘From’ header.
‘n’
     The name (from the ‘From’ header).
‘f’
     The name, ‘To’ header or the ‘Newsgroups’ header (*note To From
     Newsgroups::).
‘a’
     The name (from the ‘From’ header).  This differs from the ‘n’ spec
     in that it uses the function designated by the
     ‘gnus-extract-address-components’ variable, which is slower, but
     may be more thorough.
‘A’
     The address (from the ‘From’ header).  This works the same way as
     the ‘a’ spec.
‘L’
     Number of lines in the article.
‘Z’
     Retrieval Score Value (RSV) of the article; ‘nil’ if not in an
     nnselect group.
‘G’
     Originating group name of the article; ‘nil’ if not in an nnselect
     group.
‘g’
     Short form of the originating group name of the article; ‘nil’ if
     not in an nnselect group.
‘c’
     Number of characters in the article.  This specifier is not
     supported in some methods (like nnfolder).
‘k’
     Pretty-printed version of the number of characters in the article;
     for example, ‘1.2k’ or ‘0.4M’.
‘I’
     Indentation based on thread level (*note Customizing Threading::).
‘B’
     A complex trn-style thread tree, showing response-connecting trace
     lines.  A thread could be drawn like this:

          >
          +->
          | +->
          | | \->
          | |   \->
          | \->
          +->
          \->

     You can customize the appearance with the following options.  Note
     that it is possible to make the thread display look really neat by
     replacing the default ASCII characters with graphic line-drawing
     glyphs.
     ‘gnus-sum-thread-tree-root’
          Used for the root of a thread.  If ‘nil’, use subject instead.
          The default is ‘> ’.

     ‘gnus-sum-thread-tree-false-root’
          Used for the false root of a thread (*note Loose Threads::).
          If ‘nil’, use subject instead.  The default is ‘> ’.

     ‘gnus-sum-thread-tree-single-indent’
          Used for a thread with just one message.  If ‘nil’, use
          subject instead.  The default is ‘’.

     ‘gnus-sum-thread-tree-vertical’
          Used for drawing a vertical line.  The default is ‘| ’.

     ‘gnus-sum-thread-tree-indent’
          Used for indenting.  The default is ‘ ’.

     ‘gnus-sum-thread-tree-leaf-with-other’
          Used for a leaf with brothers.  The default is ‘+-> ’.

     ‘gnus-sum-thread-tree-single-leaf’
          Used for a leaf without brothers.  The default is ‘\-> ’

‘T’
     Nothing if the article is a root and lots of spaces if it isn’t (it
     pushes everything after it off the screen).
‘[’
     Opening bracket, which is normally ‘[’, but can also be ‘<’ for
     adopted articles (*note Customizing Threading::).  This can be
     customized using following settings:

     ‘gnus-sum-opening-bracket’
          Opening bracket for normal (non-adopted) articles.  The
          default is ‘[’.

     ‘gnus-sum-opening-bracket-adopted’
          Opening bracket for adopted articles.  The default is ‘<’.

‘]’
     Closing bracket, which is normally ‘]’, but can also be ‘>’ for
     adopted articles.  This can be customized using following settings:

     ‘gnus-sum-closing-bracket’
          Closing bracket for normal (non-adopted) articles.  The
          default is ‘]’.

     ‘gnus-sum-closing-bracket-adopted’
          Closing bracket for adopted articles.  The default is ‘>’.

‘>’
     One space for each thread level.
‘<’
     Twenty minus thread level spaces.
‘U’
     Unread.  *Note Read Articles::.

‘R’
     This misleadingly named specifier is the “secondary mark”.  This
     mark will say whether the article has been replied to, has been
     cached, or has been saved.  *Note Other Marks::.

‘i’
     Score as a number (*note Scoring::).
‘z’
     Zcore, ‘+’ if above the default level and ‘-’ if below the default
     level.  If the difference between ‘gnus-summary-default-score’ and
     the score is less than ‘gnus-summary-zcore-fuzz’, this spec will
     not be used.
‘V’
     Total thread score.
‘x’
     ‘Xref’.
‘D’
     ‘Date’.
‘d’
     The ‘Date’ in ‘DD-MMM’ format.
‘o’
     The ‘Date’ in YYYYMMDD‘T’HHMMSS format.
‘M’
     ‘Message-ID’.
‘r’
     ‘References’.
‘t’
     Number of articles in the current sub-thread.  Using this spec will
     slow down summary buffer generation somewhat.
‘e’
     An ‘=’ (‘gnus-not-empty-thread-mark’) will be displayed if the
     article has any children.
‘P’
     The line number.
‘O’
     Download mark.
‘*’
     Desired cursor position (instead of after first colon).
‘&user-date;’
     Age sensitive date format.  Various date format is defined in
     ‘gnus-user-date-format-alist’.
‘u’
     User defined specifier.  The next character in the format string
     should be a letter.  Gnus will call the function
     ‘gnus-user-format-function-X’, where X is the letter following
     ‘%u’.  The function will be passed the current header as argument.
     The function should return a string, which will be inserted into
     the summary just like information from any other summary specifier.

   Text between ‘%(’ and ‘%)’ will be highlighted with ‘gnus-mouse-face’
when the mouse point is placed inside the area.  There can only be one
such area.

   The ‘%U’ (status), ‘%R’ (replied) and ‘%z’ (zcore) specs have to be
handled with care.  For reasons of efficiency, Gnus will compute what
column these characters will end up in, and “hard-code” that.  This
means that it is invalid to have these specs after a variable-length
spec.  Well, you might not be arrested, but your summary buffer will
look strange, which is bad enough.

   The smart choice is to have these specs as far to the left as
possible.  (Isn’t that the case with everything, though?  But I
digress.)

   This restriction may disappear in later versions of Gnus.


File: gnus.info,  Node: To From Newsgroups,  Next: Summary Buffer Mode Line,  Prev: Summary Buffer Lines,  Up: Summary Buffer Format

4.1.2 To From Newsgroups
------------------------

In some groups (particularly in archive groups), the ‘From’ header isn’t
very interesting, since all the articles there are written by you.  To
display the information in the ‘To’ or ‘Newsgroups’ headers instead, you
need to decide three things: What information to gather; where to
display it; and when to display it.

  1. The reading of extra header information is controlled by the
     ‘gnus-extra-headers’.  This is a list of header symbols.  For
     instance:

          (setq gnus-extra-headers
                '(To Newsgroups X-Newsreader))

     This will result in Gnus trying to obtain these three headers, and
     storing it in header structures for later easy retrieval.

  2. The value of these extra headers can be accessed via the
     ‘gnus-extra-header’ function.  Here’s a format line spec that will
     access the ‘X-Newsreader’ header:

          "%~(form (gnus-extra-header 'X-Newsreader))@"

  3. The ‘gnus-ignored-from-addresses’ variable says when the ‘%f’
     summary line spec returns the ‘To’, ‘Newsreader’ or ‘From’ header.
     The variable may be a regexp or a predicate function.  If this
     matches the contents of the ‘From’ header, the value of the ‘To’ or
     ‘Newsreader’ headers are used instead.

     To distinguish regular articles from those where the ‘From’ field
     has been swapped, a string is prefixed to the ‘To’ or ‘Newsgroups’
     header in the summary line.  By default the string is ‘-> ’ for
     ‘To’ and ‘=> ’ for ‘Newsgroups’, you can customize these strings
     with ‘gnus-summary-to-prefix’ and ‘gnus-summary-newsgroup-prefix’.

   A related variable is ‘nnmail-extra-headers’, which controls when to
include extra headers when generating overview (NOV) files.  If you have
old overview files, you should regenerate them after changing this
variable, by entering the server buffer using ‘^’, and then ‘g’ on the
appropriate mail server (e.g., nnml) to cause regeneration.

   You also have to instruct Gnus to display the data by changing the
‘%n’ spec to the ‘%f’ spec in the ‘gnus-summary-line-format’ variable.

   In summary, you’d typically put something like the following in
‘~/.gnus.el’:

     (setq gnus-extra-headers
           '(To Newsgroups))
     (setq nnmail-extra-headers gnus-extra-headers)
     (setq gnus-summary-line-format
           "%U%R%z%I%(%[%4L: %-23,23f%]%) %s\n")
     (setq gnus-ignored-from-addresses
           "Your Name Here")

   (The values listed above are the default values in Gnus.  Alter them
to fit your needs.)

   A note for news server administrators, or for users who wish to try
to convince their news server administrator to provide some additional
support:

   The above is mostly useful for mail groups, where you have control
over the NOV files that are created.  However, if you can persuade your
nntp admin to add (in the usual implementation, notably INN):

     Newsgroups:full

   to the end of her ‘overview.fmt’ file, then you can use that just as
you would the extra headers from the mail groups.  Otherwise, you have
to disable fetching headers with ‘XOVER’:

     (setq nntp-nov-is-evil t
           gnus-nov-is-evil t)

   Be aware, though, that this will make entering an NNTP group much,
much slower, so this is not recommended.

   One particular scenario in which it can be desirable to not use
‘XOVER’ is for ‘nnvirtual’ groups in order to support limiting by extra
headers (e.g., by the newsgroup of its component groups).  Because group
parameters are not inherited, a separate select method for the component
groups with the appropriate ‘nov-is-evil’ set as a method variable is
required.


File: gnus.info,  Node: Summary Buffer Mode Line,  Next: Summary Highlighting,  Prev: To From Newsgroups,  Up: Summary Buffer Format

4.1.3 Summary Buffer Mode Line
------------------------------

You can also change the format of the summary mode bar (*note Mode Line
Formatting::).  Set ‘gnus-summary-mode-line-format’ to whatever you
like.  The default is ‘Gnus: %%b [%A] %Z’.

   Here are the elements you can play with:

‘G’
     Group name.
‘p’
     Unprefixed group name.
‘A’
     Current article number.
‘z’
     Current article score.
‘V’
     Gnus version.
‘U’
     Number of unread articles in this group.
‘e’
     Number of unread articles in this group that aren’t displayed in
     the summary buffer.
‘Z’
     A string with the number of unread and unselected articles
     represented either as ‘<%U(+%e) more>’ if there are both unread and
     unselected articles, and just as ‘<%U more>’ if there are just
     unread articles and no unselected ones.
‘g’
     Shortish group name.  For instance, ‘rec.arts.anime’ will be
     shortened to ‘r.a.anime’.
‘S’
     Subject of the current article.
‘u’
     User-defined spec (*note User-Defined Specs::).
‘s’
     Name of the current score file (*note Scoring::).
‘d’
     Number of dormant articles (*note Unread Articles::).
‘t’
     Number of ticked articles (*note Unread Articles::).
‘r’
     Number of articles that have been marked as read in this session.
‘E’
     Number of articles expunged by the score files.


File: gnus.info,  Node: Summary Highlighting,  Prev: Summary Buffer Mode Line,  Up: Summary Buffer Format

4.1.4 Summary Highlighting
--------------------------

‘gnus-visual-mark-article-hook’
     This hook is run after selecting an article.  It is meant to be
     used for highlighting the article in some way.  It is not run if
     ‘gnus-visual’ is ‘nil’.

‘gnus-summary-update-hook’
     This hook is called when a summary line is changed.  It is not run
     if ‘gnus-visual’ is ‘nil’.

‘gnus-summary-selected-face’
     This is the face (or “font” as some people call it) used to
     highlight the current article in the summary buffer.

‘gnus-summary-highlight’
     Summary lines are highlighted according to this variable, which is
     a list where the elements are of the format ‘(FORM . FACE)’.  If
     you would, for instance, like ticked articles to be italic and
     high-scored articles to be bold, you could set this variable to
     something like
          (((eq mark gnus-ticked-mark) . italic)
           ((> score default) . bold))
     As you may have guessed, if FORM returns a non-‘nil’ value, FACE
     will be applied to the line.


File: gnus.info,  Node: Summary Maneuvering,  Next: Choosing Articles,  Prev: Summary Buffer Format,  Up: Summary Buffer

# /. 4.2 Summary Maneuvering
===========================

All the straight movement commands understand the numeric prefix and
behave pretty much as you’d expect.

   None of these commands select articles.

‘G M-n’
‘M-n’
     Go to the next summary line of an unread article
     (‘gnus-summary-next-unread-subject’).

‘G M-p’
‘M-p’
     Go to the previous summary line of an unread article
     (‘gnus-summary-prev-unread-subject’).

‘G g’
     Ask for an article number and then go to the summary line of that
     article without displaying the article
     (‘gnus-summary-goto-subject’).

   If Gnus asks you to press a key to confirm going to the next group,
you can use the ‘C-n’ and ‘C-p’ keys to move around the group buffer,
searching for the next group to read without actually returning to the
group buffer.

   Variables related to summary movement:

‘gnus-auto-select-next’
     If you issue one of the movement commands (like ‘n’) and there are
     no more unread articles after the current one, Gnus will offer to
     go to the next group.  If this variable is ‘t’ and the next group
     is empty, Gnus will exit summary mode and return to the group
     buffer.  If this variable is neither ‘t’ nor ‘nil’, Gnus will
     select the next group with unread articles.  As a special case, if
     this variable is ‘quietly’, Gnus will select the next group without
     asking for confirmation.  If this variable is ‘almost-quietly’, the
     same will happen only if you are located on the last article in the
     group.  Finally, if this variable is ‘slightly-quietly’, the ‘Z n’
     command will go to the next group without confirmation.  Also *note
     Group Levels::.

‘gnus-auto-select-same’
     If non-‘nil’, all the movement commands will try to go to the next
     article with the same subject as the current.  (“Same” here might
     mean “roughly equal”.  See ‘gnus-summary-gather-subject-limit’ for
     details (*note Customizing Threading::).)  If there are no more
     articles with the same subject, go to the first unread article.

     This variable is not particularly useful if you use a threaded
     display.

‘gnus-paging-select-next’
     Control whether to select the next/previous article when paging
     (with commands like ‘SPC’ or ‘DEL’).  If non-‘nil’, select the next
     article when reaching the end of the article (or the previous
     article when paging backwards).

     If ‘nil’, don’t do anything at the end/start of the articles.

‘gnus-summary-check-current’
     If non-‘nil’, all the “unread” movement commands will not proceed
     to the next (or previous) article if the current article is unread.
     Instead, they will choose the current article.

‘gnus-auto-center-summary’
     If non-‘nil’, Gnus will keep the point in the summary buffer
     centered at all times.  This makes things quite tidy, but if you
     have a slow network connection, or simply do not like this
     un-Emacsism, you can set this variable to ‘nil’ to get the normal
     Emacs scrolling action.  This will also inhibit horizontal
     re-centering of the summary buffer, which might make it more
     inconvenient to read extremely long threads.

     This variable can also be a number.  In that case, center the
     window at the given number of lines from the top.

‘gnus-summary-stop-at-end-of-message’
     If non-‘nil’, don’t go to the next article when hitting ‘<SPC>’,
     and you’re at the end of the article.


File: gnus.info,  Node: Choosing Articles,  Next: Paging the Article,  Prev: Summary Maneuvering,  Up: Summary Buffer

# /. 4.3 Choosing Articles
=========================

* Menu:

* Choosing Commands::           Commands for choosing articles.
* Choosing Variables::          Variables that influence these commands.


File: gnus.info,  Node: Choosing Commands,  Next: Choosing Variables,  Up: Choosing Articles

4.3.1 Choosing Commands
-----------------------

None of the following movement commands understand the numeric prefix,
and they all select and display an article.

   If you want to fetch new articles or redisplay the group, see *note
Exiting the Summary Buffer::.

‘<SPC>’
     Select the current article, or, if that one’s read already, the
     next unread article (‘gnus-summary-next-page’).

     If you have an article window open already and you press ‘<SPC>’
     again, the article will be scrolled.  This lets you conveniently
     ‘<SPC>’ through an entire newsgroup.  *Note Paging the Article::.

‘G n’
‘n’
     Go to next unread article (‘gnus-summary-next-unread-article’).

‘G p’
‘p’
     Go to previous unread article (‘gnus-summary-prev-unread-article’).

‘G N’
‘N’
     Go to the next article (‘gnus-summary-next-article’).

‘G P’
‘P’
     Go to the previous article (‘gnus-summary-prev-article’).

‘G u’
‘]’
     Go to the next unseen article (‘gnus-summary-next-unseen-article’).

‘G U’
‘[’
     Go to the previous unseen article
     (‘gnus-summary-prev-unseen-article’).

‘G C-n’
     Go to the next article with the same subject
     (‘gnus-summary-next-same-subject’).

‘G C-p’
     Go to the previous article with the same subject
     (‘gnus-summary-prev-same-subject’).

‘G f’
‘.’
     Go to the first unread article
     (‘gnus-summary-first-unread-article’).

‘G b’
‘,’
     Go to the unread article with the highest score
     (‘gnus-summary-best-unread-article’).  If given a prefix argument,
     go to the first unread article that has a score over the default
     score.

‘G l’
‘l’
     Go to the previous article read (‘gnus-summary-goto-last-article’).

‘G o’
     Pop an article off the summary history and go to this article
     (‘gnus-summary-pop-article’).  This command differs from the
     command above in that you can pop as many previous articles off the
     history as you like, while ‘l’ toggles the two last read articles.
     For a somewhat related issue (if you use these commands a lot),
     *note Article Backlog::.

‘G j’
‘j’
     Ask for an article number or ‘Message-ID’, and then go to that
     article (‘gnus-summary-goto-article’).


File: gnus.info,  Node: Choosing Variables,  Prev: Choosing Commands,  Up: Choosing Articles

4.3.2 Choosing Variables
------------------------

Some variables relevant for moving and selecting articles:

‘gnus-auto-extend-newsgroup’
     All the movement commands will try to go to the previous (or next)
     article, even if that article isn’t displayed in the Summary buffer
     if this variable is non-‘nil’.  Gnus will then fetch the article
     from the server and display it in the article buffer.

‘gnus-select-article-hook’
     This hook is called whenever an article is selected.  The default
     is ‘nil’.  If you would like each article to be saved in the Agent
     as you read it, putting ‘gnus-agent-fetch-selected-article’ on this
     hook will do so.

‘gnus-mark-article-hook’
     This hook is called whenever an article is selected.  It is
     intended to be used for marking articles as read.  The default
     value is ‘gnus-summary-mark-read-and-unread-as-read’, and will
     change the mark of almost any article you read to ‘gnus-read-mark’.
     The only articles not affected by this function are ticked,
     dormant, and expirable articles.  If you’d instead like to just
     have unread articles marked as read, you can use
     ‘gnus-summary-mark-unread-as-read’ instead.  It will leave marks
     like ‘gnus-low-score-mark’, ‘gnus-del-mark’ (and so on) alone.


File: gnus.info,  Node: Paging the Article,  Next: Reply Followup and Post,  Prev: Choosing Articles,  Up: Summary Buffer

# /. 4.4 Scrolling the Article
=============================

‘<SPC>’
     Pressing ‘<SPC>’ will scroll the current article forward one page,
     or, if you have come to the end of the current article, will choose
     the next article (‘gnus-summary-next-page’).

     If ‘gnus-article-skip-boring’ is non-‘nil’ and the rest of the
     article consists only of citations and signature, then it will be
     skipped; the next article will be shown instead.  You can customize
     what is considered uninteresting with ‘gnus-article-boring-faces’.
     You can manually view the article’s pages, no matter how boring,
     using ‘C-M-v’.

‘<DEL>’
     Scroll the current article back one page
     (‘gnus-summary-prev-page’).

‘<RET>’
     Scroll the current article one line forward
     (‘gnus-summary-scroll-up’).

‘M-<RET>’
     Scroll the current article one line backward
     (‘gnus-summary-scroll-down’).

‘A g’
‘g’
     (Re)fetch the current article (‘gnus-summary-show-article’).  If
     given a prefix, show a completely “raw” article, just the way it
     came from the server.  If given a prefix twice (i.e., ‘C-u C-u
     g'’), fetch the current article, but don’t run any of the article
     treatment functions.

     If given a numerical prefix, you can do semi-manual charset stuff.
     ‘C-u 0 g cn-gb-2312 <RET>’ will decode the message as if it were
     encoded in the ‘cn-gb-2312’ charset.  If you have

          (setq gnus-summary-show-article-charset-alist
                '((1 . cn-gb-2312)
                  (2 . big5)))

     then you can say ‘C-u 1 g’ to get the same effect.

‘A <’
‘<’
     Scroll to the beginning of the article
     (‘gnus-summary-beginning-of-article’).

‘A >’
‘>’
     Scroll to the end of the article (‘gnus-summary-end-of-article’).

‘A s’
‘s’
     Perform an isearch in the article buffer
     (‘gnus-summary-isearch-article’).

‘h’
     Select the article buffer (‘gnus-summary-select-article-buffer’).


File: gnus.info,  Node: Reply Followup and Post,  Next: Delayed Articles,  Prev: Paging the Article,  Up: Summary Buffer

# /. 4.5 Reply, Followup and Post
================================

* Menu:

* Summary Mail Commands::       Sending mail.
* Summary Post Commands::       Sending news.
* Summary Message Commands::    Other Message-related commands.
* Canceling and Superseding::


File: gnus.info,  Node: Summary Mail Commands,  Next: Summary Post Commands,  Up: Reply Followup and Post

4.5.1 Summary Mail Commands
---------------------------

Commands for composing a mail message:

‘S r’
‘r’
     Mail a reply to the author of the current article
     (‘gnus-summary-reply’).

‘S R’
‘R’
     Mail a reply to the author of the current article and include the
     original message (‘gnus-summary-reply-with-original’).  This
     command uses the process/prefix convention.

‘S w’
     Mail a wide reply to the author of the current article
     (‘gnus-summary-wide-reply’).  A “wide reply” is a reply that goes
     out to all people listed in the ‘To’, ‘From’ (or ‘Reply-To’) and
     ‘Cc’ headers.  If ‘Mail-Followup-To’ is present, that’s used
     instead.

‘S W’
     Mail a wide reply to the current article and include the original
     message (‘gnus-summary-wide-reply-with-original’).  This command
     uses the process/prefix convention, but only uses the headers from
     the first article to determine the recipients.

‘S L’
     When replying to a message from a mailing list, send a reply to
     that message to the mailing list, and include the original message
     (‘gnus-summary-reply-to-list-with-original’).

‘S v’
     Mail a very wide reply to the author of the current article
     (‘gnus-summary-wide-reply’).  A “very wide reply” is a reply that
     goes out to all people listed in the ‘To’, ‘From’ (or ‘Reply-To’)
     and ‘Cc’ headers in all the process/prefixed articles.  This
     command uses the process/prefix convention.

‘S V’
     Mail a very wide reply to the author of the current article and
     include the original message
     (‘gnus-summary-very-wide-reply-with-original’).  This command uses
     the process/prefix convention.

‘S B r’
     Mail a reply to the author of the current article but ignore the
     ‘Reply-To’ field (‘gnus-summary-reply-broken-reply-to’).  If you
     need this because a mailing list incorrectly sets a ‘Reply-To’
     header pointing to the list, you probably want to set the
     ‘broken-reply-to’ group parameter instead, so things will work
     correctly.  *Note Group Parameters::.

‘S B R’
     Mail a reply to the author of the current article and include the
     original message but ignore the ‘Reply-To’ field
     (‘gnus-summary-reply-broken-reply-to-with-original’).

‘S o m’
‘C-c C-f’
     Forward the current article to some other person
     (‘gnus-summary-mail-forward’).  If no prefix is given, the message
     is forwarded according to the value of (‘message-forward-as-mime’)
     and (‘message-forward-show-mml’); if the prefix is 1, decode the
     message and forward directly inline; if the prefix is 2, forward
     message as an rfc822 MIME section; if the prefix is 3, decode
     message and forward as an rfc822 MIME section; if the prefix is 4,
     forward message directly inline; otherwise, the message is
     forwarded as no prefix given but use the flipped value of
     (‘message-forward-as-mime’).  By default, the forwarded message is
     inlined into the mail.

‘S m’
‘m’
     Prepare a mail (‘gnus-summary-mail-other-window’).  By default, use
     the posting style of the current group.  If given a prefix, disable
     that.  If the prefix is 1, prompt for a group name to find the
     posting style.

‘S i’
     Prepare a news (‘gnus-summary-news-other-window’).  By default,
     post to the current group.  If given a prefix, disable that.  If
     the prefix is 1, prompt for a group to post to.

     This function actually prepares a news even when using mail groups.
     This is useful for “posting” messages to mail groups without
     actually sending them over the network: they’re just saved directly
     to the group in question.  The corresponding back end must have a
     request-post method for this to work though.

‘S D b’
     If you have sent a mail, but the mail was bounced back to you for
     some reason (wrong address, transient failure), you can use this
     command to resend that bounced mail
     (‘gnus-summary-resend-bounced-mail’).  You will be popped into a
     mail buffer where you can edit the headers before sending the mail
     off again.  If you give a prefix to this command, and the bounced
     mail is a reply to some other mail, Gnus will try to fetch that
     mail and display it for easy perusal of its headers.  This might
     very well fail, though.

‘S D r’
     Not to be confused with the previous command,
     ‘gnus-summary-resend-message’ will prompt you for an address to
     send the current message off to, and then send it to that place.
     The headers of the message won’t be altered—but lots of headers
     that say ‘Resent-To’, ‘Resent-From’ and so on will be added.  This
     means that you actually send a mail to someone that has a ‘To’
     header that (probably) points to yourself.  This will confuse
     people.  So, natcherly you’ll only do that if you’re really eVIl.

     This command is mainly used if you have several accounts and want
     to ship a mail to a different account of yours.  (If you’re both
     ‘root’ and ‘postmaster’ and get a mail for ‘postmaster’ to the
     ‘root’ account, you may want to resend it to ‘postmaster’.  Ordnung
     muss sein!

     This command understands the process/prefix convention (*note
     Process/Prefix::).

‘S D e’

     Like the previous command, but will allow you to edit the message
     as if it were a new message before resending.

‘S O m’
     Digest the current series (*note Decoding Articles::) and forward
     the result using mail (‘gnus-uu-digest-mail-forward’).  This
     command uses the process/prefix convention (*note
     Process/Prefix::).

‘S M-c’
     Send a complaint about excessive crossposting to the author of the
     current article (‘gnus-summary-mail-crosspost-complaint’).

     This command is provided as a way to fight back against the current
     crossposting pandemic that’s sweeping Usenet.  It will compose a
     reply using the ‘gnus-crosspost-complaint’ variable as a preamble.
     This command understands the process/prefix convention (*note
     Process/Prefix::) and will prompt you before sending each mail.

   Also *Note Header Commands: (message)Header Commands, for more
information.


File: gnus.info,  Node: Summary Post Commands,  Next: Summary Message Commands,  Prev: Summary Mail Commands,  Up: Reply Followup and Post

4.5.2 Summary Post Commands
---------------------------

Commands for posting a news article:

‘S p’
‘a’
     Prepare for posting an article (‘gnus-summary-post-news’).  By
     default, post to the current group.  If given a prefix, disable
     that.  If the prefix is 1, prompt for another group instead.

‘S f’
‘f’
     Post a followup to the current article (‘gnus-summary-followup’).

‘S F’
‘F’
     Post a followup to the current article and include the original
     message (‘gnus-summary-followup-with-original’).  This command uses
     the process/prefix convention.

‘S n’
     Post a followup to the current article via news, even if you got
     the message through mail (‘gnus-summary-followup-to-mail’).

‘S N’
     Post a followup to the current article via news, even if you got
     the message through mail and include the original message
     (‘gnus-summary-followup-to-mail-with-original’).  This command uses
     the process/prefix convention.

‘S o p’
     Forward the current article to a newsgroup
     (‘gnus-summary-post-forward’).  If no prefix is given, the message
     is forwarded according to the value of (‘message-forward-as-mime’)
     and (‘message-forward-show-mml’); if the prefix is 1, decode the
     message and forward directly inline; if the prefix is 2, forward
     message as an rfc822 MIME section; if the prefix is 3, decode
     message and forward as an rfc822 MIME section; if the prefix is 4,
     forward message directly inline; otherwise, the message is
     forwarded as no prefix given but use the flipped value of
     (‘message-forward-as-mime’).  By default, the message is decoded
     and forwarded as an rfc822 MIME section.

‘S O p’
     Digest the current series and forward the result to a newsgroup
     (‘gnus-uu-digest-post-forward’).  This command uses the
     process/prefix convention.

‘S u’
     Uuencode a file, split it into parts, and post it as a series
     (‘gnus-uu-post-news’).  (*note Uuencoding and Posting::).

   Also *Note Header Commands: (message)Header Commands, for more
information.


File: gnus.info,  Node: Summary Message Commands,  Next: Canceling and Superseding,  Prev: Summary Post Commands,  Up: Reply Followup and Post

4.5.3 Summary Message Commands
------------------------------

‘S y’
     Yank the current article into an already existing Message
     composition buffer (‘gnus-summary-yank-message’).  This command
     prompts for what message buffer you want to yank into, and
     understands the process/prefix convention (*note Process/Prefix::).

‘S A’
     Attach the current article into an already existing Message
     composition buffer (‘gnus-summary-attach-message’).  If no such
     buffer exists, a new one is created.  This command prompts for what
     message buffer you want to yank into, and understands the
     process/prefix convention (*note Process/Prefix::).


File: gnus.info,  Node: Canceling and Superseding,  Prev: Summary Message Commands,  Up: Reply Followup and Post

4.5.4 Canceling Articles
------------------------

Have you ever written something, and then decided that you really,
really, really wish you hadn’t posted that?

   Well, you can’t cancel mail, but you can cancel posts.

   Find the article you wish to cancel (you can only cancel your own
articles, so don’t try any funny stuff).  Then press ‘C’ or ‘S c’
(‘gnus-summary-cancel-article’).  Your article will be canceled—machines
all over the world will be deleting your article.  This command uses the
process/prefix convention (*note Process/Prefix::).

   Be aware, however, that not all sites honor cancels, so your article
may live on here and there, while most sites will delete the article in
question.

   Gnus will use the “current” select method when canceling.  If you
want to use the standard posting method, use the ‘a’ symbolic prefix
(*note Symbolic Prefixes::).

   Gnus ensures that only you can cancel your own messages using a
‘Cancel-Lock’ header (*note Canceling News: (message)Canceling News.).

   If you discover that you have made some mistakes and want to do some
corrections, you can post a “superseding” article that will replace your
original article.

   Go to the original article and press ‘S s’
(‘gnus-summary-supersede-article’).  You will be put in a buffer where
you can edit the article all you want before sending it off the usual
way.

   The same goes for superseding as for canceling, only more so: Some
sites do not honor superseding.  On those sites, it will appear that you
have posted almost the same article twice.

   If you have just posted the article, and change your mind right away,
there is a trick you can use to cancel/supersede the article without
waiting for the article to appear on your site first.  You simply return
to the post buffer (which is called ‘*sent ...*’).  There you will find
the article you just posted, with all the headers intact.  Change the
‘Message-ID’ header to a ‘Cancel’ or ‘Supersedes’ header by substituting
one of those words for the word ‘Message-ID’.  Then just press ‘C-c C-c’
to send the article as you would do normally.  The previous article will
be canceled/superseded.

   Just remember, kids: There is no ’c’ in ’supersede’.


File: gnus.info,  Node: Delayed Articles,  Next: Marking Articles,  Prev: Reply Followup and Post,  Up: Summary Buffer

# /. 4.6 Delayed Articles
========================

Sometimes, you might wish to delay the sending of a message.  For
example, you might wish to arrange for a message to turn up just in time
to remind your about the birthday of your Significant Other.  For this,
there is the ‘gnus-delay’ package.  Setup is simple:

     (gnus-delay-initialize)

   Normally, to send a message you use the ‘C-c C-c’ command from
Message mode.  To delay a message, use ‘C-c C-j’ (‘gnus-delay-article’)
instead.  This will ask you for how long the message should be delayed.
Possible answers are:

   • A time span.  Consists of an integer and a letter.  For example,
     ‘42d’ means to delay for 42 days.  Available letters are ‘m’
     (minutes), ‘h’ (hours), ‘d’ (days), ‘w’ (weeks), ‘M’ (months) and
     ‘Y’ (years).

   • A specific date.  Looks like ‘YYYY-MM-DD’.  The message will be
     delayed until that day, at a specific time (eight o’clock by
     default).  See also ‘gnus-delay-default-hour’.

   • A specific time of day.  Given in ‘hh:mm’ format, 24h, no am/pm
     stuff.  The deadline will be at that time today, except if that
     time has already passed, then it’s at the given time tomorrow.  So
     if it’s ten o’clock in the morning and you specify ‘11:15’, then
     the deadline is one hour and fifteen minutes hence.  But if you
     specify ‘9:20’, that means a time tomorrow.

   The action of the ‘gnus-delay-article’ command is influenced by a
couple of variables:

‘gnus-delay-default-hour’
     When you specify a specific date, the message will be due on that
     hour on the given date.  Possible values are integers 0 through 23.

‘gnus-delay-default-delay’
     This is a string and gives the default delay.  It can be of any of
     the formats described above.

‘gnus-delay-group’
     Delayed articles will be kept in this group on the drafts server
     until they are due.  You probably don’t need to change this.  The
     default value is ‘"delayed"’.

‘gnus-delay-header’
     The deadline for each article will be stored in a header.  This
     variable is a string and gives the header name.  You probably don’t
     need to change this.  The default value is ‘"X-Gnus-Delayed"’.

   The way delaying works is like this: when you use the
‘gnus-delay-article’ command, you give a certain delay.  Gnus calculates
the deadline of the message and stores it in the ‘X-Gnus-Delayed’ header
and puts the message in the ‘nndraft:delayed’ group.

   And whenever you get new news, Gnus looks through the group for
articles which are due and sends them.  It uses the
‘gnus-delay-send-queue’ function for this.  By default, this function is
added to the hook ‘gnus-get-new-news-hook’.  But of course, you can
change this.  Maybe you want to use the demon to send drafts?  Just tell
the demon to execute the ‘gnus-delay-send-queue’ function.

‘gnus-delay-initialize’
     By default, this function installs ‘gnus-delay-send-queue’ in
     ‘gnus-get-new-news-hook’.  But it accepts the optional second
     argument ‘no-check’.  If it is non-‘nil’, ‘gnus-get-new-news-hook’
     is not changed.  The optional first argument is ignored.

     For example, ‘(gnus-delay-initialize nil t)’ means to do nothing.
     Presumably, you want to use the demon for sending due delayed
     articles.  Just don’t forget to set that up :-)

   When delaying an article with ‘C-c C-j’, Message mode will
automatically add a ‘"Date"’ header with the current time.  In many
cases you probably want the ‘"Date"’ header to reflect the time the
message is sent instead.  To do this, you have to delete ‘Date’ from
‘message-draft-headers’.


File: gnus.info,  Node: Marking Articles,  Next: Limiting,  Prev: Delayed Articles,  Up: Summary Buffer

# /. 4.7 Marking Articles
========================

There are several marks you can set on an article.

   You have marks that decide the “readedness” (whoo, neato-keano
neologism ohoy!)  of the article.  Alphabetic marks generally mean
“read”, while non-alphabetic characters generally mean “unread”.

   In addition, you also have marks that do not affect readedness.

   There’s a plethora of commands for manipulating these marks.

* Menu:

* Unread Articles::             Marks for unread articles.
* Read Articles::               Marks for read articles.
* Other Marks::                 Marks that do not affect readedness.
* Setting Marks::               How to set and remove marks.
* Generic Marking Commands::    How to customize the marking.
* Setting Process Marks::       How to mark articles for later processing.


File: gnus.info,  Node: Unread Articles,  Next: Read Articles,  Up: Marking Articles

4.7.1 Unread Articles
---------------------

The following marks mark articles as (kinda) unread, in one form or
other.

‘!’
     Marked as ticked (‘gnus-ticked-mark’).

     “Ticked articles” are articles that will remain visible always.  If
     you see an article that you find interesting, or you want to put
     off reading it, or replying to it, until sometime later, you’d
     typically tick it.  However, articles can be expired (from news
     servers by the news server software, Gnus itself never expires
     ticked messages), so if you want to keep an article forever, you’ll
     have to make it persistent (*note Persistent Articles::).

‘?’
     Marked as dormant (‘gnus-dormant-mark’).

     “Dormant articles” will only appear in the summary buffer if there
     are followups to it.  If you want to see them even if they don’t
     have followups, you can use the ‘/ D’ command (*note Limiting::).
     Otherwise (except for the visibility issue), they are just like
     ticked messages.

‘<SPC>’
     Marked as unread (‘gnus-unread-mark’).

     “Unread articles” are articles that haven’t been read at all yet.


File: gnus.info,  Node: Read Articles,  Next: Other Marks,  Prev: Unread Articles,  Up: Marking Articles

4.7.2 Read Articles
-------------------

All the following marks mark articles as read.

‘r’
     These are articles that the user has marked as read with the ‘d’
     command manually, more or less (‘gnus-del-mark’).

‘R’
     Articles that have actually been read (‘gnus-read-mark’).

‘O’
     Articles that were marked as read in previous sessions and are now
     “old” (‘gnus-ancient-mark’).

‘K’
     Marked as killed (‘gnus-killed-mark’).

‘X’
     Marked as killed by kill files (‘gnus-kill-file-mark’).

‘Y’
     Marked as read by having too low a score (‘gnus-low-score-mark’).

‘C’
     Marked as read by a catchup (‘gnus-catchup-mark’).

‘G’
     Canceled article (‘gnus-canceled-mark’)

‘Q’
     Sparsely reffed article (‘gnus-sparse-mark’).  *Note Customizing
     Threading::.

‘M’
     Article marked as read by duplicate suppression
     (‘gnus-duplicate-mark’).  *Note Duplicate Suppression::.

   All these marks just mean that the article is marked as read, really.
They are interpreted differently when doing adaptive scoring, though.

   One more special mark, though:

‘E’
     Marked as expirable (‘gnus-expirable-mark’).

     Marking articles as “expirable” (or have them marked as such
     automatically) doesn’t make much sense in normal groups—a user
     doesn’t control expiring of news articles, but in mail groups, for
     instance, articles marked as “expirable” can be deleted by Gnus at
     any time.


File: gnus.info,  Node: Other Marks,  Next: Setting Marks,  Prev: Read Articles,  Up: Marking Articles

4.7.3 Other Marks
-----------------

There are some marks that have nothing to do with whether the article is
read or not.

   • You can set a bookmark in the current article.  Say you are reading
     a long thesis on cats’ urinary tracts, and have to go home for
     dinner before you’ve finished reading the thesis.  You can then set
     a bookmark in the article, and Gnus will jump to this bookmark the
     next time it encounters the article.  *Note Setting Marks::.

   • All articles that you have replied to or made a followup to (i.e.,
     have answered) will be marked with an ‘A’ in the second column
     (‘gnus-replied-mark’).

   • All articles that you have forwarded will be marked with an ‘F’ in
     the second column (‘gnus-forwarded-mark’).

   • Articles stored in the article cache will be marked with an ‘*’ in
     the second column (‘gnus-cached-mark’).  *Note Article Caching::.

   • Articles “saved” (in some manner or other; not necessarily
     religiously) are marked with an ‘S’ in the second column
     (‘gnus-saved-mark’).

   • Articles that haven’t been seen before in Gnus by the user are
     marked with a ‘.’ in the second column (‘gnus-unseen-mark’).

   • When using the Gnus agent (*note Agent Basics::), articles may be
     downloaded for unplugged (offline) viewing.  If you are using the
     ‘%O’ spec, these articles get the ‘+’ mark in that spec.  (The
     variable ‘gnus-downloaded-mark’ controls which character to use.)

   • When using the Gnus agent (*note Agent Basics::), some articles
     might not have been downloaded.  Such articles cannot be viewed
     while you are unplugged (offline).  If you are using the ‘%O’ spec,
     these articles get the ‘-’ mark in that spec.  (The variable
     ‘gnus-undownloaded-mark’ controls which character to use.)

   • The Gnus agent (*note Agent Basics::) downloads some articles
     automatically, but it is also possible to explicitly mark articles
     for download, even if they would not be downloaded automatically.
     Such explicitly-marked articles get the ‘%’ mark in the first
     column.  (The variable ‘gnus-downloadable-mark’ controls which
     character to use.)

   • If the ‘%e’ spec is used, the presence of threads or not will be
     marked with ‘gnus-not-empty-thread-mark’ and
     ‘gnus-empty-thread-mark’ in the third column, respectively.

   • Finally we have the “process mark” (‘gnus-process-mark’).  A
     variety of commands react to the presence of the process mark.  For
     instance, ‘X u’ (‘gnus-uu-decode-uu’) will uudecode and view all
     articles that have been marked with the process mark.  Articles
     marked with the process mark have a ‘#’ in the second column.

   You might have noticed that most of these “non-readedness” marks
appear in the second column by default.  So if you have a cached, saved,
replied article that you have process-marked, what will that look like?

   Nothing much.  The precedence rules go as follows: process -> cache
-> replied -> saved.  So if the article is in the cache and is replied,
you’ll only see the cache mark and not the replied mark.


File: gnus.info,  Node: Setting Marks,  Next: Generic Marking Commands,  Prev: Other Marks,  Up: Marking Articles

4.7.4 Setting Marks
-------------------

All the marking commands understand the numeric prefix.

‘M c’
‘M-u’
     Clear all readedness-marks from the current article
     (‘gnus-summary-clear-mark-forward’).  In other words, mark the
     article as unread.

‘M t’
‘!’
     Tick the current article (‘gnus-summary-tick-article-forward’).
     *Note Article Caching::.

‘M ?’
‘?’
     Mark the current article as dormant
     (‘gnus-summary-mark-as-dormant’).  *Note Article Caching::.

‘M d’
‘d’
     Mark the current article as read
     (‘gnus-summary-mark-as-read-forward’).

‘D’
     Mark the current article as read and move point to the previous
     line (‘gnus-summary-mark-as-read-backward’).

‘M k’
‘k’
     Mark all articles that have the same subject as the current one as
     read, and then select the next unread article
     (‘gnus-summary-kill-same-subject-and-select’).

‘M K’
‘C-k’
     Mark all articles that have the same subject as the current one as
     read (‘gnus-summary-kill-same-subject’).

‘M C’
     Mark all unread articles as read (‘gnus-summary-catchup’).

‘M C-c’
     Mark all articles in the group as read—even the ticked and dormant
     articles (‘gnus-summary-catchup-all’).

‘M H’
     Catchup the current group to point (before the point)
     (‘gnus-summary-catchup-to-here’).

‘M h’
     Catchup the current group from point (after the point)
     (‘gnus-summary-catchup-from-here’).

‘C-w’
     Mark all articles between point and mark as read
     (‘gnus-summary-mark-region-as-read’).

‘M V k’
     Kill all articles with scores below the default score (or below the
     numeric prefix) (‘gnus-summary-kill-below’).

‘M e’
‘E’
     Mark the current article as expirable
     (‘gnus-summary-mark-as-expirable’).

‘M b’
     Set a bookmark in the current article
     (‘gnus-summary-set-bookmark’).

‘M B’
     Remove the bookmark from the current article
     (‘gnus-summary-remove-bookmark’).

‘M V c’
     Clear all marks from articles with scores over the default score
     (or over the numeric prefix) (‘gnus-summary-clear-above’).

‘M V u’
     Tick all articles with scores over the default score (or over the
     numeric prefix) (‘gnus-summary-tick-above’).

‘M V m’
     Prompt for a mark, and mark all articles with scores over the
     default score (or over the numeric prefix) with this mark
     (‘gnus-summary-clear-above’).

   The ‘gnus-summary-goto-unread’ variable controls what action should
be taken after setting a mark.  If non-‘nil’, point will move to the
next/previous unread article.  If ‘nil’, point will just move one line
up or down.  As a special case, if this variable is ‘never’, all the
marking commands as well as other commands (like ‘<SPC>’) will move to
the next article, whether it is unread or not.  The default is ‘t’.


File: gnus.info,  Node: Generic Marking Commands,  Next: Setting Process Marks,  Prev: Setting Marks,  Up: Marking Articles

4.7.5 Generic Marking Commands
------------------------------

Some people would like the command that ticks an article (‘!’) to go to
the next article.  Others would like it to go to the next unread
article.  Yet others would like it to stay on the current article.  And
even though I haven’t heard of anybody wanting it to go to the previous
(unread) article, I’m sure there are people that want that as well.

   Multiply these five behaviors with five different marking commands,
and you get a potentially complex set of variable to control what each
command should do.

   To sidestep that mess, Gnus provides commands that do all these
different things.  They can be found on the ‘M M’ map in the summary
buffer.  Type ‘M M C-h’ to see them all—there are too many of them to
list in this manual.

   While you can use these commands directly, most users would prefer
altering the summary mode keymap.  For instance, if you would like the
‘!’ command to go to the next article instead of the next unread
article, you could say something like:

     (add-hook 'gnus-summary-mode-hook 'my-alter-summary-map)
     (defun my-alter-summary-map ()
       (local-set-key "!" 'gnus-summary-put-mark-as-ticked-next))

or

     (defun my-alter-summary-map ()
       (local-set-key "!" "MM!n"))


File: gnus.info,  Node: Setting Process Marks,  Prev: Generic Marking Commands,  Up: Marking Articles

4.7.6 Setting Process Marks
---------------------------

Process marks are displayed as ‘#’ in the summary buffer, and are used
for marking articles in such a way that other commands will process
these articles.  For instance, if you process mark four articles and
then use the ‘*’ command, Gnus will enter these four articles into the
cache.  For more information, *note Process/Prefix::.

‘M P p’
‘#’
     Toggle the process mark for the current article
     (‘gnus-summary-mark-as-processable’).
     If ‘gnus-process-mark-toggle’ is ‘nil’, set the process mark for
     the current article.

‘M P u’
‘M-#’
     Remove the process mark, if any, from the current article
     (‘gnus-summary-unmark-as-processable’).

‘M P U’
     Remove the process mark from all articles
     (‘gnus-summary-unmark-all-processable’).

‘M P i’
     Invert the list of process marked articles
     (‘gnus-uu-invert-processable’).

‘M P R’
     Mark articles that have a ‘Subject’ header that matches a regular
     expression (‘gnus-uu-mark-by-regexp’).

‘M P G’
     Unmark articles that have a ‘Subject’ header that matches a regular
     expression (‘gnus-uu-unmark-by-regexp’).

‘M P r’
     Mark articles in region (‘gnus-uu-mark-region’).

‘M P g’
     Unmark articles in region (‘gnus-uu-unmark-region’).

‘M P t’
     Mark all articles in the current (sub)thread
     (‘gnus-uu-mark-thread’).

‘M P T’
     Unmark all articles in the current (sub)thread
     (‘gnus-uu-unmark-thread’).

‘M P v’
     Mark all articles that have a score above the prefix argument
     (‘gnus-uu-mark-over’).

‘M P s’
     Mark all articles in the current series (‘gnus-uu-mark-series’).

‘M P S’
     Mark all series that have already had some articles marked
     (‘gnus-uu-mark-sparse’).

‘M P a’
     Mark all articles in series order (‘gnus-uu-mark-all’).

‘M P b’
     Mark all articles in the buffer in the order they appear
     (‘gnus-uu-mark-buffer’).

‘M P k’
     Push the current process mark set onto the stack and unmark all
     articles (‘gnus-summary-kill-process-mark’).

‘M P y’
     Pop the previous process mark set from the stack and restore it
     (‘gnus-summary-yank-process-mark’).

‘M P w’
     Push the current process mark set onto the stack
     (‘gnus-summary-save-process-mark’).

   Also see the ‘&’ command in *note Searching for Articles::, for how
to set process marks based on article body contents.


File: gnus.info,  Node: Limiting,  Next: Threading,  Prev: Marking Articles,  Up: Summary Buffer

# /. 4.8 Limiting
================

It can be convenient to limit the summary buffer to just show some
subset of the articles currently in the group.  The effect most limit
commands have is to remove a few (or many) articles from the summary
buffer.

   Limiting commands work on subsets of the articles already fetched
from the servers.  These commands don’t query the server for additional
articles.

‘/ /’
‘/ s’
     Limit the summary buffer to articles that match some subject
     (‘gnus-summary-limit-to-subject’).  If given a prefix, exclude
     matching articles.

‘/ a’
     Limit the summary buffer to articles that match some author
     (‘gnus-summary-limit-to-author’).  If given a prefix, exclude
     matching articles.

‘/ R’
     Limit the summary buffer to articles that match some recipient
     (‘gnus-summary-limit-to-recipient’).  If given a prefix, exclude
     matching articles.

‘/ A’
     Limit the summary buffer to articles in which contents of From, To
     or Cc header match a given address
     (‘gnus-summary-limit-to-address’).  If given a prefix, exclude
     matching articles.

‘/ S’
     Limit the summary buffer to articles that aren’t part of any
     displayed threads (‘gnus-summary-limit-to-singletons’).  If given a
     prefix, limit to articles that are part of displayed threads.

‘/ x’
     Limit the summary buffer to articles that match one of the “extra”
     headers (*note To From Newsgroups::)
     (‘gnus-summary-limit-to-extra’).  If given a prefix, exclude
     matching articles.

‘/ u’
‘x’
     Limit the summary buffer to articles not marked as read
     (‘gnus-summary-limit-to-unread’).  If given a prefix, limit the
     buffer to articles strictly unread.  This means that ticked and
     dormant articles will also be excluded.

‘/ m’
     Ask for a mark and then limit to all articles that have been marked
     with that mark (‘gnus-summary-limit-to-marks’).

‘/ t’
     Ask for a number and then limit the summary buffer to articles
     older than (or equal to) that number of days
     (‘gnus-summary-limit-to-age’).  If given a prefix, limit to
     articles younger than that number of days.

‘/ n’
     With prefix ‘n’, limit the summary buffer to the next ‘n’ articles.
     If not given a prefix, use the process marked articles instead.
     (‘gnus-summary-limit-to-articles’).

‘/ w’
     Pop the previous limit off the stack and restore it
     (‘gnus-summary-pop-limit’).  If given a prefix, pop all limits off
     the stack.

‘/ .’
     Limit the summary buffer to the unseen articles
     (‘gnus-summary-limit-to-unseen’).

‘/ v’
     Limit the summary buffer to articles that have a score at or above
     some score (‘gnus-summary-limit-to-score’).  If given a prefix,
     below some score.

‘/ p’
     Limit the summary buffer to articles that satisfy the ‘display’
     group parameter predicate
     (‘gnus-summary-limit-to-display-predicate’).  *Note Group
     Parameters::, for more on this predicate.

‘/ r’
     Limit the summary buffer to replied articles
     (‘gnus-summary-limit-to-replied’).  If given a prefix, exclude
     replied articles.

‘/ E’
‘M S’
     Include all expunged articles in the limit
     (‘gnus-summary-limit-include-expunged’).

‘/ D’
     Include all dormant articles in the limit
     (‘gnus-summary-limit-include-dormant’).

‘/ *’
     Include all cached articles in the limit
     (‘gnus-summary-limit-include-cached’).

‘/ d’
     Exclude all dormant articles from the limit
     (‘gnus-summary-limit-exclude-dormant’).

‘/ M’
     Exclude all marked articles (‘gnus-summary-limit-exclude-marks’).

‘/ T’
     Include all the articles in the current thread in the limit.

‘/ c’
     Exclude all dormant articles that have no children from the limit
     (‘gnus-summary-limit-exclude-childless-dormant’).

‘/ C’
     Mark all excluded unread articles as read
     (‘gnus-summary-limit-mark-excluded-as-read’).  If given a prefix,
     also mark excluded ticked and dormant articles as read.

‘/ b’
     Limit the summary buffer to articles that have bodies that match a
     certain regexp (‘gnus-summary-limit-to-bodies’).  If given a
     prefix, reverse the limit.  This command is quite slow since it
     requires selecting each article to find the matches.

‘/ h’
     Like the previous command, only limit to headers instead
     (‘gnus-summary-limit-to-headers’).

   The following commands aren’t limiting commands, but use the ‘/’
prefix as well.

‘/ N’
     Insert all new articles in the summary buffer.  It scans for new
     emails if BACK-END‘-get-new-mail’ is non-‘nil’.

‘/ o’
     Insert all old articles in the summary buffer.  If given a numbered
     prefix, fetch this number of articles.


File: gnus.info,  Node: Threading,  Next: Sorting the Summary Buffer,  Prev: Limiting,  Up: Summary Buffer

# /. 4.9 Threading
=================

Gnus threads articles by default.  “To thread” is to put responses to
articles directly after the articles they respond to—in a hierarchical
fashion.

   Threading is done by looking at the ‘References’ headers of the
articles.  In a perfect world, this would be enough to build pretty
trees, but unfortunately, the ‘References’ header is often broken or
simply missing.  Weird news propagation exacerbates the problem, so one
has to employ other heuristics to get pleasing results.  A plethora of
approaches exists, as detailed in horrible detail in *note Customizing
Threading::.

   First, a quick overview of the concepts:

“root”
     The top-most article in a thread; the first article in the thread.

“thread”
     A tree-like article structure.

“sub-thread”
     A small(er) section of this tree-like structure.

“loose threads”
     Threads often lose their roots due to article expiry, or due to the
     root already having been read in a previous session, and not
     displayed in the summary buffer.  We then typically have many
     sub-threads that really belong to one thread, but are without
     connecting roots.  These are called loose threads.

“thread gathering”
     An attempt to gather loose threads into bigger threads.

“sparse threads”
     A thread where the missing articles have been “guessed” at, and are
     displayed as empty lines in the summary buffer.

* Menu:

* Customizing Threading::       Variables you can change to affect the threading.
* Thread Commands::             Thread based commands in the summary buffer.


File: gnus.info,  Node: Customizing Threading,  Next: Thread Commands,  Up: Threading

4.9.1 Customizing Threading
---------------------------

* Menu:

* Loose Threads::               How Gnus gathers loose threads into bigger threads.
* Filling In Threads::          Making the threads displayed look fuller.
* More Threading::              Even more variables for fiddling with threads.
* Low-Level Threading::         You thought it was over... but you were wrong!


File: gnus.info,  Node: Loose Threads,  Next: Filling In Threads,  Up: Customizing Threading

4.9.1.1 Loose Threads
.....................

‘gnus-summary-make-false-root’
     If non-‘nil’, Gnus will gather all loose subtrees into one big tree
     and create a dummy root at the top.  (Wait a minute.  Root at the
     top?  Yup.)  Loose subtrees occur when the real root has expired,
     or you’ve read or killed the root in a previous session.

     When there is no real root of a thread, Gnus will have to fudge
     something.  This variable says what fudging method Gnus should use.
     There are four possible values:

     ‘adopt’
          Gnus will make the first of the orphaned articles the parent.
          This parent will adopt all the other articles.  The adopted
          articles will be marked as such by pointy brackets (‘<>’)
          instead of the standard square brackets (‘[]’).  This is the
          default method.

     ‘dummy’
          Gnus will create a dummy summary line that will pretend to be
          the parent.  This dummy line does not correspond to any real
          article, so selecting it will just select the first real
          article after the dummy article.
          ‘gnus-summary-dummy-line-format’ is used to specify the format
          of the dummy roots.  It accepts only one format spec: ‘S’,
          which is the subject of the article.  *Note Formatting
          Variables::.  If you want all threads to have a dummy root,
          even the non-gathered ones, set
          ‘gnus-summary-make-false-root-always’ to ‘t’.

     ‘empty’
          Gnus won’t actually make any article the parent, but simply
          leave the subject field of all orphans except the first empty.
          (Actually, it will use ‘gnus-summary-same-subject’ as the
          subject (*note Summary Buffer Format::).)

     ‘none’
          Don’t make any article parent at all.  Just gather the threads
          and display them after one another.

     ‘nil’
          Don’t gather loose threads.

‘gnus-summary-gather-subject-limit’
     Loose threads are gathered by comparing subjects of articles.  If
     this variable is ‘nil’, Gnus requires an exact match between the
     subjects of the loose threads before gathering them into one big
     super-thread.  This might be too strict a requirement, what with
     the presence of stupid newsreaders that chop off long subject
     lines.  If you think so, set this variable to, say, 20 to require
     that only the first 20 characters of the subjects have to match.
     If you set this variable to a really low number, you’ll find that
     Gnus will gather everything in sight into one thread, which isn’t
     very helpful.

     If you set this variable to the special value ‘fuzzy’, Gnus will
     use a fuzzy string comparison algorithm on the subjects (*note
     Fuzzy Matching::).

‘gnus-simplify-subject-fuzzy-regexp’
     This can either be a regular expression or list of regular
     expressions that match strings that will be removed from subjects
     if fuzzy subject simplification is used.

‘gnus-simplify-ignored-prefixes’
     If you set ‘gnus-summary-gather-subject-limit’ to something as low
     as 10, you might consider setting this variable to something
     sensible:

          (setq gnus-simplify-ignored-prefixes
                (concat
                 "\\`\\[?\\("
                 (regexp-opt '("looking"
                               "wanted" "followup" "summary" "summary of"
                               "help" "query" "problem" "question"
                               "answer" "reference" "announce"
                               "How can I" "How to" "Comparison of"
                               ;; ...
                               ))
                 "\\)\\s *\\("
                 (regexp-opt '("for" "for reference" "with" "about"))
                 "\\)?\\]?:?[ \t]*"))

     All words that match this regexp will be removed before comparing
     two subjects.

‘gnus-simplify-subject-functions’
     If non-‘nil’, this variable overrides
     ‘gnus-summary-gather-subject-limit’.  This variable should be a
     list of functions to apply to the ‘Subject’ string iteratively to
     arrive at the simplified version of the string.

     Useful functions to put in this list include:

     ‘gnus-simplify-subject-re’
          Strip the leading ‘Re:’.

     ‘gnus-simplify-subject-fuzzy’
          Simplify fuzzily.

     ‘gnus-simplify-whitespace’
          Remove excessive whitespace.

     ‘gnus-simplify-all-whitespace’
          Remove all whitespace.

     You may also write your own functions, of course.

‘gnus-summary-gather-exclude-subject’
     Since loose thread gathering is done on subjects only, that might
     lead to many false hits, especially with certain common subjects
     like ‘’ and ‘(none)’.  To make the situation slightly better, you
     can use the regexp ‘gnus-summary-gather-exclude-subject’ to say
     what subjects should be excluded from the gathering process.
     The default is ‘^ *$\\|^(none)$’.

‘gnus-summary-thread-gathering-function’
     Gnus gathers threads by looking at ‘Subject’ headers.  This means
     that totally unrelated articles may end up in the same “thread”,
     which is confusing.  An alternate approach is to look at all the
     ‘Message-ID’s in all the ‘References’ headers to find matches.
     This will ensure that no gathered threads ever include unrelated
     articles, but it also means that people who have posted with broken
     newsreaders won’t be gathered properly.  The choice is yours—plague
     or cholera:

     ‘gnus-gather-threads-by-subject’
          This function is the default gathering function and looks at
          ‘Subject’s exclusively.

     ‘gnus-gather-threads-by-references’
          This function looks at ‘References’ headers exclusively.

     If you want to test gathering by ‘References’, you could say
     something like:

          (setq gnus-summary-thread-gathering-function
                'gnus-gather-threads-by-references)


File: gnus.info,  Node: Filling In Threads,  Next: More Threading,  Prev: Loose Threads,  Up: Customizing Threading

4.9.1.2 Filling In Threads
..........................

‘gnus-fetch-old-headers’
     If non-‘nil’, Gnus will attempt to build old threads by fetching
     more old headers—headers to articles marked as read.  If you would
     like to display as few summary lines as possible, but still connect
     as many loose threads as possible, you should set this variable to
     ‘some’ or a number.  If you set it to a number, no more than that
     number of extra old headers will be fetched.  In either case,
     fetching old headers only works if the back end you are using
     carries overview files—this would normally be ‘nntp’, ‘nnspool’,
     ‘nnml’, and ‘nnmaildir’.  Also remember that if the root of the
     thread has been expired by the server, there’s not much Gnus can do
     about that.

     This variable can also be set to ‘invisible’.  This won’t have any
     visible effects, but is useful if you use the ‘A T’ command a lot
     (*note Finding the Parent::).

     The server has to support NOV for any of this to work.

     This feature can seriously impact performance it ignores all
     locally cached header entries.  Setting it to ‘t’ for groups for a
     server that doesn’t expire articles (such as news.gmane.org), leads
     to very slow summary generation.

‘gnus-fetch-old-ephemeral-headers’
     Same as ‘gnus-fetch-old-headers’, but only used for ephemeral
     newsgroups.

‘gnus-build-sparse-threads’
     Fetching old headers can be slow.  A low-rent similar effect can be
     gotten by setting this variable to ‘some’.  Gnus will then look at
     the complete ‘References’ headers of all articles and try to string
     together articles that belong in the same thread.  This will leave
     “gaps” in the threading display where Gnus guesses that an article
     is missing from the thread.  (These gaps appear like normal summary
     lines.  If you select a gap, Gnus will try to fetch the article in
     question.)  If this variable is ‘t’, Gnus will display all these
     “gaps” without regard for whether they are useful for completing
     the thread or not.  Finally, if this variable is ‘more’, Gnus won’t
     cut off sparse leaf nodes that don’t lead anywhere.  This variable
     is ‘nil’ by default.

‘gnus-read-all-available-headers’
     This is a rather obscure variable that few will find useful.  It’s
     intended for those non-news newsgroups where the back end has to
     fetch quite a lot to present the summary buffer, and where it’s
     impossible to go back to parents of articles.  This is mostly the
     case in the web-based groups.

     If you don’t use those, then it’s safe to leave this as the default
     ‘nil’.  If you want to use this variable, it should be a regexp
     that matches the group name, or ‘t’ for all groups.


File: gnus.info,  Node: More Threading,  Next: Low-Level Threading,  Prev: Filling In Threads,  Up: Customizing Threading

4.9.1.3 More Threading
......................

‘gnus-show-threads’
     If this variable is ‘nil’, no threading will be done, and all of
     the rest of the variables here will have no effect.  Turning
     threading off will speed group selection up a bit, but it is sure
     to make reading slower and more awkward.

‘gnus-thread-hide-subtree’
     If non-‘nil’, all threads will be hidden when the summary buffer is
     generated.

     This can also be a predicate specifier (*note Predicate
     Specifiers::).  Available predicates are ‘gnus-article-unread-p’
     and ‘gnus-article-unseen-p’.

     Here’s an example:

          (setq gnus-thread-hide-subtree
                '(or gnus-article-unread-p
                     gnus-article-unseen-p))

     (It’s a pretty nonsensical example, since all unseen articles are
     also unread, but you get my drift.)

‘gnus-thread-expunge-below’
     All threads that have a total score (as defined by
     ‘gnus-thread-score-function’) less than this number will be
     expunged.  This variable is ‘nil’ by default, which means that no
     threads are expunged.

‘gnus-thread-hide-killed’
     if you kill a thread and this variable is non-‘nil’, the subtree
     will be hidden.

‘gnus-thread-ignore-subject’
     Sometimes somebody changes the subject in the middle of a thread.
     If this variable is non-‘nil’, which is the default, the subject
     change is ignored.  If it is ‘nil’, a change in the subject will
     result in a new thread.

‘gnus-thread-indent-level’
     This is a number that says how much each sub-thread should be
     indented.  The default is 4.

‘gnus-sort-gathered-threads-function’
     Sometimes, particularly with mailing lists, the order in which
     mails arrive locally is not necessarily the same as the order in
     which they arrived on the mailing list.  Consequently, when sorting
     sub-threads using the default ‘gnus-thread-sort-by-number’,
     responses can end up appearing before the article to which they are
     responding to.  Setting this variable to an alternate value (e.g.,
     ‘gnus-thread-sort-by-date’), in a group’s parameters or in an
     appropriate hook (e.g., ‘gnus-summary-generate-hook’) can produce a
     more logical sub-thread ordering in such instances.


File: gnus.info,  Node: Low-Level Threading,  Prev: More Threading,  Up: Customizing Threading

4.9.1.4 Low-Level Threading
...........................

‘gnus-parse-headers-hook’
     Hook run before parsing any headers.

‘gnus-alter-header-function’
     If non-‘nil’, this function will be called to allow alteration of
     article header structures.  The function is called with one
     parameter, the article header vector, which it may alter in any
     way.  For instance, if you have a mail-to-news gateway which alters
     the ‘Message-ID’s in systematic ways (by adding prefixes and such),
     you can use this variable to un-scramble the ‘Message-ID’s so that
     they are more meaningful.  Here’s one example:

          (setq gnus-alter-header-function 'my-alter-message-id)

          (defun my-alter-message-id (header)
            (let ((id (mail-header-id header)))
              (when (string-match
                     "\\(<[^<>@]*\\)\\.?cygnus\\..*@\\([^<>@]*>\\)" id)
                (mail-header-set-id
                 (concat (match-string 1 id) "@" (match-string 2 id))
                 header))))


File: gnus.info,  Node: Thread Commands,  Prev: Customizing Threading,  Up: Threading

4.9.2 Thread Commands
---------------------

‘T k’
‘C-M-k’
     Mark all articles in the current (sub-)thread as read
     (‘gnus-summary-kill-thread’).  If the prefix argument is positive,
     remove all marks instead.  If the prefix argument is negative, tick
     articles instead.

‘T l’
‘C-M-l’
     Lower the score of the current (sub-)thread
     (‘gnus-summary-lower-thread’).

‘T i’
     Increase the score of the current (sub-)thread
     (‘gnus-summary-raise-thread’).

‘T #’
     Set the process mark on the current (sub-)thread
     (‘gnus-uu-mark-thread’).

‘T M-#’
     Remove the process mark from the current (sub-)thread
     (‘gnus-uu-unmark-thread’).

‘T T’
     Toggle threading (‘gnus-summary-toggle-threads’).

‘T s’
     Expose the (sub-)thread hidden under the current article, if any
     (‘gnus-summary-show-thread’).

‘T h’
     Hide the current (sub-)thread (‘gnus-summary-hide-thread’).

‘T S’
     Expose all hidden threads (‘gnus-summary-show-all-threads’).

‘T H’
     Hide all threads (‘gnus-summary-hide-all-threads’).

‘T t’
     Re-thread the current article’s thread
     (‘gnus-summary-rethread-current’).  This works even when the
     summary buffer is otherwise unthreaded.

‘T ^’
     Make the current article the child of the marked (or previous)
     article (‘gnus-summary-reparent-thread’).

‘T M-^’
     Make the current article the parent of the marked articles
     (‘gnus-summary-reparent-children’).

   The following commands are thread movement commands.  They all
understand the numeric prefix.

‘T n’
‘C-M-f’
‘M-<DOWN>’
     Go to the next thread (‘gnus-summary-next-thread’).

‘T p’
‘C-M-b’
‘M-<UP>’
     Go to the previous thread (‘gnus-summary-prev-thread’).

‘T d’
     Descend the thread (‘gnus-summary-down-thread’).

‘T u’
     Ascend the thread (‘gnus-summary-up-thread’).

‘T o’
     Go to the top of the thread (‘gnus-summary-top-thread’).

   If you ignore subject while threading, you’ll naturally end up with
threads that have several different subjects in them.  If you then issue
a command like ‘T k’ (‘gnus-summary-kill-thread’) you might not wish to
kill the entire thread, but just those parts of the thread that have the
same subject as the current article.  If you like this idea, you can
fiddle with ‘gnus-thread-operation-ignore-subject’.  If it is non-‘nil’
(which it is by default), subjects will be ignored when doing thread
commands.  If this variable is ‘nil’, articles in the same thread with
different subjects will not be included in the operation in question.
If this variable is ‘fuzzy’, only articles that have subjects fuzzily
equal will be included (*note Fuzzy Matching::).


File: gnus.info,  Node: Sorting the Summary Buffer,  Next: Asynchronous Fetching,  Prev: Threading,  Up: Summary Buffer

# /. 4.10 Sorting the Summary Buffer
===================================

If you are using a threaded summary display, you can sort the threads by
setting ‘gnus-thread-sort-functions’, which can be either a single
function, a list of functions, or a list containing functions and ‘(not
some-function)’ elements.

   By default, sorting is done on article numbers.  Ready-made sorting
predicate functions include ‘gnus-thread-sort-by-number’,
‘gnus-thread-sort-by-author’, ‘gnus-thread-sort-by-recipient’,
‘gnus-thread-sort-by-subject’, ‘gnus-thread-sort-by-date’,
‘gnus-thread-sort-by-score’, ‘gnus-thread-sort-by-most-recent-number’,
‘gnus-thread-sort-by-most-recent-date’, ‘gnus-thread-sort-by-newsgroups’
and ‘gnus-thread-sort-by-random’ and ‘gnus-thread-sort-by-total-score’.

   Each function takes two threads and returns non-‘nil’ if the first
thread should be sorted before the other.  Note that sorting really is
normally done by looking only at the roots of each thread.  Exceptions
to this rule are ‘gnus-thread-sort-by-most-recent-number’ and
‘gnus-thread-sort-by-most-recent-date’.

   If you use more than one function, the primary sort key should be the
last function in the list.  You should probably always include
‘gnus-thread-sort-by-number’ in the list of sorting functions—preferably
first.  This will ensure that threads that are equal with respect to the
other sort criteria will be displayed in ascending article order.

   If you would like to sort by reverse score, then by subject, and
finally by number, you could do something like:

     (setq gnus-thread-sort-functions
           '(gnus-thread-sort-by-number
             gnus-thread-sort-by-subject
             (not gnus-thread-sort-by-total-score)))

   The threads that have highest score will be displayed first in the
summary buffer.  When threads have the same score, they will be sorted
alphabetically.  The threads that have the same score and the same
subject will be sorted by number, which is (normally) the sequence in
which the articles arrived.

   If you want to sort by score and then reverse arrival order, you
could say something like:

     (setq gnus-thread-sort-functions
           '((not gnus-thread-sort-by-number)
             gnus-thread-sort-by-score))

   By default, threads including their subthreads are sorted according
to the value of ‘gnus-thread-sort-functions’.  By customizing
‘gnus-subthread-sort-functions’ you can define a custom sorting order
for subthreads.  This allows for example to sort threads from high score
to low score in the summary buffer, but to have subthreads still sorted
chronologically from old to new without taking their score into account.

   The function in the ‘gnus-thread-score-function’ variable (default
‘+’) is used for calculating the total score of a thread.  Useful
functions might be ‘max’, ‘min’, or squared means, or whatever tickles
your fancy.

   If you are using an unthreaded display for some strange reason or
other, you have to fiddle with the ‘gnus-article-sort-functions’
variable.  It is very similar to the ‘gnus-thread-sort-functions’,
except that it uses slightly different functions for article comparison.
Available sorting predicate functions are ‘gnus-article-sort-by-number’,
‘gnus-article-sort-by-author’, ‘gnus-article-sort-by-subject’,
‘gnus-article-sort-by-date’, ‘gnus-article-sort-by-newsgroups’,
‘gnus-article-sort-by-random’, and ‘gnus-article-sort-by-score’.

   If you want to sort an unthreaded summary display by subject, you
could say something like:

     (setq gnus-article-sort-functions
           '(gnus-article-sort-by-number
             gnus-article-sort-by-subject))

   You can define group specific sorting via ‘gnus-parameters’, *Note
Group Parameters::.


File: gnus.info,  Node: Asynchronous Fetching,  Next: Article Caching,  Prev: Sorting the Summary Buffer,  Up: Summary Buffer

# /. 4.11 Asynchronous Article Fetching
======================================

If you read your news from an NNTP server that’s far away, the network
latencies may make reading articles a chore.  You have to wait for a
while after pressing ‘n’ to go to the next article before the article
appears.  Why can’t Gnus just go ahead and fetch the article while you
are reading the previous one?  Why not, indeed.

   First, some caveats.  There are some pitfalls to using asynchronous
article fetching, especially the way Gnus does it.

   Let’s say you are reading article 1, which is short, and article 2 is
quite long, and you are not interested in reading that.  Gnus does not
know this, so it goes ahead and fetches article 2.  You decide to read
article 3, but since Gnus is in the process of fetching article 2, the
connection is blocked.

   To avoid these situations, Gnus will open two (count ’em two)
connections to the server.  Some people may think this isn’t a very nice
thing to do, but I don’t see any real alternatives.  Setting up that
extra connection takes some time, so Gnus startup will be slower.

   Gnus will fetch more articles than you will read.  This will mean
that the link between your machine and the NNTP server will become more
loaded than if you didn’t use article pre-fetch.  The server itself will
also become more loaded—both with the extra article requests, and the
extra connection.

   Ok, so now you know that you shouldn’t really use this thing...
unless you really want to.

   Here’s how: Set ‘gnus-asynchronous’ to ‘t’.  The rest should happen
automatically.

   You can control how many articles are to be pre-fetched by setting
‘gnus-use-article-prefetch’.  This is 30 by default, which means that
when you read an article in the group, the back end will pre-fetch the
next 30 articles.  If this variable is ‘t’, the back end will pre-fetch
all the articles it can without bound.  If it is ‘nil’, no pre-fetching
will be done.

   There are probably some articles that you don’t want to
pre-fetch—read articles, for instance.  The
‘gnus-async-prefetch-article-p’ variable controls whether an article is
to be pre-fetched.  This function should return non-‘nil’ when the
article in question is to be pre-fetched.  The default is
‘gnus-async-unread-p’, which returns ‘nil’ on read articles.  The
function is called with an article data structure as the only parameter.

   If, for instance, you wish to pre-fetch only unread articles shorter
than 100 lines, you could say something like:

     (defun my-async-short-unread-p (data)
       "Return non-nil for short, unread articles."
       (and (gnus-data-unread-p data)
            (< (mail-header-lines (gnus-data-header data))
               100)))

     (setq gnus-async-prefetch-article-p 'my-async-short-unread-p)

   These functions will be called many, many times, so they should
preferably be short and sweet to avoid slowing down Gnus too much.  It’s
probably a good idea to byte-compile things like this.

   After an article has been prefetched, this
‘gnus-async-post-fetch-function’ will be called.  The buffer will be
narrowed to the region of the article that was fetched.  A useful value
would be ‘gnus-html-prefetch-images’, which will prefetch and store
images referenced in the article, so that you don’t have to wait for
them to be fetched when you read the article.  This is useful for HTML
messages that have external images.

   Articles have to be removed from the asynch buffer sooner or later.
The ‘gnus-prefetched-article-deletion-strategy’ says when to remove
articles.  This is a list that may contain the following elements:

‘read’
     Remove articles when they are read.

‘exit’
     Remove articles when exiting the group.

   The default value is ‘(read exit)’.


File: gnus.info,  Node: Article Caching,  Next: Persistent Articles,  Prev: Asynchronous Fetching,  Up: Summary Buffer

# /. 4.12 Article Caching
========================

If you have an _extremely_ slow NNTP connection, you may consider
turning article caching on.  Each article will then be stored locally
under your home directory.  As you may surmise, this could potentially
use _huge_ amounts of disk space, as well as eat up all your inodes so
fast it will make your head swim.  In vodka.

   Used carefully, though, it could be just an easier way to save
articles.

   To turn caching on, set ‘gnus-use-cache’ to ‘t’.  By default, all
articles ticked or marked as dormant will then be copied over to your
local cache (‘gnus-cache-directory’).  Whether this cache is flat or
hierarchical is controlled by the ‘gnus-use-long-file-name’ variable, as
usual.

   When re-selecting a ticked or dormant article, it will be fetched
from the cache instead of from the server.  As articles in your cache
will never expire, this might serve as a method of saving articles while
still keeping them where they belong.  Just mark all articles you want
to save as dormant, and don’t worry.

   When an article is marked as read, is it removed from the cache.

   The entering/removal of articles from the cache is controlled by the
‘gnus-cache-enter-articles’ and ‘gnus-cache-remove-articles’ variables.
Both are lists of symbols.  The first is ‘(ticked dormant)’ by default,
meaning that ticked and dormant articles will be put in the cache.  The
latter is ‘(read)’ by default, meaning that articles marked as read are
removed from the cache.  Possibly symbols in these two lists are
‘ticked’, ‘dormant’, ‘unread’ and ‘read’.

   So where does the massive article-fetching and storing come into the
picture?  The ‘gnus-jog-cache’ command will go through all subscribed
newsgroups, request all unread articles, score them, and store them in
the cache.  You should only ever, ever ever ever, use this command if 1)
your connection to the NNTP server is really, really, really slow and 2)
you have a really, really, really huge disk.  Seriously.  One way to cut
down on the number of articles downloaded is to score unwanted articles
down and have them marked as read.  They will not then be downloaded by
this command.

   It is likely that you do not want caching on all groups.  For
instance, if your ‘nnml’ mail is located under your home directory, it
makes no sense to cache it somewhere else under your home directory.
Unless you feel that it’s neat to use twice as much space.

   To limit the caching, you could set ‘gnus-cacheable-groups’ to a
regexp of groups to cache, ‘^nntp’ for instance, or set the
‘gnus-uncacheable-groups’ regexp to ‘^nnml’, for instance.  Both
variables are ‘nil’ by default.  If a group matches both variables, the
group is not cached.

   The cache stores information on what articles it contains in its
active file (‘gnus-cache-active-file’).  If this file (or any other
parts of the cache) becomes all messed up for some reason or other, Gnus
offers two functions that will try to set things right.  ‘M-x
gnus-cache-generate-nov-databases’ will (re)build all the NOV files, and
‘gnus-cache-generate-active’ will (re)generate the active file.

   ‘gnus-cache-move-cache’ will move your whole ‘gnus-cache-directory’
to some other location.  You get asked to where, isn’t that cool?


File: gnus.info,  Node: Persistent Articles,  Next: Sticky Articles,  Prev: Article Caching,  Up: Summary Buffer

# /. 4.13 Persistent Articles
============================

Closely related to article caching, we have “persistent articles”.  In
fact, it’s just a different way of looking at caching, and much more
useful in my opinion.

   Say you’re reading a newsgroup, and you happen on to some valuable
gem that you want to keep and treasure forever.  You’d normally just
save it (using one of the many saving commands) in some file.  The
problem with that is that it’s just, well, yucky.  Ideally you’d prefer
just having the article remain in the group where you found it forever;
untouched by the expiry going on at the news server.

   This is what a “persistent article” is—an article that just won’t be
deleted.  It’s implemented using the normal cache functions, but you use
two explicit commands for managing persistent articles:

‘*’
     Make the current article persistent (‘gnus-cache-enter-article’).

‘M-*’
     Remove the current article from the persistent articles
     (‘gnus-cache-remove-article’).  This will normally delete the
     article.

   Both these commands understand the process/prefix convention.

   To avoid having all ticked articles (and stuff) entered into the
cache, you should set ‘gnus-use-cache’ to ‘passive’ if you’re just
interested in persistent articles:

     (setq gnus-use-cache 'passive)


File: gnus.info,  Node: Sticky Articles,  Next: Article Backlog,  Prev: Persistent Articles,  Up: Summary Buffer

# /. 4.14 Sticky Articles
========================

When you select an article the current article buffer will be reused
according to the value of the variable ‘gnus-single-article-buffer’.  If
its value is non-‘nil’ (the default) all articles reuse the same article
buffer.  Else each group has its own article buffer.

   This implies that it’s not possible to have more than one article
buffer in a group at a time.  But sometimes you might want to display
all the latest emails from your mother, your father, your aunt, your
uncle and your 17 cousins to coordinate the next Christmas party.

   That’s where sticky articles come in handy.  A sticky article buffer
basically is a normal article buffer, but it won’t be reused when you
select another article.  You can make an article sticky with:

‘A S’
     Make the current article sticky.  If a prefix arg is given, ask for
     a name for this sticky article buffer.

   To close a sticky article buffer you can use these commands:

‘q’
     Puts this sticky article buffer at the end of the list of all
     buffers.

‘k’
     Kills this sticky article buffer.

   To kill all sticky article buffers you can use:

 -- Function: gnus-kill-sticky-article-buffers ARG
     Kill all sticky article buffers.  If a prefix ARG is given, ask for
     confirmation.


File: gnus.info,  Node: Article Backlog,  Next: Saving Articles,  Prev: Sticky Articles,  Up: Summary Buffer

# /. 4.15 Article Backlog
========================

If you have a slow connection, but the idea of using caching seems
unappealing to you (and it is, really), you can help the situation some
by switching on the “backlog”.  This is where Gnus will buffer already
read articles so that it doesn’t have to re-fetch articles you’ve
already read.  This only helps if you are in the habit of re-selecting
articles you’ve recently read, of course.  If you never do that, turning
the backlog on will slow Gnus down a little bit, and increase memory
usage some.

   If you set ‘gnus-keep-backlog’ to a number N, Gnus will store at most
N old articles in a buffer for later re-fetching.  If this variable is
non-‘nil’ and is not a number, Gnus will store _all_ read articles,
which means that your Emacs will grow without bound before exploding and
taking your machine down with you.  I put that in there just to keep
y’all on your toes.

   The default value is 20.


File: gnus.info,  Node: Saving Articles,  Next: Decoding Articles,  Prev: Article Backlog,  Up: Summary Buffer

# /. 4.16 Saving Articles
========================

Gnus can save articles in a number of ways.  Below is the documentation
for saving articles in a fairly straight-forward fashion (i.e., little
processing of the article is done before it is saved).  For a different
approach (uudecoding, unsharing) you should use ‘gnus-uu’ (*note
Decoding Articles::).

   For the commands listed here, the target is a file.  A directory name
(ending in ‘/’) causes the target to be a file under that directory.  If
you want to save to a group, see the ‘B c’ (‘gnus-summary-copy-article’)
command (*note Mail Group Commands::).

   If ‘gnus-save-all-headers’ is non-‘nil’, Gnus will not delete
unwanted headers before saving the article.

   If the preceding variable is ‘nil’, all headers that match the
‘gnus-saved-headers’ regexp will be kept, while the rest will be deleted
before saving.

‘O o’
‘o’
     Save the current article using the default article saver
     (‘gnus-summary-save-article’).

‘O m’
     Save the current article in a Unix mail box (mbox) file
     (‘gnus-summary-save-article-mail’).

‘O r’
     Save the current article in Rmail format
     (‘gnus-summary-save-article-rmail’).  This is mbox since Emacs 23,
     Babyl in older versions.

‘O f’
     Save the current article in plain file format
     (‘gnus-summary-save-article-file’).

‘O F’
     Write the current article in plain file format, overwriting any
     previous file contents (‘gnus-summary-write-article-file’).

‘O b’
     Save the current article body in plain file format
     (‘gnus-summary-save-article-body-file’).

‘O h’
     Save the current article in mh folder format
     (‘gnus-summary-save-article-folder’).

‘O v’
     Save the current article in a VM folder
     (‘gnus-summary-save-article-vm’).

‘O p’
‘|’
     Save the current article in a pipe.  Uhm, like, what I mean is—Pipe
     the current article to a process (‘gnus-summary-pipe-output’).  If
     given a symbolic prefix (*note Symbolic Prefixes::), include the
     complete headers in the piped output.  The symbolic prefix ‘r’ is
     special; it lets this command pipe a raw article including all
     headers.  The ‘gnus-summary-pipe-output-default-command’ variable
     can be set to a string containing the default command and options
     (default ‘nil’).

‘O P’
     Save the current article into muttprint.  That is, print it using
     the external program Muttprint
     (https://muttprint.sourceforge.net/).  The program name and options
     to use is controlled by the variable
     ‘gnus-summary-muttprint-program’.  (‘gnus-summary-muttprint’).

   All these commands use the process/prefix convention (*note
Process/Prefix::).  If you save bunches of articles using these
functions, you might get tired of being prompted for files to save each
and every article in.  The prompting action is controlled by the
‘gnus-prompt-before-saving’ variable, which is ‘always’ by default,
giving you that excessive prompting action you know and loathe.  If you
set this variable to ‘t’ instead, you’ll be prompted just once for each
series of articles you save.  If you like to really have Gnus do all
your thinking for you, you can even set this variable to ‘nil’, which
means that you will never be prompted for files to save articles in.
Gnus will simply save all the articles in the default files.

   You can customize the ‘gnus-default-article-saver’ variable to make
Gnus do what you want it to.  You can use any of the eight ready-made
functions below, or you can create your own.

‘gnus-summary-save-in-rmail’
     This is the default format, that used by the Rmail package.  Since
     Emacs 23, Rmail uses standard mbox format.  Before this, it used
     the “Babyl” format.  Accordingly, this command writes mbox format
     since Emacs 23, unless appending to an existing Babyl file.  In
     older versions of Emacs, it always uses Babyl format.  Uses the
     function in the ‘gnus-rmail-save-name’ variable to get a file name
     to save the article in.  The default is ‘gnus-plain-save-name’.

‘gnus-summary-save-in-mail’
     Save in a Unix mail (mbox) file.  Uses the function in the
     ‘gnus-mail-save-name’ variable to get a file name to save the
     article in.  The default is ‘gnus-plain-save-name’.

‘gnus-summary-save-in-file’
     Append the article straight to an ordinary file.  Uses the function
     in the ‘gnus-file-save-name’ variable to get a file name to save
     the article in.  The default is ‘gnus-numeric-save-name’.

‘gnus-summary-write-to-file’
     Write the article straight to an ordinary file.  The file is
     overwritten if it exists.  Uses the function in the
     ‘gnus-file-save-name’ variable to get a file name to save the
     article in.  The default is ‘gnus-numeric-save-name’.

‘gnus-summary-save-body-in-file’
     Append the article body to an ordinary file.  Uses the function in
     the ‘gnus-file-save-name’ variable to get a file name to save the
     article in.  The default is ‘gnus-numeric-save-name’.

‘gnus-summary-write-body-to-file’
     Write the article body straight to an ordinary file.  The file is
     overwritten if it exists.  Uses the function in the
     ‘gnus-file-save-name’ variable to get a file name to save the
     article in.  The default is ‘gnus-numeric-save-name’.

‘gnus-summary-save-in-folder’
     Save the article to an MH folder using ‘rcvstore’ from the MH
     library.  Uses the function in the ‘gnus-folder-save-name’ variable
     to get a file name to save the article in.  The default is
     ‘gnus-folder-save-name’, but you can also use
     ‘gnus-Folder-save-name’, which creates capitalized names.

‘gnus-summary-save-in-vm’
     Save the article in a VM folder.  You have to have the VM mail
     reader to use this setting.

‘gnus-summary-save-in-pipe’
     Pipe the article to a shell command.  This function takes optional
     two arguments COMMAND and RAW.  Valid values for COMMAND include:

        • a string
          The executable command name and possibly arguments.
        • ‘nil’
          You will be prompted for the command in the minibuffer.
        • the symbol ‘default’
          It will be replaced with the command which the variable
          ‘gnus-summary-pipe-output-default-command’ holds or the
          command last used for saving.

     Non-‘nil’ value for RAW overrides ‘:decode’ and ‘:headers’
     properties (see below) and the raw article including all headers
     will be piped.

   The symbol of each function may have the following properties:

‘:decode’
     The value non-‘nil’ means save decoded articles.  This is
     meaningful only with ‘gnus-summary-save-in-file’,
     ‘gnus-summary-save-body-in-file’, ‘gnus-summary-write-to-file’,
     ‘gnus-summary-write-body-to-file’, and ‘gnus-summary-save-in-pipe’.

‘:function’
     The value specifies an alternative function which appends, not
     overwrites, articles to a file.  This implies that when saving many
     articles at a time, ‘gnus-prompt-before-saving’ is bound to ‘t’ and
     all articles are saved in a single file.  This is meaningful only
     with ‘gnus-summary-write-to-file’ and
     ‘gnus-summary-write-body-to-file’.

‘:headers’
     The value specifies the symbol of a variable of which the value
     specifies headers to be saved.  If it is omitted,
     ‘gnus-save-all-headers’ and ‘gnus-saved-headers’ control what
     headers should be saved.

   All of these functions, except for the last one, will save the
article in the ‘gnus-article-save-directory’, which is initialized from
the ‘SAVEDIR’ environment variable.  This is ‘~/News/’ by default.

   As you can see above, the functions use different functions to find a
suitable name of a file to save the article in.  Below is a list of
available functions that generate names:

‘gnus-Numeric-save-name’
     File names like ‘~/News/Alt.andrea-dworkin/45’.

‘gnus-numeric-save-name’
     File names like ‘~/News/alt.andrea-dworkin/45’.

‘gnus-Plain-save-name’
     File names like ‘~/News/Alt.andrea-dworkin’.

‘gnus-plain-save-name’
     File names like ‘~/News/alt.andrea-dworkin’.

‘gnus-sender-save-name’
     File names like ‘~/News/larsi’.

   You can have Gnus suggest where to save articles by plonking a regexp
into the ‘gnus-split-methods’ alist.  For instance, if you would like to
save articles related to Gnus in the file ‘gnus-stuff’, and articles
related to VM in ‘vm-stuff’, you could set this variable to something
like:

     (("^Subject:.*gnus\\|^Newsgroups:.*gnus" "gnus-stuff")
      ("^Subject:.*vm\\|^Xref:.*vm" "vm-stuff")
      (my-choosing-function "../other-dir/my-stuff")
      ((equal gnus-newsgroup-name "mail.misc") "mail-stuff"))

   We see that this is a list where each element is a list that has two
elements—the “match” and the “file”.  The match can either be a string
(in which case it is used as a regexp to match on the article head); it
can be a symbol (which will be called as a function with the group name
as a parameter); or it can be a list (which will be ‘eval’ed).  If any
of these actions have a non-‘nil’ result, the “file” will be used as a
default prompt.  In addition, the result of the operation itself will be
used if the function or form called returns a string or a list of
strings.

   You basically end up with a list of file names that might be used
when saving the current article.  (All “matches” will be used.)  You
will then be prompted for what you really want to use as a name, with
file name completion over the results from applying this variable.

   This variable is ‘((gnus-article-archive-name))’ by default, which
means that Gnus will look at the articles it saves for an ‘Archive-name’
line and use that as a suggestion for the file name.

   Here’s an example function to clean up file names somewhat.  If you
have lots of mail groups called things like ‘nnml:mail.whatever’, you
may want to chop off the beginning of these group names before creating
the file name to save to.  The following will do just that:

     (defun my-save-name (group)
       (when (string-match "^nnml:mail." group)
         (substring group (match-end 0))))

     (setq gnus-split-methods
           '((gnus-article-archive-name)
             (my-save-name)))

   Finally, you have the ‘gnus-use-long-file-name’ variable.  If it is
‘nil’, all the preceding functions will replace all periods (‘.’) in the
group names with slashes (‘/’)—which means that the functions will
generate hierarchies of directories instead of having all the files in
the top level directory (‘~/News/alt/andrea-dworkin’ instead of
‘~/News/alt.andrea-dworkin’.)  This variable is ‘t’ by default on most
systems.  However, for historical reasons, this is ‘nil’ on Xenix and
usg-unix-v machines by default.

   This function also affects kill and score file names.  If this
variable is a list, and the list contains the element ‘not-score’, long
file names will not be used for score files, if it contains the element
‘not-save’, long file names will not be used for saving, and if it
contains the element ‘not-kill’, long file names will not be used for
kill files.

   If you’d like to save articles in a hierarchy that looks something
like a spool, you could

     (setq gnus-use-long-file-name '(not-save)) ; to get a hierarchy
     (setq gnus-default-article-saver
           'gnus-summary-save-in-file)          ; no encoding

   Then just save with ‘o’.  You’d then read this hierarchy with
ephemeral ‘nneething’ groups—‘G D’ in the group buffer, and the top
level directory as the argument (‘~/News/’).  Then just walk around to
the groups/directories with ‘nneething’.


File: gnus.info,  Node: Decoding Articles,  Next: Article Treatment,  Prev: Saving Articles,  Up: Summary Buffer

# /. 4.17 Decoding Articles
==========================

Sometime users post articles (or series of articles) that have been
encoded in some way or other.  Gnus can decode them for you.

* Menu:

* Uuencoded Articles::          Uudecode articles.
* Shell Archives::              Unshar articles.
* PostScript Files::            Split PostScript.
* Other Files::                 Plain save and binhex.
* Decoding Variables::          Variables for a happy decoding.
* Viewing Files::               You want to look at the result of the decoding?

   All these functions use the process/prefix convention (*note
Process/Prefix::) for finding out what articles to work on, with the
extension that a “single article” means “a single series”.  Gnus can
find out by itself what articles belong to a series, decode all the
articles and unpack/view/save the resulting file(s).

   Gnus guesses what articles are in the series according to the
following simplish rule: The subjects must be (nearly) identical, except
for the last two numbers of the line.  (Spaces are largely ignored,
however.)

   For example: If you choose a subject called ‘cat.gif (2/3)’, Gnus
will find all the articles that match the regexp ‘^cat.gif
([0-9]+/[0-9]+).*$’.

   Subjects that are non-standard, like ‘cat.gif (2/3) Part 6 of a
series’, will not be properly recognized by any of the automatic viewing
commands, and you have to mark the articles manually with ‘#’.


File: gnus.info,  Node: Uuencoded Articles,  Next: Shell Archives,  Up: Decoding Articles

4.17.1 Uuencoded Articles
-------------------------

‘X u’
     Uudecodes the current series (‘gnus-uu-decode-uu’).

‘X U’
     Uudecodes and saves the current series
     (‘gnus-uu-decode-uu-and-save’).

‘X v u’
     Uudecodes and views the current series (‘gnus-uu-decode-uu-view’).

‘X v U’
     Uudecodes, views and saves the current series
     (‘gnus-uu-decode-uu-and-save-view’).

   Remember that these all react to the presence of articles marked with
the process mark.  If, for instance, you’d like to decode and save an
entire newsgroup, you’d typically do ‘M P a’ (‘gnus-uu-mark-all’) and
then ‘X U’ (‘gnus-uu-decode-uu-and-save’).

   All this is very much different from how ‘gnus-uu’ worked with GNUS
4.1, where you had explicit keystrokes for everything under the sun.
This version of ‘gnus-uu’ generally assumes that you mark articles in
some way (*note Setting Process Marks::) and then press ‘X u’.

   Note: When trying to decode articles that have names matching
‘gnus-uu-notify-files’, which is hard-coded to
‘[Cc][Ii][Nn][Dd][Yy][0-9]+.\\(gif\\|jpg\\)’, ‘gnus-uu’ will
automatically post an article on ‘comp.unix.wizards’ saying that you
have just viewed the file in question.  This feature can’t be turned
off.


File: gnus.info,  Node: Shell Archives,  Next: PostScript Files,  Prev: Uuencoded Articles,  Up: Decoding Articles

4.17.2 Shell Archives
---------------------

Shell archives (“shar files”) used to be a popular way to distribute
sources, but it isn’t used all that much today.  In any case, we have
some commands to deal with these:

‘X s’
     Unshars the current series (‘gnus-uu-decode-unshar’).

‘X S’
     Unshars and saves the current series
     (‘gnus-uu-decode-unshar-and-save’).

‘X v s’
     Unshars and views the current series
     (‘gnus-uu-decode-unshar-view’).

‘X v S’
     Unshars, views and saves the current series
     (‘gnus-uu-decode-unshar-and-save-view’).


File: gnus.info,  Node: PostScript Files,  Next: Other Files,  Prev: Shell Archives,  Up: Decoding Articles

4.17.3 PostScript Files
-----------------------

‘X p’
     Unpack the current PostScript series (‘gnus-uu-decode-postscript’).

‘X P’
     Unpack and save the current PostScript series
     (‘gnus-uu-decode-postscript-and-save’).

‘X v p’
     View the current PostScript series
     (‘gnus-uu-decode-postscript-view’).

‘X v P’
     View and save the current PostScript series
     (‘gnus-uu-decode-postscript-and-save-view’).


File: gnus.info,  Node: Other Files,  Next: Decoding Variables,  Prev: PostScript Files,  Up: Decoding Articles

4.17.4 Other Files
------------------

‘X o’
     Save the current series (‘gnus-uu-decode-save’).

‘X b’
     Unbinhex the current series (‘gnus-uu-decode-binhex’).  This
     doesn’t really work yet.

‘X Y’
     yEnc-decode the current series and save it (‘gnus-uu-decode-yenc’).


File: gnus.info,  Node: Decoding Variables,  Next: Viewing Files,  Prev: Other Files,  Up: Decoding Articles

4.17.5 Decoding Variables
-------------------------

Adjective, not verb.

* Menu:

* Rule Variables::              Variables that say how a file is to be viewed.
* Other Decode Variables::      Other decode variables.
* Uuencoding and Posting::      Variables for customizing uuencoding.


File: gnus.info,  Node: Rule Variables,  Next: Other Decode Variables,  Up: Decoding Variables

4.17.5.1 Rule Variables
.......................

Gnus uses “rule variables” to decide how to view a file.  All these
variables are of the form

           (list '(regexp1 command2)
                 '(regexp2 command2)
                 ...)

‘gnus-uu-user-view-rules’
     This variable is consulted first when viewing files.  If you wish
     to use, for instance, ‘sox’ to convert an ‘.au’ sound file, you
     could say something like:
          (setq gnus-uu-user-view-rules
                (list '("\\\\.au$" "sox %s -t .aiff > /dev/audio")))

‘gnus-uu-user-view-rules-end’
     This variable is consulted if Gnus couldn’t make any matches from
     the user and default view rules.

‘gnus-uu-user-archive-rules’
     This variable can be used to say what commands should be used to
     unpack archives.


File: gnus.info,  Node: Other Decode Variables,  Next: Uuencoding and Posting,  Prev: Rule Variables,  Up: Decoding Variables

4.17.5.2 Other Decode Variables
...............................

‘gnus-uu-grabbed-file-functions’
     All functions in this list will be called right after each file has
     been successfully decoded—so that you can move or view files right
     away, and don’t have to wait for all files to be decoded before you
     can do anything.  Ready-made functions you can put in this list
     are:

     ‘gnus-uu-grab-view’
          View the file.

     ‘gnus-uu-grab-move’
          Move the file (if you’re using a saving function.)

‘gnus-uu-be-dangerous’
     Specifies what to do if unusual situations arise during decoding.
     If ‘nil’, be as conservative as possible.  If ‘t’, ignore things
     that didn’t work, and overwrite existing files.  Otherwise, ask
     each time.

‘gnus-uu-ignore-files-by-name’
     Files with name matching this regular expression won’t be viewed.

‘gnus-uu-ignore-files-by-type’
     Files with a MIME type matching this variable won’t be viewed.
     Note that Gnus tries to guess what type the file is based on the
     name.  ‘gnus-uu’ is not a MIME package (yet), so this is slightly
     kludgy.

‘gnus-uu-tmp-dir’
     Where ‘gnus-uu’ does its work.

‘gnus-uu-do-not-unpack-archives’
     Non-‘nil’ means that ‘gnus-uu’ won’t peek inside archives looking
     for files to display.

‘gnus-uu-view-and-save’
     Non-‘nil’ means that the user will always be asked to save a file
     after viewing it.

‘gnus-uu-ignore-default-view-rules’
     Non-‘nil’ means that ‘gnus-uu’ will ignore the default viewing
     rules.

‘gnus-uu-ignore-default-archive-rules’
     Non-‘nil’ means that ‘gnus-uu’ will ignore the default archive
     unpacking commands.

‘gnus-uu-kill-carriage-return’
     Non-‘nil’ means that ‘gnus-uu’ will strip all carriage returns from
     articles.

‘gnus-uu-unmark-articles-not-decoded’
     Non-‘nil’ means that ‘gnus-uu’ will mark unsuccessfully decoded
     articles as unread.

‘gnus-uu-correct-stripped-uucode’
     Non-‘nil’ means that ‘gnus-uu’ will _try_ to fix uuencoded files
     that have had trailing spaces deleted.

‘gnus-uu-pre-uudecode-hook’
     Hook run before sending a message to ‘uudecode’.

‘gnus-uu-save-in-digest’
     Non-‘nil’ means that ‘gnus-uu’, when asked to save without
     decoding, will save in digests.  If this variable is ‘nil’,
     ‘gnus-uu’ will just save everything in a file without any
     embellishments.  The digesting almost conforms to RFC 1153—no easy
     way to specify any meaningful volume and issue numbers were found,
     so I simply dropped them.


File: gnus.info,  Node: Uuencoding and Posting,  Prev: Other Decode Variables,  Up: Decoding Variables

4.17.5.3 Uuencoding and Posting
...............................

‘gnus-uu-post-include-before-composing’
     Non-‘nil’ means that ‘gnus-uu’ will ask for a file to encode before
     you compose the article.  If this variable is ‘t’, you can either
     include an encoded file with ‘C-c C-i’ or have one included for you
     when you post the article.

‘gnus-uu-post-length’
     Maximum length of an article.  The encoded file will be split into
     how many articles it takes to post the entire file.

‘gnus-uu-post-threaded’
     Non-‘nil’ means that ‘gnus-uu’ will post the encoded file in a
     thread.  This may not be smart, as no other decoder I have seen is
     able to follow threads when collecting uuencoded articles.  (Well,
     I have seen one package that does that—‘gnus-uu’, but somehow, I
     don’t think that counts...) Default is ‘nil’.

‘gnus-uu-post-separate-description’
     Non-‘nil’ means that the description will be posted in a separate
     article.  The first article will typically be numbered (0/x).  If
     this variable is ‘nil’, the description the user enters will be
     included at the beginning of the first article, which will be
     numbered (1/x).  Default is ‘t’.


File: gnus.info,  Node: Viewing Files,  Prev: Decoding Variables,  Up: Decoding Articles

4.17.6 Viewing Files
--------------------

After decoding, if the file is some sort of archive, Gnus will attempt
to unpack the archive and see if any of the files in the archive can be
viewed.  For instance, if you have a gzipped tar file ‘pics.tar.gz’
containing the files ‘pic1.jpg’ and ‘pic2.gif’, Gnus will uncompress and
de-tar the main file, and then view the two pictures.  This unpacking
process is recursive, so if the archive contains archives of archives,
it’ll all be unpacked.

   Finally, Gnus will normally insert a “pseudo-article” for each
extracted file into the summary buffer.  If you go to these “articles”,
you will be prompted for a command to run (usually Gnus will make a
suggestion), and then the command will be run.

   If ‘gnus-view-pseudo-asynchronously’ is ‘nil’, Emacs will wait until
the viewing is done before proceeding.

   If ‘gnus-view-pseudos’ is ‘automatic’, Gnus will not insert the
pseudo-articles into the summary buffer, but view them immediately.  If
this variable is ‘not-confirm’, the user won’t even be asked for a
confirmation before viewing is done.

   If ‘gnus-view-pseudos-separately’ is non-‘nil’, one pseudo-article
will be created for each file to be viewed.  If ‘nil’, all files that
use the same viewing command will be given as a list of parameters to
that command.

   If ‘gnus-insert-pseudo-articles’ is non-‘nil’, insert pseudo-articles
when decoding.  It is ‘t’ by default.

   So; there you are, reading your _pseudo-articles_ in your _virtual
newsgroup_ from the _virtual server_; and you think: Why isn’t anything
real anymore?  How did we get here?


File: gnus.info,  Node: Article Treatment,  Next: MIME Commands,  Prev: Decoding Articles,  Up: Summary Buffer

# /. 4.18 Article Treatment
==========================

Reading through this huge manual, you may have quite forgotten that the
object of newsreaders is to actually, like, read what people have
written.  Reading articles.  Unfortunately, people are quite bad at
writing, so there are tons of functions and variables to make reading
these articles easier.

* Menu:

* Article Highlighting::        You want to make the article look like fruit salad.
* Article Fontifying::          Making emphasized text look nice.
* Article Hiding::              You also want to make certain info go away.
* Article Washing::             Lots of way-neat functions to make life better.
* Article Header::              Doing various header transformations.
* Article Buttons::             Click on URLs, Message-IDs, addresses and the like.
* Article Button Levels::       Controlling appearance of buttons.
* Article Date::                Grumble, UT!
* Article Display::             Display various stuff:
                                X-Face, Picons, Gravatars, Smileys.
* Article Signature::           What is a signature?
* Article Miscellanea::         Various other stuff.


File: gnus.info,  Node: Article Highlighting,  Next: Article Fontifying,  Up: Article Treatment

4.18.1 Article Highlighting
---------------------------

Not only do you want your article buffer to look like fruit salad, but
you want it to look like technicolor fruit salad.

‘W H a’
     Do much highlighting of the current article
     (‘gnus-article-highlight’).  This function highlights header, cited
     text, the signature, and adds buttons to the body and the head.

‘W H h’
     Highlight the headers (‘gnus-article-highlight-headers’).  The
     highlighting will be done according to the ‘gnus-header-face-alist’
     variable, which is a list where each element has the form ‘(REGEXP
     NAME CONTENT)’.  REGEXP is a regular expression for matching the
     header, NAME is the face used for highlighting the header name
     (*note Faces and Fonts::) and CONTENT is the face for highlighting
     the header value.  The first match made will be used.  Note that
     REGEXP shouldn’t have ‘^’ prepended—Gnus will add one.

‘W H c’
     Highlight cited text (‘gnus-article-highlight-citation’).

     Some variables to customize the citation highlights:

     ‘gnus-cite-parse-max-size’
          If the article size in bytes is bigger than this variable
          (which is 25000 by default), no citation highlighting will be
          performed.

     ‘gnus-cite-max-prefix’
          Maximum possible length for a citation prefix (default 20).

     ‘gnus-cite-face-list’
          List of faces used for highlighting citations (*note Faces and
          Fonts::).  When there are citations from multiple articles in
          the same message, Gnus will try to give each citation from
          each article its own face.  This should make it easier to see
          who wrote what.

     ‘gnus-supercite-regexp’
          Regexp matching normal Supercite attribution lines.

     ‘gnus-supercite-secondary-regexp’
          Regexp matching mangled Supercite attribution lines.

     ‘gnus-cite-minimum-match-count’
          Minimum number of identical prefixes we have to see before we
          believe that it’s a citation.

     ‘gnus-cite-attribution-prefix’
          Regexp matching the beginning of an attribution line.

     ‘gnus-cite-attribution-suffix’
          Regexp matching the end of an attribution line.

     ‘gnus-cite-attribution-face’
          Face used for attribution lines.  It is merged with the face
          for the cited text belonging to the attribution.

     ‘gnus-cite-ignore-quoted-from’
          If non-‘nil’, no citation highlighting will be performed on
          lines beginning with ‘>From ’.  Those lines may have been
          quoted by MTAs in order not to mix up with the envelope From
          line.  The default value is ‘t’.

‘W H s’
     Highlight the signature (‘gnus-article-highlight-signature’).
     Everything after ‘gnus-signature-separator’ (*note Article
     Signature::) in an article will be considered a signature and will
     be highlighted with ‘gnus-signature-face’, which is ‘italic’ by
     default.

   *Note Customizing Articles::, for how to highlight articles
automatically.


File: gnus.info,  Node: Article Fontifying,  Next: Article Hiding,  Prev: Article Highlighting,  Up: Article Treatment

4.18.2 Article Fontifying
-------------------------

People commonly add emphasis to words in news articles by writing things
like ‘_this_’ or ‘*this*’ or ‘/this/’.  Gnus can make this look nicer by
running the article through the ‘W e’ (‘gnus-article-emphasize’)
command.

   How the emphasis is computed is controlled by the
‘gnus-emphasis-alist’ variable.  This is an alist where the first
element is a regular expression to be matched.  The second is a number
that says what regular expression grouping is used to find the entire
emphasized word.  The third is a number that says what regexp grouping
should be displayed and highlighted.  (The text between these two
groupings will be hidden.)  The fourth is the face used for
highlighting.

     (setq gnus-emphasis-alist
           '(("_\\(\\w+\\)_" 0 1 gnus-emphasis-underline)
             ("\\*\\(\\w+\\)\\*" 0 1 gnus-emphasis-bold)))

   By default, there are seven rules, and they use the following faces:
‘gnus-emphasis-bold’, ‘gnus-emphasis-italic’, ‘gnus-emphasis-underline’,
‘gnus-emphasis-bold-italic’, ‘gnus-emphasis-underline-italic’,
‘gnus-emphasis-underline-bold’, and
‘gnus-emphasis-underline-bold-italic’.

   If you want to change these faces, you can either use ‘M-x
customize’, or you can use ‘copy-face’.  For instance, if you want to
make ‘gnus-emphasis-italic’ use a red face instead, you could say
something like:

     (copy-face 'red 'gnus-emphasis-italic)

   If you want to highlight arbitrary words, you can use the
‘gnus-group-highlight-words-alist’ variable, which uses the same syntax
as ‘gnus-emphasis-alist’.  The ‘highlight-words’ group parameter (*note
Group Parameters::) can also be used.

   *Note Customizing Articles::, for how to fontize articles
automatically.


File: gnus.info,  Node: Article Hiding,  Next: Article Washing,  Prev: Article Fontifying,  Up: Article Treatment

4.18.3 Article Hiding
---------------------

Or rather, hiding certain things in each article.  There usually is much
too much cruft in most articles.

‘W W a’
     Do quite a lot of hiding on the article buffer
     (‘gnus-article-hide’).  In particular, this function will hide
     headers, PGP, cited text and the signature.

‘W W h’
     Hide headers (‘gnus-article-hide-headers’).  *Note Hiding
     Headers::.

‘W W b’
     Hide headers that aren’t particularly interesting
     (‘gnus-article-hide-boring-headers’).  *Note Hiding Headers::.

‘W W s’
     Hide signature (‘gnus-article-hide-signature’).  *Note Article
     Signature::.

‘W W l’
     Strip list identifiers specified in ‘gnus-list-identifiers’.  These
     are strings some mailing list servers add to the beginning of all
     ‘Subject’ headers—for example, ‘[zebra 4711]’.  Any leading ‘Re: ’
     is skipped before stripping.  ‘gnus-list-identifiers’ may not
     contain ‘\\(..\\)’.

     ‘gnus-list-identifiers’
          A regular expression that matches list identifiers to be
          removed from subject.  This can also be a list of regular
          expressions.

‘W W P’
     Hide PEM (privacy enhanced messages) cruft
     (‘gnus-article-hide-pem’).

‘W W B’
     Strip the banner specified by the ‘banner’ group parameter
     (‘gnus-article-strip-banner’).  This is mainly used to hide those
     annoying banners and/or signatures that some mailing lists and
     moderated groups adds to all the messages.  The way to use this
     function is to add the ‘banner’ group parameter (*note Group
     Parameters::) to the group you want banners stripped from.  The
     parameter either be a string, which will be interpreted as a
     regular expression matching text to be removed, or the symbol
     ‘signature’, meaning that the (last) signature should be removed,
     or other symbol, meaning that the corresponding regular expression
     in ‘gnus-article-banner-alist’ is used.

     For instance:

          (setq gnus-article-banner-alist
                ((googleGroups .
                 "^\n*--~--~---------\\(.+\n\\)+")))

     Regardless of a group, you can hide things like advertisements only
     when the sender of an article has a certain mail address specified
     in ‘gnus-article-address-banner-alist’.

     ‘gnus-article-address-banner-alist’
          Alist of mail addresses and banners.  Each element has the
          form ‘(ADDRESS . BANNER)’, where ADDRESS is a regexp matching
          a mail address in the From header, BANNER is one of a symbol
          ‘signature’, an item in ‘gnus-article-banner-alist’, a regexp
          and ‘nil’.  If ADDRESS matches author’s mail address, it will
          remove things like advertisements.  For example, if a sender
          has the mail address ‘hail@yoo-hoo.co.jp’ and there is a
          banner something like ‘Do You Yoo-hoo!?’ in all articles he
          sends, you can use the following element to remove them:

               ("@yoo-hoo\\.co\\.jp\\'" .
                "\n_+\nDo You Yoo-hoo!\\?\n.*\n.*\n")

‘W W c’
     Hide citation (‘gnus-article-hide-citation’).  Some variables for
     customizing the hiding:

     ‘gnus-cited-opened-text-button-line-format’
     ‘gnus-cited-closed-text-button-line-format’
          Gnus adds buttons to show where the cited text has been
          hidden, and to allow toggle hiding the text.  The format of
          the variable is specified by these format-like variable (*note
          Formatting Variables::).  These specs are valid:

          ‘b’
               Starting point of the hidden text.
          ‘e’
               Ending point of the hidden text.
          ‘l’
               Number of characters in the hidden region.
          ‘n’
               Number of lines of hidden text.

     ‘gnus-cited-lines-visible’
          The number of lines at the beginning of the cited text to
          leave shown.  This can also be a cons cell with the number of
          lines at the top and bottom of the text, respectively, to
          remain visible.

‘W W C-c’

     Hide citation (‘gnus-article-hide-citation-maybe’) depending on the
     following two variables:

     ‘gnus-cite-hide-percentage’
          If the cited text is of a bigger percentage than this variable
          (default 50), hide the cited text.

     ‘gnus-cite-hide-absolute’
          The cited text must have at least this length (default 10)
          before it is hidden.

‘W W C’
     Hide cited text in articles that aren’t roots
     (‘gnus-article-hide-citation-in-followups’).  This isn’t very
     useful as an interactive command, but might be a handy function to
     stick have happen automatically (*note Customizing Articles::).

   All these “hiding” commands are toggles, but if you give a negative
prefix to these commands, they will show what they have previously
hidden.  If you give a positive prefix, they will always hide.

   Also *note Article Highlighting:: for further variables for citation
customization.

   *Note Customizing Articles::, for how to hide article elements
automatically.


File: gnus.info,  Node: Article Washing,  Next: Article Header,  Prev: Article Hiding,  Up: Article Treatment

4.18.4 Article Washing
----------------------

We call this “article washing” for a really good reason.  Namely, the
‘A’ key was taken, so we had to use the ‘W’ key instead.

   “Washing” is defined by us as “changing something from something to
something else”, but normally results in something looking better.
Cleaner, perhaps.

   *Note Customizing Articles::, if you want to change how Gnus displays
articles by default.

‘C-u g’
     This is not really washing, it’s sort of the opposite of washing.
     If you type this, you see the article exactly as it exists on disk
     or on the server.

‘g’
     Force redisplaying of the current article
     (‘gnus-summary-show-article’).  This is also not really washing.
     If you type this, you see the article without any previously
     applied interactive Washing functions but with all default
     treatments (*note Customizing Articles::).

‘W l’
     Remove page breaks from the current article
     (‘gnus-summary-stop-page-breaking’).  *Note Misc Article::, for
     page delimiters.

‘W r’
     Do a Caesar rotate (rot13) on the article buffer
     (‘gnus-summary-caesar-message’).  Unreadable articles that tell you
     to read them with Caesar rotate or rot13.  (Typically offensive
     jokes and such.)

     It’s commonly called “rot13” because each letter is rotated 13
     positions in the alphabet, e.g., ‘B’ (letter #2) -> ‘O’ (letter
     #15).  It is sometimes referred to as “Caesar rotate” because
     Caesar is rumored to have employed this form of, uh, somewhat weak
     encryption.

‘W m’
     Morse decode the article buffer (‘gnus-summary-morse-message’).

‘W i’
     Decode IDNA encoded domain names in the current articles.  IDNA
     encoded domain names looks like ‘xn--bar’.  If a string remain
     unencoded after running invoking this, it is likely an invalid IDNA
     string (‘xn--bar’ is invalid).  You must have GNU Libidn
     (<https://www.gnu.org/software/libidn/>) installed for this command
     to work.

‘W t’
‘t’
     Toggle whether to display all headers in the article buffer
     (‘gnus-summary-toggle-header’).

‘W v’
     Toggle whether to display all headers in the article buffer
     permanently (‘gnus-summary-verbose-headers’).

‘W o’
     Treat overstrike (‘gnus-article-treat-overstrike’).

‘W d’
     Treat “Microsoft smartquotes” according to
     ‘gnus-article-smartquotes-map’ (‘gnus-article-treat-smartquotes’).
     Note that this function guesses whether a character is a smartquote
     or not, so it should only be used interactively.

     Smartquotes are Microsoft’s unilateral extension to the character
     map in an attempt to provide more quoting characters.  If you see
     something like ‘\222’ or ‘\264’ where you’re expecting some kind of
     apostrophe or quotation mark, then try this wash.

‘W U’
     Translate many non-ASCII characters into their ASCII equivalents
     (‘gnus-article-treat-non-ascii’).  This is mostly useful if you’re
     on a terminal that has a limited font and doesn’t show accented
     characters, “advanced” punctuation, and the like.  For instance,
     ‘»’ is translated into ‘>>’, and so on.

‘W Y f’
     Full deuglify of broken Outlook (Express) articles: Treat
     \"smartquotes\", unwrap lines, repair attribution and rearrange
     citation (‘gnus-article-outlook-deuglify-article’).

‘W Y u’
     Unwrap lines that appear to be wrapped citation lines.  You can
     control what lines will be unwrapped by frobbing
     ‘gnus-outlook-deuglify-unwrap-min’ and
     ‘gnus-outlook-deuglify-unwrap-max’, indicating the minimum and
     maximum length of an unwrapped citation line.
     (‘gnus-article-outlook-unwrap-lines’).

‘W Y a’
     Repair a broken attribution line.
     (‘gnus-article-outlook-repair-attribution’).

‘W Y c’
     Repair broken citations by rearranging the text.
     (‘gnus-article-outlook-rearrange-citation’).

‘W w’
     Do word wrap (‘gnus-article-fill-cited-article’).

     You can give the command a numerical prefix to specify the width to
     use when filling.

‘W Q’
     Fill long lines (‘gnus-article-fill-long-lines’).

     You can give the command a numerical prefix to specify the width to
     use when filling.

‘W C’
     Capitalize the first word in each sentence
     (‘gnus-article-capitalize-sentences’).

‘W c’
     Translate CRLF pairs (i.e., ‘^M’s on the end of the lines) into LF
     (this takes care of DOS line endings), and then translate any
     remaining CRs into LF (this takes care of Mac line endings)
     (‘gnus-article-remove-cr’).

‘W q’
     Treat quoted-printable (‘gnus-article-de-quoted-unreadable’).
     Quoted-Printable is one common MIME encoding employed when sending
     non-ASCII (i.e., 8-bit) articles.  It typically makes strings like
     ‘déjà vu’ look like ‘d=E9j=E0 vu’, which doesn’t look very readable
     to me.  Note that this is usually done automatically by Gnus if the
     message in question has a ‘Content-Transfer-Encoding’ header that
     says that this encoding has been done.  If a prefix is given, a
     charset will be asked for.

‘W 6’
     Treat base64 (‘gnus-article-de-base64-unreadable’).  Base64 is one
     common MIME encoding employed when sending non-ASCII (i.e., 8-bit)
     articles.  Note that this is usually done automatically by Gnus if
     the message in question has a ‘Content-Transfer-Encoding’ header
     that says that this encoding has been done.  If a prefix is given,
     a charset will be asked for.

‘W Z’
     Treat HZ or HZP (‘gnus-article-decode-HZ’).  HZ (or HZP) is one
     common encoding employed when sending Chinese articles.  It
     typically makes strings look like ‘~{<:Ky2;S{#,NpJ)l6HK!#~}’.

‘W A’
     Translate ANSI SGR control sequences into overlays or extents
     (‘gnus-article-treat-ansi-sequences’).  ANSI sequences are used in
     some Chinese hierarchies for highlighting.

‘W u’
     Remove newlines from within URLs.  Some mailers insert newlines
     into outgoing email messages to keep lines short.  This
     reformatting can split long URLs onto multiple lines.  Repair those
     URLs by removing the newlines (‘gnus-article-unsplit-urls’).

‘W h’
     Treat HTML (‘gnus-article-wash-html’).  Note that this is usually
     done automatically by Gnus if the message in question has a
     ‘Content-Type’ header that says that the message is HTML.

     If a prefix is given, a charset will be asked for.  If it is a
     number, the charset defined in
     ‘gnus-summary-show-article-charset-alist’ (*note Paging the
     Article::) will be used.

     The default is to use the function specified by
     ‘mm-text-html-renderer’ (*note Display Customization:
     (emacs-mime)Display Customization.) to convert the HTML.
     Pre-defined functions you can use include:

     ‘shr’
          Use Gnus simple html renderer.

     ‘gnus-w3m’
          Use Gnus rendered based on w3m.

     ‘w3m’
          Use emacs-w3m (http://emacs-w3m.namazu.org/).

     ‘w3m-standalone’
          Use w3m (https://w3m.sourceforge.net/).

     ‘links’
          Use Links (http://links.twibright.com/).

     ‘lynx’
          Use Lynx (https://lynx.browser.org/).

‘W D F’
     Toggle proportional fonts for HTML articles.  This temporarily
     changes the ‘shr-use-fonts’ variable in the current article buffer.

‘W b’
     Add clickable buttons to the article (‘gnus-article-add-buttons’).
     *Note Article Buttons::.

‘W B’
     Add clickable buttons to the article headers
     (‘gnus-article-add-buttons-to-head’).

‘W p’
     Verify a signed control message (‘gnus-article-verify-x-pgp-sig’).
     Control messages such as ‘newgroup’ and ‘checkgroups’ are usually
     signed by the hierarchy maintainer.  You need to add the PGP public
     key of the maintainer to your keyring to verify the message.(1)

‘W s’
     Verify a signed (PGP, PGP/MIME or S/MIME) message
     (‘gnus-summary-force-verify-and-decrypt’).  *Note Security::.

‘W a’
     Strip headers like the ‘X-No-Archive’ header from the beginning of
     article bodies (‘gnus-article-strip-headers-in-body’).

‘W E l’
     Remove all blank lines from the beginning of the article
     (‘gnus-article-strip-leading-blank-lines’).

‘W E m’
     Replace all blank lines with empty lines and then all multiple
     empty lines with a single empty line.
     (‘gnus-article-strip-multiple-blank-lines’).

‘W E t’
     Remove all blank lines at the end of the article
     (‘gnus-article-remove-trailing-blank-lines’).

‘W E a’
     Do all the three commands above (‘gnus-article-strip-blank-lines’).

‘W E A’
     Remove all blank lines (‘gnus-article-strip-all-blank-lines’).

‘W E s’
     Remove all white space from the beginning of all lines of the
     article body (‘gnus-article-strip-leading-space’).

‘W E e’
     Remove all white space from the end of all lines of the article
     body (‘gnus-article-strip-trailing-space’).

   *Note Customizing Articles::, for how to wash articles automatically.

   ---------- Footnotes ----------

   (1) PGP keys for many hierarchies are available at
<https://ftp.isc.org/pub/pgpcontrol/README.html>


File: gnus.info,  Node: Article Header,  Next: Article Buttons,  Prev: Article Washing,  Up: Article Treatment

4.18.5 Article Header
---------------------

These commands perform various transformations of article header.

‘W G u’
     Unfold folded header lines (‘gnus-article-treat-unfold-headers’).

‘W G n’
     Fold the ‘Newsgroups’ and ‘Followup-To’ headers
     (‘gnus-article-treat-fold-newsgroups’).

‘W G f’
     Fold all the message headers (‘gnus-article-treat-fold-headers’).

‘W E w’
     Remove excessive whitespace from all headers
     (‘gnus-article-remove-leading-whitespace’).


File: gnus.info,  Node: Article Buttons,  Next: Article Button Levels,  Prev: Article Header,  Up: Article Treatment

4.18.6 Article Buttons
----------------------

People often include references to other stuff in articles, and it would
be nice if Gnus could just fetch whatever it is that people talk about
with the minimum of fuzz when you hit ‘<RET>’ or use the middle mouse
button on these references.

   Gnus adds “buttons” to certain standard references by default:
Well-formed URLs, mail addresses, Message-IDs, Info links, man pages and
Emacs or Gnus related references.  This is controlled by two variables,
one that handles article bodies and one that handles article heads:

‘gnus-button-alist’
     This is an alist where each entry has this form:

          (REGEXP BUTTON-PAR USE-P FUNCTION DATA-PAR)

     REGEXP
          All text that match this regular expression (case insensitive)
          will be considered an external reference.  Here’s a typical
          regexp that matches embedded URLs: ‘<URL:\\([^\n\r>]*\\)>’.
          This can also be a variable containing a regexp, useful
          variables to use include ‘gnus-button-url-regexp’ and
          ‘gnus-button-mid-or-mail-regexp’.

     BUTTON-PAR
          Gnus has to know which parts of the matches is to be
          highlighted.  This is a number that says what sub-expression
          of the regexp is to be highlighted.  If you want it all
          highlighted, you use 0 here.

     USE-P
          This form will be ‘eval’ed, and if the result is non-‘nil’,
          this is considered a match.  This is useful if you want extra
          sifting to avoid false matches.  Often variables named
          ‘gnus-button-*-level’ are used here, *Note Article Button
          Levels::, but any other form may be used too.

     FUNCTION
          This function will be called when you click on this button.

     DATA-PAR
          As with BUTTON-PAR, this is a sub-expression number, but this
          one says which part of the match is to be sent as data to
          FUNCTION.

     So the full entry for buttonizing URLs is then

          ("<URL:\\([^\n\r>]*\\)>" 0 t gnus-button-url 1)

‘gnus-header-button-alist’
     This is just like the other alist, except that it is applied to the
     article head only, and that each entry has an additional element
     that is used to say what headers to apply the buttonize coding to:

          (HEADER REGEXP BUTTON-PAR USE-P FUNCTION DATA-PAR)

     HEADER is a regular expression.

4.18.6.1 Related variables and functions
........................................

‘gnus-button-*-level’
     *Note Article Button Levels::.

‘gnus-button-url-regexp’
     A regular expression that matches embedded URLs.  It is used in the
     default values of the variables above.

‘gnus-button-man-handler’
     The function to use for displaying man pages.  It must take at
     least one argument with a string naming the man page.

‘gnus-button-mid-or-mail-regexp’
     Regular expression that matches a message ID or a mail address.

‘gnus-button-prefer-mid-or-mail’
     This variable determines what to do when the button on a string as
     ‘foo123@bar.invalid’ is pushed.  Strings like this can be either a
     message ID or a mail address.  If it is one of the symbols ‘mid’ or
     ‘mail’, Gnus will always assume that the string is a message ID or
     a mail address, respectively.  If this variable is set to the
     symbol ‘ask’, always query the user what to do.  If it is a
     function, this function will be called with the string as its only
     argument.  The function must return ‘mid’, ‘mail’, ‘invalid’ or
     ‘ask’.  The default value is the function
     ‘gnus-button-mid-or-mail-heuristic’.

‘gnus-button-mid-or-mail-heuristic’
     Function that guesses whether its argument is a message ID or a
     mail address.  Returns ‘mid’ if it’s a message ID, ‘mail’ if it’s a
     mail address, ‘ask’ if unsure and ‘invalid’ if the string is
     invalid.

‘gnus-button-mid-or-mail-heuristic-alist’
     An alist of ‘(RATE . REGEXP)’ pairs used by the function
     ‘gnus-button-mid-or-mail-heuristic’.

‘gnus-article-button-face’
     Face used on buttons.

‘gnus-article-mouse-face’
     Face used when the mouse cursor is over a button.

   *Note Customizing Articles::, for how to buttonize articles
automatically.


File: gnus.info,  Node: Article Button Levels,  Next: Article Date,  Prev: Article Buttons,  Up: Article Treatment

4.18.7 Article button levels
----------------------------

The higher the value of the variables ‘gnus-button-*-level’, the more
buttons will appear.  If the level is zero, no corresponding buttons are
displayed.  With the default value (which is 5) you should already see
quite a lot of buttons.  With higher levels, you will see more buttons,
but you may also get more false positives.  To avoid them, you can set
the variables ‘gnus-button-*-level’ local to specific groups (*note
Group Parameters::).  Here’s an example for the variable
‘gnus-parameters’:

     ;; increase ‘gnus-button-*-level’ in some groups:
     (setq gnus-parameters
           '(("\\<\\(emacs\\|gnus\\)\\>" (gnus-button-emacs-level 10))
             ("\\<unix\\>"               (gnus-button-man-level 10))
             ("\\<tex\\>"                (gnus-button-tex-level 10))))

‘gnus-button-browse-level’
     Controls the display of references to message IDs, mail addresses
     and news URLs.  Related variables and functions include
     ‘gnus-button-url-regexp’, ‘browse-url’, and
     ‘browse-url-browser-function’.

‘gnus-button-emacs-level’
     Controls the display of Emacs or Gnus references.  Related
     functions are ‘gnus-button-handle-custom’,
     ‘gnus-button-handle-describe-function’,
     ‘gnus-button-handle-describe-variable’,
     ‘gnus-button-handle-symbol’, ‘gnus-button-handle-describe-key’,
     ‘gnus-button-handle-apropos’, ‘gnus-button-handle-apropos-command’,
     ‘gnus-button-handle-apropos-variable’,
     ‘gnus-button-handle-apropos-documentation’, and
     ‘gnus-button-handle-library’.

‘gnus-button-man-level’
     Controls the display of references to (Unix) man pages.  See
     ‘gnus-button-man-handler’.

‘gnus-button-message-level’
     Controls the display of message IDs, mail addresses and news URLs.
     Related variables and functions include
     ‘gnus-button-mid-or-mail-regexp’, ‘gnus-button-prefer-mid-or-mail’,
     ‘gnus-button-mid-or-mail-heuristic’, and
     ‘gnus-button-mid-or-mail-heuristic-alist’.


File: gnus.info,  Node: Article Date,  Next: Article Display,  Prev: Article Button Levels,  Up: Article Treatment

4.18.8 Article Date
-------------------

The date is most likely generated in some obscure timezone you’ve never
heard of, so it’s quite nice to be able to find out what the time was
when the article was sent.

‘W T u’
     Display the date in UT (aka.  GMT, aka ZULU)
     (‘gnus-article-date-ut’).

‘W T i’
     Display the date in international format, aka.  ISO 8601
     (‘gnus-article-date-iso8601’).

‘W T l’
     Display the date in the local timezone (‘gnus-article-date-local’).

‘W T p’
     Display the date in a format that’s easily pronounceable in English
     (‘gnus-article-date-english’).

‘W T s’
     Display the date using a user-defined format
     (‘gnus-article-date-user’).  The format is specified by the
     ‘gnus-article-time-format’ variable, and is a string that’s passed
     to ‘format-time-string’.  See the documentation of that variable
     for a list of possible format specs.

‘W T e’
     Say how much time has elapsed between the article was posted and
     now (‘gnus-article-date-lapsed’).  It looks something like:

          Date: 6 weeks, 4 days, 1 hour, 3 minutes, 8 seconds ago

     To make this line updated continually, set the
     ‘gnus-article-update-date-headers’ variable to the frequency in
     seconds (the default is ‘nil’).

‘W T o’
     Display the original date (‘gnus-article-date-original’).  This can
     be useful if you normally use some other conversion function and
     are worried that it might be doing something totally wrong.  Say,
     claiming that the article was posted in 1854.  Although something
     like that is _totally_ impossible.  Don’t you trust me?  *titter*

   *Note Customizing Articles::, for how to display the date in your
preferred format automatically.


File: gnus.info,  Node: Article Display,  Next: Article Signature,  Prev: Article Date,  Up: Article Treatment

4.18.9 Article Display
----------------------

These commands add various frivolous display gimmicks to the article
buffer in Emacs versions that support them.

   ‘X-Face’ headers are small black-and-white images supplied by the
message headers (*note X-Face::).

   ‘Face’ headers are small colored images supplied by the message
headers (*note Face::).

   Smileys are those little ‘:-)’ symbols that people like to litter
their messages with (*note Smileys::).

   Picons, on the other hand, reside on your own system, and Gnus will
try to match the headers to what you have (*note Picons::).

   Gravatars reside on-line and are fetched from
<https://en.gravatar.com/> (*note Gravatars::).

   All these functions are toggles—if the elements already exist,
they’ll be removed.

‘W D x’
     Display an ‘X-Face’ in the ‘From’ header.
     (‘gnus-article-display-x-face’).

‘W D d’
     Display a ‘Face’ in the ‘From’ header.
     (‘gnus-article-display-face’).

‘W D s’
     Display smileys (‘gnus-treat-smiley’).

‘W D f’
     Piconify the ‘From’ header (‘gnus-treat-from-picon’).

‘W D m’
     Piconify all mail headers (i.e., ‘Cc’, ‘To’)
     (‘gnus-treat-mail-picon’).

‘W D n’
     Piconify all news headers (i.e., ‘Newsgroups’ and ‘Followup-To’)
     (‘gnus-treat-newsgroups-picon’).

‘W D g’
     Gravatarify the ‘From’ header (‘gnus-treat-from-gravatar’).

‘W D h’
     Gravatarify all mail headers (i.e., ‘Cc’, ‘To’)
     (‘gnus-treat-from-gravatar’).

‘W D e’
     Some symbols have both a non-emoji presentation and an emoji
     presentation.  This command will make Gnus choose the emoji
     presentation (‘gnus-article-emojize-symbols’).

‘W D D’
     Remove all images from the article buffer
     (‘gnus-article-remove-images’).

‘W D W’
     If you’re reading an HTML article rendered with
     ‘gnus-article-html’, then you can insert any blocked images in the
     buffer with this command.  (‘gnus-html-show-images’).


File: gnus.info,  Node: Article Signature,  Next: Article Miscellanea,  Prev: Article Display,  Up: Article Treatment

4.18.10 Article Signature
-------------------------

Each article is divided into two parts—the head and the body.  The body
can be divided into a signature part and a text part.  The variable that
says what is to be considered a signature is ‘gnus-signature-separator’.
This is normally the standard ‘^-- $’ as mandated by RFC 5536.  However,
many people use non-standard signature separators, so this variable can
also be a list of regular expressions to be tested, one by one.
(Searches are done from the end of the body towards the beginning.)  One
likely value is:

     (setq gnus-signature-separator
           '("^-- $"         ; The standard
             "^-- *$"        ; A common mangling
             "^-------*$"    ; Many people just use a looong
                             ; line of dashes.  Shame!
             "^ *--------*$" ; Double-shame!
             "^________*$"   ; Underscores are also popular
             "^========*$")) ; Pervert!

   The more permissive you are, the more likely it is that you’ll get
false positives.

   ‘gnus-signature-limit’ provides a limit to what is considered a
signature when displaying articles.

  1. If it is an integer, no signature may be longer (in characters)
     than that integer.
  2. If it is a floating point number, no signature may be longer (in
     lines) than that number.
  3. If it is a function, the function will be called without any
     parameters, and if it returns ‘nil’, there is no signature in the
     buffer.
  4. If it is a string, it will be used as a regexp.  If it matches, the
     text in question is not a signature.

   This variable can also be a list where the elements may be of the
types listed above.  Here’s an example:

     (setq gnus-signature-limit
           '(200.0 "^---*Forwarded article"))

   This means that if there are more than 200 lines after the signature
separator, or the text after the signature separator is matched by the
regular expression ‘^---*Forwarded article’, then it isn’t a signature
after all.


File: gnus.info,  Node: Article Miscellanea,  Prev: Article Signature,  Up: Article Treatment

4.18.11 Article Miscellanea
---------------------------

‘A t’
     Translate the article from one language to another
     (‘gnus-article-babel’).


File: gnus.info,  Node: MIME Commands,  Next: Charsets,  Prev: Article Treatment,  Up: Summary Buffer

# /. 4.19 MIME Commands
======================

The following commands all understand the numerical prefix.  For
instance, ‘3 K v’ means “view the third MIME part”.

‘b’
‘K v’
     View the MIME part.

‘K o’
     Save the MIME part.

‘K O’
     Prompt for a file name, then save the MIME part and strip it from
     the article.  The stripped MIME object will be referred via the
     message/external-body MIME type.

‘K r’
     Replace the MIME part with an external body.

‘K d’
     Delete the MIME part and add some information about the removed
     part.

‘K c’
     Copy the MIME part.

‘K e’
     View the MIME part externally.

‘K i’
     View the MIME part internally.

‘K |’
     Pipe the MIME part to an external command.

   The rest of these MIME commands do not use the numerical prefix in
the same manner:

‘K H’
     View ‘text/html’ parts of the current article with a WWW browser.
     Inline images embedded in a message using the ‘cid’ scheme, as they
     are generally considered to be safe, will be processed properly.
     The message header is added to the beginning of every HTML part
     unless the prefix argument is given.

     Warning: Spammers use links to images (using the ‘http’ scheme) in
     HTML articles to verify whether you have read the message.  As this
     command passes the HTML content to the browser without eliminating
     these “web bugs” you should only use it for mails from trusted
     senders.

     This command creates temporary files to pass HTML contents
     including images if any to the browser, and deletes them when
     exiting the group (if you want).

‘K b’
     Make all the MIME parts have buttons in front of them.  This is
     mostly useful if you wish to save (or perform other actions) on
     inlined parts.

‘W M h’
     Display MIME part buttons in the end of the header of an article
     (‘gnus-mime-buttonize-attachments-in-header’).  This command
     toggles the display.  Note that buttons to be added to the header
     are only the ones that aren’t inlined in the body.  If you want
     those buttons always to be displayed, set
     ‘gnus-mime-display-attachment-buttons-in-header’ to non-‘nil’.  The
     default is ‘t’.  To change the appearance of buttons, customize
     ‘gnus-header-face-alist’.

‘K m’
     Some multipart messages are transmitted with missing or faulty
     headers.  This command will attempt to “repair” these messages so
     that they can be viewed in a more pleasant manner
     (‘gnus-summary-repair-multipart’).

‘X m’
     Save all parts matching a MIME type to a directory
     (‘gnus-summary-save-parts’).  Understands the process/prefix
     convention (*note Process/Prefix::).

‘M-t’
     Toggle the buttonized display of the article buffer
     (‘gnus-summary-toggle-display-buttonized’).

‘W M w’
     Decode RFC 2047-encoded words in the article headers
     (‘gnus-article-decode-mime-words’).

‘W M c’
     Decode encoded article bodies as well as charsets
     (‘gnus-article-decode-charset’).

     This command looks in the ‘Content-Type’ header to determine the
     charset.  If there is no such header in the article, you can give
     it a prefix, which will prompt for the charset to decode as.  In
     regional groups where people post using some common encoding (but
     do not include MIME headers), you can set the ‘charset’ group/topic
     parameter to the required charset (*note Group Parameters::).

‘W M v’
     View all the MIME parts in the current article
     (‘gnus-mime-view-all-parts’).

   Relevant variables:

‘gnus-ignored-mime-types’
     This is a list of regexps.  MIME types that match a regexp from
     this list will be completely ignored by Gnus.  The default value is
     ‘nil’.

     To have all Vcards be ignored, you’d say something like this:

          (setq gnus-ignored-mime-types
                '("text/x-vcard"))

‘gnus-article-loose-mime’
     If non-‘nil’, Gnus won’t require the ‘MIME-Version’ header before
     interpreting the message as a MIME message.  This helps when
     reading messages from certain broken mail user agents.  The default
     is ‘t’.

‘gnus-article-emulate-mime’
     There are other, non-MIME encoding methods used.  The most common
     is ‘uuencode’, but yEncode is also getting to be popular.  If this
     variable is non-‘nil’, Gnus will look in message bodies to see if
     it finds these encodings, and if so, it’ll run them through the
     Gnus MIME machinery.  The default is ‘t’.  Only single-part yEnc
     encoded attachments can be decoded.  There’s no support for
     encoding in Gnus.

‘gnus-unbuttonized-mime-types’
     This is a list of regexps.  MIME types that match a regexp from
     this list won’t have MIME buttons inserted unless they aren’t
     displayed or this variable is overridden by
     ‘gnus-buttonized-mime-types’.  The default value is ‘(".*/.*")’.
     This variable is only used when ‘gnus-inhibit-mime-unbuttonizing’
     is ‘nil’.

‘gnus-buttonized-mime-types’
     This is a list of regexps.  MIME types that match a regexp from
     this list will have MIME buttons inserted unless they aren’t
     displayed.  This variable overrides ‘gnus-unbuttonized-mime-types’.
     The default value is ‘nil’.  This variable is only used when
     ‘gnus-inhibit-mime-unbuttonizing’ is ‘nil’.

     E.g., to see security buttons but no other buttons, you could set
     this variable to ‘("multipart/signed")’ and leave
     ‘gnus-unbuttonized-mime-types’ at the default value.

     You could also add ‘"multipart/alternative"’ to this list to
     display radio buttons that allow you to choose one of two media
     types those mails include.  See also ‘mm-discouraged-alternatives’
     (*note Display Customization: (emacs-mime)Display Customization.).

‘gnus-inhibit-mime-unbuttonizing’
     If this is non-‘nil’, then all MIME parts get buttons.  The default
     value is ‘nil’.

‘gnus-article-mime-part-function’
     For each MIME part, this function will be called with the MIME
     handle as the parameter.  The function is meant to be used to allow
     users to gather information from the article (e.g., add Vcard info
     to the bbdb database) or to do actions based on parts (e.g.,
     automatically save all jpegs into some directory).

     Here’s an example function the does the latter:

          (defun my-save-all-jpeg-parts (handle)
            (when (equal (car (mm-handle-type handle)) "image/jpeg")
              (with-temp-buffer
                (insert (mm-get-part handle))
                (write-region (point-min) (point-max)
                              (read-file-name "Save jpeg to: ")))))
          (setq gnus-article-mime-part-function
                'my-save-all-jpeg-parts)

‘gnus-mime-multipart-functions’
     Alist of MIME multipart types and functions to handle them.

‘gnus-mime-display-multipart-alternative-as-mixed’
     Display "multipart/alternative" parts as "multipart/mixed".

‘gnus-mime-display-multipart-related-as-mixed’
     Display "multipart/related" parts as "multipart/mixed".

     If displaying ‘text/html’ is discouraged, see
     ‘mm-discouraged-alternatives’, images or other material inside a
     "multipart/related" part might be overlooked when this variable is
     ‘nil’.  *note Display Customization: (emacs-mime)Display
     Customization.

‘gnus-mime-display-multipart-as-mixed’
     Display "multipart" parts as "multipart/mixed".  If ‘t’, it
     overrides ‘nil’ values of
     ‘gnus-mime-display-multipart-alternative-as-mixed’ and
     ‘gnus-mime-display-multipart-related-as-mixed’.

‘mm-file-name-rewrite-functions’
     List of functions used for rewriting file names of MIME parts.
     Each function takes a file name as input and returns a file name.

     Ready-made functions include
     ‘mm-file-name-delete-whitespace’, ‘mm-file-name-trim-whitespace’,
     ‘mm-file-name-collapse-whitespace’, and
     ‘mm-file-name-replace-whitespace’.  The later uses the value of the
     variable ‘mm-file-name-replace-whitespace’ to replace each
     whitespace character in a file name with that string; default value
     is ‘"_"’ (a single underscore).

     The standard functions ‘capitalize’, ‘downcase’, ‘upcase’, and
     ‘upcase-initials’ may be useful, too.

     Everybody knows that whitespace characters in file names are evil,
     except those who don’t know.  If you receive lots of attachments
     from such unenlightened users, you can make live easier by adding

          (setq mm-file-name-rewrite-functions
                '(mm-file-name-trim-whitespace
                  mm-file-name-collapse-whitespace
                  mm-file-name-replace-whitespace))

     to your ‘~/.gnus.el’ file.


File: gnus.info,  Node: Charsets,  Next: Article Commands,  Prev: MIME Commands,  Up: Summary Buffer

# /. 4.20 Charsets
=================

People use different charsets, and we have MIME to let us know what
charsets they use.  Or rather, we wish we had.  Many people use
newsreaders and mailers that do not understand or use MIME, and just
send out messages without saying what character sets they use.  To help
a bit with this, some local news hierarchies have policies that say what
character set is the default.  For instance, the ‘fj’ hierarchy uses
‘iso-2022-jp’.

   This knowledge is encoded in the ‘gnus-group-charset-alist’ variable,
which is an alist of regexps (use the first item to match full group
names) and default charsets to be used when reading these groups.

   In addition, some people do use soi-disant MIME-aware agents that
aren’t.  These blithely mark messages as being in ‘iso-8859-1’ even if
they really are in ‘koi-8’.  To help here, the
‘gnus-newsgroup-ignored-charsets’ variable can be used.  The charsets
that are listed here will be ignored.  The variable can be set on a
group-by-group basis using the group parameters (*note Group
Parameters::).  The default value is ‘(unknown-8bit x-unknown)’, which
includes values some agents insist on having in there.

   When posting, ‘gnus-group-posting-charset-alist’ is used to determine
which charsets should not be encoded using the MIME encodings.  For
instance, some hierarchies discourage using quoted-printable header
encoding.

   This variable is an alist of regexps and permitted unencoded charsets
for posting.  Each element of the alist has the form ‘(’TEST HEADER
BODY-LIST‘)’, where:

TEST
     is either a regular expression matching the newsgroup header or a
     variable to query,
HEADER
     is the charset which may be left unencoded in the header (‘nil’
     means encode all charsets),
BODY-LIST
     is a list of charsets which may be encoded using 8bit
     content-transfer encoding in the body, or one of the special values
     ‘nil’ (always encode using quoted-printable) or ‘t’ (always use
     8bit).

   *Note Encoding Customization: (emacs-mime)Encoding Customization, for
additional variables that control which MIME charsets are used when
sending messages.

   Other charset tricks that may be useful, although not Gnus-specific:

   If there are several MIME charsets that encode the same Emacs
charset, you can choose what charset to use by saying the following:

     (put-charset-property 'cyrillic-iso8859-5
                           'preferred-coding-system 'koi8-r)

   This means that Russian will be encoded using ‘koi8-r’ instead of the
default ‘iso-8859-5’ MIME charset.

   If you want to read messages in ‘koi8-u’, you can cheat and say

     (define-coding-system-alias 'koi8-u 'koi8-r)

   This will almost do the right thing.

   And finally, to read charsets like ‘windows-1251’, you can say
something like

     (codepage-setup 1251)
     (define-coding-system-alias 'windows-1251 'cp1251)


File: gnus.info,  Node: Article Commands,  Next: Summary Sorting,  Prev: Charsets,  Up: Summary Buffer

# /. 4.21 Article Commands
=========================

‘A P’
     Generate and print a PostScript image of the article buffer
     (‘gnus-summary-print-article’).  ‘gnus-ps-print-hook’ will be run
     just before printing the buffer.  An alternative way to print
     article is to use Muttprint (*note Saving Articles::).

‘A C’
     If ‘<backend>-fetch-partial-articles’ is non-‘nil’, Gnus will fetch
     partial articles, if the backend it fetches them from supports it.
     Currently only ‘nnimap’ does.  If you’re looking at a partial
     article, and want to see the complete article instead, then the ‘A
     C’ command (‘gnus-summary-show-complete-article’) will do so.

‘w’
‘A w’
     Scan the article buffer for links, and offer them to the user for
     browsing with ‘browse-url’.  With a prefix argument, browse with
     ‘browse-url-secondary-browser-function’ instead.


File: gnus.info,  Node: Summary Sorting,  Next: Finding the Parent,  Prev: Article Commands,  Up: Summary Buffer

# /. 4.22 Summary Sorting
========================

You can have the summary buffer sorted in various ways, even though I
can’t really see why you’d want that.

‘C-c C-s C-n’
     Sort by article number (‘gnus-summary-sort-by-number’).

‘C-c C-s C-m C-n’
     Sort by most recent article number
     (‘gnus-summary-sort-by-most-recent-number’).

‘C-c C-s C-a’
     Sort by author (‘gnus-summary-sort-by-author’).

‘C-c C-s C-t’
     Sort by recipient (‘gnus-summary-sort-by-recipient’).

‘C-c C-s C-s’
     Sort by subject (‘gnus-summary-sort-by-subject’).

‘C-c C-s C-d’
     Sort by date (‘gnus-summary-sort-by-date’).

‘C-c C-s C-m C-d’
     Sort by most recent date (‘gnus-summary-sort-by-most-recent-date’).

‘C-c C-s C-l’
     Sort by lines (‘gnus-summary-sort-by-lines’).

‘C-c C-s C-c’
     Sort by article length (‘gnus-summary-sort-by-chars’).

‘C-c C-s C-m C-m’
     Sort by article “readedness” marks (‘gnus-summary-sort-by-marks’).

‘C-c C-s C-i’
     Sort by score (‘gnus-summary-sort-by-score’).

‘C-c C-s C-u’
     Sort by newsgroups (‘gnus-summary-sort-by-newsgroups’).

‘C-c C-s C-x’
     Prompts for extra header to sort by (‘gnus-summary-sort-by-extra’).
     An error will be raised if no sort functions for the header are
     defined.

‘C-c C-s C-r’
     Randomize (‘gnus-summary-sort-by-random’).

‘C-c C-s C-o’
     Sort using the default sorting method
     (‘gnus-summary-sort-by-original’).

   These functions will work both when you use threading and when you
don’t use threading.  In the latter case, all summary lines will be
sorted, line by line.  In the former case, sorting will be done on a
root-by-root basis, which might not be what you were looking for.  To
toggle whether to use threading, type ‘T T’ (*note Thread Commands::).

   If a prefix argument if given, the sort order is reversed.


File: gnus.info,  Node: Finding the Parent,  Next: Alternative Approaches,  Prev: Summary Sorting,  Up: Summary Buffer

# /. 4.23 Finding the Parent
===========================

‘^’
     If you’d like to read the parent of the current article, and it is
     not displayed in the summary buffer, you might still be able to.
     That is, if the current group is fetched by NNTP, the parent hasn’t
     expired and the ‘References’ in the current article are not
     mangled, you can just press ‘^’ or ‘A r’
     (‘gnus-summary-refer-parent-article’).  If everything goes well,
     you’ll get the parent.  If the parent is already displayed in the
     summary buffer, point will just move to this article.

     If given a positive numerical prefix, fetch that many articles back
     into the ancestry.  If given a negative numerical prefix, fetch
     just that ancestor.  So if you say ‘3 ^’, Gnus will fetch the
     parent, the grandparent and the great-grandparent of the current
     article.  If you say ‘-3 ^’, Gnus will only fetch the
     great-grandparent of the current article.

‘A R (Summary)’
     Fetch all articles mentioned in the ‘References’ header of the
     article (‘gnus-summary-refer-references’).

‘A T (Summary)’
     Display the full thread where the current article appears
     (‘gnus-summary-refer-thread’).  By default this command looks for
     articles only in the current group.  Some backends (currently only
     ‘nnimap’) know how to find articles in the thread directly.  In
     other cases each header in the current group must be fetched and
     examined, so it usually takes a while.  If you do it often, you may
     consider setting ‘gnus-fetch-old-headers’ to ‘invisible’ (*note
     Filling In Threads::).  This won’t have any visible effects
     normally, but it’ll make this command work a whole lot faster.  Of
     course, it’ll make group entry somewhat slow.

     If ‘gnus-refer-thread-use-search’ is non-‘nil’ then those backends
     that know how to find threads directly will search not just in the
     current group but all groups on the same server.

     The ‘gnus-refer-thread-limit’ variable says how many old (i.e.,
     articles before the first displayed in the current group) headers
     to fetch when doing this command.  The default is 200.  If ‘t’, all
     the available headers will be fetched.  This variable can be
     overridden by giving the ‘A T’ command a numerical prefix.

     In most cases ‘gnus-refer-thread’ adds any articles it finds to the
     current summary buffer.  (When ‘gnus-refer-thread-use-search’ is
     true and the initial referral starts from a summary buffer for a
     non-virtual group this may not be possible.  In this case a new
     summary buffer is created holding a virtual group with the result
     of the thread search.)  If ‘gnus-refer-thread-limit-to-thread’ is
     non-‘nil’ then the summary buffer will be limited to articles in
     the thread.

‘M-^ (Summary)’
     You can also ask Gnus for an arbitrary article, no matter what
     group it belongs to.  ‘M-^’ (‘gnus-summary-refer-article’) will ask
     you for a ‘Message-ID’, which is one of those long, hard-to-read
     thingies that look something like ‘<38o6up$6f2@hymir.ifi.uio.no>’.
     You have to get it all exactly right.  No fuzzy searches, I’m
     afraid.

     Gnus looks for the ‘Message-ID’ in the headers that have already
     been fetched, but also tries all the select methods specified by
     ‘gnus-refer-article-method’ if it is not found.

   If the group you are reading is located on a back end that does not
support fetching by ‘Message-ID’ very well (like ‘nnspool’), you can set
‘gnus-refer-article-method’ to an NNTP method.  It would, perhaps, be
best if the NNTP server you consult is the one updating the spool you
are reading from, but that’s not really necessary.

   It can also be a list of select methods, as well as the special
symbol ‘current’, which means to use the current select method.  If it
is a list, Gnus will try all the methods in the list until it finds a
match.

   Here’s an example setting that will first try the current method, and
then ask Google if that fails:

     (setq gnus-refer-article-method
           '(current
             (nnweb "google" (nnweb-type google))))

   Most of the mail back ends support fetching by ‘Message-ID’, but do
not do a particularly excellent job at it.  That is, ‘nnmbox’,
‘nnbabyl’, ‘nnmaildir’, ‘nnml’, are able to locate articles from any
groups, while ‘nnfolder’, and ‘nnimap’ are only able to locate articles
that have been posted to the current group.  ‘nnmh’ does not support
this at all.

   Fortunately, the special ‘nnregistry’ back end is able to locate
articles in any groups, regardless of their back end (*note fetching by
‘Message-ID’ using the registry: Registry Article Refer Method.).


File: gnus.info,  Node: Alternative Approaches,  Next: Tree Display,  Prev: Finding the Parent,  Up: Summary Buffer

# /. 4.24 Alternative Approaches
===============================

Different people like to read news using different methods.  This being
Gnus, we offer a small selection of minor modes for the summary buffers.

* Menu:

* Pick and Read::               First mark articles and then read them.
* Binary Groups::               Auto-decode all articles.


File: gnus.info,  Node: Pick and Read,  Next: Binary Groups,  Up: Alternative Approaches

4.24.1 Pick and Read
--------------------

Some newsreaders (like ‘nn’ and, uhm, ‘Netnews’ on VM/CMS) use a
two-phased reading interface.  The user first marks in a summary buffer
the articles she wants to read.  Then she starts reading the articles
with just an article buffer displayed.

   Gnus provides a summary buffer minor mode that allows
this—‘gnus-pick-mode’.  This basically means that a few process mark
commands become one-keystroke commands to allow easy marking, and it
provides one additional command for switching to the summary buffer.

   Here are the available keystrokes when using pick mode:

‘.’
     Pick the article or thread on the current line or unpick it if is
     already picked (‘gnus-pick-article-or-thread’).  If the variable
     ‘gnus-thread-hide-subtree’ is true, then this key selects the
     entire thread when used at the first article of the thread.
     Otherwise, it selects just the article.  If given a numerical
     prefix, go to that thread or article and pick it.  (The line number
     is normally displayed at the beginning of the summary pick lines.)
     If ‘gnus-process-mark-toggle’ is ‘nil’, this key will pick an
     article or thread.

‘<SPC>’
     Scroll the summary buffer up one page (‘gnus-pick-next-page’).  If
     at the end of the buffer, start reading the picked articles.

‘u’
     Unpick the thread or article
     (‘gnus-pick-unmark-article-or-thread’).  If the variable
     ‘gnus-thread-hide-subtree’ is true, then this key unpicks the
     thread if used at the first article of the thread.  Otherwise it
     unpicks just the article.  You can give this key a numerical prefix
     to unpick the thread or article at that line.

‘<RET>’
     Start reading the picked articles (‘gnus-pick-start-reading’).  If
     given a prefix, mark all unpicked articles as read first.  If
     ‘gnus-pick-display-summary’ is non-‘nil’, the summary buffer will
     still be visible when you are reading.

   All the normal summary mode commands are still available in the
pick-mode, with the exception of ‘u’.  However ‘!’ is available which is
mapped to the same function ‘gnus-summary-tick-article-forward’.

   If this sounds like a good idea to you, you could say:

     (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

   ‘gnus-pick-mode-hook’ is run in pick minor mode buffers.

   If ‘gnus-mark-unpicked-articles-as-read’ is non-‘nil’, mark all
unpicked articles as read.  The default is ‘nil’.

   The summary line format in pick mode is slightly different from the
standard format.  At the beginning of each line the line number is
displayed.  The pick mode line format is controlled by the
‘gnus-summary-pick-line-format’ variable (*note Formatting Variables::).
It accepts the same format specs that ‘gnus-summary-line-format’ does
(*note Summary Buffer Lines::).


File: gnus.info,  Node: Binary Groups,  Prev: Pick and Read,  Up: Alternative Approaches

4.24.2 Binary Groups
--------------------

If you spend much time in binary groups, you may grow tired of hitting
‘X u’, ‘n’, ‘<RET>’ all the time.  ‘M-x gnus-binary-mode’ is a minor
mode for summary buffers that makes all ordinary Gnus article selection
functions uudecode series of articles and display the result instead of
just displaying the articles the normal way.

   The only way, in fact, to see the actual articles is the ‘g’ command,
when you have turned on this mode (‘gnus-binary-show-article’).

   ‘gnus-binary-mode-hook’ is called in binary minor mode buffers.


File: gnus.info,  Node: Tree Display,  Next: Mail Group Commands,  Prev: Alternative Approaches,  Up: Summary Buffer

# /. 4.25 Tree Display
=====================

If you don’t like the normal Gnus summary display, you might try setting
‘gnus-use-trees’ to ‘t’.  This will create (by default) an additional
“tree buffer”.  You can execute all summary mode commands in the tree
buffer.

   There are a few variables to customize the tree display, of course:

‘gnus-tree-mode-hook’
     A hook called in all tree mode buffers.

‘gnus-tree-mode-line-format’
     A format string for the mode bar in the tree mode buffers (*note
     Mode Line Formatting::).  The default is ‘Gnus: %%b %S %Z’.  For a
     list of valid specs, *note Summary Buffer Mode Line::.

‘gnus-selected-tree-face’
     Face used for highlighting the selected article in the tree buffer.
     The default is ‘modeline’.

‘gnus-tree-line-format’
     A format string for the tree nodes.  The name is a bit of a
     misnomer, though—it doesn’t define a line, but just the node.  The
     default value is ‘%(%[%3,3n%]%)’, which displays the first three
     characters of the name of the poster.  It is vital that all nodes
     are of the same length, so you _must_ use ‘%4,4n’-like specifiers.

     Valid specs are:

     ‘n’
          The name of the poster.
     ‘f’
          The ‘From’ header.
     ‘N’
          The number of the article.
     ‘[’
          The opening bracket.
     ‘]’
          The closing bracket.
     ‘s’
          The subject.

     *Note Formatting Variables::.

     Variables related to the display are:

     ‘gnus-tree-brackets’
          This is used for differentiating between “real” articles and
          “sparse” articles.  The format is
               ((REAL-OPEN . REAL-CLOSE)
                (SPARSE-OPEN . SPARSE-CLOSE)
                (DUMMY-OPEN . DUMMY-CLOSE))
          and the default is ‘((?[ . ?]) (?( . ?)) (?{ . ?}) (?< .
          ?>))’.

     ‘gnus-tree-parent-child-edges’
          This is a list that contains the characters used for
          connecting parent nodes to their children.  The default is
          ‘(?- ?\\ ?|)’.

‘gnus-tree-minimize-window’
     If this variable is non-‘nil’, Gnus will try to keep the tree
     buffer as small as possible to allow more room for the other Gnus
     windows.  If this variable is a number, the tree buffer will never
     be higher than that number.  The default is ‘t’.  Note that if you
     have several windows displayed side-by-side in a frame and the tree
     buffer is one of these, minimizing the tree window will also resize
     all other windows displayed next to it.

     You may also wish to add the following hook to keep the window
     minimized at all times:

          (add-hook 'gnus-configure-windows-hook
                    'gnus-tree-perhaps-minimize)

‘gnus-generate-tree-function’
     The function that actually generates the thread tree.  Two
     predefined functions are available: ‘gnus-generate-horizontal-tree’
     and ‘gnus-generate-vertical-tree’ (which is the default).

   Here’s an example from a horizontal tree buffer:

     {***}-(***)-[odd]-[Gun]
          |      \[Jan]
          |      \[odd]-[Eri]
          |      \(***)-[Eri]
          |            \[odd]-[Paa]
          \[Bjo]
          \[Gun]
          \[Gun]-[Jor]

   Here’s the same thread displayed in a vertical tree buffer:

     {***}
       |--------------------------\-----\-----\
     (***)                         [Bjo] [Gun] [Gun]
       |--\-----\-----\                          |
     [odd] [Jan] [odd] (***)                   [Jor]
       |           |     |--\
     [Gun]       [Eri] [Eri] [odd]
                               |
                             [Paa]

   If you’re using horizontal trees, it might be nice to display the
trees side-by-side with the summary buffer.  You could add something
like the following to your ‘~/.gnus.el’ file:

     (setq gnus-use-trees t
           gnus-generate-tree-function 'gnus-generate-horizontal-tree
           gnus-tree-minimize-window nil)
     (gnus-add-configuration
      '(article
        (vertical 1.0
                  (horizontal 0.25
                              (summary 0.75 point)
                              (tree 1.0))
                  (article 1.0))))

   *Note Window Layout::.


File: gnus.info,  Node: Mail Group Commands,  Next: Various Summary Stuff,  Prev: Tree Display,  Up: Summary Buffer

# /. 4.26 Mail Group Commands
============================

Some commands only make sense in mail groups.  If these commands are
invalid in the current group, they will raise a hell and let you know.

   All these commands (except the expiry and edit commands) use the
process/prefix convention (*note Process/Prefix::).

‘B e’
     Run all expirable articles in the current group through the expiry
     process (‘gnus-summary-expire-articles’).  That is, delete all
     expirable articles in the group that have been around for a while.
     (*note Expiring Mail::).

‘B C-M-e’
     Delete all the expirable articles in the group
     (‘gnus-summary-expire-articles-now’).  This means that *all*
     articles eligible for expiry in the current group will disappear
     forever into that big ‘/dev/null’ in the sky.

‘B <DEL>’
     Delete the mail article.  This is “delete” as in “delete it from
     your disk forever and ever, never to return again.” Use with
     caution.  (‘gnus-summary-delete-article’).

‘B m’
     Move the article from one mail group to another
     (‘gnus-summary-move-article’).  Marks will be preserved if
     ‘gnus-preserve-marks’ is non-‘nil’ (which is the default).

‘B c’
     Copy the article from one group (mail group or not) to a mail group
     (‘gnus-summary-copy-article’).  Marks will be preserved if
     ‘gnus-preserve-marks’ is non-‘nil’ (which is the default).

‘B B’
     Crosspost the current article to some other group
     (‘gnus-summary-crosspost-article’).  This will create a new copy of
     the article in the other group, and the Xref headers of the article
     will be properly updated.

‘B i’
     Import an arbitrary file into the current mail newsgroup
     (‘gnus-summary-import-article’).  You will be prompted for a file
     name, a ‘From’ header and a ‘Subject’ header.

‘B I’
     Create an empty article in the current mail newsgroups
     (‘gnus-summary-create-article’).  You will be prompted for a ‘From’
     header and a ‘Subject’ header.

‘B r’
     Respool the mail article (‘gnus-summary-respool-article’).
     ‘gnus-summary-respool-default-method’ will be used as the default
     select method when respooling.  This variable is ‘nil’ by default,
     which means that the current group select method will be used
     instead.  Marks will be preserved if ‘gnus-preserve-marks’ is
     non-‘nil’ (which is the default).

‘B w’
‘e’
     Edit the current article (‘gnus-summary-edit-article’).  To finish
     editing and make the changes permanent, type ‘C-c C-c’
     (‘gnus-summary-edit-article-done’).  If you give a prefix to the
     ‘C-c C-c’ command, Gnus won’t re-highlight the article.

‘B q’
     If you want to re-spool an article, you might be curious as to what
     group the article will end up in before you do the re-spooling.
     This command will tell you (‘gnus-summary-respool-query’).

‘B t’
     Similarly, this command will display all fancy splitting patterns
     used when respooling, if any (‘gnus-summary-respool-trace’).

‘B p’
     Some people have a tendency to send you “courtesy” copies when they
     follow up to articles you have posted.  These usually have a
     ‘Newsgroups’ header in them, but not always.  This command
     (‘gnus-summary-article-posted-p’) will try to fetch the current
     article from your news server (or rather, from
     ‘gnus-refer-article-method’ or ‘gnus-select-method’) and will
     report back whether it found the article or not.  Even if it says
     that it didn’t find the article, it may have been posted
     anyway—mail propagation is much faster than news propagation, and
     the news copy may just not have arrived yet.

‘K E’
     Encrypt the body of an article (‘gnus-article-encrypt-body’).  The
     body is encrypted with the encryption protocol specified by the
     variable ‘gnus-article-encrypt-protocol’.

   If you move (or copy) articles regularly, you might wish to have Gnus
suggest where to put the articles.  ‘gnus-move-split-methods’ is a
variable that uses the same syntax as ‘gnus-split-methods’ (*note Saving
Articles::).  You may customize that variable to create suggestions you
find reasonable.  (Note that ‘gnus-move-split-methods’ uses group names
where ‘gnus-split-methods’ uses file names.)

     (setq gnus-move-split-methods
           '(("^From:.*Lars Magne" "nnml:junk")
             ("^Subject:.*gnus" "nnfolder:important")
             (".*" "nnml:misc")))


File: gnus.info,  Node: Various Summary Stuff,  Next: Exiting the Summary Buffer,  Prev: Mail Group Commands,  Up: Summary Buffer

# /. 4.27 Various Summary Stuff
==============================

* Menu:

* Summary Group Information::   Information oriented commands.
* Searching for Articles::      Multiple article commands.
* Summary Generation Commands::
* Really Various Summary Commands::  Those pesky non-conformant commands.

‘gnus-summary-display-while-building’
     If non-‘nil’, show and update the summary buffer as it’s being
     built.  If ‘t’, update the buffer after every line is inserted.  If
     the value is an integer, N, update the display every N lines.  The
     default is ‘nil’.

‘gnus-summary-display-arrow’
     If non-‘nil’, display an arrow in the fringe to indicate the
     current article.

‘gnus-summary-mode-hook’
     This hook is called when creating a summary mode buffer.

‘gnus-summary-generate-hook’
     This is called as the last thing before doing the threading and the
     generation of the summary buffer.  It’s quite convenient for
     customizing the threading variables based on what data the
     newsgroup has.  This hook is called from the summary buffer after
     most summary buffer variables have been set.

‘gnus-summary-prepare-hook’
     It is called after the summary buffer has been generated.  You
     might use it to, for instance, highlight lines or modify the look
     of the buffer in some other ungodly manner.  I don’t care.

‘gnus-summary-prepared-hook’
     A hook called as the very last thing after the summary buffer has
     been generated.

‘gnus-summary-ignore-duplicates’
     When Gnus discovers two articles that have the same ‘Message-ID’,
     it has to do something drastic.  No articles are allowed to have
     the same ‘Message-ID’, but this may happen when reading mail from
     some sources.  Gnus allows you to customize what happens with this
     variable.  If it is ‘nil’ (which is the default), Gnus will rename
     the ‘Message-ID’ (for display purposes only) and display the
     article as any other article.  If this variable is ‘t’, it won’t
     display the article—it’ll be as if it never existed.

‘gnus-alter-articles-to-read-function’
     This function, which takes two parameters (the group name and the
     list of articles to be selected), is called to allow the user to
     alter the list of articles to be selected.

     For instance, the following function adds the list of cached
     articles to the list in one particular group:

          (defun my-add-cached-articles (group articles)
            (if (string= group "some.group")
                (append gnus-newsgroup-cached articles)
              articles))

‘gnus-newsgroup-variables’
     A list of newsgroup (summary buffer) local variables, or cons of
     variables and their default expressions to be evalled (when the
     default values are not ‘nil’), that should be made global while the
     summary buffer is active.

     Note: The default expressions will be evaluated (using function
     ‘eval’) before assignment to the local variable rather than just
     assigned to it.  If the default expression is the symbol ‘global’,
     that symbol will not be evaluated but the global value of the local
     variable will be used instead.

     These variables can be used to set variables in the group
     parameters while still allowing them to affect operations done in
     other buffers.  For example:

          (setq gnus-newsgroup-variables
                '(message-use-followup-to
                  (gnus-visible-headers .
           "^From:\\|^Newsgroups:\\|^Subject:\\|^Date:\\|^To:")))

     Also *note Group Parameters::.


File: gnus.info,  Node: Summary Group Information,  Next: Searching for Articles,  Up: Various Summary Stuff

4.27.1 Summary Group Information
--------------------------------

‘H d’
     Give a brief description of the current group
     (‘gnus-summary-describe-group’).  If given a prefix, force
     rereading the description from the server.

‘H h’
     Give an extremely brief description of the most important summary
     keystrokes (‘gnus-summary-describe-briefly’).

‘H i’
     Go to the Gnus info node (‘gnus-info-find-node’).


File: gnus.info,  Node: Searching for Articles,  Next: Summary Generation Commands,  Prev: Summary Group Information,  Up: Various Summary Stuff

4.27.2 Searching for Articles
-----------------------------

‘M-s M-s’
     Search through all subsequent (raw) articles for a regexp
     (‘gnus-summary-search-article-forward’).

‘M-s M-r’
     Search through all previous (raw) articles for a regexp
     (‘gnus-summary-search-article-backward’).

‘M-S’
     Repeat the previous search forwards
     (‘gnus-summary-repeat-search-article-forward’).

‘M-R’
     Repeat the previous search backwards
     (‘gnus-summary-repeat-search-article-backward’).

‘&’
     This command will prompt you for a header, a regular expression to
     match on this field, and a command to be executed if the match is
     made (‘gnus-summary-execute-command’).  If the header is an empty
     string, the match is done on the entire article.  If given a
     prefix, search backward instead.

     For instance, ‘& <RET> some.*string <RET> #’ will put the process
     mark on all articles that have heads or bodies that match
     ‘some.*string’.

‘M-&’
     Perform any operation on all articles that have been marked with
     the process mark (‘gnus-summary-universal-argument’).


File: gnus.info,  Node: Summary Generation Commands,  Next: Really Various Summary Commands,  Prev: Searching for Articles,  Up: Various Summary Stuff

4.27.3 Summary Generation Commands
----------------------------------

‘Y g’
     Regenerate the current summary buffer (‘gnus-summary-prepare’).

‘Y c’
     Pull all cached articles (for the current group) into the summary
     buffer (‘gnus-summary-insert-cached-articles’).

‘Y d’
     Pull all dormant articles (for the current group) into the summary
     buffer (‘gnus-summary-insert-dormant-articles’).

‘Y t’
     Pull all ticked articles (for the current group) into the summary
     buffer (‘gnus-summary-insert-ticked-articles’).


File: gnus.info,  Node: Really Various Summary Commands,  Prev: Summary Generation Commands,  Up: Various Summary Stuff

4.27.4 Really Various Summary Commands
--------------------------------------

‘A D’
‘C-d’
     If the current article is a collection of other articles (for
     instance, a digest), you might use this command to enter a group
     based on that article (‘gnus-summary-enter-digest-group’).  Gnus
     will try to guess what article type is currently displayed unless
     you give a prefix to this command, which forces a “digest”
     interpretation.  Basically, whenever you see a message that is a
     collection of other messages of some format, you ‘C-d’ and read
     these messages in a more convenient fashion.

     The variable ‘gnus-auto-select-on-ephemeral-exit’ controls what
     article should be selected after exiting a digest group.  Valid
     values include:

     ‘next’
          Select the next article.

     ‘next-unread’
          Select the next unread article.

     ‘next-noselect’
          Move the cursor to the next article.  This is the default.

     ‘next-unread-noselect’
          Move the cursor to the next unread article.

     If it has any other value or there is no next (unread) article, the
     article selected before entering to the digest group will appear.

‘C-M-d’
     This command is very similar to the one above, but lets you gather
     several documents into one biiig group
     (‘gnus-summary-read-document’).  It does this by opening several
     ‘nndoc’ groups for each document, and then opening an ‘nnvirtual’
     group on top of these ‘nndoc’ groups.  This command understands the
     process/prefix convention (*note Process/Prefix::).

‘C-t’
     Toggle truncation of summary lines
     (‘gnus-summary-toggle-truncation’).  This will probably confuse the
     line centering function in the summary buffer, so it’s not a good
     idea to have truncation switched off while reading articles.

‘=’
     Expand the summary buffer window (‘gnus-summary-expand-window’).
     If given a prefix, force an ‘article’ window configuration.

‘C-M-e’
     Edit the group parameters (*note Group Parameters::) of the current
     group (‘gnus-summary-edit-parameters’).

‘C-M-a’
     Customize the group parameters (*note Group Parameters::) of the
     current group (‘gnus-summary-customize-parameters’).


File: gnus.info,  Node: Exiting the Summary Buffer,  Next: Crosspost Handling,  Prev: Various Summary Stuff,  Up: Summary Buffer

# /. 4.28 Exiting the Summary Buffer
===================================

Exiting from the summary buffer will normally update all info on the
group and return you to the group buffer.

‘Z Z’
‘Z Q’
‘q’
     Exit the current group and update all information on the group
     (‘gnus-summary-exit’).  ‘gnus-summary-prepare-exit-hook’ is called
     before doing much of the exiting, which calls
     ‘gnus-summary-expire-articles’ by default.
     ‘gnus-summary-exit-hook’ is called after finishing the exit
     process.  ‘gnus-group-no-more-groups-hook’ is run when returning to
     group mode having no more (unread) groups.

‘Z E’
‘Q’
     Exit the current group without updating any information on the
     group (‘gnus-summary-exit-no-update’).

‘Z c’
‘c’
     Mark all unticked articles in the group as read and then exit
     (‘gnus-summary-catchup-and-exit’).

‘Z C’
     Mark all articles, even the ticked ones, as read and then exit
     (‘gnus-summary-catchup-all-and-exit’).

‘Z n’
     Mark all articles as read and go to the next group
     (‘gnus-summary-catchup-and-goto-next-group’).

‘Z p’
     Mark all articles as read and go to the previous group
     (‘gnus-summary-catchup-and-goto-prev-group’).

‘Z R’
‘C-x C-s’
     Exit this group, and then enter it again
     (‘gnus-summary-reselect-current-group’).  If given a prefix, select
     all articles, both read and unread.

‘Z G’
‘M-g’
     Exit the group, check for new articles in the group, and select the
     group (‘gnus-summary-rescan-group’).  If given a prefix, select all
     articles, both read and unread.

‘Z N’
     Exit the group and go to the next group
     (‘gnus-summary-next-group’).

‘Z P’
     Exit the group and go to the previous group
     (‘gnus-summary-prev-group’).

‘Z s’
     Save the current number of read/marked articles in the dribble
     buffer and then save the dribble buffer
     (‘gnus-summary-save-newsrc’).  If given a prefix, also save the
     ‘.newsrc’ file(s).  Using this command will make exit without
     updating (the ‘Q’ command) worthless.

   ‘gnus-exit-group-hook’ is called when you exit the current group with
an “updating” exit.  For instance ‘Q’ (‘gnus-summary-exit-no-update’)
does not call this hook.

   If you’re in the habit of exiting groups, and then changing your mind
about it, you might set ‘gnus-kill-summary-on-exit’ to ‘nil’.  If you do
that, Gnus won’t kill the summary buffer when you exit it.  (Quelle
surprise!)  Instead it will change the name of the buffer to something
like ‘*Dead Summary ... *’ and install a minor mode called
‘gnus-dead-summary-mode’.  Now, if you switch back to this buffer,
you’ll find that all keys are mapped to a function called
‘gnus-summary-wake-up-the-dead’.  So tapping any keys in a dead summary
buffer will result in a live, normal summary buffer.

   There will never be more than one dead summary buffer at any one
time.

   The data on the current group will be updated (which articles you
have read, which articles you have replied to, etc.) when you exit the
summary buffer.  If the ‘gnus-use-cross-reference’ variable is ‘t’
(which is the default), articles that are cross-referenced to this group
and are marked as read, will also be marked as read in the other
subscribed groups they were cross-posted to.  If this variable is
neither ‘nil’ nor ‘t’, the article will be marked as read in both
subscribed and unsubscribed groups (*note Crosspost Handling::).


File: gnus.info,  Node: Crosspost Handling,  Next: Duplicate Suppression,  Prev: Exiting the Summary Buffer,  Up: Summary Buffer

# /. 4.29 Crosspost Handling
===========================

Marking cross-posted articles as read ensures that you’ll never have to
read the same article more than once.  Unless, of course, somebody has
posted it to several groups separately.  Posting the same article to
several groups (not cross-posting) is called “spamming”, and you are by
law required to send nasty-grams to anyone who perpetrates such a
heinous crime.

   Remember: Cross-posting is kinda ok, but posting the same article
separately to several groups is not.  Massive cross-posting (aka.
“velveeta”) is to be avoided at all costs, and you can even use the
‘gnus-summary-mail-crosspost-complaint’ command to complain about
excessive crossposting (*note Summary Mail Commands::).

   One thing that may cause Gnus to not do the cross-posting thing
correctly is if you use an NNTP server that supports XOVER (which is
very nice, because it speeds things up considerably) which does not
include the ‘Xref’ header in its NOV lines.  This is Evil, but all too
common, alas, alack.  Gnus tries to Do The Right Thing even with XOVER
by registering the ‘Xref’ lines of all articles you actually read, but
if you kill the articles, or just mark them as read without reading
them, Gnus will not get a chance to snoop the ‘Xref’ lines out of these
articles, and will be unable to use the cross reference mechanism.

   To check whether your NNTP server includes the ‘Xref’ header in its
overview files, try ‘telnet your.nntp.server nntp’, ‘MODE READER’ on
‘inn’ servers, and then say ‘LIST overview.fmt’.  This may not work, but
if it does, and the last line you get does not read ‘Xref:full’, then
you should shout and whine at your news admin until she includes the
‘Xref’ header in the overview files.

   If you want Gnus to get the ‘Xref’s right all the time, you have to
set ‘nntp-nov-is-evil’ to ‘t’, which slows things down considerably.
Also *note Slow/Expensive Connection::.

   C’est la vie.

   For an alternative approach, *note Duplicate Suppression::.


File: gnus.info,  Node: Duplicate Suppression,  Next: Security,  Prev: Crosspost Handling,  Up: Summary Buffer

# /. 4.30 Duplicate Suppression
==============================

By default, Gnus tries to make sure that you don’t have to read the same
article more than once by utilizing the crossposting mechanism (*note
Crosspost Handling::).  However, that simple and efficient approach may
not work satisfactory for some users for various reasons.

  1. The NNTP server may fail to generate the ‘Xref’ header.  This is
     evil and not very common.

  2. The NNTP server may fail to include the ‘Xref’ header in the
     ‘.overview’ data bases.  This is evil and all too common, alas.

  3. You may be reading the same group (or several related groups) from
     different NNTP servers.

  4. You may be getting mail that duplicates articles posted to groups.

   I’m sure there are other situations where ‘Xref’ handling fails as
well, but these four are the most common situations.

   If, and only if, ‘Xref’ handling fails for you, then you may consider
switching on “duplicate suppression”.  If you do so, Gnus will remember
the ‘Message-ID’s of all articles you have read or otherwise marked as
read, and then, as if by magic, mark them as read all subsequent times
you see them—in _all_ groups.  Using this mechanism is quite likely to
be somewhat inefficient, but not overly so.  It’s certainly preferable
to reading the same articles more than once.

   Duplicate suppression is not a very subtle instrument.  It’s more
like a sledge hammer than anything else.  It works in a very simple
fashion—if you have marked an article as read, it adds this Message-ID
to a cache.  The next time it sees this Message-ID, it will mark the
article as read with the ‘M’ mark.  It doesn’t care what group it saw
the article in.

‘gnus-suppress-duplicates’
     If non-‘nil’, suppress duplicates.

‘gnus-save-duplicate-list’
     If non-‘nil’, save the list of duplicates to a file.  This will
     make startup and shutdown take longer, so the default is ‘nil’.
     However, this means that only duplicate articles read in a single
     Gnus session are suppressed.

‘gnus-duplicate-list-length’
     This variable says how many ‘Message-ID’s to keep in the duplicate
     suppression list.  The default is 10000.

‘gnus-duplicate-file’
     The name of the file to store the duplicate suppression list in.
     The default is ‘~/News/suppression’.

   If you have a tendency to stop and start Gnus often, setting
‘gnus-save-duplicate-list’ to ‘t’ is probably a good idea.  If you leave
Gnus running for weeks on end, you may have it ‘nil’.  On the other
hand, saving the list makes startup and shutdown much slower, so that
means that if you stop and start Gnus often, you should set
‘gnus-save-duplicate-list’ to ‘nil’.  Uhm.  I’ll leave this up to you to
figure out, I think.


File: gnus.info,  Node: Security,  Next: Mailing List,  Prev: Duplicate Suppression,  Up: Summary Buffer

# /. 4.31 Security
=================

Gnus is able to verify signed messages or decrypt encrypted messages.
The formats that are supported are PGP, PGP/MIME and S/MIME, however you
need some external programs to get things to work:

  1. To handle PGP and PGP/MIME messages, you have to install an OpenPGP
     implementation such as GnuPG.  The Lisp interface to GnuPG included
     with Emacs is called EasyPG (*note EasyPG: (epa)Top.), but
     Mailcrypt is also supported.

  2. To handle S/MIME message, you need to install OpenSSL.  OpenSSL
     0.9.6 or newer is recommended.

   The variables that control security functionality on
reading/composing messages include:

‘mm-verify-option’
     Option of verifying signed parts.  ‘never’, not verify; ‘always’,
     always verify; ‘known’, only verify known protocols.  Otherwise,
     ask user.

‘mm-decrypt-option’
     Option of decrypting encrypted parts.  ‘never’, no decryption;
     ‘always’, always decrypt; ‘known’, only decrypt known protocols.
     Otherwise, ask user.

‘mm-sign-option’
     Option of creating signed parts.  ‘nil’, use default signing keys;
     ‘guided’, ask user to select signing keys from the menu.

‘mm-encrypt-option’
     Option of creating encrypted parts.  ‘nil’, use the first
     public-key matching the ‘From:’ header as the recipient; ‘guided’,
     ask user to select recipient keys from the menu.

‘mml1991-use’
     Symbol indicating elisp interface to OpenPGP implementation for PGP
     messages.  The default is ‘epg’, but ‘mailcrypt’ is also supported
     although deprecated.  By default, Gnus uses the first available
     interface in this order.

‘mml2015-use’
     Symbol indicating elisp interface to OpenPGP implementation for
     PGP/MIME messages.  The default is ‘epg’, but ‘mailcrypt’ is also
     supported although deprecated.  By default, Gnus uses the first
     available interface in this order.

   By default the buttons that display security information are not
shown, because they clutter reading the actual e-mail.  You can type ‘K
b’ manually to display the information.  Use the
‘gnus-buttonized-mime-types’ and ‘gnus-unbuttonized-mime-types’
variables to control this permanently.  *note MIME Commands:: for
further details, and hints on how to customize these variables to always
display security information.

   Snarfing OpenPGP keys (i.e., importing keys from articles into your
key ring) is not supported explicitly through a menu item or command,
rather Gnus do detect and label keys as ‘application/pgp-keys’, allowing
you to specify whatever action you think is appropriate through the
usual MIME infrastructure.  You can use a ‘~/.mailcap’ entry (*note
mailcap: (emacs-mime)mailcap.) such as the following to import keys
using GNU Privacy Guard when you click on the MIME button (*note Using
MIME::).

     application/pgp-keys; gpg --import --interactive --verbose; needsterminal
This happens to also be the default action defined in
‘mailcap-mime-data’.

   More information on how to set things for sending outgoing signed and
encrypted messages up can be found in the message manual (*note
Security: (message)Security.).


File: gnus.info,  Node: Mailing List,  Prev: Security,  Up: Summary Buffer

# /. 4.32 Mailing List
=====================

Gnus understands some mailing list fields of RFC 2369.  To enable it,
add a ‘to-list’ group parameter (*note Group Parameters::), possibly
using ‘A M’ (‘gnus-mailing-list-insinuate’) in the summary buffer.

   That enables the following commands to the summary buffer:

‘C-c C-n h’
     Send a message to fetch mailing list help, if List-Help field
     exists.

‘C-c C-n s’
     Send a message to subscribe the mailing list, if List-Subscribe
     field exists.

‘C-c C-n u’
     Send a message to unsubscribe the mailing list, if List-Unsubscribe
     field exists.

‘C-c C-n p’
     Post to the mailing list, if List-Post field exists.

‘C-c C-n o’
     Send a message to the mailing list owner, if List-Owner field
     exists.

‘C-c C-n a’
     Browse the mailing list archive, if List-Archive field exists.


File: gnus.info,  Node: Article Buffer,  Next: Composing Messages,  Prev: Summary Buffer,  Up: Top

# /. 5 Article Buffer
********************

The articles are displayed in the article buffer, of which there is only
one.  All the summary buffers share the same article buffer unless you
tell Gnus otherwise.

* Menu:

* Hiding Headers::              Deciding what headers should be displayed.
* Using MIME::                  Pushing articles through MIME before reading them.
* HTML::                        Reading HTML messages.
* Customizing Articles::        Tailoring the look of the articles.
* Article Keymap::              Keystrokes available in the article buffer.
* Misc Article::                Other stuff.


File: gnus.info,  Node: Hiding Headers,  Next: Using MIME,  Up: Article Buffer

# /. 5.1 Hiding Headers
======================

The top section of each article is the “head”.  (The rest is the “body”,
but you may have guessed that already.)

   There is a lot of useful information in the head: the name of the
person who wrote the article, the date it was written and the subject of
the article.  That’s well and nice, but there’s also lots of information
most people do not want to see—what systems the article has passed
through before reaching you, the ‘Message-ID’, the ‘References’, etc. ad
nauseam—and you’ll probably want to get rid of some of those lines.  If
you want to keep all those lines in the article buffer, you can set
‘gnus-show-all-headers’ to ‘t’.

   Gnus provides you with two variables for sifting headers:

‘gnus-visible-headers’
     If this variable is non-‘nil’, it should be a regular expression
     that says what headers you wish to keep in the article buffer.  All
     headers that do not match this variable will be hidden.

     For instance, if you only want to see the name of the person who
     wrote the article and the subject, you’d say:

          (setq gnus-visible-headers "^From:\\|^Subject:")

     This variable can also be a list of regexps to match headers to
     remain visible.

‘gnus-ignored-headers’
     This variable is the reverse of ‘gnus-visible-headers’.  If this
     variable is set (and ‘gnus-visible-headers’ is ‘nil’), it should be
     a regular expression that matches all lines that you want to hide.
     All lines that do not match this variable will remain visible.

     For instance, if you just want to get rid of the ‘References’ line
     and the ‘Xref’ line, you might say:

          (setq gnus-ignored-headers "^References:\\|^Xref:")

     This variable can also be a list of regexps to match headers to be
     removed.

     Note that if ‘gnus-visible-headers’ is non-‘nil’, this variable
     will have no effect.

   Gnus can also sort the headers for you.  (It does this by default.)
You can control the sorting by setting the ‘gnus-sorted-header-list’
variable.  It is a list of regular expressions that says in what order
the headers are to be displayed.

   For instance, if you want the name of the author of the article
first, and then the subject, you might say something like:

     (setq gnus-sorted-header-list '("^From:" "^Subject:"))

   Any headers that are to remain visible, but are not listed in this
variable, will be displayed in random order after all the headers listed
in this variable.

   You can hide further boring headers by setting
‘gnus-treat-hide-boring-headers’ to ‘head’.  What this function does
depends on the ‘gnus-boring-article-headers’ variable.  It’s a list, but
this list doesn’t actually contain header names.  Instead it lists
various “boring conditions” that Gnus can check and remove from sight.

   These conditions are:
‘empty’
     Remove all empty headers.
‘followup-to’
     Remove the ‘Followup-To’ header if it is identical to the
     ‘Newsgroups’ header.
‘reply-to’
     Remove the ‘Reply-To’ header if it lists the same addresses as the
     ‘From’ header, or if the ‘broken-reply-to’ group parameter is set.
‘newsgroups’
     Remove the ‘Newsgroups’ header if it only contains the current
     group name.
‘to-address’
     Remove the ‘To’ header if it only contains the address identical to
     the current group’s ‘to-address’ parameter.
‘to-list’
     Remove the ‘To’ header if it only contains the address identical to
     the current group’s ‘to-list’ parameter.
‘cc-list’
     Remove the ‘Cc’ header if it only contains the address identical to
     the current group’s ‘to-list’ parameter.
‘date’
     Remove the ‘Date’ header if the article is less than three days
     old.
‘long-to’
     Remove the ‘To’ and/or ‘Cc’ header if it is very long.
‘many-to’
     Remove all ‘To’ and/or ‘Cc’ headers if there are more than one.

   To include these three elements, you could say something like:

     (setq gnus-boring-article-headers
           '(empty followup-to reply-to))

   This is also the default value for this variable.


File: gnus.info,  Node: Using MIME,  Next: HTML,  Prev: Hiding Headers,  Up: Article Buffer

# /. 5.2 Using MIME
==================

Mime is a standard for waving your hands through the air, aimlessly,
while people stand around yawning.

   MIME, however, is a standard for encoding your articles, aimlessly,
while all newsreaders die of fear.

   MIME may specify what character set the article uses, the encoding of
the characters, and it also makes it possible to embed pictures and
other naughty stuff in innocent-looking articles.

   Gnus pushes MIME articles through ‘gnus-display-mime-function’ to
display the MIME parts.  This is ‘gnus-display-mime’ by default, which
creates a bundle of clickable buttons that can be used to display, save
and manipulate the MIME objects.

   The following commands are available when you have placed point over
a MIME button:

‘<RET> (Article)’
‘<BUTTON-2> (Article)’
     Toggle displaying of the MIME object (‘gnus-article-press-button’).
     If built-in viewers can not display the object, Gnus resorts to
     external viewers in the ‘mailcap’ files.  If a viewer has the
     ‘copiousoutput’ specification, the object is displayed inline.

‘M-<RET> (Article)’
‘v (Article)’
     Prompt for a method, and then view the MIME object using this
     method (‘gnus-mime-view-part’).

‘t (Article)’
     View the MIME object as if it were a different MIME media type
     (‘gnus-mime-view-part-as-type’).

‘C (Article)’
     Prompt for a charset, and then view the MIME object using this
     charset (‘gnus-mime-view-part-as-charset’).

‘o (Article)’
     Prompt for a file name, and then save the MIME object
     (‘gnus-mime-save-part’).

‘C-o (Article)’
     Prompt for a file name, then save the MIME object and strip it from
     the article.  Then proceed to article editing, where a reasonable
     suggestion is being made on how the altered article should look
     like.  The stripped MIME object will be referred via the
     message/external-body MIME type.
     (‘gnus-mime-save-part-and-strip’).

‘r (Article)’
     Prompt for a file name, replace the MIME object with an external
     body referring to the file via the message/external-body MIME type.
     (‘gnus-mime-replace-part’).

‘d (Article)’
     Delete the MIME object from the article and replace it with some
     information about the removed MIME object
     (‘gnus-mime-delete-part’).

‘c (Article)’
     Copy the MIME object to a fresh buffer and display this buffer
     (‘gnus-mime-copy-part’).  If given a prefix, copy the raw contents
     without decoding.  If given a numerical prefix, you can do
     semi-manual charset stuff (see
     ‘gnus-summary-show-article-charset-alist’ in *note Paging the
     Article::).  Compressed files like ‘.gz’ and ‘.bz2’ are
     automatically decompressed if ‘auto-compression-mode’ is enabled
     (*note Accessing Compressed Files: (emacs)Compressed Files.).

‘p (Article)’
     Print the MIME object (‘gnus-mime-print-part’).  This command
     respects the ‘print=’ specifications in the ‘.mailcap’ file.

‘i (Article)’
     Insert the contents of the MIME object into the buffer
     (‘gnus-mime-inline-part’) as ‘text/plain’.  If given a prefix,
     insert the raw contents without decoding.  If given a numerical
     prefix, you can do semi-manual charset stuff (see
     ‘gnus-summary-show-article-charset-alist’ in *note Paging the
     Article::).  Compressed files like ‘.gz’ and ‘.bz2’ are
     automatically decompressed depending on ‘jka-compr’ regardless of
     ‘auto-compression-mode’ (*note Accessing Compressed Files:
     (emacs)Compressed Files.).

‘E (Article)’
     View the MIME object with an internal viewer.  If no internal
     viewer is available, use an external viewer
     (‘gnus-mime-view-part-internally’).

‘e (Article)’
     View the MIME object with an external viewer.
     (‘gnus-mime-view-part-externally’).

‘| (Article)’
     Output the MIME object to a process (‘gnus-mime-pipe-part’).

‘. (Article)’
     Interactively run an action on the MIME object
     (‘gnus-mime-action-on-part’).

   Gnus will display some MIME objects automatically.  The way Gnus
determines which parts to do this with is described in the Emacs MIME
manual.

   It might be best to just use the toggling functions from the article
buffer to avoid getting nasty surprises.  (For instance, you enter the
group ‘alt.sing-a-long’ and, before you know it, MIME has decoded the
sound file in the article and some horrible sing-a-long song comes
screaming out your speakers, and you can’t find the volume button,
because there isn’t one, and people are starting to look at you, and you
try to stop the program, but you can’t, and you can’t find the program
to control the volume, and everybody else in the room suddenly decides
to look at you disdainfully, and you’ll feel rather stupid.)

   Any similarity to real events and people is purely coincidental.
Ahem.

   Also *note MIME Commands::.


File: gnus.info,  Node: HTML,  Next: Customizing Articles,  Prev: Using MIME,  Up: Article Buffer

# /. 5.3 HTML
============

Gnus can display HTML articles nicely formatted in the article buffer.
There are many methods for doing that, but two of them are kind of
default methods.

   If your Emacs copy has been built with libxml2 support, then Gnus
uses Emacs’ built-in, plain elisp Simple HTML Renderer ‘shr’ (1) which
is also used by Emacs’ browser EWW (*note EWW: (emacs)EWW.).

   If your Emacs copy lacks libxml2 support but you have ‘w3m’ installed
on your system, Gnus uses that to render HTML mail and display the
results in the article buffer (‘gnus-w3m’).

   For a complete overview, consult *Note Display Customization:
(emacs-mime)Display Customization.  This section only describes the
default method.

‘mm-text-html-renderer’
     If set to ‘shr’, Gnus uses its own simple HTML renderer.  If set to
     ‘gnus-w3m’, it uses ‘w3m’.

‘gnus-blocked-images’
     External images that have URLs that match this regexp won’t be
     fetched and displayed.  For instance, to block all URLs that have
     the string “ads” in them, do the following:

          (setq gnus-blocked-images "ads")

     This can also be a function to be evaluated.  If so, it will be
     called with the group name as the parameter.  The default value is
     ‘gnus-block-private-groups’, which will return ‘"."’ for anything
     that isn’t a newsgroup.  This means that no external images will be
     fetched as a result of reading mail, so that nobody can use web
     bugs (and the like) to track whether you’ve read email.

     If you have specific private groups that you want to have treated
     as if they were public groups, you can add the name of that group
     to the ‘gnus-global-groups’ list.

     Also *note Misc Article:: for ‘gnus-inhibit-images’.

‘gnus-html-frame-width’
     The width to use when rendering HTML.  The default is 70.

‘gnus-max-image-proportion’
     How big pictures displayed are in relation to the window they’re
     in.  A value of 0.7 (the default) means that they are allowed to
     take up 70% of the width and height of the window.  If they are
     larger than this, and Emacs supports it, then the images will be
     rescaled down to fit these criteria.

‘gnus-article-show-cursor’
     If non-‘nil’, display the cursor in the article buffer even when
     the article buffer isn’t the current buffer.

   To use this, make sure that you have ‘w3m’ and ‘curl’ installed.  If
you have, then Gnus should display HTML automatically.

   ---------- Footnotes ----------

   (1) ‘shr’ displays colors as declared in the HTML article but tries
to adjust them in order to be readable.  If you prefer more contrast,
*Note FAQ 4-16::.


File: gnus.info,  Node: Customizing Articles,  Next: Article Keymap,  Prev: HTML,  Up: Article Buffer

# /. 5.4 Customizing Articles
============================

A slew of functions for customizing how the articles are to look like
exist.  You can call these functions interactively (*note Article
Washing::), or you can have them called automatically when you select
the articles.

   To have them called automatically, you should set the corresponding
“treatment” variable.  For instance, to have headers hidden, you’d set
‘gnus-treat-hide-headers’.  Below is a list of variables that can be
set, but first we discuss the values these variables can have.

   Note: Some values, while valid, make little sense.  Check the list
below for sensible values.

  1. ‘nil’: Don’t do this treatment.

  2. ‘t’: Do this treatment on all body parts.

  3. ‘head’: Do the treatment on the headers.

  4. ‘first’: Do this treatment on the first body part.

  5. ‘last’: Do this treatment on the last body part.

  6. An integer: Do this treatment on all body parts that have a length
     less than this number.

  7. A list of strings: Do this treatment on all body parts that are in
     articles that are read in groups that have names that match one of
     the regexps in the list.

  8. A list where the first element is not a string:

     The list is evaluated recursively.  The first element of the list
     is a predicate.  The following predicates are recognized: ‘or’,
     ‘and’, ‘not’ and ‘typep’.  Here’s an example:

          (or last
              (typep "text/x-vcard"))

  9. A function: the function is called with no arguments and should
     return ‘nil’ or non-‘nil’.  The current article is available in the
     buffer named by ‘gnus-article-buffer’.

   You may have noticed that the word “part” is used here.  This refers
to the fact that some messages are MIME multipart articles that may be
divided into several parts.  Articles that are not multiparts are
considered to contain just a single part.

   Are the treatments applied to all sorts of multipart parts?  Yes, if
you want to, but by default, only ‘text/plain’ parts are given the
treatment.  This is controlled by the ‘gnus-article-treat-types’
variable, which is a list of regular expressions that are matched to the
type of the part.  This variable is ignored if the value of the
controlling variable is a predicate list, as described above.

   The following treatment options are available.  The easiest way to
customize this is to examine the ‘gnus-article-treat’ customization
group.  Values in parenthesis are suggested sensible values.  Others are
possible but those listed are probably sufficient for most people.

‘gnus-treat-buttonize (t, integer)’
‘gnus-treat-buttonize-head (head)’

     *Note Article Buttons::.

‘gnus-treat-capitalize-sentences (t, integer)’
‘gnus-treat-overstrike (t, integer)’
‘gnus-treat-strip-cr (t, integer)’
‘gnus-treat-emojize-symbols (t, integer)’
‘gnus-treat-strip-headers-in-body (t, integer)’
‘gnus-treat-strip-leading-blank-lines (t, first, integer)’
‘gnus-treat-strip-multiple-blank-lines (t, integer)’
‘gnus-treat-strip-pem (t, last, integer)’
‘gnus-treat-strip-trailing-blank-lines (t, last, integer)’
‘gnus-treat-unsplit-urls (t, integer)’
‘gnus-treat-wash-html (t, integer)’

     *Note Article Washing::.

‘gnus-treat-date (head)’

     This will transform/add date headers according to the
     ‘gnus-article-date-headers’ variable.  This is a list of Date
     headers to display.  The formats available are:

     ‘ut’
          Universal time, aka GMT, aka ZULU.

     ‘local’
          The user’s local time zone.

     ‘english’
          A semi-readable English sentence.

     ‘lapsed’
          The time elapsed since the message was posted.

     ‘combined-lapsed’
          Both the original date header and a (shortened) elapsed time.

     ‘combined-local-lapsed’
          Both the time in the user’s local time zone a (shortened)
          elapsed time.

     ‘original’
          The original date header.

     ‘iso8601’
          ISO8601 format, i.e., “2010-11-23T22:05:21”.

     ‘user-defined’
          A format done according to the ‘gnus-article-time-format’
          variable.

     *Note Article Date::.

‘gnus-treat-from-picon (head)’
‘gnus-treat-mail-picon (head)’
‘gnus-treat-newsgroups-picon (head)’

     *Note Picons::.

‘gnus-treat-from-gravatar (head)’
‘gnus-treat-mail-gravatar (head)’

     *Note Gravatars::.

‘gnus-treat-display-smileys (t, integer)’

‘gnus-treat-body-boundary (head)’

     Adds a delimiter between header and body, the string used as
     delimiter is controlled by ‘gnus-body-boundary-delimiter’.

     *Note Smileys::.

‘gnus-treat-display-x-face (head)’

     *Note X-Face::.

‘gnus-treat-display-face (head)’

     *Note Face::.

‘gnus-treat-emphasize (t, head, integer)’
‘gnus-treat-fill-article (t, integer)’
‘gnus-treat-fill-long-lines (t, integer)’
‘gnus-treat-hide-boring-headers (head)’
‘gnus-treat-hide-citation (t, integer)’
‘gnus-treat-hide-citation-maybe (t, integer)’
‘gnus-treat-hide-headers (head)’
‘gnus-treat-hide-signature (t, last)’
‘gnus-treat-strip-banner (t, last)’
‘gnus-treat-strip-list-identifiers (head)’

     *Note Article Hiding::.

‘gnus-treat-highlight-citation (t, integer)’
‘gnus-treat-highlight-headers (head)’
‘gnus-treat-highlight-signature (t, last, integer)’

     *Note Article Highlighting::.

‘gnus-treat-ansi-sequences (t)’
‘gnus-treat-x-pgp-sig (head)’

‘gnus-treat-unfold-headers (head)’
‘gnus-treat-fold-headers (head)’
‘gnus-treat-fold-newsgroups (head)’
‘gnus-treat-leading-whitespace (head)’

     *Note Article Header::.

   You can, of course, write your own functions to be called from
‘gnus-part-display-hook’.  The functions are called narrowed to the
part, and you can do anything you like, pretty much.  There is no
information that you have to keep in the buffer—you can change
everything.


File: gnus.info,  Node: Article Keymap,  Next: Misc Article,  Prev: Customizing Articles,  Up: Article Buffer

# /. 5.5 Article Keymap
======================

Most of the keystrokes in the summary buffer can also be used in the
article buffer.  They should behave as if you typed them in the summary
buffer, which means that you don’t actually have to have a summary
buffer displayed while reading.  You can do it all from the article
buffer.

   The key ‘v’ is reserved for users.  You can bind it to some command
or better use it as a prefix key.

   A few additional keystrokes are available:

‘<SPC>’
     Scroll forwards one page (‘gnus-article-next-page’).  This is
     exactly the same as ‘h <SPC> h’.

‘<DEL>’
     Scroll backwards one page (‘gnus-article-prev-page’).  This is
     exactly the same as ‘h <DEL> h’.

‘C-c ^’
     If point is in the neighborhood of a ‘Message-ID’ and you press
     ‘C-c ^’, Gnus will try to get that article from the server
     (‘gnus-article-refer-article’).

‘C-c C-m’
     Send a reply to the address near point (‘gnus-article-mail’).  If
     given a prefix, include the mail.

‘s’
     Reconfigure the buffers so that the summary buffer becomes visible
     (‘gnus-article-show-summary’).

‘?’
     Give a very brief description of the available keystrokes
     (‘gnus-article-describe-briefly’).

‘<TAB>’
     Go to the next button, if any (‘gnus-article-next-button’).  This
     only makes sense if you have buttonizing turned on.

‘M-<TAB>’
     Go to the previous button, if any (‘gnus-article-prev-button’).

‘R’
     Send a reply to the current article and yank the current article
     (‘gnus-article-reply-with-original’).  If the region is active,
     only yank the text in the region.

‘S W’
     Send a wide reply to the current article and yank the current
     article (‘gnus-article-wide-reply-with-original’).  If the region
     is active, only yank the text in the region.

‘F’
     Send a followup to the current article and yank the current article
     (‘gnus-article-followup-with-original’).  If the region is active,
     only yank the text in the region.


File: gnus.info,  Node: Misc Article,  Prev: Article Keymap,  Up: Article Buffer

# /. 5.6 Misc Article
====================

‘gnus-single-article-buffer’
     If non-‘nil’, use the same article buffer for all the groups.
     (This is the default.)  If ‘nil’, each group will have its own
     article buffer.

‘gnus-widen-article-window’
     If non-‘nil’, selecting the article buffer with the ‘h’ command
     will “widen” the article window to take the entire frame.

‘gnus-article-decode-hook’
     Hook used to decode MIME articles.  The default value is
     ‘(article-decode-charset article-decode-encoded-words)’

‘gnus-article-prepare-hook’
     This hook is called right after the article has been inserted into
     the article buffer.  It is mainly intended for functions that do
     something depending on the contents; it should probably not be used
     for changing the contents of the article buffer.

‘gnus-article-mode-hook’
     Hook called in article mode buffers.

‘gnus-article-mode-syntax-table’
     Syntax table used in article buffers.  It is initialized from
     ‘text-mode-syntax-table’.

‘gnus-article-over-scroll’
     If non-‘nil’, allow scrolling the article buffer even when there no
     more new text to scroll in.  The default is ‘nil’.

‘gnus-article-mode-line-format’
     This variable is a format string along the same lines as
     ‘gnus-summary-mode-line-format’ (*note Summary Buffer Mode Line::).
     It accepts the same format specifications as that variable, with
     two extensions:

     ‘w’
          The “wash status” of the article.  This is a short string with
          one character for each possible article wash operation that
          may have been performed.  The characters and their meaning:

          ‘c’
               Displayed when cited text may be hidden in the article
               buffer.

          ‘h’
               Displayed when headers are hidden in the article buffer.

          ‘p’
               Displayed when article is digitally signed or encrypted,
               and Gnus has hidden the security headers.  (N.B. does not
               tell anything about security status, i.e., good or bad
               signature.)

          ‘s’
               Displayed when the signature has been hidden in the
               Article buffer.

          ‘o’
               Displayed when Gnus has treated overstrike characters in
               the article buffer.

          ‘e’
               Displayed when Gnus has treated emphasized strings in the
               article buffer.

     ‘m’
          The number of MIME parts in the article.

‘gnus-break-pages’
     Controls whether “page breaking” is to take place.  If this
     variable is non-‘nil’, the articles will be divided into pages
     whenever a page delimiter appears in the article.  If this variable
     is ‘nil’, paging will not be done.

‘gnus-page-delimiter’
     This is the delimiter mentioned above.  By default, it is ‘^L’
     (formfeed).

‘gnus-use-idna’
     This variable controls whether Gnus performs IDNA decoding of
     internationalized domain names inside ‘From’, ‘To’ and ‘Cc’
     headers.  *Note IDNA: (message)IDNA, for how to compose such
     messages.  This requires GNU Libidn
     (https://www.gnu.org/software/libidn/), and this variable is only
     enabled if you have installed it.

‘gnus-inhibit-images’
     If this is non-‘nil’, inhibit displaying of images inline in the
     article body.  It is effective to images that are in articles as
     MIME parts, and images in HTML articles rendered when
     ‘mm-text-html-renderer’ (*note Display Customization:
     (emacs-mime)Display Customization.) is ‘shr’ or ‘gnus-w3m’.


File: gnus.info,  Node: Composing Messages,  Next: Select Methods,  Prev: Article Buffer,  Up: Top

# /. 6 Composing Messages
************************

All commands for posting and mailing will put you in a message buffer
where you can edit the article all you like, before you send the article
by pressing ‘C-c C-c’.  *Note Overview: (message)Top.  Where the message
will be posted/mailed to depends on your setup (*note Posting Server::).

* Menu:

* Mail::                        Mailing and replying.
* Posting Server::              What server should you post and mail via?
* POP before SMTP::             You cannot send a mail unless you read a mail.
* Mail and Post::               Mailing and posting at the same time.
* Archived Messages::           Where Gnus stores the messages you’ve sent.
* Posting Styles::              An easier way to specify who you are.
* Drafts::                      Postponing messages and rejected messages.
* Rejected Articles::           What happens if the server doesn’t like your article?
* Signing and encrypting::      How to compose secure messages.

   Also *note Canceling and Superseding:: for information on how to
remove articles you shouldn’t have posted.


File: gnus.info,  Node: Mail,  Next: Posting Server,  Up: Composing Messages

# /. 6.1 Mail
============

Variables for customizing outgoing mail:

‘gnus-uu-digest-headers’
     List of regexps to match headers included in digested messages.
     The headers will be included in the sequence they are matched.  If
     ‘nil’ include all headers.

‘gnus-add-to-list’
     If non-‘nil’, add a ‘to-list’ group parameter to mail groups that
     have none when you do a ‘a’.

‘gnus-confirm-mail-reply-to-news’
     If non-‘nil’, Gnus will ask you for a confirmation when you are
     about to reply to news articles by mail.  If it is ‘nil’, nothing
     interferes in what you want to do.  This can also be a function
     receiving the group name as the only parameter which should return
     non-‘nil’ if a confirmation is needed, or a regular expression
     matching group names, where confirmation should be asked for.

     If you find yourself never wanting to reply to mail, but
     occasionally press ‘R’ anyway, this variable might be for you.

‘gnus-confirm-treat-mail-like-news’
     If non-‘nil’, Gnus also requests confirmation according to
     ‘gnus-confirm-mail-reply-to-news’ when replying to mail.  This is
     useful for treating mailing lists like newsgroups.


File: gnus.info,  Node: Posting Server,  Next: POP before SMTP,  Prev: Mail,  Up: Composing Messages

# /. 6.2 Posting Server
======================

When you press those magical ‘C-c C-c’ keys to ship off your latest
(extremely intelligent, of course) article, where does it go?

   Thank you for asking.  I hate you.

   It can be quite complicated.

   When posting news, Message usually invokes ‘message-send-news’ (*note
News Variables: (message)News Variables.).  Normally, Gnus will post
using the same select method as you’re reading from (which might be
convenient if you’re reading lots of groups from different private
servers).  However.  If the server you’re reading from doesn’t allow
posting, just reading, you probably want to use some other server to
post your (extremely intelligent and fabulously interesting) articles.
You can then set the ‘gnus-post-method’ to some other method:

     (setq gnus-post-method '(nnspool ""))

   Now, if you’ve done this, and then this server rejects your article,
or this server is down, what do you do then?  To override this variable
you can use a non-zero prefix to the ‘C-c C-c’ command to force using
the “current” server, to get back the default behavior, for posting.

   If you give a zero prefix (i.e., ‘C-u 0 C-c C-c’) to that command,
Gnus will prompt you for what method to use for posting.

   You can also set ‘gnus-post-method’ to a list of select methods.  If
that’s the case, Gnus will always prompt you for what method to use for
posting.

   Finally, if you want to always post using the native select method,
you can set this variable to ‘native’.

   When sending mail, Message invokes the function specified by the
variable ‘message-send-mail-function’.  Gnus tries to set it to a value
suitable for your system.  *Note Mail Variables: (message)Mail
Variables, for more information.


File: gnus.info,  Node: POP before SMTP,  Next: Mail and Post,  Prev: Posting Server,  Up: Composing Messages

# /. 6.3 POP before SMTP
=======================

Does your ISP use POP-before-SMTP authentication?  This authentication
method simply requires you to contact the POP server before sending
email.  To do that, put the following lines in your ‘~/.gnus.el’ file:

     (add-hook 'message-send-mail-hook 'mail-source-touch-pop)

The ‘mail-source-touch-pop’ function does POP authentication according
to the value of ‘mail-sources’ without fetching mails, just before
sending a mail.  *Note Mail Sources::.

   If you have two or more POP mail servers set in ‘mail-sources’, you
may want to specify one of them to ‘mail-source-primary-source’ as the
POP mail server to be used for the POP-before-SMTP authentication.  If
it is your primary POP mail server (i.e., you are fetching mails mainly
from that server), you can set it permanently as follows:

     (setq mail-source-primary-source
           '(pop :server "pop3.mail.server"
                 :password "secret"))

Otherwise, bind it dynamically only when performing the POP-before-SMTP
authentication as follows:

     (add-hook 'message-send-mail-hook
               (lambda ()
                 (let ((mail-source-primary-source
                        '(pop :server "pop3.mail.server"
                              :password "secret")))
                   (mail-source-touch-pop))))


File: gnus.info,  Node: Mail and Post,  Next: Archived Messages,  Prev: POP before SMTP,  Up: Composing Messages

# /. 6.4 Mail and Post
=====================

Here’s a list of variables relevant to both mailing and posting:

‘gnus-mailing-list-groups’

     If your news server offers groups that are really mailing lists
     gatewayed to the NNTP server, you can read those groups without
     problems, but you can’t post/followup to them without some
     difficulty.  One solution is to add a ‘to-address’ to the group
     parameters (*note Group Parameters::).  An easier thing to do is
     set the ‘gnus-mailing-list-groups’ to a regexp that matches the
     groups that really are mailing lists.  Then, at least, followups to
     the mailing lists will work most of the time.  Posting to these
     groups (‘a’) is still a pain, though.

‘gnus-user-agent’

     This variable controls which information should be exposed in the
     User-Agent header.  It can be a list of symbols or a string.  Valid
     symbols are ‘gnus’ (show Gnus version) and ‘emacs’ (show Emacs
     version).  In addition to the Emacs version, you can add ‘config’
     (show system configuration) or ‘type’ (show system type).  If you
     set it to a string, be sure to use a valid format, see RFC 2616.

   You may want to do spell-checking on messages that you send out.  Or,
if you don’t want to spell-check by hand, you could add automatic
spell-checking via the ‘ispell’ package:

     (add-hook 'message-send-hook 'ispell-message)

   If you want to change the ‘ispell’ dictionary based on what group
you’re in, you could say something like the following:

     (add-hook 'gnus-select-group-hook
               (lambda ()
                 (cond
                  ((string-match
                    "^de\\." (gnus-group-real-name gnus-newsgroup-name))
                   (ispell-change-dictionary "deutsch"))
                  (t
                   (ispell-change-dictionary "english")))))

   Modify to suit your needs.

   If ‘gnus-message-highlight-citation’ is ‘t’, different levels of
citations are highlighted like in Gnus article buffers also in message
mode buffers.


File: gnus.info,  Node: Archived Messages,  Next: Posting Styles,  Prev: Mail and Post,  Up: Composing Messages

# /. 6.5 Archived Messages
=========================

Gnus provides a few different methods for storing the mail and news you
send.  The default method is to use the “archive virtual server” to
store the messages.  If you want to disable this completely, the
‘gnus-message-archive-group’ variable should be ‘nil’.  The default is
‘"sent.%Y-%m"’, which gives you one archive group per month.

   For archiving interesting messages in a group you read, see the ‘B c’
(‘gnus-summary-copy-article’) command (*note Mail Group Commands::).

   ‘gnus-message-archive-method’ says what virtual server Gnus is to use
to store sent messages.  The default is ‘"archive"’, and when actually
being used it is expanded into:

     (nnfolder "archive"
               (nnfolder-directory   "~/Mail/archive")
               (nnfolder-active-file "~/Mail/archive/active")
               (nnfolder-get-new-mail nil)
               (nnfolder-inhibit-expiry t))

     Note: a server like this is saved in the ‘~/.newsrc.eld’ file first
     so that it may be used as a real method of the server which is
     named ‘"archive"’ (that is, for the case where
     ‘gnus-message-archive-method’ is set to ‘"archive"’) ever since.
     If it once has been saved, it will never be updated by default even
     if you change the value of ‘gnus-message-archive-method’ afterward.
     Therefore, the server ‘"archive"’ doesn’t necessarily mean the
     ‘nnfolder’ server like this at all times.  If you want the saved
     method to reflect always the value of
     ‘gnus-message-archive-method’, set the
     ‘gnus-update-message-archive-method’ variable to a non-‘nil’ value.
     The default value of this variable is ‘nil’.

   You can, however, use any mail select method (‘nnml’, ‘nnmbox’,
etc.).  ‘nnfolder’ is a quite likable select method for doing this sort
of thing, though.  If you don’t like the default directory chosen, you
could say something like:

     (setq gnus-message-archive-method
           '(nnfolder "archive"
                      (nnfolder-inhibit-expiry t)
                      (nnfolder-active-file "~/News/sent-mail/active")
                      (nnfolder-directory "~/News/sent-mail/")))

   Gnus will insert ‘Gcc’ headers in all outgoing messages that point to
one or more group(s) on that server.  Which group to use is determined
by the ‘gnus-message-archive-group’ variable.

   This variable can be used to do the following:

a string
     Messages will be saved in that group.

     Note that you can include a select method in the group name, then
     the message will not be stored in the select method given by
     ‘gnus-message-archive-method’, but in the select method specified
     by the group name, instead.  Suppose ‘gnus-message-archive-method’
     has the default value shown above.  Then setting
     ‘gnus-message-archive-group’ to ‘"foo"’ means that outgoing
     messages are stored in ‘nnfolder+archive:foo’, but if you use the
     value ‘"nnml:foo"’, then outgoing messages will be stored in
     ‘nnml:foo’.

a list of strings
     Messages will be saved in all those groups.

an alist of regexps, functions and forms
     When a key “matches”, the result is used.

‘nil’
     No message archiving will take place.

   Let’s illustrate:

   Just saving to a single group called ‘MisK’:
     (setq gnus-message-archive-group "MisK")

   Saving to two groups, ‘MisK’ and ‘safe’:
     (setq gnus-message-archive-group '("MisK" "safe"))

   Save to different groups based on what group you are in:
     (setq gnus-message-archive-group
           '(("^alt" "sent-to-alt")
             ("mail" "sent-to-mail")
             (".*" "sent-to-misc")))

   More complex stuff:
     (setq gnus-message-archive-group
           '((if (message-news-p)
                 "misc-news"
               "misc-mail")))

   How about storing all news messages in one file, but storing all mail
messages in one file per month:

     (setq gnus-message-archive-group
           '((if (message-news-p)
                 "misc-news"
               (concat "mail." (format-time-string "%Y-%m")))))

   Now, when you send a message off, it will be stored in the
appropriate group.  (If you want to disable storing for just one
particular message, you can just remove the ‘Gcc’ header that has been
inserted.)  The archive group will appear in the group buffer the next
time you start Gnus, or the next time you press ‘F’ in the group buffer.
You can enter it and read the articles in it just like you’d read any
other group.  If the group gets really big and annoying, you can simply
rename if (using ‘G r’ in the group buffer) to something
nice—‘misc-mail-september-1995’, or whatever.  New messages will
continue to be stored in the old (now empty) group.

‘gnus-gcc-mark-as-read’
     If non-‘nil’, automatically mark ‘Gcc’ articles as read.

‘gnus-gcc-externalize-attachments’
     If ‘nil’, attach files as normal parts in Gcc copies; if a regexp
     and matches the Gcc group name, attach files as external parts; if
     it is ‘all’, attach local files as external parts; if it is other
     non-‘nil’, the behavior is the same as ‘all’, but it may be changed
     in the future.

‘gnus-gcc-self-resent-messages’
     Like the ‘gcc-self’ group parameter, applied only for unmodified
     messages that ‘gnus-summary-resend-message’ (*note Summary Mail
     Commands::) resends.  Non-‘nil’ value of this variable takes
     precedence over any existing ‘Gcc’ header.

     If this is ‘none’, no ‘Gcc’ copy will be made.  If this is ‘t’,
     messages resent will be ‘Gcc’ copied to the current group.  If this
     is a string, it specifies a group to which resent messages will be
     ‘Gcc’ copied.  If this is ‘nil’, ‘Gcc’ will be done according to
     existing ‘Gcc’ header(s), if any.  If this is ‘no-gcc-self’, that
     is the default, resent messages will be ‘Gcc’ copied to groups that
     existing ‘Gcc’ header specifies, except for the current group.

‘gnus-gcc-pre-body-encode-hook’
‘gnus-gcc-post-body-encode-hook’

     These hooks are run before/after encoding the message body of the
     Gcc copy of a sent message.  The current buffer (when the hook is
     run) contains the message including the message header.  Changes
     made to the message will only affect the Gcc copy, but not the
     original message.  You can use these hooks to edit the copy (and
     influence subsequent transformations), e.g., remove MML secure tags
     (*note Signing and encrypting::).


File: gnus.info,  Node: Posting Styles,  Next: Drafts,  Prev: Archived Messages,  Up: Composing Messages

# /. 6.6 Posting Styles
======================

All them variables, they make my head swim.

   So what if you want a different ‘Organization’ and signature based on
what groups you post to?  And you post both from your home machine and
your work machine, and you want different ‘From’ lines, and so on?

   One way to do stuff like that is to write clever hooks that change
the variables you need to have changed.  That’s a bit boring, so
somebody came up with the bright idea of letting the user specify these
things in a handy alist.  Here’s an example of a ‘gnus-posting-styles’
variable:

     ((".*"
       (signature "Peace and happiness")
       (organization "What me?"))
      ("^comp"
       (signature "Death to everybody"))
      ("comp.emacs.i-love-it"
       (organization "Emacs is it")))

   As you might surmise from this example, this alist consists of
several “styles”.  Each style will be applicable if the first element
“matches”, in some form or other.  The entire alist will be iterated
over, from the beginning towards the end, and each match will be
applied, which means that attributes in later styles that match override
the same attributes in earlier matching styles.  So
‘comp.programming.literate’ will have the ‘Death to everybody’ signature
and the ‘What me?’ ‘Organization’ header.

   The first element in each style is called the ‘match’.  If it’s a
string, then Gnus will try to regexp match it against the group name.
If it is the form ‘(header MATCH REGEXP)’, then Gnus will look in the
original article for a header whose name is MATCH and compare that
REGEXP.  MATCH and REGEXP are strings.  (The original article is the one
you are replying or following up to.  If you are not composing a reply
or a followup, then there is nothing to match against.)  If the ‘match’
is a function symbol, that function will be called with no arguments.
If it’s a variable symbol, then the variable will be referenced.  If
it’s a list, then that list will be ‘eval’ed.  In any case, if this
returns a non-‘nil’ value, then the style is said to “match”.

   Each style may contain an arbitrary amount of “attributes”.  Each
attribute consists of a ‘(NAME VALUE)’ pair.  In addition, you can also
use the ‘(NAME :file VALUE)’ form or the ‘(NAME :value VALUE)’ form.
Where ‘:file’ signifies VALUE represents a file name and its contents
should be used as the attribute value, ‘:value’ signifies VALUE does not
represent a file name explicitly.  The attribute name can be one of:

   • ‘signature’
   • ‘signature-file’
   • ‘x-face-file’
   • ‘address’, overriding ‘user-mail-address’
   • ‘name’, overriding ‘(user-full-name)’
   • ‘body’

   Note that the ‘signature-file’ attribute honors the variable
‘message-signature-directory’.

   The attribute name can also be a string or a symbol.  In that case,
this will be used as a header name, and the value will be inserted in
the headers of the article; if the value is ‘nil’, the header name will
be removed.  If the attribute name is ‘eval’, the form is evaluated, and
the result is thrown away.

   The attribute value can be a string, a function with zero arguments
(the return value will be used), a variable (its value will be used) or
a list (it will be ‘eval’ed and the return value will be used).  The
functions and sexps are called/‘eval’ed in the message buffer that is
being set up.

   In the case of a string value, if the ‘match’ is a regular
expression, or if it takes the form ‘(header MATCH REGEXP)’, a
‘gnus-match-substitute-replacement’ is proceed on the value to replace
the positional parameters ‘\N’ by the corresponding parenthetical
matches (*note Replacing the Text that Matched: (elisp)Replacing Match.)

   If you wish to check whether the message you are about to compose is
meant to be a news article or a mail message, you can check the values
of the ‘message-news-p’ and ‘message-mail-p’ functions.

   So here’s a new example:

     (setq gnus-posting-styles
           '((".*"
              (signature-file "~/.signature")
              (name "User Name")
              (x-face-file "~/.xface")
              (x-url (getenv "WWW_HOME"))
              (organization "People's Front Against MWM"))
             ("^rec.humor"
              (signature my-funny-signature-randomizer))
             ((equal (system-name) "gnarly")  ;; A form
              (signature my-quote-randomizer))
             (message-news-p        ;; A function symbol
              (signature my-news-signature))
             (window-system         ;; A value symbol
              ("X-Window-System" (format "%s" window-system)))
             ;; If I’m replying to Larsi, set the Organization header.
             ((header "from" "larsi.*org")
              (Organization "Somewhere, Inc."))
             ;; Reply to a message from the same subaddress the message
             ;; was sent to.
             ((header "x-original-to" "me\\(\\+.+\\)@example.org")
              (address "me\\1@example.org"))
             ((posting-from-work-p) ;; A user defined function
              (signature-file "~/.work-signature")
              (address "user@bar.foo")
              (body "You are fired.\n\nSincerely, your boss.")
              ("X-Message-SMTP-Method" "smtp smtp.example.org 587")
              (organization "Important Work, Inc"))
             ("nnml:.*"
              (From (with-current-buffer gnus-article-buffer
                      (message-fetch-field "to"))))
             ("^nn.+:"
              (signature-file "~/.mail-signature"))))

   The ‘nnml:.*’ rule means that you use the ‘To’ address as the ‘From’
address in all your outgoing replies, which might be handy if you fill
many roles.  You may also use ‘message-alternative-emails’ instead.
*Note Message Headers: (message)Message Headers.

   Of particular interest in the “work-mail” style is the
‘X-Message-SMTP-Method’ header.  It specifies how to send the outgoing
email.  You may want to sent certain emails through certain SMTP servers
due to company policies, for instance.  *Note Message Variables:
(message)Mail Variables.


File: gnus.info,  Node: Drafts,  Next: Rejected Articles,  Prev: Posting Styles,  Up: Composing Messages

# /. 6.7 Drafts
==============

If you are writing a message (mail or news) and suddenly remember that
you have a steak in the oven (or some pesto in the food processor, you
craaazy vegetarians), you’ll probably wish there was a method to save
the message you are writing so that you can continue editing it some
other day, and send it when you feel its finished.

   Well, don’t worry about it.  Whenever you start composing a message
of some sort using the Gnus mail and post commands, the buffer you get
will automatically associate to an article in a special “draft” group.
If you save the buffer the normal way (‘C-x C-s’, for instance), the
article will be saved there.  (Auto-save files also go to the draft
group.)

   The draft group is a special group (which is implemented as an
‘nndraft’ group, if you absolutely have to know) called
‘nndraft:drafts’.  The variable ‘nndraft-directory’ says where ‘nndraft’
is to store its files.  What makes this group special is that you can’t
tick any articles in it or mark any articles as read—all articles in the
group are permanently unread.

   If the group doesn’t exist, it will be created and you’ll be
subscribed to it.  The only way to make it disappear from the Group
buffer is to unsubscribe it.  The special properties of the draft group
comes from a group property (*note Group Parameters::), and if lost the
group behaves like any other group.  This means the commands below will
not be available.  To restore the special properties of the group, the
simplest way is to kill the group, using ‘C-k’, and restart Gnus.  The
group is automatically created again with the correct parameters.  The
content of the group is not lost.

   When you want to continue editing the article, you simply enter the
draft group and push ‘D e’ (‘gnus-draft-edit-message’) to do that.  You
will be placed in a buffer where you left off.

   Rejected articles will also be put in this draft group (*note
Rejected Articles::).

   If you have lots of rejected messages you want to post (or mail)
without doing further editing, you can use the ‘D s’ command
(‘gnus-draft-send-message’).  This command understands the
process/prefix convention (*note Process/Prefix::).  The ‘D S’ command
(‘gnus-draft-send-all-messages’) will ship off all messages in the
buffer.

   If you have some messages that you wish not to send, you can use the
‘D t’ (‘gnus-draft-toggle-sending’) command to mark the message as
unsendable.  This is a toggling command.

   Finally, if you want to delete a draft, use the normal ‘B <DEL>’
command (*note Mail Group Commands::).


File: gnus.info,  Node: Rejected Articles,  Next: Signing and encrypting,  Prev: Drafts,  Up: Composing Messages

# /. 6.8 Rejected Articles
=========================

Sometimes a news server will reject an article.  Perhaps the server
doesn’t like your face.  Perhaps it just feels miserable.  Perhaps
_there be demons_.  Perhaps you have included too much cited text.
Perhaps the disk is full.  Perhaps the server is down.

   These situations are, of course, totally beyond the control of Gnus.
(Gnus, of course, loves the way you look, always feels great, has angels
fluttering around inside of it, doesn’t care about how much cited text
you include, never runs full and never goes down.)  So Gnus saves these
articles until some later time when the server feels better.

   The rejected articles will automatically be put in a special draft
group (*note Drafts::).  When the server comes back up again, you’d then
typically enter that group and send all the articles off.


File: gnus.info,  Node: Signing and encrypting,  Prev: Rejected Articles,  Up: Composing Messages

# /. 6.9 Signing and encrypting
==============================

Gnus can digitally sign and encrypt your messages, using vanilla PGP
format or PGP/MIME or S/MIME.  For decoding such messages, see the
‘mm-verify-option’ and ‘mm-decrypt-option’ options (*note Security::).

   Often, you would like to sign replies to people who send you signed
messages.  Even more often, you might want to encrypt messages which are
in reply to encrypted messages.  Gnus offers ‘gnus-message-replysign’ to
enable the former, and ‘gnus-message-replyencrypt’ for the latter.  In
addition, setting ‘gnus-message-replysignencrypted’ (on by default) will
sign automatically encrypted messages.

   Instructing MML to perform security operations on a MIME part is done
using the ‘C-c C-m s’ key map for signing and the ‘C-c C-m c’ key map
for encryption, as follows.

‘C-c C-m s s’

     Digitally sign current message using S/MIME.

‘C-c C-m s o’

     Digitally sign current message using PGP.

‘C-c C-m s p’

     Digitally sign current message using PGP/MIME.

‘C-c C-m c s’

     Digitally encrypt current message using S/MIME.

‘C-c C-m c o’

     Digitally encrypt current message using PGP.

‘C-c C-m c p’

     Digitally encrypt current message using PGP/MIME.

‘C-c C-m C-n’
     Remove security related MML tags from message.

   *Note Security: (message)Security, for more information.


File: gnus.info,  Node: Select Methods,  Next: Scoring,  Prev: Composing Messages,  Up: Top

# /. 7 Select Methods
********************

A “foreign group” is a group not read by the usual (or default) means.
It could be, for instance, a group from a different NNTP server, it
could be a virtual group, or it could be your own personal mail group.

   A foreign group (or any group, really) is specified by a “name” and a
“select method”.  To take the latter first, a select method is a list
where the first element says what back end to use (e.g., ‘nntp’,
‘nnspool’, ‘nnml’) and the second element is the “server name”.  There
may be additional elements in the select method, where the value may
have special meaning for the back end in question.

   One could say that a select method defines a “virtual server”—so we
do just that (*note Server Buffer::).

   The “name” of the group is the name the back end will recognize the
group as.

   For instance, the group ‘soc.motss’ on the NNTP server
‘some.where.edu’ will have the name ‘soc.motss’ and select method ‘(nntp
"some.where.edu")’.  Gnus will call this group
‘nntp+some.where.edu:soc.motss’, even though the ‘nntp’ back end just
knows this group as ‘soc.motss’.

   The different methods all have their peculiarities, of course.

* Menu:

* Server Buffer::               Making and editing virtual servers.
* Getting News::                Reading USENET news with Gnus.
* Using IMAP::                  Reading mail from IMAP.
* Getting Mail::                Reading your personal mail with Gnus.
* Browsing the Web::            Getting messages from a plethora of Web sources.
* Other Sources::               Reading directories, files.
* Virtual Groups::              Combining articles and groups together.
* Email Based Diary::           Using mails to manage diary events in Gnus.
* Gnus Unplugged::              Reading news and mail offline.


File: gnus.info,  Node: Server Buffer,  Next: Getting News,  Up: Select Methods

# /. 7.1 Server Buffer
=====================

Traditionally, a “server” is a machine or a piece of software that one
connects to, and then requests information from.  Gnus does not connect
directly to any real servers, but does all transactions through one back
end or other.  But that’s just putting one layer more between the actual
media and Gnus, so we might just as well say that each back end
represents a virtual server.

   For instance, the ‘nntp’ back end may be used to connect to several
different actual NNTP servers, or, perhaps, to many different ports on
the same actual NNTP server.  You tell Gnus which back end to use, and
what parameters to set by specifying a “select method”.

   These select method specifications can sometimes become quite
complicated—say, for instance, that you want to read from the NNTP
server ‘news.funet.fi’ on port number 13, which hangs if queried for NOV
headers and has a buggy select.  Ahem.  Anyway, if you had to specify
that for each group that used this server, that would be too much work,
so Gnus offers a way of naming select methods, which is what you do in
the server buffer.

   To enter the server buffer, use the ‘^’
(‘gnus-group-enter-server-mode’) command in the group buffer.

* Menu:

* Server Buffer Format::        You can customize the look of this buffer.
* Server Commands::             Commands to manipulate servers.
* Example Methods::             Examples server specifications.
* Creating a Virtual Server::   An example session.
* Server Variables::            Which variables to set.
* Servers and Methods::         You can use server names as select methods.
* Unavailable Servers::         Some servers you try to contact may be down.

   ‘gnus-server-mode-hook’ is run when creating the server buffer.


File: gnus.info,  Node: Server Buffer Format,  Next: Server Commands,  Up: Server Buffer

7.1.1 Server Buffer Format
--------------------------

You can change the look of the server buffer lines by changing the
‘gnus-server-line-format’ variable.  This is a ‘format’-like variable,
with some simple extensions:

‘h’
     How the news is fetched—the back end name.

‘n’
     The name of this server.

‘w’
     Where the news is to be fetched from—the address.

‘s’
     The opened/closed/denied status of the server.

‘a’
     Whether this server is agentized.

   The mode line can also be customized by using the
‘gnus-server-mode-line-format’ variable (*note Mode Line Formatting::).
The following specs are understood:

‘S’
     Server name.

‘M’
     Server method.

   Also *note Formatting Variables::.


File: gnus.info,  Node: Server Commands,  Next: Example Methods,  Prev: Server Buffer Format,  Up: Server Buffer

7.1.2 Server Commands
---------------------

The following key bindings are available in the server buffer.  Be aware
that some of the commands will only work on servers that you’ve added
through this interface (with ‘a’), not with servers you’ve defined in
your init files.

‘v’
     The key ‘v’ is reserved for users.  You can bind it to some command
     or better use it as a prefix key.

‘a’
     Add a new server (‘gnus-server-add-server’).

‘e’
     Edit a server (‘gnus-server-edit-server’).

‘S’
     Show the definition of a server (‘gnus-server-show-server’).

‘<SPC>’
     Browse the current server (‘gnus-server-read-server’).

‘q’
     Return to the group buffer (‘gnus-server-exit’).

‘k’
     Kill the current server (‘gnus-server-kill-server’).

‘y’
     Yank the previously killed server (‘gnus-server-yank-server’).

‘c’
     Copy the current server (‘gnus-server-copy-server’).

‘l’
     List all servers (‘gnus-server-list-servers’).

‘s’
     Request that the server scan its sources for new articles
     (‘gnus-server-scan-server’).  This is mainly sensible with mail
     servers.

‘g’
     Request that the server regenerate all its data structures
     (‘gnus-server-regenerate-server’).  This can be useful if you have
     a mail back end that has gotten out of sync.

‘z’

     Compact all groups in the server under point
     (‘gnus-server-compact-server’).  Currently implemented only in nnml
     (*note Mail Spool::).  This removes gaps between article numbers,
     hence getting a correct total article count.

   Some more commands for closing, disabling, and re-opening servers are
listed in *note Unavailable Servers::.


File: gnus.info,  Node: Example Methods,  Next: Creating a Virtual Server,  Prev: Server Commands,  Up: Server Buffer

7.1.3 Example Methods
---------------------

Most select methods are pretty simple and self-explanatory:

     (nntp "news.funet.fi")

   Reading directly from the spool is even simpler:

     (nnspool "")

   As you can see, the first element in a select method is the name of
the back end, and the second is the “address”, or “name”, if you will.

   After these two elements, there may be an arbitrary number of
‘(VARIABLE FORM)’ pairs.

   To go back to the first example—imagine that you want to read from
port 15 on that machine.  This is what the select method should look
like then:

     (nntp "news.funet.fi" (nntp-port-number 15))

   You should read the documentation to each back end to find out what
variables are relevant, but here’s an ‘nnmh’ example:

   ‘nnmh’ is a mail back end that reads a spool-like structure.  Say you
have two structures that you wish to access: One is your private mail
spool, and the other is a public one.  Here’s the possible spec for your
private mail:

     (nnmh "private" (nnmh-directory "~/private/mail/"))

   (This server is then called ‘private’, but you may have guessed
that.)

   Here’s the method for a public spool:

     (nnmh "public"
           (nnmh-directory "/usr/information/spool/")
           (nnmh-get-new-mail nil))

   If you are behind a firewall and only have access to the NNTP server
from the firewall machine, you can instruct Gnus to ‘rlogin’ on the
firewall machine and connect with netcat
(https://netcat.sourceforge.net/) from there to the NNTP server.  Doing
this can be rather fiddly, but your virtual server definition should
probably look something like this:

     (nntp "firewall"
           (nntp-open-connection-function nntp-open-via-rlogin-and-netcat)
           (nntp-via-address "the.firewall.machine")
           (nntp-address "the.real.nntp.host"))

   If you want to use the wonderful ‘ssh’ program to provide a
compressed connection over the modem line, you could add the following
configuration to the example above:

           (nntp-via-rlogin-command "ssh")

   See also ‘nntp-via-rlogin-command-switches’.  Here’s an example for
an indirect connection:

     (setq gnus-select-method
           '(nntp "indirect"
                  (nntp-address "news.server.example")
                  (nntp-via-user-name "intermediate_user_name")
                  (nntp-via-address "intermediate.host.example")
                  (nntp-via-rlogin-command "ssh")
                  (nntp-via-rlogin-command-switches ("-C"))
                  (nntp-open-connection-function nntp-open-via-rlogin-and-netcat)))

   This means that you have to have set up ‘ssh-agent’ correctly to
provide automatic authorization, of course.

   If you’re behind a firewall, but have direct access to the outside
world through a wrapper command like "runsocks", you could open a
socksified netcat connection to the news server as follows:

     (nntp "outside"
           (nntp-pre-command "runsocks")
           (nntp-open-connection-function nntp-open-netcat-stream)
           (nntp-address "the.news.server"))


File: gnus.info,  Node: Creating a Virtual Server,  Next: Server Variables,  Prev: Example Methods,  Up: Server Buffer

7.1.4 Creating a Virtual Server
-------------------------------

If you’re saving lots of articles in the cache by using persistent
articles, you may want to create a virtual server to read the cache.

   First you need to add a new server.  The ‘a’ command does that.  It
would probably be best to use ‘nnml’ to read the cache.  You could also
use ‘nnspool’ or ‘nnmh’, though.

   Type ‘a nnml <RET> cache <RET>’.

   You should now have a brand new ‘nnml’ virtual server called ‘cache’.
You now need to edit it to have the right definitions.  Type ‘e’ to edit
the server.  You’ll be entered into a buffer that will contain the
following:

     (nnml "cache")

   Change that to:

     (nnml "cache"
              (nnml-directory "~/News/cache/")
              (nnml-active-file "~/News/cache/active"))

   Type ‘C-c C-c’ to return to the server buffer.  If you now press
‘<RET>’ over this virtual server, you should be entered into a browse
buffer, and you should be able to enter any of the groups displayed.


File: gnus.info,  Node: Server Variables,  Next: Servers and Methods,  Prev: Creating a Virtual Server,  Up: Server Buffer

7.1.5 Server Variables
----------------------

One sticky point when defining variables (both on back ends and in Emacs
in general) is that some variables are typically initialized from other
variables when the definition of the variables is being loaded.  If you
change the “base” variable after the variables have been loaded, you
won’t change the “derived” variables.

   This typically affects directory and file variables.  For instance,
‘nnml-directory’ is ‘~/Mail/’ by default, and all ‘nnml’ directory
variables are initialized from that variable, so ‘nnml-active-file’ will
be ‘~/Mail/active’.  If you define a new virtual ‘nnml’ server, it will
_not_ suffice to set just ‘nnml-directory’—you have to explicitly set
all the file variables to be what you want them to be.  For a complete
list of variables for each back end, see each back end’s section later
in this manual, but here’s an example ‘nnml’ definition:

     (nnml "public"
           (nnml-directory "~/my-mail/")
           (nnml-active-file "~/my-mail/active")
           (nnml-newsgroups-file "~/my-mail/newsgroups"))

   Server variables are often called “server parameters”.


File: gnus.info,  Node: Servers and Methods,  Next: Unavailable Servers,  Prev: Server Variables,  Up: Server Buffer

7.1.6 Servers and Methods
-------------------------

Wherever you would normally use a select method (e.g.,
‘gnus-secondary-select-method’, in the group select method, when
browsing a foreign server) you can use a virtual server name instead.
This could potentially save lots of typing.  And it’s nice all over.


File: gnus.info,  Node: Unavailable Servers,  Prev: Servers and Methods,  Up: Server Buffer

7.1.7 Unavailable Servers
-------------------------

If a server seems to be unreachable, Gnus will mark that server as
‘denied’.  That means that any subsequent attempt to make contact with
that server will just be ignored.  “It can’t be opened,” Gnus will tell
you, without making the least effort to see whether that is actually the
case or not.

   That might seem quite naughty, but it does make sense most of the
time.  Let’s say you have 10 groups subscribed to on server
‘nephelococcygia.com’.  This server is located somewhere quite far away
from you and the machine is quite slow, so it takes 1 minute just to
find out that it refuses connection to you today.  If Gnus were to
attempt to do that 10 times, you’d be quite annoyed, so Gnus won’t
attempt to do that.  Once it has gotten a single “connection refused”,
it will regard that server as “down”.

   So, what happens if the machine was only feeling unwell temporarily?
How do you test to see whether the machine has come up again?

   You jump to the server buffer (*note Server Buffer::) and poke it
with the following commands:

‘O’
     Try to establish connection to the server on the current line
     (‘gnus-server-open-server’).

‘C’
     Close the connection (if any) to the server
     (‘gnus-server-close-server’).

‘D’
     Mark the current server as unreachable (‘gnus-server-deny-server’).
     This will effectively disable the server.

‘M-o’
     Open the connections to all servers in the buffer
     (‘gnus-server-open-all-servers’).

‘M-c’
     Close the connections to all servers in the buffer
     (‘gnus-server-close-all-servers’).

‘R’
     Remove all marks to whether Gnus was denied connection from any
     servers (‘gnus-server-remove-denials’).

‘c’
     Copy a server and give it a new name (‘gnus-server-copy-server’).
     This can be useful if you have a complex method definition, and
     want to use the same definition towards a different (physical)
     server.

‘L’
     Set server status to offline (‘gnus-server-offline-server’).


File: gnus.info,  Node: Getting News,  Next: Using IMAP,  Prev: Server Buffer,  Up: Select Methods

# /. 7.2 Getting News
====================

A newsreader is normally used for reading news.  Gnus currently provides
only two methods of getting news—it can read from an NNTP server, or it
can read from a local spool.

* Menu:

* NNTP::                        Reading news from an NNTP server.
* News Spool::                  Reading news from the local spool.


File: gnus.info,  Node: NNTP,  Next: News Spool,  Up: Getting News

7.2.1 NNTP
----------

Subscribing to a foreign group from an NNTP server is rather easy.  You
just specify ‘nntp’ as method and the address of the NNTP server as the,
uhm, address.

   If the NNTP server is located at a non-standard port, setting the
third element of the select method to this port number should allow you
to connect to the right port.  You’ll have to edit the group info for
that (*note Foreign Groups::).

   The name of the foreign group can be the same as a native group.  In
fact, you can subscribe to the same group from as many different servers
you feel like.  There will be no name collisions.

   The following variables can be used to create a virtual ‘nntp’
server:

‘nntp-server-opened-hook’
     is run after a connection has been made.  It can be used to send
     commands to the NNTP server after it has been contacted.  By
     default it sends the command ‘MODE READER’ to the server with the
     ‘nntp-send-mode-reader’ function.  This function should always be
     present in this hook.

‘nntp-authinfo-function’
     This function will be used to send ‘AUTHINFO’ to the NNTP server.
     The default function is ‘nntp-send-authinfo’, which looks through
     your ‘~/.authinfo’ for applicable entries.  If none are found, it
     will prompt you for a login name and a password.  The format of the
     ‘~/.authinfo’ file is (almost) the same as the ‘ftp’ ‘~/.netrc’
     file, which is defined in the ‘ftp’ manual page, but here are the
     salient facts:

       1. The file contains one or more line, each of which define one
          server.

       2. Each line may contain an arbitrary number of token/value
          pairs.

          The valid tokens include ‘machine’, ‘login’, ‘password’,
          ‘default’.  In addition Gnus introduces two new tokens, not
          present in the original ‘.netrc’/‘ftp’ syntax, namely ‘port’
          and ‘force’.  (This is the only way the ‘.authinfo’ file
          format deviates from the ‘.netrc’ file format.)  ‘port’ is
          used to indicate what port on the server the credentials apply
          to and ‘force’ is explained below.

     Here’s an example file:

          machine news.uio.no login larsi password geheimnis
          machine nntp.ifi.uio.no login larsi force yes

     The token/value pairs may appear in any order; ‘machine’ doesn’t
     have to be first, for instance.

     In this example, both login name and password have been supplied
     for the former server, while the latter has only the login name
     listed, and the user will be prompted for the password.  The latter
     also has the ‘force’ tag, which means that the authinfo will be
     sent to the NNTP server upon connection; the default (i.e., when
     there is not ‘force’ tag) is to not send authinfo to the NNTP
     server until the NNTP server asks for it.

     You can also add ‘default’ lines that will apply to all servers
     that don’t have matching ‘machine’ lines.

          default force yes

     This will force sending ‘AUTHINFO’ commands to all servers not
     previously mentioned.

     Remember to not leave the ‘~/.authinfo’ file world-readable.

‘nntp-server-action-alist’
     This is a list of regexps to match on server types and actions to
     be taken when matches are made.  For instance, if you want Gnus to
     beep every time you connect to innd, you could say something like:

          (setq nntp-server-action-alist
                '(("innd" (ding))))

     You probably don’t want to do that, though.

     The default value is

          '(("nntpd 1\\.5\\.11t"
             (remove-hook 'nntp-server-opened-hook
                          'nntp-send-mode-reader)))

     This ensures that Gnus doesn’t send the ‘MODE READER’ command to
     nntpd 1.5.11t, since that command chokes that server, I’ve been
     told.

‘nntp-maximum-request’
     If the NNTP server doesn’t support NOV headers, this back end will
     collect headers by sending a series of ‘head’ commands.  To speed
     things up, the back end sends lots of these commands without
     waiting for reply, and then reads all the replies.  This is
     controlled by the ‘nntp-maximum-request’ variable, and is 400 by
     default.  If your network is buggy, you should set this to 1.

‘nntp-connection-timeout’
     If you have lots of foreign ‘nntp’ groups that you connect to
     regularly, you’re sure to have problems with NNTP servers not
     responding properly, or being too loaded to reply within reasonable
     time.  This is can lead to awkward problems, which can be helped
     somewhat by setting ‘nntp-connection-timeout’.  This is an integer
     that says how many seconds the ‘nntp’ back end should wait for a
     connection before giving up.  If it is ‘nil’, which is the default,
     no timeouts are done.

‘nntp-nov-is-evil’
     If the NNTP server does not support NOV, you could set this
     variable to ‘t’, but ‘nntp’ usually checks automatically whether
     NOV can be used.

‘nntp-xover-commands’
     List of strings used as commands to fetch NOV lines from a server.
     The default value of this variable is ‘("XOVER" "XOVERVIEW")’.

‘nntp-nov-gap’
     ‘nntp’ normally sends just one big request for NOV lines to the
     server.  The server responds with one huge list of lines.  However,
     if you have read articles 2–5000 in the group, and only want to
     read article 1 and 5001, that means that ‘nntp’ will fetch 4999 NOV
     lines that you will not need.  This variable says how big a gap
     between two consecutive articles is allowed to be before the
     ‘XOVER’ request is split into several request.  Note that if your
     network is fast, setting this variable to a really small number
     means that fetching will probably be slower.  If this variable is
     ‘nil’, ‘nntp’ will never split requests.  The default is 5.

‘nntp-xref-number-is-evil’
     When Gnus refers to an article having the ‘Message-ID’ that a user
     specifies or having the ‘Message-ID’ of the parent article of the
     current one (*note Finding the Parent::), Gnus sends a ‘HEAD’
     command to the NNTP server to know where it is, and the server
     returns the data containing the pairs of a group and an article
     number in the ‘Xref’ header.  Gnus normally uses the article number
     to refer to the article if the data shows that that article is in
     the current group, while it uses the ‘Message-ID’ otherwise.
     However, some news servers, e.g., ones running Diablo, run multiple
     engines having the same articles but article numbers are not kept
     synchronized between them.  In that case, the article number that
     appears in the ‘Xref’ header varies by which engine is chosen, so
     you cannot refer to the parent article that is in the current
     group, for instance.  If you connect to such a server, set this
     variable to a non-‘nil’ value, and Gnus never uses article numbers.
     For example:

          (setq gnus-select-method
                '(nntp "newszilla"
                       (nntp-address "newszilla.example.com")
                       (nntp-xref-number-is-evil t)
                       ...))

     The default value of this server variable is ‘nil’.

‘nntp-prepare-server-hook’
     A hook run before attempting to connect to an NNTP server.

‘nntp-record-commands’
     If non-‘nil’, ‘nntp’ will log all commands it sends to the NNTP
     server (along with a timestamp) in the ‘*nntp-log*’ buffer.  This
     is useful if you are debugging a Gnus/NNTP connection that doesn’t
     seem to work.

‘nntp-open-connection-function’
     It is possible to customize how the connection to the nntp server
     will be opened.  If you specify an ‘nntp-open-connection-function’
     parameter, Gnus will use that function to establish the connection.
     Seven pre-made functions are supplied.  These functions can be
     grouped in two categories: direct connection functions (four
     pre-made), and indirect ones (three pre-made).

‘nntp-never-echoes-commands’
     Non-‘nil’ means the nntp server never echoes commands.  It is
     reported that some nntps server doesn’t echo commands.  So, you may
     want to set this to non-‘nil’ in the method for such a server
     setting ‘nntp-open-connection-function’ to ‘nntp-open-ssl-stream’
     for example.  The default value is ‘nil’.  Note that the
     ‘nntp-open-connection-functions-never-echo-commands’ variable
     overrides the ‘nil’ value of this variable.

‘nntp-open-connection-functions-never-echo-commands’
     List of functions that never echo commands.  Add or set a function
     which you set to ‘nntp-open-connection-function’ to this list if it
     does not echo commands.  Note that a non-‘nil’ value of the
     ‘nntp-never-echoes-commands’ variable overrides this variable.  The
     default value is ‘(nntp-open-network-stream)’.

‘nntp-prepare-post-hook’
     A hook run just before posting an article.  If there is no
     ‘Message-ID’ header in the article and the news server provides the
     recommended ID, it will be added to the article before running this
     hook.  It is useful to make ‘Cancel-Lock’ headers even if you
     inhibit Gnus to add a ‘Message-ID’ header, you could say:

          (add-hook 'nntp-prepare-post-hook 'canlock-insert-header)

     Note that not all servers support the recommended ID.  This works
     for INN versions 2.3.0 and later, for instance.

‘nntp-server-list-active-group’
     If ‘nil’, then always use ‘GROUP’ instead of ‘LIST ACTIVE’.  This
     is usually slower, but on misconfigured servers that don’t update
     their active files often, this can help.

* Menu:

* Direct Functions::            Connecting directly to the server.
* Indirect Functions::          Connecting indirectly to the server.
* Common Variables::            Understood by several connection functions.


File: gnus.info,  Node: Direct Functions,  Next: Indirect Functions,  Up: NNTP

7.2.1.1 Direct Functions
........................

These functions are called direct because they open a direct connection
between your machine and the NNTP server.  The behavior of these
functions is also affected by commonly understood variables (*note
Common Variables::).

‘nntp-open-network-stream’
     This is the default, and simply connects to some port or other on
     the remote system.  If both Emacs and the server supports it, the
     connection will be upgraded to an encrypted STARTTLS connection
     automatically.

‘network-only’
     The same as the above, but don’t do automatic STARTTLS upgrades.

‘nntp-open-tls-stream’
     Opens a connection to a server over a “secure” channel.  To use
     this you must have GnuTLS (https://www.gnu.org/software/gnutls/)
     installed.  You then define a server as follows:

          ;; "nntps" is port 563 and is predefined in our ‘/etc/services’
          ;; however, ‘gnutls-cli -p’ doesn’t like named ports.
          ;;
          (nntp "snews.bar.com"
                (nntp-open-connection-function nntp-open-tls-stream)
                (nntp-port-number 563)
                (nntp-address "snews.bar.com"))

‘nntp-open-ssl-stream’
     Opens a connection to a server over a “secure” channel.  To use
     this you must have OpenSSL (https://www.openssl.org/) installed.
     You then define a server as follows:

          ;; "snews" is port 563 and is predefined in our ‘/etc/services’
          ;; however, ‘openssl s_client -port’ doesn’t like named ports.
          ;;
          (nntp "snews.bar.com"
                (nntp-open-connection-function nntp-open-ssl-stream)
                (nntp-port-number 563)
                (nntp-address "snews.bar.com"))

‘nntp-open-netcat-stream’
     Opens a connection to an NNTP server using the ‘netcat’ program.
     You might wonder why this function exists, since we have the
     default ‘nntp-open-network-stream’ which would do the job.  (One
     of) the reason(s) is that if you are behind a firewall but have
     direct connections to the outside world thanks to a command wrapper
     like ‘runsocks’, you can use it like this:

          (nntp "socksified"
                (nntp-pre-command "runsocks")
                (nntp-open-connection-function nntp-open-netcat-stream)
                (nntp-address "the.news.server"))

     With the default method, you would need to wrap your whole Emacs
     session, which is not a good idea.

‘nntp-open-telnet-stream’
     Like ‘nntp-open-netcat-stream’, but uses ‘telnet’ rather than
     ‘netcat’.  ‘telnet’ is a bit less robust because of things like
     line-end-conversion, but sometimes netcat is simply not available.
     The previous example would turn into:

          (nntp "socksified"
                (nntp-pre-command "runsocks")
                (nntp-open-connection-function nntp-open-telnet-stream)
                (nntp-address "the.news.server")
                (nntp-end-of-line "\n"))


File: gnus.info,  Node: Indirect Functions,  Next: Common Variables,  Prev: Direct Functions,  Up: NNTP

7.2.1.2 Indirect Functions
..........................

These functions are called indirect because they connect to an
intermediate host before actually connecting to the NNTP server.  All of
these functions and related variables are also said to belong to the
“via” family of connection: they’re all prefixed with “via” to make
things cleaner.  The behavior of these functions is also affected by
commonly understood variables (*note Common Variables::).

‘nntp-open-via-rlogin-and-netcat’
     Does an ‘rlogin’ on a remote system, and then uses ‘netcat’ to
     connect to the real NNTP server from there.  This is useful for
     instance if you need to connect to a firewall machine first.

     ‘nntp-open-via-rlogin-and-netcat’-specific variables:

     ‘nntp-via-rlogin-command’
          Command used to log in on the intermediate host.  The default
          is ‘rsh’, but ‘ssh’ is a popular alternative.

     ‘nntp-via-rlogin-command-switches’
          List of strings to be used as the switches to
          ‘nntp-via-rlogin-command’.  The default is ‘nil’.  If you use
          ‘ssh’ for ‘nntp-via-rlogin-command’, you may set this to
          ‘("-C")’ in order to compress all data connections.

‘nntp-open-via-rlogin-and-telnet’
     Does essentially the same, but uses ‘telnet’ instead of ‘netcat’ to
     connect to the real NNTP server from the intermediate host.
     ‘telnet’ is a bit less robust because of things like
     line-end-conversion, but sometimes ‘netcat’ is simply not
     available.

     ‘nntp-open-via-rlogin-and-telnet’-specific variables:

     ‘nntp-telnet-command’
          Command used to connect to the real NNTP server from the
          intermediate host.  The default is ‘telnet’.

     ‘nntp-telnet-switches’
          List of strings to be used as the switches to the
          ‘nntp-telnet-command’ command.  The default is ‘("-8")’.

     ‘nntp-via-rlogin-command’
          Command used to log in on the intermediate host.  The default
          is ‘rsh’, but ‘ssh’ is a popular alternative.

     ‘nntp-via-rlogin-command-switches’
          List of strings to be used as the switches to
          ‘nntp-via-rlogin-command’.  If you use ‘ssh’, you may need to
          set this to ‘("-t" "-e" "none")’ or ‘("-C" "-t" "-e" "none")’
          if the telnet command requires a pseudo-tty allocation on an
          intermediate host.  The default is ‘nil’.

     Note that you may want to change the value for ‘nntp-end-of-line’
     to ‘\n’ (*note Common Variables::).

‘nntp-open-via-telnet-and-telnet’
     Does essentially the same, but uses ‘telnet’ instead of ‘rlogin’ to
     connect to the intermediate host.

     ‘nntp-open-via-telnet-and-telnet’-specific variables:

     ‘nntp-via-telnet-command’
          Command used to ‘telnet’ the intermediate host.  The default
          is ‘telnet’.

     ‘nntp-via-telnet-switches’
          List of strings to be used as the switches to the
          ‘nntp-via-telnet-command’ command.  The default is ‘("-8")’.

     ‘nntp-via-user-password’
          Password to use when logging in on the intermediate host.

     ‘nntp-via-envuser’
          If non-‘nil’, the intermediate ‘telnet’ session (client and
          server both) will support the ‘ENVIRON’ option and not prompt
          for login name.  This works for Solaris ‘telnet’, for
          instance.

     ‘nntp-via-shell-prompt’
          Regexp matching the shell prompt on the intermediate host.
          The default is ‘bash\\|\$ *\r?$\\|> *\r?’.

     Note that you may want to change the value for ‘nntp-end-of-line’
     to ‘\n’ (*note Common Variables::).

   Here are some additional variables that are understood by all the
above functions:

‘nntp-via-user-name’
     User name to use when connecting to the intermediate host.

‘nntp-via-address’
     Address of the intermediate host to connect to.


File: gnus.info,  Node: Common Variables,  Prev: Indirect Functions,  Up: NNTP

7.2.1.3 Common Variables
........................

The following variables affect the behavior of all, or several of the
pre-made connection functions.  When not specified, all functions are
affected (the values of the following variables will be used as the
default if each virtual ‘nntp’ server doesn’t specify those server
variables individually).

‘nntp-pre-command’
     A command wrapper to use when connecting through a non native
     connection function (all except ‘nntp-open-network-stream’,
     ‘nntp-open-tls-stream’, and ‘nntp-open-ssl-stream’).  This is where
     you would put a ‘SOCKS’ wrapper for instance.

‘nntp-address’
     The address of the NNTP server.

‘nntp-port-number’
     Port number to connect to the NNTP server.  The default is ‘nntp’.
     If you use NNTP over TLS/SSL, you may want to use integer ports
     rather than named ports (i.e., use ‘563’ instead of ‘snews’ or
     ‘nntps’), because external TLS/SSL tools may not work with named
     ports.

‘nntp-end-of-line’
     String to use as end-of-line marker when talking to the NNTP
     server.  This is ‘\r\n’ by default, but should be ‘\n’ when using a
     non native telnet connection function.

‘nntp-netcat-command’
     Command to use when connecting to the NNTP server through ‘netcat’.
     This is _not_ for an intermediate host.  This is just for the real
     NNTP server.  The default is ‘nc’.

‘nntp-netcat-switches’
     A list of switches to pass to ‘nntp-netcat-command’.  The default
     is ‘()’.


File: gnus.info,  Node: News Spool,  Prev: NNTP,  Up: Getting News

7.2.2 News Spool
----------------

Subscribing to a foreign group from the local spool is extremely easy,
and might be useful, for instance, to speed up reading groups that
contain very big articles—‘alt.binaries.pictures.furniture’, for
instance.

   Anyway, you just specify ‘nnspool’ as the method and ‘""’ (or
anything else) as the address.

   If you have access to a local spool, you should probably use that as
the native select method (*note Finding the News::).  It is normally
faster than using an ‘nntp’ select method, but might not be.  It
depends.  You just have to try to find out what’s best at your site.

‘nnspool-inews-program’
     Program used to post an article.

‘nnspool-inews-switches’
     Parameters given to the inews program when posting an article.

‘nnspool-spool-directory’
     Where ‘nnspool’ looks for the articles.  This is normally
     ‘/usr/spool/news/’.

‘nnspool-nov-directory’
     Where ‘nnspool’ will look for NOV files.  This is normally
     ‘/usr/spool/news/over.view/’.

‘nnspool-lib-dir’
     Where the news lib dir is (‘/usr/lib/news/’ by default).

‘nnspool-active-file’
     The name of the active file.

‘nnspool-newsgroups-file’
     The name of the group descriptions file.

‘nnspool-history-file’
     The name of the news history file.

‘nnspool-active-times-file’
     The name of the active date file.

‘nnspool-nov-is-evil’
     If non-‘nil’, ‘nnspool’ won’t try to use any NOV files that it
     finds.

‘nnspool-sift-nov-with-sed’
     If non-‘nil’, which is the default, use ‘sed’ to get the relevant
     portion from the overview file.  If ‘nil’, ‘nnspool’ will load the
     entire file into a buffer and process it there.


File: gnus.info,  Node: Using IMAP,  Next: Getting Mail,  Prev: Getting News,  Up: Select Methods

# /. 7.3 Using IMAP
==================

The most popular mail backend is probably ‘nnimap’, which provides
access to IMAP servers.  IMAP servers store mail remotely, so the client
doesn’t store anything locally.  This means that it’s a convenient
choice when you’re reading your mail from different locations, or with
different user agents.

* Menu:

* Connecting to an IMAP Server::     Getting started with IMAP.
* Customizing the IMAP Connection::  Variables for IMAP connection.
* Client-Side IMAP Splitting::       Put mail in the correct mail box.
* Support for IMAP Extensions::      Getting extensions and labels from servers.


File: gnus.info,  Node: Connecting to an IMAP Server,  Next: Customizing the IMAP Connection,  Up: Using IMAP

7.3.1 Connecting to an IMAP Server
----------------------------------

Connecting to an IMAP can be very easy.  Type ‘B’ in the group buffer,
or (if your primary interest is reading email), say something like:

     (setq gnus-select-method
           '(nnimap "imap.gmail.com"))

   You’ll be prompted for a user name and password.  If you grow tired
of that, then add the following to your ‘~/.authinfo’ file:

     machine imap.gmail.com login <username> password <password> port imap

   That should basically be it for most users.


File: gnus.info,  Node: Customizing the IMAP Connection,  Next: Client-Side IMAP Splitting,  Prev: Connecting to an IMAP Server,  Up: Using IMAP

7.3.2 Customizing the IMAP Connection
-------------------------------------

Here’s an example method that’s more complex:

     (nnimap "imap.gmail.com"
             (nnimap-inbox "INBOX")
             (nnimap-split-methods default)
             (nnimap-expunge t)
             (nnimap-stream ssl))

‘nnimap-address’
     The address of the server, like ‘imap.gmail.com’.

‘nnimap-user’
     Username to use for authentication to the IMAP server.  This
     corresponds to the value of the ‘login’ token in your ‘~/.authinfo’
     file.  Set this variable if you want to access multiple accounts
     from the same IMAP server.

‘nnimap-server-port’
     If the server uses a non-standard port, that can be specified here.
     A typical port would be ‘"imap"’ or ‘"imaps"’.

‘nnimap-stream’
     How ‘nnimap’ should connect to the server.  Possible values are:

     ‘undecided’
          This is the default, and this first tries the ‘ssl’ setting,
          and then tries the ‘network’ setting.

     ‘ssl’
          This uses standard TLS/SSL connections.

     ‘network’
          Non-encrypted and unsafe straight socket connection, but will
          upgrade to encrypted STARTTLS if both Emacs and the server
          supports it.

     ‘starttls’
          Encrypted STARTTLS over the normal IMAP port.

     ‘shell’
          If you need to tunnel via other systems to connect to the
          server, you can use this option, and customize
          ‘nnimap-shell-program’ to be what you need.

     ‘plain’
          Non-encrypted and unsafe straight socket connection.  STARTTLS
          will not be used even if it is available.

‘nnimap-authenticator’
     Some IMAP servers allow anonymous logins.  In that case, this
     should be set to ‘anonymous’.  If this variable isn’t set, the
     normal login methods will be used.  If you wish to specify a
     specific login method to be used, you can set this variable to
     either ‘login’ (the traditional IMAP login method), ‘plain’,
     ‘cram-md5’ or ‘xoauth2’.  (The latter method requires using the
     ‘oauth2.el’ library.)

‘nnimap-expunge’
     When to expunge deleted messages.  If ‘never’, deleted articles are
     marked with the IMAP ‘\\Delete’ flag but not automatically
     expunged.  If ‘immediately’, deleted articles are immediately
     expunged (this requires the server to support the ‘UID EXPUNGE’
     command).  If ‘on-exit’, deleted articles are flagged, and all
     flagged articles are expunged when the group is closed.

     For backwards compatibility, this variable may also be set to ‘t’
     or ‘nil’.  If the server supports ‘UID EXPUNGE’, both ‘t’ and ‘nil’
     are equivalent to ‘immediately’.  If the server does not support
     ‘UID EXPUNGE’, ‘nil’ is equivalent to ‘never’, while ‘t’ will
     immediately expunge _all_ articles that are currently flagged as
     deleted (i.e., potentially not only the article that was just
     deleted).

‘nnimap-streaming’
     Virtually all IMAP server support fast streaming of data.  If you
     have problems connecting to the server, try setting this to ‘nil’.

‘nnimap-fetch-partial-articles’
     If non-‘nil’, fetch partial articles from the server.  If set to a
     string, then it’s interpreted as a regexp, and parts that have
     matching types will be fetched.  For instance, ‘"text/"’ will fetch
     all textual parts, while leaving the rest on the server.

‘nnimap-record-commands’
     If non-‘nil’, record all IMAP commands in the ‘"*imap log*"’
     buffer.

‘nnimap-use-namespaces’
     If non-‘nil’, omit the IMAP namespace prefix in nnimap group names.
     If your IMAP mailboxes are called something like ‘INBOX’ and
     ‘INBOX.Lists.emacs’, but you’d like the nnimap group names to be
     ‘INBOX’ and ‘Lists.emacs’, you should enable this option.

‘nnimap-keepalive-intervals’
     By default, nnimap will send occasional ‘NOOP’ (keepalive) commands
     to the server, to keep the connection alive.  This option governs
     how often that happens.  It is a cons of two integers, representing
     seconds: first how often to run the keepalive check, and the second
     how many seconds of user inactivity are required to actually send
     the command.  The default, ‘(900 . 300)’, means run the check every
     fifteen minutes and, if the user has been inactive for five
     minutes, send the keepalive command.  Set to ‘nil’ to disable
     keepalive commands altogether.


File: gnus.info,  Node: Client-Side IMAP Splitting,  Next: Support for IMAP Extensions,  Prev: Customizing the IMAP Connection,  Up: Using IMAP

7.3.3 Client-Side IMAP Splitting
--------------------------------

Many people prefer to do the sorting/splitting of mail into their mail
boxes on the IMAP server.  That way they don’t have to download the mail
they’re not all that interested in.

   If you do want to do client-side mail splitting, then the following
variables are relevant:

‘nnimap-inbox’
     This is the IMAP mail box that will be scanned for new mail.  This
     can also be a list of mail box names.

‘nnimap-split-methods’
     Uses the same syntax as ‘nnmail-split-methods’ (*note Splitting
     Mail::), except the symbol ‘default’, which means that it should
     use the value of the ‘nnmail-split-methods’ variable.

‘nnimap-split-fancy’
     Uses the same syntax as ‘nnmail-split-fancy’.

‘nnimap-unsplittable-articles’
     List of flag symbols to ignore when doing splitting.  That is,
     articles that have these flags won’t be considered when splitting.
     The default is ‘(%Deleted %Seen)’.

   By default, the nnimap back end only retrieves the message headers;
the option ‘nnimap-split-download-body’ (which is a regular
customization option, not a server variable) tells it to retrieve the
message bodies as well.  We don’t set this by default because it will
slow IMAP down, and that is not an appropriate decision to make on
behalf of the user.

   Here’s a complete example ‘nnimap’ backend with a client-side “fancy”
splitting method:

     (nnimap "imap.example.com"
             (nnimap-inbox "INBOX")
             (nnimap-split-fancy
              (| ("MailScanner-SpamCheck" "spam" "spam.detected")
                 (to "foo@bar.com" "foo")
                 "undecided")))


File: gnus.info,  Node: Support for IMAP Extensions,  Prev: Client-Side IMAP Splitting,  Up: Using IMAP

7.3.4 Support for IMAP Extensions
---------------------------------

If you’re using Google’s Gmail, you may want to see your Gmail labels
when reading your mail.  Gnus can give you this information if you ask
for ‘X-GM-LABELS’ in the variable ‘gnus-extra-headers’.  For example:

     (setq gnus-extra-headers
           '(To Newsgroups X-GM-LABELS))

   This will result in Gnus storing your labels in message header
structures for later use.  The content is always a parenthesized
(possible empty) list.


File: gnus.info,  Node: Getting Mail,  Next: Browsing the Web,  Prev: Using IMAP,  Up: Select Methods

# /. 7.4 Getting Mail
====================

Reading mail with a newsreader—isn’t that just plain WeIrD?  But of
course.

* Menu:

* Mail in a Newsreader::        Important introductory notes.
* Getting Started Reading Mail::  A simple cookbook example.
* Splitting Mail::              How to create mail groups.
* Mail Sources::                How to tell Gnus where to get mail from.
* Mail Back End Variables::     Variables for customizing mail handling.
* Fancy Mail Splitting::        Gnus can do hairy splitting of incoming mail.
* Group Mail Splitting::        Use group customize to drive mail splitting.
* Incorporating Old Mail::      What about the old mail you have?
* Expiring Mail::               Getting rid of unwanted mail.
* Washing Mail::                Removing cruft from the mail you get.
* Duplicates::                  Dealing with duplicated mail.
* Not Reading Mail::            Using mail back ends for reading other files.
* Choosing a Mail Back End::    Gnus can read a variety of mail formats.


File: gnus.info,  Node: Mail in a Newsreader,  Next: Getting Started Reading Mail,  Up: Getting Mail

7.4.1 Mail in a Newsreader
--------------------------

If you are used to traditional mail readers, but have decided to switch
to reading mail with Gnus, you may find yourself experiencing something
of a culture shock.

   Gnus does not behave like traditional mail readers.  If you want to
make it behave that way, you can, but it’s an uphill battle.

   Gnus, by default, handles all its groups using the same approach.
This approach is very newsreaderly—you enter a group, see the new/unread
messages, and when you read the messages, they get marked as read, and
you don’t see them any more.  (Unless you explicitly ask for them.)

   In particular, you do not do anything explicitly to delete messages.

   Does this mean that all the messages that have been marked as read
are deleted?  How awful!

   But, no, it means that old messages are “expired” according to some
scheme or other.  For news messages, the expire process is controlled by
the news administrator; for mail, the expire process is controlled by
you.  The expire process for mail is covered in depth in *note Expiring
Mail::.

   What many Gnus users find, after using it a while for both news and
mail, is that the transport mechanism has very little to do with how
they want to treat a message.

   Many people subscribe to several mailing lists.  These are
transported via SMTP, and are therefore mail.  But we might go for weeks
without answering, or even reading these messages very carefully.  We
may not need to save them because if we should need to read one again,
they are archived somewhere else.

   Some people have local news groups which have only a handful of
readers.  These are transported via NNTP, and are therefore news.  But
we may need to read and answer a large fraction of the messages very
carefully in order to do our work.  And there may not be an archive, so
we may need to save the interesting messages the same way we would
personal mail.

   The important distinction turns out to be not the transport
mechanism, but other factors such as how interested we are in the
subject matter, or how easy it is to retrieve the message if we need to
read it again.

   Gnus provides many options for sorting mail into “groups” which
behave like newsgroups, and for treating each group (whether mail or
news) differently.

   Some users never get comfortable using the Gnus (ahem) paradigm and
wish that Gnus should grow up and be a male, er, mail reader.  It is
possible to whip Gnus into a more mailreaderly being, but, as said
before, it’s not easy.  People who prefer proper mail readers should try
VM instead, which is an excellent, and proper, mail reader.

   I don’t mean to scare anybody off, but I want to make it clear that
you may be required to learn a new way of thinking about messages.
After you’ve been subjected to The Gnus Way, you will come to love it.
I can guarantee it.  (At least the guy who sold me the Emacs Subliminal
Brain-Washing Functions that I’ve put into Gnus did guarantee it.  You
Will Be Assimilated.  You Love Gnus.  You Love The Gnus Mail Way.  You
Do.)


File: gnus.info,  Node: Getting Started Reading Mail,  Next: Splitting Mail,  Prev: Mail in a Newsreader,  Up: Getting Mail

7.4.2 Getting Started Reading Mail
----------------------------------

It’s quite easy to use Gnus to read your new mail.  You just plonk the
mail back end of your choice into ‘gnus-secondary-select-methods’, and
things will happen automatically.

   For instance, if you want to use ‘nnml’ (which is a “one file per
mail” back end), you could put the following in your ‘~/.gnus.el’ file:

     (setq gnus-secondary-select-methods '((nnml "")))

   Now, the next time you start Gnus, this back end will be queried for
new articles, and it will move all the messages in your spool file to
its directory, which is ‘~/Mail/’ by default.  The new group that will
be created (‘mail.misc’) will be subscribed, and you can read it like
any other group.

   You will probably want to split the mail into several groups, though:

     (setq nnmail-split-methods
           '(("junk" "^From:.*Lars Ingebrigtsen")
             ("crazy" "^Subject:.*die\\|^Organization:.*flabby")
             ("other" "")))

   This will result in three new ‘nnml’ mail groups being created:
‘nnml:junk’, ‘nnml:crazy’, and ‘nnml:other’.  All the mail that doesn’t
fit into the first two groups will be placed in the last group.

   This should be sufficient for reading mail with Gnus.  You might want
to give the other sections in this part of the manual a perusal, though.
Especially *note Choosing a Mail Back End:: and *note Expiring Mail::.


File: gnus.info,  Node: Splitting Mail,  Next: Mail Sources,  Prev: Getting Started Reading Mail,  Up: Getting Mail

7.4.3 Splitting Mail
--------------------

The ‘nnmail-split-methods’ variable says how the incoming mail is to be
split into groups.

     (setq nnmail-split-methods
       '(("mail.junk" "^From:.*Lars Ingebrigtsen")
         ("mail.crazy" "^Subject:.*die\\|^Organization:.*flabby")
         ("mail.other" "")))

   This variable is a list of lists, where the first element of each of
these lists is the name of the mail group (they do not have to be called
something beginning with ‘mail’, by the way), and the second element is
a regular expression used on the header of each mail to determine if it
belongs in this mail group.  The first string may contain ‘\\1’ forms,
like the ones used by ‘replace-match’ to insert sub-expressions from the
matched text.  For instance:

     ("list.\\1" "From:.* \\(.*\\)-list@majordomo.com")

In that case, ‘nnmail-split-lowercase-expanded’ controls whether the
inserted text should be made lowercase.  *Note Fancy Mail Splitting::.

   The second element can also be a function.  In that case, it will be
called narrowed to the headers with the first element of the rule as the
argument.  It should return a non-‘nil’ value if it thinks that the mail
belongs in that group.

   The last of these groups should always be a general one, and the
regular expression should _always_ be ‘""’ so that it matches any mails
that haven’t been matched by any of the other regexps.  (These rules are
processed from the beginning of the alist toward the end.

   If multiple rules match (excluding the general ‘""’ group), mail is
crossposted to all these groups.  However, if ‘nnmail-crosspost’ is set
to ‘nil’, the first rule to make a match will “win”.

   If no rule matched, the mail will end up in the ‘bogus’ group.  When
new groups are created by splitting mail, you may want to run
‘gnus-group-find-new-groups’ to see the new groups.  This also applies
to the ‘bogus’ group.

   If you like to tinker with this yourself, you can set this variable
to a function of your choice.  This function will be called without any
arguments in a buffer narrowed to the headers of an incoming mail
message.  The function should return a list of group names that it
thinks should carry this mail message.

   This variable can also be a fancy split method.  For the syntax, see
*note Fancy Mail Splitting::.

   Note that the mail back ends are free to maul the poor, innocent,
incoming headers all they want to.  They all add ‘Lines’ headers; some
add ‘X-Gnus-Group’ headers; most rename the Unix mbox ‘From<SPC>’ line
to something else.

   The mail back ends all support cross-posting.  If several regexps
match, the mail will be “cross-posted” to all those groups.
‘nnmail-crosspost’ says whether to use this mechanism or not.  Note that
no articles are crossposted to the general (‘""’) group.

   ‘nnmh’ and ‘nnml’ makes crossposts by creating hard links to the
crossposted articles.  However, not all file systems support hard links.
If that’s the case for you, set ‘nnmail-crosspost-link-function’ to
‘copy-file’.  (This variable is ‘add-name-to-file’ by default.)

   If you wish to see where the previous mail split put the messages,
you can use the ‘M-x nnmail-split-history’ command.  If you wish to see
where re-spooling messages would put the messages, you can use
‘gnus-summary-respool-trace’ and related commands (*note Mail Group
Commands::).

   Header lines longer than the value of
‘nnmail-split-header-length-limit’ are excluded from the split function.

   By default, splitting does not decode headers, so you can not match
on non-ASCII strings.  But it is useful if you want to match articles
based on the raw header data.  To enable it, set the
‘nnmail-mail-splitting-decodes’ variable to a non-‘nil’ value.  In
addition, the value of the ‘nnmail-mail-splitting-charset’ variable is
used for decoding non-MIME encoded string when
‘nnmail-mail-splitting-decodes’ is non-‘nil’.  The default value is
‘nil’ which means not to decode non-MIME encoded string.  A suitable
value for you will be ‘undecided’ or be the charset used normally in
mails you are interested in.

   By default, splitting is performed on all incoming messages.  If you
specify a ‘directory’ entry for the variable ‘mail-sources’ (*note Mail
Source Specifiers::), however, then splitting does _not_ happen by
default.  You can set the variable ‘nnmail-resplit-incoming’ to a
non-‘nil’ value to make splitting happen even in this case.  (This
variable has no effect on other kinds of entries.)

   Gnus gives you all the opportunity you could possibly want for
shooting yourself in the foot.  Let’s say you create a group that will
contain all the mail you get from your boss.  And then you accidentally
unsubscribe from the group.  Gnus will still put all the mail from your
boss in the unsubscribed group, and so, when your boss mails you “Have
that report ready by Monday or you’re fired!”, you’ll never see it and,
come Tuesday, you’ll still believe that you’re gainfully employed while
you really should be out collecting empty bottles to save up for next
month’s rent money.


File: gnus.info,  Node: Mail Sources,  Next: Mail Back End Variables,  Prev: Splitting Mail,  Up: Getting Mail

7.4.4 Mail Sources
------------------

Mail can be gotten from many different sources—the mail spool, from a
POP mail server, from a procmail directory, or from a maildir, for
instance.

* Menu:

* Mail Source Specifiers::      How to specify what a mail source is.
* Mail Source Functions::
* Mail Source Customization::   Some variables that influence things.
* Fetching Mail::               Using the mail source specifiers.


File: gnus.info,  Node: Mail Source Specifiers,  Next: Mail Source Functions,  Up: Mail Sources

7.4.4.1 Mail Source Specifiers
..............................

You tell Gnus how to fetch mail by setting ‘mail-sources’ (*note
Fetching Mail::) to a “mail source specifier”.

   Here’s an example:

     (pop :server "pop3.mailserver.com" :user "myname")

   As can be observed, a mail source specifier is a list where the first
element is a “mail source type”, followed by an arbitrary number of
“keywords”.  Keywords that are not explicitly specified are given
default values.

   The ‘mail-sources’ is global for all mail groups.  You can specify an
additional mail source for a particular group by including the ‘group’
mail specifier in ‘mail-sources’, and setting a ‘mail-source’ group
parameter (*note Group Parameters::) specifying a single mail source.
When this is used, ‘mail-sources’ is typically just ‘((group))’; the
‘mail-source’ parameter for a group might look like this:

     (mail-source . (file :path "home/user/spools/foo.spool"))

   This means that the group’s (and only this group’s) messages will be
fetched from the spool file ‘/user/spools/foo.spool’.

   The following mail source types are available:

‘file’
     Get mail from a single file; typically from the mail spool.

     Keywords:

     ‘:path’
          The file name.  Defaults to the value of the ‘MAIL’
          environment variable or the value of ‘rmail-spool-directory’
          (usually something like ‘/usr/mail/spool/user-name’).

     ‘:prescript’
     ‘:postscript’
          Script run before/after fetching mail.

     An example file mail source:

          (file :path "/usr/spool/mail/user-name")

     Or using the default file name:

          (file)

     If the mail spool file is not located on the local machine, it’s
     best to use POP or IMAP or the like to fetch the mail.  You can not
     use ange-ftp file names here—it has no way to lock the mail spool
     while moving the mail.

     If it’s impossible to set up a proper server, you can use ssh
     instead.

          (setq mail-sources
                '((file :prescript "ssh host bin/getmail >%t")))

     The ‘getmail’ script would look something like the following:

          #!/bin/sh
          #  getmail - move mail from spool to stdout
          #  flu@iki.fi

          MOVEMAIL=/usr/lib/emacs/20.3/i386-redhat-linux/movemail
          TMP=$HOME/Mail/tmp
          rm -f $TMP; $MOVEMAIL $MAIL $TMP >/dev/null && cat $TMP

     Alter this script to fit the ‘movemail’ and temporary file you want
     to use.

‘directory’
     Get mail from several files in a directory.  This is typically used
     when you have procmail split the incoming mail into several files.
     That is, there is a one-to-one correspondence between files in that
     directory and groups, so that mail from the file ‘foo.bar.spool’
     will be put in the group ‘foo.bar’.  (You can change the suffix to
     be used instead of ‘.spool’.)  Setting
     ‘nnmail-scan-directory-mail-source-once’ to non-‘nil’ forces Gnus
     to scan the mail source only once.  This is particularly useful if
     you want to scan mail groups at a specified level.

     There is also the variable ‘nnmail-resplit-incoming’, if you set
     that to a non-‘nil’ value, then the normal splitting process is
     applied to all the files from the directory, *note Splitting
     Mail::.

     Keywords:

     ‘:path’
          The name of the directory where the files are.  There is no
          default value.

     ‘:suffix’
          Only files ending with this suffix are used.  The default is
          ‘.spool’.

     ‘:predicate’
          Only files that have this predicate return non-‘nil’ are
          returned.  The default is ‘identity’.  This is used as an
          additional filter—only files that have the right suffix _and_
          satisfy this predicate are considered.

     ‘:prescript’
     ‘:postscript’
          Script run before/after fetching mail.

     An example directory mail source:

          (directory :path "/home/user-name/procmail-dir/"
                     :suffix ".prcml")

‘pop’
     Get mail from a POP server.

     Keywords:

     ‘:server’
          The name of the POP server.  The default is taken from the
          ‘MAILHOST’ environment variable.

     ‘:port’
          The port number of the POP server.  This can be a number
          (e.g., ‘:port 1234’) or a string (e.g., ‘:port "pop3"’).  If
          it is a string, it should be a service name as listed in
          ‘/etc/services’ on Unix systems.  The default is ‘"pop3"’.  On
          some systems you might need to specify it as ‘"pop-3"’
          instead.

     ‘:user’
          The user name to give to the POP server.  The default is the
          login name.

     ‘:password’
          The password to give to the POP server.  If not specified, the
          user is prompted.

     ‘:program’
          The program to use to fetch mail from the POP server.  This
          should be a ‘format’-like string.  Here’s an example:

               fetchmail %u@%s -P %p %t

          The valid format specifier characters are:

          ‘t’
               The name of the file the mail is to be moved to.  This
               must always be included in this string.

          ‘s’
               The name of the server.

          ‘P’
               The port number of the server.

          ‘u’
               The user name to use.

          ‘p’
               The password to use.

          The values used for these specs are taken from the values you
          give the corresponding keywords.

     ‘:prescript’
          A script to be run before fetching the mail.  The syntax is
          the same as the ‘:program’ keyword.  This can also be a
          function to be run.

          One popular way to use this is to set up an SSH tunnel to
          access the POP server.  Here’s an example:

               (pop :server "127.0.0.1"
                    :port 1234
                    :user "foo"
                    :password "secret"
                    :prescript
                    "nohup ssh -f -L 1234:pop.server:110 remote.host sleep 3600 &")

     ‘:postscript’
          A script to be run after fetching the mail.  The syntax is the
          same as the ‘:program’ keyword.  This can also be a function
          to be run.

     ‘:function’
          The function to use to fetch mail from the POP server.  The
          function is called with one parameter—the name of the file
          where the mail should be moved to.

     ‘:authentication’
          This can be either the symbol ‘password’ or the symbol ‘apop’
          and says what authentication scheme to use.  The default is
          ‘password’.

     ‘:leave’
          Non-‘nil’ if the mail is to be left on the POP server after
          fetching.  Only the built-in ‘pop3-movemail’ program (the
          default) supports this keyword.

          If this is a number, leave mails on the server for this many
          days since you first checked new mails.  In that case, mails
          once fetched will never be fetched again by the UIDL control.
          If this is ‘nil’ (the default), mails will be deleted on the
          server right after fetching.  If this is neither ‘nil’ nor a
          number, all mails will be left on the server, and you will end
          up getting the same mails again and again.

          The ‘pop3-uidl-file’ variable specifies the file to which the
          UIDL data are locally stored.  The default value is
          ‘~/.pop3-uidl’.

          Note that POP servers maintain no state information between
          sessions, so what the client believes is there and what is
          actually there may not match up.  If they do not, then you may
          get duplicate mails or the whole thing can fall apart and
          leave you with a corrupt mailbox.

     If the ‘:program’ and ‘:function’ keywords aren’t specified,
     ‘pop3-movemail’ will be used.

     Here are some examples for getting mail from a POP server.

     Fetch from the default POP server, using the default user name, and
     default fetcher:

          (pop)

     Fetch from a named server with a named user and password:

          (pop :server "my.pop.server"
               :user "user-name" :password "secret")

     Leave mails on the server for 14 days:

          (pop :server "my.pop.server"
               :user "user-name" :password "secret"
               :leave 14)

     Use ‘movemail’ to move the mail:

          (pop :program "movemail po:%u %t %p")

‘maildir’
     Get mail from a maildir.  This is a type of mailbox that is
     supported by at least qmail and postfix, where each file in a
     special directory contains exactly one mail.

     Keywords:

     ‘:path’
          The name of the directory where the mails are stored.  The
          default is taken from the ‘MAILDIR’ environment variable or
          ‘~/Maildir/’.
     ‘:subdirs’
          The subdirectories of the Maildir.  The default is ‘("new"
          "cur")’.

          You can also get mails from remote hosts (because maildirs
          don’t suffer from locking problems).

     Two example maildir mail sources:

          (maildir :path "/home/user-name/Maildir/"
                   :subdirs ("cur" "new"))

          (maildir :path "/user@remotehost.org:~/Maildir/"
                   :subdirs ("new"))

‘imap’
     Get mail from an IMAP server.  If you don’t want to use IMAP as
     intended, as a network mail reading protocol (i.e., with nnimap),
     for some reason or other, Gnus lets you treat it similar to a POP
     server and fetches articles from a given IMAP mailbox.  *Note Using
     IMAP::, for more information.

     Keywords:

     ‘:server’
          The name of the IMAP server.  The default is taken from the
          ‘MAILHOST’ environment variable.

     ‘:port’
          The port number of the IMAP server.  The default is ‘143’, or
          ‘993’ for TLS/SSL connections.

     ‘:user’
          The user name to give to the IMAP server.  The default is the
          login name.

     ‘:password’
          The password to give to the IMAP server.  If not specified,
          the user is prompted.

     ‘:stream’
          What stream to use for connecting to the server, this is one
          of the symbols in ‘imap-stream-alist’.  Right now, this means
          ‘gssapi’, ‘kerberos4’, ‘starttls’, ‘tls’, ‘ssl’, ‘shell’ or
          the default ‘network’.

     ‘:authentication’
          Which authenticator to use for authenticating to the server,
          this is one of the symbols in ‘imap-authenticator-alist’.
          Right now, this means ‘gssapi’, ‘kerberos4’, ‘digest-md5’,
          ‘cram-md5’, ‘anonymous’ or the default ‘login’.

     ‘:program’
          When using the ‘shell’ :stream, the contents of this variable
          is mapped into the ‘imap-shell-program’ variable.  This should
          be a ‘format’-like string (or list of strings).  Here’s an
          example:

               ssh %s imapd

          Make sure nothing is interfering with the output of the
          program, e.g., don’t forget to redirect the error output to
          the void.  The valid format specifier characters are:

          ‘s’
               The name of the server.

          ‘l’
               User name from ‘imap-default-user’.

          ‘p’
               The port number of the server.

          The values used for these specs are taken from the values you
          give the corresponding keywords.

     ‘:mailbox’
          The name of the mailbox to get mail from.  The default is
          ‘INBOX’ which normally is the mailbox which receives incoming
          mail.  Instead of a single mailbox, this can be a list of
          mailboxes to fetch mail from.

     ‘:predicate’
          The predicate used to find articles to fetch.  The default,
          ‘UNSEEN UNDELETED’, is probably the best choice for most
          people, but if you sometimes peek in your mailbox with a IMAP
          client and mark some articles as read (or; SEEN) you might
          want to set this to ‘1:*’.  Then all articles in the mailbox
          is fetched, no matter what.  For a complete list of
          predicates, see RFC 2060 section 6.4.4.

     ‘:fetchflag’
          How to flag fetched articles on the server, the default
          ‘\Deleted’ will mark them as deleted, an alternative would be
          ‘\Seen’ which would simply mark them as read.  These are the
          two most likely choices, but more flags are defined in RFC
          2060 section 2.3.2.

     ‘:dontexpunge’
          If non-‘nil’, don’t remove all articles marked as deleted in
          the mailbox after finishing the fetch.

     An example IMAP mail source:

          (imap :server "mail.mycorp.com"
                :stream kerberos4
                :fetchflag "\\Seen")

‘group’
     Get the actual mail source from the ‘mail-source’ group parameter,
     *Note Group Parameters::.

“Common Keywords”
     Common keywords can be used in any type of mail source.

     Keywords:

     ‘:plugged’
          If non-‘nil’, fetch the mail even when Gnus is unplugged.  If
          you use directory source to get mail, you can specify it as in
          this example:

               (setq mail-sources
                     '((directory :path "/home/pavel/.Spool/"
                                  :suffix ""
                                  :plugged t)))

          Gnus will then fetch your mail even when you are unplugged.
          This is useful when you use local mail and news.


File: gnus.info,  Node: Mail Source Functions,  Next: Mail Source Customization,  Prev: Mail Source Specifiers,  Up: Mail Sources

7.4.4.2 Function Interface
..........................

Some of the above keywords specify a Lisp function to be executed.  For
each keyword ‘:foo’, the Lisp variable ‘foo’ is bound to the value of
the keyword while the function is executing.  For example, consider the
following mail-source setting:

     (setq mail-sources '((pop :user "jrl"
                               :server "pophost" :function fetchfunc)))

   While the function ‘fetchfunc’ is executing, the symbol ‘user’ is
bound to ‘"jrl"’, and the symbol ‘server’ is bound to ‘"pophost"’.  The
symbols ‘port’, ‘password’, ‘program’, ‘prescript’, ‘postscript’,
‘function’, and ‘authentication’ are also bound (to their default
values).

   See above for a list of keywords for each type of mail source.


File: gnus.info,  Node: Mail Source Customization,  Next: Fetching Mail,  Prev: Mail Source Functions,  Up: Mail Sources

7.4.4.3 Mail Source Customization
.................................

The following is a list of variables that influence how the mail is
fetched.  You would normally not need to set or change any of these
variables.

‘mail-source-crash-box’
     File where mail will be stored while processing it.  The default is
     ‘~/.emacs-mail-crash-box’.

‘mail-source-delete-incoming’
     If non-‘nil’, delete incoming files after handling them.  If ‘t’,
     delete the files immediately, if ‘nil’, never delete any files.  If
     a positive number, delete files older than number of days (the
     deletion will only happen when receiving new mail).  You may also
     set ‘mail-source-delete-incoming’ to ‘nil’ and call
     ‘mail-source-delete-old-incoming’ from a hook or interactively.

‘mail-source-delete-old-incoming-confirm’
     If non-‘nil’, ask for confirmation before deleting old incoming
     files.  This variable only applies when
     ‘mail-source-delete-incoming’ is a positive number.

‘mail-source-directory’
     Directory where incoming mail source files (if any) will be stored.
     The default is ‘~/Mail/’.  At present, the only thing this is used
     for is to say where the incoming files will be stored if the
     variable ‘mail-source-delete-incoming’ is ‘nil’ or a number.

‘mail-source-incoming-file-prefix’
     Prefix for file name for storing incoming mail.  The default is
     ‘Incoming’, in which case files will end up with names like
     ‘Incoming30630D_’ or ‘Incoming298602ZD’.  This is really only
     relevant if ‘mail-source-delete-incoming’ is ‘nil’ or a number.

‘mail-source-default-file-modes’
     All new mail files will get this file mode.  The default is
     ‘#o600’.

‘mail-source-movemail-program’
     If non-‘nil’, name of program for fetching new mail.  If ‘nil’,
     ‘movemail’ in ‘exec-directory’.


File: gnus.info,  Node: Fetching Mail,  Prev: Mail Source Customization,  Up: Mail Sources

7.4.4.4 Fetching Mail
.....................

The way to actually tell Gnus where to get new mail from is to set
‘mail-sources’ to a list of mail source specifiers (*note Mail Source
Specifiers::).

   If this variable is ‘nil’, the mail back ends will never attempt to
fetch mail by themselves.

   If you want to fetch mail both from your local spool as well as a POP
mail server, you’d say something like:

     (setq mail-sources
           '((file)
             (pop :server "pop3.mail.server"
                  :password "secret")))

   Or, if you don’t want to use any of the keyword defaults:

     (setq mail-sources
           '((file :path "/var/spool/mail/user-name")
             (pop :server "pop3.mail.server"
                  :user "user-name"
                  :port "pop3"
                  :password "secret")))

   When you use a mail back end, Gnus will slurp all your mail from your
inbox and plonk it down in your home directory.  Gnus doesn’t move any
mail if you’re not using a mail back end—you have to do a lot of magic
invocations first.  At the time when you have finished drawing the
pentagram, lightened the candles, and sacrificed the goat, you really
shouldn’t be too surprised when Gnus moves your mail.


File: gnus.info,  Node: Mail Back End Variables,  Next: Fancy Mail Splitting,  Prev: Mail Sources,  Up: Getting Mail

7.4.5 Mail Back End Variables
-----------------------------

These variables are (for the most part) pertinent to all the various
mail back ends.

‘nnmail-read-incoming-hook’
     The mail back ends all call this hook after reading new mail.  You
     can use this hook to notify any mail watch programs, if you want
     to.

‘nnmail-split-hook’
     Hook run in the buffer where the mail headers of each message is
     kept just before the splitting based on these headers is done.  The
     hook is free to modify the buffer contents in any way it sees
     fit—the buffer is discarded after the splitting has been done, and
     no changes performed in the buffer will show up in any files.
     ‘gnus-article-decode-encoded-words’ is one likely function to add
     to this hook.

‘nnmail-pre-get-new-mail-hook’
‘nnmail-post-get-new-mail-hook’
     These are two useful hooks executed when treating new incoming
     mail—‘nnmail-pre-get-new-mail-hook’ (is called just before starting
     to handle the new mail) and ‘nnmail-post-get-new-mail-hook’ (is
     called when the mail handling is done).  Here’s and example of
     using these two hooks to change the default file modes the new mail
     files get:

          (add-hook 'nnmail-pre-get-new-mail-hook
                    (lambda () (set-default-file-modes #o700)))

          (add-hook 'nnmail-post-get-new-mail-hook
                    (lambda () (set-default-file-modes #o775)))

‘nnmail-use-long-file-names’
     If non-‘nil’, the mail back ends will use long file and directory
     names.  Groups like ‘mail.misc’ will end up in directories
     (assuming use of ‘nnml’ back end) or files (assuming use of
     ‘nnfolder’ back end) like ‘mail.misc’.  If it is ‘nil’, the same
     group will end up in ‘mail/misc’.

‘nnmail-delete-file-function’
     Function called to delete files.  It is ‘delete-file’ by default.

‘nnmail-cache-accepted-message-ids’
     If non-‘nil’, put the ‘Message-ID’s of articles imported into the
     back end (via ‘Gcc’, for instance) into the mail duplication
     discovery cache.  The default is ‘nil’.

‘nnmail-cache-ignore-groups’
     This can be a regular expression or a list of regular expressions.
     Group names that match any of the regular expressions will never be
     recorded in the ‘Message-ID’ cache.

     This can be useful, for example, when using Fancy Splitting (*note
     Fancy Mail Splitting::) together with the function
     ‘nnmail-split-fancy-with-parent’.


File: gnus.info,  Node: Fancy Mail Splitting,  Next: Group Mail Splitting,  Prev: Mail Back End Variables,  Up: Getting Mail

7.4.6 Fancy Mail Splitting
--------------------------

If the rather simple, standard method for specifying how to split mail
doesn’t allow you to do what you want, you can set
‘nnmail-split-methods’ to ‘nnmail-split-fancy’.  Then you can play with
the ‘nnmail-split-fancy’ variable.

   Let’s look at an example value of this variable first:

     ;; Messages from the mailer daemon are not crossposted to any of
     ;; the ordinary groups.  Warnings are put in a separate group
     ;; from real errors.
     (| ("from" mail (| ("subject" "warn.*" "mail.warning")
                        "mail.misc"))
        ;; Non-error messages are crossposted to all relevant
        ;; groups, but we don’t crosspost between the group for the
        ;; (ding) list and the group for other (ding) related mail.
        (& (| (any "ding@ifi\\.uio\\.no" "ding.list")
              ("subject" "ding" "ding.misc"))
           ;; Other mailing lists...
           (any "procmail@informatik\\.rwth-aachen\\.de" "procmail.list")
           (any "SmartList@informatik\\.rwth-aachen\\.de" "SmartList.list")
           ;; Both lists below have the same suffix, so prevent
           ;; cross-posting to mkpkg.list of messages posted only to
           ;; the bugs- list, but allow cross-posting when the
           ;; message was really cross-posted.
           (any "bugs-mypackage@somewhere" "mypkg.bugs")
           (any "mypackage@somewhere" - "bugs-mypackage" "mypkg.list")
           ;; People...
           (any "larsi@ifi\\.uio\\.no" "people.Lars_Magne_Ingebrigtsen"))
        ;; Unmatched mail goes to the catch all group.
        "misc.misc")

   This variable has the format of a “split”.  A split is a (possibly)
recursive structure where each split may contain other splits.  Here are
the possible split syntaxes:

‘group’
     If the split is a string, that will be taken as a group name.
     Normal regexp match expansion will be done.  See below for
     examples.

‘(FIELD VALUE [- RESTRICT [...] ] SPLIT [INVERT-PARTIAL])’
     The split can be a list containing at least three elements.  If the
     first element FIELD (a regexp matching a header) contains VALUE
     (also a regexp) then store the message as specified by SPLIT.

     If RESTRICT (yet another regexp) matches some string after FIELD
     and before the end of the matched VALUE, the SPLIT is ignored.  If
     none of the RESTRICT clauses match, SPLIT is processed.

     The last element INVERT-PARTIAL is optional.  If it is non-‘nil’,
     the match-partial-words behavior controlled by the variable
     ‘nnmail-split-fancy-match-partial-words’ (see below) is be
     inverted.  (New in Gnus 5.10.7)

‘(| SPLIT ...)’
     If the split is a list, and the first element is ‘|’ (vertical
     bar), then process each SPLIT until one of them matches.  A SPLIT
     is said to match if it will cause the mail message to be stored in
     one or more groups.

‘(& SPLIT ...)’
     If the split is a list, and the first element is ‘&’, then process
     all SPLITs in the list.

‘junk’
     If the split is the symbol ‘junk’, then don’t save (i.e., delete)
     this message.  Use with extreme caution.

‘(: FUNCTION ARG1 ARG2 ...)’
     If the split is a list, and the first element is ‘:’, then the
     second element will be called as a function with ARGS given as
     arguments.  The function should return a SPLIT.

     For instance, the following function could be used to split based
     on the body of the messages:

          (defun split-on-body ()
            (save-excursion
              (save-restriction
                (widen)
                (goto-char (point-min))
                (when (re-search-forward "Some.*string" nil t)
                  "string.group"))))

     The buffer is narrowed to the header of the message in question
     when FUNCTION is run.  That’s why ‘(widen)’ needs to be called
     after ‘save-excursion’ and ‘save-restriction’ in the example above.
     Also note that with the nnimap backend, message bodies will not be
     downloaded by default.  You need to set
     ‘nnimap-split-download-body’ to ‘t’ to do that (*note Client-Side
     IMAP Splitting::).

‘(! FUNC SPLIT)’
     If the split is a list, and the first element is ‘!’, then SPLIT
     will be processed, and FUNC will be called as a function with the
     result of SPLIT as argument.  FUNC should return a split.

‘nil’
     If the split is ‘nil’, it is ignored.

   In these splits, FIELD must match a complete field name.

   Normally, VALUE in these splits must match a complete _word_
according to the fundamental mode syntax table.  In other words, all
VALUE’s will be implicitly surrounded by ‘\<...\>’ markers, which are
word delimiters.  Therefore, if you use the following split, for
example,

     (any "joe" "joemail")

messages sent from ‘joedavis@foo.org’ will normally not be filed in
‘joemail’.  If you want to alter this behavior, you can use any of the
following three ways:

  1. You can set the ‘nnmail-split-fancy-match-partial-words’ variable
     to non-‘nil’ in order to ignore word boundaries and instead the
     match becomes more like a grep.  This variable controls whether
     partial words are matched during fancy splitting.  The default
     value is ‘nil’.

     Note that it influences all VALUE’s in your split rules.

  2. VALUE beginning with ‘.*’ ignores word boundaries in front of a
     word.  Similarly, if VALUE ends with ‘.*’, word boundaries in the
     rear of a word will be ignored.  For example, the VALUE
     ‘"@example\\.com"’ does not match ‘foo@example.com’ but
     ‘".*@example\\.com"’ does.

  3. You can set the INVERT-PARTIAL flag in your split rules of the
     ‘(FIELD VALUE ...)’ types, aforementioned in this section.  If the
     flag is set, word boundaries on both sides of a word are ignored
     even if ‘nnmail-split-fancy-match-partial-words’ is ‘nil’.
     Contrarily, if the flag is set, word boundaries are not ignored
     even if ‘nnmail-split-fancy-match-partial-words’ is non-‘nil’.
     (New in Gnus 5.10.7)

   FIELD and VALUE can also be Lisp symbols, in that case they are
expanded as specified by the variable ‘nnmail-split-abbrev-alist’.  This
is an alist of cons cells, where the CAR of a cell contains the key, and
the CDR contains the associated value.  Predefined entries in
‘nnmail-split-abbrev-alist’ include:

‘from’
     Matches the ‘From’, ‘Sender’ and ‘Resent-From’ fields.
‘to’
     Matches the ‘To’, ‘Cc’, ‘Apparently-To’, ‘Resent-To’ and
     ‘Resent-Cc’ fields.
‘any’
     Is the union of the ‘from’ and ‘to’ entries.
‘list’
     Matches the ‘List-ID’, ‘List-Post’, ‘X-Mailing-List’, ‘X-BeenThere’
     and ‘X-Loop’ fields.

   ‘nnmail-split-fancy-syntax-table’ is the syntax table in effect when
all this splitting is performed.

   If you want to have Gnus create groups dynamically based on some
information in the headers (i.e., do ‘replace-match’-like substitutions
in the group names), you can say things like:

     (any "debian-\\b\\(\\w+\\)@lists.debian.org" "mail.debian.\\1")

   In this example, messages sent to ‘debian-foo@lists.debian.org’ will
be filed in ‘mail.debian.foo’.

   If the string contains the element ‘\\&’, then the previously matched
string will be substituted.  Similarly, the elements ‘\\1’ up to ‘\\9’
will be substituted with the text matched by the groupings 1 through 9.

   Where ‘nnmail-split-lowercase-expanded’ controls whether the
lowercase of the matched string should be used for the substitution.
Setting it as non-‘nil’ is useful to avoid the creation of multiple
groups when users send to an address using different case (i.e.,
mailing-list@domain vs Mailing-List@Domain).  The default value is ‘t’.

   ‘nnmail-split-fancy-with-parent’ is a function which allows you to
split followups into the same groups their parents are in.  Sometimes
you can’t make splitting rules for all your mail.  For example, your
boss might send you personal mail regarding different projects you are
working on, and as you can’t tell your boss to put a distinguishing
string into the subject line, you have to resort to manually moving the
messages into the right group.  With this function, you only have to do
it once per thread.

   To use this feature, you have to set ‘nnmail-treat-duplicates’ and
‘nnmail-cache-accepted-message-ids’ to a non-‘nil’ value.  And then you
can include ‘nnmail-split-fancy-with-parent’ using the colon feature,
like so:
     (setq nnmail-treat-duplicates 'warn     ; or ‘delete’
           nnmail-cache-accepted-message-ids t
           nnmail-split-fancy
           '(| (: nnmail-split-fancy-with-parent)
               ;; other splits go here
             ))

   This feature works as follows: when ‘nnmail-treat-duplicates’ is
non-‘nil’, Gnus records the message id of every message it sees in the
file specified by the variable ‘nnmail-message-id-cache-file’, together
with the group it is in (the group is omitted for non-mail messages).
When mail splitting is invoked, the function
‘nnmail-split-fancy-with-parent’ then looks at the References (and
In-Reply-To) header of each message to split and searches the file
specified by ‘nnmail-message-id-cache-file’ for the message ids.  When
it has found a parent, it returns the corresponding group name unless
the group name matches the regexp
‘nnmail-split-fancy-with-parent-ignore-groups’.  It is recommended that
you set ‘nnmail-message-id-cache-length’ to a somewhat higher number
than the default so that the message ids are still in the cache.  (A
value of 5000 appears to create a file some 300 kBytes in size.)  When
‘nnmail-cache-accepted-message-ids’ is non-‘nil’, Gnus also records the
message ids of moved articles, so that the followup messages goes into
the new group.

   Also see the variable ‘nnmail-cache-ignore-groups’ if you don’t want
certain groups to be recorded in the cache.  For example, if all
outgoing messages are written to an “outgoing” group, you could set
‘nnmail-cache-ignore-groups’ to match that group name.  Otherwise,
answers to all your messages would end up in the “outgoing” group.

   If ‘nnmail-debug-splitting’ is non-‘nil’, the mail splitting code
will log all splitting decisions to the ‘*nnmail split*’ buffer.


File: gnus.info,  Node: Group Mail Splitting,  Next: Incorporating Old Mail,  Prev: Fancy Mail Splitting,  Up: Getting Mail

7.4.7 Group Mail Splitting
--------------------------

If you subscribe to dozens of mailing lists but you don’t want to
maintain mail splitting rules manually, group mail splitting is for you.
You just have to set ‘to-list’ and/or ‘to-address’ in group parameters
or group customization and set ‘nnmail-split-methods’ to
‘gnus-group-split’.  This splitting function will scan all groups for
those parameters and split mail accordingly, i.e., messages posted from
or to the addresses specified in the parameters ‘to-list’ or
‘to-address’ of a mail group will be stored in that group.

   Sometimes, mailing lists have multiple addresses, and you may want
mail splitting to recognize them all: just set the ‘extra-aliases’ group
parameter to the list of additional addresses and it’s done.  If you’d
rather use a regular expression, set ‘split-regexp’.

   All these parameters in a group will be used to create an
‘nnmail-split-fancy’ split, in which the FIELD is ‘any’, the VALUE is a
single regular expression that matches ‘to-list’, ‘to-address’, all of
‘extra-aliases’ and all matches of ‘split-regexp’, and the SPLIT is the
name of the group.  RESTRICTs are also supported: just set the
‘split-exclude’ parameter to a list of regular expressions.

   If you can’t get the right split to be generated using all these
parameters, or you just need something fancier, you can set the
parameter ‘split-spec’ to an ‘nnmail-split-fancy’ split.  In this case,
all other aforementioned parameters will be ignored by
‘gnus-group-split’.  In particular, ‘split-spec’ may be set to ‘nil’, in
which case the group will be ignored by ‘gnus-group-split’.

   ‘gnus-group-split’ will do cross-posting on all groups that match, by
defining a single ‘&’ fancy split containing one split for each group.
If a message doesn’t match any split, it will be stored in the group
named in ‘gnus-group-split-default-catch-all-group’, unless some group
has ‘split-spec’ set to ‘catch-all’, in which case that group is used as
the catch-all group.  Even though this variable is often used just to
name a group, it may also be set to an arbitrarily complex fancy split
(after all, a group name is a fancy split), and this may be useful to
split mail that doesn’t go to any mailing list to personal mail folders.
Note that this fancy split is added as the last element of a ‘|’ split
list that also contains a ‘&’ split with the rules extracted from group
parameters.

   It’s time for an example.  Assume the following group parameters have
been defined:

     nnml:mail.bar:
     ((to-address . "bar@femail.com")
      (split-regexp . ".*@femail\\.com"))
     nnml:mail.foo:
     ((to-list . "foo@nowhere.gov")
      (extra-aliases "foo@localhost" "foo-redist@home")
      (split-exclude "bugs-foo" "rambling-foo")
      (admin-address . "foo-request@nowhere.gov"))
     nnml:mail.others:
     ((split-spec . catch-all))

   Setting ‘nnmail-split-methods’ to ‘gnus-group-split’ will behave as
if ‘nnmail-split-fancy’ had been selected and variable
‘nnmail-split-fancy’ had been set as follows:

     (| (& (any "\\(bar@femail\\.com\\|.*@femail\\.com\\)" "mail.bar")
           (any "\\(foo@nowhere\\.gov\\|foo@localhost\\|foo-redist@home\\)"
                - "bugs-foo" - "rambling-foo" "mail.foo"))
        "mail.others")

   If you’d rather not use group splitting for all your mail groups, you
may use it for only some of them, by using ‘nnmail-split-fancy’ splits
like this:

     (: gnus-group-split-fancy GROUPS NO-CROSSPOST CATCH-ALL)

   GROUPS may be a regular expression or a list of group names whose
parameters will be scanned to generate the output split.  NO-CROSSPOST
can be used to disable cross-posting; in this case, a single ‘|’ split
will be output.  CATCH-ALL is the fall back fancy split, used like
‘gnus-group-split-default-catch-all-group’.  If CATCH-ALL is ‘nil’, or
if ‘split-regexp’ matches the empty string in any selected group, no
catch-all split will be issued.  Otherwise, if some group has
‘split-spec’ set to ‘catch-all’, this group will override the value of
the CATCH-ALL argument.

   Unfortunately, scanning all groups and their parameters can be quite
slow, especially considering that it has to be done for every message.
But don’t despair!  The function ‘gnus-group-split-setup’ can be used to
enable ‘gnus-group-split’ in a much more efficient way.  It sets
‘nnmail-split-methods’ to ‘nnmail-split-fancy’ and sets
‘nnmail-split-fancy’ to the split produced by ‘gnus-group-split-fancy’.
Thus, the group parameters are only scanned once, no matter how many
messages are split.

   However, if you change group parameters, you’d have to update
‘nnmail-split-fancy’ manually.  You can do it by running
‘gnus-group-split-update’.  If you’d rather have it updated
automatically, just tell ‘gnus-group-split-setup’ to do it for you.  For
example, add to your ‘~/.gnus.el’:

     (gnus-group-split-setup AUTO-UPDATE CATCH-ALL)

   If AUTO-UPDATE is non-‘nil’, ‘gnus-group-split-update’ will be added
to ‘gnus-get-top-new-news-hook’, so you won’t ever have to worry about
updating ‘nnmail-split-fancy’ again.  If you don’t omit CATCH-ALL (it’s
optional, equivalent to ‘nil’),
‘gnus-group-split-default-catch-all-group’ will be set to its value.

   Because you may want to change ‘nnmail-split-fancy’ after it is set
by ‘gnus-group-split-update’, this function will run
‘gnus-group-split-updated-hook’ just before finishing.


File: gnus.info,  Node: Incorporating Old Mail,  Next: Expiring Mail,  Prev: Group Mail Splitting,  Up: Getting Mail

7.4.8 Incorporating Old Mail
----------------------------

Most people have lots of old mail stored in various file formats.  If
you have set up Gnus to read mail using one of the spiffy Gnus mail back
ends, you’ll probably wish to have that old mail incorporated into your
mail groups.

   Doing so can be quite easy.

   To take an example: You’re reading mail using ‘nnml’ (*note Mail
Spool::), and have set ‘nnmail-split-methods’ to a satisfactory value
(*note Splitting Mail::).  You have an old Unix mbox file filled with
important, but old, mail.  You want to move it into your ‘nnml’ groups.

   Here’s how:

  1. Go to the group buffer.

  2. Type ‘G f’ and give the file name to the mbox file when prompted to
     create an ‘nndoc’ group from the mbox file (*note Foreign
     Groups::).

  3. Type ‘<SPC>’ to enter the newly created group.

  4. Type ‘M P b’ to process-mark all articles in this group’s buffer
     (*note Setting Process Marks::).

  5. Type ‘B r’ to respool all the process-marked articles, and answer
     ‘nnml’ when prompted (*note Mail Group Commands::).

   All the mail messages in the mbox file will now also be spread out
over all your ‘nnml’ groups.  Try entering them and check whether things
have gone without a glitch.  If things look ok, you may consider
deleting the mbox file, but I wouldn’t do that unless I was absolutely
sure that all the mail has ended up where it should be.

   Respooling is also a handy thing to do if you’re switching from one
mail back end to another.  Just respool all the mail in the old mail
groups using the new mail back end.


File: gnus.info,  Node: Expiring Mail,  Next: Washing Mail,  Prev: Incorporating Old Mail,  Up: Getting Mail

7.4.9 Expiring Mail
-------------------

Traditional mail readers have a tendency to remove mail articles when
you mark them as read, in some way.  Gnus takes a fundamentally
different approach to mail reading.

   Gnus basically considers mail just to be news that has been received
in a rather peculiar manner.  It does not think that it has the power to
actually change the mail, or delete any mail messages.  If you enter a
mail group, and mark articles as “read”, or kill them in some other
fashion, the mail articles will still exist on the system.  I repeat:
Gnus will not delete your old, read mail.  Unless you ask it to, of
course.

   To make Gnus get rid of your unwanted mail, you have to mark the
articles as “expirable”.  (With the default key bindings, this means
that you have to type ‘E’.)  This does not mean that the articles will
disappear right away, however.  In general, a mail article will be
deleted from your system if, 1) it is marked as expirable, AND 2) it is
more than one week old.  If you do not mark an article as expirable, it
will remain on your system until hell freezes over.  This bears
repeating one more time, with some spurious capitalizations: IF you do
NOT mark articles as EXPIRABLE, Gnus will NEVER delete those ARTICLES.

   You do not have to mark articles as expirable by hand.  Gnus provides
two features, called “auto-expire” and “total-expire”, that can help you
with this.  In a nutshell, “auto-expire” means that Gnus hits ‘E’ for
you when you select an article.  And “total-expire” means that Gnus
considers all articles as expirable that are read.  So, in addition to
the articles marked ‘E’, also the articles marked ‘r’, ‘R’, ‘O’, ‘K’,
‘Y’ (and so on) are considered expirable.  ‘gnus-auto-expirable-marks’
has the full list of these marks.

   When should either auto-expire or total-expire be used?  Most people
who are subscribed to mailing lists split each list into its own group
and then turn on auto-expire or total-expire for those groups.  (*Note
Splitting Mail::, for more information on splitting each list into its
own group.)

   Which one is better, auto-expire or total-expire?  It’s not easy to
answer.  Generally speaking, auto-expire is probably faster.  Another
advantage of auto-expire is that you get more marks to work with: for
the articles that are supposed to stick around, you can still choose
between tick and dormant and read marks.  But with total-expire, you
only have dormant and ticked to choose from.  The advantage of
total-expire is that it works well with adaptive scoring (*note Adaptive
Scoring::).  Auto-expire works with normal scoring but not with adaptive
scoring.

   Groups that match the regular expression
‘gnus-auto-expirable-newsgroups’ will have all articles that you read
marked as expirable automatically.  All articles marked as expirable
have an ‘E’ in the first column in the summary buffer.

   By default, if you have auto expiry switched on, Gnus will mark all
the articles you read as expirable, no matter if they were read or
unread before.  To avoid having articles marked as read marked as
expirable automatically, you can put something like the following in
your ‘~/.gnus.el’ file:

     (remove-hook 'gnus-mark-article-hook
                  'gnus-summary-mark-read-and-unread-as-read)
     (add-hook 'gnus-mark-article-hook 'gnus-summary-mark-unread-as-read)

   Note that making a group auto-expirable doesn’t mean that all read
articles are expired—only the articles marked as expirable will be
expired.  Also note that using the ‘d’ command won’t make articles
expirable—only semi-automatic marking of articles as read will mark the
articles as expirable in auto-expirable groups.

   Let’s say you subscribe to a couple of mailing lists, and you want
the articles you have read to disappear after a while:

     (setq gnus-auto-expirable-newsgroups
           "mail.nonsense-list\\|mail.nice-list")

   Another way to have auto-expiry happen is to have the element
‘auto-expire’ in the group parameters of the group.

   If you use adaptive scoring (*note Adaptive Scoring::) and
auto-expiring, you’ll have problems.  Auto-expiring and adaptive scoring
don’t really mix very well.

   The ‘nnmail-expiry-wait’ variable supplies the default time an
expirable article has to live.  The value of this variable can be either
a number of days (not necessarily an integer), or one of the symbols
‘immediate’ or ‘never’, meaning an article is immediately or never
expirable, respectively.

   Gnus starts counting days from when the message _arrived_, not from
when it was sent.  The default is seven days.

   The ‘nnmail-expiry-wait-function’ variable lets you fine-tune how
long articles are to live, based on what group they are in.  When set to
a function, its returned value, if non-‘nil’, overrides that of
‘nnmail-expiry-wait’.  Otherwise, the value of ‘nnmail-expiry-wait’ is
used instead.

   For example, let’s say you want to have a one month expiry period in
the ‘mail.private’ group, a one day expiry period in the ‘mail.junk’
group, and a six day expiry period everywhere else.  This can be
achieved as follows:

     (setq nnmail-expiry-wait-function
           (lambda (group)
             (cond ((string= group "mail.private")
                    31)
                   ((string= group "mail.junk")
                    1)
                   ((string= group "important")
                    'never)
                   (t
                    6))))

   The group names this function is fed are “unadorned” group names—no
‘nnml:’ prefixes and the like.

   As an alternative to the variables ‘nnmail-expiry-wait’ or
‘nnmail-expiry-wait-function’, you can also use the ‘expiry-wait’ group
parameter to selectively change the expiry period (*note Group
Parameters::).

   The normal action taken when expiring articles is to delete them.
However, in some circumstances it might make more sense to move them to
other groups instead of deleting them.  The variable
‘nnmail-expiry-target’ (and the ‘expiry-target’ group parameter)
controls this.  The variable supplies a default value for all groups,
which can be overridden for specific groups by the group parameter.
default value is ‘delete’, but this can also be a string (which should
be the name of the group the message should be moved to), or a function
(which will be called in a buffer narrowed to the message in question,
and with the name of the group being moved from as its parameter) which
should return a target—either a group name or ‘delete’.

   Here’s an example for specifying a group name:
     (setq nnmail-expiry-target "nnml:expired")

   Gnus provides a function ‘nnmail-fancy-expiry-target’ which will
expire mail to groups according to the variable
‘nnmail-fancy-expiry-targets’.  Here’s an example:

      (setq nnmail-expiry-target 'nnmail-fancy-expiry-target
            nnmail-fancy-expiry-targets
            '((to-from "boss" "nnfolder:Work")
              ("subject" "IMPORTANT" "nnfolder:IMPORTANT.%Y.%b")
              ("from" ".*" "nnfolder:Archive-%Y")))

   With this setup, any mail that has ‘IMPORTANT’ in its Subject header
and was sent in the year ‘YYYY’ and month ‘MMM’, will get expired to the
group ‘nnfolder:IMPORTANT.YYYY.MMM’.  If its From or To header contains
the string ‘boss’, it will get expired to ‘nnfolder:Work’.  All other
mail will get expired to ‘nnfolder:Archive-YYYY’.

   If ‘nnmail-keep-last-article’ is non-‘nil’, Gnus will never expire
the final article in a mail newsgroup.  This is to make life easier for
procmail users.

   By the way: That line up there, about Gnus never expiring
non-expirable articles, is a lie.  If you put ‘total-expire’ in the
group parameters, articles will not be marked as expirable, but all read
articles will be put through the expiry process.  Use with extreme
caution.  Even more dangerous is the ‘gnus-total-expirable-newsgroups’
variable.  All groups that match this regexp will have all read articles
put through the expiry process, which means that _all_ old mail articles
in the groups in question will be deleted after a while.  Use with
extreme caution, and don’t come crying to me when you discover that the
regexp you used matched the wrong group and all your important mail has
disappeared.  Be a _man_!  Or a _woman_!  Whatever you feel more
comfortable with!  So there!

   Most people make most of their mail groups total-expirable, though.

   If ‘gnus-inhibit-user-auto-expire’ is non-‘nil’, user marking
commands will not mark an article as expirable, even if the group has
auto-expire turned on.

   The expirable marks of articles will be removed when copying or
moving them to a group in which auto-expire is not turned on.  This is
for preventing articles from being expired unintentionally.  On the
other hand, to a group that has turned auto-expire on, the expirable
marks of articles that are copied or moved will not be changed by
default.  I.e., when copying or moving to such a group, articles that
were expirable will be left expirable and ones that were not expirable
will not be marked as expirable.  So, even though in auto-expire groups,
some articles will never get expired (unless you read them again).  If
you don’t side with that behavior that unexpirable articles may be mixed
into auto-expire groups, you can set
‘gnus-mark-copied-or-moved-articles-as-expirable’ to a non-‘nil’ value.
In that case, articles that have been read will be marked as expirable
automatically when being copied or moved to a group that has auto-expire
turned on.  The default value is ‘nil’.


File: gnus.info,  Node: Washing Mail,  Next: Duplicates,  Prev: Expiring Mail,  Up: Getting Mail

7.4.10 Washing Mail
-------------------

Mailers and list servers are notorious for doing all sorts of really,
really stupid things with mail.  “Hey, RFC 822 doesn’t explicitly
prohibit us from adding the string ‘wE aRe ElItE!!!!!1!!’ to the end of
all lines passing through our server, so let’s do that!!!!1!” Yes, but
RFC 822 and its successors weren’t designed to be read by morons.
Things that were considered to be self-evident were not discussed.  So.
Here we are.

   Case in point: The German version of Microsoft Exchange adds ‘AW: ’
to the subjects of replies instead of ‘Re: ’.  I could pretend to be
shocked and dismayed by this, but I haven’t got the energy.  It is to
laugh.

   Gnus provides a plethora of functions for washing articles while
displaying them, but it might be nicer to do the filtering before
storing the mail to disk.  For that purpose, we have three hooks and
various functions that can be put in these hooks.

‘nnmail-prepare-incoming-hook’
     This hook is called before doing anything with the mail and is
     meant for grand, sweeping gestures.  It is called in a buffer that
     contains all the new, incoming mail.  Functions to be used include:

     ‘nnheader-ms-strip-cr’
          Remove trailing carriage returns from each line.  This is
          default on Emacs running on MS machines.

‘nnmail-prepare-incoming-header-hook’
     This hook is called narrowed to each header.  It can be used when
     cleaning up the headers.  Functions that can be used include:

     ‘nnmail-remove-leading-whitespace’
          Clear leading white space that “helpful” listservs have added
          to the headers to make them look nice.  Aaah.

          (Note that this function works on both the header and the body
          of all messages, so it is a potentially dangerous function to
          use (if a body of a message contains something that looks like
          a header line).  So rather than fix the bug, it is of course
          the right solution to make it into a feature by documenting
          it.)

     ‘nnmail-remove-list-identifiers’
          Some list servers add an identifier—for example, ‘(idm)’—to
          the beginning of all ‘Subject’ headers.  I’m sure that’s nice
          for people who use stone age mail readers.  This function will
          remove strings that match the ‘nnmail-list-identifiers’
          regexp, which can also be a list of regexp.
          ‘nnmail-list-identifiers’ may not contain ‘\\(..\\)’.

          For instance, if you want to remove the ‘(idm)’ and the
          ‘nagnagnag’ identifiers:

               (setq nnmail-list-identifiers
                     '("(idm)" "nagnagnag"))

          This can also be done non-destructively with
          ‘gnus-list-identifiers’, *Note Article Hiding::.

     ‘nnmail-remove-tabs’
          Translate all ‘<TAB>’ characters into ‘<SPC>’ characters.

     ‘nnmail-ignore-broken-references’
          Some mail user agents (e.g., Eudora and Pegasus) produce
          broken ‘References’ headers, but correct ‘In-Reply-To’
          headers.  This function will get rid of the ‘References’
          header if the headers contain a line matching the regular
          expression ‘nnmail-broken-references-mailers’.

‘nnmail-prepare-incoming-message-hook’
     This hook is called narrowed to each message.  Functions to be used
     include:

     ‘article-de-quoted-unreadable’
          Decode Quoted Readable encoding.


File: gnus.info,  Node: Duplicates,  Next: Not Reading Mail,  Prev: Washing Mail,  Up: Getting Mail

7.4.11 Duplicates
-----------------

If you are a member of a couple of mailing lists, you will sometimes
receive two copies of the same mail.  This can be quite annoying, so
‘nnmail’ checks for and treats any duplicates it might find.  To do
this, it keeps a cache of old ‘Message-ID’s:
‘nnmail-message-id-cache-file’, which is ‘~/.nnmail-cache’ by default.
The approximate maximum number of ‘Message-ID’s stored there is
controlled by the ‘nnmail-message-id-cache-length’ variable, which is
1000 by default.  (So 1000 ‘Message-ID’s will be stored.)  If all this
sounds scary to you, you can set ‘nnmail-treat-duplicates’ to ‘warn’
(which is what it is by default), and ‘nnmail’ won’t delete duplicate
mails.  Instead it will insert a warning into the head of the mail
saying that it thinks that this is a duplicate of a different message.

   This variable can also be a function.  If that’s the case, the
function will be called from a buffer narrowed to the message in
question with the ‘Message-ID’ as a parameter.  The function must return
either ‘nil’, ‘warn’, or ‘delete’.

   You can turn this feature off completely by setting the variable to
‘nil’.

   If you want all the duplicate mails to be put into a special
“duplicates” group, you could do that using the normal mail split
methods:

     (setq nnmail-split-fancy
           '(| ;; Messages duplicates go to a separate group.
             ("gnus-warning" "duplicat\\(e\\|ion\\) of message" "duplicate")
             ;; Message from daemons, postmaster, and the like to another.
             (any mail "mail.misc")
             ;; Other rules.
             [...] ))
Or something like:
     (setq nnmail-split-methods
           '(("duplicates" "^Gnus-Warning:.*duplicate")
             ;; Other rules.
             [...]))

   Here’s a neat feature: If you know that the recipient reads her mail
with Gnus, and that she has ‘nnmail-treat-duplicates’ set to ‘delete’,
you can send her as many insults as you like, just by using a
‘Message-ID’ of a mail that you know that she’s already received.  Think
of all the fun!  She’ll never see any of it!  Whee!


File: gnus.info,  Node: Not Reading Mail,  Next: Choosing a Mail Back End,  Prev: Duplicates,  Up: Getting Mail

7.4.12 Not Reading Mail
-----------------------

If you start using any of the mail back ends, they have the annoying
habit of assuming that you want to read mail with them.  This might not
be unreasonable, but it might not be what you want.

   If you set ‘mail-sources’ to ‘nil’, none of the back ends will ever
attempt to read incoming mail, which should help.

   This might be too much, if, for instance, you are reading mail quite
happily with ‘nnml’ and just want to peek at some old (pre-Emacs 23)
Rmail file you have stashed away with ‘nnbabyl’.  All back ends have
variables called back-end-‘get-new-mail’.  If you want to disable the
‘nnbabyl’ mail reading, you edit the virtual server for the group to
have a setting where ‘nnbabyl-get-new-mail’ to ‘nil’.

   All the mail back ends will call ‘nn’*‘-prepare-save-mail-hook’
narrowed to the article to be saved before saving it when reading
incoming mail.


File: gnus.info,  Node: Choosing a Mail Back End,  Prev: Not Reading Mail,  Up: Getting Mail

7.4.13 Choosing a Mail Back End
-------------------------------

Gnus will read the mail spool when you activate a mail group.  The mail
file is first copied to your home directory.  What happens after that
depends on what format you want to store your mail in.

   There are six different mail back ends in the standard Gnus, and more
back ends are available separately.  The mail back end most people use
(because it is possibly the fastest) is ‘nnml’ (*note Mail Spool::).

* Menu:

* Unix Mail Box::               Using the (quite) standard Un*x mbox.
* Babyl::                       Babyl was used by older versions of Rmail.
* Mail Spool::                  Store your mail in a private spool?
* MH Spool::                    An mhspool-like back end.
* Maildir::                     Another one-file-per-message format.
* nnmaildir Group Parameters::
* Article Identification::
* NOV Data::
* Article Marks::
* Mail Folders::                Having one file for each group.
* Comparing Mail Back Ends::    An in-depth looks at pros and cons.


File: gnus.info,  Node: Unix Mail Box,  Next: Babyl,  Up: Choosing a Mail Back End

7.4.13.1 Unix Mail Box
......................

The “nnmbox” back end will use the standard Un*x mbox file to store
mail.  ‘nnmbox’ will add extra headers to each mail article to say which
group it belongs in.

   Virtual server settings:

‘nnmbox-mbox-file’
     The name of the mail box in the user’s home directory.  Default is
     ‘~/mbox’.

‘nnmbox-active-file’
     The name of the active file for the mail box.  Default is
     ‘~/.mbox-active’.

‘nnmbox-get-new-mail’
     If non-‘nil’, ‘nnmbox’ will read incoming mail and split it into
     groups.  Default is ‘t’.


File: gnus.info,  Node: Babyl,  Next: Mail Spool,  Prev: Unix Mail Box,  Up: Choosing a Mail Back End

7.4.13.2 Babyl
..............

The “nnbabyl” back end will use a Babyl mail box to store mail.
‘nnbabyl’ will add extra headers to each mail article to say which group
it belongs in.

   Virtual server settings:

‘nnbabyl-mbox-file’
     The name of the Babyl file.  The default is ‘~/RMAIL’

‘nnbabyl-active-file’
     The name of the active file for the Babyl file.  The default is
     ‘~/.rmail-active’

‘nnbabyl-get-new-mail’
     If non-‘nil’, ‘nnbabyl’ will read incoming mail.  Default is ‘t’


File: gnus.info,  Node: Mail Spool,  Next: MH Spool,  Prev: Babyl,  Up: Choosing a Mail Back End

7.4.13.3 Mail Spool
...................

The “nnml” spool mail format isn’t compatible with any other known
format.  It should be used with some caution.

   If you use this back end, Gnus will split all incoming mail into
files, one file for each mail, and put the articles into the
corresponding directories under the directory specified by the
‘nnml-directory’ variable.  The default value is ‘~/Mail/’.

   You do not have to create any directories beforehand; Gnus will take
care of all that.

   If you have a strict limit as to how many files you are allowed to
store in your account, you should not use this back end.  As each mail
gets its own file, you might very well occupy thousands of inodes within
a few weeks.  If this is no problem for you, and it isn’t a problem for
you having your friendly systems administrator walking around, madly,
shouting “Who is eating all my inodes?!  Who?  Who!?!”, then you should
know that this is probably the fastest format to use.  You do not have
to trudge through a big mbox file just to read your new mail.

   ‘nnml’ is probably the slowest back end when it comes to article
splitting.  It has to create lots of files, and it also generates NOV
databases for the incoming mails.  This makes it possibly the fastest
back end when it comes to reading mail.

   Virtual server settings:

‘nnml-directory’
     All ‘nnml’ directories will be placed under this directory.  The
     default is the value of ‘message-directory’ (whose default value is
     ‘~/Mail’).

‘nnml-active-file’
     The active file for the ‘nnml’ server.  The default is
     ‘~/Mail/active’.

‘nnml-newsgroups-file’
     The ‘nnml’ group descriptions file.  *Note Newsgroups File
     Format::.  The default is ‘~/Mail/newsgroups’.

‘nnml-get-new-mail’
     If non-‘nil’, ‘nnml’ will read incoming mail.  The default is ‘t’.

‘nnml-nov-is-evil’
     If non-‘nil’, this back end will ignore any NOV files.  The default
     is ‘nil’.

‘nnml-nov-file-name’
     The name of the NOV files.  The default is ‘.overview’.

‘nnml-prepare-save-mail-hook’
     Hook run narrowed to an article before saving.

‘nnml-use-compressed-files’
     If non-‘nil’, ‘nnml’ will allow using compressed message files.
     This requires ‘auto-compression-mode’ to be enabled (*note
     Compressed Files: (emacs)Compressed Files.).  If the value of
     ‘nnml-use-compressed-files’ is a string, it is used as the file
     extension specifying the compression program.  You can set it to
     ‘.bz2’ if your Emacs supports it.  A value of ‘t’ is equivalent to
     ‘.gz’.

‘nnml-compressed-files-size-threshold’
     Default size threshold for compressed message files.  Message files
     with bodies larger than that many characters will be automatically
     compressed if ‘nnml-use-compressed-files’ is non-‘nil’.

   If your ‘nnml’ groups and NOV files get totally out of whack, you can
do a complete update by typing ‘M-x nnml-generate-nov-databases’.  This
command will trawl through the entire ‘nnml’ hierarchy, looking at each
and every article, so it might take a while to complete.  A better
interface to this functionality can be found in the server buffer (*note
Server Commands::).


File: gnus.info,  Node: MH Spool,  Next: Maildir,  Prev: Mail Spool,  Up: Choosing a Mail Back End

7.4.13.4 MH Spool
.................

‘nnmh’ is just like ‘nnml’, except that is doesn’t generate NOV
databases and it doesn’t keep an active file or marks file.  This makes
‘nnmh’ a _much_ slower back end than ‘nnml’, but it also makes it easier
to write procmail scripts for.

   Virtual server settings:

‘nnmh-directory’
     All ‘nnmh’ directories will be located under this directory.  The
     default is the value of ‘message-directory’ (whose default is
     ‘~/Mail’)

‘nnmh-get-new-mail’
     If non-‘nil’, ‘nnmh’ will read incoming mail.  The default is ‘t’.

‘nnmh-be-safe’
     If non-‘nil’, ‘nnmh’ will go to ridiculous lengths to make sure
     that the articles in the folder are actually what Gnus thinks they
     are.  It will check date stamps and stat everything in sight, so
     setting this to ‘t’ will mean a serious slow-down.  If you never
     use anything but Gnus to read the ‘nnmh’ articles, you do not have
     to set this variable to ‘t’.  The default is ‘nil’.


File: gnus.info,  Node: Maildir,  Next: nnmaildir Group Parameters,  Prev: MH Spool,  Up: Choosing a Mail Back End

7.4.13.5 Maildir
................

‘nnmaildir’ stores mail in the maildir format, with each maildir
corresponding to a group in Gnus.  This format is documented here:
<https://cr.yp.to/proto/maildir.html>.  ‘nnmaildir’ also stores extra
information in the ‘.nnmaildir/’ directory within a maildir.

   Maildir format was designed to allow concurrent deliveries and
reading, without needing locks.  With other back ends, you would have
your mail delivered to a spool of some kind, and then you would
configure Gnus to split mail from that spool into your groups.  You can
still do that with ‘nnmaildir’, but the more common configuration is to
have your mail delivered directly to the maildirs that appear as group
in Gnus.

   ‘nnmaildir’ is designed to be perfectly reliable: ‘C-g’ will never
corrupt its data in memory, and ‘SIGKILL’ will never corrupt its data in
the filesystem.

   ‘nnmaildir’ stores article marks and NOV data in each maildir.  So
you can copy a whole maildir from one Gnus setup to another, and you
will keep your marks.

   Virtual server settings:

‘directory’
     For each of your ‘nnmaildir’ servers (it’s very unlikely that you’d
     need more than one), you need to create a directory and populate it
     with maildirs or symlinks to maildirs (and nothing else; do not
     choose a directory already used for other purposes).  Each maildir
     will be represented in Gnus as a newsgroup on that server; the
     filename of the symlink will be the name of the group.  Any
     filenames in the directory starting with ‘.’ are ignored.  The
     directory is scanned when you first start Gnus, and each time you
     type ‘g’ in the group buffer; if any maildirs have been removed or
     added, ‘nnmaildir’ notices at these times.

     The value of the ‘directory’ parameter should be a Lisp form which
     is processed by ‘eval’ and ‘expand-file-name’ to get the path of
     the directory for this server.  The form is ‘eval’ed only when the
     server is opened; the resulting string is used until the server is
     closed.  (If you don’t know about forms and ‘eval’, don’t worry—a
     simple string will work.)  This parameter is not optional; you must
     specify it.  I don’t recommend using ‘"~/Mail"’ or a subdirectory
     of it; several other parts of Gnus use that directory by default
     for various things, and may get confused if ‘nnmaildir’ uses it
     too.  ‘"~/.nnmaildir"’ is a typical value.

‘target-prefix’
     This should be a Lisp form which is processed by ‘eval’ and
     ‘expand-file-name’.  The form is ‘eval’ed only when the server is
     opened; the resulting string is used until the server is closed.

     When you create a group on an ‘nnmaildir’ server, the maildir is
     created with ‘target-prefix’ prepended to its name, and a symlink
     pointing to that maildir is created, named with the plain group
     name.  So if ‘directory’ is ‘"~/.nnmaildir"’ and ‘target-prefix’ is
     ‘"../maildirs/"’, then when you create the group ‘foo’, ‘nnmaildir’
     will create ‘~/.nnmaildir/../maildirs/foo’ as a maildir, and will
     create ‘~/.nnmaildir/foo’ as a symlink pointing to
     ‘../maildirs/foo’.

     You can set ‘target-prefix’ to a string without any slashes to
     create both maildirs and symlinks in the same ‘directory’; in this
     case, any maildirs found in ‘directory’ whose names start with
     ‘target-prefix’ will not be listed as groups (but the symlinks
     pointing to them will be).

     As a special case, if ‘target-prefix’ is ‘""’ (the default), then
     when you create a group, the maildir will be created in ‘directory’
     without a corresponding symlink.  Beware that you cannot use
     ‘gnus-group-delete-group’ on such groups without the ‘force’
     argument.

‘directory-files’
     This should be a function with the same interface as
     ‘directory-files’ (such as ‘directory-files’ itself).  It is used
     to scan the server’s ‘directory’ for maildirs.  This parameter is
     optional; the default is ‘nnheader-directory-files-safe’ if
     ‘nnheader-directory-files-is-safe’ is ‘nil’, and ‘directory-files’
     otherwise.  (‘nnheader-directory-files-is-safe’ is checked only
     once when the server is opened; if you want to check it each time
     the directory is scanned, you’ll have to provide your own function
     that does that.)

‘get-new-mail’
     If non-‘nil’, then after scanning for new mail in the group
     maildirs themselves as usual, this server will also incorporate
     mail the conventional Gnus way, from ‘mail-sources’ according to
     ‘nnmail-split-methods’ or ‘nnmail-split-fancy’.  The default value
     is ‘nil’.

     Do _not_ use the same maildir both in ‘mail-sources’ and as an
     ‘nnmaildir’ group.  The results might happen to be useful, but that
     would be by chance, not by design, and the results might be
     different in the future.


File: gnus.info,  Node: nnmaildir Group Parameters,  Next: Article Identification,  Prev: Maildir,  Up: Choosing a Mail Back End

7.4.13.6 Group parameters
.........................

‘nnmaildir’ uses several group parameters.  It’s safe to ignore all
this; the default behavior for ‘nnmaildir’ is the same as the default
behavior for other mail back ends: articles are deleted after one week,
etc.  Except for the expiry parameters, all this functionality is unique
to ‘nnmaildir’, so you can ignore it if you’re just trying to duplicate
the behavior you already have with another back end.

   If the value of any of these parameters is a vector, the first
element is evaluated as a Lisp form and the result is used, rather than
the original value.  If the value is not a vector, the value itself is
evaluated as a Lisp form.  (This is why these parameters use names
different from those of other, similar parameters supported by other
back ends: they have different, though similar, meanings.)  (For
numbers, strings, ‘nil’, and ‘t’, you can ignore the ‘eval’ business
again; for other values, remember to use an extra quote and wrap the
value in a vector when appropriate.)

‘expire-age’
     An integer specifying the minimum age, in seconds, of an article
     before it will be expired, or the symbol ‘never’ to specify that
     articles should never be expired.  If this parameter is not set,
     ‘nnmaildir’ falls back to the usual
     ‘nnmail-expiry-wait’(‘-function’) variables (the ‘expiry-wait’
     group parameter overrides ‘nnmail-expiry-wait’ and makes
     ‘nnmail-expiry-wait-function’ ineffective).  If you wanted a value
     of 3 days, you could use something like ‘[(* 3 24 60 60)]’;
     ‘nnmaildir’ will evaluate the form and use the result.  An
     article’s age is measured starting from the article file’s
     modification time.  Normally, this is the same as the article’s
     delivery time, but editing an article makes it younger.  Moving an
     article (other than via expiry) may also make an article younger.

‘expire-group’
     If this is set to a string such as a full Gnus group name, like
          "backend+server.address.string:group.name"
     and if it is not the name of the same group that the parameter
     belongs to, then articles will be moved to the specified group
     during expiry before being deleted.  _If this is set to an
     ‘nnmaildir’ group, the article will be just as old in the
     destination group as it was in the source group._  So be careful
     with ‘expire-age’ in the destination group.  If this is set to the
     name of the same group that the parameter belongs to, then the
     article is not expired at all.  If you use the vector form, the
     first element is evaluated once for each article.  So that form can
     refer to ‘nnmaildir-article-file-name’, etc., to decide where to
     put the article.  _Even if this parameter is not set, ‘nnmaildir’
     does not fall back to the ‘expiry-target’ group parameter or the
     ‘nnmail-expiry-target’ variable._

‘read-only’
     If this is set to ‘t’, ‘nnmaildir’ will treat the articles in this
     maildir as read-only.  This means: articles are not renamed from
     ‘new/’ into ‘cur/’; articles are only found in ‘new/’, not ‘cur/’;
     articles are never deleted; articles cannot be edited.  ‘new/’ is
     expected to be a symlink to the ‘new/’ directory of another
     maildir—e.g., a system-wide mailbox containing a mailing list of
     common interest.  Everything in the maildir outside ‘new/’ is _not_
     treated as read-only, so for a shared mailbox, you do still need to
     set up your own maildir (or have write permission to the shared
     mailbox); your maildir just won’t contain extra copies of the
     articles.

‘directory-files’
     A function with the same interface as ‘directory-files’.  It is
     used to scan the directories in the maildir corresponding to this
     group to find articles.  The default is the function specified by
     the server’s ‘directory-files’ parameter.

‘distrust-Lines:’
     If non-‘nil’, ‘nnmaildir’ will always count the lines of an
     article, rather than use the ‘Lines:’ header field.  If ‘nil’, the
     header field will be used if present.

‘always-marks’
     A list of mark symbols, such as ‘['(read expire)]’.  Whenever Gnus
     asks ‘nnmaildir’ for article marks, ‘nnmaildir’ will say that all
     articles have these marks, regardless of whether the marks stored
     in the filesystem say so.  This is a proof-of-concept feature that
     will probably be removed eventually; it ought to be done in Gnus
     proper, or abandoned if it’s not worthwhile.

‘never-marks’
     A list of mark symbols, such as ‘['(tick expire)]’.  Whenever Gnus
     asks ‘nnmaildir’ for article marks, ‘nnmaildir’ will say that no
     articles have these marks, regardless of whether the marks stored
     in the filesystem say so.  ‘never-marks’ overrides ‘always-marks’.
     This is a proof-of-concept feature that will probably be removed
     eventually; it ought to be done in Gnus proper, or abandoned if
     it’s not worthwhile.

‘nov-cache-size’
     An integer specifying the size of the NOV memory cache.  To speed
     things up, ‘nnmaildir’ keeps NOV data in memory for a limited
     number of articles in each group.  (This is probably not
     worthwhile, and will probably be removed in the future.)  This
     parameter’s value is noticed only the first time a group is seen
     after the server is opened—i.e., when you first start Gnus,
     typically.  The NOV cache is never resized until the server is
     closed and reopened.  The default is an estimate of the number of
     articles that would be displayed in the summary buffer: a count of
     articles that are either marked with ‘tick’ or not marked with
     ‘read’, plus a little extra.


File: gnus.info,  Node: Article Identification,  Next: NOV Data,  Prev: nnmaildir Group Parameters,  Up: Choosing a Mail Back End

7.4.13.7 Article identification
...............................

Articles are stored in the ‘cur/’ subdirectory of each maildir.  Each
article file is named like ‘uniq:info’, where ‘uniq’ contains no colons.
‘nnmaildir’ ignores, but preserves, the ‘:info’ part.  (Other maildir
readers typically use this part of the filename to store marks.)  The
‘uniq’ part uniquely identifies the article, and is used in various
places in the ‘.nnmaildir/’ subdirectory of the maildir to store
information about the corresponding article.  The full pathname of an
article is available in the variable ‘nnmaildir-article-file-name’ after
you request the article in the summary buffer.


File: gnus.info,  Node: NOV Data,  Next: Article Marks,  Prev: Article Identification,  Up: Choosing a Mail Back End

7.4.13.8 NOV data
.................

An article identified by ‘uniq’ has its NOV data (used to generate lines
in the summary buffer) stored in ‘.nnmaildir/nov/uniq’.  There is no
‘nnmaildir-generate-nov-databases’ function.  (There isn’t much need for
it—an article’s NOV data is updated automatically when the article or
‘nnmail-extra-headers’ has changed.)  You can force ‘nnmaildir’ to
regenerate the NOV data for a single article simply by deleting the
corresponding NOV file, but _beware_: this will also cause ‘nnmaildir’
to assign a new article number for this article, which may cause trouble
with ‘seen’ marks, the Agent, and the cache.


File: gnus.info,  Node: Article Marks,  Next: Mail Folders,  Prev: NOV Data,  Up: Choosing a Mail Back End

7.4.13.9 Article marks
......................

An article identified by ‘uniq’ is considered to have the mark ‘flag’
when the file ‘.nnmaildir/marks/flag/uniq’ exists.  When Gnus asks
‘nnmaildir’ for a group’s marks, ‘nnmaildir’ looks for such files and
reports the set of marks it finds.  When Gnus asks ‘nnmaildir’ to store
a new set of marks, ‘nnmaildir’ creates and deletes the corresponding
files as needed.  (Actually, rather than create a new file for each
mark, it just creates hard links to ‘.nnmaildir/markfile’, to save
inodes.)

   You can invent new marks by creating a new directory in
‘.nnmaildir/marks/’.  You can tar up a maildir and remove it from your
server, untar it later, and keep your marks.  You can add and remove
marks yourself by creating and deleting mark files.  If you do this
while Gnus is running and your ‘nnmaildir’ server is open, it’s best to
exit all summary buffers for ‘nnmaildir’ groups and type ‘s’ in the
group buffer first, and to type ‘g’ or ‘M-g’ in the group buffer
afterwards.  Otherwise, Gnus might not pick up the changes, and might
undo them.


File: gnus.info,  Node: Mail Folders,  Next: Comparing Mail Back Ends,  Prev: Article Marks,  Up: Choosing a Mail Back End

7.4.13.10 Mail Folders
......................

‘nnfolder’ is a back end for storing each mail group in a separate file.
Each file is in the standard Un*x mbox format.  ‘nnfolder’ will add
extra headers to keep track of article numbers and arrival dates.

   Virtual server settings:

‘nnfolder-directory’
     All the ‘nnfolder’ mail boxes will be stored under this directory.
     The default is the value of ‘message-directory’ (whose default is
     ‘~/Mail’)

‘nnfolder-active-file’
     The name of the active file.  The default is ‘~/Mail/active’.

‘nnfolder-newsgroups-file’
     The name of the group descriptions file.  *Note Newsgroups File
     Format::.  The default is ‘~/Mail/newsgroups’

‘nnfolder-get-new-mail’
     If non-‘nil’, ‘nnfolder’ will read incoming mail.  The default is
     ‘t’

‘nnfolder-save-buffer-hook’
     Hook run before saving the folders.  Note that Emacs does the
     normal backup renaming of files even with the ‘nnfolder’ buffers.
     If you wish to switch this off, you could say something like the
     following in your ‘.emacs’ file:

          (defun turn-off-backup ()
            (set (make-local-variable 'backup-inhibited) t))

          (add-hook 'nnfolder-save-buffer-hook 'turn-off-backup)

‘nnfolder-delete-mail-hook’
     Hook run in a buffer narrowed to the message that is to be deleted.
     This function can be used to copy the message to somewhere else, or
     to extract some information from it before removing it.

‘nnfolder-nov-is-evil’
     If non-‘nil’, this back end will ignore any NOV files.  The default
     is ‘nil’.

‘nnfolder-nov-file-suffix’
     The extension for NOV files.  The default is ‘.nov’.

‘nnfolder-nov-directory’
     The directory where the NOV files should be stored.  If ‘nil’,
     ‘nnfolder-directory’ is used.

   If you have lots of ‘nnfolder’-like files you’d like to read with
‘nnfolder’, you can use the ‘M-x nnfolder-generate-active-file’ command
to make ‘nnfolder’ aware of all likely files in ‘nnfolder-directory’.
This only works if you use long file names, though.


File: gnus.info,  Node: Comparing Mail Back Ends,  Prev: Mail Folders,  Up: Choosing a Mail Back End

7.4.13.11 Comparing Mail Back Ends
..................................

First, just for terminology, the “back end” is the common word for a
low-level access method—a transport, if you will, by which something is
acquired.  The sense is that one’s mail has to come from somewhere, and
so selection of a suitable back end is required in order to get that
mail within spitting distance of Gnus.

   The same concept exists for Usenet itself: Though access to articles
is typically done by NNTP these days, once upon a midnight dreary,
everyone in the world got at Usenet by running a reader on the machine
where the articles lay (the machine which today we call an NNTP server),
and access was by the reader stepping into the articles’ directory spool
area directly.  One can still select between either the ‘nntp’ or
‘nnspool’ back ends, to select between these methods, if one happens
actually to live on the server (or can see its spool directly, anyway,
via NFS).

   The goal in selecting a mail back end is to pick one which
simultaneously represents a suitable way of dealing with the original
format plus leaving mail in a form that is convenient to use in the
future.  Here are some high and low points on each:

‘nnmbox’

     UNIX systems have historically had a single, very common, and
     well-defined format.  All messages arrive in a single “spool file”,
     and they are delineated by a line whose regular expression matches
     ‘^From_’.  (My notational use of ‘_’ is to indicate a space, to
     make it clear in this instance that this is not the RFC-specified
     ‘From:’ header.)  Because Emacs and therefore Gnus emanate
     historically from the Unix environment, it is simplest if one does
     not mess a great deal with the original mailbox format, so if one
     chooses this back end, Gnus’ primary activity in getting mail from
     the real spool area to Gnus’ preferred directory is simply to copy
     it, with no (appreciable) format change in the process.  It is the
     “dumbest” way to move mail into availability in the Gnus
     environment.  This makes it fast to move into place, but slow to
     parse, when Gnus has to look at what’s where.

‘nnbabyl’

     Once upon a time, there was the DEC-10 and DEC-20, running
     operating systems called TOPS and related things, and the usual
     (only?)  mail reading environment was a thing called Babyl.  I
     don’t know what format was used for mail landing on the system, but
     Babyl had its own internal format to which mail was converted,
     primarily involving creating a spool-file-like entity with a scheme
     for inserting Babyl-specific headers and status bits above the top
     of each message in the file.  Rmail was Emacs’s first mail reader,
     it was written by Richard Stallman, and Stallman came out of that
     TOPS/Babyl environment, so he wrote Rmail to understand the mail
     files folks already had in existence.  Gnus (and VM, for that
     matter) continue to support this format because it’s perceived as
     having some good qualities in those mailer-specific headers/status
     bits stuff.  Rmail itself still exists as well, of course, and is
     still maintained within Emacs.  Since Emacs 23, it uses standard
     mbox format rather than Babyl.

     Both of the above forms leave your mail in a single file on your
     file system, and they must parse that entire file each time you
     take a look at your mail.

‘nnml’

     ‘nnml’ is the back end which smells the most as though you were
     actually operating with an ‘nnspool’-accessed Usenet system.  (In
     fact, I believe ‘nnml’ actually derived from ‘nnspool’ code, lo
     these years ago.)  One’s mail is taken from the original spool
     file, and is then cut up into individual message files, 1:1.  It
     maintains a Usenet-style active file (analogous to what one finds
     in an INN- or CNews-based news system in (for instance)
     ‘/var/lib/news/active’, or what is returned via the ‘NNTP LIST’
     verb) and also creates “overview” files for efficient group entry,
     as has been defined for NNTP servers for some years now.  It is
     slower in mail-splitting, due to the creation of lots of files,
     updates to the ‘nnml’ active file, and additions to overview files
     on a per-message basis, but it is extremely fast on access because
     of what amounts to the indexing support provided by the active file
     and overviews.

     ‘nnml’ costs “inodes” in a big way; that is, it soaks up the
     resource which defines available places in the file system to put
     new files.  Sysadmins take a dim view of heavy inode occupation
     within tight, shared file systems.  But if you live on a personal
     machine where the file system is your own and space is not at a
     premium, ‘nnml’ wins big.

     It is also problematic using this back end if you are living in a
     FAT16-based Windows world, since much space will be wasted on all
     these tiny files.

‘nnmh’

     The Rand MH mail-reading system has been around UNIX systems for a
     very long time; it operates by splitting one’s spool file of
     messages into individual files, but with little or no indexing
     support—‘nnmh’ is considered to be semantically equivalent to
     “‘nnml’ without active file or overviews”.  This is arguably the
     worst choice, because one gets the slowness of individual file
     creation married to the slowness of access parsing when learning
     what’s new in one’s groups.

‘nnfolder’

     Basically the effect of ‘nnfolder’ is ‘nnmbox’ (the first method
     described above) on a per-group basis.  That is, ‘nnmbox’ itself
     puts _all_ one’s mail in one file; ‘nnfolder’ provides a little bit
     of optimization to this so that each of one’s mail groups has a
     Unix mail box file.  It’s faster than ‘nnmbox’ because each group
     can be parsed separately, and still provides the simple Unix mail
     box format requiring minimal effort in moving the mail around.  In
     addition, it maintains an “active” file making it much faster for
     Gnus to figure out how many messages there are in each separate
     group.

     If you have groups that are expected to have a massive amount of
     messages, ‘nnfolder’ is not the best choice, but if you receive
     only a moderate amount of mail, ‘nnfolder’ is probably the most
     friendly mail back end all over.

‘nnmaildir’

     For configuring expiry and other things, ‘nnmaildir’ uses
     incompatible group parameters, slightly different from those of
     other mail back ends.

     ‘nnmaildir’ is largely similar to ‘nnml’, with some notable
     differences.  Each message is stored in a separate file, but the
     filename is unrelated to the article number in Gnus.  ‘nnmaildir’
     also stores the equivalent of ‘nnml’’s overview files in one file
     per article, so it uses about twice as many inodes as ‘nnml’.  (Use
     ‘df -i’ to see how plentiful your inode supply is.)  If this slows
     you down or takes up very much space, a non-block-structured file
     system.

     Since maildirs don’t require locking for delivery, the maildirs you
     use as groups can also be the maildirs your mail is directly
     delivered to.  This means you can skip Gnus’ mail splitting if your
     mail is already organized into different mailboxes during delivery.
     A ‘directory’ entry in ‘mail-sources’ would have a similar effect,
     but would require one set of mailboxes for spooling deliveries (in
     mbox format, thus damaging message bodies), and another set to be
     used as groups (in whatever format you like).  A maildir has a
     built-in spool, in the ‘new/’ subdirectory.  Beware that currently,
     mail moved from ‘new/’ to ‘cur/’ instead of via mail splitting will
     not undergo treatment such as duplicate checking.

     ‘nnmaildir’ stores article marks for a given group in the
     corresponding maildir, in a way designed so that it’s easy to
     manipulate them from outside Gnus.  You can tar up a maildir,
     unpack it somewhere else, and still have your marks.

     ‘nnmaildir’ uses a significant amount of memory to speed things up.
     (It keeps in memory some of the things that ‘nnml’ stores in files
     and that ‘nnmh’ repeatedly parses out of message files.)  If this
     is a problem for you, you can set the ‘nov-cache-size’ group
     parameter to something small (0 would probably not work, but 1
     probably would) to make it use less memory.  This caching will
     probably be removed in the future.

     Startup is likely to be slower with ‘nnmaildir’ than with other
     back ends.  Everything else is likely to be faster, depending in
     part on your file system.

     ‘nnmaildir’ does not use ‘nnoo’, so you cannot use ‘nnoo’ to write
     an ‘nnmaildir’-derived back end.


File: gnus.info,  Node: Browsing the Web,  Next: Other Sources,  Prev: Getting Mail,  Up: Select Methods

# /. 7.5 Browsing the Web
========================

Web-based discussion forums are getting more and more popular.  On many
subjects, the web-based forums have become the most important forums,
eclipsing the importance of mailing lists and news groups.  The reason
is easy to understand—they are friendly to new users; you just point and
click, and there’s the discussion.  With mailing lists, you have to go
through a cumbersome subscription procedure, and most people don’t even
know what a news group is.

   The problem with this scenario is that web browsers are not very good
at being newsreaders.  They do not keep track of what articles you’ve
read; they do not allow you to score on subjects you’re interested in;
they do not allow off-line browsing; they require you to click around
and drive you mad in the end.

   So—if web browsers suck at reading discussion forums, why not use
Gnus to do it instead?

   Gnus has been getting a bit of a collection of back ends for
providing interfaces to these sources.

* Menu:

* Web Searches::                Creating groups from articles that match a string.
* RSS::                         Reading RDF site summary.

   The main caveat with all these web sources is that they probably
won’t work for a very long time.  Gleaning information from the HTML
data is guesswork at best, and when the layout is altered, the Gnus back
end will fail.  If you have reasonably new versions of these back ends,
though, you should be ok.

   One thing all these Web methods have in common is that the Web
sources are often down, unavailable or just plain too slow to be fun.
In those cases, it makes a lot of sense to let the Gnus Agent (*note
Gnus Unplugged::) handle downloading articles, and then you can read
them at leisure from your local disk.  No more World Wide Wait for you.


File: gnus.info,  Node: Web Searches,  Next: RSS,  Up: Browsing the Web

7.5.1 Web Searches
------------------

It’s, like, too neat to search the Usenet for articles that match a
string, but it, like, totally _sucks_, like, totally, to use one of
those, like, Web browsers, and you, like, have to, rilly, like, look at
the commercials, so, like, with Gnus you can do _rad_, rilly, searches
without having to use a browser.

   The ‘nnweb’ back end allows an easy interface to the mighty search
engine.  You create an ‘nnweb’ group, enter a search pattern, and then
enter the group and read the articles like you would any normal group.
The ‘G w’ command in the group buffer (*note Foreign Groups::) will do
this in an easy-to-use fashion.

   ‘nnweb’ groups don’t really lend themselves to being solid
groups—they have a very fleeting idea of article numbers.  In fact, each
time you enter an ‘nnweb’ group (not even changing the search pattern),
you are likely to get the articles ordered in a different manner.  Not
even using duplicate suppression (*note Duplicate Suppression::) will
help, since ‘nnweb’ doesn’t even know the ‘Message-ID’ of the articles
before reading them using some search engines (Google, for instance).
The only possible way to keep track of which articles you’ve read is by
scoring on the ‘Date’ header—mark all articles posted before the last
date you read the group as read.

   If the search engine changes its output substantially, ‘nnweb’ won’t
be able to parse it and will fail.  One could hardly fault the Web
providers if they were to do this—their _raison d’être_ is to make money
off of advertisements, not to provide services to the community.  Since
‘nnweb’ washes the ads off all the articles, one might think that the
providers might be somewhat miffed.  We’ll see.

   Virtual server variables:

‘nnweb-type’
     What search engine type is being used.  The currently supported
     types are ‘google’ and ‘dejanews’.  Note that ‘dejanews’ is an
     alias to ‘google’.

‘nnweb-search’
     The search string to feed to the search engine.

‘nnweb-max-hits’
     Advisory maximum number of hits per search to display.  The default
     is 999.

‘nnweb-type-definition’
     Type-to-definition alist.  This alist says what ‘nnweb’ should do
     with the various search engine types.  The following elements must
     be present:

     ‘article’
          Function to decode the article and provide something that Gnus
          understands.

     ‘map’
          Function to create an article number to message header and URL
          alist.

     ‘search’
          Function to send the search string to the search engine.

     ‘address’
          The address the aforementioned function should send the search
          string to.

     ‘id’
          Format string URL to fetch an article by ‘Message-ID’.


File: gnus.info,  Node: RSS,  Prev: Web Searches,  Up: Browsing the Web

7.5.2 RSS
---------

Some web sites have an RDF Site Summary (RSS).  RSS is a format for
summarizing headlines from news related sites (such as BBC or CNN). But
basically anything list-like can be presented as an RSS feed: weblogs,
changelogs or recent changes to a wiki (e.g.,
<https://cliki.net/site/recent-changes>).

   RSS has a quite regular and nice interface, and it’s possible to get
the information Gnus needs to keep groups updated.

   Use ‘G R’ from the group buffer to subscribe to a feed—you will be
prompted for the location, the title and the description of the feed.
The title, which allows any characters, will be used for the group name
and the name of the group data file.  The description can be omitted.

   An easy way to get started with ‘nnrss’ is to say something like the
following in the group buffer: ‘B nnrss <RET> <RET> y’, then subscribe
to groups.

   The ‘nnrss’ back end saves the group data file in ‘nnrss-directory’
(see below) for each ‘nnrss’ group.  File names containing non-ASCII
characters will be encoded by the coding system specified with the
‘nnmail-pathname-coding-system’ variable or other.  Also *Note Non-ASCII
Group Names::, for more information.

   The ‘nnrss’ back end generates ‘multipart/alternative’ MIME articles
in which each contains a ‘text/plain’ part and a ‘text/html’ part.

   You can also use the following commands to import and export your
subscriptions from a file in OPML format (Outline Processor Markup
Language).

 -- Function: nnrss-opml-import file
     Prompt for an OPML file, and subscribe to each feed in the file.

 -- Function: nnrss-opml-export
     Write your current RSS subscriptions to a buffer in OPML format.

   The following ‘nnrss’ variables can be altered:

‘nnrss-directory’
     The directory where ‘nnrss’ stores its files.  The default is
     ‘~/News/rss/’.

‘nnrss-file-coding-system’
     The coding system used when reading and writing the ‘nnrss’ groups
     data files.  The default is the value of
     ‘mm-universal-coding-system’ (which defaults to ‘utf-8-emacs’).

‘nnrss-ignore-article-fields’
     Some feeds update constantly article fields during their
     publications, e.g., to indicate the number of comments.  However,
     if there is a difference between the local article and the distant
     one, the latter is considered to be new.  To avoid this and discard
     some fields, set this variable to the list of fields to be ignored.
     The default is ‘'(slash:comments)’.

‘nnrss-use-local’
     If you set ‘nnrss-use-local’ to ‘t’, ‘nnrss’ will read the feeds
     from local files in ‘nnrss-directory’.  You can use the command
     ‘nnrss-generate-download-script’ to generate a download script
     using ‘wget’.

   The following code may be helpful, if you want to show the
description in the summary buffer.

     (add-to-list 'nnmail-extra-headers nnrss-description-field)
     (setq gnus-summary-line-format "%U%R%z%I%(%[%4L: %-15,15f%]%) %s%uX\n")

     (defun gnus-user-format-function-X (header)
       (let ((descr
              (assq nnrss-description-field (mail-header-extra header))))
         (if descr (concat "\n\t" (cdr descr)) "")))

   The following code may be useful to open an nnrss url directly from
the summary buffer.

     (require 'browse-url)

     (defun browse-nnrss-url (arg)
       (interactive "p")
       (let ((url (assq nnrss-url-field
                        (mail-header-extra
                         (gnus-data-header
                          (assq (gnus-summary-article-number)
                                gnus-newsgroup-data))))))
         (if url
             (progn
               (browse-url (cdr url))
               (gnus-summary-mark-as-read-forward 1))
           (gnus-summary-scroll-up arg))))

     (with-eval-after-load "gnus"
       (define-key gnus-summary-mode-map
         (kbd "<RET>") 'browse-nnrss-url))
     (add-to-list 'nnmail-extra-headers nnrss-url-field)

   Even if you have added ‘text/html’ to the
‘mm-discouraged-alternatives’ variable (*note Display Customization:
(emacs-mime)Display Customization.) since you don’t want to see HTML
parts, it might be more useful especially in ‘nnrss’ groups to display
‘text/html’ parts.  Here’s an example of setting
‘mm-discouraged-alternatives’ as a group parameter (*note Group
Parameters::) in order to display ‘text/html’ parts only in ‘nnrss’
groups:

     ;; Set the default value of ‘mm-discouraged-alternatives’.
     (with-eval-after-load "gnus-sum"
       (add-to-list
        'gnus-newsgroup-variables
        '(mm-discouraged-alternatives
          . '("text/html" "image/.*"))))

     ;; Display ‘text/html’ parts in ‘nnrss’ groups.
     (add-to-list
      'gnus-parameters
      '("\\`nnrss:" (mm-discouraged-alternatives nil)))


File: gnus.info,  Node: Other Sources,  Next: Virtual Groups,  Prev: Browsing the Web,  Up: Select Methods

# /. 7.6 Other Sources
=====================

Gnus can do more than just read news or mail.  The methods described
below allow Gnus to view directories and files as if they were
newsgroups.

* Menu:

* Directory Groups::            You can read a directory as if it was a newsgroup.
* Anything Groups::             Dired?  Who needs dired?
* Document Groups::             Single files can be the basis of a group.
* Mail-To-News Gateways::       Posting articles via mail-to-news gateways.
* The Empty Backend::           The backend that never has any news.


File: gnus.info,  Node: Directory Groups,  Next: Anything Groups,  Up: Other Sources

7.6.1 Directory Groups
----------------------

If you have a directory that has lots of articles in separate files in
it, you might treat it as a newsgroup.  The files have to have numerical
names, of course.

   This might be an opportune moment to mention ‘ange-ftp’, that most
wonderful of all wonderful Emacs packages.  When I wrote ‘nndir’, I
didn’t think much about it—a back end to read directories.  Big deal.

   ‘ange-ftp’ changes that picture dramatically.  For instance, if you
enter the ‘ange-ftp’ file name ‘/ftp.hpc.uh.edu:/pub/emacs/ding-list/’
as the directory name, ‘ange-ftp’ will actually allow you to read this
directory over at ‘sina’ as a newsgroup.  Distributed news ahoy!

   ‘nndir’ will use NOV files if they are present.

   ‘nndir’ is a “read-only” back end—you can’t delete or expire articles
with this method.  You can use ‘nnmh’ or ‘nnml’ for whatever you use
‘nndir’ for, so you could switch to any of those methods if you feel the
need to have a non-read-only ‘nndir’.


File: gnus.info,  Node: Anything Groups,  Next: Document Groups,  Prev: Directory Groups,  Up: Other Sources

7.6.2 Anything Groups
---------------------

From the ‘nndir’ back end (which reads a single spool-like directory),
it’s just a hop and a skip to ‘nneething’, which pretends that any
arbitrary directory is a newsgroup.  Strange, but true.

   When ‘nneething’ is presented with a directory, it will scan this
directory and assign article numbers to each file.  When you enter such
a group, ‘nneething’ must create “headers” that Gnus can use.  After
all, Gnus is a newsreader, in case you’re forgetting.  ‘nneething’ does
this in a two-step process.  First, it snoops each file in question.  If
the file looks like an article (i.e., the first few lines look like
headers), it will use this as the head.  If this is just some arbitrary
file without a head (e.g., a C source file), ‘nneething’ will cobble up
a header out of thin air.  It will use file ownership, name and date and
do whatever it can with these elements.

   All this should happen automatically for you, and you will be
presented with something that looks very much like a newsgroup.  Totally
like a newsgroup, to be precise.  If you select an article, it will be
displayed in the article buffer, just as usual.

   If you select a line that represents a directory, Gnus will pop you
into a new summary buffer for this ‘nneething’ group.  And so on.  You
can traverse the entire disk this way, if you feel like, but remember
that Gnus is not dired, really, and does not intend to be, either.

   There are two overall modes to this action—ephemeral or solid.  When
doing the ephemeral thing (i.e., ‘G D’ from the group buffer), Gnus will
not store information on what files you have read, and what files are
new, and so on.  If you create a solid ‘nneething’ group the normal way
with ‘G m’, Gnus will store a mapping table between article numbers and
file names, and you can treat this group like any other groups.  When
you activate a solid ‘nneething’ group, you will be told how many unread
articles it contains, etc., etc.

   Some variables:

‘nneething-map-file-directory’
     All the mapping files for solid ‘nneething’ groups will be stored
     in this directory, which defaults to ‘~/.nneething/’.

‘nneething-exclude-files’
     All files that match this regexp will be ignored.  Nice to use to
     exclude auto-save files and the like, which is what it does by
     default.

‘nneething-include-files’
     Regexp saying what files to include in the group.  If this variable
     is non-‘nil’, only files matching this regexp will be included.

‘nneething-map-file’
     Name of the map files.


File: gnus.info,  Node: Document Groups,  Next: Mail-To-News Gateways,  Prev: Anything Groups,  Up: Other Sources

7.6.3 Document Groups
---------------------

‘nndoc’ is a cute little thing that will let you read a single file as a
newsgroup.  Several files types are supported:

‘babyl’
     The Babyl format.

‘mbox’
     The standard Unix mbox file.

‘mmdf’
     The MMDF mail box format.

‘news’
     Several news articles appended into a file.

‘rnews’
     The rnews batch transport format.

‘nsmail’
     Netscape mail boxes.

‘mime-parts’
     MIME multipart messages.

‘standard-digest’
     The standard (RFC 1153) digest format.

‘mime-digest’
     A MIME digest of messages.

‘lanl-gov-announce’
     Announcement messages from LANL Gov Announce.

‘git’
     ‘git’ commit messages.

‘rfc822-forward’
     A message forwarded according to RFC 822 or its successors.

‘outlook’
     The Outlook mail box.

‘oe-dbx’
     The Outlook Express dbx mail box.

‘exim-bounce’
     A bounce message from the Exim MTA.

‘forward’
     A message forwarded according to informal rules.

‘rfc934’
     An RFC934-forwarded message.

‘mailman’
     A mailman digest.

‘clari-briefs’
     A digest of Clarinet brief news items.

‘slack-digest’
     Non-standard digest format—matches most things, but does it badly.

‘mail-in-mail’
     The last resort.

   You can also use the special “file type” ‘guess’, which means that
‘nndoc’ will try to guess what file type it is looking at.  ‘digest’
means that ‘nndoc’ should guess what digest type the file is.

   ‘nndoc’ will not try to change the file or insert any extra headers
into it—it will simply, like, let you use the file as the basis for a
group.  And that’s it.

   If you have some old archived articles that you want to insert into
your new & spiffy Gnus mail back end, ‘nndoc’ can probably help you with
that.  Say you have an old ‘RMAIL’ file with mail that you now want to
split into your new ‘nnml’ groups.  You look at that file using ‘nndoc’
(using the ‘G f’ command in the group buffer (*note Foreign Groups::)),
set the process mark on all the articles in the buffer (‘M P b’, for
instance), and then re-spool (‘B r’) using ‘nnml’.  If all goes well,
all the mail in the ‘RMAIL’ file is now also stored in lots of ‘nnml’
directories, and you can delete that pesky ‘RMAIL’ file.  If you have
the guts!

   Virtual server variables:

‘nndoc-article-type’
     This should be one of ‘mbox’, ‘babyl’, ‘digest’, ‘news’, ‘rnews’,
     ‘mmdf’, ‘forward’, ‘rfc934’, ‘rfc822-forward’, ‘mime-parts’,
     ‘standard-digest’, ‘slack-digest’, ‘clari-briefs’, ‘nsmail’,
     ‘outlook’, ‘oe-dbx’, ‘mailman’, and ‘mail-in-mail’ or ‘guess’.

‘nndoc-post-type’
     This variable says whether Gnus is to consider the group a news
     group or a mail group.  There are two valid values: ‘mail’ (the
     default) and ‘news’.

* Menu:

* Document Server Internals::   How to add your own document types.


File: gnus.info,  Node: Document Server Internals,  Up: Document Groups

7.6.3.1 Document Server Internals
.................................

Adding new document types to be recognized by ‘nndoc’ isn’t difficult.
You just have to whip up a definition of what the document looks like,
write a predicate function to recognize that document type, and then
hook into ‘nndoc’.

   First, here’s an example document type definition:

     (mmdf
      (article-begin .  "^\^A\^A\^A\^A\n")
      (body-end .  "^\^A\^A\^A\^A\n"))

   The definition is simply a unique “name” followed by a series of
regexp pseudo-variable settings.  Below are the possible variables—don’t
be daunted by the number of variables; most document types can be
defined with very few settings:

‘first-article’
     If present, ‘nndoc’ will skip past all text until it finds
     something that match this regexp.  All text before this will be
     totally ignored.

‘article-begin’
     This setting has to be present in all document type definitions.
     It says what the beginning of each article looks like.  To do more
     complicated things that cannot be dealt with a simple regexp, you
     can use ‘article-begin-function’ instead of this.

‘article-begin-function’
     If present, this should be a function that moves point to the
     beginning of each article.  This setting overrides ‘article-begin’.

‘head-begin’
     If present, this should be a regexp that matches the head of the
     article.  To do more complicated things that cannot be dealt with a
     simple regexp, you can use ‘head-begin-function’ instead of this.

‘head-begin-function’
     If present, this should be a function that moves point to the head
     of the article.  This setting overrides ‘head-begin’.

‘head-end’
     This should match the end of the head of the article.  It defaults
     to ‘^$’—the empty line.

‘body-begin’
     This should match the beginning of the body of the article.  It
     defaults to ‘^\n’.  To do more complicated things that cannot be
     dealt with a simple regexp, you can use ‘body-begin-function’
     instead of this.

‘body-begin-function’
     If present, this function should move point to the beginning of the
     body of the article.  This setting overrides ‘body-begin’.

‘body-end’
     If present, this should match the end of the body of the article.
     To do more complicated things that cannot be dealt with a simple
     regexp, you can use ‘body-end-function’ instead of this.

‘body-end-function’
     If present, this function should move point to the end of the body
     of the article.  This setting overrides ‘body-end’.

‘file-begin’
     If present, this should match the beginning of the file.  All text
     before this regexp will be totally ignored.

‘file-end’
     If present, this should match the end of the file.  All text after
     this regexp will be totally ignored.

   So, using these variables ‘nndoc’ is able to dissect a document file
into a series of articles, each with a head and a body.  However, a few
more variables are needed since not all document types are all that
news-like—variables needed to transform the head or the body into
something that’s palatable for Gnus:

‘prepare-body-function’
     If present, this function will be called when requesting an
     article.  It will be called with point at the start of the body,
     and is useful if the document has encoded some parts of its
     contents.

‘article-transform-function’
     If present, this function is called when requesting an article.
     It’s meant to be used for more wide-ranging transformation of both
     head and body of the article.

‘generate-head-function’
     If present, this function is called to generate a head that Gnus
     can understand.  It is called with the article number as a
     parameter, and is expected to generate a nice head for the article
     in question.  It is called when requesting the headers of all
     articles.

‘generate-article-function’
     If present, this function is called to generate an entire article
     that Gnus can understand.  It is called with the article number as
     a parameter when requesting all articles.

‘dissection-function’
     If present, this function is called to dissect a document by
     itself, overriding ‘first-article’, ‘article-begin’,
     ‘article-begin-function’, ‘head-begin’, ‘head-begin-function’,
     ‘head-end’, ‘body-begin’, ‘body-begin-function’, ‘body-end’,
     ‘body-end-function’, ‘file-begin’, and ‘file-end’.

   Let’s look at the most complicated example I can come up
with—standard digests:

     (standard-digest
      (first-article . ,(concat "^" (make-string 70 ?-) "\n\n+"))
      (article-begin . ,(concat "\n\n" (make-string 30 ?-) "\n\n+"))
      (prepare-body-function . nndoc-unquote-dashes)
      (body-end-function . nndoc-digest-body-end)
      (head-end . "^ ?$")
      (body-begin . "^ ?\n")
      (file-end . "^End of .*digest.*[0-9].*\n\\*\\*\\|^End of.*Digest *$")
      (subtype digest guess))

   We see that all text before a 70-width line of dashes is ignored; all
text after a line that starts with that ‘^End of’ is also ignored; each
article begins with a 30-width line of dashes; the line separating the
head from the body may contain a single space; and that the body is run
through ‘nndoc-unquote-dashes’ before being delivered.

   To hook your own document definition into ‘nndoc’, use the
‘nndoc-add-type’ function.  It takes two parameters—the first is the
definition itself and the second (optional) parameter says where in the
document type definition alist to put this definition.  The alist is
traversed sequentially, and ‘nndoc-TYPE-type-p’ is called for a given
type TYPE.  So ‘nndoc-mmdf-type-p’ is called to see whether a document
is of ‘mmdf’ type, and so on.  These type predicates should return ‘nil’
if the document is not of the correct type; ‘t’ if it is of the correct
type; and a number if the document might be of the correct type.  A high
number means high probability; a low number means low probability with
‘0’ being the lowest valid number.


File: gnus.info,  Node: Mail-To-News Gateways,  Next: The Empty Backend,  Prev: Document Groups,  Up: Other Sources

7.6.4 Mail-To-News Gateways
---------------------------

If your local ‘nntp’ server doesn’t allow posting, for some reason or
other, you can post using one of the numerous mail-to-news gateways.
The ‘nngateway’ back end provides the interface.

   Note that you can’t read anything from this back end—it can only be
used to post with.

   Server variables:

‘nngateway-address’
     This is the address of the mail-to-news gateway.

‘nngateway-header-transformation’
     News headers often have to be transformed in some odd way or other
     for the mail-to-news gateway to accept it.  This variable says what
     transformation should be called, and defaults to
     ‘nngateway-simple-header-transformation’.  The function is called
     narrowed to the headers to be transformed and with one
     parameter—the gateway address.

     This default function just inserts a new ‘To’ header based on the
     ‘Newsgroups’ header and the gateway address.  For instance, an
     article with this ‘Newsgroups’ header:

          Newsgroups: alt.religion.emacs

     will get this ‘To’ header inserted:

          To: alt-religion-emacs@GATEWAY

     The following pre-defined functions exist:

     ‘nngateway-simple-header-transformation’
          Creates a ‘To’ header that looks like
          NEWSGROUP@‘nngateway-address’.

     ‘nngateway-mail2news-header-transformation’
          Creates a ‘To’ header that looks like ‘nngateway-address’.

   Here’s an example:

     (setq gnus-post-method
           '(nngateway
             "mail2news@replay.com"
             (nngateway-header-transformation
              nngateway-mail2news-header-transformation)))

   So, to use this, simply say something like:

     (setq gnus-post-method '(nngateway "GATEWAY.ADDRESS"))


File: gnus.info,  Node: The Empty Backend,  Prev: Mail-To-News Gateways,  Up: Other Sources

7.6.5 The Empty Backend
-----------------------

‘nnnil’ is a backend that can be used as a placeholder if you have to
specify a backend somewhere, but don’t really want to.  The classical
example is if you don’t want to have a primary select methods, but want
to only use secondary ones:

     (setq gnus-select-method '(nnnil ""))
     (setq gnus-secondary-select-methods
           '((nnimap "foo")
             (nnml "")))


File: gnus.info,  Node: Virtual Groups,  Next: Email Based Diary,  Prev: Other Sources,  Up: Select Methods

# /. 7.7 Virtual Groups
======================

Gnus allows combining articles from many sources, and combinations of
whole groups together into virtual groups.

* Menu:

* Selection Groups::            Combining articles from many groups.
* Combined Groups::             Combining multiple groups.


File: gnus.info,  Node: Selection Groups,  Next: Combined Groups,  Up: Virtual Groups

7.7.1 Select Groups
-------------------

Gnus provides the “nnselect” method for creating virtual groups composed
of collections of messages, even when these messages come from groups
that span multiple servers and backends.  For the most part these
virtual groups behave like any other group: messages may be threaded,
marked, moved, deleted, copied, etc.; groups may be ephemeral or
persistent; groups may be created via ‘gnus-group-make-group’ or browsed
as foreign via ‘gnus-group-browse-foreign-server’.

   The key to using an nnselect group is specifying the messages to
include.  Each nnselect group has a group parameter ‘nnselect-specs’
which is an alist with two elements: a function ‘nnselect-function’; and
arguments ‘nnselect-args’ to be passed to the function, if any.

   The function ‘nnselect-function’ must return a vector.  Each element
of this vector is in turn a 3-element vector corresponding to one
message.  The 3 elements are: the fully-qualified group name; the
message number; and a "score" that can be used for additional sorting.
The values for the score are arbitrary, and are not used directly by the
nnselect method—they may, for example, all be set to 100.

   Here is an example:

     (nnselect-specs
      (nnselect-function . identity)
      (nnselect-args
       . [["nnimap+work:mail" 595 100]
          ["nnimap+home:sent" 223 100]
          ["nntp+news.gmane.org:gmane.emacs.gnus.general" 23666 100]]))

   The function is the identity and the argument is just the list of
messages to include in the virtual group.

   Or we may wish to create a group from the results of a search query:

     (nnselect-specs
      (nnselect-function . gnus-search-run-query)
      (nnselect-args
       (search-query-spec
        (query . "mark:flag"))
       (search-group-spec
        ("nnimap:home")
        ("nnimap:work"))))

   This creates a group including all flagged messages from all groups
on two IMAP servers, "home" and "work".

   And one last example.  Here is a function that runs a search query to
find all messages that have been received recently from certain groups:

     (defun my-recent-email (args)
       (let ((query-spec
              (list
               (cons 'query
                     (format-time-string "SENTSINCE %d-%b-%Y"
                                         (time-subtract nil
                                                        (days-to-time (car args)))))
               (cons 'criteria "")))
             (group-spec (cadr args)))
         (gnus-search-run-query (list (cons 'search-query-spec query-spec)
                                      (cons 'search-group-spec group-spec)))))

   Then the following ‘nnselect-specs’:

     (nnselect-specs
      (nnselect-function . my-recent-email)
      (nnselect-args . (7 (("nnimap:home") ("nnimap:work")))))

   will provide a group composed of all messages on the home and work
servers received in the last 7 days.

   Refreshing the selection of an nnselect group by running the
‘nnselect-function’ may take a long time to complete.  Consequently
nnselect groups are not refreshed by default when
‘gnus-group-get-new-news’ is invoked.  In those cases where running the
function is not too time-consuming, a non-‘nil’ group parameter of
‘nnselect-rescan’ will allow automatic refreshing.  A refresh can always
be invoked manually through ‘gnus-group-get-new-news-this-group’.

   By default a compressed version of the selection is stored (for
permanent groups) along with other group information in the newsrc.  For
cases where this might be undesirable (for example if the selection is a
very long list that doesn’t compress well) a non-‘nil’ group parameter
of ‘nnselect-always-regenerate’ will prevent the list from being stored,
and instead regenerate the list each time it is needed.  If more
flexibility is desired, ‘nnselect-get-artlist-override-function’ and
‘nnselect-store-artlist-override-function’ may be set to functions that
get and store the list of articles.

   Gnus includes engines for searching a variety of backends.  While the
details of each search engine vary, the result of a search is always a
vector of the sort used by the nnselect method, and the results of
queries are usually viewed using an nnselect group.  Indeed the standard
search function ‘gnus-group-read-ephemeral-search-group’ just creates an
ephemeral nnselect group with the appropriate search query as the
‘nnselect-specs’.


File: gnus.info,  Node: Combined Groups,  Prev: Selection Groups,  Up: Virtual Groups

7.7.2 Combined Groups
---------------------

An “nnvirtual group” is really nothing more than a collection of other
groups.

   For instance, if you are tired of reading many small groups, you can
put them all in one big group, and then grow tired of reading one big,
unwieldy group.  The joys of computing!

   You specify ‘nnvirtual’ as the method.  The address should be a
regexp to match component groups.

   All marks in the virtual group will stick to the articles in the
component groups.  So if you tick an article in a virtual group, the
article will also be ticked in the component group from whence it came.
(And vice versa—marks from the component groups will also be shown in
the virtual group.).  To create an empty virtual group, run ‘G V’
(‘gnus-group-make-empty-virtual’) in the group buffer and edit the
method regexp with ‘M-e’ (‘gnus-group-edit-group-method’)

   Here’s an example ‘nnvirtual’ method that collects all Andrea Dworkin
newsgroups into one, big, happy newsgroup:

     (nnvirtual "^alt\\.fan\\.andrea-dworkin$\\|^rec\\.dworkin.*")

   The component groups can be native or foreign; everything should work
smoothly, but if your computer explodes, it was probably my fault.

   Collecting the same group from several servers might actually be a
good idea if users have set the Distribution header to limit
distribution.  If you would like to read ‘soc.motss’ both from a server
in Japan and a server in Norway, you could use the following as the
group regexp:

     "^nntp\\+server\\.jp:soc\\.motss$\\|^nntp\\+server\\.no:soc\\.motss$"

   (Remember, though, that if you’re creating the group with ‘G m’, you
shouldn’t double the backslashes, and you should leave off the quote
characters at the beginning and the end of the string.)

   This should work kinda smoothly—all articles from both groups should
end up in this one, and there should be no duplicates.  Threading (and
the rest) will still work as usual, but there might be problems with the
sequence of articles.  Sorting on date might be an option here (*note
Selecting a Group::).

   One limitation, however—all groups included in a virtual group have
to be alive (i.e., subscribed or unsubscribed).  Killed or zombie groups
can’t be component groups for ‘nnvirtual’ groups.

   If the ‘nnvirtual-always-rescan’ variable is non-‘nil’ (which is the
default), ‘nnvirtual’ will always scan groups for unread articles when
entering a virtual group.  If this variable is ‘nil’ and you read
articles in a component group after the virtual group has been
activated, the read articles from the component group will show up when
you enter the virtual group.  You’ll also see this effect if you have
two virtual groups that have a component group in common.  If that’s the
case, you should set this variable to ‘t’.  Or you can just tap ‘M-g’ on
the virtual group every time before you enter it—it’ll have much the
same effect.

   ‘nnvirtual’ can have both mail and news groups as component groups.
When responding to articles in ‘nnvirtual’ groups, ‘nnvirtual’ has to
ask the back end of the component group the article comes from whether
it is a news or mail back end.  However, when you do a ‘^’, there is
typically no sure way for the component back end to know this, and in
that case ‘nnvirtual’ tells Gnus that the article came from a not-news
back end.  (Just to be on the safe side.)

   ‘C-c C-n’ in the message buffer will insert the ‘Newsgroups’ line
from the article you respond to in these cases.

   ‘nnvirtual’ groups do not inherit anything but articles and marks
from component groups—group parameters, for instance, are not inherited.


File: gnus.info,  Node: Email Based Diary,  Next: Gnus Unplugged,  Prev: Virtual Groups,  Up: Select Methods

# /. 7.8 Email Based Diary
=========================

This section describes a special mail back end called ‘nndiary’, and its
companion library ‘gnus-diary’.  It is “special” in the sense that it is
not meant to be one of the standard alternatives for reading mail with
Gnus.  See *note Choosing a Mail Back End:: for that.  Instead, it is
used to treat _some_ of your mails in a special way, namely, as event
reminders.

   Here is a typical scenario:

   • You’ve got a date with Andy Mc Dowell or Bruce Willis (select
     according to your sexual preference) in one month.  You don’t want
     to forget it.
   • So you send a “reminder” message (actually, a diary one) to
     yourself.
   • You forget all about it and keep on getting and reading new mail,
     as usual.
   • From time to time, as you type ‘g’ in the group buffer and as the
     date is getting closer, the message will pop up again to remind you
     of your appointment, just as if it were new and unread.
   • Read your “new” messages, this one included, and start dreaming
     again of the night you’re gonna have.
   • Once the date is over (you actually fell asleep just after dinner),
     the message will be automatically deleted if it is marked as
     expirable.

   The Gnus Diary back end has the ability to handle regular
appointments (that wouldn’t ever be deleted) as well as punctual ones,
operates as a real mail back end and is configurable in many ways.  All
of this is explained in the sections below.

* Menu:

* The NNDiary Back End::        Basic setup and usage.
* The Gnus Diary Library::      Utility toolkit on top of nndiary.


File: gnus.info,  Node: The NNDiary Back End,  Next: The Gnus Diary Library,  Up: Email Based Diary

7.8.1 The NNDiary Back End
--------------------------

‘nndiary’ is a back end very similar to ‘nnml’ (*note Mail Spool::).
Actually, it could appear as a mix of ‘nnml’ and ‘nndraft’.  If you know
‘nnml’, you’re already familiar with the message storing scheme of
‘nndiary’: one file per message, one directory per group.

   Before anything, there is one requirement to be able to run ‘nndiary’
properly: you _must_ use the group timestamp feature of Gnus.  This adds
a timestamp to each group’s parameters.  *note Group Timestamp:: to see
how it’s done.

* Menu:

* Diary Messages::              What makes a message valid for nndiary.
* Running NNDiary::             NNDiary has two modes of operation.
* Customizing NNDiary::         Bells and whistles.


File: gnus.info,  Node: Diary Messages,  Next: Running NNDiary,  Up: The NNDiary Back End

7.8.1.1 Diary Messages
......................

‘nndiary’ messages are just normal ones, except for the mandatory
presence of 7 special headers.  These headers are of the form
‘X-Diary-<something>’, ‘<something>’ being one of ‘Minute’, ‘Hour’,
‘Dom’, ‘Month’, ‘Year’, ‘Time-Zone’ and ‘Dow’.  ‘Dom’ means “Day of
Month”, and ‘Dow’ means “Day of Week”.  These headers actually behave
like crontab specifications and define the event date(s):

   • For all headers except the ‘Time-Zone’ one, a header value is
     either a star (meaning all possible values), or a list of fields
     (separated by a comma).
   • A field is either an integer, or a range.
   • A range is two integers separated by a dash.
   • Possible integer values are 0–59 for ‘Minute’, 0–23 for ‘Hour’,
     1–31 for ‘Dom’, 1–12 for ‘Month’, above 1971 for ‘Year’ and 0–6 for
     ‘Dow’ (0 meaning Sunday).
   • As a special case, a star in either ‘Dom’ or ‘Dow’ doesn’t mean
     “all possible values”, but “use only the other field”.  Note that
     if both are star’ed, the use of either one gives the same result.
   • The ‘Time-Zone’ header is special in that it can only have one
     value (‘GMT’, for instance).  A star doesn’t mean “all possible
     values” (because it makes no sense), but “the current local time
     zone”.  Most of the time, you’ll be using a star here.  However,
     for a list of available time zone values, see the variable
     ‘nndiary-headers’.

   As a concrete example, here are the diary headers to add to your
message for specifying “Each Monday and each 1st of month, at 12:00,
20:00, 21:00, 22:00, 23:00 and 24:00, from 1999 to 2010” (I’ll let you
find what to do then):

     X-Diary-Minute: 0
     X-Diary-Hour: 12, 20-24
     X-Diary-Dom: 1
     X-Diary-Month: *
     X-Diary-Year: 1999-2010
     X-Diary-Dow: 1
     X-Diary-Time-Zone: *


File: gnus.info,  Node: Running NNDiary,  Next: Customizing NNDiary,  Prev: Diary Messages,  Up: The NNDiary Back End

7.8.1.2 Running NNDiary
.......................

‘nndiary’ has two modes of operation: “traditional” (the default) and
“autonomous”.  In traditional mode, ‘nndiary’ does not get new mail by
itself.  You have to move (‘B m’) or copy (‘B c’) mails from your
primary mail back end to nndiary groups in order to handle them as diary
messages.  In autonomous mode, ‘nndiary’ retrieves its own mail and
handles it independently from your primary mail back end.

   One should note that Gnus is not inherently designed to allow several
“master” mail back ends at the same time.  However, this does make sense
with ‘nndiary’: you really want to send and receive diary messages to
your diary groups directly.  So, ‘nndiary’ supports being sort of a
“second primary mail back end” (to my knowledge, it is the only back end
offering this feature).  However, there is a limitation (which I hope to
fix some day): respooling doesn’t work in autonomous mode.

   In order to use ‘nndiary’ in autonomous mode, you have several things
to do:

   • Allow ‘nndiary’ to retrieve new mail by itself.  Put the following
     line in your ‘~/.gnus.el’ file:

          (setq nndiary-get-new-mail t)
   • You must arrange for diary messages (those containing ‘X-Diary-*’
     headers) to be split in a private folder _before_ Gnus treat them.
     Again, this is needed because Gnus cannot (yet ?)  properly handle
     multiple primary mail back ends.  Getting those messages from a
     separate source will compensate this misfeature to some extent.

     As an example, here’s my procmailrc entry to store diary files in
     ‘~/.nndiary’ (the default ‘nndiary’ mail source file):

          :0 HD :
          * ^X-Diary
          .nndiary

   Once this is done, you might want to customize the following two
options that affect the diary mail retrieval and splitting processes:

 -- Variable: nndiary-mail-sources
     This is the diary-specific replacement for the standard
     ‘mail-sources’ variable.  It obeys the same syntax, and defaults to
     ‘(file :path "~/.nndiary")’.

 -- Variable: nndiary-split-methods
     This is the diary-specific replacement for the standard
     ‘nnmail-split-methods’ variable.  It obeys the same syntax.

   Finally, you may add a permanent ‘nndiary’ virtual server (something
like ‘(nndiary "diary")’ should do) to your
‘gnus-secondary-select-methods’.

   Hopefully, almost everything (see the TODO section in ‘nndiary.el’)
will work as expected when you restart Gnus: in autonomous mode, typing
‘g’ and ‘M-g’ in the group buffer, will also get your new diary mails
and split them according to your diary-specific rules, ‘F’ will find
your new diary groups etc.


File: gnus.info,  Node: Customizing NNDiary,  Prev: Running NNDiary,  Up: The NNDiary Back End

7.8.1.3 Customizing NNDiary
...........................

Now that ‘nndiary’ is up and running, it’s time to customize it.  The
custom group is called ‘nndiary’ (no, really ?!).  You should browse it
to figure out which options you’d like to tweak.  The following two
variables are probably the only ones you will want to change:

 -- Variable: nndiary-reminders
     This is the list of times when you want to be reminded of your
     appointments (e.g., 3 weeks before, then 2 days before, then 1 hour
     before and that’s it).  Remember that “being reminded” means that
     the diary message will pop up as brand new and unread again when
     you get new mail.

 -- Variable: nndiary-week-starts-on-monday
     Rather self-explanatory.  Otherwise, Sunday is assumed (this is the
     default).


File: gnus.info,  Node: The Gnus Diary Library,  Prev: The NNDiary Back End,  Up: Email Based Diary

7.8.2 The Gnus Diary Library
----------------------------

Using ‘nndiary’ manually (I mean, writing the headers by hand and so on)
would be rather boring.  Fortunately, there is a library called
‘gnus-diary’ written on top of ‘nndiary’, that does many useful things
for you.

   In order to use it, add the following line to your ‘~/.gnus.el’ file:

     (require 'gnus-diary)

   Also, you shouldn’t use any ‘gnus-user-format-function-[d|D]’ (*note
Summary Buffer Lines::).  ‘gnus-diary’ provides both of these (sorry if
you used them before).

* Menu:

* Diary Summary Line Format::   A nicer summary buffer line format.
* Diary Articles Sorting::      A nicer way to sort messages.
* Diary Headers Generation::    Not doing it manually.
* Diary Group Parameters::      Not handling them manually.


File: gnus.info,  Node: Diary Summary Line Format,  Next: Diary Articles Sorting,  Up: The Gnus Diary Library

7.8.2.1 Diary Summary Line Format
.................................

Displaying diary messages in standard summary line format (usually
something like ‘From Joe: Subject’) is pretty useless.  Most of the
time, you’re the one who wrote the message, and you mostly want to see
the event’s date.

   ‘gnus-diary’ provides two supplemental user formats to be used in
summary line formats.  ‘D’ corresponds to a formatted time string for
the next occurrence of the event (e.g., “Sat, Sep 22 01, 12:00”), while
‘d’ corresponds to an approximate remaining time until the next
occurrence of the event (e.g., “in 6 months, 1 week”).

   For example, here’s how Joe’s birthday is displayed in my
‘nndiary+diary:birthdays’ summary buffer (note that the message is
expirable, but will never be deleted, as it specifies a periodic event):

        E  Sat, Sep 22 01, 12:00: Joe's birthday (in 6 months, 1 week)

   In order to get something like the above, you would normally add the
following line to your diary groups’parameters:

     (gnus-summary-line-format "%U%R%z %uD: %(%s%) (%ud)\n")

   However, ‘gnus-diary’ does it automatically (*note Diary Group
Parameters::).  You can however customize the provided summary line
format with the following user options:

 -- Variable: gnus-diary-summary-line-format
     Defines the summary line format used for diary groups (*note
     Summary Buffer Lines::).  ‘gnus-diary’ uses it to automatically
     update the diary groups’parameters.

 -- Variable: gnus-diary-time-format
     Defines the format to display dates in diary summary buffers.  This
     is used by the ‘D’ user format.  See the docstring for details.

 -- Variable: gnus-diary-delay-format-function
     Defines the format function to use for displaying delays (remaining
     times) in diary summary buffers.  This is used by the ‘d’ user
     format.  There are currently built-in functions for English and
     French; you can also define your own.  See the docstring for
     details.


File: gnus.info,  Node: Diary Articles Sorting,  Next: Diary Headers Generation,  Prev: Diary Summary Line Format,  Up: The Gnus Diary Library

7.8.2.2 Diary Articles Sorting
..............................

‘gnus-diary’ provides new sorting functions (*note Sorting the Summary
Buffer:: ) called ‘gnus-summary-sort-by-schedule’,
‘gnus-thread-sort-by-schedule’ and ‘gnus-article-sort-by-schedule’.
These functions let you organize your diary summary buffers from the
closest event to the farthest one.

   ‘gnus-diary’ automatically installs ‘gnus-summary-sort-by-schedule’
as a menu item in the summary buffer’s “sort” menu, and the two others
as the primary (hence default) sorting functions in the group parameters
(*note Diary Group Parameters::).


File: gnus.info,  Node: Diary Headers Generation,  Next: Diary Group Parameters,  Prev: Diary Articles Sorting,  Up: The Gnus Diary Library

7.8.2.3 Diary Headers Generation
................................

‘gnus-diary’ provides a function called ‘gnus-diary-check-message’ to
help you handle the ‘X-Diary-*’ headers.  This function ensures that the
current message contains all the required diary headers, and prompts you
for values or corrections if needed.

   This function is hooked into the ‘nndiary’ back end, so that moving
or copying an article to a diary group will trigger it automatically.
It is also bound to ‘C-c C-f d’ in ‘message-mode’ and
‘article-edit-mode’ in order to ease the process of converting a usual
mail to a diary one.

   This function takes a prefix argument which will force prompting of
all diary headers, regardless of their presence or validity.  That way,
you can very easily reschedule an already valid diary message, for
instance.


File: gnus.info,  Node: Diary Group Parameters,  Prev: Diary Headers Generation,  Up: The Gnus Diary Library

7.8.2.4 Diary Group Parameters
..............................

When you create a new diary group, or visit one, ‘gnus-diary’
automatically checks your group parameters and if needed, sets the
summary line format to the diary-specific value, installs the
diary-specific sorting functions, and also adds the different
‘X-Diary-*’ headers to the group’s posting-style.  It is then easier to
send a diary message, because if you use ‘C-u a’ or ‘C-u m’ on a diary
group to prepare a message, these headers will be inserted automatically
(although not filled with proper values yet).

   ‘nndiary’ is a _real_ mail back end.  You really send real diary
messages for real.  This means for instance that you can give
appointments to anybody (provided they use Gnus and ‘nndiary’) by
sending the diary message to them as well.


File: gnus.info,  Node: Gnus Unplugged,  Prev: Email Based Diary,  Up: Select Methods

# /. 7.9 Gnus Unplugged
======================

In olden times (ca.  February ’88), people used to run their newsreaders
on big machines with permanent connections to the net.  News transport
was dealt with by news servers, and all the newsreaders had to do was to
read news.  Believe it or not.

   Nowadays most people read news and mail at home, and use some sort of
modem to connect to the net.  To avoid running up huge phone bills, it
would be nice to have a way to slurp down all the news and mail, hang up
the phone, read for several hours, and then upload any responses you
have to make.  And then you repeat the procedure.

   Of course, you can use news servers for doing this as well.  I’ve
used ‘inn’ together with ‘slurp’, ‘pop’ and ‘sendmail’ for some years,
but doing that’s a bore.  Moving the news server functionality up to the
newsreader makes sense if you’re the only person reading news on a
machine.

   Setting up Gnus as an “offline” newsreader is quite simple.  In fact,
you don’t have to configure anything as the agent is now enabled by
default (*note gnus-agent: Agent Variables.).

   Of course, to use it as such, you have to learn a few new commands.

* Menu:

* Agent Basics::                How it all is supposed to work.
* Agent Categories::            How to tell the Gnus Agent what to download.
* Agent Commands::              New commands for all the buffers.
* Agent Visuals::               Ways that the agent may effect your summary buffer.
* Agent as Cache::              The Agent is a big cache too.
* Agent Expiry::                How to make old articles go away.
* Agent Regeneration::          How to recover from lost connections and other accidents.
* Agent and flags::             How the Agent maintains flags.
* Agent and IMAP::              How to use the Agent with IMAP.
* Outgoing Messages::           What happens when you post/mail something?
* Agent Variables::             Customizing is fun.
* Example Setup::               An example ‘~/.gnus.el’ file for offline people.
* Batching Agents::             How to fetch news from a ‘cron’ job.
* Agent Caveats::               What you think it’ll do and what it does.


File: gnus.info,  Node: Agent Basics,  Next: Agent Categories,  Up: Gnus Unplugged

7.9.1 Agent Basics
------------------

First, let’s get some terminology out of the way.

   The Gnus Agent is said to be “unplugged” when you have severed the
connection to the net (and notified the Agent that this is the case).
When the connection to the net is up again (and Gnus knows this), the
Agent is “plugged”.

   The “local” machine is the one you’re running on, and which isn’t
connected to the net continuously.

   “Downloading” means fetching things from the net to your local
machine.  “Uploading” is doing the opposite.

   You know that Gnus gives you all the opportunity you’d ever want for
shooting yourself in the foot.  Some people call it flexibility.  Gnus
is also customizable to a great extent, which means that the user has a
say on how Gnus behaves.  Other newsreaders might unconditionally shoot
you in your foot, but with Gnus, you have a choice!

   Gnus is never really in plugged or unplugged state.  Rather, it
applies that state to each server individually.  This means that some
servers can be plugged while others can be unplugged.  Additionally,
some servers can be ignored by the Agent altogether (which means that
they’re kinda like plugged always).

   So when you unplug the Agent and then wonder why is Gnus opening a
connection to the Net, the next step to do is to look whether all
servers are agentized.  If there is an unagentized server, you found the
culprit.

   Another thing is the “offline” state.  Sometimes, servers aren’t
reachable.  When Gnus notices this, it asks you whether you want the
server to be switched to offline state.  If you say yes, then the server
will behave somewhat as if it was unplugged, except that Gnus will ask
you whether you want to switch it back online again.

   Let’s take a typical Gnus session using the Agent.

   • You start Gnus with ‘gnus-unplugged’.  This brings up the Gnus
     Agent in a disconnected state.  You can read all the news that you
     have already fetched while in this mode.

   • You then decide to see whether any new news has arrived.  You
     connect your machine to the net (using PPP or whatever), and then
     hit ‘J j’ to make Gnus become “plugged” and use ‘g’ to check for
     new mail as usual.  To check for new mail in unplugged mode (*note
     Mail Source Specifiers::).

   • You can then read the new news immediately, or you can download the
     news onto your local machine.  If you want to do the latter, you
     press ‘g’ to check if there are any new news and then ‘J s’ to
     fetch all the eligible articles in all the groups.  (To let Gnus
     know which articles you want to download, *note Agent
     Categories::).

   • After fetching the articles, you press ‘J j’ to make Gnus become
     unplugged again, and you shut down the PPP thing (or whatever).
     And then you read the news offline.

   • And then you go to step 2.

   Here are some things you should do the first time (or so) that you
use the Agent.

   • Decide which servers should be covered by the Agent.  If you have a
     mail back end, it would probably be nonsensical to have it covered
     by the Agent.  Go to the server buffer (‘^’ in the group buffer)
     and press ‘J a’ on the server (or servers) that you wish to have
     covered by the Agent (*note Server Agent Commands::), or ‘J r’ on
     automatically added servers you do not wish to have covered by the
     Agent.  By default, no servers are agentized.

   • Decide on download policy.  It’s fairly simple once you decide
     whether you are going to use agent categories, topic parameters,
     and/or group parameters to implement your policy.  If you’re new to
     gnus, it is probably best to start with a category, *Note Agent
     Categories::.

     Both topic parameters (*note Topic Parameters::) and agent
     categories (*note Agent Categories::) provide for setting a policy
     that applies to multiple groups.  Which you use is entirely up to
     you.  Topic parameters do override categories so, if you mix the
     two, you’ll have to take that into account.  If you have a few
     groups that deviate from your policy, you can use group parameters
     (*note Group Parameters::) to configure them.

   • Uhm... that’s it.


File: gnus.info,  Node: Agent Categories,  Next: Agent Commands,  Prev: Agent Basics,  Up: Gnus Unplugged

7.9.2 Agent Categories
----------------------

One of the main reasons to integrate the news transport layer into the
newsreader is to allow greater control over what articles to download.
There’s not much point in downloading huge amounts of articles, just to
find out that you’re not interested in reading any of them.  It’s better
to be somewhat more conservative in choosing what to download, and then
mark the articles for downloading manually if it should turn out that
you’re interested in the articles anyway.

   One of the more effective methods for controlling what is to be
downloaded is to create a “category” and then assign some (or all)
groups to this category.  Groups that do not belong in any other
category belong to the ‘default’ category.  Gnus has its own buffer for
creating and managing categories.

   If you prefer, you can also use group parameters (*note Group
Parameters::) and topic parameters (*note Topic Parameters::) for an
alternative approach to controlling the agent.  The only real difference
is that categories are specific to the agent (so there is less to learn)
while group and topic parameters include the kitchen sink.

   Since you can set agent parameters in several different places we
have a rule to decide which source to believe.  This rule specifies that
the parameter sources are checked in the following order: group
parameters, topic parameters, agent category, and finally customizable
variables.  So you can mix all of these sources to produce a wide range
of behavior, just don’t blame me if you don’t remember where you put
your settings.

* Menu:

* Category Syntax::             What a category looks like.
* Category Buffer::             A buffer for maintaining categories.
* Category Variables::          Customize’r’Us.


File: gnus.info,  Node: Category Syntax,  Next: Category Buffer,  Up: Agent Categories

7.9.2.1 Category Syntax
.......................

A category consists of a name, the list of groups belonging to the
category, and a number of optional parameters that override the
customizable variables.  The complete list of agent parameters are
listed below.

‘agent-groups’
     The list of groups that are in this category.

‘agent-predicate’
     A predicate which (generally) gives a rough outline of which
     articles are eligible for downloading; and

‘agent-score’
     a score rule which (generally) gives you a finer granularity when
     deciding what articles to download.  (Note that this “download
     score” is not necessarily related to normal scores.)

‘agent-enable-expiration’
     a boolean indicating whether the agent should expire old articles
     in this group.  Most groups should be expired to conserve disk
     space.  In fact, its probably safe to say that the gnus.* hierarchy
     contains the only groups that should not be expired.

‘agent-days-until-old’
     an integer indicating the number of days that the agent should wait
     before deciding that a read article is safe to expire.

‘agent-low-score’
     an integer that overrides the value of ‘gnus-agent-low-score’.

‘agent-high-score’
     an integer that overrides the value of ‘gnus-agent-high-score’.

‘agent-short-article’
     an integer that overrides the value of ‘gnus-agent-short-article’.

‘agent-long-article’
     an integer that overrides the value of ‘gnus-agent-long-article’.

‘agent-enable-undownloaded-faces’
     a symbol indicating whether the summary buffer should display
     undownloaded articles using the ‘gnus-summary-*-undownloaded-face’
     faces.  Any symbol other than ‘nil’ will enable the use of
     undownloaded faces.

   The name of a category can not be changed once the category has been
created.

   Each category maintains a list of groups that are exclusive members
of that category.  The exclusivity rule is automatically enforced, add a
group to a new category and it is automatically removed from its old
category.

   A predicate in its simplest form can be a single predicate such as
‘true’ or ‘false’.  These two will download every available article or
nothing respectively.  In the case of these two special predicates an
additional score rule is superfluous.

   Predicates of ‘high’ or ‘low’ download articles in respect of their
scores in relationship to ‘gnus-agent-high-score’ and
‘gnus-agent-low-score’ as described below.

   To gain even finer control of what is to be regarded eligible for
download a predicate can consist of a number of predicates with logical
operators sprinkled in between.

   Perhaps some examples are in order.

   Here’s a simple predicate.  (It’s the default predicate, in fact,
used for all groups that don’t belong to any other category.)

     short

   Quite simple, eh?  This predicate is true if and only if the article
is short (for some value of “short”).

   Here’s a more complex predicate:

     (or high
         (and
          (not low)
          (not long)))

   This means that an article should be downloaded if it has a high
score, or if the score is not low and the article is not long.  You get
the drift.

   The available logical operators are ‘or’, ‘and’ and ‘not’.  (If you
prefer, you can use the more “C”-ish operators ‘|’, ‘&’ and ‘!’
instead.)

   The following predicates are pre-defined, but if none of these fit
what you want to do, you can write your own.

   When evaluating each of these predicates, the named constant will be
bound to the value determined by calling ‘gnus-agent-find-parameter’ on
the appropriate parameter.  For example, gnus-agent-short-article will
be bound to ‘(gnus-agent-find-parameter group 'agent-short-article)’.
This means that you can specify a predicate in your category then tune
that predicate to individual groups.

‘short’
     True if the article is shorter than ‘gnus-agent-short-article’
     lines; default 100.

‘long’
     True if the article is longer than ‘gnus-agent-long-article’ lines;
     default 200.

‘low’
     True if the article has a download score less than
     ‘gnus-agent-low-score’; default 0.

‘high’
     True if the article has a download score greater than
     ‘gnus-agent-high-score’; default 0.

‘spam’
     True if the Gnus Agent guesses that the article is spam.  The
     heuristics may change over time, but at present it just computes a
     checksum and sees whether articles match.

‘true’
     Always true.

‘false’
     Always false.

   If you want to create your own predicate function, here’s what you
have to know: The functions are called with no parameters, but the
‘gnus-headers’ and ‘gnus-score’ dynamic variables are bound to useful
values.

   For example, you could decide that you don’t want to download
articles that were posted more than a certain number of days ago (e.g.,
posted more than ‘gnus-agent-expire-days’ ago) you might write a
function something along the lines of the following:

     (defun my-article-old-p ()
       "Say whether an article is old."
       (< (time-to-days (date-to-time (mail-header-date gnus-headers)))
          (- (time-to-days nil) gnus-agent-expire-days)))

   with the predicate then defined as:

     (not my-article-old-p)

   or you could append your predicate to the predefined
‘gnus-category-predicate-alist’ in your ‘~/.gnus.el’ or wherever.

     (require 'gnus-agent)
     (setq  gnus-category-predicate-alist
       (append gnus-category-predicate-alist
              '((old . my-article-old-p))))

   and simply specify your predicate as:

     (not old)

   If/when using something like the above, be aware that there are many
misconfigured systems/mailers out there and so an article’s date is not
always a reliable indication of when it was posted.  Hell, some people
just don’t give a damn.

   The above predicates apply to _all_ the groups which belong to the
category.  However, if you wish to have a specific predicate for an
individual group within a category, or you’re just too lazy to set up a
new category, you can enter a group’s individual predicate in its group
parameters like so:

     (agent-predicate . short)

   This is the group/topic parameter equivalent of the agent category
default.  Note that when specifying a single word predicate like this,
the ‘agent-predicate’ specification must be in dotted pair notation.

   The equivalent of the longer example from above would be:

     (agent-predicate or high (and (not low) (not long)))

   The outer parenthesis required in the category specification are not
entered here as, not being in dotted pair notation, the value of the
predicate is assumed to be a list.

   Now, the syntax of the download score is the same as the syntax of
normal score files, except that all elements that require actually
seeing the article itself are verboten.  This means that only the
following headers can be scored on: ‘Subject’, ‘From’, ‘Date’,
‘Message-ID’, ‘References’, ‘Chars’, ‘Lines’, and ‘Xref’.

   As with predicates, the specification of the ‘download score rule’ to
use in respect of a group can be in either the category definition if
it’s to be applicable to all groups in therein, or a group’s parameters
if it’s to be specific to that group.

   In both of these places the ‘download score rule’ can take one of
three forms:

  1. Score rule

     This has the same syntax as a normal Gnus score file except only a
     subset of scoring keywords are available as mentioned above.

     example:

        • Category specification

               (("from"
                      ("Lars Ingebrigtsen" 1000000 nil s))
               ("lines"
                      (500 -100 nil <)))

        • Group/Topic Parameter specification

               (agent-score ("from"
                                  ("Lars Ingebrigtsen" 1000000 nil s))
                            ("lines"
                                  (500 -100 nil <)))

          Again, note the omission of the outermost parenthesis here.

  2. Agent score file

     These score files must _only_ contain the permitted scoring
     keywords stated above.

     example:

        • Category specification

               ("~/News/agent.SCORE")

          or perhaps

               ("~/News/agent.SCORE" "~/News/agent.group.SCORE")

        • Group Parameter specification

               (agent-score "~/News/agent.SCORE")

          Additional score files can be specified as above.  Need I say
          anything about parenthesis?

  3. Use ‘normal’ score files

     If you don’t want to maintain two sets of scoring rules for a
     group, and your desired ‘downloading’ criteria for a group are the
     same as your ‘reading’ criteria then you can tell the agent to
     refer to your ‘normal’ score files when deciding what to download.

     These directives in either the category definition or a group’s
     parameters will cause the agent to read in all the applicable score
     files for a group, _filtering out_ those sections that do not
     relate to one of the permitted subset of scoring keywords.

        • Category Specification

               file

        • Group Parameter specification

               (agent-score . file)


File: gnus.info,  Node: Category Buffer,  Next: Category Variables,  Prev: Category Syntax,  Up: Agent Categories

7.9.2.2 Category Buffer
.......................

You’d normally do all category maintenance from the category buffer.
When you enter it for the first time (with the ‘J c’ command from the
group buffer), you’ll only see the ‘default’ category.

   The following commands are available in this buffer:

‘q’
     Return to the group buffer (‘gnus-category-exit’).

‘e’
     Use a customization buffer to set all of the selected category’s
     parameters at one time (‘gnus-category-customize-category’).

‘k’
     Kill the current category (‘gnus-category-kill’).

‘c’
     Copy the current category (‘gnus-category-copy’).

‘a’
     Add a new category (‘gnus-category-add’).

‘p’
     Edit the predicate of the current category
     (‘gnus-category-edit-predicate’).

‘g’
     Edit the list of groups belonging to the current category
     (‘gnus-category-edit-groups’).

‘s’
     Edit the download score rule of the current category
     (‘gnus-category-edit-score’).

‘l’
     List all the categories (‘gnus-category-list’).


File: gnus.info,  Node: Category Variables,  Prev: Category Buffer,  Up: Agent Categories

7.9.2.3 Category Variables
..........................

‘gnus-category-mode-hook’
     Hook run in category buffers.

‘gnus-category-line-format’
     Format of the lines in the category buffer (*note Formatting
     Variables::).  Valid elements are:

     ‘c’
          The name of the category.

     ‘g’
          The number of groups in the category.

‘gnus-category-mode-line-format’
     Format of the category mode line (*note Mode Line Formatting::).

‘gnus-agent-short-article’
     Articles that have fewer lines than this are short.  Default 100.

‘gnus-agent-long-article’
     Articles that have more lines than this are long.  Default 200.

‘gnus-agent-low-score’
     Articles that have a score lower than this have a low score.
     Default 0.

‘gnus-agent-high-score’
     Articles that have a score higher than this have a high score.
     Default 0.

‘gnus-agent-expire-days’
     The number of days that a ‘read’ article must stay in the agent’s
     local disk before becoming eligible for expiration (While the name
     is the same, this doesn’t mean expiring the article on the server.
     It just means deleting the local copy of the article).  What is
     also important to understand is that the counter starts with the
     time the article was written to the local disk and not the time the
     article was read.  Default 7.

‘gnus-agent-enable-expiration’
     Determines whether articles in a group are, by default, expired or
     retained indefinitely.  The default is ‘ENABLE’ which means that
     you’ll have to disable expiration when desired.  On the other hand,
     you could set this to ‘DISABLE’.  In that case, you would then have
     to enable expiration in selected groups.


File: gnus.info,  Node: Agent Commands,  Next: Agent Visuals,  Prev: Agent Categories,  Up: Gnus Unplugged

7.9.3 Agent Commands
--------------------

All the Gnus Agent commands are on the ‘J’ submap.  The ‘J j’
(‘gnus-agent-toggle-plugged’) command works in all modes, and toggles
the plugged/unplugged state of the Gnus Agent.

* Menu:

* Group Agent Commands::        Configure groups and fetch their contents.
* Summary Agent Commands::      Manually select then fetch specific articles.
* Server Agent Commands::       Select the servers that are supported by the agent.


File: gnus.info,  Node: Group Agent Commands,  Next: Summary Agent Commands,  Up: Agent Commands

7.9.3.1 Group Agent Commands
............................

‘J u’
     Fetch all eligible articles in the current group
     (‘gnus-agent-fetch-groups’).

‘J c’
     Enter the Agent category buffer (‘gnus-enter-category-buffer’).

‘J s’
     Fetch all eligible articles in all groups
     (‘gnus-agent-fetch-session’).

‘J S’
     Send all sendable messages in the queue group
     (‘gnus-group-send-queue’).  *Note Drafts::.

‘J a’
     Add the current group to an Agent category
     (‘gnus-agent-add-group’).  This command understands the
     process/prefix convention (*note Process/Prefix::).

‘J r’
     Remove the current group from its category, if any
     (‘gnus-agent-remove-group’).  This command understands the
     process/prefix convention (*note Process/Prefix::).

‘J Y’
     Synchronize flags changed while unplugged with remote server, if
     any.


File: gnus.info,  Node: Summary Agent Commands,  Next: Server Agent Commands,  Prev: Group Agent Commands,  Up: Agent Commands

7.9.3.2 Summary Agent Commands
..............................

‘J #’
     Mark the article for downloading (‘gnus-agent-mark-article’).

‘J M-#’
     Remove the downloading mark from the article
     (‘gnus-agent-unmark-article’).

‘@’
     Toggle whether to download the article (‘gnus-agent-toggle-mark’).
     The download mark is ‘%’ by default.

‘J c’
     Mark all articles as read (‘gnus-agent-catchup’) that are neither
     cached, downloaded, nor downloadable.

‘J S’
     Download all eligible (*note Agent Categories::) articles in this
     group.  (‘gnus-agent-fetch-group’).

‘J s’
     Download all processable articles in this group.
     (‘gnus-agent-summary-fetch-series’).

‘J u’
     Download all downloadable articles in the current group
     (‘gnus-agent-summary-fetch-group’).


File: gnus.info,  Node: Server Agent Commands,  Prev: Summary Agent Commands,  Up: Agent Commands

7.9.3.3 Server Agent Commands
.............................

‘J a’
     Add the current server to the list of servers covered by the Gnus
     Agent (‘gnus-agent-add-server’).

‘J r’
     Remove the current server from the list of servers covered by the
     Gnus Agent (‘gnus-agent-remove-server’).


File: gnus.info,  Node: Agent Visuals,  Next: Agent as Cache,  Prev: Agent Commands,  Up: Gnus Unplugged

7.9.4 Agent Visuals
-------------------

If you open a summary while unplugged and, Gnus knows from the group’s
active range that there are more articles than the headers currently
stored in the Agent, you may see some articles whose subject looks
something like ‘[Undownloaded article #####]’.  These are placeholders
for the missing headers.  Aside from setting a mark, there is not much
that can be done with one of these placeholders.  When Gnus finally gets
a chance to fetch the group’s headers, the placeholders will
automatically be replaced by the actual headers.  You can configure the
summary buffer’s maneuvering to skip over the placeholders if you care
(See ‘gnus-auto-goto-ignores’).

   While it may be obvious to all, the only headers and articles
available while unplugged are those headers and articles that were
fetched into the Agent while previously plugged.  To put it another way,
“If you forget to fetch something while plugged, you might have a less
than satisfying unplugged session”.  For this reason, the Agent adds two
visual effects to your summary buffer.  These effects display the
download status of each article so that you always know which articles
will be available when unplugged.

   The first visual effect is the ‘%O’ spec.  If you customize
‘gnus-summary-line-format’ to include this specifier, you will add a
single character field that indicates an article’s download status.
Articles that have been fetched into either the Agent or the Cache, will
display ‘gnus-downloaded-mark’ (defaults to ‘+’).  All other articles
will display ‘gnus-undownloaded-mark’ (defaults to ‘-’).  If you open a
group that has not been agentized, a space (‘ ’) will be displayed.

   The second visual effect are the undownloaded faces.  The faces,
there are three indicating the article’s score (low, normal, high), seem
to result in a love/hate response from many Gnus users.  The problem is
that the face selection is controlled by a list of condition tests and
face names (See ‘gnus-summary-highlight’).  Each condition is tested in
the order in which it appears in the list so early conditions have
precedence over later conditions.  All of this means that, if you tick
an undownloaded article, the article will continue to be displayed in
the undownloaded face rather than the ticked face.

   If you use the Agent as a cache (to avoid downloading the same
article each time you visit it or to minimize your connection time), the
undownloaded face will probably seem like a good idea.  The reason being
that you do all of our work (marking, reading, deleting) with downloaded
articles so the normal faces always appear.  For those users using the
agent to improve online performance by caching the NOV database (most
users since 5.10.2), the undownloaded faces may appear to be an
absolutely horrible idea.  The issue being that, since none of their
articles have been fetched into the Agent, all of the normal faces will
be obscured by the undownloaded faces.

   If you would like to use the undownloaded faces, you must enable the
undownloaded faces by setting the ‘agent-enable-undownloaded-faces’
group parameter to ‘t’.  This parameter, like all other agent
parameters, may be set on an Agent Category (*note Agent Categories::),
a Group Topic (*note Topic Parameters::), or an individual group (*note
Group Parameters::).

   The one problem common to all users using the agent is how quickly it
can consume disk space.  If you using the agent on many groups, it is
even more difficult to effectively recover disk space.  One solution is
the ‘%F’ format available in ‘gnus-group-line-format’.  This format will
display the actual disk space used by articles fetched into both the
agent and cache.  By knowing which groups use the most space, users know
where to focus their efforts when “agent expiring” articles.


File: gnus.info,  Node: Agent as Cache,  Next: Agent Expiry,  Prev: Agent Visuals,  Up: Gnus Unplugged

7.9.5 Agent as Cache
--------------------

When Gnus is plugged, it is not efficient to download headers or
articles from the server again, if they are already stored in the Agent.
So, Gnus normally only downloads headers once, and stores them in the
Agent.  These headers are later used when generating the summary buffer,
regardless of whether you are plugged or unplugged.  Articles are not
cached in the Agent by default though (that would potentially consume
lots of disk space), but if you have already downloaded an article into
the Agent, Gnus will not download the article from the server again but
use the locally stored copy instead.

   If you so desire, you can configure the agent (see ‘gnus-agent-cache’
*note Agent Variables::) to always download headers and articles while
plugged.  Gnus will almost certainly be slower, but it will be kept
synchronized with the server.  That last point probably won’t make any
sense if you are using an nntp or nnimap back end.


File: gnus.info,  Node: Agent Expiry,  Next: Agent Regeneration,  Prev: Agent as Cache,  Up: Gnus Unplugged

7.9.6 Agent Expiry
------------------

The Agent back end, ‘nnagent’, doesn’t handle expiry.  Well, at least it
doesn’t handle it like other back ends.  Instead, there are special
‘gnus-agent-expire’ and ‘gnus-agent-expire-group’ commands that will
expire all read articles that are older than ‘gnus-agent-expire-days’
days.  They can be run whenever you feel that you’re running out of
space.  Neither are particularly fast or efficient, and it’s not a
particularly good idea to interrupt them (with ‘C-g’ or anything else)
once you’ve started one of them.

   Note that other functions might run ‘gnus-agent-expire’ for you to
keep the agent synchronized with the group.

   The agent parameter ‘agent-enable-expiration’ may be used to prevent
expiration in selected groups.

   If ‘gnus-agent-expire-all’ is non-‘nil’, the agent expiration
commands will expire all articles—unread, read, ticked and dormant.  If
‘nil’ (which is the default), only read articles are eligible for
expiry, and unread, ticked and dormant articles will be kept
indefinitely.

   The last (i.e., newest) article in a group will normally not be
expired (due to internal book-keeping reasons).

   If you find that some articles eligible for expiry are never expired,
perhaps some Gnus Agent files are corrupted.  There’s are special
commands, ‘gnus-agent-regenerate’ and ‘gnus-agent-regenerate-group’, to
fix possible problems.


File: gnus.info,  Node: Agent Regeneration,  Next: Agent and flags,  Prev: Agent Expiry,  Up: Gnus Unplugged

7.9.7 Agent Regeneration
------------------------

The local data structures used by ‘nnagent’ may become corrupted due to
certain exceptional conditions.  When this happens, ‘nnagent’
functionality may degrade or even fail.  The solution to this problem is
to repair the local data structures by removing all internal
inconsistencies.

   For example, if your connection to your server is lost while
downloaded articles into the agent, the local data structures will not
know about articles successfully downloaded prior to the connection
failure.  Running ‘gnus-agent-regenerate’ or
‘gnus-agent-regenerate-group’ will update the data structures such that
you don’t need to download these articles a second time.

   The command ‘gnus-agent-regenerate’ will perform
‘gnus-agent-regenerate-group’ on every agentized group.  While you can
run ‘gnus-agent-regenerate’ in any buffer, it is strongly recommended
that you first close all summary buffers.

   The command ‘gnus-agent-regenerate-group’ uses the local copies of
individual articles to repair the local NOV(header) database.  It then
updates the internal data structures that document which articles are
stored locally.  An optional argument will mark articles in the agent as
unread.


File: gnus.info,  Node: Agent and flags,  Next: Agent and IMAP,  Prev: Agent Regeneration,  Up: Gnus Unplugged

7.9.8 Agent and flags
---------------------

The Agent works with any Gnus back end including those, such as nnimap,
that store flags (read, ticked, etc.) on the server.  Sadly, the Agent
does not actually know which backends keep their flags in the backend
server rather than in ‘.newsrc’.  This means that the Agent, while
unplugged or disconnected, will always record all changes to the flags
in its own files.

   When you plug back in, Gnus will then check to see if you have any
changed any flags and ask if you wish to synchronize these with the
server.  This behavior is customizable by
‘gnus-agent-synchronize-flags’.

   If ‘gnus-agent-synchronize-flags’ is ‘nil’, the Agent will never
automatically synchronize flags.  If it is ‘ask’, which is the default,
the Agent will check if you made any changes and if so ask if you wish
to synchronize these when you re-connect.  If it has any other value,
all flags will be synchronized automatically.

   If you do not wish to synchronize flags automatically when you
re-connect, you can do it manually with the
‘gnus-agent-synchronize-flags’ command that is bound to ‘J Y’ in the
group buffer.

   Technical note: the synchronization algorithm does not work by
“pushing” all local flags to the server, but rather by incrementally
updated the server view of flags by changing only those flags that were
changed by the user.  Thus, if you set one flag on an article, quit the
group then re-select the group and remove the flag; the flag will be set
and removed from the server when you “synchronize”.  The queued flag
operations can be found in the per-server ‘flags’ file in the Agent
directory.  It’s emptied when you synchronize flags.


File: gnus.info,  Node: Agent and IMAP,  Next: Outgoing Messages,  Prev: Agent and flags,  Up: Gnus Unplugged

7.9.9 Agent and IMAP
--------------------

The Agent works with any Gnus back end, including nnimap.  However,
since there are some conceptual differences between NNTP and IMAP, this
section (should) provide you with some information to make Gnus Agent
work smoother as a IMAP Disconnected Mode client.

   Some things are currently not implemented in the Agent that you’d
might expect from a disconnected IMAP client, including:

   • Copying/moving articles into nnimap groups when unplugged.

   • Creating/deleting nnimap groups when unplugged.


File: gnus.info,  Node: Outgoing Messages,  Next: Agent Variables,  Prev: Agent and IMAP,  Up: Gnus Unplugged

7.9.10 Outgoing Messages
------------------------

By default, when Gnus is unplugged, all outgoing messages (both mail and
news) are stored in the draft group “queue” (*note Drafts::).  You can
view them there after posting, and edit them at will.

   You can control the circumstances under which outgoing mail is queued
(see ‘gnus-agent-queue-mail’, *note Agent Variables::).  Outgoing news
is always queued when Gnus is unplugged, and never otherwise.

   You can send the messages either from the draft group with the
special commands available there, or you can use the ‘J S’ command in
the group buffer to send all the sendable messages in the draft group.
Posting news will only work when Gnus is plugged, but you can send mail
at any time.

   If sending mail while unplugged does not work for you and you worry
about hitting ‘J S’ by accident when unplugged, you can have Gnus ask
you to confirm your action (see ‘gnus-agent-prompt-send-queue’, *note
Agent Variables::).


File: gnus.info,  Node: Agent Variables,  Next: Example Setup,  Prev: Outgoing Messages,  Up: Gnus Unplugged

7.9.11 Agent Variables
----------------------

‘gnus-agent’
     Is the agent enabled?  The default is ‘t’.  When first enabled, the
     agent will use ‘gnus-agent-auto-agentize-methods’ to automatically
     mark some back ends as agentized.  You may change which back ends
     are agentized using the agent commands in the server buffer.

     To enter the server buffer, use the ‘^’
     (‘gnus-group-enter-server-mode’) command in the group buffer.

‘gnus-agent-directory’
     Where the Gnus Agent will store its files.  The default is
     ‘~/News/agent/’.

‘gnus-agent-handle-level’
     Groups on levels (*note Group Levels::) higher than this variable
     will be ignored by the Agent.  The default is
     ‘gnus-level-subscribed’, which means that only subscribed group
     will be considered by the Agent by default.

‘gnus-agent-plugged-hook’
     Hook run when connecting to the network.

‘gnus-agent-unplugged-hook’
     Hook run when disconnecting from the network.

‘gnus-agent-fetched-hook’
     Hook run when finished fetching articles.

‘gnus-agent-cache’
     Variable to control whether use the locally stored NOV and articles
     when plugged, e.g., essentially using the Agent as a cache.  The
     default is non-‘nil’, which means to use the Agent as a cache.

‘gnus-agent-eagerly-store-articles’
     If non-‘nil’ (which is the default), store all articles read in
     agentized groups in the Agent cache.

‘gnus-agent-go-online’
     If ‘gnus-agent-go-online’ is ‘nil’, the Agent will never
     automatically switch offline servers into online status.  If it is
     ‘ask’, the default, the Agent will ask if you wish to switch
     offline servers into online status when you re-connect.  If it has
     any other value, all offline servers will be automatically switched
     into online status.

‘gnus-agent-mark-unread-after-downloaded’
     If ‘gnus-agent-mark-unread-after-downloaded’ is non-‘nil’, mark
     articles as unread after downloading.  This is usually a safe thing
     to do as the newly downloaded article has obviously not been read.
     The default is ‘t’.

‘gnus-agent-synchronize-flags’
     If ‘gnus-agent-synchronize-flags’ is ‘nil’, the Agent will never
     automatically synchronize flags.  If it is ‘ask’, which is the
     default, the Agent will check if you made any changes and if so ask
     if you wish to synchronize these when you re-connect.  If it has
     any other value, all flags will be synchronized automatically.

‘gnus-agent-consider-all-articles’
     If ‘gnus-agent-consider-all-articles’ is non-‘nil’, the agent will
     let the agent predicate decide whether articles need to be
     downloaded or not, for all articles.  When ‘nil’, the default, the
     agent will only let the predicate decide whether unread articles
     are downloaded or not.  If you enable this, you may also want to
     look into the agent expiry settings (*note Category Variables::),
     so that the agent doesn’t download articles which the agent will
     later expire, over and over again.

‘gnus-agent-max-fetch-size’
     The agent fetches articles into a temporary buffer prior to parsing
     them into individual files.  To avoid exceeding the max.  buffer
     size, the agent alternates between fetching and parsing until all
     articles have been fetched.  ‘gnus-agent-max-fetch-size’ provides a
     size limit to control how often the cycling occurs.  A large value
     improves performance.  A small value minimizes the time lost should
     the connection be lost while fetching (You may need to run
     ‘gnus-agent-regenerate-group’ to update the group’s state.
     However, all articles parsed prior to losing the connection will be
     available while unplugged).  The default is 10M so it is unusual to
     see any cycling.

‘gnus-server-unopen-status’
     Perhaps not an Agent variable, but closely related to the Agent,
     this variable says what will happen if Gnus cannot open a server.
     If the Agent is enabled, the default, ‘nil’, makes Gnus ask the
     user whether to deny the server or whether to unplug the agent.  If
     the Agent is disabled, Gnus always simply deny the server.  Other
     choices for this variable include ‘denied’ and ‘offline’ the latter
     is only valid if the Agent is used.

‘gnus-auto-goto-ignores’
     Another variable that isn’t an Agent variable, yet so closely
     related that most will look for it here, this variable tells the
     summary buffer how to maneuver around undownloaded (only headers
     stored in the agent) and unfetched (neither article nor headers
     stored) articles.

     The valid values are ‘nil’ (maneuver to any article),
     ‘undownloaded’ (maneuvering while unplugged ignores articles that
     have not been fetched), ‘always-undownloaded’ (maneuvering always
     ignores articles that have not been fetched), ‘unfetched’
     (maneuvering ignores articles whose headers have not been fetched).

‘gnus-agent-queue-mail’
     When ‘gnus-agent-queue-mail’ is ‘always’, Gnus will always queue
     mail rather than sending it straight away.  When ‘t’, Gnus will
     queue mail when unplugged only.  When ‘nil’, never queue mail.  The
     default is ‘t’.

‘gnus-agent-prompt-send-queue’
     When ‘gnus-agent-prompt-send-queue’ is non-‘nil’ Gnus will prompt
     you to confirm that you really wish to proceed if you hit ‘J S’
     while unplugged.  The default is ‘nil’.

‘gnus-agent-auto-agentize-methods’
     If you have never used the Agent before (or more technically, if
     ‘~/News/agent/lib/servers’ does not exist), Gnus will automatically
     agentize a few servers for you.  This variable control which back
     ends should be auto-agentized.  It is typically only useful to
     agentize remote back ends.  The auto-agentizing has the same effect
     as running ‘J a’ on the servers (*note Server Agent Commands::).
     If the file exist, you must manage the servers manually by adding
     or removing them, this variable is only applicable the first time
     you start Gnus.  The default is ‘nil’.


File: gnus.info,  Node: Example Setup,  Next: Batching Agents,  Prev: Agent Variables,  Up: Gnus Unplugged

7.9.12 Example Setup
--------------------

If you don’t want to read this manual, and you have a fairly standard
setup, you may be able to use something like the following as your
‘~/.gnus.el’ file to get started.

     ;; Define how Gnus is to fetch news.  We do this over NNTP
     ;; from your ISP’s server.
     (setq gnus-select-method '(nntp "news.your-isp.com"))

     ;; Define how Gnus is to read your mail.  We read mail from
     ;; your ISP’s POP server.
     (setq mail-sources '((pop :server "pop.your-isp.com")))

     ;; Say how Gnus is to store the mail.  We use nnml groups.
     (setq gnus-secondary-select-methods '((nnml "")))

     ;; Make Gnus into an offline newsreader.
     ;; (gnus-agentize) ; The obsolete setting.
     ;; (setq gnus-agent t) ; Now the default.

   That should be it, basically.  Put that in your ‘~/.gnus.el’ file,
edit to suit your needs, start up PPP (or whatever), and type ‘M-x
gnus’.

   If this is the first time you’ve run Gnus, you will be subscribed
automatically to a few default newsgroups.  You’ll probably want to
subscribe to more groups, and to do that, you have to query the NNTP
server for a complete list of groups with the ‘A A’ command.  This
usually takes quite a while, but you only have to do it once.

   After reading and parsing a while, you’ll be presented with a list of
groups.  Subscribe to the ones you want to read with the ‘u’ command.
‘l’ to make all the killed groups disappear after you’ve subscribe to
all the groups you want to read.  (‘A k’ will bring back all the killed
groups.)

   You can now read the groups at once, or you can download the articles
with the ‘J s’ command.  And then read the rest of this manual to find
out which of the other gazillion things you want to customize.


File: gnus.info,  Node: Batching Agents,  Next: Agent Caveats,  Prev: Example Setup,  Up: Gnus Unplugged

7.9.13 Batching Agents
----------------------

Having the Gnus Agent fetch articles (and post whatever messages you’ve
written) is quite easy once you’ve gotten things set up properly.  The
following shell script will do everything that is necessary:

   You can run a complete batch command from the command line with the
following incantation:

     #!/bin/sh
     emacs -batch -l ~/.emacs -l ~/.gnus.el -f gnus-agent-batch >/dev/null 2>&1


File: gnus.info,  Node: Agent Caveats,  Prev: Batching Agents,  Up: Gnus Unplugged

7.9.14 Agent Caveats
--------------------

The Gnus Agent doesn’t seem to work like most other offline newsreaders.
Here are some common questions that some imaginary people may ask:

“If I read an article while plugged, do they get entered into the Agent?”

     *No*.  If you want this behavior, add
     ‘gnus-agent-fetch-selected-article’ to ‘gnus-select-article-hook’.

“If I read an article while plugged, and the article already exists in”
     the Agent, will it get downloaded once more?

     *No*, unless ‘gnus-agent-cache’ is ‘nil’.

   In short, when Gnus is unplugged, it only looks into the locally
stored articles; when it’s plugged, it talks to your ISP and may also
use the locally stored articles.


File: gnus.info,  Node: Scoring,  Next: Searching,  Prev: Select Methods,  Up: Top

# /. 8 Scoring
*************

Other people use “kill files” (*note Kill Files::, but we here at Gnus
Towers like scoring better than killing, so we’d rather switch than
fight.  Scoring and score files processing are more powerful and faster
than processing of kill files.  Scoring also does something completely
different as well, so sit up straight and pay attention!

   All articles have a default score (‘gnus-summary-default-score’),
which is 0 by default.  This score may be raised or lowered either
interactively or by score files.  Articles that have a score lower than
‘gnus-summary-mark-below’ are marked as read.

   Gnus will read any “score files” that apply to the current group
before generating the summary buffer.

   There are several commands in the summary buffer that insert score
entries based on the current article.  You can, for instance, ask Gnus
to lower or increase the score of all articles with a certain subject.

   There are two sorts of scoring entries: Permanent and temporary.
Temporary score entries are self-expiring entries.  Any entries that are
temporary and have not been used for, say, a week, will be removed
silently to help keep the sizes of the score files down.

* Menu:

* Summary Score Commands::      Adding score entries for the current group.
* Group Score Commands::        General score commands.
* Score Variables::             Customize your scoring.  (My, what terminology).
* Score File Format::           What a score file may contain.
* Score File Editing::          You can edit score files by hand as well.
* Adaptive Scoring::            Big Sister Gnus knows what you read.
* Home Score File::             How to say where new score entries are to go.
* Followups To Yourself::       Having Gnus notice when people answer you.
* Scoring On Other Headers::    Scoring on non-standard headers.
* Scoring Tips::                How to score effectively.
* Reverse Scoring::             That problem child of old is not problem.
* Global Score Files::          Earth-spanning, ear-splitting score files.
* Kill Files::                  They are still here, but they can be ignored.
* Converting Kill Files::       Translating kill files to score files.
* Advanced Scoring::            Using logical expressions to build score rules.
* Score Decays::                It can be useful to let scores wither away.


File: gnus.info,  Node: Summary Score Commands,  Next: Group Score Commands,  Up: Scoring

# /. 8.1 Summary Score Commands
==============================

The score commands that alter score entries do not actually modify real
score files.  That would be too inefficient.  Gnus maintains a cache of
previously loaded score files, one of which is considered the “current
score file alist”.  The score commands simply insert entries into this
list, and upon group exit, this list is saved.

   The current score file is by default the group’s local score file,
even if no such score file actually exists.  To insert score commands
into some other score file (e.g., ‘all.SCORE’), you must first make this
score file the current one.

   General score commands that don’t actually change the score file:

‘V s’
     Set the score of the current article (‘gnus-summary-set-score’).

‘V S’
     Display the score of the current article
     (‘gnus-summary-current-score’).

‘V t’
     Display all score rules that have been used on the current article
     (‘gnus-score-find-trace’).  In the ‘*Score Trace*’ buffer, you may
     type ‘e’ to edit score file corresponding to the score rule on
     current line and ‘f’ to format (‘gnus-score-pretty-print’) the
     score file and edit it.

‘V w’
     List words used in scoring (‘gnus-score-find-favorite-words’).

‘V R’
     Run the current summary through the scoring process
     (‘gnus-summary-rescore’).  This might be useful if you’re playing
     around with your score files behind Gnus’ back and want to see the
     effect you’re having.

‘V c’
     Make a different score file the current
     (‘gnus-score-change-score-file’).

‘V e’
     Edit the current score file (‘gnus-score-edit-current-scores’).
     You will be popped into a ‘gnus-score-mode’ buffer (*note Score
     File Editing::).

‘V f’
     Edit a score file and make this score file the current one
     (‘gnus-score-edit-file’).

‘V F’
     Flush the score cache (‘gnus-score-flush-cache’).  This is useful
     after editing score files.

‘V C’
     Customize a score file in a visually pleasing manner
     (‘gnus-score-customize’).

   The rest of these commands modify the local score file.

‘V m’
     Prompt for a score, and mark all articles with a score below this
     as read (‘gnus-score-set-mark-below’).

‘V x’
     Prompt for a score, and add a score rule to the current score file
     to expunge all articles below this score
     (‘gnus-score-set-expunge-below’).

   The keystrokes for actually making score entries follow a very
regular pattern, so there’s no need to list all the commands.  (Hundreds
of them.)

  1. The first key is either ‘I’ (upper case i) for increasing the score
     or ‘L’ for lowering the score.
  2. The second key says what header you want to score on.  The
     following keys are available:

     ‘a’
          Score on the author name.

     ‘s’
          Score on the subject line.

     ‘x’
          Score on the ‘Xref’ line—i.e., the cross-posting line.

     ‘r’
          Score on the ‘References’ line.

     ‘d’
          Score on the date.

     ‘l’
          Score on the number of lines.

     ‘i’
          Score on the ‘Message-ID’ header.

     ‘e’
          Score on an “extra” header, that is, one of those in
          gnus-extra-headers, if your NNTP server tracks additional
          header data in overviews.

     ‘f’
          Score on followups—this matches the author name, and adds
          scores to the followups to this author.  (Using this key leads
          to the creation of ‘ADAPT’ files.)

     ‘b’
          Score on the body.

     ‘h’
          Score on the head.

     ‘t’
          Score on thread.  (Using this key leads to the creation of
          ‘ADAPT’ files.)

  3. The third key is the match type.  Which match types are valid
     depends on what headers you are scoring on.

     ‘strings’

          ‘e’
               Exact matching.

          ‘s’
               Substring matching.

          ‘f’
               Fuzzy matching (*note Fuzzy Matching::).

          ‘r’
               Regexp matching.

     ‘date’

          ‘b’
               Before date.

          ‘a’
               After date.

          ‘n’
               This date.

     ‘number’

          ‘<’
               Less than number.

          ‘=’
               Equal to number.

          ‘>’
               Greater than number.

     ‘body-strings’

          These match types are available on the ‘head’ and ‘body’
          “header types”.

          ‘z’
               Substring matching.

          ‘p’
               Regexp matching.

  4. The fourth and usually final key says whether this is a temporary
     (i.e., expiring) score entry, or a permanent (i.e., non-expiring)
     score entry, or whether it is to be done immediately, without
     adding to the score file.

     ‘t’
          Temporary score entry.

     ‘p’
          Permanent score entry.

     ‘i’
          Immediately scoring.

  5. If you are scoring on ‘e’ (extra) headers, you will then be
     prompted for the header name on which you wish to score.  This must
     be a header named in gnus-extra-headers, and ‘<TAB>’ completion is
     available.

   So, let’s say you want to increase the score on the current author
with exact matching permanently: ‘I a e p’.  If you want to lower the
score based on the subject line, using substring matching, and make a
temporary score entry: ‘L s s t’.  Pretty easy.

   To make things a bit more complicated, there are shortcuts.  If you
use a capital letter on either the second or third keys, Gnus will use
defaults for the remaining one or two keystrokes.  The defaults are
“substring” and “temporary”.  So ‘I A’ is the same as ‘I a s t’, and ‘I
a R’ is the same as ‘I a r t’.  (These shortcuts are not available for
the body matches.)

   These functions take both the numerical prefix and the symbolic
prefix (*note Symbolic Prefixes::).  A numerical prefix says how much to
lower (or increase) the score of the article.  A symbolic prefix of ‘a’
says to use the ‘all.SCORE’ file for the command instead of the current
score file.

   The ‘gnus-score-mimic-keymap’ says whether these commands will
pretend they are keymaps or not.


File: gnus.info,  Node: Group Score Commands,  Next: Score Variables,  Prev: Summary Score Commands,  Up: Scoring

# /. 8.2 Group Score Commands
============================

There aren’t many of these as yet, I’m afraid.

‘W e’
     Edit the apply-to-all-groups all.SCORE file.  You will be popped
     into a ‘gnus-score-mode’ buffer (*note Score File Editing::).

‘W f’
     Gnus maintains a cache of score alists to avoid having to reload
     them all the time.  This command will flush the cache
     (‘gnus-score-flush-cache’).

   You can do scoring from the command line by saying something like:

     $ emacs -batch -l ~/.emacs -l ~/.gnus.el -f gnus-batch-score


File: gnus.info,  Node: Score Variables,  Next: Score File Format,  Prev: Group Score Commands,  Up: Scoring

# /. 8.3 Score Variables
=======================

‘gnus-use-scoring’
     If ‘nil’, Gnus will not check for score files, and will not, in
     general, do any score-related work.  This is ‘t’ by default.

‘gnus-kill-killed’
     If this variable is ‘nil’, Gnus will never apply score files to
     articles that have already been through the kill process.  While
     this may save you lots of time, it also means that if you apply a
     kill file to a group, and then change the kill file and want to run
     it over you group again to kill more articles, it won’t work.  You
     have to set this variable to ‘t’ to do that.  (It is ‘t’ by
     default.)

‘gnus-kill-files-directory’
     All kill and score files will be stored in this directory, which is
     initialized from the ‘SAVEDIR’ environment variable by default.
     This is ‘~/News/’ by default.

‘gnus-score-file-suffix’
     Suffix to add to the group name to arrive at the score file name
     (‘SCORE’ by default.)

‘gnus-score-uncacheable-files’
     All score files are normally cached to avoid excessive re-loading
     of score files.  However, this might make your Emacs grow big and
     bloated, so this regexp can be used to weed out score files
     unlikely to be needed again.  It would be a bad idea to deny
     caching of ‘all.SCORE’, while it might be a good idea to not cache
     ‘comp.infosystems.www.authoring.misc.ADAPT’.  In fact, this
     variable is ‘ADAPT$’ by default, so no adaptive score files will be
     cached.

‘gnus-save-score’
     If you have really complicated score files, and do lots of batch
     scoring, then you might set this variable to ‘t’.  This will make
     Gnus save the scores into the ‘.newsrc.eld’ file.

     If you do not set this to ‘t’, then manual scores (like those set
     with ‘V s’ (‘gnus-summary-set-score’)) will not be preserved across
     group visits.

‘gnus-score-interactive-default-score’
     Score used by all the interactive raise/lower commands to
     raise/lower score with.  Default is 1000, which may seem excessive,
     but this is to ensure that the adaptive scoring scheme gets enough
     room to play with.  We don’t want the small changes from the
     adaptive scoring to overwrite manually entered data.

‘gnus-summary-default-score’
     Default score of an article, which is 0 by default.

‘gnus-summary-expunge-below’
     Don’t display the summary lines of articles that have scores lower
     than this variable.  This is ‘nil’ by default, which means that no
     articles will be hidden.  This variable is local to the summary
     buffers, and has to be set from ‘gnus-summary-mode-hook’.

‘gnus-score-over-mark’
     Mark (in the third column) used for articles with a score over the
     default.  Default is ‘+’.

‘gnus-score-below-mark’
     Mark (in the third column) used for articles with a score below the
     default.  Default is ‘-’.

‘gnus-score-find-score-files-function’
     Function used to find score files for the current group.  This
     function is called with the name of the group as the argument.

     Predefined functions available are:

     ‘gnus-score-find-single’
          Only apply the group’s own score file.

     ‘gnus-score-find-bnews’
          Apply all score files that match, using bnews syntax.  This is
          the default.  If the current group is ‘gnu.emacs.gnus’, for
          instance, ‘all.emacs.all.SCORE’, ‘not.alt.all.SCORE’ and
          ‘gnu.all.SCORE’ would all apply.  In short, the instances of
          ‘all’ in the score file names are translated into ‘.*’, and
          then a regexp match is done.

          This means that if you have some score entries that you want
          to apply to all groups, then you put those entries in the
          ‘all.SCORE’ file.

          The score files are applied in a semi-random order, although
          Gnus will try to apply the more general score files before the
          more specific score files.  It does this by looking at the
          number of elements in the score file names—discarding the
          ‘all’ elements.

     ‘gnus-score-find-hierarchical’
          Apply all score files from all the parent groups.  This means
          that you can’t have score files like ‘all.SCORE’, but you can
          have ‘SCORE’, ‘comp.SCORE’ and ‘comp.emacs.SCORE’ for each
          server.

     This variable can also be a list of functions.  In that case, all
     these functions will be called with the group name as argument, and
     all the returned lists of score files will be applied.  These
     functions can also return lists of lists of score alists directly.
     In that case, the functions that return these non-file score alists
     should probably be placed before the “real” score file functions,
     to ensure that the last score file returned is the local score
     file.  Phu.

     For example, to do hierarchical scoring but use a
     non-server-specific overall score file, you could use the value
          (list (lambda (group) (list "all.SCORE"))
                'gnus-score-find-hierarchical)

‘gnus-score-expiry-days’
     This variable says how many days should pass before an unused score
     file entry is expired.  If this variable is ‘nil’, no score file
     entries are expired.  It’s 7 by default.

‘gnus-update-score-entry-dates’
     If this variable is non-‘nil’, temporary score entries that have
     been triggered (matched) will have their dates updated.  (This is
     how Gnus controls expiry—all non-matched-entries will become too
     old while matched entries will stay fresh and young.)  However, if
     you set this variable to ‘nil’, even matched entries will grow old
     and will have to face that oh-so grim reaper.

‘gnus-score-after-write-file-function’
     Function called with the name of the score file just written.

‘gnus-score-thread-simplify’
     If this variable is non-‘nil’, article subjects will be simplified
     for subject scoring purposes in the same manner as with
     threading—according to the current value of
     ‘gnus-simplify-subject-functions’.  If the scoring entry uses
     ‘substring’ or ‘exact’ matching, the match will also be simplified
     in this manner.


File: gnus.info,  Node: Score File Format,  Next: Score File Editing,  Prev: Score Variables,  Up: Scoring

# /. 8.4 Score File Format
=========================

A score file is an ‘emacs-lisp’ file that normally contains just a
single form.  Casual users are not expected to edit these files;
everything can be changed from the summary buffer.

   Anyway, if you’d like to dig into it yourself, here’s an example:

     (("from"
       ("Lars Ingebrigtsen" -10000)
       ("Per Abrahamsen")
       ("larsi\\|lmi" -50000 nil R))
      ("subject"
       ("Ding is Badd" nil 728373))
      ("xref"
       ("alt.politics" -1000 728372 s))
      ("lines"
       (2 -100 nil <))
      (mark 0)
      (expunge -1000)
      (mark-and-expunge -10)
      (read-only nil)
      (orphan -10)
      (adapt t)
      (files "/hom/larsi/News/gnu.SCORE")
      (exclude-files "all.SCORE")
      (local (gnus-newsgroup-auto-expire t)
             (gnus-summary-make-false-root empty))
      (eval (ding)))

   This example demonstrates most score file elements.  *Note Advanced
Scoring::, for a different approach.

   Even though this looks much like Lisp code, nothing here is actually
‘eval’ed.  The Lisp reader is used to read this form, though, so it has
to be valid syntactically, if not semantically.

   Six keys are supported by this alist:

‘STRING’
     If the key is a string, it is the name of the header to perform the
     match on.  Scoring can only be performed on these eight headers:
     ‘From’, ‘Subject’, ‘References’, ‘Message-ID’, ‘Xref’, ‘Lines’,
     ‘Chars’ and ‘Date’.  In addition to these headers, there are three
     strings to tell Gnus to fetch the entire article and do the match
     on larger parts of the article: ‘Body’ will perform the match on
     the body of the article, ‘Head’ will perform the match on the head
     of the article, and ‘All’ will perform the match on the entire
     article.  Note that using any of these last three keys will slow
     down group entry _considerably_.  The final “header” you can score
     on is ‘Followup’.  These score entries will result in new score
     entries being added for all follow-ups to articles that matches
     these score entries.

     Following this key is an arbitrary number of score entries, where
     each score entry has one to four elements.

       1. The first element is the “match element”.  On most headers
          this will be a string, but on the Lines and Chars headers,
          this must be an integer.

       2. If the second element is present, it should be a number—the
          “score element”.  This number should be an integer in the
          neginf to posinf interval.  This number is added to the score
          of the article if the match is successful.  If this element is
          not present, the ‘gnus-score-interactive-default-score’ number
          will be used instead.  This is 1000 by default.

       3. If the third element is present, it should be a number—the
          “date element”.  This date says when the last time this score
          entry matched, which provides a mechanism for expiring the
          score entries.  It this element is not present, the score
          entry is permanent.  The date is represented by the number of
          days since December 31, 1 BCE.

       4. If the fourth element is present, it should be a symbol—the
          “type element”.  This element specifies what function should
          be used to see whether this score entry matches the article.
          What match types that can be used depends on what header you
          wish to perform the match on.

          “From, Subject, References, Xref, Message-ID”
               For most header types, there are the ‘r’ and ‘R’
               (regexp), as well as ‘s’ and ‘S’ (substring) types, and
               ‘e’ and ‘E’ (exact match), and ‘w’ (word match) types.
               If this element is not present, Gnus will assume that
               substring matching should be used.  ‘R’, ‘S’, and ‘E’
               differ from the others in that the matches will be done
               in a case-sensitive manner.  All these one-letter types
               are really just abbreviations for the ‘regexp’, ‘string’,
               ‘exact’, and ‘word’ types, which you can use instead, if
               you feel like.

          “Extra”
               Just as for the standard string overview headers, if you
               are using gnus-extra-headers, you can score on these
               headers’ values.  In this case, there is a 5th element in
               the score entry, being the name of the header to be
               scored.  The following entry is useful in your
               ‘all.SCORE’ file in case of spam attacks from a single
               origin host, if your NNTP server tracks
               ‘NNTP-Posting-Host’ in overviews:

                    ("111.222.333.444" -1000 nil s
                     "NNTP-Posting-Host")

          “Lines, Chars”
               These two headers use different match types: ‘<’, ‘>’,
               ‘=’, ‘>=’ and ‘<=’.

               These predicates are true if

                    (PREDICATE HEADER MATCH)

               evaluates to non-‘nil’.  For instance, the advanced match
               ‘("lines" 4 <)’ (*note Advanced Scoring::) will result in
               the following form:

                    (< header-value 4)

               Or to put it another way: When using ‘<’ on ‘Lines’ with
               4 as the match, we get the score added if the article has
               less than 4 lines.  (It’s easy to get confused and think
               it’s the other way around.  But it’s not.  I think.)

               When matching on ‘Lines’, be careful because some back
               ends (like ‘nndir’) do not generate ‘Lines’ header, so
               every article ends up being marked as having 0 lines.
               This can lead to strange results if you happen to lower
               score of the articles with few lines.

          “Date”
               For the Date header we have three kinda silly match
               types: ‘before’, ‘at’ and ‘after’.  I can’t really
               imagine this ever being useful, but, like, it would feel
               kinda silly not to provide this function.  Just in case.
               You never know.  Better safe than sorry.  Once burnt,
               twice shy.  Don’t judge a book by its cover.  Never not
               have sex on a first date.  (I have been told that at
               least one person, and I quote, “found this function
               indispensable”, however.)

               A more useful match type is ‘regexp’.  With it, you can
               match the date string using a regular expression.  The
               date is normalized to ISO8601 compact format
               first—YYYYMMDD‘T’HHMMSS.  If you want to match all
               articles that have been posted on April 1st in every
               year, you could use ‘....0401.........’ as a match
               string, for instance.  (Note that the date is kept in its
               original time zone, so this will match articles that were
               posted when it was April 1st where the article was posted
               from.  Time zones are such wholesome fun for the whole
               family, eh?)

               Finally, two actually useful match types for dates: ‘<’
               and ‘>’.  These will allow scoring on the relative age
               (in days) of the articles.  Here’s an example score file
               using the method:

                    (("date"
                      (7 10 nil <)
                      (7 -10 nil >)
                      (14 -10 nil >)))

               This results in articles less than a week old getting a
               10 point increase, articles older than a week getting a
               10 point decrease, and articles older than two weeks
               getting a cumulative 20 point decrease.

               The day can also be a floating point number: To score
               articles less than an hour old, you can say ‘(0.04 10 nil
               <)’.

          “Head, Body, All”
               These three match keys use the same match types as the
               ‘From’ (etc.) header uses.

          “Followup”
               This match key is somewhat special, in that it will match
               the ‘From’ header, and affect the score of not only the
               matching articles, but also all followups to the matching
               articles.  This allows you to increase the score of
               followups to your own articles, or decrease the score of
               followups to the articles of some known trouble-maker.
               Uses the same match types as the ‘From’ header uses.
               (Using this match key will lead to creation of ‘ADAPT’
               files.)

          “Thread”
               This match key works along the same lines as the
               ‘Followup’ match key.  If you say that you want to score
               on a (sub-)thread started by an article with a
               ‘Message-ID’ X, then you add a ‘thread’ match.  This will
               add a new ‘thread’ match for each article that has X in
               its ‘References’ header.  (These new ‘thread’ matches
               will use the ‘Message-ID’s of these matching articles.)
               This will ensure that you can raise/lower the score of an
               entire thread, even though some articles in the thread
               may not have complete ‘References’ headers.  Note that
               using this may lead to nondeterministic scores of the
               articles in the thread.  (Using this match key will lead
               to creation of ‘ADAPT’ files.)

‘score-fn’
     The value of this entry should be one or more user-defined function
     names in parentheses.  Each function will be called in order and
     the returned value is required to be an integer.

          (score-fn (custom-scoring))

     The user-defined function is called with an association list with
     the keys ‘number subject from date id refs chars lines xref extra’
     followed by the article’s score before the function is run.

     The following (somewhat contrived) example shows how to use a
     user-defined function that increases an article’s score by 10 if
     the year of the article’s date is also mentioned in its subject.

          (defun custom-scoring (article-alist score)
            (let ((subject (cdr (assoc 'subject article-alist)))
                  (date (cdr (assoc 'date article-alist))))
              (if (string-match (number-to-string
                                 (nth 5 (parse-time-string date)))
                                subject)
                  10)))

     ‘score-fn’ entries are permanent and can only be added or modified
     directly in the ‘SCORE’ file.

‘mark’
     The value of this entry should be a number.  Any articles with a
     score lower than this number will be marked as read.

‘expunge’
     The value of this entry should be a number.  Any articles with a
     score lower than this number will be removed from the summary
     buffer.

‘mark-and-expunge’
     The value of this entry should be a number.  Any articles with a
     score lower than this number will be marked as read and removed
     from the summary buffer.

‘thread-mark-and-expunge’
     The value of this entry should be a number.  All articles that
     belong to a thread that has a total score below this number will be
     marked as read and removed from the summary buffer.
     ‘gnus-thread-score-function’ says how to compute the total score
     for a thread.

‘files’
     The value of this entry should be any number of file names.  These
     files are assumed to be score files as well, and will be loaded the
     same way this one was.

‘exclude-files’
     The clue of this entry should be any number of files.  These files
     will not be loaded, even though they would normally be so, for some
     reason or other.

‘eval’
     The value of this entry will be ‘eval’ed.  This element will be
     ignored when handling global score files.

‘read-only’
     Read-only score files will not be updated or saved.  Global score
     files should feature this atom (*note Global Score Files::).
     (Note: “Global” here really means “global”; not your personal
     apply-to-all-groups score files.)

‘orphan’
     The value of this entry should be a number.  Articles that do not
     have parents will get this number added to their scores.  Imagine
     you follow some high-volume newsgroup, like ‘comp.lang.c’.  Most
     likely you will only follow a few of the threads, also want to see
     any new threads.

     You can do this with the following two score file entries:

                  (orphan -500)
                  (mark-and-expunge -100)

     When you enter the group the first time, you will only see the new
     threads.  You then raise the score of the threads that you find
     interesting (with ‘I T’ or ‘I S’), and ignore (‘c y’) the rest.
     Next time you enter the group, you will see new articles in the
     interesting threads, plus any new threads.

     I.e., the orphan score atom is for high-volume groups where a few
     interesting threads which can’t be found automatically by ordinary
     scoring rules exist.

‘adapt’
     This entry controls the adaptive scoring.  If it is ‘t’, the
     default adaptive scoring rules will be used.  If it is ‘ignore’, no
     adaptive scoring will be performed on this group.  If it is a list,
     this list will be used as the adaptive scoring rules.  If it isn’t
     present, or is something other than ‘t’ or ‘ignore’, the default
     adaptive scoring rules will be used.  If you want to use adaptive
     scoring on most groups, you’d set ‘gnus-use-adaptive-scoring’ to
     ‘t’, and insert an ‘(adapt ignore)’ in the groups where you do not
     want adaptive scoring.  If you only want adaptive scoring in a few
     groups, you’d set ‘gnus-use-adaptive-scoring’ to ‘nil’, and insert
     ‘(adapt t)’ in the score files of the groups where you want it.

‘adapt-file’
     All adaptive score entries will go to the file named by this entry.
     It will also be applied when entering the group.  This atom might
     be handy if you want to adapt on several groups at once, using the
     same adaptive file for a number of groups.

‘local’
     The value of this entry should be a list of ‘(VAR VALUE)’ pairs.
     Each VAR will be made buffer-local to the current summary buffer,
     and set to the value specified.  This is a convenient, if somewhat
     strange, way of setting variables in some groups if you don’t like
     hooks much.  Note that the VALUE won’t be evaluated.


File: gnus.info,  Node: Score File Editing,  Next: Adaptive Scoring,  Prev: Score File Format,  Up: Scoring

# /. 8.5 Score File Editing
==========================

You normally enter all scoring commands from the summary buffer, but you
might feel the urge to edit them by hand as well, so we’ve supplied you
with a mode for that.

   It’s simply a slightly customized ‘emacs-lisp’ mode, with these
additional commands:

‘C-c C-c’
     Save the changes you have made and return to the summary buffer
     (‘gnus-score-edit-exit’).

‘C-c C-d’
     Insert the current date in numerical format
     (‘gnus-score-edit-insert-date’).  This is really the day number, if
     you were wondering.

‘C-c C-p’
     The adaptive score files are saved in an unformatted fashion.  If
     you intend to read one of these files, you want to “pretty print”
     it first.  This command (‘gnus-score-pretty-print’) does that for
     you.

   Type ‘M-x gnus-score-mode’ to use this mode.

   ‘gnus-score-menu-hook’ is run in score mode buffers.

   In the summary buffer you can use commands like ‘V f’, ‘V e’ and ‘V
t’ to begin editing score files.


File: gnus.info,  Node: Adaptive Scoring,  Next: Home Score File,  Prev: Score File Editing,  Up: Scoring

# /. 8.6 Adaptive Scoring
========================

If all this scoring is getting you down, Gnus has a way of making it all
happen automatically—as if by magic.  Or rather, as if by artificial
stupidity, to be precise.

   When you read an article, or mark an article as read, or kill an
article, you leave marks behind.  On exit from the group, Gnus can sniff
these marks and add score elements depending on what marks it finds.
You turn on this ability by setting ‘gnus-use-adaptive-scoring’ to ‘t’
or ‘(line)’.  If you want score adaptively on separate words appearing
in the subjects, you should set this variable to ‘(word)’.  If you want
to use both adaptive methods, set this variable to ‘(word line)’.

   To give you complete control over the scoring process, you can
customize the ‘gnus-default-adaptive-score-alist’ variable.  For
instance, it might look something like this:

     (setq gnus-default-adaptive-score-alist
       '((gnus-unread-mark)
         (gnus-ticked-mark (from 4))
         (gnus-dormant-mark (from 5))
         (gnus-del-mark (from -4) (subject -1))
         (gnus-read-mark (from 4) (subject 2))
         (gnus-expirable-mark (from -1) (subject -1))
         (gnus-killed-mark (from -1) (subject -3))
         (gnus-kill-file-mark)
         (gnus-ancient-mark)
         (gnus-low-score-mark)
         (gnus-catchup-mark (from -1) (subject -1))))

   As you see, each element in this alist has a mark as a key (either a
variable name or a “real” mark—a character).  Following this key is a
arbitrary number of header/score pairs.  If there are no header/score
pairs following the key, no adaptive scoring will be done on articles
that have that key as the article mark.  For instance, articles with
‘gnus-unread-mark’ in the example above will not get adaptive score
entries.

   Each article can have only one mark, so just a single of these rules
will be applied to each article.

   To take ‘gnus-del-mark’ as an example—this alist says that all
articles that have that mark (i.e., are marked with ‘e’) will have a
score entry added to lower based on the ‘From’ header by −4, and lowered
by ‘Subject’ by −1.  Change this to fit your prejudices.

   If you have marked 10 articles with the same subject with
‘gnus-del-mark’, the rule for that mark will be applied ten times.  That
means that that subject will get a score of ten times −1, which should
be, unless I’m much mistaken, −10.

   If you have auto-expirable (mail) groups (*note Expiring Mail::), all
the read articles will be marked with the ‘E’ mark.  This’ll probably
make adaptive scoring slightly impossible, so auto-expiring and adaptive
scoring doesn’t really mix very well.

   The headers you can score on are ‘from’, ‘subject’, ‘message-id’,
‘references’, ‘xref’, ‘lines’, ‘chars’ and ‘date’.  In addition, you can
score on ‘followup’, which will create an adaptive score entry that
matches on the ‘References’ header using the ‘Message-ID’ of the current
article, thereby matching the following thread.

   If you use this scheme, you should set the score file atom ‘mark’ to
something small—like −300, perhaps, to avoid having small random changes
result in articles getting marked as read.

   After using adaptive scoring for a week or so, Gnus should start to
become properly trained and enhance the authors you like best, and kill
the authors you like least, without you having to say so explicitly.

   You can control what groups the adaptive scoring is to be performed
on by using the score files (*note Score File Format::).  This will also
let you use different rules in different groups.

   The adaptive score entries will be put into a file where the name is
the group name with ‘gnus-adaptive-file-suffix’ appended.  The default
is ‘ADAPT’.

   Adaptive score files can get huge and are not meant to be edited by
human hands.  If ‘gnus-adaptive-pretty-print’ is ‘nil’ (the default)
those files will not be written in a human readable way.

   When doing adaptive scoring, substring or fuzzy matching would
probably give you the best results in most cases.  However, if the
header one matches is short, the possibility for false positives is
great, so if the length of the match is less than
‘gnus-score-exact-adapt-limit’, exact matching will be used.  If this
variable is ‘nil’, exact matching will always be used to avoid this
problem.

   As mentioned above, you can adapt either on individual words or
entire headers.  If you adapt on words, the
‘gnus-default-adaptive-word-score-alist’ variable says what score each
instance of a word should add given a mark.

     (setq gnus-default-adaptive-word-score-alist
           `((,gnus-read-mark . 30)
             (,gnus-catchup-mark . -10)
             (,gnus-killed-mark . -20)
             (,gnus-del-mark . -15)))

   This is the default value.  If you have adaption on words enabled,
every word that appears in subjects of articles marked with
‘gnus-read-mark’ will result in a score rule that increase the score
with 30 points.

   Words that appear in the ‘gnus-default-ignored-adaptive-words’ list
will be ignored.  If you wish to add more words to be ignored, use the
‘gnus-ignored-adaptive-words’ list instead.

   Some may feel that short words shouldn’t count when doing adaptive
scoring.  If so, you may set ‘gnus-adaptive-word-length-limit’ to an
integer.  Words shorter than this number will be ignored.  This variable
defaults to ‘nil’.

   When the scoring is done, ‘gnus-adaptive-word-syntax-table’ is the
syntax table in effect.  It is similar to the standard syntax table, but
it considers numbers to be non-word-constituent characters.

   If ‘gnus-adaptive-word-minimum’ is set to a number, the adaptive word
scoring process will never bring down the score of an article to below
this number.  The default is ‘nil’.

   If ‘gnus-adaptive-word-no-group-words’ is set to ‘t’, gnus won’t
adaptively word score any of the words in the group name.  Useful for
groups like ‘comp.editors.emacs’, where most of the subject lines
contain the word ‘emacs’.

   After using this scheme for a while, it might be nice to write a
‘gnus-psychoanalyze-user’ command to go through the rules and see what
words you like and what words you don’t like.  Or perhaps not.

   Note that the adaptive word scoring thing is highly experimental and
is likely to change in the future.  Initial impressions seem to indicate
that it’s totally useless as it stands.  Some more work (involving more
rigorous statistical methods) will have to be done to make this useful.


File: gnus.info,  Node: Home Score File,  Next: Followups To Yourself,  Prev: Adaptive Scoring,  Up: Scoring

# /. 8.7 Home Score File
=======================

The score file where new score file entries will go is called the “home
score file”.  This is normally (and by default) the score file for the
group itself.  For instance, the home score file for ‘gnu.emacs.gnus’ is
‘gnu.emacs.gnus.SCORE’.

   However, this may not be what you want.  It is often convenient to
share a common home score file among many groups—all ‘emacs’ groups
could perhaps use the same home score file.

   The variable that controls this is ‘gnus-home-score-file’.  It can
be:

  1. A string.  Then this file will be used as the home score file for
     all groups.

  2. A function.  The result of this function will be used as the home
     score file.  The function will be called with the name of the group
     as the parameter.

  3. A list.  The elements in this list can be:

       1. ‘(REGEXP FILE-NAME)’.  If the REGEXP matches the group name,
          the FILE-NAME will be used as the home score file.

       2. A function.  If the function returns non-‘nil’, the result
          will be used as the home score file.  The function will be
          called with the name of the group as the parameter.

       3. A string.  Use the string as the home score file.

     The list will be traversed from the beginning towards the end
     looking for matches.

   So, if you want to use just a single score file, you could say:

     (setq gnus-home-score-file
           "my-total-score-file.SCORE")

   If you want to use ‘gnu.SCORE’ for all ‘gnu’ groups and ‘rec.SCORE’
for all ‘rec’ groups (and so on), you can say:

     (setq gnus-home-score-file
           'gnus-hierarchial-home-score-file)

   This is a ready-made function provided for your convenience.  Other
functions include

‘gnus-current-home-score-file’
     Return the “current” regular score file.  This will make scoring
     commands add entry to the “innermost” matching score file.

   If you want to have one score file for the ‘emacs’ groups and another
for the ‘comp’ groups, while letting all other groups use their own home
score files:

     (setq gnus-home-score-file
           ;; All groups that match the regexp ‘"\\.emacs"’
           '(("\\.emacs" "emacs.SCORE")
             ;; All the comp groups in one score file
             ("^comp" "comp.SCORE")))

   ‘gnus-home-adapt-file’ works exactly the same way as
‘gnus-home-score-file’, but says what the home adaptive score file is
instead.  All new adaptive file entries will go into the file specified
by this variable, and the same syntax is allowed.

   In addition to using ‘gnus-home-score-file’ and
‘gnus-home-adapt-file’, you can also use group parameters (*note Group
Parameters::) and topic parameters (*note Topic Parameters::) to achieve
much the same.  Group and topic parameters take precedence over this
variable.


File: gnus.info,  Node: Followups To Yourself,  Next: Scoring On Other Headers,  Prev: Home Score File,  Up: Scoring

# /. 8.8 Followups To Yourself
=============================

Gnus offers two commands for picking out the ‘Message-ID’ header in the
current buffer.  Gnus will then add a score rule that scores using this
‘Message-ID’ on the ‘References’ header of other articles.  This will,
in effect, increase the score of all articles that respond to the
article in the current buffer.  Quite useful if you want to easily note
when people answer what you’ve said.

‘gnus-score-followup-article’
     This will add a score to articles that directly follow up your own
     article.

‘gnus-score-followup-thread’
     This will add a score to all articles that appear in a thread
     “below” your own article.

   These two functions are both primarily meant to be used in hooks like
‘message-sent-hook’, like this:
     (add-hook 'message-sent-hook 'gnus-score-followup-thread)

   If you look closely at your own ‘Message-ID’, you’ll notice that the
first two or three characters are always the same.  Here’s two of mine:

     <x6u3u47icf.fsf@eyesore.no>
     <x6sp9o7ibw.fsf@eyesore.no>

   So “my” ident on this machine is ‘x6’.  This can be exploited—the
following rule will raise the score on all followups to myself:

     ("references"
      ("<x6[0-9a-z]+\\.fsf\\(_-_\\)?@.*eyesore\\.no>"
       1000 nil r))

   Whether it’s the first two or first three characters that are “yours”
is system-dependent.


File: gnus.info,  Node: Scoring On Other Headers,  Next: Scoring Tips,  Prev: Followups To Yourself,  Up: Scoring

# /. 8.9 Scoring On Other Headers
================================

Gnus is quite fast when scoring the “traditional” headers—‘From’,
‘Subject’ and so on.  However, scoring other headers requires writing a
‘head’ scoring rule, which means that Gnus has to request every single
article from the back end to find matches.  This takes a long time in
big groups.

   You can inhibit this slow scoring on headers or body by setting the
variable ‘gnus-inhibit-slow-scoring’.  If ‘gnus-inhibit-slow-scoring’ is
regexp, slow scoring is inhibited if the group matches the regexp.  If
it is ‘t’, slow scoring on it is inhibited for all groups.

   Now, there’s not much you can do about the slowness for news groups,
but for mail groups, you have greater control.  In *note To From
Newsgroups::, it’s explained in greater detail what this mechanism does,
but here’s a cookbook example for ‘nnml’ on how to allow scoring on the
‘To’ and ‘Cc’ headers.

   Put the following in your ‘~/.gnus.el’ file.

     (setq gnus-extra-headers '(To Cc Newsgroups Keywords)
           nnmail-extra-headers gnus-extra-headers)

   Restart Gnus and rebuild your ‘nnml’ overview files with the ‘M-x
nnml-generate-nov-databases’ command.  This will take a long time if you
have much mail.

   Now you can score on ‘To’ and ‘Cc’ as “extra headers” like so: ‘I e s
p To <RET> <your name> <RET>’.

   See?  Simple.


File: gnus.info,  Node: Scoring Tips,  Next: Reverse Scoring,  Prev: Scoring On Other Headers,  Up: Scoring

# /. 8.10 Scoring Tips
=====================

“Crossposts”
     If you want to lower the score of crossposts, the line to match on
     is the ‘Xref’ header.
          ("xref" (" talk.politics.misc:" -1000))

“Multiple crossposts”
     If you want to lower the score of articles that have been
     crossposted to more than, say, 3 groups:
          ("xref"
            ("[^:\n]+:[0-9]+ +[^:\n]+:[0-9]+ +[^:\n]+:[0-9]+"
             -1000 nil r))

“Matching on the body”
     This is generally not a very good idea—it takes a very long time.
     Gnus actually has to fetch each individual article from the server.
     But you might want to anyway, I guess.  Even though there are three
     match keys (‘Head’, ‘Body’ and ‘All’), you should choose one and
     stick with it in each score file.  If you use any two, each article
     will be fetched _twice_.  If you want to match a bit on the ‘Head’
     and a bit on the ‘Body’, just use ‘All’ for all the matches.

“Marking as read”
     You will probably want to mark articles that have scores below a
     certain number as read.  This is most easily achieved by putting
     the following in your ‘all.SCORE’ file:
          ((mark -100))
     You may also consider doing something similar with ‘expunge’.

“Negated character classes”
     If you say stuff like ‘[^abcd]*’, you may get unexpected results.
     That will match newlines, which might lead to, well, The Unknown.
     Say ‘[^abcd\n]*’ instead.


File: gnus.info,  Node: Reverse Scoring,  Next: Global Score Files,  Prev: Scoring Tips,  Up: Scoring

# /. 8.11 Reverse Scoring
========================

If you want to keep just articles that have ‘Sex with Emacs’ in the
subject header, and expunge all other articles, you could put something
like this in your score file:

     (("subject"
       ("Sex with Emacs" 2))
      (mark 1)
      (expunge 1))

   So, you raise all articles that match ‘Sex with Emacs’ and mark the
rest as read, and expunge them to boot.


File: gnus.info,  Node: Global Score Files,  Next: Kill Files,  Prev: Reverse Scoring,  Up: Scoring

# /. 8.12 Global Score Files
===========================

Sure, other newsreaders have “global kill files”.  These are usually
nothing more than a single kill file that applies to all groups, stored
in the user’s home directory.  Bah!  Puny, weak newsreaders!

   What I’m talking about here are Global Score Files.  Score files from
all over the world, from users everywhere, uniting all nations in one
big, happy score file union!  Ange-score!  New and untested!

   All you have to do to use other people’s score files is to set the
‘gnus-global-score-files’ variable.  One entry for each score file, or
each score file directory.  Gnus will decide by itself what score files
are applicable to which group.

   To use the score file
‘/ftp@ftp.gnus.org:/pub/larsi/ding/score/soc.motss.SCORE’ and all score
files in the ‘/ftp@ftp.some-where:/pub/score’ directory, say this:

     (setq gnus-global-score-files
           '("/ftp@ftp.gnus.org:/pub/larsi/ding/score/soc.motss.SCORE"
             "/ftp@ftp.some-where:/pub/score/"))

Simple, eh?  Directory names must end with a ‘/’.  These directories are
typically scanned only once during each Gnus session.  If you feel the
need to manually re-scan the remote directories, you can use the
‘gnus-score-search-global-directories’ command.

   Note that, at present, using this option will slow down group entry
somewhat.  (That is—a lot.)

   If you want to start maintaining score files for other people to use,
just put your score file up for anonymous ftp and announce it to the
world.  Become a retro-moderator!  Participate in the retro-moderator
wars sure to ensue, where retro-moderators battle it out for the
sympathy of the people, luring them to use their score files on false
premises!  Yay!  The net is saved!

   Here are some tips for the would-be retro-moderator, off the top of
my head:

   • Articles heavily crossposted are probably junk.
   • To lower a single inappropriate article, lower by ‘Message-ID’.
   • Particularly brilliant authors can be raised on a permanent basis.
   • Authors that repeatedly post off-charter for the group can safely
     be lowered out of existence.
   • Set the ‘mark’ and ‘expunge’ atoms to obliterate the nastiest
     articles completely.

   • Use expiring score entries to keep the size of the file down.  You
     should probably have a long expiry period, though, as some sites
     keep old articles for a long time.

   ... I wonder whether other newsreaders will support global score
files in the future.  _Snicker_.  Yup, any day now, newsreaders like
Blue Wave, xrn and 1stReader are bound to implement scoring.  Should we
start holding our breath yet?


File: gnus.info,  Node: Kill Files,  Next: Converting Kill Files,  Prev: Global Score Files,  Up: Scoring

# /. 8.13 Kill Files
===================

Gnus still supports those pesky old kill files.  In fact, the kill file
entries can now be expiring, which is something I wrote before Daniel
Quinlan thought of doing score files, so I’ve left the code in there.

   In short, kill processing is a lot slower (and I do mean _a lot_)
than score processing, so it might be a good idea to rewrite your kill
files into score files.

   Anyway, a kill file is a normal ‘emacs-lisp’ file.  You can put any
forms into this file, which means that you can use kill files as some
sort of primitive hook function to be run on group entry, even though
that isn’t a very good idea.

   Normal kill files look like this:

     (gnus-kill "From" "Lars Ingebrigtsen")
     (gnus-kill "Subject" "ding")
     (gnus-expunge "X")

   This will mark every article written by me as read, and remove the
marked articles from the summary buffer.  Very useful, you’ll agree.

   Other programs use a totally different kill file syntax.  If Gnus
encounters what looks like a ‘rn’ kill file, it will take a stab at
interpreting it.

   Two summary functions for editing a GNUS kill file:

‘M-k’
     Edit this group’s kill file (‘gnus-summary-edit-local-kill’).

‘M-K’
     Edit the general kill file (‘gnus-summary-edit-global-kill’).

   Two group mode functions for editing the kill files:

‘M-k’
     Edit this group’s kill file (‘gnus-group-edit-local-kill’).

‘M-K’
     Edit the general kill file (‘gnus-group-edit-global-kill’).

   Kill file variables:

‘gnus-kill-file-name’
     A kill file for the group ‘soc.motss’ is normally called
     ‘soc.motss.KILL’.  The suffix appended to the group name to get
     this file name is detailed by the ‘gnus-kill-file-name’ variable.
     The “global” kill file (not in the score file sense of “global”, of
     course) is just called ‘KILL’.

‘gnus-kill-save-kill-file’
     If this variable is non-‘nil’, Gnus will save the kill file after
     processing, which is necessary if you use expiring kills.

‘gnus-apply-kill-hook’
     A hook called to apply kill files to a group.  It is
     ‘(gnus-apply-kill-file)’ by default.  If you want to ignore the
     kill file if you have a score file for the same group, you can set
     this hook to ‘(gnus-apply-kill-file-unless-scored)’.  If you don’t
     want kill files to be processed, you should set this variable to
     ‘nil’.

‘gnus-kill-file-mode-hook’
     A hook called in kill-file mode buffers.


File: gnus.info,  Node: Converting Kill Files,  Next: Advanced Scoring,  Prev: Kill Files,  Up: Scoring

# /. 8.14 Converting Kill Files
==============================

If you have loads of old kill files, you may want to convert them into
score files.  If they are “regular”, you can use the
‘gnus-kill-to-score.el’ package; if not, you’ll have to do it by hand.

   The kill to score conversion package isn’t included in Emacs by
default.  You can fetch it from the contrib directory of the Gnus
distribution or from
<http://heim.ifi.uio.no/~larsi/ding-various/gnus-kill-to-score.el>.

   If your old kill files are very complex—if they contain more
non-‘gnus-kill’ forms than not, you’ll have to convert them by hand.  Or
just let them be as they are.  Gnus will still use them as before.


File: gnus.info,  Node: Advanced Scoring,  Next: Score Decays,  Prev: Converting Kill Files,  Up: Scoring

# /. 8.15 Advanced Scoring
=========================

Scoring on Subjects and From headers is nice enough, but what if you’re
really interested in what a person has to say only when she’s talking
about a particular subject?  Or what if you really don’t want to read
what person A has to say when she’s following up to person B, but want
to read what she says when she’s following up to person C?

   By using advanced scoring rules you may create arbitrarily complex
scoring patterns.

* Menu:

* Advanced Scoring Syntax::     A definition.
* Advanced Scoring Examples::   What they look like.
* Advanced Scoring Tips::       Getting the most out of it.


File: gnus.info,  Node: Advanced Scoring Syntax,  Next: Advanced Scoring Examples,  Up: Advanced Scoring

8.15.1 Advanced Scoring Syntax
------------------------------

Ordinary scoring rules have a string as the first element in the rule.
Advanced scoring rules have a list as the first element.  The second
element is the score to be applied if the first element evaluated to a
non-‘nil’ value.

   These lists may consist of three logical operators, one redirection
operator, and various match operators.

   Logical operators:

‘&’
‘and’
     This logical operator will evaluate each of its arguments until it
     finds one that evaluates to ‘false’, and then it’ll stop.  If all
     arguments evaluate to ‘true’ values, then this operator will return
     ‘true’.

‘|’
‘or’
     This logical operator will evaluate each of its arguments until it
     finds one that evaluates to ‘true’.  If no arguments are ‘true’,
     then this operator will return ‘false’.

‘!’
‘not’
‘¬’
     This logical operator only takes a single argument.  It returns the
     logical negation of the value of its argument.

   There is an “indirection operator” that will make its arguments apply
to the ancestors of the current article being scored.  For instance,
‘1-’ will make score rules apply to the parent of the current article.
‘2-’ will make score rules apply to the grandparent of the current
article.  Alternatively, you can write ‘^^’, where the number of ‘^’s
(carets) says how far back into the ancestry you want to go.

   Finally, we have the match operators.  These are the ones that do the
real work.  Match operators are header name strings followed by a match
and a match type.  A typical match operator looks like ‘("from" "Lars
Ingebrigtsen" s)’.  The header names are the same as when using simple
scoring, and the match types are also the same.


File: gnus.info,  Node: Advanced Scoring Examples,  Next: Advanced Scoring Tips,  Prev: Advanced Scoring Syntax,  Up: Advanced Scoring

8.15.2 Advanced Scoring Examples
--------------------------------

Please note that the following examples are score file rules.  To make a
complete score file from them, surround them with another pair of
parentheses.

   Let’s say you want to increase the score of articles written by Lars
when he’s talking about Gnus:

     ((&
       ("from" "Lars Ingebrigtsen")
       ("subject" "Gnus"))
      1000)

   Quite simple, huh?

   When he writes long articles, he sometimes has something nice to say:

     ((&
       ("from" "Lars Ingebrigtsen")
       (|
        ("subject" "Gnus")
        ("lines" 100 >)))
      1000)

   However, when he responds to things written by Reig Eigil Logge, you
really don’t want to read what he’s written:

     ((&
       ("from" "Lars Ingebrigtsen")
       (1- ("from" "Reig Eigil Logge")))
      -100000)

   Everybody that follows up Redmondo when he writes about disappearing
socks should have their scores raised, but only when they talk about
white socks.  However, when Lars talks about socks, it’s usually not
very interesting:

     ((&
       (1-
        (&
         ("from" "redmondo@.*no" r)
         ("body" "disappearing.*socks" t)))
       (! ("from" "Lars Ingebrigtsen"))
       ("body" "white.*socks"))
      1000)

   Suppose you’re reading a high volume group and you’re only interested
in replies.  The plan is to score down all articles that don’t have
subject that begin with "Re:", "Fw:" or "Fwd:" and then score up all
parents of articles that have subjects that begin with reply marks.

     ((! ("subject" "re:\\|fwd?:" r))
       -200)
     ((1- ("subject" "re:\\|fwd?:" r))
       200)

   The possibilities are endless.


File: gnus.info,  Node: Advanced Scoring Tips,  Prev: Advanced Scoring Examples,  Up: Advanced Scoring

8.15.3 Advanced Scoring Tips
----------------------------

The ‘&’ and ‘|’ logical operators do short-circuit logic.  That is, they
stop processing their arguments when it’s clear what the result of the
operation will be.  For instance, if one of the arguments of an ‘&’
evaluates to ‘false’, there’s no point in evaluating the rest of the
arguments.  This means that you should put slow matches (‘body’,
‘header’) last and quick matches (‘from’, ‘subject’) first.

   The indirection arguments (‘1-’ and so on) will make their arguments
work on previous generations of the thread.  If you say something like:

     ...
     (1-
      (1-
       ("from" "lars")))
     ...

   Then that means “score on the from header of the grandparent of the
current article”.  An indirection is quite fast, but it’s better to say:

     (1-
      (&
       ("from" "Lars")
       ("subject" "Gnus")))

   than it is to say:

     (&
      (1- ("from" "Lars"))
      (1- ("subject" "Gnus")))


File: gnus.info,  Node: Score Decays,  Prev: Advanced Scoring,  Up: Scoring

# /. 8.16 Score Decays
=====================

You may find that your scores have a tendency to grow without bounds,
especially if you’re using adaptive scoring.  If scores get too big,
they lose all meaning—they simply max out and it’s difficult to use them
in any sensible way.

   Gnus provides a mechanism for decaying scores to help with this
problem.  When score files are loaded and ‘gnus-decay-scores’ is
non-‘nil’, Gnus will run the score files through the decaying mechanism
thereby lowering the scores of all non-permanent score rules.  If
‘gnus-decay-scores’ is a regexp, only score files matching this regexp
are treated.  E.g., you may set it to ‘\\.ADAPT\\'’ if only _adaptive_
score files should be decayed.  The decay itself if performed by the
‘gnus-decay-score-function’ function, which is ‘gnus-decay-score’ by
default.  Here’s the definition of that function:

     (defun gnus-decay-score (score)
       "Decay SCORE according to `gnus-score-decay-constant'
     and `gnus-score-decay-scale'."
       (let ((n (- score
                   (* (if (< score 0) -1 1)
                      (min (abs score)
                           (max gnus-score-decay-constant
                                (* (abs score)
                                   gnus-score-decay-scale)))))))
         (floor n)))

   ‘gnus-score-decay-constant’ is 3 by default and
‘gnus-score-decay-scale’ is 0.05.  This should cause the following:

  1. Scores between −3 and 3 will be set to 0 when this function is
     called.

  2. Scores with magnitudes between 3 and 60 will be shrunk by 3.

  3. Scores with magnitudes greater than 60 will be shrunk by 5% of the
     score.

   If you don’t like this decay function, write your own.  It is called
with the score to be decayed as its only parameter, and it should return
the new score, which should be an integer.

   Gnus will try to decay scores once a day.  If you haven’t run Gnus
for four days, Gnus will decay the scores four times, for instance.


File: gnus.info,  Node: Searching,  Next: Various,  Prev: Scoring,  Up: Top

# /. 9 Searching
***************

Gnus has various ways of finding articles that match certain criteria
(from a particular author, on a certain subject, etc.).  The simplest
method is to enter a group and then either "limit" the summary buffer to
the desired articles using the limiting commands (*note Limiting::), or
searching through messages in the summary buffer (*note Searching for
Articles::).

   Limiting commands and summary buffer searching work on articles
already fetched from the servers, and these commands won’t query the
server for additional articles.  While simple, these methods are
therefore inadequate if the desired articles span multiple groups, or if
the group is so large that fetching all articles is impractical.

   It’s possible to search a backend more thoroughly using an associated
search engine.  Some backends come with their own search engine: IMAP
servers, for instance, do their own searching.  Other backends, for
example a local ‘nnmaildir’ installation, might require the user to
manually set up some sort of search indexing.  Default associations
between backends and engines can be defined in
‘gnus-search-default-engines’, and engines can also be defined on a
per-backend basis (*note Search Engines::).

   Once the search engines are set up, you can search for messages in
groups from one or more backends, and show the results in a group.  The
groups that hold search results are created on the nnselect backend, and
can be either ephemeral or persistent (*note Creating Search Groups::).

   Search queries can be specified one of two ways: either using the
syntax of the engine responsible for the group you’re searching, or
using Gnus’ generalized search syntax.  Set the option
‘gnus-search-use-parsed-queries’ to a non-‘nil’ value to used the
generalized syntax.  The advantage of this syntax is that, if you have
multiple backends indexed by different engines, you don’t need to
remember which one you’re searching—it’s also possible to issue the same
query against multiple groups, indexed by different engines, at the same
time.  It also provides a few other conveniences including relative date
parsing and tie-ins into other Emacs packages.  For details on Gnus’
query language, see *note Search Queries::.

* Menu:

* Search Engines::              Selecting and configuring search engines.
* Creating Search Groups::      How and where.
* Search Queries::              Gnus’ built-in search syntax.
* nnmairix::                    Searching with Mairix.
* nnir::


File: gnus.info,  Node: Search Engines,  Next: Creating Search Groups,  Up: Searching

# /. 9.1 Search Engines
======================

In order to search for messages from any given server, that server must
have a search engine associated with it.  IMAP servers do their own
searching, and searching IMAP groups will work with no additional
configuration, but in all other cases the user will have to manually
specify an engine to use.  This can be done at two different levels: by
server type, or on a per-server basis.

   The option ‘gnus-search-default-engines’ assigns search engines by
server type.  Its value is an alist mapping symbols indicating a server
type (e.g. ‘nnmaildir’ or ‘nnml’) to symbols indicating a search engine
class.  The built-in search engine symbols are:

   • ‘gnus-search-imap’

   • ‘gnus-search-find-grep’

   • ‘gnus-search-notmuch’

   • ‘gnus-search-swish-e’

   • ‘gnus-search-swish++’

   • ‘gnus-search-mairix’

   • ‘gnus-search-namazu’

   • ‘gnus-search-mu’

   If you need more granularity, you can specify a search engine in the
server definition, using the ‘gnus-search-engine’ key, whether that be
in your ‘.gnus.el’ config file, or through Gnus’ server buffer.  That
might look like:

     '(nnmaildir "My Mail"
        (directory "/home/user/.mail")
        (gnus-search-engine gnus-search-notmuch
          (config-file "/home/user/.mail/.notmuch_config")))

   Search engines like notmuch, namazu, mairix and mu are similar in
behavior: they use a local executable to create an index of a message
store, and run command line search queries against those messages, and
return a list of absolute file names of matching messages.

   These engines have a handful of configuration parameters in common.
These common parameters are:

‘program’
     The name of the executable.  Defaults to the plain program name
     such as ‘notmuch’ or ‘namazu’.

‘config-file’
     The absolute filename of the configuration file for this search
     engine.

‘remove-prefix’
     The directory part to be removed from the filenames returned by the
     search query.  This absolute path should include everything up to
     the top level of the message store.  Note that this is the path to
     the location of the actual messages, not to the search engine’s
     indexes (nor, in the case of Mairix, to its symlink directories).

‘switches’
     Additional command-line switches to be fed to the search program.
     The value of this parameter must be a list of strings, one string
     per switch.

   The options above can be set in one of two ways: using a
customization option that is set for all engines of that type, or on a
per-engine basis in your server configuration files.

   The customization options are formed on the pattern
‘gnus-search-ENGINE-PARAMETER’.  For instance, to use a non-standard
notmuch program, you might set ‘gnus-search-notmuch-program’ to
‘/usr/local/bin/notmuch’.  This would apply to all notmuch engines.  The
engines that use these options are: “notmuch”, “namazu”, “mairix”, “mu”,
“swish-e” and “swish++”.

   Alternately, the options can be set directly on your Gnus server
definitions, for instance, in the ‘nnmaildir’ example above.  Note that
the server options are part of the ‘gnus-search-engine’ sexp, and the
option symbol and value form a two-element list, not a cons cell.

   The namazu and swish-e engines each have one additional option,
specifying where to store their index files.  For namazu it is
‘index-directory’, and should be a single directory path.  For swish-e
it is ‘index-files’, and should be a list of strings.

   All indexed search engines come with their own method of updating
their search indexes to include newly-arrived messages.  Gnus currently
provides no convenient interface for this, and you’ll have to manage
updates yourself, though this will likely change in the future.

   Lastly, all search engines accept a ‘raw-queries-p’ option.  This
indicates that engines of this type (or this particular engine) should
always use raw queries, never parsed (*note Search Queries::).


File: gnus.info,  Node: Creating Search Groups,  Next: Search Queries,  Prev: Search Engines,  Up: Searching

# /. 9.2 Creating Search Groups
==============================

In the group buffer typing ‘G G’ will search the group on the current
line by calling ‘gnus-group-read-ephemeral-search-group’.  This prompts
for a query string, creates an ephemeral ‘nnselect’ group containing the
articles that match this query, and takes you to a summary buffer
showing these articles.  Articles may then be read, moved and deleted
using the usual commands.

   The ‘nnselect’ group made in this way is ‘ephemeral’: it will
disappear upon exit from the group.  However changes made in the group
are permanently reflected in the real groups from which the articles are
drawn.  If you want to create a _persistent_ group that sticks around
after exit from the summary buffer, you can call
‘gnus-group-make-search-group’ (bound to ‘G g’).

   Unlike persistent groups, ephemeral groups by default do not run
articles through the expiry process on exiting.  If you want expiry to
happen in ephemeral search groups you can customize the variable
‘nnselect-allow-ephemeral-expiry’.  In all cases the expiry process uses
the underlying group’s expiry parameters.

   So you just performed a search whose results are so fabulous you
wished you had done a persistent search rather than an ephemeral one?
No problem; you can create such a group by calling
‘gnus-summary-make-group-from-search’ (bound to ‘C-c C-p’) from the
ephemeral summary buffer.

   It is occasionally convenient to view articles found through
searching in their original group.  You can _warp_ (i.e., jump) to the
original group for the article on the current line with ‘A W’, aka
‘gnus-warp-to-article’.

   You say you want to search more than just the group on the current
line?  No problem: just process-mark the groups you want to search.  You
want even more?  Initiating a search with the cursor on a topic heading
will search all the groups under that topic.

   Still not enough?  OK, in the server buffer
‘gnus-group-read-ephemeral-search-group’ (here bound to ‘G’) will search
all groups from the server on the current line.  Too much?  Want to
ignore certain groups when searching, like spam groups?  Just customize
‘gnus-search-ignored-newsgroups’: groups matching this regexp will not
be searched.


File: gnus.info,  Node: Search Queries,  Next: nnmairix,  Prev: Creating Search Groups,  Up: Searching

# /. 9.3 Search Queries
======================

Gnus provides an optional unified search syntax that can be used across
all supported search engines.  This can be convenient in that you don’t
have to remember different search syntaxes; it’s also possible to mark
multiple groups indexed by different engines and issue a single search
against them.

   Set the option ‘gnus-search-use-parsed-queries’ to non-‘nil’ to
enable this—it is ‘nil’ by default.  Even if it is non-‘nil’, it’s still
possible to turn off parsing for a class of engines or a single engine
(*note Search Engines::), or a single search by giving a prefix argument
to any of the search commands.

   The search syntax is fairly simple: keys and values are separated by
a colon, multi-word values must be quoted, “and” is implicit, “or” is
explicit, “not” will negate the following expression (or keys can be
prefixed with a “-”),and parentheses can be used to group logical
sub-clauses.  For example:

     (from:john or from:peter) subject:"lunch tomorrow" since:3d

   The syntax is made to be accepted by a wide range of engines, and
thus will happily accept most input, valid or not.  Some terms will only
be meaningful to some engines; other engines will drop them silently.

   Key completion is offered on <TAB>, but it’s also possible to enter
the query with abbreviated keys, which will be expanded during parsing.
If a key is abbreviated to the point of ambiguity (for instance, “s:”
could be “subject:” or “since:”), an error will be raised.

   Supported keys include all the usual mail headers: “from”, “subject”,
“cc”, etc.  Other keys are:

‘body’
     The body of the message.
‘recipient’
     Equivalent to ‘to or cc or bcc’.
‘address’
     Equivalent to ‘from or recipient’.
‘id’
     The keys ‘message-id’ and ‘id’ are equivalent.
‘mark’
     Accepts ‘flag’, ‘seen’, ‘read’ or ‘replied’, or any of Gnus’
     single-letter representations of those marks, e.g. ‘mark:R’ for
     ‘read’.
‘tag’
     This is interpreted as ‘keyword’ for IMAP and ‘tag’ for notmuch.
‘attachment’
     Matches the attachment file name.
‘before’
     Date is exclusive; see below for date parsing.
‘after’
     Date is inclusive; can also use ‘since’.
‘thread’
     Return entire message threads, not just individual messages.
‘raw’
     Do not parse this particular search.
‘limit’
     Limit the results to this many messages.  When searching multiple
     groups this may give undesired results, as the limiting happens
     before sorting.
‘grep’
     Only applicable to “local index” engines such as mairix or notmuch.
     On systems with a grep command, additionally filter the results by
     using the value of this term as a grep regexp.

   Elisp-based contact management packages (e.g. BBDB or EBDB) can push
completion tables onto the variable ‘gnus-search-contact-tables’,
allowing auto-completion of contact names and addresses for keys like
‘from’ or ‘to’.

9.3.1 Date value parsing
------------------------

Date-type keys (see ‘gnus-search-date-keys’) will accept a wide variety
of values.  First, anything that ‘parse-time-string’ can parse is
acceptable.  Dates with missing values will be interpreted as the most
recent occurrence thereof: for instance “march 03” is the most recent
March 3rd.  Lastly, it’s possible to use relative specifications, such
as “3d” (three days ago).  This format also accepts w, m and y.

   When creating persistent search groups, the search is saved unparsed,
and re-parsed every time the group is updated.  So a permanent search
group with a query like:

     from:"my boss" mark:flag since:1w

   would always contain only messages from the past seven days.


File: gnus.info,  Node: nnmairix,  Next: nnir,  Prev: Search Queries,  Up: Searching

# /. 9.4 nnmairix
================

This section is now mostly obsolete, as mairix can be used as a regular
search engine, including persistent search groups, with ‘nnselect’.

   This paragraph describes how to set up mairix and the back end
‘nnmairix’ for indexing and searching your mail from within Gnus.
Additionally, you can create permanent “smart” groups which are bound to
mairix searches and are automatically updated.

* Menu:

* About mairix::                About the mairix mail search engine
* nnmairix requirements::       What you will need for using nnmairix
* What nnmairix does::          What does nnmairix actually do?
* Setting up mairix::           Set up your mairix installation
* Configuring nnmairix::        Set up the nnmairix back end
* nnmairix keyboard shortcuts::  List of available keyboard shortcuts
* Propagating marks::           How to propagate marks from nnmairix groups
* nnmairix tips and tricks::    Some tips, tricks and examples
* nnmairix caveats::            Some more stuff you might want to know


File: gnus.info,  Node: About mairix,  Next: nnmairix requirements,  Up: nnmairix

9.4.1 About mairix
------------------

Mairix is a tool for indexing and searching words in locally stored
mail.  It was written by Richard Curnow and is licensed under the GPL.
Mairix comes with most popular GNU/Linux distributions, but it also runs
under Windows (with cygwin), macOS and Solaris.  The website can be
found at <http://www.rpcurnow.force9.co.uk/mairix/index.html>

   Though mairix might not be as flexible as other search tools like
swish++ or namazu, it has the prime advantage of being incredibly fast.
On current systems, it can easily search through headers and message
bodies of thousands and thousands of mails in well under a second.
Building the database necessary for searching might take a minute or
two, but only has to be done once fully.  Afterwards, the updates are
done incrementally and therefore are really fast, too.  Additionally,
mairix is very easy to set up.

   For maximum speed though, mairix should be used with mails stored in
‘Maildir’ or ‘MH’ format (this includes the ‘nnml’ back end), although
it also works with mbox.  Mairix presents the search results by
populating a _virtual_ maildir/MH folder with symlinks which point to
the “real” message files (if mbox is used, copies are made).  Since
mairix already presents search results in such a virtual mail folder, it
is very well suited for using it as an external program for creating
_smart_ mail folders, which represent certain mail searches.


File: gnus.info,  Node: nnmairix requirements,  Next: What nnmairix does,  Prev: About mairix,  Up: nnmairix

9.4.2 nnmairix requirements
---------------------------

Mairix searches local mail—that means, mairix absolutely must have
direct access to your mail folders.  If your mail resides on another
server (e.g., an IMAP server) and you happen to have shell access,
‘nnmairix’ supports running mairix remotely, e.g., via ssh.

   Additionally, ‘nnmairix’ only supports the following Gnus back ends:
‘nnml’, ‘nnmaildir’, and ‘nnimap’.  You must use one of these back ends
for using ‘nnmairix’.  Other back ends, like ‘nnmbox’, ‘nnfolder’ or
‘nnmh’, won’t work.

   If you absolutely must use mbox and still want to use ‘nnmairix’, you
can set up a local IMAP server, which you then access via ‘nnimap’.
This is a rather massive setup for accessing some mbox files, so just
change to MH or Maildir already...  However, if you’re really, really
passionate about using mbox, you might want to look into the package
‘mairix.el’, which comes with Emacs.


File: gnus.info,  Node: What nnmairix does,  Next: Setting up mairix,  Prev: nnmairix requirements,  Up: nnmairix

9.4.3 What nnmairix does
------------------------

The back end ‘nnmairix’ enables you to call mairix from within Gnus,
either to query mairix with a search term or to update the database.
While visiting a message in the summary buffer, you can use several
pre-defined shortcuts for calling mairix, e.g., to quickly search for
all mails from the sender of the current message or to display the whole
thread associated with the message, even if the mails are in different
folders.

   Additionally, you can create permanent ‘nnmairix’ groups which are
bound to certain mairix searches.  This way, you can easily create a
group containing mails from a certain sender, with a certain subject
line or even for one specific thread based on the Message-ID.  If you
check for new mail in these folders (e.g., by pressing ‘g’ or ‘M-g’),
they automatically update themselves by calling mairix.

   You might ask why you need ‘nnmairix’ at all, since mairix already
creates the group, populates it with links to the mails so that you can
then access it with Gnus, right?  Well, this _might_ work, but often
does not—at least not without problems.  Most probably you will get
strange article counts, and sometimes you might see mails which Gnus
claims have already been canceled and are inaccessible.  This is due to
the fact that Gnus isn’t really amused when things are happening behind
its back.  Another problem can be the mail back end itself, e.g., if you
use mairix with an IMAP server (I had Dovecot complaining about corrupt
index files when mairix changed the contents of the search group).
Using ‘nnmairix’ should circumvent these problems.

   ‘nnmairix’ is not really a mail back end—it’s actually more like a
wrapper, sitting between a “real” mail back end where mairix stores the
searches and the Gnus front end.  You can choose between three different
mail back ends for the mairix folders: ‘nnml’, ‘nnmaildir’ or ‘nnimap’.
‘nnmairix’ will call the mairix binary so that the search results are
stored in folders named ‘zz_mairix-<NAME>-<NUMBER>’ on this mail back
end, but it will present these folders in the Gnus front end only with
‘<NAME>’.  You can use an existing mail back end where you already store
your mail, but if you’re uncomfortable with ‘nnmairix’ creating new mail
groups alongside your other mail, you can also create, e.g., a new
‘nnmaildir’ or ‘nnml’ server exclusively for mairix, but then make sure
those servers do not accidentally receive your new mail (*note nnmairix
caveats::).  A special case exists if you want to use mairix remotely on
an IMAP server with ‘nnimap’—here the mairix folders and your other mail
must be on the same ‘nnimap’ back end.


File: gnus.info,  Node: Setting up mairix,  Next: Configuring nnmairix,  Prev: What nnmairix does,  Up: nnmairix

9.4.4 Setting up mairix
-----------------------

First: create a backup of your mail folders (*note nnmairix caveats::).

   Setting up mairix is easy: simply create a ‘.mairixrc’ file with (at
least) the following entries:

     # Your Maildir/MH base folder
     base=~/Maildir

   This is the base folder for your mails.  All the following
directories are relative to this base folder.  If you want to use
‘nnmairix’ with ‘nnimap’, this base directory has to point to the mail
directory where the IMAP server stores the mail folders!

     maildir= ... your maildir folders which should be indexed ...
     mh= ... your nnml/mh folders which should be indexed ...
     mbox = ... your mbox files which should be indexed ...

   This specifies all your mail folders and mbox files (relative to the
base directory!)  you want to index with mairix.  Note that the ‘nnml’
back end saves mails in MH format, so you have to put those directories
in the ‘mh’ line.  See the example at the end of this section and
mairixrc’s man-page for further details.

     omit=zz_mairix-*

   This should make sure that you don’t accidentally index the mairix
search results.  You can change the prefix of these folders with the
variable ‘nnmairix-group-prefix’.

     mformat= ... 'maildir' or 'mh' ...
     database= ... location of database file ...

   The ‘format’ setting specifies the output format for the mairix
search folder.  Set this to ‘mh’ if you want to access search results
with ‘nnml’.  Otherwise choose ‘maildir’.

   To summarize, here is my shortened ‘.mairixrc’ file as an example:

     base=~/Maildir
     maildir=.personal:.work:.logcheck:.sent
     mh=../Mail/nnml/*...
     mbox=../mboxmail/mailarchive_year*
     mformat=maildir
     omit=zz_mairix-*
     database=~/.mairixdatabase

   In this case, the base directory is ‘~/Maildir’, where all my Maildir
folders are stored.  As you can see, the folders are separated by
colons.  If you wonder why every folder begins with a dot: this is
because I use Dovecot as IMAP server, which again uses ‘Maildir++’
folders.  For testing nnmairix, I also have some ‘nnml’ mail, which is
saved in ‘~/Mail/nnml’.  Since this has to be specified relative to the
‘base’ directory, the ‘../Mail’ notation is needed.  Note that the line
ends in ‘*...’, which means to recursively scan all files under this
directory.  Without the three dots, the wildcard ‘*’ will not work
recursively.  I also have some old mbox files with archived mail lying
around in ‘~/mboxmail’.  The other lines should be obvious.

   See the man page for ‘mairixrc’ for details and further options,
especially regarding wildcard usage, which may be a little different
than you are used to.

   Now simply call ‘mairix’ to create the index for the first time.
Note that this may take a few minutes, but every following index will do
the updates incrementally and hence is very fast.


File: gnus.info,  Node: Configuring nnmairix,  Next: nnmairix keyboard shortcuts,  Prev: Setting up mairix,  Up: nnmairix

9.4.5 Configuring nnmairix
--------------------------

In group mode, type ‘G b c’
(‘nnmairix-create-server-and-default-group’).  This will ask you for all
necessary information and create a ‘nnmairix’ server as a foreign
server.  You will have to specify the following:

   • The *name* of the ‘nnmairix’ server—choose whatever you want.

   • The name of the *back end server* where mairix should store its
     searches.  This must be a full server name, like ‘nnml:mymail’.
     Just hit ‘<TAB>’ to see the available servers.  Currently, servers
     which are accessed through ‘nnmaildir’, ‘nnimap’ and ‘nnml’ are
     supported.  As explained above, for locally stored mails, this can
     be an existing server where you store your mails.  However, you can
     also create, e.g., a new ‘nnmaildir’ or ‘nnml’ server exclusively
     for ‘nnmairix’ in your secondary select methods (*note Finding the
     News::).  If you use a secondary ‘nnml’ server just for mairix,
     make sure that you explicitly set the server variable
     ‘nnml-get-new-mail’ to ‘nil’, or you might lose mail (*note
     nnmairix caveats::).  If you want to use mairix remotely on an IMAP
     server, you have to choose the corresponding ‘nnimap’ server here.

   • The *command* to call the mairix binary.  This will usually just be
     ‘mairix’, but you can also choose something like ‘ssh SERVER
     mairix’ if you want to call mairix remotely, e.g., on your IMAP
     server.  If you want to add some default options to mairix, you
     could do this here, but better use the variable
     ‘nnmairix-mairix-search-options’ instead.

   • The name of the *default search group*.  This will be the group
     where all temporary mairix searches are stored, i.e., all searches
     which are not bound to permanent ‘nnmairix’ groups.  Choose
     whatever you like.

   • If the mail back end is ‘nnimap’ or ‘nnmaildir’, you will be asked
     if you work with *Maildir++*, i.e., with hidden maildir folders
     (=beginning with a dot).  For example, you have to answer ‘yes’
     here if you work with the Dovecot IMAP server.  Otherwise, you
     should answer ‘no’ here.


File: gnus.info,  Node: nnmairix keyboard shortcuts,  Next: Propagating marks,  Prev: Configuring nnmairix,  Up: nnmairix

9.4.6 nnmairix keyboard shortcuts
---------------------------------

In group mode:

‘G b c’
     Creates ‘nnmairix’ server and default search group for this server
     (‘nnmairix-create-server-and-default-group’).  You should have done
     this by now (*note Configuring nnmairix::).

‘G b s’
     Prompts for query which is then sent to the mairix binary.  Search
     results are put into the default search group which is
     automatically displayed (‘nnmairix-search’).

‘G b m’
     Allows you to create a mairix search or a permanent group more
     comfortably using graphical widgets, similar to a customization
     group.  Just try it to see how it works (‘nnmairix-widget-search’).

‘G b i’
     Another command for creating a mairix query more comfortably, but
     uses only the minibuffer (‘nnmairix-search-interactive’).

‘G b g’
     Creates a permanent group which is associated with a search query
     (‘nnmairix-create-search-group’).  The ‘nnmairix’ back end
     automatically calls mairix when you update this group with ‘g’ or
     ‘M-g’.

‘G b q’
     Changes the search query for the ‘nnmairix’ group under cursor
     (‘nnmairix-group-change-query-this-group’).

‘G b t’
     Toggles the ’threads’ parameter for the ‘nnmairix’ group under
     cursor, i.e., if you want see the whole threads of the found
     messages (‘nnmairix-group-toggle-threads-this-group’).

‘G b u’
     Calls mairix binary for updating the database
     (‘nnmairix-update-database’).  The default parameters are ‘-F’ and
     ‘-Q’ for making this as fast as possible (see variable
     ‘nnmairix-mairix-update-options’ for defining these default
     options).

‘G b r’
     Keep articles in this ‘nnmairix’ group always read or unread, or
     leave the marks unchanged
     (‘nnmairix-group-toggle-readmarks-this-group’).

‘G b d’
     Recreate ‘nnmairix’ group on the “real” mail back end
     (‘nnmairix-group-delete-recreate-this-group’).  You can do this if
     you always get wrong article counts with a ‘nnmairix’ group.

‘G b a’
     Toggles the ‘allow-fast’ parameters for group under cursor
     (‘nnmairix-group-toggle-allowfast-this-group’).  The default
     behavior of ‘nnmairix’ is to do a mairix search every time you
     update or enter the group.  With the ‘allow-fast’ parameter set,
     mairix will only be called when you explicitly update the group,
     but not upon entering.  This makes entering the group faster, but
     it may also lead to dangling symlinks if something changed between
     updating and entering the group which is not yet in the mairix
     database.

‘G b p’
     Toggle marks propagation for this group
     (‘nnmairix-group-toggle-propmarks-this-group’).  (*note Propagating
     marks::).

‘G b o’
     Manually propagate marks (‘nnmairix-propagate-marks’); needed only
     when ‘nnmairix-propagate-marks-upon-close’ is set to ‘nil’.

   In summary mode:

‘G G m’
     Allows you to create a mairix query or group based on the current
     message using graphical widgets (same as ‘nnmairix-widget-search’)
     (‘nnmairix-widget-search-from-this-article’).

‘G G g’
     Interactively creates a new search group with query based on the
     current message, but uses the minibuffer instead of graphical
     widgets (‘nnmairix-create-search-group-from-message’).

‘G G t’
     Searches thread for the current article
     (‘nnmairix-search-thread-this-article’).  This is effectively a
     shortcut for calling ‘nnmairix-search’ with ‘m:msgid’ of the
     current article and enabled threads.

‘G G f’
     Searches all messages from sender of the current article
     (‘nnmairix-search-from-this-article’).  This is a shortcut for
     calling ‘nnmairix-search’ with ‘f:From’.

‘G G o’
     (Only in ‘nnmairix’ groups!)  Tries determine the group this
     article originally came from and displays the article in this
     group, so that, e.g., replying to this article the correct posting
     styles/group parameters are applied
     (‘nnmairix-goto-original-article’).  This function will use the
     registry if available, but can also parse the article file name as
     a fallback method.

‘G G u’
     Remove possibly existing tick mark from original article
     (‘nnmairix-remove-tick-mark-original-article’).  (*note nnmairix
     tips and tricks::).


File: gnus.info,  Node: Propagating marks,  Next: nnmairix tips and tricks,  Prev: nnmairix keyboard shortcuts,  Up: nnmairix

9.4.7 Propagating marks
-----------------------

First of: you really need a patched mairix binary for using the marks
propagation feature efficiently.  Otherwise, you would have to update
the mairix database all the time.  You can get the patch at

   <http://www.randomsample.de/mairix-maildir-patch.tar>

   You need the mairix v0.21 source code for this patch; everything else
is explained in the accompanied readme file.  If you don’t want to use
marks propagation, you don’t have to apply these patches, but they also
fix some annoyances regarding changing maildir flags, so it might still
be useful to you.

   With the patched mairix binary, you can use ‘nnmairix’ as an
alternative to mail splitting (*note Fancy Mail Splitting::).  For
example, instead of splitting all mails from ‘david@foobar.com’ into a
group, you can simply create a search group with the query
‘f:david@foobar.com’.  This is actually what “smart folders” are all
about: simply put everything in one mail folder and dynamically create
searches instead of splitting.  This is more flexible, since you can
dynamically change your folders any time you want to.  This also implies
that you will usually read your mails in the ‘nnmairix’ groups instead
of your “real” mail groups.

   There is one problem, though: say you got a new mail from
‘david@foobar.com’; it will now show up in two groups, the “real” group
(your INBOX, for example) and in the ‘nnmairix’ search group (provided
you have updated the mairix database).  Now you enter the ‘nnmairix’
group and read the mail.  The mail will be marked as read, but only in
the ‘nnmairix’ group—in the “real” mail group it will be still shown as
unread.

   You could now catch up the mail group (*note Group Data::), but this
is tedious and error prone, since you may overlook mails you don’t have
created ‘nnmairix’ groups for.  Of course, you could first use
‘nnmairix-goto-original-article’ (*note nnmairix keyboard shortcuts::)
and then read the mail in the original group, but that’s even more
cumbersome.

   Clearly, the easiest way would be if marks could somehow be
automatically set for the original article.  This is exactly what _marks
propagation_ is about.

   Marks propagation is inactive by default.  You can activate it for a
certain ‘nnmairix’ group with
‘nnmairix-group-toggle-propmarks-this-group’ (bound to ‘G b p’).  This
function will warn you if you try to use it with your default search
group; the reason is that the default search group is used for temporary
searches, and it’s easy to accidentally propagate marks from this group.
However, you can ignore this warning if you really want to.

   With marks propagation enabled, all the marks you set in a ‘nnmairix’
group should now be propagated to the original article.  For example,
you can now tick an article (by default with ‘!’) and this mark should
magically be set for the original article, too.

   A few more remarks which you may or may not want to know:

   Marks will not be set immediately, but only upon closing a group.
This not only makes marks propagation faster, it also avoids problems
with dangling symlinks when dealing with maildir files (since changing
flags will change the file name).  You can also control when to
propagate marks via ‘nnmairix-propagate-marks-upon-close’ (see the
doc-string for details).

   Obviously, ‘nnmairix’ will have to look up the original group for
every article you want to set marks for.  If available, ‘nnmairix’ will
first use the registry for determining the original group.  The registry
is very fast, hence you should really, really enable the registry when
using marks propagation.  If you don’t have to worry about RAM and disc
space, set ‘gnus-registry-max-entries’ to a large enough value; to be on
the safe side, choose roughly the amount of mails you index with mairix.

   If you don’t want to use the registry or the registry hasn’t seen the
original article yet, ‘nnmairix’ will use an additional mairix search
for determining the file name of the article.  This, of course, is way
slower than the registry—if you set hundreds or even thousands of marks
this way, it might take some time.  You can avoid this situation by
setting ‘nnmairix-only-use-registry’ to ‘t’.

   Maybe you also want to propagate marks the other way round, i.e., if
you tick an article in a "real" mail group, you’d like to have the same
article in a ‘nnmairix’ group ticked, too.  For several good reasons,
this can only be done efficiently if you use maildir.  To immediately
contradict myself, let me mention that it WON’T work with ‘nnmaildir’,
since ‘nnmaildir’ stores the marks externally and not in the file name.
Therefore, propagating marks to ‘nnmairix’ groups will usually only work
if you use an IMAP server which uses maildir as its file format.

   If you work with this setup, just set
‘nnmairix-propagate-marks-to-nnmairix-groups’ to ‘t’ and see what
happens.  If you don’t like what you see, just set it to ‘nil’ again.
One problem might be that you get a wrong number of unread articles;
this usually happens when you delete or expire articles in the original
groups.  When this happens, you can recreate the ‘nnmairix’ group on the
back end using ‘G b d’.


File: gnus.info,  Node: nnmairix tips and tricks,  Next: nnmairix caveats,  Prev: Propagating marks,  Up: nnmairix

9.4.8 nnmairix tips and tricks
------------------------------

   • Checking Mail

     I put all my important mail groups at group level 1.  The mairix
     groups have group level 5, so they do not get checked at start up
     (*note Group Levels::).

     I use the following to check for mails:

          (defun my-check-mail-mairix-update (level)
            (interactive "P")
            ;; if no prefix given, set level=1
            (gnus-group-get-new-news (or level 1))
            (nnmairix-update-groups "mairixsearch" t t)
            (gnus-group-list-groups))

          (define-key gnus-group-mode-map "g" 'my-check-mail-mairix-update)

     Instead of ‘"mairixsearch"’ use the name of your ‘nnmairix’ server.
     See the doc string for ‘nnmairix-update-groups’ for details.

   • Example: search group for ticked articles

     For example, you can create a group for all ticked articles, where
     the articles always stay unread:

     Hit ‘G b g’, enter group name (e.g., ‘important’), use ‘F:f’ as
     query and do not include threads.

     Now activate marks propagation for this group by using ‘G b p’.
     Then activate the always-unread feature by using ‘G b r’ twice.

     So far so good—but how do you remove the tick marks in the
     ‘nnmairix’ group?  There are two options: You may simply use
     ‘nnmairix-remove-tick-mark-original-article’ (bound to ‘G G u’) to
     remove tick marks from the original article.  The other possibility
     is to set ‘nnmairix-propagate-marks-to-nnmairix-groups’ to ‘t’, but
     see the above comments about this option.  If it works for you, the
     tick marks should also exist in the ‘nnmairix’ group and you can
     remove them as usual, e.g., by marking an article as read.

     When you have removed a tick mark from the original article, this
     article should vanish from the ‘nnmairix’ group after you have
     updated the mairix database and updated the group.  Fortunately,
     there is a function for doing exactly that:
     ‘nnmairix-update-groups’.  See the previous code snippet and the
     doc string for details.

   • Dealing with auto-subscription of mail groups

     As described before, all ‘nnmairix’ groups are in fact stored on
     the mail back end in the form ‘zz_mairix-<NAME>-<NUMBER>’.  You can
     see them when you enter the back end server in the server buffer.
     You should not subscribe these groups!  Unfortunately, these groups
     will usually get _auto-subscribed_ when you use ‘nnmaildir’ or
     ‘nnml’, i.e., you will suddenly see groups of the form ‘zz_mairix*’
     pop up in your group buffer.  If this happens to you, simply kill
     these groups with C-k.  For avoiding this, turn off
     auto-subscription completely by setting the variable
     ‘gnus-auto-subscribed-groups’ to ‘nil’ (*note Filtering New
     Groups::), or if you like to keep this feature use the following
     kludge for turning it off for all groups beginning with ‘zz_’:

          (setq gnus-auto-subscribed-groups
                "^\\(nnml\\|nnfolder\\|nnmbox\\|nnmh\\|nnbabyl\\|nnmaildir\\).*:\\([^z]\\|z$\\|\\z[^z]\\|zz$\\|zz[^_]\\|zz_$\\).*")


File: gnus.info,  Node: nnmairix caveats,  Prev: nnmairix tips and tricks,  Up: nnmairix

9.4.9 nnmairix caveats
----------------------

   • You can create a secondary ‘nnml’ server just for nnmairix, but
     then you have to explicitly set the corresponding server variable
     ‘nnml-get-new-mail’ to ‘nil’.  Otherwise, new mail might get put
     into this secondary server (and would never show up again).  Here’s
     an example server definition:

          (nnml "mairix" (nnml-directory "mairix") (nnml-get-new-mail nil))

     (The ‘nnmaildir’ back end also has a server variable
     ‘get-new-mail’, but its default value is ‘nil’, so you don’t have
     to explicitly set it if you use a ‘nnmaildir’ server just for
     mairix.)

   • If you use the Gnus registry: don’t use the registry with
     ‘nnmairix’ groups (put them in ‘gnus-registry-unfollowed-groups’;
     this is the default).  Be _extra careful_ if you use
     ‘gnus-registry-split-fancy-with-parent’; mails which are split into
     ‘nnmairix’ groups are usually gone for good as soon as you check
     the group for new mail (yes, it has happened to me...).

   • Therefore: _Never ever_ put “real” mails into ‘nnmairix’ groups
     (you shouldn’t be able to, anyway).

   • If you use the Gnus agent (*note Gnus Unplugged::): don’t agentize
     ‘nnmairix’ groups (though I have no idea what happens if you do).

   • mairix does only support us-ascii characters.

   • ‘nnmairix’ uses a rather brute force method to force Gnus to
     completely reread the group on the mail back end after mairix was
     called—it simply deletes and re-creates the group on the mail back
     end.  So far, this has worked for me without any problems, and I
     don’t see how ‘nnmairix’ could delete other mail groups than its
     own, but anyway: you really should have a backup of your mail
     folders.

   • All necessary information is stored in the group parameters (*note
     Group Parameters::).  This has the advantage that no active file is
     needed, but also implies that when you kill a ‘nnmairix’ group, it
     is gone for good.

   • If you create and kill a lot of ‘nnmairix’ groups, the
     “zz_mairix-*” groups will accumulate on the mail back end server.
     To delete old groups which are no longer needed, call
     ‘nnmairix-purge-old-groups’.  Note that this assumes that you don’t
     save any “real” mail in folders of the form
     ‘zz_mairix-<NAME>-<NUMBER>’.  You can change the prefix of
     ‘nnmairix’ groups by changing the variable ‘nnmairix-group-prefix’.

   • The following only applies if you _don’t_ use the mentioned patch
     for mairix (*note Propagating marks::):

     A problem can occur when using ‘nnmairix’ with maildir folders and
     comes with the fact that maildir stores mail flags like ‘Seen’ or
     ‘Replied’ by appending chars ‘S’ and ‘R’ to the message file name,
     respectively.  This implies that currently you would have to update
     the mairix database not only when new mail arrives, but also when
     mail flags are changing.  The same applies to new mails which are
     indexed while they are still in the ‘new’ folder but then get moved
     to ‘cur’ when Gnus has seen the mail.  If you don’t update the
     database after this has happened, a mairix query can lead to
     symlinks pointing to non-existing files.  In Gnus, these messages
     will usually appear with “(none)” entries in the header and can’t
     be accessed.  If this happens to you, using ‘G b u’ and updating
     the group will usually fix this.


File: gnus.info,  Node: nnir,  Prev: nnmairix,  Up: Searching

# /. 9.5 Migrating from nnir
===========================

Gnus’ previous search engine was called nnir, and is obsolete as of
Emacs version 28.  If you’ve upgraded Emacs and are now getting
obsolete-variable warnings about ‘nnir-*’ variables, migration is fairly
straightforward.  In addition to the variables raised by the warnings,
all previous engine-specific variables can be updated by simply
replacing the ‘nnir-’ prefix with ‘gnus-search-’.  For instance,
‘nnir-notmuch-program’ is now ‘gnus-search-notmuch-program’.


File: gnus.info,  Node: Various,  Next: The End,  Prev: Searching,  Up: Top

# /. 10 Various
**************

* Menu:

* Process/Prefix::              A convention used by many treatment commands.
* Interactive::                 Making Gnus ask you many questions.
* Symbolic Prefixes::           How to supply some Gnus functions with options.
* Formatting Variables::        You can specify what buffers should look like.
* Window Layout::               Configuring the Gnus buffer windows.
* Tabbed Interface::            Configuring the Gnus tabs.
* Faces and Fonts::             How to change how faces look.
* Mode Lines::                  Displaying information in the mode lines.
* Highlighting and Menus::      Making buffers look all nice and cozy.
* Daemons::                     Gnus can do things behind your back.
* Undo::                        Some actions can be undone.
* Predicate Specifiers::        Specifying predicates.
* Moderation::                  What to do if you’re a moderator.
* Fetching a Group::            Starting Gnus just to read a group.
* Image Enhancements::          Emacs can display images.
* Fuzzy Matching::              What’s the big fuzz?
* Thwarting Email Spam::        Simple ways to avoid unsolicited commercial email.
* Spam Package::                A package for filtering and processing spam.
* The Gnus Registry::           A package for tracking messages by Message-ID.
* The Gnus Cloud::              A package for synchronizing Gnus marks.
* D-Bus Integration::           Closing Gnus servers on system sleep.
* Other modes::                 Interaction with other modes.
* Various Various::             Things that are really various.


File: gnus.info,  Node: Process/Prefix,  Next: Interactive,  Up: Various

# /. 10.1 Process/Prefix
=======================

Many functions, among them functions for moving, decoding and saving
articles, use what is known as the “Process/Prefix convention”.

   This is a method for figuring out what articles the user wants the
command to be performed on.

   It goes like this:

   If the numeric prefix is N, perform the operation on the next N
articles, starting with the current one.  If the numeric prefix is
negative, perform the operation on the previous N articles, starting
with the current one.

   If ‘transient-mark-mode’ in non-‘nil’ and the region is active, all
articles in the region will be worked upon.

   If there is no numeric prefix, but some articles are marked with the
process mark, perform the operation on the articles marked with the
process mark.

   If there is neither a numeric prefix nor any articles marked with the
process mark, just perform the operation on the current article.

   Quite simple, really, but it needs to be made clear so that surprises
are avoided.

   Commands that react to the process mark will push the current list of
process marked articles onto a stack and will then clear all process
marked articles.  You can restore the previous configuration with the ‘M
P y’ command (*note Setting Process Marks::).

   One thing that seems to shock & horrify lots of people is that, for
instance, ‘3 d’ does exactly the same as ‘d’ ‘d’ ‘d’.  Since each ‘d’
(which marks the current article as read) by default goes to the next
unread article after marking, this means that ‘3 d’ will mark the next
three unread articles as read, no matter what the summary buffer looks
like.  Set ‘gnus-summary-goto-unread’ to ‘nil’ for a more
straightforward action.

   Many commands do not use the process/prefix convention.  All commands
that do explicitly say so in this manual.  To apply the process/prefix
convention to commands that do not use it, you can use the ‘M-&’
command.  For instance, to mark all the articles in the group as
expirable, you could say ‘M P b M-& E’.


File: gnus.info,  Node: Interactive,  Next: Symbolic Prefixes,  Prev: Process/Prefix,  Up: Various

# /. 10.2 Interactive
====================

‘gnus-novice-user’
     If this variable is non-‘nil’, you are either a newcomer to the
     World of Usenet, or you are very cautious, which is a nice thing to
     be, really.  You will be given questions of the type “Are you sure
     you want to do this?” before doing anything dangerous.  This is ‘t’
     by default.

‘gnus-expert-user’
     If this variable is non-‘nil’, you will seldom be asked any
     questions by Gnus.  It will simply assume you know what you’re
     doing, no matter how strange.  For example, quitting Gnus, exiting
     a group without an update, catching up with a group, deleting
     expired articles, and replying by mail to a news message will not
     require confirmation.

‘gnus-interactive-catchup’
     Require confirmation before catching up a group if non-‘nil’.  It
     is ‘t’ by default.

‘gnus-interactive-exit’
     If non-‘nil’, require a confirmation when exiting Gnus.  If
     ‘quiet’, update any active summary buffers automatically without
     querying.  The default value is ‘t’.


File: gnus.info,  Node: Symbolic Prefixes,  Next: Formatting Variables,  Prev: Interactive,  Up: Various

# /. 10.3 Symbolic Prefixes
==========================

Quite a lot of Emacs commands react to the (numeric) prefix.  For
instance, ‘C-u 4 C-f’ moves point four characters forward, and ‘C-u 9 0
0 I s s p’ adds a permanent ‘Subject’ substring score rule of 900 to the
current article.

   This is all nice and well, but what if you want to give a command
some additional information?  Well, what most commands do is interpret
the “raw” prefix in some special way.  ‘C-u 0 C-x C-s’ means that one
doesn’t want a backup file to be created when saving the current buffer,
for instance.  But what if you want to save without making a backup
file, and you want Emacs to flash lights and play a nice tune at the
same time?  You can’t, and you’re probably perfectly happy that way.

   I’m not, so I’ve added a second prefix—the “symbolic prefix”.  The
prefix key is ‘M-i’ (‘gnus-symbolic-argument’), and the next character
typed in is the value.  You can stack as many ‘M-i’ prefixes as you
want.  ‘M-i a C-M-u’ means “feed the ‘C-M-u’ command the symbolic prefix
‘a’”.  ‘M-i a M-i b C-M-u’ means “feed the ‘C-M-u’ command the symbolic
prefixes ‘a’ and ‘b’”.  You get the drift.

   Typing in symbolic prefixes to commands that don’t accept them
doesn’t hurt, but it doesn’t do any good either.  Currently not many
Gnus functions make use of the symbolic prefix.

   If you’re interested in how Gnus implements this, *note Extended
Interactive::.


File: gnus.info,  Node: Formatting Variables,  Next: Window Layout,  Prev: Symbolic Prefixes,  Up: Various

# /. 10.4 Formatting Variables
=============================

Throughout this manual you’ve probably noticed lots of variables called
things like ‘gnus-group-line-format’ and
‘gnus-summary-mode-line-format’.  These control how Gnus is to output
lines in the various buffers.  There’s quite a lot of them.
Fortunately, they all use the same syntax, so there’s not that much to
be annoyed by.

   Gnus does not use the font locking machinery used by most modes in
Emacs, so switching ‘font-lock-mode’ on in the Gnus
group/summary/article buffers usually doesn’t do anything useful—instead
it’ll just mess up the faces that Gnus has already put in the buffer.
(This is also the case for other minor modes that use the font locking
machinery, like ‘whitespace-mode’.)

   Here’s an example format spec (from the group buffer): ‘%M%S%5y:
%(%g%)\n’.  We see that it is indeed extremely ugly, and that there are
lots of percentages everywhere.

* Menu:

* Formatting Basics::           A formatting variable is basically a format string.
* Mode Line Formatting::        Some rules about mode line formatting variables.
* Advanced Formatting::         Modifying output in various ways.
* User-Defined Specs::          Having Gnus call your own functions.
* Formatting Fonts::            Making the formatting look colorful and nice.
* Positioning Point::           Moving point to a position after an operation.
* Tabulation::                  Tabulating your output.

   Currently Gnus uses the following formatting variables:
‘gnus-group-line-format’, ‘gnus-summary-line-format’,
‘gnus-server-line-format’, ‘gnus-topic-line-format’,
‘gnus-group-mode-line-format’, ‘gnus-summary-mode-line-format’,
‘gnus-article-mode-line-format’, ‘gnus-server-mode-line-format’, and
‘gnus-summary-pick-line-format’.

   All these format variables can also be arbitrary elisp forms.  In
that case, they will be ‘eval’ed to insert the required lines.

   Gnus includes a command to help you while creating your own format
specs.  ‘M-x gnus-update-format’ will ‘eval’ the current form, update
the spec in question and pop you to a buffer where you can examine the
resulting Lisp code to be run to generate the line.


File: gnus.info,  Node: Formatting Basics,  Next: Mode Line Formatting,  Up: Formatting Variables

10.4.1 Formatting Basics
------------------------

Each ‘%’ element will be replaced by some string or other when the
buffer in question is generated.  ‘%5y’ means “insert the ‘y’ spec, and
pad with spaces to get a 5-character field”.

   As with normal C and Emacs Lisp formatting strings, the numerical
modifier between the ‘%’ and the formatting type character will “pad”
the output so that it is always at least that long.  ‘%5y’ will make the
field always (at least) five characters wide by padding with spaces to
the left.  If you say ‘%-5y’, it will pad to the right instead.

   You may also wish to limit the length of the field to protect against
particularly wide values.  For that you can say ‘%4,6y’, which means
that the field will never be more than 6 characters wide and never less
than 4 characters wide.

   Also Gnus supports some extended format specifications, such as
‘%&user-date;’.


File: gnus.info,  Node: Mode Line Formatting,  Next: Advanced Formatting,  Prev: Formatting Basics,  Up: Formatting Variables

10.4.2 Mode Line Formatting
---------------------------

Mode line formatting variables (e.g., ‘gnus-summary-mode-line-format’)
follow the same rules as other, buffer line oriented formatting
variables (*note Formatting Basics::) with the following two
differences:

  1. There must be no newline (‘\n’) at the end.

  2. The special ‘%%b’ spec can be used to display the buffer name.
     Well, it’s no spec at all, really—‘%%’ is just a way to quote ‘%’
     to allow it to pass through the formatting machinery unmangled, so
     that Emacs receives ‘%b’, which is something the Emacs mode line
     display interprets to mean “show the buffer name”.  For a full list
     of mode line specs Emacs understands, see the documentation of the
     ‘mode-line-format’ variable.


File: gnus.info,  Node: Advanced Formatting,  Next: User-Defined Specs,  Prev: Mode Line Formatting,  Up: Formatting Variables

10.4.3 Advanced Formatting
--------------------------

It is frequently useful to post-process the fields in some way.
Padding, limiting, cutting off parts and suppressing certain values can
be achieved by using “tilde modifiers”.  A typical tilde spec might look
like ‘%~(cut 3)~(ignore "0")y’.

   These are the valid modifiers:

‘pad’
‘pad-left’
     Pad the field to the left with spaces until it reaches the required
     length.

‘pad-right’
     Pad the field to the right with spaces until it reaches the
     required length.

‘max’
‘max-left’
     Cut off characters from the left until it reaches the specified
     length.

‘max-right’
     Cut off characters from the right until it reaches the specified
     length.

‘cut’
‘cut-left’
     Cut off the specified number of characters from the left.

‘cut-right’
     Cut off the specified number of characters from the right.

‘ignore’
     Return an empty string if the field is equal to the specified
     value.

‘form’
     Use the specified form as the field value when the ‘@’ spec is
     used.

     Here’s an example:

          "~(form (current-time-string))@"

   Let’s take an example.  The ‘%o’ spec in the summary mode lines will
return a date in compact ISO8601 format—‘19960809T230410’.  This is
quite a mouthful, so we want to shave off the century number and the
time, leaving us with a six-character date.  That would be ‘%~(cut-left
2)~(max-right 6)~(pad 6)o’.  (Cutting is done before maxing, and we need
the padding to ensure that the date is never less than 6 characters to
make it look nice in columns.)

   Ignoring is done first; then cutting; then maxing; and then as the
very last operation, padding.


File: gnus.info,  Node: User-Defined Specs,  Next: Formatting Fonts,  Prev: Advanced Formatting,  Up: Formatting Variables

10.4.4 User-Defined Specs
-------------------------

All the specs allow for inserting user defined specifiers—‘u’.  The next
character in the format string should be a letter.  Gnus will call the
function ‘gnus-user-format-function-’‘X’, where ‘X’ is the letter
following ‘%u’.  The function will be passed a single parameter—what the
parameter means depends on what buffer it’s being called from.  The
function should return a string, which will be inserted into the buffer
just like information from any other specifier.  This function may also
be called with dummy values, so it should protect against that.

   Also Gnus supports extended user-defined specs, such as ‘%u&foo;’.
Gnus will call the function ‘gnus-user-format-function-’‘foo’.

   You can also use tilde modifiers (*note Advanced Formatting:: to
achieve much the same without defining new functions.  Here’s an
example: ‘%~(form (count-lines (point-min) (point)))@’.  The form given
here will be evaluated to yield the current line number, and then
inserted.


File: gnus.info,  Node: Formatting Fonts,  Next: Positioning Point,  Prev: User-Defined Specs,  Up: Formatting Variables

10.4.5 Formatting Fonts
-----------------------

There are specs for highlighting, and these are shared by all the format
variables.  Text inside the ‘%(’ and ‘%)’ specifiers will get the
special ‘mouse-face’ property set, which means that it will be
highlighted (with ‘gnus-mouse-face’) when you put the mouse pointer over
it.

   Text inside the ‘%{’ and ‘%}’ specifiers will have their normal faces
set using ‘gnus-face-0’, which is ‘bold’ by default.  If you say ‘%1{’,
you’ll get ‘gnus-face-1’ instead, and so on.  Create as many faces as
you wish.  The same goes for the ‘mouse-face’ specs—you can say
‘%3(hello%)’ to have ‘hello’ mouse-highlighted with ‘gnus-mouse-face-3’.

   Text inside the ‘%<<’ and ‘%>>’ specifiers will get the special
‘balloon-help’ property set to ‘gnus-balloon-face-0’.  If you say
‘%1<<’, you’ll get ‘gnus-balloon-face-1’ and so on.  The
‘gnus-balloon-face-*’ variables should be either strings or symbols
naming functions that return a string.  When the mouse passes over text
with this property set, a balloon window will appear and display the
string.  Please refer to *note Tooltips: (emacs)Tooltips. for more
information on this.  (For technical reasons, the guillemets have been
approximated as ‘<<’ and ‘>>’ in this paragraph.)

   Here’s an alternative recipe for the group buffer:

     ;; Create three face types.
     (setq gnus-face-1 'bold)
     (setq gnus-face-3 'italic)

     ;; We want the article count to be in
     ;; a bold and green face.  So we create
     ;; a new face called ‘my-green-bold’.
     (copy-face 'bold 'my-green-bold)
     ;; Set the color.
     (set-face-foreground 'my-green-bold "ForestGreen")
     (setq gnus-face-2 'my-green-bold)

     ;; Set the new & fancy format.
     (setq gnus-group-line-format
           "%M%S%3{%5y%}%2[:%] %(%1{%g%}%)\n")

   I’m sure you’ll be able to use this scheme to create totally
unreadable and extremely vulgar displays.  Have fun!

   Note that the ‘%(’ specs (and friends) do not make any sense on the
mode-line variables.


File: gnus.info,  Node: Positioning Point,  Next: Tabulation,  Prev: Formatting Fonts,  Up: Formatting Variables

10.4.6 Positioning Point
------------------------

Gnus usually moves point to a pre-defined place on each line in most
buffers.  By default, point move to the first colon character on the
line.  You can customize this behavior in three different ways.

   You can move the colon character to somewhere else on the line.

   You can redefine the function that moves the point to the colon.  The
function is called ‘gnus-goto-colon’.

   But perhaps the most convenient way to deal with this, if you don’t
want to have a colon in your line, is to use the ‘%*’ specifier.  If you
put a ‘%*’ somewhere in your format line definition, Gnus will place
point there.


File: gnus.info,  Node: Tabulation,  Prev: Positioning Point,  Up: Formatting Variables

10.4.7 Tabulation
-----------------

You can usually line up your displays by padding and cutting your
strings.  However, when combining various strings of different size, it
can often be more convenient to just output the strings, and then worry
about lining up the following text afterwards.

   To do that, Gnus supplies tabulator specs—‘%=’.  There are two
different types—“hard tabulators” and “soft tabulators”.

   ‘%50=’ will insert space characters to pad the line up to column 50.
If the text is already past column 50, nothing will be inserted.  This
is the soft tabulator.

   ‘%-50=’ will insert space characters to pad the line up to column 50.
If the text is already past column 50, the excess text past column 50
will be removed.  This is the hard tabulator.


File: gnus.info,  Node: Window Layout,  Next: Tabbed Interface,  Prev: Formatting Variables,  Up: Various

# /. 10.5 Window Layout
======================

No, there’s nothing here about X, so be quiet.

   If ‘gnus-use-full-window’ non-‘nil’, Gnus will delete all other
windows and occupy the entire Emacs screen by itself.  It is ‘t’ by
default.

   Setting this variable to ‘nil’ kinda works, but there are glitches.
Use at your own peril.

   ‘gnus-buffer-configuration’ describes how much space each Gnus buffer
should be given.  Here’s an excerpt of this variable:

     ((group (vertical 1.0 (group 1.0 point)))
      (article (vertical 1.0 (summary 0.25 point)
                             (article 1.0))))

   This is an alist.  The “key” is a symbol that names some action or
other.  For instance, when displaying the group buffer, the window
configuration function will use ‘group’ as the key.  A full list of
possible names is listed below.

   The “value” (i.e., the “split”) says how much space each buffer
should occupy.  To take the ‘article’ split as an example:

     (article (vertical 1.0 (summary 0.25 point)
                            (article 1.0)))

   This “split” says that the summary buffer should occupy 25% of upper
half of the screen, and that it is placed over the article buffer.  As
you may have noticed, 100% + 25% is actually 125% (yup, I saw y’all
reaching for that calculator there).  However, the special number ‘1.0’
is used to signal that this buffer should soak up all the rest of the
space available after the rest of the buffers have taken whatever they
need.  There should be only one buffer with the ‘1.0’ size spec per
split.

   Point will be put in the buffer that has the optional third element
‘point’.  In a ‘frame’ split, the last subsplit having a leaf split
where the tag ‘frame-focus’ is a member (i.e., is the third or fourth
element in the list, depending on whether the ‘point’ tag is present)
gets focus.

   Here’s a more complicated example:

     (article (vertical 1.0 (group 4)
                            (summary 0.25 point)
                            (article 1.0)))

   If the size spec is an integer instead of a floating point number,
then that number will be used to say how many lines a buffer should
occupy, not a percentage.

   If the “split” looks like something that can be ‘eval’ed (to be
precise—if the ‘car’ of the split is a function or a subr), this split
will be ‘eval’ed.  If the result is non-‘nil’, it will be used as a
split.

   Not complicated enough for you?  Well, try this on for size:

     (article (horizontal 1.0
                  (vertical 0.5
                      (group 1.0))
                  (vertical 1.0
                      (summary 0.25 point)
                      (article 1.0))))

   Whoops.  Two buffers with the mystery 100% tag.  And what’s that
‘horizontal’ thingie?

   If the first element in one of the split is ‘horizontal’, Gnus will
split the window horizontally, giving you two windows side-by-side.
Inside each of these strips you may carry on all you like in the normal
fashion.  The number following ‘horizontal’ says what percentage of the
screen is to be given to this strip.

   For each split, there _must_ be one element that has the 100% tag.
The splitting is never accurate, and this buffer will eat any leftover
lines from the splits.

   To be slightly more formal, here’s a definition of what a valid split
may look like:

     split      = frame | horizontal | vertical | buffer | form
     frame      = "(frame " size *split ")"
     horizontal = "(horizontal " size *split ")"
     vertical   = "(vertical " size *split ")"
     buffer     = "(" buf-name " " size *[ "point" ] *[ "frame-focus"] ")"
     size       = number | frame-params
     buf-name   = group | article | summary ...

   The limitations are that the ‘frame’ split can only appear as the
top-level split.  FORM should be an Emacs Lisp form that should return a
valid split.  We see that each split is fully recursive, and may contain
any number of ‘vertical’ and ‘horizontal’ splits.

   Finding the right sizes can be a bit complicated.  No window may be
less than ‘gnus-window-min-height’ (default 1) characters high, and all
windows must be at least ‘gnus-window-min-width’ (default 1) characters
wide.  Gnus will try to enforce this before applying the splits.  If you
want to use the normal Emacs window width/height limit, you can just set
these two variables to ‘nil’.

   If you’re not familiar with Emacs terminology, ‘horizontal’ and
‘vertical’ splits may work the opposite way of what you’d expect.
Windows inside a ‘horizontal’ split are shown side-by-side, and windows
within a ‘vertical’ split are shown above each other.

   If you want to experiment with window placement, a good tip is to
call ‘gnus-configure-frame’ directly with a split.  This is the function
that does all the real work when splitting buffers.  Below is a pretty
nonsensical configuration with 5 windows; two for the group buffer and
three for the article buffer.  (I said it was nonsensical.)  If you
‘eval’ the statement below, you can get an idea of how that would look
straight away, without going through the normal Gnus channels.  Play
with it until you’re satisfied, and then use ‘gnus-add-configuration’ to
add your new creation to the buffer configuration list.

     (gnus-configure-frame
      '(horizontal 1.0
         (vertical 10
           (group 1.0)
           (article 0.3 point))
         (vertical 1.0
           (article 1.0)
           (horizontal 4
             (group 1.0)
             (article 10)))))

   You might want to have several frames as well.  No prob—just use the
‘frame’ split:

     (gnus-configure-frame
      '(frame 1.0
              (vertical 1.0
                        (summary 0.25 point frame-focus)
                        (article 1.0))
              (vertical ((height . 5) (width . 15)
                         (user-position . t)
                         (left . -1) (top . 1))
                        (picon 1.0))))


   This split will result in the familiar summary/article window
configuration in the first (or “main”) frame, while a small additional
frame will be created where picons will be shown.  As you can see,
instead of the normal ‘1.0’ top-level spec, each additional split should
have a frame parameter alist as the size spec.  *Note Frame Parameters:
(elisp)Frame Parameters.  The list of all possible keys for
‘gnus-buffer-configuration’ can be found in its default value.

   Note that the ‘message’ key is used for both ‘gnus-group-mail’ and
‘gnus-summary-mail-other-window’.  If it is desirable to distinguish
between the two, something like this might be used:

     (message (horizontal 1.0
                          (vertical 1.0 (message 1.0 point))
                          (vertical 0.24
                                    (if (buffer-live-p gnus-summary-buffer)
                                        '(summary 0.5))
                                    (group 1.0))))

   One common desire for a multiple frame split is to have a separate
frame for composing mail and news while leaving the original frame
intact.  To accomplish that, something like the following can be done:

     (message
       (frame 1.0
              (if (not (buffer-live-p gnus-summary-buffer))
                  (car (cdr (assoc 'group gnus-buffer-configuration)))
                (car (cdr (assoc 'summary gnus-buffer-configuration))))
              (vertical ((user-position . t) (top . 1) (left . 1)
                         (name . "Message"))
                        (message 1.0 point))))

   Since the ‘gnus-buffer-configuration’ variable is so long and
complicated, there’s a function you can use to ease changing the config
of a single setting: ‘gnus-add-configuration’.  If, for instance, you
want to change the ‘article’ setting, you could say:

     (gnus-add-configuration
      '(article (vertical 1.0
                    (group 4)
                    (summary .25 point)
                    (article 1.0))))

   You’d typically stick these ‘gnus-add-configuration’ calls in your
‘~/.gnus.el’ file or in some startup hook—they should be run after Gnus
has been loaded.

   If all windows mentioned in the configuration are already visible,
Gnus won’t change the window configuration.  If you always want to force
the “right” window configuration, you can set
‘gnus-always-force-window-configuration’ to non-‘nil’.

   If you’re using tree displays (*note Tree Display::), and the tree
window is displayed vertically next to another window, you may also want
to fiddle with ‘gnus-tree-minimize-window’ to avoid having the windows
resized.

   Lastly, it’s possible to make Gnus window layouts “atomic” (*note
Atomic Windows: (elisp)Atomic Windows.) by setting
‘gnus-use-atomic-windows’ to ‘t’.  This will ensure that pop-up buffers
(e.g.  help or completion buffers), will appear below or to the side of
the entire Gnus window layout and not, for example, squashed between the
summary and article buffers.

10.5.1 Window Configuration Names
---------------------------------

Here’s a list of most of the currently known window configurations, and
when they’re used:

‘group’
     The group buffer.

‘summary’
     Entering a group and showing only the summary.

‘article’
     Selecting an article.

‘server’
     The server buffer.

‘browse’
     Browsing groups from the server buffer.

‘message’
     Composing a (new) message.

‘only-article’
     Showing only the article buffer.

‘edit-article’
     Editing an article.

‘edit-form’
     Editing group parameters and the like.

‘edit-score’
     Editing a server definition.

‘post’
     Composing a news message.

‘reply’
     Replying or following up an article without yanking the text.

‘forward’
     Forwarding a message.

‘reply-yank’
     Replying or following up an article with yanking the text.

‘mail-bound’
     Bouncing a message.

‘pipe’
     Sending an article to an external process.

‘bug’
     Sending a bug report.

‘score-trace’
     Displaying the score trace.

‘score-words’
     Displaying the score words.

‘split-trace’
     Displaying the split trace.

‘compose-bounce’
     Composing a bounce message.

‘mml-preview’
     Previewing a MIME part.

10.5.2 Example Window Configurations
------------------------------------

   • Narrow left hand side occupied by group buffer.  Right hand side
     split between summary buffer (top one-sixth) and article buffer
     (bottom).

          +---+---------+
          | G | Summary |
          | r +---------+
          | o |         |
          | u | Article |
          | p |         |
          +---+---------+

          (gnus-add-configuration
           '(article
             (horizontal 1.0
                         (vertical 25 (group 1.0))
                         (vertical 1.0
                                   (summary 0.16 point)
                                   (article 1.0)))))

          (gnus-add-configuration
           '(summary
             (horizontal 1.0
                         (vertical 25 (group 1.0))
                         (vertical 1.0 (summary 1.0 point)))))


File: gnus.info,  Node: Tabbed Interface,  Next: Faces and Fonts,  Prev: Window Layout,  Up: Various

# /. 10.6 Tabbed Interface
=========================

Gnus supports display of different buffers in dedicated tabs that you
can select using the tab bar.

   To open the group buffer in a new tab named ‘Gnus’, use:

     (push '("\\`\\*Group\\*\\'" .
             (display-buffer-in-tab
              (tab-name . "Gnus")))
           display-buffer-alist)

   To read every summary in a separate explicitly named tab, use:

     (push '("\\`\\*Summary .*\\*\\'" .
             (display-buffer-in-tab
              (tab-name . (lambda (buffer _alist)
                            (setq buffer (buffer-name buffer))
                            (when (string-match "\\`\\*Summary \\(.*\\)\\*\\'" buffer)
                              (format "Group %s" (match-string 1 buffer)))))))
           display-buffer-alist)


File: gnus.info,  Node: Faces and Fonts,  Next: Mode Lines,  Prev: Tabbed Interface,  Up: Various

# /. 10.7 Faces and Fonts
========================

Fiddling with fonts and faces used to be very difficult, but these days
it is very simple.  You simply say ‘M-x customize-face’, pick out the
face you want to alter, and alter it via the standard Customize
interface.


File: gnus.info,  Node: Mode Lines,  Next: Highlighting and Menus,  Prev: Faces and Fonts,  Up: Various

# /. 10.8 Mode Lines
===================

‘gnus-updated-mode-lines’ says what buffers should keep their mode lines
updated.  It is a list of symbols.  Supported symbols include ‘group’,
‘article’, ‘summary’, ‘server’, ‘browse’, and ‘tree’.  If the
corresponding symbol is present, Gnus will keep that mode line updated
with information that may be pertinent.  If this variable is ‘nil’,
screen refresh may be quicker.

   By default, Gnus displays information on the current article in the
mode lines of the summary and article buffers.  The information Gnus
wishes to display (e.g., the subject of the article) is often longer
than the mode lines, and therefore have to be cut off at some point.
The ‘gnus-mode-non-string-length’ variable says how long the other
elements on the line is (i.e., the non-info part).  If you put
additional elements on the mode line (e.g., a clock), you should modify
this variable:

     (add-hook 'display-time-hook
               (lambda () (setq gnus-mode-non-string-length
                                (+ 21
                                   (if line-number-mode 5 0)
                                   (if column-number-mode 4 0)
                                   (length display-time-string)))))

   If this variable is ‘nil’ (which is the default), the mode line
strings won’t be chopped off, and they won’t be padded either.  Note
that the default is unlikely to be desirable, as even the percentage
complete in the buffer may be crowded off the mode line; the user should
configure this variable appropriately for her configuration.


File: gnus.info,  Node: Highlighting and Menus,  Next: Daemons,  Prev: Mode Lines,  Up: Various

# /. 10.9 Highlighting and Menus
===============================

The ‘gnus-visual’ variable controls most of the Gnus-prettifying
aspects.  If ‘nil’, Gnus won’t attempt to create menus or use fancy
colors or fonts.  This will also inhibit loading the ‘gnus-vis.el’ file.

   This variable can be a list of visual properties that are enabled.
The following elements are valid, and are all included by default:

‘group-highlight’
     Do highlights in the group buffer.
‘summary-highlight’
     Do highlights in the summary buffer.
‘article-highlight’
     Do highlights in the article buffer.
‘highlight’
     Turn on highlighting in all buffers.
‘group-menu’
     Create menus in the group buffer.
‘summary-menu’
     Create menus in the summary buffers.
‘article-menu’
     Create menus in the article buffer.
‘browse-menu’
     Create menus in the browse buffer.
‘server-menu’
     Create menus in the server buffer.
‘score-menu’
     Create menus in the score buffers.
‘menu’
     Create menus in all buffers.

   So if you only want highlighting in the article buffer and menus in
all buffers, you could say something like:

     (setq gnus-visual '(article-highlight menu))

   If you want highlighting only and no menus whatsoever, you’d say:

     (setq gnus-visual '(highlight))

   If ‘gnus-visual’ is ‘t’, highlighting and menus will be used in all
Gnus buffers.

   Other general variables that influence the look of all buffers
include:

‘gnus-mouse-face’
     This is the face (i.e., font) used for mouse highlighting in Gnus.
     No mouse highlights will be done if ‘gnus-visual’ is ‘nil’.

   There are hooks associated with the creation of all the different
menus:

‘gnus-article-menu-hook’
     Hook called after creating the article mode menu.

‘gnus-group-menu-hook’
     Hook called after creating the group mode menu.

‘gnus-summary-menu-hook’
     Hook called after creating the summary mode menu.

‘gnus-server-menu-hook’
     Hook called after creating the server mode menu.

‘gnus-browse-menu-hook’
     Hook called after creating the browse mode menu.

‘gnus-score-menu-hook’
     Hook called after creating the score mode menu.


File: gnus.info,  Node: Daemons,  Next: Undo,  Prev: Highlighting and Menus,  Up: Various

# /. 10.10 Daemons
=================

Gnus, being larger than any program ever written (allegedly), does lots
of strange stuff that you may wish to have done while you’re not
present.  For instance, you may want it to check for new mail once in a
while.  Or you may want it to close down all connections to all servers
when you leave Emacs idle.  And stuff like that.

   Gnus will let you do stuff like that by defining various “handlers”.
Each handler consists of three elements: A FUNCTION, a TIME, and an IDLE
parameter.

   Here’s an example of a handler that closes connections when Emacs has
been idle for thirty minutes:

     (gnus-demon-close-connections nil 30)

   Here’s a handler that scans for PGP headers every hour when Emacs is
idle:

     (gnus-demon-scan-pgp 60 t)

   This TIME parameter and that IDLE parameter work together in a
strange, but wonderful fashion.  Basically, if IDLE is ‘nil’, then the
function will be called every TIME minutes.

   If IDLE is ‘t’, then the function will be called after TIME minutes
only if Emacs is idle.  So if Emacs is never idle, the function will
never be called.  But once Emacs goes idle, the function will be called
every TIME minutes.

   If IDLE is a number and TIME is a number, the function will be called
every TIME minutes only when Emacs has been idle for IDLE minutes.

   If IDLE is a number and TIME is ‘nil’, the function will be called
once every time Emacs has been idle for IDLE minutes.

   And if TIME is a string, it should look like ‘07:31’, and the
function will then be called once every day somewhere near that time.
Modified by the IDLE parameter, of course.

   (When I say “minute” here, I really mean ‘gnus-demon-timestep’
seconds.  This is 60 by default.  If you change that variable, all the
timings in the handlers will be affected.)

   So, if you want to add a handler, you could put something like this
in your ‘~/.gnus.el’ file:

     (gnus-demon-add-handler 'gnus-demon-close-connections 30 t)

   Some ready-made functions to do this have been created:
‘gnus-demon-add-disconnection’, ‘gnus-demon-add-nntp-close-connection’,
‘gnus-demon-add-scan-timestamps’, ‘gnus-demon-add-rescan’, and
‘gnus-demon-add-scanmail’.  Just put those functions in your
‘~/.gnus.el’ if you want those abilities.

   If you add handlers to ‘gnus-demon-handlers’ directly, you should run
‘gnus-demon-init’ to make the changes take hold.  To cancel all daemons,
you can use the ‘gnus-demon-cancel’ function.

   Note that adding daemons can be pretty naughty if you over do it.
Adding functions that scan all news and mail from all servers every two
seconds is a sure-fire way of getting booted off any respectable system.
So behave.


File: gnus.info,  Node: Undo,  Next: Predicate Specifiers,  Prev: Daemons,  Up: Various

# /. 10.11 Undo
==============

It is very useful to be able to undo actions one has done.  In normal
Emacs buffers, it’s easy enough—you just push the ‘undo’ button.  In
Gnus buffers, however, it isn’t that simple.

   The things Gnus displays in its buffer is of no value whatsoever to
Gnus—it’s all just data designed to look nice to the user.  Killing a
group in the group buffer with ‘C-k’ makes the line disappear, but
that’s just a side-effect of the real action—the removal of the group in
question from the internal Gnus structures.  Undoing something like that
can’t be done by the normal Emacs ‘undo’ function.

   Gnus tries to remedy this somewhat by keeping track of what the user
does and coming up with actions that would reverse the actions the user
takes.  When the user then presses the ‘undo’ key, Gnus will run the
code to reverse the previous action, or the previous actions.  However,
not all actions are easily reversible, so Gnus currently offers a few
key functions to be undoable.  These include killing groups, yanking
groups, and changing the list of read articles of groups.  That’s it,
really.  More functions may be added in the future, but each added
function means an increase in data to be stored, so Gnus will never be
totally undoable.

   The undoability is provided by the ‘gnus-undo-mode’ minor mode.  It
is used if ‘gnus-use-undo’ is non-‘nil’, which is the default.  The
‘C-M-_’ key performs the ‘gnus-undo’ command, which should feel kinda
like the normal Emacs ‘undo’ command.


File: gnus.info,  Node: Predicate Specifiers,  Next: Moderation,  Prev: Undo,  Up: Various

# /. 10.12 Predicate Specifiers
==============================

Some Gnus variables are “predicate specifiers”.  This is a special form
that allows flexible specification of predicates without having to type
all that much.

   These specifiers are lists consisting of functions, symbols and
lists.

   Here’s an example:

     (or gnus-article-unseen-p
         gnus-article-unread-p)

   The available symbols are ‘or’, ‘and’ and ‘not’.  The functions all
take one parameter.

   Internally, Gnus calls ‘gnus-make-predicate’ on these specifiers to
create a function that can be called.  This input parameter to this
function will be passed along to all the functions in the predicate
specifier.


File: gnus.info,  Node: Moderation,  Next: Fetching a Group,  Prev: Predicate Specifiers,  Up: Various

# /. 10.13 Moderation
====================

If you are a moderator, you can use the ‘gnus-mdrtn.el’ package.  It is
not included in the standard Gnus package.  Write a mail to
‘larsi@gnus.org’ and state what group you moderate, and you’ll get a
copy.

   The moderation package is implemented as a minor mode for summary
buffers.  Put

     (add-hook 'gnus-summary-mode-hook 'gnus-moderate)

   in your ‘~/.gnus.el’ file.

   If you are the moderator of ‘rec.zoofle’, this is how it’s supposed
to work:

  1. You split your incoming mail by matching on
     ‘Newsgroups:.*rec.zoofle’, which will put all the to-be-posted
     articles in some mail group—for instance, ‘nnml:rec.zoofle’.

  2. You enter that group once in a while and post articles using the
     ‘e’ (edit-and-post) or ‘s’ (just send unedited) commands.

  3. If, while reading the ‘rec.zoofle’ newsgroup, you happen upon some
     articles that weren’t approved by you, you can cancel them with the
     ‘c’ command.

   To use moderation mode in these two groups, say:

     (setq gnus-moderated-list
           "^nnml:rec.zoofle$\\|^rec.zoofle$")


File: gnus.info,  Node: Fetching a Group,  Next: Image Enhancements,  Prev: Moderation,  Up: Various

# /. 10.14 Fetching a Group
==========================

It is sometimes convenient to be able to just say “I want to read this
group and I don’t care whether Gnus has been started or not”.  This is
perhaps more useful for people who write code than for users, but the
command ‘gnus-fetch-group’ provides this functionality in any case.  It
takes the group name as a parameter.


File: gnus.info,  Node: Image Enhancements,  Next: Fuzzy Matching,  Prev: Fetching a Group,  Up: Various

# /. 10.15 Image Enhancements
============================

Emacs is able to display pictures and stuff, so Gnus has taken advantage
of that.

* Menu:

* X-Face::                      Display a funky, teensy black-and-white image.
* Face::                        Display a funkier, teensier colored image.
* Smileys::                     Show all those happy faces the way they were meant to be shown.
* Picons::                      How to display pictures of what you’re reading.
* Gravatars::                   Display the avatar of people you read.


File: gnus.info,  Node: X-Face,  Next: Face,  Up: Image Enhancements

10.15.1 X-Face
--------------

‘X-Face’ headers describe a 48x48 pixel black-and-white (1 bit depth)
image that’s supposed to represent the author of the message.  It seems
to be supported by an ever-growing number of mail and news readers.

   Viewing an ‘X-Face’ header either requires an Emacs that has
‘compface’ support, or that you have suitable conversion or display
programs installed.  If your Emacs has image support the default action
is to display the face before the ‘From’ header.  If there’s no native
‘X-Face’ support, Gnus will try to convert the ‘X-Face’ header using
external programs from the ‘pbmplus’ package and friends, see below.
The default action under Emacs without image support is to fork off the
‘display’ program.

   On a GNU/Linux system, the ‘display’ program is included in the
ImageMagick package.  For external conversion programs look for packages
with names like ‘netpbm’, ‘libgr-progs’ and ‘compface’.  On Windows, you
may use the packages ‘netpbm’ and ‘compface’ from
<https://gnuwin32.sourceforge.net>.  You need to add the ‘bin’ directory
to your ‘PATH’ environment variable.

   The variable ‘gnus-article-x-face-command’ controls which programs
are used to display the ‘X-Face’ header.  If this variable is a string,
this string will be executed in a sub-shell.  If it is a function, this
function will be called with the face as the argument.  If
‘gnus-article-x-face-too-ugly’ (which is a regexp) matches the ‘From’
header, the face will not be shown.

   (Note: ‘x-face’ is used in the variable/function names, not ‘xface’).

Face and variable:

‘gnus-x-face’
     Face to show X-Face.  The colors from this face are used as the
     foreground and background colors of the displayed X-Faces.  The
     default colors are black and white.

‘gnus-face-properties-alist’
     Alist of image types and properties applied to Face (*note Face::)
     and X-Face images.  The default value is ‘((pbm . (:face
     gnus-x-face)) (png . nil))’.  Here are examples:

          ;; Specify the altitude of Face and X-Face images in the From header.
          (setq gnus-face-properties-alist
                '((pbm . (:face gnus-x-face :ascent 80))
                  (png . (:ascent 80))))

          ;; Show Face and X-Face images as pressed buttons.
          (setq gnus-face-properties-alist
                '((pbm . (:face gnus-x-face :relief -2))
                  (png . (:relief -2))))

     *Note (elisp)Image Descriptors::, for the valid properties for
     various image types.  Currently, ‘pbm’ is used for X-Face images
     and ‘png’ is used for Face images in Emacs.

   If you use posting styles, you can use an ‘x-face-file’ entry in
‘gnus-posting-styles’, *Note Posting Styles::.  If you don’t, Gnus
provides a few convenience functions and variables to allow easier
insertion of X-Face headers in outgoing messages.  You also need the
above mentioned ImageMagick, netpbm or other image conversion packages
(depending the values of the variables below) for these functions.

   ‘gnus-random-x-face’ goes through all the ‘pbm’ files in
‘gnus-x-face-directory’ and picks one at random, and then converts it to
the X-Face format by using the ‘gnus-convert-pbm-to-x-face-command’
shell command.  The ‘pbm’ files should be 48x48 pixels big.  It returns
the X-Face header data as a string.

   ‘gnus-insert-random-x-face-header’ calls ‘gnus-random-x-face’ and
inserts a ‘X-Face’ header with the randomly generated data.

   ‘gnus-x-face-from-file’ takes a GIF file as the parameter, and then
converts the file to X-Face format by using the
‘gnus-convert-image-to-x-face-command’ shell command.

   Here’s how you would typically use the first function.  Put something
like the following in your ‘~/.gnus.el’ file:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(X-Face . gnus-random-x-face))))

   Using the last function would be something like this:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(X-Face . (lambda ()
                                     (gnus-x-face-from-file
                                      "~/My-face.gif"))))))


File: gnus.info,  Node: Face,  Next: Smileys,  Prev: X-Face,  Up: Image Enhancements

10.15.2 Face
------------

‘Face’ headers are essentially a funkier version of ‘X-Face’ ones.  They
describe a 48x48 pixel colored image that’s supposed to represent the
author of the message.

   The contents of a ‘Face’ header must be a base64 encoded PNG image.
See <https://quimby.gnus.org/circus/face/> for the precise
specifications.

   The ‘gnus-face-properties-alist’ variable affects the appearance of
displayed Face images.  *Note X-Face::.

   Viewing a ‘Face’ header requires an Emacs that is able to display PNG
images.

   Gnus provides a few convenience functions and variables to allow
easier insertion of Face headers in outgoing messages.

   ‘gnus-convert-png-to-face’ takes a 48x48 PNG image, no longer than
726 bytes long, and converts it to a face.

   ‘gnus-face-from-file’ takes a JPEG file as the parameter, and then
converts the file to Face format by using the
‘gnus-convert-image-to-face-command’ shell command.

   Here’s how you would typically use this function.  Put something like
the following in your ‘~/.gnus.el’ file:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(Face . (lambda ()
                                   (gnus-face-from-file "~/face.jpg"))))))


File: gnus.info,  Node: Smileys,  Next: Picons,  Prev: Face,  Up: Image Enhancements

10.15.3 Smileys
---------------

“Smiley” is a package separate from Gnus, but since Gnus is currently
the only package that uses Smiley, it is documented here.

   In short—to use Smiley in Gnus, put the following in your
‘~/.gnus.el’ file:

     (setq gnus-treat-display-smileys t)

   Smiley maps text smiley faces—‘:-)’, ‘8-)’, ‘:-(’ and the like—to
pictures and displays those instead of the text smiley faces.  The
conversion is controlled by a list of regexps that matches text and maps
that to file names.

   The alist used is specified by the ‘smiley-regexp-alist’ variable.
The first item in each element is the regexp to be matched; the second
element is the regexp match group that is to be replaced by the picture;
and the third element is the name of the file to be displayed.

   The following variables customize the appearance of the smileys:

‘smiley-style’
     Specifies the smiley style.  Predefined smiley styles include
     ‘emoji’ (use emoji characters), ‘low-color’ (small 13x14 pixel,
     three-color images), ‘medium’ (more colorful images, 16x16 pixel),
     and ‘grayscale’ (grayscale images, 14x14 pixel).  The default
     depends on the height of the default face.

‘smiley-data-directory’
     Where Smiley will look for smiley faces files.  You shouldn’t set
     this variable anymore.  Customize ‘smiley-style’ instead.

‘gnus-smiley-file-types’
     List of suffixes on smiley file names to try.


File: gnus.info,  Node: Picons,  Next: Gravatars,  Prev: Smileys,  Up: Image Enhancements

10.15.4 Picons
--------------

So... You want to slow down your news reader even more!  This is a good
way to do so.  It’s also a great way to impress people staring over your
shoulder as you read news.

   What are Picons?  To quote directly from the Picons Web site:

     “Picons” is short for “personal icons”.  They’re small, constrained
     images used to represent users and domains on the net, organized
     into databases so that the appropriate image for a given e-mail
     address can be found.  Besides users and domains, there are picon
     databases for Usenet newsgroups and weather forecasts.  The picons
     are in either monochrome ‘XBM’ format or color ‘XPM’ and ‘GIF’
     formats.

   For instructions on obtaining and installing the picons databases,
point your Web browser at <https://cs.indiana.edu/ftp/faces/picons/>.

   If you are using Debian GNU/Linux, saying ‘apt-get install picon-.*’
will install the picons where Gnus can find them.

   To enable displaying picons, simply make sure that
‘gnus-picon-databases’ points to the directory containing the Picons
databases.

   The variable ‘gnus-picon-style’ controls how picons are displayed.
If ‘inline’, the textual representation is replaced.  If ‘right’, picons
are added right to the textual representation.

   The value of the variable ‘gnus-picon-properties’ is a list of
properties applied to picons.

   The following variables offer control over where things are located.

‘gnus-picon-databases’
     The location of the picons database.  This is a list of directories
     containing the ‘news’, ‘domains’, ‘users’ (and so on)
     subdirectories.  Defaults to ‘("/usr/lib/picon"
     "/usr/local/faces")’.

‘gnus-picon-news-directories’
     List of subdirectories to search in ‘gnus-picon-databases’ for
     newsgroups faces.  ‘("news")’ is the default.

‘gnus-picon-user-directories’
     List of subdirectories to search in ‘gnus-picon-databases’ for user
     faces.  ‘("users" "usenix" "local" "misc")’ is the default.

‘gnus-picon-domain-directories’
     List of subdirectories to search in ‘gnus-picon-databases’ for
     domain name faces.  Defaults to ‘("domains")’.  Some people may
     want to add ‘"unknown"’ to this list.

‘gnus-picon-file-types’
     Ordered list of suffixes on picon file names to try.  Defaults to
     ‘("xpm" "gif" "xbm")’ minus those not built-in your Emacs.

‘gnus-picon-inhibit-top-level-domains’
     If non-‘nil’ (which is the default), don’t display picons for
     things like ‘.net’ and ‘.de’, which aren’t usually very
     interesting.


File: gnus.info,  Node: Gravatars,  Prev: Picons,  Up: Image Enhancements

10.15.5 Gravatars
-----------------

A gravatar is an image registered to an e-mail address.

   You can submit yours on-line at <https://en.gravatar.com/>.

   The following variables offer control over how things are displayed.

‘gnus-gravatar-size’
     The size in pixels of gravatars.  Gravatars are always square, so
     one number for the size is enough.  If ‘nil’, this defaults to the
     value of ‘gravatar-size’.

‘gnus-gravatar-properties’
     List of image properties applied to Gravatar images (*note
     (elisp)Image Descriptors::).

‘gnus-gravatar-too-ugly’
     Regexp that matches mail addresses or names of people whose avatars
     should not be displayed, or ‘nil’ to display all avatars.  It
     defaults to the value of ‘gnus-article-x-face-too-ugly’ (*note
     X-Face::).

   If you want to see gravatars in the From field, set:

     (setq gnus-treat-from-gravatar 'head)

   If you want to see them in the Cc and To fields, set:

     (setq gnus-treat-mail-gravatar 'head)

10.15.5.1 Tool bar
..................

‘gnus-group-tool-bar’
     Specifies the tool bar in the group buffer.  It can be either a
     list or a symbol referring to a list.

‘gnus-summary-tool-bar’
     Specifies the tool bar in the summary buffer.  It can be either a
     list or a symbol referring to a list.


File: gnus.info,  Node: Fuzzy Matching,  Next: Thwarting Email Spam,  Prev: Image Enhancements,  Up: Various

# /. 10.16 Fuzzy Matching
========================

Gnus provides “fuzzy matching” of ‘Subject’ lines when doing things like
scoring, thread gathering and thread comparison.

   As opposed to regular expression matching, fuzzy matching is very
fuzzy.  It’s so fuzzy that there’s not even a definition of what
“fuzziness” means, and the implementation has changed over time.

   Basically, it tries to remove all noise from lines before comparing.
‘Re: ’, parenthetical remarks, white space, and so on, are filtered out
of the strings before comparing the results.  This often leads to
adequate results—even when faced with strings generated by text manglers
masquerading as newsreaders.


File: gnus.info,  Node: Thwarting Email Spam,  Next: Spam Package,  Prev: Fuzzy Matching,  Up: Various

# /. 10.17 Thwarting Email Spam
==============================

In these last days of the Usenet, commercial vultures are hanging about
and grepping through news like crazy to find email addresses they can
foist off their scams and products to.  As a reaction to this, many
people have started putting nonsense addresses into their ‘From’ lines.
I think this is counterproductive—it makes it difficult for people to
send you legitimate mail in response to things you write, as well as
making it difficult to see who wrote what.  This rewriting may perhaps
be a bigger menace than the spam itself in the end.

   The biggest problem I have with email spam is that it comes in under
false pretenses.  I press ‘g’ and Gnus merrily informs me that I have 10
new emails.  I say “Golly gee!  Happy is me!” and select the mail group,
only to find two pyramid schemes, seven advertisements (“New!  Miracle
tonic for growing full, lustrous hair on your toes!”) and one mail
asking me to repent and find some god.

   This is annoying.  Here’s what you can do about it.

* Menu:

* The problem of spam::         Some background, and some solutions
* Anti-Spam Basics::            Simple steps to reduce the amount of spam.
* SpamAssassin::                How to use external anti-spam tools.
* Hashcash::                    Reduce spam by burning CPU time.


File: gnus.info,  Node: The problem of spam,  Next: Anti-Spam Basics,  Up: Thwarting Email Spam

10.17.1 The problem of spam
---------------------------

Spam comes from a wide variety of sources.  It is simply impossible to
dispose of all spam without discarding useful messages.

   The simplest approach to filtering spam is filtering, at the mail
server or when you sort through incoming mail.  If you get 200 spam
messages per day from ‘random-address@example.org’, you block
‘example.org’.  If you get 200 messages about ‘VIAGRA’, you discard all
messages with ‘VIAGRA’ in the message.  If you get lots of spam from
Bulgaria, for example, you try to filter all mail from Bulgarian IPs.

   This, unfortunately, is a great way to discard legitimate e-mail.
The risks of blocking a whole country (Bulgaria, Norway, Nigeria, China,
etc.) or even a continent (Asia, Africa, Europe, etc.) from contacting
you should be obvious, so don’t do it if you have the choice.

   In another instance, the very informative and useful RISKS digest has
been blocked by overzealous mail filters because it *contained* words
that were common in spam messages.  Nevertheless, in isolated cases,
with great care, direct filtering of mail can be useful.

   Another approach to filtering e-mail is the distributed spam
processing, for instance DCC implements such a system.  In essence, N
systems around the world agree that a machine X in Ghana, Estonia, or
California is sending out spam e-mail, and these N systems enter X or
the spam e-mail from X into a database.  The criteria for spam detection
vary—it may be the number of messages sent, the content of the messages,
and so on.  When a user of the distributed processing system wants to
find out if a message is spam, he consults one of those N systems.

   Distributed spam processing works very well against spammers that
send a large number of messages at once, but it requires the user to set
up fairly complicated checks.  There are commercial and free distributed
spam processing systems.  Distributed spam processing has its risks as
well.  For instance legitimate e-mail senders have been accused of
sending spam, and their web sites and mailing lists have been shut down
for some time because of the incident.

   The statistical approach to spam filtering is also popular.  It is
based on a statistical analysis of previous spam messages.  Usually the
analysis is a simple word frequency count, with perhaps pairs of words
or 3-word combinations thrown into the mix.  Statistical analysis of
spam works very well in most of the cases, but it can classify
legitimate e-mail as spam in some cases.  It takes time to run the
analysis, the full message must be analyzed, and the user has to store
the database of spam analysis.  Statistical analysis on the server is
gaining popularity.  This has the advantage of letting the user Just
Read Mail, but has the disadvantage that it’s harder to tell the server
that it has misclassified mail.

   Fighting spam is not easy, no matter what anyone says.  There is no
magic switch that will distinguish Viagra ads from Mom’s e-mails.  Even
people are having a hard time telling spam apart from non-spam, because
spammers are actively looking to fool us into thinking they are Mom,
essentially.  Spamming is irritating, irresponsible, and idiotic
behavior from a bunch of people who think the world owes them a favor.
We hope the following sections will help you in fighting the spam
plague.


File: gnus.info,  Node: Anti-Spam Basics,  Next: SpamAssassin,  Prev: The problem of spam,  Up: Thwarting Email Spam

10.17.2 Anti-Spam Basics
------------------------

One way of dealing with spam is having Gnus split out all spam into a
‘spam’ mail group (*note Splitting Mail::).

   First, pick one (1) valid mail address that you can be reached at,
and put it in your ‘From’ header of all your news articles.  (I’ve
chosen ‘larsi@trym.ifi.uio.no’, but for many addresses on the form
‘larsi+usenet@ifi.uio.no’ will be a better choice.  Ask your sysadmin
whether your sendmail installation accepts keywords in the local part of
the mail address.)

     (setq message-default-news-headers
           "From: Lars Magne Ingebrigtsen <larsi@trym.ifi.uio.no>\n")

   Then put the following split rule in ‘nnmail-split-fancy’ (*note
Fancy Mail Splitting::):

     (...
      (to "larsi@trym.ifi.uio.no"
          (| ("subject" "re:.*" "misc")
             ("references" ".*@.*" "misc")
             "spam"))
      ...)

   This says that all mail to this address is suspect, but if it has a
‘Subject’ that starts with a ‘Re:’ or has a ‘References’ header, it’s
probably ok.  All the rest goes to the ‘spam’ group.  (This idea
probably comes from Tim Pierce.)

   In addition, many mail spammers talk directly to your SMTP server and
do not include your email address explicitly in the ‘To’ header.  Why
they do this is unknown—perhaps it’s to thwart this thwarting scheme?
In any case, this is trivial to deal with—you just put anything not
addressed to you in the ‘spam’ group by ending your fancy split rule in
this way:

     (
      ...
      (to "larsi" "misc")
      "spam")

   In my experience, this will sort virtually everything into the right
group.  You still have to check the ‘spam’ group from time to time to
check for legitimate mail, though.  If you feel like being a good net
citizen, you can even send off complaints to the proper authorities on
each spam—at your leisure.

   This works for me.  It allows people an easy way to contact me (they
can just press ‘r’ in the usual way), and I’m not bothered at all with
spam.  It’s a win-win situation.  Forging ‘From’ headers to point to
non-existent domains is yucky, in my opinion.

   Be careful with this approach.  Spammers are wise to it.


File: gnus.info,  Node: SpamAssassin,  Next: Hashcash,  Prev: Anti-Spam Basics,  Up: Thwarting Email Spam

10.17.3 SpamAssassin, Vipul’s Razor, DCC, etc
---------------------------------------------

The days where the hints in the previous section were sufficient to
avoid spam are over.  There are many tools out there that claim to
reduce the amount of spam you get.  This section could easily become
outdated fast, as new products replace old, but fortunately most of
these tools seem to have similar interfaces.  Even though this section
will use SpamAssassin as an example, it should be easy to adapt it to
most other tools.

   Note that this section does not involve the ‘spam.el’ package, which
is discussed in the next section.  If you don’t care for all the
features of ‘spam.el’, you can make do with these simple recipes.

   If the tool you are using is not installed on the mail server, you
need to invoke it yourself.  Ideas on how to use the ‘:postscript’ mail
source parameter (*note Mail Source Specifiers::) follow.

     (setq mail-sources
           '((file :prescript "formail -bs spamassassin < /var/mail/%u")
             (pop :user "jrl"
                  :server "pophost"
                  :postscript
                  "mv %t /tmp/foo; formail -bs spamc < /tmp/foo > %t")))

   Once you manage to process your incoming spool somehow, thus making
the mail contain, e.g., a header indicating it is spam, you are ready to
filter it out.  Using normal split methods (*note Splitting Mail::):

     (setq nnmail-split-methods '(("spam"  "^X-Spam-Flag: YES")
                                  ...))

   Or using fancy split methods (*note Fancy Mail Splitting::):

     (setq nnmail-split-methods 'nnmail-split-fancy
           nnmail-split-fancy '(| ("X-Spam-Flag" "YES" "spam")
                                  ...))

   Some people might not like the idea of piping the mail through
various programs using a ‘:prescript’ (if some program is buggy, you
might lose all mail).  If you are one of them, another solution is to
call the external tools during splitting.  Example fancy split method:

     (setq nnmail-split-fancy '(| (: kevin-spamassassin)
                                  ...))
     (defun kevin-spamassassin ()
       (save-excursion
         (save-restriction
           (widen)
           (if (eq 1 (call-process-region (point-min) (point-max)
                                          "spamc" nil nil nil "-c"))
               "spam"))))

   Note that with the nnimap back end, message bodies will not be
downloaded by default.  You need to set ‘nnimap-split-download-body’ to
‘t’ to do that (*note Client-Side IMAP Splitting::).

   That is about it.  As some spam is likely to get through anyway, you
might want to have a nifty function to call when you happen to read
spam.  And here is the nifty function:

     (defun my-gnus-raze-spam ()
       "Submit SPAM to Vipul's Razor, then mark it as expirable."
       (interactive)
       (gnus-summary-save-in-pipe "razor-report -f -d" t)
       (gnus-summary-mark-as-expirable 1))


File: gnus.info,  Node: Hashcash,  Prev: SpamAssassin,  Up: Thwarting Email Spam

10.17.4 Hashcash
----------------

One technique to fight spam is to require senders to do something costly
and demonstrably unique for each message they send.  This has the
obvious drawback that you cannot rely on everyone in the world using
this technique, since it is not part of the Internet standards, but it
may be useful in smaller communities.

   While the tools in the previous section work well in practice, they
work only because the tools are constantly maintained and updated as new
form of spam appears.  This means that a small percentage of spam will
always get through.  It also means that somewhere, someone needs to read
lots of spam to update these tools.  Hashcash avoids that, but instead
prefers that everyone you contact through e-mail supports the scheme.
You can view the two approaches as pragmatic vs dogmatic.  The
approaches have their own advantages and disadvantages, but as often in
the real world, a combination of them is stronger than either one of
them separately.

   The “something costly” is to burn CPU time, more specifically to
compute a hash collision up to a certain number of bits.  The resulting
hashcash cookie is inserted in a ‘X-Hashcash:’ header.  For more
details, and for the external application ‘hashcash’ you need to install
to use this feature, see <http://www.hashcash.org/>.

   If you wish to generate hashcash for each message you send, you can
customize ‘message-generate-hashcash’ (*note Mail Headers: (message)Mail
Headers.), as in:

     (setq message-generate-hashcash t)

   You will need to set up some additional variables as well:

‘hashcash-default-payment’
     This variable indicates the default number of bits the hash
     collision should consist of.  By default this is 20.  Suggested
     useful values include 17 to 29.

‘hashcash-payment-alist’
     Some receivers may require you to spend burn more CPU time than the
     default.  This variable contains a list of ‘(ADDR AMOUNT)’ cells,
     where ADDR is the receiver (email address or newsgroup) and AMOUNT
     is the number of bits in the collision that is needed.  It can also
     contain ‘(ADDR STRING AMOUNT)’ cells, where the STRING is the
     string to use (normally the email address or newsgroup name is
     used).

‘hashcash-path’
     Where the ‘hashcash’ binary is installed.  This variable should be
     automatically set by ‘executable-find’, but if it’s ‘nil’ (usually
     because the ‘hashcash’ binary is not in your path) you’ll get a
     warning when you check hashcash payments and an error when you
     generate hashcash payments.

   Gnus can verify hashcash cookies, although this can also be done by
hand customized mail filtering scripts.  To verify a hashcash cookie in
a message, use the ‘mail-check-payment’ function in the ‘hashcash.el’
library.  You can also use the ‘spam.el’ package with the
‘spam-use-hashcash’ back end to validate hashcash cookies in incoming
mail and filter mail accordingly (*note Anti-spam Hashcash Payments::).


File: gnus.info,  Node: Spam Package,  Next: The Gnus Registry,  Prev: Thwarting Email Spam,  Up: Various

# /. 10.18 Spam Package
======================

The Spam package provides Gnus with a centralized mechanism for
detecting and filtering spam.  It filters new mail, and processes
messages according to whether they are spam or ham.  (“Ham” is the name
used throughout this manual to indicate non-spam messages.)

* Menu:

* Spam Package Introduction::
* Filtering Incoming Mail::
* Detecting Spam in Groups::
* Spam and Ham Processors::
* Spam Package Configuration Examples::
* Spam Back Ends::
* Extending the Spam package::
* Spam Statistics Package::


File: gnus.info,  Node: Spam Package Introduction,  Next: Filtering Incoming Mail,  Up: Spam Package

10.18.1 Spam Package Introduction
---------------------------------

You must read this section to understand how the Spam package works.  Do
not skip, speed-read, or glance through this section.

   Make sure you read the section on the ‘spam.el’ sequence of events.
*Note Extending the Spam package::.

   To use the Spam package, you *must* first run the function
‘spam-initialize’:

     (spam-initialize)

   This autoloads ‘spam.el’ and installs the various hooks necessary to
let the Spam package do its job.  In order to make use of the Spam
package, you have to set up certain group parameters and variables,
which we will describe below.  All of the variables controlling the Spam
package can be found in the ‘spam’ customization group.

   There are two “contact points” between the Spam package and the rest
of Gnus: checking new mail for spam, and leaving a group.

   Checking new mail for spam is done in one of two ways: while
splitting incoming mail, or when you enter a group.

   The first way, checking for spam while splitting incoming mail, is
suited to mail back ends such as ‘nnml’ or ‘nnimap’, where new mail
appears in a single spool file.  The Spam package processes incoming
mail, and sends mail considered to be spam to a designated “spam” group.
*Note Filtering Incoming Mail::.

   The second way is suited to back ends such as ‘nntp’, which have no
incoming mail spool, or back ends where the server is in charge of
splitting incoming mail.  In this case, when you enter a Gnus group, the
unseen or unread messages in that group are checked for spam.  Detected
spam messages are marked as spam.  *Note Detecting Spam in Groups::.

   In either case, you have to tell the Spam package what method to use
to detect spam messages.  There are several methods, or “spam back ends”
(not to be confused with Gnus back ends!)  to choose from: spam
“blacklists” and “whitelists”, dictionary-based filters, and so forth.
*Note Spam Back Ends::.

   In the Gnus summary buffer, messages that have been identified as
spam always appear with a ‘$’ symbol.

   The Spam package divides Gnus groups into three categories: ham
groups, spam groups, and unclassified groups.  You should mark each of
the groups you subscribe to as either a ham group or a spam group, using
the ‘spam-contents’ group parameter (*note Group Parameters::).  Spam
groups have a special property: when you enter a spam group, all unseen
articles are marked as spam.  Thus, mail split into a spam group is
automatically marked as spam.

   Identifying spam messages is only half of the Spam package’s job.
The second half comes into play whenever you exit a group buffer.  At
this point, the Spam package does several things:

   First, it calls “spam and ham processors” to process the articles
according to whether they are spam or ham.  There is a pair of spam and
ham processors associated with each spam back end, and what the
processors do depends on the back end.  At present, the main role of
spam and ham processors is for dictionary-based spam filters: they add
the contents of the messages in the group to the filter’s dictionary, to
improve its ability to detect future spam.  The ‘spam-process’ group
parameter specifies what spam processors to use.  *Note Spam and Ham
Processors::.

   If the spam filter failed to mark a spam message, you can mark it
yourself, so that the message is processed as spam when you exit the
group:

‘$’
‘M-d’
‘M s x’
‘S x’
     Mark current article as spam, showing it with the ‘$’ mark
     (‘gnus-summary-mark-as-spam’).

Similarly, you can unmark an article if it has been erroneously marked
as spam.  *Note Setting Marks::.

   Normally, a ham message found in a non-ham group is not processed as
ham—the rationale is that it should be moved into a ham group for
further processing (see below).  However, you can force these articles
to be processed as ham by setting ‘spam-process-ham-in-spam-groups’ and
‘spam-process-ham-in-nonham-groups’.

   The second thing that the Spam package does when you exit a group is
to move ham articles out of spam groups, and spam articles out of ham
groups.  Ham in a spam group is moved to the group specified by the
variable ‘gnus-ham-process-destinations’, or the group parameter
‘ham-process-destination’.  Spam in a ham group is moved to the group
specified by the variable ‘gnus-spam-process-destinations’, or the group
parameter ‘spam-process-destination’.  If these variables are not set,
the articles are left in their current group.  If an article cannot be
moved (e.g., with a read-only backend such as NNTP), it is copied.

   If an article is moved to another group, it is processed again when
you visit the new group.  Normally, this is not a problem, but if you
want each article to be processed only once, load the ‘gnus-registry.el’
package and set the variable ‘spam-log-to-registry’ to ‘t’.  *Note Spam
Package Configuration Examples::.

   Normally, spam groups ignore ‘gnus-spam-process-destinations’.
However, if you set ‘spam-move-spam-nonspam-groups-only’ to ‘nil’, spam
will also be moved out of spam groups, depending on the
‘spam-process-destination’ parameter.

   The final thing the Spam package does is to mark spam articles as
expired, which is usually the right thing to do.

   If all this seems confusing, don’t worry.  Soon it will be as natural
as typing Lisp one-liners on a neural interface... err, sorry, that’s 50
years in the future yet.  Just trust us, it’s not so bad.


File: gnus.info,  Node: Filtering Incoming Mail,  Next: Detecting Spam in Groups,  Prev: Spam Package Introduction,  Up: Spam Package

10.18.2 Filtering Incoming Mail
-------------------------------

To use the Spam package to filter incoming mail, you must first set up
fancy mail splitting.  *Note Fancy Mail Splitting::.  The Spam package
defines a special splitting function that you can add to your fancy
split variable (either ‘nnmail-split-fancy’ or ‘nnimap-split-fancy’,
depending on your mail back end):

     (: spam-split)

The ‘spam-split’ function scans incoming mail according to your chosen
spam back end(s), and sends messages identified as spam to a spam group.
By default, the spam group is a group named ‘spam’, but you can change
this by customizing ‘spam-split-group’.  Make sure the contents of
‘spam-split-group’ are an unqualified group name.  For instance, in an
‘nnimap’ server ‘your-server’, the value ‘spam’ means
‘nnimap+your-server:spam’.  The value ‘nnimap+server:spam’ is therefore
wrong—it gives the group ‘nnimap+your-server:nnimap+server:spam’.

   ‘spam-split’ does not modify the contents of messages in any way.

   Note for IMAP users: if you use the ‘spam-check-bogofilter’,
‘spam-check-ifile’, and ‘spam-check-stat’ spam back ends, you should
also set the variable ‘nnimap-split-download-body’ to ‘t’.  *Note
Client-Side IMAP Splitting::.

   You have to specify one or more spam back ends for ‘spam-split’ to
use, by setting the ‘spam-use-*’ variables.  *Note Spam Back Ends::.
Normally, ‘spam-split’ simply uses all the spam back ends you enabled in
this way.  However, you can tell ‘spam-split’ to use only some of them.
Why this is useful?  Suppose you are using the ‘spam-use-regex-headers’
and ‘spam-use-blackholes’ spam back ends, and the following split rule:

      nnimap-split-fancy '(|
                           (any "ding" "ding")
                           (: spam-split)
                           ;; default mailbox
                           "mail")

The problem is that you want all ding messages to make it to the ding
folder.  But that will let obvious spam (for example, spam detected by
SpamAssassin, and ‘spam-use-regex-headers’) through, when it’s sent to
the ding list.  On the other hand, some messages to the ding list are
from a mail server in the blackhole list, so the invocation of
‘spam-split’ can’t be before the ding rule.

   The solution is to let SpamAssassin headers supersede ding rules, and
perform the other ‘spam-split’ rules (including a second invocation of
the regex-headers check) after the ding rule.  This is done by passing a
parameter to ‘spam-split’:

     nnimap-split-fancy
           '(|
             ;; spam detected by ‘spam-use-regex-headers’ goes to ‘regex-spam’
             (: spam-split "regex-spam" 'spam-use-regex-headers)
             (any "ding" "ding")
             ;; all other spam detected by spam-split goes to ‘spam-split-group’
             (: spam-split)
             ;; default mailbox
             "mail")

This lets you invoke specific ‘spam-split’ checks depending on your
particular needs, and target the results of those checks to a particular
spam group.  You don’t have to throw all mail into all the spam tests.
Another reason why this is nice is that messages to mailing lists you
have rules for don’t have to have resource-intensive blackhole checks
performed on them.  You could also specify different spam checks for
your nnmail split vs.  your nnimap split.  Go crazy.

   You should set the ‘spam-use-*’ variables for whatever spam back ends
you intend to use.  The reason is that when loading ‘spam.el’, some
conditional loading is done depending on what ‘spam-use-xyz’ variables
you have set.  *Note Spam Back Ends::.


File: gnus.info,  Node: Detecting Spam in Groups,  Next: Spam and Ham Processors,  Prev: Filtering Incoming Mail,  Up: Spam Package

10.18.3 Detecting Spam in Groups
--------------------------------

To detect spam when visiting a group, set the group’s ‘spam-autodetect’
and ‘spam-autodetect-methods’ group parameters.  These are accessible
with ‘G c’ or ‘G p’, as usual (*note Group Parameters::).

   You should set the ‘spam-use-*’ variables for whatever spam back ends
you intend to use.  The reason is that when loading ‘spam.el’, some
conditional loading is done depending on what ‘spam-use-xyz’ variables
you have set.

   By default, only unseen articles are processed for spam.  You can
force Gnus to recheck all messages in the group by setting the variable
‘spam-autodetect-recheck-messages’ to ‘t’.

   If you use the ‘spam-autodetect’ method of checking for spam, you can
specify different spam detection methods for different groups.  For
instance, the ‘ding’ group may have ‘spam-use-BBDB’ as the autodetection
method, while the ‘suspect’ group may have the ‘spam-use-blacklist’ and
‘spam-use-bogofilter’ methods enabled.  Unlike with ‘spam-split’, you
don’t have any control over the _sequence_ of checks, but this is
probably unimportant.


File: gnus.info,  Node: Spam and Ham Processors,  Next: Spam Package Configuration Examples,  Prev: Detecting Spam in Groups,  Up: Spam Package

10.18.4 Spam and Ham Processors
-------------------------------

Spam and ham processors specify special actions to take when you exit a
group buffer.  Spam processors act on spam messages, and ham processors
on ham messages.  At present, the main role of these processors is to
update the dictionaries of dictionary-based spam back ends such as
Bogofilter (*note Bogofilter::) and the Spam Statistics package (*note
Spam Statistics Filtering::).

   The spam and ham processors that apply to each group are determined
by the group’s‘spam-process’ group parameter.  If this group parameter
is not defined, they are determined by the variable
‘gnus-spam-process-newsgroups’.

   Gnus learns from the spam you get.  You have to collect your spam in
one or more spam groups, and set or customize the variable
‘spam-junk-mailgroups’ as appropriate.  You can also declare groups to
contain spam by setting their group parameter ‘spam-contents’ to
‘gnus-group-spam-classification-spam’, or by customizing the
corresponding variable ‘gnus-spam-newsgroup-contents’.  The
‘spam-contents’ group parameter and the ‘gnus-spam-newsgroup-contents’
variable can also be used to declare groups as _ham_ groups if you set
their classification to ‘gnus-group-spam-classification-ham’.  If groups
are not classified by means of ‘spam-junk-mailgroups’, ‘spam-contents’,
or ‘gnus-spam-newsgroup-contents’, they are considered _unclassified_.
All groups are unclassified by default.

   In spam groups, all messages are considered to be spam by default:
they get the ‘$’ mark (‘gnus-spam-mark’) when you enter the group.  If
you have seen a message, had it marked as spam, then unmarked it, it
won’t be marked as spam when you enter the group thereafter.  You can
disable that behavior, so all unread messages will get the ‘$’ mark, if
you set the ‘spam-mark-only-unseen-as-spam’ parameter to ‘nil’.  You
should remove the ‘$’ mark when you are in the group summary buffer for
every message that is not spam after all.  To remove the ‘$’ mark, you
can use ‘M-u’ to “unread” the article, or ‘d’ for declaring it read the
non-spam way.  When you leave a group, all spam-marked (‘$’) articles
are sent to a spam processor which will study them as spam samples.

   Messages may also be deleted in various other ways, and unless
‘ham-marks’ group parameter gets overridden below, marks ‘R’ and ‘r’ for
default read or explicit delete, marks ‘X’ and ‘K’ for automatic or
explicit kills, as well as mark ‘Y’ for low scores, are all considered
to be associated with articles which are not spam.  This assumption
might be false, in particular if you use kill files or score files as
means for detecting genuine spam, you should then adjust the ‘ham-marks’
group parameter.

 -- Variable: ham-marks
     You can customize this group or topic parameter to be the list of
     marks you want to consider ham.  By default, the list contains the
     deleted, read, killed, kill-filed, and low-score marks (the idea is
     that these articles have been read, but are not spam).  It can be
     useful to also include the tick mark in the ham marks.  It is not
     recommended to make the unread mark a ham mark, because it normally
     indicates a lack of classification.  But you can do it, and we’ll
     be happy for you.

 -- Variable: spam-marks
     You can customize this group or topic parameter to be the list of
     marks you want to consider spam.  By default, the list contains
     only the spam mark.  It is not recommended to change that, but you
     can if you really want to.

   When you leave _any_ group, regardless of its ‘spam-contents’
classification, all spam-marked articles are sent to a spam processor,
which will study these as spam samples.  If you explicit kill a lot, you
might sometimes end up with articles marked ‘K’ which you never saw, and
which might accidentally contain spam.  Best is to make sure that real
spam is marked with ‘$’, and nothing else.

   When you leave a _spam_ group, all spam-marked articles are marked as
expired after processing with the spam processor.  This is not done for
_unclassified_ or _ham_ groups.  Also, any *ham* articles in a spam
group will be moved to a location determined by either the
‘ham-process-destination’ group parameter or a match in the
‘gnus-ham-process-destinations’ variable, which is a list of regular
expressions matched with group names (it’s easiest to customize this
variable with ‘M-x customize-variable <RET>
gnus-ham-process-destinations’).  Each group name list is a standard
Lisp list, if you prefer to customize the variable manually.  If the
‘ham-process-destination’ parameter is not set, ham articles are left in
place.  If the ‘spam-mark-ham-unread-before-move-from-spam-group’
parameter is set, the ham articles are marked as unread before being
moved.

   If ham can not be moved—because of a read-only back end such as NNTP,
for example, it will be copied.

   Note that you can use multiples destinations per group or regular
expression!  This enables you to send your ham to a regular mail group
and to a _ham training_ group.

   When you leave a _ham_ group, all ham-marked articles are sent to a
ham processor, which will study these as non-spam samples.

   By default the variable ‘spam-process-ham-in-spam-groups’ is ‘nil’.
Set it to ‘t’ if you want ham found in spam groups to be processed.
Normally this is not done, you are expected instead to send your ham to
a ham group and process it there.

   By default the variable ‘spam-process-ham-in-nonham-groups’ is ‘nil’.
Set it to ‘t’ if you want ham found in non-ham (spam or unclassified)
groups to be processed.  Normally this is not done, you are expected
instead to send your ham to a ham group and process it there.

   When you leave a _ham_ or _unclassified_ group, all *spam* articles
are moved to a location determined by either the
‘spam-process-destination’ group parameter or a match in the
‘gnus-spam-process-destinations’ variable, which is a list of regular
expressions matched with group names (it’s easiest to customize this
variable with ‘M-x customize-variable <RET>
gnus-spam-process-destinations’).  Each group name list is a standard
Lisp list, if you prefer to customize the variable manually.  If the
‘spam-process-destination’ parameter is not set, the spam articles are
only expired.  The group name is fully qualified, meaning that if you
see ‘nntp:servername’ before the group name in the group buffer then you
need it here as well.

   If spam can not be moved—because of a read-only back end such as
NNTP, for example, it will be copied.

   Note that you can use multiples destinations per group or regular
expression!  This enables you to send your spam to multiple _spam
training_ groups.

   The problem with processing ham and spam is that Gnus doesn’t track
this processing by default.  Enable the ‘spam-log-to-registry’ variable
so ‘spam.el’ will use ‘gnus-registry.el’ to track what articles have
been processed, and avoid processing articles multiple times.  Keep in
mind that if you limit the number of registry entries, this won’t work
as well as it does without a limit.

   Set this variable if you want only unseen articles in spam groups to
be marked as spam.  By default, it is set.  If you set it to ‘nil’,
unread articles will also be marked as spam.

   Set this variable if you want ham to be unmarked before it is moved
out of the spam group.  This is very useful when you use something like
the tick mark ‘!’ to mark ham—the article will be placed in your
‘ham-process-destination’, unmarked as if it came fresh from the mail
server.

   When autodetecting spam, this variable tells ‘spam.el’ whether only
unseen articles or all unread articles should be checked for spam.  It
is recommended that you leave it off.


File: gnus.info,  Node: Spam Package Configuration Examples,  Next: Spam Back Ends,  Prev: Spam and Ham Processors,  Up: Spam Package

10.18.5 Spam Package Configuration Examples
-------------------------------------------

Ted’s setup
...........

From Ted Zlatanov <tzz@lifelogs.com>.
     ;; for ‘gnus-registry-split-fancy-with-parent’ and spam autodetection
     ;; see ‘gnus-registry.el’ for more information
     (gnus-registry-initialize)
     (spam-initialize)

     (setq
      spam-log-to-registry t     ; for spam autodetection
      spam-use-BBDB t
      spam-use-regex-headers t   ; catch X-Spam-Flag (SpamAssassin)
      ;; all groups with ‘spam’ in the name contain spam
      gnus-spam-newsgroup-contents
       '(("spam" gnus-group-spam-classification-spam))
      ;; see documentation for these
      spam-move-spam-nonspam-groups-only nil
      spam-mark-only-unseen-as-spam t
      spam-mark-ham-unread-before-move-from-spam-group t
      ;; understand what this does before you copy it to your own setup!
      ;; for nnimap you’ll probably want to set nnimap-split-methods, see the manual
      nnimap-split-fancy '(|
                           ;; trace references to parents and put in their group
                           (: gnus-registry-split-fancy-with-parent)
                           ;; this will catch server-side SpamAssassin tags
                           (: spam-split 'spam-use-regex-headers)
                           (any "ding" "ding")
                           ;; note that spam by default will go to ‘spam’
                           (: spam-split)
                           ;; default mailbox
                           "mail"))

     ;; my parameters, set with ‘G p’

     ;; all nnml groups, and all nnimap groups except
     ;; ‘nnimap+mail.lifelogs.com:train’ and
     ;; ‘nnimap+mail.lifelogs.com:spam’: any spam goes to nnimap training,
     ;; because it must have been detected manually

     ((spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; all NNTP groups
     ;; autodetect spam with the blacklist and ham with the BBDB
     ((spam-autodetect-methods spam-use-blacklist spam-use-BBDB)
     ;; send all spam to the training group
      (spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; only some NNTP groups, where I want to autodetect spam
     ((spam-autodetect . t))

     ;; my nnimap ‘nnimap+mail.lifelogs.com:spam’ group

     ;; this is a spam group
     ((spam-contents gnus-group-spam-classification-spam)

      ;; any spam (which happens when I enter for all unseen messages,
      ;; because of the ‘gnus-spam-newsgroup-contents’ setting above), goes to
      ;; ‘nnimap+mail.lifelogs.com:train’ unless I mark it as ham

      (spam-process-destination "nnimap+mail.lifelogs.com:train")

      ;; any ham goes to my ‘nnimap+mail.lifelogs.com:mail’ folder, but
      ;; also to my ‘nnimap+mail.lifelogs.com:trainham’ folder for training

      (ham-process-destination "nnimap+mail.lifelogs.com:mail"
                               "nnimap+mail.lifelogs.com:trainham")
      ;; in this group, only ‘!’ marks are ham
      (ham-marks
       (gnus-ticked-mark))
      ;; remembers senders in the blacklist on the way out—this is
      ;; definitely not needed, it just makes me feel better
      (spam-process (gnus-group-spam-exit-processor-blacklist)))

     ;; Later, on the IMAP server I use the ‘train’ group for training
     ;; SpamAssassin to recognize spam, and the ‘trainham’ group fora
     ;; recognizing ham—but Gnus has nothing to do with it.


Using ‘spam.el’ on an IMAP server with a statistical filter on the server
.........................................................................

From Reiner Steib <reiner.steib@gmx.de>.

   My provider has set up bogofilter (in combination with DCC) on the
mail server (IMAP).  Recognized spam goes to ‘spam.detected’, the rest
goes through the normal filter rules, i.e., to ‘some.folder’ or to
‘INBOX’.  Training on false positives or negatives is done by copying or
moving the article to ‘training.ham’ or ‘training.spam’ respectively.  A
cron job on the server feeds those to bogofilter with the suitable ham
or spam options and deletes them from the ‘training.ham’ and
‘training.spam’ folders.

   With the following entries in ‘gnus-parameters’, ‘spam.el’ does most
of the job for me:

        ("nnimap:spam\\.detected"
         (gnus-article-sort-functions '(gnus-article-sort-by-chars))
         (ham-process-destination "nnimap:INBOX" "nnimap:training.ham")
         (spam-contents gnus-group-spam-classification-spam))
        ("nnimap:\\(INBOX\\|other-folders\\)"
         (spam-process-destination . "nnimap:training.spam")
         (spam-contents gnus-group-spam-classification-ham))

   • The Spam folder:

     In the folder ‘spam.detected’, I have to check for false positives
     (i.e., legitimate mails, that were wrongly judged as spam by
     bogofilter or DCC).

     Because of the ‘gnus-group-spam-classification-spam’ entry, all
     messages are marked as spam (with ‘$’).  When I find a false
     positive, I mark the message with some other ham mark (‘ham-marks’,
     *note Spam and Ham Processors::).  On group exit, those messages
     are copied to both groups, ‘INBOX’ (where I want to have the
     article) and ‘training.ham’ (for training bogofilter) and deleted
     from the ‘spam.detected’ folder.

     The ‘gnus-article-sort-by-chars’ entry simplifies detection of
     false positives for me.  I receive lots of worms (sweN, ...), that
     all have a similar size.  Grouping them by size (i.e., chars) makes
     finding other false positives easier.  (Of course worms aren’t spam
     strictly speaking.  Anyhow, bogofilter is an excellent tool for
     filtering those unwanted mails for me.)

   • Ham folders:

     In my ham folders, I just hit ‘S x’ (‘gnus-summary-mark-as-spam’)
     whenever I see an unrecognized spam mail (false negative).  On
     group exit, those messages are moved to ‘training.spam’.

Reporting spam articles in Gmane groups with ‘spam-report.el’
.............................................................

From Reiner Steib <reiner.steib@gmx.de>.

   With following entry in ‘gnus-parameters’, ‘S x’
(‘gnus-summary-mark-as-spam’) marks articles in ‘gmane.*’ groups as spam
and reports the to Gmane at group exit:

        ("^gmane\\."
         (spam-process (gnus-group-spam-exit-processor-report-gmane)))

   Additionally, I use ‘(setq spam-report-gmane-use-article-number nil)’
because I don’t read the groups directly from news.gmane.org, but
through my local news server (leafnode).  I.e., the article numbers are
not the same as on news.gmane.org, thus ‘spam-report.el’ has to check
the ‘X-Report-Spam’ header to find the correct number.


File: gnus.info,  Node: Spam Back Ends,  Next: Extending the Spam package,  Prev: Spam Package Configuration Examples,  Up: Spam Package

10.18.6 Spam Back Ends
----------------------

The spam package offers a variety of back ends for detecting spam.  Each
back end defines a set of methods for detecting spam (*note Filtering
Incoming Mail::, *note Detecting Spam in Groups::), and a pair of spam
and ham processors (*note Spam and Ham Processors::).

* Menu:

* Blacklists and Whitelists::
* BBDB Whitelists::
* Gmane Spam Reporting::
* Anti-spam Hashcash Payments::
* Blackholes::
* Regular Expressions Header Matching::
* Bogofilter::
* SpamAssassin back end::
* ifile spam filtering::
* Spam Statistics Filtering::
* SpamOracle::


File: gnus.info,  Node: Blacklists and Whitelists,  Next: BBDB Whitelists,  Up: Spam Back Ends

10.18.6.1 Blacklists and Whitelists
...................................

 -- Variable: spam-use-blacklist

     Set this variable to ‘t’ if you want to use blacklists when
     splitting incoming mail.  Messages whose senders are in the
     blacklist will be sent to the ‘spam-split-group’.  This is an
     explicit filter, meaning that it acts only on mail senders
     _declared_ to be spammers.

 -- Variable: spam-use-whitelist

     Set this variable to ‘t’ if you want to use whitelists when
     splitting incoming mail.  Messages whose senders are not in the
     whitelist will be sent to the next spam-split rule.  This is an
     explicit filter, meaning that unless someone is in the whitelist,
     their messages are not assumed to be spam or ham.

 -- Variable: spam-use-whitelist-exclusive

     Set this variable to ‘t’ if you want to use whitelists as an
     implicit filter, meaning that every message will be considered spam
     unless the sender is in the whitelist.  Use with care.

 -- Variable: gnus-group-spam-exit-processor-blacklist

     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the senders of spam-marked
     articles will be added to the blacklist.

     _WARNING_

     Instead of the obsolete ‘gnus-group-spam-exit-processor-blacklist’,
     it is recommended that you use ‘(spam spam-use-blacklist)’.
     Everything will work the same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-whitelist

     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the senders of ham-marked
     articles in _ham_ groups will be added to the whitelist.

     _WARNING_

     Instead of the obsolete ‘gnus-group-ham-exit-processor-whitelist’,
     it is recommended that you use ‘(ham spam-use-whitelist)’.
     Everything will work the same way, we promise.

   Blacklists are lists of regular expressions matching addresses you
consider to be spam senders.  For instance, to block mail from any
sender at ‘vmadmin.com’, you can put ‘vmadmin.com’ in your blacklist.
You start out with an empty blacklist.  Blacklist entries use the Emacs
regular expression syntax.

   Conversely, whitelists tell Gnus what addresses are considered
legitimate.  All messages from whitelisted addresses are considered
non-spam.  Also see *note BBDB Whitelists::.  Whitelist entries use the
Emacs regular expression syntax.

   The blacklist and whitelist file locations can be customized with the
‘spam-directory’ variable (‘~/News/spam’ by default), or the
‘spam-whitelist’ and ‘spam-blacklist’ variables directly.  The whitelist
and blacklist files will by default be in the ‘spam-directory’
directory, named ‘whitelist’ and ‘blacklist’ respectively.


File: gnus.info,  Node: BBDB Whitelists,  Next: Gmane Spam Reporting,  Prev: Blacklists and Whitelists,  Up: Spam Back Ends

10.18.6.2 BBDB Whitelists
.........................

 -- Variable: spam-use-BBDB

     Analogous to ‘spam-use-whitelist’ (*note Blacklists and
     Whitelists::), but uses the BBDB as the source of whitelisted
     addresses, without regular expressions.  You must have the BBDB
     loaded for ‘spam-use-BBDB’ to work properly.  Messages whose
     senders are not in the BBDB will be sent to the next spam-split
     rule.  This is an explicit filter, meaning that unless someone is
     in the BBDB, their messages are not assumed to be spam or ham.

 -- Variable: spam-use-BBDB-exclusive

     Set this variable to ‘t’ if you want to use the BBDB as an implicit
     filter, meaning that every message will be considered spam unless
     the sender is in the BBDB.  Use with care.  Only sender addresses
     in the BBDB will be allowed through; all others will be classified
     as spammers.

     While ‘spam-use-BBDB-exclusive’ _can_ be used as an alias for
     ‘spam-use-BBDB’ as far as ‘spam.el’ is concerned, it is _not_ a
     separate back end.  If you set ‘spam-use-BBDB-exclusive’ to ‘t’,
     _all_ your BBDB splitting will be exclusive.

 -- Variable: gnus-group-ham-exit-processor-BBDB

     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the senders of ham-marked
     articles in _ham_ groups will be added to the BBDB.

     _WARNING_

     Instead of the obsolete ‘gnus-group-ham-exit-processor-BBDB’, it is
     recommended that you use ‘(ham spam-use-BBDB)’.  Everything will
     work the same way, we promise.


File: gnus.info,  Node: Gmane Spam Reporting,  Next: Anti-spam Hashcash Payments,  Prev: BBDB Whitelists,  Up: Spam Back Ends

10.18.6.3 Gmane Spam Reporting
..............................

 -- Variable: gnus-group-spam-exit-processor-report-gmane

     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the spam-marked articles
     groups will be reported to the Gmane administrators via a HTTP
     request.

     Gmane was formerly found at <http://gmane.org>.

     _WARNING_

     Instead of the obsolete
     ‘gnus-group-spam-exit-processor-report-gmane’, it is recommended
     that you use ‘(spam spam-use-gmane)’.  Everything will work the
     same way, we promise.

 -- Variable: spam-report-gmane-use-article-number

     This variable is ‘t’ by default.  Set it to ‘nil’ if you are
     running your own news server, for instance, and the local article
     numbers don’t correspond to the Gmane article numbers.  When
     ‘spam-report-gmane-use-article-number’ is ‘nil’, ‘spam-report.el’
     will fetch the number from the article headers.

 -- Variable: spam-report-user-mail-address

     Mail address exposed in the User-Agent spam reports to Gmane.  It
     allows the Gmane administrators to contact you in case of
     misreports.  The default is ‘user-mail-address’.


File: gnus.info,  Node: Anti-spam Hashcash Payments,  Next: Blackholes,  Prev: Gmane Spam Reporting,  Up: Spam Back Ends

10.18.6.4 Anti-spam Hashcash Payments
.....................................

 -- Variable: spam-use-hashcash

     Similar to ‘spam-use-whitelist’ (*note Blacklists and
     Whitelists::), but uses hashcash tokens for whitelisting messages
     instead of the sender address.  Messages without a hashcash payment
     token will be sent to the next spam-split rule.  This is an
     explicit filter, meaning that unless a hashcash token is found, the
     messages are not assumed to be spam or ham.


File: gnus.info,  Node: Blackholes,  Next: Regular Expressions Header Matching,  Prev: Anti-spam Hashcash Payments,  Up: Spam Back Ends

10.18.6.5 Blackholes
....................

 -- Variable: spam-use-blackholes

     This option is disabled by default.  You can let Gnus consult the
     blackhole-type distributed spam processing systems (DCC, for
     instance) when you set this option.  The variable
     ‘spam-blackhole-servers’ holds the list of blackhole servers Gnus
     will consult.  The current list is fairly comprehensive, but make
     sure to let us know if it contains outdated servers.

     The blackhole check uses the ‘dig.el’ package, but you can tell
     ‘spam.el’ to use ‘dns.el’ instead for better performance if you set
     ‘spam-use-dig’ to ‘nil’.  It is not recommended at this time to set
     ‘spam-use-dig’ to ‘nil’ despite the possible performance
     improvements, because some users may be unable to use it, but you
     can try it and see if it works for you.

 -- Variable: spam-blackhole-servers

     The list of servers to consult for blackhole checks.

 -- Variable: spam-blackhole-good-server-regex

     A regular expression for IPs that should not be checked against the
     blackhole server list.  When set to ‘nil’, it has no effect.

 -- Variable: spam-use-dig

     Use the ‘dig.el’ package instead of the ‘dns.el’ package.  The
     default setting of ‘t’ is recommended.

   Blackhole checks are done only on incoming mail.  There is no spam or
ham processor for blackholes.


File: gnus.info,  Node: Regular Expressions Header Matching,  Next: Bogofilter,  Prev: Blackholes,  Up: Spam Back Ends

10.18.6.6 Regular Expressions Header Matching
.............................................

 -- Variable: spam-use-regex-headers

     This option is disabled by default.  You can let Gnus check the
     message headers against lists of regular expressions when you set
     this option.  The variables ‘spam-regex-headers-spam’ and
     ‘spam-regex-headers-ham’ hold the list of regular expressions.
     Gnus will check against the message headers to determine if the
     message is spam or ham, respectively.

 -- Variable: spam-regex-headers-spam

     The list of regular expressions that, when matched in the headers
     of the message, positively identify it as spam.

 -- Variable: spam-regex-headers-ham

     The list of regular expressions that, when matched in the headers
     of the message, positively identify it as ham.

   Regular expression header checks are done only on incoming mail.
There is no specific spam or ham processor for regular expressions.


File: gnus.info,  Node: Bogofilter,  Next: SpamAssassin back end,  Prev: Regular Expressions Header Matching,  Up: Spam Back Ends

10.18.6.7 Bogofilter
....................

 -- Variable: spam-use-bogofilter

     Set this variable if you want ‘spam-split’ to use Eric Raymond’s
     speedy Bogofilter.

     With a minimum of care for associating the ‘$’ mark for spam
     articles only, Bogofilter training all gets fairly automatic.  You
     should do this until you get a few hundreds of articles in each
     category, spam or not.  The command ‘S t’ in summary mode, either
     for debugging or for curiosity, shows the _spamicity_ score of the
     current article (between 0.0 and 1.0).

     Bogofilter determines if a message is spam based on a specific
     threshold.  That threshold can be customized, consult the
     Bogofilter documentation.

     If the ‘bogofilter’ executable is not in your path, Bogofilter
     processing will be turned off.

     You should not enable this if you use
     ‘spam-use-bogofilter-headers’.

‘M s t’
‘S t’
     Get the Bogofilter spamicity score (‘spam-bogofilter-score’).

 -- Variable: spam-use-bogofilter-headers

     Set this variable if you want ‘spam-split’ to use Eric Raymond’s
     speedy Bogofilter, looking only at the message headers.  It works
     similarly to ‘spam-use-bogofilter’, but the ‘X-Bogosity’ header
     must be in the message already.  Normally you would do this with a
     procmail recipe or something similar; consult the Bogofilter
     installation documents for details.

     You should not enable this if you use ‘spam-use-bogofilter’.

 -- Variable: gnus-group-spam-exit-processor-bogofilter
     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, spam-marked articles will be
     added to the Bogofilter spam database.

     _WARNING_

     Instead of the obsolete
     ‘gnus-group-spam-exit-processor-bogofilter’, it is recommended that
     you use ‘(spam spam-use-bogofilter)’.  Everything will work the
     same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-bogofilter
     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the ham-marked articles in
     _ham_ groups will be added to the Bogofilter database of non-spam
     messages.

     _WARNING_

     Instead of the obsolete ‘gnus-group-ham-exit-processor-bogofilter’,
     it is recommended that you use ‘(ham spam-use-bogofilter)’.
     Everything will work the same way, we promise.

 -- Variable: spam-bogofilter-database-directory

     This is the directory where Bogofilter will store its databases.
     It is not specified by default, so Bogofilter will use its own
     default database directory.

   The Bogofilter mail classifier is similar to ‘ifile’ in intent and
purpose.  A ham and a spam processor are provided, plus the
‘spam-use-bogofilter’ and ‘spam-use-bogofilter-headers’ variables to
indicate to spam-split that Bogofilter should either be used, or has
already been used on the article.  The 0.9.2.1 version of Bogofilter was
used to test this functionality.


File: gnus.info,  Node: SpamAssassin back end,  Next: ifile spam filtering,  Prev: Bogofilter,  Up: Spam Back Ends

10.18.6.8 SpamAssassin back end
...............................

 -- Variable: spam-use-spamassassin

     Set this variable if you want ‘spam-split’ to use SpamAssassin.

     SpamAssassin assigns a score to each article based on a set of
     rules and tests, including a Bayesian filter.  The Bayesian filter
     can be trained by associating the ‘$’ mark for spam articles.  The
     spam score can be viewed by using the command ‘S t’ in summary
     mode.

     If you set this variable, each article will be processed by
     SpamAssassin when ‘spam-split’ is called.  If your mail is
     preprocessed by SpamAssassin, and you want to just use the
     SpamAssassin headers, set ‘spam-use-spamassassin-headers’ instead.

     You should not enable this if you use
     ‘spam-use-spamassassin-headers’.

 -- Variable: spam-use-spamassassin-headers

     Set this variable if your mail is preprocessed by SpamAssassin and
     want ‘spam-split’ to split based on the SpamAssassin headers.

     You should not enable this if you use ‘spam-use-spamassassin’.

 -- Variable: spam-spamassassin-program

     This variable points to the SpamAssassin executable.  If you have
     ‘spamd’ running, you can set this variable to the ‘spamc’
     executable for faster processing.  See the SpamAssassin
     documentation for more information on ‘spamd’/‘spamc’.

   SpamAssassin is a powerful and flexible spam filter that uses a wide
variety of tests to identify spam.  A ham and a spam processors are
provided, plus the ‘spam-use-spamassassin’ and
‘spam-use-spamassassin-headers’ variables to indicate to spam-split that
SpamAssassin should be either used, or has already been used on the
article.  The 2.63 version of SpamAssassin was used to test this
functionality.


File: gnus.info,  Node: ifile spam filtering,  Next: Spam Statistics Filtering,  Prev: SpamAssassin back end,  Up: Spam Back Ends

10.18.6.9 ifile spam filtering
..............................

 -- Variable: spam-use-ifile

     Enable this variable if you want ‘spam-split’ to use ‘ifile’, a
     statistical analyzer similar to Bogofilter.

 -- Variable: spam-ifile-all-categories

     Enable this variable if you want ‘spam-use-ifile’ to give you all
     the ifile categories, not just spam/non-spam.  If you use this,
     make sure you train ifile as described in its documentation.

 -- Variable: spam-ifile-spam-category

     This is the category of spam messages as far as ifile is concerned.
     The actual string used is irrelevant, but you probably want to
     leave the default value of ‘spam’.

 -- Variable: spam-ifile-database

     This is the filename for the ifile database.  It is not specified
     by default, so ifile will use its own default database name.

   The ifile mail classifier is similar to Bogofilter in intent and
purpose.  A ham and a spam processor are provided, plus the
‘spam-use-ifile’ variable to indicate to spam-split that ifile should be
used.  The 1.2.1 version of ifile was used to test this functionality.


File: gnus.info,  Node: Spam Statistics Filtering,  Next: SpamOracle,  Prev: ifile spam filtering,  Up: Spam Back Ends

10.18.6.10 Spam Statistics Filtering
....................................

This back end uses the Spam Statistics Emacs Lisp package to perform
statistics-based filtering (*note Spam Statistics Package::).  Before
using this, you may want to perform some additional steps to initialize
your Spam Statistics dictionary.  *Note Creating a spam-stat
dictionary::.

 -- Variable: spam-use-stat

 -- Variable: gnus-group-spam-exit-processor-stat
     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the spam-marked articles
     will be added to the spam-stat database of spam messages.

     _WARNING_

     Instead of the obsolete ‘gnus-group-spam-exit-processor-stat’, it
     is recommended that you use ‘(spam spam-use-stat)’.  Everything
     will work the same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-stat
     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameters or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the ham-marked articles in
     _ham_ groups will be added to the spam-stat database of non-spam
     messages.

     _WARNING_

     Instead of the obsolete ‘gnus-group-ham-exit-processor-stat’, it is
     recommended that you use ‘(ham spam-use-stat)’.  Everything will
     work the same way, we promise.

   This enables ‘spam.el’ to cooperate with ‘spam-stat.el’.
‘spam-stat.el’ provides an internal (Lisp-only) spam database, which
unlike ifile or Bogofilter does not require external programs.  A spam
and a ham processor, and the ‘spam-use-stat’ variable for ‘spam-split’
are provided.


File: gnus.info,  Node: SpamOracle,  Prev: Spam Statistics Filtering,  Up: Spam Back Ends

10.18.6.11 Using SpamOracle with Gnus
.....................................

An easy way to filter out spam is to use SpamOracle.  SpamOracle is an
statistical mail filtering tool written by Xavier Leroy and needs to be
installed separately.

   There are several ways to use SpamOracle with Gnus.  In all cases,
your mail is piped through SpamOracle in its _mark_ mode.  SpamOracle
will then enter an ‘X-Spam’ header indicating whether it regards the
mail as a spam mail or not.

   One possibility is to run SpamOracle as a ‘:prescript’ from the *Note
Mail Source Specifiers::, (*note SpamAssassin::).  This method has the
advantage that the user can see the _X-Spam_ headers.

   The easiest method is to make ‘spam.el’ (*note Spam Package::) call
SpamOracle.

   To enable SpamOracle usage by ‘spam.el’, set the variable
‘spam-use-spamoracle’ to ‘t’ and configure the ‘nnmail-split-fancy’ or
‘nnimap-split-fancy’.  *Note Spam Package::.  In this example the
‘INBOX’ of an nnimap server is filtered using SpamOracle.  Mails
recognized as spam mails will be moved to ‘spam-split-group’, ‘Junk’ in
this case.  Ham messages stay in ‘INBOX’:

     (setq spam-use-spamoracle t
           spam-split-group "Junk"
           ;; for nnimap you’ll probably want to set nnimap-split-methods, see the manual
           nnimap-split-inbox '("INBOX")
           nnimap-split-fancy '(| (: spam-split) "INBOX"))

 -- Variable: spam-use-spamoracle
     Set to ‘t’ if you want Gnus to enable spam filtering using
     SpamOracle.

 -- Variable: spam-spamoracle-binary
     Gnus uses the SpamOracle binary called ‘spamoracle’ found in the
     user’s PATH.  Using the variable ‘spam-spamoracle-binary’, this can
     be customized.

 -- Variable: spam-spamoracle-database
     By default, SpamOracle uses the file ‘~/.spamoracle.db’ as a
     database to store its analysis.  This is controlled by the variable
     ‘spam-spamoracle-database’ which defaults to ‘nil’.  That means the
     default SpamOracle database will be used.  In case you want your
     database to live somewhere special, set ‘spam-spamoracle-database’
     to this path.

   SpamOracle employs a statistical algorithm to determine whether a
message is spam or ham.  In order to get good results, meaning few false
hits or misses, SpamOracle needs training.  SpamOracle learns the
characteristics of your spam mails.  Using the _add_ mode (training
mode) one has to feed good (ham) and spam mails to SpamOracle.  This can
be done by pressing ‘|’ in the Summary buffer and pipe the mail to a
SpamOracle process or using ‘spam.el’’s spam- and ham-processors, which
is much more convenient.  For a detailed description of spam- and
ham-processors, *Note Spam Package::.

 -- Variable: gnus-group-spam-exit-processor-spamoracle
     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameter or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, spam-marked articles will be
     sent to SpamOracle as spam samples.

     _WARNING_

     Instead of the obsolete
     ‘gnus-group-spam-exit-processor-spamoracle’, it is recommended that
     you use ‘(spam spam-use-spamoracle)’.  Everything will work the
     same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-spamoracle
     Add this symbol to a group’s ‘spam-process’ parameter by
     customizing the group parameter or the
     ‘gnus-spam-process-newsgroups’ variable.  When this symbol is added
     to a group’s ‘spam-process’ parameter, the ham-marked articles in
     _ham_ groups will be sent to the SpamOracle as samples of ham
     messages.

     _WARNING_

     Instead of the obsolete ‘gnus-group-ham-exit-processor-spamoracle’,
     it is recommended that you use ‘(ham spam-use-spamoracle)’.
     Everything will work the same way, we promise.

   _Example:_ These are the Group Parameters of a group that has been
classified as a ham group, meaning that it should only contain ham
messages.
      ((spam-contents gnus-group-spam-classification-ham)
       (spam-process ((ham spam-use-spamoracle)
                      (spam spam-use-spamoracle))))
   For this group the ‘spam-use-spamoracle’ is installed for both ham
and spam processing.  If the group contains spam message (e.g., because
SpamOracle has not had enough sample messages yet) and the user marks
some messages as spam messages, these messages will be processed by
SpamOracle.  The processor sends the messages to SpamOracle as new
samples for spam.


File: gnus.info,  Node: Extending the Spam package,  Next: Spam Statistics Package,  Prev: Spam Back Ends,  Up: Spam Package

10.18.7 Extending the Spam package
----------------------------------

Say you want to add a new back end called blackbox.  For filtering
incoming mail, provide the following:

  1. Code

          (defvar spam-use-blackbox nil
            "True if blackbox should be used.")

     Write ‘spam-check-blackbox’ if Blackbox can check incoming mail.

     Write ‘spam-blackbox-register-routine’ and
     ‘spam-blackbox-unregister-routine’ using the bogofilter
     register/unregister routines as a start, or other
     register/unregister routines more appropriate to Blackbox, if
     Blackbox can register/unregister spam and ham.

  2. Functionality

     The ‘spam-check-blackbox’ function should return ‘nil’ or
     ‘spam-split-group’, observing the other conventions.  See the
     existing ‘spam-check-*’ functions for examples of what you can do,
     and stick to the template unless you fully understand the reasons
     why you aren’t.

   For processing spam and ham messages, provide the following:

  1. Code

     Note you don’t have to provide a spam or a ham processor.  Only
     provide them if Blackbox supports spam or ham processing.

     Also, ham and spam processors are being phased out as single
     variables.  Instead the form ‘(spam spam-use-blackbox)’ or ‘(ham
     spam-use-blackbox)’ is favored.  For now, spam/ham processor
     variables are still around but they won’t be for long.

          (defvar gnus-group-spam-exit-processor-blackbox "blackbox-spam"
            "The Blackbox summary exit spam processor.
          Only applicable to spam groups.")

          (defvar gnus-group-ham-exit-processor-blackbox "blackbox-ham"
            "The whitelist summary exit ham processor.
          Only applicable to non-spam (unclassified and ham) groups.")


  2. Gnus parameters

     Add
          (const :tag "Spam: Blackbox" (spam spam-use-blackbox))
          (const :tag "Ham: Blackbox"  (ham spam-use-blackbox))
     to the ‘spam-process’ group parameter in ‘gnus.el’.  Make sure you
     do it twice, once for the parameter and once for the variable
     customization.

     Add
          (variable-item spam-use-blackbox)
     to the ‘spam-autodetect-methods’ group parameter in ‘gnus.el’ if
     Blackbox can check incoming mail for spam contents.

     Finally, use the appropriate ‘spam-install-*-backend’ function in
     ‘spam.el’.  Here are the available functions.

       1. ‘spam-install-backend-alias’

          This function will simply install an alias for a back end that
          does everything like the original back end.  It is currently
          only used to make ‘spam-use-BBDB-exclusive’ act like
          ‘spam-use-BBDB’.

       2. ‘spam-install-nocheck-backend’

          This function installs a back end that has no check function,
          but can register/unregister ham or spam.  The ‘spam-use-gmane’
          back end is such a back end.

       3. ‘spam-install-checkonly-backend’

          This function will install a back end that can only check
          incoming mail for spam contents.  It can’t register or
          unregister messages.  ‘spam-use-blackholes’ and
          ‘spam-use-hashcash’ are such back ends.

       4. ‘spam-install-statistical-checkonly-backend’

          This function installs a statistical back end (one which
          requires the full body of a message to check it) that can only
          check incoming mail for contents.  ‘spam-use-regex-body’ is
          such a filter.

       5. ‘spam-install-statistical-backend’

          This function install a statistical back end with incoming
          checks and registration/unregistration routines.
          ‘spam-use-bogofilter’ is set up this way.

       6. ‘spam-install-backend’

          This is the most normal back end installation, where a back
          end that can check and register/unregister messages is set up
          without statistical abilities.  The ‘spam-use-BBDB’ is such a
          back end.

       7. ‘spam-install-mover-backend’

          Mover back ends are internal to ‘spam.el’ and specifically
          move articles around when the summary is exited.  You will
          very probably never install such a back end.


File: gnus.info,  Node: Spam Statistics Package,  Prev: Extending the Spam package,  Up: Spam Package

10.18.8 Spam Statistics Package
-------------------------------

Paul Graham has written an excellent essay about spam filtering using
statistics: A Plan for Spam (http://www.paulgraham.com/spam.html).  In
it he describes the inherent deficiency of rule-based filtering as used
by SpamAssassin, for example: Somebody has to write the rules, and
everybody else has to install these rules.  You are always late.  It
would be much better, he argues, to filter mail based on whether it
somehow resembles spam or non-spam.  One way to measure this is word
distribution.  He then goes on to describe a solution that checks
whether a new mail resembles any of your other spam mails or not.

   The basic idea is this: Create a two collections of your mail, one
with spam, one with non-spam.  Count how often each word appears in
either collection, weight this by the total number of mails in the
collections, and store this information in a dictionary.  For every word
in a new mail, determine its probability to belong to a spam or a
non-spam mail.  Use the 15 most conspicuous words, compute the total
probability of the mail being spam.  If this probability is higher than
a certain threshold, the mail is considered to be spam.

   The Spam Statistics package adds support to Gnus for this kind of
filtering.  It can be used as one of the back ends of the Spam package
(*note Spam Package::), or by itself.

   Before using the Spam Statistics package, you need to set it up.
First, you need two collections of your mail, one with spam, one with
non-spam.  Then you need to create a dictionary using these two
collections, and save it.  And last but not least, you need to use this
dictionary in your fancy mail splitting rules.

* Menu:

* Creating a spam-stat dictionary::
* Splitting mail using spam-stat::
* Low-level interface to the spam-stat dictionary::


File: gnus.info,  Node: Creating a spam-stat dictionary,  Next: Splitting mail using spam-stat,  Up: Spam Statistics Package

10.18.8.1 Creating a spam-stat dictionary
.........................................

Before you can begin to filter spam based on statistics, you must create
these statistics based on two mail collections, one with spam, one with
non-spam.  These statistics are then stored in a dictionary for later
use.  In order for these statistics to be meaningful, you need several
hundred emails in both collections.

   Gnus currently supports only the nnml back end for automated
dictionary creation.  The nnml back end stores all mails in a directory,
one file per mail.  Use the following:

 -- Function: spam-stat-process-spam-directory
     Create spam statistics for every file in this directory.  Every
     file is treated as one spam mail.

 -- Function: spam-stat-process-non-spam-directory
     Create non-spam statistics for every file in this directory.  Every
     file is treated as one non-spam mail.

 -- Variable: spam-stat-process-directory-age
     Maximum age of files to be processed, in days.  Without this
     filter, re-training spam-stat with several thousand messages could
     take a long time.  The default is 90, but you might want to set
     this to a bigger value during the initial training.

   Usually you would call ‘spam-stat-process-spam-directory’ on a
directory such as ‘~/Mail/mail/spam’ (this usually corresponds to the
group ‘nnml:mail.spam’), and you would call
‘spam-stat-process-non-spam-directory’ on a directory such as
‘~/Mail/mail/misc’ (this usually corresponds to the group
‘nnml:mail.misc’).

   When you are using IMAP, you won’t have the mails available locally,
so that will not work.  One solution is to use the Gnus Agent to cache
the articles.  Then you can use directories such as
‘"~/News/agent/nnimap/mail.yourisp.com/personal_spam"’ for
‘spam-stat-process-spam-directory’.  *Note Agent as Cache::.

 -- Variable: spam-stat
     This variable holds the hash-table with all the statistics—the
     dictionary we have been talking about.  For every word in either
     collection, this hash-table stores a vector describing how often
     the word appeared in spam and often it appeared in non-spam mails.

   If you want to regenerate the statistics from scratch, you need to
reset the dictionary.

 -- Function: spam-stat-reset
     Reset the ‘spam-stat’ hash-table, deleting all the statistics.

   When you are done, you must save the dictionary.  The dictionary may
be rather large.  If you will not update the dictionary incrementally
(instead, you will recreate it once a month, for example), then you can
reduce the size of the dictionary by deleting all words that did not
appear often enough or that do not clearly belong to only spam or only
non-spam mails.

 -- Function: spam-stat-reduce-size
     Reduce the size of the dictionary.  Use this only if you do not
     want to update the dictionary incrementally.

 -- Function: spam-stat-save
     Save the dictionary.

 -- Variable: spam-stat-file
     The filename used to store the dictionary.  This defaults to
     ‘~/.spam-stat.el’.


File: gnus.info,  Node: Splitting mail using spam-stat,  Next: Low-level interface to the spam-stat dictionary,  Prev: Creating a spam-stat dictionary,  Up: Spam Statistics Package

10.18.8.2 Splitting mail using spam-stat
........................................

This section describes how to use the Spam statistics _independently_ of
the *Note Spam Package::.

   First, add the following to your ‘~/.gnus.el’ file:

     (require 'spam-stat)
     (spam-stat-load)

   This will load the necessary Gnus code, and the dictionary you
created.

   Next, you need to adapt your fancy splitting rules: You need to
determine how to use ‘spam-stat’.  The following examples are for the
nnml back end.  Using the nnimap back end works just as well.  Just use
‘nnimap-split-fancy’ instead of ‘nnmail-split-fancy’.

   In the simplest case, you only have two groups, ‘mail.misc’ and
‘mail.spam’.  The following expression says that mail is either spam or
it should go into ‘mail.misc’.  If it is spam, then
‘spam-stat-split-fancy’ will return ‘mail.spam’.

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               "mail.misc"))

 -- Variable: spam-stat-split-fancy-spam-group
     The group to use for spam.  Default is ‘mail.spam’.

   If you also filter mail with specific subjects into other groups, use
the following expression.  Only mails not matching the regular
expression are considered potential spam.

     (setq nnmail-split-fancy
           `(| ("Subject" "\\bspam-stat\\b" "mail.emacs")
               (: spam-stat-split-fancy)
               "mail.misc"))

   If you want to filter for spam first, then you must be careful when
creating the dictionary.  Note that ‘spam-stat-split-fancy’ must
consider both mails in ‘mail.emacs’ and in ‘mail.misc’ as non-spam,
therefore both should be in your collection of non-spam mails, when
creating the dictionary!

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))

   You can combine this with traditional filtering.  Here, we move all
HTML-only mails into the ‘mail.spam.filtered’ group.  Note that since
‘spam-stat-split-fancy’ will never see them, the mails in
‘mail.spam.filtered’ should be neither in your collection of spam mails,
nor in your collection of non-spam mails, when creating the dictionary!

     (setq nnmail-split-fancy
           `(| ("Content-Type" "text/html" "mail.spam.filtered")
               (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))


File: gnus.info,  Node: Low-level interface to the spam-stat dictionary,  Prev: Splitting mail using spam-stat,  Up: Spam Statistics Package

10.18.8.3 Low-level interface to the spam-stat dictionary
.........................................................

The main interface to using ‘spam-stat’, are the following functions:

 -- Function: spam-stat-buffer-is-spam
     Called in a buffer, that buffer is considered to be a new spam
     mail.  Use this for new mail that has not been processed before.

 -- Function: spam-stat-buffer-is-no-spam
     Called in a buffer, that buffer is considered to be a new non-spam
     mail.  Use this for new mail that has not been processed before.

 -- Function: spam-stat-buffer-change-to-spam
     Called in a buffer, that buffer is no longer considered to be
     normal mail but spam.  Use this to change the status of a mail that
     has already been processed as non-spam.

 -- Function: spam-stat-buffer-change-to-non-spam
     Called in a buffer, that buffer is no longer considered to be spam
     but normal mail.  Use this to change the status of a mail that has
     already been processed as spam.

 -- Function: spam-stat-save
     Save the hash table to the file.  The filename used is stored in
     the variable ‘spam-stat-file’.

 -- Function: spam-stat-load
     Load the hash table from a file.  The filename used is stored in
     the variable ‘spam-stat-file’.

 -- Function: spam-stat-score-word
     Return the spam score for a word.

 -- Function: spam-stat-score-buffer
     Return the spam score for a buffer.

 -- Function: spam-stat-split-fancy
     Use this function for fancy mail splitting.  Add the rule ‘(:
     spam-stat-split-fancy)’ to ‘nnmail-split-fancy’

   Make sure you load the dictionary before using it.  This requires the
following in your ‘~/.gnus.el’ file:

     (require 'spam-stat)
     (spam-stat-load)

   Typical test will involve calls to the following functions:

     Reset: (setq spam-stat (make-hash-table :test 'equal))
     Learn spam: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     Learn non-spam: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     Save table: (spam-stat-save)
     File size: (file-attribute-size (file-attributes spam-stat-file))
     Number of words: (hash-table-count spam-stat)
     Test spam: (spam-stat-test-directory "~/Mail/mail/spam")
     Test non-spam: (spam-stat-test-directory "~/Mail/mail/misc")
     Reduce table size: (spam-stat-reduce-size)
     Save table: (spam-stat-save)
     File size: (file-attribute-size (file-attributes spam-stat-file))
     Number of words: (hash-table-count spam-stat)
     Test spam: (spam-stat-test-directory "~/Mail/mail/spam")
     Test non-spam: (spam-stat-test-directory "~/Mail/mail/misc")

   Here is how you would create your dictionary:

     Reset: (setq spam-stat (make-hash-table :test 'equal))
     Learn spam: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     Learn non-spam: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     Repeat for any other non-spam group you need...
     Reduce table size: (spam-stat-reduce-size)
     Save table: (spam-stat-save)


File: gnus.info,  Node: The Gnus Registry,  Next: The Gnus Cloud,  Prev: Spam Package,  Up: Various

# /. 10.19 The Gnus Registry
===========================

The Gnus registry is a package that tracks messages by their Message-ID
across all backends.  This allows Gnus users to do several cool things,
be the envy of the locals, get free haircuts, and be experts on world
issues.  Well, maybe not all of those, but the features are pretty cool.

   Although they will be explained in detail shortly, here’s a quick
list of said features in case your attention span is...  never mind.

  1. Split messages to their parent

     This keeps discussions in the same group.  You can use the subject
     and the sender in addition to the Message-ID.  Several strategies
     are available.

  2. Refer to messages by ID

     Commands like ‘gnus-summary-refer-parent-article’ can take
     advantage of the registry to jump to the referred article,
     regardless of the group the message is in.

  3. Store custom flags and keywords

     The registry can store custom flags and keywords for a message.
     For instance, you can mark a message “To-Do” this way and the flag
     will persist whether the message is in the nnimap, nnml, nnmaildir,
     etc. backends.

  4. Store arbitrary data

     Through a simple ELisp API, the registry can remember any data for
     a message.  A built-in inverse map, when activated, allows quick
     lookups of all messages matching a particular set of criteria.

* Menu:

* Gnus Registry Setup::
* Registry Article Refer Method::
* Fancy splitting to parent::
* Store custom flags and keywords::
* Store arbitrary data::


File: gnus.info,  Node: Gnus Registry Setup,  Next: Registry Article Refer Method,  Up: The Gnus Registry

10.19.1 Gnus Registry Setup
---------------------------

Fortunately, setting up the Gnus registry is pretty easy:

     (setq gnus-registry-max-entries 2500)

     (gnus-registry-initialize)

   This adds registry saves to Gnus newsrc saves (which happen on exit
and when you press ‘s’ from the ‘*Group*’ buffer).  It also adds
registry calls to article actions in Gnus (copy, move, etc.) so it’s not
easy to undo the initialization.  See ‘gnus-registry-initialize’ for the
gory details.

   Here are other settings used by the author of the registry
(understand what they do before you copy them blindly).

     (setq
      gnus-registry-split-strategy 'majority
      gnus-registry-ignored-groups '(("nntp" t)
                                     ("nnrss" t)
                                     ("spam" t)
                                     ("train" t))
      gnus-registry-max-entries 500000
      ;; this is the default
      gnus-registry-track-extra '(sender subject))

   They say: keep a lot of messages around, track messages by sender and
subject (not just parent Message-ID), and when the registry splits
incoming mail, use a majority rule to decide where messages should go if
there’s more than one possibility.  In addition, the registry should
ignore messages in groups that match “nntp”, “nnrss”, “spam”, or
“train.”

   You are doubtless impressed by all this, but you ask: “I am a Gnus
user, I customize to live.  Give me more.” Here you go, these are the
general settings.

 -- Variable: gnus-registry-unfollowed-groups
     The groups that will not be followed by
     ‘gnus-registry-split-fancy-with-parent’.  They will still be
     remembered by the registry.  This is a list of regular expressions.
     By default any group name that ends with “delayed”, “drafts”,
     “queue”, or “INBOX”, belongs to the nnmairix backend, or contains
     the word “archive” is not followed.

 -- Variable: gnus-registry-max-entries
     The number (an integer or ‘nil’ for unlimited) of entries the
     registry will keep.  If the registry has reached or exceeded this
     size, it will reject insertion of new entries.

 -- Variable: gnus-registry-register-all
     If this option is non-‘nil’, the registry will register all
     messages, as you see them.  This is important to making
     split-to-parent and Message-ID references work correctly, as the
     registry needs to know where all messages are, but it can slow down
     group opening and the saving of Gnus.  If this option is ‘nil’,
     entries must be created manually, for instance by storing a custom
     flag or keyword for the message.

 -- Variable: gnus-registry-prune-factor
     This option (a float between 0 and 1) controls how much the
     registry is cut back during pruning.  In order to prevent constant
     pruning, the registry will be pruned back to less than
     ‘gnus-registry-max-entries’.  This option controls exactly how much
     less: the target is calculated as the maximum number of entries
     minus the maximum number times this factor.  The default is 0.1:
     i.e., if your registry is limited to 50000 entries, pruning will
     try to cut back to 45000 entries.  Entries with keys marked as
     precious will not be pruned.

 -- Variable: gnus-registry-default-sort-function
     This option specifies how registry entries are sorted during
     pruning.  If a function is given, it should sort least valuable
     entries first, as pruning starts from the beginning of the list.
     The default value is ‘gnus-registry-sort-by-creation-time’, which
     proposes the oldest entries for pruning.  Set to ‘nil’ to perform
     no sorting, which will speed up the pruning process.

 -- Variable: gnus-registry-cache-file
     The file where the registry will be stored between Gnus sessions.
     By default the file name is ‘.gnus.registry.eieio’ in the same
     directory as your ‘.newsrc.eld’.


File: gnus.info,  Node: Registry Article Refer Method,  Next: Fancy splitting to parent,  Prev: Gnus Registry Setup,  Up: The Gnus Registry

10.19.2 Fetching by ‘Message-ID’ Using the Registry
---------------------------------------------------

The registry knows how to map each ‘Message-ID’ to the group it’s in.
This can be leveraged to enhance the “article refer method”, the thing
that tells Gnus how to look up an article given its Message-ID (*note
Finding the Parent::).

   The ‘nnregistry’ refer method does exactly that.  It has the
advantage that an article may be found regardless of the group it’s
in—provided its ‘Message-ID’ is known to the registry.  It can be
enabled by augmenting the start-up file with something along these
lines:

     ;; Keep enough entries to have a good hit rate when referring to an
     ;; article using the registry.  Use long group names so that Gnus
     ;; knows where the article is.
     (setq gnus-registry-max-entries 2500)

     (gnus-registry-initialize)

     (setq gnus-refer-article-method
           '(current
             (nnregistry)
             (nnweb "gmane" (nnweb-type gmane))))

   The example above instructs Gnus to first look up the article in the
current group, or, alternatively, using the registry, and finally, if
all else fails, using Gmane.


File: gnus.info,  Node: Fancy splitting to parent,  Next: Store custom flags and keywords,  Prev: Registry Article Refer Method,  Up: The Gnus Registry

10.19.3 Fancy splitting to parent
---------------------------------

Simply put, this lets you put followup e-mail where it belongs.

   Every message has a Message-ID, which is unique, and the registry
remembers it.  When the message is moved or copied, the registry will
notice this and offer the new group as a choice to the splitting
strategy.

   When a followup is made, usually it mentions the original message’s
Message-ID in the headers.  The registry knows this and uses that
mention to find the group where the original message lives.  You only
have to put a rule like this:

     (setq nnimap-my-split-fancy '(|

           ;; split to parent: you need this
           (: gnus-registry-split-fancy-with-parent)

           ;; other rules, as an example
           (: spam-split)
           ;; default mailbox
           "mail")

   in your fancy split setup.

   If ‘gnus-registry-register-all’ is non-‘nil’ (the default), the
registry will perform splitting for all messages.  If it is ‘nil’,
splitting will only happen for children of messages you’ve explicitly
registered.

   In addition, you may want to customize the following variables.

 -- Variable: gnus-registry-track-extra
     This is a list of symbols, so it’s best to change it from the
     Customize interface.  By default it’s ‘(subject sender recipient)’,
     which may work for you.  It can be annoying if your mail flow is
     large and people don’t stick to the same groups.

     When you decide to stop tracking any of those extra data, you can
     use the command ‘gnus-registry-remove-extra-data’ to purge it from
     the existing registry entries.

 -- Variable: gnus-registry-split-strategy
     This is a symbol, so it’s best to change it from the Customize
     interface.  By default it’s ‘nil’, but you may want to set it to
     ‘majority’ or ‘first’ to split by sender or subject based on the
     majority of matches or on the first found.  I find ‘majority’ works
     best.


File: gnus.info,  Node: Store custom flags and keywords,  Next: Store arbitrary data,  Prev: Fancy splitting to parent,  Up: The Gnus Registry

10.19.4 Store custom flags and keywords
---------------------------------------

The registry lets you set custom flags and keywords per message.  You
can use the Gnus->Registry Marks menu or the ‘M M x’ keyboard shortcuts,
where ‘x’ is the first letter of the mark’s name.

 -- Variable: gnus-registry-marks
     The custom marks that the registry can use.  You can modify the
     default list, if you like.  If you do, you’ll have to exit Emacs
     before they take effect (you can also unload the registry and
     reload it or evaluate the specific macros you’ll need, but you
     probably don’t want to bother).  Use the Customize interface to
     modify the list.

     By default this list has the ‘Important’, ‘Work’, ‘Personal’,
     ‘To-Do’, and ‘Later’ marks.  They all have keyboard shortcuts like
     ‘M M i’ for Important, using the first letter.

 -- Function: gnus-registry-set-article-mark
     Call this function to mark an article with a custom registry mark.
     It will offer the available marks for completion.

   You can use ‘defalias’ to install a summary line formatting function
that will show the registry marks.  There are two flavors of this
function, either showing the marks as single characters, using their
‘:char’ property, or showing the marks as full strings.

     ;; show the marks as single characters (see the :char property in
     ;; 'gnus-registry-marks'):
     ;; (defalias 'gnus-user-format-function-M 'gnus-registry-article-marks-to-chars)

     ;; show the marks by name (see 'gnus-registry-marks'):
     ;; (defalias 'gnus-user-format-function-M 'gnus-registry-article-marks-to-names)


File: gnus.info,  Node: Store arbitrary data,  Prev: Store custom flags and keywords,  Up: The Gnus Registry

10.19.5 Store arbitrary data
----------------------------

The registry has a simple API that uses a Message-ID as the key to store
arbitrary data (as long as it can be converted to a list for storage).

 -- Function: gnus-registry-set-id-key (id key value)
     Store ‘value’ under ‘key’ for message ‘id’.

 -- Function: gnus-registry-get-id-key (id key)
     Get the data under ‘key’ for message ‘id’.  If the option
     ‘gnus-registry-register-all’ is non-‘nil’, this function will also
     create an entry for ‘id’ if one doesn’t exist.

 -- Variable: gnus-registry-extra-entries-precious
     If any extra entries are precious, their presence will make the
     registry keep the whole entry forever, even if there are no groups
     for the Message-ID and if the size limit of the registry is
     reached.  By default this is just ‘(mark)’ so the custom registry
     marks are precious.


File: gnus.info,  Node: The Gnus Cloud,  Next: D-Bus Integration,  Prev: The Gnus Registry,  Up: Various

# /. 10.20 The Gnus Cloud
========================

The Gnus Cloud is a way to synchronize marks and general files and data
across multiple machines.

   Very often, you want all your marks (what articles you’ve read, which
ones were important, and so on) to be synchronized between several
machines.  With IMAP, that’s built into the protocol, so you can read
nnimap groups from many machines and they are automatically
synchronized.  But NNTP, nnrss, and many other backends do not store
marks, so you have to do it locally.

   The Gnus Cloud package stores the marks, plus any files you choose,
on an IMAP server in a special folder.  It’s like a
DropTorrentSyncBoxOakTree(TM).(1)

* Menu:

* Gnus Cloud Setup::
* Gnus Cloud Usage::

   ---------- Footnotes ----------

   (1) The name “Gnus Cloud” parodizes but otherwise has little to do
with “cloud computing”, a misleading term normally best avoided
(https://www.gnu.org/philosophy/words-to-avoid.html#CloudComputing).


File: gnus.info,  Node: Gnus Cloud Setup,  Next: Gnus Cloud Usage,  Up: The Gnus Cloud

10.20.1 Gnus Cloud Setup
------------------------

Setting up the Gnus Cloud takes less than a minute.  From the Group
buffer:

   Press ‘^’ to go to the Server buffer.  Here you’ll see all the
servers that Gnus knows.  *Note Server Buffer::.

   Then press ‘i’ to mark any servers as cloud-synchronized (their marks
are synchronized).

   Then press ‘I’ to mark a single server as the cloud host (it must be
an IMAP server, and will host a special IMAP folder with all the
synchronization data).  This will set the variable ‘gnus-cloud-method’
(using the Customize facilities), then ask you to optionally upload your
first CloudSynchronizationDataPack(TM).


File: gnus.info,  Node: Gnus Cloud Usage,  Prev: Gnus Cloud Setup,  Up: The Gnus Cloud

10.20.2 Gnus Cloud Usage
------------------------

After setting up, you can use these shortcuts from the Group buffer:

‘~ <RET>’
‘~ d’
     Download the latest Gnus Cloud data.

‘~ u’
‘~ ~’
     Upload the local Gnus Cloud data.  Creates a new
     CloudSynchronizationDataPack(TM).

   But wait, there’s more.  Of course there’s more.  So much more.  You
can customize all of the following.

 -- Variable: gnus-cloud-synced-files
     These are the files that will be part of every
     CloudSynchronizationDataPack(TM). They are included in every
     upload, so don’t synchronize a lot of large files.  Files under
     100Kb are best.

 -- Variable: gnus-cloud-storage-method
     This is a choice from several storage methods.  It’s highly
     recommended to use the EPG facilities.  It will be automatic if
     have GnuPG installed and EPG loaded.  Otherwise, you could use
     Base64+gzip, Base64, or no encoding.

 -- Variable: gnus-cloud-interactive
     When this is set, and by default it is, the Gnus Cloud package will
     ask you for confirmation here and there.  Leave it on until you’re
     comfortable with the package.

 -- Variable: gnus-cloud-method
     The name of the IMAP server to store the
     CloudSynchronizationDataPack(TM)s.  It’s easiest to set this from
     the Server buffer (*note Gnus Cloud Setup::).


File: gnus.info,  Node: D-Bus Integration,  Next: Other modes,  Prev: The Gnus Cloud,  Up: Various

# /. 10.21 D-Bus Integration
===========================

When using laptops or other systems that have a sleep or hibernate
functionality, it’s possible for long-running server connections to
become “hung”, requiring the user to manually close and re-open the
connections after the system resumes.  On systems compiled with D-Bus
support (check the value of ‘(featurep 'dbusbind)’), Gnus can register a
D-Bus signal to automatically close all server connections before the
system goes to sleep.  To enable this, set ‘gnus-dbus-close-on-sleep’ to
a non-‘nil’ value.

   For more information about D-Bus and Emacs, *note (dbus)Top::.


File: gnus.info,  Node: Other modes,  Next: Various Various,  Prev: D-Bus Integration,  Up: Various

# /. 10.22 Interaction with other modes
======================================

10.22.1 Dired
-------------

‘gnus-dired-minor-mode’ provides some useful functions for dired
buffers.  It is enabled with
     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

‘C-c C-m C-a’
     Send dired’s marked files as an attachment (‘gnus-dired-attach’).
     You will be prompted for a message buffer.

‘C-c C-m C-l’
     Visit a file according to the appropriate mailcap entry
     (‘gnus-dired-find-file-mailcap’).  With prefix, open file in a new
     buffer.

‘C-c C-m C-p’
     Print file according to the mailcap entry (‘gnus-dired-print’).  If
     there is no print command, print in a PostScript image.


File: gnus.info,  Node: Various Various,  Prev: Other modes,  Up: Various

# /. 10.23 Various Various
=========================

‘gnus-home-directory’
     All Gnus file and directory variables will be initialized from this
     variable, which defaults to ‘~/’.

‘gnus-directory’
     Most Gnus storage file and directory variables will be initialized
     from this variable, which defaults to the ‘SAVEDIR’ environment
     variable, or ‘~/News/’ if that variable isn’t set.

     Note that Gnus is mostly loaded when the ‘~/.gnus.el’ file is read.
     This means that other directory variables that are initialized from
     this variable won’t be set properly if you set this variable in
     ‘~/.gnus.el’.  Set this variable in ‘.emacs’ instead.

‘gnus-default-directory’
     Not related to the above variable at all—this variable says what
     the default directory of all Gnus buffers should be.  If you issue
     commands like ‘C-x C-f’, the prompt you’ll get starts in the
     current buffer’s default directory.  If this variable is ‘nil’
     (which is the default), the default directory will be the default
     directory of the buffer you were in when you started Gnus.

‘gnus-verbose’
     This variable is an integer between zero and ten.  The higher the
     value, the more messages will be displayed.  If this variable is
     zero, Gnus will never flash any messages, if it is seven (which is
     the default), most important messages will be shown, and if it is
     ten, Gnus won’t ever shut up, but will flash so many messages it
     will make your head swim.

‘gnus-verbose-backends’
     This variable works the same way as ‘gnus-verbose’, but it applies
     to the Gnus back ends instead of Gnus proper.

‘gnus-add-timestamp-to-message’
     This variable controls whether to add timestamps to messages that
     are controlled by ‘gnus-verbose’ and ‘gnus-verbose-backends’ and
     are issued.  The default value is ‘nil’ which means never to add
     timestamp.  If it is ‘log’, add timestamps to only the messages
     that go into the ‘*Messages*’ buffer.  If it is neither ‘nil’ nor
     ‘log’, add timestamps not only to log messages but also to the ones
     displayed in the echo area.

‘nnheader-max-head-length’
     When the back ends read straight heads of articles, they all try to
     read as little as possible.  This variable (default 8192) specifies
     the absolute max length the back ends will try to read before
     giving up on finding a separator line between the head and the
     body.  If this variable is ‘nil’, there is no upper read bound.  If
     it is ‘t’, the back ends won’t try to read the articles piece by
     piece, but read the entire articles.  This makes sense with some
     versions of ‘ange-ftp’.

‘nnheader-head-chop-length’
     This variable (default 2048) says how big a piece of each article
     to read when doing the operation described above.

‘nnheader-file-name-translation-alist’
     This is an alist that says how to translate characters in file
     names.  For instance, if ‘:’ is invalid as a file character in file
     names on your system (you MS Windows user you), you could say
     something like:

          (setq nnheader-file-name-translation-alist
                '((?: . ?_)))

     In fact, this is (part of) the default value for this variable on
     MS Windows (phooey) systems.

‘gnus-hidden-properties’
     This is a list of properties to use to hide “invisible” text.  It
     is ‘(invisible t intangible t)’ by default on most systems, which
     makes invisible text invisible and intangible.

‘gnus-parse-headers-hook’
     A hook called before parsing headers.  It can be used, for
     instance, to gather statistics on the headers fetched, or perhaps
     you’d like to prune some headers.  I don’t see why you’d want that,
     though.

‘gnus-shell-command-separator’
     String used to separate two shell commands.  The default is ‘;’.

‘gnus-invalid-group-regexp’

     Regexp to match “invalid” group names when querying user for a
     group name.  The default value catches some *really* invalid group
     names who could possibly mess up Gnus internally (like allowing ‘:’
     in a group name, which is normally used to delimit method and
     group).

     IMAP users might want to allow ‘/’ in group names though.

‘gnus-safe-html-newsgroups’
     Groups in which links in html articles are considered all safe.
     The value may be a regexp matching those groups, a list of group
     names, or ‘nil’.  This overrides ‘mm-w3m-safe-url-regexp’.  The
     default value is ‘"\\`nnrss[+:]"’.  This is effective only when
     emacs-w3m renders html articles, i.e., in the case
     ‘mm-text-html-renderer’ is set to ‘w3m’.  *Note Display
     Customization: (emacs-mime)Display Customization.


File: gnus.info,  Node: The End,  Next: Appendices,  Prev: Various,  Up: Top

# /. 11 The End
**************

Well, that’s the manual—you can get on with your life now.  Keep in
touch.  Say hello to your cats from me.

   My *ghod*—I just can’t stand goodbyes.  Sniffle.

   Ol’ Charles Reznikoff said it pretty well, so I leave the floor to
him:

     *Te Deum*


     Not because of victories
     I sing,
     having none,
     but for the common sunshine,
     the breeze,
     the largess of the spring.


     Not for victory
     but for the day’s work done
     as well as I was able;
     not for a seat upon the dais
     but at the common table.


File: gnus.info,  Node: Appendices,  Next: GNU Free Documentation License,  Prev: The End,  Up: Top

# /. 12 Appendices
*****************

* Menu:

* History::                     How Gnus got where it is today.
* On Writing Manuals::          Why this is not a beginner’s guide.
* Terminology::                 We use really difficult, like, words here.
* Customization::               Tailoring Gnus to your needs.
* Troubleshooting::             What you might try if things do not work.
* Gnus Reference Guide::        Rilly, rilly technical stuff.
* Emacs for Heathens::          A short introduction to Emacsian terms.
* Frequently Asked Questions::  The Gnus FAQ


File: gnus.info,  Node: History,  Next: On Writing Manuals,  Up: Appendices

# /. 12.1 History
================

GNUS was written by Masanobu UMEDA.  When autumn crept up in ’94, Lars
Magne Ingebrigtsen grew bored and decided to rewrite Gnus.

   If you want to investigate the person responsible for this outrage,
you can point your (feh!)  web browser to <https://quimby.gnus.org/>.
This used to be the primary distribution point for the new and spiffy
versions of Gnus, and was known as The Site That Destroys Newsrcs And
Drives People Mad, but these days Gnus is developed in the Emacs
repository.

   During the first extended alpha period of development, the new Gnus
was called “(ding) Gnus”.  “(ding)” is, of course, short for “ding is
not Gnus”, which is a total and utter lie, but who cares?  (Besides, the
“Gnus” in this abbreviation should probably be pronounced “news” as
UMEDA intended, which makes it a more appropriate name, don’t you
think?)

   In any case, after spending all that energy on coming up with a new
and spunky name, we decided that the name was _too_ spunky, so we
renamed it back again to “Gnus”.  But in mixed case.  “Gnus” vs.
“GNUS”.  New vs.  old.

* Menu:

* Gnus Versions::               What Gnus versions have been released.
* Why?::                        What’s the point of Gnus?
* Conformity::                  Gnus tries to conform to all standards.
* Contributors::                Oodles of people.
* New Features::                Pointers to some of the new stuff in Gnus.


File: gnus.info,  Node: Gnus Versions,  Next: Why?,  Up: History

12.1.1 Gnus Versions
--------------------

The first “proper” release of Gnus 5 was done in November 1995 when it
was included in the Emacs 19.30 distribution (132 (ding) Gnus releases
plus 15 Gnus 5.0 releases).

   In May 1996 the next Gnus generation (aka.  “September Gnus” (after
99 releases)) was released under the name “Gnus 5.2” (40 releases).

   On July 28th 1996 work on Red Gnus was begun, and it was released on
January 25th 1997 (after 84 releases) as “Gnus 5.4” (67 releases).

   On September 13th 1997, Quassia Gnus was started and lasted 37
releases.  It was released as “Gnus 5.6” on March 8th 1998 (46
releases).

   Gnus 5.6 begat Pterodactyl Gnus on August 29th 1998 and was released
as “Gnus 5.8” (after 99 releases and a CVS repository) on December 3rd
1999.

   On the 26th of October 2000, Oort Gnus was begun and was released as
Gnus 5.10 on May 1st 2003 (24 releases).

   On the January 4th 2004, No Gnus was begun.

   Gnus 5.11 was bundled with GNU Emacs 22.1 in June 2007.

   A version of No Gnus was released as Gnus 5.13 with GNU Emacs 23.1 in
July 2009.

   On April 19, 2010 Gnus development was moved to Git.

   On the January 31th 2012, Ma Gnus was begun.

   Since then, Gnus has only been released together with Emacs.

   If you happen upon a version of Gnus that has a prefixed name—“(ding)
Gnus”, “September Gnus”, “Red Gnus”, “Quassia Gnus”, “Pterodactyl Gnus”,
“Oort Gnus”, “No Gnus”, “Ma Gnus”—don’t panic.  Don’t let it know that
you’re frightened.  Back away.  Slowly.  Whatever you do, don’t run.
Walk away, calmly, until you’re out of its reach.  Find a proper
released version of Gnus and snuggle up to that instead.


File: gnus.info,  Node: Why?,  Next: Conformity,  Prev: Gnus Versions,  Up: History

12.1.2 Why?
-----------

What’s the point of Gnus?

   I want to provide a “rad”, “happening”, “way cool” and “hep”
newsreader, that lets you do anything you can think of.  That was my
original motivation, but while working on Gnus, it has become clear to
me that this generation of newsreaders really belong in the stone age.
Newsreaders haven’t developed much since the infancy of the net.  If the
volume continues to rise with the current rate of increase, all current
newsreaders will be pretty much useless.  How do you deal with
newsgroups that have thousands of new articles each day?  How do you
keep track of millions of people who post?

   Gnus offers no real solutions to these questions, but I would very
much like to see Gnus being used as a testing ground for new methods of
reading and fetching news.  Expanding on UMEDA-san’s wise decision to
separate the newsreader from the back ends, Gnus now offers a simple
interface for anybody who wants to write new back ends for fetching mail
and news from different sources.  I have added hooks for customizations
everywhere I could imagine it being useful.  By doing so, I’m inviting
every one of you to explore and invent.

   May Gnus never be complete.  ‘C-u 100 M-x all-hail-emacs’.


File: gnus.info,  Node: Conformity,  Next: Contributors,  Prev: Why?,  Up: History

12.1.3 Conformity
-----------------

No rebels without a clue here, ma’am.  We conform to all standards known
to (wo)man.  Except for those standards and/or conventions we disagree
with, of course.

*RFC 822*
     There are no known breaches of this standard or its successors
     (currently RFCs 2822 and 5322).

*RFC 1036*
     There are no known breaches of this (now-obsolete) standard,
     either.

*RFC 5536*
     We do have some breaches of this standard, the successor of RFC
     1036.

     _X-Newsreader_
     _User-Agent_
          These are considered to be “vanity headers”, while I consider
          them to be consumer information.  After seeing so many badly
          formatted articles coming from ‘tin’ and ‘Netscape’ I know not
          to use either of those for posting articles.  I would not have
          known that if it wasn’t for the ‘X-Newsreader’ header.

*USEFOR*
     USEFOR was an IETF working group that produced Internet RFCs 5536
     and 5537.  The Gnus towers will look into implementing the changes
     embodied by these standards.

*MIME—RFC 2045–2049 etc*
     All the various MIME RFCs are supported.

*Disposition Notifications—RFC 2298*
     Message Mode is able to request notifications from the receiver.

*PGP—RFC 1991 and RFC 2440*
     RFC 1991 is the original PGP message specification, published as an
     informational RFC.  RFC 2440 was the follow-up, now called Open
     PGP, and put on the Standards Track.  Both document a non-MIME
     aware PGP format.  Gnus supports both encoding (signing and
     encryption) and decoding (verification and decryption).

*PGP/MIME—RFC 2015/3156*
     RFC 2015 (superseded by 3156 which references RFC 2440 instead of
     RFC 1991) describes the MIME-wrapping around the RFC 1991/2440
     format.  Gnus supports both encoding and decoding.

*S/MIME—RFC 2633*
     RFC 2633 describes the S/MIME format.

*IMAP—RFC 1730/2060, RFC 2195, RFC 2086, RFC 2359, RFC 2595, RFC 1731*
     RFC 1730 is IMAP version 4, updated somewhat by RFC 2060 (IMAP 4
     revision 1).  RFC 2195 describes CRAM-MD5 authentication for IMAP.
     RFC 2086 describes access control lists (ACLs) for IMAP.  RFC 2359
     describes a IMAP protocol enhancement.  RFC 2595 describes the
     proper TLS integration (STARTTLS) with IMAP.  RFC 1731 describes
     the GSSAPI/Kerberos4 mechanisms for IMAP.

   If you ever notice Gnus acting non-compliant with regards to the
texts mentioned above, don’t hesitate to drop a note to Gnus Towers and
let us know.


File: gnus.info,  Node: Contributors,  Next: New Features,  Prev: Conformity,  Up: History

12.1.4 Contributors
-------------------

The new Gnus version couldn’t have been done without the help of all the
people on the (ding) mailing list.  Every day for over a year I have
gotten billions of nice bug reports from them, filling me with joy,
every single one of them.  Smooches.  The people on the list have been
tried beyond endurance, what with my “oh, that’s a neat idea <type
type>, yup, I’ll release it right away <ship off> no wait, that doesn’t
work at all <type type>, yup, I’ll ship that one off right away <ship
off> no, wait, that absolutely does not work” policy for releases.
Micro$oft—bah.  Amateurs.  I’m _much_ worse.  (Or is that “worser”?
“much worser”?  “worsest”?)

   I would like to take this opportunity to thank the Academy for...
oops, wrong show.

   • Masanobu UMEDA—the writer of the original GNUS.

   • Shenghuo Zhu—uudecode.el, mm-uu.el, rfc1843.el, nnwarchive and
     many, many other things connected with MIME and other types of
     en/decoding, as well as general bug fixing, new functionality and
     stuff.

   • Per Abrahamsen—custom, scoring, highlighting and SOUP code (as well
     as numerous other things).

   • Luis Fernandes—design and graphics.

   • Joe Reiss—creator of the smiley faces.

   • Justin Sheehy—the FAQ maintainer.

   • Erik Naggum—help, ideas, support, code and stuff.

   • Wes Hardaker—‘gnus-picon.el’ and the manual section on “picons”
     (*note Picons::).

   • Kim-Minh Kaplan—further work on the picon code.

   • Brad Miller—‘gnus-gl.el’ and the GroupLens manual section.

   • Sudish Joseph—innumerable bug fixes.

   • Ilja Weis—‘gnus-topic.el’.

   • Steven L. Baur—lots and lots and lots of bug detection and fixes.

   • Vladimir Alexiev—the refcard and reference booklets.

   • Felix Lee & Jamie Zawinski—I stole some pieces from the XGnus
     distribution by Felix Lee and JWZ.

   • Scott Byer—‘nnfolder.el’ enhancements & rewrite.

   • Peter Mutsaers—orphan article scoring code.

   • Ken Raeburn—POP mail support.

   • Hallvard B Furuseth—various bits and pieces, especially dealing
     with .newsrc files.

   • Brian Edmonds—‘gnus-bbdb.el’.

   • David Moore—rewrite of ‘nnvirtual.el’ and many other things.

   • Kevin Davidson—came up with the name “ding”, so blame him.

   • François Pinard—many, many interesting and thorough bug reports, as
     well as autoconf support.

   This manual was proof-read by Adrian Aichner, with Ricardo Nassif,
Mark Borges, and Jost Krieger proof-reading parts of the manual.

   The following people have contributed many patches and suggestions:

   Christopher Davis, Andrew Eskilsson, Kai Grossjohann, Kevin Greiner,
Jesper Harder, Paul Jarc, Simon Josefsson, David Kågedal, Richard Pieri,
Fabrice Popineau, Daniel Quinlan, Michael Shields, Reiner Steib, Jason
L. Tibbitts, III, Jack Vinson, Katsumi Yamaoka, and Teodor Zlatanov.

   Also thanks to the following for patches and stuff:

   Jari Aalto, Adrian Aichner, Vladimir Alexiev, Russ Allbery, Peter
Arius, Matt Armstrong, Marc Auslander, Miles Bader, Alexei V. Barantsev,
Frank Bennett, Robert Bihlmeyer, Chris Bone, Mark Borges, Mark Boyns,
Lance A. Brown, Rob Browning, Kees de Bruin, Martin Buchholz, Joe
Buehler, Kevin Buhr, Alastair Burt, Joao Cachopo, Zlatko Calusic,
Massimo Campostrini, Castor, David Charlap, Dan Christensen, Kevin
Christian, Jae-you Chung, James H. Cloos, Jr., Laura Conrad, Michael R.
Cook, Glenn Coombs, Andrew J. Cosgriff, Neil Crellin, Frank D. Cringle,
Geoffrey T. Dairiki, Andre Deparade, Ulrik Dickow, Dave Disser, Rui-Tao
Dong, Joev Dubach, Michael Welsh Duggan, Dave Edmondson, Paul Eggert,
Mark W. Eichin, Karl Eichwalder, Enami Tsugutomo, Michael Ernst, Luc Van
Eycken, Sam Falkner, Nelson Jose dos Santos Ferreira, Sigbjorn Finne,
Sven Fischer, Paul Fisher, Decklin Foster, Gary D. Foster, Paul
Franklin, Guy Geens, Arne Georg Gleditsch, David S. Goldberg,
Michelangelo Grigni, Dale Hagglund, D. Hall, Magnus Hammerin, Kenichi
Handa, Raja R. Harinath, Yoshiki Hayashi, P. E. Jareth Hein, Hisashige
Kenji, Scott Hofmann, Tassilo Horn, Marc Horowitz, Gunnar Horrigmo,
Richard Hoskins, Brad Howes, Miguel de Icaza, François Felix Ingrand,
Tatsuya Ichikawa, Ishikawa Ichiro, Lee Iverson, Iwamuro Motonori,
Rajappa Iyer, Andreas Jaeger, Adam P. Jenkins, Randell Jesup, Fred
Johansen, Gareth Jones, Greg Klanderman, Karl Kleinpaste, Michael
Klingbeil, Peter Skov Knudsen, Shuhei Kobayashi, Petr Konecny, Koseki
Yoshinori, Thor Kristoffersen, Jens Lautenbacher, Martin Larose,
Seokchan Lee, Joerg Lenneis, Carsten Leonhardt, James LewisMoss,
Christian Limpach, Markus Linnala, Dave Love, Mike McEwan, Tonny Madsen,
Shlomo Mahlab, Nat Makarevitch, Istvan Marko, David Martin, Jason R.
Mastaler, Gordon Matzigkeit, Timo Metzemakers, Richard Mlynarik, Lantz
Moore, Morioka Tomohiko, Erik Toubro Nielsen, Hrvoje Nikšić, Andy
Norman, Fred Oberhauser, C. R. Oldham, Alexandre Oliva, Ken Olstad,
Masaharu Onishi, Hideki Ono, Ettore Perazzoli, William Perry, Stephen
Peters, Jens-Ulrik Holger Petersen, Ulrich Pfeifer, Matt Pharr, Andy
Piper, John McClary Prevost, Bill Pringlemeir, Mike Pullen, Jim Radford,
Colin Rafferty, Lasse Rasinen, Lars Balker Rasmussen, Joe Reiss, Renaud
Rioboo, Roland B. Roberts, Bart Robinson, Christian von Roques, Markus
Rost, Jason Rumney, Wolfgang Rupprecht, Jay Sachs, Dewey M. Sasser,
Conrad Sauerwald, Loren Schall, Dan Schmidt, Ralph Schleicher, Philippe
Schnoebelen, Andreas Schwab, Randal L. Schwartz, Danny Siu, Matt
Simmons, Paul D. Smith, Jeff Sparkes, Toby Speight, Michael Sperber,
Darren Stalder, Richard Stallman, Greg Stark, Sam Steingold, Paul
Stevenson, Jonas Steverud, Paul Stodghill, Kiyokazu Suto, Kurt Swanson,
Samuel Tardieu, Teddy, Chuck Thompson, Tozawa Akihiko, Philippe Troin,
James Troup, Trung Tran-Duc, Jack Twilley, Aaron M. Ucko, Aki Vehtari,
Didier Verna, Vladimir Volovich, Jan Vroonhof, Stefan Waldherr, Pete
Ware, Barry A. Warsaw, Christoph Wedler, Joe Wells, Lee Willis, and
Lloyd Zusman.

   For a full overview of what each person has done, the ChangeLogs
included in the Gnus alpha distributions should give ample reading
(550kB and counting).

   Apologies to everybody that I’ve forgotten, of which there are many,
I’m sure.

   Gee, that’s quite a list of people.  I guess that must mean that
there actually are people who are using Gnus.  Who’d’a thunk it!


File: gnus.info,  Node: New Features,  Prev: Contributors,  Up: History

12.1.5 New Features
-------------------

* Menu:

* ding Gnus::                   New things in Gnus 5.0/5.1, the first new Gnus.
* September Gnus::              The Thing Formally Known As Gnus 5.2/5.3.
* Red Gnus::                    Third time best—Gnus 5.4/5.5.
* Quassia Gnus::                Two times two is four, or Gnus 5.6/5.7.
* Pterodactyl Gnus::            Pentad also starts with P, AKA Gnus 5.8/5.9.
* Oort Gnus::                   It’s big.  It’s far out.  Gnus 5.10/5.11.
* No Gnus::                     Very punny.  Gnus 5.12/5.13.
* Ma Gnus::                     Celebrating 25 years of Gnus.

For summaries of more recent changes, see the normal Emacs ‘NEWS’ files.

   These lists are, of course, just _short_ overviews of the _most_
important new features.  No, really.  There are tons more.  Yes, we have
feeping creaturism in full effect.


File: gnus.info,  Node: ding Gnus,  Next: September Gnus,  Up: New Features

12.1.5.1 (ding) Gnus
....................

New features in Gnus 5.0/5.1:

   • The look of all buffers can be changed by setting format-like
     variables (*note Group Buffer Format:: and *note Summary Buffer
     Format::).

   • Local spool and several NNTP servers can be used at once (*note
     Select Methods::).

   • You can combine groups into virtual groups (*note Virtual
     Groups::).

   • You can read a number of different mail formats (*note Getting
     Mail::).  All the mail back ends implement a convenient mail expiry
     scheme (*note Expiring Mail::).

   • Gnus can use various strategies for gathering threads that have
     lost their roots (thereby gathering loose sub-threads into one
     thread) or it can go back and retrieve enough headers to build a
     complete thread (*note Customizing Threading::).

   • Killed groups can be displayed in the group buffer, and you can
     read them as well (*note Listing Groups::).

   • Gnus can do partial group updates—you do not have to retrieve the
     entire active file just to check for new articles in a few groups
     (*note The Active File::).

   • Gnus implements a sliding scale of subscribedness to groups (*note
     Group Levels::).

   • You can score articles according to any number of criteria (*note
     Scoring::).  You can even get Gnus to find out how to score
     articles for you (*note Adaptive Scoring::).

   • Gnus maintains a dribble buffer that is auto-saved the normal Emacs
     manner, so it should be difficult to lose much data on what you
     have read if your machine should go down (*note Auto Save::).

   • Gnus now has its own startup file (‘~/.gnus.el’) to avoid
     cluttering up the ‘.emacs’ file.

   • You can set the process mark on both groups and articles and
     perform operations on all the marked items (*note
     Process/Prefix::).

   • You can list subsets of groups according to, well, anything (*note
     Listing Groups::).

   • You can browse foreign servers and subscribe to groups from those
     servers (*note Browse Foreign Server::).

   • Gnus can fetch articles, asynchronously, on a second connection to
     the server (*note Asynchronous Fetching::).

   • You can cache articles locally (*note Article Caching::).

   • The uudecode functions have been expanded and generalized (*note
     Decoding Articles::).

   • You can still post uuencoded articles, which was a little-known
     feature of GNUS’ past (*note Uuencoding and Posting::).

   • Fetching parents (and other articles) now actually works without
     glitches (*note Finding the Parent::).

   • Gnus can fetch FAQs and group descriptions (*note Group
     Information::).

   • Digests (and other files) can be used as the basis for groups
     (*note Document Groups::).

   • Articles can be highlighted and customized (*note Customizing
     Articles::).

   • URLs and other external references can be buttonized (*note Article
     Buttons::).

   • You can do lots of strange stuff with the Gnus window & frame
     configuration (*note Window Layout::).


File: gnus.info,  Node: September Gnus,  Next: Red Gnus,  Prev: ding Gnus,  Up: New Features

12.1.5.2 September Gnus
.......................

New features in Gnus 5.2/5.3:

   • A new message composition mode is used.  All old customization
     variables for ‘mail-mode’, ‘rnews-reply-mode’ and ‘gnus-msg’ are
     now obsolete.

   • Gnus is now able to generate “sparse” threads—threads where missing
     articles are represented by empty nodes (*note Customizing
     Threading::).

          (setq gnus-build-sparse-threads 'some)

   • Outgoing articles are stored on a special archive server (*note
     Archived Messages::).

   • Partial thread regeneration now happens when articles are referred.

   • Gnus can make use of GroupLens predictions.

   • Picons (personal icons) can be displayed (*note Picons::).

   • A ‘trn’-like tree buffer can be displayed (*note Tree Display::).

          (setq gnus-use-trees t)

   • An ‘nn’-like pick-and-read minor mode is available for the summary
     buffers (*note Pick and Read::).

          (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

   • In binary groups you can use a special binary minor mode (*note
     Binary Groups::).

   • Groups can be grouped in a folding topic hierarchy (*note Group
     Topics::).

          (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

   • Gnus can re-send and bounce mail (*note Summary Mail Commands::).

   • Groups can now have a score, and bubbling based on entry frequency
     is possible (*note Group Score::).

          (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)

   • Groups can be process-marked, and commands can be performed on
     groups of groups (*note Marking Groups::).

   • Caching is possible in virtual groups.

   • ‘nndoc’ now understands all kinds of digests, mail boxes, rnews
     news batches, ClariNet briefs collections, and just about
     everything else (*note Document Groups::).

   • Gnus has a new back end (‘nnsoup’) to create/read SOUP packets.

   • The Gnus cache is much faster.

   • Groups can be sorted according to many criteria (*note Sorting
     Groups::).

   • New group parameters have been introduced to set list-addresses and
     expiry times (*note Group Parameters::).

   • All formatting specs allow specifying faces to be used (*note
     Formatting Fonts::).

   • There are several more commands for setting/removing/acting on
     process marked articles on the ‘M P’ submap (*note Setting Process
     Marks::).

   • The summary buffer can be limited to show parts of the available
     articles based on a wide range of criteria.  These commands have
     been bound to keys on the ‘/’ submap (*note Limiting::).

   • Articles can be made persistent with the ‘*’ command (*note
     Persistent Articles::).

   • All functions for hiding article elements are now toggles.

   • Article headers can be buttonized (*note Article Washing::).

   • All mail back ends support fetching articles by ‘Message-ID’.

   • Duplicate mail can now be treated properly (*note Duplicates::).

   • All summary mode commands are available directly from the article
     buffer (*note Article Keymap::).

   • Frames can be part of ‘gnus-buffer-configuration’ (*note Window
     Layout::).

   • Mail can be re-scanned by a daemonic process (*note Daemons::).

   • Groups can be made permanently visible (*note Listing Groups::).

          (setq gnus-permanently-visible-groups "^nnml:")

   • Many new hooks have been introduced to make customizing easier.

   • Gnus respects the ‘Mail-Copies-To’ header.

   • Threads can be gathered by looking at the ‘References’ header
     (*note Customizing Threading::).

          (setq gnus-summary-thread-gathering-function
                'gnus-gather-threads-by-references)

   • Read articles can be stored in a special backlog buffer to avoid
     refetching (*note Article Backlog::).

          (setq gnus-keep-backlog 50)

   • A clean copy of the current article is always stored in a separate
     buffer to allow easier treatment.

   • Gnus can suggest where to save articles (*note Saving Articles::).

   • Gnus doesn’t have to do as much prompting when saving (*note Saving
     Articles::).

          (setq gnus-prompt-before-saving t)

   • ‘gnus-uu’ can view decoded files asynchronously while fetching
     articles (*note Other Decode Variables::).

          (setq gnus-uu-grabbed-file-functions 'gnus-uu-grab-view)

   • Filling in the article buffer now works properly on cited text
     (*note Article Washing::).

   • Hiding cited text adds buttons to toggle hiding, and how much cited
     text to hide is now customizable (*note Article Hiding::).

          (setq gnus-cited-lines-visible 2)

   • Boring headers can be hidden (*note Article Hiding::).

   • Default scoring values can now be set from the menu bar.

   • Further syntax checking of outgoing articles have been added.


File: gnus.info,  Node: Red Gnus,  Next: Quassia Gnus,  Prev: September Gnus,  Up: New Features

12.1.5.3 Red Gnus
.................

New features in Gnus 5.4/5.5:

   • ‘nntp.el’ has been totally rewritten in an asynchronous fashion.

   • Article prefetching functionality has been moved up into Gnus
     (*note Asynchronous Fetching::).

   • Scoring can now be performed with logical operators like ‘and’,
     ‘or’, ‘not’, and parent redirection (*note Advanced Scoring::).

   • Article washing status can be displayed in the article mode line
     (*note Misc Article::).

   • ‘gnus.el’ has been split into many smaller files.

   • Suppression of duplicate articles based on Message-ID can be done
     (*note Duplicate Suppression::).

          (setq gnus-suppress-duplicates t)

   • New variables for specifying what score and adapt files are to be
     considered home score and adapt files (*note Home Score File::)
     have been added.

   • ‘nndoc’ was rewritten to be easily extensible (*note Document
     Server Internals::).

   • Groups can inherit group parameters from parent topics (*note Topic
     Parameters::).

   • Article editing has been revamped and is now actually usable.

   • Signatures can be recognized in more intelligent fashions (*note
     Article Signature::).

   • Summary pick mode has been made to look more ‘nn’-like.  Line
     numbers are displayed and the ‘.’ command can be used to pick
     articles (‘Pick and Read’).

   • Commands for moving the ‘.newsrc.eld’ from one server to another
     have been added (*note Changing Servers::).

   • There’s a way now to specify that “uninteresting” fields be
     suppressed when generating lines in buffers (*note Advanced
     Formatting::).

   • Several commands in the group buffer can be undone with ‘C-M-_’
     (*note Undo::).

   • Scoring can be done on words using the new score type ‘w’ (*note
     Score File Format::).

   • Adaptive scoring can be done on a Subject word-by-word basis (*note
     Adaptive Scoring::).

          (setq gnus-use-adaptive-scoring '(word))

   • Scores can be decayed (*note Score Decays::).

          (setq gnus-decay-scores t)

   • Scoring can be performed using a regexp on the Date header.  The
     Date is normalized to compact ISO 8601 format first (*note Score
     File Format::).

   • A new command has been added to remove all data on articles from
     the native server (*note Changing Servers::).

   • A new command for reading collections of documents (‘nndoc’ with
     ‘nnvirtual’ on top) has been added—‘C-M-d’ (*note Really Various
     Summary Commands::).

   • Process mark sets can be pushed and popped (*note Setting Process
     Marks::).

   • A new mail-to-news back end makes it possible to post even when the
     NNTP server doesn’t allow posting (*note Mail-To-News Gateways::).

   • A new back end for reading searches from Web search engines
     (“DejaNews”, “Alta Vista”, “InReference”) has been added (*note Web
     Searches::).

   • Groups inside topics can now be sorted using the standard sorting
     functions, and each topic can be sorted independently (*note Topic
     Sorting::).

   • Subsets of the groups can be sorted independently (‘Sorting
     Groups’).

   • Cached articles can be pulled into the groups (*note Summary
     Generation Commands::).

   • Score files are now applied in a more reliable order (*note Score
     Variables::).

   • Reports on where mail messages end up can be generated (*note
     Splitting Mail::).

   • More hooks and functions have been added to remove junk from
     incoming mail before saving the mail (*note Washing Mail::).

   • Emphasized text can be properly fontisized:


File: gnus.info,  Node: Quassia Gnus,  Next: Pterodactyl Gnus,  Prev: Red Gnus,  Up: New Features

12.1.5.4 Quassia Gnus
.....................

New features in Gnus 5.6:

   • New functionality for using Gnus as an offline newsreader has been
     added.  A plethora of new commands and modes have been added.
     *Note Gnus Unplugged::, for the full story.

   • The ‘nndraft’ back end has returned, but works differently from
     before.  All Message buffers are now also articles in the ‘nndraft’
     group, which is created automatically.

   • ‘gnus-alter-header-function’ can now be used to alter header
     values.

   • ‘gnus-summary-goto-article’ now accept Message-IDs.

   • A new Message command for deleting text in the body of a message
     outside the region: ‘C-c C-v’.

   • You can now post to component group in ‘nnvirtual’ groups with ‘C-u
     C-c C-c’.

   • ‘nntp-rlogin-program’—new variable to ease customization.

   • ‘C-u C-c C-c’ in ‘gnus-article-edit-mode’ will now inhibit
     re-highlighting of the article buffer.

   • New element in ‘gnus-boring-article-headers’—‘long-to’.

   • ‘M-i’ symbolic prefix command.  *Note Symbolic Prefixes::, for
     details.

   • ‘L’ and ‘I’ in the summary buffer now take the symbolic prefix ‘a’
     to add the score rule to the ‘all.SCORE’ file.

   • ‘gnus-simplify-subject-functions’ variable to allow greater control
     over simplification.

   • ‘A T’—new command for fetching the current thread.

   • ‘/ T’—new command for including the current thread in the limit.

   • ‘M-<RET>’ is a new Message command for breaking cited text.

   • ‘\\1’-expressions are now valid in ‘nnmail-split-methods’.

   • The ‘custom-face-lookup’ function has been removed.  If you used
     this function in your initialization files, you must rewrite them
     to use ‘face-spec-set’ instead.

   • Canceling now uses the current select method.  Symbolic prefix ‘a’
     forces normal posting method.

   • New command to translate M******** sm*rtq**t*s into proper text—‘W
     d’.

   • For easier debugging of ‘nntp’, you can set ‘nntp-record-commands’
     to a non-‘nil’ value.

   • ‘nntp’ now uses ‘~/.authinfo’, a ‘.netrc’-like file, for
     controlling where and how to send AUTHINFO to NNTP servers.

   • A command for editing group parameters from the summary buffer has
     been added.

   • A history of where mails have been split is available.

   • A new article date command has been added—‘article-date-iso8601’.

   • Subjects can be simplified when threading by setting
     ‘gnus-score-thread-simplify’.

   • A new function for citing in Message has been
     added—‘message-cite-original-without-signature’.

   • ‘article-strip-all-blank-lines’—new article command.

   • A new Message command to kill to the end of the article has been
     added.

   • A minimum adaptive score can be specified by using the
     ‘gnus-adaptive-word-minimum’ variable.

   • The “lapsed date” article header can be kept continually updated by
     the ‘gnus-start-date-timer’ command.

   • Web listserv archives can be read with the ‘nnlistserv’ back end.

   • Old dejanews archives can now be read by ‘nnweb’.


File: gnus.info,  Node: Pterodactyl Gnus,  Next: Oort Gnus,  Prev: Quassia Gnus,  Up: New Features

12.1.5.5 Pterodactyl Gnus
.........................

New features in Gnus 5.8:

   • The mail-fetching functions have changed.  See the manual for the
     many details.  In particular, all procmail fetching variables are
     gone.

     If you used procmail like in

          (setq nnmail-use-procmail t)
          (setq nnmail-spool-file 'procmail)
          (setq nnmail-procmail-directory "~/mail/incoming/")
          (setq nnmail-procmail-suffix "\\.in")

     this now has changed to

          (setq mail-sources
                '((directory :path "~/mail/incoming/"
                             :suffix ".in")))

     *Note Mail Source Specifiers::.

   • Gnus is now a MIME-capable reader.  This affects many parts of
     Gnus, and adds a slew of new commands.  See the manual for details.

   • Gnus has also been multilingualized.  This also affects too many
     parts of Gnus to summarize here, and adds many new variables.

   • ‘gnus-auto-select-first’ can now be a function to be called to
     position point.

   • The user can now decide which extra headers should be included in
     summary buffers and NOV files.

   • ‘gnus-article-display-hook’ has been removed.  Instead, a number of
     variables starting with ‘gnus-treat-’ have been added.

   • The Gnus posting styles have been redone again and now works in a
     subtly different manner.

   • New web-based back ends have been added: ‘nnslashdot’, ‘nnwarchive’
     and ‘nnultimate’.  nnweb has been revamped, again, to keep up with
     ever-changing layouts.

   • Gnus can now read IMAP mail via ‘nnimap’.


File: gnus.info,  Node: Oort Gnus,  Next: No Gnus,  Prev: Pterodactyl Gnus,  Up: New Features

12.1.5.6 Oort Gnus
..................

New features in Gnus 5.10:

   • Installation changes

        • Upgrading from previous (stable) version if you have used
          Oort.

          If you have tried Oort (the unstable Gnus branch leading to
          this release) but went back to a stable version, be careful
          when upgrading to this version.  In particular, you will
          probably want to remove all ‘.marks’ (nnml) and ‘.mrk’
          (nnfolder) files, so that flags are read from your
          ‘.newsrc.eld’ instead of from the ‘.marks’/‘.mrk’ file where
          this release store flags.  See a later entry for more
          information about marks.  Note that downgrading isn’t save in
          general.

        • Lisp files are now installed in ‘.../site-lisp/gnus/’ by
          default.  It defaulted to ‘.../site-lisp/’ formerly.  In
          addition to this, the new installer issues a warning if other
          Gnus installations which will shadow the latest one are
          detected.  You can then remove those shadows manually or
          remove them using ‘make remove-installed-shadows’.

        • ‘~/News/overview/’ not used.

          As a result of the following change, the ‘~/News/overview/’
          directory is not used any more.  You can safely delete the
          entire hierarchy.

        • ‘(require 'gnus-load)’

          If you use a stand-alone Gnus distribution, you’d better add
          ‘(require 'gnus-load)’ into your ‘~/.emacs’ after adding the
          Gnus lisp directory into load-path.

          File ‘gnus-load.el’ contains autoload commands, functions and
          variables, some of which may not be included in distributions
          of Emacsen.

   • New packages and libraries within Gnus

        • The revised Gnus FAQ is included in the manual, *Note
          Frequently Asked Questions::.

        • TLS wrapper shipped with Gnus

          TLS/SSL is now supported in IMAP and NNTP via GnuTLS.

        • Improved anti-spam features.

          Gnus is now able to take out spam from your mail and news
          streams using a wide variety of programs and filter rules.
          Among the supported methods are RBL blocklists, bogofilter and
          white/blacklists.  Hooks for easy use of external packages
          such as SpamAssassin and Hashcash are also new.  *note
          Thwarting Email Spam:: and *note Spam Package::.

        • Gnus supports server-side mail filtering using Sieve.

          Sieve rules can be added as Group Parameters for groups, and
          the complete Sieve script is generated using ‘D g’ from the
          Group buffer, and then uploaded to the server using ‘C-c C-l’
          in the generated Sieve buffer.  *Note Sieve Commands::, and
          the new Sieve manual *note Top: (sieve)Top.

   • Changes in group mode

        • ‘gnus-group-read-ephemeral-group’ can be called interactively,
          using ‘G M’.

        • Retrieval of charters and control messages

          There are new commands for fetching newsgroup charters (‘H c’)
          and control messages (‘H C’).

        • The new variable ‘gnus-parameters’ can be used to set group
          parameters.

          Earlier this was done only via ‘G p’ (or ‘G c’), which stored
          the parameters in ‘~/.newsrc.eld’, but via this variable you
          can enjoy the powers of customize, and simplified backups
          since you set the variable in ‘~/.gnus.el’ instead of
          ‘~/.newsrc.eld’.  The variable maps regular expressions
          matching group names to group parameters, a’la:
               (setq gnus-parameters
                     '(("mail\\..*"
                        (gnus-show-threads nil)
                        (gnus-use-scoring nil))
                       ("^nnimap:\\(foo.bar\\)$"
                        (to-group . "\\1"))))

        • Unread count correct in nnimap groups.

          The estimated number of unread articles in the group buffer
          should now be correct for nnimap groups.  This is achieved by
          calling ‘nnimap-fixup-unread-after-getting-new-news’ from the
          ‘gnus-setup-news-hook’ (called on startup) and
          ‘gnus-after-getting-new-news-hook’ (called after getting new
          mail).  If you have modified those variables from the default,
          you may want to add
          ‘nnimap-fixup-unread-after-getting-new-news’ again.  If you
          were happy with the estimate and want to save some (minimal)
          time when getting new mail, remove the function.

        • Group names are treated as UTF-8 by default.

          This is supposedly what USEFOR wanted to migrate to.  See
          ‘gnus-group-name-charset-group-alist’ and
          ‘gnus-group-name-charset-method-alist’ for customization.

        • ‘gnus-group-charset-alist’ and
          ‘gnus-group-ignored-charsets-alist’.

          The regexps in these variables are compared with full group
          names instead of real group names in 5.8.  Users who customize
          these variables should change those regexps accordingly.  For
          example:
               ("^han\\>" euc-kr) -> ("\\(^\\|:\\)han\\>" euc-kr)

        • Old intermediate incoming mail files (‘Incoming*’) are deleted
          after a couple of days, not immediately.  *Note Mail Source
          Customization::.  (New in Gnus 5.10.10 / Emacs 22.2)

   • Changes in summary and article mode

        • ‘F’ (‘gnus-article-followup-with-original’) and ‘R’
          (‘gnus-article-reply-with-original’) only yank the text in the
          region if the region is active.

        • In draft groups, ‘e’ is now bound to
          ‘gnus-draft-edit-message’.  Use ‘B w’ for
          ‘gnus-summary-edit-article’ instead.

        • Article Buttons

          More buttons for URLs, mail addresses, Message-IDs, Info
          links, man pages and Emacs or Gnus related references.  *Note
          Article Buttons::.  The variables ‘gnus-button-*-level’ can be
          used to control the appearance of all article buttons.  *Note
          Article Button Levels::.

        • Single-part yenc encoded attachments can be decoded.

        • Picons

          The picons code has been reimplemented to work in GNU
          Emacs—some of the previous options have been removed or
          renamed.

          Picons are small “personal icons” representing users, domain
          and newsgroups, which can be displayed in the Article buffer.
          *Note Picons::.

        • If the new option ‘gnus-treat-body-boundary’ is non-‘nil’, a
          boundary line is drawn at the end of the headers.

        • Signed article headers (X-PGP-Sig) can be verified with ‘W p’.

        • The Summary Buffer uses an arrow in the fringe to indicate the
          current article.  Use ‘(setq gnus-summary-display-arrow nil)’
          to disable it.

        • Warn about email replies to news

          Do you often find yourself replying to news by email by
          mistake?  Then the new option
          ‘gnus-confirm-mail-reply-to-news’ is just the thing for you.

        • If the new option ‘gnus-summary-display-while-building’ is
          non-‘nil’, the summary buffer is shown and updated as it’s
          being built.

        • Gnus supports RFC 2369 mailing list headers, and adds a number
          of related commands in mailing list groups.  *Note Mailing
          List::.

        • The Date header can be displayed in a format that can be read
          aloud in English.  *Note Article Date::.

        • diffs are automatically highlighted in groups matching
          ‘mm-uu-diff-groups-regexp’

        • Better handling of Microsoft citation styles

          Gnus now tries to recognize the mangled header block that some
          Microsoft mailers use to indicate that the rest of the message
          is a citation, even though it is not quoted in any way.  The
          variable ‘gnus-cite-unsightly-citation-regexp’ matches the
          start of these citations.

          The new command ‘W Y f’
          (‘gnus-article-outlook-deuglify-article’) allows deuglifying
          broken Outlook (Express) articles.

        • ‘gnus-article-skip-boring’

          If you set ‘gnus-article-skip-boring’ to ‘t’, then Gnus will
          not scroll down to show you a page that contains only boring
          text, which by default means cited text and signature.  You
          can customize what is skippable using
          ‘gnus-article-boring-faces’.

          This feature is especially useful if you read many articles
          that consist of a little new content at the top with a long,
          untrimmed message cited below.

        • Smileys (‘:-)’, ‘;-)’ etc.) are now displayed graphically in
          Emacs too.

          Put ‘(setq gnus-treat-display-smileys nil)’ in ‘~/.gnus.el’ to
          disable it.

        • Face headers handling.  *Note Face::.

        • In the summary buffer, the new command ‘/ N’ inserts new
          messages and ‘/ o’ inserts old messages.

        • Gnus decodes morse encoded messages if you press ‘W m’.

        • ‘gnus-summary-line-format’

          The default value changed to ‘%U%R%z%I%(%[%4L: %-23,23f%]%)
          %s\n’.  Moreover ‘gnus-extra-headers’, ‘nnmail-extra-headers’
          and ‘gnus-ignored-from-addresses’ changed their default so
          that the users name will be replaced by the recipient’s name
          or the group name posting to for NNTP groups.

        • Deleting of attachments.

          The command ‘gnus-mime-save-part-and-strip’ (bound to ‘C-o’ on
          MIME buttons) saves a part and replaces the part with an
          external one.  ‘gnus-mime-delete-part’ (bound to ‘d’ on MIME
          buttons) removes a part.  It works only on back ends that
          support editing.

        • ‘gnus-default-charset’

          The default value is determined from the
          ‘current-language-environment’ variable, instead of
          ‘iso-8859-1’.  Also the ‘.*’ item in
          ‘gnus-group-charset-alist’ is removed.

        • Printing capabilities are enhanced.

          Gnus supports Muttprint natively with ‘O P’ from the Summary
          and Article buffers.  Also, each individual MIME part can be
          printed using ‘p’ on the MIME button.

        • Extended format specs.

          Format spec ‘%&user-date;’ is added into
          ‘gnus-summary-line-format-alist’.  Also, user defined extended
          format specs are supported.  The extended format specs look
          like ‘%u&foo;’, which invokes function
          ‘gnus-user-format-function-FOO’.  Because ‘&’ is used as the
          escape character, old user defined format ‘%u&’ is no longer
          supported.

        • ‘/ *’ (‘gnus-summary-limit-include-cached’) is rewritten.

          It was aliased to ‘Y c’
          (‘gnus-summary-insert-cached-articles’).  The new function
          filters out other articles.

        • Some limiting commands accept a ‘C-u’ prefix to negate the
          match.

          If ‘C-u’ is used on subject, author or extra headers, i.e., ‘/
          s’, ‘/ a’, and ‘/ x’
          (‘gnus-summary-limit-to-{subject,author,extra}’) respectively,
          the result will be to display all articles that do not match
          the expression.

        • Gnus inlines external parts (message/external).

   • Changes in Message mode and related Gnus features

        • Delayed articles

          You can delay the sending of a message with ‘C-c C-j’ in the
          Message buffer.  The messages are delivered at specified time.
          This is useful for sending yourself reminders.  *Note Delayed
          Articles::.

        • If the new option ‘nnml-use-compressed-files’ is non-‘nil’,
          the nnml back end allows compressed message files.

        • The new option ‘gnus-gcc-mark-as-read’ automatically marks Gcc
          articles as read.

        • Externalizing of attachments

          If ‘gnus-gcc-externalize-attachments’ or
          ‘message-fcc-externalize-attachments’ is non-‘nil’, attach
          local files as external parts.

        • The envelope sender address can be customized when using
          Sendmail.  *Note Mail Variables: (message)Mail Variables.

        • Gnus no longer generate the Sender: header automatically.

          Earlier it was generated when the user configurable email
          address was different from the Gnus guessed default user
          address.  As the guessing algorithm is rarely correct these
          days, and (more controversially) the only use of the Sender:
          header was to check if you are entitled to cancel/supersede
          news (which is now solved by Cancel Locks instead, see another
          entry), generation of the header has been disabled by default.
          See the variables ‘message-required-headers’,
          ‘message-required-news-headers’, and
          ‘message-required-mail-headers’.

        • Features from third party ‘message-utils.el’ added to
          ‘message.el’.

          Message now asks if you wish to remove ‘(was: <old subject>)’
          from subject lines (see ‘message-subject-trailing-was-query’).
          ‘C-c M-m’ and ‘C-c M-f’ inserts markers indicating included
          text.  ‘C-c C-f a’ adds a X-No-Archive: header.  ‘C-c C-f x’
          inserts appropriate headers and a note in the body for
          cross-postings and followups (see the variables
          ‘message-cross-post-*’).

        • References and X-Draft-From headers are no longer generated
          when you start composing messages and
          ‘message-generate-headers-first’ is ‘nil’.

        • Easy inclusion of X-Faces headers.  *Note X-Face::.

        • Group Carbon Copy (GCC) quoting

          To support groups that contains <SPC> and other weird
          characters, groups are quoted before they are placed in the
          Gcc: header.  This means variables such as
          ‘gnus-message-archive-group’ should no longer contain quote
          characters to make groups containing <SPC> work.  Also, if you
          are using the string ‘nnml:foo, nnml:bar’ (indicating Gcc into
          two groups) you must change it to return the list ‘("nnml:foo"
          "nnml:bar")’, otherwise the Gcc: line will be quoted
          incorrectly.  Note that returning the string ‘nnml:foo,
          nnml:bar’ was incorrect earlier, it just didn’t generate any
          problems since it was inserted directly.

        • ‘message-insinuate-rmail’

          Adding ‘(message-insinuate-rmail)’ and ‘(setq mail-user-agent
          'gnus-user-agent)’ in ‘.emacs’ convinces Rmail to compose,
          reply and forward messages in message-mode, where you can
          enjoy the power of MML.

        • ‘message-minibuffer-local-map’

          The line below enables BBDB in resending a message:
               (define-key message-minibuffer-local-map [(tab)]
                 'bbdb-complete-name)

        • ‘gnus-posting-styles’

          Add a new format of match like
               ((header "to" "larsi.*org")
                (Organization "Somewhere, Inc."))
          The old format like the lines below is obsolete, but still
          accepted.
               (header "to" "larsi.*org"
                       (Organization "Somewhere, Inc."))

        • ‘message-ignored-news-headers’ and
          ‘message-ignored-mail-headers’

          ‘X-Draft-From’ and ‘X-Gnus-Agent-Meta-Information’ have been
          added into these two variables.  If you customized those,
          perhaps you need add those two headers too.

        • Gnus supports the “format=flowed” (RFC 2646) parameter.  On
          composing messages, it is enabled by ‘use-hard-newlines’.
          Decoding format=flowed was present but not documented in
          earlier versions.

        • The option ‘mm-fill-flowed’ can be used to disable treatment
          of “format=flowed” messages.  Also, flowed text is disabled
          when sending inline PGP signed messages.  *Note Flowed text:
          (emacs-mime)Flowed text.  (New in Gnus 5.10.7)

        • Gnus supports the generation of RFC 2298 Disposition
          Notification requests.

          This is invoked with the ‘C-c M-n’ key binding from message
          mode.

        • Message supports the Importance: (RFC 2156) header.

          In the message buffer, ‘C-c C-f C-i’ or ‘C-c C-u’ cycles
          through the valid values.

        • Gnus supports Cancel Locks in News.

          This means a header ‘Cancel-Lock’ is inserted in news posting.
          It is used to determine if you wrote an article or not (for
          canceling and superseding).  Gnus generates a random password
          string the first time you post a message, and saves it in your
          ‘~/.emacs’ using the Custom system.  While the variable is
          called ‘canlock-password’, it is not security sensitive data.
          Publishing your canlock string on the web will not allow
          anyone to be able to anything she could not already do.  The
          behavior can be changed by customizing
          ‘message-insert-canlock’.

        • Gnus supports PGP (RFC 1991/2440), PGP/MIME (RFC 2015/3156)
          and S/MIME (RFC 2630–2633).

          It needs an external S/MIME and OpenPGP implementation, but no
          additional Lisp libraries.  This add several menu items to the
          Attachments menu, and ‘C-c <RET>’ key bindings, when composing
          messages.  This also obsoletes ‘gnus-article-hide-pgp-hook’.

        • MML (Mime compose) prefix changed from ‘M-m’ to ‘C-c C-m’.

          This change was made to avoid conflict with the standard
          binding of ‘back-to-indentation’, which is also useful in
          message mode.

        • The default for ‘message-forward-show-mml’ changed to the
          symbol ‘best’.

          The behavior for the ‘best’ value is to show MML (i.e.,
          convert to MIME) when appropriate.  MML will not be used when
          forwarding signed or encrypted messages, as the conversion
          invalidate the digital signature.

        • If ‘auto-compression-mode’ is enabled, attachments are
          automatically decompressed when activated.

        • Support for non-ASCII domain names

          Message supports non-ASCII domain names in From:, To: and Cc:
          and will query you whether to perform encoding when you try to
          send a message.  The variable ‘message-use-idna’ controls
          this.  Gnus will also decode non-ASCII domain names in From:,
          To: and Cc: when you view a message.  The variable
          ‘gnus-use-idna’ controls this.

        • You can now drag and drop attachments to the Message buffer.
          See ‘mml-dnd-protocol-alist’ and ‘mml-dnd-attach-options’.
          *Note MIME: (message)MIME.

        • ‘auto-fill-mode’ is enabled by default in Message mode.  See
          ‘message-fill-column’.  *Note Message Headers:
          (message)Various Message Variables.

   • Changes in back ends

        • Gnus can display RSS newsfeeds as a newsgroup.  *Note RSS::.

        • The nndoc back end now supports mailman digests and exim
          bounces.

        • Gnus supports Maildir groups.

          Gnus includes a new back end ‘nnmaildir.el’.  *Note Maildir::.

        • The nnml and nnfolder back ends store marks for each groups.

          This makes it possible to take backup of nnml/nnfolder
          servers/groups separately of ‘~/.newsrc.eld’, while preserving
          marks.  It also makes it possible to share articles and marks
          between users (without sharing the ‘~/.newsrc.eld’ file)
          within, e.g., a department.  It works by storing the marks
          stored in ‘~/.newsrc.eld’ in a per-group file ‘.marks’ (for
          nnml) and ‘GROUPNAME.mrk’ (for nnfolder, named GROUPNAME).  If
          the nnml/nnfolder is moved to another machine, Gnus will
          automatically use the ‘.marks’ or ‘.mrk’ file instead of the
          information in ‘~/.newsrc.eld’.  The new server variables
          ‘nnml-marks-is-evil’ and ‘nnfolder-marks-is-evil’ can be used
          to disable this feature.

   • Appearance

        • The menu bar item (in Group and Summary buffer) named “Misc”
          has been renamed to “Gnus”.

        • The menu bar item (in Message mode) named “MML” has been
          renamed to “Attachments”.  Note that this menu also contains
          security related stuff, like signing and encryption (*note
          Security: (message)Security.).

        • The tool bars have been updated to use GNOME icons in Group,
          Summary and Message mode.  You can also customize the tool
          bars: ‘M-x customize-apropos <RET> -tool-bar$’ should get you
          started.  This is a new feature in Gnus 5.10.10.

        • The tool bar icons are now (de)activated correctly in the
          group buffer, see the variable ‘gnus-group-update-tool-bar’.
          Its default value depends on your Emacs version.  This is a
          new feature in Gnus 5.10.9.

   • Miscellaneous changes

        • ‘gnus-agent’

          The Gnus Agent has seen a major updated and is now enabled by
          default, and all nntp and nnimap servers from
          ‘gnus-select-method’ and ‘gnus-secondary-select-method’ are
          agentized by default.  Earlier only the server in
          ‘gnus-select-method’ was agentized by the default, and the
          agent was disabled by default.  When the agent is enabled,
          headers are now also retrieved from the Agent cache instead of
          the back ends when possible.  Earlier this only happened in
          the unplugged state.  You can enroll or remove servers with ‘J
          a’ and ‘J r’ in the server buffer.  Gnus will not download
          articles into the Agent cache, unless you instruct it to do
          so, though, by using ‘J u’ or ‘J s’ from the Group buffer.
          You revert to the old behavior of having the Agent disabled
          with ‘(setq gnus-agent nil)’.  Note that putting
          ‘(gnus-agentize)’ in ‘~/.gnus.el’ is not needed any more.

        • Gnus reads the NOV and articles in the Agent if plugged.

          If one reads an article while plugged, and the article already
          exists in the Agent, it won’t get downloaded once more.
          ‘(setq gnus-agent-cache nil)’ reverts to the old behavior.

        • Dired integration

          ‘gnus-dired-minor-mode’ (*note Other modes::) installs key
          bindings in dired buffers to send a file as an attachment,
          open a file using the appropriate mailcap entry, and print a
          file using the mailcap entry.

        • The format spec ‘%C’ for positioning point has changed to
          ‘%*’.

        • ‘gnus-child-unplugged’

          A new command which starts Gnus offline in child mode.


File: gnus.info,  Node: No Gnus,  Next: Ma Gnus,  Prev: Oort Gnus,  Up: New Features

12.1.5.7 No Gnus
................

New features in No Gnus:

   • Supported Emacs versions The following Emacs versions are supported
     by No Gnus:

        • Emacs 22 and up

   • Installation changes

        • Upgrading from previous (stable) version if you have used No
          Gnus.

          If you have tried No Gnus (the unstable Gnus branch leading to
          this release) but went back to a stable version, be careful
          when upgrading to this version.  In particular, you will
          probably want to remove the ‘~/News/marks’ directory (perhaps
          selectively), so that flags are read from your ‘~/.newsrc.eld’
          instead of from the stale marks file, where this release will
          store flags for nntp.  See a later entry for more information
          about nntp marks.  Note that downgrading isn’t safe in
          general.

        • Incompatibility when switching from Emacs 23 to Emacs 22 In
          Emacs 23, Gnus uses Emacs’s new internal coding system
          ‘utf-8-emacs’ for saving articles drafts and ‘~/.newsrc.eld’.
          These files may not be read correctly in Emacs 22 and below.
          If you want to use Gnus across different Emacs versions, you
          may set ‘mm-auto-save-coding-system’ to ‘emacs-mule’.

        • Lisp files are now installed in ‘.../site-lisp/gnus/’ by
          default.  It defaulted to ‘.../site-lisp/’ formerly.  In
          addition to this, the new installer issues a warning if other
          Gnus installations which will shadow the latest one are
          detected.  You can then remove those shadows manually or
          remove them using ‘make remove-installed-shadows’.

        • The installation directory’s name is allowed to have spaces
          and/or tabs.

   • New packages and libraries within Gnus

        • New version of ‘nnimap’

          ‘nnimap’ has been reimplemented in a mostly-compatible way.
          See the Gnus manual for a description of the new interface.
          In particular, ‘nnimap-inbox’ and the client side split method
          has changed.

        • Gnus includes the Emacs Lisp SASL library.

          This provides a clean API to SASL mechanisms from within
          Emacs.  The user visible aspects of this, compared to the
          earlier situation, include support for DIGEST-MD5 and NTLM.
          *Note Emacs SASL: (sasl)Top.

        • ManageSieve connections uses the SASL library by default.

          The primary change this brings is support for DIGEST-MD5 and
          NTLM, when the server supports it.

        • Gnus includes a password cache mechanism in password.el.

          It is enabled by default (see ‘password-cache’), with a short
          timeout of 16 seconds (see ‘password-cache-expiry’).  If PGG
          is used as the PGP back end, the PGP passphrase is managed by
          this mechanism.  Passwords for ManageSieve connections are
          managed by this mechanism, after querying the user about
          whether to do so.

        • Using EasyPG with Gnus When EasyPG, is available, Gnus will
          use it instead of PGG.  EasyPG is an Emacs user interface to
          GNU Privacy Guard.  *Note EasyPG Assistant user’s manual:
          (epa)Top.  EasyPG is included in Emacs 23 and available
          separately as well.

   • Changes in group mode

        • Symbols like ‘gcc-self’ now have the same precedence rules in
          ‘gnus-parameters’ as other “real” variables: The last match
          wins instead of the first match.

        • Old intermediate incoming mail files (‘Incoming*’) are deleted
          after a couple of days, not immediately.  *Note Mail Source
          Customization::.  (New in Gnus 5.10.10 / No Gnus 0.8)

   • Changes in summary and article mode

        • There’s now only one variable that determines how HTML is
          rendered: ‘mm-text-html-renderer’.

        • Gnus now supports sticky article buffers.  Those are article
          buffers that are not reused when you select another article.
          *Note Sticky Articles::.

        • Gnus can selectively display ‘text/html’ articles with a WWW
          browser with ‘K H’.  *Note MIME Commands::.

        • International host names (IDNA) can now be decoded inside
          article bodies using ‘W i’ (‘gnus-summary-idna-message’).
          This requires that GNU Libidn
          (<https://www.gnu.org/software/libidn/>) has been installed.

        • The non-ASCII group names handling has been much improved.
          The back ends that fully support non-ASCII group names are now
          ‘nntp’, ‘nnml’, and ‘nnrss’.  Also the agent, the cache, and
          the marks features work with those back ends.  *Note Non-ASCII
          Group Names::.

        • Gnus now displays DNS master files sent as text/dns using
          dns-mode.

        • Gnus supports new limiting commands in the Summary buffer: ‘/
          r’ (‘gnus-summary-limit-to-replied’) and ‘/ R’
          (‘gnus-summary-limit-to-recipient’).  *Note Limiting::.

        • You can now fetch all ticked articles from the server using ‘Y
          t’ (‘gnus-summary-insert-ticked-articles’).  *Note Summary
          Generation Commands::.

        • Gnus supports a new sort command in the Summary buffer: ‘C-c
          C-s C-t’ (‘gnus-summary-sort-by-recipient’).  *Note Summary
          Sorting::.

        • S/MIME now features LDAP user certificate searches.  You need
          to configure the server in ‘smime-ldap-host-list’.

        • URLs inside OpenPGP headers are retrieved and imported to your
          PGP key ring when you click on them.

        • Picons can be displayed right from the textual address, see
          ‘gnus-picon-style’.  *Note Picons::.

        • ANSI SGR control sequences can be transformed using ‘W A’.

          ANSI sequences are used in some Chinese hierarchies for
          highlighting articles (‘gnus-article-treat-ansi-sequences’).

        • Gnus now MIME decodes articles even when they lack
          "MIME-Version" header.  This changes the default of
          ‘gnus-article-loose-mime’.

        • ‘gnus-decay-scores’ can be a regexp matching score files.  For
          example, set it to ‘\\.ADAPT\\'’ and only adaptive score files
          will be decayed.  *Note Score Decays::.

        • Strings prefixing to the ‘To’ and ‘Newsgroup’ headers in
          summary lines when using ‘gnus-ignored-from-addresses’ can be
          customized with ‘gnus-summary-to-prefix’ and
          ‘gnus-summary-newsgroup-prefix’.  *Note To From Newsgroups::.

        • You can replace MIME parts with external bodies.  See
          ‘gnus-mime-replace-part’ and ‘gnus-article-replace-part’.
          *Note MIME Commands::, *note Using MIME::.

        • The option ‘mm-fill-flowed’ can be used to disable treatment
          of format=flowed messages.  Also, flowed text is disabled when
          sending inline PGP signed messages.  *Note Flowed text:
          (emacs-mime)Flowed text.  (New in Gnus 5.10.7)

        • Now the new command ‘S W’
          (‘gnus-article-wide-reply-with-original’) for a wide reply in
          the article buffer yanks a text that is in the active region,
          if it is set, as well as the ‘R’
          (‘gnus-article-reply-with-original’) command.  Note that the
          ‘R’ command in the article buffer no longer accepts a prefix
          argument, which was used to make it do a wide reply.  *Note
          Article Keymap::.

        • The new command ‘C-h b’ (‘gnus-article-describe-bindings’)
          used in the article buffer now shows not only the article
          commands but also the real summary commands that are
          accessible from the article buffer.

   • Changes in Message mode

        • Gnus now defaults to saving all outgoing messages in per-month
          nnfolder archives.

        • Gnus now supports the “hashcash” client puzzle anti-spam
          mechanism.  Use ‘(setq message-generate-hashcash t)’ to
          enable.  *Note Hashcash::.

        • You can now drag and drop attachments to the Message buffer.
          See ‘mml-dnd-protocol-alist’ and ‘mml-dnd-attach-options’.
          *Note MIME: (message)MIME.

        • The option ‘message-yank-empty-prefix’ now controls how empty
          lines are prefixed in cited text.  *Note Insertion Variables:
          (message)Insertion Variables.

        • Gnus uses narrowing to hide headers in Message buffers.  The
          ‘References’ header is hidden by default.  To make all headers
          visible, use ‘(setq message-hidden-headers nil)’.  *Note
          Message Headers: (message)Message Headers.

        • You can highlight different levels of citations like in the
          article buffer.  See ‘gnus-message-highlight-citation’.

        • ‘auto-fill-mode’ is enabled by default in Message mode.  See
          ‘message-fill-column’.  *Note Message Headers:
          (message)Various Message Variables.

        • You can now store signature files in a special directory named
          ‘message-signature-directory’.

        • The option ‘message-citation-line-format’ controls the format
          of the "Whomever writes:" line.  You need to set
          ‘message-citation-line-function’ to
          ‘message-insert-formatted-citation-line’ as well.

   • Changes in Browse Server mode

        • Gnus’ sophisticated subscription methods are now available in
          Browse Server buffers as well using the variable
          ‘gnus-browse-subscribe-newsgroup-method’.

   • Changes in back ends

        • The nntp back end stores article marks in ‘~/News/marks’.

          The directory can be changed using the (customizable) variable
          ‘nntp-marks-directory’, and marks can be disabled using the
          (back end) variable ‘nntp-marks-is-evil’.  The advantage of
          this is that you can copy ‘~/News/marks’ (using rsync, scp or
          whatever) to another Gnus installation, and it will realize
          what articles you have read and marked.  The data in
          ‘~/News/marks’ has priority over the same data in
          ‘~/.newsrc.eld’.

        • You can import and export your RSS subscriptions from OPML
          files.  *Note RSS::.

        • IMAP identity (RFC 2971) is supported.

          By default, Gnus does not send any information about itself,
          but you can customize it using the variable ‘nnimap-id’.

        • The ‘nnrss’ back end now supports multilingual text.
          Non-ASCII group names for the ‘nnrss’ groups are also
          supported.  *Note RSS::.

        • Retrieving mail with POP3 is supported over SSL/TLS and with
          StartTLS.

        • The nnml back end allows other compression programs beside
          ‘gzip’ for compressed message files.  *Note Mail Spool::.

        • The nnml back end supports group compaction.

          This feature, accessible via the functions
          ‘gnus-group-compact-group’ (‘G z’ in the group buffer) and
          ‘gnus-server-compact-server’ (‘z’ in the server buffer)
          renumbers all articles in a group, starting from 1 and
          removing gaps.  As a consequence, you get a correct total
          article count (until messages are deleted again).

   • Appearance

        • The tool bar has been updated to use GNOME icons.  You can
          also customize the tool bars: ‘M-x customize-apropos <RET>
          -tool-bar$’ should get you started.

        • The tool bar icons are now (de)activated correctly in the
          group buffer, see the variable ‘gnus-group-update-tool-bar’.
          Its default value depends on your Emacs version.

   • Miscellaneous changes

        • Having edited the select-method for the foreign server in the
          server buffer is immediately reflected to the subscription of
          the groups which use the server in question.  For instance, if
          you change ‘nntp-via-address’ into ‘bar.example.com’ from
          ‘foo.example.com’, Gnus will connect to the news host by way
          of the intermediate host ‘bar.example.com’ from next time.

        • The ‘all.SCORE’ file can be edited from the group buffer using
          ‘W e’.

        • You can set ‘gnus-mark-copied-or-moved-articles-as-expirable’
          to a non-‘nil’ value so that articles that have been read may
          be marked as expirable automatically when copying or moving
          them to a group that has auto-expire turned on.  The default
          is ‘nil’ and copying and moving of articles behave as before;
          i.e., the expirable marks will be unchanged except that the
          marks will be removed when copying or moving articles to a
          group that has not turned auto-expire on.  *Note Expiring
          Mail::.

        • NoCeM support has been removed.

        • Carpal mode has been removed.


File: gnus.info,  Node: Ma Gnus,  Prev: No Gnus,  Up: New Features

12.1.5.8 Ma Gnus
................

It’s really spelled 真Gnus.  Ma Gnus was the code name for the
development version of Gnus started in 2012.  These days, Gnus is only
released together with Emacs.

   New features in Ma Gnus:

   • Changes in summary and article mode

        • By default, MIME part buttons for attachments (if any) will
          appear in the end of the article header in addition to the
          bottom of the article body, so you can easily find them
          without scrolling the article again and again.  *Note MIME
          Commands::.

   • Changes in Message mode and related Gnus features

        • The new hooks ‘gnus-gcc-pre-body-encode-hook’ and
          ‘gnus-gcc-post-body-encode-hook’ are run before/after encoding
          the message body of the Gcc copy of a sent message.  *Note
          Archived Messages::.

          For more recent changes, see the Emacs ‘NEWS’ files.


File: gnus.info,  Node: On Writing Manuals,  Next: Terminology,  Prev: History,  Up: Appendices

# /. 12.2 On Writing Manuals
===========================

I guess most manuals are written after-the-fact; documenting a program
that’s already there.  This is not how this manual is written.  When
implementing something, I write the manual entry for that something
straight away.  I then see that it’s difficult to explain the
functionality, so I write how it’s supposed to be, and then I change the
implementation.  Writing the documentation and writing the code go hand
in hand.

   This, of course, means that this manual has no, or little, flow.  It
documents absolutely everything in Gnus, but often not where you’re
looking for it.  It is a reference manual, and not a guide to how to get
started with Gnus.

   That would be a totally different book, that should be written using
the reference manual as source material.  It would look quite different.


File: gnus.info,  Node: Terminology,  Next: Customization,  Prev: On Writing Manuals,  Up: Appendices

# /. 12.3 Terminology
====================

“news”
     This is what you are supposed to use this thing for—reading news.
     News is generally fetched from a nearby NNTP server, and is
     generally publicly available to everybody.  If you post news, the
     entire world is likely to read just what you have written, and
     they’ll all snigger mischievously.  Behind your back.

“mail”
     Everything that’s delivered to you personally is mail.  Some
     news/mail readers (like Gnus) blur the distinction between mail and
     news, but there is a difference.  Mail is private.  News is public.
     Mailing is not posting, and replying is not following up.

“reply”
     Send a mail to the person who has written what you are reading.

“follow up”
     Post an article to the current newsgroup responding to the article
     you are reading.

“back end”
     Gnus considers mail and news to be mostly the same, really.  The
     only difference is how to access the actual articles.  News
     articles are commonly fetched via the protocol NNTP, whereas mail
     messages could be read from a file on the local disk.  The internal
     architecture of Gnus thus comprises a “front end” and a number of
     “back ends”.  Internally, when you enter a group (by hitting <RET>,
     say), you thereby invoke a function in the front end in Gnus.  The
     front end then “talks” to a back end and says things like “Give me
     the list of articles in the foo group” or “Show me article number
     4711”.

     So a back end mainly defines either a protocol (the ‘nntp’ back end
     accesses news via NNTP, the ‘nnimap’ back end accesses mail via
     IMAP) or a file format and directory layout (the ‘nnspool’ back end
     accesses news via the common “spool directory” format, the ‘nnml’
     back end access mail via a file format and directory layout that’s
     quite similar).

     Gnus does not handle the underlying media, so to speak—this is all
     done by the back ends.  A back end is a collection of functions to
     access the articles.

     However, sometimes the term “back end” is also used where “server”
     would have been more appropriate.  And then there is the term
     “select method” which can mean either.  The Gnus terminology can be
     quite confusing.

“native”
     Gnus will always use one method (and back end) as the “native”, or
     default, way of getting news.  Groups from the native select method
     have names like ‘gnu.emacs.gnus’.

“foreign”
     You can also have any number of foreign groups active at the same
     time.  These are groups that use non-native non-secondary back ends
     for getting news.  Foreign groups have names like
     ‘nntp+news.gmane.org:gmane.emacs.gnus.devel’.

“secondary”
     Secondary back ends are somewhere half-way between being native and
     being foreign, but they mostly act like they are native, but they,
     too have names like ‘nntp+news.gmane.org:gmane.emacs.gnus.devel’.

“article”
     A message that has been posted as news.

“mail message”
     A message that has been mailed.

“message”
     A mail message or news article

“head”
     The top part of a message, where administrative information (etc.)
     is put.

“body”
     The rest of an article.  Everything not in the head is in the body.

“header”
     A line from the head of an article.

“headers”
     A collection of such lines, or a collection of heads.  Or even a
     collection of NOV lines.

“NOV”
     NOV stands for News OverView, which is a type of news server header
     which provide data containing the condensed header information of
     articles.  They are produced by the server itself; in the ‘nntp’
     back end Gnus uses the ones that the NNTP server makes, but Gnus
     makes them by itself for some backends (in particular, ‘nnml’).

     When Gnus enters a group, it asks the back end for the headers of
     all unread articles in the group.  Most servers support the News
     OverView format, which is more compact and much faster to read and
     parse than the normal HEAD format.

     The NOV data consist of one or more text lines (*note Motion by
     Text Lines: (elisp)Text Lines.) where each line has the header
     information of one article.  The header information is a
     tab-separated series of the header’s contents including an article
     number, a subject, an author, a date, a message-id, references,
     etc.

     Those data enable Gnus to generate summary lines quickly.  However,
     if the server does not support NOV or you disable it purposely or
     for some reason, Gnus will try to generate the header information
     by parsing each article’s headers one by one.  It will take time.
     Therefore, it is not usually a good idea to set nn*-nov-is-evil
     (*note Slow/Expensive Connection::) to a non-‘nil’ value unless you
     know that the server makes wrong NOV data.

“level”
     Each group is subscribed at some “level” or other (1–9).  The ones
     that have a lower level are “more” subscribed than the groups with
     a higher level.  In fact, groups on levels 1–5 are considered
     “subscribed”; 6–7 are “unsubscribed”; 8 are “zombies”; and 9 are
     “killed”.  Commands for listing groups and scanning for new
     articles will all use the numeric prefix as “working level”.

“killed groups”
     No information on killed groups is stored or updated, which makes
     killed groups much easier to handle than subscribed groups.

“zombie groups”
     Just like killed groups, only slightly less dead.

“active file”
     The news server has to keep track of what articles it carries, and
     what groups exist.  All this information in stored in the active
     file, which is rather large, as you might surmise.

“bogus groups”
     A group that exists in the ‘.newsrc’ file, but isn’t known to the
     server (i.e., it isn’t in the active file), is a _bogus group_.
     This means that the group probably doesn’t exist (any more).

“activating”
     The act of asking the server for info on a group and computing the
     number of unread articles is called “activating the group”.
     Un-activated groups are listed with ‘*’ in the group buffer.

“spool”
     News servers store their articles locally in one fashion or other.
     One old-fashioned storage method is to have just one file per
     article.  That’s called a “traditional spool”.

“server”
     A machine one can connect to and get news (or mail) from.

“select method”
     A structure that specifies the back end, the server and the virtual
     server settings.

“virtual server”
     A named select method.  Since a select method defines all there is
     to know about connecting to a (physical) server, taking the thing
     as a whole is a virtual server.

“washing”
     Taking a buffer and running it through a filter of some sort.  The
     result will (more often than not) be cleaner and more pleasing than
     the original.

“ephemeral groups”
     Most groups store data on what articles you have read.  “Ephemeral”
     groups are groups that will have no data stored—when you exit the
     group, it’ll disappear into the aether.

“solid groups”
     This is the opposite of ephemeral groups.  All groups listed in the
     group buffer are solid groups.

“sparse articles”
     These are article placeholders shown in the summary buffer when
     ‘gnus-build-sparse-threads’ has been switched on.

“threading”
     To put responses to articles directly after the articles they
     respond to—in a hierarchical fashion.

“root”
     The first article in a thread is the root.  It is the ancestor of
     all articles in the thread.

“parent”
     An article that has responses.

“child”
     An article that responds to a different article—its parent.

“digest”
     A collection of messages in one file.  The most common digest
     format is specified by RFC 1153.

“splitting”
     The action of sorting your emails according to certain rules.
     Sometimes incorrectly called mail filtering.


File: gnus.info,  Node: Customization,  Next: Troubleshooting,  Prev: Terminology,  Up: Appendices

# /. 12.4 Customization
======================

All variables are properly documented elsewhere in this manual.  This
section is designed to give general pointers on how to customize Gnus
for some quite common situations.

* Menu:

* Slow/Expensive Connection::   You run a local Emacs and get the news elsewhere.
* Slow Terminal Connection::    You run a remote Emacs.
* Little Disk Space::           You feel that having large setup files is icky.
* Slow Machine::                You feel like buying a faster machine.


File: gnus.info,  Node: Slow/Expensive Connection,  Next: Slow Terminal Connection,  Up: Customization

12.4.1 Slow/Expensive Connection
--------------------------------

If you run Emacs on a machine locally, and get your news from a machine
over some very thin strings, you want to cut down on the amount of data
Gnus has to get from the server.

‘gnus-read-active-file’
     Set this to ‘nil’, which will inhibit Gnus from requesting the
     entire active file from the server.  This file is often very large.
     You also have to set ‘gnus-check-new-newsgroups’ and
     ‘gnus-check-bogus-newsgroups’ to ‘nil’ to make sure that Gnus
     doesn’t suddenly decide to fetch the active file anyway.

‘gnus-nov-is-evil’
     Usually this one must _always_ be ‘nil’ (which is the default).
     If, for example, you wish to not use NOV (*note Terminology::) with
     the ‘nntp’ back end (*note Crosspost Handling::), set
     ‘nntp-nov-is-evil’ to a non-‘nil’ value instead of setting this.
     But you normally do not need to set ‘nntp-nov-is-evil’ since Gnus
     by itself will detect whether the NNTP server supports NOV.
     Anyway, grabbing article headers from the NNTP server will not be
     very fast if you tell Gnus not to use NOV.

     As the variables for the other back ends, there are
     ‘nndiary-nov-is-evil’, ‘nndir-nov-is-evil’, ‘nnfolder-nov-is-evil’,
     ‘nnml-nov-is-evil’, and ‘nnspool-nov-is-evil’.  Note that a
     non-‘nil’ value for ‘gnus-nov-is-evil’ overrides all those
     variables.


File: gnus.info,  Node: Slow Terminal Connection,  Next: Little Disk Space,  Prev: Slow/Expensive Connection,  Up: Customization

12.4.2 Slow Terminal Connection
-------------------------------

Let’s say you use your home computer for dialing up the system that runs
Emacs and Gnus.  If your modem is slow, you want to reduce (as much as
possible) the amount of data sent over the wires.

‘gnus-auto-center-summary’
     Set this to ‘nil’ to inhibit Gnus from re-centering the summary
     buffer all the time.  If it is ‘vertical’, do only vertical
     re-centering.  If it is neither ‘nil’ nor ‘vertical’, do both
     horizontal and vertical recentering.

‘gnus-visible-headers’
     Cut down on the headers included in the articles to the minimum.
     You can, in fact, make do without them altogether—most of the
     useful data is in the summary buffer, anyway.  Set this variable to
     ‘^NEVVVVER’ or ‘From:’, or whatever you feel you need.

     Use the following to enable all the available hiding features:
          (setq gnus-treat-hide-headers 'head
                gnus-treat-hide-signature t
                gnus-treat-hide-citation t)

‘gnus-use-full-window’
     By setting this to ‘nil’, you can make all the windows smaller.
     While this doesn’t really cut down much generally, it means that
     you have to see smaller portions of articles before deciding that
     you didn’t want to read them anyway.

‘gnus-thread-hide-subtree’
     If this is non-‘nil’, all threads in the summary buffer will be
     hidden initially.

‘gnus-updated-mode-lines’
     If this is ‘nil’, Gnus will not put information in the buffer mode
     lines, which might save some time.


File: gnus.info,  Node: Little Disk Space,  Next: Slow Machine,  Prev: Slow Terminal Connection,  Up: Customization

12.4.3 Little Disk Space
------------------------

The startup files can get rather large, so you may want to cut their
sizes a bit if you are running out of space.

‘gnus-save-newsrc-file’
     If this is ‘nil’, Gnus will never save ‘.newsrc’—it will only save
     ‘.newsrc.eld’.  This means that you will not be able to use any
     other newsreaders than Gnus.  This variable is ‘t’ by default.

‘gnus-read-newsrc-file’
     If this is ‘nil’, Gnus will never read ‘.newsrc’—it will only read
     ‘.newsrc.eld’.  This means that you will not be able to use any
     other newsreaders than Gnus.  This variable is ‘t’ by default.

‘gnus-save-killed-list’
     If this is ‘nil’, Gnus will not save the list of dead groups.  You
     should also set ‘gnus-check-new-newsgroups’ to ‘ask-server’ and
     ‘gnus-check-bogus-newsgroups’ to ‘nil’ if you set this variable to
     ‘nil’.  This variable is ‘t’ by default.


File: gnus.info,  Node: Slow Machine,  Prev: Little Disk Space,  Up: Customization

12.4.4 Slow Machine
-------------------

If you have a slow machine, or are just really impatient, there are a
few things you can do to make Gnus run faster.

   Set ‘gnus-check-new-newsgroups’ and ‘gnus-check-bogus-newsgroups’ to
‘nil’ to make startup faster.

   Set ‘gnus-show-threads’, ‘gnus-use-cross-reference’ and
‘gnus-nov-is-evil’ to ‘nil’ to make entering and exiting the summary
buffer faster.  Also *note Slow/Expensive Connection::.


File: gnus.info,  Node: Troubleshooting,  Next: Gnus Reference Guide,  Prev: Customization,  Up: Appendices

# /. 12.5 Troubleshooting
========================

Gnus works _so_ well straight out of the box—I can’t imagine any
problems, really.

   Ahem.

  1. Make sure your computer is switched on.

  2. Read the help group (‘G h’ in the group buffer) for a FAQ and a
     how-to.

  3. Gnus works on many recursive structures, and in some extreme (and
     very rare) cases Gnus may recurse down “too deeply” and Emacs will
     beep at you.  If this happens to you, set ‘max-lisp-eval-depth’ to
     2000 or something like that.

   If all else fails, report the problem as a bug.

   If you find a bug in Gnus, you can report it with the ‘M-x gnus-bug’
command.  ‘M-x toggle-debug-on-error’, and send me the backtrace.  I
will fix bugs, but I can only fix them if you send me a precise
description as to how to reproduce the bug.

   You really can never be too detailed in a bug report.  Always use the
‘M-x gnus-bug’ command when you make bug reports, even if it creates a
10Kb mail each time you use it, and even if you have sent me your
environment 500 times before.  I don’t care.  I want the full info each
time.

   It is also important to remember that I have no memory whatsoever.
If you send a bug report, and I send you a reply, and then you just send
back “No, it’s not!  Moron!”, I will have no idea what you are insulting
me about.  Always over-explain everything.  It’s much easier for all of
us—if I don’t have all the information I need, I will just mail you and
ask for more info, and everything takes more time.

   If the problem you’re seeing is very visual, and you can’t quite
explain it, copy the Emacs window to a file (with ‘xwd’, for instance),
put it somewhere it can be reached, and include the URL of the picture
in the bug report.

   If you would like to contribute a patch to fix bugs or make
improvements, please produce the patch using ‘diff -u’.

   If you want to debug your problem further before reporting, possibly
in order to solve the problem yourself and send a patch, you can use
edebug.  Debugging Lisp code is documented in the Elisp manual (*note
Debugging Lisp Programs: (elisp)Debugging.).  To get you started with
edebug, consider if you discover some weird behavior when pressing ‘c’,
the first step is to do ‘C-h k c’ and click on the hyperlink in the
documentation buffer that leads you to the function definition, then
press ‘M-x edebug-defun <RET>’ with point inside that function, return
to Gnus and press ‘c’ to invoke the code.  You will be placed in the
lisp buffer and can single step using ‘<SPC>’ and evaluate expressions
using ‘M-:’ or inspect variables using ‘C-h v’, abort execution with
‘q’, and resume execution with ‘c’ or ‘g’.

   Sometimes, a problem do not directly generate an Emacs Lisp error but
manifests itself by causing Gnus to be very slow.  In these cases, you
can use ‘M-x toggle-debug-on-quit’ and press ‘C-g’ when things are slow,
and then try to analyze the backtrace (repeating the procedure helps
isolating the real problem areas).

   A fancier approach is to use the elisp profiler, ELP.  The profiler
is (or should be) fully documented elsewhere, but to get you started
there are a few steps that need to be followed.  First, instrument the
part of Gnus you are interested in for profiling, e.g., ‘M-x
elp-instrument-package <RET> gnus’ or ‘M-x elp-instrument-package <RET>
message’.  Then perform the operation that is slow and press ‘M-x
elp-results’.  You will then see which operations that takes time, and
can debug them further.  If the entire operation takes much longer than
the time spent in the slowest function in the profiler output, you
probably profiled the wrong part of Gnus.  To reset profiling
statistics, use ‘M-x elp-reset-all’.  ‘M-x elp-restore-all’ is supposed
to remove profiling, but given the complexities and dynamic code
generation in Gnus, it might not always work perfectly.

   If you just need help, you are better off asking on ‘gnu.emacs.gnus’.
I’m not very helpful.  You can also ask on the ding mailing list
<ding@gnus.org>.  Write to <ding-request@gnus.org> to subscribe.


File: gnus.info,  Node: Gnus Reference Guide,  Next: Emacs for Heathens,  Prev: Troubleshooting,  Up: Appendices

# /. 12.6 Gnus Reference Guide
=============================

It is my hope that other people will figure out smart stuff that Gnus
can do, and that other people will write those smart things as well.  To
facilitate that I thought it would be a good idea to describe the inner
workings of Gnus.  And some of the not-so-inner workings, while I’m at
it.

   You can never expect the internals of a program not to change, but I
will be defining (in some details) the interface between Gnus and its
back ends (this is written in stone), the format of the score files
(ditto), data structures (some are less likely to change than others)
and general methods of operation.

* Menu:

* Gnus Utility Functions::      Common functions and variable to use.
* Back End Interface::          How Gnus communicates with the servers.
* Score File Syntax::           A BNF definition of the score file standard.
* Headers::                     How Gnus stores headers internally.
* Ranges::                      A handy format for storing mucho numbers.
* Group Info::                  The group info format.
* Extended Interactive::        Symbolic prefixes and stuff.
* Various File Formats::        Formats of files that Gnus use.


File: gnus.info,  Node: Gnus Utility Functions,  Next: Back End Interface,  Up: Gnus Reference Guide

12.6.1 Gnus Utility Functions
-----------------------------

When writing small functions to be run from hooks (and stuff), it’s
vital to have access to the Gnus internal functions and variables.
Below is a list of the most common ones.

‘gnus-newsgroup-name’
     This variable holds the name of the current newsgroup.

‘gnus-find-method-for-group’
     A function that returns the select method for GROUP.

‘gnus-group-real-name’
     Takes a full (prefixed) Gnus group name, and returns the unprefixed
     name.

‘gnus-group-prefixed-name’
     Takes an unprefixed group name and a select method, and returns the
     full (prefixed) Gnus group name.

‘gnus-get-info’
     Returns the group info list for GROUP (*note Group Info::).

‘gnus-group-unread’
     The number of unread articles in GROUP, or ‘t’ if that is unknown.

‘gnus-active’
     The active entry (i.e., a cons cell containing the lowest and
     highest article numbers) for GROUP.

‘gnus-set-active’
     Set the active entry for GROUP.

‘gnus-add-current-to-buffer-list’
     Adds the current buffer to the list of buffers to be killed on Gnus
     exit.

‘gnus-continuum-version’
     Takes a Gnus version string as a parameter and returns a floating
     point number.  Earlier versions will always get a lower number than
     later versions.

‘gnus-group-read-only-p’
     Says whether GROUP is read-only or not.

‘gnus-news-group-p’
     Says whether GROUP came from a news back end.

‘gnus-ephemeral-group-p’
     Says whether GROUP is ephemeral or not.

‘gnus-server-to-method’
     Returns the select method corresponding to SERVER.

‘gnus-server-equal’
     Says whether two virtual servers are essentially equal.  For
     instance, two virtual servers may have server parameters in
     different order, but this function will consider them equal.

‘gnus-group-native-p’
     Says whether GROUP is native or not.

‘gnus-group-secondary-p’
     Says whether GROUP is secondary or not.

‘gnus-group-foreign-p’
     Says whether GROUP is foreign or not.

‘gnus-group-find-parameter’
     Returns the parameter list of GROUP (*note Group Parameters::).  If
     given a second parameter, returns the value of that parameter for
     GROUP.

‘gnus-group-set-parameter’
     Takes three parameters; GROUP, PARAMETER and VALUE.

‘gnus-narrow-to-body’
     Narrows the current buffer to the body of the article.

‘gnus-check-backend-function’
     Takes two parameters, FUNCTION and GROUP.  If the back end GROUP
     comes from supports FUNCTION, return non-‘nil’.

          (gnus-check-backend-function "request-scan" "nnml:misc")
          ⇒ t

‘gnus-read-method’
     Prompts the user for a select method.


File: gnus.info,  Node: Back End Interface,  Next: Score File Syntax,  Prev: Gnus Utility Functions,  Up: Gnus Reference Guide

12.6.2 Back End Interface
-------------------------

Gnus doesn’t know anything about NNTP, spools, mail or virtual groups.
It only knows how to talk to “virtual servers”.  A virtual server is a
“back end” and some “back end variables”.  As examples of the first, we
have ‘nntp’, ‘nnspool’ and ‘nnmbox’.  As examples of the latter we have
‘nntp-port-number’ and ‘nnmbox-directory’.

   When Gnus asks for information from a back end—say ‘nntp’—on
something, it will normally include a virtual server name in the
function parameters.  (If not, the back end should use the “current”
virtual server.)  For instance, ‘nntp-request-list’ takes a virtual
server as its only (optional) parameter.  If this virtual server hasn’t
been opened, the function should fail.

   Note that a virtual server name has no relation to some physical
server name.  Take this example:

     (nntp "odd-one"
           (nntp-address "ifi.uio.no")
           (nntp-port-number 4324))

   Here the virtual server name is ‘odd-one’ while the name of the
physical server is ‘ifi.uio.no’.

   The back ends should be able to switch between several virtual
servers.  The standard back ends implement this by keeping an alist of
virtual server environments that they pull down/push up when needed.

   There are two groups of interface functions: “required functions”,
which must be present, and “optional functions”, which Gnus will always
check for presence before attempting to call ’em.

   All these functions are expected to return data in the buffer
‘nntp-server-buffer’ (‘ *nntpd*’), which is somewhat unfortunately
named, but we’ll have to live with it.  When I talk about “resulting
data”, I always refer to the data in that buffer.  When I talk about
“return value”, I talk about the function value returned by the function
call.  Functions that fail should return ‘nil’ as the return value.

   Some back ends could be said to be “server-forming” back ends, and
some might be said not to be.  The latter are back ends that generally
only operate on one group at a time, and have no concept of “server”;
they have a group, and they deliver info on that group and nothing more.

   Gnus identifies each message by way of group name and article number.
A few remarks about these article numbers might be useful.  First of
all, the numbers are positive integers.  Secondly, it is normally not
possible for later articles to “re-use” older article numbers without
confusing Gnus.  That is, if a group has ever contained a message
numbered 42, then no other message may get that number, or Gnus will get
mightily confused.(1)  Third, article numbers must be assigned in order
of arrival in the group; this is not necessarily the same as the date of
the message.

   The previous paragraph already mentions all the “hard” restrictions
that article numbers must fulfill.  But it seems that it might be useful
to assign _consecutive_ article numbers, for Gnus gets quite confused if
there are holes in the article numbering sequence.  However, due to the
“no-reuse” restriction, holes cannot be avoided altogether.  It’s also
useful for the article numbers to start at 1 to avoid running out of
numbers as long as possible.

   Note that by convention, back ends are named ‘nnsomething’, but Gnus
also comes with some ‘nnnotbackends’, such as ‘nnheader.el’, ‘nnmail.el’
and ‘nnoo.el’.

   In the examples and definitions I will refer to the imaginary back
end ‘nnchoke’.

* Menu:

* Required Back End Functions::  Functions that must be implemented.
* Optional Back End Functions::  Functions that need not be implemented.
* Error Messaging::             How to get messages and report errors.
* Writing New Back Ends::       Extending old back ends.
* Hooking New Back Ends Into Gnus::  What has to be done on the Gnus end.
* Mail-like Back Ends::         Some tips on mail back ends.

   ---------- Footnotes ----------

   (1) See the function ‘nnchoke-request-update-info’, *note Optional
Back End Functions::.


File: gnus.info,  Node: Required Back End Functions,  Next: Optional Back End Functions,  Up: Back End Interface

12.6.2.1 Required Back End Functions
....................................

‘(nnchoke-retrieve-headers ARTICLES &optional GROUP SERVER FETCH-OLD)’

     ARTICLES is either a range of article numbers or a list of
     ‘Message-ID’s.  Current back ends do not fully support either—only
     sequences (lists) of article numbers, and most back ends do not
     support retrieval of ‘Message-ID’s.  But they should try for both.

     The result data should either be HEADs or NOV lines, and the result
     value should either be ‘headers’ or ‘nov’ to reflect this.  This
     might later be expanded to ‘various’, which will be a mixture of
     HEADs and NOV lines, but this is currently not supported by Gnus.

     If FETCH-OLD is non-‘nil’ it says to try fetching “extra headers”,
     in some meaning of the word.  This is generally done by fetching
     (at most) FETCH-OLD extra headers less than the smallest article
     number in ‘articles’, and filling the gaps as well.  The presence
     of this parameter can be ignored if the back end finds it
     cumbersome to follow the request.  If this is non-‘nil’ and not a
     number, do maximum fetches.

     Here’s an example HEAD:

          221 1056 Article retrieved.
          Path: ifi.uio.no!sturles
          From: sturles@ifi.uio.no (Sturle Sunde)
          Newsgroups: ifi.discussion
          Subject: Re: Something very droll
          Date: 27 Oct 1994 14:02:57 +0100
          Organization: Dept. of Informatics, University of Oslo, Norway
          Lines: 26
          Message-ID: <38o8e1$a0o@holmenkollen.ifi.uio.no>
          References: <38jdmq$4qu@visbur.ifi.uio.no>
          NNTP-Posting-Host: holmenkollen.ifi.uio.no
          .

     So a ‘headers’ return value would imply that there’s a number of
     these in the data buffer.

     Here’s a BNF definition of such a buffer:

          headers        = *head
          head           = error / valid-head
          error-message  = [ "4" / "5" ] 2number " " <error message> eol
          valid-head     = valid-message *header "." eol
          valid-message  = "221 " <number> " Article retrieved." eol
          header         = <text> eol

     (The version of extended BNF used here is ABNF, the one used in
     Internet RFCs.  See RFC 5234.)

     If the return value is ‘nov’, the data buffer should contain
     “network overview database” lines.  These are basically fields
     separated by tabs.

          nov-buffer = *nov-line
          nov-line   = field 7*8[ <TAB> field ] eol
          field      = <text except TAB>

     For a closer look at what should be in those fields, *note
     Headers::.

‘(nnchoke-open-server SERVER &optional DEFINITIONS)’

     SERVER is here the virtual server name.  DEFINITIONS is a list of
     ‘(VARIABLE VALUE)’ pairs that define this virtual server.

     If the server can’t be opened, no error should be signaled.  The
     back end may then choose to refuse further attempts at connecting
     to this server.  In fact, it should do so.

     If the server is opened already, this function should return a
     non-‘nil’ value.  There should be no data returned.

‘(nnchoke-close-server &optional SERVER)’

     Close connection to SERVER and free all resources connected to it.
     Return ‘nil’ if the server couldn’t be closed for some reason.

     There should be no data returned.

‘(nnchoke-request-close)’

     Close connection to all servers and free all resources that the
     back end have reserved.  All buffers that have been created by that
     back end should be killed.  (Not the ‘nntp-server-buffer’, though.)
     This function is generally only called when Gnus is shutting down.

     There should be no data returned.

‘(nnchoke-server-opened &optional SERVER)’

     If SERVER is the current virtual server, and the connection to the
     physical server is alive, then this function should return a
     non-‘nil’ value.  This function should under no circumstances
     attempt to reconnect to a server we have lost connection to.

     There should be no data returned.

‘(nnchoke-status-message &optional SERVER)’

     This function should return the last error message from SERVER.

     There should be no data returned.

‘(nnchoke-request-article ARTICLE &optional GROUP SERVER TO-BUFFER)’

     The result data from this function should be the article specified
     by ARTICLE.  This might either be a ‘Message-ID’ or a number.  It
     is optional whether to implement retrieval by ‘Message-ID’, but it
     would be nice if that were possible.

     If TO-BUFFER is non-‘nil’, the result data should be returned in
     this buffer instead of the normal data buffer.  This is to make it
     possible to avoid copying large amounts of data from one buffer to
     another, while Gnus mainly requests articles to be inserted
     directly into its article buffer.

     If it is at all possible, this function should return a cons cell
     where the ‘car’ is the group name the article was fetched from, and
     the ‘cdr’ is the article number.  This will enable Gnus to find out
     what the real group and article numbers are when fetching articles
     by ‘Message-ID’.  If this isn’t possible, ‘t’ should be returned on
     successful article retrieval.

‘(nnchoke-request-group GROUP &optional SERVER FAST INFO)’

     Get data on GROUP.  This function also has the side effect of
     making GROUP the current group.

     If FAST, don’t bother to return useful data, just make GROUP the
     current group.

     If INFO, it allows the backend to update the group info structure.

     Here’s an example of some result data and a definition of the same:

          211 56 1000 1059 ifi.discussion

     The first number is the status, which should be 211.  Next is the
     total number of articles in the group, the lowest article number,
     the highest article number, and finally the group name.  Note that
     the total number of articles may be less than one might think while
     just considering the highest and lowest article numbers, but some
     articles may have been canceled.  Gnus just discards the
     total-number, so whether one should take the bother to generate it
     properly (if that is a problem) is left as an exercise to the
     reader.  If the group contains no articles, the lowest article
     number should be reported as 1 and the highest as 0.

          group-status = [ error / info ] eol
          error        = [ "4" / "5" ] 2<number> " " <Error message>
          info         = "211 " 3* [ <number> " " ] <string>

‘(nnchoke-close-group GROUP &optional SERVER)’

     Close GROUP and free any resources connected to it.  This will be a
     no-op on most back ends.

     There should be no data returned.

‘(nnchoke-request-list &optional SERVER)’

     Return a list of all groups available on SERVER.  And that means
     _all_.

     Here’s an example from a server that only carries two groups:

          ifi.test 0000002200 0000002000 y
          ifi.discussion 3324 3300 n

     On each line we have a group name, then the highest article number
     in that group, the lowest article number, and finally a flag.  If
     the group contains no articles, the lowest article number should be
     reported as 1 and the highest as 0.

          active-file = *active-line
          active-line = name " " <number> " " <number> " " flags eol
          name        = <string>
          flags       = "n" / "y" / "m" / "x" / "j" / "=" name

     The flag says whether the group is read-only (‘n’), is moderated
     (‘m’), is dead (‘x’), is aliased to some other group
     (‘=other-group’) or none of the above (‘y’).

‘(nnchoke-request-post &optional SERVER)’

     This function should post the current buffer.  It might return
     whether the posting was successful or not, but that’s not required.
     If, for instance, the posting is done asynchronously, it has
     generally not been completed by the time this function concludes.
     In that case, this function should set up some kind of sentinel to
     beep the user loud and clear if the posting could not be completed.

     There should be no result data from this function.


File: gnus.info,  Node: Optional Back End Functions,  Next: Error Messaging,  Prev: Required Back End Functions,  Up: Back End Interface

12.6.2.2 Optional Back End Functions
....................................

‘(nnchoke-retrieve-groups GROUPS &optional SERVER)’

     GROUPS is a list of groups, and this function should request data
     on all those groups.  How it does it is of no concern to Gnus, but
     it should attempt to do this in a speedy fashion.

     The return value of this function can be either ‘active’ or
     ‘group’, which says what the format of the result data is.  The
     former is in the same format as the data from
     ‘nnchoke-request-list’, while the latter is a buffer full of lines
     in the same format as ‘nnchoke-request-group’ gives.

          group-buffer = *active-line / *group-status

‘(nnchoke-request-update-info GROUP INFO &optional SERVER)’

     A Gnus group info (*note Group Info::) is handed to the back end
     for alterations.  This comes in handy if the back end really
     carries all the information (as is the case with virtual and imap
     groups).  This function should destructively alter the info to suit
     its needs, and should return a non-‘nil’ value (exceptionally,
     ‘nntp-request-update-info’ always returns ‘nil’ not to waste the
     network resources).

     There should be no result data from this function.

‘(nnchoke-request-type GROUP &optional ARTICLE)’

     When the user issues commands for “sending news” (‘F’ in the
     summary buffer, for instance), Gnus has to know whether the article
     the user is following up on is news or mail.  This function should
     return ‘news’ if ARTICLE in GROUP is news, ‘mail’ if it is mail and
     ‘unknown’ if the type can’t be decided.  (The ARTICLE parameter is
     necessary in ‘nnvirtual’ groups which might very well combine mail
     groups and news groups.)  Both GROUP and ARTICLE may be ‘nil’.

     There should be no result data from this function.

‘(nnchoke-request-set-mark GROUP ACTION &optional SERVER)’

     Set/remove/add marks on articles.  Normally Gnus handles the
     article marks (such as read, ticked, expired etc.) internally, and
     store them in ‘~/.newsrc.eld’.  Some back ends (such as IMAP)
     however carry all information about the articles on the server, so
     Gnus need to propagate the mark information to the server.

     ACTION is a list of mark setting requests, having this format:

          (RANGE ACTION MARK)

     RANGE is a range of articles you wish to update marks on.  ACTION
     is ‘add’ or ‘del’, used to add marks or remove marks (preserving
     all marks not mentioned).  MARK is a list of marks; where each mark
     is a symbol.  Currently used marks are ‘read’, ‘tick’, ‘reply’,
     ‘expire’, ‘killed’, ‘dormant’, ‘save’, ‘download’, ‘unsend’, and
     ‘forward’, but your back end should, if possible, not limit itself
     to these.

     Given contradictory actions, the last action in the list should be
     the effective one.  That is, if your action contains a request to
     add the ‘tick’ mark on article 1 and, later in the list, a request
     to remove the mark on the same article, the mark should in fact be
     removed.

     An example action list:

          (((5 12 30) 'del '(tick))
           ((10 . 90) 'add '(read expire))
           ((92 94) 'del '(read)))

     The function should return a range of articles it wasn’t able to
     set the mark on (currently not used for anything).

     There should be no result data from this function.

‘(nnchoke-request-update-mark GROUP ARTICLE MARK)’

     If the user tries to set a mark that the back end doesn’t like,
     this function may change the mark.  Gnus will use whatever this
     function returns as the mark for ARTICLE instead of the original
     MARK.  If the back end doesn’t care, it must return the original
     MARK, and not ‘nil’ or any other type of garbage.

     The only use for this I can see is what ‘nnvirtual’ does with it—if
     a component group is auto-expirable, marking an article as read in
     the virtual group should result in the article being marked as
     expirable.

     There should be no result data from this function.

‘(nnchoke-request-scan &optional GROUP SERVER)’

     This function may be called at any time (by Gnus or anything else)
     to request that the back end check for incoming articles, in one
     way or another.  A mail back end will typically read the spool file
     or query the POP server when this function is invoked.  The GROUP
     doesn’t have to be heeded—if the back end decides that it is too
     much work just scanning for a single group, it may do a total scan
     of all groups.  It would be nice, however, to keep things local if
     that’s practical.

     There should be no result data from this function.

‘(nnchoke-request-group-description GROUP &optional SERVER)’

     The result data from this function should be a description of
     GROUP.

          description-line = name <TAB> description eol
          name             = <string>
          description      = <text>

‘(nnchoke-request-list-newsgroups &optional SERVER)’

     The result data from this function should be the description of all
     groups available on the server.

          description-buffer = *description-line

‘(nnchoke-request-newgroups DATE &optional SERVER)’

     The result data from this function should be all groups that were
     created after ‘date’, which is in normal human-readable date format
     (i.e., the date format used in mail and news headers, and returned
     by the function ‘message-make-date’ by default).  The data should
     be in the active buffer format.

     It is okay for this function to return “too many” groups; some back
     ends might find it cheaper to return the full list of groups,
     rather than just the new groups.  But don’t do this for back ends
     with many groups.  Normally, if the user creates the groups
     herself, there won’t be too many groups, so ‘nnml’ and the like are
     probably safe.  But for back ends like ‘nntp’, where the groups
     have been created by the server, it is quite likely that there can
     be many groups.

‘(nnchoke-request-create-group GROUP &optional SERVER)’

     This function should create an empty group with name GROUP.

     There should be no return data.

‘(nnchoke-request-expire-articles ARTICLES &optional GROUP SERVER FORCE)’

     This function should run the expiry process on all articles in the
     ARTICLES range (which is currently a simple list of article
     numbers.)  It is left up to the back end to decide how old articles
     should be before they are removed by this function.  If FORCE is
     non-‘nil’, all ARTICLES should be deleted, no matter how new they
     are.

     This function should return a list of articles that it did not/was
     not able to delete.

     There should be no result data returned.

‘(nnchoke-request-move-article ARTICLE GROUP SERVER ACCEPT-FORM &optional LAST)’

     This function should move ARTICLE (which is a number) from GROUP by
     calling ACCEPT-FORM.

     This function should ready the article in question for moving by
     removing any header lines it has added to the article, and
     generally should “tidy up” the article.  Then it should ‘eval’
     ACCEPT-FORM in the buffer where the “tidy” article is.  This will
     do the actual copying.  If this ‘eval’ returns a non-‘nil’ value,
     the article should be removed.

     If LAST is ‘nil’, that means that there is a high likelihood that
     there will be more requests issued shortly, so that allows some
     optimizations.

     The function should return a cons where the ‘car’ is the group name
     and the ‘cdr’ is the article number that the article was entered
     as.

     There should be no data returned.

‘(nnchoke-request-accept-article GROUP &optional SERVER LAST)’

     This function takes the current buffer and inserts it into GROUP.
     If LAST in ‘nil’, that means that there will be more calls to this
     function in short order.

     The function should return a cons where the ‘car’ is the group name
     and the ‘cdr’ is the article number that the article was entered
     as.

     The group should exist before the back end is asked to accept the
     article for that group.

     There should be no data returned.

‘(nnchoke-request-replace-article ARTICLE GROUP BUFFER)’

     This function should remove ARTICLE (which is a number) from GROUP
     and insert BUFFER there instead.

     There should be no data returned.

‘(nnchoke-request-delete-group GROUP FORCE &optional SERVER)’

     This function should delete GROUP.  If FORCE, it should really
     delete all the articles in the group, and then delete the group
     itself.  (If there is such a thing as “the group itself”.)

     There should be no data returned.

‘(nnchoke-request-rename-group GROUP NEW-NAME &optional SERVER)’

     This function should rename GROUP into NEW-NAME.  All articles in
     GROUP should move to NEW-NAME.

     There should be no data returned.


File: gnus.info,  Node: Error Messaging,  Next: Writing New Back Ends,  Prev: Optional Back End Functions,  Up: Back End Interface

12.6.2.3 Error Messaging
........................

The back ends should use the function ‘nnheader-report’ to report error
conditions—they should not raise errors when they aren’t able to perform
a request.  The first argument to this function is the back end symbol,
and the rest are interpreted as arguments to ‘format’ if there are
multiple of them, or just a string if there is one of them.  This
function must always returns ‘nil’.

     (nnheader-report 'nnchoke "You did something totally bogus")

     (nnheader-report 'nnchoke "Could not request group %s" group)

   Gnus, in turn, will call ‘nnheader-get-report’ when it gets a ‘nil’
back from a server, and this function returns the most recently reported
message for the back end in question.  This function takes one
argument—the server symbol.

   Internally, these functions access BACK-END‘-status-string’, so the
‘nnchoke’ back end will have its error message stored in
‘nnchoke-status-string’.


File: gnus.info,  Node: Writing New Back Ends,  Next: Hooking New Back Ends Into Gnus,  Prev: Error Messaging,  Up: Back End Interface

12.6.2.4 Writing New Back Ends
..............................

Many back ends are quite similar.  ‘nnml’ is just like ‘nnspool’, but it
allows you to edit the articles on the server.  ‘nnmh’ is just like
‘nnml’, but it doesn’t use an active file, and it doesn’t maintain
overview databases.  ‘nndir’ is just like ‘nnml’, but it has no concept
of “groups”, and it doesn’t allow editing articles.

   It would make sense if it were possible to “inherit” functions from
back ends when writing new back ends.  And, indeed, you can do that if
you want to.  (You don’t have to if you don’t want to, of course.)

   All the back ends declare their public variables and functions by
using a package called ‘nnoo’.

   To inherit functions from other back ends (and allow other back ends
to inherit functions from the current back end), you should use the
following macros:

‘nnoo-declare’
     This macro declares the first parameter to be a child of the
     subsequent parameters.  For instance:

          (nnoo-declare nndir
            nnml nnmh)

     ‘nndir’ has declared here that it intends to inherit functions from
     both ‘nnml’ and ‘nnmh’.

‘defvoo’
     This macro is equivalent to ‘defvar’, but registers the variable as
     a public server variable.  Most state-oriented variables should be
     declared with ‘defvoo’ instead of ‘defvar’.

     In addition to the normal ‘defvar’ parameters, it takes a list of
     variables in the parent back ends to map the variable to when
     executing a function in those back ends.

          (defvoo nndir-directory nil
            "Where nndir will look for groups."
            nnml-current-directory nnmh-current-directory)

     This means that ‘nnml-current-directory’ will be set to
     ‘nndir-directory’ when an ‘nnml’ function is called on behalf of
     ‘nndir’.  (The same with ‘nnmh’.)

‘nnoo-define-basics’
     This macro defines some common functions that almost all back ends
     should have.

          (nnoo-define-basics nndir)

‘deffoo’
     This macro is just like ‘defun’ and takes the same parameters.  In
     addition to doing the normal ‘defun’ things, it registers the
     function as being public so that other back ends can inherit it.

‘nnoo-map-functions’
     This macro allows mapping of functions from the current back end to
     functions from the parent back ends.

          (nnoo-map-functions nndir
            (nnml-retrieve-headers 0 nndir-current-group 0 0)
            (nnmh-request-article 0 nndir-current-group 0 0))

     This means that when ‘nndir-retrieve-headers’ is called, the first,
     third, and fourth parameters will be passed on to
     ‘nnml-retrieve-headers’, while the second parameter is set to the
     value of ‘nndir-current-group’.

‘nnoo-import’
     This macro allows importing functions from back ends.  It should be
     the last thing in the source file, since it will only define
     functions that haven’t already been defined.

          (nnoo-import nndir
            (nnmh
             nnmh-request-list
             nnmh-request-newgroups)
            (nnml))

     This means that calls to ‘nndir-request-list’ should just be passed
     on to ‘nnmh-request-list’, while all public functions from ‘nnml’
     that haven’t been defined in ‘nndir’ yet should be defined now.

   Below is a slightly shortened version of the ‘nndir’ back end.

     ;;; nndir.el — single directory newsgroup access for Gnus
     ;; Copyright (C) 1995,1996 Free Software Foundation, Inc.

     ;;; Code:

     (require 'nnheader)
     (require 'nnmh)
     (require 'nnml)
     (require 'nnoo)
     (eval-when-compile (require 'cl))

     (nnoo-declare nndir
       nnml nnmh)

     (defvoo nndir-directory nil
       "Where nndir will look for groups."
       nnml-current-directory nnmh-current-directory)

     (defvoo nndir-nov-is-evil nil
       "Non-nil means that nndir will never retrieve NOV headers."
       nnml-nov-is-evil)

     (defvoo nndir-current-group ""
       nil
       nnml-current-group nnmh-current-group)
     (defvoo nndir-top-directory nil nil nnml-directory nnmh-directory)
     (defvoo nndir-get-new-mail nil nil nnml-get-new-mail nnmh-get-new-mail)

     (defvoo nndir-status-string "" nil nnmh-status-string)

     ;;; Interface functions.

     (nnoo-define-basics nndir)

     (deffoo nndir-open-server (server &optional defs)
       (setq nndir-directory
             (or (cadr (assq 'nndir-directory defs))
                 server))
       (unless (assq 'nndir-directory defs)
         (push `(nndir-directory ,server) defs))
       (push `(nndir-current-group
               ,(file-name-nondirectory
                 (directory-file-name nndir-directory)))
             defs)
       (push `(nndir-top-directory
               ,(file-name-directory (directory-file-name nndir-directory)))
             defs)
       (nnoo-change-server 'nndir server defs))

     (nnoo-map-functions nndir
       (nnml-retrieve-headers 0 nndir-current-group 0 0)
       (nnmh-request-article 0 nndir-current-group 0 0)
       (nnmh-request-group nndir-current-group 0 0)
       (nnmh-close-group nndir-current-group 0))

     (nnoo-import nndir
       (nnmh
        nnmh-status-message
        nnmh-request-list
        nnmh-request-newgroups))

     (provide 'nndir)


File: gnus.info,  Node: Hooking New Back Ends Into Gnus,  Next: Mail-like Back Ends,  Prev: Writing New Back Ends,  Up: Back End Interface

12.6.2.5 Hooking New Back Ends Into Gnus
........................................

Having Gnus start using your new back end is rather easy—you just
declare it with the ‘gnus-declare-backend’ functions.  This will enter
the back end into the ‘gnus-valid-select-methods’ variable.

   ‘gnus-declare-backend’ takes two parameters—the back end name and an
arbitrary number of “abilities”.

   Here’s an example:

     (gnus-declare-backend "nnchoke" 'mail 'respool 'address)

   The above line would then go in the ‘nnchoke.el’ file.

   The abilities can be:

‘mail’
     This is a mailish back end—followups should (probably) go via mail.
‘post’
     This is a newsish back end—followups should (probably) go via news.
‘post-mail’
     This back end supports both mail and news.
‘none’
     This is neither a post nor mail back end—it’s something completely
     different.
‘respool’
     It supports respooling—or rather, it is able to modify its source
     articles and groups.
‘address’
     The name of the server should be in the virtual server name.  This
     is true for almost all back ends.
‘prompt-address’
     The user should be prompted for an address when doing commands like
     ‘B’ in the group buffer.  This is true for back ends like ‘nntp’,
     but not ‘nnmbox’, for instance.


File: gnus.info,  Node: Mail-like Back Ends,  Prev: Hooking New Back Ends Into Gnus,  Up: Back End Interface

12.6.2.6 Mail-like Back Ends
............................

One of the things that separate the mail back ends from the rest of the
back ends is the heavy dependence by most of the mail back ends on
common functions in ‘nnmail.el’.  For instance, here’s the definition of
‘nnml-request-scan’:

     (deffoo nnml-request-scan (&optional group server)
       (setq nnml-article-file-alist nil)
       (nnmail-get-new-mail 'nnml 'nnml-save-nov nnml-directory group))

   It simply calls ‘nnmail-get-new-mail’ with a few parameters, and
‘nnmail’ takes care of all the moving and splitting of the mail.

   This function takes four parameters.

METHOD
     This should be a symbol to designate which back end is responsible
     for the call.

EXIT-FUNCTION
     This function should be called after the splitting has been
     performed.

TEMP-DIRECTORY
     Where the temporary files should be stored.

GROUP
     This optional argument should be a group name if the splitting is
     to be performed for one group only.

   ‘nnmail-get-new-mail’ will call BACK-END‘-save-mail’ to save each
article.  BACK-END‘-active-number’ will be called to find the article
number assigned to this article.

   The function also uses the following variables:
BACK-END‘-get-new-mail’ (to see whether to get new mail for this back
end); and BACK-END‘-group-alist’ and BACK-END‘-active-file’ to generate
the new active file.  BACK-END‘-group-alist’ should be a group-active
alist, like this:

     (("a-group" (1 . 10))
      ("some-group" (34 . 39)))


File: gnus.info,  Node: Score File Syntax,  Next: Headers,  Prev: Back End Interface,  Up: Gnus Reference Guide

12.6.3 Score File Syntax
------------------------

Score files are meant to be easily parsable, but yet extremely
malleable.  It was decided that something that had the same read syntax
as an Emacs Lisp list would fit that spec.

   Here’s a typical score file:

     (("summary"
       ("Windows 95" -10000 nil s)
       ("Gnus"))
      ("from"
       ("Lars" -1000))
      (mark -100))

   BNF definition of a score file:

     score-file      = "" / "(" *element ")"
     element         = rule / atom
     rule            = string-rule / number-rule / date-rule
     string-rule     = "(" quote string-header quote space *string-match ")"
     number-rule     = "(" quote number-header quote space *number-match ")"
     date-rule       = "(" quote date-header quote space *date-match ")"
     quote           = <ascii 34>
     string-header   = "subject" / "from" / "references" / "message-id" /
                       "xref" / "body" / "head" / "all" / "followup"
     number-header   = "lines" / "chars"
     date-header     = "date"
     string-match    = "(" quote <string> quote [ "" / [ space score [ "" /
                       space date [ "" / [ space string-match-t ] ] ] ] ] ")"
     score           = "nil" / <integer>
     date            = "nil" / <natural number>
     string-match-t  = "nil" / "s" / "substring" / "S" / "Substring" /
                       "r" / "regex" / "R" / "Regex" /
                       "e" / "exact" / "E" / "Exact" /
                       "f" / "fuzzy" / "F" / "Fuzzy"
     number-match    = "(" <integer> [ "" / [ space score [ "" /
                       space date [ "" / [ space number-match-t ] ] ] ] ] ")"
     number-match-t  = "nil" / "=" / "<" / ">" / ">=" / "<="
     date-match      = "(" quote <string> quote [ "" / [ space score [ "" /
                       space date [ "" / [ space date-match-t ] ] ] ] ")"
     date-match-t    = "nil" / "at" / "before" / "after"
     atom            = "(" [ required-atom / optional-atom ] ")"
     required-atom   = mark / expunge / mark-and-expunge / files /
                       exclude-files / read-only / touched
     optional-atom   = adapt / local / eval
     mark            = "mark" space nil-or-number
     nil-or-number   = "nil" / <integer>
     expunge         = "expunge" space nil-or-number
     mark-and-expunge = "mark-and-expunge" space nil-or-number
     files           = "files" *[ space <string> ]
     exclude-files   = "exclude-files" *[ space <string> ]
     read-only       = "read-only" [ space "nil" / space "t" ]
     adapt        = "adapt" [ space "ignore" / space "t" / space adapt-rule ]
     adapt-rule      = "(" *[ <string> *[ "(" <string> <integer> ")" ] ")"
     local           = "local" *[ space "(" <string> space <form> ")" ]
     eval            = "eval" space <form>
     space           = *[ " " / <TAB> / <NEWLINE> ]

   Any unrecognized elements in a score file should be ignored, but not
discarded.

   As you can see, white space is needed, but the type and amount of
white space is irrelevant.  This means that formatting of the score file
is left up to the programmer—if it’s simpler to just spew it all out on
one looong line, then that’s ok.

   The meaning of the various atoms are explained elsewhere in this
manual (*note Score File Format::).


File: gnus.info,  Node: Headers,  Next: Ranges,  Prev: Score File Syntax,  Up: Gnus Reference Guide

12.6.4 Headers
--------------

Internally Gnus uses a format for storing article headers that
corresponds to the NOV format in a mysterious fashion.  One could almost
suspect that the author looked at the NOV specification and just
shamelessly _stole_ the entire thing, and one would be right.

   “Header” is a severely overloaded term.  “Header” is used in RFC 5536
to talk about lines in the head of an article (e.g., ‘From’).  It is
used by many people as a synonym for “head”—“the header and the body”.
(That should be avoided, in my opinion.)  And Gnus uses a format
internally that it calls “header”, which is what I’m talking about here.
This is a 9-element vector, basically, with each header (ouch) having
one slot.

   These slots are, in order: ‘number’, ‘subject’, ‘from’, ‘date’, ‘id’,
‘references’, ‘chars’, ‘lines’, ‘xref’, and ‘extra’.  There are macros
for accessing and setting these slots—they all have predictable names
beginning with ‘mail-header-’ and ‘mail-header-set-’, respectively.

   All these slots contain strings, except the ‘extra’ slot, which
contains an alist of header/value pairs (*note To From Newsgroups::).


File: gnus.info,  Node: Ranges,  Next: Group Info,  Prev: Headers,  Up: Gnus Reference Guide

12.6.5 Ranges
-------------

GNUS introduced a concept that I found so useful that I’ve started using
it a lot and have elaborated on it greatly.

   The question is simple: If you have a large amount of objects that
are identified by numbers (say, articles, to take a _wild_ example) that
you want to qualify as being “included”, a normal sequence isn’t very
useful.  (A 200,000 length sequence is a bit long-winded.)

   The solution is as simple as the question: You just collapse the
sequence.

     (1 2 3 4 5 6 10 11 12)

   is transformed into

     ((1 . 6) (10 . 12))

   To avoid having those nasty ‘(13 . 13)’ elements to denote a lonesome
object, a ‘13’ is a valid element:

     ((1 . 6) 7 (10 . 12))

   This means that comparing two ranges to find out whether they are
equal is slightly tricky:

     ((1 . 5) 7 8 (10 . 12))

   and

     ((1 . 5) (7 . 8) (10 . 12))

   are equal.  In fact, any non-descending list is a range:

     (1 2 3 4 5)

   is a perfectly valid range, although a pretty long-winded one.  This
is also valid:

     (1 . 5)

   and is equal to the previous range.

   Here’s a BNF definition of ranges.  Of course, one must remember the
semantic requirement that the numbers are non-descending.  (Any number
of repetition of the same number is allowed, but apt to disappear in
range handling.)

     range           = simple-range / normal-range
     simple-range    = "(" number " . " number ")"
     normal-range    = "(" start-contents ")"
     contents        = "" / simple-range *[ " " contents ] /
                       number *[ " " contents ]

   Gnus currently uses ranges to keep track of read articles and article
marks.  I plan on implementing a number of range operators in C if The
Powers That Be are willing to let me.  (I haven’t asked yet, because I
need to do some more thinking on what operators I need to make life
totally range-based without ever having to convert back to normal
sequences.)


File: gnus.info,  Node: Group Info,  Next: Extended Interactive,  Prev: Ranges,  Up: Gnus Reference Guide

12.6.6 Group Info
-----------------

Gnus stores all permanent info on groups in a “group info” list.  This
list is from three to six elements (or more) long and exhaustively
describes the group.

   Here are two example group infos; one is a very simple group while
the second is a more complex one:

     ("no.group" 5 ((1 . 54324)))

     ("nnml:my.mail" 3 ((1 . 5) 9 (20 . 55))
                     ((tick (15 . 19)) (replied 3 6 (19 . 3)))
                     (nnml "")
                     ((auto-expire . t) (to-address . "ding@gnus.org")))

   The first element is the “group name”—as Gnus knows the group,
anyway.  The second element is the “subscription level”, which normally
is a small integer.  (It can also be the “rank”, which is a cons cell
where the ‘car’ is the level and the ‘cdr’ is the score.)  The third
element is a list of ranges of read articles.  The fourth element is a
list of lists of article marks of various kinds.  The fifth element is
the select method (or virtual server, if you like).  The sixth element
is a list of “group parameters”, which is what this section is about.

   Any of the last three elements may be missing if they are not
required.  In fact, the vast majority of groups will normally only have
the first three elements, which saves quite a lot of cons cells.

   Here’s a BNF definition of the group info format:

     info          = "(" group space ralevel space read
                     [ "" / [ space marks-list [ "" / [ space method [ "" /
                     space parameters ] ] ] ] ] ")"
     group         = quote <string> quote
     ralevel       = rank / level
     level         = <integer in the range of 1 to inf>
     rank          = "(" level "." score ")"
     score         = <integer in the range of 1 to inf>
     read          = range
     marks-lists   = nil / "(" *marks ")"
     marks         = "(" <string> range ")"
     method        = "(" <string> *elisp-forms ")"
     parameters    = "(" *elisp-forms ")"

   Actually that ‘marks’ rule is a fib.  A ‘marks’ is a ‘<string>’
consed on to a ‘range’, but that’s a bitch to say in pseudo-BNF.

   If you have a Gnus info and want to access the elements, Gnus offers
a series of macros for getting/setting these elements.

‘gnus-info-group’
‘gnus-info-set-group’
     Get/set the group name.

‘gnus-info-rank’
‘gnus-info-set-rank’
     Get/set the group rank (*note Group Score::).

‘gnus-info-level’
‘gnus-info-set-level’
     Get/set the group level.

‘gnus-info-score’
‘gnus-info-set-score’
     Get/set the group score (*note Group Score::).

‘gnus-info-read’
‘gnus-info-set-read’
     Get/set the ranges of read articles.

‘gnus-info-marks’
‘gnus-info-set-marks’
     Get/set the lists of ranges of marked articles.

‘gnus-info-method’
‘gnus-info-set-method’
     Get/set the group select method.

‘gnus-info-params’
‘gnus-info-set-params’
     Get/set the group parameters.

   All the getter functions take one parameter—the info list.  The
setter functions take two parameters—the info list and the new value.

   The last three elements in the group info aren’t mandatory, so it may
be necessary to extend the group info before setting the element.  If
this is necessary, you can just pass on a non-‘nil’ third parameter to
the three final setter functions to have this happen automatically.


File: gnus.info,  Node: Extended Interactive,  Next: Various File Formats,  Prev: Group Info,  Up: Gnus Reference Guide

12.6.7 Extended Interactive
---------------------------

Gnus extends the standard Emacs ‘interactive’ specification slightly to
allow easy use of the symbolic prefix (*note Symbolic Prefixes::).
Here’s an example of how this is used:

     (defun gnus-summary-increase-score (&optional score symp)
       (interactive (gnus-interactive "P\ny"))
       ...
       )

   The best thing to do would have been to implement ‘gnus-interactive’
as a macro which would have returned an ‘interactive’ form, but this
isn’t possible since Emacs checks whether a function is interactive or
not by simply doing an ‘assq’ on the lambda form.  So, instead we have
‘gnus-interactive’ function that takes a string and returns values that
are usable to ‘interactive’.

   This function accepts (almost) all normal ‘interactive’ specs, but
adds a few more.

‘y’
     The current symbolic prefix—the ‘gnus-current-prefix-symbol’
     variable.

‘Y’
     A list of the current symbolic prefixes—the
     ‘gnus-current-prefix-symbol’ variable.

‘A’
     The current article number—the ‘gnus-summary-article-number’
     function.

‘H’
     The current article header—the ‘gnus-summary-article-header’
     function.

‘g’
     The current group name—the ‘gnus-group-group-name’ function.


File: gnus.info,  Node: Various File Formats,  Prev: Extended Interactive,  Up: Gnus Reference Guide

12.6.8 Various File Formats
---------------------------

* Menu:

* Active File Format::          Information on articles and groups available.
* Newsgroups File Format::      Group descriptions.


File: gnus.info,  Node: Active File Format,  Next: Newsgroups File Format,  Up: Various File Formats

12.6.8.1 Active File Format
...........................

The active file lists all groups available on the server in question.
It also lists the highest and lowest current article numbers in each
group.

   Here’s an excerpt from a typical active file:

     soc.motss 296030 293865 y
     alt.binaries.pictures.fractals 3922 3913 n
     comp.sources.unix 1605 1593 m
     comp.binaries.ibm.pc 5097 5089 y
     no.general 1000 900 y

   Here’s a pseudo-BNF definition of this file:

     active      = *group-line
     group-line  = group spc high-number spc low-number spc flag <NEWLINE>
     group       = <non-white-space string>
     spc         = " "
     high-number = <non-negative integer>
     low-number  = <positive integer>
     flag        = "y" / "n" / "m" / "j" / "x" / "=" group

   For a full description of this file, see the manual pages for ‘innd’,
in particular ‘active(5)’.


File: gnus.info,  Node: Newsgroups File Format,  Prev: Active File Format,  Up: Various File Formats

12.6.8.2 Newsgroups File Format
...............................

The newsgroups file lists groups along with their descriptions.  Not all
groups on the server have to be listed, and not all groups in the file
have to exist on the server.  The file is meant purely as information to
the user.

   The format is quite simple; a group name, a tab, and the description.
Here’s the definition:

     newsgroups    = *line
     line          = group tab description <NEWLINE>
     group         = <non-white-space string>
     tab           = <TAB>
     description   = <string>


File: gnus.info,  Node: Emacs for Heathens,  Next: Frequently Asked Questions,  Prev: Gnus Reference Guide,  Up: Appendices

# /. 12.7 Emacs for Heathens
===========================

Believe it or not, but some people who use Gnus haven’t really used
Emacs much before they embarked on their journey on the Gnus Love Boat.
If you are one of those unfortunates to whom “‘C-M-a’”, “kill the
region”, and “set ‘gnus-flargblossen’ to an alist where the key is a
regexp that is used for matching on the group name” are magical phrases
with little or no meaning, then this appendix is for you.  If you are
already familiar with Emacs, just ignore this and go fondle your cat
instead.

* Menu:

* Keystrokes::                  Entering text and executing commands.
* Emacs Lisp::                  The built-in Emacs programming language.


File: gnus.info,  Node: Keystrokes,  Next: Emacs Lisp,  Up: Emacs for Heathens

12.7.1 Keystrokes
-----------------

   • Q: What is an experienced Emacs user?

   • A: A person who wishes that the terminal had pedals.

   Yes, when you use Emacs, you are apt to use the control key, the
shift key and the meta key a lot.  This is very annoying to some people
(notably ‘vi’le users), and the rest of us just love the hell out of it.
Just give up and submit.  Emacs really does stand for
“Escape-Meta-Alt-Control-Shift”, and not “Editing Macros”, as you may
have heard from other disreputable sources (like the Emacs author).

   The shift keys are normally located near your pinky fingers, and are
normally used to get capital letters and stuff.  You probably use it all
the time.  The control key is normally marked “CTRL” or something like
that.  The meta key is, funnily enough, never marked as such on any
keyboard.  The one I’m currently at has a key that’s marked “Alt”, which
is the meta key on this keyboard.  It’s usually located somewhere to the
left hand side of the keyboard, usually on the bottom row.

   Now, us Emacs people don’t say “press the meta-control-m key”,
because that’s just too inconvenient.  We say “press the ‘C-M-m’ key”.
‘M-’ is the prefix that means “meta” and “C-” is the prefix that means
“control”.  So “press ‘C-k’” means “press down the control key, and hold
it down while you press ‘k’”.  “Press ‘C-M-k’” means “press down and
hold down the meta key and the control key and then press ‘k’”.  Simple,
ay?

   This is somewhat complicated by the fact that not all keyboards have
a meta key.  In that case you can use the “escape” key.  Then ‘M-k’
means “press escape, release escape, press ‘k’”.  That’s much more work
than if you have a meta key, so if that’s the case, I respectfully
suggest you get a real keyboard with a meta key.  You can’t live without
it.


File: gnus.info,  Node: Emacs Lisp,  Prev: Keystrokes,  Up: Emacs for Heathens

12.7.2 Emacs Lisp
-----------------

Emacs is the King of Editors because it’s really a Lisp interpreter.
Each and every key you tap runs some Emacs Lisp code snippet, and since
Emacs Lisp is an interpreted language, that means that you can configure
any key to run any arbitrary code.  You just, like, do it.

   Gnus is written in Emacs Lisp, and is run as a bunch of interpreted
functions.  (These are byte-compiled for speed, but it’s still
interpreted.)  If you decide that you don’t like the way Gnus does
certain things, it’s trivial to have it do something a different way.
(Well, at least if you know how to write Lisp code.)  However, that’s
beyond the scope of this manual, so we are simply going to talk about
some common constructs that you normally use in your ‘~/.gnus.el’ file
to customize Gnus.  (You can also use the ‘~/.emacs’ file, but in order
to set things of Gnus up, it is much better to use the ‘~/.gnus.el’
file, *Note Startup Files::.)

   If you want to set the variable ‘gnus-florgbnize’ to four (4), you
write the following:

     (setq gnus-florgbnize 4)

   This function (really “special form”) ‘setq’ is the one that can set
a variable to some value.  This is really all you need to know.  Now you
can go and fill your ‘~/.gnus.el’ file with lots of these to change how
Gnus works.

   If you have put that thing in your ‘~/.gnus.el’ file, it will be read
and ‘eval’ed (which is Lisp-ese for “run”) the next time you start Gnus.
If you want to change the variable right away, simply say ‘C-x C-e’
after the closing parenthesis.  That will ‘eval’ the previous “form”,
which is a simple ‘setq’ statement here.

   Go ahead—just try it, if you’re located at your Emacs.  After you
‘C-x C-e’, you will see ‘4’ appear in the echo area, which is the return
value of the form you ‘eval’ed.

   Some pitfalls:

   If the manual says “set ‘gnus-read-active-file’ to ‘some’”, that
means:

     (setq gnus-read-active-file 'some)

   On the other hand, if the manual says “set ‘gnus-nntp-server-file’ to
‘/etc/nntpserver’”, that means:

     (setq gnus-nntp-server-file "/etc/nntpserver")

   So be careful not to mix up strings (the latter) with symbols (the
former).  The manual is unambiguous, but it can be confusing.


File: gnus.info,  Node: Frequently Asked Questions,  Prev: Emacs for Heathens,  Up: Appendices

# /. 12.8 Frequently Asked Questions
===================================

* Menu:

* FAQ - Introduction::                       About Gnus and this FAQ.
* FAQ 1 - Installation FAQ::                 Installation of Gnus.
* FAQ 2 - Startup / Group buffer::           Start up questions and the
                                             first buffer Gnus shows you.
* FAQ 3 - Getting Messages::                 Making Gnus read your mail
                                             and news.
* FAQ 4 - Reading messages::                 How to efficiently read
                                             messages.
* FAQ 5 - Composing messages::               Composing mails or Usenet
                                             postings.
* FAQ 6 - Old messages::                     Importing, archiving,
                                             searching and deleting messages.
* FAQ 7 - Gnus in a dial-up environment::    Reading mail and news while
                                             offline.
* FAQ 8 - Getting help::                     When this FAQ isn’t enough.
* FAQ 9 - Tuning Gnus::                      How to make Gnus faster.
* FAQ - Glossary::                           Terms used in the FAQ
                                             explained.

Abstract
--------

This is the new Gnus Frequently Asked Questions list.

   Please submit features and suggestions to the ding list
<ding@gnus.org>.


File: gnus.info,  Node: FAQ - Introduction,  Next: FAQ 1 - Installation FAQ,  Up: Frequently Asked Questions

12.8.1 Introduction
-------------------

This is the Gnus Frequently Asked Questions list.

   Gnus is a Usenet Newsreader and Electronic Mail User Agent
implemented as a part of Emacs.  It’s been around in some form since the
early 1990s, and has been distributed as a standard part of Emacs for
much of that time.  Gnus 5 is the latest (and greatest) incarnation.
The original version was called GNUS, and was written by Masanobu UMEDA.
When autumn crept up in 1994, Lars Magne Ingebrigtsen grew bored and
decided to rewrite Gnus.

   Its biggest strength is the fact that it is extremely customizable.
It is somewhat intimidating at first glance, but most of the complexity
can be ignored until you’re ready to take advantage of it.  If you
receive a reasonable volume of e-mail (you’re on various mailing lists),
or you would like to read high-volume mailing lists but cannot keep up
with them, or read high volume newsgroups or are just bored, then Gnus
is what you want.

   This FAQ was maintained by Justin Sheehy until March 2002.  He would
like to thank Steve Baur and Per Abrahamsen for doing a wonderful job
with this FAQ before him.  We would like to do the same: thanks, Justin!

   The information contained here was compiled with the assistance of
the Gnus development mailing list, and any errors or misprints are the
Gnus team’s fault, sorry.


File: gnus.info,  Node: FAQ 1 - Installation FAQ,  Next: FAQ 2 - Startup / Group buffer,  Prev: FAQ - Introduction,  Up: Frequently Asked Questions

12.8.2 Installation FAQ
-----------------------

* Menu:

* FAQ 1-1::    Where can I get the latest version of Gnus?
* FAQ 1-2::    I sometimes read references to No Gnus and Oort Gnus,
               what are those?


File: gnus.info,  Node: FAQ 1-1,  Next: FAQ 1-2,  Up: FAQ 1 - Installation FAQ

Question 1.1
............

What is the latest version of Gnus and where can I find it?

Answer
......

The latest version of Gnus is bundled with Emacs.


File: gnus.info,  Node: FAQ 1-2,  Prev: FAQ 1-1,  Up: FAQ 1 - Installation FAQ

Question 1.2
............

I sometimes read references to No Gnus and Oort Gnus, what are those?

Answer
......

Oort Gnus was the name of the development version of Gnus, which became
Gnus 5.10 in autumn 2003.  No Gnus was the name of the development
version that became Gnus 5.12.


File: gnus.info,  Node: FAQ 2 - Startup / Group buffer,  Next: FAQ 3 - Getting Messages,  Prev: FAQ 1 - Installation FAQ,  Up: Frequently Asked Questions

12.8.3 Startup / Group buffer
-----------------------------

* Menu:

* FAQ 2-1::    Every time I start Gnus I get a message "Gnus auto-save
               file exists.  Do you want to read it?", what does this mean and
               how to prevent it?
* FAQ 2-2::    Gnus doesn’t remember which groups I’m subscribed to,
               what’s this?
* FAQ 2-3::    How to change the format of the lines in Group buffer?
* FAQ 2-4::    My group buffer becomes a bit crowded, is there a way to
               sort my groups into categories so I can easier browse through
               them?
* FAQ 2-5::    How to manually sort the groups in Group buffer? How to
               sort the groups in a topic?


File: gnus.info,  Node: FAQ 2-1,  Next: FAQ 2-2,  Up: FAQ 2 - Startup / Group buffer

Question 2.1
............

Every time I start Gnus I get a message "Gnus auto-save file exists.  Do
you want to read it?", what does this mean and how to prevent it?

Answer
......

This message means that the last time you used Gnus, it wasn’t properly
exited and therefore couldn’t write its information to disk (e.g., which
messages you read), you are now asked if you want to restore that
information from the auto-save file.

   To prevent this message make sure you exit Gnus via ‘q’ in group
buffer instead of just killing Emacs.


File: gnus.info,  Node: FAQ 2-2,  Next: FAQ 2-3,  Prev: FAQ 2-1,  Up: FAQ 2 - Startup / Group buffer

Question 2.2
............

Gnus doesn’t remember which groups I’m subscribed to, what’s this?

Answer
......

You get the message described in the q/a pair above while starting Gnus,
right?  It’s another symptom for the same problem, so read the answer
above.


File: gnus.info,  Node: FAQ 2-3,  Next: FAQ 2-4,  Prev: FAQ 2-2,  Up: FAQ 2 - Startup / Group buffer

Question 2.3
............

How to change the format of the lines in Group buffer?

Answer
......

You’ve got to tweak the value of the variable gnus-group-line-format.
See the manual node "Group Line Specification" for information on how to
do this.  An example for this (guess from whose .gnus :-)):

     (setq gnus-group-line-format "%P%M%S[%5t]%5y : %(%g%)\n")


File: gnus.info,  Node: FAQ 2-4,  Next: FAQ 2-5,  Prev: FAQ 2-3,  Up: FAQ 2 - Startup / Group buffer

Question 2.4
............

My group buffer is a bit crowded.  Is there a way to sort groups into
categories so I can browse them more easily?

Answer
......

Gnus offers the topic mode, it allows you to sort your groups in, well,
topics.  For example, all groups dealing with Linux under the topic
‘linux’, all dealing with music under the topic ‘music’ and all dealing
with Scottish music under the topic ‘scottish’ which is a subtopic of
‘music’.

   To enter topic mode, just hit ‘t’ while in Group buffer.  Now you can
use ‘T n’ to create a topic at point and ‘T m’ to move a group to a
specific topic.  For more commands see the manual or the menu.  You
might want to include the ‘%P’ specifier at the beginning of your
GNUS-GROUP-LINE-FORMAT variable to have the groups nicely indented.


File: gnus.info,  Node: FAQ 2-5,  Prev: FAQ 2-4,  Up: FAQ 2 - Startup / Group buffer

Question 2.5
............

How to manually sort the groups in Group buffer?  How to sort the groups
in a topic?

Answer
......

Move point over the group you want to move and hit ‘C-k’, now move point
to the place where you want the group to be and hit ‘C-y’.


File: gnus.info,  Node: FAQ 3 - Getting Messages,  Next: FAQ 4 - Reading messages,  Prev: FAQ 2 - Startup / Group buffer,  Up: Frequently Asked Questions

12.8.4 Getting Messages
-----------------------

* Menu:

* FAQ 3-1::     I just installed Gnus, started it via  ‘M-x gnus’
                but it only says "nntp (news) open error", what to do?
* FAQ 3-2::     I’m working under Windows and have no idea what
                ~/.gnus.el means.
* FAQ 3-3::     My news server requires authentication, how to store
                user name and password on disk?
* FAQ 3-4::     Gnus seems to start up OK, but I can’t find out how to
                subscribe to a group.
* FAQ 3-5::     Gnus doesn’t show all groups / Gnus says I’m not allowed
                to post on this server as well as I am, what’s that?
* FAQ 3-6::     I want Gnus to fetch news from several servers, is this
                possible?
* FAQ 3-7::     And how about local spool files?
* FAQ 3-8::     OK, reading news works now, but I want to be able to
                read my mail with Gnus, too.  How to do it?
* FAQ 3-9::     And what about IMAP?
* FAQ 3-10::    At the office we use one of those MS Exchange servers,
                can I use Gnus to read my mail from it?
* FAQ 3-11::    Can I tell Gnus not to delete the mails on the server it
                retrieves via POP3?


File: gnus.info,  Node: FAQ 3-1,  Next: FAQ 3-2,  Up: FAQ 3 - Getting Messages

Question 3.1
............

I just installed Gnus, started it via ‘M-x gnus’ but it only says "nntp
(news) open error", what to do?

Answer
......

You’ve got to tell Gnus where to fetch the news from.  Read the
documentation for information on how to do this.  As a first start, put
those lines in ‘~/.gnus.el’:

     (setq gnus-select-method '(nntp "news.yourprovider.net"))
     (setq user-mail-address "you@yourprovider.net")
     (setq user-full-name "Your Name")


File: gnus.info,  Node: FAQ 3-2,  Next: FAQ 3-3,  Prev: FAQ 3-1,  Up: FAQ 3 - Getting Messages

Question 3.2
............

I’m working under Windows and have no idea what ‘~/.gnus.el’ means.

Answer
......

The ~/ means the home directory where Gnus and Emacs look for the
configuration files.  However, you don’t really need to know what this
means, it suffices that Emacs knows what it means :-) You can type ‘C-x
C-f ~/.gnus.el <RET>’ (yes, with the forward slash, even on Windows),
and Emacs will open the right file for you.  (It will most likely be
new, and thus empty.)  However, I’d discourage you from doing so, since
the directory Emacs chooses will most certainly not be what you want, so
let’s do it the correct way.  The first thing you’ve got to do is to
create a suitable directory (no blanks in names please), e.g.,
c:\myhome.  Then you must set the environment variable HOME to this
directory.  To do this under Windows 9x or Me include the line

     SET HOME=C:\myhome

   in your autoexec.bat and reboot.  Under NT, 2000 and XP, hit
Winkey+Pause/Break to enter system options (if it doesn’t work, go to
Control Panel -> System -> Advanced).  There you’ll find the possibility
to set environment variables.  Create a new one with name HOME and value
C:\myhome.  Rebooting is not necessary.

   Now to create ‘~/.gnus.el’, say ‘C-x C-f ~/.gnus.el <RET> C-x C-s’.
in Emacs.


File: gnus.info,  Node: FAQ 3-3,  Next: FAQ 3-4,  Prev: FAQ 3-2,  Up: FAQ 3 - Getting Messages

Question 3.3
............

My news server requires authentication, how to store user name and
password on disk?

Answer
......

Create a file ~/.authinfo which includes for each server a line like
this

     machine news.yourprovider.net login YourUserName password YourPassword
.  Make sure that the file isn’t readable to others if you work on an OS
which is capable of doing so.  (Under Unix say
     chmod 600 ~/.authinfo

   in a shell.)


File: gnus.info,  Node: FAQ 3-4,  Next: FAQ 3-5,  Prev: FAQ 3-3,  Up: FAQ 3 - Getting Messages

Question 3.4
............

Gnus seems to start up OK, but I can’t find out how to subscribe to a
group.

Answer
......

If you know the name of the group say ‘U name.of.group <RET>’ in group
buffer (use the tab-completion Luke).  Otherwise hit ‘^’ in group
buffer, this brings you to the server buffer.  Now place point (the
cursor) over the server which carries the group you want, hit ‘RET’,
move point to the group you want to subscribe to and say ‘u’ to
subscribe to it.


File: gnus.info,  Node: FAQ 3-5,  Next: FAQ 3-6,  Prev: FAQ 3-4,  Up: FAQ 3 - Getting Messages

Question 3.5
............

Gnus doesn’t show all groups / Gnus says I’m not allowed to post on this
server as well as I am, what’s that?

Answer
......

Some providers allow restricted anonymous access and full access only
after authorization.  To make Gnus send authinfo to those servers append

     force yes

   to the line for those servers in ~/.authinfo.


File: gnus.info,  Node: FAQ 3-6,  Next: FAQ 3-7,  Prev: FAQ 3-5,  Up: FAQ 3 - Getting Messages

Question 3.6
............

I want Gnus to fetch news from several servers, is this possible?

Answer
......

Of course.  You can specify more sources for articles in the variable
gnus-secondary-select-methods.  Add something like this in ‘~/.gnus.el’:

     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "news.yourSecondProvider.net"))
     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "news.yourThirdProvider.net"))


File: gnus.info,  Node: FAQ 3-7,  Next: FAQ 3-8,  Prev: FAQ 3-6,  Up: FAQ 3 - Getting Messages

Question 3.7
............

And how about local spool files?

Answer
......

No problem, this is just one more select method called nnspool, so you
want this:

     (add-to-list 'gnus-secondary-select-methods '(nnspool ""))

   Or this if you don’t want an NNTP Server as primary news source:

     (setq gnus-select-method '(nnspool ""))

   Gnus will look for the spool file in /usr/spool/news, if you want
something different, change the line above to something like this:

     (add-to-list 'gnus-secondary-select-methods
                  '(nnspool ""
                            (nnspool-directory "/usr/local/myspoolddir")))

   This sets the spool directory for this server only.  You might have
to specify more stuff like the program used to post articles, see the
Gnus manual on how to do this.


File: gnus.info,  Node: FAQ 3-8,  Next: FAQ 3-9,  Prev: FAQ 3-7,  Up: FAQ 3 - Getting Messages

Question 3.8
............

OK, reading news works now, but I want to be able to read my mail with
Gnus, too.  How to do it?

Answer
......

That’s a bit harder since there are many possible sources for mail, many
possible ways for storing mail and many different ways for sending mail.
The most common cases are these: 1: You want to read your mail from a
pop3 server and send them directly to a SMTP Server 2: Some program like
fetchmail retrieves your mail and stores it on disk from where Gnus
shall read it.  Outgoing mail is sent by Sendmail, Postfix or some other
MTA.  Sometimes, you even need a combination of the above cases.

   However, the first thing to do is to tell Gnus in which way it should
store the mail, in Gnus terminology which back end to use.  Gnus
supports many different back ends, the most commonly used one is nnml.
It stores every mail in one file and is therefore quite fast.  However
you might prefer a one file per group approach if your file system has
problems with many small files, the nnfolder back end is then probably
the choice for you.  To use nnml add the following to ‘~/.gnus.el’:

     (add-to-list 'gnus-secondary-select-methods '(nnml ""))

   As you might have guessed, if you want nnfolder, it’s

     (add-to-list 'gnus-secondary-select-methods '(nnfolder ""))

   Now we need to tell Gnus, where to get its mail from.  If it’s a POP3
server, then you need something like this:

     (with-eval-after-load "mail-source"
       (add-to-list 'mail-sources '(pop :server "pop.YourProvider.net"
                                        :user "yourUserName"
                                        :password "yourPassword")))

   Make sure ‘~/.gnus.el’ isn’t readable to others if you store your
password there.  If you want to read your mail from a traditional spool
file on your local machine, it’s

     (with-eval-after-load "mail-source"
       (add-to-list 'mail-sources '(file :path "/path/to/spool/file"))

   If it’s a Maildir, with one file per message as used by postfix,
Qmail and (optionally) fetchmail it’s

     (with-eval-after-load "mail-source"
       (add-to-list 'mail-sources '(maildir :path "/path/to/Maildir/"
                                            :subdirs ("cur" "new")))

   And finally if you want to read your mail from several files in one
directory, for example because procmail already split your mail, it’s

     (with-eval-after-load "mail-source"
       (add-to-list 'mail-sources
                    '(directory :path "/path/to/procmail-dir/"
                                :suffix ".prcml")))

   Where :suffix ".prcml" tells Gnus only to use files with the suffix
.prcml.

   OK, now you only need to tell Gnus how to send mail.  If you want to
send mail via sendmail (or whichever MTA is playing the role of sendmail
on your system), you don’t need to do anything.  However, if you want to
send your mail to an SMTP Server you need the following in your
‘~/.gnus.el’

     (setq send-mail-function 'smtpmail-send-it)
     (setq message-send-mail-function 'smtpmail-send-it)
     (setq smtpmail-default-smtp-server "smtp.yourProvider.net")


File: gnus.info,  Node: FAQ 3-9,  Next: FAQ 3-10,  Prev: FAQ 3-8,  Up: FAQ 3 - Getting Messages

Question 3.9
............

And what about IMAP?

Answer
......

There are two ways of using IMAP with Gnus.  The first one is to use
IMAP like POP3, that means Gnus fetches the mail from the IMAP server
and stores it on disk.  If you want to do this (you don’t really want to
do this) add the following to ‘~/.gnus.el’

     (add-to-list 'mail-sources '(imap :server "mail.mycorp.com"
                                       :user "username"
                                       :pass "password"
                                       :stream network
                                       :authentication login
                                       :mailbox "INBOX"
                                       :fetchflag "\\Seen"))

   You might have to tweak the values for stream and/or authentication,
see the Gnus manual node "Mail Source Specifiers" for possible values.

   If you want to use IMAP the way it’s intended, you’ve got to follow a
different approach.  You’ve got to add the nnimap back end to your
select method and give the information about the server there.

     (add-to-list 'gnus-secondary-select-methods
                  '(nnimap "Give the baby a name"
                           (nnimap-address "imap.yourProvider.net")
                           (nnimap-port 143)))

   Again, you might have to specify how to authenticate to the server if
Gnus can’t guess the correct way, see the Manual Node "IMAP" for
detailed information.


File: gnus.info,  Node: FAQ 3-10,  Next: FAQ 3-11,  Prev: FAQ 3-9,  Up: FAQ 3 - Getting Messages

Question 3.10
.............

At the office we use one of those MS Exchange servers, can I use Gnus to
read my mail from it?

Answer
......

Offer your administrator a pair of new running shoes for activating IMAP
on the server and follow the instructions above.


File: gnus.info,  Node: FAQ 3-11,  Prev: FAQ 3-10,  Up: FAQ 3 - Getting Messages

Question 3.11
.............

Can I tell Gnus not to delete the mails on the server it retrieves via
POP3?

Answer
......

Yes, if the POP3 server supports the UIDL control (maybe almost servers
do it nowadays).  To do that, add a ‘:leave VALUE’ pair to each POP3
mail source.  *Note Mail Source Specifiers::, for details on VALUE.


File: gnus.info,  Node: FAQ 4 - Reading messages,  Next: FAQ 5 - Composing messages,  Prev: FAQ 3 - Getting Messages,  Up: Frequently Asked Questions

12.8.5 Reading messages
-----------------------

* Menu:

* FAQ 4-1::     When I enter a group, all read messages are gone.  How to
                view them again?
* FAQ 4-2::     How to tell Gnus to show an important message every time
                I enter a group, even when it’s read?
* FAQ 4-3::     How to view the headers of a message?
* FAQ 4-4::     How to view the raw unformatted message?
* FAQ 4-5::     How can I change the headers Gnus displays by default at
                the top of the article buffer?
* FAQ 4-6::     I’d like Gnus NOT to render HTML-mails but show me the
                text part if it’s available.  How to do it?
* FAQ 4-7::     Can I use some other browser than shr to render my
                HTML-mails?
* FAQ 4-8::     Is there anything I can do to make poorly formatted
                mails more readable?
* FAQ 4-9::     Is there a way to automatically ignore posts by specific
                authors or with specific words in the subject? And can I
                highlight more interesting ones in some way?
* FAQ 4-10::    How can I disable threading in some (e.g., mail-) groups,
                or set other variables specific for some groups?
* FAQ 4-11::    Can I highlight messages written by me and follow-ups to
                those?
* FAQ 4-12::    The number of total messages in a group which Gnus
                displays in group buffer is by far to high, especially in mail
                groups.  Is this a bug?
* FAQ 4-13::    I don’t like the layout of summary and article buffer,
                how to change it? Perhaps even a three pane display?
* FAQ 4-14::    I don’t like the way the Summary buffer looks, how to
                tweak it?
* FAQ 4-15::    How to split incoming mails in several groups?
* FAQ 4-16::    How can I ensure more contrast when viewing HTML mail?


File: gnus.info,  Node: FAQ 4-1,  Next: FAQ 4-2,  Up: FAQ 4 - Reading messages

Question 4.1
............

When I enter a group, all read messages are gone.  How to view them
again?

Answer
......

If you enter the group by saying ‘<RET>’ in group buffer with point over
the group, only unread and ticked messages are loaded.  Say ‘C-u <RET>’
instead to load all available messages.  If you want only the 300 newest
say ‘C-u 300 <RET>’

   Loading only unread messages can be annoying if you have threaded
view enabled, say

     (setq gnus-fetch-old-headers 'some)

   in ‘~/.gnus.el’ to load enough old articles to prevent teared
threads, replace ’some with ‘t’ to load all articles (Warning: Both
settings enlarge the amount of data which is fetched when you enter a
group and slow down the process of entering a group).

   You can say ‘/o N’ in the summary buffer to load the last N messages.

   If you don’t want all old messages, but the parent of the message
you’re just reading, you can say ‘^’, if you want to retrieve the whole
thread the message you’re just reading belongs to, ‘A T’ is your friend.


File: gnus.info,  Node: FAQ 4-2,  Next: FAQ 4-3,  Prev: FAQ 4-1,  Up: FAQ 4 - Reading messages

Question 4.2
............

How to tell Gnus to show an important message every time I enter a
group, even when it’s read?

Answer
......

You can tick important messages.  To do this hit ‘u’ while point is in
summary buffer over the message.  When you want to remove the mark, hit
either ‘d’ (this deletes the tick mark and set’s unread mark) or ‘M c’
(which deletes all marks for the message).


File: gnus.info,  Node: FAQ 4-3,  Next: FAQ 4-4,  Prev: FAQ 4-2,  Up: FAQ 4 - Reading messages

Question 4.3
............

How to view the headers of a message?

Answer
......

Say ‘t’ to show all headers, one more ‘t’ hides them again.


File: gnus.info,  Node: FAQ 4-4,  Next: FAQ 4-5,  Prev: FAQ 4-3,  Up: FAQ 4 - Reading messages

Question 4.4
............

How to view the raw unformatted message?

Answer
......

Type ‘C-u g’ to show the raw message ‘g’ returns to normal view.


File: gnus.info,  Node: FAQ 4-5,  Next: FAQ 4-6,  Prev: FAQ 4-4,  Up: FAQ 4 - Reading messages

Question 4.5
............

How can I change the headers Gnus displays by default at the top of the
article buffer?

Answer
......

The variable gnus-visible-headers controls which headers are shown, its
value is a regular expression, header lines which match it are shown.
So if you want author, subject, date, and if the header exists,
Followup-To and MUA / NUA say this in ‘~/.gnus.el’:

     (setq gnus-visible-headers
           '("^From" "^Subject" "^Date" "^Newsgroups" "^Followup-To"
             "^User-Agent" "^X-Newsreader" "^X-Mailer"))


File: gnus.info,  Node: FAQ 4-6,  Next: FAQ 4-7,  Prev: FAQ 4-5,  Up: FAQ 4 - Reading messages

Question 4.6
............

I’d like Gnus NOT to render HTML-mails but show me the text part if it’s
available.  How to do it?

Answer
......

Say

     (with-eval-after-load "mm-decode"
       (add-to-list 'mm-discouraged-alternatives "text/html")
       (add-to-list 'mm-discouraged-alternatives "text/richtext"))

   in ‘~/.gnus.el’.  If you don’t want HTML rendered, even if there’s no
text alternative add

     (setq mm-automatic-display (remove "text/html" mm-automatic-display))

   too.


File: gnus.info,  Node: FAQ 4-7,  Next: FAQ 4-8,  Prev: FAQ 4-6,  Up: FAQ 4 - Reading messages

Question 4.7
............

Can I use some other browser than w3m to render my HTML-mails?

Answer
......

You’ve got the choice between ‘shr’, ‘w3m’, ‘links’, and ‘lynx’.  Which
one is used is specified in the variable ‘mm-text-html-renderer’, so if
you want links to render your mail, say:

     (setq mm-text-html-renderer 'links)


File: gnus.info,  Node: FAQ 4-8,  Next: FAQ 4-9,  Prev: FAQ 4-7,  Up: FAQ 4 - Reading messages

Question 4.8
............

Is there anything I can do to make poorly formatted mails more readable?

Answer
......

Gnus offers you several functions to “wash” incoming mail, you can find
them if you browse through the menu, item Article->Washing.  The most
interesting ones are probably “Wrap long lines” (‘W w’), “Decode ROT13”
(‘W r’) and “Outlook Deuglify” which repairs the dumb quoting used by
many users of Microsoft products (‘W Y f’ gives you full deuglify.  See
‘W Y C-h’ or have a look at the menus for other deuglifications).


File: gnus.info,  Node: FAQ 4-9,  Next: FAQ 4-10,  Prev: FAQ 4-8,  Up: FAQ 4 - Reading messages

Question 4.9
............

Is there a way to automatically ignore posts by specific authors or with
specific words in the subject?  And can I highlight more interesting
ones in some way?

Answer
......

You want Scoring.  Scoring means, that you define rules which assign
each message an integer value.  Depending on the value the message is
highlighted in summary buffer (if it’s high, say +2000) or automatically
marked read (if the value is low, say −800) or some other action
happens.

   There are basically three ways of setting up rules which assign the
scoring-value to messages.  The first and easiest way is to set up rules
based on the article you are just reading.  Say you’re reading a message
by a guy who always writes nonsense and you want to ignore his messages
in the future.  Hit ‘L’, to set up a rule which lowers the score.  Now
Gnus asks you which the criteria for lowering the Score shall be.  Hit
‘?’ twice to see all possibilities, we want ‘a’ which means the author
(the from header).  Now Gnus wants to know which kind of matching we
want.  Hit either ‘e’ for an exact match or ‘s’ for substring-match and
delete afterwards everything but the name to score down all authors with
the given name no matter which email address is used.  Now you need to
tell Gnus when to apply the rule and how long it should last, hit ‘p’ to
apply the rule now and let it last forever.  If you want to raise the
score instead of lowering it say ‘I’ instead of ‘L’.

   You can also set up rules by hand.  To do this say ‘V f’ in summary
buffer.  Then you are asked for the name of the score file, it’s
name.of.group.SCORE for rules valid in only one group or all.Score for
rules valid in all groups.  See the Gnus manual for the exact syntax,
basically it’s one big list whose elements are lists again.  the first
element of those lists is the header to score on, then one more list
with what to match, which score to assign, when to expire the rule and
how to do the matching.  If you find me very interesting, you could add
the following to your all.Score:

     (("references" ("hschmi22.userfqdn.rz-online.de" 500 nil s))
      ("message-id" ("hschmi22.userfqdn.rz-online.de" 999 nil s)))

   This would add 999 to the score of messages written by me and 500 to
the score of messages which are a (possibly indirect) answer to a
message written by me.  Of course nobody with a sane mind would do this
:-)

   The third alternative is adaptive scoring.  This means Gnus watches
you and tries to find out what you find interesting and what annoying
and sets up rules which reflect this.  Adaptive scoring can be a huge
help when reading high traffic groups.  If you want to activate adaptive
scoring say

     (setq gnus-use-adaptive-scoring t)

   in ‘~/.gnus.el’.


File: gnus.info,  Node: FAQ 4-10,  Next: FAQ 4-11,  Prev: FAQ 4-9,  Up: FAQ 4 - Reading messages

Question 4.10
.............

How can I disable threading in some (e.g., mail-) groups, or set other
variables specific for some groups?

Answer
......

While in group buffer move point over the group and hit ‘G c’, this
opens a buffer where you can set options for the group.  At the bottom
of the buffer you’ll find an item that allows you to set variables
locally for the group.  To disable threading enter gnus-show-threads as
name of variable and ‘nil’ as value.  Hit button done at the top of the
buffer when you’re ready.


File: gnus.info,  Node: FAQ 4-11,  Next: FAQ 4-12,  Prev: FAQ 4-10,  Up: FAQ 4 - Reading messages

Question 4.11
.............

Can I highlight messages written by me and follow-ups to those?

Answer
......

Stop those "Can I ..."  questions, the answer is always yes in Gnus
Country :-).  It’s a three step process: First we make faces
(specifications of how summary-line shall look like) for those postings,
then we’ll give them some special score and finally we’ll tell Gnus to
use the new faces.


File: gnus.info,  Node: FAQ 4-12,  Next: FAQ 4-13,  Prev: FAQ 4-11,  Up: FAQ 4 - Reading messages

Question 4.12
.............

The number of total messages in a group which Gnus displays in group
buffer is by far to high, especially in mail groups.  Is this a bug?

Answer
......

No, that’s a matter of design of Gnus, fixing this would mean
reimplementation of major parts of Gnus’ back ends.  Gnus thinks
“highest-article-number − lowest-article-number =
total-number-of-articles”.  This works OK for Usenet groups, but if you
delete and move many messages in mail groups, this fails.  To cure the
symptom, enter the group via ‘C-u <RET>’ (this makes Gnus get all
messages), then hit ‘M P b’ to mark all messages and then say ‘B m
name.of.group’ to move all messages to the group they have been in
before, they get new message numbers in this process and the count is
right again (until you delete and move your mail to other groups again).


File: gnus.info,  Node: FAQ 4-13,  Next: FAQ 4-14,  Prev: FAQ 4-12,  Up: FAQ 4 - Reading messages

Question 4.13
.............

I don’t like the layout of summary and article buffer, how to change it?
Perhaps even a three pane display?

Answer
......

You can control the windows configuration by calling the function
gnus-add-configuration.  The syntax is a bit complicated but explained
very well in the manual node "Window Layout".  Some popular examples:

   Instead 25% summary 75% article buffer 35% summary and 65% article
(the 1.0 for article means "take the remaining space"):

     (gnus-add-configuration
      '(article (vertical 1.0 (summary .35 point) (article 1.0))))

   A three pane layout, Group buffer on the left, summary buffer
top-right, article buffer bottom-right:

     (gnus-add-configuration
      '(article
        (horizontal 1.0
                    (vertical 25
                              (group 1.0))
                    (vertical 1.0
                              (summary 0.25 point)
                              (article 1.0)))))
     (gnus-add-configuration
      '(summary
        (horizontal 1.0
                    (vertical 25
                              (group 1.0))
                    (vertical 1.0
                              (summary 1.0 point)))))


File: gnus.info,  Node: FAQ 4-14,  Next: FAQ 4-15,  Prev: FAQ 4-13,  Up: FAQ 4 - Reading messages

Question 4.14
.............

I don’t like the way the Summary buffer looks, how to tweak it?

Answer
......

You’ve got to play around with the variable gnus-summary-line-format.
Its value is a string of symbols which stand for things like author,
date, subject etc.  A list of the available specifiers can be found in
the manual node “Summary Buffer Lines” and the often forgotten node
“Formatting Variables” and its sub-nodes.  There you’ll find useful
things like positioning the cursor and tabulators which allow you a
summary in table form, but sadly hard tabulators are broken in 5.8.8.

   Gnus offers you some very nice new specifiers, e.g., %B which draws a
thread-tree and %&user-date which gives you a date where the details are
dependent of the articles age.  Here’s an example which uses both:

     (setq gnus-summary-line-format ":%U%R %B %s %-60=|%4L |%-20,20f |%&user-date; \n")

   resulting in:

     :O     Re: [Richard Stallman] rfc2047.el          |  13 |Lars Magne Ingebrigt |Sat 23:06
     :O     Re: Revival of the ding-patches list       |  13 |Lars Magne Ingebrigt |Sat 23:12
     :R  >  Re: Find correct list of articles for a gro|  25 |Lars Magne Ingebrigt |Sat 23:16
     :O  \->  ...                                      |  21 |Kai Grossjohann      | 0:01
     :R  >  Re: Cry for help: deuglify.el - moving stuf|  28 |Lars Magne Ingebrigt |Sat 23:34
     :O  \->  ...                                      | 115 |Raymond Scholz       | 1:24
     :O    \->  ...                                    |  19 |Lars Magne Ingebrigt |15:33
     :O     Slow mailing list                          |  13 |Lars Magne Ingebrigt |Sat 23:49
     :O     Re: '@' mark not documented                |  13 |Lars Magne Ingebrigt |Sat 23:50
     :R  >  Re: Gnus still doesn't count messages prope|  23 |Lars Magne Ingebrigt |Sat 23:57
     :O  \->  ...                                      |  18 |Kai Grossjohann      | 0:35
     :O    \->  ...                                    |  13 |Lars Magne Ingebrigt | 0:56


File: gnus.info,  Node: FAQ 4-15,  Next: FAQ 4-16,  Prev: FAQ 4-14,  Up: FAQ 4 - Reading messages

Question 4.15
.............

How to split incoming mails in several groups?

Answer
......

Gnus offers two possibilities for splitting mail, the easy
nnmail-split-methods and the more powerful Fancy Mail Splitting.  I’ll
only talk about the first one, refer to the manual, node "Fancy Mail
Splitting" for the latter.

   The value of nnmail-split-methods is a list, each element is a list
which stands for a splitting rule.  Each rule has the form "group where
matching articles should go to", "regular expression which has to be
matched", the first rule which matches wins.  The last rule must always
be a general rule (regular expression .*) which denotes where articles
should go which don’t match any other rule.  If the folder doesn’t exist
yet, it will be created as soon as an article lands there.  By default
the mail will be send to all groups whose rules match.  If you don’t
want that (you probably don’t want), say

     (setq nnmail-crosspost nil)

   in ‘~/.gnus.el’.

   An example might be better than thousand words, so here’s my
nnmail-split-methods.  Note that I send duplicates in a special group
and that the default group is spam, since I filter all mails out which
are from some list I’m subscribed to or which are addressed directly to
me before.  Those rules kill about 80% of the Spam which reaches me
(Email addresses are changed to prevent spammers from using them):

     (setq nnmail-split-methods
       '(("duplicates" "^Gnus-Warning:.*duplicate")
         ("Emacs-devel" "^\\(To:\\|Cc:\\).*localpart@gnu.invalid.*")
         ("Gnus-Tut" "^\\(To:\\|Cc:\\).*localpart@socha.invalid.*")
         ("tcsh" "^\\(To:\\|Cc:\\).*localpart@mx.gw.invalid.*")
         ("BAfH" "^\\(To:\\|Cc:\\).*localpart@.*uni-muenchen.invalid.*")
         ("Hamster-src" "^\\(Cc:\\|To:\\).*hamster-sourcen@yahoogroups.\\(de\\|com\\).*")
         ("Tagesschau" "^From: tagesschau <localpart@www.tagesschau.invalid>$")
         ("Replies" "^\\(Cc:\\|To:\\).*localpart@Frank-Schmitt.invalid.*")
         ("EK" "^From:.*\\(localpart@privateprovider.invalid\\|localpart@workplace.invalid\\).*")
         ("Spam" "^Content-Type:.*\\(ks_c_5601-1987\\|EUC-KR\\|big5\\|iso-2022-jp\\).*")
         ("Spam" "^Subject:.*\\(This really work\\|XINGA\\|ADV:\\|XXX\\|adult\\|sex\\).*")
         ("Spam" "^Subject:.*\\(\=\?ks_c_5601-1987\?\\|\=\?euc-kr\?\\|\=\?big5\?\\).*")
         ("Spam" "^X-Mailer:\\(.*BulkMailer.*\\|.*MIME::Lite.*\\|\\)")
         ("Spam" "^X-Mailer:\\(.*CyberCreek Avalanche\\|.*http\:\/\/GetResponse\.com\\)")
         ("Spam" "^From:.*\\(verizon\.net\\|prontomail\.com\\|money\\|ConsumerDirect\\).*")
         ("Spam" "^Delivered-To: GMX delivery to spamtrap@gmx.invalid$")
         ("Spam" "^Received: from link2buy.com")
         ("Spam" "^Cc: .*azzrael@t-online.invalid")
         ("Spam" "^X-Mailer-Version: 1.50 BETA")
         ("Uni" "^\\(Cc:\\|To:\\).*localpart@uni-koblenz.invalid.*")
         ("Inbox" "^\\(Cc:\\|To:\\).*\\(my\ name\\|address@one.invalid\\|address@two.invalid\\)")
         ("Spam" "")))


File: gnus.info,  Node: FAQ 4-16,  Prev: FAQ 4-15,  Up: FAQ 4 - Reading messages

Question 4.16
.............

How can I ensure more contrast when viewing HTML mail?

Answer
......

Gnus’ built-in simple HTML renderer (you use it if the value of
‘mm-text-html-renderer’ is ‘shr’) uses the colors which are declared in
the HTML mail.  However, it adjusts them in order to prevent situations
like dark gray text on black background.  In case the results still have
a too low contrast for you, increase the values of the variables
‘shr-color-visible-distance-min’ and ‘shr-color-visible-luminance-min’.


File: gnus.info,  Node: FAQ 5 - Composing messages,  Next: FAQ 6 - Old messages,  Prev: FAQ 4 - Reading messages,  Up: Frequently Asked Questions

12.8.6 Composing messages
-------------------------

* Menu:

* FAQ 5-1::     What are the basic commands I need to know for sending
                mail and postings?
* FAQ 5-2::     How to enable automatic word-wrap when composing
                messages?
* FAQ 5-3::     How to set stuff like From, Organization, Reply-To,
                signature...?
* FAQ 5-4::     Can I set things like From, Signature etc. group based on
                the group I post too?
* FAQ 5-5::     Is there a spell-checker? Perhaps even on-the-fly
                spell-checking?
* FAQ 5-6::     Can I set the dictionary based on the group I’m posting
                to?
* FAQ 5-7::     Is there some kind of address-book, so I needn’t
                remember all those email addresses?
* FAQ 5-8::     Sometimes I see little images at the top of article
                buffer.  What’s that and how can I send one with my postings,
                too?
* FAQ 5-9::     Sometimes I accidentally hit r instead of f in
                newsgroups.  Can Gnus warn me, when I’m replying by mail in
                newsgroups?
* FAQ 5-10::    How to tell Gnus not to generate a sender header?
* FAQ 5-11::    I want Gnus to locally store copies of my send mail and
                news, how to do it?
* FAQ 5-12::    I want Gnus to kill the buffer after successful sending
                instead of keeping it alive as "Sent mail to...", how to do it?
* FAQ 5-13::    People tell me my Message-IDs are not correct, why
                aren’t they and how to fix it?


File: gnus.info,  Node: FAQ 5-1,  Next: FAQ 5-2,  Up: FAQ 5 - Composing messages

Question 5.1
............

What are the basic commands I need to know for sending mail and
postings?

Answer
......

To start composing a new mail hit ‘m’ either in Group or Summary buffer,
for a posting, it’s either ‘a’ in Group buffer and filling the
Newsgroups header manually or ‘a’ in the Summary buffer of the group
where the posting shall be send to.  Replying by mail is ‘r’ if you
don’t want to cite the author, or import the cited text manually and ‘R’
to cite the text of the original message.  For a follow up to a
newsgroup, it’s ‘f’ and ‘F’ (analogously to ‘r’ and ‘R’).

   Enter new headers above the line saying "–text follows this line–",
enter the text below the line.  When ready hit ‘C-c C-c’, to send the
message, if you want to finish it later hit ‘C-c C-d’ to save it in the
drafts group, where you can start editing it again by saying ‘D e’.


File: gnus.info,  Node: FAQ 5-2,  Next: FAQ 5-3,  Prev: FAQ 5-1,  Up: FAQ 5 - Composing messages

Question 5.2
............

How to enable automatic word-wrap when composing messages?

Answer
......

Starting from No Gnus, automatic word-wrap is already enabled by
default, see the variable message-fill-column.

   For other versions of Gnus, say

     (unless (boundp 'message-fill-column)
       (add-hook 'message-mode-hook
                 (lambda ()
                   (setq fill-column 72)
                   (turn-on-auto-fill))))

   in ‘~/.gnus.el’.

   You can reformat a paragraph by hitting ‘M-q’ (as usual).


File: gnus.info,  Node: FAQ 5-3,  Next: FAQ 5-4,  Prev: FAQ 5-2,  Up: FAQ 5 - Composing messages

Question 5.3
............

How to set stuff like From, Organization, Reply-To, signature...?

Answer
......

There are other ways, but you should use posting styles for this.  (See
below why.)  This example should make the syntax clear:

     (setq gnus-posting-styles
       '((".*"
          (name "Frank Schmitt")
          (address "me@there.invalid")
          (organization "Hamme net, kren mer och nimmi")
          (signature-file "~/.signature")
          ("X-SampleHeader" "foobar")
          (eval (setq some-variable "Foo bar")))))

   The ".*" means that this settings are the default ones (see below),
valid values for the first element of the following lists are signature,
signature-file, organization, address, name or body.  The attribute name
can also be a string.  In that case, this will be used as a header name,
and the value will be inserted in the headers of the article; if the
value is ‘nil’, the header name will be removed.  You can also say (eval
(foo bar)), then the function foo will be evaluated with argument bar
and the result will be thrown away.


File: gnus.info,  Node: FAQ 5-4,  Next: FAQ 5-5,  Prev: FAQ 5-3,  Up: FAQ 5 - Composing messages

Question 5.4
............

Can I set things like From, Signature etc group based on the group I
post too?

Answer
......

That’s the strength of posting styles.  Before, we used ".*" to set the
default for all groups.  You can use a regexp like "^gmane" and the
following settings are only applied to postings you send to the gmane
hierarchy, use ".*binaries" instead and they will be applied to postings
send to groups containing the string binaries in their name etc.

   You can instead of specifying a regexp specify a function which is
evaluated, only if it returns true, the corresponding settings take
effect.  Two interesting candidates for this are message-news-p which
returns t if the current Group is a newsgroup and the corresponding
message-mail-p.

   Note that all forms that match are applied, that means in the example
below, when I post to gmane.mail.spam.spamassassin.general, the settings
under ".*" are applied and the settings under message-news-p and those
under "^gmane" and those under
"^gmane\\.mail\\.spam\\.spamassassin\\.general$".  Because of this put
general settings at the top and specific ones at the bottom.

     (setq gnus-posting-styles
           '((".*" ;;default
              (name "Frank Schmitt")
              (organization "Hamme net, kren mer och nimmi")
              (signature-file "~/.signature"))
             ((message-news-p) ;;Usenet news?
              (address "mySpamTrap@Frank-Schmitt.invalid")
              (reply-to "hereRealRepliesOnlyPlease@Frank-Schmitt.invalid"))
             ((message-mail-p) ;;mail?
              (address "usedForMails@Frank-Schmitt.invalid"))
             ("^gmane" ;;this is mail, too in fact
              (address "usedForMails@Frank-Schmitt.invalid")
              (reply-to nil))
             ("^gmane\\.mail\\.spam\\.spamassassin\\.general$"
              (eval (set (make-local-variable 'message-sendmail-envelope-from)
                         "Azzrael@rz-online.de")))))


File: gnus.info,  Node: FAQ 5-5,  Next: FAQ 5-6,  Prev: FAQ 5-4,  Up: FAQ 5 - Composing messages

Question 5.5
............

Is there a spell-checker?  Perhaps even on-the-fly spell-checking?

Answer
......

You can use ispell.el to spell-check stuff in Emacs, and flyspell.el for
on-the-fly spell-checking.  So the first thing to do is to make sure
that you’ve got either hunspell (https://hunspell.github.io/), ispell
(https://www.cs.hmc.edu/~geoff/ispell.html) or aspell
(http://aspell.net) installed and in your Path.

   Ispell.el assumes you use ispell.  If you use aspell say

     (setq ispell-program-name "aspell")

   in your Emacs configuration file.

   If you want your outgoing messages to be spell-checked, say

     (add-hook 'message-send-hook 'ispell-message)

   In your ‘~/.gnus.el’, if you prefer on-the-fly spell-checking say

     (add-hook 'message-mode-hook (lambda () (flyspell-mode 1)))


File: gnus.info,  Node: FAQ 5-6,  Next: FAQ 5-7,  Prev: FAQ 5-5,  Up: FAQ 5 - Composing messages

Question 5.6
............

Can I set the dictionary based on the group I’m posting to?

Answer
......

Yes, say something like

     (add-hook 'gnus-select-group-hook
               (lambda ()
                 (cond
                  ((string-match
                    "^de\\." (gnus-group-real-name gnus-newsgroup-name))
                   (ispell-change-dictionary "deutsch8"))
                  (t
                   (ispell-change-dictionary "english")))))

   in ‘~/.gnus.el’.  Change "^de\\."  and "deutsch8" to something that
suits your needs.


File: gnus.info,  Node: FAQ 5-7,  Next: FAQ 5-8,  Prev: FAQ 5-6,  Up: FAQ 5 - Composing messages

Question 5.7
............

Is there some kind of address-book, so I needn’t remember all those
email addresses?

Answer
......

There’s a very basic solution for this, mail aliases.  You can store
your mail addresses in a ~/.mailrc file using a simple alias syntax:

     alias al        "Al <al@english-heritage.invalid>"

   Then typing your alias (followed by a space or punctuation character)
on a To: or Cc: line in the message buffer will cause Gnus to insert the
full address for you.  See the node "Mail Aliases" in Message (not Gnus)
manual for details.

   However, what you really want is the Insidious Big Brother Database
bbdb.  Get it from bbdb’s website (https://bbdb.sourceforge.net/).  Now
place the following in ‘~/.gnus.el’, to activate bbdb for Gnus:

     (require 'bbdb)
     (bbdb-initialize 'gnus 'message)

   Now you probably want some general bbdb configuration, place them in
~/.emacs:

     (require 'bbdb)
     ;;If you don't live in Northern America, you should disable the
     ;;syntax check for telephone numbers by saying
     (setq bbdb-north-american-phone-numbers-p nil)
     ;;Tell bbdb about your email address:
     (setq bbdb-user-mail-names
           (regexp-opt '("Your.Email@here.invalid"
                         "Your.other@mail.there.invalid")))
     ;;cycling while completing email addresses
     (setq bbdb-complete-name-allow-cycling t)
     ;;No popup-buffers
     (setq bbdb-use-pop-up nil)

   Now you should be ready to go.  Say ‘M-x bbdb <RET> <RET>’ to open a
bbdb buffer showing all entries.  Say ‘c’ to create a new entry, ‘b’ to
search your BBDB and ‘C-o’ to add a new field to an entry.  If you want
to add a sender to the BBDB you can also just hit ‘:’ on the posting in
the summary buffer and you are done.  When you now compose a new mail,
hit ‘TAB’ to cycle through know recipients.


File: gnus.info,  Node: FAQ 5-8,  Next: FAQ 5-9,  Prev: FAQ 5-7,  Up: FAQ 5 - Composing messages

Question 5.8
............

Sometimes I see little images at the top of article buffer.  What’s that
and how can I send one with my postings, too?

Answer
......

Those images are called X-Faces.  They are 48*48 pixel b/w pictures,
encoded in a header line.  If you want to include one in your posts,
you’ve got to convert some image to a X-Face.  So fire up some image
manipulation program (say Gimp), open the image you want to include, cut
out the relevant part, reduce color depth to 1 bit, resize to 48*48 and
save as bitmap.  Now you should get the compface package from this site
(ftp://ftp.cs.indiana.edu/pub/faces/).  and create the actual X-face by
saying

     cat file.xbm | xbm2ikon | compface > file.face
     cat file.face | sed 's/["\\]/\\&/g' > file.face.quoted

   If you can’t use compface, there’s an online X-face converter at
<https://www.dairiki.org/xface/>.  If you use MS Windows, you could also
use the WinFace program, which used to be available from
‘http://www.xs4all.nl/~walterln/winface/’.  Now you only have to tell
Gnus to include the X-face in your postings by saying

     (setq message-default-headers
           (with-temp-buffer
             (insert "X-Face: ")
             (insert-file-contents "~/.xface")
             (buffer-string)))

   in ‘~/.gnus.el’.  You can add an entry

     (x-face-file "~/.xface")

   to ‘gnus-posting-styles’.


File: gnus.info,  Node: FAQ 5-9,  Next: FAQ 5-10,  Prev: FAQ 5-8,  Up: FAQ 5 - Composing messages

Question 5.9
............

Sometimes I accidentally hit r instead of f in newsgroups.  Can Gnus
warn me, when I’m replying by mail in newsgroups?

Answer
......

Put this in ‘~/.gnus.el’:

     (setq gnus-confirm-mail-reply-to-news t)


File: gnus.info,  Node: FAQ 5-10,  Next: FAQ 5-11,  Prev: FAQ 5-9,  Up: FAQ 5 - Composing messages

Question 5.10
.............

How to tell Gnus not to generate a sender header?

Answer
......

Gnus doesn’t generate a sender header by default.


File: gnus.info,  Node: FAQ 5-11,  Next: FAQ 5-12,  Prev: FAQ 5-10,  Up: FAQ 5 - Composing messages

Question 5.11
.............

I want Gnus to locally store copies of my send mail and news, how to do
it?

Answer
......

You must set the variable gnus-message-archive-group to do this.  You
can set it to a string giving the name of the group where the copies
shall go or like in the example below use a function which is evaluated
and which returns the group to use.

     (setq gnus-message-archive-group
             '((if (message-news-p)
                   "nnml:Send-News"
                 "nnml:Send-Mail")))


File: gnus.info,  Node: FAQ 5-12,  Next: FAQ 5-13,  Prev: FAQ 5-11,  Up: FAQ 5 - Composing messages

Question 5.12
.............

I want Gnus to kill the buffer after successful sending instead of
keeping it alive as "Sent mail to...", how to do it?

Answer
......

Add this to your ~/.gnus:

     (setq message-kill-buffer-on-exit t)


File: gnus.info,  Node: FAQ 5-13,  Prev: FAQ 5-12,  Up: FAQ 5 - Composing messages

Question 5.13
.............

People tell me my Message-IDs are not correct, why aren’t they and how
to fix it?

Answer
......

The message-ID is a unique identifier for messages you send.  To make it
unique, Gnus need to know which machine name to put after the "@".  If
the name of the machine where Gnus is running isn’t suitable (it
probably isn’t at most private machines) you can tell Gnus what to use
by saying:

     (setq message-user-fqdn "yourmachine.yourdomain.tld")

   in ‘~/.gnus.el’.  If you use Gnus 5.9 or earlier, you can use this
instead (works for newer versions as well):

     (with-eval-after-load "message"
       (let ((fqdn "yourmachine.yourdomain.tld"));; <-- Edit this!
         (if (boundp 'message-user-fqdn)
             (setq message-user-fqdn fqdn)
           (gnus-message 1 "Redefining `message-make-fqdn'.")
           (defun message-make-fqdn ()
             "Return user's fully qualified domain name."
             fqdn))))

   If you have no idea what to insert for "yourmachine.yourdomain.tld",
you’ve got several choices.  You can either ask your provider if he
allows you to use something like yourUserName.userfqdn.provider.net, or
you can use somethingUnique.yourdomain.tld if you own the domain
yourdomain.tld, or you can register at a service which gives private
users a FQDN for free.

   Finally you can tell Gnus not to generate a Message-ID for News at
all (and letting the server do the job) by saying

     (setq message-required-news-headers
       (remove' Message-ID message-required-news-headers))

   you can also tell Gnus not to generate Message-IDs for mail by saying

     (setq message-required-mail-headers
       (remove' Message-ID message-required-mail-headers))

   , however some mail servers don’t generate proper Message-IDs, too,
so test if your Mail Server behaves correctly by sending yourself a Mail
and looking at the Message-ID.


File: gnus.info,  Node: FAQ 6 - Old messages,  Next: FAQ 7 - Gnus in a dial-up environment,  Prev: FAQ 5 - Composing messages,  Up: Frequently Asked Questions

12.8.7 Old messages
-------------------

* Menu:

* FAQ 6-1::    How to import my old mail into Gnus?
* FAQ 6-2::    How to archive interesting messages?
* FAQ 6-3::    How to search for a specific message?
* FAQ 6-4::    How to get rid of old unwanted mail?
* FAQ 6-5::    I want that all read messages are expired (at least in
               some groups).  How to do it?
* FAQ 6-6::    I don’t want expiration to delete my mails but to move
               them to another group.


File: gnus.info,  Node: FAQ 6-1,  Next: FAQ 6-2,  Up: FAQ 6 - Old messages

Question 6.1
............

How to import my old mail into Gnus?

Answer
......

The easiest way is to tell your old mail program to export the messages
in mbox format.  Most Unix mailers are able to do this, if you come from
the MS Windows world, you may find tools at
<https://sourceforge.net/projects/mbx2mbox/>.

   Now you’ve got to import this mbox file into Gnus.  To do this,
create a nndoc group based on the mbox file by saying ‘G f
/path/file.mbox <RET>’ in Group buffer.  You now have read-only access
to your mail.  If you want to import the messages to your normal Gnus
mail groups hierarchy, enter the nndoc group you’ve just created by
saying ‘C-u <RET>’ (thus making sure all messages are retrieved), mark
all messages by saying ‘M P b’ and either copy them to the desired group
by saying ‘B c name.of.group <RET>’ or send them through
nnmail-split-methods (respool them) by saying ‘B r’.


File: gnus.info,  Node: FAQ 6-2,  Next: FAQ 6-3,  Prev: FAQ 6-1,  Up: FAQ 6 - Old messages

Question 6.2
............

How to archive interesting messages?

Answer
......

If you stumble across an interesting message, say in gnu.emacs.gnus and
want to archive it there are several solutions.  The first and easiest
is to save it to a file by saying ‘O f’.  However, wouldn’t it be much
more convenient to have more direct access to the archived message from
Gnus?  If you say yes, put this snippet by Frank Haun
<pille3003@fhaun.de> in ‘~/.gnus.el’:

     (defun my-archive-article (&optional n)
       "Copies one or more article(s) to a corresponding `nnml:' group, e.g.,
     `gnus.ding' goes to `nnml:1.gnus.ding'.  And `nnml:List-gnus.ding' goes
     to `nnml:1.List-gnus-ding'.

     Use process marks or mark a region in the summary buffer to archive
     more then one article."
       (interactive "P")
       (let ((archive-name
              (format
               "nnml:1.%s"
               (replace-regexp-in-string "^.*:" "" gnus-newsgroup-name))))
         (gnus-summary-copy-article n archive-name)))

   You can now say ‘M-x my-archive-article’ in summary buffer to archive
the article under the cursor in a nnml group.  (Change nnml to your
preferred back end.)

   Of course you can also make sure the cache is enabled by saying

     (setq gnus-use-cache t)

   then you only have to set either the tick or the dormant mark for
articles you want to keep, setting the read mark will remove them from
cache.


File: gnus.info,  Node: FAQ 6-3,  Next: FAQ 6-4,  Prev: FAQ 6-2,  Up: FAQ 6 - Old messages

Question 6.3
............

How to search for a specific message?

Answer
......

There are several ways for this, too.  For a posting from a Usenet group
the easiest solution is probably to ask groups.google.com
(https://groups.google.com), if you found the posting there, tell Google
to display the raw message, look for the message-id, and say ‘M-^
the@message.id <RET>’ in a summary buffer.  There’s a Gnus interface for
‘groups.google.com’ which you can call with ‘G W’) in group buffer.

   Another idea which works for both mail and news groups is to enter
the group where the message you are searching is and use the standard
Emacs search ‘C-s’, it’s smart enough to look at articles in collapsed
threads, too.  If you want to search bodies, too try ‘M-s’ instead.
Further on there are the gnus-summary-limit-to-foo functions, which can
help you, too.


File: gnus.info,  Node: FAQ 6-4,  Next: FAQ 6-5,  Prev: FAQ 6-3,  Up: FAQ 6 - Old messages

Question 6.4
............

How to get rid of old unwanted mail?

Answer
......

You can of course just mark the mail you don’t need anymore by saying
‘#’ with point over the mail and then say ‘B <DEL>’ to get rid of them
forever.  You could also instead of actually deleting them, send them to
a junk-group by saying ‘B m nnml:trash-bin’ which you clear from time to
time, but both are not the intended way in Gnus.

   In Gnus, we let mail expire like news expires on a news server.  That
means you tell Gnus the message is expirable (you tell Gnus "I don’t
need this mail anymore") by saying ‘E’ with point over the mail in
summary buffer.  Now when you leave the group, Gnus looks at all
messages which you marked as expirable before and if they are old enough
(default is older than a week) they are deleted.


File: gnus.info,  Node: FAQ 6-5,  Next: FAQ 6-6,  Prev: FAQ 6-4,  Up: FAQ 6 - Old messages

Question 6.5
............

I want that all read messages are expired (at least in some groups).
How to do it?

Answer
......

If you want all read messages to be expired (e.g., in mailing lists
where there’s an online archive), you’ve got two choices: auto-expire
and total-expire.  Auto-expire means, that every article which has no
marks set and is selected for reading is marked as expirable, Gnus hits
‘E’ for you every time you read a message.  Total-expire follows a
slightly different approach, here all article where the read mark is set
are expirable.

   To activate auto-expire, include auto-expire in the Group parameters
for the group.  (Hit ‘G c’ in summary buffer with point over the group
to change group parameters).  For total-expire add total-expire to the
group-parameters.

   Which method you choose is merely a matter of taste: Auto-expire is
faster, but it doesn’t play together with Adaptive Scoring, so if you
want to use this feature, you should use total-expire.

   If you want a message to be excluded from expiration in a group where
total or auto expire is active, set either tick (hit ‘u’) or dormant
mark (hit ‘u’), when you use auto-expire, you can also set the read mark
(hit ‘d’).


File: gnus.info,  Node: FAQ 6-6,  Prev: FAQ 6-5,  Up: FAQ 6 - Old messages

Question 6.6
............

I don’t want expiration to delete my mails but to move them to another
group.

Answer
......

Say something like this in ‘~/.gnus.el’:

     (setq nnmail-expiry-target "nnml:expired")

   (If you want to change the value of nnmail-expiry-target on a per
group basis see the question "How can I disable threading in some (e.g.,
mail-) groups, or set other variables specific for some groups?")


File: gnus.info,  Node: FAQ 7 - Gnus in a dial-up environment,  Next: FAQ 8 - Getting help,  Prev: FAQ 6 - Old messages,  Up: Frequently Asked Questions

12.8.8 Gnus in a dial-up environment
------------------------------------

* Menu:

* FAQ 7-1::    I don’t have a permanent connection to the net, how can I
               minimize the time I’ve got to be connected?
* FAQ 7-2::    So what was this thing about the Agent?
* FAQ 7-3::    I want to store article bodies on disk, too.  How to do
               it?
* FAQ 7-4::    How to tell Gnus not to try to send mails / postings
               while I’m offline?


File: gnus.info,  Node: FAQ 7-1,  Next: FAQ 7-2,  Up: FAQ 7 - Gnus in a dial-up environment

Question 7.1
............

I don’t have a permanent connection to the net, how can I minimize the
time I’ve got to be connected?

Answer
......

You’ve got basically two options: Either you use the Gnus Agent (see
below) for this, or you can install programs which fetch your news and
mail to your local disk and Gnus reads the stuff from your local
machine.

   If you want to follow the second approach, you need a program which
fetches news and offers them to Gnus, a program which does the same for
mail and a program which receives the mail you write from Gnus and sends
them when you’re online.

   Let’s talk about Unix systems first: For the news part, the easiest
solution is a small nntp server like Leafnode
(https://www.leafnode.org/) or sn (https://patrik.iki.fi/sn/), of course
you can also install a full featured news server like inn
(https://www.isc.org/othersoftware/).  Then you want to fetch your Mail,
popular choices are fetchmail (https://www.fetchmail.info/) and getmail
(https://pyropus.ca/software/getmail/).  You should tell those to write
the mail to your disk and Gnus to read it from there.  Last but not
least the mail sending part: This can be done with every MTA like
sendmail (https://www.proofpoint.com/us/open-source-email-solution) or
exim (https://www.exim.org/).

   On windows boxes I’d vote for Hamster
(http://www.tglsoft.de/freeware_hamster.html), it’s a small freeware,
open-source program which fetches your mail and news from remote servers
and offers them to Gnus (or any other mail and/or news reader) via nntp
respectively POP3 or IMAP.  It also includes a smtp server for receiving
mails from Gnus.


File: gnus.info,  Node: FAQ 7-2,  Next: FAQ 7-3,  Prev: FAQ 7-1,  Up: FAQ 7 - Gnus in a dial-up environment

Question 7.2
............

So what was this thing about the Agent?

Answer
......

The Gnus agent is part of Gnus, it allows you to fetch mail and news and
store them on disk for reading them later when you’re offline.  It kind
of mimics offline newsreaders like Forte Agent.  It is enabled by
default.

   You’ve got to select the servers whose groups can be stored locally.
To do this, open the server buffer (that is press ‘^’ while in the group
buffer).  Now select a server by moving point to the line naming that
server.  Finally, agentize the server by typing ‘J a’.  If you make a
mistake, or change your mind, you can undo this action by typing ‘J r’.
When you’re done, type ’q’ to return to the group buffer.  Now the next
time you enter a group on an agentized server, the headers will be
stored on disk and read from there the next time you enter the group.


File: gnus.info,  Node: FAQ 7-3,  Next: FAQ 7-4,  Prev: FAQ 7-2,  Up: FAQ 7 - Gnus in a dial-up environment

Question 7.3
............

I want to store article bodies on disk, too.  How to do it?

Answer
......

You can tell the agent to automatically fetch the bodies of articles
which fulfill certain predicates, this is done in a special buffer which
can be reached by saying ‘J c’ in group buffer.  Please refer to the
documentation for information which predicates are possible and how
exactly to do it.

   Further on you can tell the agent manually which articles to store on
disk.  There are two ways to do this: Number one: In the summary buffer,
process mark a set of articles that shall be stored in the agent by
saying ‘#’ with point over the article and then type ‘J s’.  The other
possibility is to set, again in the summary buffer, downloadable (%)
marks for the articles you want by typing ‘@’ with point over the
article and then typing ‘J u’.  What’s the difference?  Well, process
marks are erased as soon as you exit the summary buffer while
downloadable marks are permanent.  You can actually set downloadable
marks in several groups then use fetch session (’J s’ in the GROUP
buffer) to fetch all of those articles.  The only downside is that fetch
session also fetches all of the headers for every selected group on an
agentized server.  Depending on the volume of headers, the initial fetch
session could take hours.


File: gnus.info,  Node: FAQ 7-4,  Prev: FAQ 7-3,  Up: FAQ 7 - Gnus in a dial-up environment

Question 7.4
............

How to tell Gnus not to try to send mails / postings while I’m offline?

Answer
......

All you’ve got to do is to tell Gnus when you are online (plugged) and
when you are offline (unplugged), the rest works automatically.  You can
toggle plugged/unplugged state by saying ‘J j’ in group buffer.  To
start Gnus unplugged say ‘M-x gnus-unplugged’ instead of ‘M-x gnus’.
Note that for this to work, the agent must be active.


File: gnus.info,  Node: FAQ 8 - Getting help,  Next: FAQ 9 - Tuning Gnus,  Prev: FAQ 7 - Gnus in a dial-up environment,  Up: Frequently Asked Questions

12.8.9 Getting help
-------------------

* Menu:

* FAQ 8-1::    How to find information and help inside Emacs?
* FAQ 8-2::    I can’t find anything in the Gnus manual about X (e.g.,
               attachments, PGP, MIME...), is it not documented?
* FAQ 8-3::    Which websites should I know?
* FAQ 8-4::    Which mailing lists and newsgroups are there?
* FAQ 8-5::    Where to report bugs?
* FAQ 8-6::    I need real-time help, where to find it?


File: gnus.info,  Node: FAQ 8-1,  Next: FAQ 8-2,  Up: FAQ 8 - Getting help

Question 8.1
............

How to find information and help inside Emacs?

Answer
......

The first stop should be the Gnus manual (Say ‘C-h i d m Gnus <RET>’ to
start the Gnus manual, then walk through the menus or do a full-text
search with ‘s’).  Then there are the general Emacs help commands
starting with ‘C-h’, type ‘C-h ? ?’ to get a list of all available help
commands and their meaning.  Finally ‘M-x apropos-command’ lets you
search through all available functions and ‘M-x apropos’ searches the
bound variables.


File: gnus.info,  Node: FAQ 8-2,  Next: FAQ 8-3,  Prev: FAQ 8-1,  Up: FAQ 8 - Getting help

Question 8.2
............

I can’t find anything in the Gnus manual about X (e.g., attachments,
PGP, MIME...), is it not documented?

Answer
......

There’s not only the Gnus manual but also the manuals for message,
emacs-mime, sieve, and EasyPG Assistant.  Those packages are distributed
with Emacs and used by Gnus.  They are documented in separate info
files, so you should have a look in those manuals, too.


File: gnus.info,  Node: FAQ 8-3,  Next: FAQ 8-4,  Prev: FAQ 8-2,  Up: FAQ 8 - Getting help

Question 8.3
............

Which websites should I know?

Answer
......

The most important one is the official Gnus website
(https://www.gnus.org).

   Tell me about other sites which are interesting.


File: gnus.info,  Node: FAQ 8-4,  Next: FAQ 8-5,  Prev: FAQ 8-3,  Up: FAQ 8 - Getting help

Question 8.4
............

Which mailing lists and newsgroups are there?

Answer
......

There’s the newsgroup gnu.emacs.gnus which deals with general Gnus
questions.  If you have questions about development versions of Gnus,
you should better ask on the ding mailing list, see below.

   If you want to stay in the big8, news.software.readers is also read
by some Gnus users (but chances for qualified help are much better in
the above groups).  If you speak German, there’s de.comm.software.gnus.

   The ding mailing list (ding@gnus.org) deals with development of Gnus.


File: gnus.info,  Node: FAQ 8-5,  Next: FAQ 8-6,  Prev: FAQ 8-4,  Up: FAQ 8 - Getting help

Question 8.5
............

Where to report bugs?

Answer
......

Say ‘M-x gnus-bug’, this will start a message to the gnus bug mailing
list <bugs@gnus.org> including information about your environment which
make it easier to help you.


File: gnus.info,  Node: FAQ 8-6,  Prev: FAQ 8-5,  Up: FAQ 8 - Getting help

Question 8.6
............

I need real-time help, where to find it?

Answer
......

Point your IRC client to irc.libera.chat, channel #gnus.


File: gnus.info,  Node: FAQ 9 - Tuning Gnus,  Next: FAQ - Glossary,  Prev: FAQ 8 - Getting help,  Up: Frequently Asked Questions

12.8.10 Tuning Gnus
-------------------

* Menu:

* FAQ 9-1::    Starting Gnus is really slow, how to speed it up?
* FAQ 9-2::    How to speed up the process of entering a group?
* FAQ 9-3::    Sending mail becomes slower and slower, what’s up?


File: gnus.info,  Node: FAQ 9-1,  Next: FAQ 9-2,  Up: FAQ 9 - Tuning Gnus

Question 9.1
............

Starting Gnus is really slow, how to speed it up?

Answer
......

The reason for this could be the way Gnus reads its active file, see the
node "The Active File" in the Gnus manual for things you might try to
speed the process up.  An other idea would be to byte compile your
‘~/.gnus.el’ (say ‘M-x byte-compile-file <RET> ~/.gnus.el <RET>’ to do
it).  Finally, if you have require statements in your .gnus, you could
replace them with ‘with-eval-after-load’, which loads the stuff not at
startup time, but when it’s needed.  Say you’ve got this in your
‘~/.gnus.el’:

     (require 'message)
     (add-to-list 'message-syntax-checks '(sender . disabled))

   then as soon as you start Gnus, message.el is loaded.  If you replace
it with

     (with-eval-after-load "message"
       (add-to-list 'message-syntax-checks '(sender . disabled)))

   it’s loaded when it’s needed.


File: gnus.info,  Node: FAQ 9-2,  Next: FAQ 9-3,  Prev: FAQ 9-1,  Up: FAQ 9 - Tuning Gnus

Question 9.2
............

How to speed up the process of entering a group?

Answer
......

A speed killer is setting the variable ‘gnus-fetch-old-headers’ to
anything different from ‘nil’, so don’t do this if speed is an issue.

   You could increase the value of ‘gc-cons-threshold’ by saying
something like:

     (setq gc-cons-threshold 3500000)

   in ~/.emacs.


File: gnus.info,  Node: FAQ 9-3,  Prev: FAQ 9-2,  Up: FAQ 9 - Tuning Gnus

Question 9.3
............

Sending mail becomes slower and slower, what’s up?

Answer
......

The reason could be that you told Gnus to archive the messages you wrote
by setting gnus-message-archive-group.  Try to use a nnml group instead
of an archive group, this should bring you back to normal speed.


File: gnus.info,  Node: FAQ - Glossary,  Prev: FAQ 9 - Tuning Gnus,  Up: Frequently Asked Questions

12.8.11 Glossary
----------------

“~/.gnus.el”
     When the term ‘~/.gnus.el’ is used it just means your Gnus
     configuration file.  You might as well call it ‘~/.gnus’ or specify
     another name.

“Back End”
     In Gnus terminology a back end is a virtual server, a layer between
     core Gnus and the real NNTP-, POP3-, IMAP- or whatever-server which
     offers Gnus a standardized interface to functions like "get
     message", "get Headers" etc.

“Message”
     In this FAQ message means either a mail or a posting to a Usenet
     Newsgroup or to some other fancy back end, no matter of which kind
     it is.

“MUA”
     MUA is an acronym for Mail User Agent, it’s the program you use to
     read and write e-mails.

“NUA”
     NUA is an acronym for News User Agent, it’s the program you use to
     read and write Usenet news.


File: gnus.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Appendices,  Up: Top

# /. 13 GNU Free Documentation License
*************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

# /. ADDENDUM: How to use this License for your documents
========================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gnus.info,  Node: Index,  Next: Key Index,  Prev: GNU Free Documentation License,  Up: Top

# /. 14 Index
************

 [index ]
* Menu:

* $:                                     Spam and Ham Processors.
                                                              (line  31)
* %:                                     Group Line Specification.
                                                              (line 136)
* % <1>:                                 Summary Agent Commands.
                                                              (line  13)
* %(, %):                                Formatting Fonts.    (line   6)
* %<<, %>>, guillemets:                  Formatting Fonts.    (line  18)
* %{, %}:                                Formatting Fonts.    (line  12)
* *:                                     Group Line Specification.
                                                              (line 161)
* * <1>:                                 Article Fontifying.  (line  24)
* .newsrc:                               Startup Files.       (line   6)
* .newsrc.el:                            Startup Files.       (line   6)
* .newsrc.eld:                           Startup Files.       (line   6)
* /:                                     Article Fontifying.  (line  24)
* <:                                     Loose Threads.       (line   6)
* >:                                     Loose Threads.       (line   6)
* activating groups:                     Scanning New Messages.
                                                              (line  19)
* activating groups <1>:                 Terminology.         (line 146)
* active file:                           The Active File.     (line   6)
* active file <1>:                       Terminology.         (line 136)
* adapt file group parameter:            Group Parameters.    (line 159)
* adaptive scoring:                      Adaptive Scoring.    (line   6)
* admin-address:                         Group Parameters.    (line 164)
* adopting articles:                     Loose Threads.       (line  16)
* advertisements:                        Article Hiding.      (line  43)
* agent:                                 Gnus Unplugged.      (line   6)
* agent expiry:                          Agent Expiry.        (line   6)
* Agent Parameters:                      Category Syntax.     (line  11)
* agent regeneration:                    Agent Regeneration.  (line   6)
* ANSI control sequences:                Article Washing.     (line 153)
* archived messages:                     Archived Messages.   (line   6)
* article:                               Terminology.         (line  71)
* article backlog:                       Article Backlog.     (line   6)
* article buffer:                        Article Buffer.      (line   6)
* article buffers, several:              Misc Article.        (line   7)
* article caching:                       Article Caching.     (line   6)
* article customization:                 Customizing Articles.
                                                              (line   6)
* article emphasis:                      Article Fontifying.  (line   6)
* article expiry:                        Expiring Mail.       (line   6)
* article hiding:                        Article Hiding.      (line   6)
* article history:                       Choosing Commands.   (line  70)
* article marking:                       Marking Articles.    (line   6)
* article pre-fetch:                     Asynchronous Fetching.
                                                              (line   6)
* article scrolling:                     Paging the Article.  (line   6)
* article series:                        Decoding Articles.   (line  18)
* article signature:                     Article Signature.   (line   6)
* article threading:                     Threading.           (line   6)
* article ticking:                       Marking Articles.    (line   6)
* article washing:                       Article Washing.     (line   6)
* article-de-quoted-unreadable:          Washing Mail.        (line  80)
* articles:                              Don't Panic.         (line  47)
* asterisk:                              Article Fontifying.  (line  24)
* asynchronous article fetching:         Asynchronous Fetching.
                                                              (line   6)
* attachments:                           MIME Commands.       (line   6)
* attachments, selection via dired:      Other modes.         (line  14)
* authentication:                        NNTP.                (line  23)
* authinfo:                              NNTP.                (line  23)
* auto-expire:                           Group Parameters.    (line 126)
* auto-save:                             Auto Save.           (line   6)
* Babyl:                                 Document Groups.     (line   9)
* back end:                              Terminology.         (line  27)
* backlog:                               Article Backlog.     (line   6)
* backup files:                          Mail Folders.        (line  29)
* banner:                                Group Parameters.    (line 263)
* banner <1>:                            Article Hiding.      (line  43)
* batch scoring:                         Group Score Commands.
                                                              (line  19)
* Bayesian spam filtering, naive:        Spam Statistics Package.
                                                              (line   6)
* BBDB whitelists, spam filtering:       BBDB Whitelists.     (line   6)
* BBDB, spam filtering:                  BBDB Whitelists.     (line   6)
* binary groups:                         Binary Groups.       (line   6)
* blackholes, spam filtering:            Blackholes.          (line   6)
* blacklists, spam filtering:            Blacklists and Whitelists.
                                                              (line   6)
* BNF:                                   Required Back End Functions.
                                                              (line  53)
* body:                                  Terminology.         (line  84)
* body split:                            Fancy Mail Splitting.
                                                              (line  79)
* bogofilter, spam filtering:            Bogofilter.          (line   6)
* bogus group:                           Splitting Mail.      (line  32)
* bogus groups:                          Group Maintenance.   (line   6)
* bogus groups <1>:                      Terminology.         (line 141)
* bookmarks:                             Other Marks.         (line   6)
* bouncing mail:                         Summary Mail Commands.
                                                              (line  96)
* broken-reply-to:                       Group Parameters.    (line  91)
* browsing servers:                      Browse Foreign Server.
                                                              (line   6)
* browsing the web:                      Browsing the Web.    (line   6)
* bugs:                                  Troubleshooting.     (line  23)
* bury-buffer:                           Sticky Articles.     (line  27)
* button levels:                         Article Button Levels.
                                                              (line   6)
* buttons:                               Article Buttons.     (line   6)
* caching:                               Article Caching.     (line   6)
* calendar:                              Email Based Diary.   (line   6)
* canceling articles:                    Canceling and Superseding.
                                                              (line   6)
* changing servers:                      Changing Servers.    (line   6)
* characters in file names:              Various Various.     (line  64)
* charset:                               Group Parameters.    (line 214)
* charset, view article with different charset: Paging the Article.
                                                              (line  38)
* charsets:                              Charsets.            (line   6)
* child:                                 Child Gnusae.        (line   6)
* child <1>:                             Terminology.         (line 197)
* ClariNet Briefs:                       Foreign Groups.      (line  67)
* closing servers automatically:         D-Bus Integration.   (line   6)
* cloud:                                 The Gnus Cloud.      (line   6)
* cloud, download:                       Gnus Cloud Usage.    (line  10)
* cloud, download <1>:                   Gnus Cloud Usage.    (line  14)
* coding system aliases:                 Charsets.            (line  48)
* colors:                                Faces and Fonts.     (line   6)
* comment:                               Group Parameters.    (line 209)
* composing mail:                        Summary Mail Commands.
                                                              (line   6)
* composing messages:                    Composing Messages.  (line   6)
* composing news:                        Summary Post Commands.
                                                              (line   6)
* configuring search:                    Search Engines.      (line   6)
* contributors:                          Contributors.        (line   6)
* converting kill files:                 Converting Kill Files.
                                                              (line   6)
* copy mail:                             Mail Group Commands. (line  35)
* creating search groups:                Creating Search Groups.
                                                              (line   6)
* cross-posting:                         Crosspost Handling.  (line  19)
* crosspost:                             Splitting Mail.      (line  65)
* crosspost mail:                        Mail Group Commands. (line  40)
* crossposting:                          Summary Mail Commands.
                                                              (line 137)
* crossposts:                            Scoring Tips.        (line   7)
* customizing:                           Foreign Groups.      (line  39)
* customizing nndiary:                   Customizing NNDiary. (line   6)
* customizing threading:                 Customizing Threading.
                                                              (line   6)
* D-Bus:                                 D-Bus Integration.   (line   6)
* daemons:                               Daemons.             (line   6)
* date:                                  Score File Format.   (line 146)
* dbus:                                  D-Bus Integration.   (line   6)
* DCC:                                   SpamAssassin.        (line   6)
* decays:                                Score Decays.        (line   6)
* decoding articles:                     Decoding Articles.   (line   6)
* dejanews:                              Web Searches.        (line   6)
* delayed sending:                       Delayed Articles.    (line   6)
* delete-file:                           Mail Back End Variables.
                                                              (line  46)
* deleting headers:                      Hiding Headers.      (line   6)
* deleting mail:                         Mail Group Commands. (line  25)
* demons:                                Daemons.             (line   6)
* describing groups:                     Group Information.   (line   8)
* diary:                                 Email Based Diary.   (line   6)
* diary articles sorting:                Diary Articles Sorting.
                                                              (line   6)
* diary group parameters:                Diary Group Parameters.
                                                              (line   6)
* diary headers generation:              Diary Headers Generation.
                                                              (line   6)
* diary summary buffer line:             Diary Summary Line Format.
                                                              (line   6)
* diary summary line format:             Diary Summary Line Format.
                                                              (line   6)
* diary summary lines sorting:           Diary Articles Sorting.
                                                              (line   6)
* digest:                                Terminology.         (line 200)
* digests:                               Summary Post Commands.
                                                              (line  48)
* ding Gnus:                             Gnus Versions.       (line   6)
* ding mailing list:                     Troubleshooting.     (line  82)
* direct connection functions:           Direct Functions.    (line   6)
* directory groups:                      Directory Groups.    (line   6)
* dired:                                 Other modes.         (line   9)
* disk space:                            Little Disk Space.   (line   6)
* display:                               Group Parameters.    (line 170)
* display-time:                          Mode Lines.          (line  13)
* documentation group:                   Document Groups.     (line   6)
* don’t panic:                           Don't Panic.         (line   6)
* drafts:                                Drafts.              (line   6)
* dribble file:                          Auto Save.           (line   6)
* duplicate mails:                       Duplicates.          (line   6)
* edebug:                                Troubleshooting.     (line  49)
* elp:                                   Troubleshooting.     (line  62)
* email based diary:                     Email Based Diary.   (line   6)
* email spam:                            Thwarting Email Spam.
                                                              (line   6)
* email spam <1>:                        The problem of spam. (line   6)
* email spam <2>:                        Anti-Spam Basics.    (line   6)
* emphasis:                              Article Fontifying.  (line   6)
* ephemeral groups:                      Terminology.         (line 173)
* Eudora:                                Washing Mail.        (line  69)
* excessive crossposting:                Summary Mail Commands.
                                                              (line 137)
* exiting Gnus:                          Exiting Gnus.        (line   6)
* exiting groups:                        Exiting the Summary Buffer.
                                                              (line   6)
* expirable mark:                        Read Articles.       (line   6)
* expiring mail:                         Group Parameters.    (line 126)
* expiring mail <1>:                     Group Parameters.    (line 133)
* expiring mail <2>:                     Group Maintenance.   (line  18)
* expiring mail <3>:                     Group Maintenance.   (line  24)
* expiring mail <4>:                     Topic Commands.      (line 131)
* expiring mail <5>:                     Mail Group Commands. (line  13)
* expiring mail <6>:                     Mail Group Commands. (line  19)
* expiring mail <7>:                     Expiring Mail.       (line   6)
* expiry, in Gnus agent:                 Agent Expiry.        (line   6)
* expiry-target:                         Group Parameters.    (line 150)
* expiry-wait:                           Group Parameters.    (line 142)
* extending the spam elisp package:      Extending the Spam package.
                                                              (line   6)
* face:                                  Face.                (line   6)
* face <1>:                              Face.                (line  10)
* faces:                                 Faces and Fonts.     (line   6)
* fancy mail splitting:                  Fancy Mail Splitting.
                                                              (line   6)
* fetching a group:                      Fetching a Group.    (line   6)
* fetching by Message-ID:                Finding the Parent.  (line  59)
* file commands:                         File Commands.       (line   6)
* file names:                            Various Various.     (line  64)
* filtering approaches, spam:            The problem of spam. (line   6)
* finding news:                          Finding the News.    (line   6)
* firewall:                              Example Methods.     (line  45)
* follow up:                             Terminology.         (line  23)
* followup:                              Composing Messages.  (line   6)
* fonts:                                 Faces and Fonts.     (line   6)
* foreign:                               Terminology.         (line  60)
* foreign groups:                        Foreign Groups.      (line   6)
* foreign groups <1>:                    Select Methods.      (line   6)
* foreign servers:                       Browse Foreign Server.
                                                              (line   6)
* format-time-string:                    Article Date.        (line  26)
* formatting variables:                  Formatting Variables.
                                                              (line   6)
* forwarded messages:                    Document Groups.     (line  42)
* functions:                             Gnus Utility Functions.
                                                              (line   6)
* fuzzy article gathering:               Loose Threads.       (line  60)
* fuzzy matching:                        Fuzzy Matching.      (line   6)
* gateways:                              Mail-To-News Gateways.
                                                              (line   6)
* Gcc:                                   Archived Messages.   (line  49)
* gcc-self:                              Group Parameters.    (line 109)
* general customization:                 Customization.       (line   6)
* generating sieve script:               Sieve Commands.      (line  35)
* git commit messages:                   Document Groups.     (line  39)
* global score files:                    Global Score Files.  (line   6)
* Gmail:                                 Support for IMAP Extensions.
                                                              (line   6)
* gmane:                                 Foreign Groups.      (line  82)
* Gmane, gnus-fetch-old-headers:         Filling In Threads.  (line  25)
* Gmane, spam reporting:                 Gmane Spam Reporting.
                                                              (line   6)
* Gmane, spam reporting <1>:             Gmane Spam Reporting.
                                                              (line   6)
* gnu.emacs.gnus:                        Troubleshooting.     (line  82)
* gnus:                                  Starting Up.         (line   9)
* Gnus agent:                            Gnus Unplugged.      (line   6)
* Gnus agent expiry:                     Agent Expiry.        (line   6)
* Gnus agent regeneration:               Agent Regeneration.  (line   6)
* Gnus unplugged:                        Gnus Unplugged.      (line   6)
* Gnus utility functions:                Gnus Utility Functions.
                                                              (line   6)
* Gnus versions:                         Gnus Versions.       (line   6)
* gnus-activate-all-groups:              Scanning New Messages.
                                                              (line  19)
* gnus-activate-foreign-newsgroups:      Foreign Groups.      (line 115)
* gnus-activate-level:                   Group Levels.        (line  87)
* gnus-active:                           Gnus Utility Functions.
                                                              (line  31)
* gnus-adaptive-file-suffix:             Adaptive Scoring.    (line  79)
* gnus-adaptive-pretty-print:            Adaptive Scoring.    (line  83)
* gnus-adaptive-word-length-limit:       Adaptive Scoring.    (line 115)
* gnus-adaptive-word-minimum:            Adaptive Scoring.    (line 124)
* gnus-adaptive-word-no-group-words:     Adaptive Scoring.    (line 128)
* gnus-adaptive-word-syntax-table:       Adaptive Scoring.    (line 120)
* gnus-add-configuration:                Window Layout.       (line 180)
* gnus-add-current-to-buffer-list:       Gnus Utility Functions.
                                                              (line  38)
* gnus-add-timestamp-to-message:         Various Various.     (line  41)
* gnus-add-to-list:                      Group Parameters.    (line  63)
* gnus-add-to-list <1>:                  Mail.                (line  14)
* gnus-after-exiting-gnus-hook:          Exiting Gnus.        (line  20)
* gnus-after-getting-new-news-hook:      Scanning New Messages.
                                                              (line  29)
* gnus-agent:                            Agent Variables.     (line   7)
* gnus-agent-add-group:                  Group Agent Commands.
                                                              (line  22)
* gnus-agent-add-server:                 Server Agent Commands.
                                                              (line   7)
* gnus-agent-auto-agentize-methods:      Agent Variables.     (line 121)
* gnus-agent-batch:                      Batching Agents.     (line   6)
* gnus-agent-cache:                      Agent Variables.     (line  35)
* gnus-agent-catchup:                    Summary Agent Commands.
                                                              (line  18)
* gnus-agent-consider-all-articles:      Agent Variables.     (line  65)
* gnus-agent-directory:                  Agent Variables.     (line  16)
* gnus-agent-eagerly-store-articles:     Agent Variables.     (line  40)
* gnus-agent-enable-expiration:          Category Variables.  (line  46)
* gnus-agent-expire:                     Agent Expiry.        (line   6)
* gnus-agent-expire-all:                 Agent Expiry.        (line  21)
* gnus-agent-expire-days:                Category Variables.  (line  37)
* gnus-agent-expire-days <1>:            Agent Expiry.        (line   6)
* gnus-agent-expire-group:               Agent Expiry.        (line   6)
* gnus-agent-fetch-group:                Summary Agent Commands.
                                                              (line  22)
* gnus-agent-fetch-groups:               Group Agent Commands.
                                                              (line   7)
* gnus-agent-fetch-session:              Group Agent Commands.
                                                              (line  14)
* gnus-agent-fetched-hook:               Agent Variables.     (line  32)
* gnus-agent-go-online:                  Agent Variables.     (line  44)
* gnus-agent-handle-level:               Agent Variables.     (line  20)
* gnus-agent-high-score:                 Category Variables.  (line  33)
* gnus-agent-long-article:               Category Variables.  (line  26)
* gnus-agent-low-score:                  Category Variables.  (line  29)
* gnus-agent-mark-article:               Summary Agent Commands.
                                                              (line   7)
* gnus-agent-mark-unread-after-downloaded: Agent Variables.   (line  52)
* gnus-agent-max-fetch-size:             Agent Variables.     (line  75)
* gnus-agent-plugged-hook:               Agent Variables.     (line  26)
* gnus-agent-prompt-send-queue:          Agent Variables.     (line 116)
* gnus-agent-queue-mail:                 Agent Variables.     (line 110)
* gnus-agent-regenerate:                 Agent Regeneration.  (line  19)
* gnus-agent-regenerate-group:           Agent Regeneration.  (line  24)
* gnus-agent-remove-group:               Group Agent Commands.
                                                              (line  27)
* gnus-agent-remove-server:              Server Agent Commands.
                                                              (line  11)
* gnus-agent-short-article:              Category Variables.  (line  23)
* gnus-agent-summary-fetch-group:        Summary Agent Commands.
                                                              (line  30)
* gnus-agent-summary-fetch-series:       Summary Agent Commands.
                                                              (line  26)
* gnus-agent-synchronize-flags:          Agent and flags.     (line  18)
* gnus-agent-synchronize-flags <1>:      Agent Variables.     (line  58)
* gnus-agent-synchronize-flags <2>:      Group Agent Commands.
                                                              (line  32)
* gnus-agent-toggle-mark:                Summary Agent Commands.
                                                              (line  14)
* gnus-agent-toggle-plugged:             Agent Commands.      (line   6)
* gnus-agent-unmark-article:             Summary Agent Commands.
                                                              (line  10)
* gnus-agent-unplugged-hook:             Agent Variables.     (line  29)
* gnus-alter-articles-to-read-function:  Various Summary Stuff.
                                                              (line  52)
* gnus-alter-header-function:            Low-Level Threading. (line  10)
* gnus-always-force-window-configuration: Window Layout.      (line 195)
* gnus-always-read-dribble-file:         Auto Save.           (line  25)
* gnus-ancient-mark:                     Read Articles.       (line  16)
* gnus-apply-kill-file:                  Kill Files.          (line  62)
* gnus-apply-kill-file-unless-scored:    Kill Files.          (line  62)
* gnus-apply-kill-hook:                  Kill Files.          (line  62)
* gnus-article-add-buttons:              Article Washing.     (line 201)
* gnus-article-add-buttons-to-head:      Article Washing.     (line 205)
* gnus-article-address-banner-alist:     Article Hiding.      (line  43)
* gnus-article-address-banner-alist <1>: Article Hiding.      (line  66)
* gnus-article-babel:                    Article Miscellanea. (line   7)
* gnus-article-banner-alist:             Article Hiding.      (line  43)
* gnus-article-boring-faces:             Paging the Article.  (line  11)
* gnus-article-browse-html-article:      MIME Commands.       (line  44)
* gnus-article-button-face:              Article Buttons.     (line 103)
* gnus-article-capitalize-sentences:     Article Washing.     (line 120)
* gnus-article-date-english:             Article Date.        (line  22)
* gnus-article-date-iso8601:             Article Date.        (line  15)
* gnus-article-date-lapsed:              Article Date.        (line  33)
* gnus-article-date-local:               Article Date.        (line  19)
* gnus-article-date-original:            Article Date.        (line  43)
* gnus-article-date-user:                Article Date.        (line  26)
* gnus-article-date-ut:                  Article Date.        (line  11)
* gnus-article-de-base64-unreadable:     Article Washing.     (line 140)
* gnus-article-de-quoted-unreadable:     Article Washing.     (line 130)
* gnus-article-decode-charset:           MIME Commands.       (line  95)
* gnus-article-decode-encoded-words:     Mail Back End Variables.
                                                              (line  15)
* gnus-article-decode-hook:              Misc Article.        (line  15)
* gnus-article-decode-HZ:                Article Washing.     (line 148)
* gnus-article-decode-mime-words:        MIME Commands.       (line  91)
* gnus-article-describe-briefly:         Article Keymap.      (line  39)
* gnus-article-display-face:             Article Display.     (line  32)
* gnus-article-display-face <1>:         Face.                (line  10)
* gnus-article-display-x-face:           Article Display.     (line  28)
* gnus-article-display-x-face <1>:       X-Face.              (line  10)
* gnus-article-emojize-symbols:          Article Display.     (line  57)
* gnus-article-emphasize:                Article Fontifying.  (line   6)
* gnus-article-emulate-mime:             MIME Commands.       (line 128)
* gnus-article-encrypt-body:             Mail Group Commands. (line  92)
* gnus-article-encrypt-protocol:         Mail Group Commands. (line  92)
* gnus-article-fill-cited-article:       Article Washing.     (line 108)
* gnus-article-fill-long-lines:          Article Washing.     (line 114)
* gnus-article-followup-with-original:   Article Keymap.      (line  60)
* gnus-article-hide:                     Article Hiding.      (line  10)
* gnus-article-hide-boring-headers:      Article Hiding.      (line  19)
* gnus-article-hide-boring-headers <1>:  Hiding Headers.      (line  64)
* gnus-article-hide-citation:            Article Hiding.      (line  80)
* gnus-article-hide-citation-in-followups: Article Hiding.    (line 119)
* gnus-article-hide-citation-maybe:      Article Hiding.      (line 106)
* gnus-article-hide-headers:             Article Hiding.      (line  15)
* gnus-article-hide-list-identifiers:    Article Hiding.      (line  27)
* gnus-article-hide-pem:                 Article Hiding.      (line  39)
* gnus-article-hide-signature:           Article Hiding.      (line  23)
* gnus-article-highlight:                Article Highlighting.
                                                              (line  10)
* gnus-article-highlight-citation:       Article Highlighting.
                                                              (line  25)
* gnus-article-highlight-headers:        Article Highlighting.
                                                              (line  15)
* gnus-article-highlight-signature:      Article Highlighting.
                                                              (line  71)
* gnus-article-loose-mime:               MIME Commands.       (line 122)
* gnus-article-mail:                     Article Keymap.      (line  31)
* gnus-article-maybe-highlight:          Article Highlighting.
                                                              (line  10)
* gnus-article-menu-hook:                Highlighting and Menus.
                                                              (line  59)
* gnus-article-mime-part-function:       MIME Commands.       (line 165)
* gnus-article-mode-hook:                Misc Article.        (line  26)
* gnus-article-mode-line-format:         Misc Article.        (line  36)
* gnus-article-mode-syntax-table:        Misc Article.        (line  29)
* gnus-article-mouse-face:               Article Buttons.     (line 106)
* gnus-article-next-button:              Article Keymap.      (line  43)
* gnus-article-next-page:                Article Keymap.      (line  18)
* gnus-article-outlook-deuglify-article: Article Washing.     (line  87)
* gnus-article-outlook-rearrange-citation: Article Washing.   (line 104)
* gnus-article-outlook-repair-attribution: Article Washing.   (line 100)
* gnus-article-outlook-unwrap-lines:     Article Washing.     (line  92)
* gnus-article-over-scroll:              Misc Article.        (line  32)
* gnus-article-prepare-hook:             Misc Article.        (line  19)
* gnus-article-press-button:             Using MIME.          (line  24)
* gnus-article-prev-button:              Article Keymap.      (line  47)
* gnus-article-prev-page:                Article Keymap.      (line  22)
* gnus-article-refer-article:            Article Keymap.      (line  26)
* gnus-article-remove-cr:                Article Washing.     (line 124)
* gnus-article-remove-images:            Article Display.     (line  62)
* gnus-article-remove-leading-whitespace: Article Header.     (line  19)
* gnus-article-remove-trailing-blank-lines: Article Washing.  (line 232)
* gnus-article-reply-with-original:      Article Keymap.      (line  50)
* gnus-article-save-directory:           Saving Articles.     (line 178)
* gnus-article-show-cursor:              HTML.                (line  57)
* gnus-article-show-summary:             Article Keymap.      (line  35)
* gnus-article-skip-boring:              Paging the Article.  (line  11)
* gnus-article-smartquotes-map:          Article Washing.     (line  69)
* gnus-article-sort-by-author:           Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-date:             Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-most-recent-date: Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-most-recent-number: Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-newsgroups:       Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-number:           Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-random:           Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-schedule:         Diary Articles Sorting.
                                                              (line   6)
* gnus-article-sort-by-score:            Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-by-subject:          Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-sort-functions:           Sorting the Summary Buffer.
                                                              (line  64)
* gnus-article-strip-all-blank-lines:    Article Washing.     (line 239)
* gnus-article-strip-banner:             Article Hiding.      (line  43)
* gnus-article-strip-blank-lines:        Article Washing.     (line 236)
* gnus-article-strip-headers-in-body:    Article Washing.     (line 219)
* gnus-article-strip-leading-blank-lines: Article Washing.    (line 223)
* gnus-article-strip-leading-space:      Article Washing.     (line 242)
* gnus-article-strip-multiple-blank-lines: Article Washing.   (line 227)
* gnus-article-strip-trailing-space:     Article Washing.     (line 246)
* gnus-article-time-format:              Article Date.        (line  26)
* gnus-article-toggle-fonts:             Article Washing.     (line 197)
* gnus-article-treat-ansi-sequences:     Article Washing.     (line 153)
* gnus-article-treat-fold-headers:       Article Header.      (line  16)
* gnus-article-treat-fold-newsgroups:    Article Header.      (line  12)
* gnus-article-treat-non-ascii:          Article Washing.     (line  80)
* gnus-article-treat-overstrike:         Article Washing.     (line  66)
* gnus-article-treat-smartquotes:        Article Washing.     (line  69)
* gnus-article-treat-types:              Customizing Articles.
                                                              (line  54)
* gnus-article-treat-unfold-headers:     Article Header.      (line   9)
* gnus-article-unsplit-urls:             Article Washing.     (line 158)
* gnus-article-verify-x-pgp-sig:         Article Washing.     (line 209)
* gnus-article-wash-html:                Article Washing.     (line 164)
* gnus-article-wide-reply-with-original: Article Keymap.      (line  55)
* gnus-article-x-face-command:           X-Face.              (line  10)
* gnus-article-x-face-too-ugly:          X-Face.              (line  10)
* gnus-async-post-fetch-function:        Asynchronous Fetching.
                                                              (line  68)
* gnus-async-prefetch-article-p:         Asynchronous Fetching.
                                                              (line  45)
* gnus-async-unread-p:                   Asynchronous Fetching.
                                                              (line  45)
* gnus-asynchronous:                     Asynchronous Fetching.
                                                              (line  35)
* gnus-auto-center-summary:              Summary Maneuvering. (line  71)
* gnus-auto-expirable-marks:             Expiring Mail.       (line  28)
* gnus-auto-expirable-newsgroups:        Expiring Mail.       (line  53)
* gnus-auto-extend-newsgroup:            Choosing Variables.  (line   9)
* gnus-auto-goto-ignores:                Agent Variables.     (line  97)
* gnus-auto-select-first:                Selecting a Group.   (line  83)
* gnus-auto-select-next:                 Summary Maneuvering. (line  33)
* gnus-auto-select-on-ephemeral-exit:    Really Various Summary Commands.
                                                              (line  17)
* gnus-auto-select-same:                 Summary Maneuvering. (line  48)
* gnus-auto-select-subject:              Selecting a Group.   (line  83)
* gnus-auto-subscribed-categories:       Filtering New Groups.
                                                              (line  42)
* gnus-auto-subscribed-groups:           Filtering New Groups.
                                                              (line  32)
* gnus-backup-startup-file:              Startup Files.       (line  46)
* gnus-balloon-face-0:                   Formatting Fonts.    (line  18)
* gnus-batch-score:                      Group Score Commands.
                                                              (line  19)
* gnus-before-resume-hook:               Startup Variables.   (line  10)
* gnus-before-startup-hook:              Startup Variables.   (line   7)
* gnus-binary-mode:                      Binary Groups.       (line   6)
* gnus-binary-mode-hook:                 Binary Groups.       (line  15)
* gnus-binary-show-article:              Binary Groups.       (line  12)
* gnus-blocked-images:                   HTML.                (line  27)
* gnus-body-boundary-delimiter:          Customizing Articles.
                                                              (line 137)
* gnus-boring-article-headers:           Hiding Headers.      (line  64)
* gnus-break-pages:                      Misc Article.        (line  75)
* gnus-browse-delete-group:              Browse Foreign Server.
                                                              (line  49)
* gnus-browse-describe-briefly:          Browse Foreign Server.
                                                              (line  45)
* gnus-browse-describe-group:            Browse Foreign Server.
                                                              (line  42)
* gnus-browse-exit:                      Browse Foreign Server.
                                                              (line  39)
* gnus-browse-menu-hook:                 Highlighting and Menus.
                                                              (line  71)
* gnus-browse-mode:                      Browse Foreign Server.
                                                              (line  11)
* gnus-browse-read-group:                Browse Foreign Server.
                                                              (line  24)
* gnus-browse-select-group:              Browse Foreign Server.
                                                              (line  28)
* gnus-browse-subscribe-newsgroup-method: Browse Foreign Server.
                                                              (line  31)
* gnus-browse-toggle-subscription:       Browse Foreign Server.
                                                              (line  31)
* gnus-buffer-configuration:             Window Layout.       (line  15)
* gnus-bug:                              Troubleshooting.     (line  23)
* gnus-build-sparse-threads:             Filling In Threads.  (line  35)
* gnus-button-alist:                     Article Buttons.     (line  17)
* gnus-button-browse-level:              Article Button Levels.
                                                              (line  22)
* gnus-button-emacs-level:               Article Button Levels.
                                                              (line  28)
* gnus-button-man-handler:               Article Buttons.     (line  11)
* gnus-button-man-handler <1>:           Article Buttons.     (line  74)
* gnus-button-man-level:                 Article Button Levels.
                                                              (line  39)
* gnus-button-message-level:             Article Button Levels.
                                                              (line  43)
* gnus-button-mid-or-mail-heuristic:     Article Buttons.     (line  93)
* gnus-button-mid-or-mail-heuristic-alist: Article Buttons.   (line  99)
* gnus-button-mid-or-mail-regexp:        Article Buttons.     (line  78)
* gnus-button-prefer-mid-or-mail:        Article Buttons.     (line  81)
* gnus-button-url-regexp:                Article Buttons.     (line  70)
* gnus-buttonized-mime-types:            MIME Commands.       (line 145)
* gnus-cache-active-file:                Article Caching.     (line  58)
* gnus-cache-directory:                  Article Caching.     (line  15)
* gnus-cache-enter-article:              Persistent Articles. (line  22)
* gnus-cache-enter-articles:             Article Caching.     (line  29)
* gnus-cache-generate-active:            Article Caching.     (line  58)
* gnus-cache-generate-nov-databases:     Article Caching.     (line  58)
* gnus-cache-move-cache:                 Article Caching.     (line  65)
* gnus-cache-remove-article:             Persistent Articles. (line  25)
* gnus-cache-remove-articles:            Article Caching.     (line  29)
* gnus-cacheable-groups:                 Article Caching.     (line  47)
* gnus-cached-mark:                      Other Marks.         (line  22)
* gnus-canceled-mark:                    Read Articles.       (line  32)
* gnus-catchup-mark:                     Read Articles.       (line  29)
* gnus-category-add:                     Category Buffer.     (line  26)
* gnus-category-copy:                    Category Buffer.     (line  23)
* gnus-category-customize-category:      Category Buffer.     (line  16)
* gnus-category-edit-groups:             Category Buffer.     (line  33)
* gnus-category-edit-predicate:          Category Buffer.     (line  29)
* gnus-category-edit-score:              Category Buffer.     (line  37)
* gnus-category-exit:                    Category Buffer.     (line  13)
* gnus-category-kill:                    Category Buffer.     (line  20)
* gnus-category-line-format:             Category Variables.  (line  10)
* gnus-category-list:                    Category Buffer.     (line  41)
* gnus-category-mode-hook:               Category Variables.  (line   7)
* gnus-category-mode-line-format:        Category Variables.  (line  20)
* gnus-check-backend-function:           Gnus Utility Functions.
                                                              (line  84)
* gnus-check-bogus-newsgroups:           Startup Variables.   (line  25)
* gnus-check-new-newsgroups:             New Groups.          (line   6)
* gnus-child:                            Child Gnusae.        (line  17)
* gnus-cite-attribution-face:            Article Highlighting.
                                                              (line  61)
* gnus-cite-attribution-prefix:          Article Highlighting.
                                                              (line  55)
* gnus-cite-attribution-suffix:          Article Highlighting.
                                                              (line  58)
* gnus-cite-face-list:                   Article Highlighting.
                                                              (line  38)
* gnus-cite-hide-absolute:               Article Hiding.      (line 115)
* gnus-cite-hide-percentage:             Article Hiding.      (line 111)
* gnus-cite-ignore-quoted-from:          Article Highlighting.
                                                              (line  65)
* gnus-cite-max-prefix:                  Article Highlighting.
                                                              (line  35)
* gnus-cite-minimum-match-count:         Article Highlighting.
                                                              (line  51)
* gnus-cite-parse-max-size:              Article Highlighting.
                                                              (line  29)
* gnus-cited-closed-text-button-line-format: Article Hiding.  (line  85)
* gnus-cited-lines-visible:              Article Hiding.      (line 100)
* gnus-cited-opened-text-button-line-format: Article Hiding.  (line  85)
* gnus-cloud:                            The Gnus Cloud.      (line   6)
* gnus-cloud-download-all-data:          Gnus Cloud Usage.    (line  10)
* gnus-cloud-interactive:                Gnus Cloud Usage.    (line  32)
* gnus-cloud-method:                     Gnus Cloud Usage.    (line  37)
* gnus-cloud-storage-method:             Gnus Cloud Usage.    (line  26)
* gnus-cloud-synced-files:               Gnus Cloud Usage.    (line  20)
* gnus-cloud-upload-all-data:            Gnus Cloud Usage.    (line  14)
* gnus-configure-frame:                  Window Layout.       (line 113)
* gnus-confirm-mail-reply-to-news:       Mail.                (line  18)
* gnus-confirm-treat-mail-like-news:     Mail.                (line  29)
* gnus-continuum-version:                Gnus Utility Functions.
                                                              (line  42)
* gnus-convert-image-to-face-command:    Face.                (line  26)
* gnus-convert-image-to-x-face-command:  X-Face.              (line  77)
* gnus-convert-pbm-to-x-face-command:    X-Face.              (line  68)
* gnus-convert-png-to-face:              Face.                (line  23)
* gnus-crosspost-complaint:              Summary Mail Commands.
                                                              (line 140)
* gnus-current-home-score-file:          Home Score File.     (line  54)
* gnus-current-prefix-symbol:            Extended Interactive.
                                                              (line  26)
* gnus-current-prefix-symbols:           Extended Interactive.
                                                              (line  30)
* gnus-dbus:                             D-Bus Integration.   (line   6)
* gnus-dead-summary-mode:                Exiting the Summary Buffer.
                                                              (line  73)
* gnus-decay-score:                      Score Decays.        (line  11)
* gnus-decay-score-function:             Score Decays.        (line  11)
* gnus-decay-scores:                     Score Decays.        (line  11)
* gnus-declare-backend:                  Hooking New Back Ends Into Gnus.
                                                              (line   6)
* gnus-default-adaptive-score-alist:     Adaptive Scoring.    (line  18)
* gnus-default-adaptive-word-score-alist: Adaptive Scoring.   (line  95)
* gnus-default-article-saver:            Saving Articles.     (line  88)
* gnus-default-directory:                Various Various.     (line  21)
* gnus-default-ignored-adaptive-words:   Adaptive Scoring.    (line 111)
* gnus-del-mark:                         Read Articles.       (line   9)
* gnus-delay-article:                    Delayed Articles.    (line  13)
* gnus-delay-default-delay:              Delayed Articles.    (line  42)
* gnus-delay-default-hour:               Delayed Articles.    (line  38)
* gnus-delay-group:                      Delayed Articles.    (line  46)
* gnus-delay-header:                     Delayed Articles.    (line  51)
* gnus-delay-initialize:                 Delayed Articles.    (line  68)
* gnus-delay-send-queue:                 Delayed Articles.    (line  60)
* gnus-demon-add-disconnection:          Daemons.             (line  54)
* gnus-demon-add-handler:                Daemons.             (line  52)
* gnus-demon-add-rescan:                 Daemons.             (line  54)
* gnus-demon-add-scan-timestamps:        Daemons.             (line  54)
* gnus-demon-add-scanmail:               Daemons.             (line  54)
* gnus-demon-cancel:                     Daemons.             (line  60)
* gnus-demon-handlers:                   Daemons.             (line  60)
* gnus-demon-init:                       Daemons.             (line  60)
* gnus-demon-timestep:                   Daemons.             (line  45)
* gnus-diary:                            The Gnus Diary Library.
                                                              (line   6)
* gnus-diary-check-message:              Diary Headers Generation.
                                                              (line   6)
* gnus-diary-delay-format-function:      Diary Summary Line Format.
                                                              (line  41)
* gnus-diary-summary-line-format:        Diary Summary Line Format.
                                                              (line  32)
* gnus-diary-time-format:                Diary Summary Line Format.
                                                              (line  37)
* gnus-directory:                        Various Various.     (line  11)
* gnus-dired-attach:                     Other modes.         (line  14)
* gnus-dired-find-file-mailcap:          Other modes.         (line  18)
* gnus-dired-print:                      Other modes.         (line  23)
* gnus-display-mime:                     Using MIME.          (line  16)
* gnus-display-mime-function:            Using MIME.          (line  16)
* gnus-dormant-mark:                     Unread Articles.     (line  21)
* gnus-downloadable-mark:                Other Marks.         (line  43)
* gnus-downloaded-mark:                  Other Marks.         (line  32)
* gnus-draft-edit-message:               Drafts.              (line  36)
* gnus-draft-send-all-messages:          Drafts.              (line  43)
* gnus-draft-send-message:               Drafts.              (line  43)
* gnus-draft-toggle-sending:             Drafts.              (line  50)
* gnus-dribble-directory:                Auto Save.           (line  19)
* gnus-duplicate-file:                   Duplicate Suppression.
                                                              (line  54)
* gnus-duplicate-list-length:            Duplicate Suppression.
                                                              (line  50)
* gnus-duplicate-mark:                   Read Articles.       (line  39)
* gnus-emphasis-alist:                   Article Fontifying.  (line  11)
* gnus-emphasis-bold:                    Article Fontifying.  (line  24)
* gnus-emphasis-bold-italic:             Article Fontifying.  (line  24)
* gnus-emphasis-italic:                  Article Fontifying.  (line  24)
* gnus-emphasis-underline:               Article Fontifying.  (line  24)
* gnus-emphasis-underline-bold:          Article Fontifying.  (line  24)
* gnus-emphasis-underline-bold-italic:   Article Fontifying.  (line  24)
* gnus-emphasis-underline-italic:        Article Fontifying.  (line  24)
* gnus-empty-thread-mark:                Other Marks.         (line  50)
* gnus-enter-category-buffer:            Group Agent Commands.
                                                              (line  11)
* gnus-ephemeral-group-p:                Gnus Utility Functions.
                                                              (line  53)
* gnus-exit-gnus-hook:                   Exiting Gnus.        (line  20)
* gnus-exit-group-hook:                  Exiting the Summary Buffer.
                                                              (line  69)
* gnus-expert-user:                      Interactive.         (line  14)
* gnus-expirable-mark:                   Read Articles.       (line  48)
* gnus-extra-header:                     To From Newsgroups.  (line  22)
* gnus-extra-headers:                    To From Newsgroups.  (line  12)
* gnus-extract-address-components:       Summary Buffer Format.
                                                              (line  13)
* gnus-extract-address-components <1>:   Summary Buffer Format.
                                                              (line  13)
* gnus-face-0:                           Formatting Fonts.    (line  12)
* gnus-face-from-file:                   Face.                (line  26)
* gnus-face-properties-alist:            X-Face.              (line  43)
* gnus-fetch-group:                      Fetching a Group.    (line   6)
* gnus-fetch-old-ephemeral-headers:      Filling In Threads.  (line  31)
* gnus-fetch-old-headers:                Filling In Threads.  (line   7)
* gnus-fetch-partial-articles:           Article Commands.    (line  13)
* gnus-file-save-name:                   Saving Articles.     (line 107)
* gnus-find-method-for-group:            Gnus Utility Functions.
                                                              (line  14)
* gnus-find-subscribed-addresses:        Group Parameters.    (line  69)
* gnus-folder-save-name:                 Saving Articles.     (line 129)
* gnus-folder-save-name <1>:             Saving Articles.     (line 129)
* gnus-Folder-save-name:                 Saving Articles.     (line 129)
* gnus-forwarded-mark:                   Other Marks.         (line  19)
* gnus-gather-threads-by-references:     Loose Threads.       (line 136)
* gnus-gather-threads-by-subject:        Loose Threads.       (line 132)
* gnus-gcc-externalize-attachments:      Archived Messages.   (line 120)
* gnus-gcc-mark-as-read:                 Archived Messages.   (line 117)
* gnus-gcc-post-body-encode-hook:        Archived Messages.   (line 142)
* gnus-gcc-pre-body-encode-hook:         Archived Messages.   (line 141)
* gnus-gcc-self-resent-messages:         Archived Messages.   (line 127)
* gnus-generate-horizontal-tree:         Tree Display.        (line  81)
* gnus-generate-tree-function:           Tree Display.        (line  81)
* gnus-generate-vertical-tree:           Tree Display.        (line  81)
* gnus-get-info:                         Gnus Utility Functions.
                                                              (line  25)
* gnus-get-new-news-hook:                Scanning New Messages.
                                                              (line  27)
* gnus-global-groups:                    HTML.                (line  40)
* gnus-global-score-files:               Global Score Files.  (line  14)
* gnus-goto-colon:                       Positioning Point.   (line  12)
* gnus-goto-next-group-when-activating:  Scanning New Messages.
                                                              (line  14)
* gnus-gravatar-properties:              Gravatars.           (line  18)
* gnus-gravatar-size:                    Gravatars.           (line  13)
* gnus-gravatar-too-ugly:                Gravatars.           (line  22)
* gnus-group-add-to-virtual:             Foreign Groups.      (line 109)
* gnus-group-apropos:                    Listing Groups.      (line  56)
* gnus-group-best-unread-group:          Group Maneuvering.   (line  40)
* gnus-group-browse-foreign-server:      Finding the News.    (line  41)
* gnus-group-browse-foreign-server <1>:  Browse Foreign Server.
                                                              (line   7)
* gnus-group-catchup-current:            Group Data.          (line   7)
* gnus-group-catchup-current-all:        Group Data.          (line  12)
* gnus-group-catchup-group-hook:         Group Data.          (line   7)
* gnus-group-charset-alist:              Charsets.            (line  14)
* gnus-group-check-bogus-groups:         Group Maintenance.   (line   7)
* gnus-group-clear-data:                 Changing Servers.    (line  24)
* gnus-group-clear-data <1>:             Group Data.          (line  16)
* gnus-group-clear-data-on-native-groups: Changing Servers.   (line  20)
* gnus-group-clear-data-on-native-groups <1>: Group Data.     (line  20)
* gnus-group-compact-group:              Misc Group Stuff.    (line  56)
* gnus-group-customize:                  Foreign Groups.      (line  39)
* gnus-group-default-list-level:         Group Levels.        (line  74)
* gnus-group-delete-group:               Foreign Groups.      (line  97)
* gnus-group-describe-all-groups:        Group Information.   (line  12)
* gnus-group-describe-briefly:           Group Information.   (line  20)
* gnus-group-describe-group:             Group Information.   (line   8)
* gnus-group-description-apropos:        Listing Groups.      (line  60)
* gnus-group-edit-global-kill:           Kill Files.          (line  46)
* gnus-group-edit-group:                 Foreign Groups.      (line  50)
* gnus-group-edit-group-method:          Foreign Groups.      (line  42)
* gnus-group-edit-group-parameters:      Foreign Groups.      (line  46)
* gnus-group-edit-local-kill:            Kill Files.          (line  43)
* gnus-group-enter-directory:            Foreign Groups.      (line  62)
* gnus-group-enter-server-mode:          Misc Group Stuff.    (line  27)
* gnus-group-exit:                       Exiting Gnus.        (line  14)
* gnus-group-expire-all-groups:          Group Maintenance.   (line  24)
* gnus-group-expire-articles:            Group Maintenance.   (line  18)
* gnus-group-find-new-groups:            Group Maintenance.   (line  11)
* gnus-group-find-parameter:             Gnus Utility Functions.
                                                              (line  73)
* gnus-group-first-unread-group:         Group Maneuvering.   (line  44)
* gnus-group-foreign-p:                  Gnus Utility Functions.
                                                              (line  70)
* gnus-group-get-new-news:               Scanning New Messages.
                                                              (line   7)
* gnus-group-get-new-news-this-group:    Scanning New Messages.
                                                              (line  14)
* gnus-group-goto-unread:                Group Maneuvering.   (line  47)
* gnus-group-ham-exit-processor-BBDB:    BBDB Whitelists.     (line  29)
* gnus-group-ham-exit-processor-bogofilter: Bogofilter.       (line  57)
* gnus-group-ham-exit-processor-spamoracle: SpamOracle.       (line  76)
* gnus-group-ham-exit-processor-stat:    Spam Statistics Filtering.
                                                              (line  27)
* gnus-group-ham-exit-processor-whitelist: Blacklists and Whitelists.
                                                              (line  42)
* gnus-group-highlight:                  Group Highlighting.  (line   6)
* gnus-group-highlight-line:             Group Highlighting.  (line  65)
* gnus-group-highlight-words-alist:      Article Fontifying.  (line  37)
* gnus-group-jump-to-group:              Group Maneuvering.   (line  35)
* gnus-group-kill-all-zombies:           Subscription Commands.
                                                              (line  40)
* gnus-group-kill-group:                 Subscription Commands.
                                                              (line  24)
* gnus-group-kill-level:                 Subscription Commands.
                                                              (line  43)
* gnus-group-kill-region:                Subscription Commands.
                                                              (line  37)
* gnus-group-line-format:                Group Line Specification.
                                                              (line  21)
* gnus-group-list-active:                Listing Groups.      (line  47)
* gnus-group-list-all-groups:            Listing Groups.      (line  19)
* gnus-group-list-all-matching:          Listing Groups.      (line  44)
* gnus-group-list-cached:                Listing Groups.      (line  64)
* gnus-group-list-dormant:               Listing Groups.      (line  67)
* gnus-group-list-flush:                 Listing Groups.      (line  80)
* gnus-group-list-groups:                Listing Groups.      (line  10)
* gnus-group-list-inactive-groups:       Group Levels.        (line  79)
* gnus-group-list-killed:                Listing Groups.      (line  31)
* gnus-group-list-level:                 Listing Groups.      (line  26)
* gnus-group-list-limit:                 Listing Groups.      (line  73)
* gnus-group-list-matching:              Listing Groups.      (line  40)
* gnus-group-list-plus:                  Listing Groups.      (line  83)
* gnus-group-list-ticked:                Listing Groups.      (line  70)
* gnus-group-list-zombies:               Listing Groups.      (line  37)
* gnus-group-mail:                       Misc Group Stuff.    (line  39)
* gnus-group-make-directory-group:       Foreign Groups.      (line  54)
* gnus-group-make-doc-group:             Foreign Groups.      (line  67)
* gnus-group-make-empty-virtual:         Foreign Groups.      (line 105)
* gnus-group-make-group:                 Foreign Groups.      (line  24)
* gnus-group-make-help-group:            Foreign Groups.      (line  59)
* gnus-group-make-rss-group:             Foreign Groups.      (line  93)
* gnus-group-make-useful-group:          Foreign Groups.      (line  78)
* gnus-group-make-web-group:             Foreign Groups.      (line  82)
* gnus-group-mark-buffer:                Marking Groups.      (line  35)
* gnus-group-mark-group:                 Marking Groups.      (line  17)
* gnus-group-mark-regexp:                Marking Groups.      (line  38)
* gnus-group-mark-region:                Marking Groups.      (line  32)
* gnus-group-menu-hook:                  Highlighting and Menus.
                                                              (line  62)
* gnus-group-mode-hook:                  Misc Group Stuff.    (line  65)
* gnus-group-mode-line-format:           Group Mode Line Specification.
                                                              (line   6)
* gnus-group-name-charset-group-alist:   Non-ASCII Group Names.
                                                              (line  53)
* gnus-group-name-charset-method-alist:  Non-ASCII Group Names.
                                                              (line  24)
* gnus-group-native-p:                   Gnus Utility Functions.
                                                              (line  64)
* gnus-group-news:                       Misc Group Stuff.    (line  45)
* gnus-group-next-group:                 Group Maneuvering.   (line  19)
* gnus-group-next-group <1>:             Browse Foreign Server.
                                                              (line  18)
* gnus-group-next-unread-group:          Group Maneuvering.   (line  10)
* gnus-group-next-unread-group-same-level: Group Maneuvering. (line  25)
* gnus-group-no-more-groups-hook:        Exiting the Summary Buffer.
                                                              (line  12)
* gnus-group-post-news:                  Misc Group Stuff.    (line  31)
* gnus-group-posting-charset-alist:      Charsets.            (line  27)
* gnus-group-prefixed-name:              Gnus Utility Functions.
                                                              (line  21)
* gnus-group-prepare-hook:               Misc Group Stuff.    (line  68)
* gnus-group-prepared-hook:              Misc Group Stuff.    (line  72)
* gnus-group-prev-group:                 Group Maneuvering.   (line  22)
* gnus-group-prev-group <1>:             Browse Foreign Server.
                                                              (line  21)
* gnus-group-prev-unread-group:          Group Maneuvering.   (line  15)
* gnus-group-prev-unread-group-same-level: Group Maneuvering. (line  29)
* gnus-group-quick-select-group:         Selecting a Group.   (line  32)
* gnus-group-quit:                       Exiting Gnus.        (line  17)
* gnus-group-read-ephemeral-group:       Foreign Groups.      (line  29)
* gnus-group-read-group:                 Selecting a Group.   (line   7)
* gnus-group-read-init-file:             File Commands.       (line   7)
* gnus-group-read-only-p:                Gnus Utility Functions.
                                                              (line  47)
* gnus-group-real-name:                  Gnus Utility Functions.
                                                              (line  17)
* gnus-group-rename-group:               Foreign Groups.      (line  33)
* gnus-group-restart:                    Scanning New Messages.
                                                              (line  23)
* gnus-group-save-newsrc:                File Commands.       (line  11)
* gnus-group-secondary-p:                Gnus Utility Functions.
                                                              (line  67)
* gnus-group-select-group:               Selecting a Group.   (line  25)
* gnus-group-select-group-ephemerally:   Selecting a Group.   (line  48)
* gnus-group-send-queue:                 Group Agent Commands.
                                                              (line  18)
* gnus-group-set-current-level:          Group Levels.        (line  16)
* gnus-group-set-parameter:              Gnus Utility Functions.
                                                              (line  78)
* gnus-group-sort-by-alphabet:           Sorting Groups.      (line  11)
* gnus-group-sort-by-level:              Sorting Groups.      (line  17)
* gnus-group-sort-by-method:             Sorting Groups.      (line  31)
* gnus-group-sort-by-rank:               Sorting Groups.      (line  23)
* gnus-group-sort-by-real-name:          Sorting Groups.      (line  14)
* gnus-group-sort-by-score:              Sorting Groups.      (line  20)
* gnus-group-sort-by-server:             Sorting Groups.      (line  34)
* gnus-group-sort-by-unread:             Sorting Groups.      (line  28)
* gnus-group-sort-function:              Sorting Groups.      (line   6)
* gnus-group-sort-groups:                Sorting Groups.      (line   6)
* gnus-group-sort-groups-by-alphabet:    Sorting Groups.      (line  44)
* gnus-group-sort-groups-by-level:       Sorting Groups.      (line  52)
* gnus-group-sort-groups-by-method:      Sorting Groups.      (line  64)
* gnus-group-sort-groups-by-rank:        Sorting Groups.      (line  60)
* gnus-group-sort-groups-by-real-name:   Sorting Groups.      (line  68)
* gnus-group-sort-groups-by-score:       Sorting Groups.      (line  56)
* gnus-group-sort-groups-by-unread:      Sorting Groups.      (line  48)
* gnus-group-sort-selected-groups:       Sorting Groups.      (line 108)
* gnus-group-sort-selected-groups-by-alphabet: Sorting Groups.
                                                              (line  80)
* gnus-group-sort-selected-groups-by-level: Sorting Groups.   (line  88)
* gnus-group-sort-selected-groups-by-method: Sorting Groups.  (line 100)
* gnus-group-sort-selected-groups-by-rank: Sorting Groups.    (line  96)
* gnus-group-sort-selected-groups-by-real-name: Sorting Groups.
                                                              (line 104)
* gnus-group-sort-selected-groups-by-score: Sorting Groups.   (line  92)
* gnus-group-sort-selected-groups-by-unread: Sorting Groups.  (line  84)
* gnus-group-spam-exit-processor-blacklist: Blacklists and Whitelists.
                                                              (line  28)
* gnus-group-spam-exit-processor-bogofilter: Bogofilter.      (line  43)
* gnus-group-spam-exit-processor-report-gmane: Gmane Spam Reporting.
                                                              (line   6)
* gnus-group-spam-exit-processor-spamoracle: SpamOracle.      (line  62)
* gnus-group-spam-exit-processor-stat:   Spam Statistics Filtering.
                                                              (line  14)
* gnus-group-split:                      Group Mail Splitting.
                                                              (line   6)
* gnus-group-split-default-catch-all-group: Group Mail Splitting.
                                                              (line  34)
* gnus-group-split-fancy:                Group Mail Splitting.
                                                              (line  70)
* gnus-group-split-setup:                Group Mail Splitting.
                                                              (line  86)
* gnus-group-split-update:               Group Mail Splitting.
                                                              (line  95)
* gnus-group-split-updated-hook:         Group Mail Splitting.
                                                              (line 109)
* gnus-group-suspend:                    Exiting Gnus.        (line   9)
* gnus-group-toggle-subscription:        Subscription Commands.
                                                              (line  19)
* gnus-group-toggle-subscription-at-point: Subscription Commands.
                                                              (line  14)
* gnus-group-tool-bar:                   Gravatars.           (line  39)
* gnus-group-transpose-groups:           Subscription Commands.
                                                              (line  31)
* gnus-group-uncollapsed-levels:         Group Line Specification.
                                                              (line 130)
* gnus-group-universal-argument:         Marking Groups.      (line  43)
* gnus-group-unmark-all-groups:          Marking Groups.      (line  28)
* gnus-group-unmark-group:               Marking Groups.      (line  24)
* gnus-group-unread:                     Gnus Utility Functions.
                                                              (line  28)
* gnus-group-update-hook:                Group Highlighting.  (line  65)
* gnus-group-use-permanent-levels:       Group Levels.        (line  83)
* gnus-group-visible-select-group:       Selecting a Group.   (line  43)
* gnus-group-yank-group:                 Subscription Commands.
                                                              (line  28)
* gnus-ham-process-destinations:         Spam Package Introduction.
                                                              (line  92)
* gnus-ham-process-destinations <1>:     Spam and Ham Processors.
                                                              (line  75)
* gnus-header-button-alist:              Article Buttons.     (line  55)
* gnus-header-face-alist:                Article Highlighting.
                                                              (line  15)
* gnus-hidden-properties:                Various Various.     (line  76)
* gnus-hierarchial-home-score-file:      Home Score File.     (line  47)
* gnus-home-adapt-file:                  Home Score File.     (line  67)
* gnus-home-directory:                   Various Various.     (line   7)
* gnus-home-score-file:                  Home Score File.     (line  15)
* gnus-html-frame-width:                 HTML.                (line  47)
* gnus-html-prefetch-images:             Asynchronous Fetching.
                                                              (line  68)
* gnus-html-show-images:                 Article Display.     (line  66)
* gnus-ignored-adaptive-words:           Adaptive Scoring.    (line 111)
* gnus-ignored-from-addresses:           To From Newsgroups.  (line  28)
* gnus-ignored-headers:                  Hiding Headers.      (line  34)
* gnus-ignored-mime-types:               MIME Commands.       (line 112)
* gnus-ignored-newsgroups:               The Active File.     (line  10)
* gnus-info-find-node:                   Group Information.   (line  23)
* gnus-info-find-node <1>:               Summary Group Information.
                                                              (line  16)
* gnus-info-group:                       Group Info.          (line  57)
* gnus-info-level:                       Group Info.          (line  65)
* gnus-info-marks:                       Group Info.          (line  77)
* gnus-info-method:                      Group Info.          (line  81)
* gnus-info-params:                      Group Info.          (line  85)
* gnus-info-rank:                        Group Info.          (line  61)
* gnus-info-read:                        Group Info.          (line  73)
* gnus-info-score:                       Group Info.          (line  69)
* gnus-info-set-group:                   Group Info.          (line  57)
* gnus-info-set-level:                   Group Info.          (line  65)
* gnus-info-set-marks:                   Group Info.          (line  77)
* gnus-info-set-method:                  Group Info.          (line  81)
* gnus-info-set-params:                  Group Info.          (line  85)
* gnus-info-set-rank:                    Group Info.          (line  61)
* gnus-info-set-read:                    Group Info.          (line  73)
* gnus-info-set-score:                   Group Info.          (line  69)
* gnus-inhibit-images:                   Misc Article.        (line  93)
* gnus-inhibit-mime-unbuttonizing:       MIME Commands.       (line 161)
* gnus-inhibit-slow-scoring:             Scoring On Other Headers.
                                                              (line  12)
* gnus-inhibit-startup-message:          Startup Variables.   (line  34)
* gnus-inhibit-user-auto-expire:         Expiring Mail.       (line 176)
* gnus-init-file:                        Startup Files.       (line  66)
* gnus-init-file <1>:                    File Commands.       (line   7)
* gnus-insert-pseudo-articles:           Viewing Files.       (line  32)
* gnus-insert-random-x-face-header:      X-Face.              (line  74)
* gnus-interactive:                      Extended Interactive.
                                                              (line   6)
* gnus-interactive-catchup:              Interactive.         (line  22)
* gnus-interactive-exit:                 Interactive.         (line  26)
* gnus-invalid-group-regexp:             Various Various.     (line  90)
* gnus-jog-cache:                        Article Caching.     (line  37)
* gnus-keep-backlog:                     Article Backlog.     (line  15)
* gnus-keep-same-level:                  Group Levels.        (line  65)
* gnus-kill-file-mark:                   Read Articles.       (line  23)
* gnus-kill-file-mode-hook:              Kill Files.          (line  70)
* gnus-kill-file-name:                   Kill Files.          (line  51)
* gnus-kill-files-directory:             Score Variables.     (line  20)
* gnus-kill-killed:                      Score Variables.     (line  11)
* gnus-kill-save-kill-file:              Kill Files.          (line  57)
* gnus-kill-sticky-article-buffer:       Sticky Articles.     (line  31)
* gnus-kill-sticky-article-buffers:      Sticky Articles.     (line  35)
* gnus-kill-summary-on-exit:             Exiting the Summary Buffer.
                                                              (line  73)
* gnus-killed-mark:                      Read Articles.       (line  20)
* gnus-large-ephemeral-newsgroup:        Selecting a Group.   (line  63)
* gnus-large-newsgroup:                  Selecting a Group.   (line  54)
* gnus-level-default-subscribed:         Group Levels.        (line  59)
* gnus-level-default-unsubscribed:       Group Levels.        (line  59)
* gnus-level-killed:                     Group Levels.        (line  20)
* gnus-level-subscribed:                 Group Levels.        (line  20)
* gnus-level-unsubscribed:               Group Levels.        (line  20)
* gnus-level-zombie:                     Group Levels.        (line  20)
* gnus-list-groups-with-ticked-articles: Listing Groups.      (line  90)
* gnus-list-identifiers:                 Group Parameters.    (line 347)
* gnus-list-identifiers <1>:             Article Hiding.      (line  27)
* gnus-list-identifiers <2>:             Article Hiding.      (line  34)
* gnus-low-score-mark:                   Read Articles.       (line  26)
* gnus-mail-save-name:                   Saving Articles.     (line 102)
* gnus-mailing-list-archive:             Mailing List.        (line  32)
* gnus-mailing-list-groups:              Mail and Post.       (line   9)
* gnus-mailing-list-help:                Mailing List.        (line  13)
* gnus-mailing-list-insinuate:           Mailing List.        (line   6)
* gnus-mailing-list-mode:                Group Parameters.    (line  65)
* gnus-mailing-list-owner:               Mailing List.        (line  28)
* gnus-mailing-list-post:                Mailing List.        (line  25)
* gnus-mailing-list-subscribe:           Mailing List.        (line  17)
* gnus-mailing-list-unsubscribe:         Mailing List.        (line  21)
* gnus-make-predicate:                   Predicate Specifiers.
                                                              (line  21)
* gnus-mark-article-hook:                Choosing Variables.  (line  21)
* gnus-mark-article-hook <1>:            Expiring Mail.       (line  64)
* gnus-mark-copied-or-moved-articles-as-expirable: Expiring Mail.
                                                              (line 180)
* gnus-mark-unpicked-articles-as-read:   Pick and Read.       (line  57)
* gnus-max-image-proportion:             HTML.                (line  50)
* gnus-message-archive-group:            Archived Messages.   (line  49)
* gnus-message-archive-method:           Archived Messages.   (line  15)
* gnus-message-highlight-citation:       Mail and Post.       (line  49)
* gnus-message-replyencrypt:             Signing and encrypting.
                                                              (line  10)
* gnus-message-replysign:                Signing and encrypting.
                                                              (line  10)
* gnus-message-replysignencrypted:       Signing and encrypting.
                                                              (line  10)
* gnus-mime-action-on-part:              Using MIME.          (line 103)
* gnus-mime-buttonize-attachments-in-header: MIME Commands.   (line  66)
* gnus-mime-copy-part:                   Using MIME.          (line  66)
* gnus-mime-delete-part:                 Using MIME.          (line  61)
* gnus-mime-display-attachment-buttons-in-header: MIME Commands.
                                                              (line  66)
* gnus-mime-display-multipart-alternative-as-mixed: MIME Commands.
                                                              (line 185)
* gnus-mime-display-multipart-as-mixed:  MIME Commands.       (line 197)
* gnus-mime-display-multipart-related-as-mixed: MIME Commands.
                                                              (line 188)
* gnus-mime-inline-part:                 Using MIME.          (line  80)
* gnus-mime-multipart-functions:         MIME Commands.       (line 182)
* gnus-mime-pipe-part:                   Using MIME.          (line 100)
* gnus-mime-print-part:                  Using MIME.          (line  76)
* gnus-mime-replace-part:                Using MIME.          (line  56)
* gnus-mime-save-part:                   Using MIME.          (line  44)
* gnus-mime-save-part-and-strip:         Using MIME.          (line  48)
* gnus-mime-view-all-parts:              MIME Commands.       (line 106)
* gnus-mime-view-part:                   Using MIME.          (line  31)
* gnus-mime-view-part-as-charset:        Using MIME.          (line  40)
* gnus-mime-view-part-as-type:           Using MIME.          (line  36)
* gnus-mime-view-part-externally:        Using MIME.          (line  96)
* gnus-mime-view-part-internally:        Using MIME.          (line  91)
* gnus-mode-non-string-length:           Mode Lines.          (line  13)
* gnus-mouse-face:                       Formatting Fonts.    (line   6)
* gnus-mouse-face <1>:                   Highlighting and Menus.
                                                              (line  52)
* gnus-move-split-methods:               Mail Group Commands. (line  96)
* gnus-narrow-to-body:                   Gnus Utility Functions.
                                                              (line  81)
* gnus-new-mail-mark:                    Group Line Specification.
                                                              (line 136)
* gnus-news-group-p:                     Gnus Utility Functions.
                                                              (line  50)
* gnus-newsgroup-ignored-charsets:       Charsets.            (line  18)
* gnus-newsgroup-maximum-articles:       Selecting a Group.   (line  66)
* gnus-newsgroup-name:                   Gnus Utility Functions.
                                                              (line  11)
* gnus-newsgroup-variables:              Various Summary Stuff.
                                                              (line  65)
* gnus-nntpserver-file:                  Finding the News.    (line  34)
* gnus-no-groups-message:                Startup Variables.   (line  40)
* gnus-no-server:                        The Server is Down.  (line  18)
* gnus-not-empty-thread-mark:            Other Marks.         (line  50)
* gnus-nov-is-evil:                      Slow/Expensive Connection.
                                                              (line  18)
* gnus-novice-user:                      Interactive.         (line   7)
* gnus-numeric-save-name:                Saving Articles.     (line 107)
* gnus-Numeric-save-name:                Saving Articles.     (line 187)
* gnus-numeric-save-name <1>:            Saving Articles.     (line 190)
* gnus-options-not-subscribe:            Filtering New Groups.
                                                              (line  25)
* gnus-options-subscribe:                Filtering New Groups.
                                                              (line  25)
* gnus-other-frame:                      Starting Up.         (line  16)
* gnus-outlook-deuglify-unwrap-max:      Article Washing.     (line  92)
* gnus-outlook-deuglify-unwrap-min:      Article Washing.     (line  92)
* gnus-page-delimiter:                   Misc Article.        (line  82)
* gnus-paging-select-next:               Summary Maneuvering. (line  58)
* gnus-parameters:                       Group Parameters.    (line 373)
* gnus-parameters-case-fold-search:      Group Parameters.    (line 404)
* gnus-parse-headers-hook:               Low-Level Threading. (line   7)
* gnus-parse-headers-hook <1>:           Various Various.     (line  81)
* gnus-part-display-hook:                Customizing Articles.
                                                              (line 179)
* gnus-permanently-visible-groups:       Listing Groups.      (line  85)
* gnus-permanently-visible-groups <1>:   Misc Group Stuff.    (line  76)
* gnus-pick-article-or-thread:           Pick and Read.       (line  19)
* gnus-pick-display-summary:             Pick and Read.       (line  42)
* gnus-pick-mode:                        Pick and Read.       (line  11)
* gnus-pick-mode-hook:                   Pick and Read.       (line  55)
* gnus-pick-next-page:                   Pick and Read.       (line  30)
* gnus-pick-start-reading:               Pick and Read.       (line  42)
* gnus-pick-unmark-article-or-thread.:   Pick and Read.       (line  34)
* gnus-picon-databases:                  Picons.              (line  20)
* gnus-picon-databases <1>:              Picons.              (line  40)
* gnus-picon-domain-directories:         Picons.              (line  54)
* gnus-picon-file-types:                 Picons.              (line  59)
* gnus-picon-inhibit-top-level-domains:  Picons.              (line  63)
* gnus-picon-news-directories:           Picons.              (line  46)
* gnus-picon-properties:                 Picons.              (line  34)
* gnus-picon-style:                      Picons.              (line  30)
* gnus-picon-user-directories:           Picons.              (line  50)
* gnus-plain-save-name:                  Saving Articles.     (line  93)
* gnus-Plain-save-name:                  Saving Articles.     (line 193)
* gnus-plain-save-name <1>:              Saving Articles.     (line 196)
* gnus-post-method:                      Posting Server.      (line  13)
* gnus-posting-styles:                   Posting Styles.      (line  12)
* gnus-prefetched-article-deletion-strategy: Asynchronous Fetching.
                                                              (line  76)
* gnus-preserve-marks:                   Mail Group Commands. (line  30)
* gnus-process-mark:                     Other Marks.         (line  54)
* gnus-prompt-before-saving:             Saving Articles.     (line  76)
* gnus-ps-print-hook:                    Article Commands.    (line   7)
* gnus-random-x-face:                    X-Face.              (line  68)
* gnus-read-active-file:                 The Active File.     (line  17)
* gnus-read-all-available-headers:       Filling In Threads.  (line  49)
* gnus-read-ephemeral-debian-bug-group:  Foreign Groups.      (line 131)
* gnus-read-ephemeral-emacs-bug-group:   Foreign Groups.      (line 125)
* gnus-read-mark:                        Read Articles.       (line  13)
* gnus-read-method:                      Gnus Utility Functions.
                                                              (line  91)
* gnus-read-newsrc-file:                 Startup Files.       (line  24)
* gnus-refer-article-method:             Finding the Parent.  (line  70)
* gnus-refer-article-method <1>:         Registry Article Refer Method.
                                                              (line  11)
* gnus-refer-thread-limit:               Finding the Parent.  (line  43)
* gnus-refer-thread-limit-to-thread:     Finding the Parent.  (line  49)
* gnus-refer-thread-use-search:          Finding the Parent.  (line  39)
* gnus-registry-cache-file:              Gnus Registry Setup. (line  83)
* gnus-registry-default-sort-function:   Gnus Registry Setup. (line  75)
* gnus-registry-extra-entries-precious:  Store arbitrary data.
                                                              (line  17)
* gnus-registry-get-id-key:              Store arbitrary data.
                                                              (line  12)
* gnus-registry-marks:                   Store custom flags and keywords.
                                                              (line  10)
* gnus-registry-max-entries:             Gnus Registry Setup. (line  50)
* gnus-registry-prune-factor:            Gnus Registry Setup. (line  64)
* gnus-registry-register-all:            Gnus Registry Setup. (line  55)
* gnus-registry-set-article-mark:        Store custom flags and keywords.
                                                              (line  22)
* gnus-registry-set-id-key:              Store arbitrary data.
                                                              (line   9)
* gnus-registry-split-strategy:          Fancy splitting to parent.
                                                              (line  47)
* gnus-registry-track-extra:             Fancy splitting to parent.
                                                              (line  37)
* gnus-registry-unfollowed-groups:       Gnus Registry Setup. (line  42)
* gnus-replied-mark:                     Other Marks.         (line  15)
* gnus-rmail-save-name:                  Saving Articles.     (line  93)
* gnus-safe-html-newsgroups:             Various Various.     (line 100)
* gnus-save-all-headers:                 Saving Articles.     (line  17)
* gnus-save-duplicate-list:              Duplicate Suppression.
                                                              (line  44)
* gnus-save-killed-list:                 Startup Files.       (line  34)
* gnus-save-newsrc-file:                 Startup Files.       (line  24)
* gnus-save-newsrc-hook:                 Startup Files.       (line  52)
* gnus-save-quick-newsrc-hook:           Startup Files.       (line  52)
* gnus-save-score:                       Score Variables.     (line  39)
* gnus-save-standard-newsrc-hook:        Startup Files.       (line  52)
* gnus-saved-headers:                    Saving Articles.     (line  20)
* gnus-saved-mark:                       Other Marks.         (line  25)
* gnus-score-after-write-file-function:  Score Variables.     (line 132)
* gnus-score-below-mark:                 Score Variables.     (line  68)
* gnus-score-change-score-file:          Summary Score Commands.
                                                              (line  43)
* gnus-score-customize:                  Summary Score Commands.
                                                              (line  60)
* gnus-score-decay-constant:             Score Decays.        (line  32)
* gnus-score-decay-scale:                Score Decays.        (line  32)
* gnus-score-edit-all-score:             Group Score Commands.
                                                              (line   9)
* gnus-score-edit-current-scores:        Summary Score Commands.
                                                              (line  47)
* gnus-score-edit-exit:                  Score File Editing.  (line  14)
* gnus-score-edit-file:                  Summary Score Commands.
                                                              (line  52)
* gnus-score-edit-insert-date:           Score File Editing.  (line  18)
* gnus-score-exact-adapt-limit:          Adaptive Scoring.    (line  87)
* gnus-score-expiry-days:                Score Variables.     (line 119)
* gnus-score-file-suffix:                Score Variables.     (line  25)
* gnus-score-find-bnews:                 Score Variables.     (line  81)
* gnus-score-find-favorite-words:        Summary Score Commands.
                                                              (line  34)
* gnus-score-find-hierarchical:          Score Variables.     (line  99)
* gnus-score-find-score-files-function:  Score Variables.     (line  72)
* gnus-score-find-single:                Score Variables.     (line  78)
* gnus-score-find-trace:                 Summary Score Commands.
                                                              (line  27)
* gnus-score-flush-cache:                Summary Score Commands.
                                                              (line  56)
* gnus-score-flush-cache <1>:            Group Score Commands.
                                                              (line  13)
* gnus-score-followup-article:           Followups To Yourself.
                                                              (line  14)
* gnus-score-followup-thread:            Followups To Yourself.
                                                              (line  18)
* gnus-score-interactive-default-score:  Score Variables.     (line  48)
* gnus-score-menu-hook:                  Highlighting and Menus.
                                                              (line  74)
* gnus-score-mimic-keymap:               Summary Score Commands.
                                                              (line 211)
* gnus-score-mode-hook:                  Score File Editing.  (line  30)
* gnus-score-over-mark:                  Score Variables.     (line  64)
* gnus-score-pretty-print:               Score File Editing.  (line  23)
* gnus-score-search-global-directories:  Global Score Files.  (line  27)
* gnus-score-set-expunge-below:          Summary Score Commands.
                                                              (line  70)
* gnus-score-set-mark-below:             Summary Score Commands.
                                                              (line  66)
* gnus-score-thread-simplify:            Score Variables.     (line 135)
* gnus-score-uncacheable-files:          Score Variables.     (line  29)
* gnus-search-contact-tables:            Search Queries.      (line  71)
* gnus-search-date-keys:                 Search Queries.      (line  79)
* gnus-search-default-engines:           Search Engines.      (line  13)
* gnus-search-ignored-newsgroups:        Creating Search Groups.
                                                              (line  42)
* gnus-search-use-parsed-queries:        Searching.           (line  33)
* gnus-search-use-parsed-queries <1>:    Search Queries.      (line  12)
* gnus-secondary-select-methods:         Finding the News.    (line  48)
* gnus-select-article-hook:              Choosing Variables.  (line  15)
* gnus-select-group-hook:                Selecting a Group.   (line  83)
* gnus-select-method:                    Finding the News.    (line  15)
* gnus-selected-tree-face:               Tree Display.        (line  22)
* gnus-sender-save-name:                 Saving Articles.     (line 199)
* gnus-server-add-server:                Server Commands.     (line  16)
* gnus-server-close-all-servers:         Unavailable Servers. (line  44)
* gnus-server-close-server:              Unavailable Servers. (line  32)
* gnus-server-compact-server:            Server Commands.     (line  53)
* gnus-server-copy-server:               Server Commands.     (line  37)
* gnus-server-copy-server <1>:           Unavailable Servers. (line  52)
* gnus-server-deny-server:               Unavailable Servers. (line  36)
* gnus-server-edit-server:               Server Commands.     (line  19)
* gnus-server-equal:                     Gnus Utility Functions.
                                                              (line  59)
* gnus-server-exit:                      Server Commands.     (line  28)
* gnus-server-kill-server:               Server Commands.     (line  31)
* gnus-server-line-format:               Server Buffer Format.
                                                              (line   6)
* gnus-server-list-servers:              Server Commands.     (line  40)
* gnus-server-menu-hook:                 Highlighting and Menus.
                                                              (line  68)
* gnus-server-mode-hook:                 Server Buffer.       (line  39)
* gnus-server-mode-line-format:          Server Buffer Format.
                                                              (line  25)
* gnus-server-offline-server:            Unavailable Servers. (line  58)
* gnus-server-open-all-servers:          Unavailable Servers. (line  40)
* gnus-server-open-server:               Unavailable Servers. (line  28)
* gnus-server-read-server:               Server Commands.     (line  25)
* gnus-server-regenerate-server:         Server Commands.     (line  48)
* gnus-server-remove-denials:            Unavailable Servers. (line  48)
* gnus-server-scan-server:               Server Commands.     (line  43)
* gnus-server-show-server:               Server Commands.     (line  22)
* gnus-server-to-method:                 Gnus Utility Functions.
                                                              (line  56)
* gnus-server-unopen-status:             Agent Variables.     (line  88)
* gnus-server-yank-server:               Server Commands.     (line  34)
* gnus-set-active:                       Gnus Utility Functions.
                                                              (line  35)
* gnus-setup-news-hook:                  Startup Variables.   (line  21)
* gnus-shell-command-separator:          Various Various.     (line  87)
* gnus-show-all-headers:                 Hiding Headers.      (line   9)
* gnus-show-threads:                     More Threading.      (line   7)
* gnus-sieve-crosspost:                  Sieve Commands.      (line  18)
* gnus-sieve-file:                       Sieve Commands.      (line  12)
* gnus-sieve-file <1>:                   Sieve Commands.      (line  35)
* gnus-sieve-file <2>:                   Sieve Commands.      (line  39)
* gnus-sieve-generate:                   Sieve Commands.      (line  35)
* gnus-sieve-region-end:                 Sieve Commands.      (line  12)
* gnus-sieve-region-start:               Sieve Commands.      (line  12)
* gnus-sieve-update:                     Sieve Commands.      (line  39)
* gnus-signature-face:                   Article Highlighting.
                                                              (line  71)
* gnus-signature-limit:                  Article Signature.   (line  27)
* gnus-signature-separator:              Article Highlighting.
                                                              (line  71)
* gnus-signature-separator <1>:          Article Signature.   (line   6)
* gnus-simplify-all-whitespace:          Loose Threads.       (line 109)
* gnus-simplify-ignored-prefixes:        Loose Threads.       (line  70)
* gnus-simplify-subject-functions:       Loose Threads.       (line  92)
* gnus-simplify-subject-fuzzy:           Loose Threads.       (line 103)
* gnus-simplify-subject-fuzzy-regexp:    Loose Threads.       (line  65)
* gnus-simplify-subject-re:              Loose Threads.       (line 100)
* gnus-simplify-whitespace:              Loose Threads.       (line 106)
* gnus-single-article-buffer:            Misc Article.        (line   7)
* gnus-site-init-file:                   Startup Files.       (line  66)
* gnus-smiley-file-types:                Smileys.             (line  38)
* gnus-sort-gathered-threads-function:   More Threading.      (line  50)
* gnus-sorted-header-list:               Hiding Headers.      (line  50)
* gnus-spam-mark:                        Spam and Ham Processors.
                                                              (line  31)
* gnus-spam-newsgroup-contents:          Spam and Ham Processors.
                                                              (line  18)
* gnus-spam-process-destinations:        Spam Package Introduction.
                                                              (line  92)
* gnus-spam-process-destinations <1>:    Spam and Ham Processors.
                                                              (line 110)
* gnus-spam-process-newsgroups:          Spam and Ham Processors.
                                                              (line   6)
* gnus-sparse-mark:                      Read Articles.       (line  35)
* gnus-split-methods:                    Saving Articles.     (line 201)
* gnus-start-date-timer:                 Article Date.        (line  33)
* gnus-started-hook:                     Startup Variables.   (line  17)
* gnus-startup-file:                     Startup Files.       (line  46)
* gnus-startup-hook:                     Startup Variables.   (line  14)
* gnus-sticky-article:                   Sticky Articles.     (line  21)
* gnus-stop-date-timer:                  Article Date.        (line  33)
* gnus-subscribe-alphabetically:         Subscription Methods.
                                                              (line  25)
* gnus-subscribe-hierarchical-interactive: Subscription Methods.
                                                              (line  57)
* gnus-subscribe-hierarchically:         Subscription Methods.
                                                              (line  28)
* gnus-subscribe-interactively:          Subscription Methods.
                                                              (line  37)
* gnus-subscribe-killed:                 Subscription Methods.
                                                              (line  42)
* gnus-subscribe-newsgroup-method:       Subscription Methods.
                                                              (line   6)
* gnus-subscribe-options-newsgroup-method: Filtering New Groups.
                                                              (line  12)
* gnus-subscribe-randomly:               Subscription Methods.
                                                              (line  21)
* gnus-subscribe-topics:                 Subscription Methods.
                                                              (line  45)
* gnus-subscribe-zombies:                Subscription Methods.
                                                              (line  15)
* gnus-sum-closing-bracket:              Summary Buffer Lines.
                                                              (line 127)
* gnus-sum-opening-bracket:              Summary Buffer Lines.
                                                              (line 116)
* gnus-sum-opening-bracket-adopted:      Summary Buffer Lines.
                                                              (line 120)
* gnus-sum-opening-bracket-adopted <1>:  Summary Buffer Lines.
                                                              (line 131)
* gnus-sum-thread-tree-false-root:       Summary Buffer Lines.
                                                              (line  88)
* gnus-sum-thread-tree-indent:           Summary Buffer Lines.
                                                              (line  99)
* gnus-sum-thread-tree-leaf-with-other:  Summary Buffer Lines.
                                                              (line 102)
* gnus-sum-thread-tree-root:             Summary Buffer Lines.
                                                              (line  84)
* gnus-sum-thread-tree-single-indent:    Summary Buffer Lines.
                                                              (line  92)
* gnus-sum-thread-tree-single-leaf:      Summary Buffer Lines.
                                                              (line 105)
* gnus-sum-thread-tree-vertical:         Summary Buffer Lines.
                                                              (line  96)
* gnus-summary-article-posted-p:         Mail Group Commands. (line  80)
* gnus-summary-attach-article:           Summary Message Commands.
                                                              (line  13)
* gnus-summary-beginning-of-article:     Paging the Article.  (line  50)
* gnus-summary-best-unread-article:      Choosing Commands.   (line  60)
* gnus-summary-browse-url:               Article Commands.    (line  21)
* gnus-summary-bubble-group:             Group Score.         (line  20)
* gnus-summary-caesar-message:           Article Washing.     (line  34)
* gnus-summary-cancel-article:           Canceling and Superseding.
                                                              (line  11)
* gnus-summary-catchup:                  Setting Marks.       (line  45)
* gnus-summary-catchup-all:              Setting Marks.       (line  48)
* gnus-summary-catchup-all-and-exit:     Exiting the Summary Buffer.
                                                              (line  31)
* gnus-summary-catchup-and-exit:         Exiting the Summary Buffer.
                                                              (line  27)
* gnus-summary-catchup-and-goto-next-group: Exiting the Summary Buffer.
                                                              (line  35)
* gnus-summary-catchup-and-goto-prev-group: Exiting the Summary Buffer.
                                                              (line  39)
* gnus-summary-catchup-from-here:        Setting Marks.       (line  56)
* gnus-summary-catchup-to-here:          Setting Marks.       (line  52)
* gnus-summary-check-current:            Summary Maneuvering. (line  66)
* gnus-summary-clear-above:              Setting Marks.       (line  81)
* gnus-summary-clear-mark-forward:       Setting Marks.       (line  10)
* gnus-summary-copy-article:             Mail Group Commands. (line  35)
* gnus-summary-create-article:           Mail Group Commands. (line  51)
* gnus-summary-crosspost-article:        Mail Group Commands. (line  40)
* gnus-summary-current-score:            Summary Score Commands.
                                                              (line  23)
* gnus-summary-customize-parameters:     Really Various Summary Commands.
                                                              (line  59)
* gnus-summary-default-score:            Score Variables.     (line  55)
* gnus-summary-delete-article:           Mail Group Commands. (line  25)
* gnus-summary-describe-briefly:         Summary Group Information.
                                                              (line  12)
* gnus-summary-describe-group:           Summary Group Information.
                                                              (line   7)
* gnus-summary-display-arrow:            Various Summary Stuff.
                                                              (line  19)
* gnus-summary-display-while-building:   Various Summary Stuff.
                                                              (line  13)
* gnus-summary-down-thread:              Thread Commands.     (line  73)
* gnus-summary-dummy-line-format:        Loose Threads.       (line  24)
* gnus-summary-edit-article:             Mail Group Commands. (line  65)
* gnus-summary-edit-article-done:        Mail Group Commands. (line  65)
* gnus-summary-edit-global-kill:         Kill Files.          (line  38)
* gnus-summary-edit-local-kill:          Kill Files.          (line  35)
* gnus-summary-edit-parameters:          Really Various Summary Commands.
                                                              (line  55)
* gnus-summary-end-of-article:           Paging the Article.  (line  55)
* gnus-summary-enter-digest-group:       Really Various Summary Commands.
                                                              (line   8)
* gnus-summary-execute-command:          Searching for Articles.
                                                              (line  23)
* gnus-summary-exit:                     Exiting the Summary Buffer.
                                                              (line  12)
* gnus-summary-exit-hook:                Exiting the Summary Buffer.
                                                              (line  12)
* gnus-summary-exit-no-update:           Exiting the Summary Buffer.
                                                              (line  22)
* gnus-summary-expand-window:            Really Various Summary Commands.
                                                              (line  51)
* gnus-summary-expire-articles:          Mail Group Commands. (line  13)
* gnus-summary-expire-articles-now:      Mail Group Commands. (line  19)
* gnus-summary-expunge-below:            Score Variables.     (line  58)
* gnus-summary-first-unread-article:     Choosing Commands.   (line  55)
* gnus-summary-followup:                 Summary Post Commands.
                                                              (line  16)
* gnus-summary-followup-to-mail:         Summary Post Commands.
                                                              (line  25)
* gnus-summary-followup-to-mail-with-original: Summary Post Commands.
                                                              (line  29)
* gnus-summary-followup-with-original:   Summary Post Commands.
                                                              (line  20)
* gnus-summary-force-verify-and-decrypt: Article Washing.     (line 215)
* gnus-summary-gather-exclude-subject:   Loose Threads.       (line 114)
* gnus-summary-gather-subject-limit:     Loose Threads.       (line  49)
* gnus-summary-generate-hook:            Various Summary Stuff.
                                                              (line  26)
* gnus-summary-goto-article:             Choosing Commands.   (line  79)
* gnus-summary-goto-last-article:        Choosing Commands.   (line  67)
* gnus-summary-goto-subject:             Summary Maneuvering. (line  22)
* gnus-summary-goto-unread:              Setting Marks.       (line  93)
* gnus-summary-goto-unread <1>:          Process/Prefix.      (line  37)
* gnus-summary-hide-all-threads:         Thread Commands.     (line  44)
* gnus-summary-hide-thread:              Thread Commands.     (line  38)
* gnus-summary-highlight:                Summary Highlighting.
                                                              (line  20)
* gnus-summary-idna-message:             Article Washing.     (line  49)
* gnus-summary-ignore-duplicates:        Various Summary Stuff.
                                                              (line  42)
* gnus-summary-import-article:           Mail Group Commands. (line  46)
* gnus-summary-increase-score:           Summary Score Commands.
                                                              (line  78)
* gnus-summary-insert-cached-articles:   Summary Generation Commands.
                                                              (line  10)
* gnus-summary-insert-dormant-articles:  Summary Generation Commands.
                                                              (line  14)
* gnus-summary-insert-new-articles:      Limiting.            (line 141)
* gnus-summary-insert-old-articles:      Limiting.            (line 145)
* gnus-summary-insert-ticked-articles:   Summary Generation Commands.
                                                              (line  18)
* gnus-summary-isearch-article:          Paging the Article.  (line  59)
* gnus-summary-kill-below:               Setting Marks.       (line  64)
* gnus-summary-kill-process-mark:        Setting Process Marks.
                                                              (line  73)
* gnus-summary-kill-same-subject:        Setting Marks.       (line  41)
* gnus-summary-kill-same-subject-and-select: Setting Marks.   (line  35)
* gnus-summary-kill-thread:              Thread Commands.     (line   8)
* gnus-summary-limit-exclude-childless-dormant: Limiting.     (line 119)
* gnus-summary-limit-exclude-dormant:    Limiting.            (line 109)
* gnus-summary-limit-exclude-marks:      Limiting.            (line 113)
* gnus-summary-limit-include-cached:     Limiting.            (line 105)
* gnus-summary-limit-include-dormant:    Limiting.            (line 101)
* gnus-summary-limit-include-expunged:   Limiting.            (line  97)
* gnus-summary-limit-include-thread:     Limiting.            (line 116)
* gnus-summary-limit-mark-excluded-as-read: Limiting.         (line 123)
* gnus-summary-limit-to-address:         Limiting.            (line  32)
* gnus-summary-limit-to-age:             Limiting.            (line  60)
* gnus-summary-limit-to-articles:        Limiting.            (line  66)
* gnus-summary-limit-to-author:          Limiting.            (line  22)
* gnus-summary-limit-to-bodies:          Limiting.            (line 128)
* gnus-summary-limit-to-display-predicate: Limiting.          (line  85)
* gnus-summary-limit-to-extra:           Limiting.            (line  43)
* gnus-summary-limit-to-headers:         Limiting.            (line 134)
* gnus-summary-limit-to-marks:           Limiting.            (line  56)
* gnus-summary-limit-to-recipient:       Limiting.            (line  27)
* gnus-summary-limit-to-replied:         Limiting.            (line  91)
* gnus-summary-limit-to-score:           Limiting.            (line  80)
* gnus-summary-limit-to-singletons:      Limiting.            (line  38)
* gnus-summary-limit-to-subject:         Limiting.            (line  17)
* gnus-summary-limit-to-unread:          Limiting.            (line  50)
* gnus-summary-limit-to-unseen:          Limiting.            (line  76)
* gnus-summary-line-format:              Summary Buffer Lines.
                                                              (line   6)
* gnus-summary-line-format <1>:          To From Newsgroups.  (line  46)
* gnus-summary-lower-score:              Summary Score Commands.
                                                              (line  78)
* gnus-summary-lower-thread:             Thread Commands.     (line  15)
* gnus-summary-mail-crosspost-complaint: Summary Mail Commands.
                                                              (line 137)
* gnus-summary-mail-forward:             Summary Mail Commands.
                                                              (line  65)
* gnus-summary-mail-other-window:        Summary Mail Commands.
                                                              (line  79)
* gnus-summary-make-false-root:          Loose Threads.       (line   7)
* gnus-summary-make-false-root-always:   Loose Threads.       (line  24)
* gnus-summary-mark-above:               Setting Marks.       (line  89)
* gnus-summary-mark-as-dormant:          Setting Marks.       (line  21)
* gnus-summary-mark-as-expirable:        Setting Marks.       (line  69)
* gnus-summary-mark-as-processable:      Setting Process Marks.
                                                              (line  14)
* gnus-summary-mark-as-read-backward:    Setting Marks.       (line  30)
* gnus-summary-mark-as-read-forward:     Setting Marks.       (line  26)
* gnus-summary-mark-as-spam:             Spam Package Introduction.
                                                              (line  80)
* gnus-summary-mark-as-spam <1>:         Spam Package Introduction.
                                                              (line  80)
* gnus-summary-mark-below:               Scoring.             (line  12)
* gnus-summary-mark-read-and-unread-as-read: Choosing Variables.
                                                              (line  21)
* gnus-summary-mark-region-as-read:      Setting Marks.       (line  60)
* gnus-summary-mark-unread-as-read:      Choosing Variables.  (line  21)
* gnus-summary-menu-hook:                Highlighting and Menus.
                                                              (line  65)
* gnus-summary-mode-hook:                Various Summary Stuff.
                                                              (line  23)
* gnus-summary-mode-line-format:         Summary Buffer Mode Line.
                                                              (line   6)
* gnus-summary-morse-message:            Article Washing.     (line  46)
* gnus-summary-move-article:             Mail Group Commands. (line  30)
* gnus-summary-muttprint:                Saving Articles.     (line  70)
* gnus-summary-muttprint-program:        Saving Articles.     (line  70)
* gnus-summary-news-other-window:        Summary Mail Commands.
                                                              (line  85)
* gnus-summary-next-article:             Choosing Commands.   (line  30)
* gnus-summary-next-group:               Exiting the Summary Buffer.
                                                              (line  55)
* gnus-summary-next-group-on-exit:       Group Maneuvering.   (line  51)
* gnus-summary-next-page:                Choosing Commands.   (line  13)
* gnus-summary-next-page <1>:            Paging the Article.  (line   7)
* gnus-summary-next-same-subject:        Choosing Commands.   (line  46)
* gnus-summary-next-thread:              Thread Commands.     (line  65)
* gnus-summary-next-unread-article:      Choosing Commands.   (line  22)
* gnus-summary-next-unread-subject:      Summary Maneuvering. (line  13)
* gnus-summary-next-unseen-article:      Choosing Commands.   (line  38)
* gnus-summary-pick-line-format:         Pick and Read.       (line  60)
* gnus-summary-pipe-output:              Saving Articles.     (line  60)
* gnus-summary-pipe-output-default-command: Saving Articles.  (line  60)
* gnus-summary-pop-article:              Choosing Commands.   (line  70)
* gnus-summary-pop-limit:                Limiting.            (line  71)
* gnus-summary-post-forward:             Summary Post Commands.
                                                              (line  35)
* gnus-summary-post-news:                Summary Post Commands.
                                                              (line  10)
* gnus-summary-prepare:                  Summary Generation Commands.
                                                              (line   7)
* gnus-summary-prepare-exit-hook:        Exiting the Summary Buffer.
                                                              (line  12)
* gnus-summary-prepare-hook:             Various Summary Stuff.
                                                              (line  33)
* gnus-summary-prepared-hook:            Various Summary Stuff.
                                                              (line  38)
* gnus-summary-prev-article:             Choosing Commands.   (line  34)
* gnus-summary-prev-group:               Exiting the Summary Buffer.
                                                              (line  59)
* gnus-summary-prev-page:                Paging the Article.  (line  19)
* gnus-summary-prev-same-subject:        Choosing Commands.   (line  50)
* gnus-summary-prev-thread:              Thread Commands.     (line  70)
* gnus-summary-prev-unread-article:      Choosing Commands.   (line  26)
* gnus-summary-prev-unread-subject:      Summary Maneuvering. (line  18)
* gnus-summary-prev-unseen-article:      Choosing Commands.   (line  42)
* gnus-summary-print-article:            Article Commands.    (line   7)
* gnus-summary-raise-thread:             Thread Commands.     (line  19)
* gnus-summary-read-document:            Really Various Summary Commands.
                                                              (line  37)
* gnus-summary-refer-article:            Finding the Parent.  (line  59)
* gnus-summary-refer-parent-article:     Finding the Parent.  (line   7)
* gnus-summary-refer-references:         Finding the Parent.  (line  24)
* gnus-summary-refer-thread:             Finding the Parent.  (line  28)
* gnus-summary-remove-bookmark:          Setting Marks.       (line  77)
* gnus-summary-repair-multipart:         MIME Commands.       (line  76)
* gnus-summary-reparent-children:        Thread Commands.     (line  56)
* gnus-summary-reparent-thread:          Thread Commands.     (line  52)
* gnus-summary-repeat-search-article-backward: Searching for Articles.
                                                              (line  19)
* gnus-summary-repeat-search-article-forward: Searching for Articles.
                                                              (line  15)
* gnus-summary-reply:                    Summary Mail Commands.
                                                              (line  10)
* gnus-summary-reply-broken-reply-to:    Summary Mail Commands.
                                                              (line  51)
* gnus-summary-reply-broken-reply-to-with-original: Summary Mail Commands.
                                                              (line  59)
* gnus-summary-reply-to-list-with-original: Summary Mail Commands.
                                                              (line  33)
* gnus-summary-reply-with-original:      Summary Mail Commands.
                                                              (line  15)
* gnus-summary-rescan-group:             Exiting the Summary Buffer.
                                                              (line  50)
* gnus-summary-rescore:                  Summary Score Commands.
                                                              (line  37)
* gnus-summary-reselect-current-group:   Exiting the Summary Buffer.
                                                              (line  44)
* gnus-summary-resend-bounced-mail:      Summary Mail Commands.
                                                              (line  96)
* gnus-summary-resend-message:           Summary Mail Commands.
                                                              (line 107)
* gnus-summary-resend-message-edit:      Summary Mail Commands.
                                                              (line 126)
* gnus-summary-respool-article:          Mail Group Commands. (line  56)
* gnus-summary-respool-default-method:   Mail Group Commands. (line  56)
* gnus-summary-respool-query:            Mail Group Commands. (line  71)
* gnus-summary-respool-trace:            Mail Group Commands. (line  76)
* gnus-summary-rethread-current:         Thread Commands.     (line  47)
* gnus-summary-same-subject:             Summary Buffer Format.
                                                              (line  25)
* gnus-summary-save-article:             Saving Articles.     (line  26)
* gnus-summary-save-article-body-file:   Saving Articles.     (line  47)
* gnus-summary-save-article-file:        Saving Articles.     (line  39)
* gnus-summary-save-article-folder:      Saving Articles.     (line  51)
* gnus-summary-save-article-mail:        Saving Articles.     (line  30)
* gnus-summary-save-article-rmail:       Saving Articles.     (line  34)
* gnus-summary-save-article-vm:          Saving Articles.     (line  55)
* gnus-summary-save-body-in-file:        Saving Articles.     (line 118)
* gnus-summary-save-in-file:             Saving Articles.     (line 107)
* gnus-summary-save-in-folder:           Saving Articles.     (line 129)
* gnus-summary-save-in-mail:             Saving Articles.     (line 102)
* gnus-summary-save-in-pipe:             Saving Articles.     (line 140)
* gnus-summary-save-in-rmail:            Saving Articles.     (line  93)
* gnus-summary-save-in-vm:               Saving Articles.     (line 136)
* gnus-summary-save-newsrc:              Exiting the Summary Buffer.
                                                              (line  63)
* gnus-summary-save-parts:               MIME Commands.       (line  82)
* gnus-summary-save-process-mark:        Setting Process Marks.
                                                              (line  81)
* gnus-summary-scroll-down:              Paging the Article.  (line  27)
* gnus-summary-scroll-up:                Paging the Article.  (line  23)
* gnus-summary-search-article-backward:  Searching for Articles.
                                                              (line  11)
* gnus-summary-search-article-forward:   Searching for Articles.
                                                              (line   7)
* gnus-summary-select-article-buffer:    Paging the Article.  (line  63)
* gnus-summary-selected-face:            Summary Highlighting.
                                                              (line  16)
* gnus-summary-set-bookmark:             Setting Marks.       (line  73)
* gnus-summary-set-score:                Summary Score Commands.
                                                              (line  20)
* gnus-summary-show-all-threads:         Thread Commands.     (line  41)
* gnus-summary-show-article:             Paging the Article.  (line  32)
* gnus-summary-show-article-charset-alist: Paging the Article.
                                                              (line  32)
* gnus-summary-show-complete-article:    Article Commands.    (line  13)
* gnus-summary-show-thread:              Thread Commands.     (line  34)
* gnus-summary-sort-by-author:           Summary Sorting.     (line  17)
* gnus-summary-sort-by-chars:            Summary Sorting.     (line  35)
* gnus-summary-sort-by-date:             Summary Sorting.     (line  26)
* gnus-summary-sort-by-extra:            Summary Sorting.     (line  47)
* gnus-summary-sort-by-lines:            Summary Sorting.     (line  32)
* gnus-summary-sort-by-marks:            Summary Sorting.     (line  38)
* gnus-summary-sort-by-most-recent-date: Summary Sorting.     (line  29)
* gnus-summary-sort-by-most-recent-number: Summary Sorting.   (line  13)
* gnus-summary-sort-by-newsgroups:       Summary Sorting.     (line  44)
* gnus-summary-sort-by-number:           Summary Sorting.     (line  10)
* gnus-summary-sort-by-original:         Summary Sorting.     (line  55)
* gnus-summary-sort-by-random:           Summary Sorting.     (line  52)
* gnus-summary-sort-by-recipient:        Summary Sorting.     (line  20)
* gnus-summary-sort-by-schedule:         Diary Articles Sorting.
                                                              (line   6)
* gnus-summary-sort-by-score:            Summary Sorting.     (line  41)
* gnus-summary-sort-by-subject:          Summary Sorting.     (line  23)
* gnus-summary-stop-at-end-of-message:   Summary Maneuvering. (line  83)
* gnus-summary-stop-page-breaking:       Article Washing.     (line  29)
* gnus-summary-supersede-article:        Canceling and Superseding.
                                                              (line  32)
* gnus-summary-thread-gathering-function: Loose Threads.      (line 122)
* gnus-summary-tick-above:               Setting Marks.       (line  85)
* gnus-summary-tick-article-forward:     Setting Marks.       (line  16)
* gnus-summary-toggle-display-buttonized: MIME Commands.      (line  87)
* gnus-summary-toggle-header:            Article Washing.     (line  58)
* gnus-summary-toggle-threads:           Thread Commands.     (line  31)
* gnus-summary-toggle-truncation:        Really Various Summary Commands.
                                                              (line  45)
* gnus-summary-tool-bar:                 Gravatars.           (line  43)
* gnus-summary-top-thread:               Thread Commands.     (line  79)
* gnus-summary-universal-argument:       Searching for Articles.
                                                              (line  34)
* gnus-summary-unmark-all-processable:   Setting Process Marks.
                                                              (line  25)
* gnus-summary-unmark-as-processable:    Setting Process Marks.
                                                              (line  21)
* gnus-summary-up-thread:                Thread Commands.     (line  76)
* gnus-summary-update-hook:              Summary Highlighting.
                                                              (line  12)
* gnus-summary-verbose-headers:          Article Washing.     (line  62)
* gnus-summary-very-wide-reply:          Summary Mail Commands.
                                                              (line  38)
* gnus-summary-very-wide-reply-with-original: Summary Mail Commands.
                                                              (line  45)
* gnus-summary-wake-up-the-dead:         Exiting the Summary Buffer.
                                                              (line  73)
* gnus-summary-wide-reply:               Summary Mail Commands.
                                                              (line  20)
* gnus-summary-wide-reply-with-original: Summary Mail Commands.
                                                              (line  27)
* gnus-summary-write-article-file:       Saving Articles.     (line  43)
* gnus-summary-write-body-to-file:       Saving Articles.     (line 123)
* gnus-summary-write-to-file:            Saving Articles.     (line 112)
* gnus-summary-yank-message:             Summary Message Commands.
                                                              (line   7)
* gnus-summary-yank-process-mark:        Setting Process Marks.
                                                              (line  77)
* gnus-summary-zcore-fuzz:               Summary Buffer Lines.
                                                              (line 148)
* gnus-supercite-regexp:                 Article Highlighting.
                                                              (line  45)
* gnus-supercite-secondary-regexp:       Article Highlighting.
                                                              (line  48)
* gnus-suppress-duplicates:              Duplicate Suppression.
                                                              (line  41)
* gnus-suspend-gnus-hook:                Exiting Gnus.        (line  20)
* gnus-symbolic-argument:                Symbolic Prefixes.   (line  19)
* gnus-thread-expunge-below:             More Threading.      (line  30)
* gnus-thread-hide-killed:               More Threading.      (line  36)
* gnus-thread-hide-subtree:              More Threading.      (line  13)
* gnus-thread-ignore-subject:            More Threading.      (line  40)
* gnus-thread-indent-level:              More Threading.      (line  46)
* gnus-thread-operation-ignore-subject:  Thread Commands.     (line  81)
* gnus-thread-score-function:            Sorting the Summary Buffer.
                                                              (line  59)
* gnus-thread-sort-by-author:            Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-date:              Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-most-recent-date:  Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-most-recent-number: Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-newsgroups:        Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-number:            Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-random:            Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-recipient:         Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-schedule:          Diary Articles Sorting.
                                                              (line   6)
* gnus-thread-sort-by-score:             Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-subject:           Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-by-total-score:       Sorting the Summary Buffer.
                                                              (line   6)
* gnus-thread-sort-functions:            Sorting the Summary Buffer.
                                                              (line   6)
* gnus-ticked-mark:                      Unread Articles.     (line  10)
* gnus-topic-copy-group:                 Topic Commands.      (line  82)
* gnus-topic-copy-matching:              Topic Commands.      (line 111)
* gnus-topic-create-topic:               Topic Commands.      (line  21)
* gnus-topic-delete:                     Topic Commands.      (line 139)
* gnus-topic-display-empty-topics:       Topic Variables.     (line  36)
* gnus-topic-display-predicate:          Topic Variables.     (line  39)
* gnus-topic-edit-parameters:            Topic Commands.      (line 152)
* gnus-topic-expire-articles:            Topic Commands.      (line 131)
* gnus-topic-goto-next-topic:            Topic Commands.      (line 146)
* gnus-topic-goto-previous-topic:        Topic Commands.      (line 149)
* gnus-topic-hide-topic:                 Topic Commands.      (line  87)
* gnus-topic-indent:                     Topic Commands.      (line  26)
* gnus-topic-indent-level:               Topic Variables.     (line  30)
* gnus-topic-jump-to-topic:              Topic Commands.      (line  79)
* gnus-topic-kill-group:                 Topic Commands.      (line  40)
* gnus-topic-line-format:                Topic Variables.     (line   9)
* gnus-topic-list-active:                Topic Commands.      (line 142)
* gnus-topic-mark-topic:                 Topic Commands.      (line 119)
* gnus-topic-mode:                       Group Topics.        (line  26)
* gnus-topic-mode-hook:                  Topic Variables.     (line  34)
* gnus-topic-move-group:                 Topic Commands.      (line  74)
* gnus-topic-move-matching:              Topic Commands.      (line 107)
* gnus-topic-remove-group:               Topic Commands.      (line  95)
* gnus-topic-rename:                     Topic Commands.      (line 136)
* gnus-topic-select-group:               Topic Commands.      (line  62)
* gnus-topic-show-topic:                 Topic Commands.      (line  91)
* gnus-topic-sort-groups:                Topic Sorting.       (line  38)
* gnus-topic-sort-groups-by-alphabet:    Topic Sorting.       (line  10)
* gnus-topic-sort-groups-by-level:       Topic Sorting.       (line  18)
* gnus-topic-sort-groups-by-method:      Topic Sorting.       (line  30)
* gnus-topic-sort-groups-by-rank:        Topic Sorting.       (line  26)
* gnus-topic-sort-groups-by-score:       Topic Sorting.       (line  22)
* gnus-topic-sort-groups-by-server:      Topic Sorting.       (line  34)
* gnus-topic-sort-groups-by-unread:      Topic Sorting.       (line  14)
* gnus-topic-toggle-display-empty-topics: Topic Commands.     (line 115)
* gnus-topic-topology:                   Topic Topology.      (line  28)
* gnus-topic-unindent:                   Topic Commands.      (line  31)
* gnus-topic-unmark-topic:               Topic Commands.      (line 126)
* gnus-topic-yank-group:                 Topic Commands.      (line  44)
* gnus-total-expirable-newsgroups:       Expiring Mail.       (line 161)
* gnus-treat-body-boundary:              Customizing Articles.
                                                              (line  61)
* gnus-treat-buttonize:                  Customizing Articles.
                                                              (line  61)
* gnus-treat-buttonize-head:             Customizing Articles.
                                                              (line  61)
* gnus-treat-capitalize-sentences:       Customizing Articles.
                                                              (line  61)
* gnus-treat-date:                       Customizing Articles.
                                                              (line  61)
* gnus-treat-display-face:               Customizing Articles.
                                                              (line  61)
* gnus-treat-display-face <1>:           Customizing Articles.
                                                              (line 146)
* gnus-treat-display-smileys:            Customizing Articles.
                                                              (line  61)
* gnus-treat-display-x-face:             Customizing Articles.
                                                              (line  61)
* gnus-treat-display-x-face <1>:         Customizing Articles.
                                                              (line 142)
* gnus-treat-emojize-symbols:            Customizing Articles.
                                                              (line  61)
* gnus-treat-emphasize:                  Customizing Articles.
                                                              (line  61)
* gnus-treat-emphasize <1>:              Customizing Articles.
                                                              (line 150)
* gnus-treat-fill-article:               Customizing Articles.
                                                              (line  61)
* gnus-treat-fill-article <1>:           Customizing Articles.
                                                              (line 151)
* gnus-treat-fill-long-lines:            Customizing Articles.
                                                              (line  61)
* gnus-treat-fill-long-lines <1>:        Customizing Articles.
                                                              (line 152)
* gnus-treat-fold-headers:               Customizing Articles.
                                                              (line  61)
* gnus-treat-fold-headers <1>:           Customizing Articles.
                                                              (line 173)
* gnus-treat-fold-newsgroups:            Customizing Articles.
                                                              (line  61)
* gnus-treat-fold-newsgroups <1>:        Customizing Articles.
                                                              (line 174)
* gnus-treat-from-gravatar:              Customizing Articles.
                                                              (line  61)
* gnus-treat-from-gravatar <1>:          Article Display.     (line  50)
* gnus-treat-from-picon:                 Customizing Articles.
                                                              (line  61)
* gnus-treat-from-picon <1>:             Article Display.     (line  39)
* gnus-treat-hide-boring-headers:        Customizing Articles.
                                                              (line  61)
* gnus-treat-hide-boring-headers <1>:    Customizing Articles.
                                                              (line 153)
* gnus-treat-hide-citation:              Customizing Articles.
                                                              (line  61)
* gnus-treat-hide-citation <1>:          Customizing Articles.
                                                              (line 154)
* gnus-treat-hide-citation-maybe:        Customizing Articles.
                                                              (line  61)
* gnus-treat-hide-citation-maybe <1>:    Customizing Articles.
                                                              (line 155)
* gnus-treat-hide-headers:               Customizing Articles.
                                                              (line  61)
* gnus-treat-hide-headers <1>:           Customizing Articles.
                                                              (line 156)
* gnus-treat-hide-signature:             Customizing Articles.
                                                              (line  61)
* gnus-treat-hide-signature <1>:         Customizing Articles.
                                                              (line 157)
* gnus-treat-highlight-citation:         Customizing Articles.
                                                              (line  61)
* gnus-treat-highlight-citation <1>:     Customizing Articles.
                                                              (line 163)
* gnus-treat-highlight-headers:          Customizing Articles.
                                                              (line  61)
* gnus-treat-highlight-headers <1>:      Customizing Articles.
                                                              (line 164)
* gnus-treat-highlight-signature:        Customizing Articles.
                                                              (line  61)
* gnus-treat-highlight-signature <1>:    Customizing Articles.
                                                              (line 165)
* gnus-treat-leading-whitespace:         Customizing Articles.
                                                              (line  61)
* gnus-treat-leading-whitespace <1>:     Customizing Articles.
                                                              (line 175)
* gnus-treat-mail-gravatar:              Customizing Articles.
                                                              (line  61)
* gnus-treat-mail-gravatar <1>:          Article Display.     (line  53)
* gnus-treat-mail-picon:                 Customizing Articles.
                                                              (line  61)
* gnus-treat-mail-picon <1>:             Article Display.     (line  42)
* gnus-treat-newsgroups-picon:           Customizing Articles.
                                                              (line  61)
* gnus-treat-newsgroups-picon <1>:       Article Display.     (line  46)
* gnus-treat-overstrike:                 Customizing Articles.
                                                              (line  61)
* gnus-treat-smiley:                     Article Display.     (line  36)
* gnus-treat-strip-banner:               Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-banner <1>:           Customizing Articles.
                                                              (line 158)
* gnus-treat-strip-cr:                   Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-headers-in-body:      Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-leading-blank-lines:  Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-list-identifiers:     Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-list-identifiers <1>: Customizing Articles.
                                                              (line 159)
* gnus-treat-strip-multiple-blank-lines: Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-pem:                  Customizing Articles.
                                                              (line  61)
* gnus-treat-strip-trailing-blank-lines: Customizing Articles.
                                                              (line  61)
* gnus-treat-unfold-headers:             Customizing Articles.
                                                              (line  61)
* gnus-treat-unfold-headers <1>:         Customizing Articles.
                                                              (line 172)
* gnus-treat-unsplit-urls:               Customizing Articles.
                                                              (line  61)
* gnus-treat-wash-html:                  Customizing Articles.
                                                              (line  61)
* gnus-treat-x-pgp-sig:                  Customizing Articles.
                                                              (line  61)
* gnus-treat-x-pgp-sig <1>:              Customizing Articles.
                                                              (line 170)
* gnus-tree-brackets:                    Tree Display.        (line  52)
* gnus-tree-line-format:                 Tree Display.        (line  26)
* gnus-tree-minimize-window:             Tree Display.        (line  66)
* gnus-tree-mode-hook:                   Tree Display.        (line  14)
* gnus-tree-mode-line-format:            Tree Display.        (line  17)
* gnus-tree-parent-child-edges:          Tree Display.        (line  61)
* gnus-unbuttonized-mime-types:          MIME Commands.       (line 137)
* gnus-uncacheable-groups:               Article Caching.     (line  47)
* gnus-undo:                             Undo.                (line  28)
* gnus-undo-mode:                        Undo.                (line  28)
* gnus-undownloaded-mark:                Other Marks.         (line  37)
* gnus-unplugged:                        Agent Basics.        (line  44)
* gnus-unread-mark:                      Unread Articles.     (line  30)
* gnus-unread-mark <1>:                  Choosing Variables.  (line  21)
* gnus-unseen-mark:                      Other Marks.         (line  29)
* gnus-update-format:                    Formatting Variables.
                                                              (line  44)
* gnus-update-message-archive-method:    Archived Messages.   (line  25)
* gnus-update-score-entry-dates:         Score Variables.     (line 124)
* gnus-updated-mode-lines:               Mode Lines.          (line   6)
* gnus-use-adaptive-scoring:             Adaptive Scoring.    (line  10)
* gnus-use-article-prefetch:             Asynchronous Fetching.
                                                              (line  38)
* gnus-use-cache:                        Article Caching.     (line  15)
* gnus-use-cross-reference:              Exiting the Summary Buffer.
                                                              (line  86)
* gnus-use-dribble-file:                 Auto Save.           (line  16)
* gnus-use-full-window:                  Window Layout.       (line   8)
* gnus-use-idna:                         Misc Article.        (line  85)
* gnus-use-long-file-name:               Article Caching.     (line  15)
* gnus-use-long-file-name <1>:           Saving Articles.     (line 244)
* gnus-use-scoring:                      Score Variables.     (line   7)
* gnus-use-trees:                        Tree Display.        (line   6)
* gnus-use-undo:                         Undo.                (line  28)
* gnus-useful-groups:                    Foreign Groups.      (line  78)
* gnus-user-agent:                       Mail and Post.       (line  21)
* gnus-uu-be-dangerous:                  Other Decode Variables.
                                                              (line  20)
* gnus-uu-correct-stripped-uucode:       Other Decode Variables.
                                                              (line  62)
* gnus-uu-decode-binhex:                 Other Files.         (line  10)
* gnus-uu-decode-postscript:             PostScript Files.    (line   7)
* gnus-uu-decode-postscript-and-save:    PostScript Files.    (line  10)
* gnus-uu-decode-postscript-and-save-view: PostScript Files.  (line  18)
* gnus-uu-decode-postscript-view:        PostScript Files.    (line  14)
* gnus-uu-decode-save:                   Other Files.         (line   7)
* gnus-uu-decode-unshar:                 Shell Archives.      (line  11)
* gnus-uu-decode-unshar-and-save:        Shell Archives.      (line  14)
* gnus-uu-decode-unshar-and-save-view:   Shell Archives.      (line  22)
* gnus-uu-decode-unshar-view:            Shell Archives.      (line  18)
* gnus-uu-decode-uu:                     Uuencoded Articles.  (line   7)
* gnus-uu-decode-uu-and-save:            Uuencoded Articles.  (line  10)
* gnus-uu-decode-uu-and-save-view:       Uuencoded Articles.  (line  17)
* gnus-uu-decode-uu-view:                Uuencoded Articles.  (line  14)
* gnus-uu-decode-yenc:                   Other Files.         (line  14)
* gnus-uu-digest-headers:                Mail.                (line   9)
* gnus-uu-digest-mail-forward:           Summary Mail Commands.
                                                              (line 131)
* gnus-uu-digest-post-forward:           Summary Post Commands.
                                                              (line  48)
* gnus-uu-do-not-unpack-archives:        Other Decode Variables.
                                                              (line  38)
* gnus-uu-grab-move:                     Other Decode Variables.
                                                              (line  17)
* gnus-uu-grab-view:                     Other Decode Variables.
                                                              (line  14)
* gnus-uu-grabbed-file-functions:        Other Decode Variables.
                                                              (line   6)
* gnus-uu-ignore-default-archive-rules:  Other Decode Variables.
                                                              (line  50)
* gnus-uu-ignore-default-view-rules:     Other Decode Variables.
                                                              (line  46)
* gnus-uu-ignore-files-by-name:          Other Decode Variables.
                                                              (line  26)
* gnus-uu-ignore-files-by-type:          Other Decode Variables.
                                                              (line  29)
* gnus-uu-invert-processable:            Setting Process Marks.
                                                              (line  29)
* gnus-uu-kill-carriage-return:          Other Decode Variables.
                                                              (line  54)
* gnus-uu-mark-all:                      Setting Process Marks.
                                                              (line  66)
* gnus-uu-mark-buffer:                   Setting Process Marks.
                                                              (line  69)
* gnus-uu-mark-by-regexp:                Setting Process Marks.
                                                              (line  33)
* gnus-uu-mark-over:                     Setting Process Marks.
                                                              (line  55)
* gnus-uu-mark-region:                   Setting Process Marks.
                                                              (line  41)
* gnus-uu-mark-series:                   Setting Process Marks.
                                                              (line  59)
* gnus-uu-mark-sparse:                   Setting Process Marks.
                                                              (line  62)
* gnus-uu-mark-thread:                   Setting Process Marks.
                                                              (line  47)
* gnus-uu-mark-thread <1>:               Thread Commands.     (line  23)
* gnus-uu-notify-files:                  Uuencoded Articles.  (line  30)
* gnus-uu-post-include-before-composing: Uuencoding and Posting.
                                                              (line   7)
* gnus-uu-post-length:                   Uuencoding and Posting.
                                                              (line  13)
* gnus-uu-post-news:                     Summary Post Commands.
                                                              (line  53)
* gnus-uu-post-separate-description:     Uuencoding and Posting.
                                                              (line  24)
* gnus-uu-post-threaded:                 Uuencoding and Posting.
                                                              (line  17)
* gnus-uu-pre-uudecode-hook:             Other Decode Variables.
                                                              (line  66)
* gnus-uu-save-in-digest:                Other Decode Variables.
                                                              (line  69)
* gnus-uu-tmp-dir:                       Other Decode Variables.
                                                              (line  35)
* gnus-uu-unmark-articles-not-decoded:   Other Decode Variables.
                                                              (line  58)
* gnus-uu-unmark-by-regexp:              Setting Process Marks.
                                                              (line  37)
* gnus-uu-unmark-region:                 Setting Process Marks.
                                                              (line  44)
* gnus-uu-unmark-thread:                 Setting Process Marks.
                                                              (line  51)
* gnus-uu-unmark-thread <1>:             Thread Commands.     (line  27)
* gnus-uu-user-archive-rules:            Rule Variables.      (line  25)
* gnus-uu-user-view-rules:               Rule Variables.      (line  14)
* gnus-uu-user-view-rules-end:           Rule Variables.      (line  21)
* gnus-uu-view-and-save:                 Other Decode Variables.
                                                              (line  42)
* gnus-valid-select-methods:             Hooking New Back Ends Into Gnus.
                                                              (line   6)
* gnus-verbose:                          Various Various.     (line  29)
* gnus-verbose-backends:                 Various Various.     (line  37)
* gnus-version:                          Group Information.   (line  17)
* gnus-view-pseudo-asynchronously:       Viewing Files.       (line  19)
* gnus-view-pseudos:                     Viewing Files.       (line  22)
* gnus-view-pseudos-separately:          Viewing Files.       (line  27)
* gnus-visible-headers:                  Hiding Headers.      (line  21)
* gnus-visual:                           Highlighting and Menus.
                                                              (line   6)
* gnus-visual-mark-article-hook:         Summary Highlighting.
                                                              (line   7)
* gnus-widen-article-window:             Misc Article.        (line  12)
* gnus-window-min-height:                Window Layout.       (line 101)
* gnus-window-min-width:                 Window Layout.       (line 101)
* gnus-x-face:                           X-Face.              (line  38)
* gnus-x-face-directory:                 X-Face.              (line  68)
* gnus-x-face-from-file:                 X-Face.              (line  77)
* Google:                                Foreign Groups.      (line  82)
* Google <1>:                            Web Searches.        (line   6)
* Graham, Paul:                          Spam Statistics Package.
                                                              (line   6)
* gravatars:                             Article Display.     (line   6)
* group buffer:                          Group Buffer.        (line   6)
* group buffer format:                   Group Line Specification.
                                                              (line   6)
* group description:                     Group Information.   (line   8)
* group highlighting:                    Group Highlighting.  (line   6)
* group information:                     Group Information.   (line   6)
* group level:                           Group Levels.        (line   6)
* group listing:                         Listing Groups.      (line   6)
* group mail splitting:                  Group Mail Splitting.
                                                              (line   6)
* group mode line:                       Group Mode Line Specification.
                                                              (line   6)
* group movement:                        Group Maneuvering.   (line   6)
* group parameters:                      Group Parameters.    (line   6)
* group parameters <1>:                  Topic Commands.      (line 152)
* group rank:                            Group Score.         (line   6)
* group score:                           Group Score.         (line   6)
* group score commands:                  Group Score Commands.
                                                              (line   6)
* group selection:                       Selecting a Group.   (line   6)
* group sieve commands:                  Sieve Commands.      (line   6)
* group timestamps:                      Group Timestamp.     (line   6)
* groups:                                Don't Panic.         (line  47)
* ham-marks:                             Spam and Ham Processors.
                                                              (line  52)
* hashcash:                              Hashcash.            (line   6)
* hashcash, spam filtering:              Anti-spam Hashcash Payments.
                                                              (line   6)
* hashcash-default-payment:              Hashcash.            (line  38)
* hashcash-path:                         Hashcash.            (line  52)
* hashcash-payment-alist:                Hashcash.            (line  43)
* head:                                  Terminology.         (line  80)
* header:                                Terminology.         (line  87)
* headers:                               Terminology.         (line  90)
* help group:                            Foreign Groups.      (line  59)
* help group <1>:                        Document Groups.     (line   6)
* hiding headers:                        Hiding Headers.      (line   6)
* highlighting:                          Group Highlighting.  (line   6)
* highlighting <1>:                      Article Highlighting.
                                                              (line   6)
* highlighting <2>:                      Highlighting and Menus.
                                                              (line   6)
* highlights:                            Various Various.     (line   6)
* history:                               Choosing Commands.   (line  70)
* history <1>:                           History.             (line   6)
* HTML:                                  HTML.                (line   6)
* http:                                  Browsing the Web.    (line   6)
* hung connections:                      D-Bus Integration.   (line   6)
* IDNA:                                  Misc Article.        (line  85)
* ifile, spam filtering:                 ifile spam filtering.
                                                              (line   6)
* ignored groups:                        The Active File.     (line   6)
* ignored-charset:                       Group Parameters.    (line 221)
* imap:                                  Using IMAP.          (line   6)
* IMAP labels:                           Support for IMAP Extensions.
                                                              (line   6)
* import old mail:                       Incorporating Old Mail.
                                                              (line   6)
* importing PGP keys:                    Security.            (line  60)
* incoming mail treatment:               Washing Mail.        (line   6)
* Incoming*:                             Mail Source Customization.
                                                              (line  14)
* incorporating old mail:                Incorporating Old Mail.
                                                              (line   6)
* indirect connection functions:         Indirect Functions.  (line   6)
* info:                                  Group Information.   (line  23)
* information on groups:                 Group Information.   (line   6)
* interaction:                           Interactive.         (line   6)
* interactive:                           Extended Interactive.
                                                              (line   6)
* internal variables:                    Gnus Utility Functions.
                                                              (line   6)
* internationalized domain names:        Misc Article.        (line  85)
* introduction to Gnus:                  Don't Panic.         (line   6)
* invalid characters in file names:      Various Various.     (line  64)
* ISO 8601:                              Article Date.        (line  15)
* iso-8859-5:                            Charsets.            (line  48)
* ISO8601:                               Score File Format.   (line 146)
* ispell:                                Mail and Post.       (line  33)
* ispell-message:                        Mail and Post.       (line  33)
* keys, reserved for users (Article):    Article Keymap.      (line  12)
* keys, reserved for users (Group):      Misc Group Stuff.    (line  15)
* keys, reserved for users (Server):     Server Commands.     (line  12)
* keys, reserved for users (Summary):    Summary Buffer.      (line  17)
* kill files:                            Kill Files.          (line   6)
* kill files <1>:                        Converting Kill Files.
                                                              (line   6)
* killed groups:                         Terminology.         (line 129)
* koi8-r:                                Charsets.            (line  48)
* koi8-u:                                Charsets.            (line  48)
* Latin 1:                               Article Washing.     (line  69)
* level:                                 Group Levels.        (line   6)
* levels:                                Terminology.         (line 121)
* limiting:                              Limiting.            (line   6)
* links:                                 Splitting Mail.      (line  65)
* LIST overview.fmt:                     Crosspost Handling.  (line  29)
* list server brain damage:              Washing Mail.        (line   6)
* local variables:                       Score File Format.   (line 316)
* loose threads:                         Loose Threads.       (line   6)
* M****s*** sm*rtq**t*s:                 Article Washing.     (line  69)
* Ma Gnus:                               Gnus Versions.       (line   6)
* Ma Gnus <1>:                           Ma Gnus.             (line   6)
* mail:                                  Summary Mail Commands.
                                                              (line   6)
* mail <1>:                              Composing Messages.  (line   6)
* mail <2>:                              Getting Mail.        (line   6)
* mail <3>:                              Terminology.         (line  14)
* mail filtering (splitting):            Splitting Mail.      (line   6)
* mail filtering (splitting) <1>:        Terminology.         (line 204)
* mail folders:                          Mail Folders.        (line   6)
* mail group commands:                   Mail Group Commands. (line   6)
* mail list groups:                      Group Parameters.    (line  65)
* mail message:                          Terminology.         (line  74)
* mail NOV spool:                        Mail Spool.          (line   6)
* mail server:                           Mail Source Specifiers.
                                                              (line   6)
* mail sorting:                          Terminology.         (line 204)
* mail source:                           Mail Source Specifiers.
                                                              (line   6)
* mail splitting:                        Splitting Mail.      (line   6)
* mail splitting <1>:                    Fancy Mail Splitting.
                                                              (line   6)
* mail splitting <2>:                    Group Mail Splitting.
                                                              (line   6)
* mail spool:                            Mail Source Specifiers.
                                                              (line   6)
* mail washing:                          Washing Mail.        (line   6)
* mail-extract-address-components:       Summary Buffer Format.
                                                              (line  13)
* Mail-Followup-To:                      Group Parameters.    (line  69)
* mail-source:                           Group Parameters.    (line 258)
* mail-source-crash-box:                 Mail Source Customization.
                                                              (line  11)
* mail-source-default-file-modes:        Mail Source Customization.
                                                              (line  40)
* mail-source-delete-incoming:           Mail Source Customization.
                                                              (line  15)
* mail-source-delete-old-incoming-confirm: Mail Source Customization.
                                                              (line  23)
* mail-source-directory:                 Mail Source Customization.
                                                              (line  28)
* mail-source-incoming-file-prefix:      Mail Source Customization.
                                                              (line  34)
* mail-source-movemail-program:          Mail Source Customization.
                                                              (line  44)
* mail-source-touch-pop:                 POP before SMTP.     (line   6)
* mail-sources:                          Fetching Mail.       (line   6)
* mail-to-news gateways:                 Mail-To-News Gateways.
                                                              (line   6)
* maildir:                               Maildir.             (line   6)
* mailing list:                          Mailing List.        (line   6)
* mailing lists:                         Mail and Post.       (line   9)
* mairix:                                nnmairix.            (line   6)
* making digests:                        Summary Post Commands.
                                                              (line  48)
* making groups:                         Foreign Groups.      (line  24)
* manual:                                Group Information.   (line  23)
* mark as unread:                        Setting Marks.       (line  10)
* marking groups:                        Marking Groups.      (line   6)
* marks:                                 Marking Articles.    (line   6)
* match-list:                            Group Parameters.    (line 304)
* max-lisp-eval-depth:                   Troubleshooting.     (line  16)
* mbox:                                  Document Groups.     (line  12)
* mbox folders:                          Mail Folders.        (line   6)
* menus:                                 Highlighting and Menus.
                                                              (line   6)
* merging groups:                        Combined Groups.     (line   6)
* message:                               Terminology.         (line  77)
* Message-ID:                            Finding the Parent.  (line  59)
* message-mail-p:                        Posting Styles.      (line  86)
* message-news-p:                        Posting Styles.      (line  86)
* message-send-mail-function:            Posting Server.      (line  39)
* message-sent-hook:                     Followups To Yourself.
                                                              (line  21)
* messages:                              Composing Messages.  (line   6)
* MH folders:                            Saving Articles.     (line 129)
* mh-e mail spool:                       MH Spool.            (line   6)
* MIME:                                  Using MIME.          (line   6)
* MIME <1>:                              Misc Article.        (line  16)
* MIME <2>:                              Conformity.          (line  36)
* MIME decoding:                         MIME Commands.       (line   6)
* mm-decrypt-option:                     Security.            (line  27)
* mm-encrypt-option:                     Security.            (line  36)
* mm-file-name-collapse-whitespace:      MIME Commands.       (line 213)
* mm-file-name-delete-whitespace:        MIME Commands.       (line 213)
* mm-file-name-replace-whitespace:       MIME Commands.       (line 213)
* mm-file-name-replace-whitespace <1>:   MIME Commands.       (line 213)
* mm-file-name-rewrite-functions:        MIME Commands.       (line 203)
* mm-file-name-trim-whitespace:          MIME Commands.       (line 213)
* mm-sign-option:                        Security.            (line  32)
* mm-text-html-renderer:                 HTML.                (line  23)
* mm-verify-option:                      Security.            (line  22)
* MMDF mail box:                         Document Groups.     (line  15)
* mml-secure-message-encrypt-pgp:        Signing and encrypting.
                                                              (line  38)
* mml-secure-message-encrypt-pgpmime:    Signing and encrypting.
                                                              (line  42)
* mml-secure-message-encrypt-smime:      Signing and encrypting.
                                                              (line  34)
* mml-secure-message-sign-pgp:           Signing and encrypting.
                                                              (line  26)
* mml-secure-message-sign-pgp <1>:       Signing and encrypting.
                                                              (line  30)
* mml-secure-message-sign-smime:         Signing and encrypting.
                                                              (line  22)
* mml-unsecure-message:                  Signing and encrypting.
                                                              (line  46)
* mml1991-use:                           Security.            (line  41)
* mml2015-use:                           Security.            (line  47)
* mode lines:                            Mode Lines.          (line   6)
* mode lines <1>:                        Various Various.     (line   6)
* MODE READER:                           NNTP.                (line  23)
* moderation:                            Moderation.          (line   6)
* move mail:                             Mail Group Commands. (line  30)
* moving articles:                       Mail Group Commands. (line  96)
* naive Bayesian spam filtering:         Spam Statistics Package.
                                                              (line   6)
* native:                                Terminology.         (line  55)
* new features:                          New Features.        (line   6)
* new groups:                            New Groups.          (line   6)
* new messages:                          Scanning New Messages.
                                                              (line   6)
* news:                                  Terminology.         (line   7)
* news back ends:                        Getting News.        (line   6)
* news spool:                            News Spool.          (line   6)
* newsgroup:                             Group Parameters.    (line 103)
* Newsgroups:                            To From Newsgroups.  (line   6)
* nnbabyl:                               Babyl.               (line   6)
* nnbabyl-active-file:                   Babyl.               (line   6)
* nnbabyl-active-file <1>:               Babyl.               (line  16)
* nnbabyl-get-new-mail:                  Not Reading Mail.    (line  13)
* nnbabyl-get-new-mail <1>:              Babyl.               (line  20)
* nnbabyl-mbox-file:                     Babyl.               (line   6)
* nnbabyl-mbox-file <1>:                 Babyl.               (line  13)
* nnchoke:                               Back End Interface.  (line  74)
* nndiary:                               The NNDiary Back End.
                                                              (line   6)
* nndiary customization:                 Customizing NNDiary. (line   6)
* nndiary mails:                         Diary Messages.      (line   6)
* nndiary messages:                      Diary Messages.      (line   6)
* nndiary operation modes:               Running NNDiary.     (line   6)
* nndiary-mail-sources:                  Running NNDiary.     (line  44)
* nndiary-reminders:                     Customizing NNDiary. (line  11)
* nndiary-split-methods:                 Running NNDiary.     (line  49)
* nndiary-week-starts-on-monday:         Customizing NNDiary. (line  18)
* nndir:                                 Foreign Groups.      (line  54)
* nndir <1>:                             Directory Groups.    (line   6)
* nndoc:                                 Foreign Groups.      (line  67)
* nndoc <1>:                             Document Groups.     (line   6)
* nndoc-article-type:                    Document Groups.     (line  94)
* nndoc-post-type:                       Document Groups.     (line 100)
* nndraft:                               Drafts.              (line  19)
* nndraft-directory:                     Drafts.              (line  19)
* nneething:                             Foreign Groups.      (line  62)
* nneething <1>:                         Anything Groups.     (line   6)
* nneething-exclude-files:               Anything Groups.     (line  47)
* nneething-include-files:               Anything Groups.     (line  52)
* nneething-map-file:                    Anything Groups.     (line  56)
* nneething-map-file-directory:          Anything Groups.     (line  43)
* nnfolder:                              Mail Folders.        (line   6)
* nnfolder-active-file:                  Mail Folders.        (line  18)
* nnfolder-delete-mail-hook:             Mail Folders.        (line  40)
* nnfolder-directory:                    Mail Folders.        (line  13)
* nnfolder-generate-active-file:         Mail Folders.        (line  55)
* nnfolder-get-new-mail:                 Not Reading Mail.    (line  13)
* nnfolder-get-new-mail <1>:             Mail Folders.        (line  25)
* nnfolder-newsgroups-file:              Mail Folders.        (line  21)
* nnfolder-nov-directory:                Mail Folders.        (line  52)
* nnfolder-nov-file-suffix:              Mail Folders.        (line  49)
* nnfolder-nov-is-evil:                  Mail Folders.        (line  45)
* nnfolder-save-buffer-hook:             Mail Folders.        (line  29)
* nngateway-address:                     Mail-To-News Gateways.
                                                              (line  16)
* nngateway-header-transformation:       Mail-To-News Gateways.
                                                              (line  19)
* nngateway-mail2news-header-transformation: Mail-To-News Gateways.
                                                              (line  42)
* nngateway-simple-header-transformation: Mail-To-News Gateways.
                                                              (line  38)
* nnheader-file-name-translation-alist:  Various Various.     (line  64)
* nnheader-get-report:                   Error Messaging.     (line   6)
* nnheader-head-chop-length:             Various Various.     (line  60)
* nnheader-max-head-length:              Various Various.     (line  50)
* nnheader-ms-strip-cr:                  Washing Mail.        (line  30)
* nnheader-report:                       Error Messaging.     (line   6)
* nnimap-address:                        Customizing the IMAP Connection.
                                                              (line  14)
* nnimap-authenticator:                  Customizing the IMAP Connection.
                                                              (line  54)
* nnimap-expunge:                        Customizing the IMAP Connection.
                                                              (line  63)
* nnimap-fetch-partial-articles:         Customizing the IMAP Connection.
                                                              (line  83)
* nnimap-keepalive-intervals:            Customizing the IMAP Connection.
                                                              (line  99)
* nnimap-record-commands:                Customizing the IMAP Connection.
                                                              (line  89)
* nnimap-server-port:                    Customizing the IMAP Connection.
                                                              (line  23)
* nnimap-split-download-body:            Client-Side IMAP Splitting.
                                                              (line  30)
* nnimap-split-download-body <1>:        Filtering Incoming Mail.
                                                              (line  25)
* nnimap-stream:                         Customizing the IMAP Connection.
                                                              (line  27)
* nnimap-streaming:                      Customizing the IMAP Connection.
                                                              (line  79)
* nnimap-use-namespaces:                 Customizing the IMAP Connection.
                                                              (line  93)
* nnimap-user:                           Customizing the IMAP Connection.
                                                              (line  17)
* nnir:                                  nnir.                (line   6)
* nnmail-cache-accepted-message-ids:     Mail Back End Variables.
                                                              (line  49)
* nnmail-cache-accepted-message-ids <1>: Fancy Mail Splitting.
                                                              (line 214)
* nnmail-cache-ignore-groups:            Mail Back End Variables.
                                                              (line  54)
* nnmail-crosspost:                      Splitting Mail.      (line  60)
* nnmail-crosspost-link-function:        Splitting Mail.      (line  65)
* nnmail-delete-file-function:           Mail Back End Variables.
                                                              (line  46)
* nnmail-expiry-target:                  Expiring Mail.       (line 126)
* nnmail-expiry-wait:                    Expiring Mail.       (line  87)
* nnmail-expiry-wait-function:           Group Parameters.    (line 142)
* nnmail-expiry-wait-function <1>:       Expiring Mail.       (line  96)
* nnmail-extra-headers:                  To From Newsgroups.  (line  40)
* nnmail-fancy-expiry-target:            Expiring Mail.       (line 141)
* nnmail-fancy-expiry-targets:           Expiring Mail.       (line 141)
* nnmail-ignore-broken-references:       Washing Mail.        (line  69)
* nnmail-keep-last-article:              Expiring Mail.       (line 157)
* nnmail-mail-splitting-charset:         Splitting Mail.      (line  79)
* nnmail-mail-splitting-decodes:         Splitting Mail.      (line  79)
* nnmail-message-id-cache-file:          Duplicates.          (line   6)
* nnmail-message-id-cache-length:        Duplicates.          (line   6)
* nnmail-pathname-coding-system:         Non-ASCII Group Names.
                                                              (line  74)
* nnmail-post-get-new-mail-hook:         Mail Back End Variables.
                                                              (line  23)
* nnmail-pre-get-new-mail-hook:          Mail Back End Variables.
                                                              (line  23)
* nnmail-prepare-incoming-header-hook:   Washing Mail.        (line  34)
* nnmail-prepare-incoming-hook:          Washing Mail.        (line  25)
* nnmail-prepare-incoming-message-hook:  Washing Mail.        (line  76)
* nnmail-read-incoming-hook:             Mail Back End Variables.
                                                              (line   9)
* nnmail-remove-leading-whitespace:      Washing Mail.        (line  38)
* nnmail-remove-list-identifiers:        Washing Mail.        (line  49)
* nnmail-remove-tabs:                    Washing Mail.        (line  66)
* nnmail-resplit-incoming:               Splitting Mail.      (line  90)
* nnmail-resplit-incoming <1>:           Mail Source Specifiers.
                                                              (line  89)
* nnmail-scan-directory-mail-source-once: Mail Source Specifiers.
                                                              (line  79)
* nnmail-split-abbrev-alist:             Fancy Mail Splitting.
                                                              (line 142)
* nnmail-split-fancy:                    Fancy Mail Splitting.
                                                              (line   6)
* nnmail-split-fancy <1>:                Fancy Mail Splitting.
                                                              (line   6)
* nnmail-split-fancy-match-partial-words: Fancy Mail Splitting.
                                                              (line 120)
* nnmail-split-fancy-syntax-table:       Fancy Mail Splitting.
                                                              (line 159)
* nnmail-split-fancy-with-parent:        Fancy Mail Splitting.
                                                              (line 181)
* nnmail-split-header-length-limit:      Splitting Mail.      (line  76)
* nnmail-split-history:                  Splitting Mail.      (line  70)
* nnmail-split-hook:                     Mail Back End Variables.
                                                              (line  14)
* nnmail-split-lowercase-expanded:       Fancy Mail Splitting.
                                                              (line 175)
* nnmail-split-methods:                  Splitting Mail.      (line   6)
* nnmail-treat-duplicates:               Duplicates.          (line   6)
* nnmail-use-long-file-names:            Mail Back End Variables.
                                                              (line  39)
* nnmaildir:                             Maildir.             (line   6)
* nnmairix:                              nnmairix.            (line   6)
* nnmairix-create-search-group:          nnmairix keyboard shortcuts.
                                                              (line  28)
* nnmairix-create-search-group-from-message: nnmairix keyboard shortcuts.
                                                              (line  87)
* nnmairix-create-server-and-default-group: nnmairix keyboard shortcuts.
                                                              (line   9)
* nnmairix-goto-original-article:        nnmairix keyboard shortcuts.
                                                              (line 103)
* nnmairix-group-change-query-this-group: nnmairix keyboard shortcuts.
                                                              (line  34)
* nnmairix-group-delete-recreate-this-group: nnmairix keyboard shortcuts.
                                                              (line  55)
* nnmairix-group-prefix:                 Setting up mairix.   (line  31)
* nnmairix-group-toggle-allowfast-this-group: nnmairix keyboard shortcuts.
                                                              (line  60)
* nnmairix-group-toggle-propmarks-this-group: nnmairix keyboard shortcuts.
                                                              (line  71)
* nnmairix-group-toggle-readmarks-this-group: nnmairix keyboard shortcuts.
                                                              (line  50)
* nnmairix-group-toggle-threads-this-group: nnmairix keyboard shortcuts.
                                                              (line  38)
* nnmairix-mairix-search-options:        Configuring nnmairix.
                                                              (line  27)
* nnmairix-mairix-update-options:        nnmairix keyboard shortcuts.
                                                              (line  43)
* nnmairix-only-use-registry:            Propagating marks.   (line  78)
* nnmairix-propagate-marks:              nnmairix keyboard shortcuts.
                                                              (line  76)
* nnmairix-propagate-marks-to-nnmairix-groups: Propagating marks.
                                                              (line  94)
* nnmairix-propagate-marks-upon-close:   Propagating marks.   (line  63)
* nnmairix-purge-old-groups:             nnmairix caveats.    (line  47)
* nnmairix-remove-tick-mark-original-article: nnmairix keyboard shortcuts.
                                                              (line 112)
* nnmairix-search:                       nnmairix keyboard shortcuts.
                                                              (line  14)
* nnmairix-search-from-this-article:     nnmairix keyboard shortcuts.
                                                              (line  98)
* nnmairix-search-interactive:           nnmairix keyboard shortcuts.
                                                              (line  24)
* nnmairix-search-thread-this-article:   nnmairix keyboard shortcuts.
                                                              (line  92)
* nnmairix-update-database:              nnmairix keyboard shortcuts.
                                                              (line  43)
* nnmairix-update-groups:                nnmairix tips and tricks.
                                                              (line   8)
* nnmairix-widget-search:                nnmairix keyboard shortcuts.
                                                              (line  19)
* nnmairix-widget-search-from-this-article: nnmairix keyboard shortcuts.
                                                              (line  82)
* nnmbox:                                Unix Mail Box.       (line   6)
* nnmbox-active-file:                    Unix Mail Box.       (line   6)
* nnmbox-active-file <1>:                Unix Mail Box.       (line  17)
* nnmbox-get-new-mail:                   Not Reading Mail.    (line  13)
* nnmbox-get-new-mail <1>:               Unix Mail Box.       (line  21)
* nnmbox-mbox-file:                      Unix Mail Box.       (line   6)
* nnmbox-mbox-file <1>:                  Unix Mail Box.       (line  13)
* nnmh:                                  MH Spool.            (line   6)
* nnmh-be-safe:                          MH Spool.            (line  22)
* nnmh-directory:                        MH Spool.            (line  14)
* nnmh-get-new-mail:                     Not Reading Mail.    (line  13)
* nnmh-get-new-mail <1>:                 MH Spool.            (line  19)
* nnml:                                  Mail Spool.          (line   6)
* nnml-active-file:                      Mail Spool.          (line  39)
* nnml-compressed-files-size-threshold:  Mail Spool.          (line  69)
* nnml-directory:                        Mail Spool.          (line   9)
* nnml-directory <1>:                    Mail Spool.          (line  34)
* nnml-generate-nov-databases:           Mail Spool.          (line  73)
* nnml-get-new-mail:                     Not Reading Mail.    (line  13)
* nnml-get-new-mail <1>:                 Mail Spool.          (line  47)
* nnml-newsgroups-file:                  Mail Spool.          (line  43)
* nnml-nov-file-name:                    Mail Spool.          (line  54)
* nnml-nov-is-evil:                      Mail Spool.          (line  50)
* nnml-prepare-save-mail-hook:           Mail Spool.          (line  57)
* nnml-use-compressed-files:             Mail Spool.          (line  60)
* nnnil:                                 The Empty Backend.   (line   6)
* nnregistry:                            Registry Article Refer Method.
                                                              (line  11)
* nnrss:                                 RSS.                 (line   6)
* nnrss-directory:                       RSS.                 (line  46)
* nnrss-file-coding-system:              RSS.                 (line  50)
* nnrss-generate-download-script:        RSS.                 (line  63)
* nnrss-ignore-article-fields:           RSS.                 (line  55)
* nnrss-opml-export:                     RSS.                 (line  40)
* nnrss-opml-import:                     RSS.                 (line  37)
* nnrss-use-local:                       RSS.                 (line  63)
* nnselect:                              Selection Groups.    (line   6)
* nnspool:                               News Spool.          (line   6)
* nnspool-active-file:                   News Spool.          (line  37)
* nnspool-active-times-file:             News Spool.          (line  46)
* nnspool-history-file:                  News Spool.          (line  43)
* nnspool-inews-program:                 News Spool.          (line  20)
* nnspool-inews-switches:                News Spool.          (line  23)
* nnspool-lib-dir:                       News Spool.          (line  34)
* nnspool-newsgroups-file:               News Spool.          (line  40)
* nnspool-nov-directory:                 News Spool.          (line  30)
* nnspool-nov-is-evil:                   News Spool.          (line  49)
* nnspool-sift-nov-with-sed:             News Spool.          (line  53)
* nnspool-spool-directory:               News Spool.          (line  26)
* nntp:                                  NNTP.                (line   6)
* nntp authentication:                   NNTP.                (line  23)
* NNTP server:                           Finding the News.    (line  34)
* nntp-address:                          Common Variables.    (line  19)
* nntp-authinfo-function:                NNTP.                (line  30)
* nntp-connection-timeout:               NNTP.                (line 107)
* nntp-end-of-line:                      Common Variables.    (line  29)
* nntp-maximum-request:                  NNTP.                (line  99)
* nntp-netcat-command:                   Common Variables.    (line  34)
* nntp-netcat-switches:                  Common Variables.    (line  39)
* nntp-never-echoes-commands:            NNTP.                (line 181)
* nntp-nov-gap:                          NNTP.                (line 126)
* nntp-nov-is-evil:                      NNTP.                (line 117)
* nntp-open-connection-function:         NNTP.                (line 173)
* nntp-open-connection-functions-never-echo-commands: NNTP.   (line 190)
* nntp-open-netcat-stream:               Direct Functions.    (line  46)
* nntp-open-network-stream:              Direct Functions.    (line  11)
* nntp-open-ssl-stream:                  Direct Functions.    (line  33)
* nntp-open-telnet-stream:               Direct Functions.    (line  62)
* nntp-open-tls-stream:                  Direct Functions.    (line  20)
* nntp-open-via-rlogin-and-netcat:       Indirect Functions.  (line  14)
* nntp-open-via-rlogin-and-telnet:       Indirect Functions.  (line  31)
* nntp-open-via-telnet-and-telnet:       Indirect Functions.  (line  62)
* nntp-port-number:                      Common Variables.    (line  22)
* nntp-pre-command:                      Common Variables.    (line  13)
* nntp-prepare-post-hook:                NNTP.                (line 197)
* nntp-prepare-server-hook:              NNTP.                (line 164)
* nntp-record-commands:                  NNTP.                (line 167)
* nntp-send-authinfo:                    NNTP.                (line  23)
* nntp-send-authinfo <1>:                NNTP.                (line  30)
* nntp-send-mode-reader:                 NNTP.                (line  23)
* nntp-server-action-alist:              NNTP.                (line  79)
* nntp-server-opened-hook:               NNTP.                (line  23)
* nntp-telnet-command:                   Indirect Functions.  (line  40)
* nntp-telnet-switches:                  Indirect Functions.  (line  44)
* nntp-via-address:                      Indirect Functions.  (line  98)
* nntp-via-envuser:                      Indirect Functions.  (line  79)
* nntp-via-rlogin-command:               Indirect Functions.  (line  21)
* nntp-via-rlogin-command <1>:           Indirect Functions.  (line  48)
* nntp-via-rlogin-command-switches:      Indirect Functions.  (line  25)
* nntp-via-rlogin-command-switches <1>:  Indirect Functions.  (line  52)
* nntp-via-shell-prompt:                 Indirect Functions.  (line  85)
* nntp-via-telnet-command:               Indirect Functions.  (line  68)
* nntp-via-telnet-switches:              Indirect Functions.  (line  72)
* nntp-via-user-name:                    Indirect Functions.  (line  95)
* nntp-via-user-password:                Indirect Functions.  (line  76)
* nntp-xover-commands:                   NNTP.                (line 122)
* nntp-xref-number-is-evil:              NNTP.                (line 138)
* NNTPSERVER:                            Finding the News.    (line  34)
* nnvirtual:                             Combined Groups.     (line   6)
* nnvirtual-always-rescan:               Combined Groups.     (line  54)
* nnweb:                                 Foreign Groups.      (line  82)
* nnweb <1>:                             Web Searches.        (line   6)
* nnweb-max-hits:                        Web Searches.        (line  47)
* nnweb-search:                          Web Searches.        (line  44)
* nnweb-type:                            Web Searches.        (line  39)
* nnweb-type-definition:                 Web Searches.        (line  51)
* No Gnus:                               Gnus Versions.       (line   6)
* No Gnus <1>:                           No Gnus.             (line   6)
* Non-ASCII:                             Article Washing.     (line  80)
* non-ascii group names:                 Non-ASCII Group Names.
                                                              (line   6)
* NOV:                                   Crosspost Handling.  (line  19)
* NOV <1>:                               NNTP.                (line 122)
* NOV <2>:                               Terminology.         (line  94)
* offline:                               Gnus Unplugged.      (line   6)
* OneList:                               Article Hiding.      (line  43)
* Oort Gnus:                             Gnus Versions.       (line   6)
* Oort Gnus <1>:                         Oort Gnus.           (line   6)
* OPML:                                  RSS.                 (line  33)
* Outlook Express:                       Article Washing.     (line  87)
* overview.fmt:                          Crosspost Handling.  (line  29)
* parameters:                            Topic Commands.      (line 152)
* parent:                                Terminology.         (line 194)
* parent articles:                       Finding the Parent.  (line   6)
* patches:                               Troubleshooting.     (line  46)
* Paul Graham:                           Spam Statistics Package.
                                                              (line   6)
* Pegasus:                               Washing Mail.        (line  69)
* persistent articles:                   Persistent Articles. (line   6)
* PGP key ring import:                   Security.            (line  60)
* pick and read:                         Pick and Read.       (line   6)
* picons:                                Article Display.     (line   6)
* POP:                                   Mail Source Specifiers.
                                                              (line   6)
* pop before smtp:                       POP before SMTP.     (line   6)
* pop3-leave-mail-on-server:             Mail Source Specifiers.
                                                              (line 224)
* pop3-movemail:                         Mail Source Specifiers.
                                                              (line 224)
* pop3-uidl-file:                        Mail Source Specifiers.
                                                              (line 214)
* post:                                  Summary Post Commands.
                                                              (line   6)
* post <1>:                              Composing Messages.  (line   6)
* post-method:                           Group Parameters.    (line 254)
* posting styles:                        Posting Styles.      (line   6)
* posting-style:                         Group Parameters.    (line 228)
* PostScript:                            PostScript Files.    (line   6)
* PostScript <1>:                        Article Commands.    (line   7)
* pre-fetch:                             Asynchronous Fetching.
                                                              (line   6)
* predicate specifiers:                  Predicate Specifiers.
                                                              (line   6)
* preferred charset:                     Charsets.            (line  48)
* printing:                              Article Commands.    (line   7)
* process mark:                          Other Marks.         (line   6)
* process/prefix convention:             Process/Prefix.      (line   6)
* procmail:                              Mail Source Specifiers.
                                                              (line   6)
* profile:                               Troubleshooting.     (line  62)
* proxy:                                 Example Methods.     (line  45)
* pseudo-articles:                       Viewing Files.       (line   6)
* Pterodactyl Gnus:                      Gnus Versions.       (line   6)
* Quassia Gnus:                          Gnus Versions.       (line   6)
* rank:                                  Group Score.         (line   6)
* rcvstore:                              Saving Articles.     (line 129)
* reading init file:                     File Commands.       (line   7)
* reading mail:                          Getting Mail.        (line   6)
* reading news:                          Getting News.        (line   6)
* Red Gnus:                              Gnus Versions.       (line   6)
* referring articles:                    Finding the Parent.  (line   6)
* regeneration:                          Agent Regeneration.  (line   6)
* registry:                              The Gnus Registry.   (line   6)
* regular expressions header matching, spam filtering: Regular Expressions Header Matching.
                                                              (line   6)
* rejected articles:                     Rejected Articles.   (line   6)
* renaming groups:                       Foreign Groups.      (line  33)
* renaming groups <1>:                   Foreign Groups.      (line  42)
* reply:                                 Composing Messages.  (line   6)
* reply <1>:                             Terminology.         (line  20)
* reporting bugs:                        Troubleshooting.     (line  23)
* restarting:                            Scanning New Messages.
                                                              (line  23)
* reverse scoring:                       Reverse Scoring.     (line   6)
* RFC 1036:                              Conformity.          (line  15)
* RFC 1522 decoding:                     Mail Back End Variables.
                                                              (line  15)
* RFC 1991:                              Conformity.          (line  42)
* RFC 2047 decoding:                     Mail Back End Variables.
                                                              (line  15)
* RFC 2396:                              Mailing List.        (line   6)
* RFC 2440:                              Conformity.          (line  42)
* RFC 2822:                              Conformity.          (line  11)
* RFC 5322:                              Conformity.          (line  11)
* RFC 5536:                              Conformity.          (line  19)
* RFC 822:                               Conformity.          (line  11)
* rnews batch files:                     Document Groups.     (line  21)
* root:                                  Terminology.         (line 190)
* RSS:                                   RSS.                 (line   6)
* rule variables:                        Rule Variables.      (line   6)
* running nndiary:                       Running NNDiary.     (line   6)
* Russian:                               Charsets.            (line  48)
* saving .newsrc:                        File Commands.       (line  11)
* saving articles:                       Saving Articles.     (line   6)
* scanning new news:                     Scanning New Messages.
                                                              (line   6)
* score cache:                           Score Variables.     (line  29)
* score commands:                        Summary Score Commands.
                                                              (line   6)
* score decays:                          Score Decays.        (line   6)
* score file atoms:                      Score File Format.   (line 207)
* score file format:                     Score File Format.   (line   6)
* score file group parameter:            Group Parameters.    (line 154)
* score variables:                       Score Variables.     (line   6)
* scoring:                               Scoring.             (line   6)
* scoring crossposts:                    Scoring Tips.        (line   7)
* scoring on other headers:              Scoring On Other Headers.
                                                              (line   6)
* scoring tips:                          Scoring Tips.        (line   6)
* search engines:                        Search Engines.      (line   6)
* search queries:                        Search Queries.      (line   6)
* search syntax:                         Search Queries.      (line   6)
* searching:                             Searching.           (line   6)
* searching the Usenet:                  Web Searches.        (line   6)
* secondary:                             Terminology.         (line  66)
* sed:                                   News Spool.          (line  53)
* select groups:                         Selection Groups.    (line   6)
* select method:                         Terminology.         (line 159)
* select methods:                        Select Methods.      (line   6)
* selecting articles:                    Choosing Articles.   (line   6)
* selecting articles <1>:                Selection Groups.    (line   6)
* send delayed:                          Delayed Articles.    (line   6)
* sending mail:                          Composing Messages.  (line   6)
* sent messages:                         Archived Messages.   (line   6)
* September Gnus:                        Gnus Versions.       (line   6)
* series:                                Decoding Articles.   (line  18)
* server:                                Terminology.         (line 156)
* server buffer format:                  Server Buffer Format.
                                                              (line   6)
* server commands:                       Server Commands.     (line   6)
* server errors:                         The Server is Down.  (line   6)
* server parameters:                     Server Variables.    (line   6)
* server variables:                      Server Variables.    (line   6)
* servers:                               Don't Panic.         (line  47)
* setting marks:                         Setting Marks.       (line   6)
* setting process marks:                 Setting Process Marks.
                                                              (line   6)
* shared articles:                       Shell Archives.      (line   6)
* shell archives:                        Shell Archives.      (line   6)
* sieve:                                 Group Parameters.    (line 270)
* signatures:                            Article Signature.   (line   6)
* slash:                                 Article Fontifying.  (line  24)
* slow:                                  Troubleshooting.     (line  62)
* slow machine:                          Slow Machine.        (line   6)
* Smartquotes:                           Article Washing.     (line  69)
* smiley-data-directory:                 Smileys.             (line  34)
* smiley-regexp-alist:                   Smileys.             (line  19)
* smiley-style:                          Smileys.             (line  27)
* smileys:                               Article Display.     (line   6)
* smileys <1>:                           Smileys.             (line   6)
* snarfing keys:                         Security.            (line  60)
* solid groups:                          Terminology.         (line 178)
* sorting groups:                        Sorting Groups.      (line   6)
* sox:                                   Rule Variables.      (line  14)
* spam:                                  Thwarting Email Spam.
                                                              (line   6)
* spam <1>:                              Anti-Spam Basics.    (line   6)
* spam <2>:                              Spam Package.        (line   6)
* spam <3>:                              Spam Package Introduction.
                                                              (line   6)
* spam <4>:                              Filtering Incoming Mail.
                                                              (line   6)
* spam <5>:                              Spam and Ham Processors.
                                                              (line   6)
* spam <6>:                              Spam Package Configuration Examples.
                                                              (line   6)
* spam <7>:                              Blacklists and Whitelists.
                                                              (line   6)
* spam <8>:                              BBDB Whitelists.     (line   6)
* spam <9>:                              Gmane Spam Reporting.
                                                              (line   6)
* spam <10>:                             Anti-spam Hashcash Payments.
                                                              (line   6)
* spam <11>:                             Blackholes.          (line   6)
* spam <12>:                             Regular Expressions Header Matching.
                                                              (line   6)
* spam <13>:                             Bogofilter.          (line   6)
* spam <14>:                             SpamAssassin back end.
                                                              (line   6)
* spam <15>:                             ifile spam filtering.
                                                              (line   6)
* spam <16>:                             Spam Statistics Filtering.
                                                              (line   6)
* spam <17>:                             SpamOracle.          (line   6)
* spam back ends:                        Spam Package Introduction.
                                                              (line  41)
* spam back ends <1>:                    Spam Back Ends.      (line   6)
* spam configuration examples:           Spam Package Configuration Examples.
                                                              (line   6)
* spam elisp package, extending:         Extending the Spam package.
                                                              (line   6)
* spam filtering:                        Spam Package.        (line   6)
* spam filtering <1>:                    Spam Package Introduction.
                                                              (line   6)
* spam filtering <2>:                    Filtering Incoming Mail.
                                                              (line   6)
* spam filtering <3>:                    Spam and Ham Processors.
                                                              (line   6)
* spam filtering <4>:                    Spam Package Configuration Examples.
                                                              (line   6)
* spam filtering <5>:                    Blacklists and Whitelists.
                                                              (line   6)
* spam filtering <6>:                    BBDB Whitelists.     (line   6)
* spam filtering <7>:                    Anti-spam Hashcash Payments.
                                                              (line   6)
* spam filtering <8>:                    Blackholes.          (line   6)
* spam filtering <9>:                    Regular Expressions Header Matching.
                                                              (line   6)
* spam filtering <10>:                   Bogofilter.          (line   6)
* spam filtering <11>:                   SpamAssassin back end.
                                                              (line   6)
* spam filtering <12>:                   ifile spam filtering.
                                                              (line   6)
* spam filtering <13>:                   Spam Statistics Filtering.
                                                              (line   6)
* spam filtering <14>:                   SpamOracle.          (line   6)
* spam filtering <15>:                   Extending the Spam package.
                                                              (line   6)
* spam filtering approaches:             The problem of spam. (line   6)
* spam filtering configuration examples: Spam Package Configuration Examples.
                                                              (line   6)
* spam filtering incoming mail:          Filtering Incoming Mail.
                                                              (line   6)
* spam filtering sequence of events:     Spam Package Introduction.
                                                              (line   6)
* spam filtering variables:              Spam and Ham Processors.
                                                              (line   6)
* spam filtering, naive Bayesian:        Spam Statistics Package.
                                                              (line   6)
* spam reporting:                        Gmane Spam Reporting.
                                                              (line   6)
* spam variables:                        Spam and Ham Processors.
                                                              (line   6)
* spam-autodetect-recheck-messages:      Spam and Ham Processors.
                                                              (line 147)
* spam-blackhole-good-server-regex:      Blackholes.          (line  26)
* spam-blackhole-servers:                Blackholes.          (line  22)
* spam-bogofilter-database-directory:    Bogofilter.          (line  71)
* spam-bogofilter-score:                 Bogofilter.          (line  30)
* spam-ifile-all-categories:             ifile spam filtering.
                                                              (line  11)
* spam-ifile-database:                   ifile spam filtering.
                                                              (line  23)
* spam-ifile-spam-category:              ifile spam filtering.
                                                              (line  17)
* spam-initialize:                       Spam Package Introduction.
                                                              (line  12)
* spam-log-to-registry:                  Spam and Ham Processors.
                                                              (line 130)
* spam-mark-ham-unread-before-move-from-spam-group: Spam and Ham Processors.
                                                              (line 141)
* spam-mark-only-unseen-as-spam:         Spam and Ham Processors.
                                                              (line 137)
* spam-marks:                            Spam and Ham Processors.
                                                              (line  62)
* spam-process-ham-in-nonham-groups:     Spam and Ham Processors.
                                                              (line 105)
* spam-process-ham-in-spam-groups:       Spam and Ham Processors.
                                                              (line 100)
* spam-regex-headers-ham:                Regular Expressions Header Matching.
                                                              (line  20)
* spam-regex-headers-spam:               Regular Expressions Header Matching.
                                                              (line  15)
* spam-report-gmane-use-article-number:  Gmane Spam Reporting.
                                                              (line  24)
* spam-report-user-mail-address:         Gmane Spam Reporting.
                                                              (line  32)
* spam-spamassassin-program:             SpamAssassin back end.
                                                              (line  31)
* spam-spamoracle-binary:                SpamOracle.          (line  39)
* spam-spamoracle-database:              SpamOracle.          (line  44)
* spam-split-group:                      Filtering Incoming Mail.
                                                              (line  14)
* spam-stat:                             Spam Statistics Filtering.
                                                              (line   6)
* spam-stat <1>:                         Creating a spam-stat dictionary.
                                                              (line  43)
* spam-stat, spam filtering:             Spam Statistics Filtering.
                                                              (line   6)
* spam-stat-buffer-change-to-non-spam:   Low-level interface to the spam-stat dictionary.
                                                              (line  21)
* spam-stat-buffer-change-to-spam:       Low-level interface to the spam-stat dictionary.
                                                              (line  16)
* spam-stat-buffer-is-no-spam:           Low-level interface to the spam-stat dictionary.
                                                              (line  12)
* spam-stat-buffer-is-spam:              Low-level interface to the spam-stat dictionary.
                                                              (line   8)
* spam-stat-file:                        Creating a spam-stat dictionary.
                                                              (line  69)
* spam-stat-load:                        Low-level interface to the spam-stat dictionary.
                                                              (line  30)
* spam-stat-process-directory-age:       Creating a spam-stat dictionary.
                                                              (line  24)
* spam-stat-process-non-spam-directory:  Creating a spam-stat dictionary.
                                                              (line  20)
* spam-stat-process-spam-directory:      Creating a spam-stat dictionary.
                                                              (line  16)
* spam-stat-reduce-size:                 Creating a spam-stat dictionary.
                                                              (line  62)
* spam-stat-reset:                       Creating a spam-stat dictionary.
                                                              (line  52)
* spam-stat-save:                        Creating a spam-stat dictionary.
                                                              (line  66)
* spam-stat-save <1>:                    Low-level interface to the spam-stat dictionary.
                                                              (line  26)
* spam-stat-score-buffer:                Low-level interface to the spam-stat dictionary.
                                                              (line  37)
* spam-stat-score-word:                  Low-level interface to the spam-stat dictionary.
                                                              (line  34)
* spam-stat-split-fancy:                 Low-level interface to the spam-stat dictionary.
                                                              (line  40)
* spam-stat-split-fancy-spam-group:      Splitting mail using spam-stat.
                                                              (line  31)
* spam-use-BBDB:                         BBDB Whitelists.     (line   6)
* spam-use-BBDB-exclusive:               BBDB Whitelists.     (line  16)
* spam-use-blackholes:                   Blackholes.          (line   6)
* spam-use-blacklist:                    Blacklists and Whitelists.
                                                              (line   6)
* spam-use-bogofilter:                   Bogofilter.          (line   6)
* spam-use-bogofilter-headers:           Bogofilter.          (line  32)
* spam-use-dig:                          Blackholes.          (line  31)
* spam-use-hashcash:                     Anti-spam Hashcash Payments.
                                                              (line   6)
* spam-use-ifile:                        ifile spam filtering.
                                                              (line   6)
* spam-use-regex-headers:                Regular Expressions Header Matching.
                                                              (line   6)
* spam-use-spamassassin:                 SpamAssassin back end.
                                                              (line   6)
* spam-use-spamassassin-headers:         SpamAssassin back end.
                                                              (line  24)
* spam-use-spamoracle:                   SpamOracle.          (line  22)
* spam-use-spamoracle <1>:               SpamOracle.          (line  35)
* spam-use-stat:                         Spam Package Introduction.
                                                              (line  12)
* spam-use-stat <1>:                     Spam Statistics Filtering.
                                                              (line  12)
* spam-use-whitelist:                    Blacklists and Whitelists.
                                                              (line  14)
* spam-use-whitelist-exclusive:          Blacklists and Whitelists.
                                                              (line  22)
* SpamAssassin:                          SpamAssassin.        (line   6)
* spamassassin, spam filtering:          SpamAssassin back end.
                                                              (line   6)
* spamming:                              Crosspost Handling.  (line   6)
* SpamOracle:                            SpamOracle.          (line   6)
* sparse articles:                       Terminology.         (line 182)
* split:                                 The Gnus Registry.   (line   6)
* splitting mail:                        Splitting Mail.      (line   6)
* splitting, terminology:                Terminology.         (line 204)
* spool:                                 Terminology.         (line 151)
* starting up:                           Starting Up.         (line   6)
* startup files:                         Startup Files.       (line   6)
* sticky articles:                       Sticky Articles.     (line   6)
* stripping advertisements:              Article Hiding.      (line  43)
* styles:                                Posting Styles.      (line   6)
* subscribed:                            Group Parameters.    (line  69)
* subscription:                          New Groups.          (line   6)
* subscription <1>:                      Subscription Commands.
                                                              (line   6)
* summary buffer:                        Summary Buffer.      (line   6)
* summary buffer format:                 Summary Buffer Format.
                                                              (line   6)
* summary exit:                          Exiting the Summary Buffer.
                                                              (line   6)
* summary movement:                      Summary Maneuvering. (line   6)
* summary sorting:                       Summary Sorting.     (line   6)
* superseding articles:                  Canceling and Superseding.
                                                              (line   6)
* symbolic prefixes:                     Symbolic Prefixes.   (line   6)
* sync:                                  The Gnus Cloud.      (line   6)
* synch:                                 The Gnus Cloud.      (line   6)
* synchronization:                       The Gnus Cloud.      (line   6)
* system sleep:                          D-Bus Integration.   (line   6)
* tabbed interface:                      Tabbed Interface.    (line   6)
* tabs:                                  Tabbed Interface.    (line   6)
* temporary groups:                      Terminology.         (line 173)
* terminology:                           Terminology.         (line   6)
* the gnus diary library:                The Gnus Diary Library.
                                                              (line   6)
* the nndiary back end:                  The NNDiary Back End.
                                                              (line   6)
* thread commands:                       Thread Commands.     (line   6)
* thread root:                           Terminology.         (line 190)
* threading:                             Threading.           (line   6)
* threading <1>:                         Terminology.         (line 186)
* timestamps:                            Group Timestamp.     (line   6)
* To:                                    To From Newsgroups.  (line   6)
* to-address:                            Group Parameters.    (line  31)
* to-group:                              Group Parameters.    (line  99)
* to-list:                               Group Parameters.    (line  52)
* topic commands:                        Topic Commands.      (line   6)
* topic parameters:                      Topic Commands.      (line 152)
* topic parameters <1>:                  Topic Parameters.    (line   6)
* topic sorting:                         Topic Sorting.       (line   6)
* topic topology:                        Topic Topology.      (line   6)
* topic variables:                       Topic Variables.     (line   6)
* topics:                                Group Topics.        (line   6)
* topology:                              Topic Topology.      (line   6)
* total-expire:                          Group Parameters.    (line 133)
* track:                                 The Gnus Registry.   (line   6)
* transient-mark-mode:                   Process/Prefix.      (line  19)
* trees:                                 Tree Display.        (line   6)
* troubleshooting:                       Troubleshooting.     (line   6)
* UCE:                                   Thwarting Email Spam.
                                                              (line   6)
* UCE <1>:                               The problem of spam. (line   6)
* UCE <2>:                               Anti-Spam Basics.    (line   6)
* underline:                             Article Fontifying.  (line  24)
* undo:                                  Undo.                (line   6)
* Unicode:                               Article Washing.     (line  80)
* unix mail box:                         Unix Mail Box.       (line   6)
* Unix mbox:                             Document Groups.     (line  12)
* unplugged:                             Gnus Unplugged.      (line   6)
* unshar:                                Shell Archives.      (line   6)
* unsolicited commercial email:          Thwarting Email Spam.
                                                              (line   6)
* unsolicited commercial email <1>:      The problem of spam. (line   6)
* unsolicited commercial email <2>:      Anti-Spam Basics.    (line   6)
* updating sieve script:                 Sieve Commands.      (line  39)
* url:                                   Article Commands.    (line  21)
* USEFOR:                                Conformity.          (line  31)
* Usenet searches:                       Web Searches.        (line   6)
* User-Agent:                            Mail and Post.       (line  21)
* using gpg:                             Composing Messages.  (line   6)
* using gpg <1>:                         Signing and encrypting.
                                                              (line   6)
* using s/mime:                          Composing Messages.  (line   6)
* using s/mime <1>:                      Signing and encrypting.
                                                              (line   6)
* using smime:                           Composing Messages.  (line   6)
* using smime <1>:                       Signing and encrypting.
                                                              (line   6)
* UTF-8 group names:                     Non-ASCII Group Names.
                                                              (line  53)
* utility functions:                     Gnus Utility Functions.
                                                              (line   6)
* uudecode:                              Uuencoded Articles.  (line   6)
* uuencode:                              MIME Commands.       (line 128)
* uuencoded articles:                    Uuencoded Articles.  (line   6)
* velveeta:                              Crosspost Handling.  (line   6)
* version:                               Group Information.   (line  17)
* version-control:                       Startup Files.       (line  46)
* viewing attachments:                   MIME Commands.       (line   6)
* viewing files:                         Viewing Files.       (line   6)
* Vipul’s Razor:                         SpamAssassin.        (line   6)
* virtual groups:                        Combined Groups.     (line   6)
* virtual server:                        Terminology.         (line 163)
* visible:                               Group Parameters.    (line  83)
* visible group parameter:               Listing Groups.      (line  85)
* visual:                                Highlighting and Menus.
                                                              (line   6)
* washing:                               Article Washing.     (line   6)
* washing <1>:                           Terminology.         (line 168)
* web:                                   Article Commands.    (line  21)
* web <1>:                               Browsing the Web.    (line   6)
* whitelists, spam filtering:            Blacklists and Whitelists.
                                                              (line   6)
* window height:                         Window Layout.       (line 101)
* window layout:                         Window Layout.       (line   6)
* window width:                          Window Layout.       (line 101)
* www:                                   Browsing the Web.    (line   6)
* x-face:                                Article Display.     (line   6)
* x-face <1>:                            X-Face.              (line   6)
* x-face <2>:                            X-Face.              (line  10)
* X-GM-LABELS:                           Support for IMAP Extensions.
                                                              (line   6)
* X-Hashcash:                            Hashcash.            (line  23)
* XOVER:                                 NNTP.                (line 122)
* Xref:                                  Crosspost Handling.  (line  19)
* yEnc:                                  MIME Commands.       (line 128)
* zombie groups:                         Group Levels.        (line  41)
* zombie groups <1>:                     Terminology.         (line 133)


File: gnus.info,  Node: Key Index,  Prev: Index,  Up: Top

# /. 15 Key Index
****************

 [index ]
* Menu:

* ! (Summary):                           Setting Marks.       (line  16)
* # (Group):                             Marking Groups.      (line  16)
* # (Summary):                           Setting Process Marks.
                                                              (line  14)
* $ (Summary):                           Spam Package Introduction.
                                                              (line  80)
* & (Summary):                           Searching for Articles.
                                                              (line  23)
* * (Summary):                           Persistent Articles. (line  22)
* , (Group):                             Group Maneuvering.   (line  40)
* , (Summary):                           Choosing Commands.   (line  60)
* . (Summary):                           Choosing Commands.   (line  55)
* . (Article):                           Using MIME.          (line 104)
* . (Group):                             Group Maneuvering.   (line  44)
* . (Pick):                              Pick and Read.       (line  19)
* / * (Summary):                         Limiting.            (line 105)
* / . (Summary):                         Limiting.            (line  76)
* / / (Summary):                         Limiting.            (line  17)
* / a (Summary):                         Limiting.            (line  22)
* / A (Summary):                         Limiting.            (line  32)
* / b (Summary):                         Limiting.            (line 128)
* / c (Summary):                         Limiting.            (line 119)
* / C (Summary):                         Limiting.            (line 123)
* / D (Summary):                         Limiting.            (line 101)
* / d (Summary):                         Limiting.            (line 109)
* / E (Summary):                         Limiting.            (line  97)
* / h (Summary):                         Limiting.            (line 134)
* / m (Summary):                         Limiting.            (line  56)
* / M (Summary):                         Limiting.            (line 113)
* / n (Summary):                         Limiting.            (line  66)
* / N (Summary):                         Limiting.            (line 141)
* / o (Summary):                         Limiting.            (line 145)
* / p (Summary):                         Limiting.            (line  85)
* / R (Summary):                         Limiting.            (line  27)
* / r (Summary):                         Limiting.            (line  91)
* / S (Summary):                         Limiting.            (line  38)
* / t (Summary):                         Limiting.            (line  60)
* / T (Summary):                         Limiting.            (line 116)
* / u (Summary):                         Limiting.            (line  50)
* / v (Summary):                         Limiting.            (line  80)
* / w (Summary):                         Limiting.            (line  71)
* / x (Summary):                         Limiting.            (line  43)
* < (Summary):                           Paging the Article.  (line  50)
* = (Summary):                           Really Various Summary Commands.
                                                              (line  51)
* > (Summary):                           Paging the Article.  (line  55)
* ? (Article):                           Article Keymap.      (line  39)
* ? (Browse):                            Browse Foreign Server.
                                                              (line  45)
* ? (Group):                             Group Information.   (line  20)
* ? (Summary):                           Setting Marks.       (line  21)
* @ (Agent Summary):                     Summary Agent Commands.
                                                              (line  14)
* [ (Summary):                           Choosing Commands.   (line  42)
* ] (Summary):                           Choosing Commands.   (line  38)
* ^ (Group):                             Misc Group Stuff.    (line  27)
* ^ (Summary):                           Finding the Parent.  (line   7)
* | (Article):                           Using MIME.          (line 101)
* | (Summary):                           Saving Articles.     (line  60)
* A ! (Group):                           Listing Groups.      (line  70)
* a (Category):                          Category Buffer.     (line  26)
* a (Group):                             Misc Group Stuff.    (line  31)
* a (Server):                            Server Commands.     (line  16)
* a (Summary):                           Summary Post Commands.
                                                              (line  10)
* A / (Group):                           Listing Groups.      (line  73)
* A < (Summary):                         Paging the Article.  (line  50)
* A > (Summary):                         Paging the Article.  (line  55)
* A ? (Group):                           Listing Groups.      (line  67)
* A A (Group):                           Listing Groups.      (line  47)
* A a (Group):                           Listing Groups.      (line  56)
* A c (Group):                           Listing Groups.      (line  64)
* A d (Group):                           Listing Groups.      (line  60)
* A D (Summary):                         Really Various Summary Commands.
                                                              (line   8)
* A f (Group):                           Listing Groups.      (line  80)
* A g (Summary):                         Paging the Article.  (line  32)
* A k (Group):                           Listing Groups.      (line  31)
* A l (Group):                           Listing Groups.      (line  26)
* A m (Group):                           Listing Groups.      (line  40)
* A M (Group):                           Listing Groups.      (line  44)
* A M (Summary):                         Mailing List.        (line   6)
* A p (Group):                           Listing Groups.      (line  83)
* A P (Summary):                         Article Commands.    (line   7)
* A R (Summary):                         Finding the Parent.  (line  24)
* A s (Group):                           Listing Groups.      (line  10)
* A s (Summary):                         Paging the Article.  (line  59)
* A S (Summary):                         Sticky Articles.     (line  21)
* A t (Summary):                         Article Miscellanea. (line   7)
* A T (Summary):                         Finding the Parent.  (line  28)
* A T (Topic):                           Topic Commands.      (line 142)
* A u (Group):                           Listing Groups.      (line  19)
* A w (Summary):                         Article Commands.    (line  21)
* A z (Group):                           Listing Groups.      (line  37)
* B (Group):                             Finding the News.    (line  41)
* b (Group):                             Group Maintenance.   (line   7)
* B (Group) <1>:                         Browse Foreign Server.
                                                              (line   7)
* b (Summary):                           MIME Commands.       (line  11)
* B B (Summary):                         Mail Group Commands. (line  40)
* B c (Summary):                         Mail Group Commands. (line  35)
* B C-M-e (Summary):                     Mail Group Commands. (line  19)
* B DEL (Summary):                       Mail Group Commands. (line  25)
* B e (Summary):                         Mail Group Commands. (line  13)
* B i (Summary):                         Mail Group Commands. (line  46)
* B I (Summary):                         Mail Group Commands. (line  51)
* B m (Summary):                         Mail Group Commands. (line  30)
* B p (Summary):                         Mail Group Commands. (line  80)
* B q (Summary):                         Mail Group Commands. (line  71)
* B r (Summary):                         Mail Group Commands. (line  56)
* B t (Summary):                         Mail Group Commands. (line  76)
* B w (Summary):                         Mail Group Commands. (line  65)
* C (Article):                           Using MIME.          (line  41)
* c (Article):                           Using MIME.          (line  67)
* c (Category):                          Category Buffer.     (line  23)
* c (Group):                             Group Data.          (line   7)
* C (Group):                             Group Data.          (line  12)
* c (Server):                            Server Commands.     (line  37)
* C (Server):                            Unavailable Servers. (line  32)
* c (Server) <1>:                        Unavailable Servers. (line  52)
* C (Summary):                           Canceling and Superseding.
                                                              (line  11)
* c (Summary):                           Exiting the Summary Buffer.
                                                              (line  27)
* C-c C-c (Article):                     Mail Group Commands. (line  65)
* C-c C-c (Post):                        Composing Messages.  (line   6)
* C-c C-c (Score):                       Score File Editing.  (line  14)
* C-c C-d (Group):                       Group Information.   (line   8)
* C-c C-d (Score):                       Score File Editing.  (line  18)
* C-c C-f (Summary):                     Summary Mail Commands.
                                                              (line  65)
* C-c C-i (Group):                       Group Information.   (line  23)
* C-c C-m (Article):                     Article Keymap.      (line  31)
* C-c C-m c o (Message):                 Signing and encrypting.
                                                              (line  38)
* C-c C-m c p (Message):                 Signing and encrypting.
                                                              (line  42)
* C-c C-m c s (Message):                 Signing and encrypting.
                                                              (line  34)
* C-c C-m C-n (Message):                 Signing and encrypting.
                                                              (line  46)
* C-c C-m s o (Message):                 Signing and encrypting.
                                                              (line  26)
* C-c C-m s p (Message):                 Signing and encrypting.
                                                              (line  30)
* C-c C-m s s (Message):                 Signing and encrypting.
                                                              (line  22)
* C-c C-M-x (Group):                     Group Maintenance.   (line  24)
* C-c C-n a (Summary):                   Mailing List.        (line  32)
* C-c C-n h (Summary):                   Mailing List.        (line  13)
* C-c C-n o (Summary):                   Mailing List.        (line  28)
* C-c C-n p (Summary):                   Mailing List.        (line  25)
* C-c C-n s (Summary):                   Mailing List.        (line  17)
* C-c C-n u (Summary):                   Mailing List.        (line  21)
* C-c C-p (Score):                       Score File Editing.  (line  23)
* C-c C-s (Group):                       Sorting Groups.      (line   6)
* C-c C-s C-a (Summary):                 Summary Sorting.     (line  17)
* C-c C-s C-c (Summary):                 Summary Sorting.     (line  35)
* C-c C-s C-d (Summary):                 Summary Sorting.     (line  26)
* C-c C-s C-i (Summary):                 Summary Sorting.     (line  41)
* C-c C-s C-l (Summary):                 Summary Sorting.     (line  32)
* C-c C-s C-m C-d (Summary):             Summary Sorting.     (line  29)
* C-c C-s C-m C-m (Summary):             Summary Sorting.     (line  38)
* C-c C-s C-n (Summary):                 Summary Sorting.     (line  10)
* C-c C-s C-n (Summary) <1>:             Summary Sorting.     (line  13)
* C-c C-s C-o (Summary):                 Summary Sorting.     (line  55)
* C-c C-s C-r (Summary):                 Summary Sorting.     (line  52)
* C-c C-s C-s (Summary):                 Summary Sorting.     (line  23)
* C-c C-s C-t (Summary):                 Summary Sorting.     (line  20)
* C-c C-s C-u (Summary):                 Summary Sorting.     (line  44)
* C-c C-s C-x (Summary):                 Summary Sorting.     (line  47)
* C-c C-x (Group):                       Group Maintenance.   (line  18)
* C-c C-x (Topic):                       Topic Commands.      (line 131)
* C-c M-g (Group):                       Scanning New Messages.
                                                              (line  20)
* C-c ^ (Article):                       Article Keymap.      (line  26)
* C-d (Summary):                         Really Various Summary Commands.
                                                              (line   8)
* C-k (Group):                           Subscription Commands.
                                                              (line  24)
* C-k (Summary):                         Setting Marks.       (line  41)
* C-k (Topic):                           Topic Commands.      (line  40)
* C-M-a (Summary):                       Really Various Summary Commands.
                                                              (line  59)
* C-M-d (Summary):                       Really Various Summary Commands.
                                                              (line  37)
* C-M-e (Summary):                       Really Various Summary Commands.
                                                              (line  55)
* C-M-k (Summary):                       Thread Commands.     (line   8)
* C-M-l (Summary):                       Thread Commands.     (line  15)
* C-M-n (Summary):                       Thread Commands.     (line  64)
* C-M-p (Summary):                       Thread Commands.     (line  69)
* C-M-RET (Group):                       Selecting a Group.   (line  48)
* C-o (Article):                         Using MIME.          (line  49)
* C-t (Summary):                         Really Various Summary Commands.
                                                              (line  45)
* C-w (Group):                           Subscription Commands.
                                                              (line  37)
* C-w (Summary):                         Setting Marks.       (line  60)
* C-x C-s (Summary):                     Exiting the Summary Buffer.
                                                              (line  44)
* C-x C-t (Group):                       Subscription Commands.
                                                              (line  31)
* C-y (Group):                           Subscription Commands.
                                                              (line  28)
* C-y (Topic):                           Topic Commands.      (line  44)
* d (Article):                           Using MIME.          (line  62)
* d (Browse):                            Browse Foreign Server.
                                                              (line  42)
* D (Server):                            Unavailable Servers. (line  36)
* d (Summary):                           Setting Marks.       (line  26)
* D (Summary):                           Setting Marks.       (line  30)
* D e (Draft):                           Drafts.              (line  36)
* D g (Group):                           Sieve Commands.      (line  35)
* D s (Draft):                           Drafts.              (line  43)
* D S (Draft):                           Drafts.              (line  43)
* D t (Draft):                           Drafts.              (line  50)
* D u (Group):                           Sieve Commands.      (line  39)
* DEL (Article):                         Article Keymap.      (line  22)
* DEL (Browse):                          Browse Foreign Server.
                                                              (line  49)
* DEL (Group):                           Group Maneuvering.   (line  15)
* DEL (Summary):                         Paging the Article.  (line  19)
* E (Article):                           Using MIME.          (line  92)
* e (Article):                           Using MIME.          (line  97)
* e (Category):                          Category Buffer.     (line  16)
* e (Server):                            Server Commands.     (line  19)
* E (Summary):                           Setting Marks.       (line  69)
* e (Summary):                           Mail Group Commands. (line  65)
* F (Article):                           Article Keymap.      (line  60)
* F (Group):                             Group Maintenance.   (line  11)
* f (Summary):                           Summary Post Commands.
                                                              (line  16)
* F (Summary):                           Summary Post Commands.
                                                              (line  20)
* g (Binary):                            Binary Groups.       (line  12)
* g (Category):                          Category Buffer.     (line  33)
* g (Group):                             Scanning New Messages.
                                                              (line   7)
* g (Server):                            Server Commands.     (line  48)
* g (Summary):                           Paging the Article.  (line  32)
* G b (Summary):                         Choosing Commands.   (line  60)
* G b a (Group):                         nnmairix keyboard shortcuts.
                                                              (line  60)
* G b c (Group):                         nnmairix keyboard shortcuts.
                                                              (line   9)
* G b d (Group):                         nnmairix keyboard shortcuts.
                                                              (line  55)
* G b g (Group):                         nnmairix keyboard shortcuts.
                                                              (line  28)
* G b i (Group):                         nnmairix keyboard shortcuts.
                                                              (line  24)
* G b m (Group):                         nnmairix keyboard shortcuts.
                                                              (line  19)
* G b o (Group):                         nnmairix keyboard shortcuts.
                                                              (line  76)
* G b p (Group):                         nnmairix keyboard shortcuts.
                                                              (line  71)
* G b q (Group):                         nnmairix keyboard shortcuts.
                                                              (line  34)
* G b r (Group):                         nnmairix keyboard shortcuts.
                                                              (line  50)
* G b s (Group):                         nnmairix keyboard shortcuts.
                                                              (line  14)
* G b t (Group):                         nnmairix keyboard shortcuts.
                                                              (line  38)
* G b u (Group):                         nnmairix keyboard shortcuts.
                                                              (line  43)
* G c (Group):                           Foreign Groups.      (line  39)
* G C-n (Summary):                       Choosing Commands.   (line  46)
* G C-p (Summary):                       Choosing Commands.   (line  50)
* G d (Group):                           Foreign Groups.      (line  54)
* G D (Group):                           Foreign Groups.      (line  62)
* G DEL (Group):                         Foreign Groups.      (line  97)
* G e (Group):                           Foreign Groups.      (line  42)
* G E (Group):                           Foreign Groups.      (line  50)
* G f (Summary):                         Choosing Commands.   (line  55)
* G f (Group):                           Foreign Groups.      (line  67)
* G g (Summary):                         Summary Maneuvering. (line  22)
* G G f (Summary):                       nnmairix keyboard shortcuts.
                                                              (line  98)
* G G g (Summary):                       nnmairix keyboard shortcuts.
                                                              (line  87)
* G G m (Summary):                       nnmairix keyboard shortcuts.
                                                              (line  82)
* G G o (Summary):                       nnmairix keyboard shortcuts.
                                                              (line 103)
* G G t (Summary):                       nnmairix keyboard shortcuts.
                                                              (line  92)
* G G u (Summary):                       nnmairix keyboard shortcuts.
                                                              (line 112)
* G h (Group):                           Foreign Groups.      (line  59)
* G j (Summary):                         Choosing Commands.   (line  79)
* G l (Summary):                         Choosing Commands.   (line  67)
* G m (Group):                           Foreign Groups.      (line  24)
* G M (Group):                           Foreign Groups.      (line  29)
* G M-n (Summary):                       Summary Maneuvering. (line  13)
* G M-p (Summary):                       Summary Maneuvering. (line  18)
* G n (Summary):                         Choosing Commands.   (line  22)
* G N (Summary):                         Choosing Commands.   (line  30)
* G o (Summary):                         Choosing Commands.   (line  70)
* G p (Group):                           Foreign Groups.      (line  46)
* G P (Summary):                         Choosing Commands.   (line  34)
* G p (Topic):                           Topic Commands.      (line 152)
* G P a (Group):                         Sorting Groups.      (line  80)
* G P l (Group):                         Sorting Groups.      (line  88)
* G P m (Group):                         Sorting Groups.      (line 100)
* G P n (Group):                         Sorting Groups.      (line 104)
* G P r (Group):                         Sorting Groups.      (line  96)
* G P s (Group):                         Sorting Groups.      (line 108)
* G P u (Group):                         Sorting Groups.      (line  84)
* G P v (Group):                         Sorting Groups.      (line  92)
* G r (Group):                           Foreign Groups.      (line  33)
* G R (Group):                           Foreign Groups.      (line  93)
* G R (Group) <1>:                       RSS.                 (line  15)
* G S a (Group):                         Sorting Groups.      (line  44)
* G S l (Group):                         Sorting Groups.      (line  52)
* G S m (Group):                         Sorting Groups.      (line  64)
* G S n (Group):                         Sorting Groups.      (line  68)
* G S r (Group):                         Sorting Groups.      (line  60)
* G S u (Group):                         Sorting Groups.      (line  48)
* G S v (Group):                         Sorting Groups.      (line  56)
* G u (Group):                           Foreign Groups.      (line  78)
* G u (Summary):                         Choosing Commands.   (line  38)
* G U (Summary):                         Choosing Commands.   (line  42)
* G V (Group):                           Foreign Groups.      (line 105)
* G v (Group):                           Foreign Groups.      (line 109)
* G w (Group):                           Foreign Groups.      (line  82)
* G z (Group):                           Misc Group Stuff.    (line  56)
* h (Summary):                           Paging the Article.  (line  63)
* H d (Group):                           Group Information.   (line   8)
* H d (Summary):                         Summary Group Information.
                                                              (line   7)
* H h (Summary):                         Summary Group Information.
                                                              (line  12)
* H i (Summary):                         Summary Group Information.
                                                              (line  16)
* H v (Group):                           Group Information.   (line  17)
* i (Article):                           Using MIME.          (line  81)
* i (Group):                             Misc Group Stuff.    (line  45)
* J # (Agent Summary):                   Summary Agent Commands.
                                                              (line   7)
* j (Group):                             Group Maneuvering.   (line  35)
* j (Summary):                           Choosing Commands.   (line  79)
* J a (Agent Group):                     Group Agent Commands.
                                                              (line  22)
* J a (Agent Server):                    Server Agent Commands.
                                                              (line   7)
* J c (Agent Group):                     Group Agent Commands.
                                                              (line  11)
* J c (Agent Summary):                   Summary Agent Commands.
                                                              (line  18)
* J j (Agent):                           Agent Commands.      (line   6)
* J M-# (Agent Summary):                 Summary Agent Commands.
                                                              (line  10)
* J r (Agent Group):                     Group Agent Commands.
                                                              (line  27)
* J r (Agent Server):                    Server Agent Commands.
                                                              (line  11)
* J s (Agent Group):                     Group Agent Commands.
                                                              (line  14)
* J S (Agent Group):                     Group Agent Commands.
                                                              (line  18)
* J S (Agent Summary):                   Summary Agent Commands.
                                                              (line  22)
* J s (Agent Summary):                   Summary Agent Commands.
                                                              (line  26)
* J u (Agent Group):                     Group Agent Commands.
                                                              (line   7)
* J u (Agent Summary):                   Summary Agent Commands.
                                                              (line  30)
* J Y (Agent Group):                     Group Agent Commands.
                                                              (line  32)
* k (Article):                           Sticky Articles.     (line  31)
* k (Category):                          Category Buffer.     (line  20)
* k (Server):                            Server Commands.     (line  31)
* k (Summary):                           Setting Marks.       (line  35)
* K b (Summary):                         MIME Commands.       (line  61)
* K c (Summary):                         MIME Commands.       (line  29)
* K d (Summary):                         MIME Commands.       (line  25)
* K e (Summary):                         MIME Commands.       (line  32)
* K E (Summary):                         Mail Group Commands. (line  92)
* K H (Summary):                         MIME Commands.       (line  44)
* K i (Summary):                         MIME Commands.       (line  35)
* K m (Summary):                         MIME Commands.       (line  76)
* K o (Summary):                         MIME Commands.       (line  14)
* K O (Summary):                         MIME Commands.       (line  17)
* K r (Summary):                         MIME Commands.       (line  22)
* K v (Summary):                         MIME Commands.       (line  11)
* K | (Summary):                         MIME Commands.       (line  38)
* l (Browse):                            Browse Foreign Server.
                                                              (line  39)
* l (Category):                          Category Buffer.     (line  41)
* l (Group):                             Listing Groups.      (line  10)
* L (Group):                             Listing Groups.      (line  19)
* l (Server):                            Server Commands.     (line  40)
* L (Server):                            Unavailable Servers. (line  58)
* l (Summary):                           Choosing Commands.   (line  67)
* m (Group):                             Misc Group Stuff.    (line  39)
* m (Summary):                           Summary Mail Commands.
                                                              (line  79)
* M ? (Summary):                         Setting Marks.       (line  21)
* M b (Group):                           Marking Groups.      (line  35)
* M b (Summary):                         Setting Marks.       (line  73)
* M B (Summary):                         Setting Marks.       (line  77)
* M c (Summary):                         Setting Marks.       (line  10)
* M C (Summary):                         Setting Marks.       (line  45)
* M C-c (Summary):                       Setting Marks.       (line  48)
* M d (Summary):                         Setting Marks.       (line  26)
* M e (Summary):                         Setting Marks.       (line  69)
* M H (Summary):                         Setting Marks.       (line  52)
* M h (Summary):                         Setting Marks.       (line  56)
* M k (Summary):                         Setting Marks.       (line  35)
* M K (Summary):                         Setting Marks.       (line  41)
* M m (Group):                           Marking Groups.      (line  17)
* M P a (Summary):                       Setting Process Marks.
                                                              (line  66)
* M P b (Summary):                       Setting Process Marks.
                                                              (line  69)
* M P G (Summary):                       Setting Process Marks.
                                                              (line  37)
* M P g (Summary):                       Setting Process Marks.
                                                              (line  44)
* M P i (Summary):                       Setting Process Marks.
                                                              (line  29)
* M P k (Summary):                       Setting Process Marks.
                                                              (line  73)
* M P p (Summary):                       Setting Process Marks.
                                                              (line  14)
* M P R (Summary):                       Setting Process Marks.
                                                              (line  33)
* M P r (Summary):                       Setting Process Marks.
                                                              (line  41)
* M P s (Summary):                       Setting Process Marks.
                                                              (line  59)
* M P S (Summary):                       Setting Process Marks.
                                                              (line  62)
* M P t (Summary):                       Setting Process Marks.
                                                              (line  47)
* M P T (Summary):                       Setting Process Marks.
                                                              (line  51)
* M P u (Summary):                       Setting Process Marks.
                                                              (line  21)
* M P U (Summary):                       Setting Process Marks.
                                                              (line  25)
* M P v (Summary):                       Setting Process Marks.
                                                              (line  55)
* M P w (Summary):                       Setting Process Marks.
                                                              (line  81)
* M P y (Summary):                       Setting Process Marks.
                                                              (line  77)
* M r (Group):                           Marking Groups.      (line  38)
* M S (Summary):                         Limiting.            (line  97)
* M s t:                                 Bogofilter.          (line  30)
* M s x (Summary):                       Spam Package Introduction.
                                                              (line  80)
* M t (Summary):                         Setting Marks.       (line  16)
* M u (Group):                           Marking Groups.      (line  24)
* M U (Group):                           Marking Groups.      (line  28)
* M V c (Summary):                       Setting Marks.       (line  81)
* M V k (Summary):                       Setting Marks.       (line  64)
* M V m (Summary):                       Setting Marks.       (line  89)
* M V u (Summary):                       Setting Marks.       (line  85)
* M w (Group):                           Marking Groups.      (line  32)
* M-# (Group):                           Marking Groups.      (line  23)
* M-# (Summary):                         Setting Process Marks.
                                                              (line  21)
* M-& (Summary):                         Searching for Articles.
                                                              (line  34)
* M-* (Summary):                         Persistent Articles. (line  25)
* M-c (Group):                           Group Data.          (line  16)
* M-c (Server):                          Unavailable Servers. (line  44)
* M-d (Group):                           Group Information.   (line  12)
* M-d (Summary):                         Spam Package Introduction.
                                                              (line  80)
* M-DOWN (Summary):                      Thread Commands.     (line  65)
* M-g (Group):                           Scanning New Messages.
                                                              (line  14)
* M-g (Summary):                         Exiting the Summary Buffer.
                                                              (line  50)
* M-i (Summary):                         Symbolic Prefixes.   (line  19)
* M-k (Group):                           Kill Files.          (line  43)
* M-K (Group):                           Kill Files.          (line  46)
* M-k (Summary):                         Kill Files.          (line  35)
* M-K (Summary):                         Kill Files.          (line  38)
* M-n (Group):                           Group Maneuvering.   (line  25)
* M-n (Summary):                         Summary Maneuvering. (line  13)
* M-o (Server):                          Unavailable Servers. (line  40)
* M-p (Group):                           Group Maneuvering.   (line  29)
* M-p (Summary):                         Summary Maneuvering. (line  18)
* M-R (Summary):                         Searching for Articles.
                                                              (line  19)
* M-RET (Article):                       Using MIME.          (line  32)
* M-RET (Group):                         Selecting a Group.   (line  32)
* M-RET (Summary):                       Paging the Article.  (line  27)
* M-S (Summary):                         Searching for Articles.
                                                              (line  15)
* M-s M-r (Summary):                     Searching for Articles.
                                                              (line  11)
* M-s M-s (Summary):                     Searching for Articles.
                                                              (line   7)
* M-SPC (Group):                         Selecting a Group.   (line  43)
* M-t (Summary):                         MIME Commands.       (line  87)
* M-TAB (Article):                       Article Keymap.      (line  47)
* M-TAB (Topic):                         Topic Commands.      (line  31)
* M-u (Summary):                         Setting Marks.       (line  10)
* M-UP (Summary):                        Thread Commands.     (line  70)
* M-^ (Summary):                         Finding the Parent.  (line  59)
* n (Browse):                            Browse Foreign Server.
                                                              (line  18)
* n (Group):                             Group Maneuvering.   (line  10)
* N (Group):                             Group Maneuvering.   (line  19)
* n (Summary):                           Choosing Commands.   (line  22)
* N (Summary):                           Choosing Commands.   (line  30)
* o (Article):                           Using MIME.          (line  45)
* O (Server):                            Unavailable Servers. (line  28)
* o (Summary):                           Saving Articles.     (line  26)
* O b (Summary):                         Saving Articles.     (line  47)
* O f (Summary):                         Saving Articles.     (line  39)
* O F (Summary):                         Saving Articles.     (line  43)
* O h (Summary):                         Saving Articles.     (line  51)
* O m (Summary):                         Saving Articles.     (line  30)
* O o (Summary):                         Saving Articles.     (line  26)
* O p (Summary):                         Saving Articles.     (line  60)
* O P (Summary):                         Saving Articles.     (line  70)
* O r (Summary):                         Saving Articles.     (line  34)
* O v (Summary):                         Saving Articles.     (line  55)
* p (Article):                           Using MIME.          (line  77)
* p (Browse):                            Browse Foreign Server.
                                                              (line  21)
* p (Category):                          Category Buffer.     (line  29)
* p (Group):                             Group Maneuvering.   (line  15)
* P (Group):                             Group Maneuvering.   (line  22)
* p (Summary):                           Choosing Commands.   (line  26)
* P (Summary):                           Choosing Commands.   (line  34)
* q (Article):                           Sticky Articles.     (line  27)
* q (Browse):                            Browse Foreign Server.
                                                              (line  39)
* q (Category):                          Category Buffer.     (line  13)
* q (Group):                             Exiting Gnus.        (line  14)
* Q (Group):                             Exiting Gnus.        (line  17)
* q (Server):                            Server Commands.     (line  28)
* q (Summary):                           Exiting the Summary Buffer.
                                                              (line  12)
* Q (Summary):                           Exiting the Summary Buffer.
                                                              (line  22)
* r (Article):                           Using MIME.          (line  57)
* R (Article):                           Article Keymap.      (line  50)
* R (Group):                             Scanning New Messages.
                                                              (line  23)
* r (Group):                             File Commands.       (line   7)
* R (Server):                            Unavailable Servers. (line  48)
* r (Summary):                           Summary Mail Commands.
                                                              (line  10)
* R (Summary):                           Summary Mail Commands.
                                                              (line  15)
* RET (Article):                         Using MIME.          (line  25)
* RET (Browse):                          Browse Foreign Server.
                                                              (line  28)
* RET (Group):                           Selecting a Group.   (line  25)
* RET (Pick):                            Pick and Read.       (line  42)
* RET (Summary):                         Paging the Article.  (line  23)
* RET (Topic):                           Topic Commands.      (line  62)
* s (Article):                           Article Keymap.      (line  35)
* s (Category):                          Category Buffer.     (line  37)
* s (Group):                             File Commands.       (line  11)
* S (Server):                            Server Commands.     (line  22)
* s (Server):                            Server Commands.     (line  43)
* s (Summary):                           Paging the Article.  (line  59)
* S (Summary):                           Canceling and Superseding.
                                                              (line  32)
* S A (Summary):                         Summary Message Commands.
                                                              (line  13)
* S B r (Summary):                       Summary Mail Commands.
                                                              (line  51)
* S B R (Summary):                       Summary Mail Commands.
                                                              (line  59)
* S C-k (Group):                         Subscription Commands.
                                                              (line  43)
* S D b (Summary):                       Summary Mail Commands.
                                                              (line  96)
* S D e (Summary):                       Summary Mail Commands.
                                                              (line 126)
* S D r (Summary):                       Summary Mail Commands.
                                                              (line 107)
* S f (Summary):                         Summary Post Commands.
                                                              (line  16)
* S F (Summary):                         Summary Post Commands.
                                                              (line  20)
* S i (Summary):                         Summary Mail Commands.
                                                              (line  85)
* S k (Group):                           Subscription Commands.
                                                              (line  24)
* S l (Group):                           Group Levels.        (line  16)
* S L (Summary):                         Summary Mail Commands.
                                                              (line  33)
* S m (Summary):                         Summary Mail Commands.
                                                              (line  79)
* S M-c (Summary):                       Summary Mail Commands.
                                                              (line 137)
* S n (Summary):                         Summary Post Commands.
                                                              (line  25)
* S N (Summary):                         Summary Post Commands.
                                                              (line  29)
* S o m (Summary):                       Summary Mail Commands.
                                                              (line  65)
* S O m (Summary):                       Summary Mail Commands.
                                                              (line 131)
* S o p (Summary):                       Summary Post Commands.
                                                              (line  35)
* S O p (Summary):                       Summary Post Commands.
                                                              (line  48)
* S p (Summary):                         Summary Post Commands.
                                                              (line  10)
* S r (Summary):                         Summary Mail Commands.
                                                              (line  10)
* S R (Summary):                         Summary Mail Commands.
                                                              (line  15)
* S s (Group):                           Subscription Commands.
                                                              (line  19)
* S t:                                   Bogofilter.          (line  30)
* S t (Group):                           Subscription Commands.
                                                              (line  14)
* S u (Summary):                         Summary Post Commands.
                                                              (line  53)
* S v (Summary):                         Summary Mail Commands.
                                                              (line  38)
* S V (Summary):                         Summary Mail Commands.
                                                              (line  45)
* S W (Article):                         Article Keymap.      (line  55)
* S w (Group):                           Subscription Commands.
                                                              (line  37)
* S w (Summary):                         Summary Mail Commands.
                                                              (line  20)
* S W (Summary):                         Summary Mail Commands.
                                                              (line  27)
* S x (Summary):                         Spam Package Introduction.
                                                              (line  80)
* S y (Group):                           Subscription Commands.
                                                              (line  28)
* S y (Summary):                         Summary Message Commands.
                                                              (line   7)
* S z (Group):                           Subscription Commands.
                                                              (line  40)
* SPC (Article):                         Article Keymap.      (line  18)
* SPC (Browse):                          Browse Foreign Server.
                                                              (line  24)
* SPC (Group):                           Selecting a Group.   (line   7)
* SPC (Pick):                            Pick and Read.       (line  30)
* SPC (Server):                          Server Commands.     (line  25)
* SPC (Summary):                         Choosing Commands.   (line  13)
* SPC (Summary) <1>:                     Paging the Article.  (line   7)
* T # (Summary):                         Thread Commands.     (line  23)
* T # (Topic):                           Topic Commands.      (line 119)
* t (Article):                           Using MIME.          (line  37)
* t (Group):                             Group Topics.        (line  26)
* t (Summary):                           Article Washing.     (line  58)
* T c (Topic):                           Topic Commands.      (line  82)
* T C (Topic):                           Topic Commands.      (line 111)
* T d (Summary):                         Thread Commands.     (line  73)
* T D (Topic):                           Topic Commands.      (line  95)
* T DEL (Topic):                         Topic Commands.      (line 139)
* T h (Summary):                         Thread Commands.     (line  38)
* T H (Summary):                         Thread Commands.     (line  44)
* T h (Topic):                           Topic Commands.      (line  87)
* T H (Topic):                           Topic Commands.      (line 115)
* T i (Summary):                         Thread Commands.     (line  19)
* T j (Topic):                           Topic Commands.      (line  79)
* T k (Summary):                         Thread Commands.     (line   8)
* T l (Summary):                         Thread Commands.     (line  15)
* T m (Topic):                           Topic Commands.      (line  74)
* T M (Topic):                           Topic Commands.      (line 107)
* T M-# (Summary):                       Thread Commands.     (line  27)
* T M-# (Topic):                         Topic Commands.      (line 126)
* T M-n (Topic):                         Topic Commands.      (line 146)
* T M-p (Topic):                         Topic Commands.      (line 149)
* T M-^ (Summary):                       Thread Commands.     (line  56)
* T n (Summary):                         Thread Commands.     (line  63)
* T n (Topic):                           Topic Commands.      (line  21)
* T o (Summary):                         Thread Commands.     (line  79)
* T p (Summary):                         Thread Commands.     (line  68)
* T r (Topic):                           Topic Commands.      (line 136)
* T s (Summary):                         Thread Commands.     (line  34)
* T S (Summary):                         Thread Commands.     (line  41)
* T s (Topic):                           Topic Commands.      (line  91)
* T S a (Topic):                         Topic Sorting.       (line  10)
* T S e (Topic):                         Topic Sorting.       (line  34)
* T S l (Topic):                         Topic Sorting.       (line  18)
* T S m (Topic):                         Topic Sorting.       (line  30)
* T S r (Topic):                         Topic Sorting.       (line  26)
* T S s (Topic):                         Topic Sorting.       (line  38)
* T S u (Topic):                         Topic Sorting.       (line  14)
* T S v (Topic):                         Topic Sorting.       (line  22)
* T T (Summary):                         Thread Commands.     (line  31)
* T t (Summary):                         Thread Commands.     (line  47)
* T TAB (Topic):                         Topic Commands.      (line  26)
* T u (Summary):                         Thread Commands.     (line  76)
* T ^ (Summary):                         Thread Commands.     (line  52)
* TAB (Article):                         Article Keymap.      (line  43)
* TAB (Topic):                           Topic Commands.      (line  26)
* u (Browse):                            Browse Foreign Server.
                                                              (line  31)
* u (Group):                             Subscription Commands.
                                                              (line  14)
* U (Group):                             Subscription Commands.
                                                              (line  19)
* u (Pick):                              Pick and Read.       (line  34)
* v (Article):                           Article Keymap.      (line  12)
* v (Group):                             Misc Group Stuff.    (line  15)
* V (Group):                             Group Information.   (line  17)
* v (Server):                            Server Commands.     (line  12)
* v (Summary):                           Summary Buffer.      (line  17)
* V c (Summary):                         Summary Score Commands.
                                                              (line  43)
* V C (Summary):                         Summary Score Commands.
                                                              (line  60)
* V e (Summary):                         Summary Score Commands.
                                                              (line  47)
* V f (Summary):                         Summary Score Commands.
                                                              (line  52)
* V F (Summary):                         Summary Score Commands.
                                                              (line  56)
* V m (Summary):                         Summary Score Commands.
                                                              (line  66)
* V R (Summary):                         Summary Score Commands.
                                                              (line  37)
* V s (Summary):                         Summary Score Commands.
                                                              (line  20)
* V S (Summary):                         Summary Score Commands.
                                                              (line  23)
* V t (Summary):                         Summary Score Commands.
                                                              (line  27)
* V w (Summary):                         Summary Score Commands.
                                                              (line  34)
* V x (Summary):                         Summary Score Commands.
                                                              (line  70)
* w (Summary):                           Article Commands.    (line  21)
* W 6 (Summary):                         Article Washing.     (line 140)
* W A (Summary):                         Article Washing.     (line 153)
* W a (Summary):                         Article Washing.     (line 219)
* W b (Summary):                         Article Washing.     (line 201)
* W B (Summary):                         Article Washing.     (line 205)
* W C (Summary):                         Article Washing.     (line 120)
* W c (Summary):                         Article Washing.     (line 124)
* W d (Summary):                         Article Washing.     (line  69)
* W D d (Summary):                       Article Display.     (line  32)
* W D D (Summary):                       Article Display.     (line  62)
* W D e (Summary):                       Article Display.     (line  57)
* W D F (Summary):                       Article Washing.     (line 197)
* W D f (Summary):                       Article Display.     (line  39)
* W D g (Summary):                       Article Display.     (line  50)
* W D h (Summary):                       Article Display.     (line  53)
* W D m (Summary):                       Article Display.     (line  42)
* W D n (Summary):                       Article Display.     (line  46)
* W D s (Summary):                       Article Display.     (line  36)
* W D W (Summary):                       Article Display.     (line  66)
* W D x (Summary):                       Article Display.     (line  28)
* W e (Group):                           Group Score Commands.
                                                              (line   9)
* W e (Summary):                         Article Fontifying.  (line   6)
* W E a (Summary):                       Article Washing.     (line 236)
* W E A (Summary):                       Article Washing.     (line 239)
* W E e (Summary):                       Article Washing.     (line 246)
* W E l (Summary):                       Article Washing.     (line 223)
* W E m (Summary):                       Article Washing.     (line 227)
* W E s (Summary):                       Article Washing.     (line 242)
* W E t (Summary):                       Article Washing.     (line 232)
* W E w (Summary):                       Article Header.      (line  19)
* W f (Group):                           Group Score Commands.
                                                              (line  13)
* W G f (Summary):                       Article Header.      (line  16)
* W G n (Summary):                       Article Header.      (line  12)
* W G u (Summary):                       Article Header.      (line   9)
* W h (Summary):                         Article Washing.     (line 164)
* W H a (Summary):                       Article Highlighting.
                                                              (line  10)
* W H c (Summary):                       Article Highlighting.
                                                              (line  25)
* W H h (Summary):                       Article Highlighting.
                                                              (line  15)
* W H s (Summary):                       Article Highlighting.
                                                              (line  71)
* W i (Summary):                         Article Washing.     (line  49)
* W l (Summary):                         Article Washing.     (line  29)
* W m (Summary):                         Article Washing.     (line  46)
* W M c (Summary):                       MIME Commands.       (line  95)
* W M h (Summary):                       MIME Commands.       (line  66)
* W M v (Summary):                       MIME Commands.       (line 106)
* W M w (Summary):                       MIME Commands.       (line  91)
* W o (Summary):                         Article Washing.     (line  66)
* W p (Summary):                         Article Washing.     (line 209)
* W Q (Summary):                         Article Washing.     (line 114)
* W q (Summary):                         Article Washing.     (line 130)
* W r (Summary):                         Article Washing.     (line  34)
* W s (Summary):                         Article Washing.     (line 215)
* W t (Summary):                         Article Washing.     (line  58)
* W T e (Summary):                       Article Date.        (line  33)
* W T i (Summary):                       Article Date.        (line  15)
* W T l (Summary):                       Article Date.        (line  19)
* W T o (Summary):                       Article Date.        (line  43)
* W T p (Summary):                       Article Date.        (line  22)
* W T s (Summary):                       Article Date.        (line  26)
* W T u (Summary):                       Article Date.        (line  11)
* W U (Summary):                         Article Washing.     (line  80)
* W u (Summary):                         Article Washing.     (line 158)
* W v (Summary):                         Article Washing.     (line  62)
* W w (Summary):                         Article Washing.     (line 108)
* W W a (Summary):                       Article Hiding.      (line  10)
* W W b (Summary):                       Article Hiding.      (line  19)
* W W B (Summary):                       Article Hiding.      (line  43)
* W W c (Summary):                       Article Hiding.      (line  80)
* W W C (Summary):                       Article Hiding.      (line 119)
* W W C-c (Summary):                     Article Hiding.      (line 106)
* W W h (Summary):                       Article Hiding.      (line  15)
* W W l (Summary):                       Article Hiding.      (line  27)
* W W P (Summary):                       Article Hiding.      (line  39)
* W W s (Summary):                       Article Hiding.      (line  23)
* W Y a (Summary):                       Article Washing.     (line 100)
* W Y c (Summary):                       Article Washing.     (line 104)
* W Y f (Summary):                       Article Washing.     (line  87)
* W Y u (Summary):                       Article Washing.     (line  92)
* W Z (Summary):                         Article Washing.     (line 148)
* x (Summary):                           Limiting.            (line  50)
* X b (Summary):                         Other Files.         (line  10)
* X m (Summary):                         MIME Commands.       (line  82)
* X o (Summary):                         Other Files.         (line   7)
* X p (Summary):                         PostScript Files.    (line   7)
* X P (Summary):                         PostScript Files.    (line  10)
* X s (Summary):                         Shell Archives.      (line  11)
* X S (Summary):                         Shell Archives.      (line  14)
* X u (Summary):                         Uuencoded Articles.  (line   7)
* X U (Summary):                         Uuencoded Articles.  (line  10)
* X v p (Summary):                       PostScript Files.    (line  14)
* X v P (Summary):                       PostScript Files.    (line  18)
* X v s (Summary):                       Shell Archives.      (line  18)
* X v S (Summary):                       Shell Archives.      (line  22)
* X v u (Summary):                       Uuencoded Articles.  (line  14)
* X v U (Summary):                       Uuencoded Articles.  (line  17)
* X Y (Summary):                         Other Files.         (line  14)
* y (Server):                            Server Commands.     (line  34)
* Y c (Summary):                         Summary Generation Commands.
                                                              (line  10)
* Y d (Summary):                         Summary Generation Commands.
                                                              (line  14)
* Y g (Summary):                         Summary Generation Commands.
                                                              (line   7)
* Y t (Summary):                         Summary Generation Commands.
                                                              (line  18)
* z (Group):                             Exiting Gnus.        (line   9)
* z (Server):                            Server Commands.     (line  53)
* Z c (Summary):                         Exiting the Summary Buffer.
                                                              (line  27)
* Z C (Summary):                         Exiting the Summary Buffer.
                                                              (line  31)
* Z E (Summary):                         Exiting the Summary Buffer.
                                                              (line  22)
* Z G (Summary):                         Exiting the Summary Buffer.
                                                              (line  50)
* Z n (Summary):                         Exiting the Summary Buffer.
                                                              (line  35)
* Z N (Summary):                         Exiting the Summary Buffer.
                                                              (line  55)
* Z p (Summary):                         Exiting the Summary Buffer.
                                                              (line  39)
* Z P (Summary):                         Exiting the Summary Buffer.
                                                              (line  59)
* Z Q (Summary):                         Exiting the Summary Buffer.
                                                              (line  12)
* Z R (Summary):                         Exiting the Summary Buffer.
                                                              (line  44)
* Z s (Summary):                         Exiting the Summary Buffer.
                                                              (line  63)
* Z Z (Summary):                         Exiting the Summary Buffer.
                                                              (line  12)



Tag Table:
Node: Top833
Node: Don't Panic28489
Node: Starting Up34176
Node: Finding the News35847
Node: The Server is Down38711
Node: Child Gnusae40014
Node: New Groups41714
Node: Checking New Groups42603
Node: Subscription Methods44610
Node: Filtering New Groups47383
Node: Changing Servers49871
Node: Startup Files51307
Node: Auto Save55641
Node: The Active File56869
Node: Startup Variables59648
Node: Group Buffer61237
Node: Group Buffer Format62812
Node: Group Line Specification63544
Node: Group Mode Line Specification69029
Node: Group Highlighting69483
Node: Group Maneuvering71890
Node: Selecting a Group73635
Node: Subscription Commands79078
Node: Group Data80863
Node: Group Levels81745
Node: Group Score86280
Node: Marking Groups87624
Node: Foreign Groups89130
Node: Group Parameters95101
Ref: subscribed97884
Node: Listing Groups114403
Node: Sorting Groups117998
Node: Group Maintenance121488
Node: Browse Foreign Server122469
Node: Exiting Gnus124333
Node: Group Topics125134
Node: Topic Commands126978
Node: Topic Variables132641
Node: Topic Sorting134539
Node: Topic Topology135904
Node: Topic Parameters137236
Node: Non-ASCII Group Names140078
Node: Misc Group Stuff145399
Node: Scanning New Messages148491
Node: Group Information149699
Node: Group Timestamp150444
Node: File Commands152203
Node: Sieve Commands152699
Node: Summary Buffer154604
Node: Summary Buffer Format157582
Node: Summary Buffer Lines158850
Node: To From Newsgroups166394
Node: Summary Buffer Mode Line170357
Node: Summary Highlighting171935
Node: Summary Maneuvering173146
Node: Choosing Articles176897
Node: Choosing Commands177210
Node: Choosing Variables179675
Node: Paging the Article181126
Node: Reply Followup and Post183337
Node: Summary Mail Commands183716
Node: Summary Post Commands190324
Node: Summary Message Commands192636
Node: Canceling and Superseding193471
Node: Delayed Articles195883
Node: Marking Articles199824
Node: Unread Articles200765
Node: Read Articles202037
Node: Other Marks203696
Node: Setting Marks207084
Node: Generic Marking Commands210217
Node: Setting Process Marks211656
Node: Limiting214353
Node: Threading219432
Node: Customizing Threading221175
Node: Loose Threads221647
Node: Filling In Threads227945
Node: More Threading230989
Node: Low-Level Threading233490
Node: Thread Commands234642
Node: Sorting the Summary Buffer237595
Node: Asynchronous Fetching241600
Node: Article Caching245603
Node: Persistent Articles249108
Node: Sticky Articles250593
Node: Article Backlog252042
Node: Saving Articles253123
Node: Decoding Articles265426
Node: Uuencoded Articles266997
Node: Shell Archives268408
Node: PostScript Files269131
Node: Other Files269704
Node: Decoding Variables270128
Node: Rule Variables270530
Node: Other Decode Variables271464
Node: Uuencoding and Posting274336
Node: Viewing Files275724
Node: Article Treatment277504
Node: Article Highlighting278776
Node: Article Fontifying282063
Node: Article Hiding284021
Node: Article Washing289468
Ref: Article Washing-Footnote-1299099
Node: Article Header299203
Node: Article Buttons299844
Node: Article Button Levels304369
Node: Article Date306632
Node: Article Display308585
Node: Article Signature310801
Node: Article Miscellanea312978
Node: MIME Commands313232
Node: Charsets322456
Node: Article Commands325540
Node: Summary Sorting326579
Node: Finding the Parent328652
Node: Alternative Approaches333725
Node: Pick and Read334187
Node: Binary Groups337227
Node: Tree Display337926
Node: Mail Group Commands342400
Node: Various Summary Stuff347198
Node: Summary Group Information351014
Node: Searching for Articles351578
Node: Summary Generation Commands352901
Node: Really Various Summary Commands353629
Node: Exiting the Summary Buffer356119
Node: Crosspost Handling359886
Node: Duplicate Suppression362105
Node: Security365080
Node: Mailing List368456
Node: Article Buffer369421
Node: Hiding Headers370136
Node: Using MIME374521
Node: HTML379701
Ref: HTML-Footnote-1382396
Node: Customizing Articles382560
Node: Article Keymap388797
Node: Misc Article391031
Node: Composing Messages394906
Node: Mail396121
Node: Posting Server397452
Node: POP before SMTP399353
Node: Mail and Post400817
Node: Archived Messages403040
Node: Posting Styles409926
Node: Drafts416329
Node: Rejected Articles419098
Node: Signing and encrypting420075
Node: Select Methods421599
Node: Server Buffer423566
Node: Server Buffer Format425457
Node: Server Commands426314
Node: Example Methods428203
Node: Creating a Virtual Server431453
Node: Server Variables432632
Node: Servers and Methods433963
Node: Unavailable Servers434402
Node: Getting News436627
Node: NNTP437084
Node: Direct Functions447458
Node: Indirect Functions450603
Node: Common Variables454831
Node: News Spool456511
Node: Using IMAP458380
Node: Connecting to an IMAP Server459118
Node: Customizing the IMAP Connection459778
Node: Client-Side IMAP Splitting464638
Node: Support for IMAP Extensions466518
Node: Getting Mail467145
Node: Mail in a Newsreader468270
Node: Getting Started Reading Mail471482
Node: Splitting Mail473072
Node: Mail Sources478465
Node: Mail Source Specifiers479010
Node: Mail Source Functions493293
Node: Mail Source Customization494249
Node: Fetching Mail496349
Node: Mail Back End Variables497702
Node: Fancy Mail Splitting500421
Node: Group Mail Splitting511204
Node: Incorporating Old Mail517027
Node: Expiring Mail518803
Node: Washing Mail528755
Node: Duplicates532453
Node: Not Reading Mail534763
Node: Choosing a Mail Back End535836
Node: Unix Mail Box536984
Node: Babyl537689
Node: Mail Spool538336
Node: MH Spool541797
Node: Maildir542976
Node: nnmaildir Group Parameters548280
Node: Article Identification554406
Node: NOV Data555243
Node: Article Marks556044
Node: Mail Folders557309
Node: Comparing Mail Back Ends559635
Node: Browsing the Web568897
Node: Web Searches570838
Node: RSS573815
Node: Other Sources578835
Node: Directory Groups579496
Node: Anything Groups580652
Node: Document Groups583422
Node: Document Server Internals586633
Node: Mail-To-News Gateways593001
Node: The Empty Backend594964
Node: Virtual Groups595495
Node: Selection Groups595897
Node: Combined Groups600509
Node: Email Based Diary604359
Node: The NNDiary Back End606139
Node: Diary Messages607035
Node: Running NNDiary609139
Node: Customizing NNDiary612064
Node: The Gnus Diary Library612981
Node: Diary Summary Line Format613912
Node: Diary Articles Sorting616078
Node: Diary Headers Generation616862
Node: Diary Group Parameters617863
Node: Gnus Unplugged618820
Node: Agent Basics621121
Node: Agent Categories625543
Node: Category Syntax627462
Node: Category Buffer637090
Node: Category Variables638320
Node: Agent Commands640199
Node: Group Agent Commands640791
Node: Summary Agent Commands641813
Node: Server Agent Commands642806
Node: Agent Visuals643224
Node: Agent as Cache647258
Node: Agent Expiry648351
Node: Agent Regeneration649932
Node: Agent and flags651322
Node: Agent and IMAP653171
Node: Outgoing Messages653840
Node: Agent Variables654955
Node: Example Setup661409
Node: Batching Agents663340
Node: Agent Caveats663895
Node: Scoring664727
Node: Summary Score Commands667192
Node: Group Score Commands673813
Node: Score Variables674500
Node: Score File Format681106
Node: Score File Editing696501
Node: Adaptive Scoring697686
Node: Home Score File704538
Node: Followups To Yourself707575
Node: Scoring On Other Headers709142
Node: Scoring Tips710710
Node: Reverse Scoring712345
Node: Global Score Files712865
Node: Kill Files715685
Node: Converting Kill Files718367
Node: Advanced Scoring719173
Node: Advanced Scoring Syntax719938
Node: Advanced Scoring Examples721879
Node: Advanced Scoring Tips723721
Node: Score Decays724852
Node: Searching726965
Node: Search Engines729594
Node: Creating Search Groups733834
Node: Search Queries736256
Node: nnmairix740237
Node: About mairix741375
Node: nnmairix requirements742925
Node: What nnmairix does744034
Node: Setting up mairix746922
Node: Configuring nnmairix750034
Node: nnmairix keyboard shortcuts752431
Node: Propagating marks757139
Node: nnmairix tips and tricks762662
Node: nnmairix caveats766045
Node: nnir769794
Node: Various770399
Node: Process/Prefix772091
Node: Interactive774256
Node: Symbolic Prefixes775486
Node: Formatting Variables777118
Node: Formatting Basics779492
Node: Mode Line Formatting780540
Node: Advanced Formatting781483
Node: User-Defined Specs783380
Node: Formatting Fonts784579
Node: Positioning Point786853
Node: Tabulation787644
Node: Window Layout788535
Node: Tabbed Interface800077
Node: Faces and Fonts800989
Node: Mode Lines801355
Node: Highlighting and Menus803077
Node: Daemons805429
Node: Undo808296
Node: Predicate Specifiers809958
Node: Moderation810762
Node: Fetching a Group812025
Node: Image Enhancements812508
Node: X-Face813163
Node: Face817629
Node: Smileys819023
Node: Picons820612
Node: Gravatars823423
Node: Fuzzy Matching824855
Node: Thwarting Email Spam825668
Node: The problem of spam827133
Node: Anti-Spam Basics830643
Node: SpamAssassin833027
Node: Hashcash836134
Node: Spam Package839299
Node: Spam Package Introduction839957
Node: Filtering Incoming Mail845703
Node: Detecting Spam in Groups849606
Node: Spam and Ham Processors850934
Node: Spam Package Configuration Examples859130
Node: Spam Back Ends866123
Node: Blacklists and Whitelists866862
Node: BBDB Whitelists870080
Node: Gmane Spam Reporting871973
Node: Anti-spam Hashcash Payments873486
Node: Blackholes874115
Node: Regular Expressions Header Matching875697
Node: Bogofilter876805
Node: SpamAssassin back end880314
Node: ifile spam filtering882260
Node: Spam Statistics Filtering883541
Node: SpamOracle885551
Node: Extending the Spam package890343
Node: Spam Statistics Package894830
Node: Creating a spam-stat dictionary896795
Node: Splitting mail using spam-stat900023
Node: Low-level interface to the spam-stat dictionary902710
Node: The Gnus Registry905923
Node: Gnus Registry Setup907590
Node: Registry Article Refer Method911714
Node: Fancy splitting to parent913060
Node: Store custom flags and keywords915243
Node: Store arbitrary data917078
Node: The Gnus Cloud918126
Ref: The Gnus Cloud-Footnote-1919005
Node: Gnus Cloud Setup919217
Node: Gnus Cloud Usage919984
Node: D-Bus Integration921448
Node: Other modes922193
Node: Various Various923023
Node: The End928046
Node: Appendices928709
Node: History929375
Node: Gnus Versions930928
Node: Why?932738
Node: Conformity934102
Node: Contributors936755
Node: New Features943377
Node: ding Gnus944326
Node: September Gnus947558
Node: Red Gnus952659
Node: Quassia Gnus956533
Node: Pterodactyl Gnus959977
Node: Oort Gnus961723
Node: No Gnus985819
Node: Ma Gnus999368
Node: On Writing Manuals1000383
Node: Terminology1001343
Node: Customization1009804
Node: Slow/Expensive Connection1010419
Node: Slow Terminal Connection1012019
Node: Little Disk Space1013778
Node: Slow Machine1014891
Node: Troubleshooting1015452
Node: Gnus Reference Guide1019777
Node: Gnus Utility Functions1021105
Node: Back End Interface1024001
Ref: Back End Interface-Footnote-11028164
Node: Required Back End Functions1028261
Node: Optional Back End Functions1036788
Node: Error Messaging1046243
Node: Writing New Back Ends1047378
Node: Hooking New Back Ends Into Gnus1052982
Node: Mail-like Back Ends1054500
Node: Score File Syntax1056191
Node: Headers1059616
Node: Ranges1060949
Node: Group Info1063019
Node: Extended Interactive1066584
Node: Various File Formats1068056
Node: Active File Format1068357
Node: Newsgroups File Format1069370
Node: Emacs for Heathens1070050
Node: Keystrokes1070897
Node: Emacs Lisp1072916
Node: Frequently Asked Questions1075350
Node: FAQ - Introduction1076874
Node: FAQ 1 - Installation FAQ1078356
Node: FAQ 1-11078725
Node: FAQ 1-21078961
Node: FAQ 2 - Startup / Group buffer1079327
Node: FAQ 2-11080196
Node: FAQ 2-21080830
Node: FAQ 2-31081203
Node: FAQ 2-41081675
Node: FAQ 2-51082605
Node: FAQ 3 - Getting Messages1082962
Node: FAQ 3-11084344
Node: FAQ 3-21084905
Node: FAQ 3-31086329
Node: FAQ 3-41086873
Node: FAQ 3-51087465
Node: FAQ 3-61087932
Node: FAQ 3-71088499
Node: FAQ 3-81089404
Node: FAQ 3-91092661
Node: FAQ 3-101094229
Node: FAQ 3-111094592
Node: FAQ 4 - Reading messages1095012
Node: FAQ 4-11097028
Node: FAQ 4-21098184
Node: FAQ 4-31098694
Node: FAQ 4-41098942
Node: FAQ 4-51099198
Node: FAQ 4-61099849
Node: FAQ 4-71100455
Node: FAQ 4-81100909
Node: FAQ 4-91101578
Node: FAQ 4-101104503
Node: FAQ 4-111105144
Node: FAQ 4-121105653
Node: FAQ 4-131106623
Node: FAQ 4-141107929
Node: FAQ 4-151110070
Node: FAQ 4-161113222
Node: FAQ 5 - Composing messages1113843
Node: FAQ 5-11115553
Node: FAQ 5-21116563
Node: FAQ 5-31117196
Node: FAQ 5-41118384
Node: FAQ 5-51120456
Node: FAQ 5-61121380
Node: FAQ 5-71122038
Node: FAQ 5-81124023
Node: FAQ 5-91125525
Node: FAQ 5-101125868
Node: FAQ 5-111126118
Node: FAQ 5-121126738
Node: FAQ 5-131127076
Node: FAQ 6 - Old messages1129083
Node: FAQ 6-11129729
Node: FAQ 6-21130737
Node: FAQ 6-31132280
Node: FAQ 6-41133258
Node: FAQ 6-51134186
Node: FAQ 6-61135525
Node: FAQ 7 - Gnus in a dial-up environment1136030
Node: FAQ 7-11136656
Node: FAQ 7-21138415
Node: FAQ 7-31139419
Node: FAQ 7-41140889
Node: FAQ 8 - Getting help1141451
Node: FAQ 8-11142056
Node: FAQ 8-21142683
Node: FAQ 8-31143194
Node: FAQ 8-41143491
Node: FAQ 8-51144163
Node: FAQ 8-61144497
Node: FAQ 9 - Tuning Gnus1144717
Node: FAQ 9-11145097
Node: FAQ 9-21146102
Node: FAQ 9-31146577
Node: FAQ - Glossary1146961
Node: GNU Free Documentation License1147943
Node: Index1173275
Node: Key Index1398437

End Tag Table


Local Variables:
coding: utf-8
