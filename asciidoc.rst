.. code-block:: bash

    pushd 'C:\msys64\pl\asciidoc-lang-0.3.0/'

    while read -r it; do 
        if [[ $it == "" ]]; then continue; fi
        printf "\n\n" >> $0
        echo "/$it" >> $0
        echo "/$it" | sed -n 's/./=/gp' >> $0
        printf "\n\n" >> $0
        sed -n 's/.*/   \0/p' "$it" >> $0
    done<<EOF
    README.adoc
    NOTICE.adoc
    LICENSE
    CHANGELOG.adoc
    local-antora-playbook.yml

    docs/antora.yml
    docs/CHANGELOG.adoc
    docs/LICENSE
    docs/modules/ROOT/nav-top.adoc
    docs/modules/ROOT/pages/index.adoc
    docs/modules/ROOT/pages/document-structure.adoc
    docs/modules/ROOT/pages/key-concepts.adoc
    docs/modules/ROOT/pages/document-processing.adoc
    docs/modules/ROOT/pages/normalization.adoc
    docs/modules/ROOT/pages/asciidoc-vs-markdown.adoc
    docs/modules/ROOT/pages/comments.adoc
    docs/modules/ROOT/pages/faq.adoc
    docs/modules/ROOT/pages/glossary.adoc
    docs/modules/ROOT/pages/syntax-quick-reference.adoc
    docs/modules/ROOT/nav-comment.adoc

    docs/modules/blocks/nav-basics.adoc
    docs/modules/blocks/pages/index.adoc
    docs/modules/blocks/pages/delimited.adoc
    docs/modules/blocks/pages/build-basic-block.adoc
    docs/modules/blocks/pages/add-title.adoc
    docs/modules/blocks/pages/assign-id.adoc
    docs/modules/blocks/pages/masquerading.adoc
    docs/modules/blocks/pages/troubleshoot-blocks.adoc

    docs/modules/blocks/nav-paragraph.adoc
    docs/modules/blocks/pages/paragraphs.adoc
    docs/modules/blocks/pages/hard-line-breaks.adoc
    docs/modules/blocks/pages/preamble-and-lead.adoc
    docs/modules/blocks/pages/paragraph-alignment.adoc

    docs/modules/blocks/nav-discrete-headings.adoc
    docs/modules/blocks/pages/discrete-headings.adoc

    docs/modules/blocks/nav-breaks.adoc
    docs/modules/blocks/pages/breaks.adoc

    docs/modules/blocks/nav-styles.adoc
    docs/modules/blocks/pages/admonitions.adoc
    docs/modules/blocks/pages/sidebars.adoc
    docs/modules/blocks/pages/example-blocks.adoc
    docs/modules/blocks/pages/blockquotes.adoc
    docs/modules/blocks/pages/verses.adoc

    docs/modules/blocks/nav-open.adoc
    docs/modules/blocks/pages/open-blocks.adoc

    docs/modules/blocks/nav-collapsible.adoc
    docs/modules/blocks/pages/collapsible.adoc

    docs/modules/blocks/pages/nest.adoc
    docs/modules/blocks/pages/styles.adoc
    docs/modules/blocks/partials/block-name-table.adoc
    docs/modules/blocks/partials/page-breaks.adoc
    docs/modules/blocks/partials/subs-group-table.adoc
    docs/modules/blocks/partials/thematic-breaks.adoc

    docs/modules/blocks/examples/admonition.adoc
    docs/modules/blocks/examples/block.adoc
    docs/modules/blocks/examples/collapsible.adoc
    docs/modules/blocks/examples/example.adoc
    docs/modules/blocks/examples/open.adoc
    docs/modules/blocks/examples/paragraph.adoc
    docs/modules/blocks/examples/preamble.adoc
    docs/modules/blocks/examples/quote.adoc
    docs/modules/blocks/examples/sidebar.adoc
    docs/modules/blocks/examples/verse.adoc

    docs/modules/attributes/nav-document.adoc
    docs/modules/attributes/pages/document-attributes-ref.adoc
    docs/modules/attributes/pages/document-attributes.adoc
    docs/modules/attributes/pages/names-and-values.adoc
    docs/modules/attributes/pages/wrap-values.adoc
    docs/modules/attributes/pages/attribute-entry-substitutions.adoc
    docs/modules/attributes/pages/inline-attribute-entries.adoc
    docs/modules/attributes/pages/built-in-attributes.adoc
    docs/modules/attributes/pages/boolean-attributes.adoc
    docs/modules/attributes/pages/custom-attributes.adoc
    docs/modules/attributes/pages/unset-attributes.adoc
    docs/modules/attributes/pages/reference-attributes.adoc
    docs/modules/attributes/pages/unresolved-references.adoc
    docs/modules/attributes/pages/assignment-precedence.adoc
    docs/modules/attributes/pages/counters.adoc

    docs/modules/attributes/nav-element.adoc
    docs/modules/attributes/pages/element-attributes.adoc
    docs/modules/attributes/pages/positional-and-named-attributes.adoc
    docs/modules/attributes/pages/id.adoc
    docs/modules/attributes/pages/role.adoc
    docs/modules/attributes/pages/options.adoc

    docs/modules/attributes/nav-ref.adoc
    docs/modules/attributes/pages/attribute-entries.adoc
    docs/modules/attributes/pages/character-replacement-ref.adoc
    docs/modules/attributes/partials/attribute-terms.adoc
    docs/modules/attributes/examples/counter.adoc
    docs/modules/attributes/examples/id.adoc

    docs/modules/directives/nav.adoc
    docs/modules/directives/pages/include.adoc
    docs/modules/directives/pages/include-with-leveloffset.adoc
    docs/modules/directives/pages/include-with-indent.adoc
    docs/modules/directives/pages/include-multiple-times-in-same-document.adoc
    docs/modules/directives/pages/include-list-item-content.adoc
    docs/modules/directives/pages/include-tagged-regions.adoc
    docs/modules/directives/pages/include-lines.adoc
    docs/modules/directives/pages/include-uri.adoc
    docs/modules/directives/pages/conditionals.adoc
    docs/modules/directives/pages/ifdef-ifndef.adoc
    docs/modules/directives/pages/ifeval.adoc
    docs/modules/directives/partials/preprocessor.adoc
    docs/modules/directives/examples/include.adoc

    docs/modules/document/nav.adoc
    docs/modules/document/pages/doctype.adoc
    docs/modules/document/pages/header-ref.adoc
    docs/modules/document/pages/title.adoc
    docs/modules/document/pages/subtitle.adoc
    docs/modules/document/pages/author-information.adoc
    docs/modules/document/pages/author-line.adoc
    docs/modules/document/pages/multiple-authors.adoc
    docs/modules/document/pages/author-attribute-entries.adoc
    docs/modules/document/pages/reference-author-attributes.adoc
    docs/modules/document/pages/compound-author-name.adoc
    docs/modules/document/pages/revision-information.adoc
    docs/modules/document/pages/revision-line.adoc
    docs/modules/document/pages/revision-attribute-entries.adoc
    docs/modules/document/pages/version-label.adoc
    docs/modules/document/pages/reference-revision-attributes.adoc
    docs/modules/document/pages/metadata.adoc
    docs/modules/document/pages/header.adoc
    docs/modules/document/examples/header.adoc
    docs/modules/document/examples/doctitle.adoc
    docs/modules/document/examples/document-title.adoc
    docs/modules/document/examples/metadata.adoc
    docs/modules/document/examples/multiple-authors.adoc
    docs/modules/document/examples/reference-author.adoc
    docs/modules/document/examples/reference-revision-attributes.adoc
    docs/modules/document/examples/reference-revision-line.adoc
    docs/modules/document/examples/revision-line-with-version-prefix.adoc
    docs/modules/document/examples/title.adoc
    docs/modules/document/examples/version-label.adoc

    docs/modules/sections/nav.adoc
    docs/modules/sections/pages/titles-and-levels.adoc
    docs/modules/sections/pages/title-links.adoc
    docs/modules/sections/pages/auto-ids.adoc
    docs/modules/sections/pages/id-prefix-and-separator.adoc
    docs/modules/sections/pages/custom-ids.adoc
    docs/modules/sections/pages/numbers.adoc
    docs/modules/sections/pages/styles.adoc
    docs/modules/sections/pages/special-section-numbers.adoc
    docs/modules/sections/pages/special-section-titles.adoc
    docs/modules/sections/pages/colophon.adoc
    docs/modules/sections/pages/dedication.adoc
    docs/modules/sections/pages/abstract.adoc
    docs/modules/sections/pages/abstract-block.adoc
    docs/modules/sections/pages/preface.adoc
    docs/modules/sections/pages/parts.adoc
    docs/modules/sections/pages/part-numbers-and-signifier.adoc
    docs/modules/sections/pages/chapters.adoc
    docs/modules/sections/pages/appendix.adoc
    docs/modules/sections/pages/bibliography.adoc
    docs/modules/sections/pages/glossary.adoc
    docs/modules/sections/pages/user-index.adoc
    docs/modules/sections/pages/section-ref.adoc
    docs/modules/sections/examples/abstract.adoc
    docs/modules/sections/examples/appendix.adoc
    docs/modules/sections/examples/bibliography.adoc
    docs/modules/sections/examples/colophon.adoc
    docs/modules/sections/examples/dedication.adoc
    docs/modules/sections/examples/multipart-book-with-special-sections.adoc
    docs/modules/sections/examples/part-with-special-sections.adoc
    docs/modules/sections/examples/part.adoc
    docs/modules/sections/examples/preface.adoc
    docs/modules/sections/examples/section.adoc

    docs/modules/text/nav.adoc
    docs/modules/text/pages/index.adoc
    docs/modules/text/pages/bold.adoc
    docs/modules/text/pages/italic.adoc
    docs/modules/text/pages/monospace.adoc
    docs/modules/text/pages/literal-monospace.adoc
    docs/modules/text/pages/text-span-built-in-roles.adoc
    docs/modules/text/pages/highlight.adoc
    docs/modules/text/pages/quotation-marks-and-apostrophes.adoc
    docs/modules/text/pages/subscript-and-superscript.adoc
    docs/modules/text/pages/custom-inline-styles.adoc
    docs/modules/text/pages/troubleshoot-unconstrained-formatting.adoc
    docs/modules/text/examples/text.adoc

    docs/modules/lists/nav.adoc
    docs/modules/lists/pages/unordered.adoc
    docs/modules/lists/pages/ordered.adoc
    docs/modules/lists/pages/checklist.adoc
    docs/modules/lists/pages/separating.adoc
    docs/modules/lists/pages/continuation.adoc
    docs/modules/lists/pages/description-with-marker.adoc
    docs/modules/lists/pages/description.adoc
    docs/modules/lists/pages/horizontal.adoc
    docs/modules/lists/pages/qanda.adoc
    docs/modules/lists/examples/checklist.adoc
    docs/modules/lists/examples/complex.adoc
    docs/modules/lists/examples/description.adoc
    docs/modules/lists/examples/ordered.adoc
    docs/modules/lists/examples/unordered.adoc

    docs/modules/macros/nav.adoc
    docs/modules/macros/pages/links.adoc
    docs/modules/macros/pages/autolinks.adoc
    docs/modules/macros/pages/url-macro.adoc
    docs/modules/macros/pages/link-macro.adoc
    docs/modules/macros/pages/complex-urls.adoc
    docs/modules/macros/pages/footnote.adoc
    docs/modules/macros/pages/link-macro-attribute-parsing.adoc
    docs/modules/macros/pages/mailto-macro.adoc
    docs/modules/macros/pages/link-macro-ref.adoc
    docs/modules/macros/pages/xref.adoc
    docs/modules/macros/pages/inter-document-xref.adoc
    docs/modules/macros/pages/xref-text-and-style.adoc
    docs/modules/macros/pages/xref-validate.adoc
    docs/modules/macros/examples/footnote.adoc
    docs/modules/macros/pages/images.adoc
    docs/modules/macros/pages/images-directory.adoc
    docs/modules/macros/pages/image-url.adoc
    docs/modules/macros/pages/image-position.adoc
    docs/modules/macros/pages/image-link.adoc
    docs/modules/macros/pages/image-size.adoc
    docs/modules/macros/pages/image-format.adoc
    docs/modules/macros/pages/image-svg.adoc
    docs/modules/macros/pages/image-ref.adoc
    docs/modules/macros/pages/audio-and-video.adoc
    docs/modules/macros/pages/icons.adoc
    docs/modules/macros/pages/icon-macro.adoc
    docs/modules/macros/pages/icons-image.adoc
    docs/modules/macros/pages/icons-font.adoc
    docs/modules/macros/pages/keyboard-macro.adoc
    docs/modules/macros/pages/ui-macros.adoc
    docs/modules/macros/partials/image-target.adoc
    docs/modules/macros/partials/ts-url-format.adoc
    docs/modules/macros/partials/ui-macros-disclaimer.adoc
    docs/modules/macros/examples/audio.adoc
    docs/modules/macros/examples/image.adoc
    docs/modules/macros/examples/ui.adoc
    docs/modules/macros/examples/url.adoc
    docs/modules/macros/examples/video.adoc
    docs/modules/macros/examples/xref.adoc

    docs/modules/verbatim/nav.adoc
    docs/modules/verbatim/pages/source-blocks.adoc
    docs/modules/verbatim/pages/source-highlighter.adoc
    docs/modules/verbatim/pages/highlight-lines.adoc
    docs/modules/verbatim/pages/highlight-php.adoc
    docs/modules/verbatim/pages/listing-blocks.adoc
    docs/modules/verbatim/pages/literal-blocks.adoc
    docs/modules/verbatim/pages/callouts.adoc
    docs/modules/verbatim/examples/callout.adoc
    docs/modules/verbatim/examples/listing.adoc
    docs/modules/verbatim/examples/literal.adoc
    docs/modules/verbatim/examples/source.adoc

    docs/modules/tables/nav.adoc
    docs/modules/tables/pages/build-a-basic-table.adoc
    docs/modules/tables/pages/add-title.adoc
    docs/modules/tables/pages/customize-title-label.adoc
    docs/modules/tables/pages/turn-off-title-label.adoc
    docs/modules/tables/pages/add-columns.adoc
    docs/modules/tables/pages/adjust-column-widths.adoc
    docs/modules/tables/pages/align-by-column.adoc
    docs/modules/tables/pages/format-column-content.adoc
    docs/modules/tables/pages/add-cells-and-rows.adoc
    docs/modules/tables/pages/add-header-row.adoc
    docs/modules/tables/pages/add-footer-row.adoc
    docs/modules/tables/pages/align-by-cell.adoc
    docs/modules/tables/pages/format-cell-content.adoc
    docs/modules/tables/pages/span-cells.adoc
    docs/modules/tables/pages/duplicate-cells.adoc
    docs/modules/tables/pages/width.adoc
    docs/modules/tables/pages/borders.adoc
    docs/modules/tables/pages/striping.adoc
    docs/modules/tables/pages/orientation.adoc
    docs/modules/tables/pages/assign-a-role.adoc
    docs/modules/tables/pages/nested.adoc
    docs/modules/tables/pages/data-format.adoc
    docs/modules/tables/pages/table-ref.adoc
    docs/modules/tables/partials/style-operators.adoc
    docs/modules/tables/examples/align-cell.adoc
    docs/modules/tables/examples/cell.adoc
    docs/modules/tables/examples/column.adoc
    docs/modules/tables/examples/data.adoc
    docs/modules/tables/examples/row.adoc
    docs/modules/tables/examples/table.adoc

    docs/modules/stem/nav.adoc
    docs/modules/stem/pages/index.adoc
    docs/modules/subs/examples/subs.adoc
    docs/modules/stem/examples/stem.adoc

    docs/modules/subs/nav.adoc
    docs/modules/subs/pages/index.adoc
    docs/modules/subs/pages/special-characters.adoc
    docs/modules/subs/pages/quotes.adoc
    docs/modules/subs/pages/attributes.adoc
    docs/modules/subs/pages/replacements.adoc
    docs/modules/subs/pages/macros.adoc
    docs/modules/subs/pages/post-replacements.adoc
    docs/modules/subs/pages/apply-subs-to-blocks.adoc
    docs/modules/subs/pages/apply-subs-to-text.adoc
    docs/modules/subs/pages/prevent.adoc
    docs/modules/subs/partials/subs-group-table.adoc
    docs/modules/subs/partials/subs-symbol-repl.adoc

    docs/modules/pass/nav.adoc
    docs/modules/pass/pages/index.adoc
    docs/modules/pass/pages/pass-block.adoc
    docs/modules/pass/pages/pass-macro.adoc
    docs/modules/pass/examples/pass.adoc

    docs/modules/toc/nav.adoc
    docs/modules/toc/pages/index.adoc
    docs/modules/toc/pages/title.adoc
    docs/modules/toc/pages/levels.adoc
    docs/modules/toc/pages/position.adoc
    docs/modules/toc/pages/toc-ref.adoc
    docs/modules/toc/examples/toc.adoc

    docs/modules/docinfo/nav.adoc
    docs/modules/docinfo/pages/index.adoc

    spec/outline.adoc
    spec/modules/ROOT/pages/paragraph.adoc
    spec/modules/ROOT/pages/strong-span.adoc
    spec/sdrs/sdr-001-open-block-delimiter.adoc
    spec/sdrs/sdr-002-block-attrlist-parsing.adoc
    spec/sdrs/sdr-003-block-parsing-and-style.adoc
    spec/sdrs/sdr-004-use-peg-for-formal-grammar.adoc
    spec/sdrs/sdr-005-formal-grammar-for-inline-syntax.adoc
    spec/sdrs/sdr-006-positional-attribute-mapping.adoc
    spec/sdrs/sdr-007-list-continuation-as-interrupting-line.adoc
    spec/sdrs/sdr-008-list-item-as-interrupting-line-for-principal-text.adoc

    asg/README.adoc
    asg/.gitignore
    asg/bin/validate-asg.js
    asg/lib/ajv-keyword-defaults.js
    asg/package.json
    asg/schema.js
    asg/schema.json
    asg/test/fixtures/sample-1.json
    asg/test/fixtures/sample-2.json
    asg/test/fixtures/sample-3.json
    asg/test/schema-test.js

    CONTRIBUTING.adoc
    process/scope.adoc
    process/governance.adoc
    process/release-plan.adoc
    process/release-and-progress-reviews.adoc
    EOF


/README.adoc
============

.. code-block: asciidoc

   = AsciiDoc Language Project

   This project maintains the AsciiDoc Language Specification, Technology Compatibility Kit (TCK) (separate repository), user documentation, and their related materials.
   The AsciiDoc Language Specification describes the syntax and grammar, Abstract Semantic Graph (ASG), Document Object Model (DOM), referencing system, and APIs for processing, converting, and extending the language.
   The TCK is used to verify and certify that an AsciiDoc processor implementation is compatible with this specification.
   For further details, see the xref:process/scope.adoc[project's approved scope].

   == Specification

   Development of the specification takes place in the [.path]_spec_ folder as well as in the issue tracker.

   == Process Documents

   This project adheres to the Eclipse Foundation Specification Process (EFSP), which extends the Eclipse Foundation Development Process (EFDP).
   A summary of this process, as well as specific details that pertain to this project, can be found in the [.path]_process_ folder.

   == TCK

   Although part of the same project, the TCK (both harness and tests) is maintained in a separate repository.
   See https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-tck.

   The schema for the ASG, however, is maintained in this repository.

   == User Documentation

   In addition to the AsciiDoc Language Specification, this project maintains the user documentation for the AsciiDoc language.
   The [.path]_docs_ folder in this repository contains the source of this documentation.

   === About this Documentation

   In it's current state, the user documentation is the initial contribution from the Asciidoctor project that describes AsciiDoc as interpreted by Asciidoctor.
   *The user documentation is not itself the AsciiDoc Language Specification.*
   Rather, it serves as the reference material from which the AsciiDoc Language Specification will be developed.

   While the user documentation is mostly accurate, it's not a technical specification and still reflects many idiosyncrasies of how AsciiDoc is interpreted by Asciidoctor.
   A key goal of the AsciiDoc Language project is to develop a technical specification for the AsciiDoc language (which includes grammar rules and required behavior) that's independent of any implementation.

   Once the first version of the specification is complete, the user documentation will be updated to reflect any refinements or changes that were made to the language.
   At that time, the user documentation will likely be slimmed down to focus exclusively on using AsciiDoc rather than defining it.
   In other words, it will continue to serve as a companion to the specification, intended for those who want to learn how to use AsciiDoc.

   === Online Preview

   This repository is a registered content source in the https://github.com/asciidoctor/docs.asciidoctor.org/blob/main/antora-playbook.yml[playbook file for docs.asciidoctor.org].
   The source files under the [.path]_docs/_ folder are organized into a documentation component as identified by the [.path]_antora.yml_ file.
   You can view the published version online at https://docs.asciidoctor.org/asciidoc/latest.

   === Local Preview

   To build and preview the documentation locally, follow the instructions in the file link:local-antora-playbook.yml[] at the root of this repository.
   To learn more about how to build a documentation site with Antora, see the https://docs.antora.org/antora/latest/install-and-run-quickstart/[Install and Run Antora Quickstart].

   == Licenses

   The AsciiDoc Language and the accompanying materials are made available under the terms of the Eclipse Public License v 2.0 (EPL-2.0).
   See link:LICENSE[] to find the full license text.

   The user documentation for the AsciiDoc Language, located in the [.path]_docs/_ folder, is made available under the terms of a https://creativecommons.org/licenses/by/4.0/[Creative Commons Attribution 4.0 International License] (CC-BY-4.0).

   See xref:NOTICE.adoc[NOTICE] for additional license and copyright information.

   == Trademarks

   AsciiDoc(R) and AsciiDoc Language(TM) are trademarks of the Eclipse Foundation, Inc.


/NOTICE.adoc
============

.. code-block: asciidoc

   = Notices for the AsciiDoc Language Project

   This content is produced and maintained by the AsciiDoc Language project.

   Project home: https://projects.eclipse.org/projects/technology.asciidoc

   == Trademarks

   AsciiDoc(R) and AsciiDoc Language(TM) are trademarks of the Eclipse Foundation, Inc.
   Eclipse and the Eclipse Logo are registered trademarks of the Eclipse Foundation, Inc.

   == Copyright

   All content is the property of the respective authors or their employers.
   For more information regarding authorship of content, please consult the listed source code repository logs.

   == Declared Project Licenses

   This technology specification and its accompanying materials are made available under the terms of the Eclipse Public License v 2.0, which is available at https://www.eclipse.org/legal/epl-2.0/.

   SPDX-License-Identifier: EPL-2.0

   The end user documentation content for the AsciiDoc Language is made available under the terms of a Creative Commons Attribution 4.0 International License, which is available at https://creativecommons.org/licenses/by/4.0/.

   SPDX-License-Identifier: CC-BY-4.0

   == Source Code

   The project maintains the following source code repositories:

   * https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang

   ////
   == Third-party Content

   library/project/product name (version)

   * License:
   * Project: <project url> (optional)
   * Source: <download/source-url> (optional)
   ////

   == Cryptography

   Content may contain encryption software.
   The country in which you are currently may have restrictions on the import, possession, and use, and/or re-export to another country, of encryption software.
   BEFORE using any encryption software, please check the country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted.


/LICENSE
========

.. code-block: asciidoc

   Eclipse Public License - v 2.0

       THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE
       PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION
       OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.

   1. DEFINITIONS

   "Contribution" means:

     a) in the case of the initial Contributor, the initial content
        Distributed under this Agreement, and

     b) in the case of each subsequent Contributor:
        i) changes to the Program, and
        ii) additions to the Program;
     where such changes and/or additions to the Program originate from
     and are Distributed by that particular Contributor. A Contribution
     "originates" from a Contributor if it was added to the Program by
     such Contributor itself or anyone acting on such Contributor's behalf.
     Contributions do not include changes or additions to the Program that
     are not Modified Works.

   "Contributor" means any person or entity that Distributes the Program.

   "Licensed Patents" mean patent claims licensable by a Contributor which
   are necessarily infringed by the use or sale of its Contribution alone
   or when combined with the Program.

   "Program" means the Contributions Distributed in accordance with this
   Agreement.

   "Recipient" means anyone who receives the Program under this Agreement
   or any Secondary License (as applicable), including Contributors.

   "Derivative Works" shall mean any work, whether in Source Code or other
   form, that is based on (or derived from) the Program and for which the
   editorial revisions, annotations, elaborations, or other modifications
   represent, as a whole, an original work of authorship.

   "Modified Works" shall mean any work in Source Code or other form that
   results from an addition to, deletion from, or modification of the
   contents of the Program, including, for purposes of clarity any new file
   in Source Code form that contains any contents of the Program. Modified
   Works shall not include works that contain only declarations,
   interfaces, types, classes, structures, or files of the Program solely
   in each case in order to link to, bind by name, or subclass the Program
   or Modified Works thereof.

   "Distribute" means the acts of a) distributing or b) making available
   in any manner that enables the transfer of a copy.

   "Source Code" means the form of a Program preferred for making
   modifications, including but not limited to software source code,
   documentation source, and configuration files.

   "Secondary License" means either the GNU General Public License,
   Version 2.0, or any later versions of that license, including any
   exceptions or additional permissions as identified by the initial
   Contributor.

   2. GRANT OF RIGHTS

     a) Subject to the terms of this Agreement, each Contributor hereby
     grants Recipient a non-exclusive, worldwide, royalty-free copyright
     license to reproduce, prepare Derivative Works of, publicly display,
     publicly perform, Distribute and sublicense the Contribution of such
     Contributor, if any, and such Derivative Works.

     b) Subject to the terms of this Agreement, each Contributor hereby
     grants Recipient a non-exclusive, worldwide, royalty-free patent
     license under Licensed Patents to make, use, sell, offer to sell,
     import and otherwise transfer the Contribution of such Contributor,
     if any, in Source Code or other form. This patent license shall
     apply to the combination of the Contribution and the Program if, at
     the time the Contribution is added by the Contributor, such addition
     of the Contribution causes such combination to be covered by the
     Licensed Patents. The patent license shall not apply to any other
     combinations which include the Contribution. No hardware per se is
     licensed hereunder.

     c) Recipient understands that although each Contributor grants the
     licenses to its Contributions set forth herein, no assurances are
     provided by any Contributor that the Program does not infringe the
     patent or other intellectual property rights of any other entity.
     Each Contributor disclaims any liability to Recipient for claims
     brought by any other entity based on infringement of intellectual
     property rights or otherwise. As a condition to exercising the
     rights and licenses granted hereunder, each Recipient hereby
     assumes sole responsibility to secure any other intellectual
     property rights needed, if any. For example, if a third party
     patent license is required to allow Recipient to Distribute the
     Program, it is Recipient's responsibility to acquire that license
     before distributing the Program.

     d) Each Contributor represents that to its knowledge it has
     sufficient copyright rights in its Contribution, if any, to grant
     the copyright license set forth in this Agreement.

     e) Notwithstanding the terms of any Secondary License, no
     Contributor makes additional grants to any Recipient (other than
     those set forth in this Agreement) as a result of such Recipient's
     receipt of the Program under the terms of a Secondary License
     (if permitted under the terms of Section 3).

   3. REQUIREMENTS

   3.1 If a Contributor Distributes the Program in any form, then:

     a) the Program must also be made available as Source Code, in
     accordance with section 3.2, and the Contributor must accompany
     the Program with a statement that the Source Code for the Program
     is available under this Agreement, and informs Recipients how to
     obtain it in a reasonable manner on or through a medium customarily
     used for software exchange; and

     b) the Contributor may Distribute the Program under a license
     different than this Agreement, provided that such license:
        i) effectively disclaims on behalf of all other Contributors all
        warranties and conditions, express and implied, including
        warranties or conditions of title and non-infringement, and
        implied warranties or conditions of merchantability and fitness
        for a particular purpose;

        ii) effectively excludes on behalf of all other Contributors all
        liability for damages, including direct, indirect, special,
        incidental and consequential damages, such as lost profits;

        iii) does not attempt to limit or alter the recipients' rights
        in the Source Code under section 3.2; and

        iv) requires any subsequent distribution of the Program by any
        party to be under a license that satisfies the requirements
        of this section 3.

   3.2 When the Program is Distributed as Source Code:

     a) it must be made available under this Agreement, or if the
     Program (i) is combined with other material in a separate file or
     files made available under a Secondary License, and (ii) the initial
     Contributor attached to the Source Code the notice described in
     Exhibit A of this Agreement, then the Program may be made available
     under the terms of such Secondary Licenses, and

     b) a copy of this Agreement must be included with each copy of
     the Program.

   3.3 Contributors may not remove or alter any copyright, patent,
   trademark, attribution notices, disclaimers of warranty, or limitations
   of liability ("notices") contained within the Program from any copy of
   the Program which they Distribute, provided that Contributors may add
   their own appropriate notices.

   4. COMMERCIAL DISTRIBUTION

   Commercial distributors of software may accept certain responsibilities
   with respect to end users, business partners and the like. While this
   license is intended to facilitate the commercial use of the Program,
   the Contributor who includes the Program in a commercial product
   offering should do so in a manner which does not create potential
   liability for other Contributors. Therefore, if a Contributor includes
   the Program in a commercial product offering, such Contributor
   ("Commercial Contributor") hereby agrees to defend and indemnify every
   other Contributor ("Indemnified Contributor") against any losses,
   damages and costs (collectively "Losses") arising from claims, lawsuits
   and other legal actions brought by a third party against the Indemnified
   Contributor to the extent caused by the acts or omissions of such
   Commercial Contributor in connection with its distribution of the Program
   in a commercial product offering. The obligations in this section do not
   apply to any claims or Losses relating to any actual or alleged
   intellectual property infringement. In order to qualify, an Indemnified
   Contributor must: a) promptly notify the Commercial Contributor in
   writing of such claim, and b) allow the Commercial Contributor to control,
   and cooperate with the Commercial Contributor in, the defense and any
   related settlement negotiations. The Indemnified Contributor may
   participate in any such claim at its own expense.

   For example, a Contributor might include the Program in a commercial
   product offering, Product X. That Contributor is then a Commercial
   Contributor. If that Commercial Contributor then makes performance
   claims, or offers warranties related to Product X, those performance
   claims and warranties are such Commercial Contributor's responsibility
   alone. Under this section, the Commercial Contributor would have to
   defend claims against the other Contributors related to those performance
   claims and warranties, and if a court requires any other Contributor to
   pay any damages as a result, the Commercial Contributor must pay
   those damages.

   5. NO WARRANTY

   EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT
   PERMITTED BY APPLICABLE LAW, THE PROGRAM IS PROVIDED ON AN "AS IS"
   BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
   IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF
   TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
   PURPOSE. Each Recipient is solely responsible for determining the
   appropriateness of using and distributing the Program and assumes all
   risks associated with its exercise of rights under this Agreement,
   including but not limited to the risks and costs of program errors,
   compliance with applicable laws, damage to or loss of data, programs
   or equipment, and unavailability or interruption of operations.

   6. DISCLAIMER OF LIABILITY

   EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT
   PERMITTED BY APPLICABLE LAW, NEITHER RECIPIENT NOR ANY CONTRIBUTORS
   SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST
   PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE
   EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGES.

   7. GENERAL

   If any provision of this Agreement is invalid or unenforceable under
   applicable law, it shall not affect the validity or enforceability of
   the remainder of the terms of this Agreement, and without further
   action by the parties hereto, such provision shall be reformed to the
   minimum extent necessary to make such provision valid and enforceable.

   If Recipient institutes patent litigation against any entity
   (including a cross-claim or counterclaim in a lawsuit) alleging that the
   Program itself (excluding combinations of the Program with other software
   or hardware) infringes such Recipient's patent(s), then such Recipient's
   rights granted under Section 2(b) shall terminate as of the date such
   litigation is filed.

   All Recipient's rights under this Agreement shall terminate if it
   fails to comply with any of the material terms or conditions of this
   Agreement and does not cure such failure in a reasonable period of
   time after becoming aware of such noncompliance. If all Recipient's
   rights under this Agreement terminate, Recipient agrees to cease use
   and distribution of the Program as soon as reasonably practicable.
   However, Recipient's obligations under this Agreement and any licenses
   granted by Recipient relating to the Program shall continue and survive.

   Everyone is permitted to copy and distribute copies of this Agreement,
   but in order to avoid inconsistency the Agreement is copyrighted and
   may only be modified in the following manner. The Agreement Steward
   reserves the right to publish new versions (including revisions) of
   this Agreement from time to time. No one other than the Agreement
   Steward has the right to modify this Agreement. The Eclipse Foundation
   is the initial Agreement Steward. The Eclipse Foundation may assign the
   responsibility to serve as the Agreement Steward to a suitable separate
   entity. Each new version of the Agreement will be given a distinguishing
   version number. The Program (including Contributions) may always be
   Distributed subject to the version of the Agreement under which it was
   received. In addition, after a new version of the Agreement is published,
   Contributor may elect to Distribute the Program (including its
   Contributions) under the new version.

   Except as expressly stated in Sections 2(a) and 2(b) above, Recipient
   receives no rights or licenses to the intellectual property of any
   Contributor under this Agreement, whether expressly, by implication,
   estoppel or otherwise. All rights in the Program not expressly granted
   under this Agreement are reserved. Nothing in this Agreement is intended
   to be enforceable by any entity that is not a Contributor or Recipient.
   No third-party beneficiary rights are created under this Agreement.

   Exhibit A - Form of Secondary Licenses Notice

   "This Source Code may also be made available under the following
   Secondary Licenses when the conditions for such availability set forth
   in the Eclipse Public License, v. 2.0 are satisfied: {name license(s),
   version(s), and exceptions or additional permissions here}."

     Simply including a copy of this Agreement, including this Exhibit A
     is not sufficient to license the Source Code under Secondary Licenses.

     If it is not possible or desirable to put the notice in a particular
     file, then You may include the notice in a location (such as a LICENSE
     file in a relevant directory) where a recipient would be likely to
     look for such a notice.

     You may add additional accurate notices of copyright ownership.


/CHANGELOG.adoc
===============

.. code-block: asciidoc

   = AsciiDoc Language Project Changelog
   :url-repo: https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang

   This document provides a summary of notable changes to the AsciiDoc Language project by milestone or release.
   For a detailed view of what's changed, refer to the {url-repo}/-/commits/main[commit history] for this repository.

   == 0.3.0 (milestone build)

   === Added

   * Draft section in specification for paragraph (#35)
   * Draft section in specification for strong span (#37)
   * SDR-6: Define Parsing Rules for Positional Attribute to Named Attribute Mapping (#36)
   * SDR 7: Designate List Continuation as Universal Interrupting Line (#42)
   * SDR 8: Designate List Item as Interrupting Line only for Principal Text (#42)

   === Changed

   * Change primary text to principal text in specification outline

   === Fixed

   * Fix type for AsciiDoc attributes in ASG from boolean to null (allowing string or null)
   * Fix expected value of name property on schema for dlistItem

   == 0.2.0 (milestone build)

   === Added

   * Selected JSON as the format for the ASG used by the TCK (#7)
   * Create initial draft of JSON schema for the ASG; resides in the asg folder (#28)
   * SDR-1: Introduce variable-length delimiter form for open block (#27)
   * SDR-2: Define parsing and aggregation rules for attrlist in block attribute line (and block macros) (#33)
   * SDR-3: Clarify that block style does not influence parsing model, but is rather a parsing transformation (#31)
   * SDR-4: Select PEG as the grammar formalism for describing the AsciiDoc language (#8)
   * SDR-5: Transition the inline syntax to a formal grammar from a substitutions step; introduce an inline preprocessor (#16, #22)

   === Changed

   * Clarify that a block delimiter acts as an interrupting line (#29)
   * Update the spec outline to clarify how styled paragraphs are parsed

   == 0.1.0 (milestone build)

   === Added

   * Create an initial outline for the specification document;
   includes stated goals, introduction, list of terminology and shared patterns, major sections and key points, TCK introduction and purpose of ASG, and open questions/issues to address (#5)

   === Changed

   * Revise scope of project (#11)
   * Resynchronize AsciiDoc user documentation from the initial contribution repository
   * Reconfigure repository as the official source of the AsciiDoc user documentation
   * Change version of user documentation from latest to pre-spec to accurately reflect its state (#30)


/local-antora-playbook.yml
==========================

.. code-block: asciidoc

   # This is a configuration file for Antora.
   # You can pass it to Antora to build this content as an HTML site for previewing offline.
   #
   #  $ npx antora --clean local-antora-playbook.yml
   #
   # You can disregard xref errors to the asciidoctor docs component.
   #
   # A copy of this documentation is also available online at https://docs.asciidoctor.org/asciidoc/latest/
   site:
     title: AsciiDoc
     start_page: asciidoc::index.adoc
   git:
     ensure_git_suffix: false
   content:
     sources:
     - url: .
       start_path: docs
       branches: HEAD
     # ...or use this content source instead to pull the content directly from the repository
     #- url: https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang.git
     #  start_path: docs
     #  branches: HEAD
     #  edit_url: '{web_url}/edit/{refname}/{path}'
   asciidoc:
     attributes:
       page-pagination: ''
       experimental: ''
       idprefix: '@'
       idseparator: '-@'
       table-caption: false
       example-caption: false
       listing-caption: false
       hide-uri-scheme: '@'
       url-org: https://github.com/asciidoctor
   ui:
     bundle:
       url: https://gitlab.com/antora/antora-ui-default/-/jobs/artifacts/master/raw/build/ui-bundle.zip?job=bundle-stable
       snapshot: true
   output:
     dir: ./public


/docs/antora.yml
================

.. code-block: asciidoc

   name: asciidoc
   title: AsciiDoc
   version: pre-spec
   asciidoc:
     attributes:
       source-language: asciidoc@
       xrefstyle: short@
       listing-caption: Example@
   nav:
   - modules/ROOT/nav-top.adoc
   - modules/blocks/nav-basics.adoc
   - modules/attributes/nav-document.adoc
   - modules/attributes/nav-element.adoc
   - modules/document/nav.adoc
   - modules/sections/nav.adoc
   - modules/blocks/nav-paragraph.adoc
   - modules/blocks/nav-discrete-headings.adoc
   - modules/blocks/nav-breaks.adoc
   - modules/text/nav.adoc
   - modules/lists/nav.adoc
   - modules/macros/nav.adoc
   - modules/blocks/nav-styles.adoc
   - modules/verbatim/nav.adoc
   - modules/tables/nav.adoc
   - modules/stem/nav.adoc
   - modules/blocks/nav-open.adoc
   - modules/blocks/nav-collapsible.adoc
   - modules/ROOT/nav-comment.adoc
   - modules/toc/nav.adoc
   - modules/docinfo/nav.adoc
   - modules/directives/nav.adoc
   - modules/subs/nav.adoc
   - modules/pass/nav.adoc
   - modules/attributes/nav-ref.adoc


/docs/CHANGELOG.adoc
====================

.. code-block: asciidoc

   = AsciiDoc Language Documentation Changelog

   This document summarizes the changes introduced to the AsciiDoc Language Documentation by quarter.
   For a detailed view of what's changed, refer to the repository's
   https://github.com/asciidoctor/asciidoc-docs/commits/main[commit history].

   == Published Q1 2024

   Added::
   * Document the `column` role on the page break macro

   Changed::
   * Clarify how the width and scaledwidth attributes on an image macro are translated into DocBook and when scaledwidth is ignored
   * Be more clear about where the include tag directives are permitted in an include file

   == Published Q4 2023

   Added::
   * Document the `encoding` attribute on the include directive and when to use it
   * Document the `link` attribute and friends on the image macros

   Changed::
   * Clarify that line normalization is only applied to include files that are AsciiDoc

   == Published Q3 2023

   Added::
   * Added clarification for why section levels are limited to 5
   * Document how to escape an ordered list marker

   Changed::
   * Clarify that an open block can only masquarade as other paragraph or delimited blocks
   * Clarify how a dot is handled in an xref target by the shorthand xref and the xref macro

   == Published Q2 2023

   Added::
   * Document muted option on video macro (!10)

   Changed::
   * Clarify that footnotes in headings are not officially supported
   * Document the use of the zero-width space character in the em dash and ellipsis replacements
   * Clarify that spaces are not permitted in the target of the link macro and thus must be escaped or encoded

   Fixed::
   * Fixed numerous typos and spelling errors (!14)

   == Published Q1 2023

   Added::
   * Add tip for how to find list of supported source languages for the various syntax highlighters

   Changed::
   * Change docs version from latest to pre-spec (#30)
   * Clarify that superscript and subscript formatting is neither constrained nor unconstrained, but rather a specialty hybrid
   * Clarify that first menu item must start with word character or character reference
   * Emphasize that the shorthand syntax for menu is not on a standards track
   * Clarify how the document header is interpreted and point out that no content blocks may proceed it

   Fixed::
   * Update docinfo example so it picks up docinfo file
   * Remove redundant admonition about the `experimental` attribute on the UI macros page

   Removed::
   * Drop information about obsolete `docinfo1` and `docinfo2` document attributes

   == Published Q4 2022

   Added::
   * Restore the documentation for the menu macro shorthand syntax
   * Document that the unordered list style inherits when set explicitly
   * Document difference between shell and console source language
   * Document the `labelwidth` and `itemwidth` attributes of a horizontal dlist
   * Add page that documents the `docinfo` attribute and docinfo files

   Changed::
   * Clarify which markers are selected by default for a rendered unordered list
   * Be more clear that the source style is not required on a listing block if the source language is set
   * Clarify that source language values are defined by the syntax highlighter library
   * Add example of encoding a colon in the target of a link macro
   * Show full example of mixing AsciiMath and LaTeX math in same document
   * Clarify when line highlighting can be used on a source block and how it works

   Fixed::
   * Fix image block example so source matches output

   == Published Q3 2022

   Added::
   * add more detail about the page break macro
   * add more detail about the thematic break macro
   * add more detail about qanda lists
   * add entries for `table-frame`, `table-grid`, and `table-stripes` to document attribute reference table
   * document `iw` units for `pdfwidth` attribute on image
   * document block captions (captioned titles) and the attributes that are used to generate and control them
   * properly introduce the attribute list, adding a lot more detail about where they can be used

   Changed::
   * added subsections to ID attribute page
   * be more clear about how special sections work in a multi-part book
   * clarify that each side of the expression of an `ifeval` directive should have the same type
   * clarify that the default value for `frame` and `grid` attributes on tables can be controlled using `table-frame` and `table-grid` document attributes, respectively
   * clarify that the frame and grid attributes both accept the value `all`
   * clarify in the quick reference where the block title is displayed
   * clarify that formatted text can span multiple, contiguous lines

   == Published Q2 2022

   Added::
   * document the flattened `backend`, `basebackend`, `doctype`, and `filetype` value attributes (e.g., `backend-html5`)
   * document how to encode link text that contains both an equals sign and quotes
   * document that the `xrefstyle` attribute can be specified on the xref macro to override the xrefstyle value for a single reference
   * document that leading and trailing empty lines are automatically removed from delimited blocks
   * document how to turn off autolinks by removing the macros substitution

   Fixed::
   * clarify that multiple role values in the role attribute must be separated by spaces (#114)
   * draw clear association between the type and visual presentation of formatted text (strong=bold, emphasis=italic, etc)
   * change "macro substitution" to "macros substitution" to keep the terminology straight

   Changed::
   * specify more precisely when quotes in a named attribute value are unescaped
   * revise text about window attribute on URL and link macros
   * add caution about underscore in window=_blank unexpectedly forming a constrained formatting pair; recommend the shorthand syntax instead

   == Published Q1 2022

   Added::
   * add section to clarify that substitutions are not applied to the value of attributes defined externally
   * document that double quote in a URL must be encoded using %22
   * add dedicated section with examples for multiple attributes with ifndef directive
   * explicitly state that , and + combinators on ifdef and ifndef directive cannot be combined

   Changed::
   * clarify the interpretation of multiple attributes with ifdef directive

   == Published Q4 2021

   Added::
   * add dedicated section to introduce the attribute shorthand on blocks and formatted text
   * define the term attrlist as the source text that defines attributes for an element or include directive
   * document how to use text formatting markup in the text of an externalized footnote
   * add recommendation to separate consecutive include directives by an empty line unless the intend is to adjoin the content
   * document acceptable values for the image target
   * document that spaces in the image target are encoded when converting to HTML
   * document that when autogenerated section IDs is enabled, and a title contains a forward looking xref, a custom ID is required
   * document how to toggle autogenerated section IDs within the document
   * add section that covers single and plus passthrough with examples
   * add complete documentation for block and line comments, including an intro
   * explicitly document that you can reference the value of another attribute in the value of an attribute entry

   Fixed::
   * state that scaledwidth attribute with % value scales the image relative to the content area
   * remove dot from the list of valid characters in an element attribute name; this was never a valid character
   * improve the accuracy of the description for internal cross references
   * fix numerous problems with how the inline anchor is explained

   Changed::
   * repurpose the List Continuation page as Complex List Items
   * clarify that user-defined document attributes are stored in the order in which they are defined
   * clarify that the value of the width and height attributes must be an integer value without a unit
   * provide clarity about image sizing attributes in general
   * clarify that the schema for element attributes is open-ended (#87)
   * revise the Document Attributes page so it provides a clearer and more accurate introduction to document attributes
   * clarify what values the target of an include directive accepts
   * rewrite the introduction of single and double curved quotes; add example for straight quotes
   * rewrite the introduction of the apostrophe behavior and syntax; add example for the smart typography replacement
   * split content for internal cross references into sections; add recommended practices
   * improve the description of autogenerated IDs for sections and discrete headings
   * clarify where an attribute entry can be declared; specify that declaring the attribute entry inside a delimited block is undefined
   * clarify that the colophon section can be placed anywhere in a book
   * make a distinction between an absolute and relative URL on the Links intro page
   * promote Literal Monospace section to a page
   * show contexts without leading colon to avoid confusion

   == Published Q3 2021

   Fixed::
   * clarify that the value of the lang attribute must be a BCP 47 language tag
   * fix textual references that refer to the mailto macro as the email macro
   * fix the terminology pertaining to custom inline styles
   * fix the terminology pertaining to highlighted text
   * slightly clarify the rules for a constrained formatting pair by emphasizing that the text cannot start or end with a space-like character
   * change chapter-label to chapter-signifier

   Added::
   * document collapsible blocks (the collapsible and open options on the example structural container) (#34)
   * document how to escape an attribute reference
   * document text span (formerly known as unformatted text)
   * document how newlines in block AsciiMath notation are processed
   * document how newlines in block LaTeX notation are processed
   * document the format attribute on image macros
   * document the fallback attribute on image macros when target is an SVG
   * add the window attribute to the reference table for image macros
   * document the linenums option on source blocks
   * add `pp` to the table of character replacement attributes
   * document the partintro block style (#84)
   * document start and end attributes on audio macro (#74)
   * full document the audio macro, providing both an introduction and examples
   * add the audio macro to the syntax quick reference
   * show example of how to specify alt text that contains a comma
   * document which characters AsciiDoc allows in an ID value and provide recommendations
   * add intro page to passthroughs section
   * document the list and playlist attributes when embedding YouTube videos
   * document the proposed description list with marker list type
   * add block name, context, block style, structural container, and content model to the glossary
   * add block element, inline element, element, and node to the glossary
   * document the valid set of term delimiters for use in a description list (#95)

   Changed::
   * rewrite the documentation for blocks to include information about content models, contexts, structural containers, delimited blocks, block masquerading, and nesting delimited blocks
   * provide more details and examples that explain how to use the attribute list of a mailto macro
   * make it more clear that GitHub, GitLab, and the browser preview extensions automatically adjust relfilesuffix
   * rewrite page about multiline attribute values to describe line joiner as a line continuation
   * change mentions of Asciidoctor to AsciiDoc processor where applicable
   * clarify that formatting pairs cannot be overlapped
   * move discrete headings page to blocks module and map to top-level entry in nav (#4)
   * clarify that the custom cell separator on a table must be a single character
   * clarify that the stripes setting on a table is inherited by nested tables
   * to be consistent with MDN, prefer the term element instead of tag when referring to an element node in HTML and XML
   * change -reference.adoc suffix to -ref.adoc for document-attributes-reference.adoc and character-replacement-reference.adoc
   * rewrite explanation of element attributes

   == Published Q2 2021

   Fixed::
   * update trademarks attribution in README (PR #62)
   * change part-label to part-signifier (PR #64)

   Changed::
   * provide clearer example for escaping single quotes in a single-quoted attribute value (PR #60)
   * switch attribute substitution example to autolink to avoid naunce about whether closing square bracket needs to be escaped
   * clarify that additional IDs assigned to section title cannot be used for referencing within the document
   * clarify that only primary ID can be used for referencing section title within the document

   == Published Q1 2021

   Fixed::
   * Rewrite much of link-macro-attribute-parsing.adoc to reflect the simplified parsing behavior implemented in https://github.com/asciidoctor/asciidoctor/issues/2059.
   * Clarify that a negated tag selects all lines except for those lines containing a tag directive (not simply all lines as it previously suggested)
   * Correct the term "STEM interpreter" to "STEM notation" (#8)

   Added::
   * Add example of how to select all lines outside of tagged regions and lines inside a specific tagged region
   * Document attribute list parsing in detail (#43)
   * Document the normalization applied to the AsciiDoc source and AsciiDoc include files (#51)

   Changed::
   * Moved content into docs folder (#55)
   * Clarify the rules for include tag filtering; emphasize that the wildcards can only be used once
   * Clarify that including by tag includes all regions marked with that same tag.
   * Standardize on the "link text" term instead of "linked text" (#50)

   == Published Q4 2020

   These changes were committed and merged into the main branch starting on November 24, 2020.

   Fixed::
   * Replace the phrase _lead style_ with the phrase _lead role_
   * Replace the table frame value `topbot` with `ends` (#9)
   * Fix conflict with the built-in preamble ID
   * Replace the document attribute `hardbreaks` with `hardbreaks-option` (#3)
   * Fix links to page fragments (aka deep links)
   * Fix grouping in navigation files
   * Update xrefs to reflect module name change in asciidoctor component
   * Document the substitution values that the inline pass macro accepts; clarify the purpose of this macro (#37)
   * Move callouts for block image example to included line (#39)
   * Added missing leading backslash in examples that shows how to escape an include directive

   Added::
   * Import the AsciiDoc syntax quick reference content (#14)
   * Add page about abstract block style to navigation and distinguish from abstract section
   * Integrate the relative link documentation into the link macro page
   * Document where an anchor must be placed for a list item in a description list (#21)

   Changed::
   * Rework the reference table for built-in attributes by fixing incorrect values and descriptions, clarifying difference between effective value and implied value, and consolidating column for Header Only (#24)
   * Fold intrinsic attributes reference into document attributes reference (#26)
   * Use the term *pair* instead of *set* when referring to formatting mark complements (#6)
   * Replace the phrase _set of brackets_ with the phrase _pair of brackets_ to align with updated terminology (#6)
   * Replace the phrase _set of delimited lines_ with the phrase _pair of delimited lines_ (#6)
   * Revise the overview page for text formatting and punctuation (#6)
   * Move the hard line breaks section to a dedicated page under the Paragraphs section (#3)
   * Move unordered lists before ordered lists in navigation file
   * Replace fenced code blocks with AsciiDoc source blocks
   * Drop unnecessary quotes in value of `subs` attribute
   * Swap columns in AsciiDoc table cell example
   * Use xref macro for inter-document xrefs
   * Replace the name AsciiDoc Python with AsciiDoc.py
   * Replace the term "master document" with "primary document"
   * Define `navtitle` attribute on start page
   * Rename version from current to latest

   Removed::
   * Remove migration in progress notice
   * Remove disabled pages


/docs/LICENSE
=============

.. code-block: asciidoc

   AsciiDoc documentation (c) by Sarah White, Dan Allen, and other contributors.

   Content under this directory is made available under the terms of a Creative Commons Attribution 4.0 International License.
   You can find the complete text of this license at https://creativecommons.org/licenses/by/4.0/.


/docs/modules/ROOT/nav-top.adoc
===============================

.. code-block: asciidoc

   * Introduction
   ** xref:document-structure.adoc[]
   ** xref:key-concepts.adoc[]
   ** xref:document-processing.adoc[]
   ** xref:normalization.adoc[]


/docs/modules/ROOT/pages/index.adoc
===================================

.. code-block: asciidoc

   = AsciiDoc Language Documentation
   :navtitle: Introduction
   :url-asciidoc-lang: https://projects.eclipse.org/projects/technology.asciidoc

   == About AsciiDoc

   AsciiDoc is a lightweight and semantic markup language primarily designed for writing technical documentation.
   The language can be used to produce a variety of presentation-rich output formats, all from content encoded in a concise, human-readable, plain text format.

   The AsciiDoc syntax is intuitive because it builds on well-established, plain text conventions for marking up and structuring text.
   Someone unfamiliar with AsciiDoc can probably guess the purpose of many of its syntax elements just by looking at them.
   That's because the elements of the syntax were carefully chosen to look like what they mean (a practice long employed by the tech industry).

   The AsciiDoc language isn't coupled to the output format it produces.
   An AsciiDoc processor can parse and comprehend an AsciiDoc source document and convert the parsed document structure into one or more output formats, such as HTML, PDF, EPUB3, man(ual) page, or DocBook.
   The ability to produce multiple output formats is one of the main advantages of AsciiDoc.
   This capability enables it to be used in static site generators, IDEs, git tools and services, CI/CD systems, and other software.

   AsciiDoc bridges the gap between ease of writing and the rigorous requirements of technical authoring and publishing.
   AsciiDoc only requires a text editor to read or write, thereby offering a low bar to getting started.

   == About this documentation

   You're reading the user-facing documentation for the AsciiDoc language as it's implemented in xref:asciidoctor::index.adoc[Asciidoctor].
   This documentation does not cover how to set up and use Asciidoctor to process AsciiDoc content.
   You can find that documentation in the xref:asciidoctor::index.adoc[Asciidoctor] section of this website.

   This documentation has been submitted as the initial contribution for the {url-asciidoc-lang}[AsciiDoc Language project at Eclipse^].
   That project will use this documentation as the basis for drafting a specification for the AsciiDoc language.
   It will also be used as the draft of the user-facing guide for the AsciiDoc Language, which will also be maintained by that project.

   Until the first version of the AsciiDoc Language Specification is ratified, AsciiDoc is defined by the Asciidoctor implementation.
   There is no other official definition of the language.

   The documentation for AsciiDoc will remain on this site until the AsciiDoc Language project starts publishing its own documentation for the AsciiDoc Language.

   Until then, let's get started!


/docs/modules/ROOT/pages/document-structure.adoc
================================================

.. code-block: asciidoc

   = Document Structure
   :page-aliases: document.adoc

   On this page, you'll learn about the overall structure of an AsciiDoc document.
   Don't worry about the details of the syntax at this point.
   That topic will be covered thoroughly later in the documentation.
   Right now, we're just aiming to get a sense of what makes up an AsciiDoc document.

   == Documents

   AsciiDoc is a plain text writing format with no boilerplate enclosure or prologue.
   An AsciiDoc document may consist of only a single sentence (or even a single character, to be academic).

   The following example is a valid AsciiDoc document with a single paragraph containing a single sentence:

   ----
   This is a basic AsciiDoc document.
   ----

   Of course, you can have more content than a single sentence.
   What we want to emphasize here is that it's simple to get started.

   An AsciiDoc document is a series of blocks stacked on top of one another (by line).
   These blocks are typically offset from one another by empty lines (though these may be optional in certain circumstances).

   To expand the previous document from one paragraph to two, you'd separate the two paragraphs by an empty line:

   ----
   This is a basic AsciiDoc document.

   This document contains two paragraphs.
   ----

   An AsciiDoc document may begin with a document header.
   Although the document header is optional, it's often used because it allows you to specify the document title and to set document-wide configuration and reusable text in the form of document attributes.

   [source]
   ----
   = Document Title
   :reproducible:

   This is a basic AsciiDoc document by {author}.

   This document contains two paragraphs.
   It also has a header that specifies the document title.
   ----

   Almost any combination of blocks constitutes a valid AsciiDoc document (with some structural requirements dictated by the xref:document:doctypes.adoc[document type]).
   Documents can range from a single sentence to a multi-part book.

   == Lines

   The line is a significant construct in AsciiDoc.
   A line is defined as text that's separated on either side by either a newline character or the boundary of the document.
   Many aspects of the syntax must occupy a whole line.
   That's why we say AsciiDoc is a line-oriented language.

   For example, a section title must be on a line by itself.
   The same is true for an attribute entry, a block title, a block attribute list, a block macro, a list item, a block delimiter, and so forth.

   .Example of a section title, which must occupy a single line
   [source]
   ----
   == Section Title
   ----

   .Example of an attribute entry, which must also occupy at least one line
   [source]
   -----
   :name: value
   -----

   .Example of an attribute entry that extends to two lines
   [source]
   -----
   :name: value \
   more value
   -----

   Empty lines can also be significant.
   A single empty line separates the header from the body.
   Many blocks are also separated by an empty line, as you saw in the two paragraph example earlier.

   In contrast, lines within paragraph content are insignificant.
   Keep these points in mind as you're learning about the AsciiDoc syntax.

   == Blocks

   Blocks in an AsciiDoc document lay down the document structure.
   Some blocks may contain other blocks, so the document structure is inherently hierarchical (i.e., a tree structure).
   You can preview this section structure, for example, by enabling the automatic table of contents.
   Examples of blocks include paragraphs, sections, lists, delimited blocks, tables, and block macros.

   Blocks are easy to identify because they're usually offset from other blocks by an empty line (though not always required).
   Blocks always start on a new line, terminate at the end of a line, and are aligned to the left margin.

   Every block can have one or more lines of block metadata.
   This metadata can be in the form of block attributes, a block anchor, or a block title.
   These metadata lines must be above and directly adjacent to the block itself.

   Sections, non-verbatim delimited blocks, and AsciiDoc table cells may contain other blocks.
   Despite the fact that blocks form a hierarchy, even nested blocks start at the left margin.
   By requiring blocks to start at the left margin, it avoids the tedium of having to track and maintain levels of indentation and makes the content more reusable.

   == Text and inline elements

   Surrounded by the markers, delimiters, and metadata lines is the text.
   The text is the main focus of a document and the reason the AsciiDoc syntax gives it so much room to breathe.
   Text is most often found in the lines of a block (e.g., paragraph), the block title (e.g., section title), and in list items, though there are other places where it can exist.

   Text is subject to substitutions.
   Substitutions interpret markup as text formatting, replace macros with text or non-text elements, expand attribute references, and perform other sorts of text replacement.

   Normal text is subject to all substitutions, unless specified otherwise.
   Verbatim text is subject to a minimal set of substitutions to allow it to be displayed in the output as it appears in the source.
   It's also possible to disable all substitutions in order to pass the text through to the output unmodified (i.e., raw).
   The parsing of text ends up being a mix of inline elements and other forms of transformations.

   == Encodings and AsciiDoc files

   An AsciiDoc file is a text file that has the _.adoc_ file extension (e.g., [.path]_document.adoc_).
   Most AsciiDoc processors assume the text in the file uses UTF-8 encoding.
   UTF-16 encodings are supported only if the file starts with a BOM.

   An AsciiDoc processor can process AsciiDoc from a string (i.e., character sequence).
   However, most of the time you'll save your AsciiDoc documents to a file.


/docs/modules/ROOT/pages/key-concepts.adoc
==========================================

.. code-block: asciidoc

   = Key Concepts

   This page introduces you to some of the concepts and terms you'll encounter as you learn about AsciiDoc.
   Each concept will be covered in more depth later in the documentation.
   Use this page as a way to start to familiarize yourself with the lingo.

   == Document

   A document represents the top-level block element in AsciiDoc.
   It consists of an optional document header and either a) one or more sections preceded by an optional preamble or b) a sequence of top-level blocks only.

   The document can be configured using a document header.
   The header is not a block itself, but contributes metadata to the document, such as the document title and document attributes.

   == Elements

   An element is an identifiable, addressable, and composable chunk of content in a document.
   An AsciiDoc document is merely a composition of all the elements it contains.

   Elements are a hierarchy of types, where one element may be a specialization of a family of elements.
   For example, a sidebar block is a block element, so it shares the traits of all block elements, and also adds some of its own.

   Elements include the document itself, sections, blocks, block macros, breaks, and inline phrases and macros.

   A [.term]*block element* is stacked vertically (by line) above or below other block elements.
   Block elements are typically referred to simply as [.term]*blocks*.
   Blocks form the main tree structure of the document.

   An [.term]*inline element* is a span of content within a block element or one of its attributes (e.g., a block title).
   Inline elements include formatted text (italic, bold, etc), inline macros, and element references.
   What fills in the gap between these elements is unsubstituted text.
   Inline elements are less structured than block elements as they are more geared towards substitutions than a tree structure.

   == Attributes

   An attribute is a name/value pair used for storing and disclosing metadata in the AsciiDoc language.
   Attributes can be used to influence the syntax, control behavior, customize styles, activate or configure integrations, or store inline replacement content.
   Attributes truly set AsciiDoc apart from other lightweight markup languages.

   An attribute is actually an abstract term.
   There are two concrete classifications of attributes: document attributes and element attributes.

   === Document attributes

   Document attributes, as the name implies, are associated directly with the document.
   They are used to export information about the document at runtime, control behavior of the processor, and to store reusable values or phrases.
   Thus, they are a sort of two-way communication channel with the processor.

   Document attributes can be referenced in the content using an attribute reference (wherever the attribute substitution is enabled).
   A document attribute can be defined either in the document using an attribute entry (typically in the document header) or from the API or CLI.
   Not all document attributes can be modified.

   === Element attributes

   Element attributes are metadata on a specific element, like a block or an inline element.
   They are defined in an attribute list and only apply to that element.
   The placement of the attribute list depends on the element.
   The attribute name can either be a string (i.e., a named attribute) or an implicit numerical index (i.e., an unnamed, positional attribute).

   //Element attributes are not accessible at all from the content, so they cannot be referenced like document attributes.
   Unlike document attributes, element attributes cannot be referenced directly from the content, on the document model.
   In other words, they cannot be resolved using an attribute reference.
   Element attributes enrich or configure the behavior of an element, such as to apply a role or set the width of an image.
   An element attribute is defined using an attribute list on an element, or an available shorthand like a block title line.

   == Macros

   As you read through this documentation, you'll frequently see references to the term macro.
   A macro is a syntax for representing non-text elements or syntax that expands into text using the provided metadata.
   See https://en.wikipedia.org/wiki/Macro_(computer_science)[macro^] to learn more about the meaning of this term.

   Here's an example of a block macro:

   [source]
   ----
   image::sunset.jpg[Sunset]
   ----

   Here's an example of an inline macro:

   [source]
   ----
   Click the button with the image:star.png[Star] to favorite the project.
   ----

   You can think of a macro like a function.
   A syntax of macro follows the form of a name, a target which is sometimes optional, and an attribute list consisting of zero or more element attributes enclosed in square brackets.

   There are two variations of a macro: block and inline.
   In a block macro, the name and target are separated by two colons (`::`) and it must reside on a line by itself.
   In an inline macro, the name and target are separated by a single colon (`:`) and it can be alongside text and other inline elements.
   A block macro is always parsed, whereas an inline macro is only parsed where the macros substitution is enabled.

   == Preprocessor directives

   There's another syntax in AsciiDoc that looks a lot like block macros, only they aren't.
   These are the preprocessor directives.

   A preprocessor directive is a function that controls lines that are fed into the parser.
   A conditional preprocessor directive can configure lines to be included or excluded based on the presence of an attribute (ifdef, ifndef) or another arbitrary condition (ifeval).
   An include directive can add additional lines to the document taken from another document.

   Preprocessor directives share common traits with a block macro.
   Like a block macro, a preprocessor directive must be on a line by itself.
   While the preprocessor directive can access document attributes, it's not otherwise aware of the context around it.
   It's only a line processor.
   Like a block macro, the include directive can have element attributes, though they only apply to the preprocessing operation itself.


/docs/modules/ROOT/pages/document-processing.adoc
=================================================

.. code-block: asciidoc

   = Document Processing

   AsciiDoc is specifically a writing format, not a publishing format.
   In other words, it's not WYSIWYG like when you write in a word processor.
   Instead, what you write is the AsciiDoc source.
   You then use an AsciiDoc processor, such as Asciidoctor, to convert the AsciiDoc source into a publishable format.
   It's this output that you publish.

   Converting the AsciiDoc source is an opportunity to interpret and embellish your content to get more out of it than what you put in.
   The work of converting the AsciiDoc source to another format is handled by a converter.
   While there is a strong relationship between the language and the converters, these two aspects are not explicitly coupled.

   An AsciiDoc processor provides several built-in converters, including ones for making HTML and DocBook.
   To activate one of these converters, you set the backend on the document (default: html).
   The backend is a keyword that tells the processor which output format you want to make.
   The processor then selects the converter that makes that output format.
   For example, the HTML converter handles the html backend to make HTML output.

   An AsciiDoc processor actually works in two steps.
   First, it parses the AsciiDoc document.
   This parsing produces a structured document that reflects the written structure and interprets all the meaningful markup.
   The processor then passes this structured document to the converter to transform it into the output format.

   In short, the processor accepts a string (which may be read from a file), parses it into a structure document, then produces another string (which may be written to a file).


/docs/modules/ROOT/pages/normalization.adoc
===========================================

.. code-block: asciidoc

   = Normalization

   When an AsciiDoc processor reads the AsciiDoc source, the first thing it does is normalize the lines.
   (This operation can be performed up front or as each line is visited).

   Normalization consists of the following operations:

   * Force the encoding to UTF-8 (An AsciiDoc processor always assumes the content is UTF-8 encoded)
   * Strip trailing spaces from each line (including any end of line character)

   This normalization is performed independent of any structured context.
   It doesn't matter if the line is part of a literal block or a regular paragraph. All lines get normalized.

   Normalization is only applied in certain cases to the lines of an include file.
   Only include files that have a recognized AsciiDoc extension are normalized as described above.
   For all other files, only the trailing end of line character is removed.
   Include files can also have a different encoding, which is specified using the encoding attribute.
   If the encoding attribute is not specified, UTF-8 is assumed.

   When the AsciiDoc processor brings the lines back together to produce the rendered document (HTML, DocBook, etc), it joins the lines on the line feed character (`\n`).


/docs/modules/ROOT/pages/asciidoc-vs-markdown.adoc
==================================================

.. code-block: asciidoc

   = Compare AsciiDoc to Markdown
   :description: A brief, side-by-side comparison of AsciiDoc and Markdown.

   The most compelling reason to choose a lightweight markup language for writing is to minimize the number of technical concepts an author must grasp in order to be immediately productive.
   In other words, the goal is to be able to _write without friction_.
   While that's certainly the goal of both AsciiDoc and Markdown, and both are very approachable for newcomers, this page explores why AsciiDoc is a more suitable alternative to Markdown as your content grows and evolves.

   == Starting with Markdown

   The most prevalent lightweight markup language is Markdown.
   (At least, Markdown is what you call it at first).
   The main advantage of Markdown lies in its primitive syntax: its manual and cheatsheet are one and the same.
   But this advantage is also its greatest weakness.

   As soon as authors need something slightly more complex than basic prose (e.g., tables, cross references, footnotes, embedded YouTube videos, etc.), they find themselves resorting to embedded HTML or seeking out more feature-rich implementations.
   Markdown has become a maze of different implementations, termed "`flavors`", which make a universal definition evasive.

   NOTE: The IETF has declared "`there is no such thing as "invalid" Markdown.`"
   See https://tools.ietf.org/html/rfc7763#section-1.1[This Is Markdown! Or: Markup and Its Discontents^].

   Here's how the story inevitably goes.
   You start out with Markdown.
   Then it's Markdown + X.
   Then Markdown + X + Y.
   And down the rabbit hole you go.
   What's worse, X and Y often require you to sprinkle in HTML, unnecessarily coupling content with presentation and wrecking portability.
   Your instinct to choose Markdown is good.
   There are just better options.

   == Graduating to AsciiDoc

   AsciiDoc presents a more sound alternative.
   The AsciiDoc syntax is more concise than (or at least as concise as) Markdown.
   At the same time, AsciiDoc offers power and flexibility without requiring the use of HTML or "`flavors`" for essential syntax such as tables, description lists, admonitions (tips, notes, warnings, etc.) and table of contents.

   It's important to understand that AsciiDoc was initially designed as a plain-text alternative to the DocBook XML schema.
   AsciiDoc isn't stuck in a game of whack-a-mole trying to satisfy publishing needs like Markdown.
   Rather, the AsciiDoc syntax was explicitly designed with the needs of publishing in mind, both print and web.
   If the need arises, you can make full use of the huge choice of tools available for a DocBook workflow using Asciidoctor's DocBook converter.
   That's why mapping to an enterprise documentation format like DocBook remains a key use case for AsciiDoc.

   And yet, AsciiDoc is simple enough to stand in as a better flavor of Markdown.
   But what truly makes AsciiDoc the right investment is that its syntax was designed to be extended as a core feature.
   This extensibility not only means that AsciiDoc has a lot more to offer, with room to grow, it also fulfills the objective of ensuring your content is maximally reusable.

   == Comparison by example

   The following table shows the AsciiDoc syntax as it compares to Markdown.
   Since AsciiDoc supports a broader range of syntax than Markdown, this side-by-side comparison focuses mainly on areas where the syntax overlaps.

   .A selection of AsciiDoc language features compared to Markdown
   [#asciidoc-vs-markdown%autowidth]
   |===
   |Language Feature |Markdown |AsciiDoc

   |Bold (constrained)
   a|
   [source,markdown]
   ----
   **bold**
   ----
   a|
   [source]
   ----
   *bold*
   ----

   |Bold (unconstrained)
   a|
   [source,markdown]
   ----
   **b**old
   ----
   a|
   [source]
   ----
   **b**old
   ----

   |Italic (constrained)
   a|
   [source,markdown]
   ----
   *italic*
   ----
   a|
   [source]
   ----
   _italic_
   ----

   |Italic (unconstrained)
   |_n/a_
   a|
   [source]
   ----
   __i__talic
   ----

   |Monospace (constrained)
   a|
   [source,markdown]
   ----
   `monospace`
   ----
   a|
   [source]
   ----
   `monospace`
   ----

   |Monospace (unconstrained)
   a|
   [source,markdown]
   ----
   `m`onospace
   ----
   a|
   [source]
   ----
   ``m``onospace
   ----

   |Literal monospace
   a|
   [source,markdown]
   ----
   `http://localhost:8080`
   `/issue/{id}`
   ----
   a|
   [source]
   ----
   `+http://localhost:8080+`
   `+/issue/{id}+`
   ----

   |Link with label
   a|
   [source,markdown]
   ----
   [Asciidoctor](https://asciidoctor.org)
   ----
   a|
   [source]
   ----
   https://asciidoctor.org[Asciidoctor]
   ----

   |Relative link
   a|
   [source,markdown]
   ----
   [user guide](user-guide.html)
   ----
   a|
   [source]
   ----
   link:user-guide.html[user guide]
   xref:user-guide.adoc[user guide]
   ----

   |File link
   a|
   [source,markdown]
   ----
   [get the PDF]({% raw %}{{ site.url }}{% endraw %}/assets/mydoc.pdf)
   ----
   a|
   [source]
   ----
   link:{site-url}/assets/mydoc.pdf[get the PDF]
   ----

   |Cross reference
   a|
   [source,markdown]
   ----
   See [Usage](#_usage).

   <h2 id="_usage">Usage</h2>
   ----
   a|
   [source]
   ----
   See <<_usage>>.

   == Usage
   ----

   |Block ID (aka anchor)
   a|
   [source,markdown]
   ----
   <h2 id="usage">Usage</h2>
   ----
   a|
   [source]
   ----
   [#usage]
   == Usage
   ----

   |Inline anchor
   |_n/a_
   a|
   [source]
   ----
   . [[step-1]]Download the software
   ----

   |Inline image w/ alt text
   a|
   [source,markdown]
   ----
   ![Logo](/images/logo.png)
   ----
   a|
   [source]
   ----
   image:logo.png[Logo]
   ----

   |Block image w/ alt text
   |_n/a_
   a|
   [source]
   ----
   image::logo.png[Logo]
   ----

   |Section heading*
   a|
   [source,markdown]
   ----
   ## Heading 2
   ----
   a|
   [source]
   ----
   == Heading 2
   ----

   |Blockquote*
   a|
   [source,markdown]
   ----
   > Quoted text.
   >
   > Another paragraph in quote.
   ----
   a|
   [source]
   ----
   ____
   Quoted text.

   Another paragraph in quote.
   ____
   ----

   |Literal block
   a|
   [source,markdown]
   ----
       $ gem install asciidoctor
   ----
   a|
   .Indented (by 1 or more spaces)
   [source]
   ----
    $ gem install asciidoctor
   ----

   .Delimited
   [source]
   ----
   ....
   $ gem install asciidoctor
   ....
   ----

   |Code block*
   a|
   [source,markdown]
   ----
   ```java
   public class Person {
     private String name;
     public Person(String name) {
       this.name = name;
     }
   }
   ```
   ----
   a|
   [source]
   ....
   [source,java]
   ----
   public class Person {
     private String name;
     public Person(String name) {
       this.name = name;
     }
   }
   ----
   ....

   |Unordered list
   a|
   [source,markdown]
   ----
   * apples
   * orange
     * temple
     * navel
   * bananas
   ----
   a|
   [source]
   ----
   * apples
   * oranges
   ** temple
   ** navel
   * bananas
   ----
   |Ordered list
   a|
   [source,markdown]
   ----
   1. first
   2. second
   3. third
   ----
   a|
   [source]
   ----
   . first
   . second
   . third
   ----

   |Thematic break (aka horizontal rule)*
   a|
   [source,markdown]
   ----
   ***

   * * *

   ---

   - - -

   ___

   _ _ _
   ----
   a|
   [source]
   ----
   '''
   ----

   |Typographic quotes (aka "`smart quotes`")
   |Enabled through an extension switch, but offer little control in how they are applied.
   a|
   [source]
   ----
   The `'90s popularized a new form of music known as "`grunge`" rock.
   It'll turn out to have an impact that extended well beyond music.
   ----

   |Document header
   a|
   .Slapped on as "`front matter`"
   [source,markdown]
   ----
   ---
   layout: docs
   title: Writing posts
   prev_section: defining-frontmatter
   next_section: creating-pages
   permalink: /docs/writing-posts/
   ---
   ----
   a|
   .Native support!
   [source]
   ----
   = Writing posts
   :page-layout: base
   :showtitle:
   :prev_section: defining-frontmatter
   :next_section: creating-pages
   ----

   |Admonitions
   |_n/a_
   a|
   [source]
   ----
   TIP: You can add line numbers to source listings by adding the word `numbered` in the attribute list after the language name.
   ----

   |Sidebars
   |_n/a_
   a|
   [source]
   ----
   .Lightweight Markup
   ****
   Writing languages that let you type less and express more.
   ****
   ----

   |Block titles
   |_n/a_
   a|
   [source]
   ----
   .Grocery list
   * Milk
   * Eggs
   * Bread
   ----

   |Includes
   |_n/a_
   a|
   [source]
   ----
   \include::intro.adoc[]
   ----

   |URI reference
   a|
   [source,markdown]
   ----
   Go to the [home page][home].

   [home]: https://example.org
   ----
   a|
   [source]
   ----
   :home: https://example.org

   Go to the {home}[home page].
   ----

   |Custom CSS classes
   |_n/a_
   a|
   [source]
   ----
   [.path]_Gemfile_
   ----
   |===

   +*+ Asciidoctor also supports the Markdown syntax for this language feature.

   You can see that AsciiDoc has the following advantages over Markdown:

   * AsciiDoc uses the same number of markup characters or less when compared to Markdown in nearly all cases.
   * AsciiDoc uses a consistent formatting scheme (i.e., it has consistent patterns).
   * AsciiDoc can handle all permutations of nested inline (and block) formatting, whereas Markdown often falls down.
   * AsciiDoc handles cases that Markdown doesn't, such as a proper approach to inner-word markup, source code blocks and block-level images.

   NOTE: Certain Markdown flavors, such as Markdown Extra, support additional features such as tables and description lists.
   However, since these features don't appear in "`plain`" Markdown, they're not included in the comparison table.
   But they're supported natively by AsciiDoc.

   Asciidoctor, which is used for converting AsciiDoc on GitHub and GitLab, emulates some of the common parts of the Markdown syntax, like headings, blockquotes and fenced code blocks, simplifying the migration from Markdown to AsciiDoc.
   For details, see xref:syntax-quick-reference.adoc#markdown-compatibility[Markdown compatibility].

   ////
   ===== Description Lists in AsciiDoc

   [source]
   ----
   a term:: a description
   another term:: another description
   ----

   They can even hold code examples:

   [source]
   ....
   term with code example:: a description
   +
   [source,java]
   ----
   public class Person {
   }
   ----
   ....

   ===== Tables in AsciiDoc

   An AsciiDoc table can be written as a series of lists which use a vertical bar as the list marker:

   [source]
   ----
   [cols=3]
   |===
   |a
   |b
   |c

   |1
   |2
   |3
   |===
   ----

   Which appears as:

   [cols=3]
   |===
   |a
   |b
   |c

   |1
   |2
   |3
   |===

   Markdown Extra supports tables and description lists, too; but it's not Markdown.
   Also, unlike Markdown Extra, AsciiDoc can apply formatting to cells.
   ////


/docs/modules/ROOT/pages/comments.adoc
======================================

.. code-block: asciidoc

   = Comments

   Like programming languages, AsciiDoc provides a way to add commentary to your document that's not carried over into the published document.
   This artifact is collectively known as a [.term]*comment*.
   Putting text in a comment is often referred to as "`commenting it out`".

   A comment is often used to insert a writer-facing notation or to hide draft content that's not ready for publishing.
   In general, you can use comments anytime you want to hide lines from the processor.
   Comments can also be useful as a processor hint to keep adjacent blocks of content separate.

   The AsciiDoc processor will ignore comments during parsing and, thus, will not include them in the parsed document.
   It will, however, account for the lines when mapping line numbers back to the source document.

   AsciiDoc supports two styles of comments, line and block.
   A line comment is for making comments line-by-line (i.e., comment line).
   A block comment is for enclosing an arbitrary range of lines as a comment (i.e., comment block).

   [#comment-lines]
   == Comment lines

   A comment line is any line outside of a verbatim block that begins with a double forward slash (`//`) that's not immediately followed by a third forward slash.
   Following this prefix, the line may contain an arbitrary number of characters.
   It's customary to insert a single space between the prefix and the comment text (e.g., `// line comment`).

   .Line comment syntax
   ----
   // A single-line comment.
   ----

   When the processor encounters a line comment, it ignores the line and continues processing as though the line is not there.
   Line comments are processed as lines are read, so they can be used where paragraph text is not permitted, such as between attribute entries in the document header.

   Line comments can be used strategically to separate blocks that otherwise have affinity, such as two adjacent lists.

   .Line comment separating two lists
   ----
   * first list

   //

   * second list
   ----

   In this case, the single line comment effectively acts as an empty paragraph that's dropped from the parsed document.
   But before then, it will have served its purpose as a block boundary.

   == Comment blocks

   A comment block is a specialized delimited block.
   It consists of an arbitrary number of lines bounded on either side by `////` delimiter lines.

   A comment block can be used anywhere a delimited block is normal accepted.
   The main difference is that once the block is read, it's dropped from the parsed document (effectively ignored).
   Additionally, no AsciiDoc syntax within the delimited lines is interpreted, not even preprocessor directives.

   .Block comment syntax
   ----
   ////
   A comment block.

   Notice it's a delimited block.
   ////
   ----

   A comment block can also be written as an open block with the comment style:

   .Alternate block comment syntax
   ----
   [comment]
   --
   A comment block.

   Notice it's a delimited block.
   --
   ----

   A comment block that can consists of a single paragraph can be written as a paragraph with the comment style:

   .Comment paragraph syntax
   ----
   [comment]
   A paragraph comment.
   Like all paragraphs, the lines must be contiguous.

   Not a comment.
   ----

   If comment blocks are used in a list item, they must be attached to the list item just like any other block.

   .Block comment attached to list item
   ----
   * first item
   +
   ////
   A comment block in a list.

   Notice it's attached to the preceding list item.
   ////

   * second item
   ----

   Within a table, a comment block can only be used in an AsciiDoc table cell.

   .Block comment within a table
   ----
   |===
   a|
   cell text

   ////
   A comment block in a table.

   Notice the cell has the "a" (AsciiDoc) style.
   ////
   |===
   ----

   Comment blocks can be very effective for commenting out sections of the document that are not ready for publishing or that provide background material or an outline for the text being drafted.


/docs/modules/ROOT/pages/faq.adoc
=================================

.. code-block: asciidoc

   = Frequently Asked Questions (FAQ)
   :page-aliases: faqs.adoc

   == Does AsciiDoc only support ASCII text?

   No.
   AsciiDoc provides full Unicode support (UTF-8 by default, UTF-16 with a BOM).
   👌

   The "`Ascii`" in AsciiDoc (and Asciidoctor) merely refers to the range of characters used to define the language syntax (e.g., block delimiters, section markers, list markers, attribute list boundaries, built-in attribute and block names, etc.).
   In other words, you only have to use characters from US-ASCII in order to express the structure of an AsciiDoc document.
   The content itself, which includes paragraphs, titles, verbatim blocks, attribute names and values, custom block names, and so forth, may contain characters from any character range in Unicode.

   An AsciiDoc processor assumes the input is encoded in UTF-8 and it encodes output documents in UTF-8 as well.

   == What's the relationship between a converter and a backend?

   A *converter* is the software that performs conversion from AsciiDoc to a publishable format.
   A *backend* is an identifier for the intended output format, and thus tells the AsciiDoc processor which converter to use.
   You can think of the backend as an alias for a converter.

   The backend represents the user's intent to transform the AsciiDoc document to a given format (e.g., `html5` for HTML 5).
   That backend also serves as an identifier that tells the processor which converter to use.
   More than one converter can bind to (i.e., stake claim to) the same backend in order to provide the user with alternatives for generating a given output format.
   For example, the backend `pdf` could be satisfied by Asciidoctor PDF, but it may also be mapped to a different implementation.
   The last converter that registers itself with a backend wins.

   == What's the media type (aka MIME type) for AsciiDoc?

   A https://en.wikipedia.org/wiki/Media_type[media type], or MIME type, is a code for identifying file formats and content formats transmitted over the Internet.
   As of yet, there's no official media type registered for AsciiDoc.
   However, the AsciiDoc Working Group, which oversees the specification for the AsciiDoc language, has plans to submit a proposal to register an official the media type for AsciiDoc.
   See https://github.com/asciidoctor/asciidoctor/issues/2502[asciidoctor#2502].

   The proposed media type for AsciiDoc is as follows:

    name: text/asciidoc
    extensions: .adoc, .asciidoc

   The name `text/asciidoc` follows the convention used for Markdown.
   The `.adoc` extension is the preferred one.
   The `.asciidoc` extension is only included for backwards compatibility with existing documents.

   See https://tools.ietf.org/html/rfc7763 for details about naming a media type.

   == Why is my document attribute being ignored?

   If the document attribute is a header-only attribute, make sure it is defined in the document header or passed in via a CLI or API.
   Otherwise, the document attribute will not have any affect.

   Recall that the document header ends at the first empty line or block, whichever comes first.
   If you have an empty line somewhere in what you intend to be the document header, the attribute entries that fall after that empty line are going to be defined in the body, not the header.
   That likely explains your problem.
   If you remove the empty line(s), your attribute should be recognized.

   If the document attribute is not a header-only attribute, make sure it is being defined (using an attribute entry) outside of any delimited block and offset from other blocks by at least one empty line.

   == Part way through the document, the blocks stop rendering correctly. What went wrong?

   When content does not display as you expect in the later part of a document, it's usually due to a delimited block missing its closing delimiter line.
   The parsing rules inside a delimited block are different.
   If left open, it can impact how the AsciiDoc processor interprets the document structure.
   For example, the AsciiDoc processor will stop recognizing section titles from that point forward.

   To solve this problem, first look for missing delimiter lines.
   An AsciiDoc processor must warn you when this situation is detected.
   Syntax highlighting in your text editor can also help with this.
   Also look at the rendered output to see if the block styles are extending past where you intended.

   The most sly culprit is the open block.
   Although an open block doesn't have any special styling, it does apply delimited block semantics to its contents.
   You can add a role that applies a custom style, such as a red outline, so you can see its boundaries.

   == Why don't links to URLs that contain an underscore or caret work?

   An AsciiDoc processor applies normal substitutions to paragraph content, including the target of a URL or link macro.
   It's up to the author to escape this syntax.
   See xref:macros:complex-urls.adoc[] to find techniques you can use to address this problem.


/docs/modules/ROOT/pages/glossary.adoc
======================================

.. code-block: asciidoc

   = Glossary of Terms

   [caption="Work in Progress"]
   CAUTION: This glossary is a work in progress.
   It does not include all the terms in AsciiDoc.

   attribute reference:: an expression for dereferencing the value of a document attribute.

   attrlist:: the source text that defines attributes for an element (i.e., block, block macro, inline macro) or an include directive.

   admonition:: a callout paragraph or block that has a label or icon indicating its priority.

   backend:: a moniker for the expected output format; used as a key to select which converter to use; often used interchangeably with the name of a converter (i.e., the "html5" backend").

   block element:: a line-oriented chunk of content in an AsciiDoc document.

   block attribute:: an attribute associated with a delimited block or paragraph; these attributes can affect processing of the block, and are available to block processors, but cannot be referenced using an attribute reference.

   block name:: used to refer to custom blocks, which can map an arbitrary name to one or more contexts; has a similar role as the style for a built-in block, such as an admonition block

   block style:: a modifier that specializes the context of a block

   built-in attribute:: a document attribute that controls processing, integrations, styling, and localization.

   content model:: determines how the content of a block is parsed and processed (e.g., simple, compound, verbatim, raw, etc.)

   context:: the element's type; describes the primary function of an element (e.g., sidebar, listing, example)

   converter:: a software component that an AsciiDoc processor calls to convert a parsed AsciiDoc document to a given output format;
   the converter and output format are correlated using a backend identifier.

   cross reference:: a link from one location in the document to another location marked by an anchor.

   document attribute:: an attribute associated with the document (node); in other words, an attribute in the global document attributes dictionary; the value of these attributes can be referenced using an attribute reference; if defined in the header, the document attribute is known as a header attribute.

   element:: discrete content in the source or output document.
   May be a branch (contains child elements) or a leaf (does not contain child elements).

   element attribute:: an attribute associated with a block, macro, formatted text, or the include directive; these attributes can affect processing of the element (or include directive) and are available in the document model; however, the value of these attributes cannot be resolved using an attribute reference.

   environment attribute:: a dynamic document attribute that pertains to, or gives information about, the runtime environment.

   header attribute:: a document attribute defined in the document header; visible from all nodes in the document; often required for global settings such as the source highlighter or icons mode.

   inline element:: a phrase (i.e., span of content) within a block element or one of its attributes in an AsciiDoc document.

   list continuation:: a plus sign (`+`) on a line by itself that connects adjacent lines of text to a list item.

   macro:: a syntax for representing non-text elements or that expands into text using the provided metadata.

   macro attribute:: an attribute associated with a block or inline macro; these attributes can affect processing of the macro, and are available to macro processors, but cannot be referenced using an attribute reference.

   node:: an in-memory representation of a block or inline element in the parsed document model.

   predefined attribute:: a document attribute defined for convenience; often used for inserting special content characters.

   structural container:: the fixed set of reusable block enclosures (delimited regions) defined by the AsciiDoc language; implies the block's content model; characterized by a pair of matching delimited lines defining the boundaries of the block's content

   quoted text:: text which is enclosed in special punctuation to give it emphasis or special meaning.

   user-defined attribute:: a document attribute defined by the content author; used for storing reusable content, and controlling conditional inclusion.


/docs/modules/ROOT/pages/syntax-quick-reference.adoc
====================================================

.. code-block: asciidoc

   = AsciiDoc Syntax Quick Reference
   :navtitle: Syntax Quick Reference
   :description: The quick reference for common AsciiDoc document and text formatting markup.
   :collapsible:
   :url-char-xml: https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
   :url-data-uri: https://developer.mozilla.org/en-US/docs/data_URIs
   :!table-frame:
   :!table-grid:
   // release-version is used for an example; it's not the release version for this document
   :release-version: 2.4.3

   ////
   This document is not meant to be a replacement for the documentation of the AsciiDoc language itself.
   It's meant to be a helpful guide you can give to a writer to refer to while in the thick of writing.
   Think of it a quick reminder of the most common syntax and scenarios.
   It should not go into any depth about AsciiDoc processing or the options you can use when converting to an output format.
   ////

   [IMPORTANT]
   The examples on this page demonstrate the output produced by the built-in HTML converter.
   An AsciiDoc converter is expected to produce complementary output when generating other output formats, such as PDF, EPUB, and DocBook.

   == Paragraphs

   .Paragraph
   [#ex-normal]
   ----
   include::text:example$text.adoc[tag=b-para]
   ----

   .View result of <<ex-normal>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=b-para]
   ====

   .Literal paragraph
   [#ex-literal]
   ----
   include::verbatim:example$literal.adoc[tag=qr-para]
   ----

   .View result of <<ex-literal>>
   [%collapsible.result]
   ====
   include::verbatim:example$literal.adoc[tag=qr-para]
   ====

   .Hard line breaks
   [#ex-hardbreaks]
   ----
   include::text:example$text.adoc[tag=hb-all]
   ----

   .View result of <<ex-hardbreaks>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=hb-all]
   ====

   .Lead paragraph
   [#ex-lead]
   ----
   include::text:example$text.adoc[tag=qr-lead]
   ----

   .View result of <<ex-lead>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=qr-lead]
   ====

   TIP: The default Asciidoctor stylesheet automatically styles the first paragraph of the preamble as a xref:blocks:preamble-and-lead.adoc[lead paragraph] if no role is specified on that paragraph.

   == Text formatting

   .Constrained bold, italic, and monospace
   [#ex-constrained]
   ----
   include::text:example$text.adoc[tag=constrained-bold-italic-mono]
   ----

   .View result of <<ex-constrained>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=constrained-bold-italic-mono]
   ====

   .Unconstrained bold, italic, and monospace
   [#ex-unconstrained]
   ----
   include::text:example$text.adoc[tag=unconstrained-bold-italic-mono]
   ----

   .View result of <<ex-unconstrained>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=unconstrained-bold-italic-mono]
   ====

   .Highlight, underline, strikethrough, and custom role
   [#ex-lines]
   ----
   include::text:example$text.adoc[tag=qr-all]
   ----

   .View result of <<ex-lines>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=qr-all]
   ====

   .Superscript and subscript
   [#ex-sub-sup]
   ----
   include::text:example$text.adoc[tag=b-sub-sup]
   ----

   .View result of <<ex-sub-sup>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=b-sub-sup]
   ====

   .Smart quotes and apostrophes
   [#ex-curved]
   ----
   include::text:example$text.adoc[tag=b-c-quote]
   ----

   .View result of <<ex-curved>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=b-c-quote]
   ====

   == Links

   .Autolinks, URL macro, and mailto macro
   [#ex-urls]
   ----
   include::macros:example$url.adoc[tag=b-base]

   include::macros:example$url.adoc[tag=b-scheme]
   ----

   .View result of <<ex-urls>>
   [%collapsible.result]
   ====
   include::macros:example$url.adoc[tag=b-base]

   include::macros:example$url.adoc[tag=b-scheme]
   ====

   .URL macros with attributes
   [#ex-linkattrs]
   ----
   include::macros:example$url.adoc[tag=b-linkattrs]
   ----

   .View result of <<ex-linkattrs>>
   [%collapsible.result]
   ====
   include::macros:example$url.adoc[tag=b-linkattrs]
   ====

   IMPORTANT: The `link:` macro prefix is _not_ required when the target starts with a URL scheme like `https:`.
   The URL scheme acts as an implicit macro prefix.

   CAUTION: If the link text contains a comma and the text is followed by one or more named attributes, you must enclose the text in double quotes.
   Otherwise, the text will be cut off at the comma (and the remaining text will get pulled into the attribute parsing).

   .URLs with spaces and special characters
   ----
   include::macros:example$url.adoc[tag=b-spaces]
   ----

   .Link to relative file
   ----
   link:index.html[Docs]
   ----

   .Link using a Windows UNC path
   ----
   include::macros:example$url.adoc[tag=b-windows]
   ----

   .Inline anchors
   ----
   include::attributes:example$id.adoc[tag=anchor]
   ----

   .Cross references
   [#ex-xrefs]
   ----
   include::macros:example$xref.adoc[tag=b-base]
   ----

   .View result of <<ex-xrefs>>
   [%collapsible.result]
   ====
   include::macros:example$xref.adoc[tag=b-base]
   ====

   .Inter-document cross references
   ----
   include::macros:example$xref.adoc[tag=b-inter]
   ----

   == Document header

   The xref:document:header.adoc[document header] is optional.
   The header may not contain any empty lines and must be separated from the content by at least one empty line.

   .Title
   ----
   include::document:example$title.adoc[tag=qr-title]
   ----

   .Title and author line
   ----
   include::document:example$header.adoc[tag=qr-author]
   ----

   .Title, author line, and revision line
   ----
   include::document:example$header.adoc[tag=qr-rev]
   ----

   IMPORTANT: You cannot have a xref:document:revision-line.adoc[revision line] without an xref:document:author-line.adoc[author line].

   .Document header with attribute entries
   ----
   include::document:example$header.adoc[tag=qr-attributes]
   ----

   [#section-titles]
   == Section titles

   When the document type is `article` (the default), the document can only have one level 0 section title (`=`), which is the document title (i.e., doctitle).

   .Article section levels
   [#ex-article]
   ----
   include::sections:example$section.adoc[tag=base]
   ----

   .View result of <<ex-article>>
   [%collapsible.result]
   ====
   include::sections:example$section.adoc[tag=b-base]
   ====

   The `book` document type can have additional level 0 section titles, which are interpreted as xref:sections:parts.adoc[parts].
   The presence of at least one part implicitly makes the document a multi-part book.

   .Book section levels
   ----
   include::sections:example$section.adoc[tag=book]
   ----

   ////
   xref:sections:title-links.adoc#link[sectlinks]::
   When the document attribute `sectlinks` is set, section titles become self-links.
   This feature allows a reader to easily bookmark the section.

   xref:sections:title-links.adoc#anchor[sectanchors]::
   When the document attribute `sectanchors` is set, a floating section icon anchor appears in front of the section title on hover.
   This feature provides an alternate way for the reader to easily bookmark the section.
   Section title anchors depend on support from the stylesheet to render properly.
   ////

   .Discrete heading (not a section)
   [#ex-discrete]
   ----
   [discrete]
   === I'm an independent heading!

   This paragraph is it's sibling, not it's child.
   ----

   .View result of <<ex-discrete>>
   [%collapsible.result]
   ====
   [discrete]
   === I'm an independent heading!

   This paragraph is it's sibling, not it's child.
   ====

   == Automatic TOC

   .Activate Table of Contents for a document
   ----
   = Document Title
   Doc Writer <doc.writer@email.org>
   :toc:
   ----

   The Table of Content's xref:toc:title.adoc[title], xref:toc:levels.adoc[displayed section depth], and xref:toc:position.adoc[position] can be customized.

   == Includes

   .Include document parts
   ----
   include::directives:example$include.adoc[tag=base]
   ----

   .Include content by tagged regions or lines
   ----
   include::directives:example$include.adoc[tag=include-with-tag]

   include::directives:example$include.adoc[tag=line]
   ----

   .Include content from a URL
   ----
   include::directives:example$include.adoc[tag=uri]
   ----

   WARNING: Including content from a URL is potentially dangerous, so it's disabled if the safe mode is SECURE or greater.
   Assuming the safe mode is less than SECURE, you must also set the `allow-uri-read` attribute to permit the AsciiDoc processor to read content from a URL.

   == Lists

   .Unordered list
   [#ex-ul]
   ----
   include::lists:example$unordered.adoc[tag=qr-base]
   ----

   .View result of <<ex-ul>>
   [%collapsible.result]
   ====
   include::lists:example$unordered.adoc[tag=qr-base]
   ====

   TIP: An empty line is required before and after a list to separate it from other blocks.
   You can force two adjacent lists apart by adding an empty attribute list (i.e., `[]`) above the second list or by inserting an empty line followed by a line comment after the first list.
   If you use a line comment, the convention is to use `//-` to provide a hint to other authors that it's serving as a list divider.

   .Unordered list max level nesting
   [#ex-ul-max]
   ----
   include::lists:example$unordered.adoc[tag=max]
   ----

   .View result of <<ex-ul-max>>
   [%collapsible.result]
   ====
   include::lists:example$unordered.adoc[tag=max]
   ====

   The xref:lists:unordered.adoc#markers[unordered list marker] can be changed using a list style (e.g., `square`).

   .Ordered list
   [#ex-ol]
   ----
   include::lists:example$ordered.adoc[tag=nest]
   ----

   .View result of <<ex-ol>>
   [%collapsible.result]
   ====
   include::lists:example$ordered.adoc[tag=nest]
   ====

   .Ordered list max level nesting
   [#ex-ol-max]
   ----
   include::lists:example$ordered.adoc[tag=max]
   ----

   .View result of <<ex-ol-max>>
   [%collapsible.result]
   ====
   include::lists:example$ordered.adoc[tag=max]
   ====

   Ordered lists support xref:lists:ordered.adoc#styles[numeration styles] such as `lowergreek` and `decimal-leading-zero`.

   .Checklist
   [#ex-check]
   ----
   include::lists:example$checklist.adoc[tag=check]
   ----

   .View result of <<ex-check>>
   [%collapsible.result]
   ====
   include::lists:example$checklist.adoc[tag=check]
   ====

   .Description list
   [#ex-dlist]
   ----
   include::lists:example$description.adoc[tag=qr-base]
   ----

   .View result of <<ex-dlist>>
   [%collapsible.result]
   ====
   include::lists:example$description.adoc[tag=qr-base]
   ====

   .Question and answer list
   [#ex-qa]
   ----
   include::lists:example$description.adoc[tag=qa]
   ----

   .View result of <<ex-qa>>
   [%collapsible.result]
   ====
   include::lists:example$description.adoc[tag=qa]
   ====

   .Mixed
   [#ex-mixed]
   ----
   include::lists:example$description.adoc[tag=3-mix]
   ----

   .View result of <<ex-mixed>>
   [%collapsible.result]
   ====
   include::lists:example$description.adoc[tag=3-mix]
   ====

   TIP: Lists can be indented.
   Leading whitespace is not significant.

   .Complex content in outline lists
   [#ex-complex]
   ----
   include::lists:example$complex.adoc[tag=b-complex]
   ----

   .View result of <<ex-complex>>
   [%collapsible.result]
   ====
   include::lists:example$complex.adoc[tag=b-complex]
   ====

   == Images

   You can use the xref:macros:images-directory.adoc[imagesdir attribute] to avoid hard coding the common path to your images in every image macro.
   The value of this attribute can be an absolute path, relative path, or base URL.
   If the image target is a relative path, the attribute's value is prepended (i.e., it's resolved relative to the value of the `imagesdir` attribute).
   If the image target is a URL or absolute path, the attribute's value is _not_ prepended.

   .Block image macro
   [#ex-image-blocks]
   ----
   include::macros:example$image.adoc[tag=base]

   include::macros:example$image.adoc[tag=alt]

   include::macros:example$image.adoc[tag=qr-attr]

   include::macros:example$image.adoc[tag=ab-url]
   ----

   .View result of <<ex-image-blocks>>
   [%collapsible.result]
   ====
   include::macros:example$image.adoc[tag=qr-base]

   include::macros:example$image.adoc[tag=qr-alt]

   include::macros:example$image.adoc[tag=qr-attr]

   include::macros:example$image.adoc[tag=ab-url]
   ====

   Two colons following the image keyword in the macro (i.e., `image::`) indicates a block image (aka figure), whereas one colon following the image keyword (i.e., `image:`) indicates an inline image.
   (All macros follow this pattern).
   You use an inline image when you need to place the image in a line of text.
   Otherwise, you should prefer the block form.

   .Inline image macro
   [#ex-image-inline]
   ----
   include::macros:example$image.adoc[tag=inline]
   ----

   .View result of <<ex-image-inline>>
   [%collapsible.result]
   ====
   include::macros:example$image.adoc[tag=qr-inline]
   ====

   .Inline image macro with positioning role
   [#ex-image-role]
   ----
   include::macros:example$image.adoc[tag=in-role]
   ----

   .View result of <<ex-image-role>>
   [%collapsible.result]
   ====
   include::macros:example$image.adoc[tag=qr-role]
   ====

   .Embedded
   ----
   include::macros:example$image.adoc[tag=data]
   ----

   When the `data-uri` attribute is set, all images in the document--including admonition icons--are embedded into the document as {url-data-uri}[data URIs].
   You can also pass it as a command line argument using `-a data-uri`.

   == Audio

   .Block audio macro
   ----
   include::macros:example$audio.adoc[tag=basic]

   include::macros:example$audio.adoc[tag=attrs]
   ----

   You can control the audio settings using xref:macros:audio-and-video.adoc[additional attributes and options] on the macro.

   == Videos

   .Block video macro
   ----
   include::macros:example$video.adoc[tag=base]

   include::macros:example$video.adoc[tag=attr]
   ----

   .Embedded YouTube video
   ----
   include::macros:example$video.adoc[tag=youtube]
   ----

   .Embedded Vimeo video
   ----
   include::macros:example$video.adoc[tag=vimeo]
   ----

   You can control the video settings using xref:macros:audio-and-video.adoc[additional attributes and options] on the macro.

   == Keyboard, button, and menu macros

   IMPORTANT: You must set the `experimental` attribute in the document header to enable these macros.

   .Keyboard macro
   [#ex-kbd]
   ----
   include::macros:example$ui.adoc[tag=qr-key]
   ----

   .View result of <<ex-kbd>>
   [%collapsible.result]
   ====
   include::macros:example$ui.adoc[tag=qr-key]
   ====

   .Menu macro
   [#ex-menu]
   ----
   include::macros:example$ui.adoc[tag=menu]
   ----

   .View result of <<ex-menu>>
   [%collapsible.result]
   ====
   include::macros:example$ui.adoc[tag=menu]
   ====

   .Button macro
   [#ex-button]
   ----
   include::macros:example$ui.adoc[tag=button]
   ----

   .View result of <<ex-button>>
   [%collapsible.result]
   ====
   include::macros:example$ui.adoc[tag=button]
   ====

   == Literals and source code

   ////
   .Inline monospace only
   [#ex-inline-code]
   ----
   include::text:example$text.adoc[tag=b-mono-code]
   ----

   .View result of <<ex-inline-code>>
   [%collapsible.result]
   ====
   include::text:example$text.adoc[tag=b-mono-code]
   ====
   ////

   .Inline literal monospace
   [#ex-inline-literal]
   ----
   include::pass:example$pass.adoc[tag=backtick-plus]
   ----

   .View result of <<ex-inline-literal>>
   [%collapsible.result]
   ====
   include::pass:example$pass.adoc[tag=backtick-plus]
   ====

   .Literal paragraph
   [#ex-literal-line]
   ----
   include::verbatim:example$literal.adoc[tag=b-imp-code]
   ----

   .View result of <<ex-literal-line>>
   [%collapsible.result]
   ====
   include::verbatim:example$literal.adoc[tag=b-imp-code]
   ====

   .Literal block
   [#ex-literal-block]
   ----
   include::verbatim:example$literal.adoc[tag=b-block]
   ----

   .View result of <<ex-literal-block>>
   [%collapsible.result]
   ====
   include::verbatim:example$literal.adoc[tag=b-block]
   ====

   .Listing block with title
   [#ex-listing]
   ------
   include::verbatim:example$listing.adoc[tag=qr-listing]
   ------

   .View result of <<ex-listing>>
   [%collapsible.result]
   ====
   [caption="Listing 1. "]
   [listing]
   include::verbatim:example$listing.adoc[tag=qr-listing]
   ====

   .Source block with title and syntax highlighting
   [#ex-highlight]
   ------
   .Some Ruby code
   include::verbatim:example$source.adoc[tag=src-base]
   ------

   .View result of <<ex-highlight>>
   [%collapsible.result]
   ====
   [caption="Listing 1. "]
   .Some Ruby code
   include::verbatim:example$source.adoc[tag=src-base]
   ====

   [IMPORTANT]
   ====
   You must enable xref:verbatim:source-highlighter.adoc[source highlighting] by setting the `source-highlighter` attribute in the document header, CLI, or API.

   ----
   :source-highlighter: rouge
   ----

   See xref:asciidoctor:syntax-highlighting:index.adoc[] to learn which values are accepted when using Asciidoctor.
   ====

   .Source block with callouts
   [#ex-callouts,subs=-callouts]
   ------
   include::verbatim:example$callout.adoc[tag=b-src]
   ------

   .View result of <<ex-callouts>>
   [%collapsible.result]
   ====
   include::verbatim:example$callout.adoc[tag=b-src]
   ====

   .Make callouts non-selectable
   [#ex-hide-callouts,subs=-callouts]
   ------
   include::verbatim:example$callout.adoc[tag=b-nonselect]
   ------

   .View result of <<ex-hide-callouts>>
   [%collapsible.result]
   ====
   include::verbatim:example$callout.adoc[tag=b-nonselect]
   ====

   .Source block content included from a file
   ------
   include::verbatim:example$source.adoc[tag=src-inc]
   ------

   .Source block content included from file relative to source directory
   ------
   include::verbatim:example$source.adoc[tag=rel]
   ------

   .Strip leading indentation from partial file content
   ------
   include::verbatim:example$source.adoc[tag=ind]
   ------

   [NOTE]
   ====
   The xref:directives:include-with-indent.adoc[indent attribute] is frequently used when including source code by xref:directives:include-tagged-regions.adoc[tagged region] or xref:directives:include-lines.adoc[lines].
   It can be specified on the include directive itself or the enclosing literal, listing, or source block.

   When indent is 0, the leading block indent is stripped.

   When indent is greater than 0, the leading block indent is first stripped, then a block is indented by the number of columns equal to this value.
   ====

   .Source paragraph (no empty lines)
   [#ex-source-para]
   ----
   include::verbatim:example$source.adoc[tag=src-para]
   ----

   .View result of <<ex-source-para>>
   [%collapsible.result]
   ====
   include::verbatim:example$source.adoc[tag=src-para]
   ====

   == Admonitions

   .Admonition paragraph
   [#ex-admon-para]
   ----
   include::blocks:example$admonition.adoc[tag=b-para]
   ----

   .View result of <<ex-admon-para>>
   [%collapsible.result]
   ====
   include::blocks:example$admonition.adoc[tag=b-para]
   ====

   .Admonition block
   [#ex-admon-block]
   ----
   include::blocks:example$admonition.adoc[tag=b-bl]
   ----

   .View result of <<ex-admon-block>>
   [%collapsible.result]
   =====
   include::blocks:example$admonition.adoc[tag=b-bl]
   =====

   == More delimited blocks

   Any block can have a title.
   A block title is defined using a line of text above the block that starts with a dot.
   That dot cannot be followed by a space.
   For block images, the title is displayed below the block.
   For all other blocks, the title is typically displayed above it.

   .Sidebar block
   [#ex-sidebar]
   ----
   include::blocks:example$sidebar.adoc[tag=delimited]
   ----

   .View result of <<ex-sidebar>>
   [%collapsible.result]
   ====
   include::blocks:example$sidebar.adoc[tag=delimited]
   ====

   .Example block
   [#ex-example]
   ------
   include::blocks:example$example.adoc[tag=base]
   ------

   .View result of <<ex-example>>
   [example%collapsible.result]
   --
   include::blocks:example$example.adoc[tag=base]
   --

   .Blockquotes
   [#ex-quotes]
   ----
   include::blocks:example$quote.adoc[tag=bl]

   include::blocks:example$quote.adoc[tag=para]

   include::blocks:example$quote.adoc[tag=no-cite]

   include::blocks:example$quote.adoc[tag=link-text]

   include::blocks:example$quote.adoc[tag=abbr]
   ----

   .View result of <<ex-quotes>>
   [%collapsible.result]
   ====
   include::blocks:example$quote.adoc[tag=bl]

   include::blocks:example$quote.adoc[tag=para]

   include::blocks:example$quote.adoc[tag=no-cite]

   include::blocks:example$quote.adoc[tag=link-text]

   include::blocks:example$quote.adoc[tag=abbr]
   ====

   .Open blocks
   [#ex-open]
   ----
   include::blocks:example$open.adoc[tag=base]

   include::blocks:example$open.adoc[tag=src]
   ----

   .View result of <<ex-open>>
   [%collapsible.result]
   ====
   include::blocks:example$open.adoc[tag=base]

   include::blocks:example$open.adoc[tag=src]
   ====

   .Passthrough block
   [#ex-pass-block]
   ----
   include::pass:example$pass.adoc[tag=b-bl]
   ----

   .View result of <<ex-pass-block>>
   [%collapsible.result]
   ====
   include::pass:example$pass.adoc[tag=b-bl]
   ====

   .Customize block substitutions
   [#ex-block-subs,subs=+macros]
   ------
   include::verbatim:example$listing.adoc[tag=subs]
   ------

   .View result of <<ex-block-subs>>
   [%collapsible.result]
   ====
   include::verbatim:example$listing.adoc[tag=subs-out]
   ====

   == Tables

   .Table with a title, two columns, a header row, and two rows of content
   [#ex-header-row]
   ----
   include::tables:example$table.adoc[tag=b-base-h-co]
   ----
   <.> Unless the `cols` attribute is specified, the number of columns is equal to the number of cell separators on the first (non-empty) line.
   <.> When an empty line immediately follows a non-empty line at the start of the table, the cells in the first line get promoted to the table header.

   .View result of <<ex-header-row>>
   [%collapsible.result]
   ====
   [caption="Table 1. "]
   include::tables:example$table.adoc[tag=b-base-h]
   ====

   .Table with two columns, a header row, and two rows of content
   [#ex-cols]
   ----
   include::tables:example$table.adoc[tag=b-col-h-co]
   ----
   <.> The `+*+` in the `cols` attribute is the repeat operator.
   It means repeat the column specification across the remaining columns.
   In this case, we are repeating the default formatting across 2 columns.
   When the cells in the header are not defined on a single line, you must use the `cols` attribute to set the number of columns in the table and the `%header` option (or `options=header` attribute) to promote the first row to the table header.

   .View result of <<ex-cols>>
   [%collapsible.result]
   ====
   include::tables:example$table.adoc[tag=b-col-h]
   ====

   .Table with three columns, a header row, and two rows of content
   [#ex-cols-widths]
   ----
   include::tables:example$table.adoc[tag=b-col-indv-co]
   ----
   <.> In this example, the `cols` attribute has two functions.
   It specifies that this table has three columns, and it sets their relative widths.

   .View result of <<ex-cols-widths>>
   [%collapsible.result]
   ====
   [caption="Table 1. "]
   include::tables:example$table.adoc[tag=b-col-indv]
   ====

   .Table with column containing AsciiDoc content
   [#ex-table-adoc]
   ----
   include::tables:example$table.adoc[tag=b-col-a]
   ----

   .View result of <<ex-table-adoc>>
   [%collapsible.result]
   ====
   include::tables:example$table.adoc[tag=b-col-a]
   ====

   .Table from CSV data using shorthand
   [#ex-csv]
   ----
   include::tables:example$data.adoc[tag=s-csv]
   ----

   .View result of <<ex-csv>>
   [%collapsible.result]
   ====
   include::tables:example$data.adoc[tag=s-csv]
   ====

   .Table from CSV data
   [#ex-csv-formal]
   ----
   include::tables:example$data.adoc[tag=csv]
   ----

   .View result of <<ex-csv-formal>>
   [%collapsible.result]
   ====
   include::tables:example$data.adoc[tag=csv]
   ====

   .Table from CSV data included from file
   [#ex-csv-include]
   ----
   include::tables:example$data.adoc[tag=i-csv]
   ----

   .Table from DSV data using shorthand
   [#ex-dsv]
   ----
   include::tables:example$data.adoc[tag=s-dsv]
   ----

   .View result of <<ex-dsv>>
   [%collapsible.result]
   ====
   include::tables:example$data.adoc[tag=s-dsv]
   ====

   .Table with formatted, aligned and merged cells
   [#ex-cell-format]
   ----
   include::tables:example$cell.adoc[tag=b-spec]
   ----

   .View result of <<ex-cell-format>>
   [%collapsible.result]
   ====
   include::tables:example$cell.adoc[tag=b-spec]
   ====

   == IDs, roles, and options

   .Shorthand method for assigning block ID (anchor) and role
   ----
   [#goals.incremental]
   * Goal 1
   * Goal 2
   ----

   [TIP]
   ====
   * To specify multiple roles using the shorthand syntax, delimit them by dots.
   * The order of `id` and `role` values in the shorthand syntax does not matter.
   ====

   .Formal method for assigning block ID (anchor) and role
   ----
   [id="goals",role="incremental"]
   * Goal 1
   * Goal 2
   ----

   .Explicit section ID (anchor)
   ----
   [#null-values]
   == Primitive types and null values
   ----

   .Assign ID (anchor) and role to inline formatted text
   ----
   [#id-name.role-name]`monospace text`

   [#free-world.goals]*free the world*
   ----

   .Shorthand method for assigning block options
   ----
   [%header%footer%autowidth]
   |===
   |Header A |Header B
   |Footer A |Footer B
   |===
   ----

   .Formal method for assigning block options
   ----
   [options="header,footer,autowidth"]
   |===
   |Header A |Header B
   |Footer A |Footer B
   |===

   // options can be shorted to opts
   [opts="header,footer,autowidth"]
   |===
   |Header A |Header B
   |Footer A |Footer B
   |===
   ----

   == Comments

   .Line and block comments
   ----
   // A single-line comment

   ////
   A multi-line comment.

   Notice it's a delimited block.
   ////
   ----

   == Breaks

   .Thematic break (aka horizontal rule)
   [#ex-thematic]
   ----
   before

   '''

   after
   ----

   .View result of <<ex-thematic>>
   [%collapsible.result]
   ====
   before

   '''

   after
   ====

   .Page break
   ----
   <<<
   ----

   == Attributes and substitutions

   .Attribute declaration and usage
   [#ex-attributes]
   ----
   :url-home: https://asciidoctor.org
   :link-docs: https://asciidoctor.org/docs[documentation]
   :summary: AsciiDoc is a mature, plain-text document format for \
          writing notes, articles, documentation, books, and more. \
          It's also a text processor & toolchain for translating \
          documents into various output formats (i.e., backends), \
          including HTML, DocBook, PDF and ePub.
   :checkedbox: pass:normal[{startsb}&#10004;{endsb}]

   Check out {url-home}[Asciidoctor]!

   {summary}

   Be sure to read the {link-docs} too!

   {checkedbox} That's done!
   ----

   .View result of <<ex-attributes>>
   [%collapsible.result]
   ====
   // I have to use a nested doc hack here, otherwise the attributes won't resolve
   [.unstyled]
   |===
   a|
   :url-home: https://asciidoctor.org
   :link-docs: https://asciidoctor.org/docs[documentation]
   :summary: AsciiDoc is a mature, plain-text document format for \
          writing notes, articles, documentation, books, and more. \
          It's also a text processor & toolchain for translating \
          documents into various output formats (i.e., backends), \
          including HTML, DocBook, PDF and ePub.
   :checkedbox: pass:normal[{startsb}&#10004;{endsb}]

   Check out {url-home}[Asciidoctor]!

   {summary}

   Be sure to read the {link-docs} too!

   {checkedbox} That's done!
   |===
   ====

   To learn more about the available attributes and substitution groups see:

   * xref:attributes:document-attributes-ref.adoc[]
   * xref:attributes:character-replacement-ref.adoc[]
   * xref:subs:apply-subs-to-blocks.adoc#subs-groups[Substitution Groups]

   .Counter attributes
   [#ex-counter]
   ----
   include::attributes:example$counter.adoc[tag=base]
   ----

   .View result of <<ex-counter>>
   [%collapsible.result]
   ====
   [caption="Table 1. "]
   include::attributes:example$counter.adoc[tag=base]
   ====

   == Text replacements

   [frame=none,grid=rows]
   include::subs:partial$subs-symbol-repl.adoc[]

   Any named, numeric or hexadecimal {url-char-xml}[XML character reference^] is supported.

   == Escaping substitutions

   .Backslash
   [#ex-slash]
   ----
   include::subs:example$subs.adoc[tag=backslash]
   ----

   .View result of <<ex-slash>>
   [%collapsible.result]
   ====
   include::subs:example$subs.adoc[tag=backslash]
   ====

   .Single and double plus inline passthroughs
   [#ex-single-plus]
   ----
   include::pass:example$pass.adoc[tag=plus]
   ----

   .View result of <<ex-single-plus>>
   [%collapsible.result]
   ====
   include::pass:example$pass.adoc[tag=plus]
   ====

   .Triple plus inline passthrough and inline pass macro
   [#ex-inline-pass]
   ----
   include::pass:example$pass.adoc[tag=b-3p-macro]
   ----

   .View result of <<ex-inline-pass>>
   [%collapsible.result]
   ====
   include::pass:example$pass.adoc[tag=b-3p-macro]
   ====

   == Bibliography

   .Bibliography with inbound references
   [#ex-biblio]
   ----
   include::sections:example$bibliography.adoc[tag=base]
   ----

   .View result of <<ex-biblio>>
   [%collapsible.result]
   ====
   |===
   a|
   include::sections:example$bibliography.adoc[tag=base]
   |===
   ====

   [#section-footnotes]
   == Footnotes

   .Normal and reusable footnotes
   [#ex-footnotes]
   ----
   include::macros:example$footnote.adoc[tag=base]
   ----

   .View result of <<ex-footnotes>>
   [%collapsible.result]
   ====
   [.unstyled]
   |===
   a|
   include::macros:example$footnote.adoc[tag=base]
   |===
   ====

   [#markdown-compatibility]
   == Markdown compatibility

   Markdown compatible syntax is an optional feature of the AsciiDoc language and is currently only available when using Asciidoctor.

   .Markdown-style headings
   [#ex-md-headings]
   ----
   include::sections:example$section.adoc[tag=md]
   ----

   .View result of <<ex-md-headings>>
   [%collapsible.result]
   ====
   include::sections:example$section.adoc[tag=b-md]
   ====

   .Fenced code block with syntax highlighting
   [#ex-fenced]
   ----
   include::verbatim:example$source.adoc[tag=fence]
   ----

   .View result of <<ex-fenced>>
   [%collapsible.result]
   ====
   include::verbatim:example$source.adoc[tag=fence]
   ====

   .Markdown-style blockquote
   [#ex-md-quote]
   ----
   include::blocks:example$quote.adoc[tag=md]
   ----

   .View result of <<ex-md-quote>>
   [%collapsible.result]
   ====
   include::blocks:example$quote.adoc[tag=md]
   ====

   .Markdown-style blockquote with block content
   [#ex-md-blockquote]
   ----
   include::blocks:example$quote.adoc[tag=md-alt]
   ----

   .View result of <<ex-md-blockquote>>
   [%collapsible.result]
   ====
   include::blocks:example$quote.adoc[tag=md-alt]
   ====

   .Markdown-style thematic breaks
   [#ex-md-breaks]
   ----
   ---

   - - -

   ***

   * * *
   ----

   .View result of <<ex-md-breaks>>
   [%collapsible.result]
   ====
   ---

   - - -

   ***

   * * *
   ====


   ////
   Possible change for future to `%collapsible` blocks

   .Normal
   ----
   Paragraphs don't require any special markup in AsciiDoc.
   A paragraph is just one or more lines of consecutive text.

   To begin a new paragraph, separate it by at least one empty line.
   Line breaks within a paragraph are not displayed.
   ----

   .View Result (Normal)
   [%collapsible.result]
   ====
   Paragraphs don't require any special markup in AsciiDoc.
   A paragraph is just one or more lines of consecutive text.

   To begin a new paragraph, separate it by at least one empty line.
   Line breaks within a paragraph are not displayed.
   ====

   '''

   .Normal
   [tabs]
   ====
   Source::
   +
   ----
   Paragraphs don't require any special markup in AsciiDoc.
   A paragraph is just one or more lines of consecutive text.

   To begin a new paragraph, separate it by at least one empty line.
   Line breaks within a paragraph are not displayed.
   ----

   Output::
   +
   --
   Paragraphs don't require any special markup in AsciiDoc.
   A paragraph is just one or more lines of consecutive text.

   To begin a new paragraph, separate it by at least one empty line.
   Line breaks within a paragraph are not displayed.
   --
   ====
   ////


/docs/modules/ROOT/nav-comment.adoc
===================================

.. code-block: asciidoc

   * xref:ROOT:comments.adoc[]


/docs/modules/blocks/nav-basics.adoc
====================================

.. code-block: asciidoc

   * xref:index.adoc[]
   ** xref:delimited.adoc[]
   ** xref:build-basic-block.adoc[]
   ** xref:add-title.adoc[]
   ** xref:assign-id.adoc[]
   ** xref:masquerading.adoc[]
   ** xref:troubleshoot-blocks.adoc[]


/docs/modules/blocks/pages/index.adoc
=====================================

.. code-block: asciidoc

   = Blocks

   Block elements form the main structure of an AsciiDoc document, starting with the document itself.

   == What is a block?

   A block element (aka block) is a discrete, line-oriented chunk of content in an AsciiDoc document.
   Once parsed, that chunk of content becomes a block element in the parsed document model.
   Certain blocks may contain other blocks, so we say that blocks can be nested.
   The converter visits each block in turn, in document order, converting it to a corresponding chunk of output.

   == Block forms

   How the boundaries of a block are defined in the AsciiDoc syntax varies.
   The boundaries of some blocks, like lists, paragraphs, and block macro, are implicit.
   Other blocks have boundaries that are explicitly marked using delimiters (i.e., delimited blocks).
   The main commonality is that a block is always line-oriented.

   A _paragraph block_ is defined as a discrete set of contiguous (non-empty) lines.
   A _delimited block_ is bounded by delimiter lines.
   A _section block_ (aka section) is defined by a section title that's prefixed by one or more equal signs.
   The section includes all content that follows the section title line until the next sibling or parent section title or the document boundary.
   A _list block_ is defined by a group of sibling list items, each denoted by a marker.
   A _description list_ block is defined by a sibling group of list items, each denoted by one or more terms.
   A _block macro_ is defined by a single line that matches the block macro syntax.
   And the _document_ is also a block.

   A block (including its metadata lines) should always be bounded by an empty line or document boundary on either side.

   Whether or not a block supports nested blocks depends on content model of the block (and what the syntax allows).

   == Content model

   The content model of a block determines what kind of content the block can have (if any) and how that content is processed.
   The content models of blocks in AsciiDoc are as follows:

   compound:: a block that may only contain other blocks (e.g., a section)
   simple:: a block that's treated as contiguous lines of paragraph text (and subject to normal substitutions) (e.g., a paragraph block)
   verbatim:: a block that holds verbatim text (displayed "`as is`") (and subject to verbatim substitutions) (e.g., a listing block)
   raw:: a block that holds unprocessed content passed directly through to the output with no substitutions applied (e.g., a passthrough block)
   empty:: a block that has no content (e.g., an image block)
   table:: a special content model reserved for tables that enforces a fixed structure

   The content model is inferred for all built-in syntax (as determined by the context), but can be configured for custom blocks.
   Blocks may also support different content models under different circumstances.
   The circumstance is determined by the context and style, and in the case of a delimited block, the structural container as well.

   == Context

   You may often hear a block referred to by a name, such as an example block, a sidebar block, an admonition block, or a section.
   That name is the block's context.

   Let's consider the following normal section:

   ----
   == Section Title

   Content of section.
   ----

   The context of this block is `section`.
   We often refer to this as a section (or section block), using the context as an adjective to describe the block.
   The writer does not have to specify the context in this case since it's implied by the syntax.

   Every block has a context.
   The context is often implied by the syntax, but can be declared explicitly in certain cases.
   The context is what distinguishes one kind of block from another.
   You can think of the context as the block's type.

   The context can be further modified using a block style to create a family of blocks that share a common type, as is the case with admonition blocks and sections.
   We'll cover that modifier shortly.

   For blocks, the context is sometimes referred to as the block name.
   This comes up in particular when talking about custom blocks.
   The block name is just another layer of abstraction.
   All the built-in block names map to exactly one context.
   But a block extension can map an arbitrary block name to one or more contexts.
   Which context is ultimately used depends on what is returned from the extension's process method.
   In the end, it's the context that determines how the block is converted.

   The context often determines the content model.
   For example, all sections implicitly have the compound content model because a section may only contain other blocks.
   All literal blocks implicitly have the verbatim content model because the purpose of this block is to present verbatim output.

   === Summary of built-in contexts

   Here's a list of the contexts of all the built-in blocks in AsciiDoc.

   NOTE: In the Asciidoctor API, the contexts are represented as symbols.
   In Ruby, a symbol is a name prefixed with a colon (e.g., `:listing`).
   This documentation will sometimes use this notation when referring to the name of a context.
   However, this notation is not universal.
   Some processors, such as Asciidoctor.js, store the context as a string instead.

   .Built-in contexts
   [#table-of-contexts,cols="1s,2"]
   |===
   |Name | Purpose

   |admonition
   |One of five admonition blocks.

   |audio
   |An audio block.

   |colist
   |A callout list.

   |dlist
   |A description list.

   |document
   |The top-level document or the document in an AsciiDoc table cell

   |example
   |An example block.

   |floating_title
   |A discrete heading.

   |image
   |An image block.

   |list_item
   |An item in an ordered, unordered, or description list (only relevant inside a list or description list block).
   In a description list, this block is used to represent the term and the description.

   |listing
   |A listing block.

   |literal
   |A literal block.

   |olist
   |An ordered list.

   |open
   |An open block.

   |page_break
   |A page break.

   |paragraph
   |A paragraph.

   |pass
   |A passthrough block.

   |preamble
   |The preamble of the document.

   |quote
   |A quote block (aka blockquote).

   |section
   |A section.
   May also be a part, chapter, or special section.

   |sidebar
   |A sidebar block.

   |table
   |A table block.

   |table_cell
   |A table cell (only relevant inside a table block).

   |thematic_break
   |A thematic break (aka horizontal rule).

   |toc
   |A TOC block (to designate custom TOC placement).

   |ulist
   |An unordered list.

   |verse
   |A verse block.

   |video
   |A video block.
   |===

   NOTE: Each inline element also has a context, but those elements are not (yet) accessible from the parsed document model.

   Additional contexts may be introduced through the use of the block, block macro, or inline macro extension points.

   === Contexts used by the converter

   The context is what the converter uses to dispatch to a convert method.
   The style is then used by the converter to apply special behavior to blocks of the same family.

   With two exceptions, there's a 1-to-1 mapping between the contexts and the handler methods of a converter.
   Those exceptions are the `list_item` and `table_cell` contexts, which are not mapped to a handler method.
   In the converter, these blocks must be accessed from their parent block.

   [#block-style]
   == Block style

   The context does not always tell the whole story of a block's identity.
   Some blocks require specialization.
   That's where the block style comes into play.

   Above some blocks, you may notice a name at the start of the block attribute list (e.g., `[source]` or `[verse]`).
   The first positional (unnamed) attribute in the block attribute list is used to declare the block style.

   The declared block style is the value the author supplies.
   That value is then interpreted and resolved.
   The resolved block style, if non-empty, specializes the block's context.
   (It may instead, or in addition to, alter the block's context).

   Consider the following example of a source block:

   [source]
   ....
   [source,ruby]
   ----
   puts "Hello, World!"
   ----
   ....

   The context of a source block is `listing` (as inferred from the block delimiters) and the style is `source` (as specified by the writer).
   We say that the style specializes the block as a source block.
   (Technically, the presence of a source language already implies the `source` style, but under the covers this is what's happening).
   The context of the block is still the same, but it has additional metadata to indicate that it requires special processing.

   We also see the block style used for other purposes.
   The `appendix` block style (e.g., `[appendix]`) above the section title specializes the section as an appendix (a special section) and thus has special semantics and behavior.
   In the model, the section's style is dually stored as the `sectname`.
   One of the five admonition styles (e.g., `[TIP]`) above an example block transforms the example block into an admonition block with that name (i.e., label).
   In the model, the admonition style in lowercase is stored in the `name` attribute.
   A block style (e.g., `[circle]` or `[loweralpha]`) above an unordered or ordered list, respectively, alters the marker used in front of list items when displayed.
   A block style (e.g., `[qanda]` and `[horizontal]`) above a description list can either change its semantics or layout.

   The declared block style can be used to change the context of a block, referred to as xref:masquerading.adoc[block masquerading].
   Consider the case of this alternate syntax for a listing block using the literal block delimiters.

   [source]
   ----
   [listing]
   ....
   a > b
   ....
   ----

   Since the declared block style matches the name of a context, the context of the block becomes `listing` and the resolved block style remains unset.
   That means the resolved block style differs from the declared block style.
   To learn more about how to change the context of a block using the declared block style, see xref:masquerading.adoc[].

   To get a complete picture of a block's identity, you must consider both the context and the style.
   The resolved style specializes the context to give it special behavior or semantics.

   == Block commonalities

   Blocks are defined using some form of line-oriented syntax.
   Section blocks begin with a section title line.
   Delimited blocks are enclosed in a matching pair of delimiter lines.
   Paragraph blocks must be contiguous lines.

   All blocks accommodate zero or more lines of metadata stacked linewise directly on top of the block.
   These lines populate the properties of the block, such as the ID, title, and options.
   These metadata lines are as follows:

   * Zero or more block attribute lines (which populate the block's attributes)
   * An optional block anchor line
   * An optional block title line (many blocks also support a corresponding caption)
   * An optional ID
   * An optional set of roles
   * An optional set of options

   For example, consider a sidebar block with a title and ID:

   ----
   .Styles of music
   [#music-styles]
   ****
   Go off on a tangent to describe what a style of music is.
   ****
   ----

   When it comes to processing content, blocks split off into different groups.
   These groups are primarily associated with the block's content model.

   Paragraph blocks and verbatim blocks have an implicit and modifiable set of xref:subs:index.adoc[substitutions].
   Substitutions do not apply to compound blocks (i.e., blocks that may contain nested blocks).


/docs/modules/blocks/pages/delimited.adoc
=========================================

.. code-block: asciidoc

   = Delimited Blocks

   In AsciiDoc, a delimited block is a region of content that's bounded on either side by a pair of congruent linewise delimiters.
   A delimited block is used either to enclose other blocks (e.g.., multiple paragraphs) or set the content model of the content (e.g., verbatim).
   Delimited blocks are a subset of all block types in AsciiDoc.

   == Overview

   Delimited blocks are defined using structural containers, which are the fixed set of recognized block enclosures in the AsciiDoc syntax.
   Here's the structural container for a literal block:

   ----
   ....
   This text will be treated as verbatim content.
   ....
   ----

   A structural container has an opening delimiter and a closing delimiter.
   The opening delimiter follows the block metadata, if present.
   Leading and trailing empty lines in a structure container are not considered significant and are automatically removed.
   The remaining lines define a block's content.

   These enclosures not only define the boundaries of a block's content, but also imply a content model (e.g., verbatim content or a subtree).
   In certain cases, they provide a mechanism for nesting blocks.
   However, delimited blocks cannot be interleaved.

   A delimited block has the unique ability of being able to be repurposed by the AsciiDoc syntax, through both built-in mappings and mappings for custom blocks defined by an extension.
   To understand how delimited blocks work, it's important to understand structural containers, their linewise delimiters, their default contexts, and their expected content models, as well as block nesting and masquerading.

   == Linewise delimiters

   A delimited block is characterized by a pair of congruent linewise delimiters.
   The opening and closing delimiter must match exactly, both in length and in sequence of characters.
   These delimiters, sometimes referred to as fences, enclose the content and explicitly mark its boundaries.
   Within the boundaries of a delimited block, you can enter any content or empty lines.
   The block doesn't end until the ending delimiter is found.
   The block metadata (block attribute and anchor lines) goes above the opening delimiter (thus outside the delimited region).

   Here's an example of a delimited example block:

   ----
   ====
   This is an example of an example block.
   That's so meta.
   ====
   ----

   Typically, the delimiter is written using the minimum allowable length (4 characters, with the exception of the open block, which currently has a fixed length of 2 characters).
   The length of the delimiter lines can be varied to accommodate nested blocks.

   The valid set of delimiters for defining a delimited block, and the meaning they have, is defined by the available structural containers, covered next.

   == Structural containers

   Structural containers are the fixed set of recognized block enclosures (delimited regions) defined by the AsciiDoc language.
   These enclosures provide a reusable building block in the AsciiDoc syntax.
   By evaluating the structural container and the block metadata, the processor will determine which kind of block to make.

   Each structural container has an expected content model.
   For built-in blocks, it's the context of the block that determines the content model, though most built-in blocks adhere to the expected content model.
   Custom blocks have the ability to designate the content model.
   Even in these cases, though, the content model should be chosen to honor the semantics of the structural container.
   //This allows a text editor to understand how to parse the block and provide a reasonable fallback when the extension is not loaded.

   Some structural containers are reused for different purposes, such as the structural container for the quote block being used for a verse block.

   === Summary of structural containers

   The table below lists the structural containers, documenting the name, default context, and delimiter line for each.

   .Structural containers in AsciiDoc
   [#table-of-structural-containers,cols="1,2m,2,2l"]
   |===
   |Type |Default context |Content model (expected) |Minimum delimiter

   |comment
   |_n/a_
   |_n/a_
   |////

   |example
   |:example
   |compound
   |====

   |listing
   |:listing
   |verbatim
   |----

   |literal
   |:literal
   |verbatim
   |....

   |open
   |:open
   |compound
   |--

   |sidebar
   |:sidebar
   |compound
   |****

   |table
   |:table
   |table
   |\|===
   ,===
   :===
   !===

   |pass
   |:pass
   |raw
   |++++

   |quote
   |:quote
   |compound
   |____
   |===

   You may notice the absence of the source block.
   That's because source is not a container type.
   Rather, it's a specialization of the listing (or literal) container as designated by the block style.
   The verse and admonition blocks are also noticeably absent.
   That's because they repurpose the structural containers for quote and example blocks, respectively.

   The default context is assumed when an explicit block style is not present.

   Currently, table is a specialized structural container that cannot be enlisted as a custom block.

   Unlike other structural containers, a comment block is not preserved in the parsed document and therefore doesn't have a context or content model.

   TIP: When creating a custom block, it's important to choose a structural container that provides the right content model.
   This allows a text editor to understand how to parse the block and provide a reasonable fallback when the extension is not loaded.

   Structural containers are used to define delimited blocks.
   The structural container provides a default context and expected content model, but the actual context and content model is determined after considering the metadata on the block (specifically the declared block content).

   [#nesting]
   == Nesting blocks

   Using delimited blocks, you can nest blocks inside of one other.
   (Blocks can also be nested inside sections, list items, and table cells, which is a separate topic).

   First, the parent block must have the compound content model.
   The compound content model means that the block's content is a sequence of zero or more blocks.

   When nesting a block that uses a different structural container from the parent, it's enough to ensure that the child block is entirely inside the parent block.
   Delimited blocks cannot be interleaved.

   [source]
   ....
   ====
   Here's a sample AsciiDoc document:

   ----
   = Document Title
   Author Name

   Content goes here.
   ----

   The document header is useful, but not required.
   ====
   ....

   When nesting a delimited block that uses the same structural container, it's necessary to vary the length of the delimiter lines (i.e., make the length of the delimiter lines for the child block different than the length of the delimiter lines for the parent block).
   Varying the delimiter line length allows the parser to distinguish one block from another.

   ----
   ====
   Here are your options:

   .Red Pill
   [%collapsible]
   ======
   Escape into the real world.
   ======

   .Blue Pill
   [%collapsible]
   ======
   Live within the simulated reality without want or fear.
   ======
   ====
   ----

   The delimiter length for the nested structural container can either be shorter or longer than the parent.
   That's a personal style choice.


/docs/modules/blocks/pages/build-basic-block.adoc
=================================================

.. code-block: asciidoc

   = Build a Basic Block
   :y: Yes
   :n: No

   == Build a delimited block

   In this section, we'll create a delimited sidebar block.
   The delimiter for the sidebar style is four asterisks (`+****+`).

   . Enter the opening delimiter at the beginning of a new line and then press kbd:[Enter].
   +
   ----
   Text in your document.

   ****

   ----

   . On the new line, enter your content, such as paragraphs, delimited blocks, directives, and macros.
   The delimited block's style will be applied to all of this content until the closing delimiter.
   +
   ----
   Text in your document.

   ****
   This is content in a sidebar block.

   image::name.png[]

   This is more content in the sidebar block.
   ----

   . To end the delimited block, press kbd:[Enter] at the end of your last line of content.
   On the new line, type the closing delimiter.
   +
   ----
   Text in your document.

   ****
   This is content in a sidebar block.

   image::name.png[]

   This is more content in the sidebar block.
   ****
   ----

   That's it.
   You've built a delimited block.

   == Build a block from a paragraph

   In some cases, you can style a block using the style's name.
   If the content is contiguous (not interrupted by empty lines or comment lines), you can assign the block style's name in an attribute list placed above the content.
   This format is often used for single-line listings:

   [source]
   ....
   include::example$block.adoc[tag=opt-listing]
   ....

   or single-line quotes:

   ----
   include::example$block.adoc[tag=quote-name]
   ----

   However, note that the lines of a styled paragraph are first parsed like a paragraph, then promoted to the specified block type.
   That means that line comments will be dropped, which can impact verbatim blocks such as a listing block.
   Thus, the delimited block form is preferred, especially when creating a verbatim block.

   == Summary of built-in blocks
   // This section is just hanging here for the moment, it's not its final destination, I just didn't want to comment it out.

   The following table identifies the built-in block styles, their delimiter syntax, purposes, and the substitutions performed on their contents.

   include::partial$block-name-table.adoc[]

   ////
   This table shows the substitutions performed by each substitution group referenced in the previous table.

   include::partial$subs-group-table.adoc[]

   OMG. What does this random tip apply to????
   TIP: Surround an attribute value with single quotes in order to apply normal substitutions.
   ////


/docs/modules/blocks/pages/add-title.adoc
=========================================

.. code-block: asciidoc

   = Add a Title to a Block

   You can assign a title to a block, whether it's styled using its style name or delimiters.

   == Block title syntax

   A block title is defined on its own line directly above the block's attribute list, opening delimiter, or block content--which ever comes first.
   As shown in <<ex-basic>>, the line must begin with a dot (`.`) and immediately be followed by the text of the title.
   The block title must only occupy a single line and thus cannot be wrapped.

   .Block title syntax
   [#ex-basic]
   ----
   .This is the title of a sidebar block
   ****
   This is the content of the sidebar block.
   ****
   ----

   The next sections will show how to add titles to delimited blocks and blocks with attribute lists.

   == Add a title to a delimited block

   Any delimited block can have a title.
   If the block doesn't have an attribute list, enter the title on a new line directly above the opening delimiter.
   The delimited literal block in <<ex-title>> is titled _Terminal Output_.

   .Add a title to a delimited block
   [#ex-title]
   ----
   .Terminal Output <.>
   .... <.>
   From github.com:asciidoctor/asciidoctor
    * branch        main   -> FETCH_HEAD
   Already up to date.
   ....
   ----
   <.> The block title is entered on a new line.
   The title must begin with a dot (`.`).
   Don't put a space between the dot and the first character of the title.
   <.> If you aren't applying attributes to a block, enter the opening delimiter on a new line directly after the title.

   The result of <<ex-title>> is displayed below.

   .Terminal Output
   ....
   From github.com:asciidoctor/asciidoctor
    * branch        main   -> FETCH_HEAD
   Already up to date.
   ....

   In the next section, you'll see how a title is placed on a block that has an attribute list.

   == Add a title to a block with attributes

   When you're applying attributes to a block, the title is placed on the line above the attribute list (or lists).
   <<ex-title-list>> shows a delimited source code block that's titled _Specify GitLab CI stages_.

   .Add a title to a delimited source code block
   [source#ex-title-list]
   ....
   .Specify GitLab CI stages <.>
   [source,yaml] <.>
   ----
   image: node:16-buster
   stages: [ init, verify, deploy ]
   ----
   ....
   <.> The block title is entered on a new line.
   <.> The block's attribute list is entered on a new line directly after the title.

   The result of <<ex-title-list>> is displayed below.

   [caption=]
   .Specify GitLab CI stages
   [source,yaml]
   ----
   image: node:16-buster
   stages: [ init, verify, deploy ]
   ----

   As shown in <<ex-title-style>>, a block's title is placed above the attribute list when a block isn't delimited.

   .Add a title to a non-delimited block
   [#ex-title-style]
   ----
   .Mint
   [sidebar]
   Mint has visions of global conquest.
   If you don't plant it in a container, it will take over your garden.
   ----

   The result of <<ex-title-style>> is displayed below.

   .Mint
   [sidebar]
   Mint has visions of global conquest.
   If you don't plant it in a container, it will take over your garden.

   You may notice that unlike the titles in the previous rendered listing and source block examples, the sidebar's title is centered and displayed inside the sidebar's background.
   How the title of a block is displayed depends on the converter and stylesheet you're applying to your AsciiDoc documents.

   == Captioned titles

   Several block contexts support captioned titles.
   A [.term]*captioned title* is a title that's prefixed with a caption label and a number followed by a dot (e.g., `Table 1. Properties`).

   The captioned title is only used if the corresponding caption attribute is set.
   Otherwise, the original title is displayed.

   The following table lists the blocks that support captioned titles and the attributes that the converter uses to generate and control them.

   .Blocks that support captioned titles
   [cols=1;m;m]
   |===
   |Block context | Caption attribute | Counter attribute

   |appendix
   |appendix-caption
   |appendix-number

   |example
   |example-caption
   |example-number

   |image
   |figure-caption
   |figure-number

   |listing, source
   |listing-caption
   |listing-number

   |table
   |table-caption
   |table-number
   |===

   All caption attributes are set by default except for the attribute for listing and source blocks (`listing-caption`).
   The number is sequential, computed automatically, and stored in a corresponding counter attribute.

   Let's assume you've added a title to an example block as follows:

   [,asciidoc]
   ----
   .Block that supports captioned title
   ====
   Block content
   ====
   ----

   The block title will be displayed with a caption label and number, as shown here:

   :example-caption: Example
   ifdef::example-number[:prev-example-number: {example-number}]
   :example-number: 0

   .Block that supports captioned title
   ====
   Block content
   ====

   :!example-caption:
   ifdef::prev-example-number[:example-number: {prev-example-number}]
   :!prev-example-number:

   If you unset the `example-caption` attribute, the caption will not be prepended to the title.

   .Block that supports captioned title
   ====
   Block content
   ====

   The counter attribute (e.g., `example-number`) can be used to influence the start number for the first block with that context or the next number selected in the sequence for subsequent occurrences.
   However, this practice should be used judiciously.

   The caption can be overridden using the `caption` attribute on the block.
   The value of the caption attribute replaces the entire caption, including the space that precedes the title.

   Here's how to define a custom caption on a block:

   [,asciidoc]
   ----
   .Block Title
   [caption="Example {counter:my-example-number:A}: "]
   ====
   Block content
   ====
   ----

   Here's how the block will be displayed with the custom caption:

   .Block Title
   [caption="Example {counter:my-example-number:A}: "]
   ====
   Block content
   ====

   Notice we've used a counter attribute in the value of the caption attribute to create a custom number sequence.

   If you refer to a block with a custom caption using an xref, you may not get the result that you expect.
   Therefore, it's always best to define custom xref:attributes:id.adoc#customize-automatic-xreftext[xreftext] when you define a custom caption.


/docs/modules/blocks/pages/assign-id.adoc
=========================================

.. code-block: asciidoc

   = Assign an ID

   You can assign an ID to any block using an attribute list.
   Once you've assigned an ID to a block, you can use that ID to link to it using a cross reference.

   == Block ID syntax

   An ID is assigned to a block by prefixing the ID value with a hash (`#`) and placing it in the block's attribute list.

   ----
   [#the-id-of-this-block]
   ====
   Content of delimited example block
   ====
   ----

   Let's go through some examples of assigning an ID to a block with several attributes, a title, and delimiters.

   == Assign an ID to a block with attributes

   In this section, we'll assign an ID to this blockquote:

   [quote#roads,Dr. Emmett Brown,Back to the Future]
   Roads? Where we're going, we don't need roads.

   When the style attribute is explicitly assigned to a block, the style name is always placed in the first position of the attribute list.
   Then, the ID is attached directly to the end of the style name.

   The blockquote with an assigned style and ID in <<ex-style-id>> shows this order of attributes.


   .Assign a style and ID to a block
   [#ex-style-id]
   ----
   [quote#roads]
   Roads? Where we're going, we don't need roads.
   ----

   Since <<ex-style-id>> is a blockquote it should have some attribution and citation information.
   In <<ex-cite>>, let's attribute this quote to its speaker and original context using the positional attribution attributes that are built into the `quote` style.

   .Assign a style, ID, and positional attributes to a block
   [#ex-cite]
   ----
   [quote#roads,Dr. Emmett Brown,Back to the Future]
   Roads? Where we're going, we don't need roads.
   ----

   Except when the `role` and `options` attributes are assigned values using their shorthand syntax (`.` and `%`, respectively), all other block attributes are typically separated by commas (`,`).

   ////

   In addition to a title, a block can be assigned additional metadata including:

   * ID (xref:attributes:id.adoc#anchor[anchor])
   * Block style (first positional attribute)
   * Block attributes

   Here's an example of a quote block with metadata:

   ----
   include::example$block.adoc[tag=meta-co]
   ----
   <1> Title: Gettysburg Address
   <2> ID: gettysburg
   <3> Block name: quote
   <4> attribution: Abraham Lincoln (Named block attribute)
   <5> citetitle: Address delivered at the dedication of the Cemetery at Gettysburg (Named block attribute)

   TIP: A block can have multiple block attribute lines.
   The attributes will be aggregated.
   If there is a name conflict, the last attribute defined wins.

   Some metadata is used as supplementary content, such as the title, whereas other metadata controls how the block is converted, such as the block name.
   ////


/docs/modules/blocks/pages/masquerading.adoc
============================================

.. code-block: asciidoc

   = Block Masquerading
   :page-aliases: masquerade.adoc

   The declared block style (i.e., the first positional attribute of the block attribute list) can be used to modify the context of any paragraph and most structural containers.
   This practice is know as block masquerading (meaning to disguise one block as another).

   When the context of a paragraph is changed using the declared block style, the block retains the simple content model.
   When masquerading the context of a structural container, only contexts that preserve the expected content model are permitted.

   == How it works

   If the block style declared on a block matches the name of a context, it sets the context of the block to that value and the resolved block style will be left unset.
   If the declared block style does not match the name of a context, it will either specialize the context or set the context implicitly and also specialize that context.
   How the declared block style is handled for a custom block is up to the extension, though a similar process takes place.

   Let's consider the case of using the declared block style to change the context of a structural container.
   In this case, we're using the declared block style to change a literal block to a listing block.

   ----
   [listing]
   ....
   a > b
   ....
   ----

   Even though the default context for the structural container is `:literal`, the declared block style changes it to `:listing`.
   The resolved block style of the block remains unset.

   The declared block style can also be used to transform a paragraph into a different kind of block.
   The block will still retain the simple content model.
   Let's consider the case of turning a normal paragraph into a sidebar.

   ----
   [sidebar]
   This sidebar is short, so a styled paragraph will do.
   ----

   Finally, let's consider an admonition block.
   Declaring the NOTE block style on an example structural container transforms it to an admonition block and also sets the style of the block to NOTE.

   ----
   [NOTE]
   ====
   Remember the milk.
   ====
   ----

   This technique also works for converting a paragraph into an admonition block.

   ----
   [NOTE]
   Remember the milk.
   ----

   Where permitted, the declared block style can be used to specialize the context of the block, change the context of the block, or both.

   == Built-in permutations

   The table below lists the xref:delimited.adoc#table-of-structural-containers[structural containers] whose context can be altered, and which contexts are valid, using the declared block style.

   [cols="1,1,3"]
   |===
   |Type |Default context |Masquerading contexts

   |example
   |:example
   |admonition (designated by the NOTE, TIP, WARNING, CAUTION, or IMPORTANT style)

   |listing
   |:listing
   |literal

   |literal
   |:literal
   |listing (can be designated using the source style)

   |open
   |:open
   |abstract, admonition (designated by the NOTE, TIP, WARNING, CAUTION, or IMPORTANT style), comment, example, literal, listing (can be designated using the source style), partintro, pass, quote, sidebar, verse

   |pass
   |:pass
   |stem, latexmath, asciimath

   |sidebar
   |:sidebar
   |_n/a_

   |quote
   |:quote
   |verse
   |===

   All the contexts that can be applied to an open block can also be applied to a paragraph.
   A paragraph also access the `normal` style, which can be applied to revert a literal paragraph to a normal paragraph.


/docs/modules/blocks/pages/troubleshoot-blocks.adoc
===================================================

.. code-block: asciidoc

   = Troubleshooting Blocks

   == Opening and closing delimiters

   The opening and closing delimiters of a delimited block must be the same length.
   For example, a sidebar is specified by an opening delimiter of four asterisks (`+****+`).
   Its closing delimiter must also be four asterisks (`+****+`).

   Here's a sidebar using valid delimiter lengths:

   ----
   ****
   This is a valid delimited block.
   It will be styled as a sidebar.
   ****
   ----

   However, the delimiter lengths in the following delimited block are not equal in length and therefore invalid:

   ----
   ********
   This is an invalid sidebar block because the delimiter lines are different lengths.
   ****
   ----

   When an AsciiDoc processor encounters the previous example, it will put the remainder of the content in the document inside the delimited block.
   As far as the processor is concerned, the closing delimiter is just a line of content.
   However, the processor will issue a warning if a matching closing delimiter is never found.

   If you want the processor to recognize a closing delimiter, it must be the same length as the opening delimiter.


/docs/modules/blocks/nav-paragraph.adoc
=======================================

.. code-block: asciidoc

   * xref:paragraphs.adoc[]
   ** xref:hard-line-breaks.adoc[]
   ** xref:preamble-and-lead.adoc[]
   ** xref:paragraph-alignment.adoc[]


/docs/modules/blocks/pages/paragraphs.adoc
==========================================

.. code-block: asciidoc

   = Paragraphs

   The primary block type in most documents is the paragraph.
   That's why in AsciiDoc, you don't need to use any special markup or attributes to create paragraphs.
   You can just start typing sentences and that content becomes a paragraph.

   This page introduces you to the paragraph in AsciiDoc and explains how to set it apart from other paragraphs.

   == Create a paragraph

   Adjacent or consecutive lines of text form a paragraph element.
   To start a new paragraph after another element, such as a section title or table, hit the kbd:[RETURN] key twice to insert an empty line, and then continue typing your content.

   .Two paragraphs in an AsciiDoc document
   [#ex-paragraph]
   ----
   include::example$paragraph.adoc[tag=para]
   ----

   The result of <<ex-paragraph>> is displayed below.

   ====
   include::example$paragraph.adoc[tag=para]
   ====


/docs/modules/blocks/pages/hard-line-breaks.adoc
================================================

.. code-block: asciidoc

   = Hard Line Breaks

   Adjacent lines of regular text in AsciiDoc are combined into a single paragraph when converted.
   That means you can wrap paragraph text in the source document, either at a specific column or by putting each sentence or phrase on its own line.
   The line breaks separating adjacent lines won't appear in the output.
   Instead, the line break will be converted to a single space.
   (In fact, all repeating space characters are reduced to a single space, just like in HTML.)

   TIP: Hard line breaks are automatically retained in xref:verbatim:literal-blocks.adoc[literal], xref:verbatim:listing-blocks.adoc[listing], xref:verbatim:source-blocks.adoc[source], and xref:verses.adoc[verse] blocks and paragraphs.

   If you want line breaks in a paragraph to be preserved, there are several techniques you can use.
   For any single line, you can terminate it with a space followed by a plus sign (i.e., [.pre-wrap]`{empty}\{plus}`).
   This syntax signals to the processor to end the line in the output with a hard line break.
   To add this behavior to every line in the paragraph, set the `hardbreaks` option on the paragraph instead.
   Alternately, you can tell the processor to preserve all line breaks in every paragraph in the document by setting the `hardbreaks-option` document attribute, though this option should be used wisely.

   To insert an empty line somewhere in a paragraph, you can use the hard line break syntax (i.e., `\{empty}\{plus}`) on a line by itself.
   This allows you to insert space between lines in the output without introducing separate paragraphs.

   [#per-line]
   == Inline line break syntax

   To preserve a line break in a paragraph, insert a space followed by a plus sign (`{plus}`) at the end of the line.
   This results in a visible line break (e.g., `<br>`) following the line.

   .Line breaks preserved using a space followed by the plus sign ({plus})
   [#ex-plus]
   ----
   include::example$paragraph.adoc[tag=hb]
   ----

   The result of <<ex-plus>> is displayed below.

   ====
   include::example$paragraph.adoc[tag=hb]
   ====

   [#per-block]
   == hardbreaks option

   To retain all of the line breaks in an entire paragraph, assign the `hardbreaks` option to the paragraph using an attribute list.

   .Line breaks preserved using the hardbreaks option
   [#ex-option]
   ----
   include::example$paragraph.adoc[tag=hb-p]
   ----

   The result of <<ex-option>> is displayed below.

   ====
   include::example$paragraph.adoc[tag=hb-p]
   ====

   [#per-document]
   == hardbreaks-option attribute

   To preserve line breaks in all paragraphs throughout your entire document, set the `hardbreaks-option` document attribute in the document header.

   .Line breaks preserved throughout the document using the hardbreaks-option attribute
   [#ex-attribute]
   ----
   include::example$paragraph.adoc[tag=hb-attr]
   ----


/docs/modules/blocks/pages/preamble-and-lead.adoc
=================================================

.. code-block: asciidoc

   = Preamble and Lead Style

   [#preamble-style]
   == Preamble

   Content between the end of the xref:document:header.adoc[document header] and the first section title in the document body is called the preamble.
   A preamble is optional.

   .Preamble
   [#ex-preamble]
   ----
   include::example$preamble.adoc[]
   ----

   When using the default Asciidoctor stylesheet, if the first paragraph does not have an explicit role, it is styled as if it has the <<lead-role,lead role>>.
   The result of <<ex-preamble>> is displayed below.

   image::preamble.png[The preamble of a document,role=screenshot]

   [#lead-role]
   == Lead role

   Apply the `lead` role to any paragraph, and it will render using a larger font size.
   The lead role is assigned to the xref:attributes:role.adoc[role attribute].
   You can set `role` using the classic or shorthand method.

   .Setting role to lead using the shorthand syntax
   [#ex-lead]
   ----
   include::example$paragraph.adoc[tag=lead]
   ----

   The result of <<ex-lead>> is displayed below.

   image::lead.png[Paragraph styled with the lead role value,role=screenshot]

   When you convert a document to HTML using the default stylesheet, the first paragraph of the <<preamble-style,preamble>> is automatically styled as a lead paragraph.
   To disable this behavior, assign any role to the first paragraph.

   .Disabling the automatic lead paragraph styling
   ----
   include::example$paragraph.adoc[tag=no-lead]
   ----

   The presence of the custom role (`normal`) informs the CSS not to style it as a lead paragraph.


/docs/modules/blocks/pages/paragraph-alignment.adoc
===================================================

.. code-block: asciidoc

   = Paragraph Alignment

   AsciiDoc provides built-in roles to align the text of a paragraph.
   The name of the role follows the pattern `text-<alignment>`, where `<alignment>` is one of left, center, right, or justify (e.g., `text-center`).

   In <<ex-center>>, the paragraph is assigned the `text-center` role in an attribute list.

   .Assign text-center to a paragraph
   [#ex-center]
   ----
   [.text-center]
   This text is centered, so it must be important.
   ----

   These built-in text alignment roles may not be honored by all converters.
   Though, you can expect them to be supported when the output format is either HTML or PDF.


/docs/modules/blocks/nav-discrete-headings.adoc
===============================================

.. code-block: asciidoc

   * xref:discrete-headings.adoc[]


/docs/modules/blocks/pages/discrete-headings.adoc
=================================================

.. code-block: asciidoc

   = Discrete Headings
   :page-aliases: sections:discrete-titles.adoc, sections:discrete-headings.adoc

   A discrete heading is declared and styled in a manner similar to that of a section title, but:

   * it's not part of the section hierarchy,
   * it can be nested in other blocks,
   * it cannot have any child blocks,
   * it's not included in the table of contents.

   In other words, it's a unique block element that looks like a section title, but is not an offshoot of a section title.

   The `discrete` style effectively demotes the section title to a normal heading.
   Discrete headings are the closest match to headings in other markup languages such as Markdown.

   To make a discrete heading, add the `discrete` attribute to any section title.
   Here's an example of a discrete heading in use.

   [source]
   ----
   **** <.>
   Discrete headings are useful for making headings inside of other blocks, like this sidebar.

   [discrete] <.>
   == Discrete Heading <.>

   Discrete headings can be used where sections are not permitted.
   ****
   ----
   <.> A delimiter line that indicates the start of a sidebar block.
   <.> Set the `discrete` attribute above the section title to demote it to a discrete heading.
   <.> The discrete heading is designated by one to six equal signs, just like a regular section title.

   Alternately, you may use the `float` attribute to identify a discrete heading.
   In this context, the term "`float`" does not refer to a layout.
   Rather, it means not bound to the section hierarchy.
   The term comes from an older version of AsciiDoc, in which discrete headings were called Floating Titles.
   DocBook refers to a discrete heading as a bridgehead, or free-floating heading.


/docs/modules/blocks/nav-breaks.adoc
====================================

.. code-block: asciidoc

   * xref:breaks.adoc[]


/docs/modules/blocks/pages/breaks.adoc
======================================

.. code-block: asciidoc

   = Breaks

   include::partial$thematic-breaks.adoc[]

   include::partial$page-breaks.adoc[]


/docs/modules/blocks/nav-styles.adoc
====================================

.. code-block: asciidoc

   []
   * xref:admonitions.adoc[]

   []
   * xref:sidebars.adoc[]

   []
   * xref:example-blocks.adoc[]

   []
   * xref:blockquotes.adoc[]

   []
   * xref:verses.adoc[]


/docs/modules/blocks/pages/admonitions.adoc
===========================================

.. code-block: asciidoc

   = Admonitions

   There are certain statements you may want to draw attention to by taking them out of the content's flow and labeling them with a priority.
   These are called admonitions.
   This page introduces you to admonition types AsciiDoc provides, how to add admonitions to your document, and how to enhance them using icons or emoji.

   == Admonition types

   The rendered style of an admonition is determined by the assigned type (i.e., name).
   The AsciiDoc language provides five admonition types represented by the following labels:

   * `NOTE`
   * `TIP`
   * `IMPORTANT`
   * `CAUTION`
   * `WARNING`

   The label is specified either as the block style or as a special paragraph prefix.
   The label becomes visible to the reader unless icons are enabled, in which case the icon is shown in its place.

   .Caution vs. Warning
   [#caution-vs-warning]
   ****
   When choosing the admonition type, you may find yourself getting confused between "caution" and "warning" as these words are often used interchangeably.
   Here's a simple rule to help you differentiate the two:

   * Use *CAUTION* to advise the reader to _act_ carefully (i.e., exercise care).
   * Use *WARNING* to inform the reader of danger, harm, or consequences that exist.

   To find a deeper analysis, see https://www.differencebetween.com/difference-between-caution-and-vs-warning/.
   ****

   == Admonition syntax

   When you want to call attention to a single paragraph, start the first line of the paragraph with the label you want to use.
   The label must be uppercase and followed by a colon (`:`).

   .Admonition paragraph syntax
   [#ex-label]
   ----
   include::example$admonition.adoc[tag=para-c]
   ----
   <.> The label must be uppercase and immediately followed by a colon (`:`).
   <.> Separate the first line of the paragraph from the label by a single space.

   The result of <<ex-label>> is displayed below.

   include::example$admonition.adoc[tag=para]

   When you want to apply an admonition to complex content, set the label as a style attribute on a block.
   As seen in the next example, admonition labels are commonly set on example blocks.
   This behavior is referred to as *masquerading*.
   The label must be uppercase when set as an attribute on a block.

   .Admonition block syntax
   [#ex-block]
   ----
   include::example$admonition.adoc[tag=bl-c]
   ----
   <.> Set the label in an attribute list on a delimited block.
   The label must be uppercase.
   <.> Admonition styles are commonly set on example blocks.
   Example blocks are delimited by four equal signs (`====`).

   The result of <<ex-block>> is displayed below.

   include::example$admonition.adoc[tag=bl-nest]

   == Enable admonition icons

   In the examples above, the admonition is rendered in a callout box with the style label in the gutter.
   You can replace the textual labels with font icons by setting the `icons` attribute on the document and assigning it the value `font`.

   .Admonition paragraph with icons set
   [#ex-icon]
   ----
   = Document Title
   :icons: font

   include::example$admonition.adoc[tag=para]
   ----

   Learn more about using Font Awesome or custom icons with admonitions in xref:macros:icons-font.adoc[].

   == Using emoji for admonition icons

   If image-based or font-based icons are not available, you can leverage the admonition caption to display an emoji (or any symbol from Unicode) in the place of the admonition label, thus giving you an alternative way to make admonition icons.

   If the `icons` attribute is not set on the document, the admonition label is shown as text (e.g., CAUTION).
   The text for this label comes from an AsciiDoc attribute.
   The name of the attribute is `<type>-caption`, where `<type>` is the admonition type in lowercase.
   For example, the attribute for a tip admonition is `tip-caption`.

   Instead of a word, you can assign a Unicode glyph to this attribute:

   ----
   :tip-caption: 💡

   [TIP]
   It's possible to use Unicode glyphs as admonition icons.
   ----

   Here's the result you get in the HTML:

   [,html]
   ----
   <td class="icon">
   <div class="title">💡</div>
   </td>
   ----

   Instead of entering the glyph directly, you can enter a character reference instead.
   However, since you're defining the character reference in an attribute entry, you (currently) have to disable substitutions on the value.

   ----
   :tip-caption: pass:[&#128161;]

   [TIP]
   It's possible to use Unicode glyphs as admonition icons.
   ----

   On GitHub, the HTML output from the AsciiDoc processor is run through a postprocessing filter that substitutes emoji shortcodes with emoji symbols.
   That means you can use these shortcodes instead in the value of the attribute:

   ----
   \ifdef::env-github[]
   :tip-caption: :bulb:
   \endif::[]

   [TIP]
   It's possible to use emojis as admonition icons on GitHub.
   ----

   When the document is processed through the GitHub interface, the shortcodes get replaced with real emojis.
   This is the only known way to get admonition icons to work on GitHub.


/docs/modules/blocks/pages/sidebars.adoc
========================================

.. code-block: asciidoc

   = Sidebars
   // Moved upstream from the Antora documentation at docs.antora.org

   On this page, you'll learn:

   * [x] How to mark up a sidebar with AsciiDoc.

   A sidebar can contain any type of content, such as quotes, equations, and images.
   Normal substitutions are applied to sidebar content.

   == Sidebar style syntax

   If the sidebar content is contiguous, the block style `sidebar` can be placed directly on top of the text in an attribute list (`[]`).

   .Assign sidebar block style to paragraph
   [#ex-style]
   ----
   [sidebar]
   Sidebars are used to visually separate auxiliary bits of content
   that supplement the main text.
   ----

   The result of <<ex-style>> is displayed below.

   [sidebar]
   Sidebars are used to visually separate auxiliary bits of content that supplement the main text.

   == Delimited sidebar syntax

   A delimited sidebar block is delimited by a pair of four consecutive asterisks (`pass:[****]`).
   You don't need to set the style name when you use the sidebar's delimiters.

   .Sidebar block delimiter syntax
   [#ex-block]
   ------
   .Optional Title
   ****
   Sidebars are used to visually separate auxiliary bits of content
   that supplement the main text.

   TIP: They can contain any type of content.

   .Source code block in a sidebar
   [source,js]
   ----
   const { expect, expectCalledWith, heredoc } = require('../test/test-utils')
   ----
   ****
   ------

   The result of <<ex-block>> is displayed below.

   .Optional Title
   ****
   Sidebars are used to visually separate auxiliary bits of content that supplement the main text.

   TIP: They can contain any type of content.

   .Source code block in a sidebar
   [source,js]
   ----
   const { expect, expectCalledWith, heredoc } = require('../test/test-utils')
   ----
   ****


/docs/modules/blocks/pages/example-blocks.adoc
==============================================

.. code-block: asciidoc

   = Example Blocks
   // Moved upstream from the Antora documentation at docs.antora.org
   :!example-caption:

   On this page, you'll learn:

   * [x] How to mark up an example block with AsciiDoc.

   An example block is useful for visually delineating content that illustrates a concept or showing the result of an operation.

   An example can contain any type of content and AsciiDoc syntax.
   Normal substitutions are applied to example content.

   == Example style syntax

   If the example content is contiguous, i.e., not interrupted by empty lines, the block style name `example` can be placed directly on top of the text in an attribute list (`[]`).

   .Assign example block style to paragraph
   [#ex-style]
   ----
   .Optional title
   [example]
   This is an example of an example block.
   ----

   The result of <<ex-style>> is displayed below.

   .Optional title
   [example]
   This is an example of an example block.

   [#delimited]
   == Delimited example syntax

   If the example content includes multiple blocks or content separated by empty lines, place the content between delimiter lines consisting of four equals signs (`pass:[====]`).

   You don't need to set the block style name when you use the example delimiters.

   .Example block delimiter syntax
   [#ex-block]
   ----
   .Onomatopoeia
   ====
   The book hit the floor with a *thud*.

   He could hear doves *cooing* in the pine trees`' branches.
   ====
   ----

   The result of <<ex-block>> is displayed below.

   .Onomatopoeia
   ====
   The book hit the floor with a *thud*.

   He could hear doves *cooing* in the pine trees`' branches.
   ====

   TIP: xref:admonitions.adoc[Complex admonitions] use the delimited example syntax.


/docs/modules/blocks/pages/blockquotes.adoc
===========================================

.. code-block: asciidoc

   = Blockquotes

   Prose excerpts, quotes and verses share the same syntax structure, including:

   * block name, either `quote` or `verse`
   * name of who the content is attributed to
   * bibliographical information of the book, speech, play, poem, etc., where the content was drawn from
   * excerpt text

   == Basic quote syntax

   // tag::basic[]
   For content that doesn't require the preservation of line breaks, set the `quote` attribute in the first position of the attribute list.
   Next, set the attribution and relevant citation information.
   These positional attributes are all optional.

   .Anatomy of a basic quote
   [#ex-basic]
   ----
   [quote,attribution,citation title and information]
   Quote or excerpt text
   ----

   You can include an optional space after the comma that separates each positional attribute.
   If an attribute value includes a comma, enclose the value in double or single quotes.

   If the quote is a single line or paragraph (i.e., a styled paragraph), you can place the attribute list directly on top of the text.

   .Quote paragraph syntax
   [#ex-style]
   ----
   include::example$quote.adoc[tag=para2-c]
   ----
   <.> Mark lead-in text explaining the context or setting of the quote using a period (`.`). (optional)
   <.> For content that doesn't require the preservation of line breaks, set `quote` in the first position of the attribute list.
   <.> The second position contains who the excerpt is attributed to. (optional)
   <.> Enter additional citation information in the third position. (optional)
   <.> Enter the excerpt or quote text on the line immediately following the attribute list.

   The result of <<ex-style>> is displayed below.

   include::example$quote.adoc[tag=para2]

   == Quoted block

   If the quote or excerpt is more than one paragraph, place the text between delimiter lines consisting of four underscores (`+____+`).

   .Quote block syntax
   [#ex-block]
   ----
   include::example$quote.adoc[tag=comp]
   ----

   The result of <<ex-block>> is displayed below.

   include::example$quote.adoc[tag=comp]
   // end::basic[]

   == Quoted paragraph

   You can turn a single paragraph into a blockquote by:

   . surrounding it with double quotes
   . adding an optional attribution (prefixed with two dashes) below the quoted text

   .Quoted paragraph syntax
   [#ex-quoted]
   ----
   include::example$quote.adoc[tag=abbr]
   ----

   The result of <<ex-quoted>> is displayed below.

   include::example$quote.adoc[tag=abbr]

   == Markdown-style blockquotes

   Asciidoctor supports Markdown-style blockquotes.
   This syntax was adopted both to ease the transition from Markdown and because it's the most common method of quoting in email messages.

   .Markdown-style blockquote syntax
   [source#ex-md]
   ----
   include::example$quote.adoc[tag=md]
   ----

   The result of <<ex-md>> is displayed below.

   include::example$quote.adoc[tag=md]

   Like Markdown, Asciidoctor supports some block content inside the blockquote, including paragraphs, lists, and nested blockquotes.

   .Markdown-style blockquote containing block content
   [source#ex-md-block]
   ....
   include::example$quote.adoc[tag=md-alt]
   ....

   Here's how the conversation from <<ex-md-block>> is rendered.

   include::example$quote.adoc[tag=md-alt]

   Be aware that not all AsciiDoc block elements are supported inside a Markdown-style blockquote.
   In particular, a description list is not permitted.
   The parser looks for the Markdown-style blockquote only after looking for a description list, meaning the description list takes precedence.
   Since the quote marker is a valid prefix for a description list term, the Markdown-style blockquote is not recognized in this case.
   If you need to put a description list inside a blockquote, you should use the AsciiDoc syntax for a blockquote instead.

   The Markdown-style blockquote should only be used in simple cases and when migrating from Markdown.
   The AsciiDoc syntax should always be preferred, if possible.


/docs/modules/blocks/pages/verses.adoc
======================================

.. code-block: asciidoc

   = Verses

   When you need to preserve indents and line breaks, use a `verse` block.
   Verses are defined by setting `verse` on a paragraph or an excerpt block delimited by four underscores (`+____+`).

   == verse style syntax

   When verse content doesn't contain any empty lines, you can assign the `verse` style using the first position in an attribute list.

   .Verse style syntax
   [#ex-style]
   ----
   include::example$verse.adoc[tag=para]
   ----

   The result of <<ex-style>> is displayed below.

   include::example$verse.adoc[tag=para]

   == Delimited verse block syntax

   When the verse content includes empty lines, enclose it in a delimited excerpt block.

   .Verse delimited block syntax
   [#ex-block]
   ----
   include::example$verse.adoc[tag=bl]
   ----

   The delimited verse block from <<ex-block>> is rendered below.

   include::example$verse.adoc[tag=bl]


/docs/modules/blocks/nav-open.adoc
==================================

.. code-block: asciidoc

   * xref:open-blocks.adoc[]


/docs/modules/blocks/pages/open-blocks.adoc
===========================================

.. code-block: asciidoc

   = Open Blocks

   The most versatile block of all is the open block.
   It allows you to apply block attributes to a chunk of text without giving it any other semantics.
   In other words, it provides a generic structural container for enclosing content.
   The only notable limitation is that an open block cannot be nested inside of another open block.

   == Open block syntax

   .Open block syntax
   [#ex-open]
   ----
   include::example$open.adoc[tag=base]
   ----

   The result of <<ex-open>> is displayed below.

   include::example$open.adoc[tag=base]

   An open block can act as any other paragraph or delimited block, with the exception of _pass_ and _table_.
   For instance, in <<ex-open-sidebar>> an open block is acting as a sidebar.

   .Open block masquerading as a sidebar
   [#ex-open-sidebar]
   ----
   include::example$open.adoc[tag=sb]
   ----

   The result of <<ex-open-sidebar>> is displayed below.

   include::example$open.adoc[tag=sb]

   <<ex-open-source>> is an open block acting as a source block.

   .Open block masquerading as a source block
   [#ex-open-source]
   ----
   include::example$open.adoc[tag=src]
   ----

   The result of <<ex-open-source>> is displayed below.

   include::example$open.adoc[tag=src]


/docs/modules/blocks/nav-collapsible.adoc
=========================================

.. code-block: asciidoc

   * xref:collapsible.adoc[]


/docs/modules/blocks/pages/collapsible.adoc
===========================================

.. code-block: asciidoc

   = Collapsible Blocks

   You can designate block content to be revealed or hidden on interaction using the collapsible option and its companion, the open option.
   When the AsciiDoc source is converted to HTML, this block gets mapped to a disclosure summary element (i.e., a summary/details pair).
   If the output format does not support this interaction, it may be rendered as an unstyled block (akin to an open block).

   == Collapsible block syntax

   You make block content collapsible by specifying the `collapsible` option on the example structural container.
   This option changes the block from an example block to a collapsible block.

   .Collapsible block syntax
   [#ex-collapsible]
   ----
   include::example$collapsible.adoc[tag=basic]
   ----

   In the output, the content of this block is hidden until the reader clicks the default title, "`Details`".
   The result of <<ex-collapsible>> is displayed below.

   include::example$collapsible.adoc[tag=basic]

   Like other blocks, the collapsible block recognizes the `id` and `role` attributes.

   == Collapsible paragraph syntax

   If the content of the block is only a single paragraph, you can use the example paragraph style instead of the example structural container to make a collapsible paragraph.

   .Collapsible paragraph syntax
   [#ex-collapsible-paragraph]
   ----
   include::example$collapsible.adoc[tag=paragraph]
   ----

   In the output, the content of this block is hidden until the reader clicks the default title, "`Details`".
   The result of <<ex-collapsible-paragraph>> is displayed below.

   include::example$collapsible.adoc[tag=paragraph]

   == Customize the toggle text

   If you want to customize the text that toggles the display of the collapsible content, specify a title on the block or paragraph.

   .Collapsible block with custom title
   [#ex-collapsible-with-title]
   ----
   include::example$collapsible.adoc[tag=title]
   ----

   The result of <<ex-collapsible-with-title>> is displayed below.

   include::example$collapsible.adoc[tag=title]

   Notice that even though this block has a title, it's not numbered and does not have a caption prefix.
   That's because it's not an example block and thus does not get a numbered caption prefix like an example block would.

   == Default to open

   If you want the collapsible block to be open by default, specify the `open` option as well.

   .Collapsible block that defaults to open
   [#ex-collapsible-open]
   ----
   include::example$collapsible.adoc[tag=open]
   ----

   The result of <<ex-collapsible-open>> is displayed below.

   include::example$collapsible.adoc[tag=open]

   == Use as an enclosure

   Much like the open block, the collapsible block is an enclosure.
   If you want to make other types of blocks collapsible, such as an listing block, you can nest the block inside the collapsible block.

   .Collapsible block that encloses a literal block
   [#ex-collapsible-nested]
   ----
   include::example$collapsible.adoc[tag=nested]
   ----

   The result of <<ex-collapsible-nested>> is displayed below.

   include::example$collapsible.adoc[tag=nested]

   Since the toggle text acts as the block title, you may decide to not put a title on the nested block, as in this example.


/docs/modules/blocks/pages/nest.adoc
====================================

.. code-block: asciidoc

   = Nesting Blocks
   :page-archived:

   Moved xref:delimited.adoc#nesting[here].


/docs/modules/blocks/pages/styles.adoc
======================================

.. code-block: asciidoc

   = Block Style
   :page-archived:

   Moved xref:index.adoc#block-style[here].


/docs/modules/blocks/partials/block-name-table.adoc
===================================================

.. code-block: asciidoc

   ////
   Table of blocks, block names, block delimiters, and their substitutions
   User Manual: Blocks
   ////

   [cols="1,1m,1m,3,1"]
   |===
   |Block |Block Name |Delimiter |Purpose |Substitutions

   |Paragraph
   d|n/a
   d|n/a
   |Regular paragraph content (i.e., prose), offset on either side by an empty line.
   Must start flush to the left margin of the document.
   The block name can be used to convert the paragraph into most other blocks.
   |Normal

   |Literal paragraph
   d|n/a
   d|n/a
   |A special type of paragraph block for literal content (i.e., preformatted text).
   Must be indented from the left margin of the document by at least one space.
   Often used as a shorthand for a literal delimited block when the content does not contain any empty lines.
   |Verbatim

   |Admonition
   |++[<LABEL>]++
   |++====++
   |Aside content that demands special attention; often labeled with a tag or icon
   |Normal

   |Comment
   d|n/a
   |++////++
   |Private notes that are not displayed in the output
   |None

   |Example
   |++[example]++
   |++====++
   |Designates example content or defines an admonition block
   |Normal

   |Fenced
   d|n/a
   |++```++
   |Source code or keyboard input is displayed as entered.
   Will be colorized by the source highlighter if enabled on the document and a language is set.
   |Verbatim

   |Listing
   |++[listing]++
   |++----++
   |Source code or keyboard input is displayed as entered
   |Verbatim

   |Literal
   |++[literal]++
   |++....++
   |Output text is displayed exactly as entered
   |Verbatim

   |Open
   d|Most block names
   |++--++
   |Anonymous block that can act as any block except _passthrough_ or _table_ blocks
   |Varies

   |Passthrough
   |++[pass]++
   |pass:[++++]
   |Unprocessed content that is sent directly to the output
   |None

   |Quote
   |++[quote]++
   |++____++
   |A quotation with optional attribution
   |Normal

   |Sidebar
   |++[sidebar]++
   |++****++
   |Aside text and content displayed outside the flow of the document
   |Normal

   |Source
   |++[source]++
   |++----++
   |Source code or keyboard input to be displayed as entered.
   Will be colorized by the source highlighter if enabled on the document and a language is set.
   |Verbatim

   |Stem
   |++[stem]++
   |pass:[++++]
   |Unprocessed content that is sent directly to an interpreter (such as AsciiMath or LaTeX math)
   |None

   |Table
   d|n/a
   |++\|===++
   |Displays tabular content
   |Varies

   |Verse
   |++[verse]++
   |++____++
   |A verse with optional attribution
   |Normal
   |===


/docs/modules/blocks/partials/page-breaks.adoc
==============================================

.. code-block: asciidoc

   == Page breaks

   A line with three less-than characters (i.e., `<<<`), shown in <<ex-page-break>>, is a special macro that serves as a hint to the converter to insert a page break.
   Like other block forms, the line must be offset by a preceding paragraph by at least one empty line.

   .Page break syntax
   [#ex-page-break]
   ----
   <<<
   ----

   A page break is only relevant for page-oriented / printable output formats such as DocBook, PDF, and HTML in print mode.

   If the page break macro falls at the top of an empty page, it will be ignored.
   This behavior can be overridden by setting the `always` option on the macro as shown in <<ex-forced-page-break>>.

   .Forced page break
   [#ex-forced-page-break]
   ----
   [%always]
   <<<
   ----

   Some converters support additional options on the page break macro.
   For example, Asciidoctor PDF allows the page layout of the new page to be specified.

   If a converter supports columns, the page break can be converted into a column break by the addition of the `column` role.

   .Column break
   [#ex-column-break]
   ----
   left column

   [.column]
   <<<

   right column
   ----

   When columns are not enabled or supported, the column break is expected to act as a page break.


/docs/modules/blocks/partials/subs-group-table.adoc
===================================================

.. code-block: asciidoc

   // Included in user-manual: Blocks, Substitutions

   .Substitution groups
   [cols="2h,6*^"]
   |===
   |Group |Special characters |Quotes |Attributes |Replacements |Macros |Post replacements

   |Header
   |{y}
   |{n}
   |{y}
   |{n}
   |{n}
   |{n}

   |None
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}

   |Normal
   |{y}
   |{y}
   |{y}
   |{y}
   |{y}
   |{y}

   |Pass
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}

   |Verbatim
   |{y}
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}
   |===


/docs/modules/blocks/partials/thematic-breaks.adoc
==================================================

.. code-block: asciidoc

   == Thematic breaks

   A line with three single quotation marks (i.e., `pass:[''']`), shown in <<ex-rule>>, is a special macro that inserts a thematic break (aka horizontal rule).
   Like other block forms, the line must be offset by a preceding paragraph by at least one empty line.

   .Thematic break syntax
   [#ex-rule]
   ----
   '''
   ----

   The result of <<ex-rule>> is displayed below.

   ====
   '''
   ====

   === Markdown-style thematic breaks

   Asciidoctor recognizes Markdown thematic breaks.
   The motivation for this support is to ease migration of Markdown documents to AsciiDoc documents.

   To avoid conflicts with AsciiDoc's block delimiter syntax, only 3 repeating characters (`-` or `+*+`) are recognized.
   As with Markdown, spaces between the characters is optional.

   .Markdown-style thematic break syntax
   ----
   ---

   - - -

   ***

   * * *
   ----


/docs/modules/blocks/examples/admonition.adoc
=============================================

.. code-block: asciidoc

   // tag::para-c[]
   WARNING: Wolpertingers are known to nest in server racks. <.> <.>
   Enter at your own risk.
   // end::para-c[]

   // tag::para[]
   WARNING: Wolpertingers are known to nest in server racks.
   Enter at your own risk.
   // end::para[]

   // tag::bl[]
   [IMPORTANT]
   .Feeding the Werewolves
   ====
   While werewolves are hardy community members, keep in mind the following dietary concerns:

   . They are allergic to cinnamon.
   . More than two glasses of orange juice in 24 hours makes them howl in harmony with alarms and sirens.
   . Celery makes them sad.
   ====
   // end::bl[]

   // tag::bl-c[]
   [IMPORTANT] <.>
   .Feeding the Werewolves
   ==== <.>
   While werewolves are hardy community members, keep in mind the following dietary concerns:

   . They are allergic to cinnamon.
   . More than two glasses of orange juice in 24 hours makes them howl in harmony with alarms and sirens.
   . Celery makes them sad.
   ====
   // end::bl-c[]

   // tag::bl-nest[]
   [IMPORTANT]
   .Feeding the Werewolves
   ======
   While werewolves are hardy community members, keep in mind the following dietary concerns:

   . They are allergic to cinnamon.
   . More than two glasses of orange juice in 24 hours makes them howl in harmony with alarms and sirens.
   . Celery makes them sad.
   ======
   // end::bl-nest[]

   // tag::b-para[]
   NOTE: An admonition draws the reader's attention to auxiliary information.

   Here are the other built-in admonition types:

   IMPORTANT: Don't forget the children!

   TIP: Look for the warp zone under the bridge.

   CAUTION: Slippery when wet.

   WARNING: The software you're about to use is untested.

   IMPORTANT: Sign off before stepping away from your computer.
   // end::b-para[]

   // tag::b-bl[]
   [NOTE]
   ====
   An admonition block may contain complex content.

   .A list
   - one
   - two
   - three

   Another paragraph.
   ====
   // end::b-bl[]


/docs/modules/blocks/examples/block.adoc
========================================

.. code-block: asciidoc

   // tag::list-title[]
   .TODO list
   - Learn the AsciiDoc syntax
   - Install Asciidoctor
   - Write my document
   // end::list-title[]

   // tag::meta-co[]
   .Gettysburg Address <1>
   [#gettysburg] <2>
   [quote,Abraham Lincoln,Address delivered at the dedication of the Cemetery at Gettysburg] <3> <4> <5>
   ____
   Four score and seven years ago our fathers brought forth
   on this continent a new nation...

   Now we are engaged in a great civil war, testing whether
   that nation, or any nation so conceived and so dedicated,
   can long endure. ...
   ____
   // end::meta-co[]

   // tag::opt-listing[]
   [listing]
   sudo dnf install asciidoc
   // end::opt-listing[]

   // tag::quote-name[]
   [quote]
   Never do today what you can put off `'til tomorrow.
   // end::quote-name[]


/docs/modules/blocks/examples/collapsible.adoc
==============================================

.. code-block: asciidoc

   // tag::basic[]
   [%collapsible]
   ====
   This content is only revealed when the user clicks the block title.
   ====
   // end::basic[]

   // tag::paragraph[]
   [example%collapsible]
   This content is only revealed when the user clicks the block title.
   // end::paragraph[]

   // tag::title[]
   .Click to reveal the answer
   [%collapsible]
   ====
   This is the answer.
   ====
   // end::title[]

   // tag::open[]
   .Too much detail? Click here.
   [%collapsible%open]
   ====
   This content is revealed by default.

   If it's taking up too much space, the reader can hide it.
   ====
   // end::open[]

   // tag::nested[]
   .Show stacktrace
   [%collapsible]
   ====
   ....
   Error: Content repository not found (url: https://git.example.org/repo.git)
       at transformGitCloneError
       at git.clone.then.then.catch
   Caused by: HttpError: HTTP Error: 401 HTTP Basic: Access Denied
       at GitCredentialManagerStore.rejected
       at fill.then
   ....
   ====
   // end::nested[]


/docs/modules/blocks/examples/example.adoc
==========================================

.. code-block: asciidoc

   // tag::base[]
   ====
   Here's a sample AsciiDoc document:

   ----
   = Title of Document
   Doc Writer
   :toc:

   This guide provides...
   ----

   The document header is useful, but not required.
   ====
   // end::base[]


/docs/modules/blocks/examples/open.adoc
=======================================

.. code-block: asciidoc

   // tag::base[]
   --
   An open block can be an anonymous container,
   or it can masquerade as any other block.
   --
   // end::base[]

   // tag::src[]
   [source]
   --
   puts "I'm a source block!"
   --
   // end::src[]

   // tag::sb[]
   [sidebar]
   .Related information
   --
   This is aside text.

   It is used to present information related to the main content.
   --
   // end::sb[]


/docs/modules/blocks/examples/paragraph.adoc
============================================

.. code-block: asciidoc

   // tag::para[]
   Paragraphs don't require any special markup in AsciiDoc.
   A paragraph is just one or more lines of consecutive text.

   To begin a new paragraph, separate it by at least one empty line from the previous paragraph or block.
   // end::para[]

   // tag::hb-all[]
   Rubies are red, +
   Topazes are blue.

   [%hardbreaks]
   Ruby is red.
   Java is beige.
   // end::hb-all[]

   // tag::hb[]
   Rubies are red, +
   Topazes are blue.
   // end::hb[]

   // tag::hb-p[]
   [%hardbreaks]
   Ruby is red.
   Java is beige.
   // end::hb-p[]

   // tag::b-hb[]
   To preserve a line break, end the line in a space followed by a plus sign. +
   This results in a visible line break (e.g., `<br>`) between the lines.
   // end::b-hb[]

   // tag::hb-attr[]
   = Line Break Doc Title
   :hardbreaks-option:

   Rubies are red,
   Topazes are blue.
   // end::hb-attr[]

   // tag::lead[]
   == Section title

   This is a regular paragraph.

   [.lead]
   This is a paragraph styled as a lead paragraph.
   // end::lead[]

   // tag::no-lead[]
   [.normal]
   This is a normal paragraph, regardless of its position in the document.
   // end::no-lead[]

   // tag::b-lead[]
   [.lead]
   This text is styled as a lead paragraph (i.e., larger font).
   // end::b-lead[]


/docs/modules/blocks/examples/preamble.adoc
===========================================

.. code-block: asciidoc

   = The Intrepid Chronicles

   This adventure begins on a frigid morning.
   We've run out of coffee beans, but leaving our office means venturing into certain peril.
   Yesterday, a colony of ravenous Wolpertingers descended from the foothills.
   No one can find the defensive operations manual, and our security experts are on an off-the-grid team-building retreat in Katchanga.

   What are we going to do?

   == Certain Peril

   Daylight trickles across the cobblestones...


/docs/modules/blocks/examples/quote.adoc
========================================

.. code-block: asciidoc

   // tag::bl[]
   [quote,Abraham Lincoln,Address delivered at the dedication of the Cemetery at Gettysburg]
   ____
   Four score and seven years ago our fathers brought forth
   on this continent a new nation...
   ____
   // end::bl[]

   // tag::bl-alt[]
   [quote,Thomas Jefferson,Papers of Thomas Jefferson: Volume 11]
   ____
   I hold it that a little rebellion now and then is a good thing,
   and as necessary in the political world as storms in the physical.
   ____
   // end::bl-alt[]

   // tag::para[]
   [quote,Albert Einstein]
   A person who never made a mistake never tried anything new.
   // end::para[]

   // tag::para2-c[]
   .After landing the cloaked Klingon bird of prey in Golden Gate park: <.>
   [quote,Captain James T. Kirk,Star Trek IV: The Voyage Home] <.> <.> <.>
   Everybody remember where we parked. <.>
   // end::para2-c[]

   // tag::para2[]
   .After landing the cloaked Klingon bird of prey in Golden Gate park:
   [quote,Captain James T. Kirk,Star Trek IV: The Voyage Home]
   Everybody remember where we parked.
   // end::para2[]

   // tag::comp[]
   [quote,Monty Python and the Holy Grail]
   ____
   Dennis: Come and see the violence inherent in the system. Help! Help! I'm being repressed!

   King Arthur: Bloody peasant!

   Dennis: Oh, what a giveaway! Did you hear that? Did you hear that, eh? That's what I'm on about! Did you see him repressing me? You saw him, Didn't you?
   ____
   // end::comp[]

   // tag::no-cite[]
   ____
   A person who never made a mistake never tried anything new.
   ____
   // end::no-cite[]

   // tag::abbr[]
   "I hold it that a little rebellion now and then is a good thing,
   and as necessary in the political world as storms in the physical."
   -- Thomas Jefferson, Papers of Thomas Jefferson: Volume 11
   // end::abbr[]

   // tag::md[]
   > I hold it that a little rebellion now and then is a good thing,
   > and as necessary in the political world as storms in the physical.
   > -- Thomas Jefferson, Papers of Thomas Jefferson: Volume 11
   // end::md[]

   // tag::md-alt[]
   > > What's new?
   >
   > I've got Markdown in my AsciiDoc!
   >
   > > Like what?
   >
   > * Blockquotes
   > * Headings
   > * Fenced code blocks
   >
   > > Is there more?
   >
   > Yep. AsciiDoc and Markdown share a lot of common syntax already.
   // end::md-alt[]

   // tag::link-text[]
   [quote,Charles Lutwidge Dodgson,'Mathematician and author, also known as https://en.wikipedia.org/wiki/Lewis_Carroll[Lewis Carroll]']
   ____
   If you don't know where you are going, any road will get you there.
   ____
   // end::link-text[]


/docs/modules/blocks/examples/sidebar.adoc
==========================================

.. code-block: asciidoc

   // tag::delimited[]
   .Optional Title
   ****
   Sidebars are used to visually separate auxiliary bits of content
   that supplement the main text.
   ****
   // end::delimited[]


/docs/modules/blocks/examples/verse.adoc
========================================

.. code-block: asciidoc

   // tag::para[]
   [verse,Carl Sandburg, two lines from the poem Fog]
   The fog comes
   on little cat feet.
   // end::para[]

   // tag::bl[]
   [verse,Carl Sandburg,Fog]
   ____
   The fog comes
   on little cat feet.

   It sits looking
   over harbor and city
   on silent haunches
   and then moves on.
   ____
   // end::bl[]


/docs/modules/attributes/nav-document.adoc
==========================================

.. code-block: asciidoc

   * xref:document-attributes.adoc[]
   ** xref:attribute-entries.adoc[]
   *** xref:names-and-values.adoc[]
   *** xref:wrap-values.adoc[]
   *** xref:attribute-entry-substitutions.adoc[]
   *** xref:inline-attribute-entries.adoc[]
   ** xref:built-in-attributes.adoc[]
   *** xref:boolean-attributes.adoc[]
   ** xref:custom-attributes.adoc[]
   ** xref:unset-attributes.adoc[]
   ** xref:reference-attributes.adoc[]
   *** xref:unresolved-references.adoc[]
   ** xref:assignment-precedence.adoc[]
   ** xref:counters.adoc[]


/docs/modules/attributes/pages/document-attributes-ref.adoc
===========================================================

.. code-block: asciidoc

   = Document Attributes Reference
   :page-aliases: document-attributes-reference.adoc
   // TODO use icons or emoji for y and n
   :y: Yes
   :n: No
   :endash: &#8211;
   :url-epoch: https://reproducible-builds.org/specs/source-date-epoch/

   Document attributes are used either to configure behavior in the processor or to relay information about the document and its environment.
   This page catalogs all the built-in (i.e., reserved) document attributes in AsciiDoc.

   Unless otherwise marked, these attributes can be modified (set or unset) from the API using the `:attributes` option, from the CLI using the `-a` option, or in the document (often in the document header) using an attribute entry.

   Use the follow legend to understand the columns and values in the tables on this page.

   [horizontal]
   Set By Default:: The attribute is automatically set and assigned a default value by the AsciiDoc processor.
   The default value is indicated in *bold* (e.g., `*skip*`).

   Allowable Values:: Allowable values for the attribute.
   Numeric values and values shown in _italic_ are instructional and indicate a value type (e.g., _any_, _empty_, _number_, 1{endash}5, etc.).
   +
   * _any_ -- Any value is accepted.
   * _empty_ -- Indicates the attribute doesn't require an explicit value.
   The attribute is simply turned on by being set.
   * _empty_[=`effective`] -- In some cases, an empty value is interpreted by the processor as one of the allowable non-empty values.
   This effective value is prefixed with an equals sign and enclosed in square brackets (e.g., [=`auto`]).
   An attribute reference will resolve to an empty value rather than the effective value.
   * (`implied`) -- Built-in attributes that are not set may have an implied value.
   The implied value is enclosed in parentheses (e.g., (`attributes`)).
   An implied value can't be resolved using an attribute reference.

   +
   If the attribute doesn't accept _any_ or _empty_, than you must only assign one of the allowable values or specified value type.

   Header Only:: The attribute must be set or unset by the end of the document header (i.e., set by the API, CLI, or in the document header).
   Otherwise, the assignment won't have any effect on the document.
   If an attribute is not marked as _Header Only_, it can be set anywhere in the document, assuming the attribute is not locked by the API or CLI.
   However, changing an attribute only affects behavior for content that follows the assignment (in document order).

   == Intrinsic attributes

   Intrinsic attributes are set automatically by the processor.
   These attributes provide information about the document being processed (e.g., `docfile`), the security mode under which the processor is running (e.g., `safe-mode-name`), and information about the user's environment (e.g., `user-home`).

   Many of these attributes are read only, which means they can't be modified (with some exceptions).
   Attributes which are not are marked as modifiable.
   Attributes marked as both modifiable and API/CLI Only can only be set from the API or CLI.
   All other attributes marked as modifiable must be set by the end of the header (i.e., Header Only).

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Modifiable .>|API/CLI Only .>|Notes

   |backend
   |_any_ +
   _ex._ html5
   |{y}
   |{n}
   |The backend used to select and activate the converter that creates the output file.
   Usually named according to the output format (e.g., `html5`)

   |backend-<backend>
   |_empty_
   |{n}
   |n/a
   |A convenience attribute for checking which backend is selected.
   <backend> is the value of the `backend` attribute (e.g., `backend-html5`).
   Only one such attribute is set at time.

   //|backend-<backend>-doctype-<doctype>
   //|_empty_
   //|{n}
   //|n/a
   //|A convenience attribute for checking the current backend/doctype combination.
   //<backend> is the value of the `backend` attribute and <doctype> is the value of the `doctype` attribute (e.g., `backend-html5-doctype-article`).
   //Only one such attribute is set at time.

   |basebackend
   |_any_ +
   _ex._ html
   |{n}
   |n/a
   |The generic backend on which the backend is based.
   Typically derived from the backend value minus trailing numbers (e.g., the basebackend for `docbook5` is `docbook`).
   May also indicate the internal backend employed by the converter (e.g., the basebackend for `pdf` is `html`).

   |basebackend-<basebackend>
   |_empty_
   |{n}
   |n/a
   |A convenience attribute for checking which basebackend is active.
   <basebackend> is the value of the `basebackend` attribute (e.g., `basebackend-html`).
   Only one such attribute is set at time.

   //|basebackend-<basebackend>-doctype-<doctype>
   //|_empty_
   //|{n}
   //|n/a
   //|A convenience attribute for checking the current basebackend/doctype combination.
   //<basebackend> is the value of the `basebackend` attribute and <doctype> is the value of the `doctype` attribute (e.g., `basebackend-html-doctype-article`).
   //Only one such attribute is set at time.

   |docdate
   |_date (ISO)_ +
   _ex._ 2019-01-04
   |{y}
   |{n}
   |Last modified date of the source document.^[<<note-docdatetime,1>>,<<note-sourcedateepoch,2>>]^

   |docdatetime
   |_datetime (ISO)_ +
   _ex._ 2019-01-04 19:26:06 UTC
   |{y}
   |{n}
   |Last modified date and time of the source document.^[<<note-docdatetime,1>>,<<note-sourcedateepoch,2>>]^

   |docdir
   |_directory path_ +
   _ex._ /home/user/docs
   |If input is a string
   |{y}
   |Full path of the directory that contains the source document.
   Empty if the safe mode is SERVER or SECURE (to conceal the file's location).

   |docfile
   |_file path_ +
   _ex._ /home/user/docs/userguide.adoc
   |If input is a string
   |{y}
   |Full path of the source document.
   Truncated to the basename if the safe mode is SERVER or SECURE (to conceal the file's location).

   |docfilesuffix
   |_file extension_ +
   _ex._ .adoc
   |If input is a string
   |{y}
   |File extension of the source document, including the leading period.

   |docname
   |_file stem basename_ +
   _ex._ userguide
   |If input is a string
   |{y}
   |Root name of the source document (no leading path or file extension).

   |doctime
   |_time (ISO)_ +
   _ex._ 19:26:06 UTC
   |{y}
   |{n}
   |Last modified time of the source document.^[<<note-docdatetime,1>>,<<note-sourcedateepoch,2>>]^

   |doctype-<doctype>
   |_empty_
   |{n}
   |n/a
   |A convenience attribute for checking the doctype of the document.
   <doctype> is the value of the `doctype` attribute (e.g., `doctype-book`).
   Only one such attribute is set at time.

   |docyear
   |_integer_ +
   _ex._ {docyear}
   |{y}
   |{n}
   |Year that the document was last modified.^[<<note-docdatetime,1>>,<<note-sourcedateepoch,2>>]^

   |embedded
   |_empty_
   |{n}
   |n/a
   |Only set if content is being converted to an embedded document (i.e., body of document only).

   |filetype
   |_any_ +
   _ex._ html
   |If input is a string
   |{y}
   |File extension of the output file name (without leading period).

   |filetype-<filetype>
   |_empty_
   |{n}
   |n/a
   |A convenience attribute for checking the filetype of the output.
   <filetype> is the value of the `filetype` attribute (e.g., `filetype-html`).
   Only one such attribute is set at time.

   |htmlsyntax
   |`html` +
   `xml`
   |{n}
   |n/a
   |Syntax used when generating the HTML output.
   Controlled by and derived from the backend name (html=html or xhtml=html).

   |localdate
   |_date (ISO)_ +
   _ex._ 2019-02-17
   |{y}
   |{n}
   |Date when the document was converted.^[<<note-sourcedateepoch,2>>]^

   |localdatetime
   |_datetime (ISO)_ +
   _ex._ 2019-02-17 19:31:05 UTC
   |{y}
   |{n}
   |Date and time when the document was converted.^[<<note-sourcedateepoch,2>>]^

   |localtime
   |_time (ISO)_ +
   _ex._ 19:31:05 UTC
   |{y}
   |{n}
   |Time when the document was converted.^[<<note-sourcedateepoch,2>>]^

   |localyear
   |_integer_ +
   _ex._ {localyear}
   |{y}
   |{n}
   |Year when the document was converted.^[<<note-sourcedateepoch,2>>]^

   |outdir
   |_directory path_ +
   _ex._ /home/user/docs/dist
   |{n}
   |n/a
   |Full path of the output directory.
   (Cannot be referenced in the content.
   Only available to the API once the document is converted).

   |outfile
   |_file path_ +
   _ex._ /home/user/docs/dist/userguide.html
   |{n}
   |n/a
   |Full path of the output file.
   (Cannot be referenced in the content.
   Only available to the API once the document is converted).

   |outfilesuffix
   |_file extension_ +
   _ex._ .html
   |{y}
   |{n}
   |File extension of the output file (starting with a period) as determined by the backend (`.html` for `html`, `.xml` for `docbook`, etc.).

   |safe-mode-level
   |`0` +
   `1` +
   `10` +
   `20`
   |{n}
   |n/a
   |Numeric value of the safe mode setting.
   (0=UNSAFE, 1=SAFE, 10=SERVER, 20=SECURE).

   |safe-mode-name
   |`UNSAFE` +
   `SAFE` +
   `SERVER` +
   `SECURE`
   |{n}
   |n/a
   |Textual value of the safe mode setting.

   |safe-mode-unsafe
   |_empty_
   |{n}
   |n/a
   |Set if the safe mode is UNSAFE.

   |safe-mode-safe
   |_empty_
   |{n}
   |n/a
   |Set if the safe mode is SAFE.

   |safe-mode-server
   |_empty_
   |{n}
   |n/a
   |Set if the safe mode is SERVER.

   |safe-mode-secure
   |_empty_
   |{n}
   |n/a
   |Set if the safe mode is SECURE.

   |user-home
   |_directory path_ +
   _ex._ /home/user
   |{n}
   |n/a
   |Full path of the home directory for the current user.
   Masked as `.` if the safe mode is SERVER or SECURE.
   |===
   [[note-docdatetime]]^[1]^ Only reflects the last modified time of the source document file.
   It does not consider the last modified time of files which are included.

   [[note-sourcedateepoch]]^[2]^ If the SOURCE_DATE_EPOCH environment variable is set, the value assigned to this attribute is built from a UTC date object that corresponds to the timestamp (as an integer) stored in that environment variable.
   This override offers one way to make the conversion reproducible.
   See the {url-epoch}[source date epoch specification] for more information about the SOURCE_DATE_EPOCH environment variable.
   Otherwise, the date is expressed in the local time zone, which is reported as a time zone offset (e.g., `-0600`) or UTC if the time zone offset is 0).
   To force the use of UTC, set the `TZ=UTC` environment variable when invoking Asciidoctor.

   == Compliance attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |attribute-missing
   |`drop` +
   `drop-line` +
   `*skip*` +
   `warn`
   |{y}
   |{n}
   |Controls how xref:unresolved-references.adoc#missing[missing attribute references] are handled.

   |attribute-undefined
   |`drop` +
   `*drop-line*`
   |{y}
   |{n}
   |Controls how xref:unresolved-references.adoc#undefined[attribute unassignments] are handled.

   |compat-mode
   |_empty_
   |{n}
   |{n}
   |Controls when the legacy parsing mode is used to parse the document.

   |experimental
   |_empty_
   |{n}
   |{y}
   |Enables xref:macros:ui-macros.adoc[] and the xref:macros:keyboard-macro.adoc[].

   |reproducible
   |_empty_
   |{n}
   |{y}
   |Prevents last-updated date from being added to HTML footer or DocBook info element.
   Useful for storing the output in a source code control system as it prevents spurious changes every time you convert the document.
   Alternately, you can use the SOURCE_DATE_EPOCH environment variable, which sets the epoch of all source documents and the local datetime to a fixed value.

   |skip-front-matter
   |_empty_
   |{n}
   |{y}
   |Consume YAML-style frontmatter at top of document and store it in `front-matter` attribute.
   //<<front-matter-added-for-static-site-generators>>
   |===

   [#builtin-attributes-i18n]
   == Localization and numbering attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |appendix-caption
   |_any_ +
   `*Appendix*`
   |{y}
   |{n}
   |Label added before an xref:sections:appendix.adoc[appendix title].

   |appendix-number
   |_character_ +
   (`@`)
   |{n}
   |{n}
   |Sets the seed value for the appendix number sequence.^[<<note-number,1>>]^

   |appendix-refsig
   |_any_ +
   `*Appendix*`
   |{y}
   |{n}
   |Signifier added to Appendix title cross references.

   |caution-caption
   |_any_ +
   `*Caution*`
   |{y}
   |{n}
   |Text used to label CAUTION admonitions when icons aren't enabled.

   |chapter-number
   |_number_ +
   (`0`)
   |{n}
   |{n}
   |Sets the seed value for the chapter number sequence.^[<<note-number,1>>]^
   _Book doctype only_.

   |chapter-refsig
   |_any_ +
   `*Chapter*`
   |{y}
   |{n}
   |Signifier added to Chapter titles in cross references.
   _Book doctype only_.

   |chapter-signifier
   |_any_
   |{n}
   |{n}
   |xref:sections:chapters.adoc[Label added to level 1 section titles (chapters)].
   _Book doctype only_.

   |example-caption
   |_any_ +
   `*Example*`
   |{y}
   |{n}
   |Text used to label example blocks.

   |example-number
   |_number_ +
   (`0`)
   |{n}
   |{n}
   |Sets the seed value for the example number sequence.^[<<note-number,1>>]^

   |figure-caption
   |_any_ +
   `*Figure*`
   |{y}
   |{n}
   |Text used to label images and figures.

   |figure-number
   |_number_ +
   (`0`)
   |{n}
   |{n}
   |Sets the seed value for the figure number sequence.^[<<note-number,1>>]^

   |footnote-number
   |_number_ +
   (`0`)
   |{n}
   |{n}
   |Sets the seed value for the footnote number sequence.^[<<note-number,1>>]^

   |important-caption
   |_any_ +
   `*Important*`
   |{y}
   |{n}
   |Text used to label IMPORTANT admonitions when icons are not enabled.

   |lang
   |_BCP 47 language tag_ +
   (`en`)
   |{n}
   |{y}
   |Language tag specified on document element of the output document.
   Refer to https://html.spec.whatwg.org/#the-lang-and-xml:lang-attributes[the lang and xml:lang attributes section^] of the HTML specification to learn about the acceptable values for this attribute.

   |last-update-label
   |_any_ +
   `*Last updated*`
   |{y}
   |{y}
   |Text used for “Last updated” label in footer.

   |listing-caption
   |_any_
   |{n}
   |{n}
   |Text used to label listing blocks.

   |listing-number
   |_number_ +
   (`0`)
   |{n}
   |{n}
   |Sets the seed value for the listing number sequence.^[<<note-number,1>>]^

   |manname-title
   |_any_ +
   (`Name`)
   |{n}
   |{y}
   |Label for program name section in the man page.

   |nolang
   |_empty_
   |{n}
   |{y}
   |Prevents `lang` attribute from being added to root element of the output document.

   |note-caption
   |_any_ +
   `*Note*`
   |{y}
   |{n}
   |Text used to label NOTE admonitions when icons aren't enabled.

   |part-refsig
   |_any_ +
   `*Part*`
   |{y}
   |{n}
   |Signifier added to Part titles in cross references.
   _Book doctype only_.

   |part-signifier
   |_any_
   |{n}
   |{n}
   |xref:sections:chapters.adoc[Label added to level 0 section titles (parts)].
   _Book doctype only_.

   |preface-title
   |_any_
   |{n}
   |{n}
   |Title text for an anonymous preface when `doctype` is `book`.

   |section-refsig
   |_any_ +
   `*Section*`
   |{y}
   |{n}
   |Signifier added to title of numbered sections in cross reference text.

   |table-caption
   |_any_ +
   `*Table*`
   |{y}
   |{n}
   |Text of label prefixed to table titles.

   |table-number
   |_number_ +
   (`0`)
   |{n}
   |{n}
   |Sets the seed value for the table number sequence.^[<<note-number,1>>]^

   |tip-caption
   |_any_ +
   `*Tip*`
   |{y}
   |{n}
   |Text used to label TIP admonitions when icons aren't enabled.

   |toc-title
   |_any_ +
   `*Table of Contents*`
   |{y}
   |{y}
   |xref:toc:title.adoc[Title for table of contents].

   |untitled-label
   |_any_ +
   `*Untitled*`
   |{y}
   |{y}
   |Default document title if document doesn't have a document title.

   |version-label
   |_any_ +
   `*Version*`
   |{y}
   |{y}
   |See xref:document:version-label.adoc[].

   |warning-caption
   |_any_ +
   `*Warning*`
   |{y}
   |{n}
   |Text used to label WARNING admonitions when icons aren't enabled.
   |===

   == Document metadata attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |app-name
   |_any_
   |{n}
   |{y}
   |Adds `application-name` meta element for mobile devices inside HTML document head.

   |author
   |_any_
   |Extracted from author info line
   |{y}
   |Can be set automatically via the author info line or explicitly.
   See xref:document:author-information.adoc[].

   |authorinitials
   |_any_
   |Extracted from `author` attribute
   |{y}
   |Derived from the author attribute by default.
   See xref:document:author-information.adoc[].

   |authors
   |_any_
   |Extracted from author info line
   |{y}
   |Can be set automatically via the author info line or explicitly as a comma-separated value list.
   See xref:document:author-information.adoc[].

   |copyright
   |_any_
   |{n}
   |{y}
   |Adds `copyright` meta element in HTML document head.

   |doctitle
   |_any_
   |Yes, if document has a doctitle
   |{y}
   |See xref:document:title.adoc#reference-doctitle[doctitle attribute].

   |description
   |_any_
   |{n}
   |{y}
   |Adds xref:document:metadata.adoc#description[description] meta element in HTML document head.

   |email
   |_any_
   |Extracted from author info line
   |{y}
   |Can be any inline macro, such as a URL.
   See xref:document:author-information.adoc[].

   |firstname
   |_any_
   |Extracted from author info line
   |{y}
   |See xref:document:author-information.adoc[].

   |front-matter
   |_any_
   |Yes, if front matter is captured
   |n/a
   |If `skip-front-matter` is set via the API or CLI, any YAML-style frontmatter skimmed from the top of the document is stored in this attribute.

   |keywords
   |_any_
   |{n}
   |{y}
   |Adds xref:document:metadata.adoc#keywords[keywords] meta element in HTML document head.

   |lastname
   |_any_
   |Extracted from author info line
   |{y}
   |See xref:document:author-information.adoc[].

   |middlename
   |_any_
   |Extracted from author info line
   |{y}
   |See xref:document:author-information.adoc[].

   |orgname
   |_any_
   |{n}
   |{y}
   |Adds `<orgname>` element value to DocBook info element.

   |revdate
   |_any_
   |Extracted from revision info line
   |{y}
   |See xref:document:revision-information.adoc[].

   |revremark
   |_any_
   |Extracted from revision info line
   |{y}
   |See xref:document:revision-information.adoc[].

   |revnumber
   |_any_
   |Extracted from revision info line
   |{y}
   |See xref:document:revision-information.adoc[].

   |title
   |_any_
   |{n}
   |{y}
   |Value of `<title>` element in HTML `<head>` or main DocBook `<info>` of output document.
   Used as a fallback when the document title is not specified.
   See xref:document:title.adoc#title-attr[title attribute].
   |===

   == Section title and table of contents attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |idprefix
   |_valid XML ID start character_ +
   `*_*`
   |{y}
   |{n}
   |Prefix of auto-generated section IDs.
   See xref:sections:id-prefix-and-separator.adoc#prefix[Change the ID prefix].

   |idseparator
   |_valid XML ID character_ +
   `*_*`
   |{y}
   |{n}
   |Word separator used in auto-generated section IDs.
   See xref:sections:id-prefix-and-separator.adoc#separator[Change the ID word separator].

   |leveloffset
   |{startsb}+-{endsb}0{endash}5
   |{n}
   |{n}
   |Increases or decreases level of headings below assignment.
   A leading + or - makes the value relative.
   //<<include-partitioning>>

   |partnums
   |_empty_
   |{n}
   |{n}
   |Enables numbering of parts.
   See xref:sections:part-numbers-and-labels.adoc#partnums[Number book parts].
   _Book doctype only_.

   |sectanchors
   |_empty_
   |{n}
   |{n}
   |xref:sections:title-links.adoc#anchor[Adds anchor in front of section title] on mouse cursor hover.

   |sectids
   |*_empty_*
   |{y}
   |{n}
   |Generates and assigns an ID to any section that does not have an ID.
   See xref:sections:auto-ids.adoc#disable[Disable automatic ID generation].

   |sectlinks
   |_empty_
   |{n}
   |{n}
   |xref:sections:title-links.adoc[Turns section titles into self-referencing links].

   |sectnums
   |_empty_ +
   `all`
   |{n}
   |{n}
   |xref:sections:numbers.adoc[Numbers sections] to depth specified by `sectnumlevels`.

   |sectnumlevels
   |0{endash}5 +
   (`3`)
   |{n}
   |{n}
   |xref:sections:numbers.adoc#numlevels[Controls depth of section numbering].

   |title-separator
   |_any_
   |{n}
   |{y}
   |Character used to xref:document:subtitle.adoc[separate document title and subtitle].

   |toc
   |_empty_[=`auto`] +
   `auto` +
   `left` +
   `right` +
   `macro` +
   `preamble`
   |{n}
   |{y}
   |Turns on xref:toc:index.adoc[table of contents] and specifies xref:toc:position.adoc[its location].

   |toclevels
   |1{endash}5 +
   (`2`)
   |{n}
   |{y}
   |xref:toc:levels.adoc[Maximum section level to display].

   |fragment
   |_empty_
   |{n}
   |{y}
   |Informs parser that document is a fragment and that it shouldn't enforce proper section nesting.
   |===

   == General content and formatting attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |asset-uri-scheme
   |_empty_ +
   `http` +
   (`https`)
   |{n}
   |{y}
   |Controls protocol used for assets hosted on a CDN.

   |cache-uri
   |_empty_
   |{n}
   |{y}
   |Cache content read from URIs.
   //<<caching-uri-content>>

   |data-uri
   |_empty_
   |{n}
   |{y}
   |Embed graphics as data-uri elements in HTML elements so file is completely self-contained.
   //<<managing-images>>

   |docinfo
   |_empty_[=`private`] +
   `shared` +
   `private` +
   `shared-head` +
   `private-head` +
   `shared-footer` +
   `private-footer`
   |{n}
   |{y}
   |Read input from one or more DocBook info files.
   //<<naming-docinfo-files>>

   |docinfodir
   |_directory path_
   |{n}
   |{y}
   |Location of docinfo files.
   Defaults to directory of source file if not specified.
   //<<locating-docinfo-files>>

   |docinfosubs
   |_comma-separated substitution names_ +
   (`attributes`)
   |{n}
   |{y}
   |AsciiDoc substitutions that are applied to docinfo content.
   //<<attribute-substitution-in-docinfo-files>>

   |doctype
   |`*article*` +
   `book` +
   `inline` +
   `manpage`
   |{y}
   |{y}
   |Output document type.
   //<<document-types>>

   |eqnums
   |_empty_[=`AMS`] +
   `AMS` +
   `all` +
   `none`
   |{n}
   |{y}
   |Controls automatic equation numbering on LaTeX blocks in HTML output (MathJax).
   If the value is AMS, only LaTeX content enclosed in an `+\begin{equation}...\end{equation}+` container will be numbered.
   If the value is all, then all LaTeX blocks will be numbered.
   See https://docs.mathjax.org/en/v2.5-latest/tex.html#automatic-equation-numbering[equation numbering in MathJax].

   |hardbreaks-option
   |_empty_
   |{n}
   |{n}
   |xref:blocks:hard-line-breaks.adoc#per-document[Preserve hard line breaks].

   |hide-uri-scheme
   |_empty_
   |{n}
   |{n}
   |xref:macros:links.adoc#hide-uri-scheme[Hides URI scheme] for raw links.

   |media
   |`prepress` +
   `print` +
   (`screen`)
   |{n}
   |{y}
   |Specifies media type of output and enables behavior specific to that media type.
   _PDF converter only_.

   |nofooter
   |_empty_
   |{n}
   |{y}
   |Turns off footer.
   //<<footer-docinfo-files>>

   |nofootnotes
   |_empty_
   |{n}
   |{y}
   |Turns off footnotes.
   //<<user-footnotes>>

   |noheader
   |_empty_
   |{n}
   |{y}
   |Turns off header.
   //<<doc-header>>

   |notitle
   |_empty_
   |{n}
   |{y}
   |xref:document:title.adoc#hide-or-show[Hides the doctitle in an embedded document].
   Mutually exclusive with the `showtitle` attribute.

   |outfilesuffix
   |*_file extension_* +
   _ex._ .html
   |{y}
   |{y}
   |File extension of output file, including dot (`.`), such as `.html`.
   // <<navigating-between-source-files>>

   |pagewidth
   |_integer_ +
   (`425`)
   |{n}
   |{y}
   |Page width used to calculate the absolute width of tables in the DocBook output.

   |relfileprefix
   |_empty_ +
   _path segment_
   |{n}
   |{n}
   |The path prefix to add to relative xrefs.
   //<<navigating-between-source-files>>

   |relfilesuffix
   |*_file extension_* +
   _path segment_ +
   _ex._ .html
   |{y}
   |{n}
   |The path suffix (e.g., file extension) to add to relative xrefs.
   Defaults to the value of the `outfilesuffix` attribute.
   (Preferred over modifying outfilesuffix).
   //|<<navigating-between-source-files>>

   |show-link-uri
   |_empty_
   |{n}
   |{n}
   |Prints the URI of a link after the link text.
   _PDF converter only_.

   |showtitle
   |_empty_
   |{n}
   |{y}
   |xref:document:title.adoc#hide-or-show[Displays the doctitle in an embedded document].
   Mutually exclusive with the `notitle` attribute.

   |stem
   |`_empty_`[=`asciimath`] +
   `asciimath` +
   `latexmath`
   |{n}
   |{y}
   |Enables xref:stem:index.adoc[mathematics processing and interpreter].

   |table-frame
   |(`all`) +
   `ends` +
   `sides` +
   `none`
   |{n}
   |{n}
   |Controls default value for `frame` attribute on tables.

   |table-grid
   |(`all`) +
   `cols` +
   `rows` +
   `none`
   |{n}
   |{n}
   |Controls default value for `grid` attribute on tables.

   |table-stripes
   |(`none`) +
   `even` +
   `odd` +
   `hover` +
   `all`
   |{n}
   |{n}
   |Controls default value for `stripes` attribute on tables.

   |tabsize
   |_integer_ (≥ 0)
   |{n}
   |{n}
   |Converts tabs to spaces in verbatim content blocks (e.g., listing, literal).

   |webfonts
   |*_empty_*
   |{y}
   |{y}
   |Control whether webfonts are loaded when using the default stylesheet.
   When set to empty, uses the default font collection from Google Fonts.
   A non-empty value replaces the `family` query string parameter in the Google Fonts URL.

   |xrefstyle
   |`full` +
   `short` +
   `basic`
   |{n}
   |{n}
   |xref:macros:xref-text-and-style.adoc#cross-reference-styles[Formatting style to apply to cross reference text].
   |===

   == Image and icon attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |iconfont-cdn
   |_url_ +
   (default CDN URL)
   |{n}
   |{y}
   |If not specified, uses the cdnjs.com service.
   Overrides CDN used to link to the Font Awesome stylesheet.

   |iconfont-name
   |_any_ +
   (`font-awesome`)
   |{n}
   |{y}
   |Overrides the name of the icon font stylesheet.
   //<<icons>>

   |iconfont-remote
   |*_empty_*
   |{y}
   |{y}
   |Allows use of a CDN for resolving the icon font.
   Only relevant used when value of `icons` attribute is `font`.

   |icons
   |_empty_[=`image`] +
   `image` +
   `font`
   |{n}
   |{y}
   |Chooses xref:macros:icons.adoc#icons-attribute[images or font icons] instead of text for admonitions.
   Any other value is assumed to be an icontype and sets the value to empty (image-based icons).

   |iconsdir
   |_directory path_ +
   _url_ +
   _ex._ ./images/icons
   |{y}
   |{n}
   |Location of non-font-based image icons.
   Defaults to the _icons_ folder under `imagesdir` if `imagesdir` is specified and `iconsdir` is not specified.

   |icontype
   |`jpg` +
   (`png`) +
   `gif` +
   `svg`
   |{n}
   |{n}
   |File type for image icons.
   Only relevant when using image-based icons.

   |imagesdir
   |*_empty_* +
   _directory path_ +
   _url_
   |{y}
   |{n}
   |Location of image files.
   |===

   == Source highlighting and formatting attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |coderay-css
   |(`class`) +
   `style`
   |{n}
   |{y}
   |Controls whether CodeRay uses CSS classes or inline styles.

   |coderay-linenums-mode
   |`inline` +
   (`table`)
   |{n}
   |{n}
   |Sets how CodeRay inserts line numbers into source listings.

   |coderay-unavailable
   |_empty_
   |{n}
   |{y}
   |Instructs processor not to load CodeRay.
   Also set if processor fails to load CodeRay.

   |highlightjsdir
   |_directory path_ +
   _url_ +
   (default CDN URL)
   |{n}
   |{y}
   |Location of the highlight.js source code highlighter library.

   |highlightjs-theme
   |_highlight.js style name_ +
   (`github`)
   |{n}
   |{y}
   |Name of theme used by highlight.js.

   |prettifydir
   |_directory path_ +
   _url_ +
   (default CDN URL)
   |{n}
   |{y}
   |Location of non-CDN prettify source code highlighter library.

   |prettify-theme
   |_prettify style name_ +
   (`prettify`)
   |{n}
   |{y}
   |Name of theme used by prettify.

   |prewrap
   |*_empty_*
   |{y}
   |{n}
   |xref:asciidoctor:html-backend:verbatim-line-wrap.adoc[Wrap wide code listings].

   |pygments-css
   |(`class`) +
   `style`
   |{n}
   |{y}
   |Controls whether Pygments uses CSS classes or inline styles.

   |pygments-linenums-mode
   |(`table`) +
   `inline`
   |{n}
   |{n}
   |Sets how Pygments inserts line numbers into source listings.

   |pygments-style
   |_Pygments style name_ +
   (`default`)
   |{n}
   |{y}
   |Name of style used by Pygments.

   |pygments-unavailable
   |_empty_
   |{n}
   |{y}
   |Instructs processor not to load Pygments.
   Also set if processor fails to load Pygments.

   |rouge-css
   |(`class`) +
   `style`
   |{n}
   |{y}
   |Controls whether Rouge uses CSS classes or inline styles.

   |rouge-linenums-mode
   |`inline` +
   (`table`)
   |{n}
   |{n}
   |Sets how Rouge inserts line numbers into source listings.
   _`inline` not yet supported by Asciidoctor._
   See https://github.com/asciidoctor/asciidoctor/issues/3641[asciidoctor#3641].

   |rouge-style
   |_Rouge style name_ +
   (`github`)
   |{n}
   |{y}
   |Name of style used by Rouge.

   |rouge-unavailable
   |_empty_
   |{n}
   |{y}
   |Instructs processor not to load Rouge.
   Also set if processor fails to load Rouge.

   |source-highlighter
   |`coderay` +
   `highlight.js` +
   `pygments` +
   `rouge`
   |{n}
   |{y}
   |xref:verbatim:source-highlighter.adoc[Specifies source code highlighter].
   Any other value is permitted, but must be supported by a custom syntax highlighter adapter.

   |source-indent
   |_integer_
   |{n}
   |{n}
   |Normalize block indentation in source code listings.
   //<<normalize-block-indentation>>

   |source-language
   |_source code language name_
   |{n}
   |{n}
   |xref:verbatim:source-highlighter.adoc[Default language for source code blocks].

   |source-linenums-option
   |_empty_
   |{n}
   |{n}
   |Turns on line numbers for source code listings.
   |===

   == HTML styling attributes

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |copycss
   |*_empty_* +
   _file path_
   |{y}
   |{y}
   |Copy CSS files to output.
   Only relevant when the `linkcss` attribute is set.
   //<<applying-a-theme>>

   |css-signature
   |_valid XML ID_
   |{n}
   |{y}
   |Assign value to `id` attribute of HTML `<body>` element.
   *Preferred approach is to assign an ID to document title*.

   |linkcss
   |_empty_
   |{n}
   |{y}
   |Links to stylesheet instead of embedding it.
   Can't be unset in SECURE mode.
   //<<styling-the-html-with-css>>

   |max-width
   |CSS length (e.g. 55em, 12cm, etc)
   |{n}
   |{y}
   |Constrains maximum width of document body.
   *Not recommended.
   Use CSS stylesheet instead.*

   |stylesdir
   |_directory path_ +
   _url_ +
   `*.*`
   |{y}
   |{y}
   |Location of CSS stylesheets.
   //<<creating-a-theme>>

   |stylesheet
   |*_empty_* +
   _file path_
   |{y}
   |{y}
   |CSS stylesheet file name.
   An empty value tells the converter to use the default stylesheet.
   //<<applying-a-theme>>

   |toc-class
   |_valid CSS class name_ +
   (`*toc*`) or (`*toc2*`) if toc=left
   |{n}
   |{y}
   |CSS class on the table of contents container.
   //<<user-toc>>
   |===

   == Manpage attributes

   The attribute in this section are only relevant when using the manpage doctype and/or backend.

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|Header Only .>|Notes

   |mantitle
   |_any_
   |Based on content.
   |{y}
   |Metadata for man page output.
   //<<man-pages>>

   |manvolnum
   |_any_
   |Based on content.
   |{y}
   |Metadata for man page output.
   //<<man-pages>>

   |manname
   |_any_
   |Based on content.
   |{y}
   |Metadata for man page output.
   //<<man-pages>>

   |manpurpose
   |_any_
   |Based on content
   |{y}
   |Metadata for man page output.
   //<<man-pages>>

   |man-linkstyle
   |_link format pattern_ +
   (`blue R <>`)
   |{n}
   |{y}
   |Link style in man page output.
   //<<man-pages>>

   |mansource
   |_any_
   |{n}
   |{y}
   |Source (e.g., application and version) the man page describes.
   //<<man-pages>>

   |manmanual
   |_any_
   |{n}
   |{y}
   |Manual name displayed in the man page footer.
   //<<man-pages>>
   |===

   == Security attributes

   Since these attributes deal with security, they can only be set from the API or CLI.

   [cols="30m,20,^10,^10,30"]
   |===
   .>|Name .>|Allowable Values .>|Set By Default .>|API/CLI Only .>|Notes

   |allow-uri-read
   |_empty_
   |{n}
   |{y}
   |Allows data to be read from URLs.
   //<<include-uri>>

   |max-attribute-value-size
   |_integer_ (≥ 0) +
   `*4096*`
   |If safe mode is SECURE
   |{y}
   |Limits maximum size (in bytes) of a resolved attribute value.
   Default value is only set in SECURE mode.
   Since attributes can reference attributes, it's possible to create an output document disproportionately larger than the input document without this limit in place.

   |max-include-depth
   |_integer_ (≥ 0) +
   `*64*`
   |{y}
   |{y}
   |Curtail infinite include loops and to limit the opportunity to exploit nested includes to compound the size of the output document.
   //<<include-directive>>
   |===

   [[note-number]]^[1]^ The `-number` attributes are created and managed automatically by the AsciiDoc processor for numbered blocks.
   They are only used if the corresponding `-caption` attribute is set (e.g., `listing-caption`) and the block has a title.
   In Asciidoctor, setting the `-number` attributes will influence the next number used for subsequent numbered blocks of that type.
   However, you should not rely on this behavior as it is subject to change in future revisions of the language.
   // end::table[]


/docs/modules/attributes/pages/document-attributes.adoc
=======================================================

.. code-block: asciidoc

   = Document Attributes

   Each document holds a set of name-value pairs called document attributes.
   //Document attributes are an unordered collection of key-value pairs named attributes that are stored directly on the document.
   These attributes provide a means of configuring the AsciiDoc processor, declaring document metadata, and defining reusable content.
   This page introduces document attributes and answers some questions about the terminology used when referring to them.

   == What are document attributes?

   Document attributes are effectively document-scoped variables for the AsciiDoc language.
   The AsciiDoc language defines a set of built-in attributes, and also allows the author (or extensions) to define additional document attributes, which may replace built-in attributes when permitted.

   Built-in attributes either provide access to read-only information about the document and its environment or allow the author to configure behavior of the AsciiDoc processor for a whole document or select regions.
   Built-in attributes are effectively unordered.
   User-defined attribute serve as a powerful text replacement tool.
   User-defined attributes are stored in the order in which they are defined.

   Here's a summary of some of the things document attributes are used for:

   * Provide access to document information
   * Define document metadata
   * Turn on or turn off built-in features
   * Configure built-in features
   * Declare the location of assets, like images
   * Store content for reuse throughout a document

   Let's look closer at the different types of document attributes.

   == Types of document attributes

   Document attributes fall into the following groups.

   Built-in attributes:: Built-in attributes add, configure, and control common features in a document.
   Many built-in attributes only take effect when defined in the document header with an attribute entry.
   +
   Boolean attributes are a subgroup of the built-in attribute.
   If a boolean attribute is defined, but not given a value (i.e., set), it's in the "on" state.
   If the attribute is not defined (i.e., not set), it's in the "off" state.
   In that regard, these attributes act as a switch.
   Their sole function is to turn on or turn off a feature.

   User-defined attributes::
   A user-defined attribute is any attribute that the author sets that isn't reserved by the AsciiDoc language or an extension.
   Most of the time, user-defined attributes are used as a text replacement tool.
   These attributes allow the author to define named, reusable content.
   Thus, instead of having to repeat text throughout the document, such as a product name, that text can be defined in an attribute and referenced by its name instead.
   This technique helps to keep the document DRY, which stands for "`Don't Repeat Yourself`".

   == What does defining a document attribute mean?

   * have default values in the case of built-in attributes
   * have no value in the case of boolean attributes and built-in attributes with default values
   * have a single line value
   * have a value that xref:wrap-values.adoc[spans multiple, contiguous lines]
   * have a value that includes basic inline AsciiDoc syntax, such as:
   ** attribute references
   ** text formatting (if wrapped in a xref:pass:pass-macro.adoc#inline-pass[pass macro])
   ** inline macros (if wrapped in a xref:pass:pass-macro.adoc#inline-pass[pass macro])

   But there are certain limitations to be aware of.
   Document attributes cannot:

   * have a value that includes AsciiDoc block content, such as:
   ** lists
   ** multiple paragraphs
   ** blocks (tables, sidebars, examples, etc)
   ** other whitespace-dependent markup

   == What does setting a document attribute mean?

   * be set (turned on)

   == What does unsetting a document attribute mean?

   * be unset (turned off) with a leading (preferred) or trailing `!` added to the name

   == Where are document attributes defined, set, and unset?

   Document attributes can be declared in the:

   * document header as an xref:attribute-entries.adoc[attribute entry]
   * document body as an xref:attribute-entries.adoc[attribute entry]
   * API via the `:attributes` option
   * CLI via the `-a` option
   * override locked attributes assigned from the command line

   == What does referencing a document attribute mean?

   Referencing a document attribute means replacing an attribute name with that attribute's value.
   A document attribute can be referenced in the document using the syntax `+{name}+`, where `name` is the name of the attribute.

   == Where can document attributes be referenced?

   A document attribute can be referenced anywhere in the document where the attributes substitution is applied.
   Generally speaking, the xref:subs:attributes.adoc[attributes substitution] is applied to the value of an attribute entry, titles, paragraph text, list text, the value of an element attribute, and the target of a macro.

   A document attribute can only be referenced after it has been defined.


/docs/modules/attributes/pages/names-and-values.adoc
====================================================

.. code-block: asciidoc

   = Attribute Entry Names and Values

   == Valid built-in names

   Built-in attribute names are reserved and can't be re-purposed for user-defined attribute names.
   The built-in attribute names are listed in the xref:document-attributes-ref.adoc[] and xref:character-replacement-ref.adoc[].

   [#user-defined]
   == Valid user-defined names

   User-defined attribute names must:

   * be at least one character long,
   * begin with a word character (a-z, 0-9, or _), and
   * only contain word characters and hyphens (-).

   A user-defined attribute name cannot contain dots (.) or spaces.
   Although uppercase characters are permitted in an attribute name, the name is converted to lowercase before being stored.
   For example, `URL-REPO` and `URL-Repo` are treated as `url-repo` when a document is loaded or converted.
   A best practice is to only use lowercase letters in the name and avoid starting the name with a number.

   == Attribute value types and assignment methods

   Depending on the attribute, its value may be an empty string, an integer such as 5 or 2, or a string of characters like your name or a URL.
   Attributes that accept string values may include references to other attributes and inline macros.
   Values can't contain complex, multi-line block elements such as tables or sidebars.

   An attribute's value may be assigned by default when the value is left empty in an attribute entry or the value may be assigned explicitly by the user.
   The type of value an attribute accepts and whether it uses a default value, has multiple built-in values, accepts a user-defined value, or requires a value to be explicitly assigned depends on the attribute.

   === Built-in values

   Many built-in attributes have one or more built-in values.
   One of these values may be designated as the attribute's default value.
   The AsciiDoc processor will fall back to this default value if you set the attribute but leave the value empty.
   Additionally, the processor automatically sets numerous built-in attributes at processing time and assigns them their default values unless you explicitly unset the attribute or assign it another value.
   For instance, the processor automatically sets all of the xref:character-replacement-ref.adoc[character replacement attributes].

   If you want to use the non-default value of a built-in attribute, you need to set it and assign it an alternative value.

   === Empty string values

   The value for built-in boolean attributes is always left empty in an attribute entry since these attributes only turn on or turn off a feature.
   During processing, the AsciiDoc processor assigns any activated boolean attributes an _empty string_ value.

   === Explicit values

   You must explicitly assign a value to an attribute when:

   * it doesn't have a default value,
   * you want to override the default value, or
   * it's a user-defined attribute.

   The type of explicit value a built-in attribute accepts depends on the attribute.
   User-defined attributes accept string values.
   Long explicit values can be xref:wrap-values.adoc[wrapped].

   ////
   For example,

   [source]
   ----
   :keywords: content engineering, branch collisions, 42, {meta-topics}, FTW <1> <2>
   ----
   <1> The xref:header:metadata.adoc#keywords[built-in keywords attribute] doesn't have a default value, so you must explicitly assign it a value when you set it.
   <2> Attributes that accept string values may include <<attribute-reference,references to other attributes>>, e.g, `+{meta-topics}+`.
   See the xref:document-attributes-ref.adoc[Document Attributes Reference] for information about each built-in attribute's accepted value types.

   You must explicitly assign a value to a built-in attribute when you want to override its default value.
   For instance, when a section in a document is assigned the appendix style, that section title will be automatically prefixed with a label and a letter that signifies that section's order, e.g., Appendix A, by default.
   Let's override the default letter ordering and use a number instead.

   [source]
   ----
   :appendix-number: 1
   ----

   Now the first section assigned the appendix style will be prefixed Appendix 1, the second, Appendix 2, and so forth.

   === User-defined values

   The value field of a built-in attribute is left empty if it's a boolean attribute.
   The value can also be left empty if the attribute has an inferred default value and that's the value you want to use.

   When you're setting a built-in attribute, the value may be _empty string_ if it's a boolean attribute, a built-in value, or a user-defined value.
   However, if the document attribute is built-in, the value may be _empty
   Depending on the type of document attribute--built-in or user-defined--the value may be _empty string_,
   Some attributes may not have a value explicitly assigned to them.
   When a value is not specified, the value _empty string_ is assumed.
   An empty value is often used to set a boolean attribute (thus making an empty value implicitly true).

   * it's a built-in attribute doesn't accept any explicitly set values because it only turns on a behavior,
   * it's a built-in attribute that uses a default value when its value is left empty, or
   * the attribute was set, but not assigned a value by accident.
   In this case, it will use its default value if applicable or output an error message when the document is processed.
   ////


/docs/modules/attributes/pages/wrap-values.adoc
===============================================

.. code-block: asciidoc

   = Wrap Attribute Entry Values

   == Soft wrap attribute values

   If the value of a document attribute is too long to fit on the screen, you can split the value across multiple lines with a line continuation to make it easier to read.

   A [.term]*line continuation* consists of a space followed by a backslash character (`\`) at the end of the line.
   The line continuation must be placed on every line of a multiline value except for the last line.
   Lines that follow a line continuation character may be indented, but that indentation will not be included in the value.

   When the processor reads the attribute value, it folds the line continuation, the newline, and any ensuing indentation into a single space.
   In this case, we can say that the attribute value has soft wraps.

   Let's assume we want to define an attribute named `description` that has a very long value.
   We can split this attribute up across multiple lines by placing a line continuation at the end of each line of the value except for the last.

   .A multiline attribute value with soft wraps
   [source]
   ----
   :description: If you have a very long line of text \
   that you need to substitute regularly in a document, \
   you may find it easier to split the value neatly in the header \
   so it remains readable to folks looking at the AsciiDoc source.
   ----

   If the line continuation is missing, the processor will assume it has found the end of the value and will not include subsequent lines in the value of the attribute.

   [#hard]
   == Hard wrap attribute values

   You can force an attribute value to hard wrap by inserting a hard line break replacement in front of the line continuation.
   A hard line break replace is a space followed by a plus character (`+`).

   As described in the previous section, the line continuation, newline, and ensuing indentation is normally replaced with a space.
   This would prevent the hard line break replacement from being recognized.
   However, the processor accounts for this scenario and leaves the newline intact.

   Let's assume we want to define an attribute named `haiku` that requires hard line breaks.
   We can split this attribute up across multiple lines and preserve those line breaks by placing a hard line break replacement followed by a line continuation at the end of each line of the value except for the last.

   .A multiline attribute value with hard wraps
   [source]
   ----
   :haiku: Write your docs in text, + \
   AsciiDoc makes it easy, + \
   Now get back to work!
   ----

   This syntax ensures that the newlines are preserved in the output as hard line breaks.


/docs/modules/attributes/pages/attribute-entry-substitutions.adoc
=================================================================

.. code-block: asciidoc

   = Attribute Entry Substitutions

   The AsciiDoc processor automatically applies substitutions from the header substitution group to the value of an attribute entry prior to the assignment, regardless of where the attribute entry is declared in the document.
   The header substitution group, which replaces xref:subs:special-characters.adoc[special characters] followed by xref:subs:attributes.adoc[attribute references], is applied to the values of attribute entries, regardless of whether the entries are defined in the header or in the document body.
   This is the same group that gets applied to metadata lines (author and revision information) in the document header.

   That means that any inline formatting in an attribute value isn't interpreted because:

   . inline formatting is not applied when the AsciiDoc processor sets an attribute, and
   . inline formatting is not applied when an attribute is referenced since the relevant substitutions come before attributes are resolved.

   [#pass-macro]
   == Change substitutions when assigning a value

   If you want the value of an attribute entry to be used *as is* (not subject to substitutions), or you want to alter the substitutions that are applied, you can enclose the value in the xref:pass:pass-macro.adoc[inline pass macro] (i.e., `\pass:[]`).
   The inline pass macro accepts a list of zero or more substitutions in the target slot, which can be used to control which substitutions are applied to the value.
   If no substitutions are specified, no substitutions will be applied.

   In order for the inline macro to work in this context, it must completely surround the attribute value.
   If it's used anywhere else in the value, it will be ignored.

   Here's how to prevent substitutions from being applied to the value of an attribute entry:

   [source]
   ----
   :cols: pass:[.>2,.>4]
   ----

   This might be useful if you're referencing the attribute in a place that depends on the unaltered text, such as the value of the `cols` attribute on a table.

   Here's how we can apply the xref:subs:quotes.adoc[quotes substitution] to the value of an attribute entry:

   [source]
   ----
   :app-name: pass:quotes[MyApp^2^]
   ----

   Internally, the value is stored as `MyApp<sup>2</sup>`.
   You can inspect the value stored in an attribute using this trick:

   [source]
   ----
   [subs=attributes+]
   ------
   {app-name}
   ------
   ----

   You can also specify the substitution using the single-character alias, `q`.

   [source]
   ----
   :app-name: pass:q[MyApp^2^]
   ----

   The inline pass macro kind of works like an attribute value preprocessor.
   If the processor detects that an inline pass macro completely surrounds the attribute value, it:

   . reads the list of substitutions from the target slot of the macro
   . unwraps the value from the macro
   . applies the substitutions to the value

   If the macro is absent, the value is processed with the header substitution group.

   == Substitutions for attributes defined outside the document

   Unlike attribute entries, substitutions are *not* applied to the value of an attribute passed in to the AsciiDoc processor.
   An attribute can be passed into the AsciiDoc processor using the `-a` CLI option or the `:attributes` API option.
   When attributes are defined external to the document, the value must be prepared so it's ready to be referenced as is.
   If the value contains XML special characters, that means those characters must be pre-escaped.
   The exception would be if you intend for XML/HTML tags in the value to be preserved.
   If the value needs to reference other attributes, those values must be pre-replaced.

   Let's consider the case when the value of an attribute defined external to the document contains an ampersand.
   In order to reference this attribute safely in the AsciiDoc document, the ampersand must be escaped:

    $ asciidoctor -a equipment="a bat &amp; ball" document.adoc

   You can reference the attribute as follows:

   [,asciidoc]
   ----
   To play, you'll need {equipment}.
   ----

   If the attribute were to be defined in the document, this escaping would not be necessary.

   [,asciidoc]
   ----
   :equipment: a bat & ball
   ----

   That's because, in contrast, substitutions are applied to the value of an attribute entry.

   == Change substitutions when referencing an attribute

   You can also change the substitutions that are applied to an attribute at the time it is resolved.
   This is done by manipulating the substitutions applied to the text where it is referenced.
   For example, here's how we could get the processor to apply quote substitutions to the value of an attribute:

   [source]
   ----
   :app-name: MyApp^2^

   [subs="specialchars,attributes,quotes,replacements,macros,post_replacements"]
   The application is called {app-name}.
   ----

   Notice that we've swapped the order of the `attributes` and `quotes` substitutions.
   This strategy is akin to post-processing the attribute value.


/docs/modules/attributes/pages/inline-attribute-entries.adoc
============================================================

.. code-block: asciidoc

   = Inline Attribute Entries

   An attribute reference can be used to set or unset an attribute inline as an alternative to a dedicated attribute entry line.
   This mechanism allows you to set or unset an attribute in places where attribute entries lines are not permitted, such as in a normal table cell or a list item.

   Attributes can be defined inline using the following notation:

   ----
   {set:name:value}
   ----

   The value segment is optional.
   If absent, the value defaults to empty string.
   In that case, the notation is reduced to:

   ----
   {set:name}
   ----

   If you add a `!` character after the name to unset the attribute instead:

   ----
   {set:name!}
   ----

   Here's an example that uses an inline attribute entry to set the `sourcedir` attribute to the value `src/main/java`.

   ----
   {set:sourcedir:src/main/java}
   ----

   This assignment is effectively the same as:

   ----
   :sourcedir: src/main/java
   ----

   However, it's important to understand that inline attribute assignments are processed in a different phase than attribute entry lines.
   Inline attribute entries are processed when attribute references are replaced, as part of the attributes substitution.
   Therefore, the result of the assignment is only available to attribute references that follow it.
   These assignments are not visible in the document model after the document has been loaded.

   You're strongly discouraged from using inline attribute entries unless you understand their limitations or they are a last resort for fulfilling a use case.


/docs/modules/attributes/pages/built-in-attributes.adoc
=======================================================

.. code-block: asciidoc

   = Declare Built-In Document Attributes
   :navtitle: Declare Built-In Attributes

   An AsciiDoc processor has numerous attributes reserved for special purposes.
   *Built-in attributes* add, configure, and control common features in a document.
   Many built-in attributes only take effect when defined in the document header with an attribute entry.

   == Use an attribute's default value

   Many built-in attributes have a default value.
   When you want to activate a built-in attribute and assign it its default value, you can leave the value in the attribute entry empty.

   For example, to turn on the xref:toc:index.adoc[Table of Contents for a document], you set the `toc` attribute using an attribute entry in the document header.

   [source]
   ----
   = Title of Document
   :toc:
   ----

   The default value of an activated attribute will be assigned at processing time, if:

   . it has a default value, and
   . the value in the attribute entry is left empty

   In the example above, the default value of `auto` will be assigned to `toc` since the value was left empty in the attribute entry.

   == Override an attribute's default value

   You may not want to use the default value of a built-in attribute.
   In the next example, we'll override the default value of an attribute that the AsciiDoc processor sets automatically.
   The built-in attribute `doctype` is automatically set and assigned a value of `article` at processing time.
   However, if you want to use AsciiDoc's book features, the `doctype` attribute needs to be assigned the `book` value.

   [source]
   ----
   = Title of My Document
   :doctype: book <.>
   ----
   <.> Set `doctype` in the document header and assign it the value `book`.
   Explicit values must be offset from the closing colon (`:`) by at least one space.

   To override an attribute's default value, you have to explicitly assign a value when you set the attribute.
   The value assigned to an attribute in the document header replaces the default value (assuming the attribute is not locked via the CLI or API).

   //Change to override a default value with a user-defined value
   === Override a default asset directory value

   You can also use the built-in asset directory attributes to customize the base path to images (default: `_empty_`), icons (default: `./images/icons`), stylesheets (default: `./stylesheets`) and JavaScript files (default: `./javascripts`).

   .Replace the default values of the built-in asset directory attributes
   [source]
   ----
   = My Document
   :imagesdir: ./images
   :iconsdir: ./icons
   :stylesdir: ./styles
   :scriptsdir: ./js
   ----

   The four built-in attributes in the example above have default values that are automatically set at processing time.
   However, in the example, they're being set and assigned explicit values in the document header.
   This explicit user-defined value replaces the default value (assuming the attribute is not locked via the CLI or API).

   ////
   Many built-in attributes have a built-in value that is designated as the default value.
   This default value is assigned when the attribute is set and its value is left empty.
   For example, the xref:sections:id.adoc#separator[ID word separator attribute] can accept <<user-values,user-defined values>> and it has one default value.
   If you set `idseparator` and leave the value empty, the default value will be assigned automatically when the document is processed.

   [source]
   ----
   :idseparator: <1>
   ----
   <1> The words in automatically generated IDs will be separated with an underscore (`_`), the attribute's default value, because the value is empty.

   To override the default value of an attribute, you have to explicitly assign a new value when you set the attribute.

   [source]
   ----
   :idseparator: - <1>
   ----
   <1> The words in automatically generated IDs will be separated with a hyphen (`-`).
   The value must be offset from the attribute's name by a space.
   ////


/docs/modules/attributes/pages/boolean-attributes.adoc
======================================================

.. code-block: asciidoc

   = Set Boolean Attributes
   // [#boolean-attribute]

   A boolean attribute is a built-in attribute that acts like a toggle.
   Its sole function is to turn on a feature or behavior.

   == Boolean attribute entry syntax

   A boolean attribute is set using an attribute entry in the header or body of a document.
   The value of a boolean value is always empty because boolean attributes in AsciiDoc only accept an _empty string_ value.
   In AsciiDoc, an attribute that is set, but has an empty value, is interpreted as the _true_ state and an attribute which is not set is interpreted as the _false_ state.
   However, a processor may interpret a value of `true` as the true state as well.

   [source]
   ----
   :name-of-a-boolean-attribute: <.>
   ----
   <.> On a new line, type a colon (`:`), directly followed by the attribute's name and then another colon (`:`).
   After the closing colon, press kbd:[Enter].
   The attribute is now set and its behavior will be applied to the document.

   == Declare a boolean attribute

   Let's use an attribute entry to turn on the built-in boolean attribute named `sectanchors`.
   When `sectanchors` is set, it xref:sections:title-links.adoc#anchor[activates an anchor in front of a section title] when a cursor hovers over it.

   [source]
   ----
   = Document Title
   :sectanchors: <.>
   ----
   <.> The value of `sectanchors` is always left empty because it's a boolean attribute.


/docs/modules/attributes/pages/custom-attributes.adoc
=====================================================

.. code-block: asciidoc

   = Declare Custom Document Attributes
   :navtitle: Declare Custom Attributes
   // [#set-user-defined]

   When you find yourself typing the same text repeatedly, or text that often needs to be updated, consider creating your own attribute.

   [#user-defined-names]
   == User-defined attribute names and values

   A user-defined attributes must have a name and explicitly assigned value.

   The attribute's name must:

   * be at least one character long,
   * begin with a word character (A-Z, a-z, 0-9, or _), and
   * only contain word characters and hyphens.

   The name cannot contain dots or spaces.

   Although uppercase characters are permitted in an attribute name, the name is converted to lowercase before being stored.
   For example, `URL` and `Url` are treated as `url`.
   A best practice is to only use lowercase letters in the name and avoid starting the name with a number.

   [[user-values]]Attribute values can:

   * be any inline content, and
   * contain line breaks, but only if an xref:wrap-values.adoc#hard[explicit line continuation] (`+`) is used.

   == Create a custom attribute and value

   A prime use case for attribute entries is to promote frequently used text and URLs to the top of the document.

   .Create a user-defined attribute and value
   [source#ex-user-set]
   ----
   :disclaimer: Don't pet the wild Wolpertingers. If you let them into your system, we're \ <.>
   not responsible for any loss of hair, chocolate, or purple socks.
   :url-repo: https://github.com/asciidoctor/asciidoctor
   ----
   <.> Long values can be xref:wrap-values.adoc[soft wrapped] using a backslash (`\`).

   Now, you can xref:reference-attributes.adoc#reference-custom[reference these attributes] throughout the document.


/docs/modules/attributes/pages/unset-attributes.adoc
====================================================

.. code-block: asciidoc

   = Unset Document Attributes
   :navtitle: Unset Attributes

   Document attributes--built-in, boolean, and custom--can be unset in the document header and document body.

   == Unset a document attribute in the header

   Document attributes are unset by adding a bang symbol (`!`) directly in front of (preferred) or after the attribute's name.
   Like when setting an attribute in a document header, the attribute entry must be on its own line.
   Don't add a value to the entry.

   [source]
   ----
   = Title
   :!name: <.>
   :name!: <.>
   ----
   <.> An attribute is unset when a `!` is prefixed to its name (preferred).
   <.> An attribute is unset when a `!` is appended to its name.

   Let's use an attribute entry to turn off the built-in boolean attribute named `sectids`.
   The AsciiDoc processor automatically sets `sectids` at processing time unless you unset it.
   The `sectids` attribute xref:sections:auto-ids.adoc[generates an ID for each section] from the section's title.

   .Unset a boolean attribute
   [source#ex-unset-boolean]
   ----
   = Document Title
   :!sectids: <.>
   ----
   <.> On a new line, type a colon (`:`), directly followed by a bang symbol (`!`), the attribute's name, and then another colon (`:`).
   After the closing colon, press kbd:[Enter].
   The attribute is now unset and its behavior won't be applied to the document.

   Once an attribute is unset, its behavior is deactivated.
   When `sectids` is unset, the AsciiDoc processor will not generate IDs from section titles at processing time.

   Let's unset the built-in attribute `example-caption`.
   This is an attribute that is set and assigned a default value of `Example` automatically by the AsciiDoc processor when you use an example block.

   .Unset an automatically declared attribute
   [source#ex-unset-built-in]
   ----
   = Title
   :!example-caption: <.>
   ----
   <.> Example blocks won't be labeled and numbered, e.g., Example 1, because the attribute controlling that behavior is unset with the leading `!`.

   == Unset a document attribute in the body

   Custom document attributes and some built-in document attributes can be turned off in the body of the document using an attribute entry and the bang symbol (`!`) as described in the previous section.
   For example, let's say you set the section numbering attribute in the header of your document; however, you don't want the two sections midway through the document to be numbered.
   To disable the numbering on these two sections, you'd unset `sectnums` before the first section you didn't want numbered and then reset it when you wanted the numbering to start again.

   [source]
   ----
   = Title
   :sectnums: <.>

   == Section Title

   :!sectnums: <.>
   == Section Title

   === Section Title

   :sectnums: <.>
   == Section Title
   ----
   <.> The `sectnums` attribute is set in the header to activate section numbering throughout the document.
   <.> `sectnums` is unset by adding a `!` to it's name.
   The `!` can be placed either before or after the attribute's name.
   The attribute entry must be placed on its own line.
   All of the sections below where the attribute is unset will not be numbered.
   <.> `sectnums` is set and all subsequent sections will be numbered.


/docs/modules/attributes/pages/reference-attributes.adoc
========================================================

.. code-block: asciidoc

   = Reference Document Attributes
   :navtitle: Reference Attributes
   :disclaimer: Don't pet the wild Wolpertingers. We're not responsible for any loss \
   of hair, chocolate, or purple socks.
   :url-repo: https://github.com/asciidoctor/asciidoctor

   You'll likely want to insert the value of a user-defined or built-in document attribute in various locations throughout a document.
   To reference a document attribute for insertion, enclose the attribute's name in curly brackets (e.g., `+{name-of-attribute}+`).
   This inline element is called an *attribute reference*.
   The AsciiDoc processor replaces the attribute reference with the value of the attribute.
   To prevent this replacement, you can prefix the element with a backslash (e.g., `+\{name-of-attribute}+`).

   [#reference-custom]
   == Reference a custom attribute

   Before you can reference a custom (i.e., user-defined) attribute in a document, it must first be declared using an attribute entry in the document header.
   In <<ex-set-custom>>, we declare two user-defined attributes that we'll later be able to reference.

   .Custom attributes set in the document header
   [source#ex-set-custom,subs=+attributes]
   ----
   = Ops Manual
   :disclaimer: {disclaimer}
   :url-repo: {url-repo}
   ----

   Once you've set and assigned a value to a document attribute, you can reference that attribute throughout your document.
   In <<ex-reference>>, the attribute `url-repo` is referenced twice and `disclaimer` is referenced once.

   .Custom attributes referenced in the document body
   [source#ex-reference]
   ----
   Asciidoctor is {url-repo}[open source]. <.>

   WARNING: {disclaimer} <.>
   If you're missing a lime colored sock, file a ticket in
   the {url-repo}/issues[Asciidoctor issue tracker]. <.>
   (Actually, please don't).
   ----
   <.> Attribute references can be used in macros.
   <.> Attribute references can be used in blocks, such as xref:blocks:admonitions.adoc[admonitions], and inline.
   Since there isn't an empty line between the `disclaimer` reference and the next sentence, the sentence will be directly appended to the end of the attribute's value when it's processed.
   <.> The reference to the `url-repo` attribute is inserted to build the complete URL address, which is interpreted as a xref:macros:url-macro.adoc[URL macro].

   As you can see below, the attribute references are replaced with the corresponding attribute value when the document is processed.

   ====
   Asciidoctor is {url-repo}[open source].

   WARNING: {disclaimer}
   If you're missing a lime colored sock, file a ticket in the {url-repo}/issues[Asciidoctor issue tracker].
   Actually, please don't.
   ====

   [#reference-built-in]
   == Reference a built-in attribute

   A built-in document attribute (i.e., a document attribute which is automatically set by the processor) is referenced the same way as a custom (i.e., user-defined) document attribute.
   For instance, an AsciiDoc processor automatically sets these supported xref:character-replacement-ref.adoc[character replacement attributes].
   That means that you can reference them throughout your document without having to create an attribute entry in its header.

   [source]
   ----
   TIP: Wolpertingers don't like temperatures above 100{deg}C. <.>
   Our servers don't like them either.
   ----
   <.> Reference the character replacement attribute `deg` by enclosing its name in a pair of curly brackets (`{` and `}`).

   As you can see below, the attribute reference is replaced with the attribute's value when the document is processed.

   TIP: Wolpertingers don't like temperatures above 100{deg}C.
   Our servers don't like them either.

   == Escape an attribute reference

   You may have a situation where a sequence of characters occurs in your content that matches the syntax of an AsciiDoc attribute reference, but is not, in fact, an AsciiDoc attribute reference.
   For example, if you're documenting path templating, you may need to reference a replaceable section of a URL path, which is also enclosed in curly braces (e.g., /items/\{id}).
   In this case, you need a way to escape the attribute reference so the AsciiDoc processor knows to skip over it.
   Otherwise, the processor could warn about a missing attribute reference or perform an unexpected replacement.
   AsciiDoc provides several ways to escape an attribute reference.

   === Prefix with a backslash

   You can escape an attribute reference by prefixing it with a backslash.
   When the processor encounters this syntax, it will remove the backslash and pass through the remainder of what looks to be an attribute reference as written.

   In <<ex-backslash-escape>>, the attribute reference is escaped using a backslash.

   .An attribute reference escaped using a backslash
   [#ex-backslash-escape]
   ----
   In the path /items/\{id}, id is a path parameter.
   ----

   In the output of <<ex-backslash-escape>>, we can see that the `\{id}` expression in the path is preserved.

   ====
   In the path /items/\{id}, id is a path parameter.
   ====

   Keep in mind that the backslash will only be recognized if the text between the curly braces is a valid attribute name.
   If the syntax that follows the backslash does not match an attribute reference, the backslash will not be removed during processing.

   === Enclose in a passthrough

   You can also escape an attribute reference by enclosing it in an inline passthrough.
   In this case, the processor uses the normal substitution rules for the passthrough type you have chosen.

   In <<ex-passthrough-escape>>, the attribute reference is escaped by enclosing it in an inline passthrough.

   .An attribute reference escaped by enclosing it in an inline passthrough
   [#ex-passthrough-escape]
   ----
   In the path +/items/{id}+, id is a path parameter.
   ----

   In the output of <<ex-passthrough-escape>>, we can see that the `\{id}` expression in the path is preserved.

   ====
   In the path +/items/{id}+, id is a path parameter.
   ====

   When using an inline passthrough, you don't have to worry whether the curly braces form an attribute reference or not.
   All the text between the passthrough enclosure will get passed through to the output.

   === Alternative escape mechanisms

   Attribute references are replaced by the xref:subs:attributes.adoc[attributes substitution].
   Therefore, wherever you can control substitutions, you can prevent attribute references from being replaced.
   This includes the inline pass macro as well as the subs attribute on a block.
   See xref:subs:prevent.adoc#passthroughs[using passthroughs to prevent substitutions] for more details.


/docs/modules/attributes/pages/unresolved-references.adoc
=========================================================

.. code-block: asciidoc

   = Handle Unresolved References

   When you reference a missing attribute (e.g., `+{does-not-exist}+`), the AsciiDoc processor will leave the attribute reference behind.
   If you undefine an attribute on the same line as other text (e.g., `+{set:attribute-no-more!}+`), the processor will drop the whole line.
   You can tailor these behaviors using the `attribute-missing` and `attribute-undefined` attributes.
   You'll want to think about how you want the processor to handle these situations and configure the processor accordingly.

   [#missing]
   == Missing attribute

   The `attribute-missing` attribute controls how missing references are handled.
   By default, missing references are left behind so the integrity of the document is preserved and it's easy for the author to track down.

   This attribute has four possible values:

   `skip`:: leave the reference in place (default setting)
   `drop`:: drop the reference, but not the line
   `drop-line`:: drop the line on which the reference occurs (matches behavior of AsciiDoc.py)
   `warn`:: print a warning about the missing attribute

   The setting you might find of most interest is `warn`, which gives you a warning whenever the processor encounters an attribute reference that cannot be resolved, but otherwise leaves the line alone.

   Consider the following line:

   [source]
   Hello, {name}!

   Here's how the line is handled in each case, assuming the `name` attribute is not defined:

   [%autowidth]
   |===
   |`attribute-missing` value |Result

   |`skip` |Hello, \{name}!

   |`drop` |Hello, !

   |`drop-line` |{empty}

   |`warn` |`asciidoctor: WARNING: skipping reference to missing attribute: XYZ`
   |===

   .History
   NOTE: AsciiDoc.py always drops the line that contains a reference to a missing attribute (effectively `attribute-missing=drop-line`).
   This "`feature`" was a side effect of how the processor was implemented and not designed with the writer in mind.
   The behavior is frustrating for the writer because it's hard to detect where its occurring and can result in loss of important content.
   That's why Asciidoctor uses a different default behavior and, further, allows the behavior to be customized.

   There are a few cases where the `attribute-missing` attribute is not strictly honored.
   One of those cases is the include directive.
   If a missing attribute is found in the target of an include directive, the processor will issue a warning about the missing attribute and leave behind the same warning message in the converted document.

   Another case is the `ifeval` directive.
   A missing attribute reference can safely be used in the clause of the `ifeval` directive without any side effects (i.e., `drop`) since the purpose of that statement is to determine whether an attribute resolves to a value.

   === Forcing failure

   If you want the processor to fail when the document contains a missing attribute, set the `attribute-missing` attribute to `warn` and pass the `--failure-level=WARN` option to the CLI.

    $ asciidoctor -a attribute-missing=warn --failure-level=WARN doc.adoc

   The processor will convert the entire document, but the application will complete with a non-zero exit status.

   When using the API, you can consult the logger for the max severity of all messages reported or look for specific messages in the stack.
   It's up to the application code to decide how and when to terminate the application.

   [#undefined]
   == Undefined attribute

   The `attribute-undefined` attribute controls how an expression that undefines an attribute (e.g., `+{set:name!}+`) are handled.
   By default, the line containing the expression is dropped since the expression is intended to be a statement, not a content reference.

   This attribute has two possible values:

   `drop`:: substitute the expression with an empty string after processing it
   `drop-line`:: drop the line that contains this expression (default setting; matches behavior of AsciiDoc.py)

   The option `skip` doesn't make sense here since the statement is not intended to produce content.

   Consider the following declaration:

   [source]
   ----
   {set:name!}
   ----

   Depending on whether `attribute-undefined` is `drop` or `drop-line`, either the statement or the line that contains it will be discarded.
   It's reasonable to stick with the compliant behavior, drop-line, in this case.

   TIP: We recommend putting any statement that undefines an attribute on a line by itself.


/docs/modules/attributes/pages/assignment-precedence.adoc
=========================================================

.. code-block: asciidoc

   = Document Attribute Assignment Precedence
   :navtitle: Attribute Assignment Precedence

   == Default attribute value precedence

   The attribute assignment precedence, listed from highest to lowest, is:

   . An attribute defined using the API or CLI
   . An attribute defined in the document
   . The default value of the attribute, if applicable

   Let's use the `imagesdir` attribute to show how precedence works.

   The default value for the `imagesdir` attribute is an empty string.
   Therefore, if the `imagesdir` attribute is not assigned a value (either in the document, API, or CLI), the processor will assign it the default value of empty string.
   If the `imagesdir` attribute is set in the document (meaning assigned a new value, such as `images`), that value will override the default value.
   Finally, if a value is assigned to the `imagesdir` attribute via the API or CLI, that value will override both the default value and the value assigned in the document.

   It's possible to alter this order of precedence using a modifier, covered in the next section.

   == Altering the assignment precedence

   You can allow the document to reassign an attribute that is defined via the API or CLI by adding the `@` precedence modifier to the end of the attribute value or the end of the attribute name.
   Adding this modifier lowers the precedence so that an assignment in the document still wins out.
   We sometimes refer to this as "`soft setting`" the attribute.
   This feature can be useful for assigning default values for attribute, but still letting the document control its own fate.

   NOTE: The `@` modifier is removed before the assignment is made.

   Here's an example that shows how to set the `imagesdir` from the CLI with a lower precedence:

    $ asciidoctor -a imagesdir=images@ doc.adoc

   Alternately, you can place the modifier at the end of the attribute name:

    $ asciidoctor -a imagesdir@=images doc.adoc

   It's now possible to override the value of the `imagesdir` attribute from within the document:

   [source]
   ----
   = Document Title
   :imagesdir: new/path/to/images
   ----

   To soft unset an attribute from the CLI or API, you can use the following syntax:

    !name=@

   The leading `!` unsets the attribute while the `@` lowers the precedence of the assignment.
   This assignment is almost always used to unset a default value while still allowing the document to assign a new one.
   One such example is `sectids`, which is enabled by default.
   `!sectids=@` switches the setting off.

   Let's update the attribute assignment precedence list defined earlier to reflect this additional rule:

   . An attribute passed to the API or CLI whose value does not end in `@`
   . An attribute defined in the document
   . An attribute passed to the API or CLI whose value or name ends in `@`
   . The default value of the attribute, if applicable

   Regardless of whether the precedence modifier is applied, an attribute assignment always overrides the default value.


/docs/modules/attributes/pages/counters.adoc
============================================

.. code-block: asciidoc

   = Counters
   // document attributes and counters are NOT the same thing, but modifying a document attribute with the same name as the counter modifies the counter at the same time.

   Counters are used to store and display ad-hoc sequences of numbers or Latin characters.

   WARNING: Counters are a poorly defined feature in AsciiDoc and should be avoided if possible.
   If you do use counters, you should only used them for the most rudimentary use cases, such as making a sequence in a list, table column, or prose.
   You should *not* use counters to build IDs (i.e., references) or reference text.
   Using counters across the boundaries of a reference will very likely result in unexpected behavior.

   A counter is implemented as a specialized document attribute.
   You declare and display a counter using an attribute reference, where the attribute name is prefixed with `counter:` (e.g., `+{counter:name}+`).
   Since counters are attributes, counter names follow the same rules as xref:names-and-values.adoc#user-defined[attribute names].
   The most important rule to note is that letters in counter names _must be lowercase_.

   The counter value is incremented and displayed every time the `counter:` attribute reference is resolved.
   The term [.term]*increment* means to advance the attribute value to the next value in the sequence.
   If the counter value is an integer, add 1.
   If the counter value is a character, move to the next letter in the Latin alphabet (e.g., a -> b).
   The default start value of a counter is 1.

   To create a sequence starting at 1, use the simple form `+{counter:name}+` as shown here:

   [source]
   The salad calls for {counter:seq1}) apples, {counter:seq1}) oranges and {counter:seq1}) pears.

   Here's the resulting output:

   ====
   :!seq1:
   The salad calls for {counter:seq1}) apples, {counter:seq1}) oranges and {counter:seq1}) pears.
   ====

   If you want to use a counter value in a section title, you should define it first using an attribute reference.

   ----
   :seq1: {counter:seq1}
   == Section {seq1}

   The sequence in this section is {seq1}.

   :seq1: {counter:seq1}
   == Section {seq1}

   The sequence in this section is {seq1}.
   ----

   Here's the resulting output:

   ====
   :!seq1:

   :seq1: {counter:seq1}
   [discrete]
   == Section {seq1}

   The sequence in this section is {seq1}.

   :seq1: {counter:seq1}
   [discrete]
   == Section {seq1}

   The sequence in this section is {seq1}.
   ====

   To increment the counter without displaying it (i.e., to skip an item in the sequence), use the `counter2` prefix instead:

   [source]
   {counter2:seq1}

   WARNING: A `counter2` attribute reference on a line by itself will produce an empty paragraph.
   You'll need to adjoin it to the nearest content to avoid this side effect.

   To display the current value of the counter without incrementing it, reference the counter name as you would any other attribute:

   [source]
   {counter2:pnum}This is paragraph {pnum}.

   To create a character sequence, or start a number sequence with a value other than 1, specify a start value by appending it to the first use of the counter:

   [source]
   Dessert calls for {counter:seq1:A}) mangoes, {counter:seq1}) grapes and {counter:seq1}) cherries.

   CAUTION: Character sequences either run from a,b,c,...x,y,z,{,|... or A,B,C,...,X,Y,Z,[,... depending on the start value.
   Therefore, they aren't really useful for more than 26 items.

   The start value of a counter is only recognized if the counter is _unset_ at that point in the document.
   Otherwise, the start value is ignored.

   To reset a counter attribute, unset the corresponding attribute using an attribute entry.
   The attribute entry must be adjacent to a block or else it is ignored.

   [source]
   ----
   The salad calls for {counter:seq1:1}) apples, {counter:seq1}) oranges and {counter:seq1}) pears.

   :!seq1:
   Dessert calls for {counter:seq1:A}) mangoes, {counter:seq1}) grapes and {counter:seq1}) cherries.
   ----

   This gives:

   ====
   :!seq1:
   The salad calls for {counter:seq1:1}) apples, {counter:seq1}) oranges and {counter:seq1}) pears.

   :!seq1:
   Dessert calls for {counter:seq1:A}) mangoes, {counter:seq1}) grapes and {counter:seq1}) cherries.
   ====

   Here's a full example that shows how to use a counter for part numbers in a table.

   [source]
   ----
   include::example$counter.adoc[tag=base]
   ----

   Here's the output of that table:

   ====
   include::example$counter.adoc[tag=base]
   ====


/docs/modules/attributes/nav-element.adoc
=========================================

.. code-block: asciidoc

   * xref:element-attributes.adoc[]
   ** xref:positional-and-named-attributes.adoc[]
   ** xref:id.adoc[]
   ** xref:role.adoc[]
   ** xref:options.adoc[]


/docs/modules/attributes/pages/element-attributes.adoc
======================================================

.. code-block: asciidoc

   = Element Attributes

   Element attributes are a powerful means of controlling the built-in settings of individual block and inline elements in the AsciiDoc syntax.
   They can also be used to add supplemental information, such as citation metadata and fallback content, to certain elements.

   == What are element attributes?

   [.term]*Element attributes* define the built-in and user-defined settings and metadata that can be applied to an individual block element or inline element in a document (including macros).
   Although the include directive is not technically an element, element attributes can also be defined on an include directive.

   Element attributes may be positional (value only) or named (key/value pair).
   Some built-in and extension elements will map a positional attribute to a named attribute.
   Each element recognizes a predefined set of positional and/or named element attributes.
   Authors may define any number of custom element attributes for passing information to an extension or document analyzer.

   Like document attributes, there's no strict schema for element attributes, or for the value of the `options` element attribute.
   There's a core set of reserved attributes shared by all block elements and most inline elements, which includes id, role, opts, and title.
   Certain elements may reserve additional attributes and option values.
   For example, the source block reserves the `lang` attribute to set the source language and the `linenums` option to enable line numbers.
   The link macro reserves the `window` attribute to change the target window of a link and the `nofollow` option to prevent crawlers from following it.
   Otherwise, the schema for element attributes is open-ended, thus allowing extensions to use them for their own purpose.

   Element attributes are commonly used for the following purposes:

   * Declare the ID of an element
   * Turn on or turn off an individual element's built-in features
   * Configure the built-in features of an individual element
   * Apply user-defined information, such as citation metadata, fallback text, link text, and target content, to an individual element
   * Apply user-defined roles and behaviors to an individual element

   Unlike document attributes, element attributes are defined directly on the element to which they apply using an <<attribute-list,attribute list>>.

   [#attribute-list]
   == Attribute lists

   Attributes can be assigned to block and inline elements using an [.term]*attribute list* (often abbreviated as attrlist).

   .Anatomy of an attribute list
   ----
   first-positional,second-positional,named="value of named"
   ----

   Entries in an attribute list are separated by commas, excluding commas inside quotes.
   The syntax used for an attribute list entry determines whether it's a positional or named attribute.
   The space after the comma separating entries is optional.
   To learn more about how the attribute list is parsed, see xref:positional-and-named-attributes.adoc[].

   For *block elements*, the attribute list is placed inside one or more block attribute lines.
   A block attribute line is any line of text above the start of a block (e.g., the opening delimiter or simple content) that begins with `[` and ends with `]`.
   This line can be interspersed with other block metadata lines, such as the block title.
   The text enclosed in the `[` and `]` boundaries is assumed to be a valid attribute list and the line is automatically consumed.
   If the text cannot be parsed, an error message will be emitted to the log.

   .A block attribute line
   ----
   [style,second-positional,named="value of named"]
   ----

   WARNING: The opening line of a paragraph may inadvertently match the syntax of a block attribute line.
   If this happens, append `+{empty}+` to the end of the line to disrupt the syntax match.

   For *block and inline macros*, the attribute list is placed between the square brackets of the macro.
   The text in an attribute list of a block macro never needs to be escaped.
   For an inline macro, it may be necessary to escape the text in the attribute list to avoid prematurely ending the macro or unwanted substitutions.

   .A block macro with an attribute list
   ----
   name::target[first-positional,second-positional,named="value of named"]
   ----

   For *formatted text*, the attribute list is placed in the square brackets in front of the text enclosure.
   However, formatted text only supports a restricted form of the attribute list.
   Specifically, it does not support named attributes, only the attribute shorthand syntax.

   .Formatted text with an attribute list
   ----
   [#idname.rolename]*text with id and role*
   ----

   Attribute lists:

   * apply to blocks, macros, and inline elements,
   * can contain xref:positional-and-named-attributes.adoc[positional and named attributes], and
   * take precedence over xref:document-attributes.adoc[document attributes] if the element supports the override.

   As mentioned in the previous section, the schema for element attributes is open-ended.
   Any positional or named attributes that are not recognized will be stored on the element, but will not have an impact on the behavior or output.
   Extensions may use this auxiliary information to influence their behavior and/or customize the output.


/docs/modules/attributes/pages/positional-and-named-attributes.adoc
===================================================================

.. code-block: asciidoc

   = Positional and Named Attributes

   This page breaks down the difference between positional and named attributes on an element and the rules for parsing an attribute list.

   [#positional]
   == Positional attribute

   // tag::pos[]
   Entries in an attribute list that only consist of a value are referred to as positional attributes.
   The position is the 1-based index of the entry once all named attributes have been removed (so they may be interspersed).

   The positional attribute may be dually assigned to an implicit attribute name if the block or macro defines a mapping for positional attributes.
   Here are some examples of those mappings:

   * `icon:` 1 => size
   * `image:` and `image::` 1 => alt (text), 2 => width, 3 => height
   * Delimited blocks: 1 => block style and attribute shorthand
   * Other inline quoted text: 1 => attribute shorthand
   * `link:` and `xref:` 1 => text
   * Custom blocks and macros can also specify positional attributes

   For example, the following two image macros are equivalent.

   [source]
   ----
   image::sunset.jpg[Sunset,300,400]

   image::sunset.jpg[alt=Sunset,width=300,height=400]
   ----

   The second macro is the same as the first, but written out in longhand form.
   // end::pos[]

   === Block style and attribute shorthand

   The first positional attribute on all blocks (including sections) is special.
   It's used to define the xref:blocks:index.adoc#block-style[block style].
   It also supports a shorthand syntax for defining the ID, role, and options attributes.
   This shorthand syntax can also be used on formatted text, even though formatted text doesn't technically support attributes.

   The attribute shorthand is inspired by the HAML and Slim template languages as a way of saving the author some typing.
   Instead of having to use the longhand form of a name attribute, it's possible to compress the assignment to a value prefixed by a special marker.
   The markers are mapped as follows:

   * `#` - ID
   * `.` - role
   * `%` - option

   Each shorthand entry is placed directly adjacent to previous one, starting immediately after the optional block style.
   The order of the entries does not matter, except for the style, which must come first.

   Here's an example that shows how to set an ID on a section using this shorthand syntax:

   ----
   [#custom-id]
   == Section with Custom ID
   ----

   The shorthand entry must follow the block style, if present.
   Here's an example that shows how to set an ID on an appendix section using this shorthand syntax:

   ----
   [appendix#custom-id]
   == Appendix with Custom ID
   ----

   Here's an example of a block that uses the shorthand syntax to set the ID, a role, and an option for a list.
   Specifically, this syntax sets the ID to `rules`, adds the role `prominent`, and sets the option `incremental`.

   ----
   [#rules.prominent%incremental]
   * Work hard
   * Play hard
   * Be happy
   ----

   A block can have multiple roles and options, so these shorthand entries may be repeated.
   Here's an example that shows how to set several options on a table.
   Specifically, this syntax sets the `header`, `footer`, and `autowidth` options.

   ----
   [%header%footer%autowidth]
   |===
   |Header A |Header B
   |Footer A |Footer B
   |===
   ----

   This shorthand syntax also appears on formatted text.
   Here's an example that shows how to set the ID and add a role to a strong phrase.
   Specifically, this syntax sets the ID to `free-world` and adds the `goals` role.

   ----
   [#free-world.goals]*free the world*
   ----

   Formatted text does not support a style, so the first and only positional attribute is always the shorthand syntax.

   [#named]
   == Named attribute

   // tag::name[]
   A named attribute consists of a name and a value separated by an `=` character (e.g., `name=value`).

   If the value contains a space, comma, or quote character, it must be enclosed in double or single quotes (e.g., `name="value with space"`).
   In all other cases, the surrounding quotes are optional.

   If the value contains the *same* quote character used to enclose the value, the quote character in the value must be escaped by prefixing it with a backslash (e.g., `value="the song \"Dark Horse\""`).

   If enclosing quotes are used, they are dropped from the parsed value and the preceding backslash is dropped from any escaped quotes.

   [#unset]
   === Unset a named attribute

   To undefine a named attribute, set the value to `None` (case sensitive).
   // end::name[]

   == Attribute list parsing

   The source text that's used to define attributes for an element is referred to as an [.term]*attrlist*.
   An attrlist is always enclosed in a pair of square brackets.
   This applies for block attributes as well as attributes on a block or inline macro.
   The processor splits the attrlist into individual attribute entries, determines whether each entry is a positional or named attribute, parses the entry accordingly, and assigns the result as an attribute on the node.

   The rules for what defines the boundaries of an individual attribute, and whether the attribute is positional or named, are defined below.
   In these rules, `name` consists of a word character (letter or numeral) followed by any number of word or `-` characters (e.g., `see-also`).

   * Attribute references are expanded before the attrlist is parsed (i.e., the attributes substitution is applied).
   * Parsing an attribute proceeds from the beginning of the attribute list string or after a previously identified delimiter (`,`).
   ** The first character of an attribute list cannot be a tab or space.
   For subsequent attributes, any leading space or tab characters are skipped.
   * If a valid attribute name is found, and it is followed by an equals sign (=), then the parser recognizes this as a named attribute.
   The text after the equals sign (=) and up to the next comma or end of list is taken as the attribute value.
   Space and tab characters around the equals sign (=) and at the end of the value are ignored.
   * Otherwise, this is a positional attribute with a value that ends at the next delimiter or end of list.
   Any space or tab characters at the boundaries of the value are ignored.
   * To parse the attribute value:
   ** If the first character is not a quote, the string is read until the next delimiter or end of string.
   ** If the first character is a double quote (i.e., `"`), then the string is read until the next unescaped double quote or, if there is no closing double quote, the next delimiter.
   If there is a closing double quote, the enclosing double quote characters are removed and escaped double quote characters are unescaped; if not, the initial double quote is retained.
   ** If the next character is a single quote (i.e., `'`), then the string is read until the next unescaped single quote or, if there is no closing single quote, the next delimiter.
   If there is a closing single quote, the enclosing single quote characters are removed and escaped single quote characters are unescaped; if not, the initial single quote is retained.
   If there is a closing single quote, and the first character is not an escaped single quote, substitutions are performed on the value as described in <<Substitutions>>.

   .When to escape a closing square bracket
   ****
   Since the terminal of an attrlist is a closing square bracket, it's sometimes necessary to escape a closing square bracket if it appears in the value of an attribute.

   In line-oriented syntax such as a block attribute list, a block macro, and an include directive, you do not have to escape closing square brackets that appear in the attrlist itself.
   That's because the parser already knows to look for the closing square bracket at the end of the line.

   If a closing square bracket appears in the attrlist of an inline element, such as an inline macro, it usually has to be escaped using a backslash or by using the character reference `+&#93;+`.
   There are some exceptions to this rule, such as a link macro in a footnote, which are influenced by the substitution order.
   ****

   == Substitutions

   // tag::subs[]
   Recall that attribute references are expanded before the attrlist is parsed.
   Therefore, it's not necessary to force substitutions to be applied to a value if you're only interested in applying the attributes substitution.
   The attributes substitution has already been applied at this point.

   If the attribute name (in the case of a positional attribute) or value (in the case of a named attribute) is enclosed in single quotes (e.g., `+citetitle='Processed by https://asciidoctor.org'+`), and the attribute is defined in an attrlist on a block, then the xref:subs:index.adoc#normal-group[normal substitution group] is applied to the value at assignment time.
   No special processing is performed, aside from the expansion of attribute references, if the value is not enclosed in quotes or is enclosed in double quotes.

   If the value contains the same quote character used to enclose the value, escape the quote character in the value by prefixing it with a backslash (e.g., `+citetitle='A \'use case\' diagram, generated by https://plantuml.com'+`).
   // end::subs[]


/docs/modules/attributes/pages/id.adoc
======================================

.. code-block: asciidoc

   = ID Attribute
   :page-aliases: ids.adoc

   You can assign an identifier (i.e., unique name) to a block or inline element using the `id` attribute.
   The `id` attribute is a xref:positional-and-named-attributes.adoc#named[named attribute].
   Its purpose is to identify the element when linking, scripting, or styling.
   Thus, the identifier can only be used once in a document.

   An ID:

   . provides an internal link or cross reference anchor for an element
   . can be used for adding additional styling to specific elements (e.g., via a CSS ID selector)

   You can assign an ID to blocks using the shorthand hash (`+#+`) syntax, longhand (`id=`) syntax, or the legacy anchor (`[[]]`) syntax.
   You can assign an ID to inline elements using the shorthand hash (`+#+`) syntax or by adding an anchor adjacent to the inline element using the anchor (`[[]]`) syntax.

   == Valid ID characters

   AsciiDoc does not restrict the set of characters that can be used for an ID when the ID is defined using the named `id` attribute.
   All the language requires in this case is that the value be non-empty.
   When the ID is defined using the shorthand hash syntax or the anchor syntax, the acceptable characters is more limited (for example, spaces are not permitted).
   Regardless, it's not advisable to exploit the ability to use any characters the AsciiDoc syntax allows.
   The reason to be cautious is because the ID is passed through to the output, and not all output formats afford the same latitude.
   For example, XML is far more restrictive about which characters are permitted in an ID value.

   To ensure portability of your IDs, it's best to conform to a universal standard.
   The standard we recommend following is a https://www.w3.org/TR/REC-xml/#NT-Name[Name] value as defined by the XML specification.
   At a high level, the first character of a Name must be a letter, colon, or underscore and the optional following characters must be a letter, colon, underscore, hyphen, period, or digit.
   You should not use any space characters in an ID.
   Starting the ID with a digit is less likely to be problematic, but still best to avoid.
   It's best to use lowercase letters whenever possible as this solves portability problem when using case-insensitive platforms.

   When the AsciiDoc processor auto-generates IDs for section titles and discrete headings, it adheres to this standard.

   Here are examples of valid IDs (according to the recommendations above):

   [listing]
   ----
   install
   data-structures
   error-handling
   subject-and-body
   unset_an_attribute
   ----

   Here are examples of invalid IDs:

   [listing]
   ----
   install the gem
   3 blind mice
   -about-the-author
   ----

   ////
   BlockId

   NOTE: Section pending
   ////

   == Block assignment

   // tag::bl[]
   You can assign an ID to a block using the shorthand syntax, the longhand syntax, or a legacy block anchor.

   In the shorthand syntax, you prefix the name with a hash (`#`) in the first position attribute.

   [source]
   ----
   [#goals]
   * Goal 1
   * Goal 2
   ----

   In the longhand syntax, you use a standard named attribute.

   [source]
   ----
   [id=goals]
   * Goal 1
   * Goal 2
   ----

   In the legacy block anchor syntax, you surround the name with double square brackets:

   [source]
   ----
   [[goals]]
   * Goal 1
   * Goal 2
   ----

   Let's say you want to create a blockquote from an open block and assign it an ID and xref:role.adoc[role].
   You add `quote` (the block style) in front of the `#` (the ID) in the first attribute position, as this example shows:

   [source]
   ----
   [quote.movie#roads,Dr. Emmett Brown]
   ____
   Roads? Where we're going, we don't need roads.
   ____
   ----

   TIP: The order of ID and role values in the shorthand syntax does not matter.

   CAUTION: If the ID contains a `.`, you must define it using either a longhand assignment (e.g., `id=classname.propertyname`) or the anchor shorthand (e.g., `+[[classname.propertyname]]+`).
   This is necessary since the `.` character in the shorthand syntax is the delimiter for a role, and thus gets misinterpreted as such.
   // end::bl[]

   == Inline assignment

   // tag::in[]
   The id (`#`) shorthand can be used on inline quoted text.

   .Quoted text block with id assignment using shorthand syntax
   ----
   [#free_the_world]*free the world*
   ----
   // end::in[]

   ////
   .Quoted text block with `id` assignment using traditional AsciiDoc syntax
   ----
   [[free_the_world]]*free the world*
   ----
   ////

   [#anchor]
   == Use an ID as an anchor

   An anchor (aka ID) can be defined almost anywhere in the document, including on a section title, on a discrete heading, on a paragraph, on an image, on a delimited block, on an inline phrase, and so forth.
   The anchor is declared by enclosing a _valid_ XML Name in double square brackets (e.g., `+[[idname]]+`) or using the shorthand ID syntax (e.g., `[#idname]`) at the start of an attribute list.
   The shorthand form is the preferred syntax.

   The double square bracket form requires the ID to start with a letter, an underscore, or a colon, ensuring the ID is portable.
   According to the https://www.w3.org/TR/REC-xml/#NT-Name[XML Name] rules, a portable ID may not begin with a number, even though a number is allowed elsewhere in the name.
   The shorthand form in an attribute list does not impose this restriction.

   === On block element

   To reference a block element, you must assign an ID to that block.
   You can define an ID using the shorthand syntax:

   .Assign an ID to a paragraph using shorthand syntax
   [source]
   ----
   include::example$id.adoc[tag=block-id-shorthand]
   ----

   or you can define it using the legacy block anchor syntax:

   .Assign an ID to a paragraph using legacy block anchor syntax
   [source]
   ----
   include::example$id.adoc[tag=block-id-brackets]
   ----

   === As an inline anchor

   You can also define an anchor anywhere in content that receives normal substitutions (specifically the macros substitution).
   You can enclose the ID in double square brackets:

   .Define an inline anchor
   [source]
   ----
   include::example$id.adoc[tag=anchor-brackets]
   ----

   or using the shorthand ID syntax.

   .Define an inline anchor using shorthand syntax
   [source]
   ----
   include::example$id.adoc[tag=anchor-shorthand]
   ----

   === On a list item

   In addition to being able to define anchors on sections and blocks, anchors can be defined inline wherever you can type normal text (anchors are a macros substitution).
   The anchors in the text get replaced with invisible anchor points in the output.

   For example, you would not put an anchor in front of a list item:

   .*Invalid* position for an anchor ID in front of a list item
   [source]
   ----
   include::example$id.adoc[tag=anchor-wrong]
   ----

   Instead, you would put it at the start of the text of the list item:

   .Define an inline anchor on a list item
   [source]
   ----
   include::example$id.adoc[tag=anchor-list-item]
   ----

   For a description list, the anchor must be placed at the start of the term:

   .Define an inline anchor on a description list item
   [source]
   ----
   include::example$id.adoc[tag=anchor-dlist-item]
   ----

   You can add multiple anchors to a list item or description list term.
   However, only the first anchor is registered for use as an xref within the document.
   The remaining anchors are auxiliary and are used for making deep links (i.e., accessible from a URL fragment).

   === On an inline image

   You cannot currently define an ID on an inline image.
   Instead you need to place an inline anchor adjacent to it.

   .Placing an inline anchor adjacent to an inline image using shorthand
   [source]
   ----
   include::example$id.adoc[tag=inline-anchor-brackets]
   ----

   Instead of the shorthand form, you can use the macro `anchor` to achieve the same goal.

   .Placing an inline anchor adjacent to an inline image using a macro
   [source]
   ----
   include::example$id.adoc[tag=inline-anchor-macro]
   ----

   == Add additional anchors to a section

   To add additional anchors to a section (with or without an autogenerated ID), place the anchors in front of the title (without any spaces).

   .Add additional anchors to a section using inline anchors
   [source]
   ----
   include::example$id.adoc[tag=anchor-header-extra]
   ----

   CAUTION: You cannot use inline anchors in a section title to make internal references to that section.
   The processor will flag these as possible invalid references.
   These additional anchors are only intended for making deep links using an alternate ID.

   Remember that inline anchors are discovered wherever the macros substitution is applied (e.g., paragraph text).
   If text content doesn't belong somewhere, neither does an inline anchor point.

   == Customize automatic xreftext

   It's possible to customize the text that will be used in the cross reference link (called `xreflabel`).
   If not defined, the AsciiDoc processor does it best to find suitable text (the solution differs from case to case).
   In case of an image, the image caption will be used.
   In case of a section header, the text of the section's title will be used.

   To define the `xreflabel`, add it in the anchor definition right after the ID (separated by a comma).

   .An anchor ID with a defined xreflabel. The caption will not be used as link text.
   [source]
   ----
   include::example$id.adoc[tag=anchor-xreflabel]
   ----


/docs/modules/attributes/pages/role.adoc
========================================

.. code-block: asciidoc

   = Role Attribute
   :page-aliases: roles.adoc

   You can assign one or more roles to blocks and most inline elements using the `role` attribute.
   The `role` attribute is a xref:positional-and-named-attributes.adoc#named[named attribute].
   Even though the attribute name is singular, it may contain multiple (space-separated) roles.
   Roles may also be defined using a shorthand (dot-prefixed) syntax.

   A role:

   . adds additional semantics to an element
   . can be used to apply additional styling to a group of elements (e.g., via a CSS class selector)
   . may activate additional behavior if recognized by the converter

   TIP: The `role` attribute in AsciiDoc always get mapped to the `class` attribute in the HTML output.
   In other words, role names are synonymous with HTML class names, thus allowing output elements to be identified and styled in CSS using class selectors (e.g., `sidebarblock.role1`).

   == Assign roles to blocks

   You can assign roles to blocks using the shorthand dot (`.`) syntax or the longhand (`role=`) syntax.

   === Shorthand role syntax for blocks

   To assign a role to a block, prefix the value with a dot (`.`) in style style position of an attribute list.
   The dot implicitly sets the `role` attribute.

   .Sidebar block with a role assigned using the shorthand dot
   [source#ex-block]
   ----
   [.rolename]
   ****
   This is a sidebar with a role assigned to it, rolename.
   ****
   ----

   You can assign multiple roles to a block by prefixing each value with a dot (`.`).

   .Sidebar with two roles assigned using the shorthand dot
   [source#ex-two-roles]
   ----
   [.role1.role2]
   ****
   This is a sidebar with two roles assigned to it, role1 and role2.
   ****
   ----

   The role values are turned into a space-separated list of values, `role1 role2`.

   === Formal role syntax for blocks

   You can define the roles using a named attribute instead, which is the longhand syntax for adding roles to an element.
   When using this syntax, add the attribute name `role` followed by the equals sign (`=`) then the role name or names to any position in the block attribute list.

   .Sidebar block with a role assigned using the formal syntax
   [source#ex-block-formal]
   ----
   [role=rolename]
   ****
   This is a sidebar with one role assigned to it, rolename.
   ****
   ----

   Separate multiple role values using spaces.
   Since the value has spaces, it's easier to read if enclosed in quotes, though the quotes are not strictly required.

   .Sidebar with two roles assigned using the formal syntax
   [source#ex-two-roles-formal]
   ----
   [role="role1 role2"]
   ****
   This is a sidebar with two roles assigned to it, role1 and role2.
   ****
   ----

   In this form, the value of the role attribute is already in the right form to be passed through to the output.
   No additional processing is done on it.

   This longhand syntax can also be used on inline macros, but it cannot be used with formatted (aka quoted) text.

   == Assign roles to formatted inline elements

   You can assign roles to inline elements that are enclosed in formatting syntax, such as bold (`+*+`), italic (`+_+`), and monospace (`++`++`).
   To assign a role to an inline element that's enclosed in formatting syntax block, prefix the value with a dot (`.`) in an attribute list.

   .Inline role assignments using shorthand syntax
   [source#ex-role-dot]
   ----
   This sentence contains [.application]*bold inline content* that's assigned a role.

   This sentence contains [.varname]`monospace text` that's assigned a role.
   ----

   The HTML source code that is output from <<ex-role-dot>> is shown below.

   .HTML source code produced by <<ex-role-dot>>
   [source#ex-role-html,html]
   ----
   <p>This sentence contains <strong class="application">bold inline content</strong> that&#8217;s assigned a role.</p>

   <p>This sentence contains <code class="varname">monospace text</code> that&#8217;s assigned a role.</p>
   </div>
   ----

   As you can see from this output, roles in AsciiDoc are translated to CSS class names in HTML.
   Thus, roles are an ideal way to annotated elements in your document so you can use CSS to uniquely style them.

   The role is often used on a phrase to represent semantics you might have expressed using a dedicated element in DocBook or DITA.

   ////
   Using the shorthand notation, an id can also be specified:

   [source]
   ----
   [#idname.rolename]`monospace text`
   ----

   which produces:

   [source,html]
   ----
   <a id="idname"></a><code class="rolename">monospace text</code>
   ----
   ////


/docs/modules/attributes/pages/options.adoc
===========================================

.. code-block: asciidoc

   = Options Attribute

   The `options` attribute (often abbreviated as `opts`) is a versatile xref:positional-and-named-attributes.adoc#named[named attribute] that can be assigned one or more values.
   It can be defined globally as document attribute as well as a block attribute on an individual block.

   There is no strict schema for options.
   Any options which are not recognized are ignored.

   == Assign options to blocks

   You can assign one or more options to a block using the shorthand or formal syntax for the `options` attribute.

   === Shorthand options syntax for blocks

   To assign an option to a block, prefix the value with a percent sign (`%`) in an attribute list.
   The percent sign implicitly sets the `options` attribute.

   .Sidebar block with an option assigned using the shorthand dot
   [source#ex-block]
   ----
   [%option]
   ****
   This is a sidebar with an option assigned to it, named option.
   ****
   ----

   You can assign multiple options to a block by prefixing each value with a percent sign (`%`).

   .Sidebar with two options assigned using the shorthand dot
   [source#ex-two-options]
   ----
   [%option1%option2]
   ****
   This is a sidebar with two options assigned to it, named option1 and option2.
   ****
   ----

   For instance, consider a table with the three built-in option values, `header`, `footer`, and `autowidth`, assigned to it.
   <<ex-table-short>> shows how the values are assigned using the shorthand notation.

   .Table with three options assigned using the shorthand syntax
   [source#ex-table-short]
   ----
   [%header%footer%autowidth,cols=2*~]
   |===
   |Cell A1 |Cell B1

   |Cell A2 |Cell B2

   |Cell A3 |Cell B3
   |===
   ----

   === Formal options syntax for blocks

   Explicitly set `options` or `opts`, followed by the equals sign (`=`), and then the value in an attribute list.

   .Sidebar block with an option assigned using the formal syntax
   [source#ex-block-formal]
   ----
   [opts=option]
   ****
   This is a sidebar with an option assigned to it, named option.
   ****
   ----

   Separate multiple option values with commas (`,`).

   .Sidebar with three options assigned using the formal syntax
   [source#ex-three-roles-formal]
   ----
   [opts="option1,option2"]
   ****
   This is a sidebar with two options assigned to it, option1 and option2.
   ****
   ----

   Let's revisit the table in <<ex-table-short>> that has the three built-in option values, `header`, `footer`, and `autowidth`, assigned to it using the shorthand notation (`%`).
   Instead of using the shorthand notation, <<ex-table-formal>> shows how the values are assigned using the formal syntax.

   .Table with three options assigned using the formal syntax
   [source#ex-table-formal]
   ----
   [cols=2*~,opts="header,footer,autowidth"]
   |===
   |Cell A1 |Cell B1

   |Cell A2 |Cell B2

   |Cell A3 |Cell B3
   |===
   ----

   == Using options with other attributes

   Let's consider `options` when combined with other attributes.
   The following example shows how to structure an attribute list when you have style, role, and options attributes.

   .Shorthand
   [source]
   ----
   [horizontal.properties%step] <.> <.> <.>
   property 1:: does stuff
   property 2:: does different stuff
   ----
   <.> xref:blocks:styles.adoc[The block style attribute], declared as `horizontal` in this example, is a positional attribute.
   A block style value is always placed at the start of the attribute list.
   <.> `properties` is prefixed with a dot (`.`), signifying that it's assigned to the xref:role.adoc[role attribute].
   The role and options attributes can be set in either order, i.e., `[horizontal%step.properties]`.
   <.> The percent sign (`%`) sets the `options` attribute and assigns the `step` value to it.

   When you use the formal syntax, the positional and named attributes are separated by commas (`,`).

   .Formal
   [source]
   ----
   [horizontal,role=properties,opts=step] <.>
   property 1:: does stuff
   property 2:: does different stuff
   ----
   <.> Like in the shorthand example, named attributes such as `role` and `options` can be set in any order in the attribute list once any xref:positional-and-named-attributes.adoc#positional[positional attributes] are set.


/docs/modules/attributes/nav-ref.adoc
=====================================

.. code-block: asciidoc

   * Reference
   ** xref:ROOT:syntax-quick-reference.adoc[]
   ** xref:ROOT:faq.adoc[]
   ** xref:ROOT:asciidoc-vs-markdown.adoc[]
   ** xref:document-attributes-ref.adoc[]
   ** xref:character-replacement-ref.adoc[]
   ** xref:ROOT:glossary.adoc[]


/docs/modules/attributes/pages/attribute-entries.adoc
=====================================================

.. code-block: asciidoc

   = Attribute Entries

   == What is an attribute entry?

   Before you can use a document attribute in your document, you have to declare it.
   An [.term]*attribute entry* is the primary mechanism for defining a document attribute in an AsciiDoc document.
   You can think of an attribute entry as a global variable assignment for AsciiDoc.
   The document attribute it creates becomes available from that point forward in the document.
   Attribute entries are also frequently used to toggle features.

   An attribute entry consists of two parts: an attribute *name* and an attribute *value*.
   The attribute name comes first, followed by the optional value.
   Each attribute entry must be entered on its own line.
   An attribute entry starts with an opening colon (`:`), directly followed by the attribute's name, and then a closing colon (`:`).
   This [.term]*sets* -- that is, turns on -- the document attribute so you can use it in your document.

   [source]
   ----
   :name-of-an-attribute: <.>
   ----
   <.> The attribute's name is directly preceded with a opening colon (`:`) and directly followed by a closing colon (`:`).

   In many cases, you explicitly assign a value to a document attribute by entering information after its name in the attribute entry.
   The value must be offset from the closing colon (`:`) by at least one space.

   [source]
   ----
   :name-of-an-attribute: value of the attribute <.>
   ----
   <.> An explicitly assigned value is offset from the closing colon (`:`) by at least one space.
   At the end of the value, press kbd:[Enter].

   Take note that xref:attribute-entry-substitutions.adoc[header substitutions] automatically get applied to the value by default.
   That means you don't need to escape special characters such in an HTML tag.
   It also means you can reference the value of attributes which have already been defined when defining the value of an attribute.
   Attribute references in the value of an attribute entry are resolved immediately.

   [source]
   ----
   :url-org: https://example.org/projects
   :url-project: {url-org}/project-name <.>
   ----
   <.> You can reuse the value of an attribute which has already been set using using an attribute reference in the value.

   Some built-in attributes don't require a value to be explicitly assigned in an attribute entry because they're a boolean attribute or have an implied value.

   [source]
   ----
   :name-of-an-attribute: <.>
   ----
   <.> If you don't want to explicitly assign a value to the attribute, press kbd:[Enter] after the closing colon (`:`).

   When set, the value of a built-in boolean attribute is always empty (i.e., an _empty string_).
   If you set a built-in attribute and leave its value empty, the AsciiDoc processor may infer a value at processing time.

   == Where can an attribute entry be declared?

   An attribute entry is most often declared in the document header.
   For attributes that allow it (which includes general purpose attributes), the attribute entry can alternately be declared between blocks in the document body (i.e., the portion of the document below the header).

   WARNING: An attribute entry should not be declared inside the boundaries of a delimited block.
   When an attribute entry is declared inside a delimited block, the behavior is undefined.

   When an attribute is defined in the document header using an attribute entry, that's referred to as a header attribute.
   A header attribute is available to the entire document until it is unset.
   A header attribute is also accessible from the document metadata for use by built-in behavior, extensions, and other applications that need to consult its value (e.g., `source-highlighter`).

   When an attribute is defined in the document body using an attribute entry, that's simply referred to as a document attribute.
   For any attribute defined in the body, the attribute is available from the point it is set until it is unset.
   Attributes defined in the body are not available via the document metadata.

   Unless the attribute is unlocked, it can be unset or assigned a new value in the document header or body.
   However, note that unsetting or redefining a header attribute that controls behavior in the document body usually has no affect.
   See the xref:document-attributes-ref.adoc[] for where in a document each attribute can be set.

   == Defining document attributes without an attribute entry

   Document attributes can also be declared (set with an optional value or unset) outside the document via the CLI and API.
   The attribute entry syntax is not used in these cases.
   Rather, they are declared using the provided option.
   For the API, attributes are declared using the `:attributes` option (which supports various entry formats).
   For the CLI, the attribute is declared using the `-a` option.

   When an attribute is assigned a value outside of the document, the value is stored as is, meaning substitutions are not applied to it.
   That also means that the xref:subs:index.adoc[special characters and quote substitutions] are not applied to the value of that attribute when it is referenced in the document.
   However, subsequent substitutions, such as the macro substitution, do get applied.
   This behavior is due to that fact that the attributes substitution is applied after the special characters and quote substitutions.
   In order to force these substitutions to be applied to the value of the attribute, you must alter the substitution order at the point of reference.
   Here's an example using the inline pass macro.

   [,asciidoc]
   ----
   pass:a,q[{attribute-with-formatted-text}]
   ----

   When an attribute is declared from the command line or API, it is implicitly a document header attribute.
   By default, the attribute becomes locked (i.e., hard set or unset) and thus cannot be changed by the document.
   This behavior can be changed by adding an `@` to the end of the attribute name or value (i.e., the soft set modifier).
   See xref:assignment-precedence.adoc[] for more information.

   The one exception to this rule is the `sectnums` attribute, which can always be changed.

   ////
   An exclamation point (`!`) before (or after) the attribute name unsets the attribute.

   [source]
   ----
   :!name: <1>
   ----
   <1> The leading `!` indicates this attribute should be unset.
   In this case, the value is ignored.

   An attribute entry must start at the beginning of the line.
   If the attribute entry follows a paragraph, it must be offset by an empty line.
   ////


/docs/modules/attributes/pages/character-replacement-ref.adoc
=============================================================

.. code-block: asciidoc

   = Character Replacement Attributes Reference
   :page-aliases: character-replacement-reference.adoc

   This page identifies built-in document attributes populated by the AsciiDoc processor that are geared towards character replacement.

   This category of attributes provide portable replacements for common typographical marks (e.g., smart quotes and symbols) and non-visible characters (e.g., empty and no break space), an escaping mechanism for characters which have special meaning in AsciiDoc (e.g., plus and colon), and passthroughs for characters which get encoded by default (e.g., less than and greater than).
   Like all document attributes, you can insert the value of any one of these attributes in your content using an xref:reference-attributes.adoc#reference-built-in[attribute reference] (e.g., `\{nbsp}`).

   NOTE: The AsciiDoc processor does not prevent you from reassigning these predefined attributes.
   However, you're encouraged to treat them as read-only.
   Only a converter should override these attributes if the output format requires the use of a different encoding scheme.

   .Built-in document attributes for character replacement
   [%autowidth,cols="^~m,^~l,^~"]
   |===
   |Attribute name |Replacement text |Appearance

   d|``blank``^[1]^
   e|nothing
   |{empty}

   |empty
   e|nothing
   |{empty}

   |sp
   e|space
   |{sp}

   |nbsp
   |&#160;
   |{nbsp}

   d|``zwsp``^[2]^
   |&#8203;
   |{zwsp}

   d|``wj``^[3]^
   |&#8288;
   |{wj}

   |apos
   |&#39;
   |{apos}

   |quot
   |&#34;
   |{quot}

   |lsquo
   |&#8216;
   |{lsquo}

   |rsquo
   |&#8217;
   |{rsquo}

   |ldquo
   |&#8220;
   |{ldquo}

   |rdquo
   |&#8221;
   |{rdquo}

   |deg
   |&#176;
   |{deg}

   |plus
   |&#43;
   |{plus}

   |brvbar
   |&#166;
   |&#166;

   |vbar
   |\|
   |{vbar}

   |amp
   |&
   |&

   |lt
   |<
   |<

   |gt
   |>
   |>

   |startsb
   |[
   |[

   |endsb
   |]
   |]

   |caret
   |^
   |^

   |asterisk
   |*
   |*

   |tilde
   |~
   |~

   |backslash
   |\
   |\

   |backtick
   |`
   |`

   |two-colons
   |::
   |::

   |two-semicolons
   |;;
   |;;

   |cpp
   |C++
   |C++

   |pp
   |&#43;&#43;
   |&#43;&#43;
   |===

   ^[1]^ An alias for the attribute `empty`, for those who find this terminology clearer.

   ^[2]^ The Zero Width Space (ZWSP) is a code point in Unicode that shows where a long word can be split if necessary.

   ^[3]^ The word joiner (WJ) is a code point in Unicode that prevents a line break at its position.

   Notice that some replacement values are Unicode characters, whereas others are numeric character references (e.g., \&#34;).
   The numeric character reference is when the Unicode character could interfere with the AsciiDoc syntax.
   In this case, it's the responsibility of the converter to transform that numeric character reference into a format that is compatible with the output format.
   For example, in the man page converter, each character reference is replaced with a troff macro.

   Thus, the abstraction of using AsciiDoc attributes for character replacements not only gives the author control over how the document is interpreted, it also helps decouple content and presentation.
   In other words, it's more portable to use an attribute reference in the content rather than hardcode a numeric character reference.


/docs/modules/attributes/partials/attribute-terms.adoc
======================================================

.. code-block: asciidoc

   [[attr-ref-def]]Attribute reference:: An attribute reference marks the location where the information stored in the value of an attribute should be inserted when the document is converted.
   This is called _referencing an attribute_.
   User-defined attributes are most often referenced, though some built-in attributes that store replacement text or data, such as `author` and `localyear`, can also be used in the document.
   See xref:document.adoc#ref-anatomy[Attribute Reference Anatomy] for more information.

   Attribute value:: An attribute value is the built-in or user-defined replacement content or behavior that is assigned to an attribute.
   Once assigned to an attribute, a value is applied to a document, either as a whole or wherever the attribute is referenced.
   The value may be empty, an integer, or a string of characters.
   Most built-in attributes have a restricted range of allowable values while user-defined attributes only accept strings.
   See the xref:document-attributes-ref.adoc[built-in document attributes] reference table for more information.
   Also see <<default-def,default attribute value>>.

   [[built-in-def]]Built-in attribute:: Built-in attributes are predefined and their names reserved.
   An AsciiDoc processor automatically sets many built-in attributes and assigns default values when it processes a document.
   However, these built-in attributes can be unset and/or their default values overridden.
   See xref:document.adoc#set-built-in[Set built-in document attributes] and xref:element.adoc#attribute-lists[Attribute lists] for more information about using built-in attributes.

   Character replacement attribute:: Character replacement attributes are built-in document attributes that can be used when you don't want a character, such as a caret (^) or vertical bar (|), to be interpreted as AsciiDoc syntax.
   The xref:ref-character-replacement.adoc[Character Replacement Attributes Reference] lists these built-in attributes and their values.

   [[default-def]]Default attribute value:: Many built-in attributes have a default value.
   This default value is a built-in value that is used when the attribute is set and its value is left empty.

   Set:: When an attribute is _set_ it's "`turned on`".
   Attributes need to be set in order for their value to be applied to a document or element.
   How an attribute is set depends on what type of attribute it is and where it is being set.
   See xref:document.adoc#set-built-in[Set built-in document attributes], xref:document.adoc#set-built-in[Set user-defined document attributes], and xref:element.adoc#attribute-lists[Attribute lists] for more information about setting attributes.

   Unset:: When an attribute is _unset_ it's "`turned off`".
   When unset, an attribute's behavior or value will not be applied to a document or element.
   Only attributes that are automatically set when the document is loaded or converted or attributes the user explicitly set have to be unset if the user wants them to be turned off.
   See xref:document.adoc#unset[Unset a document attribute] or xref:element.adoc#unset[Unset a named attribute] for more information.

   [[user-defined-def]]User-defined attribute:: User-defined attributes are custom attributes that are created, set, and assigned a value by you.
   There are some user-defined xref:document.adoc#user-defined-limits[attribute name and value restrictions].


/docs/modules/attributes/examples/counter.adoc
==============================================

.. code-block: asciidoc

   // tag::base[]
   .Parts{counter2:index:0}
   |===
   |Part Id |Description

   |PX-{counter:index}
   |Description of PX-{index}

   |PX-{counter:index}
   |Description of PX-{index}
   |===
   // end::base[]


/docs/modules/attributes/examples/id.adoc
=========================================

.. code-block: asciidoc

   // tag::block-id-brackets[]
   [[notice]]
   This paragraph gets a lot of attention.
   // end::block-id-brackets[]

   // tag::block-id-shorthand[]
   [#notice]
   This paragraph gets a lot of attention.
   // end::block-id-shorthand[]

   // tag::anchor[]
   // tag::anchor-brackets[]
   [[bookmark-a]]Inline anchors make arbitrary content referenceable.
   // end::anchor-brackets[]

   // tag::anchor-shorthand[]
   [#bookmark-b]#Inline anchors can be applied to a phrase like this one.#
   // end::anchor-shorthand[]

   anchor:bookmark-c[]Use a cross reference to link to this location.

   [[bookmark-d,last paragraph]]The xreflabel attribute will be used as link text in the cross-reference link.
   // end::anchor[]

   // tag::anchor-wrong[]
   [[anchor-point]]* list item with invalid anchor
   // end::anchor-wrong[]

   // tag::anchor-list-item[]
   * First item
   * [[step2]]Second item
   * Third item
   // end::anchor-list-item[]

   // tag::anchor-dlist-item[]
   [[cpu,CPU]]Central Processing Unit (CPU)::
   The brain of the computer.

   [[hard-drive]]Hard drive::
   Permanent storage for operating system and/or user files.
   // end::anchor-dlist-item[]

   // tag::anchor-header-extra[]
   [#version-4_9]
   === [[current]][[latest]]Version 4.9
   // end::anchor-header-extra[]

   // tag::anchor-xreflabel[]
   [[tiger-image,Image of a tiger]]
   .This image represents a Bengal tiger also called the Indian tiger
   image::tiger.png[]
   // end::anchor-xreflabel[]

   // tag::inline-anchor-brackets[]
   [[tiger-image]]image:tiger.png[Image of a tiger]
   // end::inline-anchor-brackets[]

   // tag::inline-anchor-macro[]
   anchor:tiger-image[]image:tiger.png[Image of a tiger]
   // end::inline-anchor-macro[]


/docs/modules/directives/nav.adoc
=================================

.. code-block: asciidoc

   * xref:include.adoc[]
   ** xref:include-with-leveloffset.adoc[]
   ** xref:include-with-indent.adoc[]
   ** xref:include-multiple-times-in-same-document.adoc[]
   ** xref:include-list-item-content.adoc[]
   ** xref:include-tagged-regions.adoc[]
   ** xref:include-lines.adoc[]
   ** xref:include-uri.adoc[]

   []
   * xref:conditionals.adoc[]
   ** xref:ifdef-ifndef.adoc[]
   ** xref:ifeval.adoc[]


/docs/modules/directives/pages/include.adoc
===========================================

.. code-block: asciidoc

   = Includes
   // Include Directive Syntax and Processing
   // Include Directive Concepts and Syntax

   You can include content from another file into the current AsciiDoc document using the include directive.
   The included content can be AsciiDoc or it can be any other text format.
   Where that content is included in the document determines how it will be processed.

   == What is an include directive?

   An [.term]*include directive* imports content from a separate file or URL into the content of the current document.
   When the current document is processed, the include directive syntax is replaced by the contents of the include file.
   Think of the include directive like a file expander.
   The include directive is a <<include-processing,preprocessor directive>>, which means it has no awareness of the surrounding context.

   == When is an include directive useful?

   The include directive is useful when you want to:

   * Partition a large document into smaller files for better organization and to make restructuring simpler.footnote:[Always separate consecutive include directives by an empty line unless your intent is to adjoin the content in the include files so it becomes contiguous.]
   * Insert source code from the external files where the code is maintained.
   * Populate tables with output, such as CSV data, from other programs.
   * Create document variants by combining the include directive with xref:conditionals.adoc[conditional preprocessor directives].
   * Reuse content snippets and boilerplate content, such as term definitions, disclaimers, etc., multiple times within the same document.
   * Define a common set of attributes across multiple documents (typically included into the document header).

   [#include-syntax]
   == Include directive syntax

   An include directive must be placed on a line by itself with the following syntax:

   [listing,subs=+quotes]
   ----
   \include::target[leveloffset=__offset__,lines=__ranges__,tag(s)=__name(s)__,indent=__depth__,encoding=__encoding__,opts=optional]
   ----

   The target is required.
   The target may be an absolute path, a path relative to the current document, or a URL.
   Since the include directive is a line-oriented expression, the target may contain space characters.
   However, the target must not start with a space character (since that would turn it into a description list term).
   An absolute or relative path outside the directory of the outermost document will only be honored if the safe mode is unsafe.
   A URL target will only be resolved if the security settings on the processor allows it (e.g., `allow-uri-read`).
   See xref:include-uri.adoc[].

   The leveloffset, lines, tag(s), indent, encoding, and opts attributes are optional, thus reducing the simplest case to the following:

   ----
   \include::partial.adoc[]
   ----

   Specifying the encoding is essential if the include file is not encoded in UTF-8.
   The value of this attribute must be an encoding recognized by Ruby (e.g., utf-8, iso-8859-1, windows-1252, etc), case insenstive.
   If the include file is already encoded in UTF-8 (or contains a BOM), this attribute is unnecessary.

   When using consecutive include directives, you should always separate them by an empty line unless your intention is to adjoin the content in the include files so it becomes contiguous.

   For example, if you're using the include directive to include individual chapters, the include directives should be offset from each other by an empty line.
   This strategy avoids relying on empty lines imported from the include file to keep the chapters separated.
   That separation should be encoded in the parent document instead.

   ----
   \include::chapter01.adoc[]

   \include::chapter02.adoc[]

   \include::chapter03.adoc[]
   ----

   On the other hand, if you're using the include directive to lay down contiguous lines, such as common document attribute entries, then you would put the include directives on adjacent lines to avoid inserting empty lines.

   ----
   = Document Title
   Author Name
   \include::attributes-settings.adoc[]
   \include::attributes-urls.adoc[]
   :url-example: https://example.org

   Document body.
   ----

   In either case, don't rely on the empty lines at the boundaries of the include file.
   And mind where empty lines are used in that include file.

   [#include-processing]
   == Include processing

   Although the include directive looks like a block macro, *it's not a macro and therefore isn't processed like one*.
   It's a preprocessor directive; it's important to understand the distinction.

   include::partial$preprocessor.adoc[]
   The include directive is a preprocessor directive that always adds lines.

   The best way to think of the include directive is to imagine that it is being replaced by the lines from the include file (i.e., the imported lines).
   Only after the lines from the target of the include directive are added to the current document does the parser read and interpret those lines.

   IMPORTANT: The include directive is disabled when Asciidoctor is run in secure mode.
   In secure mode, the include directive is converted to a link in the output document.
   See xref:asciidoctor::safe-modes.adoc[] to learn more.

   == Escaping an include directive

   If you don't want the include directive to be processed, you must escape it using a backslash.

   // NOTE: the following listing uses indentation to prevent the directive from being processed
   [indent=0]
   ----
    \include::just-an-example.ext[]
   ----

   Escaping the directive is necessary _even if it appears in a verbatim block_ since it's not aware of the surrounding document structure.

   [#include-resolution]
   == Include file resolution

   The path used in an include directive can be relative or absolute.

   If the path is relative, the processor resolves the path using the following rules:

   * If the include directive is used in the primary (top-level) document, relative paths are resolved relative to the base directory.
   (The base directory defaults to the directory of the primary document and can be overridden from the CLI or API).
   * If the include directive is used in a file that has itself been included, the path is resolved relative to the including (i.e., current) file.

   //TODO show examples to contrast a relative vs an absolute include

   These defaults make it easy to reason about how the path to the include file is resolved.

   If the processor cannot locate the file (perhaps because you mistyped the path), you'll still be able to convert the document.
   However, you'll get the following warning message during conversion:

    asciidoctor: WARNING: my-document.adoc: line 3: include file not found: /.../content.adoc

   The following message will also be inserted into the output:

    Unresolved directive in my-document.adoc - include::content.adoc[]

   To fix the problem, edit the file path and run the converter again.
   If you don't want the AsciiDoc processor to emit a warning, but rather drop the include that cannot be found, add the `opts=optional` attribute to the include directive.

   If you store your AsciiDoc files in nested folders at different levels, relative file paths can quickly become awkward and inflexible.
   A common pattern to help here is to define the paths in attributes defined in the header, then prefix all include paths with a reference to one of these attributes:

   ------
   :includedir: _includes
   :sourcedir: ../src/main/java

   \include::{includedir}/fragment1.adoc[]

   [source,java]
   ----
   \include::{sourcedir}/org/asciidoctor/Asciidoctor.java[]
   ----
   ------

   Keep in mind that no matter how Asciidoctor resolves the path to the file, access to that file is limited by the safe mode setting under which Asciidoctor is run.
   If a path violates the security restrictions, it may be truncated.

   [#include-nonasciidoc]
   == AsciiDoc vs non-AsciiDoc files

   The include directive performs a simple file merge, so it works with any text file.
   // NOTE this point about normalization should probably be moved to an earlier section
   The content of all included content goes through some form of normalization.

   The content of each include file is encoded to UTF-8.
   If the encoding attribute is specified on the include directive, the content is reencoded from that encoding to UTF-8.
   If the encoding attribute is not specified, the processor will look for the presence of a BOM and reencode the content from that encoding to UTF-8 accordingly.
   If neither of those conditions are met, the encoding is forced to UTF-8.

   If the file is recognized as an AsciiDoc file (i.e., it has one of the following extensions: `.asciidoc`, `.adoc`, `.ad`, `.asc`, or `.txt`) additional normalization and processing is performed.
   First, all trailing whitespace and endlines are removed from each line and replaced with a Unix line feed.
   This normalization is important to how an AsciiDoc processor works.
   Next, the AsciiDoc processor runs the preprocessor on the lines, looking for and interpreting the following directives:

   * includes
   * preprocessor conditionals (e.g., `ifdef`)
   //* front matter (if enabled)

   Running the preprocessor on the included content allows includes to be nested, thus provides lot of flexibility in constructing radically different documents with a single primary document and a few command line attributes.

   Including non-AsciiDoc files is normally done to merge output from other programs or populate table data:

   ----
   .2016 Sales Results
   ,===
   \include::sales/2016/results.csv[]
   ,===
   ----

   In this case, the include directive does not do any processing of AsciiDoc directives.
   The content is inserted as is (after being normalized).

   ////
   CAUTION: You *can* put AsciiDoc content in a non-AsciiDoc file.
   Its content will still be processed as AsciiDoc, but any include statements will be ignored, and therefore cause errors later in processing.
   It is likely to cause confusion, so best avoided.
   ////


/docs/modules/directives/pages/include-with-leveloffset.adoc
============================================================

.. code-block: asciidoc

   = Offset Section Levels
   //Partitioning Large Documents and using leveloffset
   // [#include-partitioning]

   When your document gets large, you can split it up into subdocuments for easier editing.

   ----
   = My book

   \include::chapter01.adoc[]

   \include::chapter02.adoc[]

   \include::chapter03.adoc[]
   ----

   TIP: Note the empty lines before and after the include directives.
   This practice is recommended whenever including AsciiDoc content to avoid unexpected results (e.g., a section title getting interpreted as a line at the end of a previous paragraph).

   == Manipulate heading levels with leveloffset

   The `leveloffset` attribute can help here by pushing all headings in the included document down by the specified number of levels.
   This allows you to publish each chapter as a standalone document (complete with a document title), but still be able to include the chapters into a primary document (which has its own document title).

   You can easily assemble your book so that the chapter document titles become level 1 headings using:

   ----
   = My Book

   \include::chapter01.adoc[leveloffset=+1]

   \include::chapter02.adoc[leveloffset=+1]

   \include::chapter03.adoc[leveloffset=+1]
   ----

   Because the leveloffset is _relative_ (it begins with + or -), this works even if the included document has its own includes and leveloffsets.

   If you have lots of chapters to include and want them all to have the same offset, you can save some typing by setting `leveloffset` around the includes:

   ----
   = My book

   :leveloffset: +1

   \include::chapter01.adoc[]

   \include::chapter02.adoc[]

   \include::chapter03.adoc[]

   :leveloffset: -1
   ----

   The final line returns the level offset to 0.

   Alternatively, you could use absolute levels:

   ----
   :leveloffset: 1

   //includes

   :leveloffset: 0
   ----

   Relative levels are preferred.
   Absolute levels become awkward when you have nested includes since they aren't context aware.

   ////
   That's also why it's important to surround the include directive by empty lines if it imports in a discrete structure.

   You only want to place include files directly adjacent to one another if the imported content should be directly adjacent.

   IMPORTANT: Take note of the empty lines between the include directives.
   The empty line between include directives prevents the first and last lines of the included files from being adjoined.
   This practice is *strongly* encouraged when combining document parts.
   If you don't include these empty lines, you might find that the AsciiDoc processor swallows section titles.
   This happens because the leading section title can get interpreted as the last line of the final paragraph in the preceding include.
   Only place include directives on consecutive lines if the intent is for the includes to run together (such as in a listing block).
   ////


/docs/modules/directives/pages/include-with-indent.adoc
=======================================================

.. code-block: asciidoc

   = Indent Included Content
   // aka Normalize Block Indentation
   // This content needs to be made applicable to includes...like add a step in the example flow to show it coming from an include file.

   Source code snippets from external files are often padded with a leading block indent.
   This leading block indent is relevant in its original context.
   However, once inside the documentation, this leading block indent is no longer needed.

   == The indent attribute

   The attribute `indent` allows the leading block indent to be stripped and, optionally, a new block indent to be set for blocks with verbatim content (listing, literal, source, verse, etc.).

   * When `indent` is 0, the leading block indent is stripped
   * When `indent` is > 0, the leading block indent is first stripped, then the content is indented by the number of columns equal to this value.

   If the `tabsize` attribute is set on the block or the document, tabs are also replaced with the number of spaces specified by that attribute, regardless of whether the `indent` attribute is set.

   For example, this AsciiDoc source:

   [source]
   ....
   [source,ruby,indent=0]
   ----
       def names
         @name.split ' '
       end
   ----
   ....

   Produces:

   ....
   def names
     @name.split ' '
   end
   ....

   This AsciiDoc source:

   [source]
   ....
   [source,ruby,indent=2]
   ----
       def names
         @name.split ' '
       end
   ----
   ....

   Produces:

   ----
     def names
       @name.split ' '
     end
   ----


/docs/modules/directives/pages/include-multiple-times-in-same-document.adoc
===========================================================================

.. code-block: asciidoc

   = Use an Include File Multiple Times
   //Include a File Multiple Times in the Same Document
   //[#include-multiple]
   // Title and anchor are from user-manual.adoc
   // Section content from multiple-include.adoc

   A document can include the same file any number of times.
   The problem comes if there are IDs in the included file; the output document (HTML or DocBook) will then have duplicate IDs which will make it not well-formed.
   To fix this, you can reference a dynamic variable from the primary document in the ID.

   For example, let's say you want to include the same subsection describing a bike chain in both the operation and maintenance chapters:

   ----
   = Bike Manual

   :chapter: operation
   == Operation

   \include::fragment-chain.adoc[]

   :chapter: maintenance
   == Maintenance

   \include::fragment-chain.adoc[]
   ----

   Write [.path]_fragment-chain.adoc_ as:

   ----
   [id=chain-{chapter}]
   === Chain

   See xref:chain-{chapter}[].
   ----

   The first time the [.path]_fragment-chain.adoc_ file is included, the ID of the included section resolves to `chain-operation`.
   The second time the file included, the ID resolves to `chain-maintenance`.

   In order for this to work, you must use the long-hand forms of both the ID assignment and the cross reference.
   The single quotes around the variable name in the assignment are required to force variable substitution (aka interpolation).


/docs/modules/directives/pages/include-list-item-content.adoc
=============================================================

.. code-block: asciidoc

   = Include List Item Content

   You can use the include directive to include the content of a list item from another file, but there are some things you need to be aware of.

   Recall that the `include` directive must be defined on a line by itself.
   This presents a challenge with lists since each list item must begin with the list marker.
   We can solve this by using the built-in `empty` attribute to initiate the list item, then follow that line with the include directive to bring in the actual content.

   Here's an example of how to use the `empty` attribute and the include directive to define a list item, then include the primary text from another file:

   ----
   * {empty}
   \include::item-text.adoc[]
   ----

   This technique works well if you control the contents of the included file and can ensure it only contains adjacent lines of text.
   If a list item does not contain adjacent lines, the list may be terminated.
   So we need a bit more syntax.

   If you can't guarantee that all the included lines will be adjacent, you'll want to tuck the include directive inside an open block.
   This keeps all the include lines together, enclosed inside the boundaries of the block.
   You then attach this block to the list item using a list continuation (i.e., `+`).

   Here's an example of how to include complex content from another file into a list item:

   ----
   * {empty}
   +
   --
   \include::complex-list-item.adoc[]
   --
   ----

   See xref:lists:continuation.adoc#drop-principal-text[dropping the principal text of a list item] for another example of this technique.


/docs/modules/directives/pages/include-tagged-regions.adoc
==========================================================

.. code-block: asciidoc

   = Include Content by Tagged Regions
   // aka Select Portions of a Document to Include

   The include directive enables you to select portions of a file to include instead of including the whole file.
   Use the `lines` attribute to include individual lines or a range of lines (by line number).
   Use the `tags` attribute (or `tag` attribute for the singular case) to select lines that fall between regions marked with user-defined tags.

   When including multiple line ranges or multiple tags, each entry in the list must be separated by either a comma or a semi-colon.
   If commas are used, the entire value must be enclosed in quotes.
   You can eliminate this requirement by using the semi-colon as the data separator instead.

   == Tagging regions

   Tags are useful when you want to identify specific regions of a file to include.
   You can then select the lines between the boundaries of the include tag/end directives to include using the `tags` attribute.

   In the include file, the tag directives (e.g., `tag::name[]` and `end::name[]`) must follow a word boundary and precede a space character or the end of line.
   The tag name must not be empty and must consist exclusively of non-space characters.

   Typically, the tag directives will be placed after a line comment as defined by the language of the source file.
   For languages that only support circumfix comments, such as XML, you can enclose the tag directives between the circumfix comment markers, offset by a space on either side.
   For example, in XML files, you can use `+<!-- tag::name[] -->+` and `+<!-- end::name[] -->+`.

   Including by tag includes all regions marked with that tag.
   This makes it possible to include a group of lines from different regions of the document using a single tag.

   TIP: If the target file has tagged lines, and you just want to ignore those lines, use the `tags` attribute to filter them out.
   See <<tag-filtering>> for details.

   The example below shows how you tag a region of content inside a file containing multiple code examples.
   The tag directives are preceded by a hash (`#`) because that's the start of a line comment in Ruby.

   .Tagged code snippets in a file named core.rb
   [source,ruby,subs=attributes+]
   ----
   include::example$include.adoc[tag=tag-co]
   ----
   <.> To indicate the start of a tagged region, insert a comment line in the code.
   <.> Assign a name to the `tag` directive. In this example, the tag is named _timings_.
   <.> Insert another comment line where you want the tagged region to end.
   <.> Assign the name of the region you want to terminate to the `end` directive.
   <.> This is the start of a tagged snippet named _parse_.
   <.> This is the end of the tagged snippet named _parse_.

   In the next example, the tagged region named _parse_ is selected by the `include` directive.

   .Selecting the _parse_ code snippet from a document
   [source]
   ....
   include::example$include.adoc[tag=target-co]
   ....
   <.> In the directive's brackets, set the `tag` attribute and assign it the unique name of the code snippet you tagged in your code file.

   You can include multiple tags from the same file.

   .Selecting the _timings_ and the _parse_ code snippets from a document
   [source]
   ....
   include::example$include.adoc[tag=target-co-multiple]
   ....

   It is also possible to have fine-grained tagged regions inside larger tagged regions.

   For example, if your include file has the following content:

   ----
   // tag::snippets[]
   // tag::snippet-a[]
   snippet a
   // end::snippet-a[]

   // tag::snippet-b[]
   snippet b
   // end::snippet-b[]
   // end::snippets[]
   ----

   And you include this file using the following include directive:

   ----
   \include::file-with-snippets.adoc[tag=snippets]
   ----

   The following lines will be selected and displayed:

   ....
   snippet a

   snippet b
   ....

   Notice that none of the lines with the tag directives are displayed.

   [#tag-filtering]
   == Tag filtering

   The previous section showed how to select tagged regions explicitly, but you can also use wildcards and exclusions.
   These expressions give you the ability to include or exclude tags in bulk.
   For example, here's how to include all lines that are not enclosed in a tag:

   ----
   \include::file-with-snippets.adoc[tag=!*]
   ----

   When tag filtering is used, lines that contain a tag directive _are always discarded_ (like a line comment).
   Even if you're not including content by tags, you can specify the double wildcard (`+**+`) to filter out all lines in the include file that contain a tag directive.

   The modifiers you can use for filtering are as follows:

   `*`::
   The single wildcard.
   Select all tagged regions.
   May only be specified once, negated or not.

   `**`::
   The double wildcard.
   Select all the lines in the document *except for lines that contain a tag directive*.
   Use this symbol if you want to include a file that has tag directives, but you want to discard the lines that contain a tag directive.
   May only be specified once, negated or not.

   `!`::
   Negate the wildcard or tag.

   The double wildcard is always applied first, regardless of where it appears in the list.
   If the double wildcard is not negated (i.e., `+**+`), it should only be combined with exclusions (e.g., `+**;!foo+`).
   A negated double wildcard (i.e., `+!**+`), which selects no lines, is usually implied as the starting point.
   A negated single wildcard has different meaning depending on whether it comes before tag names (e.g., `+!*;foo+`) or after at least one tag name (e.g., `+foo;!*+`).

   Let's assume we have a region tagged `foo` with a nested region tagged `bar`.
   Here are some of the permutations you can use (along with their implied long-hand forms):

   `+**+`:: Selects all the lines in the document (except for lines that contain a tag directive).
   _(implies `+**;*+`)_

   `+*+`:: Selects all tagged regions in the document.
   Does not select lines outside of tagged regions.
   _(implies `+!**;*+`)_

   `+!*+`:: Selects only the regions in the document outside of tags (i.e., non-tagged regions).
   _(implies `+**;!*+`)_

   `foo`:: Selects only regions tagged _foo_.
   _(implies `+!**;foo+`)_

   `foo;!bar`:: Selects only regions tagged _foo_, but excludes any nested regions tagged _bar_.
   _(implies `+!**;foo;!bar+`)_

   `+foo;!*+`:: Selects only regions tagged _foo_, but excludes any nested tagged regions.
   _(implies `+!**;foo;!*+`)_

   `+*;!foo+`:: Selects all tagged regions, but excludes any regions tagged _foo_ (nested or otherwise).
   _(implies `+!**;*;!foo+`)_

   `!foo`:: Selects all the lines in the document except for regions tagged _foo_.
   _(implies `+**;!foo+`)_

   `!foo;!bar`:: Selects all the lines in the document except for regions tagged _foo_ or _bar_.
   _(implies `+**;!foo;!bar+`)_

   `+!*;foo+`:: Selects the regions in the document outside of tags (i.e., non-tagged regions) and inside regions tagged _foo_, excluding any nested tagged regions.
   To include nested tagged regions, they each must be named explicitly.
   _(implies `+**;!*;foo+`)_

   If the filter begins with a negated tag or single wildcard, it implies that the pattern begins with `+**+`.
   An exclusion not preceded by an inclusion implicitly starts by selecting all the lines that do not contain a tag directive.
   Otherwise, it implies that the pattern begins with `+!**+`.
   A leading inclusion implicitly starts by selecting no lines.


/docs/modules/directives/pages/include-lines.adoc
=================================================

.. code-block: asciidoc

   = Include Content by Line Ranges

   The include directive supports selecting portions of the document to include.
   Using the `lines` attribute, you can include ranges of line numbers.

   When including multiple line ranges, each entry in the list must be separated by either a comma or a semicolon.
   If commas are used, the entire value must be enclosed in quotes.
   Using the semicolon as the data separator eliminates this requirement.

   == Specifying line ranges

   To include content by line range, assign a starting line number and an ending line number separated by a pair of dots (e.g., `lines=1..5`) to the `lines` attribute.

   ----
   include::example$include.adoc[tag=line]
   ----

   You can specify multiple ranges by separating each range by a comma.
   Since commas are normally used to separate individual attributes, you must quote the comma-separated list of ranges.

   ----
   include::example$include.adoc[tag=m-line-comma]
   ----

   To avoid having to quote the list of ranges, you can instead separate them using semicolons.

   ----
   include::example$include.adoc[tag=m-line]
   ----

   If you don't know the number of lines in the document, or you don't want to couple the range to the length of the file, you can refer to the last line of the document using the value -1.

   ----
   include::example$include.adoc[tag=last]
   ----


/docs/modules/directives/pages/include-uri.adoc
===============================================

.. code-block: asciidoc

   = Include Content by URI
   //aka Include Content from a URI
   :url-http: https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html
   :url-uri: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier

   == Reference include content by URI

   The include directive recognizes when the target is a URI and can include the content referenced by that URI.
   This example demonstrates how to include an AsciiDoc file from a GitHub repository directly into your document.

   ----
   include::example$include.adoc[tag=uri]
   ----

   For security reasons, this capability is *not enabled by default*.
   To allow content to be read from a URI, you must enable the URI read permission by:

   . running Asciidoctor in `SERVER` mode or less and
   . setting the `allow-uri-read` attribute securely from the CLI or API

   Here's an example that shows how to run Asciidoctor from the console so it can read content from a URI:

    $ asciidoctor -a allow-uri-read filename.adoc

   Remember that Asciidoctor executes in `UNSAFE` mode by default when run from the command line.

   Here's an example that shows how to run Asciidoctor from the API so it can read content from a URI:

   [source,ruby]
   ----
   Asciidoctor.convert_file 'filename.adoc', safe: :safe, attributes: { 'allow-uri-read' => '' }
   ----

   WARNING: Including content from sources outside your control carries certain risks, including the potential to introduce malicious behavior into your documentation.
   Because `allow-uri-read` is a potentially dangerous feature, it is forcefully disabled when the safe mode is `SECURE` or higher.

   .URI vs URL
   ****
   URI stands for {url-uri}[Uniform Resource Identifier^].
   When we talk about a URI, we're usually talking about a URL, or Uniform Resource Locator.
   A URL is simply a URI that points to a resource over a network, or web address.

   As far as Asciidoctor is concerned, all URIs share the same restriction, whether or not it's actually local or remote, or whether it points to a web address (http or https prefix), FTP address (ftp prefix), or some other addressing scheme.
   ****

   The same restriction described in this section applies when embedding an image referenced from a URI, such as when `data-uri` is set or when converting to PDF using Asciidoctor PDF.

   === Caching URI content

   Reading content from a URI is obviously much slower than reading it from a local file.

   Asciidoctor provides a way for the content read from a URI to be cached, which is highly recommended.

   To enable the built-in cache, you must:

   . Install the `open-uri-cached` gem.
   . Set the `cache-uri` attribute in the document.

   When these two conditions are satisfied, Asciidoctor caches content read from a URI according the to {url-http}[HTTP caching recommendations^].


/docs/modules/directives/pages/conditionals.adoc
================================================

.. code-block: asciidoc

   = Conditionals

   You can include or exclude lines of text in your document using the following conditional preprocessor directives:

   * xref:ifdef-ifndef.adoc#ifdef[ifdef]
   * xref:ifdef-ifndef.adoc#ifndef[ifndef]
   * xref:ifeval.adoc[ifeval]

   When the processor encounters one of these conditionals, it evaluates the specified condition.
   The condition is based on the presence or value of one or more document attributes.
   If the condition evaluates to true, the lines the conditional encloses are included.
   Otherwise, the lines are skipped.

   ////
   For example, say you want to include a certain section of content only when converting to HTML.
   Conditional preprocessor directives make this possible.
   You simply check for the presence of the `basebackend-html` attribute using an `ifdef` directive.
   Details of this example and more `ifdef` and `ifndef` examples, are described in the following sections.
   See xref:ifeval.adoc[] for `ifeval` examples.
   ////

   == Conditional processing

   Although a conditional preprocessor directive looks like a block macro, *it's not a macro and therefore isn't processed like one*.
   It's a preprocessor directive; it's important to understand the distinction.

   include::partial$preprocessor.adoc[]
   The conditional preprocessor directives determine which lines to add and which ones to take away based on the condition.

   == Escape a conditional directive

   If you don't want a conditional preprocessor directive to be processed, you must escape it using a backslash.

   // NOTE: the following listing uses indentation to prevent the directive from being processed
   [source,indent=0]
   ----
    \ifdef::just-an-example[]
   ----

   Escaping the directive is necessary _even if it appears in a verbatim block_ since it's not aware of the surrounding document structure.


/docs/modules/directives/pages/ifdef-ifndef.adoc
================================================

.. code-block: asciidoc

   = ifdef and ifndef Directives

   [#ifdef]
   == ifdef directive

   Content between the `ifdef` and `endif` directives gets included if the specified attribute is set:

   .ifdef example
   ----
   \ifdef::env-github[]
   This content is for GitHub only.
   \endif::[]
   ----

   The syntax of the start directive is `ifdef::<attribute>[]`, where `<attribute>` is the name of an attribute.

   Keep in mind that the content is not limited to a single line.
   You can have any amount of content between the `ifdef` and `endif` directives.

   If you have a large amount of content inside the `ifdef` directive, you may find it more readable to use the long-form version of the directive, in which the attribute (aka condition) is referenced again in the `endif` directive.

   .ifdef long-form example
   ----
   \ifdef::env-github[]
   This content is for GitHub only.

   So much content in this section, I'd get confused reading the source without the closing `ifdef` directive.

   It isn't necessary for short blocks, but if you are conditionally including a section it may be something worth considering.

   Other readers reviewing your docs source code may go cross-eyed when reading your source docs if you don't.
   \endif::env-github[]
   ----

   If you're only dealing with a single line of text, you can put the content directly inside the square brackets and drop the `endif` directive.

   .ifdef single line example
   ----
   \ifdef::revnumber[This document has a version number of {revnumber}.]
   ----

   The single-line block above is equivalent to this formal `ifdef` directive:

   ----
   \ifdef::revnumber[]
   This document has a version number of {revnumber}.
   \endif::[]
   ----

   [#ifndef]
   == ifndef directive

   `ifndef` is the logical opposite of `ifdef`.
   Content between `ifndef` and `endif` gets included only if the specified attribute is _not_ set:

   .ifndef example
   ----
   \ifndef::env-github[]
   This content is not shown on GitHub.
   \endif::[]
   ----

   The syntax of the start directive is `ifndef::<attribute>[]`, where `<attribute>` is the name of an attribute.

   The `ifndef` directive supports the same single-line and long-form variants as `ifdef`.

   == Checking multiple attributes

   Both the `ifdef` and `ifndef` directives accept multiple attribute names.
   The combinator can be "`and`" or "`or`".
   The two combinators cannot be combined in the same expression.

   === ifdef with multiple attributes

   If any attribute is set (or)::
   Multiple attribute names must be separated by commas (`,`).
   If one or more of the attributes are set, the content is included.
   Otherwise, the content is not included.
   +
   .If any attribute example
   ----
   \ifdef::backend-html5,backend-docbook5[Only shown if converting to HTML (backend-html5 is set) or DocBook (backend-docbook5 is set).]
   ----

   If all attributes are set (and)::
   Multiple attribute names must be separated by pluses (`+`).
   If all the attributes are set, the content is included.
   Otherwise, the content is not included.
   +
   .If all attributes example
   ----
   \ifdef::backend-html5+env-github[Only shown when converting to HTML (backend-html5 is set) on GitHub (env-github is set).]
   ----

   === ifndef with multiple attributes

   The `ifndef` directive negates the results of the expression.
   When using the `ifndef` directive, the expression should be read with the prefix "`unless`".

   Unless any attribute is set (or)::
   Multiple attribute names must be separated by commas (`,`).
   If one or more of the attributes are set, the content is not included.
   Otherwise, the content is included.
   +
   .Unless any attribute example
   ----
   \ifndef::profile-production,env-site[Not shown if profile-production or env-site is set.]
   ----

   Unless all attributes are set (and)::
   Multiple attribute names must be separated by pluses (`+`).
   If all of the attributes are set, the content is not included.
   Otherwise, the content is included.
   +
   .Unless all attributes example
   ----
   \ifndef::profile-staging+env-site[Not shown if profile-staging and env-site are set.]
   ----


/docs/modules/directives/pages/ifeval.adoc
==========================================

.. code-block: asciidoc

   = ifeval Directive

   Lines enclosed by an `ifeval` directive (i.e., between the `ifeval` and `endif` directives) are included if the expression inside the square brackets of the `ifeval` directive evaluates to true.

   .ifeval example
   ----
   \ifeval::[{sectnumlevels} == 3]
   If the `sectnumlevels` attribute has the value 3, this sentence is included.
   \endif::[]
   ----

   The `ifeval` directive does not have a single-line or long-form variant like `ifdef` and `ifndef`.

   Unlike `ifdef` and `ifndef`, you cannot terminate a specific `ifeval` directive using its complement.
   For example, the following `ifeval` block is not valid:

   .Invalid ifeval terminator
   ----
   \ifeval::[<condition>]
   conditional content
   \endif::[<condition>]
   ----

   You can only terminate the previous `ifeval` directive using an anonymous `endif::[]` directive, as shown here:

   .Valid ineval terminator
   ----
   \ifeval::[<condition>]
   conditional content
   \endif::[]
   ----

   If you're mixing `ifeval` directives with `ifdef` or `ifndef` directives, you should always close multiline `ifdef` and `ifndef` directives by name (`endif::name-of-attribute[]`) so the `ifeval` directive does not end prematurely.

   == Anatomy

   The expression of an `ifeval` directive consists of a left-hand value and a right-hand value with an operator in between.
   It's customary to include a single space on either side of the operator.

   .ifeval expression examples
   ----
   \ifeval::[2 > 1]
   ...
   \endif::[]

   \ifeval::["{backend}" == "html5"]
   ...
   \endif::[]

   \ifeval::[{sectnumlevels} == 3]
   ...
   \endif::[]

   // the value of outfilesuffix includes a leading period (e.g., .html)
   \ifeval::["{docname}{outfilesuffix}" == "main.html"]
   ...
   \endif::[]
   ----

   == Values

   Each expression value can reference the name of zero or more AsciiDoc attributes using the attribute reference syntax (for example, `+{backend}+`).

   Attribute references are resolved (i.e., substituted) first.
   Once attributes references have been resolved, each value is coerced to a recognized type.

   When you expect the attribute reference to resolve to a string, that is, a sequence of characters, enclose that side of the expression in quotes.
   For example:

   .ifeval that compares two string expressions
   ----
   \ifeval::["{backend}" == "html5"]
   ----

   If you expect the attribute to resolve to a number, you do not need to enclose the expression in quotes.
   In this case, the values will be compared as numbers.
   The same rule applies to boolean values.

   You should not attempt to mix value types in a comparison.
   For example, the following expression is not valid:

   .Invalid ifeval expression
   ----
   \ifeval::["{sectnumlevels}" > 3]
   ----

   The following values types are recognized:

   number:: Either an integer or floating-point value.
   quoted string:: Enclosed in either single (`'`) or double (`"`) quotes.
   boolean:: Literal value of `true` or `false`.

   === How value type coercion works

   If a value is enclosed in quotes, the characters between the quotes is used and always coerced to a string.

   If a value is *not* enclosed in quotes, it's subject to the following type coercion rules:

   * an empty value becomes nil (aka null) (and thus safe for use in a comparison).
   * a value of `true` or `false` becomes a boolean value.
   * a value of only repeating whitespace becomes a single whitespace string.
   * a value containing a period becomes a floating-point number.
   * any other value is coerced to an integer value.

   == Operators

   The value on each side is compared using the operator to derive an outcome.

   `==`::
   Checks if the two values are equal.
   `!=`::
   Checks if the two values are not equal.
   `<`::
   Checks whether the left-hand side is less than the right-hand side.
   `+<=+`::
   Checks whether the left-hand side is less than or equal to the right-hand side.
   `>`::
   Checks whether the left-hand side is greater than the right-hand side.
   `+>=+`::
   Checks whether the left-hand side is greater than or equal to the right-hand side.

   Both sides should be of the same value type.
   If they are not, the comparison will fail.
   If the comparison fails, the condition will evaluate to false (i.e., the content inside the directive will be skipped).

   The operators follow the same rules as operators in Ruby.


/docs/modules/directives/partials/preprocessor.adoc
===================================================

.. code-block: asciidoc

   A [#def-preprocessor.term]*preprocessor directive* is processed when the lines of a document are read, but before the document structure is parsed.
   Therefore, it's not aware of the surrounding document structure.
   A preprocessor directive merely adds lines to the reader or takes lines away.


/docs/modules/directives/examples/include.adoc
==============================================

.. code-block: asciidoc

   // tag::base[]
   = Reference Documentation
   Lead Developer

   This is documentation for project X.

   \include::basics.adoc[]

   \include::installation.adoc[]

   \include::example.adoc[]
   // end::base[]

   // tag::line[]
   \include::filename.txt[lines=5..10]
   // end::line[]

   // tag::m-line-comma[]
   \include::filename.txt[lines="1..10,15..20"]
   // end::m-line-comma[]

   // tag::m-line[]
   \include::filename.txt[lines=7;14..25;28..43]
   // end::m-line[]

   // tag::last[]
   \include::filename.txt[lines=12..-1]
   // end::last[]

   // tag::include-with-tag[]
   // selects lines between tag::definition[] and end::definition[] lines
   \include::filename.txt[tag=definition]
   // end::include-with-tag[]

   [source,ruby,subs=attributes+]
   ----
   // tag::tag-co[]
   # tag::timings[{empty}] # <.> <.>
   if timings
     timings.record :read
     timings.start :parse
   end
   # end::timings[{empty}] # <.> <.>
   # tag::parse[{empty}] # <.>
   doc = (options[:parse] == false ? (Document.new lines, options) :
       (Document.new lines,options).parse)
   timings.record :parse if timings
   doc
   # end::parse[{empty}] # <.>
   // end::tag-co[]
   ----

   // tag::target-co[]
   [source,ruby]
   ----
   include::core.rb[tag=parse] <.>
   ----
   // end::target-co[]

   // tag::target-co-multiple[]
   [source,ruby]
   ----
   \include::core.rb[tags=timings;parse]
   ----
   // end::target-co-multiple[]

   // tag::tag[]
   [source,groovy]
   --
   \include::example.groovy[tag=classdef]
   --
   // end::tag[]

   // tag::target[]
   import foo
   // tag::classdef[]
   class Bar {
     // ...
   }
   // end::classdef[]
   // end::target[]

   // tag::out[]
   [source,groovy]
   --
   class Bar {
     // ...
   }
   --
   // end::out[]

   // tag::uri[]
   \include::https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/README.adoc[]
   // end::uri[]


/docs/modules/document/nav.adoc
===============================

.. code-block: asciidoc

   * xref:header.adoc[]
   ** xref:title.adoc[]
   *** xref:subtitle.adoc[]
   ** xref:author-information.adoc[]
   *** xref:author-line.adoc[]
   *** xref:multiple-authors.adoc[]
   *** xref:author-attribute-entries.adoc[]
   *** xref:reference-author-attributes.adoc[]
   *** xref:compound-author-name.adoc[]
   ** xref:revision-information.adoc[]
   *** xref:revision-line.adoc[]
   *** xref:revision-attribute-entries.adoc[]
   *** xref:version-label.adoc[]
   *** xref:reference-revision-attributes.adoc[]
   ** xref:metadata.adoc[]
   ** xref:header-ref.adoc[]

   []
   * xref:doctypes.adoc[]


/docs/modules/document/pages/doctype.adoc
=========================================

.. code-block: asciidoc

   = Document Type
   :page-aliases: doctypes.adoc

   The document type (aka doctype) declares the expected structure of an AsciiDoc document.
   AsciiDoc defines a fixed set of document types.
   Each document type provides a slight variation on the permitted structure of an AsciiDoc document to accommodate different uses cases.

   The default doctype is `article`, which provides the foundation structure on which other doctypes build.
   The `book` doctype permits multiple level-0 sections that act as part sections.
   The `manpage` doctype provides an extended header for defining standard metadata of a manpage, such as the volume number, man, and purpose.
   The `inline` doctype is intended for embedded scenarios.

   == Document types

   Article (`article`)::
   The default doctype.
   In DocBook, this includes the appendix, abstract, bibliography, glossary, and index sections.
   Unless you are making a book or a man page, you don't need to worry about the doctype.
   The default will suffice.

   Book (`book`)::
   Builds on the article doctype with the additional ability to use a top-level title as part titles, includes the appendix, dedication, preface, bibliography, glossary, index, and colophon.
   There's also the concept of a multi-part book, but the distinction from a regular book is determined by the content.
   A book only has chapters and special sections, whereas a multi-part book is divided by parts that each contain one or more chapters or special sections.

   Man page (`manpage`)::
   Used for producing a roff or HTML-formatted manual page (man page) for Unix and Unix-like operating systems.
   This doctype instructs the parser to recognize a special document header and section naming conventions for organizing the AsciiDoc content as a man page.
   See xref:asciidoctor:manpage-backend:index.adoc[] for details on how structure a man page using AsciiDoc and generate it using Asciidoctor.

   Inline (`inline`)::
   There may be cases when you only want to apply inline AsciiDoc formatting to input text without wrapping it in a block element.
   For example, in the Asciidoclet project (AsciiDoc in Javadoc), only the inline formatting is needed for the text in Javadoc tags.
   // {asciidoclet-ref}[Asciidoclet project]

   == Inline doctype rules

   The rules for the inline doctype are as follows:

   * Only a single paragraph is read from the AsciiDoc source.
   * Inline formatting is applied.
   * The output is not wrapped in the normal paragraph tags.

   Given the following input:

   [source]
   https://asciidoctor.org[AsciiDoc] is a _lightweight_ markup language...

   Processing it with the options `doctype=inline` and `backend=html5` produces:

   [source,html]
   <a href="https://asciidoctor.org">AsciiDoc</a> is a <em>lightweight</em> markup language&#8230;

   The inline doctype allows the AsciiDoc processor to cover the full range of applications, from unstructured (inline) text to full, standalone documents!


/docs/modules/document/pages/header-ref.adoc
============================================

.. code-block: asciidoc

   = Document Header Reference
   //Attributes and Values

   [%autowidth]
   |===
   |Attribute |Values |Converters |Notes

   |`author`, `author_<n>`
   |_user-defined_
   |all
   |

   |`authorinitials`, `authorinitials_<n>`
   |*Derived from `author`*, _user-defined_
   |all
   |

   |`description`
   |_user-defined_
   |html
   |

   |`docinfo`
   |
   |html, docbook
   |

   |`doctitle`
   |*Derived from level 0 section title*, _user-defined_
   |all
   |

   |`email`, `email_<n>`
   |_user-defined_
   |all
   |

   |`firstname`, `firstname_<n>`
   |*Derived from `author`*, _user-defined_
   |all
   |

   |`keywords`
   |_user-defined_
   |html
   |

   |`lastname`, `lastname_<n>`
   |*Derived from `author`*, _user-defined_
   |all
   |

   |`middlename`, `middlename_<n>`
   |*Derived from `author`*, _user-defined_
   |all
   |

   |`no-header-footer`, `-s`
   |_empty_
   |all
   |

   |`noheader`
   |_empty_
   |all
   |

   |`nofooter`
   |_empty_
   |all
   |

   |`notitle`
   |_empty_
   |all
   |

   |`revdate`
   |_user-defined_
   |all
   |

   |`revnumber`
   |_user-defined_
   |all
   |

   |`revremark`
   |_user-defined_
   |all
   |

   |`showtitle`
   |_empty_
   |all
   |

   |`title`
   |*Derived from level 0 section title or `doctitle`*, _user-defined_
   |html, docbook
   |

   |`version-label`
   |*Version*, _user-defined_
   |html
   |
   |===

   ////
   From @graphitefriction: Old table with descriptions that can probably be deleted.

   [cols="1,1,2,2,1"]
   |===
   |Attribute |Values |Description |Notes |Converters

   |`author`
   |_user-defined_
   |Author's full name
   |
   |all

   |`authorinitials`
   |*Derived from `author`*, _user-defined_
   |First character of each word in the `author` attribute
   |
   |all

   |`description`
   |_user-defined_
   |Text describing the document
   |
   |html

   |`docinfo`
   |
   |Adds content from a docinfo file to header
   |
   |html, docbook

   |`doctitle`
   |*Document title (`=`)*, _user-defined_
   |Title of document
   |Identical to the value returned by `Document#doctitle`
   |all

   |`email`
   |_user-defined_
   |Author email address
   |
   |all

   |favicon
   |Adds a link to a favicon to the HTML `<head>`.
   |_not set_
   |_any_
   |html

   |`firstname`
   |*Derived from `author`*, _user-defined_
   |First word of `author` attribute
   |
   |all

   |`keywords`
   |_user-defined_
   |A list of comma-separated values that describe the document
   |
   |html


   |`lastname`
   |*Derived from `author`*, _user-defined_
   |Last word of `author` attribute
   |
   |all

   |`middlename`
   |*Derived from `author`*, _user-defined_
   |Middle word of `author` attribute
   |
   |all

   |`no-header-footer`, `-s`
   |_empty_
   |Generate an embeddable document; exclude the document frame
   |
   |all

   |`noheader`
   |_empty_
   |Suppresses the output of the header
   |
   |all

   |`nofooter`
   |_empty_
   |Suppresses the output of the footer
   |
   |all

   |`notitle`
   |_empty_
   |Toggles the display of a document's title
   |
   |all

   |`revdate`
   |_user-defined_
   |Date of document version
   |
   |all

   |`revnumber`
   |_user-defined_
   |Version number of the document
   |
   |all

   |`revremark`
   |_user-defined_
   |Version comments
   |
   |all

   |`showtitle`
   |_empty_
   |Toggles the display of an embedded document's title
   |
   |all

   |`title`
   |
   |Value of `<title>` element in HTML `<head>` or main DocBook `<info>` of output document.
   Used as a fallback when the document title is not specified.
   |
   |html, docbook

   |`version-label`
   |*Version*, _user-defined_
   |Label preceding `revnumber` in a output's byline
   |
   |html
   |===
   ////


/docs/modules/document/pages/title.adoc
=======================================

.. code-block: asciidoc

   = Document Title

   A document title, while optional, is usually the first element in the document header.

   == Title syntax

   A document title is specified using a single equals sign (`=`), followed by a space, then the title text.

   .Document with a title
   [source#ex-title]
   ----
   include::example$document-title.adoc[]
   ----

   In <<ex-title>>, notice the empty line between the document title and the first line of prose.
   That empty line is what separates the document header from the document body.

   image::document-title.png[Title of document]

   === Doctypes and titles

   Technically, a document title is a level 0 section title (`=`).
   The `article` and `manpage` document types (`doctype`) can only have one level 0 section.

   The `book` document type permits multiple level 0 section titles.
   When the `doctype` is `book`, the title of the level 0 section in the header is used as the document's title.
   Subsequent level 0 section titles in the document body are interpreted as xref:sections:parts.adoc[part titles], unless labeled with a xref:sections:styles.adoc[style].

   [#hide-or-show]
   == Hide or show the document title

   When converting a standalone document, the document title is shown by default.
   You can control whether the document title appears with the `showtitle` attribute.
   If you don't want the title to be shown, unset the `showtitle` attribute using `showtitle!` in the document header or via the CLI or API.

   //Need to link to a definition of embeddable doc
   When converted to an embeddable document, the document title isn't shown by default.
   To show the title in the embeddable document, set `showtitle` in the document header or via the CLI or API.
   The author and revision information isn't shown below the document title in the embeddable version of the document like it is in the standalone document, even when `showtitle` is set.

   [#reference-doctitle]
   == Reference the document title

   The level 0 section title in a document's header, that is, its title, is automatically assigned to the document attribute `doctitle`.
   You can reference the `doctitle` attribute anywhere in your document and the document's title will be displayed.

   .Reference the doctitle attribute
   [source#ex-doctitle]
   ----
   include::example$doctitle.adoc[]
   ----

   image::doctitle.png[The document title is displayed wherever the doctitle attribute is referenced]

   The `doctitle` attribute can also be explicitly set and assigned a value using an attribute entry in the header.
   //Its value is identical to the value returned by `Document#doctitle`.

   [#title-attr]
   == title attribute

   By default, the text of the document title is used as the value of the HTML `<title>` element and main DocBook `<info>` element.
   You can override this behavior by setting the `title` attribute in the header with an attribute entry.
   If neither a level 0 section title or `doctitle` is specified in the header, but `title` is, its value is used as a fallback document title.


/docs/modules/document/pages/subtitle.adoc
==========================================

.. code-block: asciidoc

   = Subtitle
   //From @graphitefriction: this page has some weird complexity for such a simple thing

   An optional subtitle can be appended to a xref:title.adoc[document title].

   NOTE: The HTML 5 converter does not currently split the subtitle out from the document title when generating HTML from AsciiDoc.
   The document title is only partitioned into a main and subtitle in the output of the DocBook, EPUB 3, and PDF converters.
   However, the subtitle is still available via the API, so you could add support for it by extending the HTML 5 converter.

   == Subtitle syntax

   When the document title contains a colon followed by a space (i.e, `:{sp}`), the text after the final colon-space sequence is treated as a subtitle.

   .A document title and subtitle
   [source]
   ----
   = Main Title: Subtitle
   ----

   The separator is searched for from the end of the text.
   Therefore, only the last occurrence of the separator (i.e, `:{sp}`) is used for partitioning the title.

   .A document title that contains more than one colon-space sequence
   [source]
   ----
   = Main Title: Main Title Continued: Subtitle
   ----

   === Modify the title separator

   You can change the title separator by specifying the `separator` block attribute explicitly above the document title.
   A space will automatically be appended to the separator value.

   .Assign separator to the document title
   [source]
   ----
   [separator=::]
   = Main Title:: Subtitle
   ----

   You can also assign a separator using a document attribute `title-separator` in the header.

   .Assign title-separator to the document title
   [source]
   ----
   = Main Title:: Subtitle
   :title-separator: ::
   ----

   `title-separator` can also be assigned via the CLI.

   ....
   $ asciidoctor -a title-separator=:: document.adoc
   ....

   == Partition the title using the API

   You can partition the title from the API when calling the `doctitle` method on Document:

   .Retrieving a partitioned document title
   [source,ruby]
   ----
   title_parts = document.doctitle partition: true
   puts title_parts.title
   puts title_parts.subtitle
   ----

   You can partition the title in an arbitrary way by passing the separator as a value to the partition option.
   In this case, the partition option both activates subtitle partitioning and passes in a custom separator.

   .Retrieving a partitioned document title with a custom separator
   [source,ruby]
   ----
   title_parts = document.doctitle partition: '::'
   puts title_parts.title
   puts title_parts.subtitle
   ----

   ////
   .Document with a subtitle
   [source]
   ----
   include::example$title.adoc[tag=sub-1]
   ----

   In this example, the following is true:

   Main title:: The Dangerous and Thrilling Documentation Chronicles
   Subtitle:: A Tale of Caffeine and Words

   .Document with a subtitle and multiple colons
   [source]
   ----
   include::example$title.adoc[tag=sub-2]
   ----

   In this example, the following is true:

   Main title:: A Cautionary Tale: The Dangerous and Thrilling Documentation Chronicles
   Subtitle:: A Tale of Caffeine and Words

   Instead of using a colon followed by a space as the separator characters between the main title and the subtitle, you can specify a custom separator using the `title-separator` attribute.

   .Document with a subtitle using a custom separator
   [source]
   ----
   include::example$title.adoc[tag=sub-3]
   ----

   Note that a space is always appended to the value of the `title-separator` (making the default value of the `title-separator` effectively a single colon).

   This content needs to be moved or reconsidered:

   Asciidoctor also provides an API for extracting the title and subtitle.
   See the API docs for the https://www.rubydoc.info/gems/asciidoctor/Asciidoctor/Document/Title[Document::Title] for more information.
   Support for subtitle functionality for other sections is being considered.
   Refer to https://github.com/asciidoctor/asciidoctor/issues/1493[Asciidoctor issue #1493].
   ////


/docs/modules/document/pages/author-information.adoc
====================================================

.. code-block: asciidoc

   = Author Information

   Adding author information to your document is optional.
   A document's author information is assigned to multiple built-in attributes.
   These optional attributes can be set and assigned values xref:author-line.adoc[using the author line] or xref:author-attribute-entries.adoc[using attribute entries] in a document's header.

   == Author and email attributes

   author::
   The `author` attribute represents the sole or first author's entire name.
   The attributes `firstname`, `middlename`, `lastname`, and `authorinitials` are automatically derived from the value of the `author` attribute.
   When assigned implicitly via the author line, the value includes all of the characters and words prior to the semicolon (`;`), angle bracket (`<`), or the end of the line.

   email::
   The `email` attribute represents an email address or URL associated with the first author (`author`).
   When assigned via the author line, it's enclosed in a pair of angle brackets (`< >`).

   === Name and initials attributes

   firstname::
   The `firstname` attribute represents the first, forename, or given name of the author.
   The first word in the value of the `author` attribute is automatically assigned to `firstname`.

   lastname::
   The `lastname` attribute represents the last, surname, or family name of the author.
   The last word in the value of the `author` attribute is automatically assigned to `lastname`.

   middlename::
   If `author` contains values for `firstname` and `lastname`, any remaining words or characters found between these values are assigned to the `middlename` attribute.

   authorinitials::
   The first character of the `firstname`, `middlename`, and `lastname` attribute values are assigned to the `authorinitials` attribute.

   == Multiple author attributes

   author_<n>:: An `author_<n>` attribute represents each additional author's entire name, where `<n>` is the 1-based index of all of the authors listed on the author line (e.g., `author_2`, `author_3`).
   xref:multiple-authors.adoc[Additional authors can only be assigned via the author line].
   Each author's full name includes all of the characters and words directly after a semicolon (`;`) but prior to the angle bracket (`<`), next semicolon (`;`), or the end of the line.
   The attributes `firstname_<n>`, `middlename_<n>`, `lastname_<n>`, and `authorinitials_<n>` are automatically derived from `author_<n>`.

   email_<n>::
   The `email_<n>` attribute represents an email address or URL associated with xref:multiple-authors.adoc[each additional author] (`author_<n>`).
   It's enclosed in a pair of angle brackets (`< >`) on the author line.

   firstname_<n>::
   The first word in the value of the `author_<n>` attribute is automatically assigned to `firstname_<n>`.

   lastname_<n>::
   The last word in the value of the `author_<n>` attribute is automatically assigned to `lastname_<n>`.

   middlename_<n>::
   If `author_<n>` contains a `firstname_<n>` and `lastname_<n>`, any remaining words or characters found between these two attributes are assigned to the `middlename_<n>` attribute.

   authorinitials_<n>::
   The first character of the `firstname_<n>`, `middlename_<n>`, and `lastname_<n>` attribute values.


/docs/modules/document/pages/author-line.adoc
=============================================

.. code-block: asciidoc

   = Using the Author Line

   The author attributes can be implicitly set and assigned values using the author line.

   [#author-line]
   == What's the author line?

   The [.term]*author line* is directly after the document title line in the document header.
   When the content on this line is structured correctly, the processor assigns the content to the built-in `author` and `email` attributes.

   == When can I use the author line?

   In order for the processor to properly detect the author line and assign the content to the correct attributes, all of the following criteria must be met:

   . The header must contain a xref:title.adoc[document title].
   . The author information must be entered on the line directly beneath the document title.
   . The author line must start with an author name.
   . The content in the author line must be placed in a specific order and separated with the correct syntax.

   .Author line structure for single author
   [source]
   ----
   = Document Title
   firstname middlename lastname <email>
   ----

   The author's middle name is optional.
   An email or URL following the author's last name is also optional.
   If included, the email address must be enclosed in a pair of angle brackets (`< >`).

   The author line also accepts xref:multiple-authors.adoc[multiple authors].

   == Assign an author and email

   In <<ex-line>>, let's add an author and their email address using the author line.
   The author line must be placed on the line directly below the xref:title.adoc[document title] and start with an author's name.

   .Add an author and email using the author line
   [source#ex-line]
   ----
   = The Intrepid Chronicles
   Kismet R. Lee <kismet@asciidoctor.org> <.> <.>
   ----
   <.> Enter the author's name on the line below the document title.
   <.> In a pair of angle brackets (`< >`), enter the author's email or URL.

   Remember, a middle name and email are optional.
   The processor assigns the content on the author line to the built-in attributes using word position, word count, and syntax.

   When the default stylesheet is applied, the author information is displayed on the byline.
   The [.term]*byline* displays the author information and the xref:revision-information.adoc[revision information] directly beneath the document's title.

   image::author-line-with-author-and-email.png[Author and email information displayed on the byline,role=screenshot]

   .Using attribute references in the author line
   ****
   The author line is not intended to support the arbitrary placement of attribute references.
   While attribute references are replaced in the author line (as part of the header substitution group), they aren't substituted until after the line is parsed.
   This ordering can sometimes produce undesirable results.
   It's best to use the author line strictly as a shorthand for defining static author and email information.

   If you do need to use attribute references in the author or email values, you should xref:author-attribute-entries.adoc[define the attributes explicitly using attribute entries].
   ****


/docs/modules/document/pages/multiple-authors.adoc
==================================================

.. code-block: asciidoc

   = Add Multiple Authors to a Document

   The xref:author-line.adoc[author line] is the only way to assign more than one author to a document for display in the byline.
   Additionally, only the HTML 5 and Docbook converters can convert documents with multiple authors.

   == Multi-author syntax

   The information for each author is concluded with a semicolon (`;`).

   .Author line structure for multiple authors
   [source]
   ----
   = Document Title
   firstname middlename lastname <email>; firstname middlename lastname <email>
   ----

   Directly after each author's last name or optional email, enter a semicolon (`;`) followed by a space, and then enter the next author's information.

   === Escape a trailing character reference

   If an author name segment ends with a character reference (e.g., `\&#174;`), you must escape it from processing.
   One way to escape it is to add a trailing attribute reference (e.g., `\{empty}`).
   If the character reference appears at the end of the last author name segment, you can use a second semicolon instead.

   A better way of escaping the character reference is to replace it with an attribute reference (e.g., `\{reg}`).

   Even if the character reference is escaped, the segments of the author name will not be processed.
   Instead, the whole name will be assigned to the `author` and `firstname` attributes.
   This limitation may be lifted in the future.

   == List multiple authors on the author line

   The author line in <<ex-line-multiple>> lists the information for three authors.
   Each author's information is separated by a semicolon (`;`).
   Notice that the author _B. Steppenwolf_ doesn't have an email, so the semicolon is placed at the end of their name.

   .An author line with three authors and two email addresses
   [source#ex-line-multiple]
   ----
   include::example$multiple-authors.adoc[tag=header]
   ----

   The result of <<ex-line-multiple>> is displayed below.

   image::author-line-with-multiple-authors.png[Multiple authors and their emails displayed on the byline,role=screenshot]

   The information for each author can also be xref:reference-author-attributes.adoc#reference-multiple-authors[referenced in the document] using their respective built-in attribute.

   If an author name ends with with a character reference, you can preserve the semicolon in the character reference by adding a trailing attribute reference:

   ----
   AsciiDoc&#174;{empty} WG; Another Author
   ----

   Another solution entails moving the character reference to an attribute and inserting it using an attribute reference:

   ----
   :reg: &#174;
   AsciiDoc{reg} WG; Another Author
   ----

   Even though the character reference is escaped, the segments of the author name will not be processed.


/docs/modules/document/pages/author-attribute-entries.adoc
==========================================================

.. code-block: asciidoc

   = Assign Author and Email with Attribute Entries

   Instead of using an author line, a single author's information can be set and assigned with attribute entries in the document header.

   == author and email attribute syntax

   The built-in attributes `author` and `email` can be explicitly set and assigned values in the document header using attribute entries.

   .Set author and email attributes
   [source#ex-entries]
   ----
   = The Intrepid Chronicles
   :author: Kismet R. Lee <.>
   :email: kismet@asciidoctor.org <.>
   ----
   <.> The author's name is assigned to the built-in attribute `author`
   <.> The author's email is assigned to the built-in attribute `email`

   When the default stylesheet is applied, the author information assigned to these attributes is displayed on the byline.
   The result of <<ex-entries>> is displayed below.

   image::author-and-email-attributes.png["Byline containing author information from the explicitly set author and email attributes",role=screenshot]

   NOTE: You can't set the built-in attributes for multiple authors (e.g., `author_2`, `email_3`) using attribute entries.
   xref:multiple-authors.adoc[Multiple authors] can only be set using the author line.

   These attributes can also be xref:reference-author-attributes.adoc[referenced in the document].


/docs/modules/document/pages/reference-author-attributes.adoc
=============================================================

.. code-block: asciidoc

   = Reference the Author Information

   [#reference-author]
   == Referencing the author attributes

   You can reference the built-in author attributes in your document regardless of whether they're set via the author line or attribute entries.
   In <<ex-reference>>, the `author` and `email` attributes are assigned using attribute entries.

   .Reference the author attributes
   [source#ex-reference]
   ----
   include::example$reference-author.adoc[]
   ----

   The result of <<ex-reference>> is displayed below.

   image::reference-author.png[Reference the built-in attributes for an author,role=screenshot]

   [#reference-multiple-authors]
   == Referencing information for multiple authors

   The first author in an author line is assigned to the built-in attributes `author`, `email`, `firstname`, etc.
   Subsequent authors are assigned to the built-in author attributes, but the attribute names are appended with an underscore (`+_+`) and the numeric position of the author in the author line.
   For instance, the author _B. Steppenwolf_ in <<ex-reference-multiple>> is the second author in the author line.
   The built-in attributes used to reference their information are appended with the number _2_, e.g., `author_2`, `email_2`, `lastname_2`, etc.

   .Reference the built-in attributes for multiple authors
   [source#ex-reference-multiple]
   ----
   include::example$multiple-authors.adoc[tag=doc]
   ----

   The result of <<ex-reference-multiple>> is displayed below.

   image::reference-multiple-authors.png[Reference the built-in attributes for multiple author,role=screenshot]

   ////
   .Set the author and email attributes in the document header
   [source]
   ----
   = The Intrepid Chronicles
   :author: Kismet R. Lee <1>
   :email: kismet@asciidoctor.org <2>
   :author_2: Mara_Moss Wirribi <3>
   :email_2: mmw@asciidoctor.org <4>
   :author_3: B. Steppenwolf <5>
   :email_3: https://twitter.com/asciidoctor[@asciidoctor] <6>
   ----
   <1> The first author is assigned to the built-in attribute `author`.
   <2> The first author's email is assigned to the built-in attribute `email`.
   <3> The second author is assigned to the built-in attribute `author_2`.
   The underscore (`+_+`) between _Mara_ and _Moss_ tells the processor that the xref:compound-author-name.adoc[author has a double first name].
   <4> The second author's email is assigned to the built-in attribute `email_2`.
   <5> The third author is assigned to the built-in attribute `author_3`.
   <6> The value of an author's email attribute, such as `email_3`, can contain an active URL and link text.
   ////


/docs/modules/document/pages/compound-author-name.adoc
======================================================

.. code-block: asciidoc

   = Compound Author Names

   When a name consists of multiple parts, such as a compound or composite surname, or a double middle name, the processor needs to be explicitly told which words should be assigned to a specific attribute.

   == Connecting compound author names

   If the parts of an author's name aren't assigned to the correct built-in attributes, they may output the wrong information if they're referenced in the body of the document.
   For instance, if the name _Ann Marie Jenson_ was entered on the author line or assigned to the attribute `author`, the processor would assign _Ann_ to `firstname`, _Marie_ to `middlename`, and _Jenson_ to `lastname` based on the location and order of each word.
   This assignment would be incorrect because the author's first name is _Ann Marie_.

   When part of an author's name consists of more than one word, use an underscore (`+_+`) between the words to connect them.

   .Compound name syntax
   [source]
   ----
   = Document Title
   firstname_firstname lastname; firstname middlename_middlename lastname
   ----

   == Compound names in the author line

   In <<ex-line-compound>>, the first author has a compound first name and the second author has a compound surname.

   .Assign compound names in the author line
   [source#ex-line-compound]
   ----
   = Drum and Bass Breakbeats
   Ann_Marie Jenson; Tomás López_del_Toro <.> <.>
   ----
   <.> To signal to the processor that _Ann Marie_ is the author's first name (instead of their first and middle names), type an underscore (`+_+`) between each part of the author's first name.
   <.> The second author's last name consists of three words.
   Type an underscore (`+_+`) between each word of the author's last name.

   The result of <<ex-line-compound>> is displayed below.
   Notice that the underscores (`+_+`) aren't displayed when the document is rendered.

   image::author-line-with-compound-names.png[Compound author names displayed in the byline,role=screenshot]

   The underscore between each word in a compound name ensures that the parts of an author's name are assigned correctly to the corresponding built-in attributes.
   If you were to reference the first author's first name or the second author's last name in the document body, as shown in <<ex-reference-compound>>, the correct values would be displayed.

   .Reference authors with compound names
   [source#ex-reference-compound]
   ----
   = Drum and Bass Breakbeats
   Ann_Marie Jenson; Tomás López_del_Toro

   The first author's first name is {firstname}.

   The second author's last name is {lastname_2}.
   ----

   Like in the byline, the underscores (`+_+`) aren't displayed when the document is rendered.

   image::reference-compound-names.png[Compound author names displayed in the document body when referenced,role=screenshot]

   == Compound names in the author attribute

   An underscore (`+_+`) should also be placed between each part of a compound name when the author is assigned using the `author` attribute.

   .Assign a compound name using the author attribute
   [source#ex-compound]
   ----
   = Quantum Networks
   :author: Mara_Moss Wirribi <.>

   == About {author}

   {firstname} lives on the Bellarine Peninsula near Geelong, Australia. <.>
   ----
   <.> Assign the author's name to the `author` attribute.
   Enter an underscore (`+_+`) between each part of the author's first name.
   This ensures that their full first name is correct when it's automatically assigned to `firstname` by the processor.
   <.> The built-in attribute `firstname` is referenced in the document's body.
   The author's first name is automatically extracted from the value of `author` and assigned to `firstname`.

   The result of <<ex-compound>>, displayed below, shows that the processor assigned the correct words to the built-in attribute `firstname` since the author's full first name, _Mara Moss_, is displayed where `firstname` was referenced.

   image::author-attribute-with-compound-name.png[Compound author name displayed in the byline using the author attribute,role=screenshot]


/docs/modules/document/pages/revision-information.adoc
======================================================

.. code-block: asciidoc

   = Revision Information

   A document's revision information is assigned to three built-in attributes: `revnumber`, `revdate` and `revremark`.
   These optional attributes can be set and assigned values xref:revision-line.adoc[using the revision line] or xref:revision-attribute-entries.adoc[using attribute entries] in a document header.

   == Revision attributes

   revnumber::
   The document's revision number or version is assigned to the built-in `revnumber` attribute.
   When assigned using the revision line, the version must contain at least one number, and, if it isn't followed by a date or remark, it must begin with the letter *v* (e.g., `v7.0.6`).
   Any letters or symbols preceding the number, including *v*, are dropped when the document is rendered.
   If `revnumber` is set with an attribute entry, it doesn't have to contain a number and the entire value is displayed in the rendered document.

   revdate::
   The date the revision was completed is assigned to the built-in `revdate` attribute.
   If the date is assigned using the revision line, it must be separated from the version by a comma (e.g., `78.1, 2020-10-10`).
   The date can contain letters, numbers, symbols, and attribute references.
   //From @graphitefriction: This statement isn't true according to my tests: "When the version or revision remarks are assigned using the revision line, but the revision date isn't, then `revdate` will be assigned the `docdate` value." Instead, `revdate` is left unset

   revremark::
   Remarks about the revision of the document are assigned to the built-in `revremark` attribute.
   The remark must be separated by a colon (`:`) from the version or revision date when assigned using the revision line.


/docs/modules/document/pages/revision-line.adoc
===============================================

.. code-block: asciidoc

   = Using the Revision Line

   The revision attributes can be set and assigned values using the revision line.

   [#revision-line]
   == What's the revision line?

   The [.term]*revision line* is the line directly after the author line in the document header.
   When the content on this line is structured correctly, the processor assigns the content to the built-in `revnumber`, `revdate` and `revremark` attributes.

   == When can I use the revision line?

   In order for the processor to properly detect the revision line and assign the content to the correct attributes, all of the following criteria must be met:

   . The document header must contain a xref:title.adoc[document title] and an author line.
   . The revision information must be entered on the line directly beneath the xref:author-line.adoc[author line].
   . The revision line must start with the revision number.
   . The revision number must contain at least one number, but a number doesn't have to be the first character in the version.
   . The values in the revision line must be placed in a specific order and separated with the correct syntax.

   .Revision line structure
   [source]
   ----
   = Document Title
   author <email>
   revision number, revision date: revision remark
   ----

   When using the revision line, the revision date and remark are optional.

   * `pass:q[#v#]7.5` When the revision line only contains a revision number, prefix the number with a `v`.
   * `7.5pass:q[#,#] 1-29-2020` When the revision line contains a version and a date, separate the version number from the date with a comma (`,`).
   A `v` prefix before the version number is optional.
   * `7.5pass:q[#:#] A new analysis` When the revision line contains a version and a remark, separate the version number from the remark with a colon (`:`).
   A `v` prefix before the version number is optional.
   * `7.5pass:q[#,#] 1-29-2020pass:q[#:#] A new analysis` When the revision line contains a version, date, and a remark, separate the version number from the date with a comma (`,`) and separate the date from the remark with a colon (`:`).
   A `v` prefix before the version number is optional.

   == Assign revision information using the revision line

   The revision line in <<ex-line>> contains a revision number, date, and remark.

   .Revision line with a version, date and remark
   [source#ex-line]
   ----
   = The Intrepid Chronicles
   Kismet Lee <.>
   2.9, October 31, 2021: Fall incarnation <.> <.> <.>
   ----
   <.> The author line must be directly above the revision line.
   <.> The revision line must begin with the revision number.
   <.> The date is separated from the version by a comma (`,`).
   The date can contain letters, numbers, symbols, and attribute references.
   <.> The remark is separated from the date by a colon (`:`).

   When the default stylesheet is applied, the revision information is displayed on the same line as the author information.
   Note that the revision number is preceded with the word _Version_.
   This label is automatically added by the processor.
   It can be xref:version-label.adoc[changed or turned off with the version-label attribute].

   image::revision-line.png["Byline with a version number, revision date, and revision remark",role=screenshot]

   Let's look at another revision line.
   In <<ex-prefix>>, the version starts with a letter, the date is a reference to the attribute `docdate`, and there's a Unicode glyph in the remark.

   .Revision line with a version prefix, attribute reference and Unicode glyph
   [source#ex-prefix]
   ----
   include::example$revision-line-with-version-prefix.adoc[]
   ----

   The result of <<ex-prefix>> is displayed below.

   image::revision-line-with-version-prefix.png["Byline with the date derived from docdate and a remark with a Unicode glyph",role=screenshot]

   _LPR_ was removed from the version because any letters or symbols that precede the revision number in the revision line are dropped.
   To display the letters or symbols in front of a revision number, xref:revision-attribute-entries.adoc[set revnumber using an attribute entry].


/docs/modules/document/pages/revision-attribute-entries.adoc
============================================================

.. code-block: asciidoc

   = Assign Revision Attributes with Attribute Entries

   The revision information attributes can be set and assigned values with attribute entries.

   == When should I set revision attributes explicitly?

   You should set the revision attributes explicitly when one of the following occurs:

   * the document doesn't have an author line,
   * the document doesn't have a revision number,
   * you want the full value of the revision number--including any letter and symbol prefixes--to be displayed, or
   * a revision attribute's value contains characters or elements that conflict with the revision line syntax.

   == Set the revision attributes

   The attributes `revdate`, `revnumber` and `revremark` are set and assigned values in <<ex-entries>>.
   The order of the attribute entries doesn't affect their order in the byline of a rendered document.

   .Set the revision attributes in the document header
   [source#ex-entries]
   ----
   = The Intrepid Chronicles
   :revdate: April 4, 2022
   :revnumber: LPR55 <.>
   :revremark: The spring incarnation of {doctitle} <.>
   :version-label!: <.>
   ----
   <.> Any non-numeric characters that precede the version number aren't dropped when `revnumber` is set using an attribute entry.
   <.> The value of `revremark` can contain attribute references.
   <.> The `version-label` attribute is unset so that the word _Version_ isn't displayed in the byline.

   The result of <<ex-entries>> is displayed below.

   image::revision-attributes.png["Byline containing revision information from the explicitly set revnumber, revdate and revremark attributes",role=screenshot]

   The word _Version_ is absent from the rendered document's byline because xref:version-label.adoc[the version-label attribute] was unset.


/docs/modules/document/pages/version-label.adoc
===============================================

.. code-block: asciidoc

   = Version Label Attribute

   The `version-label` attribute controls the version label displayed before the revision number in the byline.

   [#set]
   == Change the version label in the byline

   By default, `version-label` is assigned the value `Version`.
   This label can be changed by setting `version-label` and assigning it a new value in the document header.

   .Assign a new label to version-label
   [source#ex-label]
   ----
   include::example$version-label.adoc[tag=set]
   ----

   The result of <<ex-label>> is displayed below.

   image::set-version-label.png["Byline with custom version label",role=screenshot]

   Notice that when `revnumber` is implicitly set using the revision line, any preceding letters are still removed even though `version-label` is explicitly assigned a value.

   [#unset]
   == Unset the version label

   You can remove the default version label from the byline by unsetting the `version-label` attribute.
   In an attribute entry, add a bang (`!`) to the attribute's name.

   .Unset version-label
   [source#ex-unset-label]
   ----
   include::example$version-label.adoc[tag=unset]
   ----

   The result of <<ex-unset-label>> is displayed below.

   image::unset-version-label.png["Byline without a version label",role=screenshot]


/docs/modules/document/pages/reference-revision-attributes.adoc
===============================================================

.. code-block: asciidoc

   = Reference the Revision Attributes

   You can reference the revision information attributes in your document regardless of whether they're set via the revision line or attribute entries.

   [#reference-revnumber]
   == Reference revnumber

   Remember, when `revnumber` is assigned via the revision line, any characters preceding the version number are dropped.
   For instance, the revision number in <<ex-line-references>> is prefixed with a _v_.

   .Revision line and revision attribute references
   [source#ex-line-references]
   ----
   include::example$reference-revision-line.adoc[]
   ----

   The result of <<ex-line-references>> below shows that the _v_ in the version number has been removed when it's rendered in the byline and referenced in the document.

   image::reference-revision-line.png["Revision line and rendered revision references to revnumber, revdate and revremark",role=screenshot]

   To display the entire value of `revnumber` when it's referenced in the document, you must set and assign it a value using an attribute entry.

   .Revision attribute entries and references
   [source#ex-references]
   ----
   include::example$reference-revision-attributes.adoc[]
   ----

   The entire value of the `revnumber` from <<ex-references>> is displayed in the byline, including the default `version-label` value _Version_.
   When referenced in the document, the entire value of `revnumber` is displayed because it was set with an attribute entry.

   image::reference-revision-attributes.png["Revision attribute entries and rendered revision references to revnumber, revdate and revremark",role=screenshot]

   If you don't want the default version label to be displayed in the byline, xref:version-label.adoc#unset[unset the version-label attribute].


/docs/modules/document/pages/metadata.adoc
==========================================

.. code-block: asciidoc

   = Document Metadata

   Document metadata, such as a description of the document, keywords, and custom information, can be assigned to attributes in the header.
   When converted to HTML, the values of these attributes will correspond to elements contained in the `<head>` section of an HTML document.

   [#description]
   == Description

   You can include a description of the document using the `description` attribute.

   [source]
   ----
   include::example$metadata.adoc[tag=desc-base]
   ----
   <.> If the document's description is long, you can break the attribute's value across several lines by ending each line with a backslash `\` that is preceded by a space.

   When converted to HTML, the document description value is assigned to the HTML `<meta>` element.

   .HTML output
   include::example$metadata.adoc[tag=desc-html]

   // TODO: Add attribute continuation documentation to attributes section

   [#keywords]
   == Keywords

   The `keywords` attribute contains a list of comma separated values that are assigned to the HTML `<meta>` element.

   [source]
   ----
   include::example$metadata.adoc[tag=key-base]
   ----

   .HTML output
   include::example$metadata.adoc[tag=key-html]

   == Custom metadata, styles, and functions

   You can add content, such as custom metadata, stylesheet, and script information, to the header of the output document using docinfo (document information) files.
   The xref:docinfo:index.adoc[docinfo file] section details what these files can contain and how to use them.


/docs/modules/document/pages/header.adoc
========================================

.. code-block: asciidoc

   = Document Header

   An AsciiDoc document may begin with a document header.
   The document header encapsulates the document title, author and revision information, document-wide attributes, and other document metadata.

   == Document header structure

   The optional document header is a series of contiguous lines at the start of the AsciiDoc source, after skipping any empty or comment lines.
   If a document has a header, _no content blocks are permitted above it_.
   In other words, the document must start with a document header if it has one.

   [IMPORTANT]
   ====
   [.lead]
   *The document header may not contain empty lines.*
   The first empty line the processor encounters after the document header begins marks the <<when-does-the-document-header-end,end of the document header>> and the start of the document body.
   ====

   A header typically begins with a xref:title.adoc[].
   When a document title is specified, it may be immediately followed by one or two designated lines of content.
   These implicit content lines are used to assign xref:author-information.adoc[] and xref:revision-information.adoc[] to the document.

   The header may contain the following elements as long as there aren't any empty lines between them:

   * optional document title (a level-0 heading)
   * optional author line or author and revision lines if the document title is present (should immediately follow the document title)
   * optional document-wide attributes (built-in and user-defined) declared using xref:attributes:attribute-entries.adoc[attribute entries],
   ** includes optional xref:metadata.adoc[metadata], such as a description or keywords
   * optional xref:ROOT:comments.adoc#comment-lines[comment lines]

   Notice in <<ex-basic-header>> that there are no empty lines between any of the entries.
   In other words, the lines are contiguous.

   .Common elements in a header
   [source#ex-basic-header]
   ----
   // this comment line is ignored
   = Document Title <.>
   Kismet R. Lee <kismet@asciidoctor.org> <.>
   :description: The document's description. <.>
   :sectanchors: <.>
   :url-repo: https://my-git-repo.com <.>
   <.>
   The document body starts here.
   ----
   <.> Document title
   <.> Author line
   <.> Attribute entry assigning metadata to a built-in document attribute
   <.> Attribute entry setting a built-in document attribute
   <.> Attribute entry assigning a value to a user-defined document attribute
   <.> The document body is separated from the document header by an empty line

   There are a few attribute entries in <<ex-basic-header>>.
   Each attribute entry, whether built-in or user-defined, must be entered on its own line.
   While attribute entries may be placed anywhere in the header, including above the document title, the preferred placement is below the title, if it's present.
   Since the document title is optional, it's possible for the header to only consist of attribute entries.

   == When does the document header end?

   *The first empty line in the document marks the end of the header.*
   The next line after the first empty line that contains content is interpreted as the beginning of the document's body.

   .Terminating a document header
   [source#ex-terminate]
   ----
   = Document Title
   Kismet R. Lee <kismet@asciidoctor.org>
   :url-repo: https://my-git-repo.com
   <.>
   This is the first line of content in the document body. <.>
   ----
   <.> An empty line ends the document header.
   <.> After the empty line, the next line with content starts the body of the document.

   The first line of the document body can be any valid AsciiDoc content, such as a section heading, paragraph, table, include directive, image, etc.
   Any attributes defined below the first empty line are not part of the document header and will not be scoped to the entire document.

   == Header requirements per doctype

   The header is optional when the `doctype` is `article` or `book`.
   A header is required when the document type is `manpage`.
   See the xref:asciidoctor:manpage-backend:index.adoc[manpage doctype] section for manual page (man page) requirements.

   If you put content blocks above the document header when using the default article doctype, you will see the following warning:

   ....
   level 0 sections can only be used when doctype is book
   ....

   While this warning can be mitigated by changing the doctype to book, it may lead to a secondary warning about an invalid part.
   That's because the document title will be repurposed as a part title and any lines that follow it as content blocks.
   If you're going to use the book doctype, you must structure your document to use xref:sections:parts.adoc[].

   == Header processing

   The information in the document header is displayed by default when converting to a standalone document.
   If you don't want the header of a document to be displayed, set the `noheader` attribute in the document's header or via the CLI.

   == Front matter

   Many static site generators, such as Jekyll and Middleman, rely on front matter added to the top of the document to determine how to convert the content.
   Asciidoctor has a number of attributes available to correctly handle front matter.
   See xref:asciidoctor:html-backend:skip-front-matter.adoc[] to learn more.


/docs/modules/document/examples/header.adoc
===========================================

.. code-block: asciidoc

   //all examples used in qr
   // tag::qr-author[]
   = Document Title
   Author Name <author@email.org>

   This document provides...
   // end::qr-author[]

   // tag::qr-rev[]
   = Document Title
   Author Name <author@email.org>; Another Author <a.author@email.org>
   v2.0, 2019-03-22

   This document provides...
   // end::qr-rev[]

   // tag::qr-attributes[]
   = Document Title
   Author Name <author@email.org>
   v2.0, 2019-03-22
   :toc:
   :homepage: https://example.org

   This document provides...
   // end::qr-attributes[]


/docs/modules/document/examples/doctitle.adoc
=============================================

.. code-block: asciidoc

   = The Intrepid Chronicles

   {doctitle} begin on a frigid morning.


/docs/modules/document/examples/document-title.adoc
===================================================

.. code-block: asciidoc

   = The Intrepid Chronicles

   This adventure begins on a frigid morning.


/docs/modules/document/examples/metadata.adoc
=============================================

.. code-block: asciidoc

   // tag::desc-base[]
   = The Intrepid Chronicles
   Kismet Lee; Lazarus Draeke
   :description: A story chronicling the inexplicable \ <.>
   hazards and unique challenges a team must vanquish \
   on their journey to finding an open source \
   project's true power.

   This journey begins on a bleary Monday morning.
   // end::desc-base[]
   Our team is in desperate need of double shot mochas, but the milk expired eight days ago.
   A trip to the dairy was out of the question.
   On Friday night, a mutant, script-injecting warlock had infected the Shetland cattle herd with a ravenous craving for tags and annotations.
   The security wolves were at a trust building retreat in Katchanga, and no one in the village could locate their defensive operations manual.

   Weak daylight trickled across the stripped pasture, chased by distant bovine screams...

   == Cavern Glow

   The river rages through the cavern, rattling its content...

   == The Ravages of Writing

   Her finger socks had been vaporized by crystalline nuggets of...

   === A Recipe for Potion

   Two fresh Burdockian leaves, harvested by the light of the teal moons...

   ==== Searching for Burdockian

   Crawling through the twisted understory...

   == Dawn on the Plateau

   Hanging from...

   // tag::desc-html[]
   [source,xml]
   ----
   <!DOCTYPE html>
   <html lang="en">
   <head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta name="generator" content="Asciidoctor 2.0.11">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <meta name="description" content="A story chronicling the inexplicable
   hazards and unique challenges a team must vanquish on their journey
   to finding an open source project's true power.">
   <title>The Intrepid Chronicles</title>
   <style>
   ----
   // end::desc-html[]

   // tag::key-base[]
   = The Intrepid Chronicles
   Kismet Lee; Lazarus Draeke
   :keywords: team, obstacles, journey, victory

   This journey begins on a bleary Monday morning.
   // end::key-base[]

   // tag::key-html[]
   [source,xml]
   ----
   <!DOCTYPE html>
   <html lang="en">
   <head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta name="generator" content="Asciidoctor 2.0.11">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <meta name="keywords" content="team, obstacles, journey, victory">
   <title>The Intrepid Chronicles</title>
   <style>
   ----
   // end::key-html[]


/docs/modules/document/examples/multiple-authors.adoc
=====================================================

.. code-block: asciidoc

   // tag::header[]
   = The Intrepid Chronicles
   Kismet R. Lee <kismet@asciidoctor.org>; B. Steppenwolf; Pax Draeke <pax@asciidoctor.org>
   // end::header[]

   // tag::doc[]
   = The Intrepid Chronicles
   Kismet R. Lee <kismet@asciidoctor.org>; B. Steppenwolf; Pax Draeke <pax@asciidoctor.org>

   .About {author_2}
   Mr. {lastname_2} lives in the Rocky Mountains.

   .About {author_3}
   {firstname_3}, also known as {authorinitials_3}, loves to surf.

   .About {author}
   You can contact {firstname} at {email}.
   // end::doc[]


/docs/modules/document/examples/reference-author.adoc
=====================================================

.. code-block: asciidoc

   = The Intrepid Chronicles
   :author: Kismet R. Lee
   :email: kismet@asciidoctor.org

   == About {author}

   You can contact {firstname} at {email}.

   P.S. Don't ask what the {middlename} stands for; it's a secret.
   {authorinitials}


/docs/modules/document/examples/reference-revision-attributes.adoc
==================================================================

.. code-block: asciidoc

   = The Intrepid Chronicles
   Kismet Lee
   :revnumber: v8.3
   :revdate: July 29, 2025
   :revremark: Summertime!

   == Colophon

   [%hardbreaks]
   Revision number: {revnumber}
   Revision date: {revdate}
   Revision notes: {revremark}


/docs/modules/document/examples/reference-revision-line.adoc
============================================================

.. code-block: asciidoc

   = The Intrepid Chronicles
   Kismet Lee
   v8.3, July 29, 2025: Summertime!

   == Colophon

   [%hardbreaks]
   Revision number: {revnumber}
   Revision date: {revdate}
   Revision notes: {revremark}


/docs/modules/document/examples/revision-line-with-version-prefix.adoc
======================================================================

.. code-block: asciidoc

   = The Intrepid Chronicles
   Kismet Lee
   LPR55, {docdate}: A Special ⚄ Edition


/docs/modules/document/examples/title.adoc
==========================================

.. code-block: asciidoc

   // tag::qr-title[]
   = Document Title

   This document provides...
   // end::qr-title[]

   // tag::sub-1[]
   = The Intrepid Chronicles: A Tale of Caffeine and Words

   It began on a bleary Monday morning.
   // end::sub-1[]

   // tag::sub-2[]
   = A Cautionary Tale: The Intrepid Chronicles: A Tale of Caffeine and Words

   It began on a bleary Monday morning.
   // end::sub-2[]

   // tag::sub-3[]
   :title-separator: {sp}|
   = The Intrepid Chronicles | A Tale of Caffeine and Words

   It began on a bleary Monday morning.
   // end::sub-3[]


/docs/modules/document/examples/version-label.adoc
==================================================

.. code-block: asciidoc

   // tag::set[]
   = The Intrepid Chronicles
   Kismet Lee
   v3: An icy winter incarnation
   :version-label: Edition
   // end::set[]

   // tag::unset[]
   = The Intrepid Chronicles
   Kismet Lee
   v3: An icy winter incarnation
   :!version-label:
   // end::unset[]


/docs/modules/sections/nav.adoc
===============================

.. code-block: asciidoc

   * Sections
   ** xref:titles-and-levels.adoc[]
   *** xref:title-links.adoc[]
   ** xref:auto-ids.adoc[]
   *** xref:id-prefix-and-separator.adoc[]
   ** xref:custom-ids.adoc[]
   ** xref:numbers.adoc[]
   ** xref:styles.adoc[]
   *** xref:special-section-titles.adoc[]
   *** xref:special-section-numbers.adoc[]
   // Front matter
   *** xref:colophon.adoc[]
   *** xref:dedication.adoc[]
   // & Epigraph
   *** xref:abstract.adoc[]
   *** xref:abstract-block.adoc[]
   *** xref:preface.adoc[]
   *** xref:parts.adoc[]
   **** xref:part-numbers-and-signifier.adoc[]
   *** xref:chapters.adoc[]
   // Back matter
   *** xref:appendix.adoc[]
   *** xref:glossary.adoc[]
   *** xref:bibliography.adoc[]
   *** xref:user-index.adoc[]
   ** xref:section-ref.adoc[]


/docs/modules/sections/pages/titles-and-levels.adoc
===================================================

.. code-block: asciidoc

   = Section Titles and Levels

   Sections partition the document into a content hierarchy.
   A section is an implicit enclosure.
   Each section begins with a title and ends at the next sibling section, ancestor section, or end of document.
   Nested section levels must be sequential.

   == Section level syntax

   A section title marks the beginning of a section and also acts as the heading for that section.
   The section title must be prefixed with a section marker, which indicates the section level.
   The number of equal signs in the marker represents the section level using a 0-based index (e.g., two equal signs represents level 1).
   A section marker can range from two to six equal signs and must be followed by a space.

   In the HTML output, the section title is represented by a heading tag.
   The number of the heading tag is one more than the section level (e.g., section level 1 becomes an h2 tag).
   The section level ranges from 0-5.
   This limit was established primarily due to the fact that HTML only provides heading tags from h1 to h6 (making level 5 the upper limit).

   .Section titles available in an article doctype
   [source]
   ----
   include::example$section.adoc[tag=base]
   ----

   The section titles are rendered as:

   ====
   include::example$section.adoc[tag=b-base]
   ====

   Section levels must be nested logically.
   There are two rules you must follow:

   . A document can only have multiple level 0 sections if the `doctype` is set to `book`.
    ** The first level 0 section is the document title; subsequent level 0 sections represent parts.
   . Section levels cannot be skipped when nesting sections (e.g., you can't nest a level 5 section directly inside a level 3 section; an intermediary level 4 section is required).

   For example, the following syntax is illegal:

   [source]
   ----
   include::example$section.adoc[tag=bad]
   ----

   Content above the first section title is designated as the document's preamble.
   Once the first section title is reached, content is associated with the section it is nested in.

   [source]
   ----
   include::example$section.adoc[tag=content]
   ----

   TIP: In addition to the equals sign marker used for defining section titles, Asciidoctor recognizes the hash symbol (`#`) from Markdown.
   That means the outline of a Markdown document will be converted just fine as an AsciiDoc document.

   == Titles as HTML headings

   When the document is converted to HTML 5 (using the built-in `html5` backend), each section title becomes a heading element where the heading level matches the number of equal signs.
   For example, a level 1 section (`==`) maps to an `<h2>` element.


/docs/modules/sections/pages/title-links.adoc
=============================================

.. code-block: asciidoc

   = Activate Section Title Links

   [#link]
   == Turn section titles into links

   To turn section titles into links, enable the `sectlinks` attribute.
   The default Asciidoctor stylesheet displays linked section titles with the same color and styles as unlinked section titles.

   [#anchor]
   == Add &sect; to section titles

   When the `sectanchors` attribute is enabled on a document, an anchor (empty link) is added before the section title.
   The default Asciidoctor stylesheet renders the anchor as a section entity (*&sect;*) that floats to the left of the section title.


/docs/modules/sections/pages/auto-ids.adoc
==========================================

.. code-block: asciidoc

   = Autogenerate Section IDs
   :page-aliases: ids.adoc
   :url-ntname: https://www.w3.org/TR/REC-xml/#NT-Name

   Sections and discrete headings support automatic ID generation.
   Unless you've assigned a custom ID to one of these blocks, or you've unset the `sectids` document attribute, the AsciiDoc processor will automatically generate and assign an ID for the block using the title.
   This page explains how the ID is derived and how to control this behavior.

   == How a section ID is computed

   The AsciiDoc processor builds an ID from the title using the following order of events and rules:

   * Inline formatting is applied (in title substitution order).
   * All characters are converted to lowercase.
   * The value of the xref:id-prefix-and-separator.adoc#prefix[idprefix attribute] (`+_+` by default) is prepended.
   * Character references, HTML/XML tags (not their contents), and invalid ID characters are removed.
   ** Refer to the {url-ntname}[NT-Name^] section of the XML specification for a list of valid ID characters.
   * Spaces, hyphens, and periods are replaced with the value of the xref:id-prefix-and-separator.adoc#separator[idseparator attribute] (`+_+` by default)
   * Repeating separator characters are condensed.
   * If necessary, a sequence number is appended until the ID is unique within the document.

   Given the following section title:

   ----
   == Wiley & Sons, Inc.
   ----

   The processor will produce the following ID:

   ....
   _wiley_sons_inc
   ....

   You can toggle ID autogeneration on and off using `sectids` and xref:id-prefix-and-separator.adoc[customize the ID prefix and word separator].

   CAUTION: If the title contains a forward looking xref (i.e., an xref to an element that comes later in document order), you must either assign a custom ID to the block or <<disable,disable ID generation>> around the title.
   Otherwise, the AsciiDoc processor may warn that the reference is invalid.
   This happens because, in order to generate an ID, the processor must convert the title.
   This conversion happens before the processor has visited the target element.
   As a result, the processor is not able to lookup the reference and therefore must consider it invalid.

   [#disable]
   == Disable automatic section ID generation

   To disable autogeneration of section and discrete heading IDs, unset the `sectids` attribute.

   ----
   :!sectids:
   ----

   xref:custom-ids.adoc[Custom IDs] are still used even when automatic section IDs are disabled.

   You can unset this attribute anywhere that attribute entries are permitted in the document.
   By doing so, you can disable ID generation for only certain sections and discrete headings.

   ----
   == ID generation on

   :!sectids:
   == ID generation off
   :sectids:

   == ID generation on again
   ----

   If you disable autogenerated section IDs, and you don't assign a custom ID to a section or discrete headings, you won't be able to create cross references to that element.


/docs/modules/sections/pages/id-prefix-and-separator.adoc
=========================================================

.. code-block: asciidoc

   = Change the ID Prefix and Separator

   When an AsciiDoc processor xref:auto-ids.adoc[auto-generates section IDs], it begins the value with an underscore and uses a hyphen between each word.
   These characters can be customized with the `idprefix` and `idseparator` attributes.

   [#prefix]
   == Change the ID prefix

   By default, the AsciiDoc processor begins an auto-generated section ID with an underscore (`+_+`).
   This default can cause problems when referencing the ID in an xref (either within the same file or a deep link to another file).
   The leading underscore may get paired with an underscore somewhere else in the paragraph, thus resulting in unexpected text formatting.
   One workaround is to disrupt the match by prefixing the ID with `\{empty}` (e.g., `\{empty}_section_title`) or using an attribute to refer to the target.
   Instead, we strongly encourage you to customize the ID prefix.

   You can change this prefix by setting the `idprefix` attribute and assigning it a new value.
   The value of `idprefix` must begin with a valid ID start character and can have any number of additional valid ID characters.

   [source]
   ----
   :idprefix: id_
   ----

   If you want to remove the prefix, set the attribute to an empty value.

   [source]
   ----
   :idprefix:
   ----

   WARNING: If you set the `idprefix` to empty, you could end up generating IDs that are invalid in DocBook output (e.g., an ID that begins with a number) or that match a built-in ID in the HTML output (e.g., `header`).
   In this case, we recommend either using a non-empty value of `idprefix` or assigning xref:custom-ids.adoc[explicit IDs to your sections].

   [#separator]
   == Change the ID word separator

   The default section ID word separator is an underscore (`+_+`).
   You can change the separator with the `idseparator` attribute.
   Unless empty, the value of the `idseparator` must be _exactly one valid ID character_.

   [source]
   ----
   :idseparator: -
   ----

   If you don't want to use a separator, set the attribute to an empty value.

   [source]
   ----
   :idseparator:
   ----

   NOTE: When a document is rendered on GitHub, the `idprefix` is set to an empty value and the `idseparator` is set to `-`.
   These settings are used to ensure that the IDs generated by GitHub match the IDs generated by Asciidoctor.


/docs/modules/sections/pages/custom-ids.adoc
============================================

.. code-block: asciidoc

   = Assign Custom IDs and Reference Text
   :url-adoc-a2x: https://aerostitch.github.io/misc/asciidoc/asciidoc-title_uft8.html

   You can assign a custom ID and optional reference text (i.e., label) to a section (see xref:attributes:id.adoc#anchor[anchor]).
   The custom ID is used in place of the autogenerated ID.
   This can be useful when you want to define a stable anchor for linking to a section using a cross reference.
   The reference text is used when referencing the ID without specifying explicit text.
   This is a good way to centrally manage the automatic reference text that is used to refer to a section.

   Here's an example of a section with a custom ID:

   [source]
   ----
   include::example$section.adoc[tag=with-anchor-shorthand]
   ----

   Here's an example of a section with a custom ID and reference text:

   [source]
   ----
   include::example$section.adoc[tag=with-anchor-and-reftext-shorthand]
   ----

   IMPORTANT: The value of the reftext attribute must be quoted if it contains spaces or commas.

   The ID and reference text can also be defined using the legacy block anchor syntax:

   [source]
   ----
   include::example$section.adoc[tag=with-anchor-and-reftext]
   ----

   When using the block anchor syntax, the ID must conform to the https://www.w3.org/TR/REC-xml/#NT-Name[XML Name] rules, which means the ID must start with a letter, an underscore, or a colon.

   IMPORTANT: AsciiDoc allows all valid UTF-8 characters to be used in section IDs.
   If you're generating a PDF from AsciiDoc using a2x and dblatex, see {url-adoc-a2x}[Using UTF-8 titles with a2x] to learn about the required `latex.encoding=utf8` switch to activate this portability.

   == Assign auxiliary IDs

   A section title can only have a single primary ID.
   However, it's possible to register auxiliary IDs on a section title for referencing from the URL using inline anchors.
   This feature works regardless of whether you assign an explicit (primary) ID.

   CAUTION: If possible, you should avoid adding inline anchors on a section title.
   However, if you need to be able to link to that section from a URL using alternate fragment identifiers, this is what you need to use.

   Here's how to register auxiliary IDs using inline anchors when using an autogenerated ID:

   .Register auxiliary IDs at the beginning of the section title
   [source]
   ----
   == [[secondary-id]][[tertiary-id]]Section Title
   ----

   .Register auxiliary IDs at the end of the section title
   [source]
   ----
   == Section Title[[secondary-id]][[tertiary-id]]
   ----

   Where you place the inline anchor is where the anchor will end up in the output.
   The beginning is the preferred location.

   These additional anchor points don't interfere with the declaration of the primary ID, as shown in the next example.

   .Register auxiliary IDs on a section title with an explicit ID
   [source]
   ----
   [#primary-id]
   == [[secondary-id]][[tertiary-id]]Section Title
   ----

   IMPORTANT: These auxiliary IDs are not registered with the referencing system.
   That means they cannot be used for referencing the section title within the document.
   They are only intended for assigning auxiliary fragment identifiers to the section title so it can be referenced the from the URL using a URL fragment (aka deep linking).
   Only the primary ID can be used for referencing the section title within the document.


/docs/modules/sections/pages/numbers.adoc
=========================================

.. code-block: asciidoc

   = Section Numbers
   // New page, content taken from sections.adoc

   == Turn on section numbers

   Sections aren't numbered by default.
   However, you can enable this feature by setting the attribute `sectnums`.

   [source]
   ----
   = Title
   :sectnums:
   ----

   When `sectnums` is set, level 1 (`==`) through level 3 (`====`) section titles are prefixed with arabic numbers in the form of _1._, _1.1._, etc.
   Section numbers can be set and unset via the document header, CLI, and API.
   Once you've set `sectnums`, you can reduce or increase the section levels that get numbered in the whole document with the <<numlevels,sectnumlevels attribute>>.
   You can also control whether a section is numbered on a section by section basis.

   === Toggle section numbers on or off per section

   The `sectnums` attribute is a unique attribute.
   It's a [.term]*flexible attribute*, which means it can be set and unset midstream in a document, even if it is enabled through the API or CLI.
   This allows you to toggle numbering on and off throughout a document.

   //You can also use `sectnums` above any section title in the document to toggle the auto-numbering setting.
   To turn off numbering for one or more sections, insert the attribute above the section where you want numbering to cease and unset it by adding an exclamation point to the end of its name.
   To turn section numbering back on midstream, reset the attribute above the section where numbering should resume.

   [source]
   ----
   include::example$section.adoc[tag=num-off]
   ----

   For regions of the document where section numbering is turned off, the section numbering will not be incremented.
   Given the above example, the sections will be numbered as follows:

   ....
   include::example$section.adoc[tag=num-out]
   ....

   The section number does not increment in regions of the document where section numbers are turned off.

   === sectnums order of precedence

   If `sectnums` is set on the command line or API, it overrides the value set in the document header, but it does not prevent the document from toggling the value for regions of the document.

   If it is unset (`sectnums!`) on the command line or API, then the numbers are disabled regardless of the setting within the document.

   [#numlevels]
   == Specify the section levels that are numbered

   When `sectnums` is set, level 1 (`==`) through level 3 (`====`) section titles are numbered by default.
   You can increase or reduce the section level limit by setting the `sectnumlevels` attribute and assigning it the section level you want it to number.
   The `sectnumlevels` attribute accepts a value of 0 through 5, and it can only be set in the document header.

   [source]
   ----
   include::example$section.adoc[tag=sectnuml]
   ----
   <.> When the `sectnumlevels` attribute is assigned a value of `2`, level 3 through 5 section titles are not numbered.
   // (i.e., not prefixed with a number).

   When the `doctype` is `book`, level 1 sections become xref:chapters.adoc[chapters].
   Therefore, a `sectnumlevels` of `4` translates to 3 levels of numbered sections inside each chapter.

   Assigning `sectnumlevels` a value of `0` is effectively the same as disabling section numbering (`sectnums!`).
   However, if your document is a xref:parts.adoc[multi-part book] with xref:part-numbers-and-labels.adoc#partnums[part numbering enabled], then you'd have to set `sectnumlevels` to `-1` to disable part numbering too (the equivalent of `partnums!`).


/docs/modules/sections/pages/styles.adoc
========================================

.. code-block: asciidoc

   = Section Styles for Articles and Books

   AsciiDoc provides built-in styles for the specialized front matter and back matter sections found in journal articles, academic papers, and books.
   These styled sections are referred to as [.term]*special sections*.
   The document type, `article` or `book`, determines which section styles are available for use.

   == Book section styles

   The following section styles are permitted in the `book` document type:

   // front
   * abstract (becomes a chapter)
   * colophon
   * dedication
   * acknowledgments
   * preface
   * partintro (must be first child of part)
   // back
   * appendix
   * glossary
   * bibliography
   * index

   The following styles are implied by the location of the section in the document and are thus not special sections.

   * part
   * chapter

   == Article section styles

   The following section styles are permitted in the `article` document type:

   // front
   * abstract
   // back
   * appendix
   * glossary
   * bibliography
   * index

   ////
   Only these section styles can have subsections:

   // front matter
   * abstract
   //(translated into a chapter)
   * preface
   // back matter
   * appendix
   ////


/docs/modules/sections/pages/special-section-numbers.adoc
=========================================================

.. code-block: asciidoc

   = Number Special Sections

   Sections that are assigned a built-in special style aren't numbered by default.
   To number regular sections as well as special sections, set `sectnums` and assign it a value of `all`.

   [source]
   ----
   = Title
   :sectnums: all
   ----

   The assignment of appendix numbers isn't affected by `sectnums` as their section title prefixes are controlled by the attribute xref:appendix.adoc#caption[appendix-caption].
   Book parts aren't numbered by `sectnums` either, instead, they're xref:part-numbers-and-labels.adoc[controlled by `partnums`].


/docs/modules/sections/pages/special-section-titles.adoc
========================================================

.. code-block: asciidoc

   = Hide Special Section Titles

   If supported by the converter, the title of a xref:styles.adoc[special section], such as the Dedication, can be turned off by setting the `notitle` option (e.g., `%notitle` or `opts=notitle`) (previously `untitled`) on the section.

   ----
   [dedication%notitle]
   == Dedication

   include::example$dedication.adoc[tag=body]
   ----

   Although the title is hidden in the output document, it still needs to be specified in the AsciiDoc source for the purpose of referencing.
   The title will be used as the reftext of a cross reference, just as with any section.


/docs/modules/sections/pages/colophon.adoc
==========================================

.. code-block: asciidoc

   = Colophon
   :keywords: edition notice, impressum, masthead, imprint, disclosure, imprint, copyright

   A colophon contains factual information about the book, particularly relating to its production.
   It may include information such as the ISBN, publishing house, edition and copyright dates, legal notices and disclaimers, typographic style, fonts and paper used, cover art and layout credits, binding method, and any other significant production notes.

   The colophon (or colophons), if present, almost always occur at the very beginning (front matter) or end (back matter) of a book.
   However, they can also be placed anywhere in an AsciiDoc manuscript as a top-level section.
   In a printed book, the colophon is often found on the verso side of the title page.

   == Colophon section syntax

   To use the `colophon` section style, the document type must be `book`.
   If the book does not have parts, the colophon must be a level 1 section (`==`).

   [source]
   ----
   [colophon]
   == Colophon

   include::example$colophon.adoc[tag=body]
   ----

   If the book has parts, the colophon must be a level 0 section (`=`).

   [source]
   ----
   [colophon]
   = Colophon

   include::example$colophon.adoc[tag=body]
   ----

   The colophon will only be numbered if the `sectnums` attribute has the value `all`.


/docs/modules/sections/pages/dedication.adoc
============================================

.. code-block: asciidoc

   = Dedication
   :keywords: respect, homage, front matter

   A dedication page is used to express gratitude.

   == Dedication section syntax

   To use the `dedication` section style, the document type must be `book`.
   The dedication section must be a level 1 section (`==`), unless the book has parts.

   [source]
   ----
   [dedication]
   == Dedication

   include::example$dedication.adoc[tag=body]
   ----

   If the book has parts, the dedication section must be a level 0 section (`=`).

   [source]
   ----
   [dedication]
   = Dedication

   include::example$dedication.adoc[tag=body]
   ----


/docs/modules/sections/pages/abstract.adoc
==========================================

.. code-block: asciidoc

   = Abstract (Section)

   An abstract is a concise overview of an article.
   The abstract section style can be used in the `article` document type.

   == Abstract section syntax

   The `abstract` section style must be set on the first section of the article, as seen in the example below:

   [source]
   ----
   include::example$abstract.adoc[]
   ----

   If you want to style a paragraph or an open block as an abstract, instead of a whole section, see the xref:abstract-block.adoc[abstract block style] documentation.

   ////
   There's some sort of funkiness with book and abstract so we're putting this section on hold.

   == Book abstract syntax

   When the document type is book, the `abstract` section style must be placed on the first section _inside_ the chapter section.
   The section must be one section level below the chapter, that is, the chapter is marked up as level 1 (`==`) so its abstract must be marked up as level 2 (`===`).
   An abstract may not be used _before_ a part or chapter in a book.

   [source]
   ----
   = Book Title
   :doctype: book

   == Chapter Title

   [abstract]
   === Summary

   Documentation is a distillation of many long adventures.

   === Section
   ----
   ////


/docs/modules/sections/pages/abstract-block.adoc
================================================

.. code-block: asciidoc

   // REVIEW we may want to rethink where this page is located
   = Abstract (Block)

   An abstract is a concise overview of a document.
   The `abstract` block style can be placed on an open block or paragraph.
   Here's an example of the abstract block style set on a paragraph:

   [source]
   ----
   = Document Title

   [abstract]
   .Abstract
   Documentation is a distillation of many long adventures.

   == First Section
   ----

   The abstract block style does not require the open block or paragraph to have a title, and it does not depend on a subsequent section to terminate it.

   [source]
   ----
   = Document Title

   [abstract]
   --
   This article will take you on a wonderful adventure of knowledge.

   You'll start with the basics.
   Beyond that, where you go is up to you.
   --

   Your journey begins here.
   ----

   TIP: To include a quote at the beginning of a chapter in a book, wrap a quote block inside an abstract block.

   There's also an xref:abstract.adoc[abstract section style].


/docs/modules/sections/pages/preface.adoc
=========================================

.. code-block: asciidoc

   = Preface
   :keywords: front matter, forward, introduction, proem, pref

   A preface is a special section that precedes the first chapter of a book or a book part.

   == Preface for a book

   The `preface` section style can only be used when the doctype is `book`.
   A preface can contain subsections.
   When a book doesn't contain parts, the preface must be defined as a level 1 section (`==`) and any preface subsections must start at level 2 (`===`).

   [source]
   ----
   include::example$preface.adoc[tag=book]
   ----

   == Preface for a book part

   To create a preface for a book part, the preface must be defined as a level 1 section (`==`) and any subsections must start at level 2 (`===`).
   The preface must be the first section in the part.

   [source]
   ----
   include::example$preface.adoc[tag=part]
   ----

   ////
   As an alternative to a special section, the AsciiDoc processor will automatically promote the preamble to a preface.
   The title of the preface is set using the `preface-title` document attribute.
   When defined this way, the preface may not contain subsections.

   [source]
   ----
   = Book Title
   :doctype: book
   :preface-title: Documentation Preface

   The basis for this documentation germinated when I awoke one morning and was confronted by the dark and stormy eyes of the chinchilla.
   She had conquered the mountain of government reports that, over the course of six months, had eroded into several minor foothills and a creeping alluvial plain of loose papers.

   == Chapter 1

   ...
   ----

   The special section is the preferred way of defining a preface.
   ////


/docs/modules/sections/pages/parts.adoc
=======================================

.. code-block: asciidoc

   = Book Parts

   Parts can only be used when the document type is `book`.
   The presence of at least one part implies that the document is a multi-part book.
   (There's no dedicated `doctype` for a multi-part book to distinguish it from a book with only chapters).

   == Anatomy of a part

   A part is a level 0 section.
   A part must contain at least one level 1 section.
   The first part is the first level 0 section in the document that comes after the document title.
   Like the document title, a part is designated by a level 0 section title (`=`).

   ----
   include::example$part.adoc[tag=basic]

   ...
   ----

   A part can have an optional introduction (similar to the preamble of the document), known as a part intro.
   The part intro is the content between the part title and the first section in the part.
   The part intro can be marked explicitly using the `partintro` style on either a paragraph or open block.

   AsciiDoc provides document attributes to control the xref:part-numbers-and-labels.adoc[numbering and labeling parts].

   == Part intro

   The content between the part title and the first section in the part is the part intro.
   Normally, the part intro is inferred, as shown here:

   -----
   include::example$part.adoc[tags=**;!style]
   -----

   You can mark the part intro explicitly by adding the `partintro` style on the sole block before the first section.

   -----
   include::example$part.adoc[tags=**]
   -----

   == Special sections for parts

   A part can have its own xref:preface.adoc[preface], xref:bibliography.adoc[bibliography], xref:glossary.adoc[glossary] and xref:user-index.adoc[index].

   ----
   include::example$part-with-special-sections.adoc[]
   ----

   Special sections can also be correlated directly with the book, as part siblings.
   Since the book preface in the previous example comes before the first part, you can write it as level 1 section if you prefer.

   [,asciidoc]
   ----
   [preface]
   == Book Preface

   This is the preface for the whole book.

   === Preface Subsection

   Chinchillas rule the world.
   ----

   Read on to find out how to use special sections as part siblings.

   == Special sections as part siblings

   In a multi-part book, parts occupy the top level in the hierarchy.
   If you were to define a special section at level 1 that follows a part in a multi-part book, it will become a child of that part.
   If you want the special section to be owned by the book instead, as a sibling of parts, it must be defined at the top level too.

   The AsciiDoc syntax allows special sections in a multi-part book to be defined using a level 0 section title (i.e., `=`).
   When the document is parsed, the level of the special section will automatically be adjusted to a level 1 section in the model.
   Despite this level change, the special section remains as a sibling of parts in the hierarchy.
   The one level of offset (level 0 instead of level 1) is only a hint to the parser to make the special section a sibling of parts.

   You can see this syntax used for the appendix in the following example.

   [,asciidoc]
   ----
   = Multi-Part Book
   :doctype: book

   = Part Title

   == Chapter Title

   [appendix]
   = Appendix Title
   ----

   For consistency, it's best to also make special sections part-like if they come before the first part.
   However, technically the syntax doesn't require it.

   [,asciidoc]
   ----
   = Multi-Part Book
   :doctype: book

   [preface]
   = Book Preface

   = Part Title

   == Chapter Title
   ----

   If the special section supports nested sections, the next level must be level 2 (i.e., `===`), since the special section itself has level 1.
   Here's an example of a multi-part book that has a special section before the part and a special section with subsections after the part.

   ----
   include::example$multipart-book-with-special-sections.adoc[]
   ----

   When you convert this document, notice that the special sections are siblings of the part in the table of contents.

   image::multipart-toc-with-special-sections.png[TOC of multi-part book with special sections,350]

   Notice that the subsections of the special sections are only a single level below the parent section rather than two levels below.


/docs/modules/sections/pages/part-numbers-and-signifier.adoc
============================================================

.. code-block: asciidoc

   = Part Numbers and Signifier
   :page-aliases: part-numbers-and-labels.adoc

   [#partnums]
   == Number book parts

   Book part numbers are controlled by the `partnums` attribute, not `sectnums`.
   To autogenerate part numbers, set the `partnums` attribute in the book header.

   [source]
   ----
   = The Secret Manual
   :doctype: book
   :sectnums:
   :partnums:

   = Defensive Operations

   == An Introduction to DefenseOps

   = Managing Werewolves
   ----

   When rendered, part numbers are displayed as Roman numerals.

   ....
   Part I. Defensive Operations
   1. An Introduction to DefenseOps
   Part II. Managing Werewolves
   ....

   [#part-signifier]
   == Customize the part signifier

   The signifier (i.e., prefix) _Part_ is automatically added to the beginning of the part titles when the `partnums` attribute is set.
   The signifier is offset from the auto-generated part number by a space.
   You can modify the signifier by defining the `part-signifier` attribute in the header of your book.

   [source]
   ----
   :part-signifier: Component
   ----

   To remove the prefix, unset the `part-signifier` attribute in the document header:

   ----
   :!part-signifier:
   ----


/docs/modules/sections/pages/chapters.adoc
==========================================

.. code-block: asciidoc

   = Chapters

   [#chapter-signifier]
   == Customize the chapter signifier

   If the `chapter-signifier` (i.e., prefix) is set, the value of this attribute is automatically added to the beginning of chapter titles in a book when the `sectnums` attribute is also set.
   The signifier is offset from the auto-generated chapter number by a space.
   For example, the chapter title may appear in the output document as follows:

    Chapter 1. Title

   A chapter is defined as a level 1 section without a block style when the doctype type is book.
   You can modify the signifier by defining the `chapter-signifier` attribute in the header of your book.

   ----
   :chapter-signifier: Peatükk
   ----

   To remove the prefix, unset the `chapter-signifier` attribute in the document header:

   ----
   :!chapter-signifier:
   ----


/docs/modules/sections/pages/appendix.adoc
==========================================

.. code-block: asciidoc

   = Appendix

   The `appendix` section style can be used in books and articles, and it can have subsections.
   While the AsciiDoc structure allows appendices to be placed anywhere, it's customary to place them near the end of the document.

   == Appendix section syntax

   For articles, the appendix must be defined as a level 1 section (`==`).
   For example:

   [source]
   ----
   include::example$appendix.adoc[tag=appx-article]
   ----

   The table of contents will appear as follows:

   ----
   include::example$appendix.adoc[tag=appx-article-out]
   ----

   For books, the appendix must be defined as a level 1 section (`==`) if you want the appendix to be a adjacent to the chapters.
   In a multi-part book, if you want the appendix to be adjacent to other parts, the appendix must be defined as a level 0 section (`=`).
   In either case, the first subsection of the appendix must be a level 2 section (`===`).

   The following example shows how to define an appendix for a multi-part book.

   [source]
   ----
   include::example$appendix.adoc[tag=appx-book]
   ----

   The table of contents will appear as follows:

   ----
   include::example$appendix.adoc[tag=appx-book-out]
   ----

   [#caption]
   == Appendix label

   When rendered, the titles of sections marked as `appendix` will include:

   * A label, taken from the value of the `appendix-caption` attribute, which defaults to "`Appendix`"
   * A letter that represents the order of the appendix within the sequence of appendices (A, B, ...)
   * A colon
   * The section title

   For example:

    Appendix A: Data Access Matrix

   The prefix can be modified by setting the `appendix-caption` attribute and overriding the default value with a custom value.

   [source]
   ----
   :appendix-caption: Exhibit
   ----

   Unset the attribute to remove the prefix.

   [source]
   ----
   :appendix-caption!:
   ----


/docs/modules/sections/pages/bibliography.adoc
==============================================

.. code-block: asciidoc

   = Bibliography

   AsciiDoc has basic support for bibliographies.
   AsciiDoc doesn't concern itself with the structure of the bibliography entry itself, which is entirely freeform.
   What it does is provide a way to make references to the entries from the same document and output the bibliography with proper semantics for processing by other toolchains (such as DocBook).

   == Bibliography section syntax

   To conform to output formats, a bibliography must be its own section at any level.
   The section must be assigned the `bibliography` section style.
   By adding the `bibliography` style to the section, you implicitly add it to each unordered list in that section.

   You would define the bibliography as a level 1 section (`==`) when:

   * the doctype is `article`
   * the doctype is `book` and the book doesn't contain any parts
   * the bibliography is for a part

   [source]
   ----
   [bibliography]
   == Bibliography
   ----

   You can also define it as a deeper section, in which case the doctype doesn't matter and it's scoped to the parent section.

   If the book has parts, and the bibliography is for the whole book, the section is defined as a level 0 section (`=`).

   [source]
   ----
   [bibliography]
   = Bibliography
   ----

   == Bibliography entries syntax

   Bibliography entries are declared as items in an unordered list.

   .Bibliography with references
   [source]
   ----
   include::example$bibliography.adoc[tag=base]
   ----

   In order to reference a bibliography entry, you need to assign a _non-numeric_ label to the entry.
   To assign this label, prefix the entry with the label enclosed in a pair of triple square brackets (e.g., `+[[[label]]]+`).
   We call this a bibliography anchor.
   Using this label, you can then reference the entry from anywhere above the bibliography in the same document using the normal cross reference syntax (e.g., `+<<label>>+`).

   |===
   a|
   include::example$bibliography.adoc[tag=base]
   |===

   TIP: To escape a bibliography anchor anywhere in the text, use the syntax `[\[[word]]]`.
   This prevents the anchor from being matched as a bibliography anchor or a normal anchor.

   By default, the bibliography anchor and reference to the bibliography entry is converted to `[<label>]`, where <label> is the ID of the entry.
   If you specify xreftext on the bibliography anchor (e.g., `+[[[label,xreftext]]]+`), the bibliography anchor and reference to the bibliography entry converts to `[<xreftext>]` instead.

   If you want the bibliography anchor and reference to appear as a number, assign the number of the entry using the xreftext.
   For example, `+[[[label,1]]]+` will be converted to `[1]`.

   If you want more advanced features such as automatic numbering and custom citation styles, try the https://github.com/asciidoctor/asciidoctor-bibtex[asciidoctor-bibtex^] project.


/docs/modules/sections/pages/glossary.adoc
==========================================

.. code-block: asciidoc

   = Glossary

   You can include a glossary in an article, book, and book part by setting the `glossary` style on a section.

   == Glossary section syntax

   The glossary section is defined as a level 1 section (`==`) when:

   * the doctype is `article`
   * the doctype is `book` and the book doesn't contain any parts
   * the glossary is for a book part

   [source]
   ----
   [glossary]
   == Terminology
   ----

   If the book has parts, and the glossary is for the whole book, the section is defined as a level 0 section (`=`).

   [source]
   ----
   [glossary]
   = Glossary
   ----

   == Glossary description list style syntax

   In addition to setting `glossary` on the section, the block style `glossary` must be set on the description list in the section.

   [source]
   ----
   [glossary]
   == Glossary

   [glossary]
   mud:: wet, cold dirt
   rain::
    water falling from the sky
   ----


/docs/modules/sections/pages/user-index.adoc
============================================

.. code-block: asciidoc

   = Index
   :page-aliases: index.adoc

   You can mark index terms explicitly in AsciiDoc content.
   Index terms form a controlled vocabulary that can be used to navigate the document by keyword starting from an index.

   == Index catalog

   Although index terms are always processed, only Asciidoctor PDF and the DocBook toolchain support creating an index catalog automatically.
   To create an index, define a level 1 section (`==`) marked with the style `index` at the end of your document.

   [source]
   ----
   [index]
   == Index
   ----

   Both Asciidoctor PDF and the DocBook toolchain will automatically populate an index into this seed section.

   WARNING: The built-in HTML5 converter in Asciidoctor does not generate an index.

   == Index terms

   There are two types of index terms in AsciiDoc:

   flow index term:: `\indexterm2:[<primary>]` +
   `+((<primary>))+`
   +
   An index term that appears in the flow of text (i.e., a visible term) and in the index.
   This type of index term can only be used to define a primary entry.

   concealed index term:: `\indexterm:[<primary>, <secondary>, <tertiary>]` +
   `+(((<primary>, <secondary>, <tertiary>)))+`
   +
   A group of index terms that appear only in the index.
   This type of index term can be used to define a primary entry as well as optional secondary and tertiary entries.

   Here's an example that shows the two forms in use.

   [source]
   ----
   The Lady of the Lake, her arm clad in the purest shimmering samite,
   held aloft Excalibur from the bosom of the water,
   signifying by divine providence that I, ((Arthur)), <.>
   was to carry Excalibur (((Sword, Broadsword, Excalibur))). <.>
   That is why I am your king. Shut up! Will you shut up?!
   Burn her anyway! I'm not a witch.
   Look, my liege! We found them.

   indexterm2:[Lancelot] was one of the Knights of the Round Table. <.>
   indexterm:[knight, Knight of the Round Table, Lancelot] <.>
   ----
   <.> The double parenthesis form adds a primary index term and includes the term in the generated output.
   <.> The triple parenthesis form allows for an optional second and third index term and _does not_ include the terms in the generated output (i.e., concealed index term).
   <.> The inline macro `\indexterm2:[primary]` is equivalent to the double parenthesis form.
   <.> The inline macro `\indexterm:[primary, secondary, tertiary]` is equivalent to the triple parenthesis form.

   If you're defining a concealed index term (i.e., the `indexterm` macro), and one of the terms contains a comma, you must surround that segment in double quotes so the comma is treated as content.
   For example:

   [source]
   ----
   I, King Arthur.
   indexterm:[knight, "Arthur, King"]
   ----

   or

   [source]
   ----
   I, King Arthur.
   (((knight, "Arthur, King")))
   ----

   //Follow https://github.com/asciidoctor/asciidoctor/issues/450[Asciidoctor issue #450] to track the progress of this feature.

   == Placement of hidden index terms

   Hidden index entries should be directly adjacent to the paragraph content to which they apply.
   <<ex-hidden-terms-correct>> shows where to place hidden index terms for a paragraph.

   .Correct
   [#ex-hidden-terms-correct]
   ----
   === Create a new Git repository

   (((Repository, create)))
   (((Create Git repository)))
   To create a new git repository,
   ----

   If the terms are offset from the paragraph content by an empty line, it will cause an empty paragraph to be created in the parsed document, thus leaving extra space in the generated output.
   <<ex-hidden-terms-incorrect-1>> and <<ex-hidden-terms-incorrect-2>> show where you should not place hidden index terms for a paragraph.

   .Incorrect
   [#ex-hidden-terms-incorrect-1]
   ----
   === Create a new Git repository

   (((Repository, create)))
   (((Create Git repository)))

   To create a new git repository,
   ----

   .Also incorrect
   [#ex-hidden-terms-incorrect-2]
   ----
   === Create a new Git repository
   (((Repository, create)))
   (((Create Git repository)))

   To create a new git repository,
   ----


/docs/modules/sections/pages/section-ref.adoc
=============================================

.. code-block: asciidoc

   = Section Attributes and Styles Reference

   == Section attributes

   [%autowidth]
   |===
   |Feature |Attribute |Value(s) |Notes

   |xref:appendix.adoc#caption[Appendix label]
   |`appendix-caption`
   |_Appendix_ (default) or user defined text
   |

   |xref:chapters.adoc#chapter-signifier[Chapter signifier]
   |`chapter-signifier`
   |_Chapter_ (default) or user defined text
   |`book` doctype only; default only set in Asciidoctor PDF

   |xref:discrete-headings.adoc[Discrete heading]
   |`discrete`
   |NA
   |

   |xref:id-prefix-and-separator.adoc#prefix[ID prefix]
   |`idprefix`
   |`_` (default) or user defined text
   |Set by default
   //Set to prepend string to generated section ID

   |xref:id-prefix-and-separator.adoc#separator[ID word separator]
   |`idseparator`
   |`_` (default) or user defined character
   |Set by default
   //Set to insert character between words in generated section ID

   |xref:part-numbers-and-labels.adoc#part-signifier[Part signifier]
   |`part-signifier`
   |_Part_ (default) or user defined text
   |`book` doctype only

   |xref:part-numbers-and-labels.adoc[Part numbers]
   |`partnums`
   |NA
   |`book` doctype only

   |xref:title-links.adoc#anchor[Section anchor]
   |`sectanchors`
   |NA
   |

   |xref:auto-ids.adoc[Section ID]
   |`sectids`
   |NA
   |Set by default
   //Autogenerates section IDs by default

   |xref:title-links.adoc#link[Section link]
   |`sectlinks`
   |NA
   |

   |xref:numbers.adoc[Section numbers] and xref:special-section-numbers.adoc[special section numbers]
   |`sectnums`
   |empty (default) or `all`
   |Can be toggled on or off in the flow of the document
   // replaces numbered in AsciiDoc.py

   |xref:numbers.adoc#numlevels[Section numbers level depth]
   |`sectnumlevels`
   |`3` (default) when `sectnums` is set; 0 through 5
   |Value of `0` is the same as `sectnums!`

   |xref:special-section-titles.adoc[Hide special section title]
   |`options` or `%`
   |`untitled`
   |DocBook only; can only be set on special sections
   |===

   == Section styles

   [%autowidth]
   |===
   |Feature |Style Name |Doctypes |Converters

   |xref:abstract.adoc[Abstract]
   |`abstract`
   |`article`
   |All

   |Acknowledgments
   |`acknowledgments`
   |`book`
   |All

   |xref:appendix.adoc[Appendix]
   |`appendix`
   |All
   |All

   |xref:bibliography.adoc[Bibliography]
   |`bibliography`
   |All
   |All

   |xref:colophon.adoc[Colophon]
   |`colophon`
   |`book`
   |All

   |xref:dedication.adoc[Dedication]
   |`dedication`
   |`book`
   |All

   |xref:glossary.adoc[Glossary]
   |`glossary`
   |All
   |All

   |xref:user-index.adoc[Index]
   |`index`
   |All
   |DocBook

   |xref:preface.adoc[Preface]
   |`preface`
   |`book`
   |All
   |===


/docs/modules/sections/examples/abstract.adoc
=============================================

.. code-block: asciidoc

   = Article Title

   [abstract]
   == Abstract

   Documentation is a distillation of many long adventures.

   == Section Title


/docs/modules/sections/examples/appendix.adoc
=============================================

.. code-block: asciidoc

   // tag::appx-article[]
   = Article Title
   :appendix-caption: Exhibit
   :sectnums:
   :toc:

   == Section

   === Subsection

   [appendix]
   == First Appendix

   === First Subsection

   === Second Subsection

   [appendix]
   == Second Appendix
   // end::appx-article[]

   ....
   // tag::appx-article-out[]
   1. Section
     1.1. Subsection
   Exhibit A: First Appendix
     A.1. First Subsection
     A.2. Second Subsection
   Exhibit B: Second Appendix
   // end::appx-article-out[]
   ....

   // tag::appx-book[]
   = Book Title
   :doctype: book
   :sectnums:
   :toc:

   = First Part

   == Chapter

   === Subsection

   == Second Part

   == Chapter

   [appendix]
   = First Appendix

   === First Subsection

   === Second Subsection

   [appendix]
   = Second Appendix
   // end::appx-book[]

   ....
   // tag::appx-book-out[]
   First Part
   1. Chapter
     1.1. Subsection
   Second Part
   2. Chapter
   Appendix A: First Appendix
     A.1. First Subsection
     A.2. Second Subsection
   Appendix B: Second Appendix
   // end::appx-book-out[]
   ....


/docs/modules/sections/examples/bibliography.adoc
=================================================

.. code-block: asciidoc

   // Included in user-manual: Bibliography and quick-ref

   // tag::base[]
   _The Pragmatic Programmer_ <<pp>> should be required reading for all developers.
   To learn all about design patterns, refer to the book by the "`Gang of Four`" <<gof>>.

   [bibliography]
   == References

   * [[[pp]]] Andy Hunt & Dave Thomas. The Pragmatic Programmer:
   From Journeyman to Master. Addison-Wesley. 1999.
   * [[[gof,gang]]] Erich Gamma, Richard Helm, Ralph Johnson & John Vlissides.
   Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. 1994.
   // end::base[]


/docs/modules/sections/examples/colophon.adoc
=============================================

.. code-block: asciidoc

   = Book with Colophon
   :doctype: book

   [colophon]
   == Colophon
   // tag::body[]
   The Asciidoctor Press, Ceres and Denver.

   (C) 2020 by The Asciidoctor Press

   Published in the Milky Way Galaxy.

   This book is designed by Dagger Flush, Denver, Colorado.
   The types are handset Volcano Dust and Papaya, designed by Leeloo.
   Leeloo created the typefaces to soften the bluntness of documentation.

   Built with Asciidoctor on Fedora 33.

   Printing and binding by Ceres Lithographing, Inc., Ceres, Milky Way.
   // end::body[]


/docs/modules/sections/examples/dedication.adoc
===============================================

.. code-block: asciidoc

   = Book with Dedication
   :doctype: book

   [dedication]
   == Dedication

   // tag::body[]
   For S.S.T.--

   thank you for the plague of archetypes.
   // end::body[]


/docs/modules/sections/examples/multipart-book-with-special-sections.adoc
=========================================================================

.. code-block: asciidoc

   = Multi-Part Book with Special Sections
   Author Name <author@example.com>
   :doctype: book
   :toc:

   [colophon]
   = The Colophon

   Text at the beginning of a book describing facts about its production.

   = The First Part

   == The First Chapter

   Chapters can be grouped by preceding them with a level 0 Book Part title.

   [appendix]
   = The Appendix

   === Basics

   A multipart book can have appendixes, which should be defined at section level 0.

   === Subsections

   Subsections of an appendix in a multipart book should start at level 2.


/docs/modules/sections/examples/part-with-special-sections.adoc
===============================================================

.. code-block: asciidoc

   = Multi-Part Book with Parts that Have Special Sections
   Author Name <author@example.com>
   :doctype: book

   [preface]
   = Book Preface

   This is the preface for the whole book.

   === Preface Subsection

   Chinchillas rule the world.

   = Part 1

   This is the introduction to the first part of our mud-encrusted journey.

   == Chapter 1

   There was mud...

   == Chapter 2

   Great gobs of mud...

   [glossary]
   == Part 1 Glossary

   [glossary]
   mud:: wet, cold dirt

   = Part 2

   [preface]
   == Part 2 Preface

   This is a preface just for part 2.

   == Chapter 3

   The mud had turned to cement...


/docs/modules/sections/examples/part.adoc
=========================================

.. code-block: asciidoc

   // tag::basic[]
   = Book Title
   :doctype: book

   = Part I
   // end::basic[]

   // tag::style[]
   [partintro]
   // end::style[]
   This is the implicit partintro.

   == Chapter A


/docs/modules/sections/examples/preface.adoc
============================================

.. code-block: asciidoc

   // tag::book[]
   = Book Title
   :doctype: book

   [preface]
   == Our Preface

   I awoke one morning and was confronted by the dark and stormy eyes of the chinchilla.
   She had conquered the mountain of government reports that had eroded into several minor foothills and a creeping alluvial plain of loose papers.

   === Preface Subsection

   Chinchillas rule the world.

   == Chapter 1

   ...
   // end::book[]

   // tag::part[]
   = Book Title
   :doctype: book

   = Part 1

   [preface]
   == Part 1 Preface

   The preface for part 1.

   === Preface Subsection

   More part 1 prefacing.

   == Chapter 1

   ...
   // end::part[]


/docs/modules/sections/examples/section.adoc
============================================

.. code-block: asciidoc

   // tag::base[]
   = Document Title (Level 0)

   == Level 1 Section Title

   === Level 2 Section Title

   ==== Level 3 Section Title

   ===== Level 4 Section Title

   ====== Level 5 Section Title

   == Another Level 1 Section Title
   // end::base[]

   // tag::b-base[]
   // the float style is required to create standalone (non-section) headings
   [float]
   = Document Title (Level 0)

   [float]
   == Level 1 Section Title

   [float]
   === Level 2 Section Title

   [float]
   ==== Level 3 Section Title

   [float]
   ===== Level 4 Section Title

   [float]
   ====== Level 5 Section Title

   [float]
   == Another Level 1 Section Title
   // end::b-base[]

   // tag::bad[]
   = Document Title

   = Illegal Level 0 Section (violates rule #1)

   == First Section

   ==== Illegal Nested Section (violates rule #2)
   // end::bad[]

   // tag::content[]
   == First Section

   Content of first section

   === Nested Section

   Content of nested section

   == Second Section

   Content of second section
   // end::content[]

   // tag::book[]
   = Document Title (Level 0)

   == Level 1 Section Title

   = Level 0 Section Title (Part)

   == Level 1 Section Title

   === Level 2 Section Title

   ==== Level 3 Section Title

   ===== Level 4 Section Title

   ====== Level 5 Section Title

   = Another Level 0 Section Title (Part)
   // end::book[]

   // tag::b-book[]
   // the float style is required to create standalone (non-section) headings
   [float]
   = Document Title (Level 0)

   [float]
   == Section Level 1

   [float]
   === Section Level 2

   [float]
   ==== Section Level 3

   [float]
   ===== Section Level 4

   [float]
   ====== Section Level 5

   [float]
   = Section Level 0
   // end::b-book[]

   // tag::with-anchor-shorthand[]
   [#tigers-subspecies]
   === Subspecies of Tiger
   // end::with-anchor-shorthand[]

   // tag::with-anchor-and-reftext[]
   [[tigers-subspecies,Subspecies]]
   === Subspecies of Tiger
   // end::with-anchor-and-reftext[]

   // tag::with-anchor-and-reftext-shorthand[]
   [#tigers-subspecies,reftext=Subspecies]
   === Subspecies of Tiger
   // end::with-anchor-and-reftext-shorthand[]

   // tag::num-off[]
   = Title
   :sectnums:

   == Numbered Section

   :sectnums!:

   == Unnumbered Section

   == Unnumbered Section

   === Unnumbered Section

   :sectnums:

   == Numbered Section
   // end::num-off[]

   // tag::num[]
   = Document Title

   :sectnums!:

   == Colophon Section

   == Another Colophon Section

   == Last Colophon Section

   :sectnums:

   == Section One

   == Section Two

   == Section Three
   // end::num[]

   // tag::num-out[]
   1. Numbered Section

   Unnumbered Section

   Unnumbered Section

   Unnumbered Section

   2. Numbered Section
   // end::num-out[]

   // tag::sectnuml[]
   = Title
   :sectnums:
   :sectnumlevels: 2 <.>
   // end::sectnuml[]

   // tag::md[]
   # Document Title (Level 0)

   ## Section Level 1

   ### Section Level 2

   #### Section Level 3

   ##### Section Level 4

   ###### Section Level 5
   // end::md[]

   // tag::b-md[]
   [float]
   # Document Title (Level 0)

   [float]
   ## Section Level 1

   [float]
   ### Section Level 2

   [float]
   #### Section Level 3

   [float]
   ##### Section Level 4

   [float]
   ###### Section Level 5
   // end::b-md[]


/docs/modules/text/nav.adoc
===========================

.. code-block: asciidoc

   * xref:index.adoc[]
   ** xref:bold.adoc[]
   ** xref:italic.adoc[]
   ** xref:monospace.adoc[]
   ** xref:literal-monospace.adoc[]
   ** xref:text-span-built-in-roles.adoc[]
   ** xref:highlight.adoc[]
   ** xref:quotation-marks-and-apostrophes.adoc[]
   ** xref:subscript-and-superscript.adoc[]
   ** xref:custom-inline-styles.adoc[]
   ** xref:troubleshoot-unconstrained-formatting.adoc[]


/docs/modules/text/pages/index.adoc
===================================

.. code-block: asciidoc

   = Text Formatting and Punctuation

   Just as we emphasize certain words and phrases when we speak, we emphasize words and phrases in text using formatting and punctuation.
   AsciiDoc provides an assortment of formatting marks for applying visual emphasis and typographic punctuation to your document.
   You can build on these basic formatting marks using built-in and user-defined roles.
   This page covers the formatting marks that AsciiDoc provides and the rules for applying and customizing them.

   == Formatting terms and concepts

   === Formatting marks and pairs

   A [#def-format-mark.term]*formatting mark* is a symbolic character, such as `+*+`, `_`, or `~`, that indicates the inline style you want the AsciiDoc converter to apply to the text.
   Formatting marks come in pairs.

   A [#def-format-pair.term]*formatting pair* consists of an identical opening mark and closing mark that encloses the text you want to style.
   The formatted text (i.e., the text enclosed by a formatting pair) can span multiple, contiguous lines.

   The [#def-open-mark.term]*opening mark* specifies where you want the style to start.
   The [#def-close-mark.term]*closing mark* specifies where you want the style to end.

   Formatting pairs can be nested, but they cannot be overlapped.
   If the pairs are overlapped, the behavior is unspecified and the AsciiDoc processor may produce malformed output.

   A formatting pair is defined as either constrained or unconstrained, depending on where it's allowed to be applied.
   An unconstrained pair can be applied anywhere, whereas the application of a constrained pair is more limited.

   [#constrained]
   === Constrained formatting pair

   When a space-like character directly precedes the text to format, and a space-like character or punctuation mark (`,`, `;`, `"`, `.`, `?`, or `!`) directly follows the text, and the text does not start or end with a space-like character, a [.term]*constrained formatting pair* can be used.
   A constrained pair uses a single opening mark and a single closing mark to enclose the text to be styled (e.g., `+*strong*+`).

   For example, you use this form to format a word that stands alone,

   ----
   That is *strong* stuff!
   ----

   to format a sequence of words,

   ----
   That is *really strong* stuff!
   ----

   or to format a word adjacent to punctuation, like an exclamation mark.

   ----
   This stuff is *strong*!
   ----

   As you can see, the constrained pair offers a more succinct markup at the tradeoff of having more limited (constrained) use.
   However, it should suffice in most cases, so the abbreviated markup is a benefit.
   You can think of a constrained pair as being a weaker markup than an unconstrained pair.

   [#unconstrained]
   === Unconstrained formatting pair

   An [.term]*unconstrained formatting pair* can be used anywhere in the text.
   When the conditions are not met for a constrained formatting pair, the situation calls for an unconstrained formatting pair.
   An unconstrained pair consists of a double opening mark and a double closing mark that encloses the text to be styled (e.g., `+Sara**h**+`).

   For example, you'd use an unconstrained pair to format one or more letters in a word.

   ----
   The man page, short for **man**ual page, is a form of software documentation.
   ----

   The unconstrained pair provides a more brute force approach to formatting at the tradeoff of being more verbose.
   You'll typically switch to an unconstrained pair when a constrained pair doesn't do the trick.
   See xref:troubleshoot-unconstrained-formatting.adoc#use-unconstrained[When should I use an unconstrained pair?] for more examples of when to use an unconstrained pair.

   == Inline text and punctuation styles

   AsciiDoc provides six inline text styles and one punctuation style that are applied solely with formatting marks.

   xref:bold.adoc[Bold] (type: strong)::
   Text that is bold will stand out against the regular, surrounding text due to the application of a thicker and/or darker font.
   Bold is useful when the text needs to catch the attention of a person visually scanning a page.
   The formatting mark for bold is an asterisk (`*`).

   xref:italic.adoc[Italic] (type: emphasis)::
   Text is often italicized in order to stress a word or phrase, quote a speaker, or introduce a term.
   Italic type slants slightly to the right, and depending on the font, may have cursive swashes and flourishes.
   The formatting mark for italic is an underscore (`+_+`).

   xref:monospace.adoc[Monospace] (type: monospaced)::
   Technical content often requires text to be styled in a way that indicates a command or source code.
   Such text is usually emphasized using a fixed-width (i.e., monospace) font.
   The formatting mark for monospace is a backtick (`++`++`).

   xref:highlight.adoc[Highlight] (type: mark)::
   Another way to draw attention to text is to highlight it.
   This semantic style is used for reference or notation purposes, or to mark the importance of a key subject or point.
   The formatting mark for highlight is a hash (`+#+`).

   xref:custom-inline-styles.adoc[Styled phrase] (type: unquoted)::
   Adding a role to a span of text that uses the highlight formatting mark (`+#+`) converts to generic phrase that can be styled.
   AsciiDoc defines several built-in roles that you can use to style text, and the style/theming system of the converter can allow you to define styles for a custom role.

   xref:subscript-and-superscript.adoc[Subscript and superscript] (type: subscript/superscript)::
   Subscript and superscript text is common in mathematical expressions and chemical formulas.
   The formatting mark for subscript is a tilde (`{tilde}`).
   The formatting mark for superscript is a caret (`{caret}`).

   ////
   AsciiDoc also provides two built-in styles that are applied with an additional role.

   Strike through::

   Underline::
   ////

   xref:quotation-marks-and-apostrophes.adoc[Curved quotation marks and apostrophes] (type: double/single)::
   By default, the AsciiDoc processor outputs straight quotation marks and apostrophes.
   They can be changed to curved by adding backticks (`++`++`) as a formatting hint.

   == Quotes substitution

   When the AsciiDoc processor encounters text enclosed by designated formatting marks, those marks are replaced by the start and end tags of the corresponding HTML or XML element, depending on your backend, during the xref:subs:quotes.adoc[quotes substitution step].
   You can control when inline formatting is applied to inline text, macros, or blocks with the xref:subs:quotes.adoc#quotes-value[quotes substitution value].

   ////
   CAUTION: You may not always want these symbols to indicate text formatting.
   In those cases, you'll need to use additional markup to xref:subs:prevent.adoc[escape the text formatting markup].
   ////


/docs/modules/text/pages/bold.adoc
==================================

.. code-block: asciidoc

   = Bold
   // content written and moved upstream from Antora by @graphitefriction

   Text that is marked up as bold will stand out against the regular, surrounding text due to the application of a thicker and/or darker font.
   Bold is useful when the text needs to catch the attention of a site visitor quickly scanning a page.

   The bold presentation of text maps to the formatted text type known as *strong* in the AsciiDoc language.

   == Bold syntax

   You can mark a word or phrase as bold by enclosing it in a single pair of asterisks (e.g., `+*word*+`) (constrained).
   You can mark bounded characters (i.e., characters within a word) as bold by enclosing them in a pair of double asterisks (e.g., `+char**act**ers+`) (unconstrained).

   .Bold inline formatting
   [#ex-bold]
   ----
   A bold *word*, and a bold *phrase of text*.

   Bold c**hara**cter**s** within a word.
   ----

   You don't need to use double asterisks when an entire word or phrase marked as bold is directly followed by a common punctuation mark, such as `;`, `"`, and `!`.

   The results of <<ex-bold>> are displayed below.

   ====
   A bold *word*, and a bold *phrase of text*.

   Bold c**hara**cter**s** within a word.
   ====

   == Mixing bold with other formatting

   You can add multiple emphasis styles to bold text as long as the syntax is placed in the correct order.

   .Order of inline formatting syntax
   [#ex-mix]
   ----
   `*_monospace bold italic phrase_*` & ``**__char__**``acter``**__s__**``
   ----

   xref:monospace.adoc[Monospace syntax] (`++`++`) must be the outermost formatting pair (i.e., outside the bold formatting pair).
   xref:italic.adoc[Italic syntax] (`+_+`) is always the innermost formatting pair.

   The results of <<ex-mix>> are displayed below.

   ====
   `*_monospace bold italic phrase_*` & ``**__char__**``acter``**__s__**``
   ====


/docs/modules/text/pages/italic.adoc
====================================

.. code-block: asciidoc

   = Italic
   // content written and moved upstream from Antora by @graphitefriction

   Text is often italicized in order to stress a word or phrase, quote a speaker, or introduce a term.
   Italic text slants slightly to the right, and depending on the font, may have cursive swashes and flourishes.

   The italic presentation of text maps to the formatted text type known as *emphasis* in the AsciiDoc language.

   == Italic syntax

   You can emphasize (aka italicize) a word or phrase by enclosing it in a single pair of underscores (e.g., `+_word_+`) (constrained).
   You can emphasize bounded characters (i.e., characters within a word) by enclosing them in a pair of double underscores (e.g., `+char__act__ers+`) (unconstrained).

   .Italic inline formatting
   [#ex-italic]
   ----
   An italic _word_, and an italic _phrase of text_.

   Italic c__hara__cter__s__ within a word.
   ----

   You don't need to use double underscores when an entire word or phrase marked as italic is directly followed by a common punctuation mark, such as `;`, `"`, and `!`.

   The result of <<ex-italic>> is rendered below.

   ====
   An italic _word_, and an italic _phrase of text_.

   Italic c__hara__cter__s__ within a word.
   ====

   == Mixing italic with other formatting

   You can add multiple emphasis styles to italic text as long as the syntax is placed in the correct order.

   .Order of inline formatting syntax
   [#ex-mix]
   ----
   `*_monospace bold italic phrase_*` & ``**__char__**``acter``**__s__**``
   ----

   xref:monospace.adoc[Monospace syntax] (`++`++`) must be the outermost formatting pair.
   xref:bold.adoc[Bold syntax] (`+*+`) must be outside the italics formatting pair.
   Italic syntax is always the innermost formatting pair.

   The result of <<ex-mix>> is rendered below.

   ====
   `*_monospace bold italic phrase_*` & ``**__char__**``acter``**__s__**``
   ====


/docs/modules/text/pages/monospace.adoc
=======================================

.. code-block: asciidoc

   = Monospace

   In AsciiDoc, a span of text enclosed in a single pair of backticks (`{backtick}`) is displayed using a fixed-width (i.e., monospaced) font.
   Monospace text formatting is typically used to represent text shown in computer terminals or code editors (often referred to as a codespan).

   The monospace presentation of text maps to the formatted text type known as *monospaced* in the AsciiDoc language.

   == Constrained

   Here's an example:

   .Constrained monospace syntax
   [#ex-constrain]
   ----
   include::example$text.adoc[tag=mono]
   ----

   The result of <<ex-constrain>> is rendered below.

   ====
   include::example$text.adoc[tag=mono]
   ====

   == Unconstrained

   As with other types of text formatting, if the text is bounded by word characters on either side, it must be enclosed in a double pair of backtick characters (`{backtick}{backtick}`) in order for the formatting to be applied.

   Here's an example:

   ----
   The command will re``link`` all packages.
   ----

   == Mixed Formatting

   Monospaced text can also be formatted in bold or italic or both, as long as the markup pairs are entered in the right order.
   The monospace markup must be the outermost formatting mark, then the bold marks, then the italic marks.

   .Order of inline formatting syntax
   [#ex-mix]
   ----
   `*_monospaced bold italic_*`
   ----

   The result of <<ex-mix>> is rendered below.

   ====
   `*_monospaced bold italic_*`
   ====

   == Literal Monospace

   To learn how to make monospace text that's not otherwise formatted, see xref:literal-monospace.adoc[].


/docs/modules/text/pages/literal-monospace.adoc
===============================================

.. code-block: asciidoc

   = Literal Monospace

   Unlike other markup languages, monospaced text in AsciiDoc is not synonymous with literal text.
   Instead, it gets interpreted just like normal text.
   In other words, it's subject to all text substitutions by default.

   This might be surprising at first.
   But there's good reason for this difference.
   In AsciiDoc, you can take advantage of attribute references and inline macros inside of a monospaced text span.
   The drawback, of course, is that you have to be careful to escape these special characters if you intend to output them without special formatting (i.e., as literal text).

   One way to prevent the processor from interpreting special characters in monospaced text is to escape them using backslash characters, just as you would with normal text.
   However, escaping individual occurrences that way can be tedious.
   That's why AsciiDoc offers a special type of monospace formatting called the literal monospace.

   To make a true literal codespan in AsciiDoc, you must enclose the monospaced text in a passthrough.
   Rather than using a single pair of backtick characters, you'll use the combination of the backtick and plus characters, where the plus characters fall on the inside of the backtick characters (e.g., `pass:[`+text+`]`).
   The plus characters are a shorthand for the `\pass:c[]` enclosure.

   <<ex-literal>> contains literal, monospaced text.

   .Literal monospace syntax
   [#ex-literal]
   ----
   include::example$text.adoc[tag=literal-mono]
   ----

   This shorthand syntax can accommodate most of the literal monospace cases.
   The main exception is when the text itself contains plus characters.
   To avoid confusing the processor, you'll need to switch to using the more formal passthrough macro to handle these cases.

   <<ex-plus>> shows literal, monospaced text that contains plus characters.

   .Literal monospace syntax with + characters
   [#ex-plus]
   ----
   include::example$text.adoc[tag=literal-mono-with-plus]
   ----

   Passthroughs are a general purpose utility in AsciiDoc.
   You can learn about the various passthrough options in xref:pass:pass-macro.adoc[].

   ////
   ==== Using legacy monospace markup

   In Asciidoctor 1.5, the backtick replaces the single and double plus sign for indicating monospace formatting and normal substitutions.
   However, you can forgo this change to the syntax by setting the `compat-mode` attribute either in the document header:

   ----
   :compat-mode:
   ----

   or by passing the attribute to the API:

   ----
   -a compat-mode
   ----

   .Why the output behavior of `+` and `++` changed in Asciidoctor 1.5
   ****
   The meaning of `+` in the AsciiDoc syntax was inconsistent in AsciiDoc.py and previous Asciidoctor versions.
   // I believe we can make the AsciiDoc syntax easier to understand and remember if we consistently implement `+` as a passthrough (literal) mark.

   Where the quad plus (`++++`) and triple plus (`+++`) pass content without any processing, the double plus (`++`) and single plus (`+`) pass content "`as you see it`" (which means escaping special characters).
   Double plus (`++`) is an unconstrained match (can be used anywhere inline, just like double dollar (`$$`)), while single plus (`+`) is a constrained match (can be used at word boundaries). For example:

   * +{conf}+ becomes {conf}
   * dev++{conf}++ becomes dev{conf}

   TIP: You may recognize that `++` is now equivalent to `$$` (and perhaps easier to read).

   Notice that the text is not formatted as monospace.
   To apply monospace formatting to content marked by `+` or `++`, surround it with a pair of backticks.


   The backtick characters around text only mean that the text should be formatted as monospace. The backtick characters *do not add* passthrough semantics. In most cases, the passthrough semantics aren't necessary, so using the backticks for monospaced formatting is all that's necessary.

   * \`literal\` becomes `literal`
   * \`{backend}\` becomes `html5`
   * a\`\`|\`\`b becomes a`|`b

   So the question remains, how do you prevent substitutions in text formatted as monospaced (i.e., monospaced literal)? Answer: You either escape the substitution or combine the formatting and the passthrough.

   * \`\\{backend}\` becomes `{backend}`
   * \`+{backend}+\` becomes `{backend}`

   By not mixing monospace formatting with passthrough (literal) semantics, we are deviating slightly from the behavior of backticks in Markdown. However, that's because AsciiDoc has additional features, such as attribute references, that we want to be able to leverage when formatting text as monospace (just as we would anywhere). As it turns out, the lack of ability for substitutions when creating monospaced text in Markdown is quite limiting (and frustrating).

   Let's give this separation of inline passthroughs (using single and double plus) and monospace formatting (using single and double backticks) a try and see how it goes. If we need to remove or reduce the number of substitution applied when formatting text as monospace, we can entertain the idea once we've given this configuration a trial.

   Since we're swapping behavior between two existing formatting marks, we had to introduce a transitional syntax that will work in with both 0.1.4 and 1.5.0 to ease migration. I'll document those options here.

   ---

   **IMPORTANT:** I want to reiterate that you have the option of enabling legacy mode if you don't want to deal with migration. Legacy mode will be supported for the foreseeable future to avoid unnecessary disruption. If that's the option you want to take, simply add the following document attribute at the start of your document, or wherever you want to enable legacy mode.

   ----
   :compat-mode:
   ----

   If you want to begin migration to the modern syntax, read on.

   ---

   There are three scenarios that are affected by this syntax change.

   * Monospaced normal text (it doesn't contain AsciiDoc syntax, so the text doesn't get interpreted)
   * Monospaced text without substitutions (you want to prevent the text from being interpreted)
   * Monospaced text with substitutions (you want text to be interpreted)

   Let's first consider the legacy syntax used in each of these examples.

   * pass:[+monospaced normal text+ or `monospaced normal text`]
   * pass:[`Use {asciidoctor-version} to print the version of Asciidoctor`] (attribute is _not_ replaced)
   * pass:[+The version of Asciidoctor is {asciidoctor-version}+] (attribute _is_ replaced)

   If you want the previous examples to work in Asciidoctor 1.5.0, you need to switch to the modern syntax, as shown below:

   * pass:[`monospaced normal text`]
   * pass:[`+Use {asciidoctor-version} to print the version of Asciidoctor+`] (attribute is _not_ replaced)
   * pass:[`The version of Asciidoctor is {asciidoctor-version}`] (attribute _is_ replaced)

   While the previous examples will work in Asciidoctor 1.5.0, the last two are now broken in Asciidoctor 0.1.4. Unfortunately, we can't control when Asciidoctor is upgraded on services like GitHub, so there will be a period of time when you will need to use a syntax that works on both versions. So what do we do? The answer, use the transitional syntax.

   To use the transitional syntax, add the role "x-" in front of the legacy syntax to indicate that you want Asciidoctor 1.5.0 to use the old behavior. Of course, Asciidoctor 0.1.4 already understands the old syntax.

   * pass:[[x-\]`Use {asciidoctor-version} to print the version of Asciidoctor`] (attribute is _not_ replaced)
   * pass:[[x-\]+The version of Asciidoctor is {asciidoctor-version}+] (attribute _is_ replaced)

   By using the "x-" role, you not only enable the legacy behavior, you also mark the locations that need to be migrated to the modern syntax in Asciidoctor 1.5.0 once Asciidoctor has been upgraded everywhere.

   If you aren't worried about how the document renders on services like GitHub, you can start using the modern syntax immediately.


   // The <<user-manual#back-pass,inline literal passthrough>> also applies monospace text formatting.

   ////

   ////
   Monospace text formatting is often used to emulate how source code appears in computer terminals, simple text editors, and integrated development environments (IDEs).
   A word or phrase is rendered using a fixed-width font, i.e. monospaced font, when it is enclosed in a single pair of plus signs (+{plus}+).
   A character contained within a string of characters must be enclosed in a double pair of plus signs (+{plus}{plus}+).

   ----
   include::ex-text.adoc[tag=mono]
   ----

   Monospaced text can be bold and italicized, as long as the markup pairs are entered in the right order.
   The monospace markup must be the outermost pair, then the bold pair, and the italic markup must always be the innermost pair.

   .Rendered monospace formatted text
   ====
   include::ex-text.adoc[tag=mono]
   ====

   The <<user-manual#back-pass,inline literal passthrough>> also applies monospace text formatting.
   ////


/docs/modules/text/pages/text-span-built-in-roles.adoc
======================================================

.. code-block: asciidoc

   = Text Span and Built-in Roles

   Instead of applying explicit formatting to text, you can enclose a span of a text in a non-formatting element.
   This type of markup is referred to as a text span (formerly known as _unquoted text_).
   It's purpose is to allow attributes such as role and ID to be applied to unformatted text.
   Though those attributes can still be used to apply styles to the text.

   == Text span syntax

   When text is enclosed in a pair of single or double hash symbols (`#`) *and* has at least one role, the role(s) will be applied to that text without adding any other implicit formatting.

   CAUTION: If no attrlist is present, the formatting pair will be interpreted as xref:highlight.adoc[highlighted text] instead.

   .Text span syntax
   [#ex-text-span]
   ----
   include::example$text.adoc[tag=text-span]
   ----

   When <<ex-text-span>> is converted to HTML, it translates into the following output.

   .Text span HTML output
   [,html]
   ----
   include::example$text.adoc[tag=text-span-html]
   ----

   As you can see, it's up to the stylesheet to provide styles for this element.
   Typically, this means you'll need to xref:custom-inline-styles.adoc[define custom inline styles] that map to the corresponding class.
   In this case, since `underline` is a built-in role, the style is provided for you.

   [#built-in]
   == Built-in roles for text

   The AsciiDoc language provides a handful of built-in roles you can use to provide formatting hints for the text.
   While these roles are often used with a text span, they can also be used with any other formatted text for which a role is accepted.

   WARNING: Not all converters recognize these roles, though you can expect them to at least be supported by the HTML converter.

   These roles are as follows:

   underline:: Applies an underline decoration to the span of text.
   overline:: Applies an overline decoration to the span of text.
   line-through:: Applies a line-through (aka strikethrough) decoration to the span of text.
   nobreak:: Disables words within the span of text from being broken.
   nowrap:: Prevents the span of text from wrapping at all.
   pre-wrap:: Prevents sequences of space and space-like characters from being collapsed (i.e., all spaces are preserved).

   There are several built-in roles that were once supported in AsciiDoc, but have since been deprecated.
   These roles include `big`, `small`, named colors (e.g., `aqua`), and named background colors (e.g., `aqua-background`).
   You should create your own semantic roles in place of these deprecated roles.


/docs/modules/text/pages/highlight.adoc
=======================================

.. code-block: asciidoc

   = Highlight
   //New page, content from text-css.adoc

   == Highlight syntax

   When text is enclosed in a pair of single or double hash symbols (`#`), and no role is assigned to it, the text will be rendered as highlighted (aka marked) text for notation purposes.

   .Highlighted style syntax
   [#ex-highlight]
   ----
   include::example$text.adoc[tag=highlight]
   ----

   When <<ex-highlight>> is converted to HTML, it translates into the following output.

   .Highlighted text HTML output
   [,html]
   ----
   include::example$text.adoc[tag=highlight-html]
   ----

   The result of <<ex-highlight>> is rendered below.

   ====
   include::example$text.adoc[tag=highlight]
   ====


/docs/modules/text/pages/quotation-marks-and-apostrophes.adoc
=============================================================

.. code-block: asciidoc

   = Quotation Marks and Apostrophes

   This page describes how to insert curved quotation marks and apostrophes using the AsciiDoc syntax.
   It covers the shorthand syntax, the limitations of that syntax, and when it's necessary to input these characters directly.

   == Single and double quotation mark syntax

   AsciiDoc does not assign special meaning to single or double quotation marks when used as constrained formatting pairs (e.g., around a word or phrase).
   In this case, the kbd:['] and kbd:["] characters are taken to be straight quotation marks (also known as dumb, vertical, or typewriter quotation marks).
   When an AsciiDoc processor encounters straight quotation marks in this context, it outputs them as entered.

   .Single and double straight quotation marks syntax
   [#ex-straight-quotes]
   ----
   include::example$text.adoc[tag=straight-quotes]
   ----

   The result of <<ex-straight-quotes>> is rendered below.

   ====
   include::example$text.adoc[tag=straight-quotes]
   ====

   You can instruct the AsciiDoc processor to output curved quotation marks (also known as smart, curly, or typographic quotation marks) by adding a repurposed constrained monospace formatting pair (i.e., a pair of backticks, `{backtick}`) directly inside the pair of quotation marks.
   The combination of these two formatting pairs forms a new constrained formatting pair for producing single and double curved quotation marks.

   .Single and double curved quotation marks syntax
   [#ex-curved-quotes]
   ----
   include::example$text.adoc[tag=c-quote-co]
   ----
   <.> To output double curved quotes, enclose a word or phrase in a pair of double quotes (`{quot}`) and a pair of backticks (`{backtick}`).
   <.> To output single curved quotes, enclose a word or phrase in a pair of single quotes (`{apos}`) and a pair of backticks (`{backtick}`).
   In this example, the phrase _wormwood and licorice_ should be enclosed in curved single quotes when the document is rendered.

   The result of <<ex-curved-quotes>> is rendered below.

   ====
   include::example$text.adoc[tag=c-quote]
   ====

   There's no unconstrained equivalent for producing double and single curved quotation marks.
   In that case, it's necessary to input the curved quotation marks directly using the characters kbd:[‘], kbd:[’], kbd:[“], and kbd:[”].

   == Apostrophe syntax

   When entered using the kbd:['] key, the AsciiDoc processor translates a straight apostrophe directly preceded and followed by a word character, such as in contractions and possessive singular forms, as a curved apostrophe.
   This partial support for smart typography without any special syntax is a legacy inherited from AsciiDoc.py.

   .Curved apostrophe replacement
   [#ex-apostrophe-replacement]
   ----
   Olaf's desk was a mess.
   ----

   The result of <<ex-apostrophe-replacement>> is rendered below.

   ====
   Olaf's desk was a mess.
   ====

   If you don't want a straight apostrophe that's bounded by two word characters to be rendered as a curved apostrophe, escape it by preceding it with a backslash (`{backslash}`).

   .Escape an apostrophe
   [#ex-escape]
   ----
   Olaf\'s desk ...
   ----

   The result of <<ex-escape>> is rendered below.

   ====
   Olaf\'s desk ...
   ====

   An apostrophe directly bounded by two word characters is processed during the xref:subs:replacements.adoc[replacements substitution phase], not the inline formatting (quotes) phase.
   To learn about additional ways to prevent the replacements substitution, see xref:subs:prevent.adoc[] and xref:pass:pass-macro.adoc[].

   An apostrophe directly followed by a space or punctuation, such as the possessive plural form, is not curved by default.
   To render a curved apostrophe when not bounded by two word characters, mark it as you would the second half of single curved quote (i.e., `pass:[`']`).
   This syntax for a curved apostrophe is effectively unconstrained.

   .Curved apostrophe syntax
   [#ex-apostrophe]
   ----
   include::example$text.adoc[tag=apos]
   ----

   In the rendered output for <<ex-apostrophe>> below, notice that the plural possessive apostrophe, seen trailing _werewolves_, is curved, as is the omission apostrophe before _00s_.

   ====
   include::example$text.adoc[tag=apos]
   ====

   === Possessive monospace

   In order to make a possessive, monospaced phrase, you need to switch to unconstrained formatting followed by an explicit typographic apostrophe.

   .Use a curved apostrophe with monospace in a word
   [#ex-word]
   ----
   ``npm```'s job is to manage the dependencies for your application.

   A ``std::vector```'s size is the number of items it contains.
   ----

   The result of <<ex-word>> is rendered below.

   ====
   ``npm```'s job is to manage the dependencies for your application.

   A ``std::vector```'s size is the number of items it contains.
   ====

   You'll need to use a similar syntax when the last (or only) word in the monospace phrase ends in an "`s`" (i.e., the plural possessive form).

   .Use a curved apostrophe with monospace at the end of a word
   [#ex-word-end]
   ----
   This ``class```' static methods make it easy to operate on files and directories.
   ----

   The result of <<ex-word-end>> is below.
   The word _class_ is rendered in monospace with a curved apostrophe at the end of it.

   ====
   This ``class```' static methods make it easy to operate on files and directories.
   ====

   You can get the same result by inserting a typographic apostrophe immediately following a constrained formatting pair.
   In this case, you're able to leverage the fact that a typographic apostrophe is a punctuation character to avoid the need to resort to unconstrained formatting.

   ----
   The `class`’ static methods make it easy to operate on files and directories.
   ----

   As you can see, it's often simpler to input the curved apostrophe directly using the character kbd:[’].
   The shorthand syntax AsciiDoc provides is only meant as a convenience.

   ////
   Add a sidebar describing the history and concerns with smart quotes regarding copy and paste and correct Unicode output.
   ////


/docs/modules/text/pages/subscript-and-superscript.adoc
=======================================================

.. code-block: asciidoc

   = Subscript and Superscript

   Subscript and superscript text is common in mathematical expressions and chemical formulas.
   When rendered, the size of subscripted and superscripted text is reduced.
   Subscripted text is placed at the baseline and superscripted text above the baseline.
   The size and precise placement of the text depends on the font and other stylesheet parameters applied to the converted document.

   == Subscript and superscript syntax

   Text is rendered as subscript (below the baseline) when you enclose it in a pair of tildes (`{tilde}`).
   Text is rendered as superscript (above the baseline) when you enclose it in a pair of carets (`{caret}`)

   Superscript and subscript have unique boundary constraints in AsciiDoc that are neither constrained nor unconstrained.
   Rather, they are unconstrained with the key restriction that the text must be continuous.
   (It may not contain spaces).
   This restriction is in place to avoid unexpected behavior where `{tilde}` and `{caret}` have meaning in other contexts.
   It's a tradeoff to have a more predictable syntax.

   Subscript:: One tilde (`{tilde}`) on either side of a continuous run of text makes it subscript.
   Superscript:: One caret (`{caret}`) on either side of a continuous run of text makes it superscript.

   .Subscript and superscript syntax
   [#ex-basic]
   ----
   include::example$text.adoc[tag=sub-sup]
   ----

   The result of <<ex-basic>> is rendered below.

   ====
   include::example$text.adoc[tag=sub-sup]
   ====

   If you need to include spaces in the superscript or subscript text, you must use the attribute reference `\{sp}` in place of the space character.

   .Superscript syntax that contains spaces
   [#ex-with-spaces]
   ----
   include::example$text.adoc[tag=sup-with-spaces]
   ----

   To write text that makes use of more complex variations and combinations of superscript and subscript, such as in equations and formulas, you're encourages to use the xref:stem:index.adoc[stem block or inline macro].


/docs/modules/text/pages/custom-inline-styles.adoc
==================================================

.. code-block: asciidoc

   = Using Custom Inline Styles

   == Custom style syntax

   You can assign built-in roles (e.g., `big` or `underline`) or custom roles (e.g., `term` or `required`) to any formatted text.
   These roles, in turn, can be used to apply styles to the text.
   In HTML, this is done by mapping styles to the role in the stylesheet using a CSS class selector.

   .Text with built-in role
   [#ex-built-in]
   ----
   include::example$text.adoc[tag=css-co]
   ----
   . The first positional attribute is treated as a role.
   You can assign it a custom or built-in CSS class.

   The results of <<ex-built-in>> are displayed below.

   ====
   include::example$text.adoc[tag=css]
   ====

   Although xref:text-span-built-in-roles.adoc#built-in[built-in roles] such as `big` and `small` are supported by most AsciiDoc processors, it's really better to define your own semantic role names and map styles to them accordingly.

   Here's how you can assign a custom role to text so you can apply your own styles to it.

   .Text with custom role
   [#ex-custom]
   ----
   include::example$text.adoc[tag=css-custom]
   ----

   When <<ex-custom>> is converted to HTML, the word _asciidoctor_ is enclosed in a `<span>` element and the role `userinput` is used as the element's CSS class.

   .HTML output
   [,html]
   ----
   include::example$text.adoc[tag=css-custom-html]
   ----

   The following example shows how you can assign styles to elements that have this role using a CSS class selector.

   [,css]
   ----
   .userinput {
     font-family: monospace;
     font-size: 1.1em;
     line-height: calc(1 / 1.1);
   }
   ----


/docs/modules/text/pages/troubleshoot-unconstrained-formatting.adoc
===================================================================

.. code-block: asciidoc

   = Troubleshoot Unconstrained Formatting Pairs

   An xref:index.adoc#unconstrained[unconstrained formatting pair] is often used to format just one or a few characters in a word.

   [#use-unconstrained]
   == When should I use unconstrained formatting?

   Consider the following questions:

   . Is there a letter, number, or underscore directly outside the opening or closing formatting marks?
   . Is there a colon, semicolon, or closing curly bracket directly before the opening formatting mark?
   . Is there a space directly inside of a formatting mark?

   If you answered "`yes`" to any of these questions, you need to use an unconstrained pair.

   To help you determine whether a particular syntax pattern requires an unconstrained pair versus a xref:index.adoc#constrained[constrained pair], consider the following scenarios:

   .Constrained or Unconstrained?
   [#constrained-or-unconstrained]
   |===
   |AsciiDoc |Result |Formatting Pair |Reason

   |`+Sara__h__+`
   |Sara__h__
   |Unconstrained
   |The letter `a` is directly adjacent to the opening mark.

   |`+**B**old+`
   |**B**old
   |Unconstrained
   |The `o` is directly adjacent to the closing mark.

   |`+&ndash;**2016**+`
   |&ndash;**2016**
   |Unconstrained
   |The `;` is directly adjacent to the opening mark.

   |`+** bold **+`
   |** bold **
   |Unconstrained
   |There are spaces directly inside the formatting marks.

   |`+*2016*&ndash;+`
   |*2016*&ndash;
   |Constrained
   |The adjacent `&` is not a letter, number, underscore, colon, or semicolon.

   |`+*9*-to-*5*+`
   |*9*-to-*5*
   |Constrained
   |The adjacent hyphen is not a letter, number, underscore, colon, or semicolon.
   |===

   [#unconstrained-edge-cases]
   === Unconstrained pair edge cases

   There are cases when it might seem logical to use a constrained pair, but an unconstrained pair is required.
   xref:subs:index.adoc[Substitutions] may be applied by the parser before getting to the formatting marks, in which case the characters adjacent to those marks may not be what you see in the original source.

   One such example is enclosing a xref:monospace.adoc[monospace phrase] inside xref:quotation-marks-and-apostrophes.adoc[curved quotation marks], such as "```end points```".

   You might start with the following syntax:

   ----
   "`end points`"
   ----

   That only gives you "`end points`".
   The backticks contribute to making the curved quotation marks, but the word isn't rendered in monospace.

   Adding another pair of backticks isn't enough either.

   ----
   "``end points``"
   ----

   The parser ignores the inner pair of backticks and interprets them as literal characters, rendering the phrase as "``end points``".

   You have to use an unconstrained pair of monospace formatting marks to render the phrase in monospace and a constrained pair of backticks to render the quotation marks as curved.
   That's three pairs of backticks in total.

   .A monospace phrase inside curved quotation marks
   ----
   "```end points```"
   ----

   If, instead, you wanted to surround the monospace phrase with typewriter quotation marks, such as "[.code]``end points``", then you need to interrupt the curved quotation marks by applying a role to the monospace phrase or escaping the typewriter quote.
   For example:

   .A monospace phrase inside typewriter quotation marks
   ----
   "[.code]``end points``" or \"``end points``"
   ----

   Another example is a possessive, monospace phrase that ends in an "`s`".
   In this case, you must switch the monospace phrase to unconstrained formatting.

   ----
   The ``class```' static methods make it easy to operate
   on files and directories.
   ----

   .Rendered possessive, monospace phrase
   ====
   The ``class```' static methods make it easy to operate on files and directories.
   ====

   Alternately, you could encode the curved apostrophe directly in the AsciiDoc source to get the same result.

   ----
   The `class`’ static methods make it easy to operate on files and directories.
   ----

   This situation is expected to improve in the future when the AsciiDoc language switches to using a parsing expression grammar for inline formatting instead of the current regular expression-based strategy.
   For details, follow https://github.com/asciidoctor/asciidoctor/issues/61[Asciidoctor issue #61].

   [#escape-unconstrained]
   == Escape unconstrained formatting marks

   Since unconstrained formatting marks are meant to match anywhere in the text, context free, that means you may catch them formatting text that you don't want styled sometimes.
   Admittedly, these symbols are a bit tricky to type literally when the content calls for it.
   But being able to do so is just a matter of knowing the tricks, which this section will cover.

   Let's assume you are typing the following two lines:

   ----
   The __kernel qualifier can be used with the __attribute__ keyword...

   #`CB###2`# and #`CB###3`#
   ----

   In the first sentence, you aren't looking for any text formatting, but you're certainly going to get it.
   The processor will interpret the double underscore in front of _++__kernel++_ as an unconstrained formatting mark.
   In the second sentence, you might expect _++CB###2++_ and _++CB###3++_ to be highlighted and displayed using a monospace font.
   However, what you get is a scrambled mess.
   The mix of constrained and unconstrained formatting marks in the line is ambiguous.

   There are two reliable solutions for escaping unconstrained formatting marks:

   * use an attribute reference to insert the unconstrained formatting mark verbatim, or
   * wrap the text you don't want formatted in an inline passthrough.

   The attribute reference is preferred because it's the easiest to read:

   ----
   :scores: __
   :hash3: ###

   The {scores}kernel qualifier can be used with the {scores}attribute{scores} keyword...

   #`CB{hash3}2`# and #`CB{hash3}3`#
   ----

   This works because xref:subs:attributes.adoc[attribute expansion] is performed after text formatting (i.e., xref:subs:quotes.adoc[quotes substitution]) in the normal substitution order.

   Here's how you'd write these lines using the xref:pass:pass-macro.adoc[inline single plus macro] to escape the unconstrained formatting marks instead:

   ----
   The +__kernel+ qualifier can be used with the +__attribute__+ keyword...

   #`+CB###2+`# and #`+CB###3+`#
   ----

   Notice the addition of the plus symbols.
   Everything between the plus symbols is escaped from interpolation (attribute references, text formatting, etc.).
   However, the text still receives proper output escaping for xref:subs:special-characters.adoc[HTML special characters] (e.g., `<` becomes `\&lt;`).

   The enclosure `pass:[`+TEXT+`]` (text enclosed in pluses surrounded by backticks) is a special formatting combination in AsciiDoc.
   It means to format TEXT as monospace, but don't interpolate formatting marks or attribute references in TEXT.
   It's roughly equivalent to Markdown's backticks.
   Since AsciiDoc offers more advanced formatting, the double enclosure is necessary.


/docs/modules/text/examples/text.adoc
=====================================

.. code-block: asciidoc

   // tag::para[]
   This journey begins one late Monday afternoon in Antwerp.

   Our team desperately needs coffee, but none of us dare open the office door.
   // end::para[]

   // FIXME this should be in the blocks module
   // tag::b-para[]
   Paragraphs don't require special markup in AsciiDoc.
   A paragraph is defined by one or more consecutive lines of text.
   Line breaks within a paragraph are not displayed.

   Leave at least one empty line to begin a new paragraph.
   // end::b-para[]

   // tag::hb-all[]
   Roses are red, +
   violets are blue.

   [%hardbreaks]
   A ruby is red.
   Java is black.
   // end::hb-all[]

   // tag::hb[]
   Roses are red, +
   violets are blue.
   // end::hb[]

   // tag::hb-p[]
   [%hardbreaks]
   A ruby is red.
   Java is black.
   // end::hb-p[]

   // tag::b-hb[]
   To preserve a line break, end the line in a space followed by a plus sign. +
   This results in a visible line break (e.g., `<br>`) between the lines.
   // end::b-hb[]

   // tag::hb-attr[]
   = Line Break Doc Title
   :hardbreaks-option:

   Roses are red,
   violets are blue.
   // end::hb-attr[]

   // tag::lead[]
   [.lead]
   This is the ultimate paragraph.
   // end::lead[]

   // tag::b-lead[]
   [.lead]
   This text will be styled as a lead paragraph (i.e., larger font).
   // end::b-lead[]

   // tag::qr-lead[]
   [.lead]
   This text will be styled as a lead paragraph (i.e., larger font).

   This paragraph will not be.
   // end::qr-lead[]

   // tag::b-i[]
   _To tame_ the wild wolpertingers we needed to build a *charm*.
   But **u**ltimate victory could only be won if we divined the
   *_true name_* of the __war__lock.
   // end::b-i[]

   // tag::b-i-n[]
   _To tame_ the wild wolpertingers we needed to build a *charm*.
   But **u**ltimate victory could only be won if we divined the
   *_true name_* of the __war__lock.
   // end::b-i-n[]

   // tag::b-bold-italic-mono[]
   bold *constrained* & **un**constrained

   italic _constrained_ & __un__constrained

   bold italic *_constrained_* & **__un__**constrained

   monospace `constrained` & ``un``constrained

   monospace bold `*constrained*` & ``**un**``constrained

   monospace italic `_constrained_` & ``__un__``constrained

   monospace bold italic `*_constrained_*` & ``**__un__**``constrained
   // end::b-bold-italic-mono[]

   // tag::constrained-bold-italic-mono[]
   It has *strong* significance to me.

   I _cannot_ stress this enough.

   Type `OK` to accept.

   That *_really_* has to go.

   Can't pick one? Let's use them `*_all_*`.
   // end::constrained-bold-italic-mono[]

   // tag::unconstrained-bold-italic-mono[]
   **C**reate, **R**ead, **U**pdate, and **D**elete (CRUD)

   That's fan__freakin__tastic!

   Don't pass generic ``Object``s to methods that accept ``String``s!

   It was Beatle**__mania__**!
   // end::unconstrained-bold-italic-mono[]

   // tag::monospace-vs-codespan[]
   `{cpp}` is valid syntax in the programming language by the same name.

   `+WHERE id <= 20 AND value = "{name}"+` is a SQL WHERE clause.
   // end::monospace-vs-codespan[]

   // tag::straight-quotes[]
   In Ruby, '\n' represents a backslash followed by the letter n.
   Single quotes prevent escape sequences from being interpreted.
   In contrast, "\n" represents a newline.
   // end::straight-quotes[]

   // tag::c-quote-co[]
   "`What kind of charm?`" Lazarus asked.
   "`An odoriferous one or a mineral one?`" <.>

   Kizmet shrugged.
   "`The note from Olaf's desk says '`wormwood and licorice,`'
   but these could be normal groceries for werewolves.`" <.>
   // end::c-quote-co[]

   // tag::c-quote[]
   "`What kind of charm?`" Lazarus asked.
   "`An odoriferous one or a mineral one?`"

   Kizmet shrugged.
   "`The note from Olaf's desk says '`wormwood and licorice,`'
   but these could be normal groceries for werewolves.`"
   // end::c-quote[]

   // tag::b-c-quote[]
   "`double curved quotes`"

   '`single curved quotes`'

   Olaf's desk was a mess.

   A ``std::vector```'s size is the number of items it contains.

   All of the werewolves`' desks were a mess.

   Olaf had been with the company since the `'00s.
   // end::b-c-quote[]

   // tag::apos[]
   Olaf had been with the company since the `'00s.
   His desk overflowed with heaps of paper, apple cores and squeaky toys.
   We couldn't find Olaf's keyboard.
   The state of his desk was replicated, in triplicate, across all of
   the werewolves`' desks.
   // end::apos[]

   // tag::sub-sup[]
   "`Well the H~2~O formula written on their whiteboard could be part
   of a shopping list, but I don't think the local bodega sells
   E=mc^2^,`" Lazarus replied.
   // end::sub-sup[]

   // tag::sup-with-spaces[]
   The deepest body of water is Deep Creek Lake.^[citation{sp}needed]^
   // end::sup-with-spaces[]

   // tag::b-sub-sup[]
   ^super^script

   ~sub~script
   // end::b-sub-sup[]

   // tag::mono[]
   "`Wait!`" Indigo plucked a small vial from her desk's top drawer
   and held it toward us.
   The vial's label read: `E=mc^2^`; the `E` represents _energy_,
   but also pure _genius!_
   // end::mono[]

   // tag::literal-mono[]
   You can reference the value of a document attribute using
   the syntax `+{name}+`, where `name` is the attribute name.
   // end::literal-mono[]

   // tag::literal-mono-with-plus[]
   `pass:[++]` is the increment operator in C.
   // end::literal-mono-with-plus[]

   // tag::b-mono-code[]
   Reference code like `types` or `methods` inline.

   Do not pass arbitrary ``Object``s to methods that accept ``String``s!
   // end::b-mono-code[]

   // tag::highlight[]
   Mark my words, #automation is essential#.
   // end::highlight[]

   // tag::highlight-html[]
   <mark>mark element</mark>
   // end::highlight-html[]

   // tag::text-span[]
   The text [.underline]#underline me# is underlined.
   // end::text-span[]

   // tag::text-span-html[]
   The text <span class="underline">underline me</span> is underlined.
   // end::text-span-html[]

   // tag::css-co[]
   Do werewolves believe in [.small]#small print#? <.>

   [.big]##O##nce upon an infinite loop.
   // end::css-co[]

   // tag::css[]
   Do werewolves believe in [.small]#small print#?

   [big]##O##nce upon an infinite loop.
   // end::css[]

   // tag::qr-all[]
   Mark my words, #automation is essential#.

   ##Mark##up refers to text that contains formatting ##mark##s.

   Where did all the [.underline]#cores# go?

   We need [.line-through]#ten# twenty VMs.

   A [.myrole]#custom role# must be fulfilled by the theme.
   // end::qr-all[]

   // tag::css-custom[]
   Type the word [.userinput]#asciidoctor# into the search bar.
   // end::css-custom[]

   // tag::css-custom-html[]
   <span class="userinput">asciidoctor</span>
   // end::css-custom-html[]

   ////
   phrase styled by CSS class .small#
   ////


/docs/modules/lists/nav.adoc
============================

.. code-block: asciidoc

   * Lists
   ** xref:unordered.adoc[]
   ** xref:ordered.adoc[]
   ** xref:checklist.adoc[]
   ** xref:separating.adoc[]
   ** xref:continuation.adoc[]

   []
   * xref:description.adoc[]
   ** xref:horizontal.adoc[]
   ** xref:qanda.adoc[]
   ** xref:description-with-marker.adoc[]


/docs/modules/lists/pages/unordered.adoc
========================================

.. code-block: asciidoc

   = Unordered Lists
   :keywords: bulleted list

   You can make unordered lists in AsciiDoc by starting lines with a designated marker.
   An unordered list is a list with items prefixed with symbol, such as a disc (aka bullet).

   AsciiDoc builds on the well-established convention of using either an asterisk or hyphen to identify a list item.
   Adjacent list items are joined into a single list.
   Unordered lists can be nested by varying the marker character or length (asterisk only).
   List items may contain attached blocks.
   They can also be interleaved with other types of lists.

   == Basic unordered list

   In the example below, each list item is marked using an asterisk (`+*+`), the AsciiDoc syntax specifying an unordered list item.

   ----
   include::example$unordered.adoc[tag=base]
   ----

   A list item's first line of text must be offset from the marker (`+*+`) by at least one space.
   Empty lines are required before and after a list.
   Additionally, empty lines are permitted, but not required, between list items.

   .Rendered unordered list
   ====
   include::example$unordered.adoc[tag=base]
   ====

   You can add a title to a list by prefixing the title with a period (`.`).

   ----
   include::example$unordered.adoc[tag=base-t]
   ----

   .Rendered unordered list with a title
   ====
   include::example$unordered.adoc[tag=base-t]
   ====

   Was your instinct to use a hyphen (`-`) instead of an asterisk to mark list items?
   Guess what?
   That works too!

   ----
   include::example$unordered.adoc[tag=base-alt]
   ----

   You should reserve the hyphen for lists that only have a single level because the hyphen marker (`-`) doesn't work for nested lists.
   Now that we've mentioned nested lists, let's go to the next section and learn how to create lists with multiple levels.

   [#separating-lists]
   .Forcing lists apart
   ****
   If you have adjacent lists, they have the tendency to want to fuse together.
   To force lists apart, insert a line comment (`//`) surrounded by empty lines between the two lists.
   Here's an example, where the `-` text in the line comment indicates the line serves as an "`end of list`" marker:

   ----
   include::example$unordered.adoc[tag=divide]
   ----

   This technique works for all list types.
   See xref:separating.adoc[] for more details.
   ****

   == Nested unordered list

   To nest an item, just add another asterisk (`+*+`) to the marker.
   Continue doing this for each subsequent level.

   ----
   include::example$unordered.adoc[tag=nest]
   ----

   .Rendered nested, unordered list
   ====
   include::example$unordered.adoc[tag=nest]
   ====

   If you prefer, you can indent the marker an arbitrary number of spaces from the left margin.
   The indentation is not significant and may aid in visualizing the nesting level.

   You can nest unordered lists to any depth.
   Keep in mind, however, that some interfaces will begin flattening lists after a certain depth.
   For instance, GitHub starts flattening list after 10 levels of nesting.

   ----
   include::example$unordered.adoc[tag=max]
   ----

   [#ex-deep]
   .Unordered lists can be nested to any depth
   ====
   include::example$unordered.adoc[tag=max]
   ====

   === Determining list depth

   While it would seem as though the number of asterisks represents the nesting level, that's not how depth is determined.
   A new level is created for each unique marker encountered.
   For example, you can create a second level using the hyphen marker instead of two asterisks.

   .Using hyphen to mark the second level is not recommended
   ----
   include::example$unordered.adoc[tag=nest-alt]
   ----

   However, it's much more intuitive to follow the convention that the marker length (i.e., number of asterisks) equals the level of nesting.
   The hyphen should only be used as the marker for the first level.

   *marker length = level of nesting*

   After all, we're shooting for plain text markup that is readable _as is_.

   [#markers]
   == Markers

   When rendered, an unordered list item is designated by a leading marker (bullet) (not to be confused with the marker used to define the list).
   This marker can be controlled using the list style.
   If no marker is specified, a default marker will be selected by the renderer.

   === Default markers

   By default, AsciiDoc assumes that the first three levels of an unordered list will be styled using the markers disc, circle, and squared when rendered.
   Consider the following list:

   ----
   include::example$unordered.adoc[tag=markers]
   ----

   .Default alternating markers for nested lists
   ====
   include::example$unordered.adoc[tag=markers]
   ====

   Observe that the marker for the first level is a disc (filled circle), the second level is a circle (outline), and the third level is a square (filled).
   The AsciiDoc processor does not specify these markers explicitly in the model or converted output.
   Rather, these defaults are added by the renderer (e.g., CSS), adhering to a convention established by HTML.

   Beyond the third level of nesting, the marker choice is not specified.
   Typically, the renderer will continue to use the square marker, as shown in <<ex-deep,an earlier example>>.

   === Custom markers

   AsciiDoc offers numerous marker styles for lists.
   The list marker can be specified using the list's block style.

   The unordered list marker can be set using any of the following block styles:

   * square
   * circle
   * disc
   * none or no-bullet (indented, but no bullet)
   * unstyled (no indentation or bullet) (not supported in DocBook output)

   NOTE: These styles are supported by the default Asciidoctor stylesheet.

   When present, the style name is assigned to the unordered list element as follows:

   For HTML:: the style name is assigned to the `class` attribute on the `<ul>` element.

   For DocBook:: the style name is assigned to the `mark` attribute on the `<itemizedlist>` element.

   Here's an unordered list that has square markers:

   ----
   include::example$unordered.adoc[tag=square]
   ----

   .A list with square markers
   ====
   include::example$unordered.adoc[tag=square]
   ====

   Once the list style is set, that style is used for all nested lists until it is set again.
   The assumption is that it's no longer possible to infer the alternation, so it stops.
   The inherited style is not specified in the model, but rather applied by the renderer (e.g., CSS).
   For example, if we set the list style to circle on the top-level list, it will be used for all levels.

   ----
   include::example$unordered.adoc[tag=marker-lock]
   ----

   .The list style is inherited once set
   ====
   include::example$unordered.adoc[tag=marker-lock]
   ====

   The inherited style can be set or reset at any level.

   ----
   include::example$unordered.adoc[tag=marker-override]
   ----

   .The list style can be reset
   ====
   include::example$unordered.adoc[tag=marker-override]
   ====


/docs/modules/lists/pages/ordered.adoc
======================================

.. code-block: asciidoc

   = Ordered Lists
   :keywords: numbered list

   == Basic ordered list

   Sometimes, we need to number the items in a list.
   Instinct might tell you to prefix each item with a number, like in this next list:

   ----
   include::example$ordered.adoc[tag=base-num]
   ----

   The above works, but since the numbering is obvious, the AsciiDoc processor will insert the numbers for you if you omit them:

   ----
   include::example$ordered.adoc[tag=base]
   ----

   ====
   include::example$ordered.adoc[tag=base]
   ====

   If you number the ordered list explicitly, you have to manually keep the list numerals sequential.
   Otherwise, you will get a warning.
   This differs from other lightweight markup languages.
   But there's a reason for it.

   Using explicit numbering is one way to adjust the numbering offset of a list.
   For instance, you can type:

   ----
   include::example$ordered.adoc[tag=base-num-start]
   ----

   However, there's a simpler way to accomplish the same result without the manual effort.
   You can use the `start` attribute on the list to define the number at which you want the numerals to start.

   ----
   include::example$ordered.adoc[tag=base-start]
   ----

   The start value is always a positive integer value even when using a different numeration style such as loweralpha.

   .When not to use the start attribute
   ****
   When an ordered list item contains block content--such as an image, source block, or table--you may observe that the number of the next item in the list resets to 1.
   In fact, what's happened is that a new list has been started where the number resets due to a missing list continuation.

   In these cases, you should not resort to using the `start` attribute to fix the numbering.
   Not only does that require manual adjustment as items are added to the list, it doesn't address the underlying semantics problem, which is what is causing it to be broken.
   Instead, use a list continuation between each block element you want to attach to the list item to ensure the list item is continuous.
   The list continuation glues the blocks together within a given item and keeps them at the same level of indentation.

   * For details on how to use a list continuation, refer to the xref:continuation.adoc[] page.
   * For an example of the list continuation used in a complex ordered list, see the launch steps in https://github.com/aws-quickstart/quickstart-microsoft-sql-fci-fsx/blob/main/docs/partner_editable/deploy_steps.adoc[this .adoc file in GitHub^].
   * To see how those launch steps look in the final output, see the https://aws-quickstart.github.io/quickstart-microsoft-sql-fci-fsx/#_launch_the_quick_start[Launch the Quick Start^] section of the generated deployment guide.
   The list continuations prevent step 2 from resetting to 1.
   They also prevent step 5, which is pulled in from a separate AsciiDoc file, from resetting to 1.
   ****

   To present list items in reverse order, add the `reversed` option:

   ----
   include::example$ordered.adoc[tag=reversed]
   ----

   ====
   include::example$ordered.adoc[tag=reversed]
   ====

   You can give a list a title by prefixing the line with a dot immediately followed by the text (without leaving any space after the dot).

   Here's an example of a list with a title:

   ----
   include::example$ordered.adoc[tag=base-t]
   ----

   ====
   include::example$ordered.adoc[tag=base-t]
   ====

   == Nested ordered list

   // tag::basic[]
   You create a nested item by using one or more dots in front of each the item.

   ----
   include::example$ordered.adoc[tag=nest]
   ----

   AsciiDoc selects a different number scheme for each level of nesting.
   Here's how the previous list renders:

   .A nested ordered list
   ====
   include::example$ordered.adoc[tag=nest]
   ====
   // end::basic[]

   [TIP]
   ====
   Like with the asterisks in an unordered list, the number of dots in an ordered list doesn't represent the nesting level.
   However, it's much more intuitive to follow the convention that the number of dots equals the level of nesting.

   *# of dots = level of nesting*

   Again, we are shooting for plain text markup that is readable _as is_.
   ====

   You can mix and match the three list types, ordered, xref:unordered.adoc[unordered], and xref:description.adoc[description], within a single hybrid list.
   The AsciiDoc syntax tries hard to infer the relationships between the items that are most intuitive to us humans.

   Here's an example of nesting an unordered list inside of an ordered list:

   ----
   include::example$ordered.adoc[tag=mix]
   ----

   ====
   include::example$ordered.adoc[tag=mix]
   ====

   You can spread the items out and indent the nested lists if that makes it more readable for you:

   ----
   include::example$ordered.adoc[tag=mix-alt]
   ----

   The description list page demonstrates how to xref:description.adoc#three-hybrid[combine all three list types].

   [#styles]
   == Number styles

   For ordered lists, AsciiDoc supports the numeration styles such as lowergreek and decimal-leading-zero.
   The full list of numeration styles that can be applied to an ordered list are as follows:

   [%autowidth]
   |===
   |Block style |CSS list-style-type

   |arabic
   |decimal

   |decimal ^[1]^
   |decimal-leading-zero

   |loweralpha
   |lower-alpha

   |upperalpha
   |upper-alpha

   |lowerroman
   |lower-roman

   |upperroman
   |upper-roman

   |lowergreek ^[1]^
   |lower-greek
   |===
   ^[1]^ These styles are only supported by the HTML converters.

   Here are a few examples showing various numeration styles as defined by the block style shown in the header row:

   [%autowidth]
   |===
   |[arabic] ^[2]^ |[decimal] |[loweralpha] |[lowergreek]

   a|
   . one
   . two
   . three

   a|
   [decimal]
   . one
   . two
   . three

   a|
   [loweralpha]
   . one
   . two
   . three

   a|
   [lowergreek]
   . one
   . two
   . three
   |===
   ^[2]^ Default numeration if block style is not specified

   TIP: Custom numeration styles can be implemented using a custom role.
   Define a new class selector (e.g., `.custom`) in your stylesheet that sets the `list-style-type` property to the value of your choice.
   Then, assign the name of that class as a role on any list to which you want that numeration applied.

   When the role shorthand (`.custom`) is used on an ordered list, the numeration style is no longer omitted.

   You can override the number scheme for any level by setting its style (the first positional entry in a block attribute list).
   You can also set the starting number using the `start` attribute:

   ----
   include::example$ordered.adoc[tag=num]
   ----

   ====
   include::example$ordered.adoc[tag=num]
   ====

   IMPORTANT: The `start` attribute must be a number, even when using a different numeration style.
   For instance, to start an alphabetic list at letter "c", set the numeration style to loweralpha and the start attribute to 3.

   == Escaping the list marker

   If you have paragraph text that begins with a list marker, but you don't intend it to be a list item, you need to escape that marker by using the attribute reference to disrupt the pattern.

   Consider the case when the line starts with a P.O. box reference:

   ----
   P. O. Box
   ----

   In order to prevent this paragraph from being parsed as an ordered list, you need to replace the first space with `\{empty}`.

   ----
   P.{empty}O. Box
   ----

   Now the paragraph will remain as a paragraph.

   In the future, it will be possible to escape an ordered list marker using a backslash, but that is not currently possible.


/docs/modules/lists/pages/checklist.adoc
========================================

.. code-block: asciidoc

   = Checklists

   List items can be marked complete using checklists.

   Checklists (i.e., task lists) are unordered lists that have items marked as checked (`[*]` or `[x]`) or unchecked (`[ ]`).
   Here's an example:

   .Checklist syntax
   [#ex-syntax]
   ----
   include::example$checklist.adoc[tag=check]
   ----

   The result of <<ex-syntax>> is displayed below.

   include::example$checklist.adoc[tag=check]

   TIP: Not all items in the list have to be checklist items, as <<ex-syntax>> shows.

   When checklists are converted to HTML, the checkbox markup is transformed into an HTML checkbox with the appropriate checked state.
   The `data-item-complete` attribute on the checkbox is set to 1 if the item is checked, 0 if not.
   The checkbox is used in place of the item's bullet.

   Since HTML generated from AsciiDoc is typically static, the checkbox is set as disabled to make it appear as a simple mark.
   If you want to make the checkbox interactive (i.e., clickable), add the `interactive` option to the checklist (shown here using the shorthand syntax for the xref:attributes:options.adoc[]):

   .Checklist with interactive checkboxes
   [#ex-interactive]
   ----
   include::example$checklist.adoc[tag=check-int]
   ----

   The result of <<ex-interactive>> is displayed below.

   include::example$checklist.adoc[tag=check-int]

   ////
   This example doesn't seem quite right since nothing about it indicates font based icons.

   As a bonus, if you enable font-based icons, the checkbox markup (in non-interactive lists) is transformed into a font-based icon!

   .Checklist with font-based checkboxes
   [source]
   ----
   include::{partialsdir}/ex-ulist.adoc[tag=check-icon]
   ----
   ////


/docs/modules/lists/pages/separating.adoc
=========================================

.. code-block: asciidoc

   = Separating Lists

   In AsciiDoc, lists items have natural affinity towards one another.
   If adjacent lines start with the same list marker, they are joined together into the same list, even if separated by empty lines.
   If the adjacent line starts with a different list marker, even if offset by empty lines, it will be placed into a nested list.

   These rules make it easier to keep list items together in a single list.
   However, they can present a challenge if what you want is to create separate lists.
   Fortunately, there are ways to force a change to this behavior.
   The techniques described on this page work for all list types.

   == Using a line comment

   To force lists apart, you can insert a line comment (i.e., `//`) surrounded by empty lines on either side between the two lists.

   Here's an example that shows where to place the line comment to separate two adjacent unordered lists.
   The `-` following the line comment prefix is a hint to authors to indicate that the comment line serves as an "`end of list`" marker:

   ----
   include::example$unordered.adoc[tag=divide]
   ----

   This technique works for separating any type of list.

   == Using a block attribute line

   Another way to start a new list is to place a block attribute line (even an empty one) above the second list, offset by an empty line.

   Here's an example that shows where to place the block attribute line to separate unordered and ordered lists that are adjacent.

   ----
   include::example$unordered.adoc[tag=divide-alt]
   ----

   The preceding empty line is important.
   If that were not present, the ordered list would still be nested inside the ordered list.
   If the second list requires block attributes, you can add them to the block attribute line.

   This technique works for separating any type of list.


/docs/modules/lists/pages/continuation.adoc
===========================================

.. code-block: asciidoc

   = Complex List Items

   This page covers how to create lists that have complex list items.

   A [.term]*complex list item* is a list item that contains block content that follows the principal text (which may be empty).
   This is different from a list item whose principal text spans multiple lines, for which this page draws a distinction.
   The page goes on to explain how to attach a block to a list item in an ancestor list.

   The main focus of the syntax covered on this page is to keep the list continuous (i.e., to prevent the list from breaking).

   == Multiline principal text

   As with regular paragraph text, the principal text in a list item can span any number of lines as long as those lines are contiguous (i.e., adjacent with no empty lines).
   Multiple lines are combined into a single paragraph and wrap as regular paragraph text.
   This behavior holds even if the lines are indented, as shown in the third bullet in this example:

   ----
   include::example$complex.adoc[tag=indent]
   ----

   ====
   include::example$complex.adoc[tag=indent]
   ====

   TIP: When list items contain more than one line of text, leave an empty line between items to make the list easier to read while working in the code.
   An empty line between two list items will not break the list.

   === Empty lines in a list

   Empty lines between two items in a list (ordered or unordered) will not break the list.
   For ordered lists, this means the numbering will be continuous rather than restarting at 1.
   (See xref:separating.adoc[] to learn how to force two adjacent lists apart).

   If an empty line after a list item is followed by the start of a block, such as a paragraph or delimited block rather than another list item, the list will terminate at this point.
   If this happens, you'll notice that a subsequent list item will be placed into a new list.
   For ordered lists, that means the numbering will restart (at 1).

   To keep the list continuous in those cases--such as when you're documenting complex steps in a procedure--you must use a <<list-continuation,list continuation>> to attach blocks to the list item.
   For ordered lists, this will ensure that the numbering continues from one list item to the next rather than being reset.

   [#list-continuation]
   == Attach blocks using a list continuation

   In addition to the principal text, a list item may contain block elements, including paragraphs, delimited blocks, and block macros.
   To add block elements to a list item, you must "`attach`" them (in a series) using a list continuation.
   A [.term]*list continuation* is a `{plus}` symbol on a line by itself, immediately adjacent to the block being attached.

   NOTE: A `{plus}` at the end of a line, rather than on a line by itself, is not a list continuation.
   Instead, it creates a hard line break.

   Here's an example of a list item that uses a list continuation:

   ----
   include::example$complex.adoc[tag=cont]
   ----

   ====
   include::example$complex.adoc[tag=cont]
   ====

   Using a list continuation, you can attach any number of block elements to a list item.
   Unless the block is inside a delimited block which itself has been attached, each block must be preceded by a list continuation to form a chain of blocks.

   Here's an example that attaches both a listing block and an admonition paragraph to the first list item:

   [source]
   ....
   include::example$complex.adoc[tag=complex]
   ....

   Here's how the source is rendered:

   .A list with complex content
   ====
   include::example$complex.adoc[tag=complex]
   ====

   If you're attaching more than one block to a list item, you're strongly encouraged to wrap the content inside an open block.
   That way, you only need a single list continuation line to attach the open block to the list item.
   Within the open block, you write like you normally would, no longer having to worry about adding list continuations between the blocks to keep them attached to the list item.

   Here's an example of wrapping complex list content in an open block:

   [source]
   ....
   include::example$complex.adoc[tag=complex-o]
   ....

   Here's how that content is rendered:

   .A list with complex content wrapped in an open block
   ====
   include::example$complex.adoc[tag=complex-o]
   ====

   The open block wrapper is also useful if you're including content from a shared file into a list item.
   For example:

   ----
   * list item
   +
   --
   \include::shared-content.adoc[]
   --
   ----

   By wrapping the include directive in an open block, the content can be used unmodified.

   The only limitation of this technique is that the content itself may not contain an open block since open blocks cannot (yet) be nested.

   [#drop-principal-text]
   == Drop the principal text

   If the principal text of a list item is empty, the node for the principal text is dropped.
   This is how you can get the first block (such as a listing block) to line up with the list marker.
   You can make the principal text empty by using the `+{empty}+` attribute reference.

   Here's an example of a list that has items with _only_ complex content.

   [source]
   ....
   include::example$complex.adoc[tag=complex-only]
   ....

   Here's how the source is rendered:

   .A list with complex content
   ====
   include::example$complex.adoc[tag=complex-only]
   ====

   [#attach-to-ancestor-list]
   == Attach blocks to an ancestor list

   Instead of attaching a block to the current list item, you may need to end that list and attach a block to its ancestor instead.
   There are two ways to express this composition in the AsciiDoc syntax.
   You can either enclose the child list in an open block, or you can use insert empty lines above the list continuation to first escape from the nesting.
   Let's look at enclosing the child list in an open block first, since that is the preferred method.

   === Enclose in open block

   If you plan to attach blocks to a list item as a sibling of a nested list, the most robust way of creating that structure is to enclose the nested list in an open block.
   That way, it's clear where the nested list ends and the current list item continues.

   Here's an example of a list item with a nested list followed by an attached paragraph.
   The open block makes the boundaries of the nested list clear.

   [source]
   ....
   include::example$complex.adoc[tag=complex-enclosed]
   ....

   Here's how the source is rendered:

   .A nested list enclosed in an open block
   ====
   include::example$complex.adoc[tag=complex-enclosed]
   ====

   The main limitation of this approach is that it can only be used once in the hierarchy (i.e., it can only enclose a single nested list).
   That's because the open block itself cannot be nested.
   If you require more control, then you must use the ancestor list continuation.

   === Ancestor list continuation

   Normally, a list continuation will attach a block to the current list item.
   For each empty line you add before the list continuation, the association will move up one level in the nesting.
   In other words, an empty line signals to the list continuation to back out of the current list by one level.
   As a result, the block will be attached to the current item in an ancestor list.
   This syntax is referred to as an [.term]*ancestor list continuation*.

   WARNING: The ancestor list continuation is a fragile syntax.
   For one, it may not be apparent to new authors that the empty lines before the list continuation are significant.
   That's because the AsciiDoc syntax generally ignores repeating empty lines.
   There are also scenarios where even these empty lines are collapsed, thus preventing the ancestor list continuation from working as expected.
   Use this feature of the syntax with caution.
   If possible, enclose the nested list in an open block, as described in the previous section.

   Here's an example of a paragraph that's attached to the parent list item after the nested list ends.
   The empty line above the list continuation indicates that the block should be attached to current list item in the parent list.

   [source]
   ....
   include::example$complex.adoc[tag=complex-parent]
   ....

   Here's how the source is rendered:

   .A block attached to the parent list item
   ====
   include::example$complex.adoc[tag=complex-parent]
   ====

   Each empty line that precedes the list continuation signals a move up one level of nesting.
   Here's an example that shows how to attach a paragraph to a grandparent list item using two leading empty lines:

   [source]
   ....
   include::example$complex.adoc[tag=complex-grandparent]
   ....

   Here's how the source is rendered:

   .A block attached to the grandparent list item
   ====
   include::example$complex.adoc[tag=complex-grandparent]
   ====

   == Summary

   On this page, you learned that the principal text of a list item can span multiple contiguous lines, and that those lines can be indented for readability without affecting the output.
   You learned that you can attach any type of block content to a list item using the list continuation.
   You also learned that using this feature in combination with the open block makes it easier to create list items with complex content, to attach blocks to a parent list, or to drop the principal text.
   Finally, you learned that you can use the ancestor list continuation to attach blocks to the current item in an ancestor list, and the risks with doing so.


/docs/modules/lists/pages/description-with-marker.adoc
======================================================

.. code-block: asciidoc

   = Description Lists With Marker

   WARNING: Not yet an official part of the AsciiDoc language and thus should be considered experimental.

   Asciidoctor introduces a list type that's a hybrid between a description list and either an unordered or ordered list.
   This hybrid list, often referred to as an unordered or ordered description list, has the appearance of an unordered or ordered list, respectively, except that the subject of each list item is emphasized in bold text and either offset from the description by a stop character followed by a space or stacked above it.

   NOTE: Currently, only Asciidoctor PDF supports the syntax defined on this page, though support in the HTML converter is in the works.
   Asciidoctor EPUB 3 supports a slightly different variation in that is uses a different block style for unordered lists (`itemized` instead of `unordered`).
   Though that difference will be aligned in a future release.

   == Introduction

   In an unordered and ordered description list, the first term in each item is preceded by a marker.
   Additional terms are ignored.
   The marker is a bullet for an unordered list or a number for an ordered list.
   The term effectively becomes the subject, appearing in bold text.

   Here's an example of a description list with marker.

   ====
   * *boolean:* use true and false, not 1 and 0 or T and F
   * *number:* use Arabic numerals without punctuation (other than the decimal point in a floating point number)
   * *enumerated value:* use only one of the allowed values, respecting case
   ====

   This list type also provides control over the stop character that's inserted after the term so it can more naturally flow into the item description.
   It can also be configured so that the subject is stacked above the description.
   This page describes the syntax of this list type and how to customize its appearance.

   == Syntax

   In AsciiDoc, a description list with a marker is defined just like a normal description list.
   The difference is that it must be annotated with either the `unordered` or `ordered` block style.
   The `unordered` block style creates an unordered list and the `ordered` block style creates an ordered list.

   Here's an example of an unordered description list.

   ----
   [unordered]
   boolean:: use true and false, not 1 and 0 or T and F
   number:: use Arabic numerals without punctuation (other than the decimal point to make a floating point number)
   enumerated value:: use only one of the allowed values, respecting case
   ----

   Here's how this syntax will appear, where supported:

   ====
   * *boolean:* use true and false, not 1 and 0 or T and F
   * *number:* use Arabic numerals without punctuation (other than the decimal point in a floating point number)
   * *enumerated value:* use only one of the allowed values, respecting case
   ====

   To make an ordered list instead, change the block style to `ordered`.

   ----
   [ordered]
   &:: ampersand
   >:: greater than
   ----

   Here's how this syntax will appear, where supported:

   ====
   . *&:* ampersand
   . *>:* greater than
   ====

   == Subject stop

   By default, the subject (i.e., the term) is followed immediately by a colon (still in bold) and offset from the description by a space.
   You can replace the colon with another character (or sequence of characters) using the block attribute named `subject-stop`.

   ----
   [unordered,subject-stop=)]
   alpha:: partially feature complete, unstable, and subject to change
   beta:: feature complete and undergoing testing
   ----

   Here's how this syntax will appear, where supported:

   ====
   * *alpha)* partially feature complete, unstable, and subject to change
   * *beta)* feature complete and undergoing testing
   ====

   If the term ends with a period or the value of the subject-stop attribute, the subject stop is not added.

   TIP: To insert a space between the subject and visible stop character(s), add a space character at the start of the value of the subject-stop attribute.
   You'll also need to enclose the value in double quotes so the space character is preserved.

   == Stacked

   A description list with marker uses a run-in layout by default.
   In other words, the subject appears on the same line as the description, separated by the subject stop and a space.
   To make the subject appear above the description, like in a normal description list, add the `stack` role to the list.
   In this case, the stop character is only added if specified explicitly.

   ----
   [unordered.stack]
   boolean:: use true and false, not 1 and 0 or T and F
   number:: use Arabic numerals without punctuation (other than the decimal point to make a floating point number)
   enumerated value:: use only one of the allowed values, respecting case
   ----

   Here's how this syntax will appear, where supported:

   ====
   * *boolean* +
   use true and false, not 1 and 0 or T and F
   * *number* +
   use Arabic numerals without punctuation (other than the decimal point in a floating point number)
   * *enumerated value* +
   use only one of the allowed values, respecting case
   ====

   WARNING: We may decide to replace the `stack` role with the `stacked` option (i.e., `%stacked`).
   Alternately, we may decide to reverse the default behavior and make a description list with marker stacked by default, with `run-in` as an option (i.e., `%run-in`).
   These adjustments will be made when this feature is standardized.

   == Alternatives

   As an alternative to using a description list with marker, you can use a normal unordered or ordered list and format the subject and stop character manually.

   ----
   * *boolean:* use true and false, not 1 and 0 or T and F
   * *number:* use Arabic numerals without punctuation (other than the decimal point in a floating point number)
   * *enumerated value:* use only one of the allowed values, respecting case
   ----

   This syntax gives you maximum portability in the short-term.

   Although lacking proper semantics, the other way to achieve the same result is to nest a single-item description list inside an otherwise empty list item.

   ----
   * {empty}
   boolean:: use true and false, not 1 and 0 or T and F
   * {empty}
   number:: use Arabic numerals without punctuation (other than the decimal point in a floating point number)
   * {empty}
   enumerated value:: use only one of the allowed values, respecting case
   ----


/docs/modules/lists/pages/description.adoc
==========================================

.. code-block: asciidoc

   = Description Lists
   :keywords: dlist, definition list, labeled list

   A description list (often abbreviated as dlist in AsciiDoc) is an association list that consists of one or more terms (or sets of terms) that each have a description.
   This list type is useful when you have a list of terms that you want to emphasize and describe with text or other supporting content.

   NOTE: You may know this list variation by the antiquated term _definition list_.
   The preferred term is now _description list_, which matches the terminology used by the https://html.spec.whatwg.org/multipage/grouping-content.html#the-dl-element[HTML specification^].

   == Anatomy

   A description list item marks the beginning of a description list.
   Each item in a description list consists of:

   * one or more terms, each followed by a term delimiter (typically a double colon, `::`, unless the list is nested)
   * one space or newline character
   * the description in the form of text, attached blocks, or both

   If a term has an anchor, the anchor must be defined at the start of the same line as the term.

   The first term defines which term delimiter is used for the description list.
   The terms for the remaining entries at that level must use the same delimiter.

   The valid set of term delimiters is fixed.
   When the term delimiter is changed, that term begins a new, nested description list (similar to how ordered and unordered lists work).
   The available term delimiters you can use for this purpose are as follows:

   * `::`
   * `:::`
   * `::::`
   * `;;`

   There's no direct correlation between the number of characters in the delimiter and the nesting level.
   Each time you change delimiters (selected from this set), it introduces a new level of nesting.
   This is how list depth is implied in a language with a left-aligned syntax.
   It's customary to use the delimiters in the order shown above to provide a hint that the list is nested at a certain level.

   == Basic description list

   Here's an example of a description list that identifies parts of a computer:

   ----
   include::example$description.adoc[tag=base]
   ----

   By default, the content of each item is displayed below the label when rendered.
   Here's a preview of how this list is rendered:

   .A basic description list
   ====
   include::example$description.adoc[tag=base]
   ====

   == Mixing lists

   The content of a description list can be any AsciiDoc element.
   For instance, we could rewrite the grocery list from above so that each aisle is a label rather than a parent outline list item.

   ----
   include::example$description.adoc[tag=base-mix]
   ----

   ====
   include::example$description.adoc[tag=base-mix]
   ====

   Description lists are quite lenient about whitespace, so you can spread the items out and even indent the content if that makes it more readable for you:

   ----
   include::example$description.adoc[tag=base-mix-alt]
   ----

   == Nested description list

   [#three-hybrid]
   Finally, you can mix and match the three list types within a single hybrid list.
   The AsciiDoc syntax tries hard to infer the relationships between the items that are most intuitive to us humans.

   Here's a list that mixes description, ordered, and unordered lists.
   Notice how the term delimiter is changed from `::` to `:::` to create a nested description list.

   ----
   include::example$description.adoc[tag=3-mix]
   ----

   Here's how the list is rendered:

   .A hybrid list
   ====
   include::example$description.adoc[tag=3-mix]
   ====

   You can include more xref:continuation.adoc[complex content in a list item] as well.


/docs/modules/lists/pages/horizontal.adoc
=========================================

.. code-block: asciidoc

   = Horizontal Description List

   If you want the first term and description of an item to start on the same line (i.e., horizontal arrangement), add the horizontal style to the description list.

   [.wrap]
   ----
   include::example$description.adoc[tag=base-horz]
   ----

   ====
   include::example$description.adoc[tag=base-horz]
   ====

   By default, the term and description columns will be sized automatically.
   If the content is not arranged in the way that you want, you need to adjust the width distribution.

   You can control the width of the term and description columns using the (improperly named) `labelwidth` and `itemwidth` attributes on the list, respectively.
   Both attributes are optional.
   The value of each attribute is a number from 0 to 100 (a unitless percentage).
   If both attributes are specified, their values should add up to 100.

   [.wrap]
   ----
   include::example$description.adoc[tag=widths]
   ----

   ====
   include::example$description.adoc[tag=widths]
   ====

   When converting to HTML, you can assign a role to the description list instead to control the column widths using CSS.


/docs/modules/lists/pages/qanda.adoc
====================================

.. code-block: asciidoc

   = Question and Answer Lists
   :keywords: qanda, Q & A, Q and A

   A question and answer (qanda) list is a special form of a description list that renders as an ordered list.
   The entries are numbered using Arabic numerals starting at 1.

   == Question and answer list syntax

   Each entry in the description list represents one question and answer combination.
   The term or terms are used as the question and the description is used as the answer.
   If an entry has multiple questions, each question is rendered on a new line.

   ----
   include::example$description.adoc[tag=qa]
   ----

   .Rendered qanda list
   ====
   include::example$description.adoc[tag=qa]
   ====


/docs/modules/lists/examples/checklist.adoc
===========================================

.. code-block: asciidoc

   // tag::check[]
   * [*] checked
   * [x] also checked
   * [ ] not checked
   * normal list item
   // end::check[]

   // tag::check-int[]
   [%interactive]
   * [*] checked
   * [x] also checked
   * [ ] not checked
   * normal list item
   // end::check-int[]

   // tag::check-icon[]
   * [*] checked
   * [x] also checked
   * [ ] not checked
   * normal list item
   // end::check-icon[]


/docs/modules/lists/examples/complex.adoc
=========================================

.. code-block: asciidoc

   // tag::indent[]
   * The document header in AsciiDoc is optional.
   If present, it must start with a document title.

   * Optional author and revision information lines
   immediately follow the document title.

   * The document header must be separated from
     the remainder of the document by one or more
     empty lines and it cannot contain empty lines.
   // end::indent[]

   // tag::cont[]
   * The header in AsciiDoc must start with a document title.
   +
   The header is optional.
   // end::cont[]

   // tag::complex[]
   * The header in AsciiDoc must start with a document title.
   +
   ----
   = Document Title
   ----
   +
   Keep in mind that the header is optional.

   * Optional author and revision information lines immediately follow the document title.
   +
   ----
   = Document Title
   Doc Writer <doc.writer@asciidoc.org>
   v1.0, 2022-01-01
   ----
   // end::complex[]

   // tag::b-complex[]
   * Every list item has at least one paragraph of content,
     which may be wrapped, even using a hanging indent.
   +
   Additional paragraphs or blocks are adjoined by putting
   a list continuation on a line adjacent to both blocks.
   +
   list continuation:: a plus sign (`{plus}`) on a line by itself

   * A literal paragraph does not require a list continuation.

    $ cd projects/my-book

   * AsciiDoc lists may contain any complex content.
   +
   |===
   |Column 1, Header Row |Column 2, Header Row

   |Column 1, Row 1
   |Column 2, Row 1
   |===
   // end::b-complex[]

   // tag::complex-o[]
   * The header in AsciiDoc must start with a document title.
   +
   --
   Here's an example of a document title:

   ----
   = Document Title
   ----

   NOTE: The header is optional.
   --
   // end::complex-o[]

   // tag::complex-only[]
   . {empty}
   +
   ----
   print("one")
   ----
   . {empty}
   +
   ----
   print("one")
   ----
   // end::complex-only[]

   // tag::complex-parent[]
   * parent list item
   ** child list item

   +
   paragraph attached to parent list item
   // end::complex-parent[]

   // tag::complex-grandparent[]
   * grandparent list item
   ** parent list item
   *** child list item


   +
   paragraph attached to grandparent list item
   // end::complex-grandparent[]

   // tag::complex-enclosed[]
   * grandparent list item
   +
   --
   ** parent list item
   *** child list item
   --
   +
   paragraph attached to grandparent list item
   // end::complex-enclosed[]


/docs/modules/lists/examples/description.adoc
=============================================

.. code-block: asciidoc

   ////
   .Description list
   [source]
   ----
   CPU:: <1>
   The brain of the computer. <2>
   <3>
   Hard drive::
   Permanent storage for operating system and/or user files.
   ----
   <1> Follow each term with two colons.
   <2> Enter the definition text on a new line below the term.
   <3> Enter a single empty line between each term/definition pair.

   ////

   // tag::base[]
   CPU:: The brain of the computer.
   Hard drive:: Permanent storage for operating system and/or user files.
   RAM:: Temporarily stores information the CPU uses during operation.
   Keyboard:: Used to enter text or control items on the screen.
   Mouse:: Used to point to and select items on your computer screen.
   Monitor:: Displays information in visual form using text and graphics.
   // end::base[]

   // tag::base-horz[]
   [horizontal]
   CPU:: The brain of the computer.
   Hard drive:: Permanent storage for operating system and/or user files.
   RAM:: Temporarily stores information the CPU uses during operation.
   // end::base-horz[]

   // tag::widths[]
   [horizontal,labelwidth=25,itemwidth=75]
   A short term:: The term for this item likely fits inside the column's width.
   A long term that wraps across multiple lines:: The term for this item wraps since the width of the term column is restricted using the `labelwidth` attribute.
   // end::widths[]

   // tag::qr-base[]
   First term:: The description can be placed on the same line
   as the term.
   Second term::
   Description of the second term.
   The description can also start on its own line.
   // end::qr-base[]

   // tag::base-mix[]
   Dairy::
   * Milk
   * Eggs
   Bakery::
   * Bread
   Produce::
   * Bananas
   // end::base-mix[]

   // tag::base-mix-alt[]
   Dairy::

     * Milk
     * Eggs

   Bakery::

     * Bread

   Produce::

     * Bananas
   // end::base-mix-alt[]

   // tag::3-mix[]
   Operating Systems::
     Linux:::
       . Fedora
         * Desktop
       . Ubuntu
         * Desktop
         * Server
     BSD:::
       . FreeBSD
       . NetBSD

   Cloud Providers::
     PaaS:::
       . OpenShift
       . CloudBees
     IaaS:::
       . Amazon EC2
       . Rackspace
   // end::3-mix[]

   // tag::qa[]
   [qanda]
   What is the answer?::
   This is the answer.

   Are cameras allowed?::
   Are backpacks allowed?::
   No.
   // end::qa[]


/docs/modules/lists/examples/ordered.adoc
=========================================

.. code-block: asciidoc

   // tag::base[]
   . Protons
   . Electrons
   . Neutrons
   // end::base[]

   // tag::base-start[]
   [start=4]
   . Step four
   . Step five
   . Step six
   // end::base-start[]

   // tag::base-num[]
   1. Protons
   2. Electrons
   3. Neutrons
   // end::base-num[]

   // tag::base-num-start[]
   4. Step four
   5. Step five
   6. Step six
   // end::base-num-start[]

   // tag::base-t[]
   .Parts of an atom
   . Protons
   . Electrons
   . Neutrons
   // end::base-t[]

   // tag::reversed[]
   [%reversed]
   .Parts of an atom
   . Protons
   . Electrons
   . Neutrons
   // end::reversed[]

   // tag::nest[]
   . Step 1
   . Step 2
   .. Step 2a
   .. Step 2b
   . Step 3
   // end::nest[]

   // tag::max[]
   . Level 1 list item
   .. Level 2 list item
   ... Level 3 list item
   .... Level 4 list item
   ..... Level 5 list item
   . Level 1 list item
   // end::max[]

   // tag::num[]
   [lowerroman,start=5]
   . Five
   . Six
   [loweralpha]
   .. a
   .. b
   .. c
   . Seven
   // end::num[]

   // tag::mix[]
   . Linux
   * Fedora
   * Ubuntu
   * Slackware
   . BSD
   * FreeBSD
   * NetBSD
   // end::mix[]

   // tag::mix-alt[]
   . Linux

     * Fedora
     * Ubuntu
     * Slackware

   . BSD

     * FreeBSD
     * NetBSD
   // end::mix-alt[]


/docs/modules/lists/examples/unordered.adoc
===========================================

.. code-block: asciidoc

   // tag::qr-base[]
   * List item
   ** Nested list item
   *** Deeper nested list item
   * List item
    ** Another nested list item
   * List item
   // end::qr-base[]

   // tag::base[]
   * Edgar Allan Poe
   * Sheri S. Tepper
   * Bill Bryson
   // end::base[]

   // tag::base-t[]
   .Kizmet's Favorite Authors
   * Edgar Allan Poe
   * Sheri S. Tepper
   * Bill Bryson
   // end::base-t[]

   // tag::base-alt[]
   - Edgar Allan Poe
   - Sheri S. Tepper
   - Bill Bryson
   // end::base-alt[]

   // tag::divide[]
   * Apples
   * Oranges

   //-

   * Walnuts
   * Almonds
   // end::divide[]

   // tag::divide-alt[]
   * Apples
   * Oranges

   []
   . Wash
   . Slice
   // end::divide-alt[]

   // tag::nest[]
   .Possible DefOps manual locations
   * West wood maze
   ** Maze heart
   *** Reflection pool
   ** Secret exit
   * Untracked file in git repository
   // end::nest[]

   // tag::max[]
   * Level 1 list item
   ** Level 2 list item
   *** Level 3 list item
   **** Level 4 list item
   ***** Level 5 list item
   ****** etc.
   * Level 1 list item
   // end::max[]

   // tag::nest-alt[]
   * Level 1 list item
   - Level 2 list item
   * Level 1 list item
   // end::nest-alt[]

   // tag::markers[]
   * disc
   ** circle
   *** square
   // end::markers[]

   // tag::square[]
   [square]
   * one
   * two
   * three
   // end::square[]

   // tag::marker-lock[]
   [circle]
   * circles
   ** all
   *** the
   **** way
   ***** down
   // end::marker-lock[]

   // tag::marker-override[]
   [square]
   * squares
   ** up top
   [circle]
   *** circles
   **** down below
   // end::marker-override[]


/docs/modules/macros/nav.adoc
=============================

.. code-block: asciidoc

   * xref:links.adoc[]
   ** xref:autolinks.adoc[]
   ** xref:url-macro.adoc[]
   ** xref:link-macro.adoc[]
   ** xref:complex-urls.adoc[]
   ** xref:link-macro-attribute-parsing.adoc[]
   ** xref:mailto-macro.adoc[]
   ** xref:link-macro-ref.adoc[]

   []
   * xref:xref.adoc[]
   ** xref:inter-document-xref.adoc[]
   ** xref:xref-text-and-style.adoc[]
   ** xref:xref-validate.adoc[]

   []
   * xref:footnote.adoc[]

   []
   * xref:images.adoc[]
   ** xref:images-directory.adoc[]
   ** xref:image-url.adoc[]
   ** xref:image-position.adoc[]
   ** xref:image-link.adoc[]
   ** xref:image-size.adoc[]
   ** xref:image-format.adoc[]
   ** xref:image-svg.adoc[]
   ** xref:image-ref.adoc[]

   []
   * xref:audio-and-video.adoc[]

   []
   * xref:icons.adoc[]
   ** xref:icons-image.adoc[]
   ** xref:icons-font.adoc[]
   ** xref:icon-macro.adoc[]

   []
   * xref:keyboard-macro.adoc[]

   []
   * xref:ui-macros.adoc[]


/docs/modules/macros/pages/links.adoc
=====================================

.. code-block: asciidoc

   = Links
   :url-url-def: https://en.wikipedia.org/wiki/URL

   AsciiDoc offers a variety of ways of creating links (aka hyperlinks) to other addressable resources.
   The pages in this section document how to add and customize links in AsciiDoc.

   == URLs and links

   The [.term]*target* of a link is a {url-url-def}[Uniform Resource Locator^] (URL), otherwise known as a web address.
   The text the reader clicks to navigate to that target is referred to as the [.term]*link text*.

   NOTE: You may sometimes see the term URI used in place of a URL.
   Although the URI is more technically correct in some cases, URL is the accepted term.

   The URL is the web address of a unique resource.
   A URL can either be absolute or relative.
   An absolute URL consists of a scheme, an authority (i.e., domain name), a path with an optional file extension, and metadata in the form of a query string and fragment (e.g., `\https://example.org/asciidoc/links.html?source=home`).
   You may recognize an absolute URL as what you type in the location bar of a web browser, such as the one for this page.
   A relative URL is the portion of an absolute URL that starts after either the root path or a subpath (e.g., `guides/getting-started.html`).

   Since an absolute URL has a distinct, recognizable syntax, an AsciiDoc processor will detect URLs (unless escaped) and automatically convert them to links wherever the macros substitution step is applied.
   This also works for bare email addresses.
   You can learn more about this behavior in xref:autolinks.adoc[].
   To make a link to a relative URL, you must be specify it explicitly as the target of a xref:link-macro.adoc[link macro].

   == Link-related macros

   Instead of showing the bare URL or email address as the link text, you may want to customize that text.
   Or perhaps you want to apply attributes to the link, such as a role.
   To do so, you'd use either the xref:url-macro.adoc[URL macro] or, if you're linking to xref:complex-urls.adoc[a complex URL], the more decisive xref:link-macro.adoc[link macro].
   (You can also use the xref:link-macro.adoc[link macro] to make a link to an addressable resource using a relative URL or a URL that is not otherwise recognized as an absolute URL).

   When linking to an email address, you can use the specialized xref:mailto-macro.adoc[mailto macro] to enhance the link with prepopulated subject and body text.

   == Encode reserved characters

   If the URL contains reserved characters, such as double quote (`"`), space, or an unconstrained AsciiDoc formatting mark, you'll need to encode these characters using URI encoding.
   For example, a double quote is encoded as `%22`.
   An underscore is encoded as `%5F`.
   If you do not encode these characters, the URL may be mangled or cause the processor to fail.

   Let's assume we are creating a URL that contains a query string parameter named `q` that contains reserved characters:

   ....
   https://example.org?q=label:"Requires docs"
   ....

   To encode a URL, open the development tools in your browser and pass the URL to the `encodeURI` function:

   [,js]
   ----
   encodeURI('http://example.org?q=label:"Requires docs"')
   ----

   Here's the encoded URL that we'd use in the AsciiDoc document:

   ....
   https://example.org?q=label:%22Requires%20docs%22
   ....

   Depending on the capabilities of the web application, the space character can be encoded as `+` instead of `%20`.

   [#hide-uri-scheme]
   == Hide the URL scheme

   If the link text is a bare URL (aka URI), whether that link was created automatically or using a link-related macro, you can configure the AsciiDoc processor to hide the scheme (e.g., _https://_).
   Hiding the scheme can make the URL more readable--perhaps even recognizable--to a person less familiar with technical nomenclature.

   To configure the AsciiDoc processor to display the linked URL without the scheme part, set the `hide-uri-scheme` attribute in the header of the AsciiDoc document.

   [source]
   ----
   = Document Title
   :hide-uri-scheme: <.>

   https://asciidoctor.org
   ----
   <.> Note the use of `uri` instead of `url` in the attribute name.

   When the `hide-uri-scheme` attribute is set, the above URL will be displayed to the reader as follows:

   ====
   https://asciidoctor.org[asciidoctor.org]
   ====

   Note the absence of _https://_ in the URL.
   The prefix will still be present in the link target.

   ////
   = URLs and Links

   A Uniform Resource Link (URL) represents the location of a resource on the web.
   Typical URLs contain a scheme, domain name, file name, and extension.

   #move image#
   //image::url.png[]

   // tag::basic[]
   AsciiDoc recognizes the following common schemes without the help of any markup.

   [#schemes]
   * http
   * https
   * ftp
   * irc
   * mailto
   * \email@email.com

   You can think of these schemas as implicit macro names (with the exception of a bare email address).
   Since the URL in the example below begins with a protocol (in this case _https_ followed by a colon), the AsciiDoc processor will automatically turn it into a hyperlink.
   We call this a URL macro.

   [source]
   ----
   include::example$url.adoc[tag=base-co]
   ----
   <.> The trailing period will not get caught up in the link.

   To prevent automatic linking of an URL, prepend it with a backslash (`\`).

   [source]
   ----
   Once launched, the site will be available at \https://example.org.
   ----

   == Link text

   To attach a URL to text, enclose the text in square brackets at the end of the URL, thus making it a URL macro.

   [source]
   ----
   include::example$url.adoc[tag=irc]
   ----
   // end::basic[]

   Additionally, you can format the link text.

   [source]
   ----
   include::example$url.adoc[tag=text]
   ----

   .Rendered URLs
   ====
   include::example$url.adoc[tag=base]
   ====

   You may also want to append empty square brackets to force the URL to be parsed when it would not normally be recognized, such as if it's enclosed in double quotes:

   [source]
   ----
   Type "https://asciidoctor.org[]" into the location bar of your browser.
   ----

   == The link macro

   // tag::link[]
   When a URL does not start with one of the <<schemes,common schemes>>, or the URL is not surrounded by word boundaries, you must use the `link` macro.
   The `link` macro is a stronger version of a URI macro, which you can think of like an unconstrained macro.
   The URL is preceded by `link:` and followed by square brackets.
   The square brackets may include optional link text.
   The URL is used for the text of the link if link text is not specified.
   Attributes inside the square brackets are parsed automatically if an equal sign is found after a comma (e.g., `[link text,window=_blank]`).

   .Anatomy of a link macro
   [source]
   ----
   link:url[optional link text, optional target attribute, optional role attribute]
   ----

   Let's consider a case where we need to use the link macro (instead of just a URI macro) to expand a link when it's not adjacent to a word boundary (i.e., unconstrained).

   [source]
   ----
   include::example$url.adoc[tag=unconstrained]
   ----

   ====
   include::example$url.adoc[tag=unconstrained]
   ====

   If we didn't use the `link:` prefix in this case, the URL macro would not be detected by the parser.
   // end::link[]

   [#complex-urls]
   .Troubleshooting Complex URLs
   ****
   A URL may not display correctly when it contains characters such as underscores (`+_+`) or carets (`+^`).
   include::partial$ts-url-format.adoc[tag=sb]
   ****

   Next, we'll add a target and role to a link macro.

   // tag::attr[]
   [#link-macro-attributes]
   === Link macro attributes

   AsciiDoc didn't used to recognize attributes in the link macro by default.
   This is no longer the case.
   The AsciiDoc processor automatically parses attributes in the link macro, but only under certain contains (introduced in Asciidoctor 1.5.7).
   If the AsciiDoc processor detects an equal sign after the first comma, it must parse the attributes in the link macro.
   For example, when attribute parsing is enabled, you can specify the name of the target window using the `window` attribute.

   [source]
   ----
   include::example$url.adoc[tag=linkattrs-h]
   ----

   ====
   include::example$url.adoc[tag=linkattrs]
   ====

   Since `_blank` is the most common window name, we've introduced shorthand for it.
   Just end the link text with a caret (`+^+`):

   [source]
   ----
   include::example$url.adoc[tag=linkattrs-s]
   ----

   CAUTION: If you use the caret syntax more than once in a single paragraph, you may need to escape the first occurrence with a backslash.

   You can also add a role (i.e., CSS class) to the link using an attribute declaration (which implicitly enables attribute parsing).

   [source]
   ----
   include::example$url.adoc[tag=css]
   ----

   ====
   include::example$url.adoc[tag=css]
   ====

   TIP: Links with attributes (including the subject and body segments on mailto links) weren't always supported in AsciiDoc.
   Now that they are, you must surround the link text in double quotes if it contains a comma.
   // end::attr[]
   ////


/docs/modules/macros/pages/autolinks.adoc
=========================================

.. code-block: asciidoc

   = Autolinks

   The AsciiDoc processor will detect common URLs (unless escaped) wherever the macros substitution step is applied and automatically convert them into links.
   This page documents the recognized URL schemes and how to disable this behavior on a case-by-case basis.

   == URL schemes for autolinks

   AsciiDoc recognizes the following common URL schemes without the help of any markup:

   [#schemes]
   * http
   * https
   * ftp
   * irc
   * mailto

   The URL in the following example begins with a recognized protocol (i.e., https), so the AsciiDoc processor will automatically turn it into a hyperlink.

   [source]
   ----
   include::example$url.adoc[tag=base-co]
   ----
   <.> The trailing period will not get caught up in the link.

   The URL is also used as the link text.
   If you want to use xref:url-macro.adoc#link-text[custom link text], you must use the xref:url-macro.adoc[URL macro].

   In plain text documents, a bare URL is often enclosed in angle brackets.

   [source]
   ----
   You'll often see <https://example.org> used in examples.
   ----

   To accommodate this convention, the AsciiDoc processor will still recognize the URL as an autolink, but will discard the angle brackets in the output (as they are not deemed significant).

   Any link created from a bare URL (i.e., an autolink) automatically gets assigned the "bare" role.
   This allows the theming system (e.g., CSS) to recognize autolinks (and other bare URLs) and style them distinctly.

   == Email autolinks

   AsciiDoc also detects and autolinks most email addresses.

   [source]
   ----
   include::example$url.adoc[tag=bare-email]
   ----

   In order for this to work, the domain suffix must be between 2 and 5 characters (e.g., .com) and only common symbols like period (`.`), hyphen (`-`), and plus (`+`) are permitted.
   For email address which do not conform to these restriction, you can use the xref:mailto-macro.adoc[email macro].

   == Escaping URLs and email addresses

   To prevent automatic linking of a URL or email address, you can add a single backslash (`\`) in front of it.

   [source]
   ----
   Once launched, the site will be available at \https://example.org.

   If you cannot access the site, email \help@example.org for assistance.
   ----

   The backslash in front of the URL and email address will not appear in the output.
   The URL and email address will both be shown in plain text.

   Since autolinks are a feature of the xref:subs:macros.adoc[macros substitution], another way to prevent automatic linking of a URL or email address is to turn off the macros substitution using xref:subs:apply-subs-to-blocks.adoc#incremental[incremental subs].

   [source]
   ----
   [subs=-macros]
   Once launched, the site will be available at https://example.org.
   ----

   The `subs` attribute is only recognized on a leaf block, such as a paragraph.


/docs/modules/macros/pages/url-macro.adoc
=========================================

.. code-block: asciidoc

   = URL Macro
   // The term URL is now preferred over the term URI. See https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#URLs_and_URNs

   If you're familiar with the AsciiDoc syntax, you may notice that a URL almost looks like an inline macro.
   All that's missing is the pair of the trailing square brackets.
   In fact, if you add them, then a URL is treated as an inline macro.
   We call this a URL macro.

   This page introduces the URL macro, when you would want to use it, and how it differs from the link macro.

   == From URL to macro

   To transform a URL into a macro, add a pair of square brackets to the end of the URL.
   For example:

   [source]
   ----
   https://asciidoctor.org[]
   ----

   Since no text is specified, this macro behaves the same as an autolink.
   In this case, the link automatically gets assigned the "`bare`" role.

   When the URL is followed by a pair of square brackets, the URL scheme dually serves as the macro name.
   AsciiDoc recognizes all the xref:autolinks.adoc#schemes[URL schemes] for autolinks as macro names (e.g., `https`).
   That's why we say "`URL macros`" and not just "`URL macro`".
   It's a family of macros.
   With the exception of the xref:mailto-macro.adoc[mailto macro], all the URL macros behave the same, and also behave the same as the xref:link-macro.adoc[link macro].

   So why might you upgrade from a URL to a URL macro?
   One reason is to force the URL to be parsed when it would not normally be recognized, such as if it's enclosed in double quotes:

   [source]
   ----
   Type "https://asciidoctor.org[]" into the location bar of your browser.
   ----

   The more typical reason, however, is to specify custom link text.

   [#link-text]
   == Custom link text

   Instead of displaying the URL, you can configure the link to display custom text.
   When the reader clicks on the text, they are directed to the target of the link, the URL.

   To customize the text of the link, insert that text between the square brackets of the URL macro.

   [source]
   ----
   include::example$url.adoc[tag=irc]
   ----

   Since the text is subject to normal substitutions, you can apply formatting to it.

   [source]
   ----
   include::example$url.adoc[tag=text]
   ----

   == Link attributes

   You can use the attribute list to further customize the link, such as to make it target a new window and apply a role to it.

   [source]
   ----
   include::example$url.adoc[tag=css]
   ----

   To understand how the text between the square brackets of a URL macro is parsed, see xref:link-macro-attribute-parsing.adoc[attribute parsing].


/docs/modules/macros/pages/link-macro.adoc
==========================================

.. code-block: asciidoc

   = Link Macro

   The link macro is the most explicit method of making a link in AsciiDoc.
   It's only necessary when the behavior of autolinks and URL macros proves insufficient.
   This page covers the anatomy of the link macro, when it's required, and how to use it.

   == Anatomy

   The link macro is an inline macro.
   Like other inline macros, its syntax follows the familiar pattern of the macro name and target separated by a colon followed by an attribute list enclosed in square brackets.

   [source]
   ----
   link:<target>[<attrlist>]
   ----

   The `<target>` becomes the target of the link.
   the `<attrlist>` is the link text unless a named attribute is detected.
   See xref:link-macro-attribute-parsing.adoc[link macro attribute list] to learn how the `<attrlist>` is parsed.

   Like all inline macros, the link macro can be escaped using a leading backslash (`\`).

   == Link to a relative file

   If you want to link to a non-AsciiDoc file that is relative to the current document, use the `link` macro in front of the file name.

   TIP: To link to a relative AsciiDoc file, use the xref:inter-document-xref.adoc[xref macro] instead.

   Here's an example that demonstrates how to use the link macro to link to a relative file path:

   [source]
   ----
   include::example$url.adoc[tag=link]
   ----

   The AsciiDoc processor will create a link to _report.pdf_ with the text "Get Report", even though the target is not a URL.

   If the target file is an HTML file, and you want to link directly to an anchor within that document, append a hash (`#`) followed by the name of the anchor after the file name:

   [source]
   ----
   include::example$url.adoc[tag=hash]
   ----

   Note that when linking to a relative file, even if it's an HTML file, the link text is required.

   // FIXME: this feels like it needs subsections
   == When to use the link macro

   Since AsciiDoc provides autolinks and URL macros, the link macro is not often needed.
   Here are the few cases when the link macro is necessary:

   * The target is not a URL (e.g., a relative path)
   * The target must be enclosed in a passthrough to escape characters with special meaning
   * The URL macro is not bounded by spaces, brackets, or quotes.
   * The target is a URL that does not start with a scheme recognized by AsciiDoc

   The most common situation is when the target is not a URL.
   For example, you would use the link macro to create a link to a relative path.

   [source]
   ----
   link:report.pdf[Get Report]
   ----

   TIP: If the relative path is another AsciiDoc file, you should use the xref:inter-document-xref.adoc[xref macro] instead.

   You may also discover that spaces are not permitted in the target of the link macro, at least not in the AsciiDoc source.
   The space character in the target prevents the parser from recognizing the macro.
   So it's necessary to escape or encode it.
   Here are three ways to do it:

   .Escape a space using a passthrough
   [source]
   ----
   link:pass:[My Documents/report.pdf][Get Report]
   ----

   .Encode a space using a character reference (\&#32;)
   [source]
   ----
   link:My&#32;Documents/report.pdf[Get Report]
   ----

   .Encode a space using URL encoding (%20)
   [source]
   ----
   link:My%20Documents/report.pdf[Get Report]
   ----

   Escaping or encoding the space ensures that the space does not prevent the link macro from being recognized.
   The downside of using URL encoding is that it will be visible in the automatic link text since the browser does not decode it in that location.
   In this case, the character reference is preferable.

   There are other characters that are not permitted in a link target as well, such as a colon.
   You can escape those using the same technique.

   .Encode a colon using URL encoding (%3A)
   [source]
   ----
   link:Avengers%3A%20Endgame.html[]
   ----

   Another common case is when you need to use a passthrough to escape characters with special meaning.
   In this case, the AsciiDoc processor will not recognize the target as a URL, and thus the link macro is necessary.
   An example is when the URL contains repeating underscore characters.

   [source]
   ----
   link:++https://example.org/now_this__link_works.html++[]
   ----

   A similar situation is when the URL macro is not bounded by spaces, brackets, or quotes.
   In this case, the link macro prefix is required to increase the precedence so that the macro can be recognized.

   [source]
   ----
   |link:https://asciidoctor.org[]|
   ----

   Finally, if the target is not recognized as a URL by AsciiDoc, the link macro is necessary.
   For example, you might use the link macro to make a file link.

   [source]
   ----
   link:file:///home/username[Your files]
   ----

   == Final word

   The general rule of thumb is that you should only put the `link:` macro prefix in front of the target if the target is _not_ a URL.
   Otherwise, the prefix just adds verbosity.


/docs/modules/macros/pages/complex-urls.adoc
============================================

.. code-block: asciidoc

   = Troubleshooting Complex URLs

   A URL may not display correctly when it contains characters such as underscores (`+_+`) or carets (`+^+`).
   include::partial$ts-url-format.adoc[tag=sb]


/docs/modules/macros/pages/footnote.adoc
========================================

.. code-block: asciidoc

   = Footnotes

   AsciiDoc provides the `footnote` macro for adding footnotes to your document.
   A footnote is a reference to an item in a footnote list.
   The footnote is defined in AsciiDoc at the location of the reference, but the text is extracted to an item in the footnote list.
   You can refer to the same footnote in multiple locations by assigning an ID to the first occurrence and referencing that ID in subsequent occurrences.

   NOTE: All AsciiDoc processors, including Asciidoctor, currently implement footnotes as endnotes.
   The placement and numbering of footnotes can be customized using a custom converter.

   == Footnote macro syntax

   You can insert footnotes into your document using the footnote macro.
   The text of the footnote is defined between the square brackets of the footnote macro (`+footnote:[text]+`).
   The footnote macro accepts an optional ID using the target of the macro (`+footnote:id[text]+`).
   Specifying an ID allows you to refer to that same footnote from multiple locations in the document.
   To make a reference to a previously defined footnote, you specify the ID in the target without specifying text (`+footnote:id[]+`).

   .Footnote syntax
   [source#ex-footnote]
   ----
   include::example$footnote.adoc[tag=base-c]
   ----
   <.> Insert the footnote macro directly after any punctuation.
   Note that the footnote macro only uses a single colon (`:`).
   <.> Insert the footnote's content within the square brackets (`+[]+`).
   The text may span several lines.
   <.> If you plan to reuse a footnote, specify a unique ID in the target position.
   <.> To reference an existing footnote, you only need to specify the ID of the footnote in the target slot.
   The text between the square brackets should be empty.
   If both the ID and text are specified, and the ID has already been defined by an earlier footnote, the text is ignored.

   TIP: If you find that having to put the footnote macro directly adjacent to a word makes it difficult to read, you can insert an attribute reference in between that resolves to an empty string (e.g., `+word{empty}footnote:[text]+`).

   The footnotes are numbered consecutively throughout the article.

   The results of <<ex-footnote>> are displayed below.

   [.unstyled]
   |===
   a|
   include::example$footnote.adoc[tag=base-x]
   |===

   Just like normal paragraph text, you can use text formatting markup in the text of the footnote.

   == Externalizing a footnote

   Since footnotes are defined using an inline macro, the footnote content must be inserted alongside the text it's annotating.
   This requirement can make the text harder to read.
   You can solve this problem by externalizing your footnotes using document attributes.

   When defining a document attribute that holds a footnote, you can name the document attributes whatever you want.
   A common practice is to name the attribute using the `fn-` prefix.
   The name of the attribute can be as verbose (`fn-disclaimer`) or concise (`fn-1`) as you prefer.

   Here's the previous example with the footnotes defined in document attributes and inserted using attribute references.

   .Externalized footnote
   [source]
   ----
   include::example$footnote.adoc[tag=externalized]
   ----

   Notice you still get the benefit of seeing where the footnote is placed without all the noise.
   And since the footnotes are now defined in the document header, they could be further externalized to an include file.

   This approach works since attribute references are expanded before footnotes are parsed.
   However, this technique does not work if you have text formatting markup in the text of the footnote (e.g., `+*bold*+`).
   That markup will not be interpreted.
   That's because the attributes substitution (which replaces attribute references) is applied _after_ the quotes substitution (which interprets text formatting markup).
   In order to use text formatting markup in the text of the footnote, you need to configure the substitutions on the value of the attribute entry using the `\pass:[]` macro.

   The following example demonstrates how to configure the substitutions applied to the text of an externalized footnote so that text formatting markup is honored.

   .Externalized footnote with text formatting
   [source]
   ----
   include::example$footnote.adoc[tag=externalized-format]
   ----

   The `c,q` target on the pass macro instructs the processor to apply the special characters substitution followed by the quotes substitution.
   That means the text formatting in the footnote text will already be applied when the footnote is inserted using an attribute reference.

   == Footnotes in headings

   Footnotes are *not officially supported in headings* (section titles and discrete headings) in pre-spec AsciiDoc.
   While the footnote gets parsed, there's no guarantee that it will work properly and may require workarounds.
   This limitation may be lifted once the AsciiDoc Language is defined by the specification.

   If you use a footnote in a heading, you'll likely find that the footnote index is wrong (either not incremented or out of order).
   That's because headings (section titles and discrete headings) get converted out of document order for the purpose of generating IDs, populating up cross references, and eagerly resolving attribute references.

   One way to resolve this problem is to assign an explicit ID and reftext to any heading that contains a footnote.
   For example:

   [source]
   ----
   See <<heading>>.

   [[heading,Heading]]
   == Headingfootnote:[This is a heading with a footnote]
   ----

   Assigning an explicit ID and reftext to a heading will prevent substitutions from being applied before the heading is rendered, hence allowing the footnote macros to be processed in document order.
   This workaround will also prevent the footnote number from reappearing in the text of an xref.
   However, you also have to avoid using any attribute references in the heading, as that also causes substitutions to be applied eagerly, which may result in the footnotes being processed out of document order.


/docs/modules/macros/pages/link-macro-attribute-parsing.adoc
============================================================

.. code-block: asciidoc

   = Link & URL Macro Attribute Parsing

   If named attributes are detected between the square brackets of a link or URL macro, that text is parsed as an attribute list.
   This page explains the conditions when this occurs and how to write the link text so it is recognized as a single positional attribute.

   == Link text alongside named attributes

   Normally, the whole text between the square brackets of a link macro is treated as the link text (i.e., the first positional attribute).

   [source]
   ----
   https://chat.asciidoc.org[Discuss AsciiDoc]
   ----

   However, if the text contains an equals sign (`=`), the text is parsed as an xref:attributes:element-attributes.adoc#attribute-list[attribute list].
   The exact rules for attribute list parsing and positional attributes are rather complex, and discussed on xref:attributes:positional-and-named-attributes.adoc[].
   To be sure the link text is recognized properly, you can apply these two simple checks:

   * contains no comma (`,`) or equals sign (`=`) or
   * enclosed in double quotes (`"`)

   There are several other situations in which text before the first comma may be recognized as the link text.
   Let's consider some examples.

   The following example shows a URL macro with custom link text alongside named attributes.

   [source]
   ----
   https://chat.asciidoc.org[Discuss AsciiDoc,role=resource,window=_blank]
   ----

   Let's consider a case where the link text contains a comma and the macro also has named attributes.
   In this case, you must enclose the link text in double quotes so that it is capture in its entirety as the first positional attribute.

   [source]
   ----
   https://example.org["Google, DuckDuckGo, Ecosia",role=teal]
   ----

   Similarly, if the link text contains an equals sign, you can enclose the link text in double quotes to ensure the parser recognizes it as the first positional attribute.

   [source]
   ----
   https://example.org["1=2 posits the problem of inequality"]
   ----

   If the quoted link text itself contains the quote character used to enclose the text, escape the quote character in the text by prefixing it with a backslash.

   [source]
   ----
   https://example.org["href=\"#top\" attribute"] creates link to top of page
   ----

   The double quote enclosure is not required in all cases when the link text contains an equals sign.
   Strictly speaking, the enclosure is only required when the text preceding the equals sign matches a valid attribute name.
   However, it's best to use the double quotes just to be safe.

   Finally, to use named attributes without specifying link text, you simply specify the named attributes.
   (In other words, you leave the first positional attribute empty, in which case the target will be used as the link text).

   [source]
   ----
   https://chat.asciidoc.org[role=button,window=_blank,opts=nofollow]
   ----

   The link macro recognizes all the common attributes (id, role, and opts).
   It also recognizes a handful of attributes that are specific to the link macro.

   == Target a separate window

   By default, the link produced by a link macro will target the current window.
   In other words, clicking on it will replace the current page.

   You can configure the link to open in a separate window (or tab) using the `window` attribute.

   [source]
   ----
   https://asciidoctor.org[Asciidoctor,window=read-later]
   ----

   In the HTML output, the value of the `window` attribute is assigned to the `target` attribute on the `<a>` tag (e.g., `target=read-later`).

   === Target a blank window

   Most of the time, you'll use the `window` attribute to target a blank window.
   Configuring a link that points to a location outside the current site is common practice to avoid disrupting the reader's flow.
   To enable this behavior, you set the `window` attribute to the special value `_blank`.

   [source]
   ----
   https://asciidoctor.org[Asciidoctor,window=_blank]
   ----

   In the HTML output, the value of the `window` attribute is assigned to the `target` attribute on the `<a>` tag (e.g., `target=_blank`) along with the <<noopener and nofollow,`rel=noopener` attribute>>.

   CAUTION: The underscore at the start of the value `_blank` can unexpectedly form a constrained formatting pair when another underscore appears somewhere else in the line or paragraph, thus causing the macro to break.
   You can avoid this problem either by escaping the underscore at the start of the value (i.e., `+window=\_blank+`) or by using the <<Blank window shorthand>> instead.

   === noopener and nofollow

   When the value of the `window` attribute is `_blank`, the AsciiDoc processor will also add the `rel="noopener"` attribute to the `<a>` element in the HTML output.
   Doing so is considered a security best practice.

   If the window is not `_blank`, you need to enable this behavior explicitly by setting the `noopener` option on the macro:

   [source]
   ----
   https://asciidoctor.org[Asciidoctor,window=read-later,opts=noopener]
   ----

   If you don't want the search indexer to follow the link, you can add the `nofollow` option to the macro.
   This option only works if the `noopener` option is set either implicitly or explicitly.

   [source]
   ----
   https://asciidoctor.org[Asciidoctor,window=_blank,opts=nofollow]
   ----

   or

   [source]
   ----
   https://asciidoctor.org[Asciidoctor,window=read-later,opts="noopener,nofollow"]
   ----

   To fine tune indexing within the site, you can specify the nofollow option even when the link does not target a separate window.

   === Blank window shorthand

   Configuring an external link to target a blank window is a common practice.
   Therefore, AsciiDoc provides a shorthand for it.

   In place of the named attribute `+window=_blank+`, you can insert a caret (`+^+`) at the end of the link text.
   This syntax has the added benefit of not having to worry about the underscore at the start of the value `+_blank+` unexpectedly forming a constrained formatting pair when another underscore appears in the same line or paragraph.

   [source]
   ----
   include::example$url.adoc[tag=linkattrs-s]
   ----

   CAUTION: In rare circumstances, if you use the caret syntax more than once in the same line or paragraph, you may need to escape the first occurrence with a backslash.
   However, the processor should try to avoid making this a requirement.

   If the attribute list has both link text in double quotes and named attributes, the caret should be placed at the end of the link text, but inside the double quotes.

   [source]
   ----
   https://example.org["Google, DuckDuckGo, Ecosia^",role=btn]
   ----

   If no named attributes are present, the link text should not be enclosed in quotes.

   [source]
   ----
   https://example.org[Google, DuckDuckGo, Ecosia^]
   ----


/docs/modules/macros/pages/mailto-macro.adoc
============================================

.. code-block: asciidoc

   = Mailto Macro
   :page-aliases: email-macro.adoc

   The mailto macro is a specialization of the xref:url-macro.adoc[URL macro] that adds support for defining an email link with text and augmenting it with additional metadata, such as a subject and body.

   == Link text and named attributes

   Using an attribute list, you can specify link text as well as named attributes such as `id` and `role`.
   Unlike other URL macros, you must add the `mailto:` prefix in front of the email address in order to append an attribute list.

   Here's an example of an email link with explicit link text.

   ----
   mailto:join@discuss.example.org[Subscribe]
   ----

   If you want to add a role to this link, you can do so by appending the `role` attribute after a comma.

   ----
   mailto:join@discuss.example.org[Subscribe,role=email]
   ----

   If the link text contains a comma, you must enclose the text in double quotes.
   Otherwise, the portion of the text that follows the comma will be interpreted as additional attribute list entries.

   ----
   mailto:join@discuss.example.org["Click, subscribe, and participate!"]
   ----

   To learn more about how the attributes are parsed, refer to xref:link-macro-attribute-parsing.adoc[attribute parsing].

   == Subject and body

   Like with other URL macros, the first positional attribute of the email macro is the link text.
   If a comma is present in the text, and the text is not enclosed in quotes, or the comma comes after the closing quote, the next positional attribute is treated as the subject line.

   For example, you can configure the email link to populate the subject line when the reader clicks the link as follows:

   ----
   mailto:join@discuss.example.org[Subscribe,Subscribe me]
   ----

   When the reader clicks the link, a conforming email client will fill in the subject line with "`Subscribe me`".

   If you want the body of the email to also be populated, specify the body text in the third positional argument.

   ----
   mailto:join@discuss.example.org[Subscribe,Subscribe me,I want to participate.]
   ----

   When the reader clicks the link, a conforming email client will fill in the body with "`I want to participate.`"

   If you want to reuse the email address as the link text, leave the first positional attribute empty.

   ----
   mailto:join@discuss.example.org[,Subscribe me,I want to participate.]
   ----

   If you only want to specify a subject, leave off the body.

   ----
   mailto:join@discuss.example.org[,Subscribe me]
   ----

   If either the subject or body contains a comma, that value must be enclosed in double quotes.

   ----
   mailto:join@discuss.example.org[Subscribe,"I want to participate, so please subscribe me"]
   ----

   To learn more about how the attributes are parsed, refer to xref:link-macro-attribute-parsing.adoc[attribute parsing].


/docs/modules/macros/pages/link-macro-ref.adoc
==============================================

.. code-block: asciidoc

   = Link, URL, and Mailto Macro Attributes Reference

   These attributes apply to the link, URL, and mailto (email) macros.

   [%autowidth]
   |===
   |Attribute |Value(s) |Example Syntax |Comments

   |`id`
   |Unique identifier for element in output
   |+https://asciidoctor.org[Home,id=home]+
   |

   |`role`
   |CSS classes available to inline elements
   |+https://chat.asciidoc.org[Discuss AsciiDoc,role=teal]+
   |

   |`title`
   |Description of link, often show as tooltip.
   |+https://asciidoctor.org[Home,title=Project home page]+
   |

   |`window`
   |any
   |+https://chat.asciidoc.org[Discuss AsciiDoc,window=_blank]+
   |The blank window target can also be specified using `^` at the end of the link text.

   |`window` +
   (shorthand)
   |`^`
   |+https://example.org[Google, DuckDuckGo, Ecosia^]+ +
   +https://chat.asciidoc.org[Discuss AsciiDoc^]+
   |

   |`opts`
   |Additional options for link creation.
   |+https://asciidoctor.org[Home,opts=nofollow]+
   |Option names include: `nofollow`, `noopener`
   |===


/docs/modules/macros/pages/xref.adoc
====================================

.. code-block: asciidoc

   = Cross References

   A link to another location within the current AsciiDoc document or in another AsciiDoc document is called a [.term]*cross reference* (also referred to as an [.term]*xref*).
   To create a cross reference, you first need to define the location where the reference will point (i.e., the anchor).
   Then, you need to use one of the forms of the inline xref macro to create a reference to that location.
   From there, you can customize the text of the reference in various ways.

   //don't change the id of this section unless you also change the example in the Internal cross references section (below this section)
   [#anchors]
   == Automatic anchors

   It's important to understand that many anchors are already defined for you.
   Using default settings, the AsciiDoc processor automatically creates an anchor for every section and discrete heading.
   It does so by generating an ID for that section (or discrete heading) and registering that ID in the references catalog.
   You can then use that ID as the target of a cross reference.

   For example, considering the following section.

   [source]
   ----
   = Section Title
   ----

   The AsciiDoc processor automatically assigns the ID `_section_title` to this section, which you can then use as the target of an xref to create a reference to this section.
   You can also customize how this ID is generated.
   Refer to xref:sections:auto-ids.adoc[] for more information about how an AsciiDoc processor generates these IDs.

   If you're referring to a content element other than a section, you'll need to define an anchor on that element explicitly.

   == Internal cross references

   In AsciiDoc, the shorthand xref is used to create a cross reference to an element (e.g., section, block, list item, etc.) that has an ID within the same document.
   The shorthand xref is processed by the macros substitution.

   If the cross reference specifies both an ID and text, the text is formatted and used as the link text.
   If the cross reference only specifies the ID, the reftext of the target element (typically the formatted title) is automatically used as the link text.
   If the element does not define reftext, a stylized form of the ID is used instead.
   Whether the ID is assigned explicitly on the referenced element or auto-generated does not affect how this mechanism works.

   Currently, an AsciiDoc processor can resolve a cross reference to the following elements:

   * Section (ID or block anchor)
   * Block (ID or block anchor)
   * Block macro (ID)
   * Inline anchor anywhere in a paragraph
   * Inline anchor at the start of a list item or table cell
   * Bibliography anchor in a bibliography list

   Note that the processor cannot resolve the ID assigned to a span of formatted text.
   If the cross reference cannot be resolved, and verbose mode is enabled, the AsciiDoc processor issues a warning about a possible invalid reference.
   In this case, the output document will reference the target blindly, so it's possible it will still function.

   You create a cross reference by enclosing the ID of the target block or section (or the path of another document with an optional anchor) in double angled brackets.

   .Cross reference using the ID of the target section
   [source#ex-section]
   ----
   include::example$xref.adoc[tag=base]
   ----

   The result of <<ex-section>> is displayed below.

   ====
   include::example$xref.adoc[tag=base]
   ====

   === Explicit link text

   Converters usually use the reftext of the target as the default text of the link.
   When the document is parsed, attribute references in the reftext are substituted immediately.
   When the reftext is displayed, additional reftext substitutions are applied to the text (specialchars, quotes, and replacements).

   You can override the reftext of the target by specifying alternative text at the location of the cross reference.
   After the ID, add a comma and then enter the custom text you want the cross reference to display.

   .Cross reference with custom xreflabel text
   [source#ex-custom]
   ----
   include::example$xref.adoc[tag=text]
   ----

   In this case, the target will be assumed to be an ID within the same document even if it contains a dot (`.`).

   You can also use the inline xref macro as an alternative to the xref shorthand.

   .Inline xref macro
   [source]
   ----
   include::example$xref.adoc[tag=xref-macro]
   ----

   However, it's best to reserve the use of the xref macro for creating interdocument cross references.

   When using the xref macro, if the target contains a dot (`.`), it will be treated as a reference to another document, not an ID within the same document.
   If the intention is to link to an ID within the same document, the target must be proceeded by a hash (`#`).

   === Natural cross reference

   You can also create a reference to a block or section using its title rather than its ID.
   This type of reference is referred to as a [.term]*natural cross reference*.
   The title must contain at least one space character or contain at least one uppercase letter.
   //(If you are using Ruby < 2.4, that uppercase letter is restricted to the basic Latin charset).

   .Cross reference using a section's title
   [source#ex-title]
   ----
   include::example$xref.adoc[tag=xref-title]
   ----

   As a rule of thumb, the natural cross reference should only be used for rapid development or short-lived content.
   As the content matures, you should switch to using IDs for referencing, ideally IDs which are declared explicitly.
   By doing so, it ensures your references have maximum stability and are shielded against title revisions.


/docs/modules/macros/pages/inter-document-xref.adoc
===================================================

.. code-block: asciidoc

   = Document to Document Cross References

   The inline xref macro can also link to IDs in other AsciiDoc documents.
   This eliminates the need to use direct links between documents that are coupled to a particular converter (e.g., HTML links).
   It also captures the intent of the author to establish a reference to a section in another document.

   Here's how a cross reference is normally defined in AsciiDoc:

   [source]
   ----
   include::example$xref.adoc[tag=base]
   ----

   This cross reference creates a link to the section with the ID _anchors_.

   Let's assume the cross reference is defined in the document [.path]_document-a.adoc_.
   If the target section is in a separate document, [.path]_document-b.adoc_, the author may be tempted to write:

   [source]
   ----
   include::example$xref.adoc[tag=bad]
   ----

   However, this link is coupled to HTML output.
   What's worse, if [.path]_document-b.adoc_ is included in the same document as [.path]_document-a.adoc_, the link will refer to a document that doesn't even exist!

   These problems can be alleviated by using an inter-document xref:

   [source]
   ----
   include::example$xref.adoc[tag=base-inter]
   ----

   The ID of the target is now placed behind a hash symbol (`#`).
   Preceding the hash is the name of the reference document (the file extension is optional).
   We've also added link text since an AsciiDoc processor is not (yet) required to resolve the section title in a separate document.

   TIP: While the link text for a local (i.e., intradocument) cross reference is optional, the link text for an interdocument cross reference is (currently) required.

   When the AsciiDoc processor generates the link for this cross reference, it first checks to see if [.path]_document-b.adoc_ is included in the same document as [.path]_document-a.doc_ (by comparing the xref target to the include targets relative to the outermost document).
   If not, it will generate a link to [.path]_document-b.html_, intelligently substituting the original file extension with the file extension of the output file.

   [source,html]
   ----
   <a href="document-b.html#section-b">Section B</a>
   ----

   If [.path]_document-b.adoc_ is included in the same document as [.path]_document-a.doc_, then the document will be dropped in the link target and look like the output of a normal cross reference:

   [source,html]
   ----
   <a href="#section-b">Section B</a>
   ----

   Now you can create inter-document cross references without the headache.

   == Navigating between source files

   In certain environments, such as a web interface for a source repository or an editor preview, you might see the generated HTML when you visit the URL of the AsciiDoc source file.
   If not accounted for, this has consequences for inter-document cross references.

   Since the default suffix for inter-document cross references in the `html5` backend is `.html`, the resulting link created in these environments may end up pointing to non-existent HTML files.
   In this case, you need to change the inter-document cross references to refer to other AsciiDoc source files instead.

   The file extension chosen for inter-document cross references is controlled by the `relfilesuffix` attribute.
   By default, this attribute is not set and the value of the `outfilesuffix` is used instead.
   If you want to change the file extension that gets used, you can do so by setting the `relfilesuffix` attribute.

   The following example demonstrates how to use the `relfilesuffix` attribute to control the file extension for inter-document cross references when you want to create a source-to-source reference.
   The assignment is hidden behind a check for `env-name`, where `env-name` is an attribute that is only set in an environment where you need to make this type of reference.

   [source]
   ----
   = Document Title
   \ifdef::env-name[:relfilesuffix: .adoc]

   See the xref:README.adoc[README].

   We could also write the link as link:README{relfilesuffix}[README].
   ----

   The links in the generated document will now point to [.path]_README.adoc_ instead of [.path]_README.html_.

   TIP: This configuration is not actually necessary on GitHub, GitLab, or the browser preview extension since those environments automatically set the value of `relfilesuffix` to match the file extension of the source file.
   However, this setting may still be required for other environments, so it's worth knowing.

   == Mapping references to a different structure

   While `relfilesuffix` gives you control over the end of the resolved path for an inter-document cross reference, the `relfileprefix` attribute gives you control over the beginning of the path.
   When resolving the path of an inter-document cross reference, if the `relfileprefix` attribute is set, the value of this attribute gets prepended to the path.
   Let's look at an example of when these two attributes are used together.

   A common practice in website architecture is to move files into their own folder to make the path format agnostic (called "`indexify`").
   For example, the path [.path]_filename.html_ becomes [.path]_filename_ (which targets [.path]_filename/index.html_).
   However, this is problematic for inter-document cross references.
   Any cross reference that resolves to the path [.path]_filename.html_ is now invalid since the file has moved to a subfolder (and thus no longer a sibling of the referencing document).

   To solve this problem, you can define the following two attributes:

   [source]
   ----
   :relfileprefix: ../
   :relfilesuffix: /
   ----

   Now, the cross reference `+<<filename.adoc,link text>>+` will resolve to [.path]_../filename_ instead of [.path]_filename.html_.
   Since this change is specific to the website architecture described, you want to be sure to only set these attributes in that particular environment (either using an ifdef directive or via the API).


/docs/modules/macros/pages/xref-text-and-style.adoc
===================================================

.. code-block: asciidoc

   = Cross Reference Text and Styles

   You can customize the style of the automatic cross reference text using the `xrefstyle` document attribute.
   This customization brings the cross reference text formatting from the DocBook toolchain to AsciiDoc processing, specifically during conversion.

   CAUTION: Since this is a newer feature of the AsciiDoc language, it may not be supported by all converters.
   Where you can find support for it is in Asciidoctor's HTML, PDF, and EPUB 3 converters.
   It's not supported by the DocBook converter since it's a feature the DocBook toolchain already provides.

   == Default styling

   By default, the cross reference text matches the title of the referenced element.
   For example, if you're linking to a section titled “Installation”, the text of the cross reference link appears as:

   ====
   Installation
   ====

   If the reftext attribute is specified on the referenced element, that value is preferred over its title.
   For example, let's assume the section from the previous example was written as:

   [source]
   ----
   [reftext="Installation Procedure"]
   === Installation
   ----

   In this case, the text of the cross reference link appears as:

   ====
   Installation Procedure
   ====

   Attribute references are substituted in the reftext during parsing and reftext substitutions (specialchars, quotes, and replacements) are applied to the value when it's used during conversion.

   If the reftext is not specified, the text of the cross reference is automatically generated.
   By default, this text is the title of the reference.

   == Cross reference styles

   The generated text of a cross reference is controlled by the xrefstyle.
   It will also vary for different element types (section, figure, etc).
   Let's consider the following document to learn how the xrefstyle value affects the generated text of a cross reference.

   [,asciidoc]
   ----
   == Installation

   .Big Cats
   image::big-cats.png[]
   ----

   There are three built-in styles supported by the xrefstyle document attribute that you can choose from to customize the generated text of a cross reference.

    :xrefstyle: full:: Uses the signifier for the reference followed by the reference number and emphasized (chapter or appendix) or title enclosed in quotes (e.g., Section 2.3, “Installation”) (e.g., Figure 1, “Big Cats”).

    :xrefstyle: short:: Uses the signifier for the reference followed by the reference number (e.g., Section 2.3) (e.g., Figure 1).

    :xrefstyle: basic:: Uses the title only, only applying emphasis if the reference is a chapter or appendix (e.g., Installation) (e.g., Big Cats).

   The `xrefstyle` attribute can also be specified directly on the xref:xref.adoc[xref macro] to override the xrefstyle value for a single reference (e.g., `+xref:installation[xrefstyle=short]+`).
   The element attribute supports the same three styles.

   The xrefstyle formatting only applies to references that have both a title and number (or explicit caption), but no explicit reftext.
   If the reference is a chapter or an appendix, the title is displayed in italics instead of quotes (even when the xrefstyle is basic).

   Let's assume you want to reference a section titled “Installation” that has the number 2.3.
   The *full* style is displayed as:

   ====
   Section 2.3, “Installation”
   ====

   The *short* style is displayed as:

   ====
   Section 2.3
   ====

   The *basic* style is displayed as:

   ====
   Installation
   ====

   The *full* and *short* styles only apply for references that have a caption.
   Specifically, the corresponding `<context>-caption` attribute must be set for the target's block type (e.g., `listing-caption` for listing blocks, `example-caption` for example blocks, `table-caption` for tables, etc.).
   Otherwise, the *basic* style is used.

   == Reference signifiers

   You can use document attributes to customize the signifier that is placed in front of the reference's number.
   This [.term]*reference signifier* indicates the reference's type (e.g., Chapter or Section).

   * `chapter-refsig` -- defines the signifier to use for a cross reference to a chapter (default: Chapter)
   * `section-refsig` -- defines the signifier to use for a cross reference to a section (default: Section)
   * `appendix-refsig` -- defines the signifier to use for a cross reference to an appendix (default: Appendix)

   (The signifier attribute for a part cross reference will be introduced once numeration is supported for parts).

   For example, to customize the word “Section”, define the `section-refsig` attribute in the document header:

   [source]
   ----
   :section-refsig: Sect.
   ----

   The *full* xrefstyle would then be displayed as:

   ====
   Sect. 2.3, “Installation”
   ====

   The *short* xrefstyle would be displayed as:

   ====
   Sect. 2.3
   ====

   If you unset the attribute, the signifier is dropped from the cross reference text.
   For example:

   [source]
   ----
   :!section-refsig:
   ----

   In this case, the *full* xrefstyle will display only the number and title:

   ====
   2.3, “Installation”
   ====

   The *short* xrefstyle will fall back to the number only:

   ====
   2.3
   ====

   The *basic* xrefstyle is unaffected by the value of the signifier.

   Only the aforementioned styles are provided out of the box.
   Support for a custom formatting string is planned.
   Refer to https://github.com/asciidoctor/asciidoctor/issues/2212[#2212^] for details.
   Until then, you can implement custom formatting in a custom converter or overriding the xreftext method on the node.


/docs/modules/macros/pages/xref-validate.adoc
=============================================

.. code-block: asciidoc

   = Validate Cross References

   An AsciiDoc processor is only required to provide limited support for validating internal cross references.
   Validation occurs when a cross reference is first visited.
   Since there are still some references aren't stored in the parse tree (such as an anchor in the middle of a paragraph), which can lead to false positives, these validations are hidden behind a flag.

   When using Asciidoctor, you can enable validation of cross references in several ways:

   * when using the CLI, passing the `-v` CLI option
   * when using the API, setting the global variable `$VERBOSE` to the value `true`
   * when using the API, setting the level on the global logger to INFO (i.e., `Asciidoctor::LoggerManager.logger.level = :info`)

   All of these adjustments put the processor into pedantic mode.
   In this mode, the parser will immediately validate cross references, issuing a warning message if the reference is not valid.
   If you set the global variable `$VERBOSE` to `true`, it will also enable warnings in Ruby, which may not be what you want.

   Consider the following example:

   ----
   See <<foobar>>.

   [#foobaz]
   == Foobaz
   ----

   If you run Asciidoctor in verbose/pedantic mode on this document (`-v`), it will send the following warning message to the logger.

   ....
   asciidoctor: WARNING: invalid reference: foobar
   ....

   An AsciiDoc processor is only required to validate references within the same document (after any includes are resolved).


/docs/modules/macros/examples/footnote.adoc
===========================================

.. code-block: asciidoc

   // tag::base-c[]
   The hail-and-rainbow protocol can be initiated at five levels:

   . doublefootnote:[The double hail-and-rainbow level makes my toes tingle.] <.> <.>
   . tertiary
   . supernumerary
   . supermassive
   . apocalyptic

   A bold statement!footnote:disclaimer[Opinions are my own.] <.>

   Another outrageous statement.footnote:disclaimer[] <.>
   // end::base-c[]

   // tag::base-x[]
   The hail-and-rainbow protocol can be initiated at five levels

   . doublefootnote:[The double hail-and-rainbow level makes my toes tingle.]
   . tertiary
   . supernumerary
   . supermassive
   . apocalyptic

   A bold statement!footnote:disclaimer[Opinions are my own.]

   Another outrageous statement.footnote:disclaimer[]
   // end::base-x[]

   // tag::externalized[]
   :fn-hail-and-rainbow: footnote:[The double hail-and-rainbow level makes my toes tingle.]
   :fn-disclaimer: footnote:disclaimer[Opinions are my own.]

   The hail-and-rainbow protocol can be initiated at five levels:

   . double{fn-hail-and-rainbow}
   . tertiary
   . supernumerary
   . supermassive
   . apocalyptic

   A bold statement!{fn-disclaimer}

   Another outrageous statement.{fn-disclaimer}
   // end::externalized[]

   // tag::externalized-format[]
   :fn-disclaimer: pass:c,q[footnote:disclaimer[Opinions are _mine_, and mine *alone*.]]

   A bold statement!{fn-disclaimer}

   Another outrageous statement.{fn-disclaimer}
   // end::externalized-format[]

   // tag::base[]
   A statement.footnote:[Clarification about this statement.]

   A bold statement!footnote:disclaimer[Opinions are my own.]

   Another bold statement.footnote:disclaimer[]
   // end::base[]


/docs/modules/macros/pages/images.adoc
======================================

.. code-block: asciidoc

   = Images

   There are two AsciiDoc image macro types, block and inline.
   As with all macros, the block and inline forms differ by the number of colons that follow the macro name.
   The block form uses two colons (`::`), whereas the inline form only uses one (`:`).

   == Block image macro

   A [.term]*block image* is displayed as a discrete element, i.e., on its own line, in a document.
   A block image is designated by `image` macro name and followed by two colons (`::`)
   It's preceded by an empty line, entered on a line by itself, and then followed by an empty line.

   .Block image macro
   [source#ex-block]
   ----
   Content in document.

   include::example$image.adoc[tag=base-co]

   Content in document
   ----
   <.> To insert a block image, type the `image` macro name directly followed by two colons (`::`).
   <.> After the colons, enter the image file target.
   Type a pair of square brackets (`+[]+`) directly after the target to complete the macro.

   The result of <<ex-block>> is displayed below.

   include::example$image.adoc[tag=base]

   include::partial$image-target.adoc[]

   You can specify a comma-separated list of optional attributes inside the square brackets or leave them empty.
   If you want to specify alt text, enter it inside the square brackets.

   .Block image macro with alt text
   [source#ex-alt]
   ----
   include::example$image.adoc[tag=alt]
   ----

   If the alt text contains a comma, you must enclose the alt text in double quotes.
   The double quote enclosure effectively escapes the comma from being interpreted as an attribute separator.

   .Block image macro with alt text that contains a comma
   [source#ex-alt-with-comma]
   ----
   include::example$image.adoc[tag=alt-with-comma]
   ----

   NOTE: Although you could enclose the alt text in single quotes to escape the comma, doing so implicitly enables substitutions.
   Unless you need substitutions to be applied to the alt text, prefer using double quotes as the enclosure.

   You can also give the image an ID, title, set its dimensions and make it a link.

   .Block image macro with attribute list
   [source#ex-attributes]
   ----
   include::example$image.adoc[tag=attr-co]
   ----
   <.> Defines the title of the block image, which gets displayed underneath the image when rendered.
   <.> Assigns an ID to the block and makes the image a link.
   The `link` attribute can also be defined inside the attribute list of the block macro.
   <.> The first positional attribute, _Sunset_, is the image's alt text.
   <.> The second and third positional attributes define the width and height, respectively.

   The result of <<ex-attributes>> is displayed below.

   include::example$image.adoc[tag=attr]

   === Figure caption label

   When a title is defined on a block image, the image title will be prefixed by a caption label (Figure) and numbered automatically.
   To turn off figure caption labels and numbers, unset the `figure-caption` attribute in the document header.

   [source]
   ----
   = Document Title
   :figure-caption!:
   ----

   == Inline image macro

   An [.term]*inline image* is displayed in the flow of another element, such as a paragraph or sidebar block.
   The inline image macro is almost identical to the block image macro, except its macro name is followed by a single colon (`:`).

   .Inline image macro
   [source#ex-inline]
   ----
   Click image:play.png[] to get the party started. <.>

   Click image:pause.png[title=Pause] when you need a break. <.>
   ----
   <.> In the flow of an element, enter the macro name and a single colon (`+image:+`), followed by the image target.
   Complete the macro with a pair of square brackets (`+[]+`).
   <.> You can specify a comma-separated list of attributes inside the square brackets or leave them empty.

   The result of <<ex-inline>> is displayed below.

   include::example$image.adoc[tag=inline]

   include::partial$image-target.adoc[]

   For inline images, the optional title is displayed as a tooltip.


/docs/modules/macros/pages/images-directory.adoc
================================================

.. code-block: asciidoc

   = Set the Images Directory

   The path to the location of the image catalog is controlled by the `imagesdir` attribute.

   == imagesdir attribute syntax

   `imagesdir` is a document attribute.
   Its value is automatically added to the beginning of every image macro target.
   The resolved location of a image is: `<value-of-imagesdir> + <image-macro-target>`.
   Therefore, you never need to reference this attribute in an image macro.
   You only need to set it in your document header.

   .Incorrect
   [source]
   ----
   image::{imagesdir}/name-of-image.png[]
   ----

   .Correct
   [source]
   ----
   image::name-of-image.png[]
   ----

   The value of `imagesdir` can be an absolute path, relative path or URL.
   By default, the `imagesdir` value is empty.
   That means the images are resolved relative to the document.
   If an image macro's target is an absolute path or URL, the value of `imagesdir` is not added to the target path.

   The benefit of the processor adding the value of `imagesdir` to the start of all image targets is that you can globally control the folder where images are located per converter.
   We refer to this folder as the image catalog.
   Since different output formats require the images to be stored in different locations, this attribute makes it possible to accommodate many different scenarios.

   We recommend relying on `imagesdir` when defining the target of your image to avoid hard-coding that common path in every single image macro.
   Always think about where the image is relative to the image catalog.

   TIP: You can set the `imagesdir` attribute in multiple places in your document, as long as it is not locked by the API.
   This technique is useful if you store images for different parts, chapters, or sections of your document in different locations.


/docs/modules/macros/pages/image-url.adoc
=========================================

.. code-block: asciidoc

   = Insert Images from a URL

   //(i.e., images with a URL target)
   You can reference images served from any URL (e.g., your blog, an image hosting service, your server, etc.) and never have to worry about downloading the images and putting them somewhere locally.

   == Image URL targets

   Here are a few examples of images that have a URL target:

   .Block image with a URL target
   [source]
   ----
   include::example$image.adoc[tag=url]
   ----

   include::example$image.adoc[tag=url]

   .Inline image with a URL target
   [source]
   ----
   include::example$image.adoc[tag=in-url]
   ----

   include::example$image.adoc[tag=in-url]

   NOTE: The value of `imagesdir` is ignored when the image target is a URL.

   If you want to avoid typing the URL prefix for every image, and all the images are located on the same server, you can use the `imagesdir` attribute to set the base URL:

   .Using a URL as the base URL for images
   [source]
   ----
   include::example$image.adoc[tag=base-url]
   ----

   This time, `imagesdir` is used since the image target is not a URL (the value of `imagesdir` just happens to be one).


/docs/modules/macros/pages/image-position.adoc
==============================================

.. code-block: asciidoc

   = Position and Frame Images
   :y: Yes
   :n: No

   Images are a great way to enhance the text, whether to illustrate an idea, show rather than tell, or just help the reader connect with the text.

   Out of the box, images and text behave like oil and water.
   Images don't like to share space with text.
   They are kind of "`pushy`" about it.
   That's why we focused on tuning the controls in the image macros so you can get the images and the text to flow together.

   There are two approaches you can take when positioning your images:

   . Named attributes
   . Roles

   == Positioning attributes

   AsciiDoc supports the `align` attribute on block images to align the image within the block (e.g., left, right or center).
   The named attribute `float` can be applied to both the block and inline image macros.
   Float pulls the image to one side of the page or the other and wraps block or inline content around it, respectively.

   Here's an example of a floating block image.
   The paragraphs or other blocks that follow the image will float up into the available space next to the image.
   The image will also be positioned horizontally in the center of the image block.

   .A block image pulled to the right and centered within the block
   [source]
   ----
   include::example$image.adoc[tag=float]
   ----

   Here's an example of a floating inline image.
   The image will float into the upper-right corner of the paragraph text.

   .An inline image pulled to the right of the paragraph text
   [source]
   ----
   include::example$image.adoc[tag=in-float]
   ----

   When you use the named attributes, CSS gets added inline (e.g., `style="float: left"`).
   That's bad practice because it can make the page harder to style when you want to customize the theme.
   It's far better to use CSS classes for these sorts of things, which map to roles in AsciiDoc terminology.

   == Positioning roles

   Here are the examples from above, now configured to use roles that map to CSS classes in the default Asciidoctor stylesheet:

   .Block image macro using positioning roles
   [source]
   ----
   include::example$image.adoc[tag=role]
   ----

   .Inline image macro using positioning role
   [source]
   ----
   include::example$image.adoc[tag=in-role]
   ----

   The following table lists all the roles available out of the box for positioning images.

   .Roles for positioning images
   [cols="1h,5*^"]
   |===
   |{empty} 2+|Float 3+|Align

   |Role
   |left
   |right
   |text-left
   |text-right
   |text-center

   |Block Image
   |{y}
   |{y}
   |{y}
   |{y}
   |{y}

   |Inline Image
   |{y}
   |{y}
   |{n}
   |{n}
   |{n}
   |===

   Merely setting the float direction on an image is not sufficient for proper positioning.
   That's because, by default, no space is left between the image and the text.
   To alleviate this problem, we've added sensible margins to images that use either the positioning named attributes or roles.

   If you want to customize the image styles, perhaps to customize the margins, you can provide your own additions to the stylesheet (either by using your own stylesheet that builds on the default stylesheet or by adding the styles to a docinfo file).

   WARNING: The shorthand syntax for a role (`.`) can not yet be used with image styles.

   == Framing roles

   It's common to frame the image in a border to further offset it from the text.
   You can style any block or inline image to appear as a thumbnail using the `thumb` role (or `th` for short).

   NOTE: The `thumb` role doesn't alter the dimensions of the image.
   For that, you need to assign the image a height and width.

   Here's a common example for adding an image to a blog post.
   The image floats to the right and is framed to make it stand out more from the text.

   [source]
   ----
   include::example$image.adoc[tag=frame]
   ----

   ////
   ====
   image:logo.png[role="related thumb right"] Here's text that will wrap around the image to the left.
   ====
   ////

   Notice we added the `related` role to the image.
   This role isn't technically required, but it gives the image semantic meaning.

   [#control-float]
   == Control the float

   When you start floating images, you may discover that too much content is floating around the image.
   What you need is a way to clear the float.
   That is provided using another role, `float-group`.

   Let's assume that we've floated two images so that they are positioned next to each other and we want the next paragraph to appear below them.

   [source]
   ----
   [.left]
   .Image A
   image::a.png[A,240,180]

   [.left]
   .Image B
   image::b.png[B,240,180,title=Image B]

   Text below images.
   ----

   When this example is converted, then viewed in a browser, the paragraph text appears to the right of the images.
   To fix this behavior, you just need to "`group`" the images together in a block with self-contained floats.
   Here's how it's done:

   [source]
   ----
   [.float-group]
   --
   [.left]
   .Image A
   image::a.png[A,240,180]

   [.left]
   .Image B
   image::b.png[B,240,180]
   --

   Text below images.
   ----

   This time, the text will appear below the images where we want it.


/docs/modules/macros/pages/image-link.adoc
==========================================

.. code-block: asciidoc

   = Add Link to Image

   You can turn an image into a link by using the `link` attribute.

   == link attribute

   The link attribute on a block or image macro acts as though the image is wrapped in a link macro.
   While it's possible to wrap an inline image macro in a link macro, that combination is not well supported and may introduce subtle parsing problems.
   Therefore, you should use the `link` attribute on the image macro instead.

   The value of the `link` attribute is akin to the target of the link macro.
   It can point to any URL or relative path.

   For a block image macro, the `link` attribute can be added to the block attribute line above the macro or inside the contents of the macro.

   ----
   [link=https://example.org]
   image::logo.png[Logo]
   ----

   or

   ----
   image::logo.png[Logo,link=https://example.org]
   ----

   For an inline macro, the `link` attribute must be added inside the contents of the macro.

   ----
   image:apply.jpg[Apply,link=https://apply.example.org] today!
   ----

   == Link controls

   When using the `link` attribute, you can also use the same controls supported by the link macro to control how the link is constructed.
   Those controls are as follows:

   * `window` attribute - instructs the browser to open the link in the specified named window
   * `nofollow` option - instructs search engines to not follow the link
   * `noopener` option - instructs the browser to navigate to the target without granting the new browsing context access to the original document

   When the value of `window` attribute is *_blank*, the `noopener` option is automatically enabled.

   Here's an example that shows how to use these controls.

   ----
   image::logo.png[Logo,link=https://example.org,window=_blank,opts=nofollow]
   ----

   Refer to the xref:link-macro-attribute-parsing.adoc#target-a-separate-window[Target a separate window] section in the link macro documentation for more information about how these link controls work.


/docs/modules/macros/pages/image-size.adoc
==========================================

.. code-block: asciidoc

   = Adjust Image Sizes
   :url-w3-dimensions: https://www.w3.org/TR/2014/REC-html5-20141028/embedded-content-0.html#dimension-attributes
   :url-discuss-measure: https://discuss.asciidoctor.org/Unit-of-measure-for-image-dimensions-td3040.html#a3222

   Since images often need to be sized according to the medium, there are several ways to specify an image size.

   In most output formats, the specified width is obeyed unless the image would exceed the content width or height, in which case it scaled to fit while maintaining the original aspect ratio (i.e., responsive scaling).

   == width and height attributes

   The primary way to specify the size of an image is to define the `width` and `height` attributes on the image macro.
   Since these two attributes are so common, they're mapped as the second and third (unnamed) positional attributes on both image macros.

   [source]
   ----
   image::flower.jpg[Flower,640,480]
   ----

   That's equivalent to the long-hand version:

   [source]
   ----
   image::flower.jpg[alt=Flower,width=640,height=480]
   ----

   The value of the width and height attributes should be an integer without a unit.
   The px unit is implied.
   Although the processor may allow it, you should never rely on a % value.
   While the % unit was supported in older versions of HTML, it was removed starting in HTML 5.
   If you need to specify a % value for PDF or DocBook output, use `pdfwidth` or `scaledwidth`, respectively.
   To scale the image relative to the content area in HTML output, use a role.

   While the values of `width` and `height` can be used to scale the image, these attributes are primarily intended to specify the {url-w3-dimensions}[intrinsic size of the image in CSS pixels^].
   The `width` and `height` attributes are mapped to attributes of the same name on the `<img>` element in the HTML output.
   These attributes are important because they provide a hint to the browser to tell it how much space to reserve for the image during layout to minimize page reflows.
   The `height` attribute should only be specified if the `width` attribute is also specified, and it should respect the aspect ratio of the image.

   .Automatic image scaling
   ****
   The default Asciidoctor stylesheet implements responsive images (using width-wise scaling).
   If the width of the content area is smaller than the width of the image, the image will be scaled down to fit.
   To support this feature, the intrinsic aspect ratio of the image is preserved at all sizes.

   Thus, when specifying the image's dimensions, you should choose values that honor the intrinsic aspect ratio of the image.
   If the values don't respect the aspect ratio, the height is ignored by the browser.
   ****

   == pdfwidth attribute

   AsciiDoc recognizes the following attributes to size images when converting to PDF using Asciidoctor PDF:

   * `pdfwidth` - The preferred width of the image in the PDF when converting using Asciidoctor PDF.

   The `pdfwidth` attribute accepts the following units:

   [horizontal]
   px:: Output device pixels (assumed to be 96 dpi)
   pt (or none):: Points (1/72 of an inch)
   pc:: Picas (1/6 of an inch)
   cm:: Centimeters
   mm:: Millimeters
   in:: Inches
   %:: Percentage of the content width (area between margins)
   vw:: Percentage of the page width (edge to edge)
   iw:: Percentage of the intrinsic width of the image

   If `pdfwidth` is not provided, Asciidoctor PDF also accepts `scaledwidth`, or `width` (no units, assumed to be pixels), in that order.
   ifeval::["{url-project}"=="https://asciidoctor.org"]
   See xref:pdf-converter::image-scaling.adoc[image scaling in Asciidoctor PDF] for more details.
   endif::[]

   == scaledwidth attribute

   AsciiDoc recognizes the following attributes to size images when converting to DocBook or when converting to PDF using Asciidoctor PDF.
   The `scaledwidth` attribute is ignored by other converters.

   * `scaledwidth` - The preferred width of the image when converting to PDF using the DocBook toolchain. (Mutually exclusive with `scale`).
   * `scale` - Scales the original image size by this amount when converting to PDF using the DocBook toolchain. (Mutually exclusive with `scaledwidth`).

   `scaledwidth` sizes images much like `pdfwidth`, except it does not accept the vw unit.

   The value of `scaledwidth` when used with DocBook can have the following units:

   [horizontal]
   px:: Output device pixels (assumed to be 72 dpi)
   pt:: Points (1/72 of an inch)
   pc:: Picas (1/6 of an inch)
   cm:: Centimeters
   mm:: Millimeters
   in:: Inches
   em:: Ems (current font size)
   % (or no units):: Percentage of the content width (area between margins)

   The `scaledwidth` attribute in AsciiDoc is mapped to the `width` attribute on the `imagedata` tag in DocBook, whereas the `width` attribute in AsciiDoc is mapped to the `contentwidth` attribute on the `imagedata` tag in DocBook.
   If both the `width` and `scaledwidth` attributes are specified in AsciiDoc, the `scaledwidth` tags precedence, so the DocBook output will only have the `width` attribute.

   == Image sizing recap

   .Image sizing attributes
   [%autowidth]
   |====
   |Backend |Absolute size |Relative to original size |Relative to content width |Relative to page width

   |html
   |width=120 +
   (assumed to be px)
   |Not possible
   |role=half-width
   |role=half-view-width

   |pdf
   |pdfwidth=100mm +
   (or cm, in, pc, pt, px)
   |Not possible +
   (support for the scale attribute is pending)
   |pdfwidth=80%
   |pdfwidth=50vw

   |docbook, pdf
   |scaledwidth=100mm +
   (or cm, em, in, pc, pt, px)
   |scale=75
   |scaledwidth=50%
   |Not possible
   |====

   Here's an example of how you might bring these attributes together to control the size of an image in various output formats:

   [source]
   ----
   image::flower.jpg[Flower,640,480,pdfwidth=50%,scaledwidth=50%]
   ----

   If the cascading behavior of the sizing attributes does not work for your use case, you might consider a document attribute to set the attribute that is suitable for the backend you are using.
   Consider the following example:

   [source,indent=0]
   ----
    ifdef::backend-html5[]
    :twoinches: width=144
    // using a role requires adding a corresponding rule to the CSS
    :full-width: role=full-width
    :half-width: role=half-width
    :half-size: role=half-size
    :thumbnail: width=60
    endif::[]
    ifdef::backend-pdf[]
    :twoinches: pdfwidth=2in
    // NOTE use pdfwidth=100vw to make the image stretch edge to edge
    :full-width: pdfwidth=100%
    :half-width: pdfwidth=50%
    // NOTE scale is not yet supported by the PDF converter
    :half-size: pdfwidth=50%
    :thumbnail: pdfwidth=20mm
    endif::[]
    ifdef::backend-docbook5[]
    :twoinches: scaledwidth=2in
    :full-width: scaledwidth=100%
    :half-width: scaledwidth=50%
    :half-size: scale=50
    :thumbnail: scaledwidth=20mm
    endif::[]
   ----

   Then you can specify the image to be half the width of the content area using the following syntax:

   [source]
   ----
   image::image.jpg[{half-width}]
   ----

   In addition to providing consistency across your document, this technique will help insulate you from future changes.
   For a more detailed example, see {url-discuss-measure}[this thread^] on the discussion list.


/docs/modules/macros/pages/image-format.adoc
============================================

.. code-block: asciidoc

   = Specify Image Format

   Although to a reader, an image is just an image, different image formats must be processed differently by the converter in order to be referenced by or embedded in the output format.
   Some image formats, such as SVG, even activate additional behavior.
   On this page, you learn how an AsciiDoc processor determines the format of an image and how it can be specified explicitly using the `format` attribute if the format cannot be determined.

   == Automatic image format

   Most of the time, the image format can be determined from the file extension (e.g., `.svg`) of the target.
   Here's an example that shows an image target that has a file extension:

   ----
   image::avatar.svg[]
   ----

   In this case, the converter can determine that this is an SVG image based on the file extension `.svg`.
   So the author does not need to specify the image format.
   The author only needs to specify the format when the image format cannot be determined.

   == format attribute

   When the file extension is not present, or--in the case of a URL--not in its usual place, the author must specify the image format explicitly.
   The `format` attribute on a block or inline image macro can be used to specify the format of an image.

   ----
   image::https://example.org/avatar[format=svg]
   ----

   In this case, the converter would not be able to determine that this is an SVG image because the target has no file extension.
   But since the author has specified `format=svg`, the converter can recognize this as an SVG image.

   Here are few cases when the image format cannot be determined automatically:

   * the target does not have a file extension
   * the target is using an unrecognized file extension
   * the target is a URL that contains a query string (thus hiding the file extension)

   The value of the format attribute is the sub-MIME type (the part after the forward slash) (e.g., `png` for a PNG image).
   One exception to this rule is the format for SVG, which is specified as `svg` instead of `svg+xml`.
   You can find a list of common image formats along with their MIME type values on the https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types[image file type and format guide^] page.

   == When is the format used?

   There are several scenarios when a converter almost always needs to know the image format.
   One is to distinguish an SVG target.
   Another is to convert the image to a data URI.
   Yet another is when a converter must reencode the image.

   AsciiDoc recognizes extra settings for xref:image-svg.adoc[SVG images], such as how to include it in the HTML output and whether to provide a fallback image.
   If the converter needs to read and process the file, it often must use a different library to process an SVG since the contents of an SVG is an XML document.
   So being able to recognize an SVG target is essential for almost any converter.

   If the `data-uri` attribute is set on the document, an AsciiDoc processor must convert the image to a data URI.
   To start, the data URI for an SVG differs from a data URI for any other format.
   But even when creating a data URI for a non-SVG, the MIME type of that image must be included in the data URI, in which case the image format must be known.

   Some converters, such as a PDF converter, have to reencode the image data.
   This means the converter must parse the image data, which may require loading an additional library.
   Doing that processing almost certainly requires knowing the format of the image.
   It also provides an opportunity for the converter to inform the author whether the image uses a format that cannot be processed.

   As you can see, while the image format not always needed, it's needed often enough that you should specify the format if it's not apparent from the file extension of the target.


/docs/modules/macros/pages/image-svg.adoc
=========================================

.. code-block: asciidoc

   = SVG Images
   :url-svg-editor: https://petercollingridge.appspot.com/svg-editor
   :url-svgo: https://github.com/svg/svgo

   Both block and inline image macros have built-in support for scalable vector graphics (SVGs).
   But there's more than one way to include an SVG into a web page, and the strategy used can affect how the SVG behaves (or misbehaves).
   Therefore, these macros provide additional options to control how the SVG is included (i.e., referenced).

   == SVG dimensions

   The viewBox attribute on the root `<svg>` element is required.
   The viewBox establishes the coordinate space on to which x and y values inside the SVG data are placed.
   Without this information, converters cannot properly interpret the SVG data and translate it to the canvas.

   We strongly recommend not using the width and height attributes on the root `<svg>` element.
   You will find that SVGs that only specify a viewBox work best in a document.
   That's because the SVG data itself is infinitely scalable.
   By assigning an explicit width and height, you may end up limiting how the SVG can be sized or positioned in the document.
   It's better to specify the width (or similar, such as pdfwidth) on the image macro instead, or using CSS.

   You particularly want to avoid using a percentage width, such as `width="100%"`.
   According to the SVG spec, this means using all available space, but without altering the aspect ratio.
   As a result, you can get a large gap above and below the SVG in page-oriented media, such as PDF.
   If you do specify a width and height, at least make sure the values are fixed and that they respect the aspect ratio of the data.

   == Options for SVG images

   When the image target is an SVG, the `options` attribute (often abbreviated as `opts`) on the macro accepts one of the following values to control how the SVG is referenced:

   * _none_ (default)
   * `interactive`
   * `inline`

   The following table demonstrates the impact these options have.

   .Demonstration of option values for SVG images
   [cols=2*,frame=ends,grid=none]
   |===
   2+l|image::sample.svg[Static,300]
   a|image::sample.svg[Static,300]
   |Observe that the SVG does not respond to the hover event.

   2+l|image::sample.svg[Interactive,300,opts=interactive]
   a|image::sample.svg[Interactive,300,opts=interactive]
   |Observe that the color changes when hovering over the SVG.

   2+l|image::sample.svg[Embedded,300,opts=inline]
   a|image::sample.svg[Embedded,300,opts=interactive]
   // the output uses the interactive version as the documentation doesn't currently support the `inline` option.
   |Observe that the color changes when hovering over the SVG.
   The SVG also inherits CSS from the document stylesheets.
   |===

   How these options values work and when each should be used is described below:

   .Option values that control how an SVG image is referenced in the HTML output
   [%autowidth]
   |===
   |Option |HTML Element Used |Effect |When To Use

   |_none_ (default)
   |`<img>`
   |Image is rasterized
   |Static image, no interactivity, no custom fonts

   |`interactive`
   |`<object>`
   |Image embedded as a live, interactive object
   |For using CSS animations, scripting, webfonts, or when you want to specify a fallback image

   |`inline`
   |`<svg>`
   |The SVG is embedded directly into the HTML itself
   |For using CSS animations, scripting, webfonts, when you require search engines to search the SVG content

   To allow SVG content reachable by JavaScript in the main DOM or to inherit styles from the main DOM
   |===

   When using the `interactive` option, you can specify a fallback image using the `fallback` attribute.
   The fallback image is used if the browser does not support the `<object>` tag.
   If the value of the fallback attribute is a relative path, it will be prefixed with the value of the `imagesdir` document attribute.

   When using the `inline` or `interactive` options, the `viewBox` attribute must be defined on the root `<svg>` element in order for scaling to work properly.

   When using the `inline` option, if you specify a width or height on the image macro in AsciiDoc, the `width`, `height` and `style` attributes on the `<svg>` element will be removed. Additionally, when using `inline` the primary SVG elements (e.g., `<svg>`) cannot have a namespace.

   If using the `interactive` option, you must link to the CSS that declares the fonts in the SVG file using an XML stylesheet declaration.

   If you're inserting an SVG using either the `inline` or `interactive` options, we strongly recommend you optimize your SVG using a tool like {url-svgo}[svgo^] or {url-svg-editor}[SVG Editor^].

   As you work with SVG, you'll become more comfortable making the decision about which method to employ given the circumstances.
   It's only confusing when you first encounter the choice.
   To learn more about using SVG on the web, consult the online book https://svgontheweb.com/[SVG on the Web: A Practical Guide^] as well as https://www.sarasoueidan.com/tags/svg/[these articles about SVG^].


/docs/modules/macros/pages/image-ref.adoc
=========================================

.. code-block: asciidoc

   = Images Reference

   .Document attributes and values
   [cols=2;2;3;3]
   |===
   |Attribute |Value(s) |Example Syntax |Comments

   |`imagesdir`
   |empty, filesystem path, or base URL
   |`:imagesdir: images`
   |Added in front of a relative image target, joined using a file separator if needed.
   Not used if the image target is an absolute URL or path.
   Default value is empty.
   |===

   .Block and inline image attributes and values
   [cols=2;2;3;3]
   |===
   |Attribute |Value(s) |Example Syntax |Comments

   |`id`
   |User defined text
   |`id=sunset-img` +
   (or `+[[sunset-img]]+` or `[#sunset-img]` above block macro)
   |

   |`alt`
   |User defined text in first position of attribute list or named attribute
   |`image::sunset.jpg[Brilliant sunset]` +
   (or `alt=Sunset`)
   |

   |`fallback`
   |Image path relative to `imagesdir` or an absolute path or URL
   |`image::tiger.svg[fallback=tiger.png]`
   |Only applicable if target is an SVG and opts=interactive

   |`title`
   |User defined text
   |in attrlist: `title="A mountain sunset"` (enclosing quotes only required if value contains a comma) +
   above block macro: `.A mountain sunset`
   |Blocks: title displayed below image +
   Inline: title displayed as tooltip

   |`format`
   |The format of the image, specified as a sub-MIME type (except in the case of an SVG, which is specified as `svg`).
   |`format=svg`
   |Only necessary when the converter needs to know the format of the image and the target does not end in a file extension (or otherwise cannot be detected).

   |`caption`
   |User defined text
   |`caption="Figure 8: "`
   |Only applies to block images.

   |`width`
   |User defined size in pixels
   |`image::sunset.jpg[Sunset,300]` +
   (or `width=300`)
   |

   |`height`
   |User defined size in pixels
   |`image::sunset.jpg[Sunset,300,200]` +
   (or `height=200`)
   |The height should only be set if the width attribute is set and must respect the aspect ratio of the image.

   |`link`
   |User defined location of external URI
   |`link=https://www.flickr.com/photos/javh/5448336655`
   |

   |`window`
   |User defined window target for the `link` attribute
   |`window=_blank`
   |

   |`scale`
   |A scaling factor to apply to the intrinsic image dimensions
   |`scale=80`
   |DocBook only

   |`scaledwidth`
   |User defined width for block images
   |`scaledwidth=25%`
   |DocBook and Asciidoctor PDF only

   |`pdfwidth`
   |User defined width for images in a PDF
   |`pdfwidth=80vw`
   |Asciidoctor PDF only

   |`align`
   |`left`, `center`, `right`
   |`align=left`
   |Block images only.
   `align` and `float` attributes are mutually exclusive.

   |`float`
   |`left`, `right`
   |`float=right`
   |Block images only.
   `float` and `align` attributes are mutually exclusive.
   To scope the float, use a xref:image-position.adoc#control-float[float group].

   |`role`
   |user-defined, `left`, `right`, `th`, `thumb`, `related`, `rel`
   |`role="thumb right"` +
   (or `[.thumb.right]` above block macro)
   |The role is preferred to specify the float position for an image.
   Role shorthand (`.`) can only be used in block attribute list above a block image.

   |`opts`
   |Additional options for link creation and SVG targets.
   |`image::sunset.jpg[Sunset, link=https://example.org, opts=nofollow]`

   `image::chart.svg[opts=inline]`
   |Option names include: `nofollow`, `noopener`, `inline` (SVG only), `interactive` (SVG only)
   |===


/docs/modules/macros/pages/audio-and-video.adoc
===============================================

.. code-block: asciidoc

   = Audio and Video
   :url-video-element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video
   :url-audio-element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
   :url-media-formats: https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats#Browser_compatibility

   == Audio macro syntax

   The block audio macro enables you to embed audio streams into your documentation.
   You can embed self-hosted audio files that are supported by the browser.

   The audio formats AsciiDoc supports is dictated by the output format, such as the formats supported by the browser when generating HTML.
   While this was once a precarious ordeal, HTML 5 has brought sanity to audio support in the browser by adding a dedicated {url-audio-element}[`<audio>`^] element and by introducing several standard audio formats.
   Those formats are now widely supported across browsers and systems.

   For a canonical list of supported web audio formats and their interaction with modern browsers, see the {url-media-formats}[Mozilla Developer Supported Media Formats^] documentation.

   .Basic audio file include
   ----
   include::example$audio.adoc[tag=basic]
   ----

   You can control the audio settings using additional attributes on the macro.
   For instance, you can offset the start time of playback using the `start` attribute and enable autoplay using the `autoplay` option.

   .Set attributes for local audio playback
   ----
   include::example$audio.adoc[tag=attrs]
   ----

   You can include a caption above the audio using the title attribute.

   .Add a caption to the audio
   [source]
   ----
   include::example$audio.adoc[tag=caption]
   ----

   == Video macro syntax

   The block video macro enables you to embed videos into your documentation.
   You can embed self-hosted videos or videos shared on popular video hosting sites such as Vimeo and YouTube.

   The video formats AsciiDoc supports is dictated by the output format, such as the formats supported by the browser when generating HTML.
   While this was once a precarious ordeal, HTML 5 has brought sanity to video support in the browser by adding a dedicated {url-video-element}[`<video>`^] element and by introducing several standard video formats.
   Those formats are now widely supported across browsers and systems.

   For a canonical list of supported web video formats and their interaction with modern browsers, see the {url-media-formats}[Mozilla Developer Supported Media Formats^] documentation.

   .A recommendation for serving video to browsers
   ****
   Where appropriate, we recommend using a video hosting service like Vimeo or YouTube to serve videos in online documentation.
   These services specialize in streaming optimized video to the browser, with the lowest latency possible given hardware, software, and network capabilities of the device viewing the video.

   Vimeo even offers a white label mode so users aren't made aware that the video is being served through its service.

   See <<Vimeo and YouTube videos>> for details about how to serve videos from these services.
   ****

   .Basic video file include
   [source]
   ----
   include::example$video.adoc[tag=base]
   ----

   You can control the video settings using additional attributes on the macro.
   For instance, you can offset the start time of playback using the `start` attribute and enable autoplay using the `autoplay` option.

   .Set attributes for local video playback
   [source]
   ----
   include::example$video.adoc[tag=attr]
   ----

   You can include a caption on the video using the title attribute.

   .Add a caption to a video
   [source]
   ----
   include::example$video.adoc[tag=caption]
   ----

   === Vimeo and YouTube videos

   The video macro supports embedding videos from external video hosting services like Vimeo and YouTube.
   The AsciiDoc processor, specifically the converter, automatically generates the correct code to embed the video in the HTML output.

   To use this feature, put the video ID in the macro target and the name of the hosting service in the first positional attribute.

   .Embed a Vimeo video
   [source]
   ----
   include::example$video.adoc[tag=vimeo]
   ----

   .Embed a YouTube video
   [source]
   ----
   include::example$video.adoc[tag=youtube]
   ----

   When embedding a YouTube video, you can specify a playlist to associate with the video using the `list` attribute.
   The playlist must be specified by its ID.

   .Embed a YouTube video with a playlist
   [source]
   ----
   include::example$video.adoc[tag=youtube-with-list]
   ----

   Instead of using the `list` attribute, you can specify the ID of the playlist after the video ID in the target, separated by a slash.

   .Embed a YouTube video with a playlist in the target
   [source]
   ----
   include::example$video.adoc[tag=youtube-with-list-in-target]
   ----

   Alternatively, you can create a dynamic, unnamed playlist by listing several additional video IDs in the `playlist` attribute.

   .Embed a YouTube video with a dynamic playlist
   [source]
   ----
   include::example$video.adoc[tag=youtube-with-playlist]
   ----

   Instead of using the `playlist` attribute, you can create a dynamic, unnamed playlist by listing several video IDs in the target separated by a comma.

   .Embed a YouTube video with a dynamic playlist in the target
   [source]
   ----
   include::example$video.adoc[tag=youtube-with-playlist-in-target]
   ----

   == Audio and video attributes and options

   .Audio attributes and values
   [%autowidth]
   |===
   |Attribute |Value(s) |Example Syntax |Notes

   |`title`
   |User defined text
   |`.Ocean waves`
   |

   |`start`
   |User-defined playback start time in seconds.
   |`start=30`
   |

   |`end`
   |User-defined playback end time in seconds.
   |`end=90`
   |

   |`options` (`opts`)
   |`autoplay`, `loop`, `controls`, `nocontrols`
   |`opts="autoplay,loop"`
   |The controls value is enabled by default
   |===

   .Video attributes and values
   [%autowidth]
   |===
   |Attribute |Value(s) |Example Syntax |Notes

   |`title`
   |User defined text
   |`.An ocean sunset`
   |

   |`poster`
   |A URL to an image to show until the user plays or seeks.
   |`poster=sunset.jpg`
   |Can be specified as the first positional (unnamed) attribute.
   Also used to specify the service when referring to a video hosted on Vimeo (`vimeo`) or YouTube (`youtube`).

   |`width`
   |User-defined size in pixels.
   |`width=640`
   |Can be specified as the second positional (unnamed) attribute.

   |`height`
   |User-defined size in pixels.
   |`height=480`
   |Can be specified as the third positional (unnamed) attribute.

   |`start`
   |User-defined playback start time in seconds.
   |`start=30`
   |

   |`end`
   |User-defined playback end time in seconds.
   |`end=90`
   |

   |`theme`
   |The YouTube theme to use for the frame.
   |`theme=light`
   |Valid values are `dark` (the default) and `light`.

   |`lang`
   |The language used in the YouTube frame.
   |`lang=fr`
   |A BCP 47 language tag (typically a two-letter language code, like `en`).

   |`list`
   |The ID of a playlist to associate with a YouTube video.
   |`list=PLabc123`
   |Only applies to YouTube videos.

   |`playlist`
   |Additional video IDs to create a dynamic YouTube playlist.
   |`playlist="video-abc,video-xyz"`
   |IDs must be separated by commas.
   Therefore, the value must be enclosed in double quotes.
   Only applies to YouTube videos.

   |`options` (`opts`)
   |`autoplay`, `loop`, `modest`, `nocontrols`, `nofullscreen`, `muted`
   |`opts="autoplay,loop"`
   |The controls are enabled by default.
   The `modest` option enables modest branding for a YouTube video.
   |===


/docs/modules/macros/pages/icons.adoc
=====================================

.. code-block: asciidoc

   = Icons

   Icons are a useful way to communicate information visually while at the same time eliminating text that can distract from the primary text.
   Icons also have the benefit of adding some flair to your document.
   In AsciiDoc, there are numerous ways to embellish the output of your document with icons (for backends that support this feature).

   For some elements, icons are added automatically by the processor when enabled, such as the admonition icons.
   You can also add icons directly to the content using special markup.

   This section shows you how to enable icons, covers the various icon modes, and introduces you to the icon macro for adding custom icons to your content.

   [#icons-attribute]
   == Enable icons

   There are three icon modes: text, image, and font.

   The inclusion of icons in the output is controlled using the `icons` document attribute.
   By default, this attribute is not set.
   As a result, all icons are displayed as text.
   In the text icon mode, icons are effectively disabled.

   To enable icons, set the `icons` attribute in the document header.

   [source]
   ----
   = Document Title
   :icons:
   ----

   Valid values for the `icons` attribute are as follows:

   image (or empty)::
   Icons resolve to image files in the directory specified by the `iconsdir` attribute.

   font::
   Icons are loaded from an icon font (like Font Awesome).
   Not all backends support this mode, such as DocBook.

   == Where icons are used

   Setting the `icon` attribute turns on icons in the following locations:

   * The admonition label is replaced with an icon (i.e., admonition icons)
   * The icon macro
   * Callout numbers

   The following pages will cover these icon modes in more depth.


/docs/modules/macros/pages/icon-macro.adoc
==========================================

.. code-block: asciidoc

   = Icon Macro

   In addition to built-in icons, you can add icons anywhere in your content where macros are substituted using the icon macro.
   This page covers the anatomy of the icon macro, how the target is resolved, and what features it support (subject to the icon mode).

   == Anatomy

   The icon macro is an inline macro.
   Like other inline macros, its syntax follows the familiar pattern of the macro name and target separated by a colon followed by an attribute list enclosed in square brackets.

   [source]
   ----
   icon:<target>[<attrlist>]
   ----

   The `<target>` is the icon name or path.
   The `<attrlist>` specifies various named attributes to configure how the icon is displayed.

   For example:

   [source]
   ----
   icon:heart[2x,role=red]
   ----

   == Example

   Here's an example that shows how to inserts an icon named _tags_ in front of a list of tag names.

   [source]
   ----
   icon:tags[] ruby, asciidoctor
   ----

   Here's how the HTML converter converts an icon macro when the `icons` attribute is not set or empty.

   .Result: HTML output
   [source,html]
   ----
   <div class="paragraph">
     <p><span class="image"><img src="./images/icons/tags.png" alt="tags"></span> ruby, asciidoctor</p>
   </div>
   ----

   Here's how the DocBook converter converts an icon macro.

   [source,xml]
   ----
   <inlinemediaobject>
     <imageobject>
       <imagedata fileref="./images/icons/tags.png"/>
     </imageobject>
     <textobject><phrase>tags</phrase></textobject>
   </inlinemediaobject> ruby, asciidoctor
   ----

   When the image for an icon can't be located in the icons directory, the AsciiDoc processor displays the icon macro's alt (i.e. fallback) text.

   == How the icon is resolved

   The target of the icon macro is an icon name (or path).
   How that target is resolved depends on the icon mode assigned to the xref:icons.adoc#icons-attribute[icons attribute].

   text::
   The icon name will be enclosed in square brackets (e.g., `[heart]`).

   image::
   The icon name will be resolved to a file in the `iconsdir` with the file extension specified by `icontype` (e.g., [.path]_./images/icons/heart.png_).

   font::
   The icon name will be resolved to a glyph in an icon font (as mapped by a CSS class) (e.g., `fa fa-heart`).

   WARNING: If you include a file extension in the image target, the icon macro will not work correctly when using the font icon mode (i.e., `icons=font`).

   == Icon macro attributes (shared)

   The following attributes of the icon macro are shared for all icon modes.

   `role`::
   The role applied to the element that surrounds the icon.

   `title`::
   The title of the image displayed when the mouse hovers over it.

   `link`::
   The URI target used for the icon, which will wrap the converted icon in a link.

   `window`::
   The target window of the link (when the `link` attribute is specified).

   === Role

   Here's an example of an icon that uses a role to specify the color.

   [source]
   ----
   icon:tags[role=blue] ruby, asciidoctor
   ----

   === Link and window

   Here's an example of an icon with a link that targets a separate window:

   [source]
   ----
   icon:download[link=https://rubygems.org/downloads/whizbang-1.0.0.gem, window=_blank]
   ----

   == Icon macro attributes (image mode only)

   The attributes listed below only apply when using the image icon mode.

   `alt`::
   The alternative text on the `<img>` element (HTML output) or text of `<inlinemediaobject>` element (DocBook output)

   `width`::
   The width applied to the image.

   For example, here's how to control the icon alt text and width when using the image icon mode:

   [source]
   ----
   icon:tags[Tags,width=16] ruby, asciidoctor
   ----

   The icon macro doesn't support any options to change its physical position (such as alignment).

   == Icon macro attributes (font mode only)

   The icon macro has a few attributes that modify the size and orientation of a font-based icon.
   These attributes are only recognized in the font icon mode.

   `size`::
   First positional attribute; scales the icon; values: `1x` (default), `2x`, `3x`, `4x`, `5x`, `lg`, `fw`

   `rotate`::
   Rotates the icon; values: `90`, `180`, `270`

   `flip`::
   Flips the icon; values: `horizontal`, `vertical`

   === Size

   To make the icon twice the size as the default, enter `2x` inside the square brackets.

   [source]
   ----
   icon:heart[2x]
   ----

   or

   [source]
   ----
   icon:heart[size=2x]
   ----

   [TIP]
   ====
   If you want to line up icons so that you can use them as bullets in a list, use the `fw` size as follows:

   ----
   [%hardbreaks]
   icon:bolt[fw] bolt
   icon:heart[fw] heart
   ----
   ====

   === Rotate and flip

   To rotate and flip an icon, specify these options using named attributes:

   [source]
   ----
   icon:shield[rotate=90, flip=vertical]
   ----


/docs/modules/macros/pages/icons-image.adoc
===========================================

.. code-block: asciidoc

   = Image Icons Mode

   Setting the `icons` attribute to `image` (or leaving it empty) instructs the AsciiDoc processor to use images for icons.
   This page defines where the processor looks for these image files by default, which image file extension it prepends, and how to configure both.

   == Enable image-based icons

   To enable image-based icons, you set the `icons` attribute in the document header to the value `image`.

   [source]
   ----
   = Document Title
   :icons: image
   ----

   This setting has no affect on the parsing of the AsciiDoc document.
   It only influences the output generated by the converters.

   == Default icons directory and type

   By default, the AsciiDoc processor will look for icons in the [.path]_icons_ directory relative to the value of the `imagesdir` attribute.
   If you have not configured either attribute, that path resolves to [.path]_./images/icons_.

   The processor won't look for icons of any type (i.e., format).
   Instead, it will look for icons that have the _.png_ file extension.

   Let's assume you have the following NOTE admonition block in your document:

   [source]
   ----
   NOTE: Remember the milk!
   ----

   The AsciiDoc processor will resolve the admonition icon to [.path]_./images/icons/note.png_.

   == Configure the icons directory using iconsdir

   To change where the AsciiDoc processor looks for icons, you can specify a different location using the `iconsdir` attribute.

   For example:

   [source]
   ----
   = Document Title
   :icons: image
   :iconsdir: icons
   ----

   When converting this document, the AsciiDoc processor will look for images in the [.path]_icons_ directory instead of the default [.path]_./images/icons_.

   == Configure the icon type using icontype

   If the icon path is derived, such as for an admonition icon or if the target of the icon macro does not have a file extension, the AsciiDoc processor will use the `icontype` attribute to determine which image type (i.e., format) to look for.
   By default, the value of this attribute is `png`, so the processor will look for an image with the file extension `.png`.

   You can use the `icontype` document attribute to configure the default icon type.

   For example:

   [source]
   ----
   = Document Title
   :icons: image
   :icontype: svg
   ----

   For NOTE admonitions, the AsciiDoc processor will now look for the image [.path]_note.svg_ in the `iconsdir` instead of [.path]_note.png_.

   The value of the `icontype` attribute is ignored for the icon macro if the target has a file extension.
   It's only used when the icon type must be inferred.


/docs/modules/macros/pages/icons-font.adoc
==========================================

.. code-block: asciidoc

   = Font Icons Mode
   :url-fontawesome-icons: https://fontawesome.com/v4/icons/

   Setting the `icons` attribute to `font` instructs the AsciiDoc processor to select icons from an icon font.

   CAUTION: Not all converters support this mode.
   If a converter does not support this mode, it will fall back to the xref:icons-image.adoc[image mode].

   == Enable font-based icons

   To enable image-based icons, you set the `icons` attribute in the document header to the value `font`.

   [source]
   ----
   = Document Title
   :icons: font
   ----

   This setting has no affect on the parsing of the AsciiDoc document.
   It only influences the output generated by the converters.

   IMPORTANT: When converting to HTML, the stylesheet is required in order for the font-based icons to work.

   == Default icon font

   The icon font that is used by default is determined by the processor.
   Asciidoctor, for example, uses the Font Awesome icon font.
   You can see the available icons in Font Awesome on the {url-fontawesome-icons}[Font Awesome icons page^].
   Using the Font Awesome icons in Asciidoctor requires online access by default.

   == Default admonition icons

   Since the names of admonitions doesn't necessarily match the names of icons in the icon font, the AsciiDoc processor must map admonition CSS classes to icon names.

   When using Font Awesome as the icon set, the following mappings are recommended:

   * note -> info-circle
   * tip -> lightbulb-o
   * warning -> warning
   * caution -> fire
   * important -> exclamation-circle

   ////
   TODO: move to Asciidoctor

   == Default font-based admonition icons

   When font-based icons are enabled, Asciidoctor will draw the icons for the 5 built-in admonition types using Font Awesome.
   To use the default font-based admonition icons for admonitions, set the value of the `icons` document attribute to `font` in the document header.

   [source]
   ----
   = Document Title
   :icons: font

   NOTE: Asciidoctor supports font-based admonition icons, powered by Font Awesome!
   ----

   // We need to explain that the default admonition icons have different names (i.e., `icon-note` instead of `fa-note`, because they're built in to the stylesheet.

   Asciidoctor will emit HTML markup that selects the appropriate font character from the Font Awesome font for each admonition block.
   For instance, Asciidoctor selects the Font Awesome icon `icon-note` for `NOTE` admonition blocks.

   .Result: HTML output when the icons attribute is set to font
   [source,html]
   ----
   <div class="admonitionblock note">
   <table>
   <tr>
   <td class="icon">
   <i class="fa icon-note" title="Note"></i>
   </td>
   <td class="content">
   Asciidoctor supports font-based admonition icons, powered by Font Awesome!
   </td>
   </tr>
   </table>
   </div>
   ----

   This is how the admonition looks rendered.

   NOTE: Asciidoctor supports font-based admonition icons, powered by Font Awesome!

   The icons chosen are selected by the stylesheet.
   The default stylesheet maps icons to the following 5 CSS classes:

   * .admonitionblock td.icon .icon-note
   * .admonitionblock td.icon .icon-tip
   * .admonitionblock td.icon .icon-warning
   * .admonitionblock td.icon .icon-caution
   * .admonitionblock td.icon .icon-important

   If you want to customize the icon or the color that is used, you'll need to provide a custom stylesheet or override the styles using a docinfo file.
   Here's an example that shows how to change the icon for the note admonition to sticky note:

   [source,css]
   ----
   .admonitionblock td.icon .icon-note::before {
     content: "\f24a";
     color:black;
   }
   ----
   ////

   == Callout numbers and font icon mode

   In the font icon mode, xref:verbatim:callouts.adoc[callout numbers] are displayed as enclosed numbers.
   However, the icon font is not used to render these glyphs.
   Instead, they are styled this way using CSS.
   This is done to allow the range of callout numbers to be open-ended.


/docs/modules/macros/pages/keyboard-macro.adoc
==============================================

.. code-block: asciidoc

   = Keyboard Macro

   The keyboard macro allows to create a reference to a key or key sequence on a keyboard.
   You can use this macro when you need to communicate to a reader what key or key sequence to press to perform a function.

   include::partial$ui-macros-disclaimer.adoc[]

   == Keyboard macro syntax

   The keyboard macro uses the short (no target) macro syntax `+kbd:[key(+key)*]+`.
   Each key is displayed as entered in the document.
   Multiple keys are separated by a plus (e.g., `Ctrl+T`) or a comma (e.g., `Ctrl,T`).
   The plus is preferred.

   It's customary to represent alpha keys in uppercase, though this is not enforced.

   If the last key is a backslash (`\`), it must be followed by a space.
   Without this space, the processor will not recognize the macro.
   If one of the keys is a closing square bracket (`]`), it must be preceded by a backslash.
   Without the backslash escape, the macro will end prematurely.
   You can find example of these cases in the example below.

   .Using the keyboard macro syntax
   [#ex-kbd]
   ----
   include::example$ui.adoc[tag=key]
   ----

   The result of <<ex-kbd>> is displayed below.

   [%autowidth]
   include::example$ui.adoc[tag=key]


/docs/modules/macros/pages/ui-macros.adoc
=========================================

.. code-block: asciidoc

   = Button and Menu UI Macros

   include::partial$ui-macros-disclaimer.adoc[]

   == Button macro syntax

   It can be difficult to communicate to the reader that they need to press a button.
   They can't tell if you are saying "`OK`" or they are supposed to look for a button labeled *OK*.
   It's all about getting the semantics right.
   The `btn` macro to the rescue!

   .Using the button macro syntax
   [#ex-btn]
   ----
   include::example$ui.adoc[tag=button]
   ----

   The result of <<ex-btn>> is displayed below.

   ====
   include::example$ui.adoc[tag=button]
   ====

   == Menu macro syntax

   Trying to explain how to select a menu item can be a pain.
   With the `menu` macro, the symbols do the work.

   .Using the menu macro syntax
   [#ex-menu]
   ----
   include::example$ui.adoc[tag=menu]
   ----

   The instructions in <<ex-menu>> appear below.

   ====
   include::example$ui.adoc[tag=menu]
   ====

   If the menu has more than one item, it can be expressed using a shorthand.

   IMPORTANT: The shorthand syntax for menu is not on a standards track.
   You can use it for transient documents, but do not rely on it long term.

   In the shorthand syntax:

   * each item is separated by a greater than sign (`>`) with spaces on either side
   * the whole expression must be enclosed in double quotes (`"`)

   The text of the item itself may contain spaces.

   .Using the shorthand menu syntax
   [#ex-menu-short]
   ----
   include::example$ui.adoc[tag=menu-short]
   ----

   The shorthand syntax can be escaped by preceding the opening double quote with a backslash character.

   Both the menu macro and menu shorthand require the first menu item start with a word character (alphanumeric character or underscore) or ampersand (to accommodate a character reference).
   If you need the first menu item to start with a non-word character, you will need to substitute it with the equivalent character reference.
   For example, to make a menu item that starts with vertical ellipsis, you must use `\&#8942;`.

   .Using a character reference at the start of the menu
   [#ex-menu-short-charref]
   ----
   include::example$ui.adoc[tag=menu-charref]
   ----

   Subsequent menu items don't have this requirement and thus can start with any character.


/docs/modules/macros/partials/image-target.adoc
===============================================

.. code-block: asciidoc

   The target is required.
   The target may be a relative path or a URL.
   How the target is interpreted depends on the processor settings and/or output format.
   If the converter generates output that references the image, the path must be relative to the published document.
   If the converter embeds the image in the output document (e.g., inline SVG, `data-uri` is set, converting to PDF directly), the target must be resolvable at convert time.
   In the latter case, a URL will only be resolved if the security settings on the processor allows it (e.g., `allow-uri-read`).

   The target may contain space characters.
   In the HTML output, these spaces will be URL encoded (i.e., `%20`).


/docs/modules/macros/partials/ts-url-format.adoc
================================================

.. code-block: asciidoc

   // - user-manual: URLs, URL Troubleshooting sidebar
   // - troubleshoot
   // - faq: troubleshoot
   Why don't URLs containing underscores (`_`) or carets (`{caret}`) work after they're converted?::
   +
   --
   // tag::sb[]
   This problem occurs because the markup parser interprets parts of the URL (i.e., the link target) as valid text formatting markup.
   Most lightweight markup languages have this issue because they don't use a grammar-based parser.
   The AsciiDoc language plans to handle URLs more carefully in the future (see https://github.com/asciidoctor/asciidoctor/issues/281[Asciidoctor issue #281^]), which may be solved by moving to a grammar-based parser (see https://github.com/asciidoctor/asciidoctor/issues/61[Asciidoctor issue #61^]).
   Thankfully, there are many ways to include URLs of arbitrary complexity using the AsciiDoc passthrough mechanisms.

   .Solution A
   ====
   The simplest way to get a link to behave is to assign it to an attribute.

   [source]
   ----
   = Document Title
   :link-with-underscores: https://asciidoctor.org/now_this__link_works.html

   This URL has repeating underscores {link-with-underscores}.
   ----
   The AsciiDoc processor won't break links with underscores when they are assigned to an attribute because xref:subs:quotes.adoc[inline formatting markup is substituted before attributes].
   The URL remains hidden while the rest of the document is being formatted (strong, emphasis, monospace, etc.).
   ====

   .Solution B
   ====
   Another way to solve formatting glitches is to explicitly specify the formatting you want to have applied to a span of text.
   This can be done by using the xref:pass:pass-macro.adoc[inline pass macro].
   If you want to display a URL, and have it preserved, put it inside the pass macro and enable the xref:subs:apply-subs-to-text.adoc[macros substitution], which is what substitutes links.

   [source]
   ----
   This URL has repeating underscores pass:macros[https://asciidoctor.org/now_this__link_works.html].
   ----

   The pass macro removes the URL from the document, applies the `macros` substitution to the URL, and then restores the processed URL to its original location once the substitutions are complete on the whole document.

   Alternatively, you can use the xref:pass:pass-macro.adoc#def-plus[double plus inline macro] (`pass:[++]`) around the URL only.
   However, when you use this approach, the AsciiDoc processor won't recognize it as a URL any more, so you have to use the explicit `link` prefix.

   [source]
   ----
   This URL has repeating underscores link:++https://asciidoctor.org/now_this__link_works.html++[].
   ----
   ====

   For more information, see https://github.com/asciidoctor/asciidoctor/issues/625[Asciidoctor issue #625^].
   // end::sb[]
   --


/docs/modules/macros/partials/ui-macros-disclaimer.adoc
=======================================================

.. code-block: asciidoc

   IMPORTANT: In order to use the UI macros, you must set the `experimental` document attribute.
   Although this attribute is named `experimental`, the UI macros are considered a stable feature of the AsciiDoc language.
   The requirement to specify the attribute is merely an optimization for the processor.
   If the specification committee determines that an attribute is still necessary, the name of the attribute will likely change to better reflect that the macros are integral to the language.


/docs/modules/macros/examples/audio.adoc
========================================

.. code-block: asciidoc

   // tag::basic[]
   audio::ocean-waves.wav[]
   // end::basic[]

   // tag::attrs[]
   audio::ocean-waves.wav[start=60,opts=autoplay]
   // end::attrs[]

   // tag::caption[]
   .Take a zen moment
   audio::ocean-waves.wav[]
   // end::caption[]


/docs/modules/macros/examples/image.adoc
========================================

.. code-block: asciidoc

   // tag::base[]
   image::sunset.jpg[]
   // end::base[]

   // tag::base-co[]
   image::sunset.jpg[] <.> <.>
   // end::base-co[]

   // tag::qr-base[]
   image::macros:sunset.jpg[]
   // end::qr-base[]

   // tag::alt[]
   image::sunset.jpg[Sunset]
   // end::alt[]

   // tag::alt-with-comma[]
   image::sunset.jpg["Mesa Verde Sunset, by JAVH"]
   // end::alt-with-comma[]

   // tag::qr-alt[]
   image::macros:sunset.jpg[Sunset]
   // end::qr-alt[]

   // tag::attr-co[]
   .A mountain sunset <.>
   [#img-sunset,link=https://www.flickr.com/photos/javh/5448336655] <.>
   image::sunset.jpg[Sunset,200,100] <.> <.>
   // end::attr-co[]

   // tag::attr[]
   .A mountain sunset
   [#img-sunset,link=https://www.flickr.com/photos/javh/5448336655]
   image::sunset.jpg[Sunset,200,100]
   // end::attr[]

   // tag::qr-attr[]
   .A mountain sunset
   [#img-sunset,caption="Figure 1: ",link=https://www.flickr.com/photos/javh/5448336655]
   image::macros:sunset.jpg[Sunset,200,100]
   // end::qr-attr[]

   // tag::ab-url[]
   image::https://asciidoctor.org/images/octocat.jpg[GitHub mascot]
   // end::ab-url[]

   // tag::inline[]
   Click image:play.png[] to get the party started.

   Click image:pause.png[title=Pause] when you need a break.
   // end::inline[]

   // tag::qr-inline[]
   Click image:macros:play.png[] to get the party started.

   Click image:macros:pause.png[title=Pause] when you need a break.
   // end::qr-inline[]

   // tag::in-role[]
   image:sunset.jpg[Sunset,150,150,role=right] What a beautiful sunset!
   // end::in-role[]

   // tag::qr-role[]
   image:macros:sunset.jpg[Sunset,150,150,role=right] What a beautiful sunset!
   // end::qr-role[]

   // tag::role[]
   [.right.text-center]
   image::tiger.png[Tiger,200,200]
   // end::role[]

   // tag::float[]
   image::tiger.png[Tiger,200,200,float="right",align="center"]
   // end::float[]

   // tag::in-float[]
   image:linux.png[Linux,150,150,float="right"]
   You can find Linux everywhere these days!
   // end::in-float[]

   // tag::frame[]
   image:logo.png[role="related thumb right"] Here's text that will wrap around the image to the left.
   // end::frame[]

   // tag::url[]
   image::https://upload.wikimedia.org/wikipedia/commons/3/35/Tux.svg[Tux,250,350]
   // end::url[]

   // tag::in-url[]
   You can find image:https://upload.wikimedia.org/wikipedia/commons/3/35/Tux.svg[Linux,25,35] everywhere these days.
   // end::in-url[]

   // tag::base-url[]
   :imagesdir-old: {imagesdir}
   :imagesdir: https://upload.wikimedia.org/wikipedia/commons

   image::3/35/Tux.svg[Tux,250,350]

   :imagesdir: {imagesdir-old}
   // end::base-url[]

   // tag::data[]
   = Document Title
   :data-uri:
   // end::data[]


/docs/modules/macros/examples/ui.adoc
=====================================

.. code-block: asciidoc

   // tag::button[]
   Press the btn:[OK] button when you are finished.

   Select a file in the file navigator and click btn:[Open].
   // end::button[]

   // tag::qr-key[]
   |===
   |Shortcut |Purpose

   |kbd:[F11]
   |Toggle fullscreen

   |kbd:[Ctrl+T]
   |Open a new tab
   |===
   // end::qr-key[]

   // tag::key[]
   |===
   |Shortcut |Purpose

   |kbd:[F11]
   |Toggle fullscreen

   |kbd:[Ctrl+T]
   |Open a new tab

   |kbd:[Ctrl+Shift+N]
   |New incognito window

   |kbd:[\ ]
   |Used to escape characters

   |kbd:[Ctrl+\]]
   |Jump to keyword

   |kbd:[Ctrl + +]
   |Increase zoom
   |===
   // end::key[]

   // tag::menu[]
   To save the file, select menu:File[Save].

   Select menu:View[Zoom > Reset] to reset the zoom level to the default setting.
   // end::menu[]

   // tag::menu-short[]
   Select "Zoom > Reset" to reset the zoom level.
   // end::menu-short[]

   // tag::menu-charref[]
   Select "&#8942; > More Tools > Extensions" to find and enable extensions.
   // end::menu-charref[]


/docs/modules/macros/examples/url.adoc
======================================

.. code-block: asciidoc

   // tag::base[]
   The homepage for the Asciidoctor Project is https://asciidoctor.org.

   Chat with other Fedora users in the irc://irc.freenode.org/#fedora[Fedora IRC channel].

   Ask questions in the https://chat.asciidoc.org[*community chat*].
   // end::base[]

   // tag::base-co[]
   The homepage for the Asciidoctor Project is https://www.asciidoctor.org. <.>
   // end::base-co[]

   // tag::irc[]
   Chat with other Fedora users in the irc://irc.freenode.org/#fedora[Fedora IRC channel].
   // end::irc[]

   // tag::text[]
   Ask questions in the https://chat.asciidoc.org[*community chat*].
   // end::text[]

   // tag::scheme[]
   To see information about your browser, navigate to the link:about:[About Page].
   // end::scheme[]

   // tag::unconstrained[]
   search/link:https://ecosia.org[Ecosia]
   // end::unconstrained[]

   // tag::linkattrs-h[]
   = Document Title

   Let's view the raw HTML of the link:view-source:asciidoctor.org[Asciidoctor homepage,window=_blank].
   // end::linkattrs-h[]

   // tag::linkattrs[]
   Let's view the raw HTML of the link:view-source:asciidoctor.org[Asciidoctor homepage,window=_blank].
   // end::linkattrs[]

   // tag::linkattrs-s[]
   Let's view the raw HTML of the link:view-source:asciidoctor.org[Asciidoctor homepage^].
   // end::linkattrs-s[]

   // tag::css[]
   Chat with other AsciiDoc users in the https://chat.asciidoc.org[*project chat*^,role=green].
   // end::css[]

   // tag::link[]
   link:downloads/report.pdf[Get Report]
   // end::link[]

   // tag::hash[]
   link:tools.html#editors[]
   // end::hash[]

   // tag::b-base[]
   https://asciidoctor.org - automatic!

   https://asciidoctor.org[Asciidoctor]
   // end::b-base[]

   // tag::bare-email[]
   Email us at hello@example.com to say hello.
   // end::bare-email[]

   // tag::b-scheme[]
   devel@discuss.example.org

   mailto:devel@discuss.example.org[Discuss]

   mailto:join@discuss.example.org[Subscribe,Subscribe me,I want to join!]
   // end::b-scheme[]

   // tag::b-linkattrs[]
   https://chat.asciidoc.org[Discuss AsciiDoc,role=external,window=_blank]

   https://chat.asciidoc.org[Discuss AsciiDoc^]
   // end::b-linkattrs[]

   // tag::b-spaces[]
   link:++https://example.org/?q=[a b]++[URL with special characters]

   https://example.org/?q=%5Ba%20b%5D[URL with special characters]
   // end::b-spaces[]

   // tag::b-windows[]
   link:\\server\share\whitepaper.pdf[Whitepaper]
   // end::b-windows[]


/docs/modules/macros/examples/video.adoc
========================================

.. code-block: asciidoc

   ////
   Included in:
   - user-manual: Video
   - quick-ref
   ////

   // tag::base[]
   video::video-file.mp4[]
   // end::base[]

   // tag::attr[]
   video::video-file.mp4[width=640,start=60,opts=autoplay]
   // end::attr[]

   // tag::caption[]
   .A walkthrough of the product
   video::video-file.mp4[]
   // end::caption[]

   // tag::youtube[]
   video::RvRhUHTV_8k[youtube]
   // end::youtube[]

   // tag::youtube-with-list[]
   video::RvRhUHTV_8k[youtube,list=PLDitloyBcHOm49bxNhvGgg0f9NRZ5lSaP]
   // end::youtube-with-list[]

   // tag::youtube-with-list-in-target[]
   video::RvRhUHTV_8k/PLDitloyBcHOm49bxNhvGgg0f9NRZ5lSaP[youtube]
   // end::youtube-with-list-in-target[]

   // tag::youtube-with-playlist[]
   video::RvRhUHTV_8k[youtube,playlist="_SvwdK_HibQ,SGqg_ZzThDU"]
   // end::youtube-with-playlist[]

   // tag::youtube-with-playlist-in-target[]
   video::RvRhUHTV_8k,_SvwdK_HibQ,SGqg_ZzThDU[youtube]
   // end::youtube-with-playlist-in-target[]

   // tag::vimeo[]
   video::67480300[vimeo]
   // end::vimeo[]


/docs/modules/macros/examples/xref.adoc
=======================================

.. code-block: asciidoc

   ////
   Included in:
   - user-manual: URL: Internal cross References
   - quick-ref
   ////

   // tag::base[]
   The section <<anchors>> describes how automatic anchors work.
   // end::base[]

   // tag::xref-title[]
   Refer to <<Internal Cross References>>.
   // end::xref-title[]

   // tag::text[]
   Learn how to <<link-macro-attributes,use attributes within the link macro>>.
   // end::text[]

   // tag::xref-macro[]
   Learn how to xref:link-macro-attributes[use attributes within the link macro].
   // end::xref-macro[]

   // tag::bad[]
   Refer to link:document-b.html#section-b[Section B] for more information.
   // end::bad[]

   // tag::base-inter[]
   Refer to xref:document-b.adoc#section-b[Section B] for more information.
   // end::base-inter[]

   // tag::base-inter-top[]
   Refer to xref:document-b.adoc[Document B] for more information.
   // end::base-inter-top[]

   // tag::b-base[]
   See <<paragraphs>> to learn how to write paragraphs.

   Learn how to organize the document into <<section-titles,sections>>.
   // end::b-base[]

   // tag::b-inter[]
   Refer to xref:document-b.adoc#section-b[Section B of Document B] for more information.

   If you never return from xref:document-b.adoc[Document B], we'll send help.
   // end::b-inter[]


/docs/modules/verbatim/nav.adoc
===============================

.. code-block: asciidoc

   * Verbatim and Source Blocks
   ** xref:source-blocks.adoc[]
   *** xref:source-highlighter.adoc[]
   *** xref:highlight-lines.adoc[]
   *** xref:highlight-php.adoc[]
   ** xref:listing-blocks.adoc[]
   ** xref:literal-blocks.adoc[]
   ** xref:callouts.adoc[]


/docs/modules/verbatim/pages/source-blocks.adoc
===============================================

.. code-block: asciidoc

   = Source Code Blocks
   :table-caption: Table
   :url-coderay: http://coderay.rubychan.de/
   :url-highlightjs: https://highlightjs.org/
   :url-pygments: https://pygments.org
   :url-rouge: http://rouge.jneen.net
   ////
   From user manual:
   NOTE we really want this ID on the section, but there are problems w/ multiple IDs per section
   [#source-code-blocks]
   [#syntax-highlighting]
   ////

   A source block is a specialization of a xref:listing-blocks.adoc[listing block].
   Developers are accustomed to seeing source code colorized to emphasize the code's structure (i.e., keywords, types, delimiters, etc.).
   This technique is known as [.term]*syntax highlighting*.
   Since this technique is so prevalent, AsciiDoc processors will integrate at least one library to syntax highlight the source code blocks in your document.
   For example, Asciidoctor provides integration with Rouge, CodeRay, Pygments, and highlight.js, as well as an adapter API to add support for additional libraries.

   <<ex-source>> shows a listing block with the `source` style and language `ruby` applied to its content, hence a source block.

   .Source block syntax
   [source#ex-source]
   ....
   include::example$source.adoc[tag=src-base]
   ....

   The result of <<ex-source>> is rendered below.

   include::example$source.adoc[tag=src-base]

   Since a `source` block is most often used to designate a block with source code of a particular language, the `source` style itself is optional.
   The mere presence of the language on a listing block automatically promotes it to a source block.

   <<ex-implied-source>> shows a listing block implied to be a source block because a language is specified.

   .Implied source block
   [source#ex-implied-source]
   ....
   include::example$source.adoc[tag=src-implied]
   ....

   This shorthand also works if the `source-language` attribute is set on the document, which serves as the default language for source blocks.
   If the `source-language` attribute is set on the document and you want to make a regular listing block, add the `listing` style to the block.

   == Using include directives in source blocks

   You can use an xref:directives:include.adoc[include directive] to insert source code into an AsciiDoc document directly from a file.

   .Code inserted from another file
   [listing#ex-include]
   ....
   include::example$source.adoc[tag=src-inc]
   ....

   //TODO mention the use of AsciiDoc tags to include code snippets and the indent flag to reset indentation

   TIP: If you specify custom substitutions on the source block using the `subs` attribute, make sure to include the `specialcharacters` substitution if you want to preserve syntax highlighting.
   However, if you do plan to modify the substitutions, we recommend using xref:subs:apply-subs-to-blocks.adoc#incremental[incremental substitutions] instead.

   // Highlight PHP sidebar was taken from end of page and made its own page


/docs/modules/verbatim/pages/source-highlighter.adoc
====================================================

.. code-block: asciidoc

   = Source Highlighting
   :table-caption: Table

   Source highlighting is applied to text that's assigned the `source` block style (either explicitly or implicitly) and a source language.
   The source language is defined either on the block or inherited from the `source-language` document attribute.

   [#source-highlighter]
   == source-highlighter attribute

   Source highlighting isn't enabled by default.
   To enable source highlighting, you must set the `source-highlighter` attribute in the document header using an attribute entry.

   ----
   = Document Title
   :source-highlighter: <value>
   ----

   For example, here's how to enable syntax highlighting using Rouge:

   ----
   = Document Title
   :source-highlighter: rouge
   ----

   You can also declare this attribute using the CLI or API.

   [#available-source-highlighters]
   == Available source highlighters

   <<built-in-values>> lists the recognized values for the `source-highlighter` attribute and the toolchains that support the usage of the syntax highlighting libraries.

   .Built-in source-highlighter values and the supporting toolchains
   [#built-in-values%autowidth]
   |===
   |Library |Value |Toolchain

   |CodeRay
   |`coderay`
   |Asciidoctor, AsciidoctorJ, Asciidoctor PDF

   |highlight.js
   |`highlight.js`
   |Asciidoctor, AsciidoctorJ, Asciidoctor.js

   |Pygments
   |`pygments`
   |Asciidoctor, Asciidoctor PDF

   |Rouge
   |`rouge`
   |Asciidoctor, AsciidoctorJ, Asciidoctor PDF
   |===

   To use Rouge, CodeRay, or Pygments, you must have the appropriate library installed on your system.
   See xref:asciidoctor:syntax-highlighting:rouge.adoc[], xref:asciidoctor:syntax-highlighting:coderay.adoc[], or xref:asciidoctor:syntax-highlighting:pygments.adoc[] for installation instructions.

   If you're using the client-side library xref:asciidoctor:syntax-highlighting:highlightjs.adoc[], there's no need to install additional libraries.
   The generated HTML will load the required source files from a CDN, custom URL, or file path.

   .Source Highlighter vs. Syntax Highlighter
   ****
   You might notice that the `source-highlighter` attribute uses the term "`source highlighter`", whereas the library that performs the highlighting is referred to as a "`syntax highlighter`".
   What's the difference?

   * The generally accepted term for a syntax (aka code) highlighter is "`syntax highlighter`".
   * The syntax highlighter is applied to source blocks in AsciiDoc, hence why we say "`source highlighter`".

   In other words, the `source-highlighter` attribute means "`use this syntax highlighter to colorize source blocks`".
   ****

   == Apply source highlighting

   To apply highlighting to a block of source code, you must specify a source language.
   If the block is a literal block or paragraph, you must also specify the `source` style.

   The AsciiDoc language does not specify the list of valid source language values.
   Instead, the available source language values are defined by the syntax highlighter library.

   TIP: You can find the list of available languages supported by Rouge in the https://github.com/rouge-ruby/rouge/blob/master/docs/Languages.md[Rouge documentation].
   You can print a list of available languages supported by Pygments by running `pygmentize -L formatters`.
   The available languages supported by highlight.js depends on which bundle of highlight.js you are using.

   Typically, the source language value is the proper name of the language in lowercase (e.g., `ruby`, `java`).
   Most syntax highlighters also accept using the source file extension (e.g., `js`, `rb`), though it's important to be consistent.
   If the syntax highlighter doesn't recognize or support the source language, the block will not be highlighted.

   .Source block with ID and source highlighting
   [source#ex-code,line-comment=]
   ....
   include::example$source.adoc[tag=src-base-co]
   ....
   <.> The block style `source` is implied since a source language is specified.
   <.> An optional ID can be added to the block by appending it to style using the shorthand syntax (`#`) for `id`.
   <.> Assign a source language to the second position.
   <.> An implicit source block uses the listing structural container.

   The result of <<ex-code>> is displayed below.

   include::example$source.adoc[tag=src-base-co-res]

   .Source paragraph
   [source#ex-style]
   ----
   include::example$source.adoc[tag=src-para-co]
   ----
   <.> Place the attribute list directly above the paragraph.
   In this case, the `source` style is always required.
   <.> Once an empty line is encountered the source block ends.

   The result of <<ex-style>> is displayed below.

   include::example$source.adoc[tag=src-para]

   === shell vs console

   The source language for shell and console are often mixed up.
   The language `shell` is intended for the contents of a shell script, often indicated by a shebang for the generic shell.
   If the shell script is written for a particular shell, you might use that language instead (e.g., `bash` or `zsh`).
   The language `console` is intended to represent text that's typed into a console (i.e., a terminal application).

   Here's an example of when you would use `shell`:

   [source]
   ....
   [,shell]
   ----
   #!/bin/sh

   fail () {
       echo
       echo "$*"
       echo
       exit 1
   } >&2

   JAVACMD=java
   which java >/dev/null 2>&1 || fail "ERROR: no 'java' command could be found in your PATH.

   exec "$JAVACMD" "$@"
   ----
   ....

   Here's an example of when you would use `console`:

   [source]
   ....
   [source,console]
   $ asciidoctor -v
   ....

   Typically, the syntax highlighter will parse the prompt (e.g., `$`) at the start of each line, then handle the remaining text using the shell language.

   Often times, a basic console command is represented using a literal paragraph since there isn't much to be gained from syntax highlighting in this case.

   == Enable line numbering

   Provided the feature is supported by the source highlighter, you can enable line numbering on a source block by setting the `linenums` option on the block.

   IMPORTANT: Line numbering is added by the syntax highlighter, not the AsciiDoc converter.
   Therefore, to get line numbering on a source block, you must have the `source-highlighter` attribute set and the library to which it refers must support line numbering.
   When using Asciidoctor, the only syntax highlighter that does not support line numbering is highlight.js.

   The `linenums` option can either be specified as a normal block option named `linenums`, or as the third positional attribute on the block.
   The value of the positional attribute doesn't matter, though it's customary to use `linenums`.

   .Enable line numbering using the `linenums` option
   [source#ex-linenums-option]
   ....
   include::example$source.adoc[tag=linenums-option]
   ....

   .Enable line numbering using the third positional attribute
   [source#ex-linenums-posattr]
   ....
   include::example$source.adoc[tag=linenums-posattr]
   ....

   // We can't show the output since the source highlighter used for the site (highlight.js) isn't configure to support line numbering.
   ////
   The result of both <<ex-linenums-option>> and <<ex-linenums-posattr>> is displayed below:

   include::example$source.adoc[tag=linenums-option]
   ////

   == Disable source highlighting

   To disable source highlighting for a given source block, specify the language as `text` or remove the `source` style.

   [#source-language]
   == source-language attribute

   If the majority of your source blocks use the same source language, you can set the `source-language` attribute in the document header and assign a language to it.
   Setting the `source-language` document attribute implicitly promotes listing blocks to source blocks.

   .Set source-language attribute
   [source#ex-language]
   ....
   include::example$source.adoc[tag=src-lang]
   ....

   Notice that it's not necessary to specify the `source` style or source language on the block.
   To make a listing block in this situation, you must set the `listing` style on the block.

   You can override the global source language on an individual block by specifying a source language directly on the block.

   .Override source-language attribute
   [source#ex-override]
   ....
   include::example$source.adoc[tag=override]
   ....


/docs/modules/verbatim/pages/highlight-lines.adoc
=================================================

.. code-block: asciidoc

   = Highlight Select Lines

   Not to be confused with xref:source-highlighter.adoc[source highlighting], you can highlight (i.e., emphasize) specific lines in a source block in order to call attention to them.

   == Usage criteria

   Line highlighting can be applied to a source block if certain criteria are met.

   [%autowidth]
   |===
   |`source-highlighter` |Criteria to use the `highlight` attribute on a source block

   |`coderay`
   a|
   * The `linenums` option is enabled on the block.
   * The `highlight` attribute is defined on the block.

   *Line highlighting will only emphasize the line number itself.*

   |`rouge`
   a|
   * The `highlight` attribute is defined on the block.
   * The CSS to support line highlighting is supplied by docinfo.
   (Needed even if `rouge-css=style`).

   |`pygments`
   a|* The `highlight` attribute is defined on the block.

   |`highlight.js`
   |Not applicable.

   *Line highlighting isn't available when using highlight.js.*
   |===

   == highlight attribute

   Line highlighting is activated on a source block if the highlight attribute is defined and at least one of the line numbers falls in this range.

   IMPORTANT: Keep in mind that some syntax highlighter libraries require additional options (e.g., CodeRay and Rouge), and some don't support line highlighting at all (e.g., highlight.js).

   The `highlight` attribute accepts a comma or semicolon delimited list of line ranges.
   The numbers correspond to the line numbers of the source block.
   If the `start` attribute is not specified, line numbers of the source block start at 1.

   Here are some examples:

   * 1
   * 2,4,6
   * 3..5
   * 2,7..9

   A line range is represented by two numbers separated by a double period (e.g., `2..5`).
   The range is inclusive.

   === CodeRay

   .Highlight select lines when source-highlighter=coderay
   [source#ex-coderay]
   ....
   = Document Title
   :source-highlighter: coderay

   [%linenums,ruby,highlight=2..5]
   ----
   ORDERED_LIST_KEYWORDS = {
     'loweralpha' => 'a',
     'lowerroman' => 'i',
     'upperalpha' => 'A',
     'upperroman' => 'I',
   }
   ----
   ....

   When using CodeRay as the source highlighter, the `linenums` option is required to use line highlighting.
   That's because line highlighting is only applied to the line number, which is emphasized using bold text.
   CodeRay does not shade the line of code itself.

   === Rouge

   .Highlight select lines when source-highlighter=rouge
   [source#ex-rouge]
   ....
   = Document Title
   :source-highlighter: rouge
   :docinfo: shared

   [,ruby,highlight=2..5]
   ----
   ORDERED_LIST_KEYWORDS = {
     'loweralpha' => 'a',
     'lowerroman' => 'i',
     'upperalpha' => 'A',
     'upperroman' => 'I',
   }
   ----
   ....

   When using Rouge as the source highlighter, you must supply CSS to support line highlighting.
   You can do so by storing the required line highlighting CSS in a docinfo file, then including it in the output document by setting the `docinfo` document attribute.

   .Docinfo file (docinfo.html) to support line highlighting with Rouge
   [,html]
   ----
   <style>
   pre.rouge .hll {
     background-color: #ffc;
     display: block;
   }
   pre.rouge .hll * {
     background-color: initial;
   }
   </style>
   ----

   Note that this supplemental CSS is needed even when `rouge-css=style`.
   The Rouge integration does not embed the CSS for highlighting lines into the style attribute of the tag for each line.
   Instead, it sets the `hll` class on the tag (e.g., `<span class="hll">`).

   === Pygments

   .Highlight select lines when source-highlighter=pygments
   [source#ex-pygments]
   ....
   = Document Title
   :source-highlighter: pygments

   [,ruby,highlight=2..5]
   ----
   ORDERED_LIST_KEYWORDS = {
     'loweralpha' => 'a',
     'lowerroman' => 'i',
     'upperalpha' => 'A',
     'upperroman' => 'I',
   }
   ----
   ....


/docs/modules/verbatim/pages/highlight-php.adoc
===============================================

.. code-block: asciidoc

   = Highlight PHP Source Code

   The PHP language has two modes.
   It can either be used as a standalone language (pure mode) or it can be mixed with HTML (mixed mode) by putting it inside PHP tags (a form that resembles an XML processing instruction).
   This presents some challenges for the syntax highlighter.

   If the code in the source block is pure PHP, you should use the language tag `php`.
   For example:

   [listing]
   ....
   [source,php]
   ----
   echo "Hello, World!";
   ----
   ....

   If the PHP source is mixed with HTML, you should either use the language tag `html+php`, as shown here:

   [listing]
   ....
   [source,html+php]
   ----
   <p>
   <?php echo "Hello, World!"; ?>
   </p>
   ----
   ....

   Or you should use the language tag `php` and set the `mixed` option on the source block, as shown here:

   [listing]
   ....
   [source%mixed,php]
   ----
   <p>
   <?php echo "Hello, World!"; ?>
   </p>
   ----
   ....

   Under the covers, the syntax highlighter is configured to assume an implicit start PHP tag is present when the language tag is `php`.
   Both the `mixed` option and the language tag `html+php` disable this setting.


/docs/modules/verbatim/pages/listing-blocks.adoc
================================================

.. code-block: asciidoc

   = Listing Blocks
   :replace-me: I've been replaced!

   Blocks and paragraphs assigned the `listing` style display their rendered content exactly as you see it in the source.
   Listing content is converted to preformatted text (i.e., `<pre>`).
   The content is presented in a fixed-width font and endlines are preserved.
   Only xref:subs:special-characters.adoc[special characters] and callouts are replaced when the document is converted.

   The listing style can be applied to content using one of the following methods:

   * setting the `listing` style on a block or paragraph using an attribute list, or
   * enclosing the content within a pair of listing block delimiters (`----`).

   == Indent method

   When a line begins with one or more spaces it is displayed as a listing block.
   This method is an easy way to insert simple code snippets.

   .Indicate listing content using an indent
   [#ex-indent]
   ----
   include::example$listing.adoc[tag=indent]
   ----

   The result of <<ex-indent>> is rendered below.

   include::example$listing.adoc[tag=indent]

   == Listing style syntax

   The block style `listing` can be applied to a block or paragraph, by setting the attribute `listing` using an attribute list.

   .Listing style syntax
   [#ex-style]
   ----
   include::example$listing.adoc[tag=style]
   ----

   The result of <<ex-style>> is rendered below.

   include::example$listing.adoc[tag=style]

   == Delimited listing block

   A delimited listing block is surrounded by lines composed of four hyphens (`----`).
   This method is useful when the content contains empty lines.

   .Delimited listing block syntax
   [#ex-block]
   ------
   include::example$listing.adoc[tag=block]
   ------

   Here's how the block in <<ex-block>> appears when rendered.

   // The listing style must be added above the rendered block so it is rendered correctly because we're setting `source-language` in the component descriptor which automatically promotes unstyled listing blocks to source blocks.
   [listing]
   include::example$listing.adoc[tag=block]

   You should notice a few things about how the content is processed.

   * The HTML element `<pre>` is escaped, that is, it's displayed verbatim, not interpreted.
   * The endlines are preserved.
   * The phrase _delimited listing block_ isn't italicized, despite having the underscore formatting marks around it.

   Listing blocks are good for displaying snippets of raw source code, especially when used in tandem with the `source` style and `source-highlighter` attribute.
   See xref:source-blocks.adoc[] to learn more about `source` and `source-highlighter`.

   == Listing substitutions

   Content that is assigned the `listing` style, either via the explicit block style or the listing delimiters is subject to the xref:subs:index.adoc#verbatim-group[verbatim substitution group].
   Only xref:subs:special-characters.adoc[special characters] and callouts are replaced automatically in listing content.

   You can control the substitutions applied to a listing block using the `subs` attribute.

   .Delimited listing block with custom substitutions syntax
   [#ex-subs]
   ------
   [subs="+attributes"]
   ----
   This is a _delimited listing block_
   with the `subs` attribute assigned
   the incremental value `+attributes`.
   This attribute reference:

   {replace-me}

   will be replaced with the attribute's
   value when rendered.
   ----
   ------

   The result of <<ex-subs>> is rendered below.

   // The listing style must be added above the rendered block so it is rendered correctly because we're setting `source-language` in the component descriptor which automatically promotes unstyled listing blocks to source blocks.
   [listing,subs="+attributes"]
   ----
   This is a _delimited listing block_
   with the `subs` attribute assigned
   the incremental value `+attributes`.
   This attribute reference:

   {replace-me}

   will be replaced with the attribute's
   value when rendered.
   ----

   See xref:subs:apply-subs-to-blocks.adoc[] to learn more about the `subs` attribute and how to apply incremental substitutions to listing content.


/docs/modules/verbatim/pages/literal-blocks.adoc
================================================

.. code-block: asciidoc

   = Literal Blocks

   Literal blocks display the text you write exactly as you see it in the source.
   Literal text is treated as preformatted text.
   The text is presented in a fixed-width font and endlines are preserved.
   Only xref:subs:special-characters.adoc[special characters] and callouts are replaced when the document is converted.

   The literal style can be applied to content using any of the following methods:

   * indenting the first line of a paragraph by one or more spaces,
   * setting the `literal` style on a block using an attribute list, or
   * enclosing the content within a pair of literal block delimiters (`\....` ).

   == Indent method

   When a line begins with one or more spaces it is displayed as a literal block.
   This method is an easy way to insert simple code snippets.

   .Indicate literal text using an indent
   [source#ex-indent]
   ----
   include::example$literal.adoc[tag=indent]
   ----

   The result of <<ex-indent>> is rendered below.

   include::example$literal.adoc[tag=indent]

   === literal style syntax

   The literal style can be applied to a block, such as a paragraph, by setting the style attribute `literal` on the block using an attribute list.

   .Literal style syntax
   [source#ex-style]
   ----
   include::example$literal.adoc[tag=style]
   ----

   The result of <<ex-style>> is rendered below.

   include::example$literal.adoc[tag=style]

   === Delimited literal block

   Finally, you can surround the content you want rendered as literal by enclosing it in a pair of literal block delimiters (`\....`).
   This method is useful when the content contains empty lines.

   .Delimited literal block syntax
   [source#ex-block]
   ----
   include::example$literal.adoc[tag=block]
   ----

   The result of <<ex-block>> is rendered below.

   include::example$literal.adoc[tag=block]

   Notice in the output that the bold text formatting is not applied to the text nor are the three consecutive periods replaced by the ellipsis Unicode character.


/docs/modules/verbatim/pages/callouts.adoc
==========================================

.. code-block: asciidoc

   = Callouts

   Callout numbers (aka callouts) provide a means to add annotations to lines in a verbatim block.

   == Callout syntax

   Each callout number used in a verbatim block must appear twice.
   The first use, which goes within the verbatim block, marks the line being annotated (i.e., the target).
   The second use, which goes below the verbatim block, defines the annotation text.
   Multiple callout numbers may be used on a single line.

   IMPORTANT: The callout number (at the target) must be placed at the end of the line.

   Here's a basic example of a verbatim block that uses callouts:

   .Callout syntax
   [source#ex-basic,subs=-callouts]
   ....
   include::example$callout.adoc[tag=basic]
   ....

   The result of <<ex-basic>> is rendered below.

   include::example$callout.adoc[tag=basic]

   Since callout numbers can interfere with the syntax of the code they are annotating, an AsciiDoc processor provides several features to hide the callout numbers from both the source and the converted document.
   The sections that follow detail these features.

   == Copy and paste friendly callouts

   If you add callout numbers to example code in a verbatim (e.g., source) block, and a reader selects that source code in the generated HTML, we don't want the callout numbers to get caught up in the copied text.
   If the reader pastes that example code into a code editor and tries to run it, the extra characters that define the callout numbers will likely lead to compile or runtime errors.
   To mitigate this problem, and AsciiDoc processor uses a CSS rule to prevent the callouts from being selected.
   That way, the callout numbers won't get copied.

   On the other side of the coin, you don't want the callout annotations or CSS messing up your raw source code either.
   You can tuck your callouts neatly behind line comments.
   When font-based icons are enabled (e.g., `icons=font`), the AsciiDoc processor will recognize the line comments characters in front of a callout number--optionally offset by a space--and remove them when converting the document.
   When font-based icons aren't enabled, the line comment characters are not removed so that the callout numbers remain hidden by the line comment.

   Here are the line comments that are supported:

   .Prevent callout copy and paste
   [source#ex-prevent,subs=-callouts]
   ....
   include::example$callout.adoc[tag=b-nonselect]
   ....

   The result of <<ex-prevent>> is rendered below.

   // The listing style must be added above the rendered block so it is rendered correctly because we're setting `source-language` in the component descriptor which automatically promotes unstyled listing blocks to source blocks.
   [listing]
   include::example$callout.adoc[tag=b-nonselect]

   === Custom line comment prefix

   An AsciiDoc processor recognizes the most ubiquitous line comment prefixes as a convenience.
   If the source language you're embedding does not support one of these line comment prefixes, you can customize the prefix using the `line-comment` attribute on the block.

   Let's say we want to tuck a callout behind a line comment in Erlang code.
   In this case, we would set the `line-comment` character to `%`, as shown in this example:

   .Custom line comment prefix
   [source#ex-line-comment,subs=-callouts]
   ....
   include::example$callout.adoc[tag=line-comment]
   ....

   The result of <<ex-line-comment>> is rendered below.

   // The listing style must be added above the rendered block so it is rendered correctly because we're setting `source-language` in the component descriptor which automatically promotes unstyled listing blocks to source blocks.
   [listing]
   include::example$callout.adoc[tag=line-comment]

   Even though it's not specified in the attribute, one space is still permitted immediately following the line comment prefix.

   === Disable line comment processing

   If the source language you're embedding does not support trailing line comments, or the line comment prefix is being misinterpreted, you can disable this feature using the `line-comment` attribute.

   Let's say we want to put a callout at the end of a block delimiter for an open block in AsciiDoc.
   In this case, the processor will think the double hyphen is a line comment, when in fact it's the block delimiter.
   We can disable line comment processing by setting the `line-comment` character to an empty value, as shown in this example:

   .No line comment prefix
   [source#ex-disable-line-comment,subs=-callouts]
   ....
   include::example$callout.adoc[tag=disable-line-comment]
   ....

   The result of <<ex-disable-line-comment>> is rendered below.

   // The listing style must be added above the rendered block so it is rendered correctly because we're setting `source-language` in the component descriptor which automatically promotes unstyled listing blocks to source blocks.
   [listing]
   include::example$callout.adoc[tag=disable-line-comment]

   Since the language doesn't support trailing line comments, there's no way to hide the callout number in the raw source.

   === XML callouts

   XML doesn't have line comments, so our "`tuck the callout behind a line comment`" trick doesn't work here.
   To use callouts in XML, you must place the callout's angled brackets around the XML comment and callout number.

   Here's how it appears in a listing:

   .XML callout syntax
   [source#ex-xml,subs=-callouts]
   ....
   include::example$callout.adoc[tag=source-xml]
   ....

   The result of <<ex-xml>> is rendered below.

   include::example$callout.adoc[tag=source-xml]

   Notice the comment has been replaced with a circled number that cannot be selected (if not using font icons it will be
   rendered differently and selectable).
   Now both you and the reader can copy and paste XML source code containing callouts without worrying about errors.

   == Callout icons

   The font icons setting also enables callout icons drawn using CSS.

   ----
   include::example$callout.adoc[tag=co-icon]
   ----
   <.> Activates the font-based icons in the HTML5 backend.
   <.> Admonition block that uses a font-based icon.


/docs/modules/verbatim/examples/callout.adoc
============================================

.. code-block: asciidoc

   // tag::b-nonselect[]
   ----
   line of code // <1>
   line of code # <2>
   line of code ;; <3>
   line of code <!--4-->
   ----
   <1> A callout behind a line comment for C-style languages.
   <2> A callout behind a line comment for Ruby, Python, Perl, etc.
   <3> A callout behind a line comment for Clojure.
   <4> A callout behind a line comment for XML or SGML languages like HTML.
   // end::b-nonselect[]

   // tag::line-comment[]
   [source,erlang,line-comment=%]
   ----
   -module(hello_world).
   -compile(export_all).

   hello() ->
       io:format("hello world~n"). % <1>
   ----
   <1> A callout behind a custom line comment prefix.
   // end::line-comment[]

   // tag::disable-line-comment[]
   [source,asciidoc,line-comment=]
   ----
   -- <1>
   A paragraph in an open block.
   --
   ----
   <1> An open block delimiter.
   // end::disable-line-comment[]

   // tag::source-xml[]
   [source,xml]
   ----
   <section>
     <title>Section Title</title> <!--1-->
   </section>
   ----
   <1> The section title is required.
   // end::source-xml[]

   // tag::basic[]
   [source,ruby]
   ----
   require 'sinatra' <1>

   get '/hi' do <2> <3>
     "Hello World!"
   end
   ----
   <1> Library import
   <2> URL mapping
   <3> Response block
   // end::basic[]

   // tag::b-src[]
   [source,ruby]
   ----
   require 'sinatra' // <1>

   get '/hi' do // <2>
     "Hello World!" // <3>
   end
   ----
   <1> Library import
   <2> URL mapping
   <3> HTTP response body
   // end::b-src[]

   // tag::co-icon[]
   = Document Title
   :icons: font <1>

   NOTE: Asciidoctor supports font-based admonition
   icons, powered by Font Awesome! <2>
   // end::co-icon[]


/docs/modules/verbatim/examples/listing.adoc
============================================

.. code-block: asciidoc

   // tag::indent[]
    $ cd secure/vault/defops
   // end::indent[]

   // tag::style[]
   [listing]
   This is an example of a paragraph assigned
   the `listing` style in an attribute list.
   Notice that the monospace marks are
   preserved in the output.
   // end::style[]

   // tag::block[]
   ----
   This is a _delimited listing block_.

   The content inside is displayed as <pre> text.
   ----
   // end::block[]

   // tag::qr-listing[]
   .Gemfile.lock
   ----
   GEM
     remote: https://rubygems.org/
     specs:
       asciidoctor (2.0.15)

   PLATFORMS
     ruby

   DEPENDENCIES
     asciidoctor (~> 2.0.15)
   ----
   // end::qr-listing[]

   // tag::subs[]
   :release-version: pass:a[{release-version}]

   [source,xml,subs=attributes+]
   ----
   <dependency>
     <groupId>org.asciidoctor</groupId>
     <artifactId>asciidoctorj</artifactId>
     <version>{release-version}</version>
   </dependency>
   ----
   // end::subs[]

   // tag::subs-out[]
   [source,xml,subs=attributes+]
   ----
   <dependency>
     <groupId>org.asciidoctor</groupId>
     <artifactId>asciidoctorj</artifactId>
     <version>{release-version}</version>
   </dependency>
   ----
   // end::subs-out[]


/docs/modules/verbatim/examples/literal.adoc
============================================

.. code-block: asciidoc

   // tag::indent[]
    ~/secure/vault/defops
   // end::indent[]

   // tag::qr-para[]
   A normal paragraph.

    A literal paragraph.
    One or more consecutive lines indented by at least one space.

    The text is shown in a fixed-width (typically monospace) font.
    The lines are preformatted (i.e., as formatted in the source).
    Spaces and newlines,
    like the ones in this sentence,
    are preserved.
   // end::qr-para[]

   // tag::b-imp-code[]
   Normal line.

    Indent line by one space to create a literal line.

   Normal line.
   // end::b-imp-code[]

   // tag::style[]
   [literal]
   error: 1954 Forbidden search
   absolutely fatal: operation lost in the dodecahedron of doom
   Would you like to try again? y/n
   // end::style[]

   // tag::block[]
   ....
   Kismet: Where is the *defensive operations manual*?

   Computer: Calculating ...
   Can not locate object.
   You are not authorized to know it exists.

   Kismet: Did the werewolves tell you to say that?

   Computer: Calculating ...
   ....
   // end::block[]

   // tag::b-block[]
   ....
   error: 1954 Forbidden search
   absolutely fatal: operation lost in the dodecahedron of doom

   Would you like to try again? y/n
   ....
   // end::b-block[]


/docs/modules/verbatim/examples/source.adoc
===========================================

.. code-block: asciidoc

   // tag::src-base[]
   [source,ruby]
   ----
   require 'sinatra'

   get '/hi' do
     "Hello World!"
   end
   ----
   // end::src-base[]

   // tag::src-implied[]
   [,ruby]
   ----
   require 'sinatra'

   get '/hi' do
     "Hello World!"
   end
   ----
   // end::src-implied[]

   // tag::src-base-co[]
   [#hello,ruby] <.> <.> <.>
   ---- <.>
   require 'sinatra'

   get '/hi' do
     "Hello World!"
   end
   ----
   // end::src-base-co[]

   // src-base-co-res is the result of src-base-co
   // tag::src-base-co-res[]
   [#hello,ruby]
   ----
   require 'sinatra'

   get '/hi' do
     "Hello World!"
   end
   ----
   // end::src-base-co-res[]

   // tag::src-para-co[]
   [source,xml] <.>
   <meta name="viewport"
     content="width=device-width, initial-scale=1.0">
   <.>
   This is normal content.
   // end::src-para-co[]

   // tag::src-para[]
   [source,xml]
   <meta name="viewport"
     content="width=device-width, initial-scale=1.0">

   This is normal content.
   // end::src-para[]

   // tag::src-lang[]
   = Document Title
   :source-highlighter: pygments
   :source-language: java

   ----
   public void setAttributes(Attributes attributes) {
       this.options.put(ATTRIBUTES, attributes.map());
   }
   ----
   // end::src-lang[]

   // tag::override[]
   = Document Title
   :source-highlighter: pygments
   :source-language: java

   [,ruby]
   require 'sinatra'
   // end::override[]

   // tag::src-inc[]
   [,ruby]
   ----
   \include::app.rb[]
   ----
   // end::src-inc[]

   // tag::rel[]
   :sourcedir: src/main/java

   [source,java]
   ----
   \include::{sourcedir}/org/asciidoctor/Asciidoctor.java[]
   ----
   // end::rel[]

   // tag::ind[]
   [source,ruby]
   ----
   \include::lib/app.rb[tag=main,indent=0]
   ----
   // end::ind[]

   // tag::fence[]
   ```ruby
   require 'sinatra'

   get '/hi' do
     "Hello World!"
   end
   ```
   // end::fence[]

   // tag::linenums-option[]
   [%linenums,ruby]
   ----
   puts 1
   puts 2
   puts 3
   ----
   // end::linenums-option[]

   // tag::linenums-posattr[]
   [,ruby,linenums]
   ----
   puts 1
   puts 2
   puts 3
   ----
   // end::linenums-posattr[]


/docs/modules/tables/nav.adoc
=============================

.. code-block: asciidoc

   * Tables
   ** xref:build-a-basic-table.adoc[]
   ** xref:add-title.adoc[]
   *** xref:customize-title-label.adoc[]
   *** xref:turn-off-title-label.adoc[]
   //** Assign IDs and Attributes
   //* Working with Columns
   ** xref:add-columns.adoc[]
   *** xref:adjust-column-widths.adoc[]
   *** xref:align-by-column.adoc[]
   *** xref:format-column-content.adoc[]
   //* Working with Rows and Cells
   ** xref:add-cells-and-rows.adoc[]
   *** xref:add-header-row.adoc[]
   *** xref:add-footer-row.adoc[]
   *** xref:align-by-cell.adoc[]
   *** xref:format-cell-content.adoc[]
   *** xref:span-cells.adoc[]
   *** xref:duplicate-cells.adoc[]
   //* Layout and Styles
   ** xref:width.adoc[]
   ** xref:borders.adoc[]
   ** xref:striping.adoc[]
   ** xref:orientation.adoc[]
   ** xref:assign-a-role.adoc[]
   ** xref:nested.adoc[]
   ** xref:data-format.adoc[]
   ** xref:table-ref.adoc[]


/docs/modules/tables/pages/build-a-basic-table.adoc
===================================================

.. code-block: asciidoc

   = Build a Basic Table
   :page-aliases: index.adoc

   A table is a delimited block that can have optional customizations, such as an ID and a title, as well as table-specific attributes, options, and roles.
   However, at its most basic, a table only needs columns and rows.

   On this page, you'll learn:

   * [x] How to set up an AsciiDoc table block and its attribute list.
   * [x] How to add columns to a table using the `cols` attribute.
   * [x] How to add cells to a table and arrange them into rows.
   * [x] How to designate a row as the table's header row.

   == Create a table with two columns and three rows

   In <<ex-cols>>, we'll assign the `cols` attribute a list of column specifiers.
   A column specifier represents a column.

   .Set up a table with two columns
   [source#ex-cols]
   ----
   [cols="1,1"] <.> <.>
   |=== <.>
   ----
   <.> On a new line, create an attribute list.
   Set the `cols` attribute, followed by an equals sign (`=`).
   <.> Assign a list of comma-separated column specifiers enclosed in double quotation marks (`"`) to `cols`.
   Each column specifier represents a column.
   <.> On the line directly after the attribute list, enter the opening table delimiter.
   A table delimiter is one vertical bar followed by three equals signs (`|===`).
   This delimiter starts the table block.

   The table in <<ex-cols>> will contain two columns because there are two comma-separated entries in the list assigned to `cols`.
   Each entry in the list is called a column specifier.
   A [.term]*column specifier* represents a column and the width, alignment, and style properties assigned to that column.
   When each column specifier is the same number, in this case the integer `1`, all of the columns`' widths will be identical.
   Each column in <<ex-cols>> will be the same width regardless of how much content they contain.

   Next, let's add three rows to the table.
   Each row has the same number of cells.
   Since the table in <<ex-rows>> has two columns, each row will contain two cells.
   A cell starts with a vertical bar (`|`).

   .Add three rows to the table
   [source#ex-rows]
   ----
   [cols="1,1"]
   |===
   |Cell in column 1, row 1 <.>
   |Cell in column 2, row 1 <.>
   <.>
   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3 <.>
   |=== <.>
   ----
   <.> To create a new cell, press kbd:[Shift+|].
   After the vertical bar (`|`), enter the content you want displayed in that cell.
   <.> On a new line, start another cell with a `|`.
   Each consecutive cell is placed in a separate, consecutive column in a row.
   <.> Rows are separated by one or more empty lines.
   <.> When you finish adding cells to your table, press kbd:[Enter] to go to a new line.
   <.> Enter the closing delimiter (`|===`) to end the table block.

   TIP: The suggestion to start each cell on its own line and to separate rows by empty lines is merely a stylistic choice.
   You can enter xref:add-cells-and-rows.adoc[more than one cell or all of the cells in a row on the same line] since the processor creates a new cell each time it encounters a vertical bar (`|`).

   The table from <<ex-rows>> is displayed below.
   It contains two columns and three rows of text positioned and styled using the default alignment, style, border, and width attribute values.

   [cols="1,1"]
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2 |Cell in column 2, row 2
   |Cell in column 1, row 3 |Cell in column 2, row 3
   |===

   In addition to the xref:add-columns.adoc[cols attribute], you can identify the number of columns using a xref:add-columns.adoc#column-multiplier[column multiplier] or xref:add-columns.adoc#implicit-cols[the table's first row].
   However, the `cols` attribute is required to customize the xref:adjust-column-widths.adoc[width], xref:align-by-column.adoc[alignment], or xref:format-column-content.adoc[style] of a column.

   === Add a header row to the table

   Let's add a header row to the table in <<ex-header>>.
   You can implicitly identify the first row of a table as a header row by entering all of the first row's cells on the line directly after the opening table delimiter.

   .Add a header row to the table
   [source#ex-header]
   ----
   [cols="1,1"]
   |===
   |Cell in column 1, header row |Cell in column 2, header row <.>
   <.>
   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3

   |Cell in column 1, row 4
   |Cell in column 2, row 4
   |===
   ----
   <.> On the line directly after the opening delimiter (`|===`), enter all of the first row's cells on a single line.
   <.> Leave the line directly after the header row empty.

   The table from <<ex-header>> is displayed below.

   [cols="1,1"]
   |===
   |Cell in column 1, header row |Cell in column 2, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3

   |Cell in column 1, row 4
   |Cell in column 2, row 4
   |===

   A header row can also be identified by assigning xref:add-header-row.adoc[header to the options attribute].


/docs/modules/tables/pages/add-title.adoc
=========================================

.. code-block: asciidoc

   = Add a Title to a Table
   :navtitle: Add a Title
   // TODO/FIX: When soft unset is used from the Antora playbook, and then the attribute is reset in the document, it doesn't use the default value, so "Table" has to be explicitly assigned. Otherwise the label is simply the incremented number (i.e., "1.").
   :table-caption: Table

   A table can have an optional title (i.e., table caption).
   To add a title to a table, use the block title syntax.

   .Add an optional title to a table
   [source#ex-title]
   ----
   .A table with a title <.>
   [%autowidth]
   |===
   |Column 1, header row |Column 2, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===
   ----
   <.> On the line directly above the table's opening delimiter (or above its optional attribute line, as shown here), enter a dot (`.`) directly followed by the text of the title.

   The table from <<ex-title>> is displayed below.

   .A table with a title
   [%autowidth]
   |===
   |Column 1, header row |Column 2, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===

   You'll notice in the above result, that the processor automatically added _Table 1._ in front of the table's title.
   This title label can be xref:customize-title-label.adoc[customized] or xref:turn-off-title-label.adoc[deactivated].


/docs/modules/tables/pages/customize-title-label.adoc
=====================================================

.. code-block: asciidoc

   = Customize the Title Label
   :table-caption: Data Set

   When you xref:add-title.adoc[add a title to a table], the processor automatically prefixes it with the label _Table <n>._, where _<n>_ is the 1-based index of all of the titled tables in the document.
   This label can be modified at the document level or per table.
   It can also be xref:turn-off-title-label.adoc[deactivated].

   == Modify the label using table-caption

   You can change the label for all titled tables using the document attribute `table-caption`.
   (Don't let the attribute's name mislead you.
   It's the attribute that controls the table title labels at the document level.)

   In the document header, set the `table-caption` attribute and assign it your custom label text.

   [source]
   ----
   = Document Title
   :table-caption: Data Set <.> <.>
   ----
   <.> Set the document attribute `table-caption` and assign it the text you want to precede each table title.
   <.> Don't enter a number after the label text.
   The processor will automatically insert and increment the number.

   In <<ex-label>>, the first and third tables have a title, but the second table doesn't have a title.

   .Add two titled tables and one untitled table to a document
   [source#ex-label]
   ----
   = Document Title
   :table-caption: Data Set

   .A table with a title
   [cols="2,1"]
   |===
   |Lots and lots of data |A little data

   |834,734 |3
   |3,999,271.5601 |5
   |===

   |===
   |Group |Climate |Example

   |A
   |Tropical
   |Suva, Fiji

   |B
   |Arid
   |Lima, Peru
   |===

   .Another table with a title
   |===
   |Value |Result |Notes

   |Null |A mystery |See Appendix R
   |===
   ----

   Since `table-caption` is assigned the value `Data Set`, any table title should be preceded with the label _Data Set <n>._
   The three tables from <<ex-label>> are displayed below.

   .A table with a title
   [cols="2,1"]
   |===
   |Lots and lots of data |A little data

   |834,734 |3
   |3,999,271.5601 |5
   |===

   |===
   |Group |Climate |Example

   |A
   |Tropical
   |Suva, Fiji

   |B
   |Arid
   |Lima, Peru
   |===

   .Another table with a title
   |===
   |Value |Result |Notes

   |Null |A mystery |See Appendix R
   |===

   Notice that the table that doesn't have a title didn't get a label nor was it counted when the processor incremented the label number.
   Therefore, the third table is assigned the label _Data Set 2._

   == Modify the label of an individual table using caption

   You can customize the label on an individual table by setting the `caption` attribute.
   (Don't let the name of the attribute mislead you.
   The caption attribute only sets the caption's label, not the whole caption line).
   When using `caption`, assign it the exact value you want displayed (including trailing spaces).
   Labels assigned using `caption` don't get an automatically incremented number and only apply to the table they are set on.

   CAUTION: If you want a space between the label and the title, you must add a trailing space to the value of the caption attribute.

   .Modify the label using caption
   [source#ex-caption]
   ----
   [caption="Table A. "] <.> <.>
   .A table with a custom label
   [cols="3*"]
   |===
   |Null
   |A mystery
   |See Appendix R
   |===
   ----
   <.> Create an attribute list directly above the table's title and set the named attribute `caption`, followed by an equals sign (`=`), and then a value.
   <.> Enclose the value in double quotation marks (`"`).
   Otherwise the processor will remove any trailing whitespaces, and the title text will start directly after the last character of the label.

   The table from <<ex-caption>> is displayed below.

   [caption="Table A. "]
   .A table with a custom label
   [cols="3*"]
   |===
   |Null
   |A mystery
   |See Appendix R
   |===

   If you create any subsequent tables in your document and don't set `caption` on them, the title labels will revert to the value assigned to `table-caption`.

   If you want the caption of the table to only consist of the caption label, use the following syntax:

   [source]
   ----
   [caption=,title="{table-caption} {counter:table-number}"]
   include::example$table.adoc[tag=b-col-h]
   ----

   Alternately, you can write is as follows:

   [source]
   ----
   .{empty}
   [caption="{table-caption} {counter:table-number}"]
   include::example$table.adoc[tag=b-col-h]
   ----


/docs/modules/tables/pages/turn-off-title-label.adoc
====================================================

.. code-block: asciidoc

   = Turn Off the Title Label
   :table-caption!:

   == Disable the label using table-caption

   You can disable the title label for all of the tables in a document by unsetting the `table-caption` document attribute.

   [source]
   ----
   = Title of Document
   :table-caption!: <.>

   .A table with a title but no label
   |===
   |Value |Result |Notes

   |Null |A mystery |See Appendix R
   |===
   ----
   <.> In an attribute entry, enter the name of the attribute, `table-caption`, and append a bang (`!`) to the end of the name.
   This unsets the attribute.

   When `table-caption` is unset, table titles aren't preceded by a label and label number.

   .A table with a title but no label
   |===
   |Value |Result |Notes

   |Null |A mystery |See Appendix R
   |===

   == Disable the label using caption

   To remove the label on an individual table, assign an empty value to the `caption` attribute.

   [source]
   ----
   [caption=] <.>
   .A table with a title but no label
   [cols="2,1"]
   |===
   |Lots and lots of data |A little data

   |834,734 |3
   |3,999,271.5601 |5
   |===
   ----
   <.> Enter the attribute's name, `caption`, in an attribute list directly above the table title, followed by an equals sign (`=`).
   Don't enter a value after the `=`.

   The table from the previous example is displayed below.

   [caption=]
   .A table with a title but no label
   [cols="2,1"]
   |===
   |Lots and lots of data |A little data

   |834,734 |3
   |3,999,271.5601 |5
   |===


/docs/modules/tables/pages/add-columns.adoc
===========================================

.. code-block: asciidoc

   = Add Columns to a Table

   The number of columns in a table is specified by the `cols` attribute or <<implicit-cols,by the number of cells found in the first non-empty line>> after the opening table delimiter (`|===`).

   [#cols-attribute]
   == Specify the number of columns with the cols attribute

   The `cols` attribute is set in the attribute list on a table block.
   It accepts a comma-separated list of column specifiers.
   [[col-specifier]]Each [.term]*column specifier* represents a column and the width, alignment, and style properties assigned to that column.
   A column specifier is commonly represented by a number, but in some cases, can be represented by a symbol or letter.
   In <<ex-cols>>, `cols` is assigned a list of four numeric column specifiers.

   .Assign column specifiers to the cols attribute
   [source#ex-cols]
   ----
   [cols="1,1,1,1"]
   ----

   In <<ex-cols>>, the value assigned to `cols`  contains four column specifiers.
   The number of entries in the value's list determines the number of columns in the table.
   That means the table in the above example will contain four columns.
   When the specifier is a number, such as `1` or `50`, the integer represents the xref:adjust-column-widths.adoc[width of the column in proportion to the other columns in the table].
   In <<ex-cols>>, each column will be the same width because the integer in each specifier is the same.
   Let's look at the column specifiers in <<ex-cols-alt>> and compare it to <<ex-cols>>.

   .Assign column specifiers to the cols attribute
   [source#ex-cols-alt]
   ----
   [cols="3,3,3,3"]
   ----

   Both <<ex-cols>> and <<ex-cols-alt>> will produce tables with four columns of equal width.
   Let's use the `cols` value in <<ex-cols-alt>> to create a table.

   .Create a table with four columns of equal width
   [source#ex-cols-table]
   ----
   [cols="3,3,3,3"] <.>
   |=== <.>
   |Column 1 |Column 2 |Column 3 |Column 4 <.>
   <.>
   |Cell in column 1 <.>
   |Cell in column 2
   |Cell in column 3
   |Cell in column 4
   |=== <.>
   ----
   <.> In an attribute list, set the `cols` attribute, followed by an equals sign (`=`), and then a list of comma-separated column specifiers enclosed in double quotation marks (`"`).
   <.> On the line directly after the attribute list, enter the opening table delimiter.
   A table delimiter is one vertical bar followed by three equals signs (`|===`).
   <.> A table cell is specified by a vertical bar (`|`).
   Since four consecutive cells are entered on the first line directly after the delimiter, this row is implicitly set as the table's header row.
   <.> Insert an empty line after the header row.
   <.> The cells for the next row can be entered on a single line or on individual lines.
   <.> On a new line after the last cell of the last row, enter another table delimiter (`|===`) to close the table block.

   <<ex-cols-table>> creates the table displayed below.

   .Result of <<ex-cols-table>>
   [cols="3,3,3,3"]
   |===
   |Column 1 |Column 2 |Column 3 |Column 4

   |Cell in column 1
   |Cell in column 2
   |Cell in column 3
   |Cell in column 4
   |===

   As specified, the table includes four columns of equal width, a header row, and a regular row.
   Since all of the columns in <<ex-cols-table>> are assigned the same width via their column specifiers (i.e., `3`), the number of columns could be specified with a <<column-multiplier,column multiplier>>.
   Or, you could adjust the width of an individual column by xref:adjust-column-widths.adoc[increasing the numerical value of its specifier].

   [#column-multiplier]
   === Using a column multiplier

   A [.term]*column multiplier* allows you to apply the same width, horizontal alignment, vertical alignment, and content style to multiple, consecutive columns in a table.
   A multiplier consists of an integer (`<n>`) and an asterisk (`+*+`).
   The integer represents the number of consecutive columns to be added to the table.
   The asterisk (`+*+`) is called the [.term]*multiplier operator* and is placed directly after the integer (`+<n>*+`).
   The operator tells the converter to interpret the integer as part of a column multiplier instead of a column specifier.

   For example, let's rewrite the value of `[cols="5,5,5"]` as a column multiplier.

   .Represent [cols="5,5,5"] using a column multiplier
   [source]
   ----
   [cols="3*"] <.>
   ----
   <.> Assign an integer to `cols` that represents the number of columns in the table.
   Enter the multiplier operator (`+*+`) directly after the integer.

   The integer `3`, combined with the `+*+` operator, indicates that the table will contain three columns of equal width.

   You can use a multiplier in a comma-separated list with column specifiers, too.
   In <<ex-spec-and-multiplier>>, the first column is represented by a column specifier, and the next three columns are represented by a multiplier.

   .Assign a column specifier and a column multiplier to cols
   [source#ex-spec-and-multiplier]
   ----
   [cols="5,3*"]
   |===
   |Column 1 |Column 2 |Column 3 |Column 4

   |Cell in column 1
   |Cell in column 2
   |Cell in column 3
   |Cell in column 4
   |===
   ----

   As shown below, <<ex-spec-and-multiplier>> creates a table containing a xref:adjust-column-widths.adoc[wide first column] followed by three columns of equal width.

   .Result of <<ex-spec-and-multiplier>>
   [cols="5,3*"]
   |===
   |Column 1 |Column 2 |Column 3 |Column 4

   |Cell in column 1
   |Cell in column 2
   |Cell in column 3
   |Cell in column 4
   |===

   [#cols-format]
   === Alignment and style column operators

   AsciiDoc provides operators that control the positioning and style of column content when the `cols` attribute is set.
   A column specifier or multiplier can contain these optional operators for one or more of the following properties:

   * xref:align-by-column.adoc#horizontal-operators[horizontal alignment]
   * xref:align-by-column.adoc#vertical-operators[vertical alignment]
   * xref:format-column-content.adoc[content style]

   Many of these operators can be applied to individual cells as well.

   [#implicit-cols]
   == Specify the number of columns using the first row

   When all of the columns in a table use the default width, alignment, and style values, you don't need to set the `cols` attribute.
   Instead, you can implicitly declare the number of columns by entering all of the first row's cells on the same line.
   The processor will derive the number columns from the number of cells in this row.
   <<ex-implicit>> uses its first row to indicate that it has three columns.

   .Create a table with three columns using its first row
   [source#ex-implicit]
   ----
   |===
   <.>
   |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 3, row 1 <.>

   |Cell in column 1, row 2 <.>
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===
   ----
   <.> After the opening delimiter, insert an empty line before the first row, unless you want the first row to be treated as header row.
   <.> Enter all of the first row's cells on a single line.
   Each cell represents one column.
   <.> The cells in subsequent rows don't need to be entered on a single line.

   The table in <<ex-implicit>> has three columns since its first row contains three cells.

   .Result of <<ex-implicit>>
   |===

   |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 3, row 1

   |Cell in column 1, row 2 |Cell in column 2, row 2 |Cell in column 3, row 2
   |===


/docs/modules/tables/pages/adjust-column-widths.adoc
====================================================

.. code-block: asciidoc

   = Adjust Column Widths
   // Check "proportional" usage

   == Column width

   The width of a column is assigned by its xref:add-columns.adoc#col-specifier[column specifier].
   The value of a column's width is either an integer or a percentage.
   The default column width is `1`.
   The integer or percentage represents the width of the column in proportion to the other columns within the total width of the table.
   The total width of a table is backend dependent.
   When using the HTML5 backend with the default Asciidoctor stylesheet, tables stretch the width of the page body unless the xref:width.adoc[table width attribute] is explicitly set.

   == Assign column widths using integers

   To assign widths to the columns in a table, set the `cols` attribute and assign it a list of comma-separated column specifiers using integers.

   .Assign column widths using integers
   [source#ex-int]
   ----
   [cols="2,1,3"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a proportional width of 2
   |This column has a proportional width of 1
   |This column has a proportional width of 3
   |===
   ----

   As seen below, the columns stretch across the width of the page according to their proportional widths.

   .Result of <<ex-int>>
   [cols="2,1,3"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a proportional width of 2
   |This column has a proportional width of 1
   |This column has a proportional width of 3
   |===

   === Increase or decrease the width of a column

   To increase the width of a column, use a bigger integer in the column's specifier.
   Let's make column 1 from <<ex-int>> the largest column in the table by increasing its width from `2` to `6` in <<ex-increase>>.

   .Increase the width of a column
   [source#ex-increase]
   ----
   [cols="6,1,3"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a proportional width of 6
   |This column has a proportional width of 1
   |This column has a proportional width of 3
   |===
   ----

   Below, the result of <<ex-increase>> shows that column 1 is now much wider than column 3.

   .Result of <<ex-increase>>
   [cols="6,1,3"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a proportional width of 6
   |This column has a proportional width of 1
   |This column has a proportional width of 3
   |===

   To decrease the width of a column, use a smaller integer in its specifier.
   In <<ex-decrease>>, let's make the width of column 3 smaller, but not quite as small as column 2, by decreasing its width from `3` to `2`.

   .Decrease the width of a column
   [source#ex-decrease]
   ----
   [cols="6,1,2"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a proportional width of 6
   |This column has a proportional width of 1
   |This column has a proportional width of 2
   |===
   ----

   The columns, displayed in the table below, have adjusted across the width of the page according to their proportional widths.

   .Result of <<ex-decrease>>
   [cols="6,1,2"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a proportional width of 6
   |This column has a proportional width of 1
   |This column has a proportional width of 2
   |===

   == Change column widths using percentage values

   Column widths can be assigned using a percentage between `1%` and `100%`.
   Like with integer values, set `cols` and assign it a list of comma-separated column specifiers using percentages.

   .Assign column widths using percentages
   [source#ex-percent]
   ----
   [cols="15%,30%,55%"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a width of 15%
   |This column has a width of 30%
   |This column has a width of 55%
   |===
   ----

   As seen in the table below, the columns stretch across the width of the page according to the percentage assigned via their column specifiers.

   .Result of <<ex-percent>>
   [cols="15%,30%,55%"]
   |===
   |Column 1 |Column 2 |Column 3

   |This column has a width of 15%
   |This column has a width of 30%
   |This column has a width of 55%
   |===

   When assigning percentages to `cols`, you don't have to include the percent sign (`%`).
   For instance, both `[cols="15%,30%,55%"]` and `[cols="15,30,55"]` are valid.


/docs/modules/tables/pages/align-by-column.adoc
===============================================

.. code-block: asciidoc

   = Align Content by Column
   // Using Wikipedia's names for the operators. For reference, see https://en.wikipedia.org/wiki/Less-than_sign

   The alignment operators allow you to horizontally and vertically align a column's content.
   They're applied to a column specifier and xref:add-columns.adoc#cols-attribute[assigned to the cols attribute].

   [#horizontal-operators]
   == Horizontal alignment operators

   Content can be horizontally aligned to the left or right side of the column as well as the center of the column.

   Flush left operator (<):: The less-than sign (`<`) left aligns the content.
   This is the default horizontal alignment.
   Flush right operator (>):: The greater-than sign (`>`) right aligns the content.
   Center operator (^):: The caret (`+^+`) centers the content.

   A horizontal alignment operator is entered in front a <<vertical-operators,vertical alignment operator>> (if present) and in front of a xref:adjust-column-widths.adoc[column's width] (if present).
   If the number of columns is assigned using a multiplier (`+<n>*+`), the horizontal alignment operator is placed directly after the multiplier operator (`+*+`).

   * `[cols="2,pass:q[#^#]1"]` A horizontal alignment operator is placed in front of the column width.
   * `[cols="pass:q[#>#].^1,2"]` A horizontal alignment operator is placed in front of a vertical alignment operator.
   * `[cols="pass:q[#>#],pass:q[#^#]"]` When a column width isn't specified, a horizontal alignment operator can represent both the column and the column content's alignment.
   * `[cols="3*pass:q[#>#]"]` The horizontal alignment operator is placed directly after a multiplier.

   === Center content horizontally in a column

   To horizontally center the content in a column, place the `+^+` operator at the beginning of the xref:add-columns.adoc#col-specifier[column's specifier].

   .Center column content horizontally
   [source#ex-horizontal]
   ----
   [cols="^4,1"]
   |===
   |This content is horizontally centered.
   |There isn't a horizontal alignment operator on this column's specifier, so the column falls back to the default horizontal alignment.
   Content is left-aligned by default.
   |===
   ----

   The table from <<ex-horizontal>> is rendered below.

   .Result of <<ex-horizontal>>
   [cols="^4,1"]
   |===
   |This content is horizontally centered.
   |There isn't a horizontal alignment operator on this column's specifier, so the column falls back to the default horizontal alignment.
   Content is left-aligned by default.
   |===

   When the columns are specified using the xref:add-columns.adoc#column-multiplier[multiplier], place the `+^+` operator after the multiplier operator (`+*+`).

   .Horizontal alignment and multiplier operator order
   [source#ex-horizontal-multiplier]
   ----
   [cols="2*^",options=header]
   |===
   |Column name
   |Column name

   |This content is horizontally centered.
   |This content is also horizontally centered.
   |===
   ----

   The table from <<ex-horizontal-multiplier>> is rendered below.

   .Result of <<ex-horizontal-multiplier>>
   [cols="2*^",options=header]
   |===
   |Column name
   |Column name

   |This content is horizontally centered.
   |This content is also horizontally centered.
   |===

   === Right align content in a column

   To align the content in a column to its right side, place the `+>+` operator in front of the column's specifier.

   .Right align column content
   [source#ex-right]
   ----
   [cols=">4,1"]
   |===
   |This content is aligned to the right side of the column.
   |There isn't a horizontal alignment operator on this column's specifier, so the column falls back to the default horizontal alignment.
   Content is left-aligned by default.
   |===
   ----

   The table <<ex-right>> is rendered below.

   .Result of <<ex-right>>
   [cols=">4,1"]
   |===
   |This content is aligned to the right side of the column.
   |There isn't a horizontal alignment operator on this column's specifier, so the column falls back to the default horizontal alignment.
   Content is left-aligned by default.
   |===

   When the columns are specified using the xref:add-columns.adoc#column-multiplier[multiplier], place the `+>+` operator after the multiplier operator (`+*+`).

   .Right alignment and multiplier operator order
   [source#ex-right-multiplier]
   ----
   [cols="2*>",options=header]
   |===
   |Column name
   |Column name

   |This content is aligned to the right side of the column.
   |This content is also aligned to the right side of the column.
   |===
   ----

   The table from <<ex-right-multiplier>> is rendered below.

   .Result of <<ex-right-multiplier>>
   [cols="2*>",options=header]
   |===
   |Column name
   |Column name

   |This content is aligned to the right side of the column.
   |This content is also aligned to the right side of the column.
   |===

   [#vertical-operators]
   == Vertical alignment operators

   Content can be vertically aligned to the top or bottom of a column's cells as well as the center of a column.
   Vertical alignment operators always begin with a dot (`.`).

   Flush top operator (.<):: The dot and less-than sign (`.<`) aligns the content to the top of the column's cells.
   This is the default vertical alignment.
   Flush bottom operator (.>):: The dot and greater-than sign (`.>`) aligns the content to the bottom of the column's cells.
   Center operator (.^):: The dot and caret (`+.^+`) centers the content vertically.

   A vertical alignment operator is entered directly after a <<horizontal-operators,horizontal alignment operator>> (if present) and before a xref:adjust-column-widths.adoc[column's width] (if present).
   If the number of columns is assigned using a multiplier (`+<n>*+`), the vertical alignment operator is placed directly after the horizontal alignment operator (if present).
   Otherwise, it's placed directly after the multiplier operator (`+*+`).

   * `[cols="2,pass:q[#.^#]1"]` A vertical alignment operator is placed in front of the column width.
   * `[cols=">pass:q[#.^#]1,2"]` The vertical alignment operator is placed after the horizontal alignment operator but before the column width.
   * `[cols="pass:q[#.^#],pass:q[#.>#]"]` When a column width doesn't need to be specified, a vertical alignment operator can represent both the column and the column content's alignment.
   * `[cols="3*pass:q[#.>#]"]` The vertical alignment operator is placed directly after a multiplier unless there is a horizontal alignment operator.
   Then it's placed after the horizontal alignment operator, (e.g., `[cols="3*^pass:q[#.>#]"]`)

   === Align content to the bottom of a column's cells

   To align the content in a column to the bottom of each cell, place the `+.>+` operator directly in front of the xref:adjust-column-widths.adoc[column's width].

   .Bottom align column content
   [source#ex-bottom]
   ----
   [cols=".>2,1"]
   |===
   |This content is vertically aligned to the bottom of the cell.
   |There isn't a vertical alignment operator on this column's specifier, so the column falls back to the default vertical alignment.
   Content is top-aligned by default.
   |===
   ----

   The table from <<ex-bottom>> is rendered below.

   .Result of <<ex-bottom>>
   [cols=".>2,1"]
   |===
   |This content is vertically aligned to the bottom of the cell.
   |There isn't a vertical alignment operator on this column's specifier, so the column falls back to the default vertical alignment.
   Content is top-aligned by default.
   |===

   === Center content vertically in a column

   To vertically center the content in a column, place the `+.^+` operator directly in front of the xref:adjust-column-widths.adoc[column's width].

   .Center column content vertically
   [source#ex-vertical]
   ----
   [cols=".^2,1"]
   |===
   |This content is centered vertically in the cell.
   |There isn't a vertical alignment operator on this column's specifier, so the column falls back to the default vertical alignment.
   Content is top-aligned by default.
   |===
   ----

   The table from <<ex-vertical>> is rendered below.

   .Result of <<ex-vertical>>
   [cols=".^2,1"]
   |===
   |This content is centered vertically in the cell.
   |There isn't a vertical alignment operator on this column's specifier, so the column falls back to the default vertical alignment.
   Content is top-aligned by default.
   |===

   To vertically align the content to the middle of the cells in all of the columns, enter the  `.^` operator after the xref:add-columns.adoc#column-multiplier[multiplier].

   .Vertical alignment and multiplier operator order
   [source#ex-vertical-multiplier]
   ----
   [cols="2*.^",options=header]
   |===
   |Column name
   |Column name

   |This content is vertically centered.
   |This content is also vertically centered.
   |===
   ----

   The table from <<ex-vertical-multiplier>> is rendered below.

   .Result of <<ex-vertical-multiplier>>
   [cols="2*.^",options=header]
   |===
   |Column name
   |Column name

   |This content is centered vertically in the cell.
   |This content is also centered vertically in the cell.
   |===

   When a horizontal alignment operator is also applied to the multiplier, then the vertical alignment operator is placed directly after the horizontal operator (e.g., `[cols="2*>.^"]`).

   == Apply horizontal and vertical alignment operators to the same column

   A column can have a vertical and horizontal alignment operator placed on its xref:add-columns.adoc#col-specifier[specifier].
   The <<horizontal-operators,horizontal operator>> always precedes the <<vertical-operators,vertical operator>>.
   Both operators precede the column width.
   When a xref:add-columns.adoc#column-multiplier[multiplier] is used, the operators are placed after the multiplier.

   .Horizontally and vertically align column content
   [source#ex-center]
   ----
   [cols="^.>2,1,>.^1"]
   |===
   |Column name |Column name |Column name

   |This content is centered horizontally and aligned to the bottom
   of the cell.
   |There aren't any alignment operators on this column's specifier,
   so the column falls back to the default alignments.
   The default horizontal alignment is left-aligned.
   The default vertical alignment is top-aligned.
   |This content is aligned to the right side of the cell and
   centered vertically.
   |===
   ----

   The table from <<ex-center>> is rendered below.

   .Result of <<ex-center>>
   [cols="^.>2,1,>.^1"]
   |===
   |Column name |Column name |Column name

   |This content is centered horizontally and aligned to the bottom
   of the cell.
   |There aren't any alignment operators on this column's specifier,
   so the column falls back to the default alignments.
   The default horizontal alignment is left-aligned.
   The default vertical alignment is top-aligned.
   |This content is aligned to the right side of the cell and
   centered vertically.
   |===

   IMPORTANT: If there is an xref:align-by-cell.adoc[alignment operator on a cell's specifier], it will override the column's alignment operator.


/docs/modules/tables/pages/format-column-content.adoc
=====================================================

.. code-block: asciidoc

   = Format Content by Column

   A column style operator is applied to a column specifier and xref:add-columns.adoc#cols-attribute[assigned to the cols attribute].

   [#cols-style]
   == Column styles and their operators

   You can style all of the content in a column by adding a style operator to a column's specifier.

   include::partial$style-operators.adoc[]

   When a style operator isn't explicitly applied to a column specifier, the `d` style is assigned automatically and the column is processed as paragraph text.

   == Apply a style operator to a column

   A style operator is always placed in the last position on a column's specifier or multiplier.

   * `[cols=">pass:q[#e#],.^3pass:q[#s#]"]` A style operator is placed directly after any other operators and the column width in the column's specifier.
   * `[cols="pass:q[#h#],pass:q[#e#]"]` When a column width isn't specified, the style operator can represent both the column and the column's content style.
   * `[cols="3*.>pass:q[#m#]"]` When a multiplier is present, the style operator is placed after any horizontal and vertical alignment operators.

   Let's apply a different style to each column in <<ex-style>>.

   .Add a style operator to each column
   [source#ex-style]
   ----
   [cols="h,m,s,e"]
   |===
   |Column 1 |Column 2 |Column 3 |Column 4

   |This column's content and borders are rendered using the table header (`h`) styles.
   |This column's content is rendered using a monospace font (m).
   |This column's content is bold (`s`).
   |This column's content is italicized (`e`).

   |This column's content and borders are rendered using the table header (`h`) styles.
   |This column's content is rendered using a monospace font (m).
   |This column's content is bold (`s`).
   |This column's content is italicized (`e`).
   |===
   ----

   The table from <<ex-style>> is displayed below.
   Note that the style applied to each column doesn't affect the xref:add-header-row.adoc[header row] or override any inline formatting.

   .Result of <<ex-style>>
   [cols="h,m,s,e"]
   |===
   |Column 1 |Column 2 |Column 3 |Column 4

   |This column's content and borders are rendered using the table header (`h`) styles.
   |This column's content is rendered using a monospace font (m).
   |This column's content is bold (`s`).
   |This column's content is italicized (`e`).

   |This column's content and borders are rendered using the table header (`h`) styles.
   |This column's content is rendered using a monospace font (m).
   |This column's content is bold (`s`).
   |This column's content is italicized (`e`).
   |===

   Additionally, if a xref:format-cell-content.adoc#override-column-style[cell specifier contains a style operator], that style will override a column's style operator.

   == Use AsciiDoc block elements in a column

   To use AsciiDoc block elements, such as delimited source blocks and lists, in a column, place the lowercase letter `a` on the column specifier.

   .Apply the AsciiDoc block style operator to the first column
   [source#ex-asciidoc]
   ....
   [cols="2a,2"]
   |===
   |Column with the `a` style operator applied to its specifier |Column using the default style

   |
   * List item 1
   * List item 2
   * List item 3
   |
   * List item 1
   * List item 2
   * List item 3

   |
   [source,python]
   ----
   import os
   print "%s" %(os.uname())
   ----
   |
   [source,python]
   ----
   import os
   print ("%s" %(os.uname()))
   ----
   |===
   ....

   The AsciiDoc block style effectively creates a nested, standalone AsciiDoc document in each cell in the column.
   The parent document's implicit attributes, such as `doctitle`, are shadowed and custom attributes are inherited.
   // what does "shadowed" actually mean???

   .Result of <<ex-asciidoc>>
   [cols="2a,2"]
   |===
   |Column with the `a` style operator applied to its specifier |Column using the default style

   |
   * List item 1
   * List item 2
   * List item 3
   |
   * List item 1
   * List item 2
   * List item 3

   |
   [source,python]
   ----
   import os
   print "%s" %(os.uname())
   ----

   |
   [source,python]
   ----
   import os
   print ("%s" %(os.uname()))
   ----
   |===

   You can also apply the xref:format-cell-content.adoc#a-operator[AsciiDoc block style operator to individual cells].


/docs/modules/tables/pages/add-cells-and-rows.adoc
==================================================

.. code-block: asciidoc

   = Add Cells and Rows to a Table
   //let's add a tip or xref to something about the "default" cell separator and data format and the alternatives that's not too invasive to the flow

   == Table cells

   [[cell-separator]]Each new cell in a table is declared with a cell separator.
   The default [.term]*cell separator* is a vertical bar (`|`).
   All of the content entered after a cell separator is included in that cell until the processor encounters a space followed by another vertical bar (`|`) or a new line that begins with a `|`.

   .Creating table cells with the default cell separator
   [source#ex-separator]
   ----
   [cols="3,2,3"]
   |===
   |This content is placed in the first cell of column 1
   |This line starts with a vertical bar so this content is placed in a new cell in column 2 |When the processor encounters a whitespace followed by a vertical bar it ends the previous cell and starts a new cell
   |===
   ----

   When the processor encounters another `|`, it creates a new cell in the next consecutive column.
   Once the processor reaches the xref:add-columns.adoc[last column assigned to the table], the next cell it encounters is placed in a new row.
   Taking into account any xref:span-cells.adoc[spans], which are applied via a <<specifiers,cell specifier>>, each row consists of the same number of cells.

   [#specifiers]
   === Cell specifiers and operators

   A [.term]*cell specifier* is a positional attribute placed directly in front of a cell separator that represents the position and style properties assigned to a cell's content.
   In the example below, a horizontal alignment operator and style operator have been assigned to the first cell's specifier.

   .Using cell specifiers
   [source#ex-specifier]
   ----
   [cols="2*"]
   |===
   >s|This cell's specifier indicates that this cell's content is right-aligned and bold.
   |The cell specifier on this cell hasn't been set explicitly, so the  default properties are applied.
   |===
   ----

   AsciiDoc provides operators to control the following cell properties:

   * xref:span-cells.adoc[span]
   * xref:duplicate-cells.adoc[duplication]
   * xref:align-by-cell.adoc#horizontal-operators[horizontal alignment]
   * xref:align-by-cell.adoc#vertical-operators[vertical alignment]
   * xref:format-cell-content.adoc[content style]

   A cell specifier only applies to the cell it's placed on, not to all of the cells in the same row.
   Also, the operator in a cell specifier will override the operator in a xref:add-columns.adoc#col-specifier[column specifier] if they belong to the same property.

   == Create a table cell

   In this section, we'll set up a table and add two rows of cells to it.
   First, let's create two cells in <<ex-cells>> and see how they get arranged into a row.

   .Add two cells to a table
   [source#ex-cells]
   ----
   [cols="1,1"] <.>
   |===
   |This cell is in column 1, row 1 <.>
   |This cell is in column 2, row 1 <.>
   |===
   ----
   <.> The table has two columns because two column specifiers are assigned to the `cols` attribute.
   <.> The processor places this cell in the first column and row of the table because the vertical bar (`|`) at the beginning of this cell is the first cell separator the processor encounters after the opening table delimiter (`|===`).
   <.> This is the second `|` the processor encounters, so this cell is placed in the second column of the first row.

   Though the two cells in <<ex-cells>> were entered on separate lines, the processor places them in the same row.

   .Result of <<ex-cells>>
   [cols="1,1"]
   |===
   |This cell is in column 1, row 1
   |This cell is in column 2, row 1
   |===

   Since the number of columns in <<ex-cells>> is set to two by the `cols` attribute, and there are two cells entered in the table, the first row is complete.
   Now, let's add two more cells to the table.

   .Add two more cells to a table
   [source#ex-more-cells]
   ----
   [cols="1,1"]
   |===
   |This cell is in column 1, row 1
   |This cell is in column 2, row 1
   <.>
   |This cell is in column 1, row 2 <.>
   |    This cell is in column 2, row 2 <.>
   |===
   ----
   <.> Separate rows by one or more empty lines.
   <.> The processor places this cell on the second row because the table has two columns and this is the third cell separator (`|`) it encounters.
   <.> Any leading or trailing spaces around the cell content is stripped by the processor.

   The table from <<ex-more-cells>> now has four cells arranged into two consecutive rows.

   .Result of <<ex-more-cells>>
   [cols="1,1"]
   |===
   |This cell is in column 1, row 1
   |This cell is in column 2, row 1

   |This cell is in column 1, row 2
   |    This cell is in column 2, row 2
   |===

   The cells in a row can be entered on the same line or consecutive lines because the row a cell in placed on is determined by the number of columns in a table and the order in which the processor encounters the cell's separator (`|`).

   [#same]
   == Enter a row's cells on a single line

   You can enter a row's cells on a single line.
   //This method is how the number or columns in a table are implicitly assigned and implicitly assign the `header` option to the table's first row.
   When entering cells on a single line, *at least one space must be entered between the last character of the previous cell's content and the cell separator (`|`) of the next cell*.

   .Cells entered on the same line
   [source#ex-single-line]
   ----
   |===
   |Column 1 |Column 2 |Column 3 <.> <.>

   |Cell in column 1, row 2 |Cell in column 2, row 2 |Cell in column 3, row 2 <.>

   |Cell in column 1, row 3 <.>
   |Cell in column 2, row 3 |Cell in column 3, row 3
   |===
   ----
   <.> Since `cols` is not set, the first row in this table must have the cells entered on a single line in order to implicitly assign three columns to the table.
   <.> The first row is entered on the line directly after the opening table delimiter (`|===`) and followed by an empty line.
   This automatically assigns the `header` option to it.
   <.> When multiple cells are entered on a single line, enter at least one space between the last character of the previous cell's content and the cell separator (`|`) of the next cell.
   <.> A row's cells can be entered on a combination of lines as long as the lines are consecutive.

   The table created in <<ex-single-line>> contains three columns and three rows.

   .Result of <<ex-single-line>>
   |===
   |Column 1 |Column 2 |Column 3

   |Cell in column 1, row 2 |Cell in column 2, row 2 |Cell in column 3, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3 |Cell in column 3, row 3
   |===

   Any leading and trailing spaces around the cell content are stripped and don't affect the table's layout when rendered.

   [#consecutive]
   == Enter a row's cells on consecutive lines

   The cells in a row can be entered on consecutive, individual lines.
   When using this method, remember to either xref:add-columns.adoc[set the cols attribute] or xref:add-columns.adoc#implicit-cols[enter the first row's cells on a single line].

   .Cells on consecutive, individual lines
   [source#ex-consecutive-lines]
   ----
   include::example$row.adoc[tag=indv]
   ----

   The `cols` attribute in <<ex-consecutive-lines>> is assigned a xref:add-columns.adoc#column-multiplier[multiplier] of `+3*+`, indicating that this table has three columns.

   .Result of <<ex-consecutive-lines>>
   include::example$row.adoc[tag=indv]

   Entering cells on consecutive lines can improve the readability (and debugging) of your raw AsciiDoc content when you're applying <<specifiers,specifiers to the cells>>, using xref:format-cell-content.adoc#a-operator[AsciiDoc block elements in the cells], or entering a lot of content into the cells.


/docs/modules/tables/pages/add-header-row.adoc
==============================================

.. code-block: asciidoc

   = Create a Header Row

   The first row of a table is promoted to a header row if the `header` value is assigned to the table's `options` attribute.
   You can assign `header` to a table's first row explicitly or implicitly.

   TIP: The header row ignores any style operators assigned via column and cell specifiers.
   It also ignores alignment operators assigned to the table's column specifiers; however, any alignment operators assigned to a cell specifier in the header row are applied.

   == Explicitly assign header to the first row

   The header row semantics and styles are explicitly assigned to the first row in a table by assigning `header` to the `options` attribute.
   The `options` attribute is set in the table's attribute list using the shorthand (`%value`) or formal syntax (`options="value"`).

   The `options` attribute is represented by the percent sign (`%`) when it's set using the shorthand syntax.
   In <<ex-short>>, `header` is assigned to using the shorthand syntax for `options`.

   .Table with `header` assigned using the shorthand syntax
   [source#ex-short]
   ----
   [%header,cols="2,2,1"] <.>
   |===
   |Column 1, header row
   |Column 2, header row
   |Column 3, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===
   ----
   <.> Values assigned using the shorthand syntax must be entered before the `cols` attribute (or any other named attributes) in a table's attribute list, otherwise the processor will ignore them.

   The table from <<ex-short>> is displayed below.

   .Result of <<ex-short>>
   [%header,cols="2,2,1"]
   |===
   |Column 1, header row
   |Column 2, header row
   |Column 3, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===

   In <<ex-formal>>, the `options` attribute is set and assigned the `header` value using the formal syntax.
   The `options` attribute accepts a comma-separated list of values.

   .Table with header assigned to the options attribute
   [source#ex-formal]
   ----
   include::example$row.adoc[tag=opt-h]
   ----

   The first row of the table in <<ex-formal>> is rendered using the corresponding header styles and semantics.

   .Result of <<ex-formal>>
   include::example$row.adoc[tag=opt-h]

   == Implicitly assign header to the first row

   You can implicitly define a header row based on how you layout the table.
   The following conventions determine when the first row automatically becomes the header row:

   . The first line of content inside the table delimiters is not empty.
   . The second line of content inside the table delimiters is empty.

   .First row is implicitly assigned header
   [source#ex-implicit]
   ----
   include::example$row.adoc[tag=impl-h]
   ----

   As seen in the result below, if all of these rules hold true, then the first row of the table is treated as a header row.

   .Result of <<ex-implicit>>
   include::example$row.adoc[tag=impl-h]

   === Deactivate the implicit assignment of header

   To suppress the implicit behavior of promoting the first row to a header row, assign the value `noheader` to the `options` attribute using the formal (`options=noheader`) or shorthand (`%noheader`) syntax.
   In <<ex-noheader>>, `noheader` is assigned using the shorthand syntax.

   .Deactivate implicit header row with noheader
   [source#ex-noheader]
   ----
   [%noheader]
   |===
   |Cell in column 1, row 1 |Cell in column 2, row 1

   |Cell in column 1, row 2 |Cell in column 2, row 2
   |===
   ----

   The table from <<ex-noheader>> is displayed below.

   .Result of <<ex-noheader>>
   [%noheader]
   |===
   |Cell in column 1, row 1 |Cell in column 2, row 1

   |Cell in column 1, row 2 |Cell in column 2, row 2
   |===

   //CAUTION: We're considering using a similar convention for enabling the footer in the future.
   //Thus, if you rely on this convention to enable the header row, it's advised that you not put all the cells in the last row on the same line unless you intend on making it the footer row.


/docs/modules/tables/pages/add-footer-row.adoc
==============================================

.. code-block: asciidoc

   = Create a Footer Row

   The last row of a table is promoted to a footer row if the `footer` value is assigned to the table's `options` attribute.

   == Assign footer to the last row

   The footer row semantics and styles are applied to the last row in a table by assigning `footer` to the `options` attribute.
   The `options` attribute is set in the table's attribute list using the shorthand (`%value`) or formal syntax (`options="value"`).

   The `options` attribute is represented by the percent sign (`%`) when it's set using the shorthand syntax.
   In <<ex-short>>, `footer` is assigned using the shorthand syntax for `options`.

   .Table with footer assigned using the shorthand syntax
   [source#ex-short]
   ----
   [%header%footer,cols="2,2,1"] <.>
   |===
   |Column 1, header row
   |Column 2, header row
   |Column 3, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2

   |Column 1, footer row
   |Column 2, footer row
   |Column 3, footer row
   |===
   ----
   <.> Values assigned using the shorthand syntax must be entered before the `cols` attribute (or any other named attributes) in a table's attribute list, otherwise the processor will ignore them.

   The table from <<ex-short>> is displayed below.

   .Result of <<ex-short>>
   [%header%footer,cols="2,2,1"]
   |===
   |Column 1, header row
   |Column 2, header row
   |Column 3, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2

   |Column 1, footer row
   |Column 2, footer row
   |Column 3, footer row
   |===

   In <<ex-formal>>, the `options` attribute is set and assigned the `footer` value using the formal syntax.
   The `options` attribute accepts a comma-separated list of values.

   .Table with footer assigned to the options attribute
   [source#ex-formal]
   ----
   include::example$row.adoc[tag=opt-f]
   ----

   The last row of the table in <<ex-formal>> is rendered using the corresponding footer styles.

   .Result of <<ex-formal>>
   include::example$row.adoc[tag=opt-f]


/docs/modules/tables/pages/align-by-cell.adoc
=============================================

.. code-block: asciidoc

   = Align Content by Cell

   The alignment operators are applied to a xref:add-cells-and-rows.adoc#specifiers[cell's specifier] and allow you to horizontally and vertically align a cell's content.

   [#horizontal-operators]
   == Horizontal alignment operators

   Content can be horizontally aligned to the left or right side of the cell as well as the center of the cell.

   Flush left operator (<):: The less-than sign (`<`) aligns the content to the left side of the cell.
   This is the default horizontal alignment.
   Flush right operator (>):: The greater-than sign (`>`) aligns the content to the right side of the cell.
   Center operator (^):: The caret (`+^+`) centers the content horizontally in the cell.

   A horizontal alignment operator is entered after a span or duplication operator (if present) and in front a <<vertical-operators,vertical alignment operator>> (if present).

   ====
   <factor><span or duplication operator><**horizontal alignment operator**><vertical alignment operator><style operator>|<cell's content>
   ====

   === Center content horizontally in a cell

   To horizontally center the content in a cell, place the `+^+` operator in front of the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).
   Don't insert any spaces between the `|` and the operator.

   .Center the content of a cell horizontally
   [source#ex-hcenter]
   ----
   include::example$align-cell.adoc[tag=hcenter]
   ----

   The table from <<ex-hcenter>> is rendered below.

   .Result of <<ex-hcenter>>
   include::example$align-cell.adoc[tag=hcenter]

   If the cell specifier includes a span (`<n>+`) or duplication (`+<n>*+`), place the `+^+` directly after the span or duplication operator.

   .Center content horizontally in spanned columns and duplicated cells
   [source#ex-factor]
   ----
   include::example$align-cell.adoc[tag=factor]
   ----

   The table from <<ex-factor>> is rendered below.

   .Result of <<ex-factor>>
   include::example$align-cell.adoc[tag=factor]

   == Align the content of a cell to the right

   To align the content in a cell to its right side, place the `>` operator in front of the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`), but after a span (`<n>+`) or duplication (`+<n>*+`) operator (if present).
   Don't insert any spaces between the `|` and the operators.

   .Right align the content of a cell
   [source#ex-right]
   ----
   include::example$align-cell.adoc[tag=right]
   ----

   The table from <<ex-right>> is rendered below.

   .Result of <<ex-right>>
   include::example$align-cell.adoc[tag=right]

   [#vertical-operators]
   == Vertical alignment operators

   Content can be vertically aligned to the top or bottom of a cell as well as the center of a cell.
   Vertical alignment operators always begin with a dot (`.`).

   Flush top operator (.<):: The dot and less-than sign (`.<`) aligns the content to the top of the cell.
   This is the default vertical alignment.
   Flush bottom operator (.>):: The dot and greater-than sign (`.>`) aligns the content to the bottom of the cell.
   Center operator (.^):: The dot and caret (`+.^+`) centers the content vertically.

   A vertical alignment operator is entered after a <<horizontal-operators,horizontal alignment operator>> (if present) and in front of a style operator (if present).

   ====
   <factor><span or duplication operator><horizontal alignment operator><**vertical alignment operator**><style operator>|<cell's content>
   ====

   === Align content to the bottom of a cell

   To align the content to the bottom of a cell, place the `+.>+` operator in front of the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).
   Don't insert any spaces between the `|` and the operator.

   .Align content to the bottom of a cell
   [source#ex-bottom]
   ----
   include::example$align-cell.adoc[tag=bottom]
   ----

   The table from <<ex-bottom>> is rendered below.

   .Result of <<ex-bottom>>
   include::example$align-cell.adoc[tag=bottom]

   If the cell specifier includes a span (`<n>+`) or duplication (`+<n>*+`), place the `.>` after the span or duplication operator.

   .Align content to the bottom of a cell that spans rows
   [source#ex-span-vertical]
   ----
   include::example$align-cell.adoc[tag=vspan]
   ----

   The table from <<ex-span-vertical>> is rendered below.

   .Result of <<ex-span-vertical>>
   include::example$align-cell.adoc[tag=vspan]

   === Center content vertically in a cell

   To vertically center the content in a cell, place the `+.^+` operator in front of the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).
   Don't insert any spaces between the `|` and the operator.

   .Center the content of a cell vertically
   [source#ex-vcenter]
   ----
   include::example$align-cell.adoc[tag=vcenter]
   ----

   The table from <<ex-vcenter>> is rendered below.

   .Result of <<ex-vcenter>>
   include::example$align-cell.adoc[tag=vcenter]

   == Apply horizontal and vertical alignment operators to the same cell

   A cell can have a vertical and horizontal alignment operator included in its cell specifier.
   The <<horizontal-operators,horizontal operator>> always precedes the <<vertical-operators,vertical operator>>.

   .Align cells horizontally and vertically
   [source#ex-combine]
   ----
   include::example$align-cell.adoc[tag=combine]
   ----

   The table from <<ex-combine>> is rendered below.

   .Result <<ex-combine>>
   include::example$align-cell.adoc[tag=combine]


/docs/modules/tables/pages/format-cell-content.adoc
===================================================

.. code-block: asciidoc

   = Format Content by Cell

   == Cell styles and their operators

   You can style all of the content in an individual cell by adding a style operator to the xref:add-cells-and-rows.adoc#specifiers[cell's specifier].

   include::partial$style-operators.adoc[]

   When a style operator isn't explicitly assigned to a cell specifier (or xref:format-column-content.adoc[column specifier]), the cell falls back to the default (`d`) style and is processed as regular paragraph text.

   == Apply a style to a table cell

   The style operator is always entered last in a xref:add-cells-and-rows.adoc#specifiers[cell specifier].
   Don't insert any spaces between the `|` and the operator.

   ====
   <factor><span or duplication operator><horizontal alignment operator><vertical alignment operator><**style operator**>|<cell's content>
   ====

   Let's apply a style operator to each cell in <<ex-cell-styles>>.

   .Apply a style operator to a cell
   [source#ex-cell-styles]
   ----
   include::example$cell.adoc[tag=styles]
   ----

   The table from <<ex-cell-styles>> is rendered below.

   .Result of <<ex-cell-styles>>
   include::example$cell.adoc[tag=styles]

   [#override-column-style]
   == Override the column style on a cell

   When you assign a style operator to a cell, it overrides the xref:format-column-content.adoc[column's style operator].
   In <<ex-override>>, the style operator assigned to the first column is overridden on two cells.
   The header row also overrides style operators.
   However, inline formatting markup is applied in addition to the style specified by an operator.

   .Override the column style using a cell style operator
   [source#ex-override]
   ----
   [cols="m,m"] <.>
   |===
   |Column 1, header row |Column 2, header row <.>

   |This content is rendered using a monospace font because the column's specifier includes the `m` operator.
   |This content is rendered using a monospace font because the column's specifier includes the `m` operator.

   s|This content is rendered as bold paragraph text because the `s` operator in the cell's specifier overrides the style operator in the column specifier. <.>
   |*This content is rendered using a monospace font because the column's specifier includes the `m` operator.
   It's also bold because it's marked up with the inline syntax for bold formatting.* <.>

   d|This content is rendered as regular paragraph text because the `d` operator in the cell's specifier overrides the style operator in the column specifier. <.>
   |This content is rendered using a monospace font because the column's specifier includes the `m` operator.
   |===
   ----
   <.> The monospace operator (`m`) is assigned to both columns.
   <.> The header row ignores any style operators assigned via column or cell specifiers.
   <.> The strong operator (`s`) is assigned to this cell's specifier, overriding the column's monospace style.
   <.> Inline formatting is applied in addition to the style assigned via a column specifier.
   <.> The default operator (`d`) is assigned to this cell's specifier, resetting it to the default text style.

   The table from <<ex-override>> is displayed below.

   .Result of <<ex-override>>
   [cols="m,m"]
   |===
   |Column 1, header row |Column 2, header row

   |This content is rendered using a monospace font because the column's specifier includes the `m` operator.
   |This content is rendered using a monospace font because the column's specifier includes the `m` operator.

   s|This content is rendered as bold paragraph text because the `s` operator in the cell's specifier overrides the style operator in the column specifier.
   |*This content is rendered using a monospace font because the column's specifier includes the `m` operator.
   It's also bold because it's marked up with the inline syntax for bold formatting.*

   d|This content is rendered as regular paragraph text because the `d` operator in the cell's specifier overrides the style operator in the column specifier.
   |This content is rendered using a monospace font because the column's specifier includes the `m` operator.
   |===

   [#a-operator]
   == Use AsciiDoc block elements in a table cell

   To use AsciiDoc block elements, such as delimited source blocks and lists, in a cell, place the `a` operator directly in front of the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).
   Don't insert any spaces between the `|` and the operator.

   .Apply the AsciiDoc block style operator to two cells
   [source#ex-asciidoc]
   ....
   include::example$cell.adoc[tag=adoc]
   ....

   The table from <<ex-asciidoc>> is rendered below.

   .Result of <<ex-asciidoc>>
   include::example$cell.adoc[tag=adoc]

   An AsciiDoc table cell effectively creates a nested document.
   As such, it inherits attributes from the parent document.
   If an attribute is set or explicitly unset in the parent document, it _cannot_ be modified in the AsciiDoc table cell.
   There are a handful of exceptions to this rule, which includes doctype, toc, notitle (and its complement, showtitle), and compat-mode.
   Any newly defined attributes in the AsciiDoc table do not impact the attributes in the parent document.
   Instead, these attributes are scoped to the table cell.


/docs/modules/tables/pages/span-cells.adoc
==========================================

.. code-block: asciidoc

   = Span Columns and Rows

   A table cell can span more than one column and row.

   == Span factor and operator

   With a [.term]*span* a table cell can stretch across adjacent columns, rows, or a block of adjacent columns and rows.
   A span consists of a span factor and a span operator.

   The [.term]*span factor* indicates the number columns, rows, or columns and rows a cell should span.

   [[col-factor]]Column span factor:: A single integer (`<n>`) that represents the number of consecutive columns a cell should span.
   [[row-factor]]Row span factor:: A single integer prefixed with a dot (`.<n>`) that represents the number of consecutive rows a cell should span.
   [[block-factor]]Block span factor:: Two integers (`<n>.<n>`) that represent a block of adjacent columns and rows a cell should span.
   The first integer, `<n>`, is the column span factor.
   The second integer, which is prefixed with a dot, `.<n>`, is the row span factor.

   The [.term]*span operator* is a plus sign (`+`) placed directly after the span factor (`<n>.<n>+`).
   The span operator tells the converter to interpret the span factor as part of a span instead of a duplication.

   A span is the first operator in a xref:add-cells-and-rows.adoc#specifiers[cell specifier].

   ====
   <**span factor**><**span operator**><horizontal alignment operator><vertical alignment operator><style operator>|<cell's content>
   ====

   == Span multiple columns

   To have a cell span consecutive columns, enter the <<col-factor,column span factor>> and span operator (`<n>+`) in the cell specifier.
   Don't insert any spaces between the span, any alignment or style operators (if present), and the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).

   .Span three columns with a cell
   [source#ex-span-columns]
   ----
   include::example$cell.adoc[tag=span-cols]
   ----

   The table from <<ex-span-columns>> is displayed below.

   .Result of <<ex-span-columns>>
   include::example$cell.adoc[tag=span-cols]

   == Span multiple rows

   To have a cell span consecutive rows, enter the <<row-factor,row span factor>> and span operator (`.<n>+`) in the cell specifier.
   Remember to prefix the span factor with a dot (`.`).
   Don't insert any spaces between the span, any alignment or style operators (if present), and the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).

   .Span two rows with a cell
   [source#ex-span-rows]
   ----
   include::example$cell.adoc[tag=span-rows]
   ----

   The table from <<ex-span-rows>> is displayed below.

   .Result of <<ex-span-rows>>
   include::example$cell.adoc[tag=span-rows]

   == Span columns and rows

   A single cell can span a block of adjacent columns and rows.
   Enter the column span factor (`<n>`), followed by the row span factor (`.<n>`), and then the span operator (`+`).

   .Span two columns and three rows with a single cell
   [source#ex-block]
   ----
   include::example$cell.adoc[tag=span-block]
   ----

   The table from <<ex-block>> is displayed below.

   .Result of <<ex-block>>
   include::example$cell.adoc[tag=span-block]


/docs/modules/tables/pages/duplicate-cells.adoc
===============================================

.. code-block: asciidoc

   = Duplicate Cells
   // clone, copy, replicate, duplicate

   The contents of a cell can be duplicated in consecutive cells.

   == Duplication factor and operator

   The duplication factor and operator are applied to a xref:add-cells-and-rows.adoc#specifiers[cell's specifier] and allow you to clone a cell's content and properties across consecutive cells.
   A duplication is the first operator in a cell specifier.

   ====
   <**duplication factor**><**duplication operator**><horizontal alignment operator><vertical alignment operator><style operator>|<cell's content>
   ====

   The [.term]*duplication factor* is a single integer (`<n>`) that indicates how many times the cell's content should be duplicated.

   The [.term]*duplication operator* is an asterisk (`+*+`) placed directly after the duplication factor (`+<n>*+`).
   The duplication operator tells the converter to interpret the duplication factor as part of a duplication instead of a span.

   == Duplicate a cell and its properties

   To duplicate a cell, enter the duplication factor and duplication operator (`+<n>*+`) in the cell specifier.
   Don't insert any spaces between the duplication, any alignment or style operators (if present), and the xref:add-cells-and-rows.adoc#cell-separator[cell's separator] (`|`).

   .Duplicate the contents of two cells
   [source#ex-clone]
   ----
   include::example$cell.adoc[tag=clone]
   ----

   The table from <<ex-clone>> is displayed below.

   .Result of <<ex-clone>>
   include::example$cell.adoc[tag=clone]


/docs/modules/tables/pages/width.adoc
=====================================

.. code-block: asciidoc

   = Table Width

   By default, a table will span the width of the content area.

   == Fixed width

   To constrain the width of the table to a fixed value, set the `width` attribute in the table's attribute list.
   The width is an integer percentage value ranging from 1 to 100.
   The `%` sign is optional.

   .Table with width set to 75%
   [source#ex-fixed]
   ----
   [width=75%]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-fixed>>
   [width=75%]
   include::example$row.adoc[tag=base-h]

   == Autowidth

   Alternately, you can make the width fit the content by setting the `autowidth` option.
   The columns inherit this setting, so individual columns will also be sized according to the content.

   .Table using autowidth
   [source#ex-auto]
   ----
   [%autowidth]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-auto>>
   [%autowidth]
   include::example$row.adoc[tag=base-h]

   If you want each column to have an automatic width, but want the table to span the width of the content area, add the `stretch` role to the table.
   (Alternatively, you can set the `width` attribute to `100%`.)

   .Full-width table with autowidth columns
   [source#ex-stretch]
   ----
   [%autowidth.stretch]
   include::example$row.adoc[tag=base-h]
   ----

   The table from <<ex-stretch>> is rendered below.
   The columns are sized to the content, but the table spans the width of the page.

   .Result of <<ex-stretch>>
   [%autowidth.stretch]
   include::example$row.adoc[tag=base-h]

   WARNING: The `autowidth` option is not recognized by the DocBook converter.

   == Mix fixed and autowidth columns

   If you want to apply `autowidth` only to certain columns, use the special value `~` as the width of the column.
   In this case, width values are assumed to be a percentage value (i.e., 100-based).

   .Table with fixed and autowidth columns
   [source#ex-mix]
   ----
   [cols="25h,~,~"]
   |===
   |small |as big as the column needs to be |the rest
   |===
   ----

   .Result of <<ex-mix>>
   [cols="25h,~,~"]
   |===
   |small |as big as the column needs to be |the rest
   |===


/docs/modules/tables/pages/borders.adoc
=======================================

.. code-block: asciidoc

   = Table Borders
   :!table-frame:
   :!table-grid:

   The borders on a table are controlled using the `frame` and `grid` block attributes.
   You can combine these two attributes to achieve a variety of border styles for your tables.

   == Frame

   The border around a table is controlled using the `frame` attribute on the table.
   The frame attribute defaults to the value `all` (implied value), which draws a border on each side of the table.
   This default can be changed by setting the `table-frame` document attribute.
   You can override the default value by setting the frame attribute on the table to the value `all`, `ends`, `sides` or `none`.

   The `ends` value draws a border on the top and bottom of the table.

   .Table with frame=ends
   [source#ex-ends]
   ----
   [frame=ends]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-ends>>
   [frame=ends]
   include::example$row.adoc[tag=base-h]

   The `sides` value draws a border on the right and left side of the table.

   .Table with frame=sides
   [source#ex-sides]
   ----
   [frame=sides]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-sides>>
   [frame=sides]
   include::example$row.adoc[tag=base-h]

   The `none` value removes the borders around the table.

   .Table with frame=none
   [source#ex-noframe]
   ----
   [frame=none]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-noframe>>
   [frame=none]
   include::example$row.adoc[tag=base-h]

   == Grid

   The borders between the cells in a table are controlled using the `grid` attribute on the table.
   The grid attribute defaults to the value `all` (implied value), which draws a border between all cells.
   This default can be changed by setting the `table-grid` document attribute.
   You can override the default value by setting the grid attribute on the table to the value `all`, `rows`, `cols` or `none`.

   The `rows` value draws a border between the rows of the table.

   .Table with grid=rows
   [source#ex-rows]
   ----
   [grid=rows]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-rows>>
   [grid=rows]
   include::example$row.adoc[tag=base-h]

   The `cols` value draws borders between the columns.

   .Table with grid=cols
   [source#ex-cols]
   ----
   [grid=cols]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-cols>>
   [grid=cols]
   include::example$row.adoc[tag=base-h]

   The `none` value removes all borders between the cells.

   .Table with grid=none
   [source#ex-nogrid]
   ----
   [grid=none]
   include::example$row.adoc[tag=base-h]
   ----

   .Result of <<ex-nogrid>>
   [grid=none]
   include::example$row.adoc[tag=base-h]

   == Interaction with row and column spans

   Using row and column spans may interfere with the placement of borders on a table.
   This is a limitation of styling HTML using CSS.

   When a cell extends into other rows or columns, that cell is not represented in the HTML for the rows or columns it extends into.
   This is a problem if the cell reaches the boundary of the table.
   The CSS selector only matches the cell where it starts and thus does not detect when it is touching the table boundary.
   It therefore cannot add or remove the border as it would for a 1x1 cell (i.e., a cell confined to a single row and column).

   The interference with border placement caused by row and column spans does not always happen.
   Borders on a table with a rowspan or colspan that reaches the table boundary will always work correctly when the frame and grid are congruent.
   In this context, congruent means the frame and grid are contributing borders to the same edges.

   Here are those scenarios in which the frame and grid are congruent:

   * frame=all, grid=all
   * frame=all, grid=none
   * frame=all, grid=rows
   * frame=all, grid=cols
   * frame=ends, grid=rows
   * frame=sides, grid=cols
   * frame=none, grid=none

   If you use row and column spans in a table, you are strongly encouraged to use one of these frame and grid combinations.


/docs/modules/tables/pages/striping.adoc
========================================

.. code-block: asciidoc

   = Table Striping

   You can add zebra-striping to rows of a table.
   When this feature is enabled, the specified rows are shaded using a background color to create a zebra striping effect.

   NOTE: In the HTML output, table striping is done using CSS and thus depends on the stylesheet to supply the necessary styles.
   The default stylesheet for Asciidoctor includes the necessary styles for table striping.

   == Striping attributes

   Which rows are striped is controlled using the `stripes` attribute on the table.
   The stripes attribute defaults to the value `none` (implied value), which means rows are not striped by default.
   This default can be changed by setting the `table-stripes` document attribute.
   You can override the default value by setting the stripes attribute on the table.

   The `stripes` attribute on a table and the `table-stripes` document attribute accept the following values:

   * `none` - no rows are shaded (default)
   * `even` - even rows are shaded
   * `odd` - odd rows are shaded
   * `all` - all rows are shaded
   * `hover` - the row under the mouse cursor is shaded (HTML only)

   == stripes block attribute

   In the following example, the stripes are enabled for even rows in the table body (the row that contains A2 and B2).

   [source]
   ----
   [cols=2*,stripes=even]
   |===
   |A1
   |B1
   |A2
   |B2
   |A3
   |B3
   |===
   ----

   Under the covers, the stripes attribute applies the CSS class `stripes-<value>` (e.g., `stripes-none`) to the table tag.
   As a shorthand, you can simply apply the CSS class to the table directly using a role.

   [source]
   ----
   [.stripes-even,cols=2*]
   |===
   |A1
   |B1
   |A2
   |B2
   |A3
   |B3
   |===
   ----

   == table-stripes attribute

   If you want to apply stripes to all tables in the document, set the `table-stripes` attribute in the document header.
   You can still override this setting per table.

   [source]
   ----
   = Document Title
   :table-stripes: even

   [cols=2*]
   |===
   |A1
   |B1
   |A2
   |B2
   |A3
   |B3
   |===
   ----


/docs/modules/tables/pages/orientation.adoc
===========================================

.. code-block: asciidoc

   = Table Orientation

   == Landscape

   A table can be displayed in landscape (rotated 90 degrees counterclockwise) using the `rotate` option (preferred).

   [source]
   ----
   [%rotate]
   include::example$table.adoc[tag=base]
   ----

   A table can also be displayed in landscape using the `orientation` attribute.

   [source]
   ----
   [orientation=landscape]
   include::example$table.adoc[tag=base]
   ----

   Currently, this is only implemented by the DocBook backend (it sets the attribute `orient="land"`).


/docs/modules/tables/pages/assign-a-role.adoc
=============================================

.. code-block: asciidoc

   = Assign a Role to a Table

   Like with all blocks, you can add a role to a table using the `role` attribute.
   The role attribute becomes a CSS class when converted to HTML.
   The preferred shorthand for assigning the role attribute is to put the role name in the first position of the block attribute list prefixed with a `.` character, as shown here:

   [source]
   ----
   [.name-of-role]
   include::example$table.adoc[tag=base]
   ----


/docs/modules/tables/pages/nested.adoc
======================================

.. code-block: asciidoc

   = Nesting Tables

   Table cells marked with the AsciiDoc table style (`a`) support nested tables in addition to normal block content.
   To distinguish the inner table from the enclosing one, you need to use `!===` as the table delimiter and a cell separator that differs from that used for the enclosing table.
   The default cell separator for a nested table is `!`, though you can choose another character by defining the `separator` attribute on the table.

   NOTE: Although nested tables are not technically valid in DocBook 5.0, the DocBook toolchain processes them anyway.

   The following example contains a nested table in the last cell.
   Notice the nested table has its own format, independent of that of the outer table:

   [source]
   ----
   include::example$table.adoc[tag=nested]
   ----

   .Result: A nested table
   include::example$table.adoc[tag=nested]

   We recommend using nested tables sparingly.
   There's usually a better way to present the information.


/docs/modules/tables/pages/data-format.adoc
===========================================

.. code-block: asciidoc

   = Table Data Formats
   :navtitle: CSV, TSV and DSV Data
   :url-dsv: https://en.wikipedia.org/wiki/Delimiter-separated_values
   :url-rfc-4180: https://tools.ietf.org/html/rfc4180

   == Default table syntax

   A table is delimited by a vertical bar and three equal signs (`|===`).
   It contains cells that are arranged into rows according to the number of columns the table is assigned.
   The number of columns a table contains can be specified implicitly using the number of cells in the table's first row or by setting the `cols` attribute.
   Each cell is specified by a vertical bar (`|`).

   If you're new to AsciiDoc tables, xref:build-a-basic-table.adoc[] provides step by step directions for creating your first table.

   == Style and layout options

   Table content can be:

   * styled and aligned by column or cell,
   * aligned by row,
   * duplicated across multiple rows, and
   * marked up by any AsciiDoc syntax.

   Table cells can span rows and columns.

   You can adjust a table's:

   * width,
   * orientation, and
   * border style.

   You can also specify each column's width and designate header and footer rows.

   == Supported data formats

   The default table data format is prefix-separated values (PSV); that means the processor creates a new cell each time it encounters a vertical bar (`|`).
   AsciiDoc also supports comma-separated values (CSV), tab-separated values (TSV), and delimited data values (DSV).

   == Escape the cell separator

   The parser scans for the cell separator to partition cells _before_ it processes the cell text.
   So even if you try to hide the cell separator using an inline passthrough, the parser will see it.
   If the cell contain contains the cell separator, you must escape that character.
   There are three ways to escape it:

   * Prefix the character with a leading backslash (i.e., `\|`), which will be removed from the output.
   * Use the `\{vbar}` attribute reference in place of `|` in content.
   * Change the cell separator used by the table.

   Unless you do one of these things, the cell separator will be interpreted as a cell boundary.

   Consider the following example, which escapes the cell separator using a leading backslash:

   [source]
   ----
   [cols=2*]
   |===
   |The default separator in PSV tables is the \| character.
   |The \| character is often referred to as a "`pipe`".
   |===
   ----

   This table will render as follows:

   .Result: Converted PSV table that contains pipe characters
   [cols=2*]
   |===
   |The default separator in PSV tables is the \| character.
   |The \| character is often referred to as a "`pipe`".
   |===

   Notice that the pipe character appears without the leading backslash (i.e., unescaped) in the rendered result.

   An alternative is to use the `\{vbar}` attribute reference as a substitute.
   This approach produces the same result as the previous example.

   [source]
   ----
   [cols=2*]
   |====
   |The default separator in PSV tables is the {vbar} character.
   |The {vbar} character is often referred to as a "`pipe`".
   |====
   ----

   Escaping each cell separator character that appears in the content of a cell can be tedious.
   There are also times when you can't or don't want to modify the cell content (perhaps because it is being included from another file).
   To address these cases, AsciiDoc allows you to override the cell separator.

   The cell separator is controlled using the `separator` attribute on the table block.
   You'll want to select any single character that is not found in the content.
   A good candidate is the broken bar, or `¦`.

   Here's the previous example rewritten using a custom separator.

   [source]
   ----
   [cols=2*,separator=¦]
   |===
   ¦The default separator in PSV tables is the | character.
   ¦The | character is often referred to as a "`pipe`".
   |===
   ----

   Notice that it's no longer necessary to escape the pipe character in the content of the table cells.
   You can safely use the original cell separator in the cell content and not worry about it being interpreted as the boundary of a cell.

   [#delimiter-separated-values]
   == Delimiter-separated values

   Tables can also be populated from data formatted as delimiter-separated values (i.e., data tables).
   In contrast with the PSV format, in which the delimiter is placed in front of each cell value, the delimiter in a delimiter-separated format (CSV, TSV, DSV) is placed between the cell values (called a _separator_) and does not accept a cell formatting spec.
   Each line of data is assumed to represent a single row, though you'll learn that's not a strict rule.
   How the table data gets interpreted is controlled by the `format` and `separator` attributes on the table.

   .What the delimiter?
   ****
   Aren't comma-separated values a subset of {url-dsv}[delimiter-separated values^]?
   It really depends on who you consult.

   The term "`delimiter-separated values`" in this text refers to the family of data formats that use a delimiter, including comma-separated values (CSV), tab-separated values (TSV) and delimited data (DSV), all of which are supported in AsciiDoc tables.
   CSV is the data format used most often.

   "`Comma-separated values`" is really a misleading term since CSV can use delimiters other than `,` as the field separator (which, in this context, separates cells).
   What we're really talking about is how the data is interpreted.

   CSV and TSV both use a delimiter and an optional enclosing character, loosely based on {url-rfc-4180}[RFC 4180^].
   DSV (i.e., delimited data) only uses a delimiter, which can be escaped using a backslash; an enclosing character is not recognized.
   These parsing rules are described in detail in <<data-table-formats>>.
   ****

   Let's consider an example of using comma-separated values (CSV) to populate an AsciiDoc table with data.
   To instruct the processor to read the data as CSV, set the value of the `format` attribute on the table to `csv`.
   When the `format` attribute is set to `csv`, the default data separator is a comma (`,`), as seen in the table below.

   [source]
   ----
   include::example$data.adoc[tag=csv]
   ----

   .Result: Rendered CSV table
   [width=90%]
   include::example$data.adoc[tag=csv]

   This feature is particularly useful when you want to populate a table in your manuscript from data stored in a separate file.
   You can do so using the xref:directives:include.adoc[include directive] between the table delimiters, as shown here:

   [source]
   ----
   [%header,format=csv]
   |===
   \include::tracks.csv[]
   |===
   ----

   If your data is separated by tabs instead of commas, set the `format` to `tsv` (tab-separated values) instead.

   Now let's consider an example of using delimited data (DSV) to populate an AsciiDoc table with data.
   To instruct the processor to read the data as DSV, set the value of the `format` attribute on the table to `dsv`.
   When the `format` attribute is set to `dsv`, the default data separator is a colon (`:`), as seen in the table below.

   [source]
   ----
   include::example$data.adoc[tag=dsv]
   ----

   .Result: Rendered DSV table
   [width=90%]
   include::example$data.adoc[tag=dsv]

   == Data table formats

   The CSV and TSV data formats are parsed differently from the DSV data format.
   The following two sections outline those differences.

   === CSV and TSV

   Table data in either CSV or TSV format is parsed according to the following rules, loosely based on {url-rfc-4180}[RFC 4180^]:

   * The default delimiter for CSV is a comma (`,`) while the default delimiter for TSV is a tab character.
   * Empty lines are skipped (unless enclosed in a quoted value).
   * Whitespace surrounding each value is stripped.
   * Values can be enclosed in double quotes (`"`).
    ** A quoted value may contain zero or more separator or newline characters.
    ** A newline begins a new row unless the newline is enclosed in double quotes.
    ** A quoted value may include the double quote character if escaped using another double quote (`""`).
    ** Newlines in quoted values are retained.
   * If rows do not have the same number of cells ("`ragged`" tables), cells are shuffled to fully fill the rows.
    ** This is different behavior than Excel, which pads short rows with empty cells.
    ** Extra cells at the end of the last row get dropped.
    ** As a rule of thumb, data for a single row should be on the same line.

   === DSV

   Table data in DSV format is parsed according to the following rules:

   * The default delimiter for DSV is a colon (`:`).
   * Empty lines are skipped.
   * Whitespace surrounding each value is stripped.
   * The delimiter character can be included in the value if escaped using a single backslash (`\:`).
   * If rows do not have the same number of cells ("`ragged`" tables), cells are shuffled to fully fill the rows.

   == Custom delimiters

   Each data format has a default separator associated with it (csv = comma, tsv = tab, dsv = colon), but the separator can be changed to any character (or even a string of characters) by setting the `separator` attribute on the table.

   Here's an example of a DSV table that uses a custom separator character (i.e., delimiter):

   .A DSV table with a custom separator
   [source]
   ----
   [format=dsv,separator=;]
   |===
   a;b;c
   d;e;f
   |===
   ----

   TIP: To make a TSV table, you can set the `format` attribute to `csv` and the separator to `\t`.
   Though the `tsv` format is preferred.

   The separator is independent of the processing rules for the format.
   If you set `format=dsv` and `separator=,`, the data will be processed using the DSV rules, even though the data looks like CSV.

   == Shorthand notation for data tables

   AsciiDoc provides shorthand notation for specifying the data format of a table.
   The first position of the table block delimiter (i.e., `|===`) can be replaced by a built-in delimiter to set the table format (e.g., `,===` for CSV).

   To make a CSV table, you can use `,===` as the table block delimiter:

   [source]
   ----
   include::example$data.adoc[tag=s-csv]
   ----

   .Result: Rendered CSV table using shorthand syntax
   [width=90%]
   include::example$data.adoc[tag=s-csv]

   To make a DSV table, you can use `:===` as the table block delimiter:

   [source]
   ----
   include::example$data.adoc[tag=s-dsv]
   ----

   .Result: Rendered DSV table using shorthand syntax
   [width=90%]
   include::example$data.adoc[tag=s-dsv]

   When using either the CSV or DSV shorthand, you do not need to set the `format` attribute as it's implied.

   To make a TSV table, you can set the `format` attribute to `tsv` instead of having to set the `format` to `csv` and the separator to `\t`.
   In this case, you can use either `|===` or `,===` as the table block delimiter.
   There is no special delimited block notation for a TSV table.

   == Formatting cells in a data table

   The delimited formats do not provide a way to express formatting of individual table cells.
   Instead, you can apply cell formatting to all cells in a given column using the `cols` spec on the table:

   [source]
   ----
   [format=csv,cols="1h,1a"]
   |===
   Sky,image::sky.jpg[]
   Forest,image::forest.jpg[]
   |===
   ----

   Data tables do not support cells that span multiple rows or columns, since that information can only be expressed at the cell level.
   You are advised to use the PSV format if you need that functionality.


/docs/modules/tables/pages/table-ref.adoc
=========================================

.. code-block: asciidoc

   = Table Syntax and Attribute Reference
   :navtitle: Table Reference

   [cols="1m,2,1m,2,2"]
   |===
   |Attribute |Description |Value |Description |Notes

   |caption
   |defines the title label on a single table
   d|user-defined
   |
   |

   |cols
   |comma-separated list of column specifiers
   d|specifiers
   |Specifies the number of columns and the distribution ratio and default formatting for each column. See xref:add-columns.adoc[] for details
   |

   .4+|format
   .4+|data format of the table's contents
   |psv
   |cells are delimited by `separator` (default `{vbar}`) (aka prefix-separated values)
   .4+|

   |dsv
   |cells are delimited by a colon (`:`) (aka delimiter-separated values)

   |csv
   |cells are delimited by a comma (`,`) (aka comma-separated values)

   |tsv
   |cells are delimited by a tab character (aka tab-separated values)

   .3+|separator
   .3+|character used to separate cells
   |{vbar}
   |default for top-level tables
   .3+|
   |!
   |default for nested tables
   d|user-defined
   |any single character or `\t` for tab (e.g., `{brvbar}` or `%`).
   _Ideally a character not found in the cell content._

   .4+|frame
   .4+|draws a border around the table
   |all
   |border on all sides (default)
   .4+|

   |ends
   |border on top and bottom ends

   |none
   |no borders

   |sides
   |border on left and right sides

   .4+|grid
   .4+|draws boundary lines between rows and columns
   |all
   |draws boundary lines around each cell (default)
   .4+|

   |cols
   |draws boundary lines between columns

   |rows
   |draws boundary lines between rows

   |none
   |no boundary lines

   .5+|stripes
   .5+|controls row shading (via background color)
   |none
   |no rows are shaded (default)
   .5+|

   |even
   |even rows are shaded

   |odd
   |odd rows are shaded

   |hover
   |row under the mouse cursor is shaded (HTML only)

   |all
   |all rows are shaded

   .3+|align
   .3+|horizontally aligns a table with restricted width
   |left
   |aligns to left side of page (default)
   .3+|Not recognized by Asciidoctor.
   To align the table, use an alignment role (e.g., `[role=center]` or `[.center]`).
   The alignment roles work for both HTML and PDF output.
   Alignment roles and the `float` attributes are mutually exclusive.

   |right
   |aligns to right side of page

   |center
   |horizontally aligns to center of page

   .2+|float
   .2+|floats the table to the specified side of the page
   |left
   |floats the table to the left side of the page (default)
   .2+|Applies to HTML output only.
   Must be used in conjunction with the table's `width` attribute to take effect.
   The `float` and `align` attributes are mutually exclusive.

   |right
   |floats the table to the right side of the page

   .3+|halign
   .3+|horizontally aligns all of the cell contents in a table
   |left
   |aligns the contents of the cells to the left (default)
   .3+|Not recognized by Asciidoctor.
   Define instead using column or cell specifiers (e.g., `3*>`), which take precedence over this value.

   |right
   |aligns the contents of the cells to the right

   |center
   |aligns the contents to the cell centers

   .3+|valign
   .3+|vertically aligns all of the cell contents in a table
   |top
   |aligns the cell contents to the top of the cell (default)
   .3+|Not recognized by Asciidoctor.
   Define instead using column or cell specifiers (e.g., `3*.>`), which take precedence over this value.

   |bottom
   |aligns the cell contents to the bottom of the cell

   |middle
   |aligns the cell contents to the middle of the cell

   |orientation
   |rotates the table
   |landscape
   |rotated 90 degrees counterclockwise
   |Equivalent to setting the rotate option, which is preferred.
   DocBook only.

   .6+|options
   .6+|comma separated list of option names
   |header
   |promotes first row to the table header
   .2+d|header and footer rows are omitted by default

   |footer
   |promotes last row to the table footer

   |breakable
   |allows the table to split across a page (default)
   .2+d|Mutually exclusive.
   DocBook only (specifically for generating PDF output).

   |unbreakable
   |prevents the table from being split across a page

   |autowidth
   |disables explicit column widths (ignores distribution ratios in `cols` attribute)
   |

   |rotate
   |Prints the table in landscape
   d|Equivalent to setting the orientation to landscape.
   DocBook only.

   .4+|role
   .4+|comma-separated list of role names
   |left
   |floats the table to the left margin
   .3+d|The role is the preferred way to specify the alignment of a table with restricted width.
   May be specified using role shorthand (e.g., `[.center]`).

   |right
   |floats the table to the right

   |center
   |aligns the table to center

   |stretch
   |stretches an autowidth table to the width of the page
   |

   |width
   |the table width relative to the available page width
   d|user defined value
   |a percentage value between 0% and 100%
   |
   |===


/docs/modules/tables/partials/style-operators.adoc
==================================================

.. code-block: asciidoc

   |===
   |Style |Operator |Description

   |AsciiDoc
   |`a`
   |Supports block elements (lists, delimited blocks, and block macros).
   This style effectively creates a nested, standalone AsciiDoc document.
   The parent document's implicit attributes, such as `doctitle`, are shadowed and custom attributes are inherited.
   // what does "shadowed" actually mean???

   |Default
   |`d`
   |All of the markup that is permitted in a paragraph (i.e., inline formatting, inline macros) is supported.

   |Emphasis
   |`e`
   |Text is italicized.

   |Header
   |`h`
   |Applies the header semantics and styles to the text and cell borders.

   |Literal
   |`l`
   |Content is treated as if it were inside a literal block.

   |Monospace
   |`m`
   |Text is rendered using a monospace font.

   |Strong
   |`s`
   |Text is bold.
   |===

   // the verse operator `v` has been deprecated


/docs/modules/tables/examples/align-cell.adoc
=============================================

.. code-block: asciidoc

   // tag::hcenter[]
   |===
   |Column Name |Column Name

   ^|This content is horizontally centered because the cell specifier includes the `+^+` operator.
   |There isn't a horizontal alignment operator on this cell specifier, so the cell falls back to the default horizontal alignment.
   Content is aligned to the left side of the cell by default.
   |===
   // end::hcenter[]

   // tag::factor[]
   |===
   |Column Name |Column Name

   2+^|This cell spans two columns, and its content is horizontally centered because the cell specifier includes the `+^+` operator.
   2*^|This content is duplicated in two adjacent columns.
   Its content is horizontally centered because the cell specifier
   includes the `+^+` operator.
   |===
   // end::factor[]

   // tag::right[]
   |===
   |Column Name |Column Name

   >|This content is aligned to the right side of the cell because the cell specifier includes the `>` operator.
   |There isn't a horizontal alignment operator on this cell specifier, so the cell falls back to the default horizontal alignment.
   Content is aligned to the left side of the cell by default.

   2+>|This cell spans two columns.

   Its content is aligned to the right because the cell specifier includes the `>` operator.
   The `>` operator must be placed directly after the span operator (`+`).
   |===
   // end::right[]

   // tag::bottom[]
   [cols="2,1"]
   |===
   |Column Name |Column Name

   .>|This content is aligned to the bottom of the cell because the cell specifier includes the `.>` operator.
   |There isn't a vertical alignment operator on this cell specifier, so the cell falls back to the alignment assigned via the column specifier or the default vertical alignment.
   Content is aligned to the top of the cell by default.
   |===
   // end::bottom[]

   // tag::vspan[]
   |===
   |Column Name |Column Name

   |There isn't a vertical alignment operator on this cell specifier, so the content is aligned to the top of the cell by default.

   .2+.>|This cell spans two rows, and its content is aligned to the bottom because the cell specifier includes the `.>` operator.

   |This content is aligned to the top of the cell by default.
   |===
   // end::vspan[]

   // tag::vcenter[]
   |===
   |Column Name |Column Name

   .^|This content is vertically centered because the cell specifier includes the `+.^+` operator.
   |There isn't a vertical alignment operator on this cell specifier, so the cell falls back to the default vertical alignment.
   Content is aligned to the top of the cell by default.
   |===
   // end::vcenter[]

   // tag::combine[]
   |===
   |Column 1 |Column 2 |Column 3

   ^.>|The specifier for this cell is `^.>`.
   The content is centered horizontally and aligned to the bottom of the cell.
   |There aren't any alignment operators on this cell's specifier, so the cell falls back to the default alignments.
   The default horizontal alignment is the left side of the cell.
   The default vertical alignment is the top of the cell.
   >.^|The specifier for this cell is `>.^`.
   The content is aligned to the right side of the cell and centered vertically.

   2.3+^.^|The specifier for this cell is `pass:[2.3+^.^]`.
   It spans two columns and three rows.

   Its content is centered horizontally and vertically.
   3*.>|The specifier for this cell is `3*.>`.
   The cell is duplicated in three consecutive rows in the same column.
   It's content is aligned to the bottom of the cell.
   |===
   // end::combine[]


/docs/modules/tables/examples/cell.adoc
=======================================

.. code-block: asciidoc

   ////
   Examples for table sections, cell specifiers
   ////

   // tag::styles[]
   |===
   |Column 1 |Column 2

   2*>m|This content is duplicated across two columns (2*) and aligned to the right side of the cell (>).

   It's rendered using a monospace font (m).

   .3+^.>s|This cell spans 3 rows (`3+`).
   The content is centered horizontally (`+^+`), vertically aligned to the bottom of the cell (`.>`), and styled as strong (`s`).
   e|This content is italicized (`e`).

   m|This content is rendered using a monospace font (m).

   s|This content is bold (`s`).
   |===
   // end::styles[]

   // tag::adoc[]
   |===
   |Normal Style |AsciiDoc Style

   |This cell isn't prefixed with an `a`, so the processor doesn't interpret the following lines as an AsciiDoc list.

   * List item 1
   * List item 2
   * List item 3

   a|This cell is prefixed with an `a`, so the processor interprets the following lines as an AsciiDoc list.

   * List item 1
   * List item 2
   * List item 3

   |This cell isn't prefixed with an `a`, so the processor doesn't interpret the listing block delimiters or the `source` style.

   [source,python]
   ----
   import os
   print ("%s" %(os.uname()))
   ----

   a|This cell is prefixed with an `a`, so the listing block is processed and rendered according to the `source` style rules.

   [source,python]
   ----
   import os
   print "%s" %(os.uname())
   ----

   |===
   // end::adoc[]

   // tag::span-cols[]
   |===
   |Column 1, header row |Column 2, header row |Column 3, header row |Column 4, header row

   3+|This cell spans columns 1, 2, and 3 because its specifier contains a span of `3+`
   |Cell in column 4, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   |Cell in column 3, row 3
   |Cell in column 4, row 3
   |===
   // end::span-cols[]

   // tag::span-rows[]
   |===
   |Column 1, header row |Column 2, header row

   .2+|This cell spans rows 2 and 3 because its specifier contains a span of `.2+`
   |Cell in column 2, row 2

   |Cell in column 2, row 3

   |Cell in column 1, row 4
   |Cell in column 2, row 4
   |===
   // end::span-rows[]

   // tag::span-block[]
   |===
   |Column 1, header row |Column 2, header row |Column 3, header row |Column 4, header row

   |Cell in column 1, row 2
   2.3+|This cell spans columns 2 and 3 and rows 2, 3, and 4 because its specifier contains a span of `2.3+`
   |Cell in column 4, row 2

   |Cell in column 1, row 3
   |Cell in column 4, row 3

   |Cell in column 1, row 4
   |Cell in column 4, row 4
   |===
   // end::span-block[]

   // tag::clone[]
   |===
   |Column 1, header row |Column 2, header row |Column 3, header row

   2*|This cell is duplicated in columns 1 and 2 because its specifier contains a duplication of `2*`
   |Cell in column 3, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   3*e|This cell specifier contains the duplication `3*` and style operator `e`.

   The cell's text is italicized and duplicated in column 3, row 3 and columns 1 and 2 on row 4.

   |Cell in column 3, row 4
   |===
   // end::clone[]

   // tag::b-spec[]
   [cols="e,m,^,>s",width="25%"]
   |===
   |1 >s|2 |3 |4
   ^|5 2.2+^.^|6 .3+<.>m|7
   ^|8
   |9 2+>|10
   |===
   // end::b-spec[]

   == THESE ARE THE LEGACY EXAMPLES THAT MAY NO LONGER BE IN USE

   // tag::3dup[]
   |===

   |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 3, row 1

   3*|Same cell content in columns 1, 2, and 3

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   |Cell in column 3, row 3

   |===
   // end::3dup[]

   // tag::3span[]
   |===

   |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 3, row 1

   3+|Content in a single cell that spans columns 1, 2, and 3

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   |Cell in column 3, row 3

   |===
   // end::3span[]

   // tag::2span-r[]
   |===

   |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 3, row 1

   .2+|Content in a single cell that spans rows 2 and 3
   |Cell in column 2, row 2
   |Cell in column 3, row 2

   |Cell in column 2, row 3
   |Cell in column 3, row 3

   |===
   // end::2span-r[]

   // tag::span-cr[]
   |===

   |Column 1, row 1 |Column 2, row 1 |Column 3, row 1 |Column 4, row 1

   |Column 1, row 2
   2.3+|Content in a single cell that spans over rows and columns
   |Column 4, row 2

   |Column 1, row 3
   |Column 4, row 3

   |Column 1, row 4
   |Column 4, row 4
   |===
   // end::span-cr[]

   // tag::cell-align[]
   [cols="3"]
   |===
   ^|Prefix the `{vbar}` with `{caret}` to center content horizontally
   <|Prefix the `{vbar}` with `<` to align the content to the left horizontally
   >|Prefix the `{vbar}` with `>` to align the content to the right horizontally

   .^|Prefix the `{vbar}` with a `.` and `{caret}` to center the content in the cell vertically
   .<|Prefix the `{vbar}` with a `.` and `<` to align the content to the top of the cell
   .>|Prefix the `{vbar}` with a `.` and `>` to align the content to the bottom of the cell

   3+^.^|This content spans three columns (`3{plus}`) and is centered horizontally (`{caret}`) and vertically (`.{caret}`) within the cell.

   |===
   // end::cell-align[]





   // tag::cell-src[]
   |===
   |Source Code 1 |Source Code 2

   a|
   [source,python]
   ----
   import os
   print "%s" %(os.uname())
   ----

   a|
   [source,python]
   ----
   import os
   print ("%s" %(os.uname()))
   ----
   |===
   // end::cell-src[]


/docs/modules/tables/examples/column.adoc
=========================================

.. code-block: asciidoc

   // tag::2col-alt[]
   |===

   |Cell in column 1, row 1 |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |===
   // end::2col-alt[]

   // tag::2col[]
   [cols="2*"]
   |===

   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |===
   // end::2col[]

   // tag::base-xtr[]
   |===
   |Cell in column 1, row 1 with lots and lots and lots and lots of content
   |Cell in column 2, row 1
   |Cell in column 3, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2 and another bucket of content, and then a jelly roll of content
   |===
   // end::base-xtr[]

   // tag::4col[]
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1
   |Cell in column 3, row 1
   |Cell in column 4, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |Cell in column 4, row 2
   |===
   // end::4col[]


/docs/modules/tables/examples/data.adoc
=======================================

.. code-block: asciidoc

   // tag::csv[]
   [%header,format=csv]
   |===
   Artist,Track,Genre
   Baauer,Harlem Shake,Hip Hop
   The Lumineers,Ho Hey,Folk Rock
   |===
   // end::csv[]

   // tag::dsv[]
   [%header,format=dsv]
   |===
   Artist:Track:Genre
   Robyn:Indestructible:Dance
   The Piano Guys:Code Name Vivaldi:Classical
   |===
   // end::dsv[]

   // tag::s-csv[]
   ,===
   Artist,Track,Genre

   Baauer,Harlem Shake,Hip Hop
   ,===
   // end::s-csv[]

   // tag::s-dsv[]
   :===
   Artist:Track:Genre

   Robyn:Indestructible:Dance
   :===
   // end::s-dsv[]

   // tag::i-csv[]
   ,===
   \include::customers.csv[]
   ,===
   // end::i-csv[]


/docs/modules/tables/examples/row.adoc
======================================

.. code-block: asciidoc

   *The table base-h (directly below) is used in A LOT of examples. Be very careful changing it.*

   // tag::base-h[]
   |===
   |Column 1, header row |Column 2, header row |Column 3, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   |Cell in column 3, row 3
   |===
   // end::base-h[]

   // tag::opt-h[]
   [cols="2*",options="header"]
   |===
   |Column 1, header row
   |Column 2, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   |===
   // end::opt-h[]

   // tag::impl-h[]
   |===
   |Column 1, header row |Column 2, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3
   |===
   // end::impl-h[]

   // tag::opt-f[]
   [options="footer"]
   |===
   |Column 1, header row |Column 2, header row

   |Cell in column 1, row 2
   |Cell in column 2, row 2

   |Cell in column 1, row 3
   |Cell in column 2, row 3

   |Column 1, footer row
   |Column 2, footer row
   |===
   // end::opt-f[]

   // tag::same[]
   |===
   |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 3, row 1

   |Cell in column 1, row 2 |Cell in column 2, row 2 |Cell in column 3, row 2
   |===
   // end::same[]

   // tag::indv-co[]
   [cols="3*"] <1>
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1
   |Cell in column 3, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===
   // end::indv-co[]

   // tag::indv[]
   [cols="3*"]
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1
   |Cell in column 3, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===
   // end::indv[]

   // tag::same-indv[]
   [cols="3*"]
   |===
   |Cell in column 1, row 1 |Cell in column 2, row 1
   |Cell in column 3, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2 |Cell in column 3, row 2
   |===
   // end::same-indv[]


/docs/modules/tables/examples/table.adoc
========================================

.. code-block: asciidoc

   // tag::base[]
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===
   // end::base[]

   // tag::base-co[]
   |=== <1>
   <2>
   | Cell in column 1, row 1 | Cell in column 2, row 1 <3>
   <4>
   | Cell in column 1, row 2 | Cell in column 2, row 2

   | Cell in column 1, row 3 | Cell in column 2, row 3

   |=== <1>
   // end::base-co[]

   // tag::b-col-h-co[]
   [%header,cols=2*] <.>
   |===
   |Name of Column 1
   |Name of Column 2

   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===
   // end::b-col-h-co[]

   // tag::b-col-h[]
   [%header,cols=2*]
   |===
   |Name of Column 1
   |Name of Column 2

   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===
   // end::b-col-h[]

   // tag::base-alt[]
   [width="90"]
   |===

   | Cell in column 1, row 1 | Cell in column 2, row 1

   | Cell in column 1, row 2 | Cell in column 2, row 2

   | Cell in column 1, row 3 | Cell in column 2, row 3

   |===
   // end::base-alt[]

   // tag::cell1[]
   |===
   |Cell in column 1, row 1|Cell in column 2, row 1
   |===
   // end::cell1[]

   // tag::cell2[]
   |===
   | Cell in column 1, row 1        |          Cell in column 2, row 1
   |===
   // end::cell2[]

   // tag::indv-co[]
   [cols="3*"] <1>
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1
   |Cell in column 3, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===
   // end::indv-co[]

   // tag::indv[]
   [cols="3*"]
   |===
   |Cell in column 1, row 1
   |Cell in column 2, row 1
   |Cell in column 3, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |Cell in column 3, row 2
   |===
   // end::indv[]

   // tag::b-base-h-co[]
   .Table Title
   |===
   |Column 1, Header Row |Column 2, Header Row <.>
   <.>
   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===
   // end::b-base-h-co[]

   // tag::b-base-h[]
   .Table Title
   |===
   |Column 1, Header Row |Column 2, Header Row

   |Cell in column 1, row 1
   |Cell in column 2, row 1

   |Cell in column 1, row 2
   |Cell in column 2, row 2
   |===
   // end::b-base-h[]

   // tag::b-col-indv-co[]
   .Applications
   [cols="1,1,2"] <.>
   |===
   |Name |Category |Description

   |Firefox
   |Browser
   |Mozilla Firefox is an open source web browser.
   It's designed for standards compliance,
   performance, portability.

   |Arquillian
   |Testing
   |An innovative and highly extensible testing platform.
   Empowers developers to easily create real, automated tests.
   |===
   // end::b-col-indv-co[]

   // tag::b-col-indv[]
   .Applications
   [cols="1,1,2"]
   |===
   |Name |Category |Description

   |Firefox
   |Browser
   |Mozilla Firefox is an open source web browser.
   It's designed for standards compliance,
   performance, portability.

   |Arquillian
   |Testing
   |An innovative and highly extensible testing platform.
   Empowers developers to easily create real, automated tests.
   |===
   // end::b-col-indv[]

   // tag::b-col-a[]
   [cols="2,2,5a"]
   |===
   |Firefox
   |Browser
   |Mozilla Firefox is an open source web browser.

   It's designed for:

   * standards compliance
   * performance
   * portability

   https://getfirefox.com[Get Firefox]!
   |===
   // end::b-col-a[]

   // tag::nested[]
   [cols="1,2a"]
   |===
   | Col 1 | Col 2

   | Cell 1.1
   | Cell 1.2

   | Cell 2.1
   | Cell 2.2

   [cols="2,1"]
   !===
   ! Col1 ! Col2

   ! C11
   ! C12

   !===

   |===
   // end::nested[]


/docs/modules/stem/nav.adoc
===========================

.. code-block: asciidoc

   * xref:index.adoc[]


/docs/modules/stem/pages/index.adoc
===================================

.. code-block: asciidoc

   = Equations and Formulas (STEM)
   :page-aliases: stem.adoc
   :stem: asciimath
   :url-mathjax: https://www.mathjax.org
   :url-asciimath: https://docs.mathjax.org/en/latest/input/asciimath.html
   :url-latexmath: https://docs.mathjax.org/en/latest/input/tex/index.html
   :url-mathjax-docs: https://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference

   If you need to include Science, Technology, Engineering and Math (STEM) expressions in your document, the AsciiDoc language supports embedding math-mode macros from {url-latexmath}[LaTeX] and/or {url-asciimath}[AsciiMath] notation as block or inline elements.
   These elements act as passthroughs to preserve the expressions as entered.
   The expressions are then passed on to the converter to be processed and rendered for display using a STEM provider (e.g., MathJax).

   == Activating STEM support

   To activate equation and formula support, set the `stem` attribute in the document's header (or by passing the attribute to the command line or API).

   .Setting the stem attribute
   [source]
   ----
   include::example$stem.adoc[tag=base-co]
   ----
   <.> The default notation value, `asciimath`, is assigned implicitly.

   By default, AsciiDoc's stem integration assumes all equations are AsciiMath if not specified explicitly.
   The HTML converter supports STEM content written in {url-asciimath}[AsciiMath^] and {url-latexmath}[TeX and LaTeX^] math notation.
   The DocBook converter only processes AsciiMath notation, leaving LaTeX to be processed by a separate tool in the DocBook toolchain.

   If you want to use the LaTeX notation by default, assign `latexmath` to the stem attribute.

   .Assigning an alternative notation to the stem attribute
   [source]
   ----
   include::example$stem.adoc[tag=base-alt]
   ----

   TIP: You can use both notations in the same document.
   The value of the `stem` attribute merely sets the default notation.
   To set the notation explicitly for a given block or inline span, just use `asciimath` or `latexmath` in place of `stem` as explained in <<mixing-notations>>.

   Stem content can be displayed inline with other content or as discrete blocks.
   No substitutions are applied to the content within a stem macro or block.

   [#inline]
   == Inline STEM content

   The best way to mark up an inline formula is to use the `stem` macro.

   .Inline stem macro syntax
   [source#ex-inline]
   ----
   include::example$stem.adoc[tag=in-co]
   ----
   <.> The inline stem macro contains only one colon (`:`).
   <.> Place the expression within the square brackets (`[ ]`) of the macro.

   The result of <<ex-inline>> is displayed below.

   ====
   include::example$stem.adoc[tag=in]
   ====

   If the inline stem equation contains a right square bracket, you must escape this character using a backslash.

   .Inline stem macro with a right square bracket
   [source#ex-square-bracket]
   ----
   include::example$stem.adoc[tag=in-sb]
   ----

   The result of <<ex-square-bracket>> is displayed below.

   ====
   include::example$stem.adoc[tag=in-sb]
   ====

   A stem macro is an implicit passthrough macro.
   That's why, despite the fact that the x expression matches the syntax of an attribute reference, you don't have to escape it.

   [#block]
   == Block STEM content

   Block formulas are marked up by assigning the `stem` style to a delimited passthrough block.

   .Delimited stem block syntax
   [source#ex-block]
   ----
   include::example$stem.adoc[tag=bl-co]
   ----
   <.> Assign the stem style to the passthrough block.
   <.> A passthrough block is delimited by a line of four consecutive plus signs (`pass:[++++]`).

   The result <<ex-block>> is rendered beautifully in the browser thanks to MathJax!

   ====
   include::example$stem.adoc[tag=bl]
   ====

   TIP: You don't need to add special delimiters around the expression as the {url-mathjax-docs}[MathJax documentation^] suggests.
   The AsciiDoc processor handles that for you automatically!

   === Newlines in AsciiMath blocks

   Newlines in an AsciiMath block are only preserved in certain circumstances.
   The following examples illustrate how newlines are handled.

   [%collapsible]
   .Single newline not preserved
   ====
   [listing]
   ----
   x
   y
   ----
   ====

   [%collapsible]
   .Single newline preserved if escaped
   ====
   [listing]
   ----
   x\
   y
   ----
   ====

   [%collapsible]
   .Sequential newlines preserved if escaped
   ====
   [listing]
   ----
   x\
   \
   y
   ----
   ====

   [%collapsible]
   .Paragraph break preserved
   ====
   [listing]
   ----
   x

   y
   ----
   ====

   [%collapsible]
   .Sequential newlines between paragraph break preserved
   ====
   [listing]
   ----
   x


   y
   ----
   ====

   The first preserved newline splits the expression into two.
   Subsequent newlines get translated into a `<br>` element.

   === Newlines in LaTeX blocks

   Newlines in a LaTeX block are only preserved in certain circumstances.
   The following examples illustrate how newlines are handled.

   [%collapsible]
   .Single newline not preserved
   ====
   [listing]
   ----
   x
   y
   ----
   ====

   [%collapsible]
   .Single newline preserved if escaped
   ====
   [listing]
   ----
   x\\
   y
   ----
   ====

   [%collapsible]
   .Sequential newlines preserved if escaped and prefixed by null character
   ====
   [listing]
   ----
   x\\
   ~\\
   y
   ----
   ====

   [%collapsible]
   .Paragraph break not preserved
   ====
   [listing]
   ----
   x

   y
   ----
   ====

   [%collapsible]
   .Paragraph break preserved if separated by newline spacer
   ====
   [listing]
   ----
   x
   \\[1em]
   y
   ----
   ====

   The first preserved newline splits the expression into two.
   Subsequent newlines get translated into a `<br>` element.

   [#mixing-notations]
   == Mixing STEM notations

   You can use multiple notations for STEM content within the same document by using the notation's name instead of the keyword `stem`.

   For example, if you want to write an inline equation using the LaTeX notation, name the macro `latexmath`.

   .Inline latexmath macro syntax
   [source#ex-latexmath]
   ----
   include::example$stem.adoc[tag=multi-l]
   ----

   The result of <<ex-latexmath>> is displayed below.

   ====
   include::example$stem.adoc[tag=multi-l]
   ====

   The name that maps to the notation you want to use can also be applied to block STEM content.

   .Using both asciimath and latexmath notations in a single document
   [source]
   ----
   include::example$stem.adoc[tag=multi-a]
   ----

   Here's how the body of this example will be shown:

   =====
   include::example$stem.adoc[tag=multi-a-render]
   =====


/docs/modules/subs/examples/subs.adoc
=====================================

.. code-block: asciidoc

   // tag::backslash[]
   In /items/\{id}, the id attribute isn't replaced.
   The curly braces around it are preserved.

   \*Stars* isn't displayed as bold text.
   The asterisks around it are preserved.

   \&sect; appears as an entity reference.
   It's not converted into the section symbol (&sect;).

   \=> The backslash prevents the equals sign followed by a greater
   than sign from combining to form a double arrow character (=>).

   \[[Word]] is not interpreted as an anchor.
   The double brackets around it are preserved.

   [\[[Word]]] is not interpreted as a bibliography anchor.
   The triple brackets around it are preserved.

   The URL \https://example.org isn't converted into an active link.
   // end::backslash[]

   // tag::double-slash[]
   The text \\__func__ will appear with two underscores
   in front of it and after it.
   It won't be italicized.
   // end::double-slash[]

   // tag::subs-in[]
   [source,java,subs="verbatim,quotes"] <.>
   ----
   System.out.println("Hello *<name>*") <.>
   ----
   // end::subs-in[]

   // tag::subs-out[]
   [source,java,subs="verbatim,quotes"]
   ----
   System.out.println("Hello *<name>*") // <.> <.>
   ----
   // end::subs-out[]

   // tag::subs-add[]
   [source,xml,subs="attributes+"]
   ----
   <version>{version}</version>
   ----
   // end::subs-add[]

   // tag::subs-sub[]
   [source,xml,subs="-callouts"]
   .An illegal XML tag
   ----
   <1>
     content inside "1" tag
   </1>
   ----
   // end::subs-sub[]

   // tag::subs-multi[]
   [source,xml,subs="attributes+,+replacements,-callouts"]
   ----
   <version>{version}</version>
   <copyright>(C) ACME</copyright>
   <1>
     content inside "1" tag
   </1>
   ----
   // end::subs-multi[]

   // tag::subs-attr[]
   :markup-in-source: verbatim,quotes

   [source,java,subs="{markup-in-source}"]
   ----
   System.out.println("Hello *bold* text").
   ----
   // end::subs-attr[]


/docs/modules/stem/examples/stem.adoc
=====================================

.. code-block: asciidoc

   //User manual: Equations and Formulas

   // tag::base-co[]
   = My Diabolical Mathematical Opus
   Jamie Moriarty
   :stem: <.>
   // end::base-co[]

   // tag::base-alt[]
   = My Diabolical Mathematical Opus
   Jamie Moriarty
   :stem: latexmath
   // end::base-alt[]

   // tag::in-co[]
   stem:[sqrt(4) = 2] <.> <.>

   Water (stem:[H_2O]) is a critical component.
   // end::in-co[]

   // tag::in[]
   stem:[sqrt(4) = 2]

   Water (stem:[H_2O]) is a critical component.
   // end::in[]

   // tag::in-sb[]
   A matrix can be written as stem:[[[a,b\],[c,d\]\]((n),(k))].
   // end::in-sb[]

   // tag::bl-macro[]
   .Exponential growth
   stem::[x_0(1 + r)^2]
   // end::bl-macro[]

   // tag::bl-co[]
   [stem] <.>
   ++++ <.>
   sqrt(4) = 2
   ++++
   // end::bl-co[]

   // tag::bl[]
   [stem]
   ++++
   sqrt(4) = 2
   ++++
   // end::bl[]

   // tag::bl-alt[]
   [latexmath]
   ++++
   x = {-b \pm \sqrt{b^2-4ac} \over 2a}
   ++++
   // end:: bl-alt[]

   // tag::multi-l[]
   latexmath:[C = \alpha + \beta Y^{\gamma} + \epsilon]
   // end::multi-l[]

   // tag::multi-a[]
   = My Diabolical Mathematical Opus
   Jamie Moriarty
   :stem: latexmath

   .An e-xciting limit with LaTeX!
   [stem]
   ++++
   \lim_{n \to \infty}\frac{n}{\sqrt[n]{n!}} = {\large e}
   ++++

   .A basic square root with AsciiMath
   [asciimath]
   ++++
   sqrt(4) = 2
   ++++
   // end::multi-a[]

   // tag::multi-a-render[]
   .An e-xciting limit with LaTeX!
   [latexmath]
   ++++
   \lim_{n \to \infty}\frac{n}{\sqrt[n]{n!}} = {\large e}
   ++++

   .A basic square root with AsciiMath
   [stem]
   ++++
   sqrt(4) = 2
   ++++
   // end::multi-a-render[]


/docs/modules/subs/nav.adoc
===========================

.. code-block: asciidoc

   * xref:index.adoc[]
   ** xref:special-characters.adoc[]
   ** xref:quotes.adoc[]
   ** xref:attributes.adoc[]
   ** xref:replacements.adoc[]
   ** xref:macros.adoc[]
   ** xref:post-replacements.adoc[]
   ** xref:apply-subs-to-blocks.adoc[]
   ** xref:apply-subs-to-text.adoc[]
   ** xref:prevent.adoc[]


/docs/modules/subs/pages/index.adoc
===================================

.. code-block: asciidoc

   = Substitutions
   :page-aliases: substitutions.adoc
   :y: Yes
   //icon:check[role="green"]
   :n: No
   //icon:times[role="red"]

   ////
   user manual anchor: subs

   This page needs to become a more user friendly overview of what substitutions can do, how to leverage them and how to escape them and/or prevent them with a pass through.

   The groups and individual substitution categories (and tables) needs to be reorganized into a more cohesive body (and then squashed into a single reference page maybe?).
   The apply, prevent, and control pages need to be organized into a logical flow with clear statements of ... I have this problem: I need to get this attribute reference in this block to be replaced by not have the other <whatever> replaced, what do I use?
   All the groups and subs need to be hooked up to clear use cases.
   The single plus macro has no explanation (at least not in this module).
   The deprecate syntax needs to be moved to the deprecated table and/or migration docs.
   ////

   Substitutions are applied to leaf content of a block.
   Substitutions determine how the text is interpreted.
   If no substitutions are applied, the text is passed to the converter as entered.
   Otherwise, the substitutions transform that text.

   Substitutions replace references, formatting marks, characters and character sequences, and macros.
   Substitutions are organized into types and those types are bundled into groups.
   This page provides an overview of these classifications.
   Subsequence pages go into detail about each substitution type.

   == Substitution types

   Each substitution type replace characters, markup, attribute references, and macros in text with the appropriate output for a given converter.
   When a document is processed, up to six substitution types may be carried out depending on the block or inline element's assigned substitution group.
   The processor runs the substitutions in the following order:

   . xref:special-characters.adoc[]
   . xref:quotes.adoc[] (i.e., inline formatting)
   . xref:attributes.adoc[]
   . xref:replacements.adoc[]
   . xref:macros.adoc[]
   . xref:post-replacements.adoc[]

   For convenience, these types are grouped and ordered into substitution groups.

   [#substitution-groups]
   == Substitution groups

   Each block and inline element has a default substitution group that is applied unless you customize the substitutions for a particular element.
   <<table-subs-groups>> shows the substitution types that are executed in each group.

   include::partial$subs-group-table.adoc[]

   [#normal-group]
   === Normal substitution group

   The normal substitution group (`normal`) is applied to the majority of the AsciiDoc block and inline elements except for those specific elements listed under the groups described in the next sections.

   [#header-group]
   === Header substitution group

   The header substitution group (`header`) is applied to metadata lines (author and revision information) in the document header.
   It's also applied to the values of attribute entries, regardless of whether those entries are defined in the document header or body.
   Only special characters, attribute references, and the inline pass macro are replaced in elements that fall under the header group.

   TIP: You can use the inline pass macro in attribute entries to xref:apply-subs-to-text.adoc[customize the substitution types applied to the attribute's value].

   [#verbatim-group]
   === Verbatim substitution group

   Literal, listing, and source blocks are processed using the verbatim substitution group (`verbatim`).
   Only special characters are replaced in these blocks.

   [#pass-group]
   === Pass substitution group

   No substitutions are applied to three of the elements in the pass substitution group (`pass`).
   These elements include the xref:pass:pass-block.adoc[passthrough block], xref:pass:pass-macro.adoc#inline-pass[inline pass macro], and xref:pass:pass-macro.adoc#triple-plus[triple plus macro].

   The xref:pass:pass-macro.adoc#def-plus[inline single plus and double plus macros] also belong to the pass group.
   Only the special characters substitution is applied to these elements.

   [#none-group]
   === None substitution group

   The none substitution group (`none`) is applied to comment blocks.
   No substitutions are applied to comments.

   == Escaping substitutions

   The AsciiDoc syntax offers several approaches for preventing substitutions from being applied.
   When you want to prevent punctuation and symbols from being interpreted as formatting markup, xref:prevent.adoc[escaping the punctuation with a backslash] may be sufficient.
   For more comprehensive substitution prevention and control, you can use xref:pass:pass-macro.adoc[inline passthrough macros] or xref:pass:pass-block.adoc[passthrough blocks].


/docs/modules/subs/pages/special-characters.adoc
================================================

.. code-block: asciidoc

   = Special Character Substitutions
   :navtitle: Special Characters
   :table-caption: Table
   :y: Yes
   :n: No

   The special characters substitution step searches for three characters (`<`, `>`, `&`) and replaces them with their xref:replacements.adoc#char-ref-sidebar[named character references].

   * The less than symbol, `<`, is replaced with the named character reference `\&lt;`.
   * The greater than symbol, `>`, is replaced with the named character reference `\&gt;`.
   * An ampersand, `&`, is replaced with the named character reference `\&amp;`.

   == Default special characters substitution

   <<table-special>> lists the specific blocks and inline elements the special characters substitution step applies to automatically.

   .Blocks and inline elements subject to the special characters substitution
   [#table-special%autowidth,cols="~,^~"]
   |===
   |Blocks and elements |Substitution step applied by default

   |Attribute entry values |{y}

   |Comments |{n}

   |Examples |{y}

   |Headers |{y}

   |Literal, listings, and source |{y}

   |Macros |{y} +
   (except triple plus and inline pass macros)

   |Open |{y}

   |Paragraphs |{y}

   |Passthrough blocks |{n}

   |Quotes and verses |{y}

   |Sidebars |{y}

   |Tables |{y}

   |Titles |{y}
   |===

   == specialchars substitution value

   The special characters substitution step can be modified on blocks and inline elements.
   For blocks, the step's name, `specialchars`, can be assigned to the xref:apply-subs-to-blocks.adoc[subs attribute].
   For inline elements, the built-in values `c` or `specialchars` can be applied to xref:apply-subs-to-text.adoc[inline text] to add the special characters substitution step.

   [NOTE]
   ====
   Special character substitution precedes attribute substitution, so you need to manually escape any attributes containing special characters that you set in the CLI or API.
   For example, on the command line, type `+-a toc-title="Sections, Tables \&amp; Figures"+` instead of `-a toc-title="Sections, Tables & Figures"`.
   ====


/docs/modules/subs/pages/quotes.adoc
====================================

.. code-block: asciidoc

   = Quotes Substitutions
   :navtitle: Quotes
   :table-caption: Table
   :y: Yes
   //icon:check[role="green"]
   :n: No
   //icon:times[role="red"]

   The replacement of the formatting markup on inline elements is called the quotes substitution step.

   .Syntax input
   [source#ex-quotes]
   ----
   Happy werewolves are *really* slobbery.
   ----

   For instance, when a document containing the markup in <<ex-quotes>> is converted to HTML, any asterisks enclosing text are replaced with the start and end tags of the `<strong>` element.
   The resulting HTML can be seen in <<ex-html>> below.

   .HTML output
   [source#ex-html,html]
   ----
   Happy werewolves are <strong>really</strong> slobbery.
   ----

   <<table-quotes-html>> shows the HTML source code that is generated by the quotes substitution step.

   .HTML source code generated from AsciiDoc formatting syntax
   [#table-quotes-html%autowidth,cols="~,^~,^~"]
   |===
   |Name |AsciiDoc |HTML

   |emphasis
   |+_word_+
   |<em>word</em>

   |strong
   |+*word*+
   |<strong>word</strong>

   |monospace
   |+`word`+
   |<code>word</code>

   |superscript
   |+^word^+
   |<sup>word</sup>

   |subscript
   |+~word~+
   |<sub>word</sub>

   |double curved quotes
   |+"`word`"+
   |+&#8220;word&#8221;+

   |single curved quotes
   |+'`word`'+
   |+&#8216;word&#8217;+
   |===

   == Default quotes substitution

   <<table-quotes>> lists the specific blocks and inline elements the quotes substitution step applies to automatically.

   .Blocks and inline elements subject to the quotes substitution
   [#table-quotes%autowidth,cols="~,^~"]
   |===
   |Blocks and elements |Substitution step applied by default

   |Attribute entry values |{n}

   |Comments |{n}

   |Examples |{y}

   |Literal, listings, and source |{n}

   |Macros |{y} +
   (except passthrough macros)

   |Open |{y}

   |Paragraphs |{y}

   |Passthrough blocks |{n}

   |Quotes and verses |{y}

   |Sidebars |{y}

   |Tables |Varies

   |Titles |{y}
   |===

   [#quotes-value]
   == quotes substitution value

   The quotes substitution step can be modified on blocks and inline elements.
   For blocks, the step's name, `quotes`, can be assigned to the xref:apply-subs-to-blocks.adoc[subs attribute].
   For inline elements, the built-in values `q` or `quotes` can be applied to xref:apply-subs-to-text.adoc[inline text] to add the quotes substitution step.


/docs/modules/subs/pages/attributes.adoc
========================================

.. code-block: asciidoc

   = Attribute References Substitution
   :navtitle: Attribute References
   :table-caption: Table
   :y: Yes
   //icon:check[role="green"]
   :n: No
   //icon:times[role="red"]

   Attribute references are replaced with the values of the attribute they reference when processed by the attributes substitution step.

   == Default attributes substitution

   <<table-attributes>> lists the specific blocks and inline elements the attributes substitution step applies to automatically.

   .Blocks and inline elements subject to the attributes substitution
   [#table-attributes%autowidth,cols="~,^~"]
   |===
   |Blocks and elements |Substitution step applied by default

   |Attribute entry values |{y}

   |Comments |{n}

   |Examples |{y}

   |Headers |{y}

   |Literal, listings, and source |{n}

   |Macros |{y} +
   (except passthrough macros)

   |Open |{y}

   |Paragraphs |{y}

   |Passthrough blocks |{n}

   |Quotes and verses |{y}

   |Sidebars |{y}

   |Tables |Varies

   |Titles |{y}
   |===

   == attributes substitution value

   The attributes substitution step can be modified on blocks and the inline passthrough.
   For blocks, the step's name, `attributes`, can be assigned to the xref:apply-subs-to-blocks.adoc[subs attribute].
   For an inline passthrough, the built-in values `a` or `attributes` can be applied to xref:apply-subs-to-text.adoc[inline text] to add or remove the attributes substitution step.
   Single occurrences of an attribute reference can be escaped by prefixing the expression with a backslash.


/docs/modules/subs/pages/replacements.adoc
==========================================

.. code-block: asciidoc

   = Character Replacement Substitutions
   :navtitle: Character Replacements
   :table-caption: Table
   :y: Yes
   //icon:check[role="green"]
   :n: No
   //icon:times[role="red"]
   :url-html-ref: https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
   :url-unicode: https://en.wikipedia.org/wiki/List_of_Unicode_characters

   The character replacement substitution step processes textual characters such as marks, arrows and dashes and replaces them with the decimal format of their Unicode code point, i.e., their <<char-ref-sidebar,numeric character reference>>.
   The replacements step depends on the substitutions completed by the xref:special-characters.adoc[special characters step].

   // Table of Textual symbol replacements is inserted below
   include::partial$subs-symbol-repl.adoc[]

   This substitution step also recognizes {url-html-ref}[HTML and XML character references^] as well as {url-unicode}[decimal and hexadecimal Unicode code points^] and substitutes them for their corresponding decimal form Unicode code point.

   For example, to produce the `&sect;` symbol you could write `\&sect;`, `\&#x00A7;`, or `\&#167;`.
   When the document is processed, `replacements` will replace the section symbol reference, regardless of whether it is a named character reference or a numeric character reference, with `\&#167;`.
   In turn, `\&#167;` will display as &sect;.

   An AsciiDoc processor allows you to use any of the named character references (aka named entities) defined in HTML (e.g., \&euro; resolves to &euro;).
   However, using named character references can cause problems when generating non-HTML output such as PDF because the lookup table needed to resolve these names may not be defined.
   The recommendation is avoid using named character references, with the exception of the well-known ones defined in XML (i.e., lt, gt, amp, quot, apos).
   Instead, use numeric character references (e.g., \&#8364;).

   [#char-ref-sidebar]
   .Anatomy of a character reference
   ****
   A character reference is a standard sequence of characters that is substituted for a single character by an AsciiDoc processor.
   There are two types of character references: named character references and numeric character references.

   A named character reference (often called a _character entity reference_) is a short name that refers to a character (i.e., glyph).
   To make the reference, the name must be prefixed with an ampersand (`&`) and end with a semicolon (`;`).

   For example:

   * `\&dagger;` displays as &dagger;
   * `\&euro;` displays as &euro;
   * `\&loz;` displays as &loz;

   Numeric character references are the decimal or hexadecimal Universal Character Set/Unicode code points which refer to a character.

   * The decimal code point references are prefixed with an ampersand (`&`), followed by a hash (`&#35;`), and end with a semicolon (`;`).
   * Hexadecimal code point references are prefixed with an ampersand (`&`), followed by a hash (`&#35;`), followed by a lowercase `x`, and end with a semicolon (`;`).

   For example:

   * `\&#x2020;` or `\&#8224;` displays as &#8224;
   * `\&#x20AC;` or `\&#8364;` displays as &#8364;
   * `\&#x25CA;` or `\&#9674;` displays as &#x25CA;

   Developers may be more familiar with using *Unicode escape sequences* to perform text substitutions.
   For example, to produce an `&#64;` sign using a Unicode escape sequence, you would prefix the hexadecimal Unicode code point with a backslash (`\`) and an uppercase or lowercase `u`, i.e. `u0040`.
   However, the AsciiDoc syntax doesn't recognize Unicode escape sequences at this time.
   ****

   TIP: AsciiDoc also provides built-in attributes for representing some common symbols.
   These attributes and their corresponding output are listed in xref:attributes:character-replacement-ref.adoc[].

   == Default replacements substitution

   <<table-replace>> lists the specific blocks and inline elements the replacements substitution step applies to automatically.

   .Blocks and inline elements subject to the replacements substitution
   [#table-replace%autowidth,cols="~,^~"]
   |===
   |Blocks and elements |Substitution step applied by default

   |Attribute entry values |{n}

   |Comments |{n}

   |Examples |{y}

   |Headers |{n}

   |Literal, listings, and source |{n}

   |Macros |{y} +
   (except passthrough macros)

   |Open |{y}

   |Paragraphs |{y}

   |Passthrough blocks |{n}

   |Quotes and verses |{y}

   |Sidebars |{y}

   |Tables |Varies

   |Titles |{y}
   |===

   == replacements substitution value

   The replacements substitution step can be modified on blocks and inline elements.
   For blocks, the step's name, `replacements`, can be assigned to the xref:apply-subs-to-blocks.adoc[subs attribute].
   For inline elements, the built-in values `r` or `replacements` can be applied to xref:apply-subs-to-text.adoc[inline text] to add the replacements substitution step.

   WARNING: The replacements step depends on the substitutions completed by the xref:special-characters.adoc[special characters step].
   This is important to keep in mind when applying the `replacements` value to blocks and inline elements.


/docs/modules/subs/pages/macros.adoc
====================================

.. code-block: asciidoc

   = Macro Substitutions
   :navtitle: Macros
   :table-caption: Table
   :y: Yes
   //icon:check[role="green"]
   :n: No
   //icon:times[role="red"]

   The content of inline and block macros, such as cross references, links, and block images, are processed by the macros substitution step.
   The macros step replaces a macro's content with the appropriate built-in and user-defined configuration.

   == Default macros substitution

   <<table-macros>> lists the specific blocks and inline elements the macros substitution step applies to automatically.

   .Blocks and inline elements subject to the macros substitution
   [#table-macros%autowidth,cols="~,^~"]
   |===
   |Blocks and elements |Substitution step applied by default

   |Attribute entry values |Only the xref:pass:pass-macro.adoc#inline-pass[pass macro]

   |Comments |{n}

   |Examples |{y}

   |Headers |{n}

   |Literal, listings, and source |{n}

   |Macros |{y}

   |Open |{y}

   |Paragraphs |{y}

   |Passthrough blocks |{y}

   |Quotes and verses |{y}

   |Sidebars |{y}

   |Tables |Varies

   |Titles |{y}
   |===

   == macros substitution value

   The macros substitution step can be modified on blocks and inline elements.
   For blocks, the step's name, `macros`, can be assigned to the xref:apply-subs-to-blocks.adoc[subs attribute].
   For inline elements, the built-in values `m` or `macros` can be applied to xref:apply-subs-to-text.adoc[inline text] to add the macros substitution step.


/docs/modules/subs/pages/post-replacements.adoc
===============================================

.. code-block: asciidoc

   = Post Replacement Substitutions
   :navtitle: Post Replacements
   :table-caption: Table
   :y: Yes
   //icon:check[role="green"]
   :n: No
   //icon:times[role="red"]

   The line break character, `{plus}`, is replaced when the `post_replacements` substitution step runs.

   == Default post replacements substitution

   <<table-post>> lists the specific blocks and inline elements the post replacements substitution step applies to automatically.

   .Blocks and inline elements subject to the post replacements substitution
   [#table-post%autowidth,cols="~,^~"]
   |===
   |Blocks and elements |Substitution step applied by default

   |Attribute entry values |{n}

   |Comments |{n}

   |Examples |{y}

   |Headers |{n}

   |Literal, listings, and source |{n}

   |Macros |{y} +
   (except passthrough macros)

   |Open |{y}

   |Paragraphs |{y}

   |Passthrough blocks |{n}

   |Quotes and verses |{y}

   |Sidebars |{y}

   |Tables |Varies

   |Titles |{y}
   |===

   == post_replacements substitution value

   The post replacements substitution step can be modified on blocks and inline elements.
   For blocks, the step's name, `post_replacements`, can be assigned to the xref:apply-subs-to-blocks.adoc[subs attribute].
   For inline elements, the built-in values `p` or `post_replacements` can be applied to xref:apply-subs-to-text.adoc[inline text] to add the post replacements substitution step.


/docs/modules/subs/pages/apply-subs-to-blocks.adoc
==================================================

.. code-block: asciidoc

   = Customize the Substitutions Applied to Blocks

   Each block context is associated with a set default substitutions that best suit the content model.
   However, there are situations where you may need a different set of substitutions to be applied.
   For example, you may want the AsciiDoc processor to substitute attribute references in a listing block.
   Therefore, the AsciiDoc language provides a mechanism for altering the substitutions on a block.

   == The subs attribute

   The substitutions that get applied to a block (and to certain inline elements) can be changed or modified using the `subs` element attribute.
   This attribute accepts a comma-separated list of substitution steps or groups.

   The names of those substitution steps and groups are as follows:

   [#subs-groups]
   `none`:: Substitution group that disables all substitutions.

   `normal`:: Substitution group that performs all substitution types except callouts.

   `verbatim`:: Substitution group that replaces special characters and processes callouts.

   `specialchars`:: Substitution step that replaces `<`, `>`, and `&` with their corresponding entities.
   For source blocks, this substitution step enables syntax highlighting as well.

   `callouts`:: Substitution step that processes callouts in literal, listing, and source blocks.

   `quotes`:: Substitution step that applies inline text formatting.

   `attributes`:: Substitution step that replaces attribute references.

   `replacements`:: Substitution step that replaces hexadecimal Unicode code points and entity, HTML, and XML character references with the characters' decimal Unicode code point.
   The output of `replacements` may depend on whether the `specialcharacters` substitution was previously applied.

   `macros`:: Substitution step that processes inline and block macros.

   `post_replacements`:: Substitution step that processes the line break character (`{plus}`).

   If a `+` or `-` modifier is added to a step, the existing substitutions are modified accordingly (see <<incremental,incremental subs>>).
   Otherwise, the existing substitutions are replaced.
   The value also specifies the order in which the substitutions are applied.

   NOTE: The `subs` element attribute does not inherit to nested blocks.
   It can only be applied to a leaf block, which is any block that cannot have child blocks (e.g., a paragraph or a listing block).

   == Set the subs attribute on a block

   CAUTION: You should always prefer to use <<incremental,incremental substitutions>>, and only revert to exact substitutions when you require the additional control.

   Let's look at an example where you want to process inline formatting markup in a source block.
   By default, source blocks (as well as other verbatim blocks) are only subject to the verbatim substitution group (specialchars and callouts).
   You can change this behavior by setting the `subs` attribute in the block's attribute list.

   [source,asciidoc]
   ....
   include::example$subs.adoc[tag=subs-in]
   ....
   <.> The `subs` attribute is set in the attribute list and assigned the `verbatim` and `quotes` values.
   It's important to reinstate the `verbatim` substitution step to ensure special characters are encoded (which, for source blocks, also enables syntax highlighting).
   <.> The formatting markup in this line will be replaced when the `quotes` substitution step runs.

   Here's the result.

   ====
   include::example$subs.adoc[tag=subs-out]
   ====
   <.> The `verbatim` value enables any special characters and callouts to be processed.
   <.> The `quotes` value enables the bold text formatting to be processed.

   If enabling the quotes substitution step on the whole block causes problems, you can instead enable the macros substitution step, then use the pass macro to enable the quotes substitution step locally.

   [source,asciidoc]
   ....
   [source,java,subs="verbatim,macros"]
   ----
   System.out.println("No bold *here*");
   pass:c,q[System.out.println("Hello *<name>*");] <1>
   ----
   ....
   <1> The pass macro with the `c,q` target applies the specialchars and quotes substitution steps to the enclosed text.

   You may be wondering why `verbatim` is specified in the previous examples since it's applied to literal blocks by default.
   The reason is that when you specify substitutions without a modifier, it replaces all existing substitutions.
   Therefore, it's necessary to start with `verbatim` in order to restore the default substitutions.
   You can avoid having to do this by using incremental substitutions instead, which is covered in the next section.

   [#incremental]
   == Add and remove substitution types from a default substitution group

   When you set the `subs` attribute on a block, you automatically *remove* all of its default substitutions.
   For example, if you set `subs` on a literal block, and assign it a value of `attributes`, only attribute references are substituted.
   The `verbatim` substitution group will not be applied.
   To remedy this situation, AsciiDoc provides a syntax to append or remove substitutions instead of replacing them outright.

   You can add or remove a substitution type from the default substitution group using the plus (`+`) and minus (`-`) modifiers.
   These are known as [.term]*incremental substitutions*.

   `<substitution>+`::
   Prepends the substitution to the default list.

   `+<substitution>`::
   Appends the substitution to the default list.

   `-<substitution>`::
   Removes the substitution from the default list.

   For example, you can add the `attributes` substitution to the beginning of a listing block's default substitution group by placing the plus (`+`) modifier at the end of the `attributes` value.

   .Add attributes substitution to default substitution group
   [source]
   ....
   include::example$subs.adoc[tag=subs-add]
   ....

   Similarly, you can remove the `callouts` substitution from a block's default substitution group by placing the minus (`-`) modifier in front of the `callouts` value.

   .Remove callouts substitution from default substitution group
   [source,subs=-callouts]
   ....
   include::example$subs.adoc[tag=subs-sub]
   ....

   You can also specify whether the substitution type is added to the end of the substitution group.
   If a `+` comes before the name of the substitution, then it's added to the end of the existing list, whereas if a `+` comes after the name, it's added to the beginning of the list.

   [source,subs=-callouts]
   ....
   include::example$subs.adoc[tag=subs-multi]
   ....

   In the above example, the `attributes` substitution step is added to the beginning of the default substitution group, the `replacements` step is added to the end of the group, and the `callouts` step is removed from the group.

   // NOTE: More examples are pending. Information about the callouts substitution also needs to be included here.

   [TIP]
   ====
   If you are applying the same set of substitutions to numerous blocks, you should consider making them an attribute entry to ensure consistency.

   [source]
   ....
   include::example$subs.adoc[tag=subs-attr]
   ....

   Another way to ensure consistency and keep your documents clean and simple is to use the xref:asciidoctor:extensions:tree-processor.adoc[tree Processor extension].
   ====


/docs/modules/subs/pages/apply-subs-to-text.adoc
================================================

.. code-block: asciidoc

   = Customize the Substitutions Applied to Text

   The inline pass macro (`++pass:[]++`) accepts the shorthand values in addition to the longhand values for specifying substitution types.

   * `c` or `specialchars`
   * `q` or `quotes`
   * `a` or `attributes`
   * `r` or `replacements`
   * `m` or `macros`
   * `p` or `post_replacements`

   == Apply substitutions to inline text

   Custom substitutions can also be applied to inline text with the xref:pass:pass-macro.adoc[pass macro].
   For instance, let's assume you need to underline a span of text using the HTML element `<u>` in your AsciiDoc document.
   You'd do this with the inline pass macro.

   .Inline pass macro syntax
   [source#ex-pass]
   ----
   include::pass:example$pass.adoc[tag=in-macro]
   ----

   The result of <<ex-pass>> is rendered below.

   ====
   include::pass:example$pass.adoc[tag=in-macro]
   ====

   However, you also need to bold the text and want to use the AsciiDoc markup for that formatting.
   In this case, you'd assign the `quotes` substitution to the inline pass macro.

   .Assign quotes to inline pass macro
   [source#ex-sub-quotes]
   ----
   include::pass:example$pass.adoc[tag=s-macro]
   ----

   The result of <<ex-sub-quotes>> is rendered below.

   ====
   include::pass:example$pass.adoc[tag=s-macro]
   ====

   You can also assign custom substitutions to inline text that's in a block.
   In the listing block below, we want to process the inline formatting on the second line.

   .Listing block with inline formatting
   [source#ex-listing]
   ....
   include::pass:example$pass.adoc[tag=sub-in]
   ....
   <.> `macros` is assigned to `subs`, which allows the `pass` macro within the block to be processed.
   <.> The `pass` macro is assigned the `quotes` value.
   Text within the square brackets will be formatted.

   The result of <<ex-listing>> is rendered below.

   ====
   include::pass:example$pass.adoc[tag=sub-out]
   ====


/docs/modules/subs/pages/prevent.adoc
=====================================

.. code-block: asciidoc

   = Escape and Prevent Substitutions

   The AsciiDoc syntax offers several approaches for preventing substitutions from being applied.

   == Escape with backslashes

   To prevent a punctuation character from being interpreted as an attribute reference or formatting syntax (e.g., +_+, +^+) in normal content, prepend the character with a backslash (`\`).

   .Prevent unintended substitutions with a backslash in normal content
   [source#ex-backslash]
   ----
   include::example$subs.adoc[tag=backslash]
   ----

   The backslash can also prevent character replacements, macros, and attribute replacements.
   The results of <<ex-backslash>> are below.

   ====
   include::example$subs.adoc[tag=backslash]
   ====

   Notice that the backslash is removed so it doesn't display in your output.

   To prevent two adjacent characters (e.g., +__+, pass:[##]), from being interpreted as AsciiDoc syntax you need to precede it with two backslashes (`+\\+`).

   .Prevent unintended substitutions with two backslashes in normal content
   [source#ex-double-slash]
   ----
   include::example$subs.adoc[tag=double-slash]
   ----

   The results of <<ex-double-slash>> are below.

   ====
   include::example$subs.adoc[tag=double-slash]
   ====

   == Passthroughs

   A passthrough is the primary mechanism by which to escape content in AsciiDoc.
   They're far more comprehensive and consistent than using a backslash.
   As the name implies, a passthrough passes content directly through to the output document without applying any substitutions.

   You can control and prevent substitutions in inline text with the xref:pass:pass-macro.adoc[inline passthrough macros] and for entire blocks of content with the xref:pass:pass-block.adoc[block passthrough].


/docs/modules/subs/partials/subs-group-table.adoc
=================================================

.. code-block: asciidoc

   :table-caption: Table
   .Substitution types used by each substitution group
   [#table-subs-groups,cols="1,6*^"]
   |===
   |Group |Special characters |Quotes |Attributes |Replacements |Macros |Post replacements

   s|xref:subs:index.adoc#header-group[Header]
   |{y}
   |{n}
   |{y}
   |{n}
   |{n}
   |{n}

   s|xref:subs:index.adoc#none-group[None]
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}

   s|xref:subs:index.adoc#normal-group[Normal]
   |{y}
   |{y}
   |{y}
   |{y}
   |{y}
   |{y}

   s|xref:subs:index.adoc#pass-group[Pass]
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}

   s|xref:subs:index.adoc#verbatim-group[Verbatim]
   |{y}
   |{n}
   |{n}
   |{n}
   |{n}
   |{n}
   |===
   :!table-caption:


/docs/modules/subs/partials/subs-symbol-repl.adoc
=================================================

.. code-block: asciidoc

   [%autowidth,cols="~,^~,^~,^~,~"]
   .Textual symbol replacements
   |===
   |Name |Syntax |Unicode Replacement |Rendered |Notes

   |Copyright
   |+(C)+
   |+&#169;+
   |(C)
   |

   |Registered
   |+(R)+
   |+&#174;+
   |(R)
   |

   |Trademark
   |+(TM)+
   |+&#8482;+
   |(TM)
   |

   |Em dash
   |+--+
   |+&#8212;+
   |{empty}--{empty}
   |Only replaced if between two word characters, between a word character and a line boundary, or flanked by spaces.

   When flanked by space characters (e.g., `+a -- b+`), the normal spaces are replaced by thin spaces (\&#8201;).
   Otherwise, the em dash is followed by a zero-width space (\&#8203;) to provide a break opportunity.

   |Ellipsis
   |+...+
   |+&#8230;+
   |...
   |The ellipsis is followed by a zero-width space (\&#8203;) to provide a break opportunity.

   |Single right arrow
   |+->+
   |+&#8594;+
   |->
   |

   |Double right arrow
   |+=>+
   |+&#8658;+
   |=>
   |

   |Single left arrow
   |+<-+
   |+&#8592;+
   |<-
   |

   |Double left arrow
   |+<=+
   |+&#8656;+
   |<=
   |

   |Typographic apostrophe
   |Sam\'s
   |+Sam&#8217;s+
   |Sam's
   |The typewriter apostrophe is replaced with the typographic (aka curly or smart) apostrophe.
   |===


/docs/modules/pass/nav.adoc
===========================

.. code-block: asciidoc

   * xref:index.adoc[Passthroughs]
   ** xref:pass-block.adoc[]
   ** xref:pass-macro.adoc[]


/docs/modules/pass/pages/index.adoc
===================================

.. code-block: asciidoc

   = Passthroughs

   A passthrough is a mechanism in AsciiDoc for passing chunks of content directly through to the output.
   Most passthroughs give you control over which substitutions are applied to the content.
   AsciiDoc provides both block and inline forms of the passthrough.
   //Typically, a passthrough is used either to pass raw content like HTML to the output, or to escape content from inline formatting.

   The xref:pass-block.adoc[block form] of the passthrough is represented either by the `pass:[++++]` block delimiters or the `pass` style on a paragraph.
   The main use of the block form is to pass a chunk of non-AsciiDoc content directly through to the output.
   For example, you can use the passthrough block to pass raw HTML to the HTML output.
   However, by doing so, you're coupling your AsciiDoc content to an output format, thus making it less portable.
   It's best either to leave the use of the passthrough block up to an extension, or enclose it in a preprocessor conditional.

   The xref:pass-macro.adoc[inline form] of the passthrough comes in more forms and thus has more uses.
   An inline passthrough is represented by the `+pass:[]+` macro or by pairs of one to three pluses.
   Only the macro gives you control over the substitutions that are applied.
   While an inline passthrough can be used to pass raw content like HTML to the output, far more often it's used as a way to escape content from inline formatting.
   For example, you can use an inline passthrough to output characters that would otherwise be replaced, such as three sequential periods.


/docs/modules/pass/pages/pass-block.adoc
========================================

.. code-block: asciidoc

   = Passthrough Blocks

   The `pass` style and delimited passthrough block exclude the block's content from all substitutions unless the `subs` attribute is set.

   == Pass style syntax

   The `pass` style can also be set on a paragraph or an open block.

   [source]
   ----
   include::example$pass.adoc[tag=pass-style]
   ----

   == Delimited passthrough block syntax

   A passthrough block is delimited by four plus signs (`pass:[++++]`).

   [source]
   ----
   include::example$pass.adoc[tag=bl]
   ----

   (Keep in mind that AsciiDoc has a video macro, so this example is merely for demonstration.
   However, a passthrough could come in handy if you need to output more sophisticated markup than what the built-in HTML converter produces).

   == Control substitutions on a passthrough block

   You can use the xref:subs:apply-subs-to-blocks.adoc[subs attribute to specify a comma-separated list of substitutions].
   These substitutions will be applied to the content prior to it being reintroduced to the output document.

   [source]
   ----
   include::example$pass.adoc[tag=subs-bl]
   ----

   The content of the pass block does not get wrapped in a paragraph.
   Therefore, you can use the `pass` style in combination with the `normal` substitution category to output content without generating a paragraph.

   [source]
   ----
   include::example$pass.adoc[tag=no-para]
   ----

   WARNING: Using passthroughs to pass content (without substitutions) can couple your content to a specific output format, such as HTML.
   In these cases, you should use conditional preprocessor directives to route passthrough content for different output formats based on the current backend.


/docs/modules/pass/pages/pass-macro.adoc
========================================

.. code-block: asciidoc

   = Inline Passthroughs

   AsciiDoc supports several inline passthrough macros.

   == Inline passthrough macros

   [[def-plus]]single and double plus:: A special syntax for preventing inline text from being formatted.
   Only xref:subs:special-characters.adoc[special characters] are replaced in the output format.
   The substitutions can't be modified for this type of passthrough.

   triple plus:: A special inline syntax for designating passthrough content.
   No substitutions are applied nor can they be added using the step and group substitution values.

   inline pass macro:: An inline macro named `pass` that can be used to passthrough content.
   You can apply specific substitutions to the macro's target using substitution types and groups.
   +
   [source]
   ----
   pass:[content like #{variable} passed directly to the output] followed by normal content.

   content with only select substitutions applied: pass:c,a[__<{email}>__]
   ----

   TIP: When you need to prevent or control the substitutions on one or more blocks of content, use a xref:pass-block.adoc[delimited passthrough block or the pass block style].

   [#single-double-plus]
   == Single and double plus

   The single and double plus passthroughs prevent text enclosed in either a pair of single pluses (`+`) or a pair of double pluses (`++`) from being formatted.

   ----
   A +word+, a +sequence of words+, or ++char++acters that are escaped from formatting.
   ----

   The single and double pluses represent the constrained and unconstrained passthrough, respectively.
   They have boundaries that match the xref:text:index.adoc#formatting-marks-and-pairs[constrained and unconstrained formatting marks].
   The main difference, however, is that they are applied first to suppress formatting.

   This type of passthrough is intended to suppress any special meaning of the source text itself.
   This passthrough type still ensures, however, that the content is properly escaped in the output.
   That means the xref:subs:special-characters.adoc[special characters] substitution is still applied.

   As with all constrained pairs, the single plus passthrough is designed to be used around a word or phrase.

   ----
   A word or phrase between single pluses, such as +/document/{id}+, is not substituted.
   However, the special characters +<+ and +>+ are still escaped in the output.

   You can also escape formatting marks, like +``+.
   ----

   Being an unconstrained pair, the double plus passthrough can be used anywhere in the text.

   ----
   Text formatting is not applied to a link target if it is surrounded by double pluses.
   For example, link:++https://example.org/now_this__link_works.html++[].

   You can also escape formatting marks, like all-natural++*++.

   An attribute reference within a word, such as dev++{conf}++, is not replaced.
   ----

   The single and plus passthroughs are a surefire alternative to backslash escaping.

   Note that the single and plus passthroughs only prevent substitutions.
   They do not format the text in monospace.
   If you want to do both, you must enclose the pair in a monospace formatting pair, known as xref:text:literal-monospace.adoc[literal monospace].

   [#triple-plus]
   == Triple plus

   The triple plus passthrough excludes content enclosed in a pair of triple pluses (pass:[+++]) from all substitutions.

    +++content passed directly to the output+++ followed by normal content.

   The triple plus macro is often used to output custom HTML or XML.

   [source]
   ----
   include::example$pass.adoc[tag=3p]
   ----

   ====
   include::example$pass.adoc[tag=3p]
   ====

   [#inline-pass]
   == Inline pass macro

   Like other inline passthroughs, the inline pass macro can be used to control the substitutions applied to a run of text.
   To exclude inline content from all of the substitutions, enclose it in the inline pass macro.

   Here's one way to format text as underline when generating HTML from AsciiDoc:

   [source]
   ----
   include::example$pass.adoc[tag=in-macro]
   ----

   And here's the result.

   ====
   include::example$pass.adoc[tag=in-macro]
   ====

   WARNING: Using passthroughs to send content directly to the output can couple your content to a specific output format, such as HTML.
   To avoid this risk, you should consider using conditional preprocessor directives to select content for different output formats based on the current backend.

   What sets the inline pass macro apart from the alternatives is that it allows the substitutions to be customized.
   The inline pass macro also plays a critical role in the document header.
   In fact, it's the only macro that is processed in the document header by default as part of the xref:subs:index.adoc#header-group[header substitution group] (though it can be used to enable other substitutions, as demonstrated in this section).

   Let's look at how to use the inline pass macro to hand select substitutions.

   === Custom substitutions

   You can customize the substitutions applied to the content of an inline pass macro by specifying one or more substitution values in the target of the macro.
   Multiple values must be separated by commas and may not contain any spaces.
   The substitution value is either the formal name of a substitution type or group, or its shorthand.

   The following table lists the allowable substitution values:

   .Substitution values accepted by the inline pass macro
   [cols="1m,3m",width=50%]
   |===
   |Shorthand | Substitution Type

   |c
   |specialchars

   |a
   |attributes

   |r
   |replacements

   |m
   |macros

   |p
   |post replacements

   h|Shorthand
   h| Substitution Group

   |n
   |normal

   |v
   |verbatim
   |===

   For example, the quotes substitution (i.e., `q` or `quotes`) is enabled on the inline passthrough macro as follows:

   [source]
   ----
   include::example$pass.adoc[tag=in-macro-sub]
   ----

   Here's the result.

   ====
   include::example$pass.adoc[tag=in-macro-sub]
   ====

   To enable multiple substitution groups, separate each value in the macro target by a comma:

   [source]
   ----
   include::example$pass.adoc[tag=in-macro-subs]
   ----

   Here's the result.

   ====
   include::example$pass.adoc[tag=in-macro-subs]
   ====

   == Nesting blocks and passthroughs

   When you're using passthroughs inside literal and listing blocks, it can be easy to forget that the single plus and triple plus passthroughs are xref:subs:macros.adoc[macros substitutions].
   To enable the passthroughs, assign the `macros` value to the `subs` attribute.

   ....
   [source,java,subs="+quotes,+macros"]
   ----
   protected void configure(HttpSecurity http) throws Exception {
       http
           .authorizeRequests()
               **.antMatchers("/resources/+++**+++").permitAll()**
               .anyRequest().authenticated()
               .and()
           .formLogin()
               .loginPage("/login")
               .permitAll();
   ----
   ....

   To learn more about applying substitutions to blocks, see xref:subs:apply-subs-to-blocks.adoc[].

   [source,java,subs="+quotes,+macros"]
   ----
   protected void configure(HttpSecurity http) throws Exception {
       http
           .authorizeRequests()
               **.antMatchers("/resources/+++**+++").permitAll()**
               .anyRequest().authenticated()
               .and()
           .formLogin()
               .loginPage("/login")
               .permitAll();
   ----


/docs/modules/pass/examples/pass.adoc
=====================================

.. code-block: asciidoc

   // tag::in-macro[]
   The text pass:[<u>underline me</u>] is underlined.
   // end::in-macro[]

   // tag::in-macro-sub[]
   The text pass:q[<u>underline *me*</u>] is underlined.
   // end::in-macro-sub[]

   // tag::in-macro-subs[]
   The text pass:q,a[<u>underline _{docname}_</u>] is underlined.
   // end::in-macro-subs[]

   // tag::s-macro[]
   The text pass:q[<u>underline *me*</u>] is underlined and the word "`me`" is bold.
   // end::s-macro[]

   // tag::3p[]
   The text +++<u>underline me</u>+++ is underlined.
   // end::3p[]

   // tag::b-3p-macro[]
   +++<u>underline me</u>+++ is underlined.

   pass:[<u>underline me</u>] is also underlined.
   // end::b-3p-macro[]

   // tag::tick[]
   This java code: `System.out.println("No *bold* here");`
   will appear in a monospace font but without any other
   text formatting.
   // end::tick[]

   // tag::plus[]
   A word or phrase between single pluses, such as +/user/{id}+,
   is not substituted.
   However, the special characters like +<+ and +>+ are still
   escaped in the output.

   An attribute reference within a word, such as dev++{conf}++,
   is not replaced.

   A plus passthrough will escape standalone formatting marks,
   like +``+, or formatting marks within a word, like all-natural++*++.
   // end::plus[]

   // tag::backtick-plus[]
   Output literal monospace text, such as `+{backtick}+` or `+http://localhost:8080+`, by enclosing the text in a pair of pluses surrounded by a pair backticks.
   // end::backtick-plus[]

   // tag::sub-in[]
   [subs=+macros] <.>
   ----
   I better not contain *bold* or _italic_ text.
   pass:quotes[But I should contain *bold* text.] <.>
   ----
   // end::sub-in[]

   // tag::sub-out[]
   [subs=+macros]
   ----
   I better not contain *bold* or _italic_ text.
   pass:quotes[But I should contain *bold* text.]
   ----
   // end::sub-out[]

   // tag::bl[]
   ++++
   <video poster="images/movie-reel.png">
     <source src="videos/writing-zen.webm" type="video/webm">
   </video>
   ++++
   // end::bl[]

   // tag::b-bl[]
   ++++
   <p>
   Content in a passthrough block is passed to the output unprocessed.
   That means you can include raw HTML, like this embedded Gist:
   </p>

   <script src="https://gist.github.com/mojavelinux/5333524.js">
   </script>
   ++++
   // end::b-bl[]

   // tag::subs-bl[]
   [subs=attributes]
   ++++
   {name}
   image:tiger.png[]
   ++++
   // end::subs-bl[]

   // tag::no-para[]
   [subs=normal]
   ++++
   Normal content which is not enclosed in a paragraph.
   ++++
   // end::no-para[]

   // tag::pass-style[]
   [pass]
   <u>underline me</u> is underlined.
   // end::pass-style[]


/docs/modules/toc/nav.adoc
==========================

.. code-block: asciidoc

   * xref:index.adoc[]
   ** xref:title.adoc[]
   ** xref:levels.adoc[]
   ** xref:position.adoc[]
   ** xref:toc-ref.adoc[]


/docs/modules/toc/pages/index.adoc
==================================

.. code-block: asciidoc

   = Automatic Table of Contents

   A table of contents (TOC) is an index of section titles in an AsciiDoc document.
   When the TOC is enabled, the AsciiDoc processor automatically generates the TOC from the document's structure and inserts it into the output document.
   The number of levels (i.e., depth) of the TOC is configurable.

   == Activate the TOC

   To enable the autogenerated TOC, set the `toc` document attribute.
   The `toc` attribute is activated with an attribute entry in the document header.

   .Enable TOC with the toc attribute
   [source#ex-default]
   ----
   include::example$toc.adoc[tag=header]
   :toc: <.>
   include::example$toc.adoc[tag=body]
   ----
   <.> Set the `toc` attribute in the header using an attribute entry.
   When the value of `toc` is empty, the processor will use the attribute's default value.

   By default, the TOC is rendered directly below the document header, is titled _Table of Contents_, and contains section 1 and section 2 level titles only.
   The result of <<ex-default>> is displayed below.

   image::toc.png[Default table of contents,role=screenshot]

   You can customize the xref:title.adoc[title of the TOC], the xref:levels.adoc[depth of the section levels], and the xref:position.adoc[position of the TOC in the document].
   However, not all of the attributes are supported by all converters.
   See xref:toc-ref.adoc[] for which attributes are available to each converter.

   == Activate the TOC from the CLI

   The `toc` attribute can also be specified via the command line (`-a toc`).

   .TOC enabled via the CLI
    $ asciidoctor -a toc my-document.adoc


/docs/modules/toc/pages/title.adoc
==================================

.. code-block: asciidoc

   = Customize the TOC Title

   You can change the title of the table of contents with the `toc-title` attribute.

   == Set toc-title

   To generate a TOC with a custom title, set the `toc-title` attribute in the header and assign it your preferred title.

   .Define a custom TOC title
   [source#ex-title]
   ----
   include::example$toc.adoc[tags=header;title]
   ----
   <.> The `toc` attribute must be set in order to use `toc-title`.
   <.> The `toc-title` is set and assigned the value `Table of Adventures` in the document's header.

   The result of <<ex-title>> is displayed below.

   image::toc-title.png[Table of contents with a custom title,role=screenshot]


/docs/modules/toc/pages/levels.adoc
===================================

.. code-block: asciidoc

   = Adjust the TOC Depth
   :page-aliases: section-depth.adoc

   You can adjust the depth of section levels that are displayed in the table of contents with the `toclevels` attribute.

   == Set toclevels

   By default, the TOC displays level 1 (`==`) and level 2 (`===`) section titles.
   You can assign a different level depth with the `toclevels` attribute.
   Accepted values are the integers 1 through 5.

   .Define toclevels value
   [source#ex-levels]
   ----
   include::example$toc.adoc[tag=header]
   :toc: <.>
   :toclevels: 4 <.>
   include::example$toc.adoc[tag=body]
   ----
   <.> The `toc` attribute must be set in order to use `toclevels`.
   <.> `toclevels` is set and assigned the value `4` in the document header.
   The TOC will list the titles of any sections, levels 1 through 4 (i.e., `==` through `=====`), when the document is rendered.

   The result of <<ex-levels>> is displayed below.

   image::toclevels.png[table of contents with the toclevels attribute set,role=screenshot]


/docs/modules/toc/pages/position.adoc
=====================================

.. code-block: asciidoc

   = Position the TOC

   By default, the table of contents is inserted directly below the document title, author, and revision lines when the `toc` attribute is set and its value is left empty or set to `auto`.
   This location can be changed by assigning one of the built-in positional values to the `toc` attribute.
   The values are:

   * `left`
   * `right`
   * `preamble`
   * `macro`
   * `auto` (default)

   [#side-column]
   == Display the TOC as a side column

   When converting to HTML, you can position the TOC to the left or right of the main content column by assigning the value `left` or `right` to the `toc` attribute, respectively.
   The sidebar column containing the TOC is both fixed and scrollable.

   .Assign the left value to toc
   [source#ex-left]
   ----
   include::example$toc.adoc[tag=header]
   :toc: left
   include::example$toc.adoc[tag=body]
   ----

   The result of <<ex-left>> is displayed below.

   image::toc-left.png[Display the table of contents as a side column,role=screenshot]

   This positioning is achieved using CSS and depends on support from the stylesheet.

   [#min-width-requirement]
   WARNING: The side positions (left and right) have a width requirement.
   These positions are only honored if there's sufficient room on the screen to fit the sidebar column (typically at least 768px).
   If sufficient room available is not available (i.e., the screen width falls below the breakpoint), the TOC *automatically shifts back to the center*, appearing directly below the document title.

   NOTE: The TOC is always placed in the center in an embeddable HTML document, regardless of the value of the `toc` attribute.

   [#beneath-preamble]
   == Display the TOC beneath the preamble

   When `toc` is assigned the built-in value `preamble`, the TOC is placed immediately below the xref:blocks:preamble-and-lead.adoc[preamble].

   .Assign the preamble value to toc
   [source#ex-preamble]
   ----
   include::example$toc.adoc[tags=header;preamble]
   ----

   The result of <<ex-preamble>> is displayed below.

   image::toc-preamble.png[Display the table of contents below the preamble,role=screenshot]

   CAUTION: When using the `preamble` value, the TOC will not appear if your document does not have a preamble.
   To fix this problem, set the `toc` attribute to an empty value (i.e., leave the value empty) or assign it the value `auto`.

   [#at-macro]
   == Use the TOC macro to position the TOC

   To place the TOC in specific location in the document, assign the `macro` value to the `toc` attribute.
   Then, enter the table of contents block macro (i.e., TOC macro) on the line in your document where you want the TOC to appear.
   The TOC macro should only be used once in a document.

   If the `toc` document attribute isn't assigned the value `macro`, any TOC macro in the document will be ignored.

   .Assign the macro value to toc
   [source#ex-macro]
   ----
   include::example$toc.adoc[tags=header;macro]
   ----
   <.> The `toc` attribute must be set to `macro` to enable the use of the TOC macro.
   <.> In this example, the TOC macro is placed below the first section's title, indicating that this is the location where the TOC will be displayed once the document is rendered.

   The result of <<ex-macro>> is displayed below.

   image::toc-macro.png[Display the table of contents using the TOC macro,role=screenshot]

   [#limitations]
   == Embeddable HTML, editor and previewer limitations

   When AsciiDoc is converted to embeddable HTML (i.e., the `header_footer` option is `false`), there are only three valid values for the `toc` attribute:

   * `auto`
   * `preamble`
   * `macro`

   All of the following environments convert AsciiDoc to embeddable HTML:

   * the file viewer on GitHub and GitLab
   * the AsciiDoc preview in an editor like Atom, Brackets or AsciidocFX
   * the Asciidoctor browser extensions

   IMPORTANT: The side column placement (left or right) isn't available in this mode.
   That's because the embeddable HTML doesn't have the outer framing (or the CSS) necessary to support a side column TOC.


/docs/modules/toc/pages/toc-ref.adoc
====================================

.. code-block: asciidoc

   = TOC Attributes Reference

   //[cols="1,1,2,2,1"]
   [%autowidth]
   |===
   |Attribute |Values |Example Syntax |Notes |Backends

   .4+|`toc`
   |`auto`, `left`, `right`, `macro`, `preamble`
   |`:toc: left`
   |Not set by default.
   Defaults to `auto` if value is unspecified.
   |html

   |`auto`, `macro`, `preamble`
   |`:toc: macro`
   |Not set by default.
   Defaults to `auto` if value is unspecified.
   |html (embeddable)

   |`auto`
   |`:toc:`
   |Not set by default.
   When the title page is enabled in PDF output, the table of contents is placed directly after the title page.
   |pdf

   |`auto`
   |`:toc:`
   |Not set by default.
   The placement and styling of the table of contents is determined by the DocBook toolchain configuration.
   |docbook

   |`toclevels`
   |1–5
   |`:toclevels: 4`
   |Default value is `2`.
   |html, pdf

   |`toc-title`
   |user-defined
   |`:toc-title: Contents`
   |Default value is _Table of Contents_.
   |html, pdf

   |`toc-class`
   |valid CSS class name
   |`:toc-class: floating-toc`
   |Default value is _toc_.
   |html
   |===


/docs/modules/toc/examples/toc.adoc
===================================

.. code-block: asciidoc

   // tag::header[]
   = The Intrepid Chronicles
   Kismet Lee; B. Steppenwolf; Pax Draeke
   // end::header[]
   // tag::body[]

   == Certain Peril

   Daylight trickles across the cobblestones...

   === A Recipe for Potion

   We have to harvest the leaves by the light of the teal moons...

   ==== Searching for Ginseng

   Crawling through the twisted understory...

   == Dawn on the Plateau

   Hanging from...
   // end::body[]

   // tag::title[]
   :toc: <.>
   :toc-title: Table of Adventures <.>

   == Certain Peril

   Daylight trickles across the cobblestones...
   // end::title[]

   // tag::preamble[]
   :toc: preamble

   This adventure begins on a frigid morning.
   We've run out of coffee beans, but leaving our office means venturing into certain peril.

   == Certain Peril

   Daylight trickles across the cobblestones...

   == Dawn on the Plateau

   Hanging from...
   // end::preamble[]

   // tag::macro[]
   :toc: macro <.>

   == Certain Peril

   toc::[] <.>

   Daylight trickles across the cobblestones...

   == Dawn on the Plateau

   Hanging from...
   // end::macro[]


/docs/modules/docinfo/nav.adoc
==============================

.. code-block: asciidoc

   * xref:index.adoc[]


/docs/modules/docinfo/pages/index.adoc
======================================

.. code-block: asciidoc

   = Docinfo Files
   :url-docbook-info-ref: https://tdg.docbook.org/tdg/5.0/info.html
   :url-docinfo-example: https://github.com/clojure-cookbook/clojure-cookbook/blob/master/book-docinfo.xml

   Docinfo is a feature of AsciiDoc that allows you to insert custom content into the head, header, or footer of the output document.
   This custom content is read from files known as docinfo files by the converter.
   Docinfo files are intended as convenient way to supplement the output produced by a converter.
   Examples include injecting auxiliary metadata, stylesheets, and scripting logic not already provided by the converter.

   The docinfo feature does not apply to all backends.
   While it works when converting to output formats such as HTML and DocBook, it does not work when converting to PDF using Asciidoctor PDF.

   The docinfo feature must be explicitly enabled using the `docinfo` attribute (see <<enable>>).
   Which docinfo files are consumed depends on the value of the `docinfo` attribute as well as the backend.

   [#head]
   == Head docinfo files

   The content of head docinfo files gets injected into the top of the document.
   For HTML, the content is append to the `<head>` element.
   For DocBook, the content is appended to the root `<info>` element.

   The docinfo file for HTML output may contain valid elements to populate the HTML `<head>` element, including:

   * `<base>`
   * `<link>`
   * `<meta>`
   * `<noscript>`
   * `<script>`
   * `<style>`

   CAUTION: Use of the `<title>` element is not recommended as it's already emitted by the converter.

   You do not need to include the enclosing `<head>` element as it's assumed to be the envelope.

   Here's an example:

   .A head docinfo file for HTML output
   [source,html]
   ----
   <meta name="keywords" content="open source, documentation">
   <meta name="description" content="The dangerous and thrilling adventures of an open source documentation team.">
   <link rel="stylesheet" href="basejump.css">
   <script src="map.js"></script>
   ----

   Docinfo files for HTML output must be saved with the `.html` file extension.
   See <<naming>> for more details.

   The docinfo file for DocBook 5.0 output may include any of the {url-docbook-info-ref}[<info> element's children^], such as:

   * `<address>`
   * `<copyright>`
   * `<edition>`
   * `<keywordset>`
   * `<publisher>`
   * `<subtitle>`
   * `<revhistory>`

   The following example shows some of the content a docinfo file for DocBook might contain.

   .A docinfo file for DocBook 5.0 output
   [source,xml]
   ----
   <author>
     <personname>
       <firstname>Karma</firstname>
       <surname>Chameleon</surname>
     </personname>
     <affiliation>
       <jobtitle>Word SWAT Team Leader</jobtitle>
     </affiliation>
   </author>

   <keywordset>
     <keyword>open source</keyword>
     <keyword>documentation</keyword>
     <keyword>adventure</keyword>
   </keywordset>

   <printhistory>
     <para>April, 2021. Twenty-sixth printing.</para>
   </printhistory>
   ----

   Docinfo files for DocBook output must be saved with the `.xml` file extension.
   See <<naming>> for more details.

   You can find a real-world example of a docinfo file for DocBook in the source of the {url-docinfo-example}[Clojure Cookbook^].

   [#header]
   == Header docinfo files

   Header docinfo files are differentiated from head docinfo files by the addition of `-header` to the file name.
   In the HTML output, the header content is inserted immediately before the header div (i.e., `<div id="header">`).
   In the DocBook output, the header content is inserted immediately after the opening tag (e.g., `<article>` or `<book>`).

   TIP: One possible use of the header docinfo file is to completely replace the default header in the standard stylesheet.
   Just set the attribute `noheader`, then apply a custom header docinfo file.

   [#footer]
   == Footer docinfo files

   Footer docinfo files are differentiated from head docinfo files by the addition of `-footer` to the file name.
   In the HTML output, the footer content is inserted immediately after the footer div (i.e., `<div id="footer">`).
   In the DocBook output, the footer content is inserted immediately before the ending tag (e.g., `</article>` or `</book>`).

   TIP: One possible use of the footer docinfo file is to completely replace the default footer in the standard stylesheet.
   Just set the attribute `nofooter`, then apply a custom footer docinfo file.

   // Not here! Good info, but does nothing to clarify the previous paragraphs and could confuse.
   ////
   TIP: To change the text in the "Last updated" line in the footer, set the text in the attribute `last-update-label` (for example, `:last-update-label: <your text> Last Updated`). +
   To disable the "Last updated" line in the footer, unassign the attribute `last-update-label` (however, this leaves an empty footer div). +
   To disable the footer completely, set the attribute `nofooter`. Then having a footer docinfo file effectively replaces the default footer with your custom footer.
   ////

   [#naming]
   == Naming docinfo files

   The file that gets selected to provide the docinfo depends on which converter is in use (html, docbook, etc) and whether the docinfo scope is configured for a specific document ("`private`") or for all documents in the same directory ("`shared`").
   The file extension of the docinfo file must match the file extension of the output file (as specified by the `outfilesuffix` attribute, a value which always begins with a period (`.`)).

   .Docinfo file naming
   [cols="<10,<20,<30,<30"]
   |===
   |Mode |Location |Behavior |Docinfo file name

   .3+|Private
   |Head
   |Adds content to `<head>`/`<info>` for <docname>.adoc files.
   |`<docname>-docinfo<outfilesuffix>`

   |Header
   |Adds content to start of document for <docname>.adoc files.
   |`<docname>-docinfo-header<outfilesuffix>`

   |Footer
   |Adds content to end of document for <docname>.adoc files.
   |`<docname>-docinfo-footer<outfilesuffix>`

   .3+|Shared
   |Head
   |Adds content to `<head>`/`<info>` for any document in same directory.
   |`docinfo<outfilesuffix>`

   |Header
   |Adds content to start of document for any document in same directory.
   |`docinfo-header<outfilesuffix>`

   |Footer
   |Adds content to end of document for any document in same directory.
   |`docinfo-footer<outfilesuffix>`
   |===

   [#enable]
   == Enabling docinfo

   To specify which file(s) you want to apply, set the `docinfo` attribute to any combination of these values:

   * `private-head`
   * `private-header`
   * `private-footer`
   * `private` (alias for `private-head,private-header,private-footer`)
   * `shared-head`
   * `shared-header`
   * `shared-footer`
   * `shared` (alias for `shared-head,shared-header,shared-footer`)

   Setting `docinfo` with no value is equivalent to setting the value to `private`.

   For example:

   [source,asciidoc]
   ----
   :docinfo: shared,private-footer
   ----

   This docinfo configuration will apply the shared docinfo head, header and footer files, if they exist, as well as the private footer file, if it exists.

   Let's apply this to an example:

   You have two AsciiDoc documents, [.path]_adventure.adoc_ and [.path]_insurance.adoc_, saved in the same folder.
   You want to add the same content to the head of both documents when they're converted to HTML.

   . Create a docinfo file containing `<head>` elements.
   . Save it as docinfo.html.
   . Set the `docinfo` attribute in [.path]_adventure.adoc_ and [.path]_insurance.adoc_ to `shared`.

   You also want to include some additional content, but only to the head of [.path]_adventure.adoc_.

   . Create *another* docinfo file containing `<head>` elements.
   . Save it as [.path]_adventure-docinfo.html_.
   . Set the `docinfo` attribute in [.path]_adventure.adoc_ to `shared,private-head`

   If other AsciiDoc files are added to the same folder, and `docinfo` is set to `shared` in those files, only the [.path]_docinfo.html_ file will be added when converting those files.

   [#resolving]
   == Locating docinfo files

   By default, docinfo files are searched for in the same directory as the document file (which can be overridden by setting the `:base_dir` API option / `--base-dir` CLI option).
   If you want to load them from another location, set the `docinfodir` attribute to the directory where the files are located.
   If the value of the `docinfodir` attribute is a relative path, that value is appended to the document directory.
   If the value is an absolute path, that value is used as is.

   [source,asciidoc]
   ----
   :docinfodir: common/meta
   ----

   Note that if you use this attribute, only the specified folder will be searched; docinfo files in the document directory will no longer be found.

   [#attribute-substitution]
   == Attribute substitution in docinfo files

   Docinfo files may include attribute references.
   Which substitutions get applied is controlled by the `docinfosubs` attribute, which takes a comma-separated list of substitution names.
   The value of this attribute defaults to `attributes`.

   For example, if you created the following docinfo file:

   .Docinfo file (docinfo.xml) containing a revnumber attribute reference
   [source,xml]
   ----
   <edition>{revnumber}</edition>
   ----

   And this source document:

   .Source document including a revision number
   [,asciidoc]
   ----
   = Document Title
   Author Name
   v1.0, 2020-12-30
   :doctype: book
   :backend: docbook
   :docinfo: shared
   ----

   Then the converted DocBook output would be:

   .Converted DocBook containing the docinfo
   [,xml]
   ----
   <?xml version="1.0" encoding="UTF-8"?>
   <book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
   <info>
   <title>Document Title</title>
   <date>2020-12-30</date>
   <author>
   <personname>
   <firstname>Author</firstname>
   <surname>Name</surname>
   </personname>
   </author>
   <authorinitials>AN</authorinitials>
   <revhistory>
   <revision>
   <revnumber>1.0</revnumber>
   <date>2020-12-30</date>
   <authorinitials>AN</authorinitials>
   </revision>
   </revhistory>
   <edition>1.0</edition> <!--.-->
   </info>
   </book>
   ----
   <.> The revnumber attribute reference in `docinfo.xml` was replaced by the source document's revision number in the converted output.

   Another example is if you want to define the license link tag in the HTML head.

   .Docinfo file (docinfo.html) containing a license meta tag
   [,html]
   ----
   <link rel="license" href="{license-url}" title="{license-title}">
   ----

   Now define these attributes in your AsciiDoc source:

   .Source document that defines license attributes
   [,asciidoc]
   ----
   = Document Title
   :license-url: https://mit-license.org
   :license-title: MIT
   :docinfo: shared
   ----

   Then the `<head>` tag in the converted HTML would include:

   .Rendered license link tag in HTML output
   [,html]
   ----
   <link rel="license" href="https://mit-license.org" title="MIT">
   ----


/spec/outline.adoc
==================

.. code-block: asciidoc

   = AsciiDoc Language Specification Outline
   Dan Allen; Sarah White
   :doctype: book
   :partnums:
   :part-signifier: Part
   :toc:
   :toclevels: 4
   :url-issues: https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues

   == Specification Goals

   The goal of the AsciiDoc Language Specification is to describe a definitive, comprehensive, and parsable grammar for the AsciiDoc syntax.
   The focus at this stage is on being able to identify the structure of an AsciiDoc document and to parse its contents into a node model.
   The grammar will be documented in technical sections using a grammar expression that best suits the language (e.g., PEG).
   The specification will be clear about what parts of the syntax are handled by the preprocessor(s), which parts are handled by the core structure parser, and what information from the document must be captured and recorded in the Abstract Semantic Graph (ASG).
   Additionally, the specification must state expectations for converters given the information provided in the node model.

   From a purely technical perspective, the specification may not define a single grammar that can be used with a parser generator (as it may not even be possible to do so).
   However, effectively, the specification will define grammars that, when working together, will describe how to parse an AsciiDoc document.
   How the grammars are defined will be resolved as the first version of the specification is developed.

   Specify the AsciiDoc language with an eye towards readability, writer-friendliness, consistency, and efficiency.
   With AsciiDoc, we aim to strike a balance between minimal markup and maximum semantics.
   Since an AsciiDoc language processor will be used to process large amounts of content, the language must be specified in such a way that it can be parsed efficiently.
   The language is designed to degrade gracefully, when possible.
   If a grammar rule can't be matched, and it's safe to do so, the processor should fall back to treating the line or run of text as uninterpreted.
   It's also vital to be able to extract information from an AsciiDoc document, so it should be possible to model the document's entire structure.
   When there are conflicts in the interpretation of the syntax, the most intuitive behavior should be chosen.

   .Outline purpose and notations
   ****
   This outline serves two purposes:

   . It provides the overall structure and organization of the topics that will be addressed in the specification document.
   . It contextualizes questions, clarifications, and issues that need to be discussed and resolved during the development of the specification.

   The following abbreviations are entered next to select items in this outline to ensure that we attend to them during development:

   FI:: *FI* is the notation for *Future Issue*.
   A proposal, decision, or clarification marked with *FI* needs to be addressed by an issue that will be filed in the future when the appropriate domain or topic has risen to imminent discussion and development in the specification or TCK.

   #<issue-number>:: The number of an active issue (linked to itself in the issue tracker) that addresses a proposal, decision, or clarification stated in the outline.
   The issue number replaces the *FI* notation on an item.

   SDR:: *SDR* is the notation for *Specification Document Requirement*.
   Items marked with this notation are usually terms that we need to define within the context of the specification document and then use consistently within the document hence forth.
   Such items may need an issue to resolve their name or definition, but most are likely to be confirmed during a related technical discussion.
   ****

   == AsciiDoc Language introduction and purpose

   AsciiDoc is a lightweight markup language for writing.
   Specifically, AsciiDoc is a lightweight markup language that is predominantly line-oriented and start margin-aligned (i.e., left-aligned in ltr).
   That means AsciiDoc is a Unicode-compliant textual (not binary) language with conventions and special/reserved markup that must be interpreted by a processor.
   All reserved markup characters are selected from the ASCII character set (hence its name).

   The purpose of the language is to focus on encoding explanatory or literary information in a clear and concise way, thus keeping content separate from presentation (with the exception of sensible presentation hints in the form of roles and options).
   The conventions and markup give the document an inherent structure.
   A processor is responsible for identifying and extracting that structure from the document.
   In a lightweight markup language, all sequences of characters are valid unless they explicitly create unbalanced boundaries / invalid combinations or references.
   Some sequences of characters have special meaning.
   It's up to the processor to identify these.

   = Fundamentals

   == Lexicon, concepts, and common patterns

   // quick flyover; non-normative
   .Lexicon and concepts
   * markup character / character sequence
   * document
   * block vs inline (vertical vs horizontal markup)
    ** blocks are always defined from top to bottom (vertical), whereas inline markup can be thought of as horizontal (considering wrapped lines as part of the same logical line). We're just painting a picture here, but be careful not to overgeneralize the concept.
   * element
   * text
   * attribute / metadata
   * processor (parser / converter)
   * input
   * output / output format
   * context (the parent/place/environment where something is used)

   .Patterns
   * markers
   * headings
   * attrlist / boxed attrlist
   * (preprocessor) directives
   * macros
   * delimiter lines
   * marked text (text enclosed in a pair of marks, usually congruent)

   .Characteristics
   * Document encoding is assumed to be Unicode; all Unicode characters are permitted
   * Reserved markup is selected from the ASCII character set
   * Syntax is oriented around lines that are aligned to the start margin (left-aligned in ltr)
   * Block syntax does not backtrace; if a delimited block is opened, it must be closed
   * Block boundaries in the syntax are a mix of explicit and implicit
   * Blocks can be nested in blocks if delimiters aren't ambiguous; you can't nest like in like, but can nest like as a grandchild of like
   * For block syntax, a line which doesn't fully match a recognized pattern is treated the same as paragraph text
   * Inline syntax is assumed to be (uninterpreted) text interspersed with interpreted markup
   * For inline syntax, the left-hand side of a markup pattern is assumed to be valid until it isn't; if it isn't, it reverts to the next alternative or uninterpreted text
   * Space characters, particularly empty lines, are often significant, but not always

   == Characters

   * An AsciiDoc document is a continuous, uncompressed sequence of characters (text), aka character data
   * A character is a single codepoint of text
   * Any text or code editor can read and display an AsciiDoc file
   * Some characters have a visible glyph, others do not
   * Any sequence of characters is valid; certain uses of characters have special meaning; when one of those designated uses/sequences is found, it may activate additional rules, such as a matching block delimiter line.

   === Unicode support

   * A character in AsciiDoc can be any character defined by Unicode.
    ** Control characters and other characters which don't occupy space should be avoided.
   * *FI* Will AsciiDoc recognize Unicode escape sequences (such as `\u2318`) as an alternative to character references?
   * An AsciiDoc document is assumed to have UTF-8 encoding.
    ** Processors may support other encodings, but the input must be re-encoded to UTF-8 before parsing.

   === Reserved characters

   * A reserved character is a character selected from the ASCII character set used for markup in the AsciiDoc syntax
   * Reserved characters are almost always a punctuation character or symbol (macro names being one exception).

   === Space characters

   * An AsciiDoc document may use tabs or spaces as space characters, though the inline syntax primarily only considers spaces.
   * A space character is a space, tab, or line ending (e.g., newline).
    ** *FI* Precisely, what space characters are permitted (e.g., space, tab, newline) or restricted? (For example, `\s` includes no-break space (`\u00a0`) in JavaScript, but not in Ruby.)
   * Other space characters are permitted in the document, but will not be interpreted as such.
   * Newlines create separate lines, which are often treated specially in AsciiDoc.
   * Empty lines are often treated as significant when analyzing the block structure of an AsciiDoc document
   * Two consecutive line endings create an empty line; consecutive empty lines in non-verbatim content are semantically equivalent to a single empty line
   * Except in verbatim or raw content or block metadata, an empty line is interpreted as a block boundary.
   * Leading space characters make an indented line.
   * Trailing space characters are insignificant and may be dropped by the processor.
    ** *FI* How are trailing space characters in the source going to be handled?
   * The one exception is a non-AsciiDoc include file with lines that include trailing space characters; these characters must be preserved.

   === Wordy characters

   * AsciiDoc often uses words and word boundaries to determine what markup is valid.
   * However, the term "`word`" in this context is not well-defined.
   * Furthermore, the term "`word`" traditionally includes the underscore character, which is a reserved character in the AsciiDoc markup.
     ** *FI* The underscore character should no longer be treated as a word character; should be treated as a syntax token only.
   * Thus, AsciiDoc defines the term "`alpha\d`" to identify a letter or number character.
   * alpha\d is an alphabetic character (as defined by Unicode) or an Arabic numeral (0-9).
   It can be represented by the regular expression `+[\p{Alpha}\d]+`.
   For details, see https://www.unicode.org/reports/tr44/#Alphabetic.
    ** *FI* Should the alphabetic property be restricted to +\p{L}+ or +\p{LC}+? (LC does not match letters that are ideographs)
   * An example where the alpha\d character has meaning in the AsciiDoc syntax is that constrained markup must not be bounded on either side by an alpha\d character.

   === Character references

   * A character reference is a special escape sequence that identifies a character by its name, decimal, or hexadecimal representation.
   * A named character reference is sometimes referred to as an entity.
   * Although AsciiDoc is not bound to HTML or XML, it adopts the character reference syntax from XML.
   * These character references will be identified by the parser and the processor will have a chance to replace them during conversion to the output format.

   == Lines

   * AsciiDoc is a line-oriented language.
   * Therefore, lines can be significant in the AsciiDoc language.
   * An AsciiDoc document may use universal/Unix (`\n`) or Windows (`\r\n`) line endings, though the line feed (`\n`) is preferred.
   * Line breaks are not significant between adjacent lines in a paragraph.
    ** A converter may choose to replace these line endings with the space character; however, they must be preserved in the parse tree.
    ** Preserving line endings in the parse tree makes it easier to express scenarios in the TCK.
    ** *FI* Should we declare line normalization; trailing space is insignificant, but not mandatory to remove it? (TCK would be ambiguous)
   * Block boundaries and block metadata are always defined on their own line and occupy the whole line.
   * When lines are not contiguous (separated by an empty line), that may signal a transition from one block to another.
   * A line ending must be preserved during parse; may not always need to be preserved when converted.

   === Indentation

   * AsciiDoc is a start margin-aligned (i.e., left-aligned in ltr) language.
   * Using the start margin as an anchor point in the syntax makes moving content around easier, avoids the problem of excessive/compound indentation, encourages the author to be more explicit about nesting, and makes the language easier to parse.
   * That means, with certain exceptions, space characters at the start of a line (an indented line) are significant.
   * The key exception are list markers, which may be indented without meaning.
   * A line with leading space characters at a block boundary makes a literal paragraph.
   * Spaces are recommended for indentation, but tabs may also be used.

   === Empty and interrupting lines

   * Empty lines may have significance.
   * In verbatim content, empty lines are preserved.
   * In general, empty lines are used to separate blocks.
   * The absence of an empty line between paragraphs will cause the lines to be fused together as a single paragraph.
   * Except in the case where empty lines are preserved (such as in verbatim content), multiple successive empty lines are equivalent to a single empty line.
   * Empty lines at the start and end of a verbatim block are dropped. <= need to clarify this behavior
   * Empty lines between and after block metadata lines are insignificant.
   * Empty lines between two basic list items are ignored. <= we may say that two empty lines break the list
   * Empty lines in all other places serve as the boundary between two blocks.
   * For block elements that do not have explicit boundaries (e.g., a delimited block), the block will end when an interrupting line is encountered
   * An empty line is often an interrupting line, but not the only one.
   * A block attribute line (a line that contains a boxed attrlist) is also an interrupting line.
   ** A block attribute line is a boxed attrlist defined on its own line.
   A boxed attrlist is also the syntax that follows the target of a block macro.
   So, when we are talking about something equivalent to a block attribute line for a block macro, it's a boxed attrlist.
   If we say attrlist, then we are comparing apples to oranges.
   * The closing block delimiter (if used in a place that it can match the opening block delimiter) is an interrupting line.
   * A list continuation line ends an attached block (but does not end the list; rather, it attaches the ensuing block to the list item)
   * Inside a list, a list item is an interrupting line; either starts a new list item or nested list, depending on the marker
    ** A block attribute line above a list is not interrupting if directly adjacent to the content of the previous list item (the lack of an empty line acts as an implicit list continuation)
   * Empty lines may be omitted when the language makes the separation between block elements unambiguous (such as when an interrupting line is encounter), though the use empty lines to keep blocks apart is strongly recommended.
   * The first and last line of the document is implicitly bounded on the outer edge by an empty line.

   === Block and document metadata, block delimiter, and skipped lines

   * Not all non-empty lines contribute to the document's content.
   * A line may provide metadata for an ensuing element (a block attribute line) or for the document (an attribute entry).
   * A line may delimit the boundaries of a block (though not all blocks have explicit delimiters).
   * A line is skipped if it's a comment line or within a comment block.
   * A line may contain a preprocessor directive, which adds or removes lines to the source.
   * Some, but not all, non-content lines are interrupting lines.

   == Macros

   * Macros are a sort of function call in AsciiDoc; often used to create a block or inline element.
   * There are block and inline macros.
   * Most macros are entered using the *named macro form*: `<name>::?<target>?[<attrlist>?]`.
   ** In the named macro form, the macro name is followed by a macro name delimiter followed by a target followed by a boxed attrlist (or boxed content).
   ** In the named macro form, a macro name is always required.
   ** The macro name delimiter is `::` for block macros and `:` for inline macros.
   ** A block macro can only be used in a block context; an inline macro can only be used in an inline context.
   ** For some macros, the target is optional or forbidden (e.g., `toc::[]`).
   ** For some macros, the attrlist is optional or forbidden.
   ** For some macros, the attrlist is only a single attribute value, often written as `<text>`.
   ** The box of a macro can be contents, attrlist, or contents followed by optional attrlist (but what about kbd?)
   * A few macros have a shorthand form/notation in addition to a named form (e.g., `+<<target>>+` and `+xref:target[attrlist]+` ).
   * A few macros are entered using a form unique to them (e.g., thematic break macro, autolinks, etc.).
   * Some syntax, such as inline passthroughs and include or conditional directives, may use the form of a macro but aren't actually macros.

   == Escaping mechanism
   //== Backslash escaping

   * to prevent markup from being interpreted, it may be preceded by a backslash (i.e., the beginning of a syntax rule)
   * the backslash deactivates the markup sequence that directly follows it
   * using a backslash may cause a different markup sequence to be matched; that sequence then must be escaped separately
   * there's no harm in over-escaping; a backslash in front of a reserved markup character will be removed, regardless of whether the text would have been interpreted or not
   * to write a backslash character into the output (perhaps only if it preceded a reserved markup character), it must be written as two backslash characters
   * markup can also be escaped by enclosing it in a passthrough block, inline passthrough span, or inline passthrough macro
   * a passthrough is also a way to pass through text raw to the converted output

   * {url-issues}/25[#25] Which markup characters to define as reserved?
   Should we say that all symbol/punctuation characters in the ASCII charset can be escaped, or limit it to just the ASCII characters that the AsciiDoc syntax currently uses?
   For reference, CommonMark allows escaping all ASCII punctuation.
   Here are the reserved markup characters identified thus far:
   +
   ----
   \ ` _ * # ~ ^ : [ < ( {
   ----
   +
   Note that it shouldn't be necessary to have to escape the closing bracket of a markup element, hence why those characters are not listed here as reserved.

   * {url-issues}/25[#25] For block-level constructs, are we interpreting the backslash because it's at the beginning of the line, or because it is escaping a character?
   I think we should consider it because it's used at the beginning of the line.
   (I think this would translate to removing the backslash at the beginning of a paragraph).
   That reduces how much markup we have to designate as reserved.
   It should be considered for the following block-level constructs:

   ** preprocessor directive (`\include::target[]`)
   ** block macro (`\image::target[]`)
   ** list item (`\* is an asterisk`)
   ** dlist term (`App\:: is a Ruby namespace`) (or should it be `\App:: is a Ruby namespace`?)
   ** heading (`\= is an equals sign`)

   == Document structure

   * An AsciiDoc document is a composition of all the elements it contains.
   * It's inherently a tree structure (DAG) wherein each node is an element representing a segment of the document.
   * This document model represents a parsed document as a logical tree.
   * Every node in this tree has a name, which identifies its primary function (e.g., `admonition`).
   * Nodes may be grouped by type (e.g., `block` or `inline`).
   * Nodes may have a variant to distinguish between variations on its name (e.g., `strong` for `span`).
   * Nodes may have a form to indicate how they are structured/expressed in the source (e.g., `macro`, `unconstrained`, etc).
   * Five conceptual node types
    ** block parent (element)
    ** block terminal (element)
   // An attribute entry may be a non-element block terminal
    ** inline parent (element)
    ** inline terminal (element)
    ** inline literal/string (naturally a non-element terminal)

   === Elements

   * An *element* is an identifiable, addressable, and composable chunk of content in a document.
   * The elements in a document form a predominantly start-margin-aligned, nested hierarchy of elements.
   * There are two primary element groups: block elements and inline elements.

   ==== Block elements

   * Block elements form the main structure of the document.
   * A block element is stacked vertically by line above or below other block elements.
   * There are two primary node types of block elements: basic/terminal blocks and compound/parent blocks.
   ** These node types are further described by their content model; a content model equates to the grammar rule for the contents of the block.
   * A *basic block* can only contain inline nodes (elements and uninterpreted text).
   * A *compound block* can only contain other blocks; those blocks in the compound block may contain inline elements unless they themselves are compound blocks.
   * Except for block titles, basic blocks are delineated from other block elements by an empty line separator, but they can have interrupters (boundaries).
   * Many compound blocks are delineated from other block elements by delimiter lines.
   ** The document, sections, and lists are not delineated; all other compound blocks are.
   * Block elements may be implicit blocks, such as sections, paragraphs, and block macros, and delimited blocks, such as examples, verses, and sidebars.

   ==== Inline elements

   * An *inline element*, a subset of *inlines*, is a span of content within a block.
   * Inline elements consist of marked text (emphasis, strong, etc.), inline macros, and inline shorthands.
   ** What fills in the gap between these elements is uninterpreted text and character references (non-elements).
   // TODO Define marked text as related to formatted text.
   // Attribute references are markup elements (essentially a grammar rule) expanded by the inline preprocessor, but not nodes in the parsed document

   === Uninterpreted text

   * *Uninterpreted text* (i.e., plain text) is text (character data) for which all inline grammar rules fail to match.
   * Thus, uninterpreted text is effectively all the text between inline elements (at any level of nesting).
   * Text may be uninterpreted because it does not make use of reserved markup characters, because it only matches a grammar rule partially (an opening mark without a closing mark), or because it has been escaped or otherwise enclosed in a passthrough region/span.

   = Documents, Document Metadata, and Document Attributes
   // Define what a document is programmatically, what it can contain, and its relationship to what it contains.

   == Document

   * A *document* is the root compound block element.
   * A document can have an optional header and zero or more block elements.
   * An empty document has no block elements and no header.
   * All elements have a reference to the document object / belong to it.
   * A document has an intrinsic outline that consists of the section hierarchy.

   === Document types

   * A document type (abbreviated doctype) determines which block elements are permitted and/or required, and the order in which they are allowed to appear.
   * There are three built-in document types: article, book, manpage
   * The default doctype is article.
   * The book doctype covers books with and without parts; a book with parts is called a multi-part book.
   // Q: should multi-part book a separate doctype?

   == Document header

   * A *document header* may contain a document title, author and revision lines, metadata (from block attribute lines), document attribute entries, and comment lines, all of which are optional.

   === Document header structure

   * The document header only accepts some AsciiDoc syntax, such as implicit metadata lines, attribute entries, and comment lines.
   * The document header may not contain interrupting lines
   ** *FI* Can the document header contain empty lines? If so, what defines the end of the document header?
   * The document title line is optional, but required for using implicit author and revision lines (i.e., author info and revision info lines).

   === Document title (aka doctitle)

   * A level-0 heading.
   * Since the document header must be at the start of the document, we can deduce that the doctitle is the first level-0 heading of the document.
   * May be above, below, or in between any number of attribute entries and comment lines.
   * Must directly precede the implicit metadata lines.

   === Implicit metadata lines

   * Author line
   ** State guidelines for author names, keeping internationalization in mind
   ** Some name forms may not be recognized using the author line; in such cases the attributes will need to be explicitly set.
   * Revision line; must come after author line (thus requires author line to be present).
   * This metadata can be defined explicitly using attribute entries; the implicit lines are merely a shorthand form.

   == Document attributes
   // Use content from https://docs.asciidoctor.org/asciidoc/latest/attributes/document-attributes/ and https://docs.asciidoctor.org/asciidoc/latest/attributes/attribute-entries/

   // We need to be careful here to distinguish between document attributes that are set in the document (and those in the parsed document) and document attributes that are passed in via the processor (and by that we mean through the API).
   * *Document attributes* are entities (in the XML lexicon), global options, and document metadata.
   * They are set and optionally assigned a value or unset in the document header or body using an attribute entry.
   * They can also be passed in to the processor through its API using the option named `attributes`.
   * If an attribute is set on the document, it has a non-null (non-undefined) value.
   * If an attribute is unset, it is absent.
   * An attribute cannot be set and have a null/undefined value.
   * When set in the document header, the attribute is referred to as a document header attribute.
   // Q: should we move built-in and user-defined to own section(s)?

   === Attribute entries

   * An attribute entry takes the form `:<key-name>: <value>?` or `:!<key-name>:`.
   * Each attribute entry must be entered on its own line.

   * *FI* Should we drop the normalization of attribute names (i.e., allow attribute names to have mixed letter casing)? (This means the name would no longer be translated / automatically converted from "phrase" to name in the attribute definition.)
   * *FI* Should we disallow spaces in attribute names in an attribute entry? (and remove the automatic translation?)
    ** In general, we need to define what a valid attribute name is; is the attribute entry only recognized if the name is valid?
   * *FI* Should we permit document attributes to be set inside a delimited block?
   * *FI* Should we drop `++{set:...}++`?
   //* *FI* Should we allow dot notation to access property of attribute with an object value?
   * *FI* Should we choose `\` or `` +`` as the character to continue an attribute value?
   ** Should we preserve newlines in the value of an attribute entry? Can we say that `\` consumes/folds the newline, whereas `+` preserves it; that way, `` + +`` would be a quick way to do a hard line break?
   * The value of document attributes set in the body must be available when the node they precede is accessed in the parsed document.
   // Does this mean that attribute entries are block terminal non-elements?
   // getAttr (getDocumentAttribute) is a proxy that first considers in-flow attributes, then delegates to previous proxy
   * Attribute entries cannot be interleaved with block metadata lines

   === Attribute overrides and precedence

   * Hard vs soft (un)set.
   ** Can only be defined on attributes passed to the processor; not in-document attribute entries
   * An attribute entry can be used to redefine a document attribute.
   ** A document attribute can not be redefined if it is locked.
   * A document attribute is locked by setting or unsetting it from the API (or, by correlation, the CLI).
   * It's possible to set or unset an attribute from the API without locking it (soft set/unset) by appending `@` to the attribute name (or to the value, those the name is the preferred way)
   * Attributes set via the API can have the value `false` or `null` (or equivalent for the programming language, such as `nil` or `undefined`).
    ** The value `false` means to soft unset the attribute on the document.
    ** The value `null` means to hard unset the attribute on the document.

   === Built-in attributes

   * *Built-in document attributes* add, configure, and control common features in a document (e.g., `toc`).
   * Provide a means to populating document metadata (e.g., `author`).
   * Many built-in attributes only take effect when defined in the document header (either using an attribute entry or passed in via the API).
   * Some built-in document attributes are booleans.
   These attributes act as a switch, and their sole function is to turn on or turn off a feature.
   ** If a boolean attribute is defined, but not given a value (i.e., set), it's in the "on" state.
   When set, a boolean attribute typically has an empty value.
   ** If the boolean attribute is not defined (i.e., not set), it's in the "off" state.
   ** *FI* Should we standardize the boolean document attribute typed value `true` to mean set (as alternative to empty string)?
   * *FI* Should we drop the `experimental` attribute as a built-in attribute or keep it as a flag for experimental features?
   (Note that promoting the UI macros to fully supported is a separate decision).

   ==== Naming conventions

   * Reserved attribute names; may not be repurposed for user-defined contexts (reusable text or by conditionals).
   * Define naming conventions for built-in attributes.
   * Identify reserved and recommended prefixes.

   ==== Global block attributes and options

   === User-defined attributes

   * A *user-defined document attribute* is any attribute that the user or an extension sets that isn’t reserved by the AsciiDoc language or an extension.
   * These attributes allow the user to define named, reusable content or act as a switch for preprocessor conditionals or extensions.

   ==== Naming conventions

   * User-defined attribute names must be at least one character, must start with a letter, number, or underscore, and may contain any amount of letters, numbers, underscores, or hyphens beyond the first character.
   * Attribute names should only contain lowercase letters, though uppercase characters are permitted.

   === Attribute usage
   // This section introduces how document attributes are used, such as by an attribute reference or in a preprocessor conditional
   // This section only provides an introduction to an attribute reference; details should be entered in the Inline Attribute References section

   * Document attributes can be used within the content of document using an attribute reference.
   * An attribute reference is markup recognized by the inline preprocessor.
   * See <<inline-attribute-references>> for details.

   = Blocks

   == Document body

   * The document body consists of all the content in the document except for the document header.
   * The document body is partitioned into blocks.

   == Block structure and variations
   // Defines a block element and introduces its parts and variations.
   // It lays down the common structural rules that are fundamental to blocks.

   * A *block element*, referred to as a *block*, is a discrete, line-wise element in the document structure.
   * A block always starts and ends on a whole line (starts at beginning of a line or effective beginning and ends at the end of the same or different line.
   * A block may have two to three source features: metadata, a body, and an enclosure.
   * The parent of a block is always another block (if nested, the parent block; if not nested, the parent section or document if not in a section).
   * The body of a block may have an enclosure that is formed by delimiter lines.
   * A block's content model (e.g., `basic`, `compound`, `verbatim`) determines what kind of content the block can have (if any) and how it is parsed.
   * A block's name and optional style modifier determines how it is converted.
   * Block element parsing takes precedence over inline element parsing.
   For example, an inline passthrough cannot enclose a line that would end the block, such as a block delimiter or list continuation.
   The block boundary is determined first, then the inline parsing happens within those bounds.
   (Q: Does this mean backslash escaping cannot be used in an inline passthrough?)
   * Syntax should be parsed in the order it appears in the document (this may need to be defined more specifically, or exceptions listed)

   === Block name

   * Each block has a name (e.g., image, sidebar, etc.).
   * A name identifies the primary specialization of the element.
   * Each block name provides semantics not covered by any other block name.
   * The block name may be implicit or explicit.
   * If a block name isn't derived from a specified block style, it's inferred by its structural form (e.g., block delimiter, marker, implicit boundaries).

   === Block metadata
   // Defines the block metadata, its purpose, and how it affects a block.
   // It provides the fundamental structure and rules for the common items found in the block metadata.

   * *Block metadata* is a superset of properties of the block that contains block attributes; the metadata includes specialized attributes such as ID, title, and style; also name, etc.
   * All blocks accommodate zero or more lines of explicit metadata stacked line-wise directly on top of the block content and, if applicable, the opening delimiter line.
   ** The optional metadata lines include: zero or more block attribute lines (which populate the block’s attributes), block attrlist (inside block attribute line), the block attributes, optional block title line (many blocks also support a corresponding caption).
   ** *SDR* Confirm the terms and their definitions for what we should use to refer to the list of attributes in raw versus parsed form. (attrlist, boxed attrlist, attributes)
   * The shared (but optional) block attributes include: id, style, set of roles, set of options, title, reftext, and data-attributes.

   === Block attributes

   * Used to store the block metadata.
   * Can be positional or named.
   * Positional attributes use a 1-based index; index assignment skips over any named attributes (i.e., named attributes don't affect position).
   ** See https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-002-block-attrlist-parsing.adoc?ref_type=heads[SDR-2: Define Parsing Rules for attrlist in Block Attribute Line]/
   ** See https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-006-positional-attribute-mapping.adoc?ref_type=heads[SDR-6: Define Parsing Rules for Positional Attribute to Named Attribute Mapping].

   * Only available directly on the block.
   * Do not affect document attributes.
   * The only relationship between block attributes and document attributes is that document attributes are sometimes used as fallbacks for an absent block attribute (this needs to be clarified / tightened).
   * Block options are block attributes that end in `-option`; hence, `-option` is a reserved suffix.
   * *FI* Propose / Confirm that all block attributes that start with `data-` should be passed through to the output format; in HTML output, these map 1-to-1 with HTML data attributes on the corresponding tag.
   * *FI* Propose syntax to unset a block attribute, including block options (e.g., `[!id]`, `[%!header]` or `[%noheader]`).
   * *FI* Propose using `+[[id,reftext]style.role]+` where `+[id,reftext]+` must come first (or last?) as a way to unify the block attribute line and block anchor line.
   * *FI* Propose that an invalid block anchor should not be treated as paragraph text (still consume as block anchor, just don't set ID)?

   === Block title

   * The block title is a satellite of a block.
   * It shares some commonalities of a block in that it can be defined on its own line and can have inlines; however, it is a subordinate of a block.
   * The block title is the implicit reftext of a block if reftext is not specified.
   * The block title may be displayed above or below the primary contents depending on the block name / publishing conventions.
   * In certain cases, when the block title acts as a caption, it will be prefixed with the value of the corresponding caption attribute (e.g., `example-caption`) and an auto-generated number.
   ** *SDR* Caption is poorly defined in AsciiDoc.
   Fix the terminology by decomposing all parts of the caption and using it in the appropriate context.
   *** The `<block>-caption` doesn't map 1-to-1 with a typical caption and therefore it hinders efforts to customize the parts of a caption such as the caption's signifier, reference number/letter and separator.
   *** caption = reference signifier + reference numeral/letter + ": " + title, where reference signifier + reference number + ": " is prefix.
   *** We avoid the term label since label is used by other publishing systems to mean the ID of an element.
   ** [[caption-fi]] *FI* Propose renaming and remapping `-caption` attributes to `-caption-signifier`? (e.g., `example-caption-signifier`).
   ** *FI* Propose ability to customize the separator between reference numeral/letter and title?
   ** *FI* Propose ability to number resources by chapter?

   === Implicit Blocks
   // Defines a non-delimited block and lays down the common structural parts and rules governing a non-delimited block.
   // block delineation?

   * *Implicit blocks* are blocks that do not have explicit boundaries, unlike delimited blocks.
   An implicit block ends when it encounters an interrupting line such as the start of another implicit block, the opening or closing line of a delimited block, or an empty line.
   * Implicit blocks include sections, discrete headings, paragraphs, literal paragraphs, basic admonitions, basic blockquotes, block macros, lists / list items, and the document itself.
   * Block metadata lines also have implicit boundaries (a single line), but are not themselves blocks.

   === Delimited blocks / Structural containers
   //Defines a delimited block and lays down the common structural parts and rules governing a delimited block.

   * A *delimited block* is a block bounded by explicit boundaries called delimiter lines.
   * A delimited block only ends when the delimiter line that started the block is found again at the same level (as opposed to creating a nested block).
   * Delimited blocks must be balanced; if there's an opening delimiter line, there must be a corresponding closing delimiter line; otherwise, a warning must be issued by the processor.
   * A delimited block creates a new parsing context (current block must end before ending ancestor block).
   * If the child block is a delimited block, it starts a new delimited block parsing context; when the child delimited block ends, the previous delimited block parsing context is restored.
   ** State the nesting rules and limits for delimited blocks.
   * A delimited block may not contain sections.
   Delimited blocks include: example, listing, literal, source, stem, quote, verse, and table blocks.
   * *FI* Propose that any headings in a delimited block are implicitly converted to discrete headings.

   === Interrupting lines

   * For block elements that do not have explicit boundaries (e.g., a delimited block), the block will end when an interrupting line is encountered.
   * Which lines interrupt a block vary based on context.
   * An empty line (that remains after any preprocessor directives are evaluated) always ends an implicit block (e.g., paragraph, list, etc.).
   * A block attribute line always ends an implicit block (except when following adjacent block attribute lines).
   * A closing block delimiter can interrupt any non-delimited block.
   * An opening block delimiter line is interrupting.
   ** *FI* Should we say that only a closing block delimiter line is interrupting, in other words, must be inside that block?
   * A list continuation line ends an implicit block, but does not end the list; instead, it attaches the ensuing block to the list item.
   ** A literal paragraph in a list is preceded by an implicit list continuation line.
   * Inside a list, a list item is an interrupting line; either starts a new list item or nested list, depending on the marker.

   === Block macros
   // Defines a block macro and introduces its parts and variations.
   // It lays down the common structural rules that are fundamental to block macros.

   * A block macro is entered on its own line in the source and displayed on its own line in the output.
   * It doesn't have contents (i.e., inlines), only metadata.
   * It's always parsed.
   * Most block macros follow the named block macro form, `name::<target>?[<attrlist>?]`, except for page breaks and thematic breaks.
   * Most block macros can have block metadata lines.
   * The block macros include: image, video, audio, toc, page break, and thematic break.
   * The target of a block macro can't start with space to disambiguate it from the start of a dlist item.

   == Sections

   * A *section block*, referred to as a *section*, is a compound block element denoted by an atx-style heading marker (``=+ ``) and no discrete style.
   * The section includes all content that follows the section heading line until the next sibling or parent section heading or the document boundary.
   * A section heading line must be proceeded by an empty line optionally followed by block metadata.
   * The section heading marker designates the hierarchical level of the section (level 0 (`=`) - level n).
   ** Section levels cannot be skipped because in some output formats levels are determined by hierarchy.
   ** *FI* Should we allow section levels to be infinite?
   It would be up to converter to normalize levels it cannot manage.
   *** Using aria metadata might solve our HTML issue: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/heading_role.
   *** Might also consider using nested `<section>` tags with `<title>` once it goes past h6.
   ** *FI* Is more than one space permitted after a section heading marker?
   * Section markers in adjacent paragraph lines are not recognized (a heading is not an interrupting line).
   * The section heading is a block title (a single line that contains inlines).
   * If the first block in document is a level-0 section, it's designated as the document title / header.
   * Only the book doctype permits level-0 sections in the document body.
   * *FI* Should we use 1-based levels for sections?
   * Sections are not permitted inside non-section blocks.
   * *FI* Propose syntax to create an anonymous section (i.e., a section that has no visible title).
   Perhaps use the syntax `== <<<` or `== !` or even `>>>` (though that doesn't set level).
   * *FI* Should we standardize on the `%notitle` option to hide a section title?

   === Section IDs

   * IDs are auto-generated for section titles and discrete headings
   * The ID is generated from the joined text values of all inline nodes in the parsed title
   ** *FI* How will inline macros be handled; will alt text of an image be considered, for example?
   ** Invalid characters are then removed
   ** Spaces are replaced with the value of the `idseparator` attribute, which is `_` by default
   ** The ID is prefixed with the value of the `idprefix` attribute, which is `_` by default
   ** If the generated ID is already in use in the document, a count is appended, offset by the value of the `idseparator` attribute, until a unique ID is found.
   * ID generation on section titles and discrete headings can be turned off by unsetting the built-in `sectids` attribute
   * Processors are expected to allow the <<id-generator,ID generation routine>> to be replaced with user code
   * *FI* Are inline anchors allowed to set the ID for a section? If so, can it be at the beginning, end, or both? Is it possible to assign multiple/alternative IDs to a section using inline anchors?

   NOTE: One of the reasons we got into the habit of modifying the idprefix and idseparator was because GitHub uses its own IDs for headings.
   However, this could be avoided by having the processor rewrite the xrefs target for the output to match the ID that would be generated in the output.
   Another thing to consider is whether the default `idprefix` and `idseparator` should be changed, though that would constitute a significant breaking change.

   === Section numbering

   * Signifier attributes (e.g., `part-signifier`) control the signifier that precedes the number for certain section types.
    ** See <<caption-fi,signifier FI>>.
   * ASG is likely going to need a property to represent the section number in order to validate that it is correct.

   === Special sections

   * Built-in styles for specialized front matter and back matter sections are referred to as *special sections*.
   * The document type determines which section styles are available for use.
   * Note that "part" and "chapter" are implied by the location of the section in the document and are thus not special sections.
   * *FI* Propose adding author attributes per book part when doctype is book; possibly per chapter?
   * *FI* There is some complicated section level requirements per each special section + doctype + if parts are present (e.g., why does glossary have to be level 1 when the doctype is article or there aren't any book parts, why couldn't it be a level 2?)

   .Book
   * abstract (becomes a chapter)
   * colophon
   * dedication
   * acknowledgments
   * preface
   * partintro (must be first child of part)
   * appendix
   * glossary
   ** *FI* Does the `glossary` block style have to be set on the dlist when the section is marked as a glossary (this doesn't mean we want to deprecate the `glossary` block style, we just want to make things drier)?
   * bibliography
   * index

   .Article
   * abstract
   ** *FI* Propose that an abstract title in an article be defined as a special section just like preface?
   * appendix
   * glossary
   * bibliography
   * index

   === Intrinsic Table of Contents

   * A table of contents (TOC) is an index of section titles in an AsciiDoc document.
   * The TOC is a subset of the document outline; includes all sections (parts, chapters, regular sections, and special sections).
   * When the `toc` document attribute is enabled, the AsciiDoc processor automatically generates the TOC from the document’s structure and inserts it into the output document.
   * The TOC position, levels displayed, title, and CSS class name can be controlled with document attributes.

   NOTE: The TOC must be represented in the ASG so that we can validate the processor correctly identified entries, their titles, and filled it in to the specified number of levels.

   === Preamble
   // NOTE preamble in a multi-part book is implicitly a preface

   * Content between the end of the document header and the first section title in the document body is the preamble.
   * *FI* Clarify the boundary rules of the preamble and how it is parsed.
   * *Q* (maybe FI): Clarify whether the preamble is effectively an untitled section or a block style?
   Does it only occur when the doctype is article, when the doctype is book but there are no parts?
   Does it occur if there are parts? (Only after the title of the book, after ever part where there is content between the part title and the next section title if that content isn't explicitly assigned `partintro`?)

   == Paragraphs
   // Defines a paragraph, its structure, and the rules that govern it.

   * A *paragraph* is a basic, implicit block consisting of a discrete set of contiguous (non-empty) lines that can contain inline elements and uninterpreted text.
   * Paragraphs are a foundational structure in AsciiDoc.
   * Aside from section and block titles, all non-verbatim leaf block elements are paragraphs.
   * If a line is not recognized as a specific element, it's assumed to be a paragraph.
   * Unrecognized syntax or syntax not allowed inside a paragraph, is treated as regular text (not dropped).
   * In order to parse the inline markup in a paragraph, all the lines of the paragraph have to first be identified (since inline markup can span multiple lines).

   == Styled paragraphs

   * A paragraph may have a block style (e.g., example, quote, etc.).
   * The style on a paragraph does not influence the block parsing model, meaning how a structural form is matched.
   Instead, block parsing is conducted by testing grammar rules of various structural forms (e.g., paragraph, indented lines, structural container, etc) to find a match.
   * Then the style impacts how the result of matching a grammar rule (the AST node) is interpreted and transformed into a node in the ASG.
   ** Any metadata associated with the block will be promoted to the synthetic enclosure block, perhaps with some exceptions such as the `hardbreaks` option.
   *** *FI* Are certain options, such as `hardbreaks` an exception to this rule or does the paragraph steal them or duplicate the roles?
   * For detailed information when writing the specification, see {url-issues}/31[#31] and the resulting https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-003-block-parsing-and-style.adoc[SDR-3: Reframe Block Style as Parsing Transformation].

   == Literal paragraphs
   // This section defines a literal paragraph, its structure, and the rules that govern it.

   * A literal paragraph is a block that begins with at least one space character (space, tab) followed by at least one non-space character.
   * All lines in literal paragraph must be indented by at least one space character; the first line that isn't (it's left-align or empty) ends the literal paragraph.
   * A literal paragraph creates a literal block element.
   * A literal paragraph in a list item starts with an implicit list continuation (though it can still be attached using one).

   == Discrete headings
   // This section defines a discrete heading, its structure, and the rules that govern it.

   * Typically, the block parser identifies a block and its boundaries without considering any of the block metadata.
   The one exception to this rule is the discrete style on a heading.
   * The discrete style causes the heading to be parsed as a leaf block rather than a parent block.
   ** This exception is necessary since sections and discrete headings have the same structural form, yet only sections are permitted to have children.
   * *FI* Propose that any headings in a delimited block are implicitly converted to discrete headings.
   * *FI* Should we allow `[heading]` as alternative to `[discrete]` for a non-section heading?
   * The terms "float" or "floating" should not be used to markup or describe the discrete heading syntax as these terms already have a reserved meaning in the AsciiDoc syntax (they refer to the layout / positioning of an element in certain output formats).

   == Lists

   * A *list* is a compound implicit block that contains one or more list items.
   * The start of a list is defined by the first list item.
   * Lists can be nested to any depth and can be a mix of list types.
   * The supported list types include: unordered, checklist (variation of unordered), ordered, and callout.
   * A *list item* is a compound implicit block initiated by a list marker.
   * List markers include `+*+` (unordered), `.` (ordered), `[1-9][0-9]*.` (ordered), `-` (unordered), and `<([1-9][0-9]*|\.)>` (callout)
    ** The `+*+` and `.` list markers can be repeated infinitely. (What about `-`?)
   * The list mark (bullet) or numeration is controlled using the list style.
   * List markers may be indented.
    ** *FI* Do we want to enforce that the first level marker must not be indented (i.e., should we require that top-level list be flush to left (start) margin)?
    ** Wrapped lines may be indented, but this indentation is normalized as having the equivalent semantics of a single space.
   * A list item takes precedence over a description list item (namely the discovery of a description list term)
   * A list item can have a boxed attrlist.
   ** A boxed attrlist must start after the list marker and not have anything else on the line.
   * The end of a list is defined by an interrupter line.
   * Interruption of the list can be avoided using a list continuation, which attaches the adjacent block to the list item.

   === List anatomy

   ==== List markers and depth

   * *FI* Is more than one space permitted after a list marker?

   // Q: are we calling this "principal" or "primary" text?
   ==== Principal text
   // here we could introduce the syntax for designating a block attribute line to a list item

   See https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-008-list-item-as-interrupting-line-for-principal-text.adoc?ref_type=heads[SDR-8: Designate List Item as Interrupting Line only for Principal Text].

   * *FI* In the principal text of a list item, can we have a block attribute line to assign attributes to a list item?
   * *FI* Can a list item have multiple contiguous metadata lines or should a list item be restricted to one block attribute line?

   ==== Combining lists

   ==== List continuation

   See https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-007-list-continuation-as-interrupting-line.adoc?ref_type=heads[SDR-7: Designate List Continuation as Universal Interrupting Line].

   * *FI* Should a styled paragraph (such as `[NOTE]` or `[example]` over a paragraph) break a list if it's not preceded by a continuation line?
   Asciidoctor and AsciiDoc Python implement this rule differently.
   * *FI* Should we infer a list item continuation when a delimited block is directly adjacent to the principal text?

   ==== List affinity / boundaries
   // cover how to force lists apart
   // justify why adjacent block attribute line does not start a new list

   === Unordered lists

   ==== Supported styles

   * *SDR* Clarify the term we're using: "bullets", "marks", "output markers", or something else?

   === Checklists

   * A specialization of an unordered list. (What about ordered lists?)
   * Implicitly created if at least one item in the unordered list is a checklist item.
   * A checklist item is recognized if the principal text begins with a ballot box, `[ ]` (unchecked), `[x]` (checked), or `[*]` (checked).

   === Ordered lists

   ==== Automatic numbering
   // cover the start attribute here (value must always be a 1-based number)
   // cover the reverse option here
   // Can 5. be used to make an unordered list with start=5? Can it be written as 5..?

   ==== Supported styles
   // "numerations"

   === Callout lists

   ==== Relationship to callout numbers

   == Description lists
   // Define term and description individually once we agree on the right model
   // When we use the term "any list", it includes description lists; but when we say "list" (or regular/standard list), it excludes the description list

   * A description list (dlist) is akin to a list, but its list items have a fundamentally different structure.
   * A *description list* is a compound implicit block that contains one or more list items.
   * A description list can be nested to any depth and mixed with other list types.
   * The start of a description list is defined by the first list item.
   * A *description list item* consists of one or more terms and a description.
   * List continuations work the same for attaching blocks as for lists.

   The term "any list" refers to the superset of lists and description lists.
   This comes up because during parsing, lists and description lists share a lot of the same behaviors.
   When we say "list" or "standard list", we are not talking about description lists.

   === Description list anatomy

   ==== Terms, delimiters, and depth

   * A list item is initiated by at least one term followed by a dlist marker (aka term delimiter).
   * A term is also called a subject.
   * An entry can have multiple terms.
   * Dlist markers include `::`, `:::`, `::::`, and `;;`.
   * Terms may be indented.
   * *FI* Should we drop the semicolon as a marker and make the dlist markers consistent (`::`, `:::`, `::::`, `:::::`) (not `;;`)?
   * *FI* Should we allow dlist item nesting to any depth?

   ==== Principal text

   * The text that follows the term, either on the same line or the next adjacent line.
   * The principal text of a dlist item can start on the next line, unlike for standard lists.

   ==== Description

   === Orientation
   // horizontal

   * *FI* Does the dlist `horizontal` orientation need to be specified?
   Perhaps it should be an attribute or option, like `orientation=horizontal` or `%horizontal`.
   It seems that horizontal being an option (`%horizontal`) rather than a style may fit the model best; then it can be used like a true style such as `glossary`.

   === With marker
   // ordered and unordered
   // stacked and not stacked
   // subject stop

   ==== Q & A
   // shorthand for ordered and stacked, but with different style on term/subject

   == Tables

   * A table is a compound delimited block that contains one or more cells.

   === Formats (psv, dsv, csv)

   * "Delimiter-separated values"
   * `psv` = pipe-separated values; `csv` = comma-separated (or tab-separated values); `dsv` = data-separated values
   ** *FI* Can and/or should we drop the `dsv` table data format?
   * each format has slightly different parsing rules / constraints
   * *FI* Clarify and refine how tables are parsed (so line comments are processed with respect to enclosing context such as in a verbatim block in an AsciiDoc table cell or inside CSV/DSV data).
   * The default format is `psv`.
   * The format can be specified either using the `format` attribute or using the dedicated block delimiter (`,===` and `:===`).
   * `csv` is primarily intended for including data from a CSV file, not for authoring in the AsciiDoc document; loosely based on RFC 4180.

   === Cell-based structure

   * cell arrangement and delimiters
    ** cells are discovered then distributed into a rows based on number of columns
   * explain how cells get organized into rows and cols
   * technically, newlines are not required; only cell delimiters matter as boundaries; but some features require the use of newlines
   * precedence of delimiter and how to escape it
   * cell separator can be customized using separator attribute; must be a single character
   * head(er)/body/foot(er)
    ** *SDR* Clarify if it is table `head` or `header; `foot` or `footer`.
   * how are columns determined implicitly?
   * how is header determined implicitly?
   * describe what happens if number of cells does match number of expected cells

   === Columns and colspecs

   * columns attribute can specify how many columns
   * if numeric, uses default colspec
   * columns attribute can specify colspec for each column; colspecs are separated by comma or semicolon
   * colspec controls style, alignment, and width ratio of each column
   * all parts of colspec are optional
   * width can be specified as auto
   * colspec can have a repeater (shorthand for specifying multiple times)
   * *FI* Clarify the relationship between colspan and colspecs on a table; when there is a colspan, how should colspec entries be mapped?

   === Cells

   ==== Content model

   * content model of a cell is a paragraph (leaf, no block content)
   * AsciiDoc table cell changes content model of cell to a compound block; only supported in psv format
   * An AsciiDoc table cell is essentially a separate document (need to clarify this relationship)
   * Only an AsciiDoc table cell can accommodate a nested table
   * *FI* Does an AsciiDoc cell style (i.e., `a|`) need to be marked on the cell itself in order to fully honor the semantics of the preprocessor; in other words, when marked on the colspec, it will be parsed as a normal cell, then promoted to an AsciiDoc table cell; thus, the behavior could be different

   ==== Styles

   * default (d), strong (s), emphasis (e), monospace (m), literal (l), asciidoc (a)

   ==== cellspec

   * in psv, cellspec is specified directly in front of cell delimiter
   * by default, cell inherits properties from column
   * cellspec can be specified on cell to override most inherited properties; only supported in psv
   * colspec controls style, alignment, span (row and column) (cannot change width)
   * *FI* Should we drop cell duplication?

   ==== Metadata / attributes (proposed)

   * In psv, a cell can have a boxed attrlist (cell metadata)
   * The boxed attrlist must start directly after cell delimiter and not have anything else on that line of the cell.
   * *FI* Should a cell be able to have a role?
   * *FI* Can a cell have multiple contiguous metadata lines?
   * *FI* Should we allow a row to have a boxed attrlist?
   * *FI* Should a row be able to have a role?

   === Table width and column ratios

   * By default, widths are distributed across the page (100%) according to ratio values on columns
   * The width of a table can be reduced by specifying the width attribute; value is a percentage (maximum 100%)
   * Adding the `autowidth` option to a table allows the content to determine width of table (fit content)
   * If no ratios are specified, width is distributed evenly
   * Column widths are only a hint; content can focus widths to be allocated differently (we could suggest using a fixed table layout to enforce)
   * If column is specified as autowidth, then its width will solely be determined by content (no allocated width)
   * By setting autowidth option and stretch role, the table will stretch the width of the page but the width of columns will be determined by content
   * A table whose width is < 100% can be configured to float to the left or right using the float attribute

   === Decoration (frame, grid, stripes)

   * The table decorations can be controlled using the `frame`, `grid`, and `stripes` attributes.
   * By default, a table will have all frame and grid (all borders).
   * `frame` values: all, ends, sides, none
   * `grid` values: all, rows, cols, none
   * `stripes` values: none, even, odd, all, hover (where this interaction can be supported)
   * These properties can be controlled globally using document attributes prefixed with table- (e.g., `table-stripes`).

   === Orientation

   * Tables can be rotated (where supported) by adding `rotate` option
   * Table orientation can be specified explicitly using `orientation` attribute (portrait or landscape).

   === Nested tables

   * a table can be nested in the cell of a parent table
   * only one level of nesting is supported
   * the parent cell must have the `a` table style (AsciiDoc)
   * the nested table must use the delimiter line `!===` and a different cell separator (default `!`)
   * all the rules of the AsciiDoc table cell apply here

   == Admonitions

   * `====` block delimiter
   * required block style selected from the following list: `NOTE`, `TIP`, `WARNING`, `CAUTION`, `IMPORTANT`
   ** *FI* Propose only allowing a space, not a tab, after the colon separating the admonition name from the text.
   * Content model: compound

   == Examples

   * `====` block delimiter
   * no style
   * content model: compound

   == Sidebars

   * `+****+` block delimiter
   * no style
   * content model: compound

   == Quotes and verses

   * `+____+` block delimiter
   * Quote: no style or `quote` style
   * Verse: `verse` style
   * Epigraph: `epigraph` style
   * Content model: compound for Quote, basic for Verse and Epigraph
   * *FI* Can / should we use the verse block to create an address element?
   * *FI* Propose renaming citetitle to citation or just cite?

   == Code (Listing, Source, Literal)

   * `+----+` (listing/source) or `+....+` (literal) block delimiter
   * Listing: `listing` style or no style if `source-language` document attribute is not set
   * Source: `source` style or no style if `source-language` document attribute is set
   * Literal: no style
   * style must be specified if alternate block delimiter is used
   * literal block is intended to be used for diagram source when a diagram integration is enabled
   * if block is empty, content should be empty string (not null)
   * content model: verbatim

   == STEM

   * `pass:[++++]` block delimiter
   * `stem` style if `stem` document attribute is set and has a value, otherwise `latexmath` or `asciimath`
   * if block is empty, content should be empty string (not null)
   * content model: pass, with some processing as required by STEM adapter

   == Open

   * `+~~~~+` or `--` (legacy) block delimiter.
   * Cannot masquerade as another built-in block.
   * Style may be used to create a custom block.
   * Content model: compound

   == Collapsible

   * `====` block delimiter or `>===` (proposed) as block delimiter
   * `collapsible` or `disclosure` style (proposed) or `%collapsible` option (legacy)
   ** *FI* Propose that `collapsible` be a style for example blocks.
   //*** Could we use `>===` as block delimiter? (the argument against is that we want to avoid introducing new block delimiters)
   * Content model: compound

   == Image macro (block)
   // Q: should we name this block "figure" instead of "image"?

   * The block image macro inserts images and figures into a document.
   * Constructed using the named block macro form `image::<target>[<attrlist>?]`.
   ** Required macro name is `image`.
   ** A target is required.
   *** The target may be a relative path, absolute path or URL (when using default resource resolver)
   *** The target may contain space characters; these characters are URL encoded (`%20`) in HTML output.
   *** The target is interpreted depending on the processor settings and/or output format.
   *** If the converter generates output that references the image, the path must be relative to the published document.
   *** If the converter embeds the image in the output document (e.g., `data-uri` is set, converting to PDF directly), the target must be resolvable at convert time; in this case, a URL will only be resolved if the security settings on the processor allows it (e.g., `allow-uri-read`).
   * The boxed attrlist can be empty or specify a comma-separated list of optional attributes.

   === Optional attributes

   * `alt` (first position)
   * `width` (second position)
   * `height` (third position)
   * `link`
   * `fallback`; values: path relative to `imagesdir`, absolute path or URL
   ** target must be SVG and `opts=interactive`
   * `format`
   ** Only necessary when target doesn't end in file extension or can't otherwise be detected.
   * `caption`
   * `window`; values: `_blank`
   * `scale` (DocBook only)
   * `scaledwidth` (DocBook and PDF only)
   * `pdfwidth` (PDF only)
   * `align`; values: left, center, right
   * `float`; values: left, right
   * built-in `role` values: left, right, th, thumb, related, rel
   * built-in `opts` values: none, nofollow, noopener, inline (SVG only), interactive (SVG only)

   //** The role shorthand can't be used in a macro attribute list.

   === Optional title and caption label

   * The optional block title is prefixed by the caption signifier *Figure* and numbered automatically.
   * The label is controlled by the `figure-caption` document attribute or `caption` at the individual block level.
    ** See <<caption-fi,signifier FI>>.

   == Video macro

   * Constructed using the named block macro form `video::<target>[<attrlist>?]`.
   ** Required macro name is `video`.
   ** A target is required.
   ** The target can be an ID for a video service.

   === Optional attributes

   == Audio macro

   * Constructed using the named block macro form `audio::<target>[<attrlist>?]`.
   ** Required macro name is `audio`.
   ** A target is required.
   ** The target can be an ID for an audio service.

   === Optional attributes

   == Table of Contents macro

   * Inserts the intrinsic table of contents at the location of the macro.
   * Constructed using the formal block macro form `toc::[]`.
   ** Required macro name is `toc`.
   ** A target and attributes are forbidden.

   == Page break macro

   * The page break macro isn't specified using the formal block macro form, instead, it's specified as three less-than characters (`++<<<++`).
   * The macro must be offset from the preceding and following blocks by at least one empty line.
   * It inserts a page break for page-oriented / printable output formats such as DocBook, PDF, and HTML in print mode.
   * The macro is ignored if falls at top of empty page; this behavior can be overridden by setting the `always` option on the macro in a block attribute line.
   * Some converters support additional options on the page break macro.

   == Thematic break macro

   * The thematic break macro isn't specified using the formal block macro form, instead, it's specified as three single quotation marks (`++'''++`).
   * The macro must be offset from the preceding and following blocks by at least one empty line.
   * It inserts a thematic break (horizontal rule) in the output.

   == Passthroughs

   * `pass:[++++]` block delimiter
   * content model: pass
   * Demarcates raw content that should be passed through to the output as is (or interpreted by the converter as raw codes)
   * A passthrough block is an escape hatch for leaving the AsciiDoc syntax and embedding content which is not otherwise interpreted.
   * May be used by a block extension to parser or otherwise interpret the content in a different way (such as embedded Markdown or LaTeX).
   * Passthroughs should be used sparingly as they can compromise the portability of an AsciiDoc document.
   * Similar to foreignObject in SVG.

   = Inlines

   == Inline structure

   * Regular text (such as a paragraph) may contain markup that is interpreted.
   * Markup is additional characters added to the content either to add semantics or to specify formatting; these characters are processor hints.
   * Markup is in the form of marked text, macros, or lookup references.
   * When regular text is interpreted, it produces a collection of nodes (i.e., `node*`) referred to as "inline nodes" or simply "inlines".
    ** This can be a nested structure (some inlines are elements that may contain other inlines).
   * Inline parsing can be broken down into four general categories: text, spans (strong, emphasis, etc.), macros (extrapolated content), and replacements (attribute refs, typographic replacements, special characters, hard line breaks).
   * The parser will attempt to match designated inline syntax, such as a pair of span/formatting marks.
   * If syntax fails to match (such as when the parser encounters an unbalanced mark), the parser moves on to the next rule.
   * If no grammar rules can be matched in a run of characters, that text is treated as plain, uninterpreted text; no warning is issued by the processor.

   == Inline names

   * There are two types of inline nodes: inline and string
   * There are several inline names: text, charref, raw, span (or marked), ref, image, etc.
   * The variant further specializes the name: strong for span, xref for ref, etc.
   * The inline may also have a form to indicate how it is structured/expressed in the source (e.g., macro, unconstrained, etc)
   * A non-element represents plain text, such as text, charref, raw, hard line break.
   * An inline element is an inline node with properties.
   * An inline element can be a leaf (e.g., image) or a non-leaf (e.g., span).
     ** A non-leaf inline element contain inlines.
   * Span is a "run of markup"; specifically, it's enclosed/bounded text (we're migrating away from the term "quoted text").
    ** In the grammar, we may refer to this as marked text; in node model, it's a span
   * Span and macro are elements, which means they can have attributes and, in many cases, inlines (children).
   * Properties of text: type=string, name=text, value
   * Common properties of span: type=inline, name, variant, (source) form, attributes (includes id and roles)
   * Common properties of macro: type=inline, name, (source) form, attributes (includes ID and roles).
    ** Refer to macros expressed using non-named syntax as a shorthand macro (or shorthand notation); still a macro, just not expressed that way
   * All formatted text is a span; but not all spans are formatted text
   * Not mandating a typing system, but the processor/converter has to be able to distinguish the context of different inlines.

   == From substitutions to inline parsing

   * One of the most problematic aspects of the AsciiDoc language is that it relies on search and replace for processing inlines.
   * This original processing method for inlines doesn't produce a tree and the interpretation is often coupled to and intertwined with the output format and the substitution order.
   * Not only does it cause many unexpected behaviors, it cannot be accurately described; it also makes it impossible to extract a structure, and the information it stores, from the document.
   * The spec is graduating from the use of substitutions to an inline parsing grammar.
   * In doing so, we will aim to match the behavior of the substitution model as closely as possible so existing content can be interpreted in the same way or, when that is not possible, interpreted in such a way that information is not lost.
   * The accepted inline parsing approach is described in  https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-005-formal-grammar-for-inline-syntax.adoc[SDR-5: Describe Inline Syntax using Formal Grammar].

   === Inline preprocessor

   * In order to achieve compatibility with the original substitution model, inline parsing will need to be done in two phases; see  https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/blob/main/spec/sdrs/sdr-005-formal-grammar-for-inline-syntax.adoc[SDR-5: Describe Inline Syntax using Formal Grammar].
   * In the first phase, passthrough content is identified and/or extracted and attribute references are expanded.
   ** The simplest way to handle passthroughs are to extract them and leave a placeholder behind; passthrough text must be restored to the location of the placeholder during second parsing phase.
   * An inline preprocessor is the only way to allow attribute references to introduce inline syntax in the way they can today.
   * The inline preprocessor must track the original positions of all characters so that inlines can be traced back to their source.
   * All characters introduced by an attribute reference should be attributed to the left-most position of the attribute reference (in other words, they don't occupy space).
   * Once the first phase is complete, the conversion from input text to a parse tree may begin.

   === Inline parsing

   * In the second phase, the expanded input is parsed into a tree of inlines (the root of that tree is the parent of the top-level inlines).
   * The parser should track the location (start line and column, end line and column) of every inline node.
   ** The parser must use the information provided by the inline preprocessor to map the node back to the location in the original source, not the expanded source.

   [#inline-attribute-references]
   == Attribute references

   * The value of a document attribute is referenced using an attribute reference; the reference is to a document attribute.
   * An attribute reference has the form `+{name}+`, where `name` is the name of the attribute name.
   * The attribute reference is replaced by the value of the specified attribute by the inline parser (specifically the inline preprocessor).
   ** No processing is done on the value when inserted; it is inserted as is.
   * An attribute reference is permitted anywhere that inline markup is interpreted.
   * If the document attribute is not set, the `attribute-missing` document attribute determines what to do.
   ** Under normal operation, if the referenced attribute is missing (not set), the reference is dropped and a warning is issued.

   == Passthroughs

   * Inline passthroughs have a similar purpose as block passthroughs, but for an inline context.
   * Inline passthroughs are processed by the inline preprocessor; thus they are not seen by the inline parser.
   * Passthroughs are specified using the single plus, double plus, triple plus, and pass macro.
   * Passthroughs prevent text from being interpreted (including attribute references).
   * The triple plus and pass macro forms pass through text raw (no special character replacement in converter).
   * The single (constrained) and double (unconstrained) plus forms pass through text uninterpreted, but not raw (converter will apply special character replacement).
   * Nested passthroughs are forbidden / not recognized.

   == Marked text

   * A span of text enclosed in a pair of semantic marks.
   * In the past, this has been referred to as "text formatting" or "formatted text" (though formatted text are not limited to this group of syntax).
   * The marks used determine the variant (e.g., strong, emphasis).
   * All marked spans support a preceding boxed attrlist; only shorthand attributes (id and role) are recognized.

   === Constrained vs unconstrained

   * constrained markup can only be used if certain conditions are met
    ** must not be bounded on either side by an alpha\d character and contents must not start or end with space
   * constrained markup is intended to prevent unwanted matches of formatting marks; though it can still sometimes form an unexpected match
   * Whether constrained markup is matched depends on which characters are adjacent to the formatting marks.
   The constrained rule must meet the following criteria:

   ** (assert) not alpha\d
   ** formatting mark (i.e., asterisk)
   ** (assert) not space
   ** one or more inline elements or uninterpretted characters
   ** (assert) not space
   ** formatting mark (i.e., asterisk)
   ** (assert) not alpha\d

   * Unconstrained markup is matched without taking into account the surrounding characters.
   The first match wins.
   * unconstrained markup can be used anywhere; less concise
   * unconstrained takes precedence over constrained if both would match
   * constrained inside unconstrained of the same variant cannot start with unconstrained (the unconstrained mark wins out and closes the span)
   * *FI* Should we forbid nested span of same variant? (unconstrained strong inside constrained strong and vice versa?)

   === Strong (Bold)

   === Emphasis (Italic)

   === Code (Monospace)

   * *FI* Propose renaming the monospace variant to code (as in "code span").

   === Double-quoted (Smart double-quoted)

   === Single-quoted (Smart single-quoted)

   === Superscript

   === Subscript

   === Open

   * Highlighted / marked if no role
   * If custom role then it's a generic span with that role
   * Designate `mark` as a built-in role

   == Inline macros
   // Defines an inline macro and introduces its parts and variations.
   // It lays down the common structural rules that are fundamental to inline macros.

   * Can be entered in the flow of text and other inline elements; is displayed in the flow of content if that is where it was entered.
   // Q: has no body?
   * Usually follows the named inline macro form, `name:<target>?[<attrlist>?]`, except for some link and cross reference macros.
   * The `<attrlist>` is not interpreted the same way for all macros; it may be treated as inline content only; it may be a hybrid of inline content and an attribute list; it may have a complete custom interpretation
   * The pass macro is not a macro; it's an inline passthrough that uses the macro form.
   // SDR: Maybe call it an inline pass directive?
   * Aside from preprocessor directives, text in the target of a macro is not interpreted.
   // SDR: define "macro shorthand" or "macro expression"?

   .Supported inline macros
   * image
   * icon
   * kbd (keyboard)
   * menu
   * btn (button)
   * stem (currently behaves as a specialized inline passthrough with macro syntax; we may not want to list it here)
   * autolinks (don't follow the named macro structure)
   * links (URL macro, link macro, mailto macro)
   * cross references (xref macro, xref shorthand notation)
   * footnote
   * index terms (indexterm, index term shorthand notations)

   === Image macro (inline)

   === Icon macro

   === Keyboard macro

   * *FI* Fully support the UI macros, therefore, `experimental` will no longer be needed to activate them.

   === Menu macro

   * Uses named inline macro form, `+menu:<target>[<attrlist>]+`.
   * Required macro name is `menu`.
   ** Target only accepts user-defined text of one menu item.
   ** Optional attrlist only accepts user-defined text.
   *** Each item in attrlist is separated by a greater-than character `>` with a space on each side, `+menu:Code[Folding > Expand to Level > 3]+`.
   * Text of an item may contain space.
   * *FI* Propose removing the shorthand structure, e.g., `+"Code > Folding > Expand to Level > 3"+`.
   * *FI* Make target forbidden in macro form to align menu with other UI macros.

   === Button macro

   * Uses named inline macro form, `+btn:[<attrlist>]+`.
   * Required name is `btn`.
   * Target is forbidden.
   * attrlist only accepts user-defined text.

   === Autolinks (URLs and email addresses)

   * *FI* Is it possible to turn off implicit autolinks?
   * *FI* Should we continue support for angle bracket enclosure for explicit autolink?

   === Link and URL macros

   === Cross reference macros

   === STEM macro

   * *FI* Should we repurpose `$$` as shorthand for the stem macro?

   === Footnote macro

   * *FI* Should we always remove the leading space before a footnote by default?
   This may need a special syntax to create a left-hand boundary for a macro, like an extra colon, empty `{}`, etc. (e.g., `+:footnote:[note]+`).
   * *FI* Scope footnotes that are immediately below table to the current table?

   === Index term macros

   * *FI* Propose that we merge `indexterm2` into `indexterm` and add `visible` or `show` (maybe as target?) to reproduce `indexterm2` behavior?

   == Hard line breaks

   == Character references

   == Backslash escaping and passthroughs

   * markup characters can be neutralized using a preceding backlash
   * passthroughs are a way to brute force / blanket / bulk escape markup without having to individually escape characters (perhaps the text needs to be kept together without being modified)

   * {url-issues}/25[#25] How to escape unconstrained marked text?
   Currently, AsciiDoc requires that the opening unconstrained mark be double escaped (`+\\**stars**+`).
   However, this is both context-dependent and ambiguous (as escaping a backslash should make a literal backslash).
   Therefore, we may have to change this rule to be (`+\*\*stars**+`).
   This will introduce a slight incompatibility, but one that is reasonable to explain and to justify with the goal of making backslash escaping stable.

   * The following question should be tested in the TCK to guide the escaping rules. Q: Does backslash escape a grammar rule match or does it just deactivate the immediate character?

    from *\*foo**, do we get <strong>*foo*</strong> or <strong>*foo</strong>* ?

   == Replacements

   === Typographic replacement

   * For convenience, AsciiDoc supports numerous typographic replacements.
   * The author writes the shorthand equivalent and the processor replaces these sequences with typographic marks.
   * A typical example is that three dots are replaced with an ellipsis.
   * This conversion is applied using search and replace to the text nodes in the inlines during conversion.
   * *FI* Should we include these replacement spans in the parse tree?

   === Special character replacement

   * Some output formats require that certain characters be escaped in order to be presented literally.
   * For example, HTML requires at least < and & be escaped as character references (and customarily > as well).
   * For man pages, many more characters must be escaped using the groff escaping system.
   * Not all output formats understand character references, so those must be converted to the equivalent Unicode characters.
   * It's the responsibility of the converter to escape these special characters, and which characters to escape is dictated by the output.
   * The converter should not escape characters in a raw text node, as the intention is to pass that content through as is.

   = Referencing System

   == Resources and references

   * The AsciiDoc language provides an addressing / referencing system.
   * The referencing system consists of referenceable locations (references identified by ID), a catalog of references, internal references to another location in the same document (xrefs), and external references to other resources.
   * References are referenceable locations within a document.
   * Resources are assets to which an AsciiDoc document refers (e.g., an image or another document).

   == IDs / Reference names

   * any element node in the document can define an ID (aka a reference name), which can be used to refer to that node
   * the ID also acts as an anchor to the location of that node in the rendered output (just like in HTML)
   * anchor and ID are synonymous; ID is technically the name of the anchor and anchor is the location of that ID (the node, the node's position, etc)
   * it's also possible to define arbitrary/contentless/floating anchors using an inline
   * by default, the processor automatically generates and assigns an ID to all headings (can be toggled using `sectids` document attribute)
   * a processor must provide automatic ID generation for headings; this routine should be pluggable (aka an extension point)
   * ID names are stored in the references catalog using the ID value as the key and the node (the reference node or ref) as the value
   * IDs must be unique within a document

   == Cross references (xrefs)

   * AsciiDoc content can make forward and backward references to these IDs (this is called an xref)
   * if the output format supports it, the anchor points should also be public so they can be referred to from the outside using a fragment identifier (such as the fragment in a URL)
    ** such a fragment can be added to the end of a resource reference to refer to an ID from another document; this is called a deep interdocument xref
   * if link text is not specified at the point of an xref, the xreftext from the node should be used
   * by default, the node's title is used as the xreftext (the link text that replaces the xref)
    ** this title may be enhanced to match publishing standards
    ** refsig attributes (e.g., `chapter-refsig`) control the signifiers used in the xreftext
    ** *FI* We have to think about how this impacts inlines; are they cloned into this spot?
   * if the `reftext` attribute is set on the node, that value is used instead of the title
   * if an xref points to an ID which is not found, that should be considered an unresolved (i.e., broken) reference and a warning/error should be issued by the processor
   * [[xref-macro-fi]] *FI* Propose / Confirm that the xref macro is a general purpose macro for referencing other AsciiDoc documents; should the shorthand form be restricted to in-page anchors?
   * xrefs should not be checked/validated until the entire document is parsed, though a processor may choose to eagerly validate references it already knows about as an optimization
   * bibliographic entries are also stored in the same reference catalog; however, how they are defined differs

   == Resource references

   * any reference to a location outside the current document is a resource reference
   * often times, a resource reference looks like a path; however, the processor must not assume this
   * rather, any resource reference must pass through a resource resolver
   * some relative resource references have a predefined prefix; for example, image references that are relative start from the value of the `imagesdir` attribute
   * however, if no resource resolver is specified, the processor should assume the reference is a path; in this case,
    ** an absolute path should be taken as is
    ** a relative path should be resolved from the `docdir` (directory of the outermost document), not from the directory of the current include file
    ** the exception is include targets, which are resolved relative to the current include file
    ** access to paths outside of the jail (typically the `docdir`) may be restricted depending on the safe mode
   * xref distinguishes between internal and external reference based on leading `#` (always internal) or existence of file extension in target
    ** See <<xref-macro-fi,FI for clarification>>.

   = Preprocessor

   NOTE: We are considering different models for how to define the preprocessor such that it makes AsciiDoc more parsable.
   Possible solutions include: pure, priority (nesting restrictions), hybrid (header=priority, body=pure).

   * AsciiDoc provides directives that can add or remove lines from the source text before the text is parsed
   * Technically, AsciiDoc's preprocessor is not a true preprocessor, but rather a contextual, priority processor
   * The preprocessor has access to the document attributes defined at each line, but is not aware of the document's block structure
   * The preprocessor handles the following (make sections for these):
    ** line normalization
    ** attribute entries (does not consume them)
    ** conditional directives
    ** include directive
    ** comments <= to what degree?
   * directives share the same syntax as a block macro (but are not themselves block macros)
    ** there are conditional directives and the include directive
    ** directives are aware of any document attributes defined up to that point

   == Line normalization

   * Force the encoding to UTF-8 (An AsciiDoc processor always assumes the content is UTF-8 encoded)
   * Strip trailing spaces from each line (including any end of line character); or ignore them in grammar rules
    ** We may decide removing trailing space characters is not necessary, or that it can be handled by the preprocessor
   * Change Windows line ending to universal/Unix line ending (or match Windows line endings in the same way as universal line endings)

   == Preprocessor directives

   * Special lines that are processed by the preprocessor that are not impacted by the current context of the document
   * Preprocessor directives can appear anywhere in the document
   * A preprocessor directive must be escaped with a backslash in order for it not to be interpreted, even in a verbatim block
   * A preprocessor directive shares the syntax of a block macro, but is not itself a macro

   == Relationship to document attributes

   * Preprocessor directives must be able to see any document attributes that are defined up to the point of the directive line
   * The preprocessor can see the effect of an attribute entry, but does not itself consume the attribute entry
   * Preprocessor directives can use attribute references

   == Conditional directives

   * shared closing directive: endif
   * ifdef / ifndef
   * ifeval
   * *FI* Should we allow `else` for ifdef/ifndef/ifeval? (see https://github.com/asciidoctor/asciidoctor/issues/514)

   Q: If an unmatched `endif::[]` is found, should it be treated as regular text? or should the processor warn? This may be a job for a linter.

   == Include directive

   * *FI* Should we add indir/infile for include, if possible; or some way for targets to be resolved from current include?

   == Comments

   * *FI* Are comments block and inline nodes or preprocessor directives?
   If they are preprocessor directives, do they need to be captured by the preprocessor or simply ignored / dropped?
   * line
    ** *FI* Propose that lines that do not have a reserved designation (a delimiter line or a block attribute line) may have a trailing line comment; we are considering whether this can be loosened to all non-verbatim lines; related to #26
   * block

   ////
   = Docinfo

   TODO
   ////

   = Extension Points

   * The AsciiDoc language affords the author the ability to extend the syntax and interpretation of the syntax within a set of boundaries.
   * Since the AsciiDoc language may be processed by any language, this extension system can only be defined in pseudo-code.
   * A processor is expected to provide these extension points by providing TCK adapters to demonstrate that they are honored.
   * *FI* How will syntax extensions be described in the grammar?
   We may have to rethink the relationship between parsing and extensions; it may not work on the same model as the one used in Asciidoctor.

   == Lifecycle extensions

   * *FI* Can we continue to support lifecycle extensions? If so, how will they be integrated with parsing and which ones can we support?
   It's not clear if we can match what we've done in the past.
   * Ones that we can likely support: tree processor, postprocessor, and docinfo processor.

   ////
   * Preprocessor (this is controversial and may have to be rethought)
   * IncludeProcessor (may be replaced by resource resolver)
   * TreeProcessor
   * Postprocessor
   * DocinfoProcessor
   ////

   == Syntax extensions

   === Custom block

   Q: should a custom block or block macro be able to start a new section?

   === Custom block macro

   === Custom inline macro

   === Resource resolver

   * the return value of the resource resolver is the address of the resource to be used by the converter (e.g., the href)
    ** *FI* Or should it be an object that contains a) the referenceable location, b) the concrete location, c) a resource reader
   * as of right now, there's no required syntax for interpreting and resolving a resource reference
   * the resource resolver must have access to the name of resource being resolved (e.g., include, image, xref, video, etc.)
   * the resource resolver can filter the resources it chooses to resolve; it can override the behavior for certain names and allow the default behavior to be used for others (a filter)
   * the resource resolver must be provided the context from which to resolve the resource; this may be information the resource resolver has stored on the document for its own use

   [#id-generator]
   == ID generator

   * generates the IDs for headings (section titles and discrete headings)
   * called if the `sectids` attribute is set on the document and the element does not have an explicit ID

   = Compliance / TCK

   == TCK introduction

   * Validates that an implementation is compliant
   * Agnostic to implementation language / platform (doctest-oriented)
   * Currently focuses on language parsing / interpretation

   ....
           input         input
   |engine| <-> |adapter| <-> |impl|
         actual ASG        actual ASG
   = expected ASG
   ....

   == ASG / Node model

   * the TCK works by verifying that an implementation can produce an expected ASG
   * ASG is abstract semantic graph, which is essentially a semantic parse tree
   * an ASG only contains concrete nodes; it does not contain non-semantic empty lines; those are implied
   * in order to verify the ASG, implementations are expected to produce a node model
   * the node model is a JSON-representation of the ASG
   * the TCK will compare its node model against the node model produced by the implementation
   * the ASG will mandate at least enough source location (sourcemap) implementation to verify that document was correctly parsed; won't go overboard
    ** location end for block is last column of last line; not first column of next line
   * *FI* How will we define the APIs (including the DOM) in a language-independent way (e.g., IDL from XML DOM Core, UML, etc; see https://en.wikipedia.org/wiki/Language-independent_specification)?

   // IDEA: each entry in attributes resolves to attribute object, which holds value, location, history
   // another idea is to have a separate attributesdefs collection which captures this information
   // from this information, we can tell where a block starts; though we may want to reserve a dedicated property for that instead

   == Self-certification process

   * describe the self-certification process here

   ////
   [appendix]
   = Proposed Appendices

   * built-in / reserved document attributes
   * grammars
   * parsing strategy
   * converters
   ////

   [appendix]
   = Conversion and Expected Behaviors

   When writing in AsciiDoc, it's understood that the content will be converted to a publishable format.
   Writing in AsciiDoc has the benefit of writing in a presentation-agnostic input format and being able to publish to multiple formats (e.g., HTML, PDF, manpage, etc).
   The purpose of a processor is to both parse/interpret the AsciiDoc content into a document model, then convert that document model to an output format.
   The converter is not yet part of this specification (likely a companion specification).
   However, this specification does identify expectations of the published document that are controlled by the AsciiDoc source (e.g., the table of contents).
   This section explains the conversion process at a high level and catalogs those expectations.
   Not all output formats can satisfy all expectations, but they should cover as many as is feasible.

   [appendix]
   = Removed syntax

   Some syntax that was supported in the initial contribution to the AsciiDoc Language is not being carried forward in the standardized definition of the language.
   That list is as follows:

   * Setext-style headings (section titles and discrete headings)
   * Trailing markers on Atx-style headings
   * Roman numeral list markers (can still be enabled in output using list style)
   * Markdown compatibility syntax with the exception of email-style quote blocks and thematic break variants
   * ;; as dlist marker (infinite depth of colons is permitted instead)
   * Half open callout list marker (e.g., `1>`)
   * $$ for inline passtrhough (will likely be repurposed as an inline stem shorthand instead)
   * boxed attrlist on inline passthrough spans
   * indexterm2 inline macro (functionality will be folded into indexterm macro)
   * dsv table format
   * target on endif preprocessor directive
   * float style on discrete headings (renamed to discrete, possibly with support for heading as alternative)

   [appendix]
   = Deprecation process

   * *FI* Define the deprecation process for syntax, capabilities, etc. that was defined in the first version of the specification.
   * *FI* List any syntax, behavior, etc. that existed in Asciidoctor that was not defined in the first version of the specification and is therefore deprecated.
   We may decide in that issue to also list the syntax in an Appendix of the specification document or simply maintain it as an issue or in some other form.


/spec/modules/ROOT/pages/paragraph.adoc
=======================================

.. code-block: asciidoc

   = Paragraph

   // TODO: the syntax examples, grammar, and ASG schema and examples should be included into this document from external sources

   == Description

   Paragraphs are a foundational structure in AsciiDoc.
   A *paragraph* is a block element comprised of a sequence of contiguous, non-interrupting lines that contain inline preprocessor directives, inline elements, and uninterpreted text.
   If a line isn't recognized as another block element or structural form, it's interpreted as a paragraph.
   Unrecognized syntax, or syntax not permitted inside a paragraph, is retained and categorized as uninterpreted text.

   === Syntax examples

   .A paragraph with single line
   [,asciidoc]
   ----
   A paragraph that consists of a single line.
   ----

   .A paragraph with multiple, wrapped lines
   [,asciidoc]
   ----
   This paragraph has multiple lines that wrap after reaching the 72
   character limit set by the text editor.
   ----

   .Sibling paragraphs
   [,asciidoc]
   ----
   This document has multiple paragraphs.

   Paragraphs are separated by one or more empty lines.
   ----

   .A paragraph with block metadata
   [,asciidoc]
   ----
   [#p1]
   .The one and only
   Paragraph with block title and attribute lines.
   ----

   == Form, content model, and context

   [cols="2h,4"]
   |===
   |Element type |block
   |Structural form |paragraph
   |Content model |basic
   |Permitted content |text, inline elements, inline preprocessor directives; may vary if style is specified
   |Interrupting lines and syntax forms |empty line, block attribute line, block delimiter line, list continuation line (proposed), table cell delimiter (when the paragraph occurs anywhere inside a table)
   |Permitted parents |document (if document has no sections), preamble, compound block, list item, table cell
   |DOM interface |Paragraph
   |===

   ////
   [horizontal,labelwidth=33%]
   Element type:: Block
   Structural form:: Paragraph
   Content model:: Basic
   Permitted content:: Text, Inline elements, Inline preprocessor directives; may vary if style is specified
   Interrupting lines and syntax forms:: Empty line, Block attribute line, Block delimiter line, List continuation line (proposed), Table cell delimiter (when the paragraph occurs anywhere inside a table)
   Permitted parents:: Document (if document has no sections), Preamble, Compound block, List item, Table cell
   DOM interface:: Paragraph
   ////

   The source of a paragraph must not be empty.
   It may parse to empty if it contains only inline preprocessor directives that all resolve to empty.

   === Attributes and metadata

   A paragraph can accept the following attributes and metadata:

   * Block title (defined as title line or named attribute)
   * id (named and shorthand forms)
   * reftext (named and shorthand forms)
   * role(s) (named and shorthand forms)
   //** lead (move to expected converter behavior)
   * options (named and shorthand forms)
   * style (positional form)
   ** attributes applicable to style
   * data- named attributes

   // The following paragraph is derived from SDR 003. We definitely shouldn't be re-describing how blocks are generally parsed in each block description, so I'm keeping this minimalistic because 1) it will be thoroughly explained in the high-level block section, and 2) we're still hardening the block parsing rules and refining the description, so we don't want to have to be contiuously updating all the different block sections because we were too verbose.
   The block parser must parse a paragraph according to the rules of its structural form (Paragraph) and content model (Basic), regardless of the presence of an explicit style.
   Only after the block parser completes parsing the block is the style evaluated.
   If a style is specified on a paragraph, the paragraph may be transformed into another block type.
   The style can impact how inlines are parsed and determine the block's name and variant (if applicable).

   == Grammar

   The grammar rule for a paragraph is defined as follows:

   ----
   paragraph = &(!lf . eol / !any_block_delimiter_line) line|1.., !(list_continuation / any_block_delimiter_line / block_attribute_line)|
   ----

   This rule is considered only after considering all other blocks.
   This grammar rule does not take into account the behavior of the priority line processor (i.e., block preprocessor).
   The rule also does not include the match for any block metadata that preceeds the paragraph.
   Rather, the rule assumes any block metadata has already been consumed (and stored) and can be accessed from the rule's action (it's not necessary to reparse the block metadata before considering each block rule).
   What the rule actually matches can be understood as follows:

   ----
   paragraph_with_block_metadata = lf* @(block_metadata !heading paragraph)
   ----

   The paragraph rule's action is expected to apply the consumed block metadata to the paragraph and run the complete inline parser after the rule is matched (assuming no style is specified).
   Here's how the rule action may be defined:

   [,js]
   ----
   const location_ = getLocation()
   const metadata = processBlockMetadata()
   const node = {
     name: 'paragraph',
     type: 'block',
     inlines: parseInline(lines.join('\n'), {
       attributes: getDocumentAttributes(),
       locations: createLocationsForInlines(location_),
     }),
     location: toSourceLocation(location_),
   }
   return applyBlockMetadata(node, metadata)
   ----

   == ASG schema and examples

   The ASG schema for a paragraph is a specialization of a leaf block that extends an abstract block and is defined as follows:

   .ASG schema
   [,json]
   ----
   "paragraph": {
     "type": "object",
     "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
     "unevaluatedProperties": false,
     "required": ["name"],
     "defaults": { "inlines": [] },
     "properties": {
       "name": {
         "type": "string",
         "constant": "paragraph"
       },
       "form": {
         "type": "string",
         "enum": "paragraph"
       },
       "inlines": { "$ref": "#/$defs/inlines" }
     }
   }
   ----

   Here's an example of an ASG node for a paragraph that has multiple lines:

   .ASG example
   [,json]
   ----
   {
     "name": "paragraph",
     "type": "block",
     "inlines": [
       {
         "name": "text",
         "type": "string",
         "value": "This paragraph has multiple lines that wrap after reaching the 72\ncharacter limit.",
         "location": [{ "line": 1, "col": 1 }, { "line": 2, "col": 16 }]
       }
     ],
     "location": [{ "line": 1, "col": 1 }, { "line": 2, "col": 16 }]
   }
   ----

   //== DOM


/spec/modules/ROOT/pages/strong-span.adoc
=========================================

.. code-block: asciidoc

   // TODO insert xrefs to supporting sections once their available to reduce repitition
   = Strong Span

   == Description

   Text marked as strong indicates that the content has greater importance or seriousness compared to the surrounding content.
   A *strong span* is an inline element comprised of a sequence of characters that consists of uninterpreted text and inline markup, such as nested inline elements, resolved attribute references, inline passthrough placeholders, character references, etc.
   When converted to HTML, this element will likely be represented using a `<strong>` tag.
   Document viewers and browsers typically render a strong span using the bold weight from the same font family as the surrounding text.

   // FIXME the description section is meant to be non-normative; we may need to move to Syntax > Rules
   The strong span uses the asterisk (`+*+`) as the formatting mark.
   Constrained text is marked as strong by enclosing it in a single pair of asterisks (`+*text*+`).
   Unconstrained text is marked as strong by enclosing it in a pair of double asterisks (e.g., `+t**e**xt+`).

   Unconstrained markup is matched without taking into account the surrounding characters.
   The first match wins.

   Whether constrained markup is matched depends on which characters are adjacent to the formatting marks.
   The constrained rule must meet the following criteria:

   * (assert) not alpha\d
   * formatting mark (i.e., asterisk)
   * (assert) not space
   * one or more inline elements or uninterpretted characters
   * (assert) not space
   * formatting mark (i.e., asterisk)
   * (assert) not alpha\d

   The term "`alpha\d`" matches any alpha character defined by Unicode (`+\p{Alpha}+`) as well the Arabic numerals 0 to 9 (`\d`).
   This character group can be summarized using the regular expression `[\p{Alpha}\d]`.
   It does not match an underscore, unlike the `\p{Word}` Unicode property.

   A span cannot overlap with another span (i.e., a span can only be a sibling or a child of another span).
   The beginning and end of the span must fall within the boundaries of the parent inline.

   === Syntax examples

   .A single word with constrained strong
   [,asciidoc]
   ----
   This coffee is *strong*.
   ----

   .Multiple words with constrained strong
   [,asciidoc]
   ----
   This coffee is *very, very* strong.
   ----

   .Unconstrained strong
   [,asciidoc]
   ----
   CRUD stands for **C**reate, **R**ead, **U**pdate, and **D**elete.
   ----

   == Form, content model, and context

   [cols="2h,4"]
   |===
   |Name |span
   |Type |inline
   |Variant |strong
   |Structural form |constrained, unconstrained
   |Content model |span
   |Formatting mark |asterisk
   |Permitted content |uninterpreted text, alternate strong span form, other inline elements, resolved attribute references, inline passthrough placeholders
   |Disrupting markup |closing bracket of a parent macro (proposed)
   |Permitted parents |inline element that supports inlines (such as another span), basic block, block title, interpolated block attribute value, list item principal text, basic table cell
   |DOM interface |Span
   |===

   The unconstrained form takes precedence over the constrained form and is thus matched first.
   At the time the constrained and unconstrained strong spans are parsed, the inline preprocessor will have already been run.
   Only the value of attribute references will be visible at this time (and thus can influence parsing).
   Inline passthroughs are represented using placeholders.
   The passthrough content is restored after inline parsing is complete.

   If the inline parser cannot match the grammar rules for a strong span within a sequence of characters, the parser treats the markup as uninterpreted text and no warning is issued.
   For example, if the parser matches one asterisk (`*`), i.e., a potential opening strong mark, in a sequence of characters but eventually encounters the end of the text without matching a second (closing) strong mark, the asterisk in the character sequence has no special meaning an is passed through as uninterpreted text.

   A strong span cannot be empty.
   It may parse to empty (contain an empty array of inlines) if it contains only inline preprocessor directives that all resolve to empty.

   === Attributes and metadata

   A strong span may have the following attributes:

   * id (shorthand form)
   * role(s) (shorthand form)

   These attributes are defined using a limited boxed attrlist that precedes the formatting mark pair (e.g., `+[.application]*ACME*+`)
   The limitation is that the attrlist may only contain attributes defined using the shorthand form.

   == Grammar

   The grammar rule for a strong span is defined as follows:

   ----
   strong = unconstrained_strong / constrained_strong
   ----

   The grammar rule for an unconstrained strong span is defined as follows:

   // NOTE in an implementation, the unconstrained_strong rule may need to capture
   // a preceding alpha_d* to ensure it sees an unconstrained form that follows a
   // run of alpha_d and thus win out over a constrained form
   ----
   unconstrained_strong = '**' (code / emphasis / !'**' constrained_strong / open / macro / unconstrained_strong_other)+ '**'
   unconstrained_strong_other = alpha_d ('`' / '_' / '*' !'*' / '#') / not_mark_or_space+ (space not_mark_or_space+)* (space+ / &'**') / !'*' .
   ----

   The grammar rule for a constrained strong span is defined as follows:

   ----
   constrained_strong = '*' !space (code / emphasis / unconstrained_strong / open / macro / '*' !alpha_d / constrained_strong_other) (code / emphasis / unconstrained_strong / macro / constrained_strong_other)* '*' !alpha_d
   constrained_strong_other = alpha_d* constrained_left_mark_in_strong / not_mark_or_space+ (space not_mark_or_space+)* &('*' !alpha_d) / space+ (!'*' / &'**' &unconstrained_strong / '*') / '*' &alpha_d / escaped / !(' ' / '*') .
   ----

   NOTE: These rules do not yet account for the optional boxed attrlist that precedes the marked text.

   These grammar rule do not take into account the behavior of the inline preprocessor.

   The rules' actions are expected to tranform the match into an ASG node.
   Here's how the rule action may be defined for the constrained strong span:

   [,js]
   ----
   return {
     name: 'span',
     type: 'inline',
     variant: 'strong',
     form: 'constrained',
     range: createRangeForSpan('constrained', range(), offset()),
     inlines,
   }
   ----

   The range is later translated into a location value by a postprocessor.

   == ASG and DOM

   The ASG schema for a paragraph is a specialization of an inline span that extends an abstract inline parent and is defined as follows:

   [,json]
   ----
   "inlineStrongSpan": {
     "type": "object",
     "allOf": [{ "$ref": "#/$defs/abstractParentInline" }],
     "unevaluatedProperties": false,
     "required": ["name", "variant", "form"],
     "properties": {
       "name": {
         "type": "string",
         "const": "span"
       },
       "variant": {
         "type": "string",
         "const": "strong",
       },
       "form": {
         "type": "string",
         "enum": ["constrained", "unconstrained"]
       }
     }
   }
   ----

   Here's an example of an ASG node for a constrained strong span that has multiple words:

   [,json]
   ----
   {
     "name": "span",
     "type": "inline",
     "variant": "strong",
     "form": "constrained",
     "inlines": [
       {
         "name": "text",
         "type": "string",
         "value": "very, very",
         "location": [{ "line": 1, "col": 17 }, { "line": 1, "col": 26 }]
       }
     ],
     "location": [{ "line": 1, "col": 16 }, { "line": 1, "col": 27 }]
   }
   ----

   //== DOM


/spec/sdrs/sdr-001-open-block-delimiter.adoc
============================================

.. code-block: asciidoc

   = SDR-1: Add Variable-length Delimiter Form for Open Block

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/27[asciidoc-lang#27]

   == Accepted decision

   The specification will introduce a new structural container (i.e., a block form) for the open block that uses variable-length delimiters.
   The delimiters will consist of four or more tilde characters on their own line (e.g., `+~~~~+`).

   == Decision summary

   By making this addition, the structural container for open blocks will be consistent with other reusable structural containers (four character minimum for delimiters) and support nesting (by varying the delimiter length).

   The open block is the only block whose structural container has a uniform delimiter line with a restricted length (two characters instead of the standard four character minimum).
   Not only does it look different, the two hyphen delimiter form (`--`) prevents the open block from being directly nested inside another open block because the delimiter length cannot be varied.

   Nesting open blocks is useful for representing hierarchical elements not supported inherently in AsciiDoc (such as supporting custom layouts for landing pages without resorting to embedded HTML), enclosing the contents of a complex list item, or allowing an extension to define boundaries for a custom block without inferring other semantics.
   In each of these scenarios, the use of the open block as a container should not restrict the use of open blocks within that container.
   The open block is arguably the most versatile block, and yet its use is extremely limited because it cannot be nested.

   It's not enough to permit the length of the `--` delimiter to be varied because a delimiter line of four or more hyphens `----` is already reserved for a listing block.
   Thus, changing the delimiter character (from `-` to `~`) is necessary.
   Four or more tildes (`+~~~~+`) was selected as the delimiter line because the tilde is typically present on keyboards and the characters sit in the middle of the line, making it easier to read as a delimiter line.

   To view the complete discussion leading to this decision, including additional reasoning, requirement, questions, and discarded alternatives, see https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/27[issue #27].

   == Language change examples

   Below is an example of an open block that's demarcated using the new variable-length delimiter form (`+~~~~+`).

   [,asciidoc]
   ----
   ~~~~
   This is an open block delimited using the new standard length delimiter line.
   ~~~~
   ----

   In the next example, two open blocks are directly nested in a parent open block (using `+~~~~~~+` and `+~~~~+` delimiter lines, respectively).

   [,asciidoc]
   ----
   ~~~~
   Here are some boxes:

   ~~~~~~
   Box A

   This is a nested open block.
   ~~~~~~

   ~~~~~~
   Box B

   This is another nested open block.
   ~~~~~~
   ~~~~
   ----

   == Backwards compatibility

   The two hyphen delimiter form (`--`) will be marked as deprecated in the AsciiDoc language.
   However, the grammar will still have to allow use of the legacy form for backwards compatibility.


/spec/sdrs/sdr-002-block-attrlist-parsing.adoc
==============================================

.. code-block: asciidoc

   = SDR-2: Define Parsing Rules for attrlist in Block Attribute Line

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/33[asciidoc-lang#33]

   == Context

   The attrlist contained within a block attribute line requires dedicated parsing rules, and there are numerous ways these rules can be defined.
   This SDR documents the decision that was made to define these rules and their boundary conditions in the context of a formal grammar.

   The same parsing rules will be used for the attrlist in a block macro, minus the shorthand attributes in the first positional attribute.

   == Accepted decision

   The specification will define how the attrlist in a block attribute line should be parsed according to the rules specified in the decision summary.
   These rules will deal with boundaries, attribute references, positional and named attributes, shorthand attributes, accrued attributes, content attributes and inline parsing, backslash escaping, merging attributes from multiple block attribute lines, and mapping the data and locations to the ASG.
   It will also address backwards compatibility and chronicle rejected alternatives.

   == Decision summary

   The attrlist refers to the source text between the opening `[` and closing `]` characters of a block attribute line.
   By definition, a block attribute line is a boxed attrlist.
   The attrlist is parsed into a map of attributes that are associated with the node for the block.
   A block may have multiple block attribute lines, and these lines must precede the start of the block.
   The following sections document how the attrlist in this context must be parsed.

   === Boundaries and parsing strategy

   The attrlist must not begin or end with a space character.
   The attrlist should be parsed once the block attribute line is found using an inner parsing step.
   This parsing step is performed by the attrlist parser, which is backed by a discrete grammar.
   This confines the attrlist to the block attribute line and thus prevents the parser from breaching its boundaries.

   The attrlist in each sequential block attribute line should be parsed in document order.

   While it may seem like the attrlist rule could be integrated into the grammar that matches the block attribute line, the requirement to preprocess attribute references in the attrlist makes this approach unrealistic.
   The attrlist parser must be a discrete parser from the block parser.

   === Attribute references

   Before the attrlist parser can be run on the attrlist, the attrlist must be preprocessed.
   This preprocessing step must resolve any document attribute references in the attrlist regardless of where they appear in the attrlist.
   In this mode, the inline preprocessor should not consider the boundaries of any inline passthroughs.
   At this stage, it should only look for attribute references and replace them.
   Note that the same inline preprocessor mode will be used to resolve attribute references in the value of attribute entry.
   Once the inline preprocessor resolves attribute references, the attrlist is ready to be parsed.

   In order for the locations of inlines to be accurately recorded in the value of content attributes, the offsets introduced by resolving attribute references should be tracked.
   The location range of the resolved text should be the start and end of the attribute reference.

   === attrlist entries

   The attrlist consists of a set of named and positional attribute entries.
   Each entry is separated by a comma, which may itself be surrounded by spaces (e.g., `id=idname, role=rolename`).
   Named and positional attributes may be interwoven, but the recommended style is for named attributes to always follow positional attributes.
   If the value is enclosed in quotes, one or more spaces may be used the separated the attribute from the one that follows (comma is not required).

   ==== Named attributes

   A named attribute consists of a name and value.
   The name is separated from the value in the source by an equals sign, which may itself be surrounded by spaces (e.g., `name=value`).
   The value of a named attribute is assigned to a key in the attribute map using its name.

   Any attribute name is permitted as long as the name is valid according to the grammar.
   Every node shares a set of reserved attribute names.
   These are as follows:

   * id
   * opts
   * reftext
   * role

   There are two aliases for named attributes: 1) `roles` is an alias for `role` and 2) `options` is an alias for `opts`.

   Additionally, all block nodes have the following reserved attribute names:

   * caption
   * style
   * title

   As the specification evolves, specialized blocks may define additional reserved names (e.g., `cols` for a table block).
   This SDR does not attempt to account for all future possibilities.
   It's just providing an outline.

   ==== Positional attributes

   A positional attribute is an unnamed attribute.
   In other words, a positional attribute only consists of a value.
   A positional attribute is indexed according to its 1-based position in the attrlist.
   The reasoning for indexing positional attributes this way is as follows:

   * It's a lot easier for an author to reason about how the index is assigned; just identify the position (1-based index) in the attrlist.
   * It prevents the index from shifting if a positional attribute that precedes it is changed to a named attribute.
   * No special condition is needed to identify the positional attribute that hosts the shorthand attributes; it's always the first positional attribute by definition.

   However, authors are strongly encouraged to write documents such that named attributes always follow positional attributes.

   When the positional attribute is stored in the attributes map, it get assigned to a string key that consists of the numeric index prefixed with $1 (e.g., `"$1": "sidebar"`).
   If the positional attribute value is empty, it's not stored in the attributes map.
   If named attributes are intermingled with named attributes, the named attributes will impact the positional index.

   It's possible that there are gaps in the positional attribute keys in the attributes map.
   For example:

    [positional 1,,foo=bar,positional 2,yin=yang,positional 3]

   In this case, the positional attribute keys are $1, $4, and $6.

   === Quoted values

   The attribute value may be enclosed in a pair of single or double quotes (e.g., `"value"` or `'value'`).
   The closing quote must be followed by a comma, space, or the end of the attrlist.
   The enclosure is removed from the value when the value is stored in the attributes map.

   Enclosing the value in quotes allows the value to contain a comma, which would otherwise be treated as a separator between attributes.
   Note that it's not possible to escape a comma using a backslash, hence why the quoted value is needed.
   A comma in an attribute value can only be escaped by quoting the attribute value in either a pair of single or double quotes.

   All spaces inside a quoted value are preserved, including spaces directly on the inside of the enclosure.
   (In contrast, only inner spaces are preserved in a value which is not quoted).
   If the value contains the enclosing quote character, that character must be escaped.

   If an attribute value starts or ends with a quote character, and there is no match for the quote character on the opposing side of the value (i.e., the quotes are unbalanced), then the value is not considered quoted and the quote character is interpreted as part of the value.

   === Shorthand attributes

   Shorthand attributes are permitted in the first positional attribute of any attrlist in a block attribute line.
   When this condition is met, these shorthand attributes should be recognized and parsed.
   These shorthands are parsed and extracted from each line in which they reside rather than after all attrlists have been parsed.

   Shorthand attributes define multiple named attributes in a single entry using a shorthand notation.
   The fully expressed syntax for shorthand attributes in the first positional attribute location is as follows:

    [idname,reference text]stylename#idname.rolename1.rolename2%optionname1%optionname2

   All shorthand attributes are optional.
   The name assignments are as follows:

   * idname => id
   * reference text => reftext (parsed for inlines)
   * stylename => style
   * rolename1 rolename2 => role (accrued)
   * optionname1,optionname2 => opts (accured)

   The shorthand text may not be enclosed in quotes.
   The value of a shorthand may not be empty.
   Except in the reference text, the shorthand text may not contain spaces.
   If any of these conditions are not met, the shorthands are not parsed and the value is stored as entered.

   The ID shorthand has two forms, the anchor notation and the hash notation.
   The anchor notation must always come first.
   The hash notation takes precedence if both are present in the same attribute value, meaning the last always wins.
   The style, represented by `stylename` in the example, must always follow the anchor notation and precede any other shorthands.
   The remaining shorthands can be in any order (e.g., `%optionname1.rolename1#idname`).

   It's worth pointing out that the addition of the anchor notation in the first positional attribute allows the block anchor line and block attribute lines from Asciidoctor to be unified.
   In other words, `+[[idname,reference text]]+` is merely a block attribute line that uses the anchor shorthand in the first positional attribute.

   The reference text is parsed in a way similar to a single-quoted value, so a comma is treated as part of the value.
   If the reference text contains a `]` character, that character must be escaped.
   It is not necessary to enclose the reference text in quotes if it contains a comma.
   If the value is enclosed in quotes, the quotes are considered as part of the value, unlike a quoted attribute value.

   === Accrued attributes

   If a block attribute is defined again, the attribute is overwritten in the attributes map.
   As a consequence, the last occurrence in document order always wins.
   For example, if the first positional attribute is non-empty in two consecutive block attribute lines, the value in the map will be the one from the second line.
   The shorthand attributes in first positional attribute are parsed and stored eagerly, so each occurrence will contribute to the attributes in the map, rather than just the last occurrence.

   There are two exceptions to the override rule, `role` and `opts`.
   The value of these attributes are accrued each time they are used.
   For example, `role=a,role=b` is interpreted the same as becomes `role=a b`.
   And `opts=option1,opts=options2` is interpreted the same as `opts="option1,option2"`.

   When accruing roles, the value is trimmed and split on one or more spaces to extract the role names.
   When accruing options, the value is trimmed and split on one or more spaces or on a comma optionally surrounded by spaces to extract the option names.
   In both cases, each entry in the array will not have any spaces.
   Duplicates are filtered out.

   === Content attributes and inline parsing

   The value of most attributes is saved as a string.
   The exception to this rule are content attributes.
   Content attributes are attributes that contain displayable content, but which are defined in the source as block attributes.

   The list of content attributes are as follows:

   * title
   * reftext
   * caption
   * citetitle
   * attribution

   The value of a content attribute is always converted to an array of inlines.
   If the value is enclosed in single quotes, the inline parser is used to parse it into an array of inlines, thus interpreting any inline markup, including inline passthroughs.
   If the value is not enclosed in single quotes, the value is converted to a text node and wrapped in an array.
   It gets treated as though the text had been enclosed in an inline passthrough.
   The unparsed value should be saved (typically using a deferred function) in order to restore it later in the attributes map.

   In the case the inline parser is used, the inline preprocessor should only extract inline passthroughs.
   This is the only time inline passthroughs are recognized in the attrlist, and are confined to the boundaries of the quoted value.
   The attrlist parser should not resolve attribute references as this would cause attribute references to be resolved twice.
   The inline passthroughs should be restored once inline parsing is completed.

   If the implementation tracks locations, the location of each inline node should be recorded.
   The location does not have to be tracked for non-content attributes (i.e., string values).

   === Backslash escaping

   Using a backslash to escape syntax (aka backslash escaping) is handled differently in an attrlist then when inline syntax is parsed.
   Except when inlines are parsed in the value of a content attribute, all syntax in an attrlist is escaped syntactically.
   That means that the backslash must proceed an atomic syntax element such as an attribute reference, not just any symbol.

   These are the cases where backslashes are processed in an attrlist:

   * preceding an attribute reference
   * preceding the quote character in a quoted attribute value when the quote character is the same
   * preceding the right square bracket in the reftext portion of an anchor
   * as defined by the inline grammar in any single-quoted value of a content attribute

   For example, the following syntax will escape an attribute reference in the attrlist:

    \{escaped}

   The result after preprocessing will be:

    {escaped}

   The location of the left curly brace should be attributed to the location of the backslash to account for its absence.

   Wherever backslash escaping is permitted, there must be a way to represent a literal backslash at that location.
   Thus, the attrlist parser has to process all sequential backslashes leading up to an escapable character or form.
   The rules for processing these attributes are as follows:

   * An even number of backslashes gets resolved to half the number of backslashes and does not escape the character or form that follows.
   * An odd number of backslashes gets resolved to half of one less the number of backslashes and the final backslash escapes the character or form that follows.

   This processing will affect the number of backslashes that remain when the inline parser runs on the value of a content attribute.
   Therefore, it may be necessary to use additional backslashes in certain edge cases.
   Consider the case when you need to place a literal backslash in front of text enclosed in single smart quotes in a content attribute.

    title='\\\\\'`text in curly quotes`\''

   What the inline parser will see is:

    \\'`text in curly quotes`'

   Fortunately, these cases are quite rare.

   When tracking locations, the start location of the value with a leading backslash should be the start of the value (the first backslash) and the end location of the value with a trailing escaped backslash should be the location of the escaped backslash (the last backslash).
   In other words, the location should span the whole range of the original value, before the backslashes are processed.

   === Merging attributes

   The attributes parsed from an attrlist should be merged into the attributes parsed from any preceding block attribute lines associated with the same block.
   If the same named or positional attribute is defined, the last wins, with the exception of role and opts, which are accrued.
   If the positional attribute entry in a line is empty, it does not replace a positional attribute already defined at that index.

   Note that merging does not prevent content attributes that are replaced from being parsed.
   The parsed result is just lost.

   === Named positional attributes

   AsciiDoc supports a feature in which positional attributes are mapped onto named attributes if the block provides this mapping.
   One such example is the alt text, width and height attributes on the block macro.
   In these cases, the positional attribute acts as though it has an implicit name part to save the writer from having to type it.
   These are known as named positional attributes, or posattrs for short.

   How and when named positional attributes are processed will be addressed in a separate SDR.

   === Mapping data and locations to ASG

   After the attrlist in all block attribute lines associated with a block have been parsed, the result is a map of attributes.
   That map is assigned to the `metadata.attributes` property on the node in the ASG.
   The value of the `role` attribute, if present, is converted to an array and stored on the `metadata.roles` property.
   The value of the `opts` attribute, if present, is converted to an array and stored on the `metadata.options` property.
   If the `id` attribute is present, the value is stored on the `id` property on the node.

   All content attributes are promoted to properties on the node.
   At this point, the unparsed value is resaved in the attribute map.
   This ensures that the value of every attribute in the map is a string.

   The location property on the metadata, if set by the implementation, should start at the first character of the first attibute line and end at the last character before the line that starts the block.
   In other words, it encapsulates all the block attribute lines.
   The location property on the node itself should be the first line of the block, not including any block attribute lines.
   By setting it up this way, it's possible to see where the block begins both with and without the block attribute lines.

   == Backwards compatibility

   The parsing rules defined by this SDR were derived from the behavior of Asciidoctor and remain mostly true to it.
   However, there are some differences worth noting:

   * The inline parser is only run on a single quoted value of a content attribute; enabling this behavior for any single-quoted value is rarely needed and, more times than not, produces non-nonsensical behavior, like parsing an ID; it's unlikely this restriction will affect existing documents
   * The inline parser is only run on the value of the title attribute if the value is enclosed in single quotes; this differs from the pre-spec version of AsciiDoc, which always runs the inline parser on the value of the title attribute regardless
   * Backslash escaping is now consistent and reliable; in Asciidoctor, a backslash in front of escapable syntax would always be treated as an escape character, and thus there would be no way to represent a literal backslash at that location; as a result of this change, additional backslashes may need to be added in certain cases
   * Attribute references in the attrlist are only processed once, by the inline preprocessor; in Asciidoctor, if the value of an attribute reference in the attrlist contains an attribute reference, the attribute reference in the resolved attrlist would also be resolved within a single-quoted value; that was a loophole; the parser should not resolve attribute references in the resolved attrlist

   == Rejected alternatives

   === Resolve attribute references in preprocessor

   One alternative that was considered is to have the line preprocessor resolve attribute references in the attrlist.
   The advantage of this approach is that the attrlist parsing rules can be integrated directly into the block grammar.
   However, there's a major implication that prevents this alternative from being viable.
   In the case that an attribute value contains multiple lines, it would cause the preprocessor to produce a result that would no longer be recognized as block attribute line by the block parser and may alter the parsing of the document.
   The attrlist cannot breach the boundaries of a line.
   Thus, this strategy was rejected.

   === Index positional attributes by occurrence

   An alternative to positional attribute indexing is to number them by occurrence.
   In this scenario, named attributes are skipped and the indexing is incremented at occurrence of a positional attribute.

   At first, this seems logical since named attributes are not positional attributes.
   However, indexing positional attributes this way introduces other complexity.

   First, it allows the first positional attribute to float away from the left-most position if preceded by a named attribute.
   If that happens, then it becomes necessary to explain that shorthand attributes are only recognized in the first positional attribute in the left-most position, and the parser has to account for that.
   Second, it becomes harder to identify the position of a positional attribute since its not the position in the list, but rather an effective position after excluding named attributes.
   Finally, the index of the positional attribute can shift if the positional attribute that precedes it is changed to a named attribute.

   Ultimately, this alternative was rejected because it makes the behavior and permutations more difficult to explain and understand.

   === Run inline parser on any single-quoted attribute value

   Asciidoctor applies normal substitutions to any single-quoted attribute value in a block attrlist.
   In the AsciiDoc Language specification, this is equivalent to running the inline parser on the value.
   Allowing the user to enable this functionality for any attribute causes significant problems for the implementation.

   By allowing any value to be parsed for inlines, it means that the parser has to potentially store an array of inlines for any attribute.
   In the case when the client code needs the unparsed value instead, that has to be stored as well.
   The implementation / client code then needs to check whether the attribute value has this data structure and choose which value it wants.
   The parser also ends up doing more work than it needs to do to store the information to support this capability.
   This work includes running the inline parser unnecessarily and tracking locations.

   A majority of the time this capability is activated, it's unnecessary or unintended (i.e., parsing the value of the role, opts, or id attribute is non-nonsensical).
   Thus, we decided instead to only allow this feature for known content attributes, thus treating them specially from other attributes.
   The parsed value gets promoted to the node and the unparsed value is stored in the attributes map for informational purposes.

   We can expand the list of content attributes in the future, if necessary.

   === Avoid inline passthroughs when resolving attribute references

   We could have considered running the full inline preprocessor on the attrlist first, then parsing the attrlist into attributes.
   However, this idea was quickly rejected upon examination for several reasons.
   First, it would mean that the inline passthroughs would work anywhere in the attrlist, which they currently do not.
   It would also put a huge burden on the implementation to go back and replace passthrough placeholders since they could appear anywhere in the attributes map, including in the keys.
   If, instead, the inline passthroughs were avoided, but not replaced, it would mean that inline passthrough marks would get left behind in parts of the attrlist that don't get run through the inline parser.
   In other words, it would just make a mess of things.
   Most important, it would be completely different from how attrlist parsing works in AsciiDoc prior to the specification.

   The most consistent way to deal with attribute references in an attrlist is to define a special mode that resolves them up front without considering any inline passthroughs, so that is the strategy we decided on.

   === Basic backslash escaping

   One of the goals of the specification is to make backslash escaping consistent and reliable.
   However, we considered making an exception to that goal for the attrlist.

   One idea was to use primitive backslash escaping here, which only considers whether the character that immediately precedes an escapable character or form is a backslash, and treat it as an escape.
   This strategy is the closest to how Asciidoctor is implemented and would also avoid the compounding of backslashes that can happen in a run leading up to escapable syntax.
   In the end, we decided that if we're going to get backslash escaping right elsewhere, it should be done here too.

   Another idea was to apply backslash escaping to the attrlist lexically rather than syntactically.
   This is certainly a tempting alternative since it would match more closely to how it works in paragraph text.
   However, this would make the syntax rules drastically different from how they are in pre-spec AsciiDoc as backslashes would now be recognized in many more places in the attrlist.
   It would also make it harder on the implementation to track the offsets left behind for location tracking and raise new questions about how to handle backslashes in front of commas, equals signs, and quotes.
   In the end, we felt that this would be too big of a change and that using syntactically backslash escaping offers a reasonable compromise in terms of both ease of use and compatibility.


/spec/sdrs/sdr-003-block-parsing-and-style.adoc
===============================================

.. code-block: asciidoc

   = SDR-3: Reframe Block Style as Parsing Transformation

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/31[asciidoc-lang#31]

   == Accepted decision

   The style on a block does not influence the block parsing model, meaning how a structural form is matched.
   Instead, block parsing is conducted by testing grammar rules of various structural forms (e.g., paragraph, indented lines, structural container, etc.) to find a match.
   The style then impacts how the result of matching a grammar rule (the AST node) is interpreted and transformed into a node in the ASG.

   == Decision summary

   In pre-spec AsciiDoc, the block style got interwoven with the block parsing rules.
   This coupling makes it impractical to define a formal grammar for the language.
   We have decided to reframe the block style so it functions as originally intended.
   The style merely influences how the parsed block is interpreted and transformed into a semantic node.

   In AsciiDoc, there are various structural forms, which are the building blocks of the language at the block level.
   These structures include a paragraph, indented lines, a list item, a heading, a block macro, and a delimited block.
   These structures are recognized by the parser based on the grammar rule that they match.

   Once the parser identifies what the structure is, it follows certain rules for how to identify the lines that comprise it, how to process any leading markers or surrounding delimiter lines, and whether to parse nested blocks.
   The block style should not influence how the parser identifies the block structure.
   In other words, the block parser should identify the block and its boundaries without considering any of the block metadata.
   The one exception to this rule is the discrete style on a heading.
   The discrete style should cause the heading to be parsed as a leaf block rather than a parent block.
   This exception is necessary since sections and discrete headings have the same structural form, yet only sections are permitted to have children.

   Once the block is parsed by the block parser, the style can influence what happens next.
   The style may:

   * instruct the parser to run the inline parser on the lines
   * instruct the parser to not run the inline parser on the lines
   * instruct the parser to only run a certain mode of the inline preprocessor on the lines
   * instruct the parser to change the block from one type to another (e.g., from a paragraph to a sidebar that contains that paragraph).

   Here's a summary of the role the block style plays in parsing:

   . The source form (e.g., indented) controls how the boundaries of a block are determined and its block content model (whether it can have child blocks).
   . The style (which may be implied) impacts how inlines are parsed and determines the block's name and, if applicable, variant.
   . The block name determines which conversion is applied when the parsed document is converted; the converter does not consider the form, thus the form does not impact conversion.

   Let's consider an example.
   We'll look at the case when the `normal` style is declared above an indented line.
   (Note that the `normal` style is an alias for `paragraph`, retained for backwards compatibility).

   [,asciidoc]
   ----
   [normal]
    [[idname]]https://example.org[]
   ----

   This block will be parsed as verbatim since it's written using the indented form.
   Then, the `normal` style will be applied, transforming the block into a paragraph.
   The application of that style happens in the action for the rule.
   The indentation is first stripped away, then the inline parser is run on those lines.
   This allows the author to leverage the verbatim parsing of an indented form, but still have the text in the paragraph interpreted as though it had been defined as a normal paragraph.
   The ASG node will still record the form of this paragraph as `indented` to track how it was defined.

   We'll now look at the case when the `sidebar` style is declared on a paragraph structure.

   [,asciidoc]
   ----
   [sidebar]
   Just an aside.
   ----

   This block will be parsed as a paragraph since it's not indented.
   Then, the `sidebar` style will be applied, transforming the block into a sidebar.
   The application of that style happens in the action for the rule.
   The rule action will create a synthetic sidebar block and attach the paragraph as a child of that block.
   Any metadata associated with the block will be promoted to the sidebar block, perhaps with some exceptions such as the `hardbreaks` option.
   The action will then return the sidebar block, which contains the paragraph from the source document.
   The ASG node will record the form of this sidebar block as `paragraph` to track how it was defined.

   Now let's consider the case when the `sidebar` style is used above indented lines.

   [,asciidoc]
   ----
   [sidebar]
    [[idname]]https://example.org[]
   ----

   This block will be parsed as verbatim since it's written using the indented form.
   What happens next may be a somewhat unexpected, but necessary for compatibility with pre-spec AsciiDoc.
   The block is first transformed into a paragraph, as though the `normal` style was specified, as in the first example..
   Then, the `sidebar` style will be applied, transforming the paragraph into a sidebar as in the previous example.
   It acts as though the block has two styles, `normal` and `sidebar`.
   The action will then return the sidebar block, which contains the indented lines transformed into a paragraph from the source document.
   The ASG node will record the form of this sidebar block as `indented` to track how it was defined.
   If the language were being defined anew, we might have said that parser would create a sidebar block with a literal block, but we've determined that we must retain backwards-compatibility in this case.

   This parsing strategy will be the basis for how the `subs` attribute is interpreted and how block extensions will work.
   The block parsing always happens first, then the metadata can influence how that result is handled.
   In the case the `subs` attribute is defined on the block, it informs the parser how to perform inline parsing, if any.
   The `subs` attribute does not impact how the block is identified.
   Block extensions will run in the rule action, when the parsed result is interpreted and transformed into an ASG node.

   By applying this parsing strategy to the `subs` attribute, these two blocks would be roughly equivalent:

   [,asciidoc]
   ----
   [pass]
   Pass this on.

   [subs=none]
   Pass this on.
   ----

   It's not fully clear yet the degree to which the `subs` attribute can be honored, but this parsing strategy is the first step to understanding how to model it.

   == Backwards compatibility

   By not applying the block style until after the block parsing is done, it's possible that certain styled paragraphs will end up matching more or less lines than in pre-spec AsciiDoc.
   For example, the following AsciiDoc would no longer produce a literal block, but rather a list (maybe with the literal bullet style?):

   [,asciidoc]
   ----
   [literal]
   * This is just a list
   ----

   However, we anticipate these situations to be rare and easily corrected.

   This behavior was also inconsistent, since the following example would  produce a list instead of a sidebar.
   But now it will produce a list inside a sidebar since `sidebar` is a block style, not a bullet style.

   [,asciidoc]
   ----
   [sidebar]
   * This is a list in a sidebar
   ----

   The influence of the style should be consistent, which is to act as a parsing transformation, not as a structural form.

   There will definitely be an impact on how block extensions work since block parsing will now happen up front.
   However, the topic of syntax extensions and how they are processed is for another SDR.


/spec/sdrs/sdr-004-use-peg-for-formal-grammar.adoc
==================================================

.. code-block: asciidoc

   = SDR-4: Use PEG as the Formal Grammar for Describing the AsciiDoc Language

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/8[asciidoc-lang#8]

   == Context

   The backbone of a specification for a formal language, such as AsciiDoc, is a formal grammar.
   A formal grammar describes the syntax of a language in terms of what combinations of strings are valid, as well as any semantics associated with those combinations.
   The grammar consists of a set of rules that describe the markup elements, their relationships, and required ordering and precedence.
   The grammar is complemented by a parser, which transforms the input matched by a rule into a node and articulates the semantic rules.
   A formal grammar for AsciiDoc moves the details of parsing away from implementation-specific code into something other implementations can reference and build on.

   We need to choose what grammar formalism to use to describe the syntax of the AsciiDoc language in the specification.
   That formalism also needs to be able to express any required semantics associated with those rules in the form of rule actions.
   In other words, we must choose a solution that provides fully semantic parsing, with the goal of producing an ASG, not just lexical parsing.

   == Accepted decision

   We've decided to use a parsing expression grammar (PEG) as the formal grammar in the specification to describe the AsciiDoc language.
   In particular, we've chosen the https://peggyjs.org/documentation.html#grammar-syntax-and-semantics-parsing-expression-types[Peggy dialect] of PEG.
   Peggy provides the full expression of a PEG parser.
   During prototyping, its dialect has proven to be flexible, concise, and readable.

   The normative sections of the specification will use a PEG grammar and rule actions as a way to communicate the syntax rules, relationships, and expected behaviors of the AsciiDoc language.

   Please note that it's not necessary for an implementation to use a PEG parser, or even to reuse the grammars and its rules provided by the specification.
   To cite https://blog.reverberate.org/2013/09/ll-and-lr-in-context-why-parsing-tools.html:

   > Language specifications are often defined in terms of a formalism like BNF, but it’s almost never the case that real parsers can be generated directly from this formalism.

   All that matters is whether the implementation produces the expected ASG.
   However, we feel strongly that the grammars in the specification will clearly communicate the valid syntax rules and required semantics for parsing the AsciiDoc language, and will provide a good starting point for writing an implementation.

   == Decision summary

   We must keep in mind that we're writing a specification, and hence formal grammar, for an existing language.
   The implementation-defined history of AsciiDoc leading up to the specification effort has resulted in some aspects of the language being tightly coupled with how it's parsed.
   A goal of the specification is to untangle the syntax so it can be clearly described in the specification.

   Since the language was established before any attempt to formalize it, the grammar will necessarily have to adapt to its inherent rules rather than the other way around.
   That severely limits which grammar formalisms are applicable for describing the AsciiDoc language.
   AsciiDoc is often context sensitive, as opposed to context free as many grammar formalisms require.
   AsciiDoc is also naturally recursive, yet often relies on semantic boundaries.
   Thus, many existing grammar formalisms may not apply well to the AsciiDoc language.

   We've discovered that PEG is the most well-suited formalism for describing AsciiDoc using a formal grammar in the specification.
   We've focused on Peggy (a JavaScript-based PEG implementation) since it has proven to be the most accommodating to the task.

   === Why PEG?

   AsciiDoc is not a context-free language.
   Furthermore, parsing AsciiDoc cannot be ambiguous, meaning there's only one valid parse tree.
   That means parsing AsciiDoc relies on the ordered choice operator, which, at times, must tap into assertions and semantic predicates to make that choice.
   An assertion looks ahead of the cursor to check an adjacency requirement without consuming any characters.
   A predicate is an arbitrarily complex expression or action to look ahead into the input string without actually consuming it.
   That already puts us squarely into the feature set of PEG.

   To cite https://blog.reverberate.org/2013/09/ll-and-lr-in-context-why-parsing-tools.html:

   > Parsing expression grammars avoid ambiguity by forcing all grammar rules to be defined in terms of prioritized choice.

   That precisely describes the deterministic interpretation that AsciiDoc requires.

   There's another characteristic of AsciiDoc that leads us to conclude that PEG is the right choice to describe AsciiDoc.
   Any sequence of Unicode characters is considered a parseable AsciiDoc document, even if it emits warnings in certain cases.
   That's because AsciiDoc is first and foremost a language for writing, not programming.
   The language must assume that if no grammar rules match, meaning no reserved markup is found, then the text is intended to be content for the reader's eyes.
   On the other hand, if a sequence of characters, such as a block delimiter line, matches a grammar rule, then that sequence of characters is interpreted to have semantic meaning, such as wrapping content in a sidebar block.
   PEG also supports regex character matches, which is crucial for supporting all written languages (i.e., Unicode).

   In many aspects of the language, AsciiDoc relies on recursive descent (section hierarchy, delimited blocks, nested text formatting, etc).
   PEG operates as a recursive descent parser, making it a natural fit.

   In PEG, actions can be associated with rules to transform the parsed result into a semantic node, which is vital for describing how an element must be interpreted.
   It's not enough for us to merely document the valid syntax of AsciiDoc; we also need to document the required semantics.
   Actions in PEG give us this capability without having to introduce a separate formalism.

   Based on these needs, we've been able to conclude that AsciiDoc lends itself well to a PEG parser.
   We rely on the power of PEG parsing to describe the AsciiDoc language, at least for the purpose of writing the specification.

   We don't have to worry about the inefficiency of PEG as much since AsciiDoc's line and marker-oriented style is already naturally designed to be able to veto rules early.
   In this regard, the language is quite well-suited to parsers generated by PEG.

   The PEG page on wikipedia asserts that not all languages that can be expressed using parsing expression grammars can be parsed by LL or LR parsers.
   We think this is the case for AsciiDoc as well, though it remains an open question to prove or disprove.

   === Multiple grammars

   In order to describe AsciiDoc in a way that achieves reasonable backwards compatibility, it's not possible to use a single grammar, as first asserted in https://www.tweag.io/blog/2021-06-15-asciidoc-haskell-pandoc.
   Rather, the language must be described using several different grammars listed here:

   * line preprocessor (possible to integrate into block grammar if the parser supports it)
   * block
   * attrlist
   * inline preprocessor
   * inline

   The primary reason to split the grammars is because blocks and inlines are parsed in fundamentally different ways.
   Blocks are largely line-oriented.
   Thus, every such rule has to consider a line ending as a meaningful character, often a boundary.
   Inlines see line endings as just another type of spacing character and will comfortably span them.
   Another reason is that the block name determines which root grammar rule to use to parse the inline syntax, if any.

   Thus, due to how the language evolved, there are natural restarts between each of these stages of parsing that require shifting to a subparser.
   Trying to describe the language using a single grammar would permit behavior forbidden by design, such as a paragraph running over the end of a delimited block or a block attribute value running over the end of a line.

   ==== Line preprocessor

   There's no question that the line preprocessor is the biggest hurdle for describing AsciiDoc using a formal grammar.
   That's because it's intertwined with the block structure, meaning it's both dependent on it and can influence it.
   It's possible this part of the grammar can be described using a dedicated grammar, but implementations may chose to integrate it directly into the block grammar or to use a different strategy entirely. 
   We're likely going to describe the line preprocessor using a dedicated PEG grammar in the specification since it will be the easiest to understand.
   To integrate the line preprocessor into the block grammar relies on the PEG parser allowing the input to be modified ahead of what's already been parsed.
   We're also still considering whether we can tighten the rules to decouple the line preprocessor from block parsing (https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/26[#26]).

   === Assertions and semantic predicates

   It's not enough to say that AsciiDoc must be described using PEG.
   There are some characteristics of the language that dictate particular requirements for a grammar formalism.
   AsciiDoc requires the use of the full set of features that PEG affords, most notably assertions and semantic predicates.

   A good example of where assertions are required is when matching constrained inline markup.
   A constrained span must not permit a space immediately after the opening mark and must not be followed by a word character.
   The only way to express this requirement in a PEG is to make use of assertions.
   We also see this need come up again in the block-level syntax when the rule has to avoid running over a line boundary or asserting that there's one immediately following a rule.

   Expressing the block-level syntax relies heavily on semantic predicates.
   For example, having to support variable length block delimiters is a good case of when semantic predicates are needed.
   In AsciiDoc, a block delimiter line starts and ends a delimited block.
   The parser will look for the opening delimiter, then parse input as children of that block up until the closing delimiter, not allowing the parser to consume the closing delimiter.
   That part is simple enough for PEG to describe.
   Except that the delimiter line can be of variable length.
   Thus, to find the closing delimiter line, the grammar can't just match any delimiter line for that block type, but the delimiter line that has the same length.
   When a delimiter line is matched, the grammar rule must use a semantic predicate to inspect the parsing state to determine if the delimiter line is an exact match.

   A similar problem occurs with nested blocks.
   It's not permissible for a block that is nested inside of another block to be closed until the parent block is closed.
   Once again, the grammar rule must use a semantic predicate to determine if the rule is applicable given the current parsing context.

   We see this need come up again and again in AsciiDoc, including section parsing, list parsing, and table parsing.

   The block syntax in AsciiDoc is predominantly a forward-only grammar.
   Once the block-level parser matches the rule that starts a block, at which point state is saved, that rule should succeed.
   In other words, the parser should not have to revisit that rule.
   Thus, the grammar has to be written carefully to ensure that the parsing context remains consistent.
   In theory, this requirement could be avoided if we forbid the use of packrat parsing (caching).
   However, it would be best if we could write the grammar in such a way that does not fail when this feature of a PEG parser is enabled.

   Another place semantic predicates are needed is whenever the block attributes, specifically the block style, impacts parsing.
   For example, if `[discrete]` is present above a heading, the parser should treat it as a discrete heading instead of a section/section title.
   In this case, the parser needs to be able consult the block attributes to determine how to proceed.
   In order to do so, the block attributes must be stored in the parsing context, making it available for the semantic predicate to consult.

   To the degree possible, we will avoid relying on semantic predicates in the grammar so that it's easier to comprehend.
   However, it's impossible to avoid them entirely since the language relies on them, and thus they will appear in the grammar rules in the specification.

   == Backwards compatibility

   Using a formal grammar to describe the AsciiDoc language, and PEG in particular, will have a few impacts on backwards compatibility.
   But this impact is a positive one.
   It means AsciiDoc will be parsed more accurately and deterministically.

   One notable change is that nested blocks will be parsed semantically, instead of lexically.
   That means that if a block is nested inside of another block, the parent block cannot be closed until the child block is closed.
   This is the way almost all other recursive languages work and something writers have expected for as long as AsciiDoc has existed.
   It was not possible to implement block parsing this way in pre-spec AsciiDoc since the parsing was not based on a formal grammar.
   But we now have the opportunity to fix that.

   Inline parsing will have a similar benefit.
   When inline markup is nested, the nested markup must end before the parent markup ends.
   Again, this is the behavior writers expect.
   The absence of this capability has led to using defensive workarounds.
   These workarounds will largely still apply, but will be rendered unnecessary.

   The use of the `subs` attribute on a block is going to be more restrictive.
   The grammar will be able to account for common permutations, but will not allow the grammar rules to be completely rearranged.
   We're confident we'll be able to retain reasonable compatibility with existing documents while still being able to accommodate the most popular uses of this capability.

   Attribute entries will become part of the block grammar.
   Thus, valid locations for attribute entries will be clarified.
   In some cases, this may lead to the rules being more restrictive (e.g., cannot be interspersed with block attribute lines), while in other cases it may allow the rules being more loose (e.g., can be placed at the end of a delimited block).

   The changes to the syntax ushered in by a formal grammar will make the parsing of AsciiDoc more deterministic and thus be received well by writers.
   We consider this change as suitable to maintain reasonable compatibility with existing documents.


/spec/sdrs/sdr-005-formal-grammar-for-inline-syntax.adoc
========================================================

.. code-block: asciidoc

   = SDR-5: Describe Inline Syntax using Formal Grammar

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/16[asciidoc-lang#16]
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/16[asciidoc-lang#22]

   == Context

   The inline syntax in the AsciiDoc language has never had a formal grammar, nor was it initially designed to have one.
   Inline syntax refers to the markup in the content of a non-verbatim leaf node (e.g., paragraph, heading, title, block content attribute, etc.).
   We herein refer to this content as regular text.

   The inline markup in AsciiDoc is currently processed as a sequence of substitutions on regular text using multiple passes.
   These substitutions, in effect, determine how that text is interpreted.
   The substitution types applied to regular text are as follows: specialchars, attributes, quotes, replacements, macros, and post_replacements.

   Despite the sophistication of the regular expressions used by the substitutions to identify inline syntax, this methodology is nothing more than a battery of search and replace operations.
   These operations incrementally transform the text from AsciiDoc to the output format during the convert phase.
   This approach is in contrast to building a complete structured representation (i.e., parse tree) during the parsing phase.

   Due to the lack of a formal grammar, the inline syntax is largely implementation-defined--or, at the very least, implementation-biased.
   Furthermore, relying on substitutions to process the inline syntax has resulted in the inline syntax being the most ambiguous, fragile, and content-dependent aspect of the language.
   Although we initially planned to stick with the substitutions approach in the first version of the specification, further analysis revealed that leaves severe problems unresolved:

   . The source is morphing while the substitutions are being applied.
   This approach makes the definition of the inline syntax ambiguous by definition since each successive substitution operates on a slightly different source, a hybrid of input and output produced by the converter.
   In other words, the output actually affects the parsing.
   . The processing is coupled to the converter, which is not being specified at this time.
   . The parse phase is not complete before the convert phase begins, making it difficult for an implementation to produce an ASG for verification.
   . The regular expression-based substitutions are complicated to describe in a technical specification.
   Furthermore, due to their complexity, the regular expressions required are not portable between language runtimes, which does not meet the portability goals of the specification.

   If this specification were to describe the inline syntax as a sequence of substitutions at this point, we fear these problems will cripple the specification and become so ingrained in the language that it will be impossible to correct in future versions.
   Since the inline syntax shows up again and again throughout the language, this is just not an acceptable condition.
   The transition away from substitutions is more pressing and consequential than we originally anticipated.
   It's also worth noting that the request to formalize the inline syntax traces back over a decade.

   The way the inline syntax is currently processed in AsciiDoc makes it one of the most ambiguous aspects of the language.
   The specification presents a unique opportunity to address this long-standing issue.
   This transition will make the inline syntax easier to understand, parse, and teach.

   == Accepted decision

   In order to specify the AsciiDoc language unambiguously, we've decided to make the transition from describing the inline syntax in terms of substitutions to defining it using a formal grammar--the input to a parser generator.

   == Decision summary

   === Necessity

   Search and replace using regular expressions leaves too many ambiguities and idiosyncrasies.
   It also lacks sufficient context to account for countless permutations (e.g., constrained and nested markup, backslash escaping, etc).
   As a result, the interpretation of the inline markup can often be unexpected or surprising for the writer.
   We see many documents in which the writer has had to resort to workarounds or defensive markup to navigate these quirks.
   A strong specification means having a stable definition of the inline syntax.

   Here's what we need:

   * To define a formal grammar for the inline syntax that can be documented in the specification
   * To be able to produce a full parse tree independent of output format to verify the behavior of an implementation
   * To decouple parsing from conversion; parsing should not rely on conversion; the output should not affect parsing
   * To be able to control where syntax rules are applied to avoid unintended interpretation of the text
   * To support constrained and nested syntax in a reliable way

   A formal grammar is the only reasonable and portable way to describe AsciiDoc's inline syntax in a specification.

   === Benefits

   The importance of having a formal grammar that includes the inline syntax cannot be overstated.

   . It becomes feasible to verify compliance of an implementation since parsing generates a complete parse tree and, in turn, an ASG, that includes inline nodes.
   . It decouples the parsing of the language from the output format, which is essential to stay within the scope of this specification.
   This decoupling also avoids idiosyncrasies introduced by parsing partially converted output or eagerly converting some elements.
   In pre-spec AsciiDoc, it's common to have ordering or state problems that cause quirky behavior as a result of converting elements during parsing.
   . Having a complete parse tree allows tooling to fully analyze the structure of a document and extract information from it, all the way down to the level of an inline node and its contents.
   . A complete parse tree improves the accuracy of diagnostic messages, which include the precise source location, when things go wrong.

   Some aspects of the syntax that were previously very difficult become much simpler.
   For example, AsciiDoc can be enhanced to support lexical backslash escaping (i.e., backslash escaping of reserved characters and forms instead of contextual).
   Syntax rules will naturally nest, avoiding ambiguity in how boundaries are interpreted or compelling the author to resort to hacks.
   //In general, the syntax will be more consistent and well-behaved since markup can be interpreted or not based on where it resides in the flow.
   With a formal grammar, the parsing becomes much more accurate, able to handle situations such as nested syntax and non-interpreted spans naturally, addressing many scenarios that were previously ambiguous.

   === Strategy

   We've decided to describe the AsciiDoc syntax using PEG (parsing expression grammar).
   Inline parsing using this formalism turned out to not be as difficult as we had initially thought.
   Identifying and isolating the inline preprocessor made it even simpler, with only the side effect of extra effort to track offsets.
   Most important, we determined that compatibility can be reasonably maintained.

   The inline syntax in AsciiDoc lends itself well to a PEG grammar because it's naturally recursive, mostly due to limitations of the output formats (DocBook, HTML, etc).
   We found that writers were naturally writing AsciiDoc in such a way that adhered to these limitations.
   Thus, we can say with confidence that it's possible to accurately describe the inline syntax in AsciiDoc using PEG.
   What's more, the inline syntax can be parsed efficiently from that grammar (with or without packrat parsing).

   ==== Remapping substitutions

   One of the challenges with transitioning to a formal grammar was figuring out how to account for each of the substitution types in the grammar.
   What we discovered is that not all the substitution types respect the inline structure.
   Rather, they work outside of that structure, acting either as a preprocessor or postprocessor.
   We identified the need to introduce an inline preprocessor and to rely on some postprocessing of the parsed structure as well.

   Here's how the substitution types get mapped to the formal grammar:

   * specialchars - a postprocessing operation on string nodes that is applied by the converter, thus not represented in the ASG
   * attributes - handled by the inline preprocessor, which replaces each attribute reference with the value of the attribute to which it refers
   * quotes - marked spans handled in the grammar using ordered choice rules
   * replacements - typographic hints handled in the grammar using ordered choice rules
   * macros
    ** inline passthroughs - protected spans handled by the inline preprocessor, which replaces passthroughs with placeholders during parsing; these placeholders are matched by a rule in the grammar, which restores the original text without parsing it further
    ** ordinary macros and shorthands - markup handled in the grammar using ordered choice rules
   * post_replacements - markup handled in the grammar using ordered choice rules

   Most of the substitutions map cleanly to the grammar as an ordered choice.
   The obvious exceptions are specialchars, attributes, and inline passthroughs.
   //The remainder of the inline syntax maps cleanly into rules of formal grammar arranged as an ordered choice.

   ==== Special characters

   The specialchars ("`special characters`") substitution has always been a major anomaly of the AsciiDoc syntax.
   The first problem is that it's biased towards the needs of an SGML output format like HTML.
   While it encodes the correct characters for output formats in that family, it unnecessarily encodes those characters using the wrong syntax for other output formats such as groff.
   So the definition of a special character is not universal.
   More significantly, it alters the source so that substitutions have to account for these encoded characters in the grammar.

   There's just no need to be doing the specialchars substitution at this stage.
   These characters are not part of the inline syntax.
   The converter should encode special characters characters in string nodes as required by the output format during conversion.

   ==== Inline preprocessor

   With specialchars out of the way, the next group of syntax to address is that which influences the inline structure, but is not bound to it.
   That syntax consists of attribute references (i.e., attributes) and inline passthroughs.

   If we consider attribute references, the resolved value is the text the parser needs to operate on.
   This resolved text could fundamentally change what the parser sees, potentially changing the structure.
   For example, a URL macro may begin with an attribute reference.
   The parser needs to see the URL added by the attribute reference, not the attribute reference itself.
   This is a very similar situation to the preprocessor directives the line preprocessor handles.
   So we have to look at attribute references as belonging to a preprocessing step.
   The consequence is that this effectively reverses the order of the quotes and attributes substitutions so that quotes (marked spans) will be found and parsed in the value of an attribute when inserted into the text.

   Inline passthroughs are the same.
   But rather than substitute text, inline passthroughs mark regions of text that the inline parsing should skip over (i.e., non-interpreted spans).
   These protected areas may also include attribute references that should be left uninterpreted.
   Since the inline preprocessor leaves behind placeholders in the location of inline passthroughs, these placeholders must be matched by the inline grammar and the rule action must restore the protected text.

   We can thus conclude that both attribute references and inline passthroughs are part of an inline preprocessor that operates on regular text before inline parsing begins.
   The inline preprocessor needs to track offsets in the source when the text is changed so that the locations of inline nodes remains accurate.

   == Related topics

   While we've been able to model most aspects of the inline syntax as a formal grammar, there are still some topics that require more investigation.

   Backslash escaping::
   By switching to a formal grammar, we hope to be able make backslash escaping stable and reliable.
   The current proposal is to use lexical backslash escaping, which will process the backslash in front of any symbol (including a backslash) or macro prefix.
   However, there's a relationship to the use of backslashes to escape block-level syntax that still needs to be sorted out.

   Boundaries of boxed attrlist on inline macros::
   At the block level, a boxed attrlist always terminates at the end of a line.
   In the inline syntax, the boxed attrlist on an inline macro can terminate anywhere in the line.
   How that closing bracket is identified is still under question.
   One approach is to match it eagerly, then process the attrlist (or content) inside the box.
   This would avoid inline markup in an attrlist from masking the closing bracket.
   However, it would require the use of more advancing parsing features (such as semantic predicates) to match the closing bracket unconditionally.
   The other approach is to parse the attrlist as part of the macro rule.
   However, this would allow behavior that deviates from how AsciiDoc works today.
   This decision still needs to be resolved.

   Subs on the pass macro::
   The pass macro currently allows custom subs to be specified.
   Since we're doing away with substitutions, we need to figure out how to map this intent to the structured parsing.
   It may be that we're able to support common combinations of subs either by additional processing in the inline preprocessor and/or by inserting escapes into the input.
   More research is still needed here to resolve how this is going to work.

   == Backwards compatibility

   While this decision brings a completely different mental model for how the text is interpreted, it does not mean abandoning compatibility.
   Although the inline syntax is not currently defined using a formal grammar, that grammar has been inherent in the writer's perception of the inline structure.
   We aim to distill that grammar so that regular text is interpreted in a way that matches that perception and, consequently, allows a processor to match the current output as closely as possible.
   Where the behavior differs, it will likely differ in a way that more closely matches the writer's expectation, thus being a welcomed change.
   In cases where the current behavior cannot be matched, the text should be interpreted in such a way that no information is lost.

   Switching to a formal grammar does require doing away with the existing substitution order and interpretation of the inline markup in the convert phase.
   This will affect two aspects of the language.
   First, attribute references will be able to introduce text that contains marked spans (from the quotes substitution) which will now be interpreted.
   The quotes substitution consists of formatted text like strong, emphasis, and monospace, as well as smart quotes.
   Previously, it was necessary to force this substitution to happen where the attribute is defined using an inline pass macro.
   This will no longer be necessary.
   Second, the inline pass macro will not be able to arbitrarily change what parsing occurs.
   However, we'll likely be able to support the most common scenarios to ensure compatibility (supporting limited permutations).
   When that's not possible, we may rely on different parsing profiles.

   By making this transition, we believe we will be able to achieve reasonable compatibility with existing documents while addressing severe limitations and idiosyncrasies that have long existed in the inline syntax of the AsciiDoc language.


/spec/sdrs/sdr-006-positional-attribute-mapping.adoc
====================================================

.. code-block: asciidoc

   = SDR-6: Define Parsing Rules for Positional Attribute to Named Attribute Mapping

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/36[asciidoc-lang#36]

   == Context

   As described in SDR-2, a block can identify positional attributes that should be mapped to named attributes.
   These are called [.term]_implicit named attributes_.
   They become a named attribute because of their position in the attrlist.
   This SDR describes how this mapping is applied, its precedence, and when it occurs relative to block parsing.

   == Accepted decision

   The specification will state that the mapping of positional attributes to named attributes for a block is applied when the start of a block is positively matched but before parsing that block's content (i.e., nested blocks or inlines).
   It will also state that an implicit named attribute can only override an explicit named attribute (i.e., an attribute with an explicit name in the source) if its positional attribute occurs later in document order.

   == Decision summary

   The AsciiDoc source can contribute attributes to a block using zero or more block attribute lines that precede the block.
   For a block macro, the boxed attrlist effectively acts as the last block attribute line.
   Those block attribute lines consist of both positional and named attributes.

   Block attributes are handled by the grammar in two steps.
   First, the attrlist from each of the block attribute lines (including the boxed attrlist of a block macro) are parsed and aggregated.
   Second, the aggregated attributes are processed.

   A block can specify that one or more positional attributes should be mapped to named attributes.
   These positional attributes effectively act as implicit named attributes based on their 1-based position in the attrlist.
   For example, the positional attribute mapping for a block image macro is `alt, width, height`.

   This mapping is not applied at the time the block attribute line (and its attrlist) is parsed.
   Rather, it's applied when the block attributes are processed.
   Block attributes are processed when the block is first matched, but before its content is parsed.

   This section details how this mechanism works.

   === Parsing / Aggregation

   Block attributes are parsed and aggregated from block attribute lines in document order (i.e., top to bottom, left to right).
   Both positional and named attributes are extracted from the attrlist of a block attribute line.
   The index of a positional attribute is determined by its absolute 1-based position in the attrlist.
   These attributes are then added to an aggregate.
   This aggregate must be stored and made available to the grammar when it matches the next block.
   At this step, the value is typically stored as a deferred function so inline parsing only happens when needed and in the correct order.

   If the same positional attribute has already been collected from a previous attrlist, or the same named attribute has already been collected from the same attrlist or a previous attrlist, the old value is replaced (i.e., the attribute is overridden).
   Consider the following document:

   [,asciidoc]
   ----
   [alt=Alt Text]
   [alt=Alt Text Override]
   image::target.png[]
   ----

   The `alt` attribute for this block is "`Alt Text Override`".

   === Processing

   Once a block is positively matched, but before its content is parsed or otherwise processed, the block attributes are processed.
   Processing is the step of preparing the block attributes to influence block parsing and to be assigned to the resulting node.

   Processing occurs in two steps: positional attribute mapping and content attribute parsing.
   If a block defines a positional attribute to named attribute mapping, that mapping is applied first.
   That way, the content attribute parsing operates on the outcome of this mapping.

   The positional attribute to named attribute mapping will typically be stored as a constant in the grammar (or read from the extension configuration for custom elements).
   This mapping will be passed into the function that processes the block attributes.

   When the mapping from positional attribute to named attribute is applied, an implicit named attribute can only override an explicit named attribute if it occurs later in document order.
   Assuming positional attributes are always first in the attrlist, this also means the named attribute will win out for that line.
   Consider the following document:

   [,asciidoc]
   ----
   [alt=Alt Text]
   image::target.png[Alt Text Override]
   ----

   Since the first positional attribute is specified after the `alt` named attribute, and a block macro maps the first positional attribute to the `alt` attribute, the positional attribute wins out.
   The value of the `alt` attribute is "`Alt Text Override`".

   Once the positional attribute mapping has been applied, the parsing of content attributes is performed.
   At this stage, all deferred value functions should be resolved.
   The processed attributes must be available to the logic in the grammar that parses the block's content (nested blocks or inlines).

   == Backwards compatibility

   The described behavior is compatible with the behavior of pre-spec AsciiDoc, with one exception.
   Previously, an implicit named attribute (i.e., a positional attribute mapped to a named attribute) was allowed to override an explicit named attribute for a block regardless of document order in some cases.
   Document order is now enforced.

   Since the pre-spec behavior is inconsistent, the specification has established the rule that whether an implicit named attribute can override an explicit named attribute is determined by document order.
   The reasoning is that this rule is simple to understand and reasonable to implement.
   It's simple to understand because it follows the same rule the explicit positional and named attributes overrides depend on document order.
   It's reasonable to implement because the implementation only has to keep track of the attribute keys (1-based position or name) based on last occurrence in the document.
   When applying the positional attribute mapping, an implicit named attribute should only override an explicit named attribute if the positional attribute is defined later in key order, and thus document order.
   In this case, the value of the positional attribute should replace the value of the explicit named attribute.

   == Rejected alternative

   The accepted decision states that an implicit named attribute can override an explicit named attribute when defined later in document order.
   This decision was made to simplify the syntax rules.
   The decision is reasonable since it only has a marginal impact on parsing complexity.

   The rejected alternative states that an implicit named attribute cannot override an explicit named attribute, regardless of document order.
   Rather, only a named attribute can override a named attribute, which occurs during attrlist parsing.
   In other words, the named attribute always has higher precedence.

   This alternative is slightly easier to implement since the parser does not have to keep track of the order in which an attribute key (1-based index or name) occurs.
   When applying the positional attribute mapping, the parser only has to check whether the name is already set and skip the mapping if it is.
   However, the implementation is already expected to maintain the key order to ensure the inline parsing occurs in the correct order.
   Therefore, it's reasonable to rely on this key ordering when defining the precedence rules for the positional attribute mapping.


/spec/sdrs/sdr-007-list-continuation-as-interrupting-line.adoc
==============================================================

.. code-block: asciidoc

   = SDR-7: Designate List Continuation as Universal Interrupting Line

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/42[asciidoc-lang#42]

   == Context

   A list continuation, by definition, is an interrupting line within a list to indicate that the ensuing block should be attached to the current list item.
   It's interrupting nature is used as a way to imply correlation.
   It reads as "`interrupt this block and attach the next block to the current list item to continue the sequence of attached blocks.`"

   However, there's a question as to whether the list continuation should act as an interrupting line outside of a list as well, even though it doesn't otherwise have any meaning there.
   This designation would make the list continuation universal, and thus context free.

   == Accepted decision

   The specification will state that a list continuation is a universal interrupting line, regardless of whether it occurs inside a list.
   This decision was made both to simplify the rules for the author and to make writing an implementation easier.

   == Decision summary

   From a syntax perspective, there's no reason for a list continuation to act as an interrupting line outside of a list since it has no meaning in that scenario.
   Consider the following case:

   [,asciidoc]
   ----
   one
   +
   two
   ----

   The goal is to make the grammar rule for a paragraph, the most fundamental element in AsciiDoc, context free.
   The decision to always treat the list continuation as an interrupting line helps to accomplish that goal.

   If a list continuation only acts as an interrupting line within a list, then the grammar rule for a paragraph and attribute entry could not be context free.
   In other words, the rule has to depend on where it's being evaluated, which is to say it must be contextual.

   To account for this contextual behavior, the grammar rule either has to use a semantic predicate so it behaves differently inside of a list, or a dedicated hierarchy of grammar rules has to be used for blocks within a list to encode this behavior directly into the rules.
   Either way, this makes it much harder for an implementation.

   If the list continuation is classified as a universal interrupting line, it means the implementation doesn't need to track whether a block with implicit boundaries is inside a list or otherwise use a dedicated set of rules to be evaluated in this scenario.

   With this universal rule in place, the previous example would produce two paragraphs, as represented by this HTML:

   ----
   <p>one</p>
   <p>+
   two</p>
   ----

   The list continuation interrupts the first paragraph, causing it to end.
   However, since the list continuation is not consumed and otherwise interpreted outside of a list, it becomes the first line of the second paragraph.

   Making the list continuation universal also means it may be possible for the priority line processor (i.e., the block preprocessor) to not have to keep track of when a line is inside a list or not, thus making that function more lightweight as well.
   Thus, this designation is a small trade-off to lower the barrier for creating an implementation (which is already hard enough as it is).

   == Backwards compatibility

   If only by chance, both Asciidoctor and its predecessor already treat a list continuation as a universal interrupting line.
   By making this decision, we're solidifying the implementation-defined behavior (and rationalizing why the list continuation is interrupting even when it doesn't serve its main purpose).
   There's no impact on existing documents.

   == Consequences

   Encountering a list continuation outside of a list is very rare.
   Given that there are implementation benefits and a guarantee of backward compatibility by making it universal, there are more benefits than consequences in doing so.


/spec/sdrs/sdr-008-list-item-as-interrupting-line-for-principal-text.adoc
=========================================================================

.. code-block: asciidoc

   = SDR-8: Designate List Item as Interrupting Line only for Principal Text

   [horizontal]
   Related issues::
   * https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/42[asciidoc-lang#42]

   == Context

   The principal text of a list item can be interrupted by a sibling or nested list item, which is well-established behavior in AsciiDoc.
   This rule applies to list items in lists (unordered, ordered, etc) as well as description lists.
   We need to decide whether a list item acts as an interrupting line for a block attached to a list item since this was never clearly stated in pre-spec AsciiDoc.
   This pertains both to an attached paragraph and an attached attribute entry with a continuing value.

   == Accepted decision

   The specification will state that a sibling or nested list item acts as an interrupting line for the principal text, but does not act as an interrupting line for an attached block, such as a paragraph in a list.

   This decision was made both to simplify the rules for the author and to make writing an implementation easier.

   == Decision summary

   A sibling or nested list item can interrupt the principal text of a list item.
   It would be incredibly difficult to change this rule now as it's both commonplace in lightweight markup languages and most AsciiDoc documents rely on it.
   (If we tried to change it, there would be riots).

   The following AsciiDoc will produce an unordered list with three items:

   [,asciidoc]
   ----
   * first
   * another
   that wraps
   * last
   ----

   Aside from the fact that allowing this interruption has precedent and seems intuitive, there's a strong technical reason for why it can be allowed.
   The list item principal is parsed along with the list item marker.
   In other words, the principal text of a list item is part of the same form.
   Thus, the grammar rule implicitly knows it's in a list and therefore can anticipate an approaching list item.
   This syntax rule is naturally context free.

   On the other hand, a paragraph attached to a list item is handled by the paragraph rule, which is used both inside and outside of a list.
   As such, that rule doesn't implicitly know it's in a list item.

   Consider the following AsciiDoc:

   [,asciidoc]
   ----
   * list item
   +
   supporting text
   * not the next list item
   ----

   In order to allow the list item to interrupt the attached paragraph, the paragraph rule would have to consider whether it's being evaluated inside of a list.
   We would prefer the rule to be context free.
   (The same motivation as discussed in SDR-7).
   And since the list item cannot interrupt a paragraph outside of a list, it should not be able to interrupt one inside of a list either.

   In order for the parser to find a list item that follows an attached paragraph, that paragraph has to have already been interrupted.
   One way to do that is to insert an empty line above the sibling list item.

   [,asciidoc]
   ----
   * list item
   +
   supporting text

   * next list item
   ----

   For a nested list item, a block attribute line could be used as an interrupting line instead:

   [,asciidoc]
   ----
   * list item
   +
   supporting text
   [upperalpha]
   ** nested list item
   ----

   If there's no interrupting line between the attached paragraph and the next list item, then what appears to be a list item becomes a wrapped line of the attached paragraph.

   == Backwards compatibility

   Asciidoctor and its predecessor allow a list item to interrupt the principal text of the preceding list item.
   Thus, we're merely solidifying the implementation-defined behavior.
   There's no impact on existing documents.

   Where we begin to deviate is whether a list item interrupts a paragraph attached to a list item.
   It just so happens that Asciidoctor's predecessor does not allow this.
   Thus, by making this decision, we're returning to the original implementation-defined behavior.
   There are some documents out there that were written to these rules.
   Additionally, all the examples in the Asciidoctor documentation happen to be written this way.
   Its also the style that has been most advocated by the Asciidoctor project.

   Technically, Asciidoctor does allow a sibling list item (but not a nested list item) to interrupt an attached paragraph.
   However, a strong case can be made that this behavior is incorrect.
   The reason has to do with how list parsing is implemented in Asciidoctor.
   Asciidoctor finds all the lines up until the next sibling list item or end of list, then parses them.
   In doing so, it introduces an artificial boundary for the current list item that does not properly account for all the nested grammar rules.
   We can conclude from this that allowing a sibling list item to interrupt an attached paragraph is actually a side effect of the implementation and not actually the intended behavior.

   == Rejected alternative

   One alternative that was considered is to make a list item a universal interrupting line.
   This idea is certainly alluring, most notably because Markdown supports it (though reStructuredText does not).
   The problem is that it would be a strong deviation from a two decade-old AsciiDoc rule, would require re-education, and could break countless documents.

   Consider one case where this would cause the parsing to go awry.

   [,asciidoc]
   ----
   The default limit for the number of concurrent operations is
   1. This limit can be changed using the configuration file.
   ----

   If a list item were an interrupting line, the wrapped line would become a list.
   This is definitely not what the author expects to happen.
   The author would now have to be very conscious of where wrapping occurs and consider whether the wrapped line is going to be treated as a list.
   It gets even more complex (and hard to spot) when considering other list types such as a description list.

   Another key reason against this alternative is that it makes the grammar rule for a paragraph much, much more complex and processor intensive.
   Paragraphs are the most common element in an AsciiDoc document by far.
   Having to check the start of every line of a paragraph for a list item means that the grammar rule for lists are evaluated for nearly every line in the document.

   Yet another key reason against this alternative is that this opens up a Pandora's box for what can interrupt a paragraph.
   Why couldn't a section title interrupt a paragraph then?
   Would it be all lists or just some?
   What about a block macro?
   All these interrupting lines just make it tedious for the author to write a simple paragraph.

   The final reason against this alternative is that we don't want to encourage writers to collapse empty lines between blocks.
   Next they will want to write separate paragraphs with no empty lines between them.
   When you make blocks in AsciiDoc, they should be separated by an empty line (or a list continuation when inside a list).
   We want that style to be prevelant as it's a key part of what makes AsciiDoc look like AsciiDoc.


/asg/README.adoc
================

.. code-block: asciidoc

   = AsciiDoc ASG Schema

   This subproject of the AsciiDoc Language project hosts the JSON schema for AsciiDoc's Abstract Semantic Graph (ASG).
   The AsciiDoc ASG represents the semantic structure and content of a parsed AsciiDoc document.
   This ASG is used by the TCK to validate the behavior of a compatible AsciiDoc implementation (i.e., parser).

   == About the schema

   The schema is defined using the JSON schema language.
   The schema is stored in the file _schema.json_ at the root of this subproject.
   The schema identifies the valid structure of the ASG, required and optional properties, and expected types.

   == Run tests

   The schema is tested by the test suite in this subproject using the https://github.com/ajv-validator/ajv[Ajv JSON schema validator].
   To run the tests, you first need to install the required dependencies:

    $ npm ci

   To run the self test suite, invoke the npm `test` task:

    $ npm t

   == Validate output files

   The TCK asserts that the ASG that an implementation produces the expected ASG for a given AsciiDoc input document.
   You can validate those expected output files using the npm `validate` task:

    $ npm run validate --dir=/path/to/tests

   The task will automatically select files that end with _-output.json_ and validate them against the ASG schema.

   You can also validate a single file using the `validate-asg` bin script:

    $ npx validate-asg test/fixtures/sample-1.json

   The source of the validate-asg bin script can be found at _bin/validate-asg.js_.


/asg/.gitignore
===============

.. code-block: asciidoc

   /node_modules/
   /.nvmrc
   /package-lock.json


/asg/bin/validate-asg.js
========================

.. code-block: js

   #!/usr/bin/env node

   import Ajv from 'ajv/dist/2020.js'
   import defaultsKeyword from '../lib/ajv-keyword-defaults.js'
   import fs from 'node:fs'
   import process from 'node:process'
   import { parseArgs } from 'node:util'

   const options = {
     out: { type: 'boolean', desc: 'output the validated and compiled data' },
     'validate-schema': { type: 'boolean', desc: 'validate the schema' },
   }
   const { positionals, values } = parseArgs({ args: process.argv.slice(2), options, allowPositionals: true, strict: true })
   const ajv = new Ajv({ allErrors: false, discriminator: true, keywords: [defaultsKeyword()] })
   const schema = JSON.parse(fs.readFileSync('schema.json'))
   if (values['validate-schema']) ajv.validateSchema(schema)
   const validate = ajv.compile(schema)
   const inputFile = positionals[0] || 'sample-1.json'
   let data = JSON.parse(fs.readFileSync(inputFile))
   if (Array.isArray(data)) {
     const inlines = data
     data = {
       name: 'document',
       type: 'block',
       blocks: [{ name: 'paragraph', type: 'block', inlines }]
     }
     if (inlines.length) {
       const location = [inlines[0].location[0], inlines[inlines.length - 1].location[1]]
       data.location = location
       data.blocks[0].location = location
     }
   }
   if (!validate(data)) {
     console.log(inputFile)
     console.dir(validate.errors[0], { depth: Infinity })
   }
   if (values.out) console.dir(data, { depth: Infinity })


/asg/lib/ajv-keyword-defaults.js
================================

.. code-block: js

   export default function getDef () {
     return {
       keyword: 'defaults',
       type: 'object',
       schemaType: 'object',
       modifying: true,
       valid: true,
       compile: (defaults) => (data) => {
         for (const [name, val] of Object.entries(defaults)) data[name] ??= val
       },
     }
   }


/asg/package.json
=================

.. code-block: json

   {
     "name": "asciidoc-asg",
     "description": "Maintains and tests the JSON schema for the AsciiDoc ASG",
     "type": "module",
     "bin": {
       "validate-asg": "bin/validate-asg.js"
     },
     "exports": {
       "./package.json": "./package.json",
       "./schema.js": "./schema.js"
     },
     "scripts": {
       "test": "node --test test/*-test.js",
       "validate": "find $npm_config_dir -name '*-output.json' -exec node bin/validate-asg.js {} \\;"
     },
     "dependencies": {
       "ajv": "latest"
     },
     "engines": {
       "node": ">=18.0.0"
     }
   }


/asg/schema.js
==============

.. code-block: js

   import fs from 'node:fs'

   export default JSON.parse(fs.readFileSync('./schema.json'))


/asg/schema.json
================

.. code-block: json

   {
     "$schema": "https://json-schema.org/draft/2020-12/schema",
     "$id": "https://schemas.asciidoc.org/asg/1-0-0/draft-01",
     "title": "AsciiDoc Abstract Semantic Graph (ASG)",
     "description": "A structured representation of the semantics in an AsciiDoc document, primarily used for validating the compliance of an AsciiDoc processor.",
     "type": "object",
     "required": ["name", "type"],
     "defaults": { "blocks": [] },
     "additionalProperties": false,
     "properties": {
       "name": {
         "type": "string",
         "const": "document"
       },
       "type": {
         "type": "string",
         "const": "block"
       },
       "attributes": {
         "type": "object",
         "additionalProperties": false,
         "patternProperties": {
           "^[a-zA-Z0-9_][-a-zA-Z0-9_]*$": {
             "oneOf": [
               { "type": "string" },
               { "type": "null" }
             ]
           }
         }
       },
       "header": {
         "type": "object",
         "additionalProperties": false,
         "properties": {
           "title": { "$ref": "#/$defs/inlines" },
           "authors": {
             "type": "array",
             "items": { "$ref": "#/$defs/author" },
             "minItems": 1
           },
           "location": { "$ref": "#/$defs/location" }
         }
       },
       "blocks": { "$ref": "#/$defs/sectionBody" },
       "location": { "$ref": "#/$defs/location" }
     },
     "if": {
       "required": ["header"]
     },
     "then": {
       "required": ["attributes"]
     },
     "$defs": {
       "abstractBlock": {
         "type": "object",
         "required": ["type"],
         "properties": {
           "type": {
             "type": "string",
             "const": "block"
           },
           "id": {
             "type": "string"
           },
           "title": { "$ref": "#/$defs/inlines" },
           "reftext": { "$ref": "#/$defs/inlines" },
           "metadata": { "$ref": "#/$defs/blockMetadata" },
           "location": { "$ref": "#/$defs/location" }
         }
       },
       "abstractHeading": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
         "required": ["title", "level"],
         "properties": {
           "level": {
             "type": "integer",
             "minimum": 0
           }
         }
       },
       "abstractListItem": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
         "required": ["marker"],
         "defaults": { "blocks": [] },
         "properties": {
           "marker": {
             "type": "string"
           },
           "principal": { "$ref": "#/$defs/inlines" },
           "blocks": { "$ref": "#/$defs/nonSectionBlockBody" }
         }
       },
       "sectionBody": {
         "type": "array",
         "items": {
           "type": "object",
           "oneOf": [
             { "$ref": "#/$defs/block" },
             { "$ref": "#/$defs/section" }
           ]
         }
       },
       "nonSectionBlockBody": {
         "type": "array",
         "items": { "$ref": "#/$defs/block" }
       },
       "section": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractHeading" }],
         "unevaluatedProperties": false,
         "required": ["name"],
         "defaults": { "blocks": [] },
         "properties": {
           "name": {
             "type": "string",
             "const": "section"
           },
           "blocks": { "$ref": "#/$defs/sectionBody" }
         }
       },
       "block": {
         "type": "object",
         "discriminator": { "propertyName": "name" },
         "oneOf": [
           { "$ref": "#/$defs/list" },
           { "$ref": "#/$defs/dlist" },
           { "$ref": "#/$defs/discreteHeading" },
           { "$ref": "#/$defs/break" },
           { "$ref": "#/$defs/blockMacro" },
           { "$ref": "#/$defs/leafBlock" },
           { "$ref": "#/$defs/parentBlock" }
         ]
       },
       "list": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
         "unevaluatedProperties": false,
         "required": ["name", "marker", "variant", "items"],
         "properties": {
           "name": {
             "type": "string",
             "const": "list"
           },
           "marker": {
             "type": "string"
           },
           "variant": {
             "type": "string",
             "enum": ["callout", "ordered", "unordered"]
           },
           "items": {
             "type": "array",
             "items": { "$ref": "#/$defs/listItem" },
             "minItems": 1
           }
         }
       },
       "dlist": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
         "unevaluatedProperties": false,
         "required": ["name", "marker", "items"],
         "properties": {
           "name": {
             "type": "string",
             "const": "dlist"
           },
           "marker": {
             "type": "string"
           },
           "items": {
             "type": "array",
             "items": { "$ref": "#/$defs/dlistItem" },
             "minItems": 1
           }
         }
       },
       "listItem": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractListItem" }],
         "unevaluatedProperties": false,
         "required": ["name", "principal"],
         "properties": {
           "name": {
             "type": "string",
             "const": "listItem"
           }
         }
       },
       "dlistItem": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractListItem" }],
         "unevaluatedProperties": false,
         "required": ["name", "terms"],
         "properties": {
           "name": {
             "type": "string",
             "const": "dlistItem"
           },
           "terms": {
             "type": "array",
             "items": { "$ref": "#/$defs/inlines" },
             "minItems": 1
           }
         }
       },
       "discreteHeading": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractHeading" }],
         "unevaluatedProperties": false,
         "required": ["name"],
         "properties": {
           "name": {
             "type": "string",
             "const": "heading"
           }
         }
       },
       "break": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
         "unevaluatedProperties": false,
         "required": ["name", "variant"],
         "properties": {
           "name": {
             "type": "string",
             "const": "break"
           },
           "variant": {
             "type": "string",
             "enum": ["page", "thematic"]
           }
         }
       },
       "blockMacro": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractBlock" }],
         "unevaluatedProperties": false,
         "required": ["name", "form"],
         "properties": {
           "name": {
             "type": "string",
             "enum": ["audio", "video", "image", "toc"]
           },
           "form": {
             "type": "string",
             "const": "macro"
           },
           "target": {
             "type": "string"
           }
         }
       },
       "leafBlock": {
         "type": "object",
         "allOf": [
           { "$ref": "#/$defs/abstractBlock" },
           {
             "if": {
               "required": ["form"],
               "properties": { "form": { "const": "delimited" } }
             },
             "then": {
               "required": ["delimiter"],
               "properties": {
                 "delimiter": {
                   "type": "string"
                 }
               }
             }
           }
         ],
         "unevaluatedProperties": false,
         "required": ["name"],
         "defaults": { "inlines": [] },
         "properties": {
           "name": {
             "type": "string",
             "enum": ["listing", "literal", "paragraph", "pass", "stem", "verse"]
           },
           "form": {
             "type": "string",
             "enum": ["delimited", "indented", "paragraph"]
           },
           "inlines": { "$ref": "#/$defs/inlines" }
         }
       },
       "parentBlock": {
         "type": "object",
         "allOf": [
           { "$ref": "#/$defs/abstractBlock" },
           {
             "if": {
               "required": ["name"],
               "properties": { "name": { "const": "admonition" } }
             },
             "then": {
               "required": ["variant"],
               "properties": {
                 "variant": {
                   "type": "string",
                   "enum": ["caution", "important", "note", "tip", "warning"]
                 }
               }
             }
           }
         ],
         "unevaluatedProperties": false,
         "required": ["name", "form", "delimiter"],
         "defaults": { "blocks": [] },
         "properties": {
           "name": {
             "type": "string",
             "enum": ["admonition", "example", "sidebar", "open", "quote"]
           },
           "form": {
             "type": "string",
             "const": "delimited"
           },
           "delimiter": {
             "type": "string"
           },
           "blocks": { "$ref": "#/$defs/nonSectionBlockBody" }
         }
       },
       "blockMetadata": {
         "type": "object",
         "defaults": { "attributes": {}, "options": [], "roles": [] },
         "additionalProperties": false,
         "properties": {
           "attributes": {
             "type": "object",
             "additionalProperties": false,
             "patternProperties": {
               "^(?:[a-zA-Z_][a-zA-Z0-9_-]*|\\$[1-9][0-9]*)$": {
                 "type": "string"
               }
             }
           },
           "options": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "roles": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "location": { "$ref": "#/$defs/location" }
         }
       },
       "inlines": {
         "type": "array",
         "items": { "$ref": "#/$defs/inline" }
       },
       "inline": {
         "type": "object",
         "discriminator": { "propertyName": "name" },
         "oneOf": [
           { "$ref": "#/$defs/inlineSpan" },
           { "$ref": "#/$defs/inlineRef" },
           { "$ref": "#/$defs/inlineLiteral" }
         ]
       },
       "abstractParentInline": {
         "type": "object",
         "required": ["type", "inlines"],
         "properties": {
           "type": {
             "type": "string",
             "const": "inline"
           },
           "inlines": { "$ref": "#/$defs/inlines" },
           "location": { "$ref": "#/$defs/location" }
         }
       },
       "inlineSpan": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractParentInline" }],
         "unevaluatedProperties": false,
         "required": ["name", "variant", "form"],
         "properties": {
           "name": {
             "type": "string",
             "const": "span"
           },
           "variant": {
             "type": "string",
             "enum": ["strong", "emphasis", "code", "mark"]
           },
           "form": {
             "type": "string",
             "enum": ["constrained", "unconstrained"]
           }
         }
       },
       "inlineRef": {
         "type": "object",
         "allOf": [{ "$ref": "#/$defs/abstractParentInline" }],
         "unevaluatedProperties": false,
         "required": ["name", "variant", "target"],
         "properties": {
           "name": {
             "type": "string",
             "const": "ref"
           },
           "variant": {
             "type": "string",
             "enum": ["link", "xref"]
           },
           "target": {
             "type": "string"
           }
         }
       },
       "inlineLiteral": {
         "type": "object",
         "required": ["name", "type", "value"],
         "additionalProperties": false,
         "properties": {
           "name": {
             "type": "string",
             "enum": ["text", "charref", "raw"]
           },
           "type": {
             "type": "string",
             "const": "string"
           },
           "value": {
             "type": "string"
           },
           "location": { "$ref": "#/$defs/location" }
         }
       },
       "author": {
         "type": "object",
         "additionalProperties": false,
         "properties": {
           "fullname": {
             "type": "string"
           },
           "initials": {
             "type": "string"
           },
           "firstname": {
             "type": "string"
           },
           "middlename": {
             "type": "string"
           },
           "lastname": {
             "type": "string"
           },
           "address": {
             "type": "string"
           }
         }
       },
       "location": {
         "type": "array",
         "prefixItems": [
           { "$ref": "#/$defs/locationBoundary" },
           { "$ref": "#/$defs/locationBoundary" }
         ],
         "minItems": 2,
         "maxItems": 2
       },
       "locationBoundary": {
         "type": "object",
         "required": ["line", "col"],
         "additionalProperties": false,
         "properties": {
           "line": {
             "type": "integer",
             "minimum": 1
           },
           "col": {
             "type": "integer",
             "minimum": 0
           },
           "file": {
             "type": "array",
             "items": {
               "type": "string"
             },
             "minItems": 1
           }
         }
       }
     }
   }


/asg/test/fixtures/sample-1.json
================================

.. code-block: json

   {
     "name": "document",
     "type": "block",
     "blocks": [
       {
         "name": "list",
         "type": "block",
         "variant": "unordered",
         "marker": "*",
         "items": [
           {
             "name": "listItem",
             "type": "block",
             "marker": "*",
             "principal": [
               {
                 "name": "text",
                 "type": "string",
                 "value": "water",
                 "location": [ { "line": 1, "col": 3 }, { "line": 1, "col": 7 } ]
               }
             ],
             "location": [ { "line": 1, "col": 1 }, { "line": 1, "col": 7 } ]
           }
         ],
         "location": [ { "line": 1, "col": 1 }, { "line": 1, "col": 7 } ]
       }
     ],
     "location": [ { "line": 1, "col": 1 }, { "line": 1, "col": 7 } ]
   }


/asg/test/fixtures/sample-2.json
================================

.. code-block: json

   {
     "name": "document",
     "type": "block",
     "attributes": { "set-attribute": "foo", "unset-attribute": false },
     "header": {
       "title": [
         {
           "name": "text",
           "type": "string",
           "value": "Document Title",
           "location": [{ "line": 1, "col": 3 }, { "line": 1, "col": 16 }]
         }
       ],
       "location": [{ "line": 1, "col": 1 }, { "line": 1, "col": 16 }]
     },
     "blocks": [
       {
         "name": "paragraph",
         "type": "block",
         "inlines": [
           {
             "name": "text",
             "type": "string",
             "value": "body",
             "location": [{ "line": 3, "col": 1 }, { "line": 3, "col": 4 }]
           }
         ],
         "location": [{ "line": 3, "col": 1 }, { "line": 3, "col": 4 }]
       }
     ],
     "location": [{ "line": 1, "col": 1 }, { "line": 3, "col": 4 }]
   }


/asg/test/fixtures/sample-3.json
================================

.. code-block: json

   {
     "name": "document",
     "type": "block",
     "blocks": [
       {
         "name": "heading",
         "type": "block",
         "title": [
           {
             "name": "text",
             "type": "string",
             "value": "Discrete Heading",
             "location": [{ "line": 2, "col": 4 }, { "line": 2, "col": 19 }]
           }
         ],
         "level": 1,
         "unknown": "value",
         "location": [{ "line": 2, "col": 1 }, { "line": 2, "col": 19 }],
         "metadata": {
           "attributes": { "$1": "discrete", "style": "discrete" },
           "location": [{ "line": 1, "col": 1 }, { "line": 1, "col": 10 }]
         }
       }
     ],
     "location": [{ "line": 1, "col": 1 }, { "line": 2, "col": 19 }]
   }


/asg/test/schema-test.js
========================

.. code-block: js

   import Ajv from 'ajv/dist/2020.js'
   import defaultsKeyword from '../lib/ajv-keyword-defaults.js'
   import assert from 'node:assert/strict'
   import { fileURLToPath } from 'node:url'
   import fs from 'node:fs'
   import ospath from 'node:path'
   import { before, describe, it } from 'node:test'
   import schema from 'asciidoc-asg/schema.js'

   describe('asg schema', () => {
     let ajv
     let fixturesDir = ospath.join(ospath.dirname(fileURLToPath(import.meta.url)), 'fixtures')

     before(() => {
       ajv = new Ajv({ allErrors: false, discriminator: true, keywords: [defaultsKeyword()] })
     })

     it('should be valid', () => {
       assert.ok(ajv.validateSchema(schema))
     })

     it('should compile', () => {
       assert.doesNotThrow(() => ajv.compile(schema))
     })

     it('should validate sample data with list', () => {
       const fixturePath = ospath.join(fixturesDir, 'sample-1.json')
       const data = JSON.parse(fs.readFileSync(fixturePath))
       const validate = ajv.getSchema(schema.$id) || ajv.compile(schema)
       assert.ok(validate(data))
     })

     it('should validate sample data with header and paragraph', () => {
       const fixturePath = ospath.join(fixturesDir, 'sample-2.json')
       const data = JSON.parse(fs.readFileSync(fixturePath))
       const validate = ajv.getSchema(schema.$id) || ajv.compile(schema)
       assert.ok(validate(data))
     })

     it('should validate sample data with unknown property', () => {
       const fixturePath = ospath.join(fixturesDir, 'sample-3.json')
       const data = JSON.parse(fs.readFileSync(fixturePath))
       const validate = ajv.getSchema(schema.$id) || ajv.compile(schema)
       assert.ok(!validate(data))
     })
   })


/CONTRIBUTING.adoc
==================

.. code-block: asciidoc

   = Contributing to the AsciiDoc Language Project
   :url-dev-list: https://accounts.eclipse.org/mailing-list/asciidoc-lang-dev

   Welcome to the AsciiDoc Language project!
   We're excited that you're interested in helping to make AsciiDoc the best lightweight markup language it can be.
   We welcome contributions of all kinds, not just code.
   This includes user scenarios and requirements, testing, documentation, infrastructure automation, and more.
   Read on to learn about how we work and how to get involved.

   == Communication

   We use public mailing lists and issue trackers to communicate.

   {url-dev-list}[Development mailing list]:: This list is where you can ask questions, raise concerns, hold general discussions, and float ideas about the development of the AsciiDoc language, its specification, grammar, and TCK.
   Announcements about the project's status and other community activities are also posted to this mailing list.

   https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang/-/issues[Project issue tracker]:: The project issue tracker lives alongside the repository on Eclipse's GitLab instance.
   Use the issue tracker to file bug reports, specification additions and clarification requests, and user documentation issues.
   The issue tracker is also where the project team manages milestone and release development.

   https://accounts.eclipse.org/mailing-list/asciidoc-wg[AsciiDoc WG mailing list]:: This specification project is affiliated with the https://projects.eclipse.org/working-group/asciidoc[AsciiDoc Working Group].
   This list is where updates and discussions about the vision, scope, governance, and advocacy of the AsciiDoc projects at Eclipse and the ecosystem as a whole are posted.

   == Code of conduct

   The AsciiDoc language project and its project spaces are governed by the https://www.eclipse.org/org/documents/Community_Code_of_Conduct.php[Eclipse Community Code of Conduct].
   By participating, you're expected to uphold this code.
   See the project's governance process for more information on our xref:process/governance.adoc#values[values and community conduct].
   Let's work together to make this a welcoming, professional, inclusive, and safe environment for everyone.

   [#legal]
   == Legal considerations

   Before submitting your first merge request (MR), complete the following steps:

   . Sign up for an https://accounts.eclipse.org/[Eclipse Foundation account].
   If you've posted to the development or WG mailing lists, you've already set up an account.
   .. Be sure to register with the same email address that you intend to use when you commit to the project's repository.
   .. Your Eclipse Foundation account login also logs you into the https://gitlab.eclipse.org[Eclipse GitLab instance].

   . Electronically sign the https://www.eclipse.org/legal/ECA.php[Eclipse Contributor Agreement (ECA)].
   .. To see if you've already signed the ECA, https://accounts.eclipse.org/user/login/[log in to your Eclipse account] and go to your profile page.
   Look for the *Status* sidebar in the top-right corner of your profile page.
   If there's a green check mark next to *Eclipse Contributor Agreement*, you're all set.

   For more information about Eclipse Foundation Accounts and the ECA, see https://www.eclipse.org/projects/handbook/#contributing[Contributing to an Eclipse Project] in the Eclipse Handbook.

   == Contributing to the specification and TCK

   This project maintains the AsciiDoc Language Specification, its Technology Compatibility Kit (TCK), and their related materials.
   The specification and TCK are for developers creating implementations, extensions, and other tools that process AsciiDoc.
   This project follows the https://www.eclipse.org/projects/efsp/[Eclipse Foundation Specification Process] (EFSP) and is subject to the https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf[Eclipse IP Policy].

   === Specification scope and release plan

   Before contributing to this project, make sure you're familiar with the project's xref:process/scope.adoc[approved scope] and xref:process/release-plan.adoc[current release plan].
   Issues and MRs must fit the project's scope and help meet the current release plan's goals and milestones.
   Reach out to the project team on the {url-dev-list}[development mailing list] if you aren't sure an idea is within the project's scope or aligned with the release plan.

   === Specification issues

   Actionable issue reports are specific and comprehensive.
   We encourage you to post to the {url-dev-list}[development mailing list] first if you need to gather input and feedback to help you prepare to file an issue.
   Keep in mind, though, that the mailing list is not where final decisions are made.
   Rather, that's the role of the issue tracker.
   Once an issue has been filed, discussion about that topic should stay in the https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang/-/issues[issue tracker].

   Listed below are a few of the broad issue categories and the information they should provide.

   Bug reports (kind|bug):: Bug reports should describe the syntax, feature, or behavior that seems incorrect, the result you got, and the result you expected.
   The more details you can provide, the faster the team can attempt to reproduce the bug.

   Specification updates (kind|feature):: Specification updates, such as new feature requests, improvements, clarifications, and removals, that may have significant impacts on compatible implementations, extensions, users, or other areas of the AsciiDoc ecosystem should describe the problematic or desired scenario, the possible pathways for fixing or achieving the scenario, and the positive and negative impacts the change will have on the compatible implementations, users, and AsciiDoc ecosystem.
   Such issues will require assessment by the group that maintains the related specification area prior to accepting the proposed solution.

   Specification formalization (kind|formalization):: A specification formalization issue identifies an existing feature that needs to be defined and described in the specification document.
   Unlike significant feature additions or updates that have ambiguous or problematic parameters or behavior, these features are relatively uncontested and clearly understood.

   Terminology and naming (area/naming-and-terminology):: Issues that involve defining, clarifying, or changing specification terms, term definitions, names, and naming patterns should provide the current state of the term or name, the proposed change, and the reason for the change.
   Terminology and naming must consider a number of factors, such as user and developer mental models, inclusive language, use case commonality, reserved word conflicts, and usability (e.g., keyboard layout, localization, accessibility).
   Such issues may require assessment by the group that maintains the related specification area.

   ==== Issue workflow

   The https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang/-/project_members[project team] will add https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang/-/labels[labels] to an issue during the triage process.
   When an issue is worked on depends on the bug severity, current release plan and milestones, and the availability of project team members that maintain the relevant specification area.
   An issue that doesn't have the label *triage|accepted* hasn't been accepted by the project.
   Issues are evaluated and accepted by the project according to the project's xref:process/governance.adoc#decision-process[decision process].

   === Specification merge request guidelines

   * A merge request (MR) should address exactly one issue that's filed in the issue tracker.
   ** Exceptions are MRs for typos, small grammar and sentence structure changes, and formatting fixes.
   * [[issue-open]]Issues that are labeled *triage|accepted* are ready for a MR.
   * Assign yourself to the issue the MR will resolve.
   Don't assign yourself to an issue that's currently assigned to someone else unless you've discussed it with them or the project team.
   * MRs that make major changes to core specification concepts, features, or behavior and/or have significant consequences for the AsciiDoc ecosystem require review and approval by at least two team committers.
   * All other MRs must be reviewed and approved by at least one team committer.
   When an MR gets reviewed depends on the availability of a team member with the applicable expertise and the current release cycle stage.

   An MR won't be approved until the changes are complete, correct, and well-formed (meaning it passes all automated and manual tests, linting, team reviews, etc.).
   We cannot expect someone to come behind and fix the shortcomings knowingly introduced by an MR later, because later often means never.
   If there's a contested part of the MR that's blocking the merge, that part can be extracted into a new MR so the remainder can be moved through the review/merge process.

   We encourage you to open a MR early when you're implementing a complex feature or making a change that impacts several areas of the specification.
   Prefix the MR title with WIP: (Work in Progress) or Draft: manually or using the MR interface.
   This allows the team to start providing feedback before you finalize the MR, and helps create a better end product.

   For step-by-step MR instructions, see the <<repository-setup,local repository setup>> and <<mr-workflow,MR workflow>> sections.

   [#repository-setup]
   == Namespace and local repository setup

   You must complete the following steps prior to preparing your first MR.
   If you're new to git, see https://gitlab.eclipse.org/help/topics/git/index.md[GitLab's git help topics] for a list of learning resources.

   . Make sure you've set up your <<legal,Eclipse Account and signed the ECA>>.
   . Go to the https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang[AsciiDoc language repository] and fork it to your personal namespace.
   The project doesn't accept MRs that don't come from a dedicated branch in a fork.
   . Clone the repository onto your machine and configure your remote path.
   . _Recommended but optional._ If you plan to contribute often to the project, we recommend associating your GPG key with your local repository and GitLab account so that you can sign your commits with it.
   .. See https://gitlab.eclipse.org/help/user/project/repository/gpg_signed_commits/index.md[Signing commits with GPG] to learn how to generate a GPG key and configure your local repository to automatically sign your commits.
   If you have trouble setting up a GPG key or associating it with your account, reach out to the project team on the {url-dev-list}[development mailing list].

   [#mr-workflow]
   == Merge request workflow steps

   Follow the steps below each time you work on a new solution for an issue.

   . Is the change you want to submit the solution to an issue in the issue tracker (as it should be in almost all cases)?
   If yes:
   .. Make sure the issue is <<issue-open,ready for an MR>>.
   .. Assign yourself to the issue.
   Type the quick action `/assign me` in a comment on the issue and submit it.

   . When you're ready to make your changes, update the issue's status to active.
   .. Type the quick action `/label ~status::active` in a comment on the issue and submit it.
   Any previous status label will be automatically removed.

   . In your local repository, create a new branch where you'll work on your changes (never submit an MR from your main branch).
   .. Name your branch using the issue number it solves along with a short textual hint, e.g., `issue-2-short-description`.
   This will make your MR easier to review.

   . If the change is small, such as a typo or formatting fix, and therefore doesn't require an issue, create a new branch in your local repository where you'll work on your changes.
   .. The branch name should be a short textual hint, e.g., `fix-short-description`.

   . Make your changes in your new branch.
   .. Don't refactor, reformat, or clean up code or content that isn't directly related to the issue the MR resolves.

   . Commit your changes.
   .. Commit messages should be short yet specific.
   The message should reference the issue it addresses using a https://gitlab.eclipse.org/help/user/project/issues/managing_issues.md#closing-issues-automatically[closing pattern] and provide a brief description, e.g., `fixes #1 short description`, `resolves #1 short description`, or `closes #1 short description`.
   This will make your MR easier to review and approve.
   .. Only create more than one commit per MR when individual significant changes should be called out in the repository's log.
   .. Squash or amend your commits when you iterate over the files multiple times, forgot to add a change or file, etc.

   . Push the branch to your remote fork.
   . Submit the branch as a MR using the GitLab interface or URL displayed in your terminal after you push your branch.
   .. Like the commit message, the MR title should reference the issue it addresses using a https://gitlab.eclipse.org/help/user/project/issues/managing_issues.md#closing-issues-automatically[closing pattern] and provide a short description, e.g., `fixes #1 short description`, `resolves #1 short description`, or `closes #1 short description`.
   This will make your MR easier to review.
   .. If you’re still working on your MR and want feedback on it before it's complete, prefix the MR title with WIP: (e.g., `WIP: resolves #2 add build test`) or Draft:.
   When the MR is ready for final review, remove WIP: or Draft: from the MR title.

   . A member of the project team will review your MR.
   During the review, they may request changes to your MR.
   .. An MR won't be approved until the changes are complete, correct, and well-formed (meaning it passes all automated and manual tests, linting, team reviews, etc.).
   . The reviewer may ask you to squash or amend your commits prior to approving and merging your MR.


/process/scope.adoc
===================

.. code-block: asciidoc

   = AsciiDoc Language Project Scope

   The AsciiDoc language project scope was approved as part of the https://projects.eclipse.org/proposals/asciidoc-language[project proposal] on July 27, 2020 by the AsciiDoc Working Group Steering Committee.
   The scope was later tightened and approved on November 16, 2022 as part of the first progress review, which is summarized in https://gitlab.eclipse.org/eclipse/asciidoc-lang/asciidoc-lang/-/issues/11[issue #11].
   The AsciiDoc WG Steering Committee acts as the Specification Committee as stated in the https://www.eclipse.org/org/workinggroups/asciidoc-charter.php[working group's charter].

   == Approved scope

   The AsciiDoc language project defines and maintains the AsciiDoc Language Specification and Technology Compatibility Kit (TCK), its artifacts, and a writer-oriented language guide.
   The AsciiDoc Language Specification describes the syntax and grammar, Abstract Semantic Graph (ASG), Document Object Model (DOM) interfaces, referencing system, designated extension points, processing phases, and required integrations and behaviors.
   The TCK is used to verify and self-certify that an AsciiDoc processor implementation is compatible with this specification.

   Specifically, the project scope includes the following matters:

   * AsciiDoc language syntax / grammar (i.e., EBNF, ANTLR4, or similar)
   ** Lexicon
   ** Preliminaries / primitives (e.g., line-oriented, block, inline, macro, preprocessor directive, etc.)
   ** Doctype-specific structures and required elements
   ** Built-in attributes and reserved attribute namespaces
   ** Designated file extension (.adoc)
   ** Escaping mechanism
   * TCK: Technology Compatibility Kit for verifying and self-certifying compliance of an AsciiDoc language processor
   * ASG: an encoded form of the parsed document for use in developing a language-agnostic TCK (e.g., JSON)
   * DOM API (interfaces only): language-agnostic, semantic representation of the structure, metadata, and content in the AsciiDoc document
   * Parsing strategy / processing phases (preprocess, parse, convert)
   * Extension Facility
   ** Syntax extension points (e.g., custom block or macro)
   ** Resolvers (e.g., path and attribute resolvers, ID generator)
   ** Lifecycle interceptors (e.g., preprocessor, output processor, tree processor)
   * Internal and external referencing system: (e.g., xrefs, includes, images)
   * Mandatory integration adapters: syntax highlighter, STEM, docinfo, icons
   * Expected converter behaviors (e.g., toc, ID generation, caption numbering, collapsible blocks)

   In addition to the specification document and TCK, the project also provides the following:

   * AsciiDoc Language guide for writers
   * ASG schema for the TCK
   * API documentation for the DOM

   NOTE: The project scope is also published on the https://projects.eclipse.org/projects/asciidoc.asciidoc-lang/governance[Governance page] of the project site.

   == Scope changes

   Any revisions to the project scope, with the exception of minor corrections that don't change semantic meanings or intent, require a https://www.eclipse.org/projects/dev_process/#6_3_8_Restructuring_Review[restructuring review] and approval by a majority of the Steering Committee.


/process/governance.adoc
========================

.. code-block: asciidoc

   = Project Governance

   == Project Team

   The project team is the collective of active committers with responsibilities and privileges on this project.

   [#values]
   == Values and Conduct

   As part of being an Eclipse Foundation project, this project community is expected to follow and uphold the https://www.eclipse.org/org/documents/Community_Code_of_Conduct.php[Eclipse Community Code of Conduct].
   We, as the project community, pledge to uphold this code to foster a professional, respectful, and welcoming environment.

   Participants that use passive-aggressive, disrespectful, or dismissive language or tones, act unprofessionally, or otherwise violate the Code of Conduct will receive a warning from the Project Team informing them that their actions are not acceptable.
   If a second incident occurs, the Project Team may ask the individual to voluntarily leave the community for a period of time and/or send a mailto:codeofconduct@eclipse.org[code of conduct report to the Eclipse Foundation].

   Any community member can submit a code of conduct report to Eclipse.
   An individual doesn't need to wait for the Project Team to take action.
   Nor does that individual need to inform the Project Team that they are filing a code of conduct report.

   [#decision-process]
   == Decision process

   Technical, editorial, and governance decisions are made using the following methods.

   === Silent consensus

   Silent consensus is the default decision mechanism for this project.
   When an issue is filed, a project team member will review it for completeness and assign labels to it.
   Issues that have passed triage (`triage: passed` label) and merge requests (MRs) that aren't flagged for an assessment review, a request for changes, or a request for more information, can be accepted by silent consensus.
   *Silent consensus cannot be reached until the issue or MR has been available for comment for at least 48 hours (not counting weekends or holidays).*
   This allows everyone to have enough time to evaluate and respond to the issue or MR.
   Additionally, MRs should be reviewed by at least one project team member.
   A team member cannot review their own MR.
   If no one <<objections,objects>> by the end of the silent consensus period, the issue or MR is accepted by the project.

   === Assessments

   When an issue is flagged for an assessment review, a self-selecting group of community members will work with the issue submitter to evaluate the proposal and address any concerns about its completeness, scope, feasibility, impacts, etc.
   Once the group reaches consensus on the proposal, the updated proposal is then subject to silent consensus.
   In some cases, a draft MR may be submitted during an assessment review to refine possible solutions and discover obstacles.
   The issue is accepted and a MR implementing the proposal can be submitted if no one objects during the consensus period.

   [#objections]
   === Objections

   Any objections to an issue or MR must include a clear reason for that objection, and, where possible, provide a set of actionable steps alongside the objection.
   The objector must remain responsive for further discussion about the issue or MR until their concerns are resolved or they withdraw their objection.
   If the objector isn't responsive for 7 days after they raised the objection or they're unable to clarify their objection if asked for further information by the project team, the project team can dismiss the objection.

   === Voting

   If consensus can't be reached on an issue or MR that introduces significant breaking changes, but a decision one way or the other must be made, a team member may call for a vote.

   A vote must be open for at least five days or until a majority of active project members have voted when further votes won't change the final decision.
   The end date should be clearly stated in the call to vote.

   Votes are performed electronically using a yes/no/abstain reply system, where +1 is yes, -1 is not, and 0 is abstain.
   No other responses are recognized.

   When a vote is called on an issue or MR, a majority of active project team members must vote in favor (yes) for a proposal to be approved.


/process/release-plan.adoc
==========================

.. code-block: asciidoc

   = AsciiDoc Language Specification Release Plan

   The https://projects.eclipse.org/proposals/asciidoc-language[project proposal] serves as the release plan for the first release of the AsciiDoc Language Specification.
   The completion of the https://projects.eclipse.org/projects/technology.asciidoc/reviews/creation-review[creation review] and acceptance of the project by the Steering Committee kicked off the first release cycle of the specification.
   This release cycle's <<goal,goal>> and <<schedule,project schedule>> were approved as part of the project proposal by the Steering Committee on July 27, 2020.

   [#goal]
   == Goal

   The goal of the first, stable version of the specification is to match the AsciiDoc language as described by Asciidoctor 2.0.x as best as possible to minimize syntax and structure impacts on active AsciiDoc documents, but not propagate deprecations.

   [#schedule]
   == Project scheduling

   In the project proposal, the scheduling was described as follows:

   [quote]
   The initial contributions are expected to be ready in Q2 2020.
   Once the initial contributions are accepted and the project infrastructure and team process established, the plan is to iterate on the specification and TCK in coordination with projects that are working to provide a compatible implementation.

   === Initial contribution timeline [Done]

   * [x] The Asciidoctor project prepared the end user documentation for AsciiDoc to serve as the initial contribution.
   * [x] The initial contribution for the AsciiDoc Language was submitted to Eclipse for IP review on November 16, 2020.
   * [x] The initial contribution received IP clearance on January 6, 2021.
   * [x] The initial contribution was merged into the https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang[asciidoc-lang repository] on February 16, 2021.

   == Release plan changes

   The Steering Committee must be notified of any progress or release review date changes after a release plan is approved.


/process/release-and-progress-reviews.adoc
==========================================

.. code-block: asciidoc

   = Release and Progress Reviews for Specification Versions

   This document summarizes the purpose and requirements of progress and release reviews to help orient team members not familiar with Eclipse Foundation processes.
   The project team is responsible for conducting the applicable reviews during a release cycle as specified by the https://www.eclipse.org/projects/efsp/[Eclipse Foundation Specification Process] (EFSP) and the project's current release plan.

   == Specification versioning and release cycles

   The AsciiDoc Language Specification uses semantic versioning.
   Each release is versioned *major.minor.patch*.

   Major::
   Major releases (e.g., 1.0.0) occur when there are substantial changes in functionality or when new functionality breaks backwards compatibility.

   Minor::
   Minor releases (e.g., 1.1.0) add new features, improve existing features, and fix bugs while maintaining backwards compatibility."

   [[patch]]Patch::
   Patch releases (e.g., 1.1.1) fix bugs and make minor clarifications while maintaining backwards compatibility.
   They don't include new features or breaking changes.
   Patch releases map to Eclipse's definition of a https://www.eclipse.org/projects/efsp/#efsp-releases-service[service release].

   Milestone build::
   A milestone build (e.g., 1.0.0-alpha.1, 1.0.0-beta.3, 1.0.0-rc.1) is a prerelease meant for early adopters to test.
   It isn't a final release and isn't to be distributed for official or general usage.
   At least one milestone build must be produced prior to the release of a major or minor version.

   Each major and minor version of the specification must satisfy the EFSP release cycle's plan and release review requirements.
   The release cycle for a major or minor specification version starts with the approval of a release plan.
   It ends with the completion of a release review that results in the approval of the specification version's final build and the official release and distribution of its artifacts.
   If a release cycle has lasted more than 12 months without a release or progress review, the project team must produce a milestone build and initiate a progress review in order to extend the release cycle.

   A patch version of the specification (i.e., https://www.eclipse.org/projects/efsp/#efsp-releases-service[EFSP service release]) doesn't require an independent release cycle.
   It does need to meet all the following requirements to be considered for release as a patch version of the specification:

   * The patch version must meet the scope of a <<patch,patch>>.
   * The major or minor version the release is patching must have completed a <<release-review,successful release review>>.
   * The patch version must complete its own release review successful before it can be released and distributed for general usage.

   See the EFPS for complete descriptions of the https://www.eclipse.org/projects/efsp/#efsp-version-lifecycle[specification version release cycle] and https://www.eclipse.org/projects/efsp/#efsp-milestones[milestone builds].

   === Pre-1.0.0 versioning

   Prior to creating feature complete milestone builds in preparation for the final specification release, the project will release milestone builds labeled as _0.y.z_ (e.g., 0.1.5, 0.2.0).
   These builds are one of the ways the project will mark and celebrate achievements on our path to feature complete milestone builds.

   These milestone builds will use a zero in the first position (i.e., 0.y.z).
   The _y_ will increment when a significant feature is added to the specification or its TCK (e.g., 0.3.0. 0.4.0).
   The _z_ will increment when the build only contains improvements, changes, or fixes to existing features (e.g., 0.3.2. 0.4.1).
   These milestone builds will likely include breaking changes from one build to the next and will not be backwards compatible.
   These builds are not official, are not for general usage, and should not be considered feature complete.

   Once the project team determines that the specification is approaching feature completeness, the _0.y.z_ pattern will cease being used.
   At that time, all future milestone builds will use semantic versioning as the project team prepares for releasing version 1.0.0 of the specification (e.g., 1.0.0-alpha.1).
   This subsection should be removed from this document at the start of the subsequent release cycle.

   == Release and progress reviews

   Progress and release reviews describe a specification version's major changes and provide persistent artifacts that demonstrate these changes to the community, Steering Committee, Project Management Chain (PMC), and Eclipse Management Organization (EMO) for evaluation and feedback.
   A release review corresponds to the final build of a major, minor, or patch specification version that, if approved, is released for general availability and distributed.
   If a progress review is conducted, it must be paired with a milestone build of a specification version.

   === Team responsibilities for reviews

   Project Team::
   * The https://gitlab.eclipse.org/eclipse/asciidoc/asciidoc-lang/-/project_members[project team] must prepare at least one milestone build or one final release build of a specification version within a 12 month period.
   * A project team member can volunteer to manage a review.
   This team member is then responsible for coordinating a review's documentation and supporting materials, submitting it to the required groups, and posting notifications and updates as needed.
   * The project team must complete all the necessary due diligence according to the https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf[Eclipse IP Policy] before starting a review.

   Project Leads::
   * The project leads are responsible for initiating the appropriate review based on the release cycle stage, release plan, and EFPS requirements.
   * The project leads are responsible for managing a scheduled review unless another team member has volunteered to coordinate it.

   [#release-review]
   === Release review requirements

   A release review must be conducted for every major, minor, and patch release of a specification version.

   . A project lead or team member volunteers to be the review coordinator for a release review.
   . If the review is for a major or minor release, the review coordinator confirms that a milestone build was produced and available to early adopters for a minimum of 14 days prior to the final build of the release being staged.
   . If the review is for a patch release, the review coordinator confirms that the patch release:
   .. Meets the scope of a <<patch,patch>>.
   .. That the major or minor version the release is patching has completed a successful release review.
   . The project team stages the final build of the specification version's artifacts.
   These artifacts must be persistent for public record and can't be changed once the review process starts.
   . The review coordinator assembles the release review's documentation.
   The review documentation:
   .. Summarizes the specification version's major accomplishments, changes, and removals/deprecations.
   .. Provides links to the persistent artifacts or directly includes the artifacts when delivered.
   .. Shows evidence that the specification version's TCK has sufficient coverage to confidently validate compatible implementations.
   .. Shows evidence that one or more compatible implementations meet all the TCK's requirements and optional aspects.
   . The review coordinator delivers the review documentation and artifacts to the PMC and requests a review be initiated.
   . When the PMC approves the review documentation and that the review can proceed, the review coordinator delivers the review documentation and artifacts to the EMO and asks the EMO to schedule the review.
   . The review coordinator delivers the review documentation and artifacts to the Steering Committee.
   . The release review is complete when it's approved by the EMO and the Steering Committee.
   . At the successful completion of a release review, the specification version's artifacts are released for general availability and distributed.

   NOTE: This document only focuses on progress and release reviews.
   There are other types of reviews, such as https://www.eclipse.org/projects/efsp/#efsp-reviews-plan[plan reviews] and https://www.eclipse.org/projects/dev_process/#6_3_8_Restructuring_Review[restructuring reviews].

   === Progress review requirements

   A progress review can be undertaken during the release cycle voluntarily as the team sees fit.
   It's only required when the current release cycle has gone on for 12 months without a release or progress review.
   A milestone build must accompany a progress review.

   . A project lead or team member volunteers to be the review coordinator for a progress review.
   . The project team stages the milestone build's artifacts.
   These artifacts must be persistent for public record and can't be changed once the review process starts.
   . The review coordinator assembles the progress review's documentation.
   The review documentation:
   .. Concisely describes the major changes that have been committed since the last progress or release review.
   .. Lists any architectural, functional, compatibility, or performance issues that still need to be addressed in order to satisfy the current release plan.
   .. Provides links to the persistent artifacts or directly includes the artifacts when delivered.
   . The review coordinator delivers the review documentation and artifacts to the PMC and requests a review be initiated.
   . When the PMC approves the review documentation and that the review can proceed, the review coordinator delivers the review documentation and artifacts to the EMO and asks the EMO to schedule the review.
   . The review coordinator delivers the review documentation and artifacts to the Steering Committee.
   . The progress review is complete when it's approved by the EMO and the Steering Committee.

   WARNING: A progress review can't be combined or overlap with a release review.

   == Reference materials

   The content in this document borrows heavily from the process documentation published by the Eclipse Foundation.
   The steps listed in the above sections are an amalgamation of the review and release cycle information presented in the EFSP, Eclipse Development Process (EDP), and Eclipse Handbook.
   Specifically, see:

   .Release cycle and versioning
   * https://www.eclipse.org/projects/efsp/#efsp-version-lifecycle[Specification version lifecycle (EFSP)].
   * https://www.eclipse.org/projects/handbook/#specifications-development[Specification development cycle (Handbook)].
   * Releases and versions as described by the https://www.eclipse.org/projects/efsp/#efsp-releases[EFSP], the https://www.eclipse.org/projects/dev_process/#6_4_Releases[EDP], and the https://www.eclipse.org/projects/handbook/#release[Handbook].
   ** More information about https://www.eclipse.org/projects/handbook/#release-milestones[milestone and release candidates (Handbook)].

   .Reviews (process overview)
   * General review information as described by the https://www.eclipse.org/projects/efsp/#efsp-reviews[EFSP] and the https://www.eclipse.org/projects/handbook/#specification-project-reviews[Handbook].
   * Overview of https://www.eclipse.org/projects/handbook/#release-review[progress and release reviews (Handbook)].

   .Release reviews
   * Release reviews as described by the https://www.eclipse.org/projects/efsp/#efsp-reviews-release[EFSP], the https://www.eclipse.org/projects/dev_process/#6_3_3_Release_Review[EDP], and the https://www.eclipse.org/projects/handbook/#specifications-release-review[Handbook (for specifications)].
   * More information about https://www.eclipse.org/projects/handbook/#pmi-releases[release and review records (Handbook)].

   .Progress reviews
   * Progress reviews as described by the https://www.eclipse.org/projects/efsp/#efsp-reviews-progress[EFSP], the https://www.eclipse.org/projects/dev_process/#6_3_5_Progress_Review[EDP], and the https://www.eclipse.org/projects/handbook/#specifications-progress-review[Handbook].
